

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 28 01:30:01 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	idataBANK6,global,class=CODE,delta=2
    11                           	psect	idataBANK7,global,class=CODE,delta=2
    12                           	psect	idataBANK8,global,class=CODE,delta=2
    13                           	psect	idataBANK10,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x920,80
    87                           	dabs	1,0x8C6,42
    88                           	dabs	1,0x8A0,38
    89                           	dabs	1,0x820,80
    90                           	dabs	1,0x7A0,80
    91                           	dabs	1,0x720,80
    92                           	dabs	1,0x6A0,80
    93                           	dabs	1,0x620,80
    94                           	dabs	1,0x5A0,80
    95                           	dabs	1,0x56E,2
    96                           	dabs	1,0x236E,0,_delayArray
    97                           	dabs	1,0x2576,0,_mod5
    98                           	dabs	1,0x7E,2
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0099                     	;# 
   142  009A                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  011D                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  018F                     	;# 
   159  0190                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020D                     	;# 
   193  020F                     	;# 
   194  0210                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021E                     	;# 
   216  021F                     	;# 
   217  028C                     	;# 
   218  028D                     	;# 
   219  0291                     	;# 
   220  0291                     	;# 
   221  0292                     	;# 
   222  0293                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  029F                     	;# 
   230  030C                     	;# 
   231  030D                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  040C                     	;# 
   250  040D                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  048D                     	;# 
   268  0491                     	;# 
   269  0491                     	;# 
   270  0492                     	;# 
   271  0492                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0494                     	;# 
   276  0494                     	;# 
   277  0495                     	;# 
   278  0495                     	;# 
   279  0496                     	;# 
   280  0496                     	;# 
   281  0497                     	;# 
   282  0497                     	;# 
   283  0595                     	;# 
   284  0596                     	;# 
   285  0597                     	;# 
   286  059C                     	;# 
   287  059D                     	;# 
   288  059E                     	;# 
   289  0611                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061D                     	;# 
   306  061D                     	;# 
   307  061E                     	;# 
   308  061F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  008F                     	;# 
   354  0090                     	;# 
   355  0091                     	;# 
   356  0092                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0110                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018F                     	;# 
   380  0190                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  020F                     	;# 
   415  0210                     	;# 
   416  0211                     	;# 
   417  0211                     	;# 
   418  0212                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0213                     	;# 
   422  0214                     	;# 
   423  0214                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0216                     	;# 
   428  0216                     	;# 
   429  0217                     	;# 
   430  0217                     	;# 
   431  0219                     	;# 
   432  021A                     	;# 
   433  021B                     	;# 
   434  021C                     	;# 
   435  021D                     	;# 
   436  021E                     	;# 
   437  021F                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  0291                     	;# 
   441  0291                     	;# 
   442  0292                     	;# 
   443  0293                     	;# 
   444  0298                     	;# 
   445  0298                     	;# 
   446  0299                     	;# 
   447  029A                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  029F                     	;# 
   451  030C                     	;# 
   452  030D                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  031C                     	;# 
   462  031C                     	;# 
   463  031D                     	;# 
   464  031E                     	;# 
   465  038C                     	;# 
   466  038D                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  040C                     	;# 
   471  040D                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  048D                     	;# 
   489  0491                     	;# 
   490  0491                     	;# 
   491  0492                     	;# 
   492  0492                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0494                     	;# 
   497  0494                     	;# 
   498  0495                     	;# 
   499  0495                     	;# 
   500  0496                     	;# 
   501  0496                     	;# 
   502  0497                     	;# 
   503  0497                     	;# 
   504  0595                     	;# 
   505  0596                     	;# 
   506  0597                     	;# 
   507  059C                     	;# 
   508  059D                     	;# 
   509  059E                     	;# 
   510  0611                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  0614                     	;# 
   516  0615                     	;# 
   517  0616                     	;# 
   518  0617                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  061A                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061D                     	;# 
   527  061D                     	;# 
   528  061E                     	;# 
   529  061F                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0116                     	;# 
   596  0117                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018F                     	;# 
   601  0190                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0197                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  020D                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0219                     	;# 
   653  021A                     	;# 
   654  021B                     	;# 
   655  021C                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029D                     	;# 
   670  029E                     	;# 
   671  029F                     	;# 
   672  030C                     	;# 
   673  030D                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  031C                     	;# 
   683  031C                     	;# 
   684  031D                     	;# 
   685  031E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  040C                     	;# 
   692  040D                     	;# 
   693  0411                     	;# 
   694  0411                     	;# 
   695  0412                     	;# 
   696  0413                     	;# 
   697  0414                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  0418                     	;# 
   702  0418                     	;# 
   703  0419                     	;# 
   704  041A                     	;# 
   705  041B                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  048D                     	;# 
   710  0491                     	;# 
   711  0491                     	;# 
   712  0492                     	;# 
   713  0492                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0494                     	;# 
   718  0494                     	;# 
   719  0495                     	;# 
   720  0495                     	;# 
   721  0496                     	;# 
   722  0496                     	;# 
   723  0497                     	;# 
   724  0497                     	;# 
   725  0595                     	;# 
   726  0596                     	;# 
   727  0597                     	;# 
   728  059C                     	;# 
   729  059D                     	;# 
   730  059E                     	;# 
   731  0611                     	;# 
   732  0611                     	;# 
   733  0612                     	;# 
   734  0613                     	;# 
   735  0614                     	;# 
   736  0614                     	;# 
   737  0615                     	;# 
   738  0616                     	;# 
   739  0617                     	;# 
   740  0617                     	;# 
   741  0618                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061A                     	;# 
   745  061B                     	;# 
   746  061C                     	;# 
   747  061D                     	;# 
   748  061D                     	;# 
   749  061E                     	;# 
   750  061F                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0016                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001C                     	;# 
   792  008C                     	;# 
   793  008D                     	;# 
   794  008E                     	;# 
   795  008F                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0095                     	;# 
   802  0096                     	;# 
   803  0097                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0110                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018F                     	;# 
   822  0190                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0197                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020D                     	;# 
   856  020F                     	;# 
   857  0210                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0216                     	;# 
   871  0217                     	;# 
   872  0217                     	;# 
   873  0219                     	;# 
   874  021A                     	;# 
   875  021B                     	;# 
   876  021C                     	;# 
   877  021D                     	;# 
   878  021E                     	;# 
   879  021F                     	;# 
   880  028C                     	;# 
   881  028D                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029D                     	;# 
   891  029E                     	;# 
   892  029F                     	;# 
   893  030C                     	;# 
   894  030D                     	;# 
   895  0311                     	;# 
   896  0311                     	;# 
   897  0312                     	;# 
   898  0313                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  040C                     	;# 
   913  040D                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  048D                     	;# 
   931  0491                     	;# 
   932  0491                     	;# 
   933  0492                     	;# 
   934  0492                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0494                     	;# 
   939  0494                     	;# 
   940  0495                     	;# 
   941  0495                     	;# 
   942  0496                     	;# 
   943  0496                     	;# 
   944  0497                     	;# 
   945  0497                     	;# 
   946  0595                     	;# 
   947  0596                     	;# 
   948  0597                     	;# 
   949  059C                     	;# 
   950  059D                     	;# 
   951  059E                     	;# 
   952  0611                     	;# 
   953  0611                     	;# 
   954  0612                     	;# 
   955  0613                     	;# 
   956  0614                     	;# 
   957  0614                     	;# 
   958  0615                     	;# 
   959  0616                     	;# 
   960  0617                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061D                     	;# 
   969  061D                     	;# 
   970  061E                     	;# 
   971  061F                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018F                     	;# 
  1043  0190                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020D                     	;# 
  1077  020F                     	;# 
  1078  0210                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  028C                     	;# 
  1102  028D                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029D                     	;# 
  1112  029E                     	;# 
  1113  029F                     	;# 
  1114  030C                     	;# 
  1115  030D                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  031C                     	;# 
  1125  031C                     	;# 
  1126  031D                     	;# 
  1127  031E                     	;# 
  1128  038C                     	;# 
  1129  038D                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  040C                     	;# 
  1134  040D                     	;# 
  1135  0411                     	;# 
  1136  0411                     	;# 
  1137  0412                     	;# 
  1138  0413                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  0418                     	;# 
  1145  0419                     	;# 
  1146  041A                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  048D                     	;# 
  1152  0491                     	;# 
  1153  0491                     	;# 
  1154  0492                     	;# 
  1155  0492                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0494                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0495                     	;# 
  1163  0496                     	;# 
  1164  0496                     	;# 
  1165  0497                     	;# 
  1166  0497                     	;# 
  1167  0595                     	;# 
  1168  0596                     	;# 
  1169  0597                     	;# 
  1170  059C                     	;# 
  1171  059D                     	;# 
  1172  059E                     	;# 
  1173  0611                     	;# 
  1174  0611                     	;# 
  1175  0612                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0614                     	;# 
  1179  0615                     	;# 
  1180  0616                     	;# 
  1181  0617                     	;# 
  1182  0617                     	;# 
  1183  0618                     	;# 
  1184  0619                     	;# 
  1185  061A                     	;# 
  1186  061A                     	;# 
  1187  061B                     	;# 
  1188  061C                     	;# 
  1189  061D                     	;# 
  1190  061D                     	;# 
  1191  061E                     	;# 
  1192  061F                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  000F                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0116                     	;# 
  1259  0117                     	;# 
  1260  011D                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018F                     	;# 
  1264  0190                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0197                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  020D                     	;# 
  1298  020F                     	;# 
  1299  0210                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0298                     	;# 
  1329  0298                     	;# 
  1330  0299                     	;# 
  1331  029A                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0318                     	;# 
  1342  0318                     	;# 
  1343  0319                     	;# 
  1344  031A                     	;# 
  1345  031C                     	;# 
  1346  031C                     	;# 
  1347  031D                     	;# 
  1348  031E                     	;# 
  1349  038C                     	;# 
  1350  038D                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  040C                     	;# 
  1355  040D                     	;# 
  1356  0411                     	;# 
  1357  0411                     	;# 
  1358  0412                     	;# 
  1359  0413                     	;# 
  1360  0414                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  0418                     	;# 
  1365  0418                     	;# 
  1366  0419                     	;# 
  1367  041A                     	;# 
  1368  041B                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  048D                     	;# 
  1373  0491                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0492                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0494                     	;# 
  1381  0494                     	;# 
  1382  0495                     	;# 
  1383  0495                     	;# 
  1384  0496                     	;# 
  1385  0496                     	;# 
  1386  0497                     	;# 
  1387  0497                     	;# 
  1388  0595                     	;# 
  1389  0596                     	;# 
  1390  0597                     	;# 
  1391  059C                     	;# 
  1392  059D                     	;# 
  1393  059E                     	;# 
  1394  0611                     	;# 
  1395  0611                     	;# 
  1396  0612                     	;# 
  1397  0613                     	;# 
  1398  0614                     	;# 
  1399  0614                     	;# 
  1400  0615                     	;# 
  1401  0616                     	;# 
  1402  0617                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  061A                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061D                     	;# 
  1411  061D                     	;# 
  1412  061E                     	;# 
  1413  061F                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  000F                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0016                     	;# 
  1448  0016                     	;# 
  1449  0017                     	;# 
  1450  0018                     	;# 
  1451  0019                     	;# 
  1452  001A                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  008F                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0094                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  010F                     	;# 
  1478  0110                     	;# 
  1479  0116                     	;# 
  1480  0117                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0197                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  020D                     	;# 
  1519  020F                     	;# 
  1520  0210                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  029F                     	;# 
  1556  030C                     	;# 
  1557  030D                     	;# 
  1558  0311                     	;# 
  1559  0311                     	;# 
  1560  0312                     	;# 
  1561  0313                     	;# 
  1562  0318                     	;# 
  1563  0318                     	;# 
  1564  0319                     	;# 
  1565  031A                     	;# 
  1566  031C                     	;# 
  1567  031C                     	;# 
  1568  031D                     	;# 
  1569  031E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  040C                     	;# 
  1576  040D                     	;# 
  1577  0411                     	;# 
  1578  0411                     	;# 
  1579  0412                     	;# 
  1580  0413                     	;# 
  1581  0414                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  0418                     	;# 
  1586  0418                     	;# 
  1587  0419                     	;# 
  1588  041A                     	;# 
  1589  041B                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  048D                     	;# 
  1594  0491                     	;# 
  1595  0491                     	;# 
  1596  0492                     	;# 
  1597  0492                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0494                     	;# 
  1602  0494                     	;# 
  1603  0495                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  0496                     	;# 
  1607  0497                     	;# 
  1608  0497                     	;# 
  1609  0595                     	;# 
  1610  0596                     	;# 
  1611  0597                     	;# 
  1612  059C                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  0611                     	;# 
  1616  0611                     	;# 
  1617  0612                     	;# 
  1618  0613                     	;# 
  1619  0614                     	;# 
  1620  0614                     	;# 
  1621  0615                     	;# 
  1622  0616                     	;# 
  1623  0617                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  061A                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061D                     	;# 
  1632  061D                     	;# 
  1633  061E                     	;# 
  1634  061F                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  000F                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0013                     	;# 
  1666  0014                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  008F                     	;# 
  1680  0090                     	;# 
  1681  0091                     	;# 
  1682  0092                     	;# 
  1683  0093                     	;# 
  1684  0094                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  010C                     	;# 
  1696  010D                     	;# 
  1697  010E                     	;# 
  1698  010F                     	;# 
  1699  0110                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020D                     	;# 
  1740  020F                     	;# 
  1741  0210                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0219                     	;# 
  1758  021A                     	;# 
  1759  021B                     	;# 
  1760  021C                     	;# 
  1761  021D                     	;# 
  1762  021E                     	;# 
  1763  021F                     	;# 
  1764  028C                     	;# 
  1765  028D                     	;# 
  1766  0291                     	;# 
  1767  0291                     	;# 
  1768  0292                     	;# 
  1769  0293                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  030C                     	;# 
  1778  030D                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0318                     	;# 
  1784  0318                     	;# 
  1785  0319                     	;# 
  1786  031A                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  040C                     	;# 
  1797  040D                     	;# 
  1798  0411                     	;# 
  1799  0411                     	;# 
  1800  0412                     	;# 
  1801  0413                     	;# 
  1802  0414                     	;# 
  1803  0415                     	;# 
  1804  0416                     	;# 
  1805  0417                     	;# 
  1806  0418                     	;# 
  1807  0418                     	;# 
  1808  0419                     	;# 
  1809  041A                     	;# 
  1810  041B                     	;# 
  1811  041C                     	;# 
  1812  041D                     	;# 
  1813  041E                     	;# 
  1814  048D                     	;# 
  1815  0491                     	;# 
  1816  0491                     	;# 
  1817  0492                     	;# 
  1818  0492                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0494                     	;# 
  1823  0494                     	;# 
  1824  0495                     	;# 
  1825  0495                     	;# 
  1826  0496                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0497                     	;# 
  1830  0595                     	;# 
  1831  0596                     	;# 
  1832  0597                     	;# 
  1833  059C                     	;# 
  1834  059D                     	;# 
  1835  059E                     	;# 
  1836  0611                     	;# 
  1837  0611                     	;# 
  1838  0612                     	;# 
  1839  0613                     	;# 
  1840  0614                     	;# 
  1841  0614                     	;# 
  1842  0615                     	;# 
  1843  0616                     	;# 
  1844  0617                     	;# 
  1845  0617                     	;# 
  1846  0618                     	;# 
  1847  0619                     	;# 
  1848  061A                     	;# 
  1849  061A                     	;# 
  1850  061B                     	;# 
  1851  061C                     	;# 
  1852  061D                     	;# 
  1853  061D                     	;# 
  1854  061E                     	;# 
  1855  061F                     	;# 
  1856  0FE4                     	;# 
  1857  0FE5                     	;# 
  1858  0FE6                     	;# 
  1859  0FE7                     	;# 
  1860  0FE8                     	;# 
  1861  0FE9                     	;# 
  1862  0FEA                     	;# 
  1863  0FEB                     	;# 
  1864  0FED                     	;# 
  1865  0FEE                     	;# 
  1866  0FEF                     	;# 
  1867  0000                     	;# 
  1868  0001                     	;# 
  1869  0002                     	;# 
  1870  0003                     	;# 
  1871  0004                     	;# 
  1872  0005                     	;# 
  1873  0006                     	;# 
  1874  0007                     	;# 
  1875  0008                     	;# 
  1876  0009                     	;# 
  1877  000A                     	;# 
  1878  000B                     	;# 
  1879  000C                     	;# 
  1880  000D                     	;# 
  1881  000E                     	;# 
  1882  000F                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0013                     	;# 
  1887  0014                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  008F                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  010F                     	;# 
  1920  0110                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018F                     	;# 
  1927  0190                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0197                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  020D                     	;# 
  1961  020F                     	;# 
  1962  0210                     	;# 
  1963  0211                     	;# 
  1964  0211                     	;# 
  1965  0212                     	;# 
  1966  0212                     	;# 
  1967  0213                     	;# 
  1968  0213                     	;# 
  1969  0214                     	;# 
  1970  0214                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0216                     	;# 
  1975  0216                     	;# 
  1976  0217                     	;# 
  1977  0217                     	;# 
  1978  0219                     	;# 
  1979  021A                     	;# 
  1980  021B                     	;# 
  1981  021C                     	;# 
  1982  021D                     	;# 
  1983  021E                     	;# 
  1984  021F                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  0291                     	;# 
  1988  0291                     	;# 
  1989  0292                     	;# 
  1990  0293                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029D                     	;# 
  1996  029E                     	;# 
  1997  029F                     	;# 
  1998  030C                     	;# 
  1999  030D                     	;# 
  2000  0311                     	;# 
  2001  0311                     	;# 
  2002  0312                     	;# 
  2003  0313                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  038C                     	;# 
  2013  038D                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  040C                     	;# 
  2018  040D                     	;# 
  2019  0411                     	;# 
  2020  0411                     	;# 
  2021  0412                     	;# 
  2022  0413                     	;# 
  2023  0414                     	;# 
  2024  0415                     	;# 
  2025  0416                     	;# 
  2026  0417                     	;# 
  2027  0418                     	;# 
  2028  0418                     	;# 
  2029  0419                     	;# 
  2030  041A                     	;# 
  2031  041B                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  048D                     	;# 
  2036  0491                     	;# 
  2037  0491                     	;# 
  2038  0492                     	;# 
  2039  0492                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0494                     	;# 
  2044  0494                     	;# 
  2045  0495                     	;# 
  2046  0495                     	;# 
  2047  0496                     	;# 
  2048  0496                     	;# 
  2049  0497                     	;# 
  2050  0497                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0597                     	;# 
  2054  059C                     	;# 
  2055  059D                     	;# 
  2056  059E                     	;# 
  2057  0611                     	;# 
  2058  0611                     	;# 
  2059  0612                     	;# 
  2060  0613                     	;# 
  2061  0614                     	;# 
  2062  0614                     	;# 
  2063  0615                     	;# 
  2064  0616                     	;# 
  2065  0617                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  061A                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061D                     	;# 
  2074  061D                     	;# 
  2075  061E                     	;# 
  2076  061F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  000F                     	;# 
  2104  0010                     	;# 
  2105  0011                     	;# 
  2106  0012                     	;# 
  2107  0013                     	;# 
  2108  0014                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  008F                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0093                     	;# 
  2126  0094                     	;# 
  2127  0095                     	;# 
  2128  0096                     	;# 
  2129  0097                     	;# 
  2130  0099                     	;# 
  2131  009A                     	;# 
  2132  009B                     	;# 
  2133  009B                     	;# 
  2134  009C                     	;# 
  2135  009D                     	;# 
  2136  009E                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  010F                     	;# 
  2141  0110                     	;# 
  2142  0116                     	;# 
  2143  0117                     	;# 
  2144  011D                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018F                     	;# 
  2148  0190                     	;# 
  2149  0191                     	;# 
  2150  0191                     	;# 
  2151  0192                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0197                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  020D                     	;# 
  2182  020F                     	;# 
  2183  0210                     	;# 
  2184  0211                     	;# 
  2185  0211                     	;# 
  2186  0212                     	;# 
  2187  0212                     	;# 
  2188  0213                     	;# 
  2189  0213                     	;# 
  2190  0214                     	;# 
  2191  0214                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0216                     	;# 
  2196  0216                     	;# 
  2197  0217                     	;# 
  2198  0217                     	;# 
  2199  0219                     	;# 
  2200  021A                     	;# 
  2201  021B                     	;# 
  2202  021C                     	;# 
  2203  021D                     	;# 
  2204  021E                     	;# 
  2205  021F                     	;# 
  2206  028C                     	;# 
  2207  028D                     	;# 
  2208  0291                     	;# 
  2209  0291                     	;# 
  2210  0292                     	;# 
  2211  0293                     	;# 
  2212  0298                     	;# 
  2213  0298                     	;# 
  2214  0299                     	;# 
  2215  029A                     	;# 
  2216  029D                     	;# 
  2217  029E                     	;# 
  2218  029F                     	;# 
  2219  030C                     	;# 
  2220  030D                     	;# 
  2221  0311                     	;# 
  2222  0311                     	;# 
  2223  0312                     	;# 
  2224  0313                     	;# 
  2225  0318                     	;# 
  2226  0318                     	;# 
  2227  0319                     	;# 
  2228  031A                     	;# 
  2229  031C                     	;# 
  2230  031C                     	;# 
  2231  031D                     	;# 
  2232  031E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  040C                     	;# 
  2239  040D                     	;# 
  2240  0411                     	;# 
  2241  0411                     	;# 
  2242  0412                     	;# 
  2243  0413                     	;# 
  2244  0414                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  0418                     	;# 
  2249  0418                     	;# 
  2250  0419                     	;# 
  2251  041A                     	;# 
  2252  041B                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  048D                     	;# 
  2257  0491                     	;# 
  2258  0491                     	;# 
  2259  0492                     	;# 
  2260  0492                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0494                     	;# 
  2266  0495                     	;# 
  2267  0495                     	;# 
  2268  0496                     	;# 
  2269  0496                     	;# 
  2270  0497                     	;# 
  2271  0497                     	;# 
  2272  0595                     	;# 
  2273  0596                     	;# 
  2274  0597                     	;# 
  2275  059C                     	;# 
  2276  059D                     	;# 
  2277  059E                     	;# 
  2278  0611                     	;# 
  2279  0611                     	;# 
  2280  0612                     	;# 
  2281  0613                     	;# 
  2282  0614                     	;# 
  2283  0614                     	;# 
  2284  0615                     	;# 
  2285  0616                     	;# 
  2286  0617                     	;# 
  2287  0617                     	;# 
  2288  0618                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061A                     	;# 
  2292  061B                     	;# 
  2293  061C                     	;# 
  2294  061D                     	;# 
  2295  061D                     	;# 
  2296  061E                     	;# 
  2297  061F                     	;# 
  2298  0FE4                     	;# 
  2299  0FE5                     	;# 
  2300  0FE6                     	;# 
  2301  0FE7                     	;# 
  2302  0FE8                     	;# 
  2303  0FE9                     	;# 
  2304  0FEA                     	;# 
  2305  0FEB                     	;# 
  2306  0FED                     	;# 
  2307  0FEE                     	;# 
  2308  0FEF                     	;# 
  2309  0000                     	;# 
  2310  0001                     	;# 
  2311  0002                     	;# 
  2312  0003                     	;# 
  2313  0004                     	;# 
  2314  0005                     	;# 
  2315  0006                     	;# 
  2316  0007                     	;# 
  2317  0008                     	;# 
  2318  0009                     	;# 
  2319  000A                     	;# 
  2320  000B                     	;# 
  2321  000C                     	;# 
  2322  000D                     	;# 
  2323  000E                     	;# 
  2324  000F                     	;# 
  2325  0010                     	;# 
  2326  0011                     	;# 
  2327  0012                     	;# 
  2328  0013                     	;# 
  2329  0014                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  008F                     	;# 
  2343  0090                     	;# 
  2344  0091                     	;# 
  2345  0092                     	;# 
  2346  0093                     	;# 
  2347  0094                     	;# 
  2348  0095                     	;# 
  2349  0096                     	;# 
  2350  0097                     	;# 
  2351  0099                     	;# 
  2352  009A                     	;# 
  2353  009B                     	;# 
  2354  009B                     	;# 
  2355  009C                     	;# 
  2356  009D                     	;# 
  2357  009E                     	;# 
  2358  010C                     	;# 
  2359  010D                     	;# 
  2360  010E                     	;# 
  2361  010F                     	;# 
  2362  0110                     	;# 
  2363  0116                     	;# 
  2364  0117                     	;# 
  2365  011D                     	;# 
  2366  018C                     	;# 
  2367  018D                     	;# 
  2368  018F                     	;# 
  2369  0190                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020D                     	;# 
  2403  020F                     	;# 
  2404  0210                     	;# 
  2405  0211                     	;# 
  2406  0211                     	;# 
  2407  0212                     	;# 
  2408  0212                     	;# 
  2409  0213                     	;# 
  2410  0213                     	;# 
  2411  0214                     	;# 
  2412  0214                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0216                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0217                     	;# 
  2420  0219                     	;# 
  2421  021A                     	;# 
  2422  021B                     	;# 
  2423  021C                     	;# 
  2424  021D                     	;# 
  2425  021E                     	;# 
  2426  021F                     	;# 
  2427  028C                     	;# 
  2428  028D                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0298                     	;# 
  2434  0298                     	;# 
  2435  0299                     	;# 
  2436  029A                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  0311                     	;# 
  2443  0311                     	;# 
  2444  0312                     	;# 
  2445  0313                     	;# 
  2446  0318                     	;# 
  2447  0318                     	;# 
  2448  0319                     	;# 
  2449  031A                     	;# 
  2450  031C                     	;# 
  2451  031C                     	;# 
  2452  031D                     	;# 
  2453  031E                     	;# 
  2454  038C                     	;# 
  2455  038D                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  040C                     	;# 
  2460  040D                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  048D                     	;# 
  2478  0491                     	;# 
  2479  0491                     	;# 
  2480  0492                     	;# 
  2481  0492                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0494                     	;# 
  2486  0494                     	;# 
  2487  0495                     	;# 
  2488  0495                     	;# 
  2489  0496                     	;# 
  2490  0496                     	;# 
  2491  0497                     	;# 
  2492  0497                     	;# 
  2493  0595                     	;# 
  2494  0596                     	;# 
  2495  0597                     	;# 
  2496  059C                     	;# 
  2497  059D                     	;# 
  2498  059E                     	;# 
  2499  0611                     	;# 
  2500  0611                     	;# 
  2501  0612                     	;# 
  2502  0613                     	;# 
  2503  0614                     	;# 
  2504  0614                     	;# 
  2505  0615                     	;# 
  2506  0616                     	;# 
  2507  0617                     	;# 
  2508  0617                     	;# 
  2509  0618                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061A                     	;# 
  2513  061B                     	;# 
  2514  061C                     	;# 
  2515  061D                     	;# 
  2516  061D                     	;# 
  2517  061E                     	;# 
  2518  061F                     	;# 
  2519  0FE4                     	;# 
  2520  0FE5                     	;# 
  2521  0FE6                     	;# 
  2522  0FE7                     	;# 
  2523  0FE8                     	;# 
  2524  0FE9                     	;# 
  2525  0FEA                     	;# 
  2526  0FEB                     	;# 
  2527  0FED                     	;# 
  2528  0FEE                     	;# 
  2529  0FEF                     	;# 
  2530  0000                     	;# 
  2531  0001                     	;# 
  2532  0002                     	;# 
  2533  0003                     	;# 
  2534  0004                     	;# 
  2535  0005                     	;# 
  2536  0006                     	;# 
  2537  0007                     	;# 
  2538  0008                     	;# 
  2539  0009                     	;# 
  2540  000A                     	;# 
  2541  000B                     	;# 
  2542  000C                     	;# 
  2543  000D                     	;# 
  2544  000E                     	;# 
  2545  000F                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0016                     	;# 
  2553  0016                     	;# 
  2554  0017                     	;# 
  2555  0018                     	;# 
  2556  0019                     	;# 
  2557  001A                     	;# 
  2558  001B                     	;# 
  2559  001C                     	;# 
  2560  008C                     	;# 
  2561  008D                     	;# 
  2562  008E                     	;# 
  2563  008F                     	;# 
  2564  0090                     	;# 
  2565  0091                     	;# 
  2566  0092                     	;# 
  2567  0093                     	;# 
  2568  0094                     	;# 
  2569  0095                     	;# 
  2570  0096                     	;# 
  2571  0097                     	;# 
  2572  0099                     	;# 
  2573  009A                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  010C                     	;# 
  2580  010D                     	;# 
  2581  010E                     	;# 
  2582  010F                     	;# 
  2583  0110                     	;# 
  2584  0116                     	;# 
  2585  0117                     	;# 
  2586  011D                     	;# 
  2587  018C                     	;# 
  2588  018D                     	;# 
  2589  018F                     	;# 
  2590  0190                     	;# 
  2591  0191                     	;# 
  2592  0191                     	;# 
  2593  0192                     	;# 
  2594  0193                     	;# 
  2595  0193                     	;# 
  2596  0194                     	;# 
  2597  0195                     	;# 
  2598  0196                     	;# 
  2599  0197                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  020D                     	;# 
  2624  020F                     	;# 
  2625  0210                     	;# 
  2626  0211                     	;# 
  2627  0211                     	;# 
  2628  0212                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0213                     	;# 
  2632  0214                     	;# 
  2633  0214                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  0219                     	;# 
  2642  021A                     	;# 
  2643  021B                     	;# 
  2644  021C                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  0291                     	;# 
  2651  0291                     	;# 
  2652  0292                     	;# 
  2653  0293                     	;# 
  2654  0298                     	;# 
  2655  0298                     	;# 
  2656  0299                     	;# 
  2657  029A                     	;# 
  2658  029D                     	;# 
  2659  029E                     	;# 
  2660  029F                     	;# 
  2661  030C                     	;# 
  2662  030D                     	;# 
  2663  0311                     	;# 
  2664  0311                     	;# 
  2665  0312                     	;# 
  2666  0313                     	;# 
  2667  0318                     	;# 
  2668  0318                     	;# 
  2669  0319                     	;# 
  2670  031A                     	;# 
  2671  031C                     	;# 
  2672  031C                     	;# 
  2673  031D                     	;# 
  2674  031E                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  040C                     	;# 
  2681  040D                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  048D                     	;# 
  2699  0491                     	;# 
  2700  0491                     	;# 
  2701  0492                     	;# 
  2702  0492                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0494                     	;# 
  2707  0494                     	;# 
  2708  0495                     	;# 
  2709  0495                     	;# 
  2710  0496                     	;# 
  2711  0496                     	;# 
  2712  0497                     	;# 
  2713  0497                     	;# 
  2714  0595                     	;# 
  2715  0596                     	;# 
  2716  0597                     	;# 
  2717  059C                     	;# 
  2718  059D                     	;# 
  2719  059E                     	;# 
  2720  0611                     	;# 
  2721  0611                     	;# 
  2722  0612                     	;# 
  2723  0613                     	;# 
  2724  0614                     	;# 
  2725  0614                     	;# 
  2726  0615                     	;# 
  2727  0616                     	;# 
  2728  0617                     	;# 
  2729  0617                     	;# 
  2730  0618                     	;# 
  2731  0619                     	;# 
  2732  061A                     	;# 
  2733  061A                     	;# 
  2734  061B                     	;# 
  2735  061C                     	;# 
  2736  061D                     	;# 
  2737  061D                     	;# 
  2738  061E                     	;# 
  2739  061F                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;_delayArray
  2751                           
  2752                           	psect	idataCOMMON
  2753  0800                     __pidataCOMMON:	
  2754                           
  2755                           ;initializer for _switchBypass_state
  2756  0800  34FF               	retlw	255
  2757                           
  2758                           	psect	idataBANK0
  2759  0002                     __pidataBANK0:	
  2760                           
  2761                           ;initializer for _feedback_state
  2762  0002  34FF               	retlw	255
  2763                           
  2764                           ;initializer for _longTap_state
  2765  0003  34FF               	retlw	255
  2766                           
  2767                           	psect	idataBANK1
  2768  1E47                     __pidataBANK1:	
  2769                           
  2770                           ;initializer for _baseline_delay_time
  2771  1E47  34D0               	retlw	208
  2772  1E48  3407               	retlw	7
  2773  1E49  3400               	retlw	0
  2774  1E4A  3400               	retlw	0
  2775                           
  2776                           ;initializer for _delay_time
  2777  1E4B  34D0               	retlw	208
  2778  1E4C  3407               	retlw	7
  2779  1E4D  3400               	retlw	0
  2780  1E4E  3400               	retlw	0
  2781                           
  2782                           ;initializer for _bottom_push_state
  2783  1E4F  3406               	retlw	6
  2784  1E50  3400               	retlw	0
  2785                           
  2786                           ;initializer for _knob1_prev
  2787  1E51  34D0               	retlw	208
  2788  1E52  3407               	retlw	7
  2789                           
  2790                           ;initializer for _knob2_prev
  2791  1E53  34D0               	retlw	208
  2792  1E54  3407               	retlw	7
  2793                           
  2794                           ;initializer for _long_press_limit
  2795  1E55  34E8               	retlw	232
  2796  1E56  3403               	retlw	3
  2797                           
  2798                           ;initializer for _top_push_state
  2799  1E57  3406               	retlw	6
  2800  1E58  3400               	retlw	0
  2801                           
  2802                           ;initializer for _blink_rate
  2803  1E59  3414               	retlw	20
  2804                           
  2805                           ;initializer for _num_taps
  2806  1E5A  3404               	retlw	4
  2807                           
  2808                           	psect	idataBANK2
  2809  1E34                     __pidataBANK2:	
  2810                           
  2811                           ;initializer for _blink_delay
  2812  1E34  3464               	retlw	100
  2813  1E35  3400               	retlw	0
  2814                           
  2815                           ;initializer for _delay_time_changed
  2816  1E36  3401               	retlw	1
  2817  1E37  3400               	retlw	0
  2818                           
  2819                           ;initializer for _knob3_prev
  2820  1E38  34D0               	retlw	208
  2821  1E39  3407               	retlw	7
  2822                           
  2823                           ;initializer for _knob4_prev
  2824  1E3A  34D0               	retlw	208
  2825  1E3B  3407               	retlw	7
  2826                           
  2827                           ;initializer for _knob5_prev
  2828  1E3C  34D0               	retlw	208
  2829  1E3D  3407               	retlw	7
  2830                           
  2831                           ;initializer for _mod_delay_time
  2832  1E3E  34D0               	retlw	208
  2833  1E3F  3407               	retlw	7
  2834                           
  2835                           ;initializer for _switchBypass_up
  2836  1E40  3401               	retlw	1
  2837  1E41  3400               	retlw	0
  2838                           
  2839                           ;initializer for _tap_iteration
  2840  1E42  3401               	retlw	1
  2841  1E43  3400               	retlw	0
  2842                           
  2843                           ;initializer for _blink_state
  2844  1E44  3401               	retlw	1
  2845                           
  2846                           ;initializer for _currentBypassState
  2847  1E45  34FF               	retlw	255
  2848                           
  2849                           ;initializer for _switchTap_state
  2850  1E46  34FF               	retlw	255
  2851                           
  2852                           	psect	idataBANK4
  2853  1179                     __pidataBANK4:	
  2854                           
  2855                           ;initializer for _mod2
  2856  1179  3400               	retlw	0
  2857  117A  3400               	retlw	0
  2858  117B  340D               	retlw	13
  2859  117C  3400               	retlw	0
  2860  117D  341B               	retlw	27
  2861  117E  3400               	retlw	0
  2862  117F  3428               	retlw	40
  2863  1180  3400               	retlw	0
  2864  1181  3435               	retlw	53
  2865  1182  3400               	retlw	0
  2866  1183  3443               	retlw	67
  2867  1184  3400               	retlw	0
  2868  1185  3450               	retlw	80
  2869  1186  3400               	retlw	0
  2870  1187  345D               	retlw	93
  2871  1188  3400               	retlw	0
  2872  1189  345D               	retlw	93
  2873  118A  3400               	retlw	0
  2874  118B  3450               	retlw	80
  2875  118C  3400               	retlw	0
  2876  118D  3443               	retlw	67
  2877  118E  3400               	retlw	0
  2878  118F  3435               	retlw	53
  2879  1190  3400               	retlw	0
  2880  1191  3428               	retlw	40
  2881  1192  3400               	retlw	0
  2882  1193  341B               	retlw	27
  2883  1194  3400               	retlw	0
  2884  1195  340D               	retlw	13
  2885  1196  3400               	retlw	0
  2886  1197  3400               	retlw	0
  2887  1198  3400               	retlw	0
  2888  1199  34F3               	retlw	243
  2889  119A  34FF               	retlw	255
  2890  119B  34E5               	retlw	229
  2891  119C  34FF               	retlw	255
  2892  119D  34D8               	retlw	216
  2893  119E  34FF               	retlw	255
  2894  119F  34CB               	retlw	203
  2895  11A0  34FF               	retlw	255
  2896  11A1  34BD               	retlw	189
  2897  11A2  34FF               	retlw	255
  2898  11A3  34B0               	retlw	176
  2899  11A4  34FF               	retlw	255
  2900  11A5  34A3               	retlw	163
  2901  11A6  34FF               	retlw	255
  2902  11A7  34A3               	retlw	163
  2903  11A8  34FF               	retlw	255
  2904  11A9  34B0               	retlw	176
  2905  11AA  34FF               	retlw	255
  2906  11AB  34BD               	retlw	189
  2907  11AC  34FF               	retlw	255
  2908  11AD  34CB               	retlw	203
  2909  11AE  34FF               	retlw	255
  2910  11AF  34D8               	retlw	216
  2911  11B0  34FF               	retlw	255
  2912  11B1  34E5               	retlw	229
  2913  11B2  34FF               	retlw	255
  2914  11B3  34F3               	retlw	243
  2915  11B4  34FF               	retlw	255
  2916  11B5  3400               	retlw	0
  2917  11B6  3400               	retlw	0
  2918                           
  2919                           	psect	idataBANK5
  2920  113B                     __pidataBANK5:	
  2921                           
  2922                           ;initializer for _mod3
  2923  113B  3400               	retlw	0
  2924  113C  3400               	retlw	0
  2925  113D  3407               	retlw	7
  2926  113E  3400               	retlw	0
  2927  113F  340D               	retlw	13
  2928  1140  3400               	retlw	0
  2929  1141  3414               	retlw	20
  2930  1142  3400               	retlw	0
  2931  1143  341B               	retlw	27
  2932  1144  3400               	retlw	0
  2933  1145  3421               	retlw	33
  2934  1146  3400               	retlw	0
  2935  1147  3428               	retlw	40
  2936  1148  3400               	retlw	0
  2937  1149  342F               	retlw	47
  2938  114A  3400               	retlw	0
  2939  114B  3435               	retlw	53
  2940  114C  3400               	retlw	0
  2941  114D  343C               	retlw	60
  2942  114E  3400               	retlw	0
  2943  114F  3443               	retlw	67
  2944  1150  3400               	retlw	0
  2945  1151  3449               	retlw	73
  2946  1152  3400               	retlw	0
  2947  1153  3450               	retlw	80
  2948  1154  3400               	retlw	0
  2949  1155  3457               	retlw	87
  2950  1156  3400               	retlw	0
  2951  1157  345D               	retlw	93
  2952  1158  3400               	retlw	0
  2953  1159  349C               	retlw	156
  2954  115A  34FF               	retlw	255
  2955  115B  34A3               	retlw	163
  2956  115C  34FF               	retlw	255
  2957  115D  34A9               	retlw	169
  2958  115E  34FF               	retlw	255
  2959  115F  34B0               	retlw	176
  2960  1160  34FF               	retlw	255
  2961  1161  34B7               	retlw	183
  2962  1162  34FF               	retlw	255
  2963  1163  34BD               	retlw	189
  2964  1164  34FF               	retlw	255
  2965  1165  34C4               	retlw	196
  2966  1166  34FF               	retlw	255
  2967  1167  34CB               	retlw	203
  2968  1168  34FF               	retlw	255
  2969  1169  34D1               	retlw	209
  2970  116A  34FF               	retlw	255
  2971  116B  34D8               	retlw	216
  2972  116C  34FF               	retlw	255
  2973  116D  34DF               	retlw	223
  2974  116E  34FF               	retlw	255
  2975  116F  34E5               	retlw	229
  2976  1170  34FF               	retlw	255
  2977  1171  34EC               	retlw	236
  2978  1172  34FF               	retlw	255
  2979  1173  34F3               	retlw	243
  2980  1174  34FF               	retlw	255
  2981  1175  34F9               	retlw	249
  2982  1176  34FF               	retlw	255
  2983  1177  3400               	retlw	0
  2984  1178  3400               	retlw	0
  2985                           
  2986                           	psect	idataBANK6
  2987  10FD                     __pidataBANK6:	
  2988                           
  2989                           ;initializer for _mod4
  2990  10FD  3464               	retlw	100
  2991  10FE  3400               	retlw	0
  2992  10FF  3464               	retlw	100
  2993  1100  3400               	retlw	0
  2994  1101  3464               	retlw	100
  2995  1102  3400               	retlw	0
  2996  1103  3464               	retlw	100
  2997  1104  3400               	retlw	0
  2998  1105  3464               	retlw	100
  2999  1106  3400               	retlw	0
  3000  1107  3464               	retlw	100
  3001  1108  3400               	retlw	0
  3002  1109  3464               	retlw	100
  3003  110A  3400               	retlw	0
  3004  110B  3464               	retlw	100
  3005  110C  3400               	retlw	0
  3006  110D  3464               	retlw	100
  3007  110E  3400               	retlw	0
  3008  110F  3464               	retlw	100
  3009  1110  3400               	retlw	0
  3010  1111  3464               	retlw	100
  3011  1112  3400               	retlw	0
  3012  1113  3464               	retlw	100
  3013  1114  3400               	retlw	0
  3014  1115  3464               	retlw	100
  3015  1116  3400               	retlw	0
  3016  1117  3464               	retlw	100
  3017  1118  3400               	retlw	0
  3018  1119  3464               	retlw	100
  3019  111A  3400               	retlw	0
  3020  111B  349C               	retlw	156
  3021  111C  34FF               	retlw	255
  3022  111D  349C               	retlw	156
  3023  111E  34FF               	retlw	255
  3024  111F  349C               	retlw	156
  3025  1120  34FF               	retlw	255
  3026  1121  349C               	retlw	156
  3027  1122  34FF               	retlw	255
  3028  1123  349C               	retlw	156
  3029  1124  34FF               	retlw	255
  3030  1125  349C               	retlw	156
  3031  1126  34FF               	retlw	255
  3032  1127  349C               	retlw	156
  3033  1128  34FF               	retlw	255
  3034  1129  349C               	retlw	156
  3035  112A  34FF               	retlw	255
  3036  112B  349C               	retlw	156
  3037  112C  34FF               	retlw	255
  3038  112D  349C               	retlw	156
  3039  112E  34FF               	retlw	255
  3040  112F  349C               	retlw	156
  3041  1130  34FF               	retlw	255
  3042  1131  349C               	retlw	156
  3043  1132  34FF               	retlw	255
  3044  1133  349C               	retlw	156
  3045  1134  34FF               	retlw	255
  3046  1135  349C               	retlw	156
  3047  1136  34FF               	retlw	255
  3048  1137  349C               	retlw	156
  3049  1138  34FF               	retlw	255
  3050  1139  3464               	retlw	100
  3051  113A  3400               	retlw	0
  3052                           
  3053                           	psect	idataBANK7
  3054  13F9                     __pidataBANK7:	
  3055                           
  3056                           ;initializer for _B25k
  3057  13F9  34FF               	retlw	255
  3058  13FA  3400               	retlw	0
  3059  13FB  34FF               	retlw	255
  3060  13FC  3400               	retlw	0
  3061  13FD  34FF               	retlw	255
  3062  13FE  3400               	retlw	0
  3063  13FF  34DF               	retlw	223
  3064  1400  3400               	retlw	0
  3065  1401  34AE               	retlw	174
  3066  1402  3400               	retlw	0
  3067  1403  348E               	retlw	142
  3068  1404  3400               	retlw	0
  3069  1405  3478               	retlw	120
  3070  1406  3400               	retlw	0
  3071  1407  3467               	retlw	103
  3072  1408  3400               	retlw	0
  3073  1409  345B               	retlw	91
  3074  140A  3400               	retlw	0
  3075  140B  3450               	retlw	80
  3076  140C  3400               	retlw	0
  3077  140D  3448               	retlw	72
  3078  140E  3400               	retlw	0
  3079  140F  3442               	retlw	66
  3080  1410  3400               	retlw	0
  3081  1411  343C               	retlw	60
  3082  1412  3400               	retlw	0
  3083  1413  3437               	retlw	55
  3084  1414  3400               	retlw	0
  3085  1415  3433               	retlw	51
  3086  1416  3400               	retlw	0
  3087  1417  3430               	retlw	48
  3088  1418  3400               	retlw	0
  3089  1419  342D               	retlw	45
  3090  141A  3400               	retlw	0
  3091  141B  342A               	retlw	42
  3092  141C  3400               	retlw	0
  3093  141D  3427               	retlw	39
  3094  141E  3400               	retlw	0
  3095  141F  3425               	retlw	37
  3096  1420  3400               	retlw	0
  3097  1421  3423               	retlw	35
  3098  1422  3400               	retlw	0
  3099  1423  3421               	retlw	33
  3100  1424  3400               	retlw	0
  3101  1425  3420               	retlw	32
  3102  1426  3400               	retlw	0
  3103  1427  341E               	retlw	30
  3104  1428  3400               	retlw	0
  3105  1429  341D               	retlw	29
  3106  142A  3400               	retlw	0
  3107  142B  341C               	retlw	28
  3108  142C  3400               	retlw	0
  3109  142D  341B               	retlw	27
  3110  142E  3400               	retlw	0
  3111  142F  341A               	retlw	26
  3112  1430  3400               	retlw	0
  3113  1431  3419               	retlw	25
  3114  1432  3400               	retlw	0
  3115  1433  3418               	retlw	24
  3116  1434  3400               	retlw	0
  3117  1435  3417               	retlw	23
  3118  1436  3400               	retlw	0
  3119  1437  3416               	retlw	22
  3120  1438  3400               	retlw	0
  3121  1439  3415               	retlw	21
  3122  143A  3400               	retlw	0
  3123  143B  3415               	retlw	21
  3124  143C  3400               	retlw	0
  3125  143D  3414               	retlw	20
  3126  143E  3400               	retlw	0
  3127  143F  3413               	retlw	19
  3128  1440  3400               	retlw	0
  3129  1441  340F               	retlw	15
  3130  1442  3400               	retlw	0
  3131  1443  340B               	retlw	11
  3132  1444  3400               	retlw	0
  3133  1445  3407               	retlw	7
  3134  1446  3400               	retlw	0
  3135  1447  3407               	retlw	7
  3136  1448  3400               	retlw	0
  3137                           
  3138                           	psect	idataBANK8
  3139  13A9                     __pidataBANK8:	
  3140                           
  3141                           ;initializer for _iB25k
  3142  13A9  3407               	retlw	7
  3143  13AA  3400               	retlw	0
  3144  13AB  3407               	retlw	7
  3145  13AC  3400               	retlw	0
  3146  13AD  340B               	retlw	11
  3147  13AE  3400               	retlw	0
  3148  13AF  340F               	retlw	15
  3149  13B0  3400               	retlw	0
  3150  13B1  3413               	retlw	19
  3151  13B2  3400               	retlw	0
  3152  13B3  3414               	retlw	20
  3153  13B4  3400               	retlw	0
  3154  13B5  3415               	retlw	21
  3155  13B6  3400               	retlw	0
  3156  13B7  3415               	retlw	21
  3157  13B8  3400               	retlw	0
  3158  13B9  3416               	retlw	22
  3159  13BA  3400               	retlw	0
  3160  13BB  3417               	retlw	23
  3161  13BC  3400               	retlw	0
  3162  13BD  3418               	retlw	24
  3163  13BE  3400               	retlw	0
  3164  13BF  3419               	retlw	25
  3165  13C0  3400               	retlw	0
  3166  13C1  341A               	retlw	26
  3167  13C2  3400               	retlw	0
  3168  13C3  341B               	retlw	27
  3169  13C4  3400               	retlw	0
  3170  13C5  341C               	retlw	28
  3171  13C6  3400               	retlw	0
  3172  13C7  341D               	retlw	29
  3173  13C8  3400               	retlw	0
  3174  13C9  341E               	retlw	30
  3175  13CA  3400               	retlw	0
  3176  13CB  3420               	retlw	32
  3177  13CC  3400               	retlw	0
  3178  13CD  3421               	retlw	33
  3179  13CE  3400               	retlw	0
  3180  13CF  3423               	retlw	35
  3181  13D0  3400               	retlw	0
  3182  13D1  3425               	retlw	37
  3183  13D2  3400               	retlw	0
  3184  13D3  3427               	retlw	39
  3185  13D4  3400               	retlw	0
  3186  13D5  342A               	retlw	42
  3187  13D6  3400               	retlw	0
  3188  13D7  342D               	retlw	45
  3189  13D8  3400               	retlw	0
  3190  13D9  3430               	retlw	48
  3191  13DA  3400               	retlw	0
  3192  13DB  3433               	retlw	51
  3193  13DC  3400               	retlw	0
  3194  13DD  3437               	retlw	55
  3195  13DE  3400               	retlw	0
  3196  13DF  343C               	retlw	60
  3197  13E0  3400               	retlw	0
  3198  13E1  3442               	retlw	66
  3199  13E2  3400               	retlw	0
  3200  13E3  3448               	retlw	72
  3201  13E4  3400               	retlw	0
  3202  13E5  3450               	retlw	80
  3203  13E6  3400               	retlw	0
  3204  13E7  345B               	retlw	91
  3205  13E8  3400               	retlw	0
  3206  13E9  3467               	retlw	103
  3207  13EA  3400               	retlw	0
  3208  13EB  3478               	retlw	120
  3209  13EC  3400               	retlw	0
  3210  13ED  348E               	retlw	142
  3211  13EE  3400               	retlw	0
  3212  13EF  34AE               	retlw	174
  3213  13F0  3400               	retlw	0
  3214  13F1  34DF               	retlw	223
  3215  13F2  3400               	retlw	0
  3216  13F3  34FF               	retlw	255
  3217  13F4  3400               	retlw	0
  3218  13F5  34FF               	retlw	255
  3219  13F6  3400               	retlw	0
  3220  13F7  34FF               	retlw	255
  3221  13F8  3400               	retlw	0
  3222                           
  3223                           	psect	idataBANK10
  3224  10BF                     __pidataBANK10:	
  3225                           
  3226                           ;initializer for _mod1
  3227  10BF  3400               	retlw	0
  3228  10C0  3400               	retlw	0
  3229  10C1  3415               	retlw	21
  3230  10C2  3400               	retlw	0
  3231  10C3  3429               	retlw	41
  3232  10C4  3400               	retlw	0
  3233  10C5  343B               	retlw	59
  3234  10C6  3400               	retlw	0
  3235  10C7  344A               	retlw	74
  3236  10C8  3400               	retlw	0
  3237  10C9  3457               	retlw	87
  3238  10CA  3400               	retlw	0
  3239  10CB  345F               	retlw	95
  3240  10CC  3400               	retlw	0
  3241  10CD  3463               	retlw	99
  3242  10CE  3400               	retlw	0
  3243  10CF  3463               	retlw	99
  3244  10D0  3400               	retlw	0
  3245  10D1  345F               	retlw	95
  3246  10D2  3400               	retlw	0
  3247  10D3  3457               	retlw	87
  3248  10D4  3400               	retlw	0
  3249  10D5  344A               	retlw	74
  3250  10D6  3400               	retlw	0
  3251  10D7  343B               	retlw	59
  3252  10D8  3400               	retlw	0
  3253  10D9  3429               	retlw	41
  3254  10DA  3400               	retlw	0
  3255  10DB  3415               	retlw	21
  3256  10DC  3400               	retlw	0
  3257  10DD  3400               	retlw	0
  3258  10DE  3400               	retlw	0
  3259  10DF  34EB               	retlw	235
  3260  10E0  34FF               	retlw	255
  3261  10E1  34D7               	retlw	215
  3262  10E2  34FF               	retlw	255
  3263  10E3  34C5               	retlw	197
  3264  10E4  34FF               	retlw	255
  3265  10E5  34B6               	retlw	182
  3266  10E6  34FF               	retlw	255
  3267  10E7  34A9               	retlw	169
  3268  10E8  34FF               	retlw	255
  3269  10E9  34A1               	retlw	161
  3270  10EA  34FF               	retlw	255
  3271  10EB  349D               	retlw	157
  3272  10EC  34FF               	retlw	255
  3273  10ED  349D               	retlw	157
  3274  10EE  34FF               	retlw	255
  3275  10EF  34A1               	retlw	161
  3276  10F0  34FF               	retlw	255
  3277  10F1  34A9               	retlw	169
  3278  10F2  34FF               	retlw	255
  3279  10F3  34B6               	retlw	182
  3280  10F4  34FF               	retlw	255
  3281  10F5  34C5               	retlw	197
  3282  10F6  34FF               	retlw	255
  3283  10F7  34D7               	retlw	215
  3284  10F8  34FF               	retlw	255
  3285  10F9  34EB               	retlw	235
  3286  10FA  34FF               	retlw	255
  3287  10FB  3400               	retlw	0
  3288  10FC  3400               	retlw	0
  3289                           
  3290                           	psect	idataBIGRAM
  3291  0D7E                     __pidataBIGRAM:	
  3292                           
  3293                           ;initializer for _delayArray
  3294  0D7E  3422               	retlw	34
  3295  0D7F  3408               	retlw	8
  3296  0D80  34FC               	retlw	252
  3297  0D81  3407               	retlw	7
  3298  0D82  34D8               	retlw	216
  3299  0D83  3407               	retlw	7
  3300  0D84  34B5               	retlw	181
  3301  0D85  3407               	retlw	7
  3302  0D86  3493               	retlw	147
  3303  0D87  3407               	retlw	7
  3304  0D88  3472               	retlw	114
  3305  0D89  3407               	retlw	7
  3306  0D8A  3452               	retlw	82
  3307  0D8B  3407               	retlw	7
  3308  0D8C  3434               	retlw	52
  3309  0D8D  3407               	retlw	7
  3310  0D8E  3416               	retlw	22
  3311  0D8F  3407               	retlw	7
  3312  0D90  34F9               	retlw	249
  3313  0D91  3406               	retlw	6
  3314  0D92  34DD               	retlw	221
  3315  0D93  3406               	retlw	6
  3316  0D94  34C2               	retlw	194
  3317  0D95  3406               	retlw	6
  3318  0D96  34A8               	retlw	168
  3319  0D97  3406               	retlw	6
  3320  0D98  348F               	retlw	143
  3321  0D99  3406               	retlw	6
  3322  0D9A  3476               	retlw	118
  3323  0D9B  3406               	retlw	6
  3324  0D9C  345E               	retlw	94
  3325  0D9D  3406               	retlw	6
  3326  0D9E  3447               	retlw	71
  3327  0D9F  3406               	retlw	6
  3328  0DA0  3430               	retlw	48
  3329  0DA1  3406               	retlw	6
  3330  0DA2  341A               	retlw	26
  3331  0DA3  3406               	retlw	6
  3332  0DA4  3405               	retlw	5
  3333  0DA5  3406               	retlw	6
  3334  0DA6  34F0               	retlw	240
  3335  0DA7  3405               	retlw	5
  3336  0DA8  34DC               	retlw	220
  3337  0DA9  3405               	retlw	5
  3338  0DAA  34C8               	retlw	200
  3339  0DAB  3405               	retlw	5
  3340  0DAC  34B5               	retlw	181
  3341  0DAD  3405               	retlw	5
  3342  0DAE  34A3               	retlw	163
  3343  0DAF  3405               	retlw	5
  3344  0DB0  3490               	retlw	144
  3345  0DB1  3405               	retlw	5
  3346  0DB2  347F               	retlw	127
  3347  0DB3  3405               	retlw	5
  3348  0DB4  346D               	retlw	109
  3349  0DB5  3405               	retlw	5
  3350  0DB6  345C               	retlw	92
  3351  0DB7  3405               	retlw	5
  3352  0DB8  344C               	retlw	76
  3353  0DB9  3405               	retlw	5
  3354  0DBA  343C               	retlw	60
  3355  0DBB  3405               	retlw	5
  3356  0DBC  342C               	retlw	44
  3357  0DBD  3405               	retlw	5
  3358  0DBE  341D               	retlw	29
  3359  0DBF  3405               	retlw	5
  3360  0DC0  340E               	retlw	14
  3361  0DC1  3405               	retlw	5
  3362  0DC2  34FF               	retlw	255
  3363  0DC3  3404               	retlw	4
  3364  0DC4  34F1               	retlw	241
  3365  0DC5  3404               	retlw	4
  3366  0DC6  34E2               	retlw	226
  3367  0DC7  3404               	retlw	4
  3368  0DC8  34D5               	retlw	213
  3369  0DC9  3404               	retlw	4
  3370  0DCA  34C7               	retlw	199
  3371  0DCB  3404               	retlw	4
  3372  0DCC  34BA               	retlw	186
  3373  0DCD  3404               	retlw	4
  3374  0DCE  34AD               	retlw	173
  3375  0DCF  3404               	retlw	4
  3376  0DD0  34A1               	retlw	161
  3377  0DD1  3404               	retlw	4
  3378  0DD2  3494               	retlw	148
  3379  0DD3  3404               	retlw	4
  3380  0DD4  3488               	retlw	136
  3381  0DD5  3404               	retlw	4
  3382  0DD6  347D               	retlw	125
  3383  0DD7  3404               	retlw	4
  3384  0DD8  3471               	retlw	113
  3385  0DD9  3404               	retlw	4
  3386  0DDA  3466               	retlw	102
  3387  0DDB  3404               	retlw	4
  3388  0DDC  345A               	retlw	90
  3389  0DDD  3404               	retlw	4
  3390  0DDE  3450               	retlw	80
  3391  0DDF  3404               	retlw	4
  3392  0DE0  3445               	retlw	69
  3393  0DE1  3404               	retlw	4
  3394  0DE2  343A               	retlw	58
  3395  0DE3  3404               	retlw	4
  3396  0DE4  3430               	retlw	48
  3397  0DE5  3404               	retlw	4
  3398  0DE6  3426               	retlw	38
  3399  0DE7  3404               	retlw	4
  3400  0DE8  341C               	retlw	28
  3401  0DE9  3404               	retlw	4
  3402  0DEA  3412               	retlw	18
  3403  0DEB  3404               	retlw	4
  3404  0DEC  3409               	retlw	9
  3405  0DED  3404               	retlw	4
  3406  0DEE  34FF               	retlw	255
  3407  0DEF  3403               	retlw	3
  3408  0DF0  34F6               	retlw	246
  3409  0DF1  3403               	retlw	3
  3410  0DF2  34ED               	retlw	237
  3411  0DF3  3403               	retlw	3
  3412  0DF4  34E4               	retlw	228
  3413  0DF5  3403               	retlw	3
  3414  0DF6  34DC               	retlw	220
  3415  0DF7  3403               	retlw	3
  3416  0DF8  34D3               	retlw	211
  3417  0DF9  3403               	retlw	3
  3418  0DFA  34CB               	retlw	203
  3419  0DFB  3403               	retlw	3
  3420  0DFC  34C2               	retlw	194
  3421  0DFD  3403               	retlw	3
  3422  0DFE  34BA               	retlw	186
  3423  0DFF  3403               	retlw	3
  3424  0E00  34B2               	retlw	178
  3425  0E01  3403               	retlw	3
  3426  0E02  34AA               	retlw	170
  3427  0E03  3403               	retlw	3
  3428  0E04  34A2               	retlw	162
  3429  0E05  3403               	retlw	3
  3430  0E06  349B               	retlw	155
  3431  0E07  3403               	retlw	3
  3432  0E08  3493               	retlw	147
  3433  0E09  3403               	retlw	3
  3434  0E0A  348C               	retlw	140
  3435  0E0B  3403               	retlw	3
  3436  0E0C  3485               	retlw	133
  3437  0E0D  3403               	retlw	3
  3438  0E0E  347E               	retlw	126
  3439  0E0F  3403               	retlw	3
  3440  0E10  3477               	retlw	119
  3441  0E11  3403               	retlw	3
  3442  0E12  3470               	retlw	112
  3443  0E13  3403               	retlw	3
  3444  0E14  3469               	retlw	105
  3445  0E15  3403               	retlw	3
  3446  0E16  3462               	retlw	98
  3447  0E17  3403               	retlw	3
  3448  0E18  345C               	retlw	92
  3449  0E19  3403               	retlw	3
  3450  0E1A  3455               	retlw	85
  3451  0E1B  3403               	retlw	3
  3452  0E1C  344F               	retlw	79
  3453  0E1D  3403               	retlw	3
  3454  0E1E  3448               	retlw	72
  3455  0E1F  3403               	retlw	3
  3456  0E20  3442               	retlw	66
  3457  0E21  3403               	retlw	3
  3458  0E22  343C               	retlw	60
  3459  0E23  3403               	retlw	3
  3460  0E24  3436               	retlw	54
  3461  0E25  3403               	retlw	3
  3462  0E26  3430               	retlw	48
  3463  0E27  3403               	retlw	3
  3464  0E28  342A               	retlw	42
  3465  0E29  3403               	retlw	3
  3466  0E2A  3424               	retlw	36
  3467  0E2B  3403               	retlw	3
  3468  0E2C  341F               	retlw	31
  3469  0E2D  3403               	retlw	3
  3470  0E2E  3419               	retlw	25
  3471  0E2F  3403               	retlw	3
  3472  0E30  3413               	retlw	19
  3473  0E31  3403               	retlw	3
  3474  0E32  340E               	retlw	14
  3475  0E33  3403               	retlw	3
  3476  0E34  3409               	retlw	9
  3477  0E35  3403               	retlw	3
  3478  0E36  3403               	retlw	3
  3479  0E37  3403               	retlw	3
  3480  0E38  34FE               	retlw	254
  3481  0E39  3402               	retlw	2
  3482  0E3A  34F9               	retlw	249
  3483  0E3B  3402               	retlw	2
  3484  0E3C  34F4               	retlw	244
  3485  0E3D  3402               	retlw	2
  3486  0E3E  34EF               	retlw	239
  3487  0E3F  3402               	retlw	2
  3488  0E40  34EA               	retlw	234
  3489  0E41  3402               	retlw	2
  3490  0E42  34E5               	retlw	229
  3491  0E43  3402               	retlw	2
  3492  0E44  34E0               	retlw	224
  3493  0E45  3402               	retlw	2
  3494  0E46  34DB               	retlw	219
  3495  0E47  3402               	retlw	2
  3496  0E48  34D7               	retlw	215
  3497  0E49  3402               	retlw	2
  3498  0E4A  34D2               	retlw	210
  3499  0E4B  3402               	retlw	2
  3500  0E4C  34CD               	retlw	205
  3501  0E4D  3402               	retlw	2
  3502  0E4E  34C9               	retlw	201
  3503  0E4F  3402               	retlw	2
  3504  0E50  34C4               	retlw	196
  3505  0E51  3402               	retlw	2
  3506  0E52  34C0               	retlw	192
  3507  0E53  3402               	retlw	2
  3508  0E54  34BC               	retlw	188
  3509  0E55  3402               	retlw	2
  3510  0E56  34B7               	retlw	183
  3511  0E57  3402               	retlw	2
  3512  0E58  34B3               	retlw	179
  3513  0E59  3402               	retlw	2
  3514  0E5A  34AF               	retlw	175
  3515  0E5B  3402               	retlw	2
  3516  0E5C  34AB               	retlw	171
  3517  0E5D  3402               	retlw	2
  3518  0E5E  34A6               	retlw	166
  3519  0E5F  3402               	retlw	2
  3520  0E60  34A2               	retlw	162
  3521  0E61  3402               	retlw	2
  3522  0E62  349E               	retlw	158
  3523  0E63  3402               	retlw	2
  3524  0E64  349A               	retlw	154
  3525  0E65  3402               	retlw	2
  3526  0E66  3497               	retlw	151
  3527  0E67  3402               	retlw	2
  3528  0E68  3493               	retlw	147
  3529  0E69  3402               	retlw	2
  3530  0E6A  348F               	retlw	143
  3531  0E6B  3402               	retlw	2
  3532  0E6C  348B               	retlw	139
  3533  0E6D  3402               	retlw	2
  3534  0E6E  3487               	retlw	135
  3535  0E6F  3402               	retlw	2
  3536  0E70  3484               	retlw	132
  3537  0E71  3402               	retlw	2
  3538  0E72  3480               	retlw	128
  3539  0E73  3402               	retlw	2
  3540  0E74  347C               	retlw	124
  3541  0E75  3402               	retlw	2
  3542  0E76  3479               	retlw	121
  3543  0E77  3402               	retlw	2
  3544  0E78  3475               	retlw	117
  3545  0E79  3402               	retlw	2
  3546  0E7A  3472               	retlw	114
  3547  0E7B  3402               	retlw	2
  3548  0E7C  346E               	retlw	110
  3549  0E7D  3402               	retlw	2
  3550  0E7E  346B               	retlw	107
  3551  0E7F  3402               	retlw	2
  3552  0E80  3467               	retlw	103
  3553  0E81  3402               	retlw	2
  3554  0E82  3464               	retlw	100
  3555  0E83  3402               	retlw	2
  3556  0E84  3461               	retlw	97
  3557  0E85  3402               	retlw	2
  3558  0E86  345E               	retlw	94
  3559  0E87  3402               	retlw	2
  3560  0E88  345A               	retlw	90
  3561  0E89  3402               	retlw	2
  3562  0E8A  3457               	retlw	87
  3563  0E8B  3402               	retlw	2
  3564  0E8C  3454               	retlw	84
  3565  0E8D  3402               	retlw	2
  3566  0E8E  3451               	retlw	81
  3567  0E8F  3402               	retlw	2
  3568  0E90  344E               	retlw	78
  3569  0E91  3402               	retlw	2
  3570  0E92  344B               	retlw	75
  3571  0E93  3402               	retlw	2
  3572  0E94  3448               	retlw	72
  3573  0E95  3402               	retlw	2
  3574  0E96  3445               	retlw	69
  3575  0E97  3402               	retlw	2
  3576  0E98  3442               	retlw	66
  3577  0E99  3402               	retlw	2
  3578  0E9A  343F               	retlw	63
  3579  0E9B  3402               	retlw	2
  3580  0E9C  343C               	retlw	60
  3581  0E9D  3402               	retlw	2
  3582  0E9E  3439               	retlw	57
  3583  0E9F  3402               	retlw	2
  3584  0EA0  3436               	retlw	54
  3585  0EA1  3402               	retlw	2
  3586  0EA2  3433               	retlw	51
  3587  0EA3  3402               	retlw	2
  3588  0EA4  3430               	retlw	48
  3589  0EA5  3402               	retlw	2
  3590  0EA6  342E               	retlw	46
  3591  0EA7  3402               	retlw	2
  3592  0EA8  342B               	retlw	43
  3593  0EA9  3402               	retlw	2
  3594  0EAA  3428               	retlw	40
  3595  0EAB  3402               	retlw	2
  3596  0EAC  3425               	retlw	37
  3597  0EAD  3402               	retlw	2
  3598  0EAE  3423               	retlw	35
  3599  0EAF  3402               	retlw	2
  3600  0EB0  3420               	retlw	32
  3601  0EB1  3402               	retlw	2
  3602  0EB2  341E               	retlw	30
  3603  0EB3  3402               	retlw	2
  3604  0EB4  341B               	retlw	27
  3605  0EB5  3402               	retlw	2
  3606  0EB6  3418               	retlw	24
  3607  0EB7  3402               	retlw	2
  3608  0EB8  3416               	retlw	22
  3609  0EB9  3402               	retlw	2
  3610  0EBA  3413               	retlw	19
  3611  0EBB  3402               	retlw	2
  3612  0EBC  3411               	retlw	17
  3613  0EBD  3402               	retlw	2
  3614  0EBE  340E               	retlw	14
  3615  0EBF  3402               	retlw	2
  3616  0EC0  340C               	retlw	12
  3617  0EC1  3402               	retlw	2
  3618  0EC2  340A               	retlw	10
  3619  0EC3  3402               	retlw	2
  3620  0EC4  3407               	retlw	7
  3621  0EC5  3402               	retlw	2
  3622  0EC6  3405               	retlw	5
  3623  0EC7  3402               	retlw	2
  3624  0EC8  3402               	retlw	2
  3625  0EC9  3402               	retlw	2
  3626  0ECA  3400               	retlw	0
  3627  0ECB  3402               	retlw	2
  3628  0ECC  34FE               	retlw	254
  3629  0ECD  3401               	retlw	1
  3630  0ECE  34FB               	retlw	251
  3631  0ECF  3401               	retlw	1
  3632  0ED0  34F9               	retlw	249
  3633  0ED1  3401               	retlw	1
  3634  0ED2  34F7               	retlw	247
  3635  0ED3  3401               	retlw	1
  3636  0ED4  34F5               	retlw	245
  3637  0ED5  3401               	retlw	1
  3638  0ED6  34F2               	retlw	242
  3639  0ED7  3401               	retlw	1
  3640  0ED8  34F0               	retlw	240
  3641  0ED9  3401               	retlw	1
  3642  0EDA  34EE               	retlw	238
  3643  0EDB  3401               	retlw	1
  3644  0EDC  34EC               	retlw	236
  3645  0EDD  3401               	retlw	1
  3646  0EDE  34EA               	retlw	234
  3647  0EDF  3401               	retlw	1
  3648  0EE0  34E8               	retlw	232
  3649  0EE1  3401               	retlw	1
  3650  0EE2  34E6               	retlw	230
  3651  0EE3  3401               	retlw	1
  3652  0EE4  34E3               	retlw	227
  3653  0EE5  3401               	retlw	1
  3654  0EE6  34E1               	retlw	225
  3655  0EE7  3401               	retlw	1
  3656  0EE8  34DF               	retlw	223
  3657  0EE9  3401               	retlw	1
  3658  0EEA  34DD               	retlw	221
  3659  0EEB  3401               	retlw	1
  3660  0EEC  34DB               	retlw	219
  3661  0EED  3401               	retlw	1
  3662  0EEE  34D9               	retlw	217
  3663  0EEF  3401               	retlw	1
  3664  0EF0  34D7               	retlw	215
  3665  0EF1  3401               	retlw	1
  3666  0EF2  34D5               	retlw	213
  3667  0EF3  3401               	retlw	1
  3668  0EF4  34D3               	retlw	211
  3669  0EF5  3401               	retlw	1
  3670  0EF6  34D2               	retlw	210
  3671  0EF7  3401               	retlw	1
  3672  0EF8  34D0               	retlw	208
  3673  0EF9  3401               	retlw	1
  3674  0EFA  34CE               	retlw	206
  3675  0EFB  3401               	retlw	1
  3676  0EFC  34CC               	retlw	204
  3677  0EFD  3401               	retlw	1
  3678  0EFE  34CA               	retlw	202
  3679  0EFF  3401               	retlw	1
  3680  0F00  34C8               	retlw	200
  3681  0F01  3401               	retlw	1
  3682  0F02  34C6               	retlw	198
  3683  0F03  3401               	retlw	1
  3684  0F04  34C4               	retlw	196
  3685  0F05  3401               	retlw	1
  3686  0F06  34C3               	retlw	195
  3687  0F07  3401               	retlw	1
  3688  0F08  34C1               	retlw	193
  3689  0F09  3401               	retlw	1
  3690  0F0A  34BF               	retlw	191
  3691  0F0B  3401               	retlw	1
  3692  0F0C  34BD               	retlw	189
  3693  0F0D  3401               	retlw	1
  3694  0F0E  34BC               	retlw	188
  3695  0F0F  3401               	retlw	1
  3696  0F10  34BA               	retlw	186
  3697  0F11  3401               	retlw	1
  3698  0F12  34B8               	retlw	184
  3699  0F13  3401               	retlw	1
  3700  0F14  34B6               	retlw	182
  3701  0F15  3401               	retlw	1
  3702  0F16  34B5               	retlw	181
  3703  0F17  3401               	retlw	1
  3704  0F18  34B3               	retlw	179
  3705  0F19  3401               	retlw	1
  3706  0F1A  34B1               	retlw	177
  3707  0F1B  3401               	retlw	1
  3708  0F1C  34B0               	retlw	176
  3709  0F1D  3401               	retlw	1
  3710  0F1E  34AE               	retlw	174
  3711  0F1F  3401               	retlw	1
  3712  0F20  34AC               	retlw	172
  3713  0F21  3401               	retlw	1
  3714  0F22  34AB               	retlw	171
  3715  0F23  3401               	retlw	1
  3716  0F24  34A9               	retlw	169
  3717  0F25  3401               	retlw	1
  3718  0F26  34A8               	retlw	168
  3719  0F27  3401               	retlw	1
  3720  0F28  34A6               	retlw	166
  3721  0F29  3401               	retlw	1
  3722  0F2A  34A4               	retlw	164
  3723  0F2B  3401               	retlw	1
  3724  0F2C  34A3               	retlw	163
  3725  0F2D  3401               	retlw	1
  3726  0F2E  34A1               	retlw	161
  3727  0F2F  3401               	retlw	1
  3728  0F30  34A0               	retlw	160
  3729  0F31  3401               	retlw	1
  3730  0F32  349E               	retlw	158
  3731  0F33  3401               	retlw	1
  3732  0F34  349D               	retlw	157
  3733  0F35  3401               	retlw	1
  3734  0F36  349B               	retlw	155
  3735  0F37  3401               	retlw	1
  3736  0F38  349A               	retlw	154
  3737  0F39  3401               	retlw	1
  3738  0F3A  3498               	retlw	152
  3739  0F3B  3401               	retlw	1
  3740  0F3C  3497               	retlw	151
  3741  0F3D  3401               	retlw	1
  3742  0F3E  3495               	retlw	149
  3743  0F3F  3401               	retlw	1
  3744  0F40  3494               	retlw	148
  3745  0F41  3401               	retlw	1
  3746  0F42  3492               	retlw	146
  3747  0F43  3401               	retlw	1
  3748  0F44  3491               	retlw	145
  3749  0F45  3401               	retlw	1
  3750  0F46  3490               	retlw	144
  3751  0F47  3401               	retlw	1
  3752  0F48  348E               	retlw	142
  3753  0F49  3401               	retlw	1
  3754  0F4A  348D               	retlw	141
  3755  0F4B  3401               	retlw	1
  3756  0F4C  348B               	retlw	139
  3757  0F4D  3401               	retlw	1
  3758  0F4E  348A               	retlw	138
  3759  0F4F  3401               	retlw	1
  3760  0F50  3489               	retlw	137
  3761  0F51  3401               	retlw	1
  3762  0F52  3487               	retlw	135
  3763  0F53  3401               	retlw	1
  3764  0F54  3486               	retlw	134
  3765  0F55  3401               	retlw	1
  3766  0F56  3485               	retlw	133
  3767  0F57  3401               	retlw	1
  3768  0F58  3483               	retlw	131
  3769  0F59  3401               	retlw	1
  3770  0F5A  3482               	retlw	130
  3771  0F5B  3401               	retlw	1
  3772  0F5C  3481               	retlw	129
  3773  0F5D  3401               	retlw	1
  3774  0F5E  347F               	retlw	127
  3775  0F5F  3401               	retlw	1
  3776  0F60  347E               	retlw	126
  3777  0F61  3401               	retlw	1
  3778  0F62  347D               	retlw	125
  3779  0F63  3401               	retlw	1
  3780  0F64  347B               	retlw	123
  3781  0F65  3401               	retlw	1
  3782  0F66  347A               	retlw	122
  3783  0F67  3401               	retlw	1
  3784  0F68  3479               	retlw	121
  3785  0F69  3401               	retlw	1
  3786  0F6A  3478               	retlw	120
  3787  0F6B  3401               	retlw	1
  3788  0F6C  3476               	retlw	118
  3789  0F6D  3401               	retlw	1
  3790  0F6E  3475               	retlw	117
  3791  0F6F  3401               	retlw	1
  3792  0F70  3474               	retlw	116
  3793  0F71  3401               	retlw	1
  3794  0F72  3473               	retlw	115
  3795  0F73  3401               	retlw	1
  3796  0F74  3471               	retlw	113
  3797  0F75  3401               	retlw	1
  3798  0F76  3470               	retlw	112
  3799  0F77  3401               	retlw	1
  3800  0F78  346F               	retlw	111
  3801  0F79  3401               	retlw	1
  3802  0F7A  346E               	retlw	110
  3803  0F7B  3401               	retlw	1
  3804  0F7C  3400               	retlw	0
  3805  0F7D  3400               	retlw	0
  3806  0F7E  3400               	retlw	0
  3807  0F7F  3400               	retlw	0
  3808  0F80  3400               	retlw	0
  3809  0F81  3400               	retlw	0
  3810  0F82  3400               	retlw	0
  3811  0F83  3400               	retlw	0
  3812  0F84  3400               	retlw	0
  3813  0F85  3400               	retlw	0
  3814                           
  3815                           ;initializer for _mod5
  3816  0F86  3400               	retlw	0
  3817  0F87  3400               	retlw	0
  3818  0F88  340A               	retlw	10
  3819  0F89  3400               	retlw	0
  3820  0F8A  3414               	retlw	20
  3821  0F8B  3400               	retlw	0
  3822  0F8C  341E               	retlw	30
  3823  0F8D  3400               	retlw	0
  3824  0F8E  3428               	retlw	40
  3825  0F8F  3400               	retlw	0
  3826  0F90  3432               	retlw	50
  3827  0F91  3400               	retlw	0
  3828  0F92  343A               	retlw	58
  3829  0F93  3400               	retlw	0
  3830  0F94  3442               	retlw	66
  3831  0F95  3400               	retlw	0
  3832  0F96  344A               	retlw	74
  3833  0F97  3400               	retlw	0
  3834  0F98  3450               	retlw	80
  3835  0F99  3400               	retlw	0
  3836  0F9A  3456               	retlw	86
  3837  0F9B  3400               	retlw	0
  3838  0F9C  345B               	retlw	91
  3839  0F9D  3400               	retlw	0
  3840  0F9E  345F               	retlw	95
  3841  0F9F  3400               	retlw	0
  3842  0FA0  3461               	retlw	97
  3843  0FA1  3400               	retlw	0
  3844  0FA2  3463               	retlw	99
  3845  0FA3  3400               	retlw	0
  3846  0FA4  3464               	retlw	100
  3847  0FA5  3400               	retlw	0
  3848  0FA6  3463               	retlw	99
  3849  0FA7  3400               	retlw	0
  3850  0FA8  3461               	retlw	97
  3851  0FA9  3400               	retlw	0
  3852  0FAA  345F               	retlw	95
  3853  0FAB  3400               	retlw	0
  3854  0FAC  345B               	retlw	91
  3855  0FAD  3400               	retlw	0
  3856  0FAE  3456               	retlw	86
  3857  0FAF  3400               	retlw	0
  3858  0FB0  3450               	retlw	80
  3859  0FB1  3400               	retlw	0
  3860  0FB2  344A               	retlw	74
  3861  0FB3  3400               	retlw	0
  3862  0FB4  3442               	retlw	66
  3863  0FB5  3400               	retlw	0
  3864  0FB6  343A               	retlw	58
  3865  0FB7  3400               	retlw	0
  3866  0FB8  3432               	retlw	50
  3867  0FB9  3400               	retlw	0
  3868  0FBA  3428               	retlw	40
  3869  0FBB  3400               	retlw	0
  3870  0FBC  341E               	retlw	30
  3871  0FBD  3400               	retlw	0
  3872  0FBE  3414               	retlw	20
  3873  0FBF  3400               	retlw	0
  3874  0FC0  340A               	retlw	10
  3875  0FC1  3400               	retlw	0
  3876  0FC2  3400               	retlw	0
  3877  0FC3  3400               	retlw	0
  3878  0FC4  34F6               	retlw	246
  3879  0FC5  34FF               	retlw	255
  3880  0FC6  34EC               	retlw	236
  3881  0FC7  34FF               	retlw	255
  3882  0FC8  34E2               	retlw	226
  3883  0FC9  34FF               	retlw	255
  3884  0FCA  34D8               	retlw	216
  3885  0FCB  34FF               	retlw	255
  3886  0FCC  34CE               	retlw	206
  3887  0FCD  34FF               	retlw	255
  3888  0FCE  34C6               	retlw	198
  3889  0FCF  34FF               	retlw	255
  3890  0FD0  34BE               	retlw	190
  3891  0FD1  34FF               	retlw	255
  3892  0FD2  34B6               	retlw	182
  3893  0FD3  34FF               	retlw	255
  3894  0FD4  34B0               	retlw	176
  3895  0FD5  34FF               	retlw	255
  3896  0FD6  34AA               	retlw	170
  3897  0FD7  34FF               	retlw	255
  3898  0FD8  34A5               	retlw	165
  3899  0FD9  34FF               	retlw	255
  3900  0FDA  34A1               	retlw	161
  3901  0FDB  34FF               	retlw	255
  3902  0FDC  349F               	retlw	159
  3903  0FDD  34FF               	retlw	255
  3904  0FDE  349D               	retlw	157
  3905  0FDF  34FF               	retlw	255
  3906  0FE0  349C               	retlw	156
  3907  0FE1  34FF               	retlw	255
  3908  0FE2  349D               	retlw	157
  3909  0FE3  34FF               	retlw	255
  3910  0FE4  349F               	retlw	159
  3911  0FE5  34FF               	retlw	255
  3912  0FE6  34A1               	retlw	161
  3913  0FE7  34FF               	retlw	255
  3914  0FE8  34A5               	retlw	165
  3915  0FE9  34FF               	retlw	255
  3916  0FEA  34AA               	retlw	170
  3917  0FEB  34FF               	retlw	255
  3918  0FEC  34B0               	retlw	176
  3919  0FED  34FF               	retlw	255
  3920  0FEE  34B6               	retlw	182
  3921  0FEF  34FF               	retlw	255
  3922  0FF0  34BE               	retlw	190
  3923  0FF1  34FF               	retlw	255
  3924  0FF2  34C6               	retlw	198
  3925  0FF3  34FF               	retlw	255
  3926  0FF4  34CE               	retlw	206
  3927  0FF5  34FF               	retlw	255
  3928  0FF6  34D8               	retlw	216
  3929  0FF7  34FF               	retlw	255
  3930  0FF8  34E2               	retlw	226
  3931  0FF9  34FF               	retlw	255
  3932  0FFA  34EC               	retlw	236
  3933  0FFB  34FF               	retlw	255
  3934  0FFC  34F6               	retlw	246
  3935  0FFD  34FF               	retlw	255
  3936  0FFE  3400               	retlw	0
  3937  0FFF  3400               	retlw	0
  3938  000B                     _INTCONbits	set	11
  3939  000E                     _PORTCbits	set	14
  3940  000F                     _PORTDbits	set	15
  3941  0010                     _PORTEbits	set	16
  3942  001B                     _PR2	set	27
  3943  001C                     _T2CONbits	set	28
  3944  009D                     _ADCON0bits	set	157
  3945  009E                     _ADCON1bits	set	158
  3946  009C                     _ADRESH	set	156
  3947  009B                     _ADRESL	set	155
  3948  0095                     _OPTION_REGbits	set	149
  3949  0099                     _OSCCONbits	set	153
  3950  008D                     _TRISBbits	set	141
  3951  008E                     _TRISCbits	set	142
  3952  008F                     _TRISDbits	set	143
  3953  0090                     _TRISEbits	set	144
  3954  011D                     _APFCONbits	set	285
  3955  010D                     _LATBbits	set	269
  3956  010F                     _LATDbits	set	271
  3957  0190                     _ANSELEbits	set	400
  3958  0192                     _PMADRH	set	402
  3959  0191                     _PMADRL	set	401
  3960  0195                     _PMCON1bits	set	405
  3961  0196                     _PMCON2	set	406
  3962  0194                     _PMDATH	set	404
  3963  0193                     _PMDATL	set	403
  3964  0291                     _CCPR1	set	657
  3965  0298                     _CCPR2	set	664
  3966  0293                     _CCP1CONbits	set	659
  3967  029A                     _CCP2CONbits	set	666
  3968  029D                     _CCPTMRS0	set	669
  3969  029E                     _CCPTMRS1	set	670
  3970  029F                     _CCPTMRS2	set	671
  3971  0311                     _CCPR3	set	785
  3972  0318                     _CCPR4	set	792
  3973  031C                     _CCPR5	set	796
  3974  0313                     _CCP3CONbits	set	787
  3975  031A                     _CCP4CONbits	set	794
  3976  031E                     _CCP5CONbits	set	798
  3977  030C                     _TRISFbits	set	780
  3978  030D                     _TRISGbits	set	781
  3979  038C                     _LATFbits	set	908
  3980  038D                     _LATGbits	set	909
  3981  040C                     _ANSELFbits	set	1036
  3982  061A                     _CCPR9	set	1562
  3983  061F                     _CCP10CONbits	set	1567
  3984  0613                     _CCP6CONbits	set	1555
  3985  0616                     _CCP7CONbits	set	1558
  3986  0619                     _CCP8CONbits	set	1561
  3987  061C                     _CCP9CONbits	set	1564
  3988                           
  3989                           ; #config settings
  3990  0000                     
  3991                           	psect	cinit
  3992  01F2                     start_initialization:	
  3993  01F2                     __initialization:		;BIGRAM
  3994                           
  3995                           ; Clear objects allocated to BANK0
  3996  01F2  01EB               	clrf	__pbssBANK0& (0+127)
  3997                           
  3998                           ; Clear objects allocated to BANK1
  3999  01F3  30DD               	movlw	low __pbssBANK1
  4000  01F4  0084               	movwf	4
  4001  01F5  3000               	movlw	high __pbssBANK1
  4002  01F6  0085               	movwf	5
  4003  01F7  3011               	movlw	17
  4004  01F8  00FE               	movwf	btemp
  4005  01F9  3000               	movlw	0
  4006  01FA  00FF               	movwf	btemp+1
  4007  01FB  319E  2607  3181   	fcall	clear_ram0
  4008                           
  4009                           ; Clear objects allocated to BANK2
  4010  01FE  3020               	movlw	low __pbssBANK2
  4011  01FF  0084               	movwf	4
  4012  0200  3001               	movlw	high __pbssBANK2
  4013  0201  0085               	movwf	5
  4014  0202  303A               	movlw	58
  4015  0203  00FE               	movwf	btemp
  4016  0204  3000               	movlw	0
  4017  0205  00FF               	movwf	btemp+1
  4018  0206  319E  2607  3181   	fcall	clear_ram0
  4019                           
  4020                           ; Clear objects allocated to BANK3
  4021  0209  30A0               	movlw	low __pbssBANK3
  4022  020A  0084               	movwf	4
  4023  020B  3001               	movlw	high __pbssBANK3
  4024  020C  0085               	movwf	5
  4025  020D  3048               	movlw	72
  4026  020E  00FE               	movwf	btemp
  4027  020F  3000               	movlw	0
  4028  0210  00FF               	movwf	btemp+1
  4029  0211  319E  2607  3181   	fcall	clear_ram0
  4030                           
  4031                           ; Clear objects allocated to BANK9
  4032  0214  30A0               	movlw	low __pbssBANK9
  4033  0215  0084               	movwf	4
  4034  0216  3004               	movlw	high __pbssBANK9
  4035  0217  0085               	movwf	5
  4036  0218  3040               	movlw	64
  4037  0219  00FE               	movwf	btemp
  4038  021A  3000               	movlw	0
  4039  021B  00FF               	movwf	btemp+1
  4040  021C  319E  2607  3181   	fcall	clear_ram0
  4041                           
  4042                           ; Initialize objects allocated to BIGRAM
  4043  021F  307E               	movlw	low __pidataBIGRAM
  4044  0220  0084               	movwf	4
  4045  0221  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  4046  0222  0085               	movwf	5
  4047  0223  306E               	movlw	low (0+9070)
  4048  0224  0086               	movwf	6
  4049  0225  3023               	movlw	high (0+9070)
  4050  0226  0087               	movwf	7
  4051  0227  3002               	movlw	2
  4052  0228  00FF               	movwf	btemp+1
  4053  0229  3082               	movlw	130
  4054  022A  319D  25FB  3181   	fcall	init_ram
  4055                           
  4056                           ; Initialize objects allocated to COMMON
  4057  022D  3188  2000  3181   	fcall	__pidataCOMMON	;fetch initializer
  4058  0230  00FD               	movwf	__pdataCOMMON& (0+127)
  4059                           
  4060                           ; Initialize objects allocated to BANK0
  4061  0231  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
  4062  0234  00E9               	movwf	__pdataBANK0& (0+127)
  4063  0235  3180  2003  3181   	fcall	__pidataBANK0+1	;fetch initializer
  4064  0238  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  4065                           
  4066                           ; Initialize objects allocated to BANK1
  4067  0239  3047               	movlw	low __pidataBANK1
  4068  023A  0084               	movwf	4
  4069  023B  309E               	movlw	(high __pidataBANK1)| (0+128)
  4070  023C  0085               	movwf	5
  4071  023D  30C9               	movlw	low __pdataBANK1
  4072  023E  0086               	movwf	6
  4073  023F  3000               	movlw	high __pdataBANK1
  4074  0240  0087               	movwf	7
  4075  0241  3000               	movlw	0
  4076  0242  00FF               	movwf	btemp+1
  4077  0243  3014               	movlw	20
  4078  0244  319D  25FB  3181   	fcall	init_ram
  4079                           
  4080                           ; Initialize objects allocated to BANK2
  4081  0247  3034               	movlw	low __pidataBANK2
  4082  0248  0084               	movwf	4
  4083  0249  309E               	movlw	(high __pidataBANK2)| (0+128)
  4084  024A  0085               	movwf	5
  4085  024B  305A               	movlw	low __pdataBANK2
  4086  024C  0086               	movwf	6
  4087  024D  3001               	movlw	high __pdataBANK2
  4088  024E  0087               	movwf	7
  4089  024F  3000               	movlw	0
  4090  0250  00FF               	movwf	btemp+1
  4091  0251  3013               	movlw	19
  4092  0252  319D  25FB  3181   	fcall	init_ram
  4093                           
  4094                           ; Initialize objects allocated to BANK4
  4095  0255  3079               	movlw	low __pidataBANK4
  4096  0256  0084               	movwf	4
  4097  0257  3091               	movlw	(high __pidataBANK4)| (0+128)
  4098  0258  0085               	movwf	5
  4099  0259  3020               	movlw	low __pdataBANK4
  4100  025A  0086               	movwf	6
  4101  025B  3002               	movlw	high __pdataBANK4
  4102  025C  0087               	movwf	7
  4103  025D  3000               	movlw	0
  4104  025E  00FF               	movwf	btemp+1
  4105  025F  303E               	movlw	62
  4106  0260  319D  25FB  3181   	fcall	init_ram
  4107                           
  4108                           ; Initialize objects allocated to BANK5
  4109  0263  303B               	movlw	low __pidataBANK5
  4110  0264  0084               	movwf	4
  4111  0265  3091               	movlw	(high __pidataBANK5)| (0+128)
  4112  0266  0085               	movwf	5
  4113  0267  30A0               	movlw	low __pdataBANK5
  4114  0268  0086               	movwf	6
  4115  0269  3002               	movlw	high __pdataBANK5
  4116  026A  0087               	movwf	7
  4117  026B  3000               	movlw	0
  4118  026C  00FF               	movwf	btemp+1
  4119  026D  303E               	movlw	62
  4120  026E  319D  25FB  3181   	fcall	init_ram
  4121                           
  4122                           ; Initialize objects allocated to BANK6
  4123  0271  30FD               	movlw	low __pidataBANK6
  4124  0272  0084               	movwf	4
  4125  0273  3090               	movlw	(high __pidataBANK6)| (0+128)
  4126  0274  0085               	movwf	5
  4127  0275  3020               	movlw	low __pdataBANK6
  4128  0276  0086               	movwf	6
  4129  0277  3003               	movlw	high __pdataBANK6
  4130  0278  0087               	movwf	7
  4131  0279  3000               	movlw	0
  4132  027A  00FF               	movwf	btemp+1
  4133  027B  303E               	movlw	62
  4134  027C  319D  25FB  3181   	fcall	init_ram
  4135                           
  4136                           ; Initialize objects allocated to BANK7
  4137  027F  30F9               	movlw	low __pidataBANK7
  4138  0280  0084               	movwf	4
  4139  0281  3093               	movlw	(high __pidataBANK7)| (0+128)
  4140  0282  0085               	movwf	5
  4141  0283  30A0               	movlw	low __pdataBANK7
  4142  0284  0086               	movwf	6
  4143  0285  3003               	movlw	high __pdataBANK7
  4144  0286  0087               	movwf	7
  4145  0287  3000               	movlw	0
  4146  0288  00FF               	movwf	btemp+1
  4147  0289  3050               	movlw	80
  4148  028A  319D  25FB  3181   	fcall	init_ram
  4149                           
  4150                           ; Initialize objects allocated to BANK8
  4151  028D  30A9               	movlw	low __pidataBANK8
  4152  028E  0084               	movwf	4
  4153  028F  3093               	movlw	(high __pidataBANK8)| (0+128)
  4154  0290  0085               	movwf	5
  4155  0291  3020               	movlw	low __pdataBANK8
  4156  0292  0086               	movwf	6
  4157  0293  3004               	movlw	high __pdataBANK8
  4158  0294  0087               	movwf	7
  4159  0295  3000               	movlw	0
  4160  0296  00FF               	movwf	btemp+1
  4161  0297  3050               	movlw	80
  4162  0298  319D  25FB  3181   	fcall	init_ram
  4163                           
  4164                           ; Initialize objects allocated to BANK10
  4165  029B  30BF               	movlw	low __pidataBANK10
  4166  029C  0084               	movwf	4
  4167  029D  3090               	movlw	(high __pidataBANK10)| (0+128)
  4168  029E  0085               	movwf	5
  4169  029F  3020               	movlw	low __pdataBANK10
  4170  02A0  0086               	movwf	6
  4171  02A1  3005               	movlw	high __pdataBANK10
  4172  02A2  0087               	movwf	7
  4173  02A3  3000               	movlw	0
  4174  02A4  00FF               	movwf	btemp+1
  4175  02A5  303E               	movlw	62
  4176  02A6  319D  25FB         	fcall	init_ram
  4177  02A8                     end_of_initialization:	
  4178                           ;End of C runtime variable initialization code
  4179                           
  4180  02A8                     __end_of__initialization:	
  4181  02A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4182  02A9  0020               	movlb	0
  4183  02AA  3182  2AAC         	ljmp	_main	;jump to C main() function
  4184                           
  4185                           	psect	dataCOMMON
  4186  007D                     __pdataCOMMON:	
  4187  007D                     _switchBypass_state:	
  4188  007D                     	ds	1
  4189                           
  4190                           	psect	bssBANK0
  4191  006B                     __pbssBANK0:	
  4192  006B                     _doubleTap_state:	
  4193  006B                     	ds	1
  4194                           
  4195                           	psect	dataBANK0
  4196  0069                     __pdataBANK0:	
  4197  0069                     _feedback_state:	
  4198  0069                     	ds	1
  4199  006A                     _longTap_state:	
  4200  006A                     	ds	1
  4201                           
  4202                           	psect	bssBANK1
  4203  00DD                     __pbssBANK1:	
  4204  00DD                     _sub_timer:	
  4205  00DD                     	ds	4
  4206  00E1                     _tap_timer:	
  4207  00E1                     	ds	4
  4208  00E5                     _timer:	
  4209  00E5                     	ds	4
  4210  00E9                     _mod_counter:	
  4211  00E9                     	ds	2
  4212  00EB                     _feedback_start:	
  4213  00EB                     	ds	1
  4214  00EC                     _suspend_blink:	
  4215  00EC                     	ds	1
  4216  00ED                     _switchTap_pressed:	
  4217  00ED                     	ds	1
  4218                           
  4219                           	psect	dataBANK1
  4220  00C9                     __pdataBANK1:	
  4221  00C9                     _baseline_delay_time:	
  4222  00C9                     	ds	4
  4223  00CD                     _delay_time:	
  4224  00CD                     	ds	4
  4225  00D1                     _bottom_push_state:	
  4226  00D1                     	ds	2
  4227  00D3                     _knob1_prev:	
  4228  00D3                     	ds	2
  4229  00D5                     _knob2_prev:	
  4230  00D5                     	ds	2
  4231  00D7                     _long_press_limit:	
  4232  00D7                     	ds	2
  4233  00D9                     _top_push_state:	
  4234  00D9                     	ds	2
  4235  00DB                     _blink_rate:	
  4236  00DB                     	ds	1
  4237  00DC                     _num_taps:	
  4238  00DC                     	ds	1
  4239                           
  4240                           	psect	bssBANK2
  4241  0120                     __pbssBANK2:	
  4242  0120                     _ledState:	
  4243  0120                     	ds	4
  4244  0124                     _mod_timer:	
  4245  0124                     	ds	4
  4246  0128                     _SPI_Value:	
  4247  0128                     	ds	2
  4248  012A                     _adjust_sub_delay:	
  4249  012A                     	ds	2
  4250  012C                     _debounce_bypass:	
  4251  012C                     	ds	2
  4252  012E                     _debounce_count:	
  4253  012E                     	ds	2
  4254  0130                     _debounce_mode1:	
  4255  0130                     	ds	2
  4256  0132                     _debounce_mode2:	
  4257  0132                     	ds	2
  4258  0134                     _delay_counter:	
  4259  0134                     	ds	2
  4260  0136                     _delayfound:	
  4261  0136                     	ds	2
  4262  0138                     _feedback_timer:	
  4263  0138                     	ds	2
  4264  013A                     _knob_1_pos:	
  4265  013A                     	ds	2
  4266  013C                     _knob_2_pos:	
  4267  013C                     	ds	2
  4268  013E                     _knob_3_pos:	
  4269  013E                     	ds	2
  4270  0140                     _knob_4_pos:	
  4271  0140                     	ds	2
  4272  0142                     _knob_5_pos:	
  4273  0142                     	ds	2
  4274  0144                     _longTap_timer:	
  4275  0144                     	ds	2
  4276  0146                     _mod_delay_time_bak:	
  4277  0146                     	ds	2
  4278  0148                     _mod_value:	
  4279  0148                     	ds	2
  4280  014A                     _reset_sub_delay:	
  4281  014A                     	ds	2
  4282  014C                     _switchBypass_pressed:	
  4283  014C                     	ds	2
  4284  014E                     _switchBypass_toggle:	
  4285  014E                     	ds	2
  4286  0150                     _bottomTactile_pressed:	
  4287  0150                     	ds	1
  4288  0151                     _bypass_turning_on:	
  4289  0151                     	ds	1
  4290  0152                     _iCnt:	
  4291  0152                     	ds	1
  4292  0153                     _longTap_start:	
  4293  0153                     	ds	1
  4294  0154                     _mode1_state:	
  4295  0154                     	ds	1
  4296  0155                     _mode2_state:	
  4297  0155                     	ds	1
  4298  0156                     _preset_blink:	
  4299  0156                     	ds	1
  4300  0157                     _preset_programmning_on:	
  4301  0157                     	ds	1
  4302  0158                     _switchTap_down:	
  4303  0158                     	ds	1
  4304  0159                     _topTactile_pressed:	
  4305  0159                     	ds	1
  4306                           
  4307                           	psect	dataBANK2
  4308  015A                     __pdataBANK2:	
  4309  015A                     _blink_delay:	
  4310  015A                     	ds	2
  4311  015C                     _delay_time_changed:	
  4312  015C                     	ds	2
  4313  015E                     _knob3_prev:	
  4314  015E                     	ds	2
  4315  0160                     _knob4_prev:	
  4316  0160                     	ds	2
  4317  0162                     _knob5_prev:	
  4318  0162                     	ds	2
  4319  0164                     _mod_delay_time:	
  4320  0164                     	ds	2
  4321  0166                     _switchBypass_up:	
  4322  0166                     	ds	2
  4323  0168                     _tap_iteration:	
  4324  0168                     	ds	2
  4325  016A                     _blink_state:	
  4326  016A                     	ds	1
  4327  016B                     _currentBypassState:	
  4328  016B                     	ds	1
  4329  016C                     _switchTap_state:	
  4330  016C                     	ds	1
  4331                           
  4332                           	psect	bssBANK3
  4333  01A0                     __pbssBANK3:	
  4334  01A0                     _tap:	
  4335  01A0                     	ds	44
  4336  01CC                     _tap_history:	
  4337  01CC                     	ds	20
  4338  01E0                     _tap_total:	
  4339  01E0                     	ds	4
  4340  01E4                     _test_timer:	
  4341  01E4                     	ds	4
  4342                           
  4343                           	psect	dataBANK4
  4344  0220                     __pdataBANK4:	
  4345  0220                     _mod2:	
  4346  0220                     	ds	62
  4347                           
  4348                           	psect	dataBANK5
  4349  02A0                     __pdataBANK5:	
  4350  02A0                     _mod3:	
  4351  02A0                     	ds	62
  4352                           
  4353                           	psect	dataBANK6
  4354  0320                     __pdataBANK6:	
  4355  0320                     _mod4:	
  4356  0320                     	ds	62
  4357                           
  4358                           	psect	dataBANK7
  4359  03A0                     __pdataBANK7:	
  4360  03A0                     _B25k:	
  4361  03A0                     	ds	80
  4362                           
  4363                           	psect	dataBANK8
  4364  0420                     __pdataBANK8:	
  4365  0420                     _iB25k:	
  4366  0420                     	ds	80
  4367                           
  4368                           	psect	bssBANK9
  4369  04A0                     __pbssBANK9:	
  4370  04A0                     _myBuf:	
  4371  04A0                     	ds	64
  4372                           
  4373                           	psect	dataBANK10
  4374  0520                     __pdataBANK10:	
  4375  0520                     _mod1:	
  4376  0520                     	ds	62
  4377                           
  4378                           	psect	clrtext
  4379  1E07                     clear_ram0:	
  4380                           ;	Called with FSR0 containing the base address, and
  4381                           ;	btemp/btemp+1 has the size to clear
  4382                           
  4383  1E07  0064               	clrwdt	;clear the watchdog before getting into this loop
  4384  1E08                     clrloop0:	
  4385  1E08  0180               	clrf	0	;clear RAM location pointed to by FSR
  4386  1E09  3101               	addfsr 0,1
  4387  1E0A  3001               	movlw	1
  4388  1E0B  02FE               	subwf	126,f
  4389  1E0C  3000               	movlw	0
  4390  1E0D  3BFF               	subwfb	127,f
  4391  1E0E  087F               	movf	127,w
  4392  1E0F  047E               	iorwf	126,w
  4393  1E10  1903               	btfsc	3,2
  4394  1E11  3400               	retlw	0	;all done for this memory range, return
  4395  1E12  2E08               	goto	clrloop0	;have we reached the end yet?
  4396                           
  4397                           	psect	inittext
  4398  1DFB                     init_ram:	
  4399  1DFB  00FE               	movwf	126
  4400  1DFC                     initloop:	
  4401  1DFC  0012               	moviw fsr0++
  4402  1DFD  001E               	movwi fsr1++
  4403  1DFE  3001               	movlw	1
  4404  1DFF  02FE               	subwf	126,f
  4405  1E00  3000               	movlw	0
  4406  1E01  3BFF               	subwfb	127,f
  4407  1E02  087F               	movf	127,w
  4408  1E03  047E               	iorwf	126,w
  4409  1E04  1903               	btfsc	3,2
  4410  1E05  3400               	retlw	0
  4411  1E06  2DFC               	goto	initloop
  4412                           
  4413                           	psect	cstackBANK3
  4414  01E8                     __pcstackBANK3:	
  4415  01E8                     main@adjusted_pot_value:	
  4416                           
  4417                           ; 2 bytes @ 0x0
  4418  01E8                     	ds	2
  4419  01EA                     main@i:	
  4420                           
  4421                           ; 2 bytes @ 0x2
  4422  01EA                     	ds	2
  4423  01EC                     main@i_378:	
  4424                           
  4425                           ; 2 bytes @ 0x4
  4426  01EC                     	ds	2
  4427                           
  4428                           	psect	cstackBANK1
  4429  00A0                     __pcstackBANK1:	
  4430  00A0                     ?___fttol:	
  4431  00A0                     ___fttol@f1:	
  4432                           ; 4 bytes @ 0x0
  4433                           
  4434                           
  4435                           ; 3 bytes @ 0x0
  4436  00A0                     	ds	4
  4437  00A4                     ??___fttol:	
  4438                           
  4439                           ; 1 bytes @ 0x4
  4440  00A4                     	ds	4
  4441  00A8                     ___fttol@sign1:	
  4442                           
  4443                           ; 1 bytes @ 0x8
  4444  00A8                     	ds	1
  4445  00A9                     ___fttol@lval:	
  4446                           
  4447                           ; 4 bytes @ 0x9
  4448  00A9                     	ds	4
  4449  00AD                     ___fttol@exp1:	
  4450                           
  4451                           ; 1 bytes @ 0xD
  4452  00AD                     	ds	1
  4453  00AE                     ?_set_subdivision:	
  4454  00AE                     set_subdivision@x:	
  4455                           ; 2 bytes @ 0xE
  4456                           
  4457                           
  4458                           ; 2 bytes @ 0xE
  4459  00AE                     	ds	2
  4460  00B0                     set_subdivision@y:	
  4461                           
  4462                           ; 2 bytes @ 0x10
  4463  00B0                     	ds	2
  4464  00B2                     ??_set_subdivision:	
  4465                           
  4466                           ; 1 bytes @ 0x12
  4467  00B2                     	ds	3
  4468  00B5                     set_subdivision@tmpX:	
  4469                           
  4470                           ; 2 bytes @ 0x15
  4471  00B5                     	ds	2
  4472  00B7                     set_subdivision@scalar:	
  4473                           
  4474                           ; 3 bytes @ 0x17
  4475  00B7                     	ds	3
  4476  00BA                     ??_main:	
  4477                           
  4478                           ; 1 bytes @ 0x1A
  4479  00BA                     	ds	15
  4480                           
  4481                           	psect	cstackCOMMON
  4482  0070                     __pcstackCOMMON:	
  4483  0070                     ?_ConfigureOscillator:	
  4484  0070                     ?_InitApp:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_InitializeTaps:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_initSwitchBypass:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_ReadSavedSettings:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_read_bottom_tactile:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?_read_top_tactile:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_update_mode:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_showBootSequence:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_updateSwitchBypass:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_updateSwitchTap:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_init_adc:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_init_pwm:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_init_timer2:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_init_timer0:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_getCurrentLEDState:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_star_tactiles:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_solidring_tactiles:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_restoreLEDState:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_isr:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?_main:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     ?i1_set_leds_top:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547  0070                     i1set_leds_top@x:	
  4548                           ; 1 bytes @ 0x0
  4549                           
  4550                           
  4551                           ; 2 bytes @ 0x0
  4552  0070                     	ds	2
  4553  0072                     i1set_leds_top@ledState:	
  4554                           
  4555                           ; 2 bytes @ 0x2
  4556  0072                     	ds	2
  4557  0074                     ??_isr:	
  4558  0074                     ??i1_set_leds_top:	
  4559                           ; 1 bytes @ 0x4
  4560                           
  4561                           
  4562                           ; 1 bytes @ 0x4
  4563  0074                     	ds	9
  4564                           
  4565                           	psect	cstackBANK0
  4566  0020                     __pcstackBANK0:	
  4567  0020                     isr@tmpSubDelay:	
  4568                           
  4569                           ; 2 bytes @ 0x0
  4570  0020                     	ds	2
  4571  0022                     ?_set_leds_top:	
  4572  0022                     ??_ConfigureOscillator:	
  4573                           ; 1 bytes @ 0x2
  4574                           
  4575  0022                     ??_InitApp:	
  4576                           ; 1 bytes @ 0x2
  4577                           
  4578  0022                     ??_InitializeTaps:	
  4579                           ; 1 bytes @ 0x2
  4580                           
  4581  0022                     ??_update_mode:	
  4582                           ; 1 bytes @ 0x2
  4583                           
  4584  0022                     ??_init_adc:	
  4585                           ; 1 bytes @ 0x2
  4586                           
  4587  0022                     ??_init_pwm:	
  4588                           ; 1 bytes @ 0x2
  4589                           
  4590  0022                     ??_init_timer2:	
  4591                           ; 1 bytes @ 0x2
  4592                           
  4593  0022                     ??_init_timer0:	
  4594                           ; 1 bytes @ 0x2
  4595                           
  4596  0022                     ?_set_leds_bottom:	
  4597                           ; 1 bytes @ 0x2
  4598                           
  4599  0022                     ??_getCurrentLEDState:	
  4600                           ; 1 bytes @ 0x2
  4601                           
  4602  0022                     ??_restoreLEDState:	
  4603                           ; 1 bytes @ 0x2
  4604                           
  4605  0022                     ?_setFeedbackState:	
  4606                           ; 1 bytes @ 0x2
  4607                           
  4608  0022                     ?_setLongTapState:	
  4609                           ; 1 bytes @ 0x2
  4610                           
  4611  0022                     ?_updateSwitchBypassState:	
  4612                           ; 1 bytes @ 0x2
  4613                           
  4614  0022                     ?_adc_convert:	
  4615                           ; 1 bytes @ 0x2
  4616                           
  4617  0022                     ?_FLASH_ReadWord:	
  4618                           ; 2 bytes @ 0x2
  4619                           
  4620  0022                     ?_getSwitchBypassState:	
  4621                           ; 2 bytes @ 0x2
  4622                           
  4623  0022                     ?___wmul:	
  4624                           ; 2 bytes @ 0x2
  4625                           
  4626  0022                     ?___awdiv:	
  4627                           ; 2 bytes @ 0x2
  4628                           
  4629  0022                     ?___ftpack:	
  4630                           ; 2 bytes @ 0x2
  4631                           
  4632  0022                     ?___ftneg:	
  4633                           ; 3 bytes @ 0x2
  4634                           
  4635  0022                     ?___lmul:	
  4636                           ; 3 bytes @ 0x2
  4637                           
  4638  0022                     FLASH_ReadWord@flashAddr:	
  4639                           ; 4 bytes @ 0x2
  4640                           
  4641  0022                     set_leds_top@x:	
  4642                           ; 2 bytes @ 0x2
  4643                           
  4644  0022                     set_leds_bottom@x:	
  4645                           ; 2 bytes @ 0x2
  4646                           
  4647  0022                     updateSwitchBypassState@state:	
  4648                           ; 2 bytes @ 0x2
  4649                           
  4650  0022                     setFeedbackState@f_state:	
  4651                           ; 2 bytes @ 0x2
  4652                           
  4653  0022                     setLongTapState@f_state:	
  4654                           ; 2 bytes @ 0x2
  4655                           
  4656  0022                     ___wmul@multiplier:	
  4657                           ; 2 bytes @ 0x2
  4658                           
  4659  0022                     ___awdiv@divisor:	
  4660                           ; 2 bytes @ 0x2
  4661                           
  4662  0022                     ___ftpack@arg:	
  4663                           ; 2 bytes @ 0x2
  4664                           
  4665  0022                     ___ftneg@f1:	
  4666                           ; 3 bytes @ 0x2
  4667                           
  4668  0022                     ___lmul@multiplier:	
  4669                           ; 3 bytes @ 0x2
  4670                           
  4671                           
  4672                           ; 4 bytes @ 0x2
  4673  0022                     	ds	1
  4674  0023                     InitializeTaps@itap:	
  4675                           
  4676                           ; 2 bytes @ 0x3
  4677  0023                     	ds	1
  4678  0024                     ??_adc_convert:	
  4679  0024                     ??_FLASH_ReadWord:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  0024                     ??_set_leds_bottom:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685  0024                     ??_setFeedbackState:	
  4686                           ; 1 bytes @ 0x4
  4687                           
  4688  0024                     ??_setLongTapState:	
  4689                           ; 1 bytes @ 0x4
  4690                           
  4691  0024                     ??_updateSwitchBypassState:	
  4692                           ; 1 bytes @ 0x4
  4693                           
  4694  0024                     ??_getSwitchBypassState:	
  4695                           ; 1 bytes @ 0x4
  4696                           
  4697  0024                     FLASH_ReadWord@GIEBitValue:	
  4698                           ; 1 bytes @ 0x4
  4699                           
  4700  0024                     set_leds_top@ledState:	
  4701                           ; 1 bytes @ 0x4
  4702                           
  4703  0024                     ___wmul@multiplicand:	
  4704                           ; 2 bytes @ 0x4
  4705                           
  4706  0024                     ___awdiv@dividend:	
  4707                           ; 2 bytes @ 0x4
  4708                           
  4709                           
  4710                           ; 2 bytes @ 0x4
  4711  0024                     	ds	1
  4712  0025                     ??___ftneg:	
  4713  0025                     adc_convert@channel:	
  4714                           ; 1 bytes @ 0x5
  4715                           
  4716  0025                     ___ftpack@exp:	
  4717                           ; 1 bytes @ 0x5
  4718                           
  4719                           
  4720                           ; 1 bytes @ 0x5
  4721  0025                     	ds	1
  4722  0026                     ??_set_leds_top:	
  4723  0026                     ??_ReadSavedSettings:	
  4724                           ; 1 bytes @ 0x6
  4725                           
  4726  0026                     ??___wmul:	
  4727                           ; 1 bytes @ 0x6
  4728                           
  4729  0026                     ??___awdiv:	
  4730                           ; 1 bytes @ 0x6
  4731                           
  4732  0026                     ___ftpack@sign:	
  4733                           ; 1 bytes @ 0x6
  4734                           
  4735  0026                     ___wmul@product:	
  4736                           ; 1 bytes @ 0x6
  4737                           
  4738  0026                     ___lmul@multiplicand:	
  4739                           ; 2 bytes @ 0x6
  4740                           
  4741                           
  4742                           ; 4 bytes @ 0x6
  4743  0026                     	ds	1
  4744  0027                     ??___ftpack:	
  4745  0027                     ___awdiv@counter:	
  4746                           ; 1 bytes @ 0x7
  4747                           
  4748                           
  4749                           ; 1 bytes @ 0x7
  4750  0027                     	ds	1
  4751  0028                     ?___aldiv:	
  4752  0028                     ___awdiv@sign:	
  4753                           ; 4 bytes @ 0x8
  4754                           
  4755  0028                     ___aldiv@divisor:	
  4756                           ; 1 bytes @ 0x8
  4757                           
  4758                           
  4759                           ; 4 bytes @ 0x8
  4760  0028                     	ds	1
  4761  0029                     ___awdiv@quotient:	
  4762                           
  4763                           ; 2 bytes @ 0x9
  4764  0029                     	ds	1
  4765  002A                     ??___lmul:	
  4766  002A                     ?___altoft:	
  4767                           ; 1 bytes @ 0xA
  4768                           
  4769  002A                     ?___awtoft:	
  4770                           ; 3 bytes @ 0xA
  4771                           
  4772  002A                     ?___ftadd:	
  4773                           ; 3 bytes @ 0xA
  4774                           
  4775  002A                     ___awtoft@c:	
  4776                           ; 3 bytes @ 0xA
  4777                           
  4778  002A                     ___ftadd@f1:	
  4779                           ; 2 bytes @ 0xA
  4780                           
  4781  002A                     ___lmul@product:	
  4782                           ; 3 bytes @ 0xA
  4783                           
  4784  002A                     ___altoft@c:	
  4785                           ; 4 bytes @ 0xA
  4786                           
  4787                           
  4788                           ; 4 bytes @ 0xA
  4789  002A                     	ds	2
  4790  002C                     ___aldiv@dividend:	
  4791                           
  4792                           ; 4 bytes @ 0xC
  4793  002C                     	ds	1
  4794  002D                     ??___awtoft:	
  4795  002D                     ___ftadd@f2:	
  4796                           ; 1 bytes @ 0xD
  4797                           
  4798                           
  4799                           ; 3 bytes @ 0xD
  4800  002D                     	ds	1
  4801  002E                     ?_wait_ms:	
  4802  002E                     ??___altoft:	
  4803                           ; 1 bytes @ 0xE
  4804                           
  4805  002E                     wait_ms@timeSec:	
  4806                           ; 1 bytes @ 0xE
  4807                           
  4808                           
  4809                           ; 2 bytes @ 0xE
  4810  002E                     	ds	1
  4811  002F                     ___awtoft@sign:	
  4812                           
  4813                           ; 1 bytes @ 0xF
  4814  002F                     	ds	1
  4815  0030                     ??_wait_ms:	
  4816  0030                     ??___aldiv:	
  4817                           ; 1 bytes @ 0x10
  4818                           
  4819  0030                     ??___ftadd:	
  4820                           ; 1 bytes @ 0x10
  4821                           
  4822  0030                     ___altoft@exp:	
  4823                           ; 1 bytes @ 0x10
  4824                           
  4825  0030                     wait_ms@timemsl:	
  4826                           ; 1 bytes @ 0x10
  4827                           
  4828                           
  4829                           ; 4 bytes @ 0x10
  4830  0030                     	ds	1
  4831  0031                     ___aldiv@counter:	
  4832  0031                     ___altoft@sign:	
  4833                           ; 1 bytes @ 0x11
  4834                           
  4835                           
  4836                           ; 1 bytes @ 0x11
  4837  0031                     	ds	1
  4838  0032                     ___aldiv@sign:	
  4839                           
  4840                           ; 1 bytes @ 0x12
  4841  0032                     	ds	1
  4842  0033                     ___aldiv@quotient:	
  4843                           
  4844                           ; 4 bytes @ 0x13
  4845  0033                     	ds	1
  4846  0034                     ??_read_bottom_tactile:	
  4847  0034                     ??_read_top_tactile:	
  4848                           ; 1 bytes @ 0x14
  4849                           
  4850  0034                     ??_star_tactiles:	
  4851                           ; 1 bytes @ 0x14
  4852                           
  4853  0034                     ??_solidring_tactiles:	
  4854                           ; 1 bytes @ 0x14
  4855                           
  4856  0034                     ?_setSwitchBypassState:	
  4857                           ; 1 bytes @ 0x14
  4858                           
  4859  0034                     ?_setDoublePressState:	
  4860                           ; 1 bytes @ 0x14
  4861                           
  4862  0034                     ___ftadd@sign:	
  4863                           ; 1 bytes @ 0x14
  4864                           
  4865  0034                     setSwitchBypassState@f_state:	
  4866                           ; 1 bytes @ 0x14
  4867                           
  4868  0034                     setDoublePressState@f_state:	
  4869                           ; 2 bytes @ 0x14
  4870                           
  4871                           
  4872                           ; 2 bytes @ 0x14
  4873  0034                     	ds	1
  4874  0035                     ___ftadd@exp2:	
  4875                           
  4876                           ; 1 bytes @ 0x15
  4877  0035                     	ds	1
  4878  0036                     ??_setSwitchBypassState:	
  4879  0036                     ??_setDoublePressState:	
  4880                           ; 1 bytes @ 0x16
  4881                           
  4882  0036                     star_tactiles@reverse:	
  4883                           ; 1 bytes @ 0x16
  4884                           
  4885  0036                     solidring_tactiles@ring_delay:	
  4886                           ; 1 bytes @ 0x16
  4887                           
  4888  0036                     ___ftadd@exp1:	
  4889                           ; 1 bytes @ 0x16
  4890                           
  4891                           
  4892                           ; 1 bytes @ 0x16
  4893  0036                     	ds	1
  4894  0037                     ?_modulation:	
  4895  0037                     ?___ftmul:	
  4896                           ; 2 bytes @ 0x17
  4897                           
  4898  0037                     modulation@x:	
  4899                           ; 3 bytes @ 0x17
  4900                           
  4901  0037                     star_tactiles@iLed:	
  4902                           ; 2 bytes @ 0x17
  4903                           
  4904  0037                     ___ftmul@f1:	
  4905                           ; 2 bytes @ 0x17
  4906                           
  4907                           
  4908                           ; 3 bytes @ 0x17
  4909  0037                     	ds	1
  4910  0038                     ??_initSwitchBypass:	
  4911  0038                     ??_updateSwitchBypass:	
  4912                           ; 1 bytes @ 0x18
  4913                           
  4914  0038                     ??_updateSwitchTap:	
  4915                           ; 1 bytes @ 0x18
  4916                           
  4917  0038                     initSwitchBypass@initState:	
  4918                           ; 1 bytes @ 0x18
  4919                           
  4920                           
  4921                           ; 2 bytes @ 0x18
  4922  0038                     	ds	1
  4923  0039                     modulation@y:	
  4924  0039                     star_tactiles@iLed_1441:	
  4925                           ; 2 bytes @ 0x19
  4926                           
  4927                           
  4928                           ; 2 bytes @ 0x19
  4929  0039                     	ds	1
  4930  003A                     ___ftmul@f2:	
  4931                           
  4932                           ; 3 bytes @ 0x1A
  4933  003A                     	ds	1
  4934  003B                     ??_showBootSequence:	
  4935  003B                     ??_modulation:	
  4936                           ; 1 bytes @ 0x1B
  4937                           
  4938                           
  4939                           ; 1 bytes @ 0x1B
  4940  003B                     	ds	2
  4941  003D                     ??___ftmul:	
  4942                           
  4943                           ; 1 bytes @ 0x1D
  4944  003D                     	ds	1
  4945  003E                     updateSwitchTap@tapCntDivisor:	
  4946                           
  4947                           ; 2 bytes @ 0x1E
  4948  003E                     	ds	2
  4949  0040                     updateSwitchTap@iCnt:	
  4950                           
  4951                           ; 1 bytes @ 0x20
  4952  0040                     	ds	1
  4953  0041                     ___ftmul@exp:	
  4954                           
  4955                           ; 1 bytes @ 0x21
  4956  0041                     	ds	1
  4957  0042                     ___ftmul@f3_as_product:	
  4958                           
  4959                           ; 3 bytes @ 0x22
  4960  0042                     	ds	3
  4961  0045                     ___ftmul@cntr:	
  4962                           
  4963                           ; 1 bytes @ 0x25
  4964  0045                     	ds	1
  4965  0046                     ___ftmul@sign:	
  4966                           
  4967                           ; 1 bytes @ 0x26
  4968  0046                     	ds	1
  4969  0047                     ?___ftdiv:	
  4970  0047                     ___ftdiv@f2:	
  4971                           ; 3 bytes @ 0x27
  4972                           
  4973                           
  4974                           ; 3 bytes @ 0x27
  4975  0047                     	ds	3
  4976  004A                     ___ftdiv@f1:	
  4977                           
  4978                           ; 3 bytes @ 0x2A
  4979  004A                     	ds	3
  4980  004D                     ??___ftdiv:	
  4981                           
  4982                           ; 1 bytes @ 0x2D
  4983  004D                     	ds	4
  4984  0051                     ___ftdiv@cntr:	
  4985                           
  4986                           ; 1 bytes @ 0x31
  4987  0051                     	ds	1
  4988  0052                     ___ftdiv@f3:	
  4989                           
  4990                           ; 3 bytes @ 0x32
  4991  0052                     	ds	3
  4992  0055                     ___ftdiv@exp:	
  4993                           
  4994                           ; 1 bytes @ 0x35
  4995  0055                     	ds	1
  4996  0056                     ___ftdiv@sign:	
  4997                           
  4998                           ; 1 bytes @ 0x36
  4999  0056                     	ds	1
  5000  0057                     ?_map:	
  5001  0057                     map@x:	
  5002                           ; 3 bytes @ 0x37
  5003                           
  5004                           
  5005                           ; 3 bytes @ 0x37
  5006  0057                     	ds	3
  5007  005A                     map@in_min:	
  5008                           
  5009                           ; 3 bytes @ 0x3A
  5010  005A                     	ds	3
  5011  005D                     map@in_max:	
  5012                           
  5013                           ; 3 bytes @ 0x3D
  5014  005D                     	ds	3
  5015  0060                     map@out_min:	
  5016                           
  5017                           ; 3 bytes @ 0x40
  5018  0060                     	ds	3
  5019  0063                     map@out_max:	
  5020                           
  5021                           ; 3 bytes @ 0x43
  5022  0063                     	ds	3
  5023  0066                     ??_map:	
  5024  0066                     _map$2160:	
  5025                           ; 1 bytes @ 0x46
  5026                           
  5027                           
  5028                           ; 3 bytes @ 0x46
  5029  0066                     	ds	3
  5030                           
  5031                           	psect	maintext
  5032  02AC                     __pmaintext:	
  5033 ;;
  5034 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5035 ;;
  5036 ;; *************** function _main *****************
  5037 ;; Defined at:
  5038 ;;		line 82 in file "main.c"
  5039 ;; Parameters:    Size  Location     Type
  5040 ;;		None
  5041 ;; Auto vars:     Size  Location     Type
  5042 ;;  adjusted_pot    2    0[BANK3 ] int 
  5043 ;;  i               2    4[BANK3 ] int 
  5044 ;;  i               2    2[BANK3 ] int 
  5045 ;; Return value:  Size  Location     Type
  5046 ;;                  1    wreg      void 
  5047 ;; Registers used:
  5048 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5049 ;; Tracked objects:
  5050 ;;		On entry : B1F/0
  5051 ;;		On exit  : 0/0
  5052 ;;		Unchanged: 0/0
  5053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5055 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5056 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5057 ;;      Totals:         0       0      15       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5058 ;;Total ram usage:       21 bytes
  5059 ;; Hardware stack levels required when called:    6
  5060 ;; This function calls:
  5061 ;;		_ConfigureOscillator
  5062 ;;		_InitApp
  5063 ;;		_InitializeTaps
  5064 ;;		_ReadSavedSettings
  5065 ;;		___altoft
  5066 ;;		___awdiv
  5067 ;;		___awtoft
  5068 ;;		___ftdiv
  5069 ;;		___fttol
  5070 ;;		_adc_convert
  5071 ;;		_initSwitchBypass
  5072 ;;		_map
  5073 ;;		_modulation
  5074 ;;		_read_bottom_tactile
  5075 ;;		_read_top_tactile
  5076 ;;		_set_subdivision
  5077 ;;		_showBootSequence
  5078 ;;		_updateSwitchBypass
  5079 ;;		_updateSwitchTap
  5080 ;;		_update_mode
  5081 ;; This function is called by:
  5082 ;;		Startup code after reset
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           
  5087                           ;psect for function _main
  5088  02AC                     _main:	
  5089                           
  5090                           ;main.c: 83: ConfigureOscillator();
  5091                           
  5092                           ;incstack = 0
  5093                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5094  02AC  319D  25D9  3182   	fcall	_ConfigureOscillator
  5095                           
  5096                           ;main.c: 84: InitApp();
  5097  02AF  319F  276E  3182   	fcall	_InitApp
  5098                           
  5099                           ;main.c: 86: PORTEbits.RE0 = 1;
  5100  02B2  0020               	movlb	0	; select bank0
  5101  02B3  1410               	bsf	16,0	;volatile
  5102                           
  5103                           ;main.c: 87: PORTEbits.RE1 = 1;
  5104  02B4  1490               	bsf	16,1	;volatile
  5105                           
  5106                           ;main.c: 88: PORTDbits.RD6 = 1;
  5107  02B5  170F               	bsf	15,6	;volatile
  5108                           
  5109                           ;main.c: 89: PORTDbits.RD5 = 1;
  5110  02B6  168F               	bsf	15,5	;volatile
  5111                           
  5112                           ;main.c: 90: PORTCbits.RC0 = 1;
  5113  02B7  140E               	bsf	14,0	;volatile
  5114                           
  5115                           ;main.c: 91: PORTDbits.RD7 = 1;
  5116  02B8  178F               	bsf	15,7	;volatile
  5117                           
  5118                           ;main.c: 93: InitializeTaps();
  5119  02B9  3187  27DA  3182   	fcall	_InitializeTaps
  5120                           
  5121                           ;main.c: 94: initSwitchBypass();
  5122  02BC  319E  2613  3182   	fcall	_initSwitchBypass
  5123                           
  5124                           ;main.c: 97: ReadSavedSettings();
  5125  02BF  3193  230C  3182   	fcall	_ReadSavedSettings
  5126  02C2                     l5766:	
  5127                           ;main.c: 99: while (1) {
  5128                           
  5129                           
  5130                           ;main.c: 100: read_bottom_tactile();
  5131  02C2  3192  227E  3182   	fcall	_read_bottom_tactile
  5132                           
  5133                           ;main.c: 101: read_top_tactile();
  5134  02C5  3193  235A  3182   	fcall	_read_top_tactile
  5135                           
  5136                           ;main.c: 104: update_mode();
  5137  02C8  3188  2001  3182   	fcall	_update_mode
  5138                           
  5139                           ;main.c: 106: if (PORTDbits.RD7 == 0) {
  5140  02CB  0020               	movlb	0	; select bank0
  5141  02CC  1B8F               	btfsc	15,7	;volatile
  5142  02CD  2AEC               	goto	l5780
  5143                           
  5144                           ;main.c: 107: debounce_mode1++;
  5145  02CE  3001               	movlw	1
  5146  02CF  0022               	movlb	2	; select bank2
  5147  02D0  07B0               	addwf	_debounce_mode1^(0+256),f
  5148  02D1  3000               	movlw	0
  5149  02D2  3DB1               	addwfc	(_debounce_mode1+1)^(0+256),f
  5150                           
  5151                           ;main.c: 108: if (debounce_mode1 > 25) {
  5152  02D3  0831               	movf	(_debounce_mode1+1)^(0+256),w
  5153  02D4  3A80               	xorlw	128
  5154  02D5  0021               	movlb	1	; select bank1
  5155  02D6  00BA               	movwf	??_main^(0+128)
  5156  02D7  3080               	movlw	128
  5157  02D8  023A               	subwf	??_main^(0+128),w
  5158  02D9  1D03               	skipz
  5159  02DA  2ADE               	goto	u6555
  5160  02DB  301A               	movlw	26
  5161  02DC  0022               	movlb	2	; select bank2
  5162  02DD  0230               	subwf	_debounce_mode1^(0+256),w
  5163  02DE                     u6555:	
  5164  02DE  1C03               	skipc
  5165  02DF  2AEF               	goto	l5782
  5166                           
  5167                           ;main.c: 109: debounce_mode1 = 25;
  5168  02E0  3019               	movlw	25
  5169  02E1  0022               	movlb	2	; select bank2
  5170  02E2  00B0               	movwf	_debounce_mode1^(0+256)
  5171  02E3  3000               	movlw	0
  5172  02E4  00B1               	movwf	(_debounce_mode1^(0+256)+1)
  5173                           
  5174                           ;main.c: 113: showBootSequence();
  5175  02E5  319F  2716  3182   	fcall	_showBootSequence
  5176  02E8                     l294:	
  5177                           ;main.c: 116: while (PORTDbits.RD7 == 0) {
  5178                           
  5179  02E8  0020               	movlb	0	; select bank0
  5180  02E9  1B8F               	btfsc	15,7	;volatile
  5181  02EA  2AEF               	goto	l5782
  5182  02EB  2AE8               	goto	l294
  5183  02EC                     l5780:	
  5184                           ;main.c: 117: }
  5185                           ;main.c: 118: }
  5186                           ;main.c: 119: } else {
  5187                           
  5188                           
  5189                           ;main.c: 120: debounce_mode1 = 0;
  5190  02EC  0022               	movlb	2	; select bank2
  5191  02ED  01B0               	clrf	_debounce_mode1^(0+256)
  5192  02EE  01B1               	clrf	(_debounce_mode1+1)^(0+256)
  5193  02EF                     l5782:	
  5194                           
  5195                           ;main.c: 121: }
  5196                           ;main.c: 123: updateSwitchBypass();
  5197  02EF  3189  21BE  3182   	fcall	_updateSwitchBypass
  5198                           
  5199                           ;main.c: 124: updateSwitchTap();
  5200  02F2  318B  2396  3182   	fcall	_updateSwitchTap
  5201                           
  5202                           ;main.c: 218: knob_1_pos = adc_convert(0);
  5203  02F5  3000               	movlw	0
  5204  02F6  319E  269F  3182   	fcall	_adc_convert
  5205  02F9  0020               	movlb	0	; select bank0
  5206  02FA  0823               	movf	?_adc_convert+1,w
  5207  02FB  0022               	movlb	2	; select bank2
  5208  02FC  00BB               	movwf	(_knob_1_pos+1)^(0+256)
  5209  02FD  0020               	movlb	0	; select bank0
  5210  02FE  0822               	movf	?_adc_convert,w
  5211  02FF  0022               	movlb	2	; select bank2
  5212  0300  00BA               	movwf	_knob_1_pos^(0+256)
  5213                           
  5214                           ;main.c: 219: knob_2_pos = adc_convert(1);
  5215  0301  3001               	movlw	1
  5216  0302  319E  269F  3182   	fcall	_adc_convert
  5217  0305  0020               	movlb	0	; select bank0
  5218  0306  0823               	movf	?_adc_convert+1,w
  5219  0307  0022               	movlb	2	; select bank2
  5220  0308  00BD               	movwf	(_knob_2_pos+1)^(0+256)
  5221  0309  0020               	movlb	0	; select bank0
  5222  030A  0822               	movf	?_adc_convert,w
  5223  030B  0022               	movlb	2	; select bank2
  5224  030C  00BC               	movwf	_knob_2_pos^(0+256)
  5225                           
  5226                           ;main.c: 220: knob_3_pos = adc_convert(2);
  5227  030D  3002               	movlw	2
  5228  030E  319E  269F  3182   	fcall	_adc_convert
  5229  0311  0020               	movlb	0	; select bank0
  5230  0312  0823               	movf	?_adc_convert+1,w
  5231  0313  0022               	movlb	2	; select bank2
  5232  0314  00BF               	movwf	(_knob_3_pos+1)^(0+256)
  5233  0315  0020               	movlb	0	; select bank0
  5234  0316  0822               	movf	?_adc_convert,w
  5235  0317  0022               	movlb	2	; select bank2
  5236  0318  00BE               	movwf	_knob_3_pos^(0+256)
  5237                           
  5238                           ;main.c: 221: knob_4_pos = adc_convert(3);
  5239  0319  3003               	movlw	3
  5240  031A  319E  269F  3182   	fcall	_adc_convert
  5241  031D  0020               	movlb	0	; select bank0
  5242  031E  0823               	movf	?_adc_convert+1,w
  5243  031F  0022               	movlb	2	; select bank2
  5244  0320  00C1               	movwf	(_knob_4_pos+1)^(0+256)
  5245  0321  0020               	movlb	0	; select bank0
  5246  0322  0822               	movf	?_adc_convert,w
  5247  0323  0022               	movlb	2	; select bank2
  5248  0324  00C0               	movwf	_knob_4_pos^(0+256)
  5249                           
  5250                           ;main.c: 222: knob_5_pos = adc_convert(4);
  5251  0325  3004               	movlw	4
  5252  0326  319E  269F  3182   	fcall	_adc_convert
  5253  0329  0020               	movlb	0	; select bank0
  5254  032A  0823               	movf	?_adc_convert+1,w
  5255  032B  0022               	movlb	2	; select bank2
  5256  032C  00C3               	movwf	(_knob_5_pos+1)^(0+256)
  5257  032D  0020               	movlb	0	; select bank0
  5258  032E  0822               	movf	?_adc_convert,w
  5259  032F  0022               	movlb	2	; select bank2
  5260  0330  00C2               	movwf	_knob_5_pos^(0+256)
  5261                           
  5262                           ;main.c: 249: LATBbits.LATB1 = 0;
  5263  0331  108D               	bcf	13,1	;volatile
  5264                           
  5265                           ;main.c: 250: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5266  0332  0021               	movlb	1	; select bank1
  5267  0333  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5268  0334  00BA               	movwf	??_main^(0+128)
  5269  0335  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5270  0336  00BB               	movwf	(??_main^(0+128)+1)
  5271  0337  0ABA               	incf	??_main^(0+128),f
  5272  0338  1903               	skipnz
  5273  0339  0ABB               	incf	(??_main^(0+128)+1),f
  5274  033A  0022               	movlb	2	; select bank2
  5275  033B  083A               	movf	_knob_1_pos^(0+256),w
  5276  033C  0021               	movlb	1	; select bank1
  5277  033D  073A               	addwf	??_main^(0+128),w
  5278  033E  00BC               	movwf	(??_main+2)^(0+128)
  5279  033F  0022               	movlb	2	; select bank2
  5280  0340  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5281  0341  0021               	movlb	1	; select bank1
  5282  0342  3D3B               	addwfc	(??_main+1)^(0+128),w
  5283  0343  00BD               	movwf	(??_main+3)^(0+128)
  5284  0344  083D               	movf	(??_main+3)^(0+128),w
  5285  0345  3A80               	xorlw	128
  5286  0346  00BE               	movwf	(??_main+4)^(0+128)
  5287  0347  3080               	movlw	128
  5288  0348  023E               	subwf	(??_main+4)^(0+128),w
  5289  0349  1D03               	skipz
  5290  034A  2B4D               	goto	u6575
  5291  034B  3004               	movlw	4
  5292  034C  023C               	subwf	(??_main+2)^(0+128),w
  5293  034D                     u6575:	
  5294  034D  1803               	skipnc
  5295  034E  2B6C               	goto	l5802
  5296  034F  0021               	movlb	1	; select bank1
  5297  0350  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5298  0351  00BA               	movwf	??_main^(0+128)
  5299  0352  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5300  0353  00BB               	movwf	(??_main^(0+128)+1)
  5301  0354  0ABA               	incf	??_main^(0+128),f
  5302  0355  1903               	skipnz
  5303  0356  0ABB               	incf	(??_main^(0+128)+1),f
  5304  0357  0022               	movlb	2	; select bank2
  5305  0358  083A               	movf	_knob_1_pos^(0+256),w
  5306  0359  0021               	movlb	1	; select bank1
  5307  035A  073A               	addwf	??_main^(0+128),w
  5308  035B  00BC               	movwf	(??_main+2)^(0+128)
  5309  035C  0022               	movlb	2	; select bank2
  5310  035D  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5311  035E  0021               	movlb	1	; select bank1
  5312  035F  3D3B               	addwfc	(??_main+1)^(0+128),w
  5313  0360  00BD               	movwf	(??_main+3)^(0+128)
  5314  0361  083D               	movf	(??_main+3)^(0+128),w
  5315  0362  3A80               	xorlw	128
  5316  0363  00BE               	movwf	(??_main+4)^(0+128)
  5317  0364  307F               	movlw	127
  5318  0365  023E               	subwf	(??_main+4)^(0+128),w
  5319  0366  1D03               	skipz
  5320  0367  2B6A               	goto	u6585
  5321  0368  30FD               	movlw	253
  5322  0369  023C               	subwf	(??_main+2)^(0+128),w
  5323  036A                     u6585:	
  5324  036A  1803               	skipnc
  5325  036B  2BC0               	goto	l5810
  5326  036C                     l5802:	
  5327                           
  5328                           ;main.c: 251: knob1_prev = knob_1_pos;
  5329  036C  0022               	movlb	2	; select bank2
  5330  036D  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5331  036E  0021               	movlb	1	; select bank1
  5332  036F  00D4               	movwf	(_knob1_prev+1)^(0+128)	;volatile
  5333  0370  0022               	movlb	2	; select bank2
  5334  0371  083A               	movf	_knob_1_pos^(0+256),w
  5335  0372  0021               	movlb	1	; select bank1
  5336  0373  00D3               	movwf	_knob1_prev^(0+128)	;volatile
  5337                           
  5338                           ;main.c: 252: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5339  0374  3000               	movlw	0
  5340  0375  0020               	movlb	0	; select bank0
  5341  0376  00E3               	movwf	map@out_max
  5342  0377  3048               	movlw	72
  5343  0378  00E4               	movwf	map@out_max+1
  5344  0379  3043               	movlw	67
  5345  037A  00E5               	movwf	map@out_max+2
  5346  037B  3080               	movlw	128
  5347  037C  00E0               	movwf	map@out_min
  5348  037D  3092               	movlw	146
  5349  037E  00E1               	movwf	map@out_min+1
  5350  037F  3044               	movlw	68
  5351  0380  00E2               	movwf	map@out_min+2
  5352  0381  30C0               	movlw	192
  5353  0382  00DD               	movwf	map@in_max
  5354  0383  307F               	movlw	127
  5355  0384  00DE               	movwf	map@in_max+1
  5356  0385  3044               	movlw	68
  5357  0386  00DF               	movwf	map@in_max+2
  5358  0387  3000               	movlw	0
  5359  0388  00DA               	movwf	map@in_min
  5360  0389  3000               	movlw	0
  5361  038A  00DB               	movwf	map@in_min+1
  5362  038B  3000               	movlw	0
  5363  038C  00DC               	movwf	map@in_min+2
  5364  038D  0021               	movlb	1	; select bank1
  5365  038E  0854               	movf	(_knob1_prev+1)^(0+128),w	;volatile
  5366  038F  0020               	movlb	0	; select bank0
  5367  0390  00AB               	movwf	___awtoft@c+1
  5368  0391  0021               	movlb	1	; select bank1
  5369  0392  0853               	movf	_knob1_prev^(0+128),w	;volatile
  5370  0393  0020               	movlb	0	; select bank0
  5371  0394  00AA               	movwf	___awtoft@c
  5372  0395  319E  26F4  3182   	fcall	___awtoft
  5373  0398  0020               	movlb	0	; select bank0
  5374  0399  082A               	movf	?___awtoft,w
  5375  039A  00D7               	movwf	map@x
  5376  039B  082B               	movf	?___awtoft+1,w
  5377  039C  00D8               	movwf	map@x+1
  5378  039D  082C               	movf	?___awtoft+2,w
  5379  039E  00D9               	movwf	map@x+2
  5380  039F  3196  26CC  3182   	fcall	_map
  5381  03A2  0020               	movlb	0	; select bank0
  5382  03A3  0857               	movf	?_map,w
  5383  03A4  0021               	movlb	1	; select bank1
  5384  03A5  00A0               	movwf	___fttol@f1^(0+128)
  5385  03A6  0020               	movlb	0	; select bank0
  5386  03A7  0858               	movf	?_map+1,w
  5387  03A8  0021               	movlb	1	; select bank1
  5388  03A9  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5389  03AA  0020               	movlb	0	; select bank0
  5390  03AB  0859               	movf	?_map+2,w
  5391  03AC  0021               	movlb	1	; select bank1
  5392  03AD  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5393  03AE  3196  2645  3182   	fcall	___fttol
  5394  03B1  0021               	movlb	1	; select bank1
  5395  03B2  0823               	movf	(?___fttol+3)^(0+128),w
  5396  03B3  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5397  03B4  0822               	movf	(?___fttol+2)^(0+128),w
  5398  03B5  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5399  03B6  0821               	movf	(?___fttol+1)^(0+128),w
  5400  03B7  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5401  03B8  0820               	movf	?___fttol^(0+128),w
  5402  03B9  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  5403                           
  5404                           ;main.c: 253: delay_time_changed = 1;
  5405  03BA  3001               	movlw	1
  5406  03BB  0022               	movlb	2	; select bank2
  5407  03BC  00DC               	movwf	_delay_time_changed^(0+256)
  5408  03BD  3000               	movlw	0
  5409  03BE  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  5410                           
  5411                           ;main.c: 254: LATBbits.LATB1 = 1;
  5412  03BF  148D               	bsf	13,1	;volatile
  5413  03C0                     l5810:	
  5414                           
  5415                           ;main.c: 255: }
  5416                           ;main.c: 265: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5417  03C0  0021               	movlb	1	; select bank1
  5418  03C1  0955               	comf	_knob2_prev^(0+128),w	;volatile
  5419  03C2  00BA               	movwf	??_main^(0+128)
  5420  03C3  0956               	comf	(_knob2_prev+1)^(0+128),w	;volatile
  5421  03C4  00BB               	movwf	(??_main^(0+128)+1)
  5422  03C5  0ABA               	incf	??_main^(0+128),f
  5423  03C6  1903               	skipnz
  5424  03C7  0ABB               	incf	(??_main^(0+128)+1),f
  5425  03C8  0022               	movlb	2	; select bank2
  5426  03C9  083C               	movf	_knob_2_pos^(0+256),w
  5427  03CA  0021               	movlb	1	; select bank1
  5428  03CB  073A               	addwf	??_main^(0+128),w
  5429  03CC  00BC               	movwf	(??_main+2)^(0+128)
  5430  03CD  0022               	movlb	2	; select bank2
  5431  03CE  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5432  03CF  0021               	movlb	1	; select bank1
  5433  03D0  3D3B               	addwfc	(??_main+1)^(0+128),w
  5434  03D1  00BD               	movwf	(??_main+3)^(0+128)
  5435  03D2  083D               	movf	(??_main+3)^(0+128),w
  5436  03D3  3A80               	xorlw	128
  5437  03D4  00BE               	movwf	(??_main+4)^(0+128)
  5438  03D5  3080               	movlw	128
  5439  03D6  023E               	subwf	(??_main+4)^(0+128),w
  5440  03D7  1D03               	skipz
  5441  03D8  2BDB               	goto	u6595
  5442  03D9  3004               	movlw	4
  5443  03DA  023C               	subwf	(??_main+2)^(0+128),w
  5444  03DB                     u6595:	
  5445  03DB  1803               	skipnc
  5446  03DC  2BFA               	goto	l5814
  5447  03DD  0021               	movlb	1	; select bank1
  5448  03DE  0955               	comf	_knob2_prev^(0+128),w	;volatile
  5449  03DF  00BA               	movwf	??_main^(0+128)
  5450  03E0  0956               	comf	(_knob2_prev+1)^(0+128),w	;volatile
  5451  03E1  00BB               	movwf	(??_main^(0+128)+1)
  5452  03E2  0ABA               	incf	??_main^(0+128),f
  5453  03E3  1903               	skipnz
  5454  03E4  0ABB               	incf	(??_main^(0+128)+1),f
  5455  03E5  0022               	movlb	2	; select bank2
  5456  03E6  083C               	movf	_knob_2_pos^(0+256),w
  5457  03E7  0021               	movlb	1	; select bank1
  5458  03E8  073A               	addwf	??_main^(0+128),w
  5459  03E9  00BC               	movwf	(??_main+2)^(0+128)
  5460  03EA  0022               	movlb	2	; select bank2
  5461  03EB  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5462  03EC  0021               	movlb	1	; select bank1
  5463  03ED  3D3B               	addwfc	(??_main+1)^(0+128),w
  5464  03EE  00BD               	movwf	(??_main+3)^(0+128)
  5465  03EF  083D               	movf	(??_main+3)^(0+128),w
  5466  03F0  3A80               	xorlw	128
  5467  03F1  00BE               	movwf	(??_main+4)^(0+128)
  5468  03F2  307F               	movlw	127
  5469  03F3  023E               	subwf	(??_main+4)^(0+128),w
  5470  03F4  1D03               	skipz
  5471  03F5  2BF8               	goto	u6605
  5472  03F6  30FD               	movlw	253
  5473  03F7  023C               	subwf	(??_main+2)^(0+128),w
  5474  03F8                     u6605:	
  5475  03F8  1803               	skipnc
  5476  03F9  2C5C               	goto	l5822
  5477  03FA                     l5814:	
  5478                           
  5479                           ;main.c: 266: knob2_prev = knob_2_pos;
  5480  03FA  0022               	movlb	2	; select bank2
  5481  03FB  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5482  03FC  0021               	movlb	1	; select bank1
  5483  03FD  00D6               	movwf	(_knob2_prev+1)^(0+128)	;volatile
  5484  03FE  0022               	movlb	2	; select bank2
  5485  03FF  083C               	movf	_knob_2_pos^(0+256),w
  5486  0400  0021               	movlb	1	; select bank1
  5487  0401  00D5               	movwf	_knob2_prev^(0+128)	;volatile
  5488                           
  5489                           ;main.c: 267: int i = map(knob2_prev, 0, 1023, 0, 39);
  5490  0402  3000               	movlw	0
  5491  0403  0020               	movlb	0	; select bank0
  5492  0404  00E3               	movwf	map@out_max
  5493  0405  301C               	movlw	28
  5494  0406  00E4               	movwf	map@out_max+1
  5495  0407  3042               	movlw	66
  5496  0408  00E5               	movwf	map@out_max+2
  5497  0409  3000               	movlw	0
  5498  040A  00E0               	movwf	map@out_min
  5499  040B  3000               	movlw	0
  5500  040C  00E1               	movwf	map@out_min+1
  5501  040D  3000               	movlw	0
  5502  040E  00E2               	movwf	map@out_min+2
  5503  040F  30C0               	movlw	192
  5504  0410  00DD               	movwf	map@in_max
  5505  0411  307F               	movlw	127
  5506  0412  00DE               	movwf	map@in_max+1
  5507  0413  3044               	movlw	68
  5508  0414  00DF               	movwf	map@in_max+2
  5509  0415  3000               	movlw	0
  5510  0416  00DA               	movwf	map@in_min
  5511  0417  3000               	movlw	0
  5512  0418  00DB               	movwf	map@in_min+1
  5513  0419  3000               	movlw	0
  5514  041A  00DC               	movwf	map@in_min+2
  5515  041B  0021               	movlb	1	; select bank1
  5516  041C  0856               	movf	(_knob2_prev+1)^(0+128),w	;volatile
  5517  041D  0020               	movlb	0	; select bank0
  5518  041E  00AB               	movwf	___awtoft@c+1
  5519  041F  0021               	movlb	1	; select bank1
  5520  0420  0855               	movf	_knob2_prev^(0+128),w	;volatile
  5521  0421  0020               	movlb	0	; select bank0
  5522  0422  00AA               	movwf	___awtoft@c
  5523  0423  319E  26F4  3182   	fcall	___awtoft
  5524  0426  0020               	movlb	0	; select bank0
  5525  0427  082A               	movf	?___awtoft,w
  5526  0428  00D7               	movwf	map@x
  5527  0429  082B               	movf	?___awtoft+1,w
  5528  042A  00D8               	movwf	map@x+1
  5529  042B  082C               	movf	?___awtoft+2,w
  5530  042C  00D9               	movwf	map@x+2
  5531  042D  3196  26CC  3182   	fcall	_map
  5532  0430  0020               	movlb	0	; select bank0
  5533  0431  0857               	movf	?_map,w
  5534  0432  0021               	movlb	1	; select bank1
  5535  0433  00A0               	movwf	___fttol@f1^(0+128)
  5536  0434  0020               	movlb	0	; select bank0
  5537  0435  0858               	movf	?_map+1,w
  5538  0436  0021               	movlb	1	; select bank1
  5539  0437  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5540  0438  0020               	movlb	0	; select bank0
  5541  0439  0859               	movf	?_map+2,w
  5542  043A  0021               	movlb	1	; select bank1
  5543  043B  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5544  043C  3196  2645  3182   	fcall	___fttol
  5545  043F  0021               	movlb	1	; select bank1
  5546  0440  0821               	movf	(?___fttol^(0+128)+1),w
  5547  0441  0023               	movlb	3	; select bank3
  5548  0442  00EB               	movwf	(main@i+1)^(0+384)
  5549  0443  0021               	movlb	1	; select bank1
  5550  0444  0820               	movf	?___fttol^(0+128),w
  5551  0445  0023               	movlb	3	; select bank3
  5552  0446  00EA               	movwf	main@i^(0+384)
  5553                           
  5554                           ;main.c: 268: CCPR2 = iB25k[i];
  5555  0447  356A               	lslf	main@i^(0+384),w
  5556  0448  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5557  0449  0086               	movwf	6
  5558  044A  3004               	movlw	4	; select bank8/9
  5559  044B  0087               	movwf	7
  5560  044C  3F40               	moviw [0]fsr1
  5561  044D  0025               	movlb	5	; select bank5
  5562  044E  0098               	movwf	24	;volatile
  5563  044F  3F41               	moviw [1]fsr1
  5564  0450  0099               	movwf	25	;volatile
  5565                           
  5566                           ;main.c: 269: CCPR3 = B25k[i];
  5567  0451  0023               	movlb	3	; select bank3
  5568  0452  356A               	lslf	main@i^(0+384),w
  5569  0453  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5570  0454  0086               	movwf	6
  5571  0455  3003               	movlw	3	; select bank7/8
  5572  0456  0087               	movwf	7
  5573  0457  3F40               	moviw [0]fsr1
  5574  0458  0026               	movlb	6	; select bank6
  5575  0459  0091               	movwf	17	;volatile
  5576  045A  3F41               	moviw [1]fsr1
  5577  045B  0092               	movwf	18	;volatile
  5578  045C                     l5822:	
  5579                           
  5580                           ;main.c: 270: }
  5581                           ;main.c: 280: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5582  045C  0022               	movlb	2	; select bank2
  5583  045D  095E               	comf	_knob3_prev^(0+256),w	;volatile
  5584  045E  0021               	movlb	1	; select bank1
  5585  045F  00BA               	movwf	??_main^(0+128)
  5586  0460  0022               	movlb	2	; select bank2
  5587  0461  095F               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5588  0462  0021               	movlb	1	; select bank1
  5589  0463  00BB               	movwf	(??_main^(0+128)+1)
  5590  0464  0ABA               	incf	??_main^(0+128),f
  5591  0465  1903               	skipnz
  5592  0466  0ABB               	incf	(??_main^(0+128)+1),f
  5593  0467  0022               	movlb	2	; select bank2
  5594  0468  083E               	movf	_knob_3_pos^(0+256),w
  5595  0469  0021               	movlb	1	; select bank1
  5596  046A  073A               	addwf	??_main^(0+128),w
  5597  046B  00BC               	movwf	(??_main+2)^(0+128)
  5598  046C  0022               	movlb	2	; select bank2
  5599  046D  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5600  046E  0021               	movlb	1	; select bank1
  5601  046F  3D3B               	addwfc	(??_main+1)^(0+128),w
  5602  0470  00BD               	movwf	(??_main+3)^(0+128)
  5603  0471  083D               	movf	(??_main+3)^(0+128),w
  5604  0472  3A80               	xorlw	128
  5605  0473  00BE               	movwf	(??_main+4)^(0+128)
  5606  0474  3080               	movlw	128
  5607  0475  023E               	subwf	(??_main+4)^(0+128),w
  5608  0476  1D03               	skipz
  5609  0477  2C7A               	goto	u6615
  5610  0478  3004               	movlw	4
  5611  0479  023C               	subwf	(??_main+2)^(0+128),w
  5612  047A                     u6615:	
  5613  047A  1803               	skipnc
  5614  047B  2C9C               	goto	l5826
  5615  047C  0022               	movlb	2	; select bank2
  5616  047D  095E               	comf	_knob3_prev^(0+256),w	;volatile
  5617  047E  0021               	movlb	1	; select bank1
  5618  047F  00BA               	movwf	??_main^(0+128)
  5619  0480  0022               	movlb	2	; select bank2
  5620  0481  095F               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5621  0482  0021               	movlb	1	; select bank1
  5622  0483  00BB               	movwf	(??_main^(0+128)+1)
  5623  0484  0ABA               	incf	??_main^(0+128),f
  5624  0485  1903               	skipnz
  5625  0486  0ABB               	incf	(??_main^(0+128)+1),f
  5626  0487  0022               	movlb	2	; select bank2
  5627  0488  083E               	movf	_knob_3_pos^(0+256),w
  5628  0489  0021               	movlb	1	; select bank1
  5629  048A  073A               	addwf	??_main^(0+128),w
  5630  048B  00BC               	movwf	(??_main+2)^(0+128)
  5631  048C  0022               	movlb	2	; select bank2
  5632  048D  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5633  048E  0021               	movlb	1	; select bank1
  5634  048F  3D3B               	addwfc	(??_main+1)^(0+128),w
  5635  0490  00BD               	movwf	(??_main+3)^(0+128)
  5636  0491  083D               	movf	(??_main+3)^(0+128),w
  5637  0492  3A80               	xorlw	128
  5638  0493  00BE               	movwf	(??_main+4)^(0+128)
  5639  0494  307F               	movlw	127
  5640  0495  023E               	subwf	(??_main+4)^(0+128),w
  5641  0496  1D03               	skipz
  5642  0497  2C9A               	goto	u6625
  5643  0498  30FD               	movlw	253
  5644  0499  023C               	subwf	(??_main+2)^(0+128),w
  5645  049A                     u6625:	
  5646  049A  1803               	skipnc
  5647  049B  2CFB               	goto	l5834
  5648  049C                     l5826:	
  5649                           
  5650                           ;main.c: 281: knob3_prev = knob_3_pos;
  5651  049C  0022               	movlb	2	; select bank2
  5652  049D  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5653  049E  00DF               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5654  049F  083E               	movf	_knob_3_pos^(0+256),w
  5655  04A0  00DE               	movwf	_knob3_prev^(0+256)	;volatile
  5656                           
  5657                           ;main.c: 282: int i = map(knob3_prev, 0, 1023, 16, 0);
  5658  04A1  3000               	movlw	0
  5659  04A2  0020               	movlb	0	; select bank0
  5660  04A3  00E3               	movwf	map@out_max
  5661  04A4  3000               	movlw	0
  5662  04A5  00E4               	movwf	map@out_max+1
  5663  04A6  3000               	movlw	0
  5664  04A7  00E5               	movwf	map@out_max+2
  5665  04A8  3000               	movlw	0
  5666  04A9  00E0               	movwf	map@out_min
  5667  04AA  3080               	movlw	128
  5668  04AB  00E1               	movwf	map@out_min+1
  5669  04AC  3041               	movlw	65
  5670  04AD  00E2               	movwf	map@out_min+2
  5671  04AE  30C0               	movlw	192
  5672  04AF  00DD               	movwf	map@in_max
  5673  04B0  307F               	movlw	127
  5674  04B1  00DE               	movwf	map@in_max+1
  5675  04B2  3044               	movlw	68
  5676  04B3  00DF               	movwf	map@in_max+2
  5677  04B4  3000               	movlw	0
  5678  04B5  00DA               	movwf	map@in_min
  5679  04B6  3000               	movlw	0
  5680  04B7  00DB               	movwf	map@in_min+1
  5681  04B8  3000               	movlw	0
  5682  04B9  00DC               	movwf	map@in_min+2
  5683  04BA  0022               	movlb	2	; select bank2
  5684  04BB  085F               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5685  04BC  0020               	movlb	0	; select bank0
  5686  04BD  00AB               	movwf	___awtoft@c+1
  5687  04BE  0022               	movlb	2	; select bank2
  5688  04BF  085E               	movf	_knob3_prev^(0+256),w	;volatile
  5689  04C0  0020               	movlb	0	; select bank0
  5690  04C1  00AA               	movwf	___awtoft@c
  5691  04C2  319E  26F4  3182   	fcall	___awtoft
  5692  04C5  0020               	movlb	0	; select bank0
  5693  04C6  082A               	movf	?___awtoft,w
  5694  04C7  00D7               	movwf	map@x
  5695  04C8  082B               	movf	?___awtoft+1,w
  5696  04C9  00D8               	movwf	map@x+1
  5697  04CA  082C               	movf	?___awtoft+2,w
  5698  04CB  00D9               	movwf	map@x+2
  5699  04CC  3196  26CC  3182   	fcall	_map
  5700  04CF  0020               	movlb	0	; select bank0
  5701  04D0  0857               	movf	?_map,w
  5702  04D1  0021               	movlb	1	; select bank1
  5703  04D2  00A0               	movwf	___fttol@f1^(0+128)
  5704  04D3  0020               	movlb	0	; select bank0
  5705  04D4  0858               	movf	?_map+1,w
  5706  04D5  0021               	movlb	1	; select bank1
  5707  04D6  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5708  04D7  0020               	movlb	0	; select bank0
  5709  04D8  0859               	movf	?_map+2,w
  5710  04D9  0021               	movlb	1	; select bank1
  5711  04DA  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5712  04DB  3196  2645  3182   	fcall	___fttol
  5713  04DE  0021               	movlb	1	; select bank1
  5714  04DF  0821               	movf	(?___fttol^(0+128)+1),w
  5715  04E0  0023               	movlb	3	; select bank3
  5716  04E1  00ED               	movwf	(main@i_378+1)^(0+384)
  5717  04E2  0021               	movlb	1	; select bank1
  5718  04E3  0820               	movf	?___fttol^(0+128),w
  5719  04E4  0023               	movlb	3	; select bank3
  5720  04E5  00EC               	movwf	main@i_378^(0+384)
  5721                           
  5722                           ;main.c: 283: CCPR4 = iB25k[i];
  5723  04E6  356C               	lslf	main@i_378^(0+384),w
  5724  04E7  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5725  04E8  0086               	movwf	6
  5726  04E9  3004               	movlw	4	; select bank8/9
  5727  04EA  0087               	movwf	7
  5728  04EB  3F40               	moviw [0]fsr1
  5729  04EC  0026               	movlb	6	; select bank6
  5730  04ED  0098               	movwf	24	;volatile
  5731  04EE  3F41               	moviw [1]fsr1
  5732  04EF  0099               	movwf	25	;volatile
  5733                           
  5734                           ;main.c: 284: CCPR5 = B25k[i];
  5735  04F0  0023               	movlb	3	; select bank3
  5736  04F1  356C               	lslf	main@i_378^(0+384),w
  5737  04F2  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5738  04F3  0086               	movwf	6
  5739  04F4  3003               	movlw	3	; select bank7/8
  5740  04F5  0087               	movwf	7
  5741  04F6  3F40               	moviw [0]fsr1
  5742  04F7  0026               	movlb	6	; select bank6
  5743  04F8  009C               	movwf	28	;volatile
  5744  04F9  3F41               	moviw [1]fsr1
  5745  04FA  009D               	movwf	29	;volatile
  5746  04FB                     l5834:	
  5747                           
  5748                           ;main.c: 285: }
  5749                           ;main.c: 295: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5750  04FB  0022               	movlb	2	; select bank2
  5751  04FC  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5752  04FD  0021               	movlb	1	; select bank1
  5753  04FE  00BA               	movwf	??_main^(0+128)
  5754  04FF  0022               	movlb	2	; select bank2
  5755  0500  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5756  0501  0021               	movlb	1	; select bank1
  5757  0502  00BB               	movwf	(??_main^(0+128)+1)
  5758  0503  0ABA               	incf	??_main^(0+128),f
  5759  0504  1903               	skipnz
  5760  0505  0ABB               	incf	(??_main^(0+128)+1),f
  5761  0506  0022               	movlb	2	; select bank2
  5762  0507  0840               	movf	_knob_4_pos^(0+256),w
  5763  0508  0021               	movlb	1	; select bank1
  5764  0509  073A               	addwf	??_main^(0+128),w
  5765  050A  00BC               	movwf	(??_main+2)^(0+128)
  5766  050B  0022               	movlb	2	; select bank2
  5767  050C  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5768  050D  0021               	movlb	1	; select bank1
  5769  050E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5770  050F  00BD               	movwf	(??_main+3)^(0+128)
  5771  0510  083D               	movf	(??_main+3)^(0+128),w
  5772  0511  3A80               	xorlw	128
  5773  0512  00BE               	movwf	(??_main+4)^(0+128)
  5774  0513  3080               	movlw	128
  5775  0514  023E               	subwf	(??_main+4)^(0+128),w
  5776  0515  1D03               	skipz
  5777  0516  2D19               	goto	u6635
  5778  0517  3004               	movlw	4
  5779  0518  023C               	subwf	(??_main+2)^(0+128),w
  5780  0519                     u6635:	
  5781  0519  1803               	skipnc
  5782  051A  2D3B               	goto	l5838
  5783  051B  0022               	movlb	2	; select bank2
  5784  051C  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5785  051D  0021               	movlb	1	; select bank1
  5786  051E  00BA               	movwf	??_main^(0+128)
  5787  051F  0022               	movlb	2	; select bank2
  5788  0520  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5789  0521  0021               	movlb	1	; select bank1
  5790  0522  00BB               	movwf	(??_main^(0+128)+1)
  5791  0523  0ABA               	incf	??_main^(0+128),f
  5792  0524  1903               	skipnz
  5793  0525  0ABB               	incf	(??_main^(0+128)+1),f
  5794  0526  0022               	movlb	2	; select bank2
  5795  0527  0840               	movf	_knob_4_pos^(0+256),w
  5796  0528  0021               	movlb	1	; select bank1
  5797  0529  073A               	addwf	??_main^(0+128),w
  5798  052A  00BC               	movwf	(??_main+2)^(0+128)
  5799  052B  0022               	movlb	2	; select bank2
  5800  052C  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5801  052D  0021               	movlb	1	; select bank1
  5802  052E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5803  052F  00BD               	movwf	(??_main+3)^(0+128)
  5804  0530  083D               	movf	(??_main+3)^(0+128),w
  5805  0531  3A80               	xorlw	128
  5806  0532  00BE               	movwf	(??_main+4)^(0+128)
  5807  0533  307F               	movlw	127
  5808  0534  023E               	subwf	(??_main+4)^(0+128),w
  5809  0535  1D03               	skipz
  5810  0536  2D39               	goto	u6645
  5811  0537  30FD               	movlw	253
  5812  0538  023C               	subwf	(??_main+2)^(0+128),w
  5813  0539                     u6645:	
  5814  0539  1803               	skipnc
  5815  053A  2D85               	goto	l5842
  5816  053B                     l5838:	
  5817                           
  5818                           ;main.c: 296: knob4_prev = knob_4_pos;
  5819  053B  0022               	movlb	2	; select bank2
  5820  053C  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5821  053D  00E1               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5822  053E  0840               	movf	_knob_4_pos^(0+256),w
  5823  053F  00E0               	movwf	_knob4_prev^(0+256)	;volatile
  5824                           
  5825                           ;main.c: 297: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5826  0540  3000               	movlw	0
  5827  0541  0020               	movlb	0	; select bank0
  5828  0542  00E3               	movwf	map@out_max
  5829  0543  307A               	movlw	122
  5830  0544  00E4               	movwf	map@out_max+1
  5831  0545  3044               	movlw	68
  5832  0546  00E5               	movwf	map@out_max+2
  5833  0547  3000               	movlw	0
  5834  0548  00E0               	movwf	map@out_min
  5835  0549  3070               	movlw	112
  5836  054A  00E1               	movwf	map@out_min+1
  5837  054B  3042               	movlw	66
  5838  054C  00E2               	movwf	map@out_min+2
  5839  054D  30C0               	movlw	192
  5840  054E  00DD               	movwf	map@in_max
  5841  054F  307F               	movlw	127
  5842  0550  00DE               	movwf	map@in_max+1
  5843  0551  3044               	movlw	68
  5844  0552  00DF               	movwf	map@in_max+2
  5845  0553  3000               	movlw	0
  5846  0554  00DA               	movwf	map@in_min
  5847  0555  3000               	movlw	0
  5848  0556  00DB               	movwf	map@in_min+1
  5849  0557  3000               	movlw	0
  5850  0558  00DC               	movwf	map@in_min+2
  5851  0559  0022               	movlb	2	; select bank2
  5852  055A  0861               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5853  055B  0020               	movlb	0	; select bank0
  5854  055C  00AB               	movwf	___awtoft@c+1
  5855  055D  0022               	movlb	2	; select bank2
  5856  055E  0860               	movf	_knob4_prev^(0+256),w	;volatile
  5857  055F  0020               	movlb	0	; select bank0
  5858  0560  00AA               	movwf	___awtoft@c
  5859  0561  319E  26F4  3182   	fcall	___awtoft
  5860  0564  0020               	movlb	0	; select bank0
  5861  0565  082A               	movf	?___awtoft,w
  5862  0566  00D7               	movwf	map@x
  5863  0567  082B               	movf	?___awtoft+1,w
  5864  0568  00D8               	movwf	map@x+1
  5865  0569  082C               	movf	?___awtoft+2,w
  5866  056A  00D9               	movwf	map@x+2
  5867  056B  3196  26CC  3182   	fcall	_map
  5868  056E  0020               	movlb	0	; select bank0
  5869  056F  0857               	movf	?_map,w
  5870  0570  0021               	movlb	1	; select bank1
  5871  0571  00A0               	movwf	___fttol@f1^(0+128)
  5872  0572  0020               	movlb	0	; select bank0
  5873  0573  0858               	movf	?_map+1,w
  5874  0574  0021               	movlb	1	; select bank1
  5875  0575  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5876  0576  0020               	movlb	0	; select bank0
  5877  0577  0859               	movf	?_map+2,w
  5878  0578  0021               	movlb	1	; select bank1
  5879  0579  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5880  057A  3196  2645  3182   	fcall	___fttol
  5881  057D  0021               	movlb	1	; select bank1
  5882  057E  0821               	movf	(?___fttol^(0+128)+1),w
  5883  057F  0022               	movlb	2	; select bank2
  5884  0580  00E5               	movwf	(_mod_delay_time+1)^(0+256)
  5885  0581  0021               	movlb	1	; select bank1
  5886  0582  0820               	movf	?___fttol^(0+128),w
  5887  0583  0022               	movlb	2	; select bank2
  5888  0584  00E4               	movwf	_mod_delay_time^(0+256)
  5889  0585                     l5842:	
  5890                           
  5891                           ;main.c: 298: }
  5892                           ;main.c: 306: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5893  0585  0022               	movlb	2	; select bank2
  5894  0586  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5895  0587  0021               	movlb	1	; select bank1
  5896  0588  00BA               	movwf	??_main^(0+128)
  5897  0589  0022               	movlb	2	; select bank2
  5898  058A  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5899  058B  0021               	movlb	1	; select bank1
  5900  058C  00BB               	movwf	(??_main^(0+128)+1)
  5901  058D  0ABA               	incf	??_main^(0+128),f
  5902  058E  1903               	skipnz
  5903  058F  0ABB               	incf	(??_main^(0+128)+1),f
  5904  0590  0022               	movlb	2	; select bank2
  5905  0591  0842               	movf	_knob_5_pos^(0+256),w
  5906  0592  0021               	movlb	1	; select bank1
  5907  0593  073A               	addwf	??_main^(0+128),w
  5908  0594  00BC               	movwf	(??_main+2)^(0+128)
  5909  0595  0022               	movlb	2	; select bank2
  5910  0596  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5911  0597  0021               	movlb	1	; select bank1
  5912  0598  3D3B               	addwfc	(??_main+1)^(0+128),w
  5913  0599  00BD               	movwf	(??_main+3)^(0+128)
  5914  059A  083D               	movf	(??_main+3)^(0+128),w
  5915  059B  3A80               	xorlw	128
  5916  059C  00BE               	movwf	(??_main+4)^(0+128)
  5917  059D  3080               	movlw	128
  5918  059E  023E               	subwf	(??_main+4)^(0+128),w
  5919  059F  1D03               	skipz
  5920  05A0  2DA3               	goto	u6655
  5921  05A1  3004               	movlw	4
  5922  05A2  023C               	subwf	(??_main+2)^(0+128),w
  5923  05A3                     u6655:	
  5924  05A3  1803               	skipnc
  5925  05A4  2DC5               	goto	l5846
  5926  05A5  0022               	movlb	2	; select bank2
  5927  05A6  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5928  05A7  0021               	movlb	1	; select bank1
  5929  05A8  00BA               	movwf	??_main^(0+128)
  5930  05A9  0022               	movlb	2	; select bank2
  5931  05AA  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5932  05AB  0021               	movlb	1	; select bank1
  5933  05AC  00BB               	movwf	(??_main^(0+128)+1)
  5934  05AD  0ABA               	incf	??_main^(0+128),f
  5935  05AE  1903               	skipnz
  5936  05AF  0ABB               	incf	(??_main^(0+128)+1),f
  5937  05B0  0022               	movlb	2	; select bank2
  5938  05B1  0842               	movf	_knob_5_pos^(0+256),w
  5939  05B2  0021               	movlb	1	; select bank1
  5940  05B3  073A               	addwf	??_main^(0+128),w
  5941  05B4  00BC               	movwf	(??_main+2)^(0+128)
  5942  05B5  0022               	movlb	2	; select bank2
  5943  05B6  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5944  05B7  0021               	movlb	1	; select bank1
  5945  05B8  3D3B               	addwfc	(??_main+1)^(0+128),w
  5946  05B9  00BD               	movwf	(??_main+3)^(0+128)
  5947  05BA  083D               	movf	(??_main+3)^(0+128),w
  5948  05BB  3A80               	xorlw	128
  5949  05BC  00BE               	movwf	(??_main+4)^(0+128)
  5950  05BD  307F               	movlw	127
  5951  05BE  023E               	subwf	(??_main+4)^(0+128),w
  5952  05BF  1D03               	skipz
  5953  05C0  2DC3               	goto	u6665
  5954  05C1  30FD               	movlw	253
  5955  05C2  023C               	subwf	(??_main+2)^(0+128),w
  5956  05C3                     u6665:	
  5957  05C3  1803               	skipnc
  5958  05C4  2DCA               	goto	l5848
  5959  05C5                     l5846:	
  5960                           
  5961                           ;main.c: 307: knob5_prev = knob_5_pos;
  5962  05C5  0022               	movlb	2	; select bank2
  5963  05C6  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5964  05C7  00E3               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5965  05C8  0842               	movf	_knob_5_pos^(0+256),w
  5966  05C9  00E2               	movwf	_knob5_prev^(0+256)	;volatile
  5967  05CA                     l5848:	
  5968                           
  5969                           ;main.c: 308: }
  5970                           ;main.c: 316: LATBbits.LATB0 = 0;
  5971  05CA  0022               	movlb	2	; select bank2
  5972  05CB  100D               	bcf	13,0	;volatile
  5973                           
  5974                           ;main.c: 328: if (mod_timer >= mod_delay_time) {
  5975  05CC  0864               	movf	_mod_delay_time^(0+256),w
  5976  05CD  0021               	movlb	1	; select bank1
  5977  05CE  00BA               	movwf	??_main^(0+128)
  5978  05CF  0022               	movlb	2	; select bank2
  5979  05D0  0865               	movf	(_mod_delay_time+1)^(0+256),w
  5980  05D1  0021               	movlb	1	; select bank1
  5981  05D2  00BB               	movwf	(??_main^(0+128)+1)
  5982  05D3  3000               	movlw	0
  5983  05D4  1BBB               	btfsc	(??_main^(0+128)+1),7
  5984  05D5  30FF               	movlw	255
  5985  05D6  00BC               	movwf	(??_main^(0+128)+2)
  5986  05D7  00BD               	movwf	(??_main^(0+128)+3)
  5987  05D8  0022               	movlb	2	; select bank2
  5988  05D9  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  5989  05DA  3A80               	xorlw	128
  5990  05DB  0021               	movlb	1	; select bank1
  5991  05DC  00BE               	movwf	(??_main+4)^(0+128)
  5992  05DD  083D               	movf	(??_main+3)^(0+128),w
  5993  05DE  3A80               	xorlw	128
  5994  05DF  023E               	subwf	(??_main+4)^(0+128),w
  5995  05E0  0022               	movlb	2	; select bank2
  5996  05E1  1D03               	skipz
  5997  05E2  2DF3               	goto	u6673
  5998  05E3  0021               	movlb	1	; select bank1
  5999  05E4  083C               	movf	(??_main+2)^(0+128),w
  6000  05E5  0022               	movlb	2	; select bank2
  6001  05E6  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  6002  05E7  1D03               	skipz
  6003  05E8  2DF3               	goto	u6673
  6004  05E9  0021               	movlb	1	; select bank1
  6005  05EA  083B               	movf	(??_main+1)^(0+128),w
  6006  05EB  0022               	movlb	2	; select bank2
  6007  05EC  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  6008  05ED  1D03               	skipz
  6009  05EE  2DF3               	goto	u6673
  6010  05EF  0021               	movlb	1	; select bank1
  6011  05F0  083A               	movf	??_main^(0+128),w
  6012  05F1  0022               	movlb	2	; select bank2
  6013  05F2  0224               	subwf	_mod_timer^(0+256),w	;volatile
  6014  05F3                     u6673:	
  6015  05F3  1C03               	skipc
  6016  05F4  2F1F               	goto	l5904
  6017                           
  6018                           ;main.c: 329: LATBbits.LATB0 = 1;
  6019  05F5  140D               	bsf	13,0	;volatile
  6020                           
  6021                           ;main.c: 330: mod_counter = mod_counter + 1;
  6022  05F6  0021               	movlb	1	; select bank1
  6023  05F7  0869               	movf	_mod_counter^(0+128),w
  6024  05F8  3E01               	addlw	1
  6025  05F9  00E9               	movwf	_mod_counter^(0+128)
  6026  05FA  3000               	movlw	0
  6027  05FB  3D6A               	addwfc	(_mod_counter+1)^(0+128),w
  6028  05FC  00EA               	movwf	(_mod_counter+1)^(0+128)
  6029                           
  6030                           ;main.c: 331: mod_timer = 0;
  6031  05FD  3000               	movlw	0
  6032  05FE  0022               	movlb	2	; select bank2
  6033  05FF  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6034  0600  3000               	movlw	0
  6035  0601  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6036  0602  3000               	movlw	0
  6037  0603  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6038  0604  3000               	movlw	0
  6039  0605  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6040                           
  6041                           ;main.c: 333: if (bottom_push_state == 1 || bottom_push_state == 5) {
  6042  0606  0021               	movlb	1	; select bank1
  6043  0607  0351               	decf	_bottom_push_state^(0+128),w
  6044  0608  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6045  0609  1903               	btfsc	3,2
  6046  060A  2E10               	goto	l5860
  6047  060B  3005               	movlw	5
  6048  060C  0651               	xorwf	_bottom_push_state^(0+128),w
  6049  060D  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6050  060E  1D03               	btfss	3,2
  6051  060F  2E19               	goto	l5864
  6052  0610                     l5860:	
  6053                           
  6054                           ;main.c: 334: if (mod_counter >= 61) {
  6055  0610  086A               	movf	(_mod_counter+1)^(0+128),w
  6056  0611  3A80               	xorlw	128
  6057  0612  00BA               	movwf	??_main^(0+128)
  6058  0613  3080               	movlw	128
  6059  0614  023A               	subwf	??_main^(0+128),w
  6060  0615  1D03               	skipz
  6061  0616  2E22               	goto	u6715
  6062  0617  303D               	movlw	61
  6063  0618  2E21               	goto	L1
  6064  0619                     l5864:	
  6065                           ;main.c: 336: }
  6066                           ;main.c: 337: } else {
  6067                           
  6068                           ;main.c: 335: mod_counter = 0;
  6069                           
  6070                           
  6071                           ;main.c: 338: if (mod_counter > 31) {
  6072  0619  086A               	movf	(_mod_counter+1)^(0+128),w
  6073  061A  3A80               	xorlw	128
  6074  061B  00BA               	movwf	??_main^(0+128)
  6075  061C  3080               	movlw	128
  6076  061D  023A               	subwf	??_main^(0+128),w
  6077  061E  1D03               	skipz
  6078  061F  2E22               	goto	u6715
  6079  0620  3020               	movlw	32
  6080  0621                     L1:	
  6081  0621  0269               	subwf	_mod_counter^(0+128),w
  6082  0622                     u6715:	
  6083  0622  1C03               	skipc
  6084  0623  2E27               	goto	l5868
  6085                           
  6086                           ;main.c: 339: mod_counter = 0;
  6087  0624  0021               	movlb	1	; select bank1
  6088  0625  01E9               	clrf	_mod_counter^(0+128)
  6089  0626  01EA               	clrf	(_mod_counter+1)^(0+128)
  6090  0627                     l5868:	
  6091                           
  6092                           ;main.c: 340: }
  6093                           ;main.c: 341: }
  6094                           ;main.c: 344: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  6095  0627  3000               	movlw	0
  6096  0628  0020               	movlb	0	; select bank0
  6097  0629  00E3               	movwf	map@out_max
  6098  062A  3000               	movlw	0
  6099  062B  00E4               	movwf	map@out_max+1
  6100  062C  3000               	movlw	0
  6101  062D  00E5               	movwf	map@out_max+2
  6102  062E  3060               	movlw	96
  6103  062F  00E0               	movwf	map@out_min
  6104  0630  309F               	movlw	159
  6105  0631  00E1               	movwf	map@out_min+1
  6106  0632  3044               	movlw	68
  6107  0633  00E2               	movwf	map@out_min+2
  6108  0634  30C0               	movlw	192
  6109  0635  00DD               	movwf	map@in_max
  6110  0636  307F               	movlw	127
  6111  0637  00DE               	movwf	map@in_max+1
  6112  0638  3044               	movlw	68
  6113  0639  00DF               	movwf	map@in_max+2
  6114  063A  3000               	movlw	0
  6115  063B  00DA               	movwf	map@in_min
  6116  063C  3000               	movlw	0
  6117  063D  00DB               	movwf	map@in_min+1
  6118  063E  3000               	movlw	0
  6119  063F  00DC               	movwf	map@in_min+2
  6120  0640  0022               	movlb	2	; select bank2
  6121  0641  0863               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6122  0642  0020               	movlb	0	; select bank0
  6123  0643  00AB               	movwf	___awtoft@c+1
  6124  0644  0022               	movlb	2	; select bank2
  6125  0645  0862               	movf	_knob5_prev^(0+256),w	;volatile
  6126  0646  0020               	movlb	0	; select bank0
  6127  0647  00AA               	movwf	___awtoft@c
  6128  0648  319E  26F4  3182   	fcall	___awtoft
  6129  064B  0020               	movlb	0	; select bank0
  6130  064C  082A               	movf	?___awtoft,w
  6131  064D  00D7               	movwf	map@x
  6132  064E  082B               	movf	?___awtoft+1,w
  6133  064F  00D8               	movwf	map@x+1
  6134  0650  082C               	movf	?___awtoft+2,w
  6135  0651  00D9               	movwf	map@x+2
  6136  0652  3196  26CC  3182   	fcall	_map
  6137  0655  0020               	movlb	0	; select bank0
  6138  0656  0857               	movf	?_map,w
  6139  0657  0021               	movlb	1	; select bank1
  6140  0658  00A0               	movwf	___fttol@f1^(0+128)
  6141  0659  0020               	movlb	0	; select bank0
  6142  065A  0858               	movf	?_map+1,w
  6143  065B  0021               	movlb	1	; select bank1
  6144  065C  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6145  065D  0020               	movlb	0	; select bank0
  6146  065E  0859               	movf	?_map+2,w
  6147  065F  0021               	movlb	1	; select bank1
  6148  0660  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6149  0661  3196  2645  3182   	fcall	___fttol
  6150  0664  0021               	movlb	1	; select bank1
  6151  0665  0821               	movf	(?___fttol^(0+128)+1),w
  6152  0666  0023               	movlb	3	; select bank3
  6153  0667  00E9               	movwf	(main@adjusted_pot_value+1)^(0+384)
  6154  0668  0021               	movlb	1	; select bank1
  6155  0669  0820               	movf	?___fttol^(0+128),w
  6156  066A  0023               	movlb	3	; select bank3
  6157  066B  00E8               	movwf	main@adjusted_pot_value^(0+384)
  6158                           
  6159                           ;main.c: 345: switch (bottom_push_state) {
  6160  066C  2EC9               	goto	l5898
  6161  066D                     l5870:	
  6162                           ;main.c: 346: case 1:
  6163                           
  6164                           
  6165                           ;main.c: 347: mod_value = mod5[mod_counter];
  6166  066D  0021               	movlb	1	; select bank1
  6167  066E  086A               	movf	(_mod_counter+1)^(0+128),w
  6168  066F  00BB               	movwf	(??_main^(0+128)+1)
  6169  0670  0869               	movf	_mod_counter^(0+128),w
  6170  0671  00BA               	movwf	??_main^(0+128)
  6171  0672  35BA               	lslf	??_main^(0+128),f
  6172  0673  0DBB               	rlf	(??_main^(0+128)+1),f
  6173  0674  3076               	movlw	118
  6174  0675  00BC               	movwf	(??_main+2)^(0+128)
  6175  0676  3025               	movlw	37
  6176  0677  00BD               	movwf	((??_main+2)^(0+128)+1)
  6177  0678  083A               	movf	??_main^(0+128),w
  6178  0679  073C               	addwf	(??_main+2)^(0+128),w
  6179  067A  0086               	movwf	6
  6180  067B  083B               	movf	(??_main+1)^(0+128),w
  6181  067C  3D3D               	addwfc	(??_main+3)^(0+128),w
  6182  067D  0087               	movwf	7
  6183  067E  3F40               	moviw [0]fsr1
  6184  067F  0022               	movlb	2	; select bank2
  6185  0680  00C8               	movwf	_mod_value^(0+256)
  6186  0681  3F41               	moviw [1]fsr1
  6187  0682  2EA3               	goto	L4
  6188  0683                     l5874:	
  6189                           ;main.c: 350: case 2:
  6190                           
  6191                           ;main.c: 349: break;
  6192                           
  6193                           ;main.c: 348: PORTCbits.RC4 = 0;
  6194                           
  6195                           
  6196                           ;main.c: 351: mod_value = mod2[mod_counter];
  6197  0683  0021               	movlb	1	; select bank1
  6198  0684  3569               	lslf	_mod_counter^(0+128),w
  6199  0685  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  6200  0686  0086               	movwf	6
  6201  0687  3002               	movlw	2	; select bank4/5
  6202  0688  0087               	movwf	7
  6203  0689  3F40               	moviw [0]fsr1
  6204  068A  0022               	movlb	2	; select bank2
  6205  068B  00C8               	movwf	_mod_value^(0+256)
  6206  068C  3F41               	moviw [1]fsr1
  6207  068D  2EA3               	goto	L4
  6208  068E                     l5878:	
  6209                           ;main.c: 354: case 3:
  6210                           
  6211                           ;main.c: 353: break;
  6212                           
  6213                           ;main.c: 352: PORTCbits.RC4 = 0;
  6214                           
  6215                           
  6216                           ;main.c: 355: mod_value = mod3[mod_counter];
  6217  068E  0021               	movlb	1	; select bank1
  6218  068F  3569               	lslf	_mod_counter^(0+128),w
  6219  0690  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  6220  0691  0086               	movwf	6
  6221  0692  3002               	movlw	2	; select bank5/6
  6222  0693  0087               	movwf	7
  6223  0694  3F40               	moviw [0]fsr1
  6224  0695  0022               	movlb	2	; select bank2
  6225  0696  00C8               	movwf	_mod_value^(0+256)
  6226  0697  3F41               	moviw [1]fsr1
  6227  0698  2EA3               	goto	L4
  6228  0699                     l5882:	
  6229                           ;main.c: 358: case 4:
  6230                           
  6231                           ;main.c: 357: break;
  6232                           
  6233                           ;main.c: 356: PORTCbits.RC4 = 0;
  6234                           
  6235                           
  6236                           ;main.c: 359: mod_value = mod4[mod_counter];
  6237  0699  0021               	movlb	1	; select bank1
  6238  069A  3569               	lslf	_mod_counter^(0+128),w
  6239  069B  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  6240  069C  0086               	movwf	6
  6241  069D  3003               	movlw	3	; select bank6/7
  6242  069E  0087               	movwf	7
  6243  069F  3F40               	moviw [0]fsr1
  6244  06A0  0022               	movlb	2	; select bank2
  6245  06A1  00C8               	movwf	_mod_value^(0+256)
  6246  06A2  3F41               	moviw [1]fsr1
  6247  06A3                     L4:	
  6248  06A3  00C9               	movwf	(_mod_value+1)^(0+256)
  6249  06A4  2EC6               	goto	l5894
  6250  06A5                     l5886:	
  6251                           ;main.c: 362: case 5:
  6252                           
  6253                           ;main.c: 361: break;
  6254                           
  6255                           ;main.c: 360: PORTCbits.RC4 = 0;
  6256                           
  6257                           
  6258                           ;main.c: 363: mod_value = mod5[mod_counter];
  6259  06A5  0021               	movlb	1	; select bank1
  6260  06A6  086A               	movf	(_mod_counter+1)^(0+128),w
  6261  06A7  00BB               	movwf	(??_main^(0+128)+1)
  6262  06A8  0869               	movf	_mod_counter^(0+128),w
  6263  06A9  00BA               	movwf	??_main^(0+128)
  6264  06AA  35BA               	lslf	??_main^(0+128),f
  6265  06AB  0DBB               	rlf	(??_main^(0+128)+1),f
  6266  06AC  3076               	movlw	118
  6267  06AD  00BC               	movwf	(??_main+2)^(0+128)
  6268  06AE  3025               	movlw	37
  6269  06AF  00BD               	movwf	((??_main+2)^(0+128)+1)
  6270  06B0  083A               	movf	??_main^(0+128),w
  6271  06B1  073C               	addwf	(??_main+2)^(0+128),w
  6272  06B2  0086               	movwf	6
  6273  06B3  083B               	movf	(??_main+1)^(0+128),w
  6274  06B4  3D3D               	addwfc	(??_main+3)^(0+128),w
  6275  06B5  0087               	movwf	7
  6276  06B6  3F40               	moviw [0]fsr1
  6277  06B7  0022               	movlb	2	; select bank2
  6278  06B8  00C8               	movwf	_mod_value^(0+256)
  6279  06B9  3F41               	moviw [1]fsr1
  6280  06BA  00C9               	movwf	(_mod_value+1)^(0+256)
  6281                           
  6282                           ;main.c: 364: adjusted_pot_value = 1275;
  6283  06BB  30FB               	movlw	251
  6284  06BC  0023               	movlb	3	; select bank3
  6285  06BD  00E8               	movwf	main@adjusted_pot_value^(0+384)
  6286  06BE  3004               	movlw	4
  6287  06BF  00E9               	movwf	(main@adjusted_pot_value^(0+384)+1)
  6288                           
  6289                           ;main.c: 365: PORTCbits.RC4 = 1;
  6290  06C0  0020               	movlb	0	; select bank0
  6291  06C1  160E               	bsf	14,4	;volatile
  6292                           
  6293                           ;main.c: 366: break;
  6294  06C2  2EE3               	goto	l5900
  6295  06C3                     l5892:	
  6296                           ;main.c: 367: case 6:
  6297                           
  6298                           
  6299                           ;main.c: 368: mod_value = 0;
  6300  06C3  0022               	movlb	2	; select bank2
  6301  06C4  01C8               	clrf	_mod_value^(0+256)
  6302  06C5  01C9               	clrf	(_mod_value+1)^(0+256)
  6303  06C6                     l5894:	
  6304                           
  6305                           ;main.c: 369: PORTCbits.RC4 = 0;
  6306  06C6  0020               	movlb	0	; select bank0
  6307  06C7  120E               	bcf	14,4	;volatile
  6308                           
  6309                           ;main.c: 371: }
  6310                           
  6311                           ;main.c: 370: break;
  6312  06C8  2EE3               	goto	l5900
  6313  06C9                     l5898:	
  6314                           
  6315                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6316                           ; Switch size 1, requested type "space"
  6317                           ; Number of cases is 1, Range of values is 0 to 0
  6318                           ; switch strategies available:
  6319                           ; Name         Instructions Cycles
  6320                           ; simple_byte            4     3 (average)
  6321                           ; direct_byte            8     6 (fixed)
  6322                           ; jumptable            260     6 (fixed)
  6323                           ;	Chosen strategy is simple_byte
  6324  06C9  0021               	movlb	1	; select bank1
  6325  06CA  0852               	movf	(_bottom_push_state+1)^(0+128),w
  6326  06CB  3A00               	xorlw	0	; case 0
  6327  06CC  1903               	skipnz
  6328  06CD  2ECF               	goto	l6174
  6329  06CE  2EE3               	goto	l5900
  6330  06CF                     l6174:	
  6331                           
  6332                           ; Switch size 1, requested type "space"
  6333                           ; Number of cases is 6, Range of values is 1 to 6
  6334                           ; switch strategies available:
  6335                           ; Name         Instructions Cycles
  6336                           ; simple_byte           19    10 (average)
  6337                           ; direct_byte           21     9 (fixed)
  6338                           ; jumptable            263     9 (fixed)
  6339                           ;	Chosen strategy is simple_byte
  6340  06CF  0851               	movf	_bottom_push_state^(0+128),w
  6341  06D0  3A01               	xorlw	1	; case 1
  6342  06D1  1903               	skipnz
  6343  06D2  2E6D               	goto	l5870
  6344  06D3  3A03               	xorlw	3	; case 2
  6345  06D4  1903               	skipnz
  6346  06D5  2E83               	goto	l5874
  6347  06D6  3A01               	xorlw	1	; case 3
  6348  06D7  1903               	skipnz
  6349  06D8  2E8E               	goto	l5878
  6350  06D9  3A07               	xorlw	7	; case 4
  6351  06DA  1903               	skipnz
  6352  06DB  2E99               	goto	l5882
  6353  06DC  3A01               	xorlw	1	; case 5
  6354  06DD  1903               	skipnz
  6355  06DE  2EA5               	goto	l5886
  6356  06DF  3A03               	xorlw	3	; case 6
  6357  06E0  1903               	skipnz
  6358  06E1  2EC3               	goto	l5892
  6359  06E2  2EE3               	goto	l5900
  6360  06E3                     l5900:	
  6361                           
  6362                           ;main.c: 373: mod_value = modulation(mod_value, adjusted_pot_value);
  6363  06E3  0022               	movlb	2	; select bank2
  6364  06E4  0849               	movf	(_mod_value+1)^(0+256),w
  6365  06E5  0020               	movlb	0	; select bank0
  6366  06E6  00B8               	movwf	modulation@x+1
  6367  06E7  0022               	movlb	2	; select bank2
  6368  06E8  0848               	movf	_mod_value^(0+256),w
  6369  06E9  0020               	movlb	0	; select bank0
  6370  06EA  00B7               	movwf	modulation@x
  6371  06EB  0023               	movlb	3	; select bank3
  6372  06EC  0869               	movf	(main@adjusted_pot_value+1)^(0+384),w
  6373  06ED  0020               	movlb	0	; select bank0
  6374  06EE  00BA               	movwf	modulation@y+1
  6375  06EF  0023               	movlb	3	; select bank3
  6376  06F0  0868               	movf	main@adjusted_pot_value^(0+384),w
  6377  06F1  0020               	movlb	0	; select bank0
  6378  06F2  00B9               	movwf	modulation@y
  6379  06F3  3190  2081  3182   	fcall	_modulation
  6380  06F6  0020               	movlb	0	; select bank0
  6381  06F7  0838               	movf	?_modulation+1,w
  6382  06F8  0022               	movlb	2	; select bank2
  6383  06F9  00C9               	movwf	(_mod_value+1)^(0+256)
  6384  06FA  0020               	movlb	0	; select bank0
  6385  06FB  0837               	movf	?_modulation,w
  6386  06FC  0022               	movlb	2	; select bank2
  6387  06FD  00C8               	movwf	_mod_value^(0+256)
  6388                           
  6389                           ;main.c: 374: CCPR9 = mod_value / 2;
  6390  06FE  3002               	movlw	2
  6391  06FF  0020               	movlb	0	; select bank0
  6392  0700  00A2               	movwf	___awdiv@divisor
  6393  0701  3000               	movlw	0
  6394  0702  00A3               	movwf	___awdiv@divisor+1
  6395  0703  0022               	movlb	2	; select bank2
  6396  0704  0849               	movf	(_mod_value+1)^(0+256),w
  6397  0705  0020               	movlb	0	; select bank0
  6398  0706  00A5               	movwf	___awdiv@dividend+1
  6399  0707  0022               	movlb	2	; select bank2
  6400  0708  0848               	movf	_mod_value^(0+256),w
  6401  0709  0020               	movlb	0	; select bank0
  6402  070A  00A4               	movwf	___awdiv@dividend
  6403  070B  3194  2449  3182   	fcall	___awdiv
  6404  070E  0020               	movlb	0	; select bank0
  6405  070F  0823               	movf	?___awdiv+1,w
  6406  0710  002C               	movlb	12	; select bank12
  6407  0711  009B               	movwf	27	;volatile
  6408  0712  0020               	movlb	0	; select bank0
  6409  0713  0822               	movf	?___awdiv,w
  6410  0714  002C               	movlb	12	; select bank12
  6411  0715  009A               	movwf	26	;volatile
  6412                           
  6413                           ;main.c: 375: mod_timer = 0;
  6414  0716  3000               	movlw	0
  6415  0717  0022               	movlb	2	; select bank2
  6416  0718  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6417  0719  3000               	movlw	0
  6418  071A  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6419  071B  3000               	movlw	0
  6420  071C  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6421  071D  3000               	movlw	0
  6422  071E  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6423  071F                     l5904:	
  6424                           
  6425                           ;main.c: 377: }
  6426                           ;main.c: 384: if (delay_time_changed == 1) {
  6427  071F  035C               	decf	_delay_time_changed^(0+256),w
  6428  0720  045D               	iorwf	(_delay_time_changed+1)^(0+256),w
  6429  0721  1D03               	btfss	3,2
  6430  0722  2AC2               	goto	l5766
  6431                           
  6432                           ;main.c: 385: delay_time = baseline_delay_time;
  6433  0723  0021               	movlb	1	; select bank1
  6434  0724  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6435  0725  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6436  0726  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6437  0727  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6438  0728  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6439  0729  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6440  072A  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6441  072B  00CD               	movwf	_delay_time^(0+128)	;volatile
  6442                           
  6443                           ;main.c: 386: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6444  072C  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6445  072D  00AF               	movwf	(set_subdivision@x+1)^(0+128)
  6446  072E  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6447  072F  00AE               	movwf	set_subdivision@x^(0+128)
  6448  0730  085A               	movf	(_top_push_state+1)^(0+128),w
  6449  0731  00B1               	movwf	(set_subdivision@y+1)^(0+128)
  6450  0732  0859               	movf	_top_push_state^(0+128),w
  6451  0733  00B0               	movwf	set_subdivision@y^(0+128)
  6452  0734  3188  20F6  3182   	fcall	_set_subdivision
  6453  0737  0021               	movlb	1	; select bank1
  6454  0738  082E               	movf	?_set_subdivision^(0+128),w
  6455  0739  00CD               	movwf	_delay_time^(0+128)	;volatile
  6456  073A  082F               	movf	(?_set_subdivision+1)^(0+128),w
  6457  073B  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6458  073C  0D89               	rlf	9,f
  6459  073D  3B89               	subwfb	9,f
  6460  073E  0989               	comf	9,f
  6461  073F  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6462  0740  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6463                           
  6464                           ;main.c: 387: reset_sub_delay = 1;
  6465  0741  3001               	movlw	1
  6466  0742  0022               	movlb	2	; select bank2
  6467  0743  00CA               	movwf	_reset_sub_delay^(0+256)
  6468  0744  3000               	movlw	0
  6469  0745  00CB               	movwf	(_reset_sub_delay^(0+256)+1)
  6470                           
  6471                           ;main.c: 388: delayfound = 0;
  6472  0746  01B6               	clrf	_delayfound^(0+256)
  6473  0747  01B7               	clrf	(_delayfound+1)^(0+256)
  6474                           
  6475                           ;main.c: 389: delay_counter = 0;
  6476  0748  01B4               	clrf	_delay_counter^(0+256)	;volatile
  6477  0749  01B5               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6478  074A                     l5922:	
  6479                           ;main.c: 391: while (delayfound == 0) {
  6480                           
  6481  074A  0836               	movf	_delayfound^(0+256),w
  6482  074B  0437               	iorwf	(_delayfound+1)^(0+256),w
  6483  074C  1D03               	btfss	3,2
  6484  074D  2F9D               	goto	l5924
  6485                           
  6486                           ;main.c: 392: if (delayArray[delay_counter] <= delay_time * 2) {
  6487  074E  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6488  074F  0021               	movlb	1	; select bank1
  6489  0750  00BB               	movwf	(??_main^(0+128)+1)
  6490  0751  0022               	movlb	2	; select bank2
  6491  0752  0834               	movf	_delay_counter^(0+256),w	;volatile
  6492  0753  0021               	movlb	1	; select bank1
  6493  0754  00BA               	movwf	??_main^(0+128)
  6494  0755  35BA               	lslf	??_main^(0+128),f
  6495  0756  0DBB               	rlf	(??_main^(0+128)+1),f
  6496  0757  306E               	movlw	110
  6497  0758  00BC               	movwf	(??_main+2)^(0+128)
  6498  0759  3023               	movlw	35
  6499  075A  00BD               	movwf	((??_main+2)^(0+128)+1)
  6500  075B  083A               	movf	??_main^(0+128),w
  6501  075C  073C               	addwf	(??_main+2)^(0+128),w
  6502  075D  0086               	movwf	6
  6503  075E  083B               	movf	(??_main+1)^(0+128),w
  6504  075F  3D3D               	addwfc	(??_main+3)^(0+128),w
  6505  0760  0087               	movwf	7
  6506  0761  3F40               	moviw [0]fsr1
  6507  0762  00BE               	movwf	(??_main+4)^(0+128)
  6508  0763  3F41               	moviw [1]fsr1
  6509  0764  00BF               	movwf	((??_main+4)^(0+128)+1)
  6510  0765  083E               	movf	(??_main+4)^(0+128),w
  6511  0766  00C0               	movwf	(??_main+6)^(0+128)
  6512  0767  083F               	movf	(??_main+5)^(0+128),w
  6513  0768  00C1               	movwf	((??_main+6)^(0+128)+1)
  6514  0769  3000               	movlw	0
  6515  076A  1BC1               	btfsc	((??_main+6)^(0+128)+1),7
  6516  076B  30FF               	movlw	255
  6517  076C  00C2               	movwf	((??_main+6)^(0+128)+2)
  6518  076D  00C3               	movwf	((??_main+6)^(0+128)+3)
  6519  076E  084D               	movf	_delay_time^(0+128),w	;volatile
  6520  076F  00C4               	movwf	(??_main+10)^(0+128)
  6521  0770  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6522  0771  00C5               	movwf	((??_main+10)^(0+128)+1)
  6523  0772  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6524  0773  00C6               	movwf	((??_main+10)^(0+128)+2)
  6525  0774  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6526  0775  00C7               	movwf	((??_main+10)^(0+128)+3)
  6527  0776  3001               	movlw	1
  6528  0777                     u6735:	
  6529  0777  35C4               	lslf	(??_main+10)^(0+128),f
  6530  0778  0DC5               	rlf	((??_main+10)^(0+128)+1),f
  6531  0779  0DC6               	rlf	((??_main+10)^(0+128)+2),f
  6532  077A  0DC7               	rlf	((??_main+10)^(0+128)+3),f
  6533  077B  0B89               	decfsz	9,f
  6534  077C  2F77               	goto	u6735
  6535  077D  0847               	movf	(??_main+13)^(0+128),w
  6536  077E  3A80               	xorlw	128
  6537  077F  00C8               	movwf	(??_main+14)^(0+128)
  6538  0780  0843               	movf	(??_main+9)^(0+128),w
  6539  0781  3A80               	xorlw	128
  6540  0782  0248               	subwf	(??_main+14)^(0+128),w
  6541  0783  1D03               	skipz
  6542  0784  2F8F               	goto	u6743
  6543  0785  0842               	movf	(??_main+8)^(0+128),w
  6544  0786  0246               	subwf	(??_main+12)^(0+128),w
  6545  0787  1D03               	skipz
  6546  0788  2F8F               	goto	u6743
  6547  0789  0841               	movf	(??_main+7)^(0+128),w
  6548  078A  0245               	subwf	(??_main+11)^(0+128),w
  6549  078B  1D03               	skipz
  6550  078C  2F8F               	goto	u6743
  6551  078D  0840               	movf	(??_main+6)^(0+128),w
  6552  078E  0244               	subwf	(??_main+10)^(0+128),w
  6553  078F                     u6743:	
  6554  078F  1C03               	skipc
  6555  0790  2F97               	goto	l5920
  6556                           
  6557                           ;main.c: 393: delayfound = 1;
  6558  0791  3001               	movlw	1
  6559  0792  0022               	movlb	2	; select bank2
  6560  0793  00B6               	movwf	_delayfound^(0+256)
  6561  0794  3000               	movlw	0
  6562  0795  00B7               	movwf	(_delayfound^(0+256)+1)
  6563                           
  6564                           ;main.c: 397: } else {
  6565  0796  2F4A               	goto	l5922
  6566  0797                     l5920:	
  6567                           
  6568                           ;main.c: 398: delay_counter++;
  6569  0797  3001               	movlw	1
  6570  0798  0022               	movlb	2	; select bank2
  6571  0799  07B4               	addwf	_delay_counter^(0+256),f	;volatile
  6572  079A  3000               	movlw	0
  6573  079B  3DB5               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6574  079C  2F4A               	goto	l5922
  6575  079D                     l5924:	
  6576                           
  6577                           ;main.c: 400: }
  6578                           ;main.c: 401: }
  6579                           ;main.c: 417: mod_delay_time = delay_time / 7.5;
  6580  079D  0021               	movlb	1	; select bank1
  6581  079E  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6582  079F  0020               	movlb	0	; select bank0
  6583  07A0  00AD               	movwf	___altoft@c+3
  6584  07A1  0021               	movlb	1	; select bank1
  6585  07A2  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6586  07A3  0020               	movlb	0	; select bank0
  6587  07A4  00AC               	movwf	___altoft@c+2
  6588  07A5  0021               	movlb	1	; select bank1
  6589  07A6  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6590  07A7  0020               	movlb	0	; select bank0
  6591  07A8  00AB               	movwf	___altoft@c+1
  6592  07A9  0021               	movlb	1	; select bank1
  6593  07AA  084D               	movf	_delay_time^(0+128),w	;volatile
  6594  07AB  0020               	movlb	0	; select bank0
  6595  07AC  00AA               	movwf	___altoft@c
  6596  07AD  3190  2044  3182   	fcall	___altoft
  6597  07B0  0020               	movlb	0	; select bank0
  6598  07B1  082A               	movf	?___altoft,w
  6599  07B2  00CA               	movwf	___ftdiv@f1
  6600  07B3  082B               	movf	?___altoft+1,w
  6601  07B4  00CB               	movwf	___ftdiv@f1+1
  6602  07B5  082C               	movf	?___altoft+2,w
  6603  07B6  00CC               	movwf	___ftdiv@f1+2
  6604  07B7  3000               	movlw	0
  6605  07B8  00C7               	movwf	___ftdiv@f2
  6606  07B9  30F0               	movlw	240
  6607  07BA  00C8               	movwf	___ftdiv@f2+1
  6608  07BB  3040               	movlw	64
  6609  07BC  00C9               	movwf	___ftdiv@f2+2
  6610  07BD  3197  2757  3182   	fcall	___ftdiv
  6611  07C0  0020               	movlb	0	; select bank0
  6612  07C1  0847               	movf	?___ftdiv,w
  6613  07C2  0021               	movlb	1	; select bank1
  6614  07C3  00A0               	movwf	___fttol@f1^(0+128)
  6615  07C4  0020               	movlb	0	; select bank0
  6616  07C5  0848               	movf	?___ftdiv+1,w
  6617  07C6  0021               	movlb	1	; select bank1
  6618  07C7  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6619  07C8  0020               	movlb	0	; select bank0
  6620  07C9  0849               	movf	?___ftdiv+2,w
  6621  07CA  0021               	movlb	1	; select bank1
  6622  07CB  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6623  07CC  3196  2645  3182   	fcall	___fttol
  6624  07CF  0021               	movlb	1	; select bank1
  6625  07D0  0821               	movf	(?___fttol^(0+128)+1),w
  6626  07D1  0022               	movlb	2	; select bank2
  6627  07D2  00E5               	movwf	(_mod_delay_time+1)^(0+256)
  6628  07D3  0021               	movlb	1	; select bank1
  6629  07D4  0820               	movf	?___fttol^(0+128),w
  6630  07D5  0022               	movlb	2	; select bank2
  6631  07D6  00E4               	movwf	_mod_delay_time^(0+256)
  6632                           
  6633                           ;main.c: 419: delay_time_changed = 0;
  6634  07D7  01DC               	clrf	_delay_time_changed^(0+256)
  6635  07D8  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  6636  07D9  2AC2               	goto	l5766
  6637  07DA                     __end_of_main:	
  6638                           
  6639                           	psect	text1
  6640  0801                     __ptext1:	
  6641 ;; *************** function _update_mode *****************
  6642 ;; Defined at:
  6643 ;;		line 82 in file "tactiles.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6659 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6661 ;;Total ram usage:        1 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    2
  6664 ;; This function calls:
  6665 ;;		Nothing
  6666 ;; This function is called by:
  6667 ;;		_main
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function _update_mode
  6673  0801                     _update_mode:	
  6674                           
  6675                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6679  0801  0020               	movlb	0	; select bank0
  6680  0802  180E               	btfsc	14,0	;volatile
  6681  0803  283E               	goto	l5414
  6682                           
  6683                           ;tactiles.c: 88: debounce_mode2++;
  6684  0804  3001               	movlw	1
  6685  0805  0022               	movlb	2	; select bank2
  6686  0806  07B2               	addwf	_debounce_mode2^(0+256),f
  6687  0807  3000               	movlw	0
  6688  0808  3DB3               	addwfc	(_debounce_mode2+1)^(0+256),f
  6689                           
  6690                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6691  0809  0833               	movf	(_debounce_mode2+1)^(0+256),w
  6692  080A  3A80               	xorlw	128
  6693  080B  0020               	movlb	0	; select bank0
  6694  080C  00A2               	movwf	??_update_mode
  6695  080D  3080               	movlw	128
  6696  080E  0222               	subwf	??_update_mode,w
  6697  080F  1D03               	skipz
  6698  0810  2814               	goto	u5915
  6699  0811  301A               	movlw	26
  6700  0812  0022               	movlb	2	; select bank2
  6701  0813  0232               	subwf	_debounce_mode2^(0+256),w
  6702  0814                     u5915:	
  6703  0814  1C03               	skipc
  6704  0815  0008               	return
  6705                           
  6706                           ;tactiles.c: 90: debounce_mode2 = 25;
  6707  0816  3019               	movlw	25
  6708  0817  0022               	movlb	2	; select bank2
  6709  0818  00B2               	movwf	_debounce_mode2^(0+256)
  6710  0819  3000               	movlw	0
  6711  081A  00B3               	movwf	(_debounce_mode2^(0+256)+1)
  6712                           
  6713                           ;tactiles.c: 91: mode2_state++;
  6714  081B  3001               	movlw	1
  6715  081C  0020               	movlb	0	; select bank0
  6716  081D  00A2               	movwf	??_update_mode
  6717  081E  0822               	movf	??_update_mode,w
  6718  081F  0022               	movlb	2	; select bank2
  6719  0820  07D5               	addwf	_mode2_state^(0+256),f
  6720                           
  6721                           ;tactiles.c: 92: if (mode2_state > 2) {
  6722  0821  3003               	movlw	3
  6723  0822  0255               	subwf	_mode2_state^(0+256),w
  6724  0823  1C03               	skipc
  6725  0824  282F               	goto	l5412
  6726                           
  6727                           ;tactiles.c: 93: mode2_state = 0;
  6728  0825  01D5               	clrf	_mode2_state^(0+256)
  6729                           
  6730                           ;tactiles.c: 94: }
  6731                           ;tactiles.c: 95: switch(mode2_state) {
  6732  0826  282F               	goto	l5412
  6733  0827                     l864:	
  6734                           ;tactiles.c: 96: case 0:
  6735                           
  6736                           
  6737                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6738  0827  108D               	bcf	13,1	;volatile
  6739  0828  282D               	goto	L5
  6740  0829                     l866:	
  6741                           ;tactiles.c: 100: case 1:
  6742                           
  6743                           ;tactiles.c: 99: break;
  6744                           
  6745                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6746                           
  6747                           
  6748                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6749  0829  108D               	bcf	13,1	;volatile
  6750                           
  6751                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6752  082A  140D               	bsf	13,0	;volatile
  6753                           
  6754                           ;tactiles.c: 103: break;
  6755  082B  283A               	goto	l868
  6756  082C                     l867:	
  6757                           ;tactiles.c: 104: case 2:
  6758                           
  6759                           
  6760                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6761  082C  148D               	bsf	13,1	;volatile
  6762  082D                     L5:	
  6763                           
  6764                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6765  082D  100D               	bcf	13,0	;volatile
  6766                           
  6767                           ;tactiles.c: 108: }
  6768                           
  6769                           ;tactiles.c: 107: break;
  6770  082E  283A               	goto	l868
  6771  082F                     l5412:	
  6772  082F  0855               	movf	_mode2_state^(0+256),w
  6773                           
  6774                           ; Switch size 1, requested type "space"
  6775                           ; Number of cases is 3, Range of values is 0 to 2
  6776                           ; switch strategies available:
  6777                           ; Name         Instructions Cycles
  6778                           ; simple_byte           10     6 (average)
  6779                           ; direct_byte           12     6 (fixed)
  6780                           ; jumptable            260     6 (fixed)
  6781                           ;	Chosen strategy is simple_byte
  6782  0830  3A00               	xorlw	0	; case 0
  6783  0831  1903               	skipnz
  6784  0832  2827               	goto	l864
  6785  0833  3A01               	xorlw	1	; case 1
  6786  0834  1903               	skipnz
  6787  0835  2829               	goto	l866
  6788  0836  3A03               	xorlw	3	; case 2
  6789  0837  1903               	skipnz
  6790  0838  282C               	goto	l867
  6791  0839  283A               	goto	l868
  6792  083A                     l868:	
  6793                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6794                           
  6795  083A  0020               	movlb	0	; select bank0
  6796  083B  180E               	btfsc	14,0	;volatile
  6797  083C  0008               	return
  6798  083D  283A               	goto	l868
  6799  083E                     l5414:	
  6800                           ;tactiles.c: 110: }
  6801                           ;tactiles.c: 111: }
  6802                           ;tactiles.c: 112: } else {
  6803                           
  6804                           
  6805                           ;tactiles.c: 113: debounce_mode2 = 0;
  6806  083E  0022               	movlb	2	; select bank2
  6807  083F  01B2               	clrf	_debounce_mode2^(0+256)
  6808  0840  01B3               	clrf	(_debounce_mode2+1)^(0+256)
  6809  0841  0008               	return
  6810  0842                     __end_of_update_mode:	
  6811                           
  6812                           	psect	text2
  6813  0B96                     __ptext2:	
  6814 ;; *************** function _updateSwitchTap *****************
  6815 ;; Defined at:
  6816 ;;		line 48 in file "SwitchTap.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;  tapCntDiviso    2   30[BANK0 ] int 
  6821 ;;  iCnt            1   32[BANK0 ] unsigned char 
  6822 ;; Return value:  Size  Location     Type
  6823 ;;                  1    wreg      void 
  6824 ;; Registers used:
  6825 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6826 ;; Tracked objects:
  6827 ;;		On entry : 0/0
  6828 ;;		On exit  : 0/0
  6829 ;;		Unchanged: 0/0
  6830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6832 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6833 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6834 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6835 ;;Total ram usage:        9 bytes
  6836 ;; Hardware stack levels used:    1
  6837 ;; Hardware stack levels required when called:    5
  6838 ;; This function calls:
  6839 ;;		___aldiv
  6840 ;;		_setDoublePressState
  6841 ;;		_setLongTapState
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           
  6848                           ;psect for function _updateSwitchTap
  6849  0B96                     _updateSwitchTap:	
  6850                           
  6851                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6852                           
  6853                           ;incstack = 0
  6854                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6855  0B96  0020               	movlb	0	; select bank0
  6856  0B97  01C0               	clrf	updateSwitchTap@iCnt
  6857                           
  6858                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6859  0B98  1810               	btfsc	16,0	;volatile
  6860  0B99  2BA1               	goto	l5542
  6861                           
  6862                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6863  0B9A  0021               	movlb	1	; select bank1
  6864  0B9B  086D               	movf	_switchTap_pressed^(0+128),w
  6865  0B9C  1903               	btfsc	3,2
  6866  0B9D  2BAC               	goto	l1203
  6867                           
  6868                           ;SwitchTap.c: 59: switchTap_pressed--;
  6869  0B9E  3001               	movlw	1
  6870  0B9F  02ED               	subwf	_switchTap_pressed^(0+128),f
  6871                           
  6872                           ;SwitchTap.c: 60: }
  6873                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6874  0BA0  2BAC               	goto	l1203
  6875  0BA1                     l5542:	
  6876  0BA1  3019               	movlw	25
  6877  0BA2  0021               	movlb	1	; select bank1
  6878  0BA3  026D               	subwf	_switchTap_pressed^(0+128),w
  6879  0BA4  1803               	skipnc
  6880  0BA5  2BAC               	goto	l1203
  6881                           
  6882                           ;SwitchTap.c: 62: switchTap_pressed++;
  6883  0BA6  3001               	movlw	1
  6884  0BA7  0020               	movlb	0	; select bank0
  6885  0BA8  00B8               	movwf	??_updateSwitchTap
  6886  0BA9  0838               	movf	??_updateSwitchTap,w
  6887  0BAA  0021               	movlb	1	; select bank1
  6888  0BAB  07ED               	addwf	_switchTap_pressed^(0+128),f
  6889  0BAC                     l1203:	
  6890                           
  6891                           ;SwitchTap.c: 63: }
  6892                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6893  0BAC  086D               	movf	_switchTap_pressed^(0+128),w
  6894  0BAD  1D03               	btfss	3,2
  6895  0BAE  2D65               	goto	l5626
  6896                           
  6897                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6898  0BAF  1BE4               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  6899  0BB0  2C36               	goto	l5586
  6900  0BB1  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  6901  0BB2  1D03               	btfss	3,2
  6902  0BB3  2BBD               	goto	l5548
  6903  0BB4  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  6904  0BB5  1D03               	btfss	3,2
  6905  0BB6  2BBD               	goto	l5548
  6906  0BB7  301B               	movlw	27
  6907  0BB8  0261               	subwf	_tap_timer^(0+128),w	;volatile
  6908  0BB9  3006               	movlw	6
  6909  0BBA  3B62               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  6910  0BBB  1C03               	btfss	3,0
  6911  0BBC  2C36               	goto	l5586
  6912  0BBD                     l5548:	
  6913                           
  6914                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6915  0BBD  0022               	movlb	2	; select bank2
  6916  0BBE  0358               	decf	_switchTap_down^(0+256),w
  6917  0BBF  1903               	btfsc	3,2
  6918  0BC0  2BFE               	goto	l5566
  6919                           
  6920                           ;SwitchTap.c: 78: switchTap_down = 1;
  6921  0BC1  01D8               	clrf	_switchTap_down^(0+256)
  6922  0BC2  0AD8               	incf	_switchTap_down^(0+256),f
  6923                           
  6924                           ;SwitchTap.c: 79: tap_timer = 0;
  6925  0BC3  3000               	movlw	0
  6926  0BC4  0021               	movlb	1	; select bank1
  6927  0BC5  00E4               	movwf	(_tap_timer+3)^(0+128)	;volatile
  6928  0BC6  3000               	movlw	0
  6929  0BC7  00E3               	movwf	(_tap_timer+2)^(0+128)	;volatile
  6930  0BC8  3000               	movlw	0
  6931  0BC9  00E2               	movwf	(_tap_timer+1)^(0+128)	;volatile
  6932  0BCA  3000               	movlw	0
  6933  0BCB  00E1               	movwf	_tap_timer^(0+128)	;volatile
  6934                           
  6935                           ;SwitchTap.c: 80: tap_iteration = 1;
  6936  0BCC  3001               	movlw	1
  6937  0BCD  0022               	movlb	2	; select bank2
  6938  0BCE  00E8               	movwf	_tap_iteration^(0+256)
  6939  0BCF  3000               	movlw	0
  6940  0BD0  00E9               	movwf	(_tap_iteration^(0+256)+1)
  6941                           
  6942                           ;SwitchTap.c: 81: tap_total = 0;
  6943  0BD1  3000               	movlw	0
  6944  0BD2  0023               	movlb	3	; select bank3
  6945  0BD3  00E3               	movwf	(_tap_total+3)^(0+384)
  6946  0BD4  3000               	movlw	0
  6947  0BD5  00E2               	movwf	(_tap_total+2)^(0+384)
  6948  0BD6  3000               	movlw	0
  6949  0BD7  00E1               	movwf	(_tap_total+1)^(0+384)
  6950  0BD8  3000               	movlw	0
  6951  0BD9  00E0               	movwf	_tap_total^(0+384)
  6952                           
  6953                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6954  0BDA  0022               	movlb	2	; select bank2
  6955  0BDB  01DC               	clrf	_delay_time_changed^(0+256)
  6956  0BDC  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  6957                           
  6958                           ;SwitchTap.c: 83: LATDbits.LATD0 = 0;
  6959  0BDD  100F               	bcf	15,0	;volatile
  6960                           
  6961                           ;SwitchTap.c: 85: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6962  0BDE  0020               	movlb	0	; select bank0
  6963  0BDF  01C0               	clrf	updateSwitchTap@iCnt
  6964  0BE0  0AC0               	incf	updateSwitchTap@iCnt,f
  6965  0BE1                     l5564:	
  6966  0BE1  0840               	movf	updateSwitchTap@iCnt,w
  6967  0BE2  0021               	movlb	1	; select bank1
  6968  0BE3  025C               	subwf	_num_taps^(0+128),w
  6969  0BE4  1C03               	btfss	3,0
  6970  0BE5  2BFE               	goto	l5566
  6971                           
  6972                           ;SwitchTap.c: 86: tap_history[iCnt] = 0;
  6973  0BE6  0020               	movlb	0	; select bank0
  6974  0BE7  0840               	movf	updateSwitchTap@iCnt,w
  6975  0BE8  00B8               	movwf	??_updateSwitchTap
  6976  0BE9  3001               	movlw	1
  6977  0BEA                     u6215:	
  6978  0BEA  35B8               	lslf	??_updateSwitchTap,f
  6979  0BEB  3EFF               	addlw	-1
  6980  0BEC  1D03               	skipz
  6981  0BED  2BEA               	goto	u6215
  6982  0BEE  3538               	lslf	??_updateSwitchTap,w
  6983  0BEF  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6984  0BF0  0086               	movwf	6
  6985  0BF1  3001               	movlw	1	; select bank3/4
  6986  0BF2  0087               	movwf	7
  6987  0BF3  3000               	movlw	0
  6988  0BF4  3FC0               	movwi [0]fsr1
  6989  0BF5  3000               	movlw	0
  6990  0BF6  3FC1               	movwi [1]fsr1
  6991  0BF7  3FC2               	movwi [2]fsr1
  6992  0BF8  3FC3               	movwi [3]fsr1
  6993  0BF9  3001               	movlw	1
  6994  0BFA  00B8               	movwf	??_updateSwitchTap
  6995  0BFB  0838               	movf	??_updateSwitchTap,w
  6996  0BFC  07C0               	addwf	updateSwitchTap@iCnt,f
  6997  0BFD  2BE1               	goto	l5564
  6998  0BFE                     l5566:	
  6999                           
  7000                           ;SwitchTap.c: 87: }
  7001                           ;SwitchTap.c: 88: }
  7002                           ;SwitchTap.c: 91: if (longTap_start == 0) {
  7003  0BFE  0022               	movlb	2	; select bank2
  7004  0BFF  0853               	movf	_longTap_start^(0+256),w
  7005  0C00  1D03               	btfss	3,2
  7006  0C01  2C09               	goto	l5572
  7007                           
  7008                           ;SwitchTap.c: 92: longTap_start = 1;
  7009  0C02  01D3               	clrf	_longTap_start^(0+256)
  7010  0C03  0AD3               	incf	_longTap_start^(0+256),f
  7011                           
  7012                           ;SwitchTap.c: 93: longTap_state = 0;
  7013  0C04  0020               	movlb	0	; select bank0
  7014  0C05  01EA               	clrf	_longTap_state	;volatile
  7015                           
  7016                           ;SwitchTap.c: 94: longTap_timer = 0;
  7017  0C06  0022               	movlb	2	; select bank2
  7018  0C07  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7019  0C08  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7020  0C09                     l5572:	
  7021                           
  7022                           ;SwitchTap.c: 95: }
  7023                           ;SwitchTap.c: 99: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  7024  0C09  0021               	movlb	1	; select bank1
  7025  0C0A  0858               	movf	(_long_press_limit+1)^(0+128),w
  7026  0C0B  0022               	movlb	2	; select bank2
  7027  0C0C  0245               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  7028  0C0D  1D03               	skipz
  7029  0C0E  2C13               	goto	u6245
  7030  0C0F  0021               	movlb	1	; select bank1
  7031  0C10  0857               	movf	_long_press_limit^(0+128),w
  7032  0C11  0022               	movlb	2	; select bank2
  7033  0C12  0244               	subwf	_longTap_timer^(0+256),w	;volatile
  7034  0C13                     u6245:	
  7035  0C13  1C03               	skipc
  7036  0C14  0008               	return
  7037  0C15  0020               	movlb	0	; select bank0
  7038  0C16  086A               	movf	_longTap_state,w	;volatile
  7039  0C17  1D03               	btfss	3,2
  7040  0C18  0008               	return
  7041                           
  7042                           ;SwitchTap.c: 101: longTap_timer = long_press_limit;
  7043  0C19  0021               	movlb	1	; select bank1
  7044  0C1A  0858               	movf	(_long_press_limit+1)^(0+128),w
  7045  0C1B  0022               	movlb	2	; select bank2
  7046  0C1C  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  7047  0C1D  0021               	movlb	1	; select bank1
  7048  0C1E  0857               	movf	_long_press_limit^(0+128),w
  7049  0C1F  0022               	movlb	2	; select bank2
  7050  0C20  00C4               	movwf	_longTap_timer^(0+256)	;volatile
  7051                           
  7052                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7053  0C21  120D               	bcf	13,4	;volatile
  7054                           
  7055                           ;SwitchTap.c: 104: if (feedback_start != 1) {
  7056  0C22  0021               	movlb	1	; select bank1
  7057  0C23  036B               	decf	_feedback_start^(0+128),w
  7058  0C24  1903               	btfsc	3,2
  7059  0C25  2C2E               	goto	l5584
  7060                           
  7061                           ;SwitchTap.c: 105: setLongTapState(1);
  7062  0C26  3001               	movlw	1
  7063  0C27  0020               	movlb	0	; select bank0
  7064  0C28  00A2               	movwf	setLongTapState@f_state
  7065  0C29  3000               	movlw	0
  7066  0C2A  00A3               	movwf	setLongTapState@f_state+1
  7067  0C2B  319E  2688         	fcall	_setLongTapState
  7068                           
  7069                           ;SwitchTap.c: 106: } else {
  7070  0C2D  0008               	return
  7071  0C2E                     l5584:	
  7072                           
  7073                           ;SwitchTap.c: 107: setDoublePressState(1);
  7074  0C2E  3001               	movlw	1
  7075  0C2F  0020               	movlb	0	; select bank0
  7076  0C30  00B4               	movwf	setDoublePressState@f_state
  7077  0C31  3000               	movlw	0
  7078  0C32  00B5               	movwf	setDoublePressState@f_state+1
  7079  0C33  319F  2741         	fcall	_setDoublePressState
  7080                           
  7081                           ;SwitchTap.c: 108: }
  7082                           ;SwitchTap.c: 109: }
  7083                           ;SwitchTap.c: 111: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7084  0C35  0008               	return
  7085  0C36                     l5586:	
  7086  0C36  0021               	movlb	1	; select bank1
  7087  0C37  1BE4               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7088  0C38  2C45               	goto	l5588
  7089  0C39  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7090  0C3A  1D03               	btfss	3,2
  7091  0C3B  0008               	return
  7092  0C3C  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7093  0C3D  1D03               	btfss	3,2
  7094  0C3E  0008               	return
  7095  0C3F  301B               	movlw	27
  7096  0C40  0261               	subwf	_tap_timer^(0+128),w	;volatile
  7097  0C41  3006               	movlw	6
  7098  0C42  3B62               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7099  0C43  1803               	btfsc	3,0
  7100  0C44  0008               	return
  7101  0C45                     l5588:	
  7102  0C45  0020               	movlb	0	; select bank0
  7103  0C46  086A               	movf	_longTap_state,w	;volatile
  7104  0C47  1D03               	btfss	3,2
  7105  0C48  0008               	return
  7106  0C49  0022               	movlb	2	; select bank2
  7107  0C4A  0358               	decf	_switchTap_down^(0+256),w
  7108  0C4B  1903               	btfsc	3,2
  7109  0C4C  0008               	return
  7110                           
  7111                           ;SwitchTap.c: 113: switchTap_down = 1;
  7112  0C4D  01D8               	clrf	_switchTap_down^(0+256)
  7113  0C4E  0AD8               	incf	_switchTap_down^(0+256),f
  7114                           
  7115                           ;SwitchTap.c: 114: if (tap_timer >= 1172) {
  7116  0C4F  0021               	movlb	1	; select bank1
  7117  0C50  1BE4               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7118  0C51  2C66               	goto	l1217
  7119  0C52  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7120  0C53  1D03               	btfss	3,2
  7121  0C54  2C5E               	goto	l5596
  7122  0C55  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7123  0C56  1D03               	btfss	3,2
  7124  0C57  2C5E               	goto	l5596
  7125  0C58  3094               	movlw	148
  7126  0C59  0261               	subwf	_tap_timer^(0+128),w	;volatile
  7127  0C5A  3004               	movlw	4
  7128  0C5B  3B62               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7129  0C5C  1C03               	btfss	3,0
  7130  0C5D  2C66               	goto	l1217
  7131  0C5E                     l5596:	
  7132                           
  7133                           ;SwitchTap.c: 115: tap_timer = 1172;
  7134  0C5E  3000               	movlw	0
  7135  0C5F  00E4               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7136  0C60  3000               	movlw	0
  7137  0C61  00E3               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7138  0C62  3004               	movlw	4
  7139  0C63  00E2               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7140  0C64  3094               	movlw	148
  7141  0C65  00E1               	movwf	_tap_timer^(0+128)	;volatile
  7142  0C66                     l1217:	
  7143                           
  7144                           ;SwitchTap.c: 116: }
  7145                           ;SwitchTap.c: 118: int tapCntDivisor = num_taps;
  7146  0C66  085C               	movf	_num_taps^(0+128),w
  7147  0C67  0020               	movlb	0	; select bank0
  7148  0C68  00B8               	movwf	??_updateSwitchTap
  7149  0C69  01B9               	clrf	??_updateSwitchTap+1
  7150  0C6A  0838               	movf	??_updateSwitchTap,w
  7151  0C6B  00BE               	movwf	updateSwitchTap@tapCntDivisor
  7152  0C6C  0839               	movf	??_updateSwitchTap+1,w
  7153  0C6D  00BF               	movwf	updateSwitchTap@tapCntDivisor+1
  7154                           
  7155                           ;SwitchTap.c: 119: if (tap_iteration <= num_taps) {
  7156  0C6E  0022               	movlb	2	; select bank2
  7157  0C6F  0869               	movf	(_tap_iteration+1)^(0+256),w
  7158  0C70  3A80               	xorlw	128
  7159  0C71  3C80               	sublw	128
  7160  0C72  1D03               	skipz
  7161  0C73  2C77               	goto	u6315
  7162  0C74  0868               	movf	_tap_iteration^(0+256),w
  7163  0C75  0021               	movlb	1	; select bank1
  7164  0C76  025C               	subwf	_num_taps^(0+128),w
  7165  0C77                     u6315:	
  7166  0C77  1C03               	skipc
  7167  0C78  2CA9               	goto	l5604
  7168                           
  7169                           ;SwitchTap.c: 120: tap_total += tap_timer;
  7170  0C79  0021               	movlb	1	; select bank1
  7171  0C7A  0861               	movf	_tap_timer^(0+128),w	;volatile
  7172  0C7B  0023               	movlb	3	; select bank3
  7173  0C7C  07E0               	addwf	_tap_total^(0+384),f
  7174  0C7D  0021               	movlb	1	; select bank1
  7175  0C7E  0862               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7176  0C7F  0023               	movlb	3	; select bank3
  7177  0C80  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7178  0C81  0021               	movlb	1	; select bank1
  7179  0C82  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7180  0C83  0023               	movlb	3	; select bank3
  7181  0C84  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7182  0C85  0021               	movlb	1	; select bank1
  7183  0C86  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7184  0C87  0023               	movlb	3	; select bank3
  7185  0C88  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7186                           
  7187                           ;SwitchTap.c: 121: tap_history[tap_iteration] = tap_timer;
  7188  0C89  0022               	movlb	2	; select bank2
  7189  0C8A  0868               	movf	_tap_iteration^(0+256),w
  7190  0C8B  0020               	movlb	0	; select bank0
  7191  0C8C  00B8               	movwf	??_updateSwitchTap
  7192  0C8D  3001               	movlw	1
  7193  0C8E                     u6325:	
  7194  0C8E  35B8               	lslf	??_updateSwitchTap,f
  7195  0C8F  3EFF               	addlw	-1
  7196  0C90  1D03               	skipz
  7197  0C91  2C8E               	goto	u6325
  7198  0C92  3538               	lslf	??_updateSwitchTap,w
  7199  0C93  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7200  0C94  0086               	movwf	6
  7201  0C95  3001               	movlw	1	; select bank3/4
  7202  0C96  0087               	movwf	7
  7203  0C97  0021               	movlb	1	; select bank1
  7204  0C98  0861               	movf	_tap_timer^(0+128),w	;volatile
  7205  0C99  3FC0               	movwi [0]fsr1
  7206  0C9A  0862               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7207  0C9B  3FC1               	movwi [1]fsr1
  7208  0C9C  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7209  0C9D  3FC2               	movwi [2]fsr1
  7210  0C9E  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7211  0C9F  3FC3               	movwi [3]fsr1
  7212                           
  7213                           ;SwitchTap.c: 122: tapCntDivisor = tap_iteration;
  7214  0CA0  0022               	movlb	2	; select bank2
  7215  0CA1  0869               	movf	(_tap_iteration+1)^(0+256),w
  7216  0CA2  0020               	movlb	0	; select bank0
  7217  0CA3  00BF               	movwf	updateSwitchTap@tapCntDivisor+1
  7218  0CA4  0022               	movlb	2	; select bank2
  7219  0CA5  0868               	movf	_tap_iteration^(0+256),w
  7220  0CA6  0020               	movlb	0	; select bank0
  7221  0CA7  00BE               	movwf	updateSwitchTap@tapCntDivisor
  7222                           
  7223                           ;SwitchTap.c: 123: } else {
  7224  0CA8  2D25               	goto	l5618
  7225  0CA9                     l5604:	
  7226                           
  7227                           ;SwitchTap.c: 124: tap_total = 0;
  7228  0CA9  3000               	movlw	0
  7229  0CAA  0023               	movlb	3	; select bank3
  7230  0CAB  00E3               	movwf	(_tap_total+3)^(0+384)
  7231  0CAC  3000               	movlw	0
  7232  0CAD  00E2               	movwf	(_tap_total+2)^(0+384)
  7233  0CAE  3000               	movlw	0
  7234  0CAF  00E1               	movwf	(_tap_total+1)^(0+384)
  7235  0CB0  3000               	movlw	0
  7236  0CB1  00E0               	movwf	_tap_total^(0+384)
  7237                           
  7238                           ;SwitchTap.c: 125: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7239  0CB2  0020               	movlb	0	; select bank0
  7240  0CB3  01C0               	clrf	updateSwitchTap@iCnt
  7241  0CB4  0AC0               	incf	updateSwitchTap@iCnt,f
  7242  0CB5                     l5612:	
  7243  0CB5  0021               	movlb	1	; select bank1
  7244  0CB6  085C               	movf	_num_taps^(0+128),w
  7245  0CB7  0020               	movlb	0	; select bank0
  7246  0CB8  0240               	subwf	updateSwitchTap@iCnt,w
  7247  0CB9  1803               	btfsc	3,0
  7248  0CBA  2CFF               	goto	l5614
  7249                           
  7250                           ;SwitchTap.c: 126: tap_history[iCnt] = tap_history[iCnt + 1];
  7251  0CBB  0840               	movf	updateSwitchTap@iCnt,w
  7252  0CBC  00B8               	movwf	??_updateSwitchTap
  7253  0CBD  3001               	movlw	1
  7254  0CBE                     u6335:	
  7255  0CBE  35B8               	lslf	??_updateSwitchTap,f
  7256  0CBF  3EFF               	addlw	-1
  7257  0CC0  1D03               	skipz
  7258  0CC1  2CBE               	goto	u6335
  7259  0CC2  3538               	lslf	??_updateSwitchTap,w
  7260  0CC3  3E04               	addlw	4
  7261  0CC4  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7262  0CC5  0086               	movwf	6
  7263  0CC6  3001               	movlw	1	; select bank3/4
  7264  0CC7  0087               	movwf	7
  7265  0CC8  3F40               	moviw [0]fsr1
  7266  0CC9  00B9               	movwf	??_updateSwitchTap+1
  7267  0CCA  3F41               	moviw [1]fsr1
  7268  0CCB  00BA               	movwf	??_updateSwitchTap+2
  7269  0CCC  3F42               	moviw [2]fsr1
  7270  0CCD  00BB               	movwf	??_updateSwitchTap+3
  7271  0CCE  3F43               	moviw [3]fsr1
  7272  0CCF  00BC               	movwf	??_updateSwitchTap+4
  7273  0CD0  0840               	movf	updateSwitchTap@iCnt,w
  7274  0CD1  00BD               	movwf	??_updateSwitchTap+5
  7275  0CD2  3001               	movlw	1
  7276  0CD3                     u6345:	
  7277  0CD3  35BD               	lslf	??_updateSwitchTap+5,f
  7278  0CD4  3EFF               	addlw	-1
  7279  0CD5  1D03               	skipz
  7280  0CD6  2CD3               	goto	u6345
  7281  0CD7  353D               	lslf	??_updateSwitchTap+5,w
  7282  0CD8  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7283  0CD9  0086               	movwf	6
  7284  0CDA  3001               	movlw	1	; select bank3/4
  7285  0CDB  0087               	movwf	7
  7286  0CDC  0839               	movf	??_updateSwitchTap+1,w
  7287  0CDD  3FC0               	movwi [0]fsr1
  7288  0CDE  083A               	movf	??_updateSwitchTap+2,w
  7289  0CDF  3FC1               	movwi [1]fsr1
  7290  0CE0  083B               	movf	??_updateSwitchTap+3,w
  7291  0CE1  3FC2               	movwi [2]fsr1
  7292  0CE2  083C               	movf	??_updateSwitchTap+4,w
  7293  0CE3  3FC3               	movwi [3]fsr1
  7294                           
  7295                           ;SwitchTap.c: 127: tap_total += tap_history[iCnt];
  7296  0CE4  0840               	movf	updateSwitchTap@iCnt,w
  7297  0CE5  00B8               	movwf	??_updateSwitchTap
  7298  0CE6  3001               	movlw	1
  7299  0CE7                     u6355:	
  7300  0CE7  35B8               	lslf	??_updateSwitchTap,f
  7301  0CE8  3EFF               	addlw	-1
  7302  0CE9  1D03               	skipz
  7303  0CEA  2CE7               	goto	u6355
  7304  0CEB  3538               	lslf	??_updateSwitchTap,w
  7305  0CEC  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7306  0CED  0086               	movwf	6
  7307  0CEE  3001               	movlw	1	; select bank3/4
  7308  0CEF  0087               	movwf	7
  7309  0CF0  3F40               	moviw [0]fsr1
  7310  0CF1  0023               	movlb	3	; select bank3
  7311  0CF2  07E0               	addwf	_tap_total^(0+384),f
  7312  0CF3  3F41               	moviw [1]fsr1
  7313  0CF4  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7314  0CF5  3F42               	moviw [2]fsr1
  7315  0CF6  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7316  0CF7  3F43               	moviw [3]fsr1
  7317  0CF8  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7318  0CF9  3001               	movlw	1
  7319  0CFA  0020               	movlb	0	; select bank0
  7320  0CFB  00B8               	movwf	??_updateSwitchTap
  7321  0CFC  0838               	movf	??_updateSwitchTap,w
  7322  0CFD  07C0               	addwf	updateSwitchTap@iCnt,f
  7323  0CFE  2CB5               	goto	l5612
  7324  0CFF                     l5614:	
  7325                           
  7326                           ;SwitchTap.c: 128: }
  7327                           ;SwitchTap.c: 129: tap_history[num_taps] = tap_timer;
  7328  0CFF  0021               	movlb	1	; select bank1
  7329  0D00  085C               	movf	_num_taps^(0+128),w
  7330  0D01  0020               	movlb	0	; select bank0
  7331  0D02  00B8               	movwf	??_updateSwitchTap
  7332  0D03  3001               	movlw	1
  7333  0D04                     u6375:	
  7334  0D04  35B8               	lslf	??_updateSwitchTap,f
  7335  0D05  3EFF               	addlw	-1
  7336  0D06  1D03               	skipz
  7337  0D07  2D04               	goto	u6375
  7338  0D08  3538               	lslf	??_updateSwitchTap,w
  7339  0D09  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7340  0D0A  0086               	movwf	6
  7341  0D0B  3001               	movlw	1	; select bank3/4
  7342  0D0C  0087               	movwf	7
  7343  0D0D  0021               	movlb	1	; select bank1
  7344  0D0E  0861               	movf	_tap_timer^(0+128),w	;volatile
  7345  0D0F  3FC0               	movwi [0]fsr1
  7346  0D10  0862               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7347  0D11  3FC1               	movwi [1]fsr1
  7348  0D12  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7349  0D13  3FC2               	movwi [2]fsr1
  7350  0D14  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7351  0D15  3FC3               	movwi [3]fsr1
  7352                           
  7353                           ;SwitchTap.c: 130: tap_total += tap_timer;
  7354  0D16  0861               	movf	_tap_timer^(0+128),w	;volatile
  7355  0D17  0023               	movlb	3	; select bank3
  7356  0D18  07E0               	addwf	_tap_total^(0+384),f
  7357  0D19  0021               	movlb	1	; select bank1
  7358  0D1A  0862               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7359  0D1B  0023               	movlb	3	; select bank3
  7360  0D1C  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7361  0D1D  0021               	movlb	1	; select bank1
  7362  0D1E  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7363  0D1F  0023               	movlb	3	; select bank3
  7364  0D20  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7365  0D21  0021               	movlb	1	; select bank1
  7366  0D22  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7367  0D23  0023               	movlb	3	; select bank3
  7368  0D24  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7369  0D25                     l5618:	
  7370                           
  7371                           ;SwitchTap.c: 131: }
  7372                           ;SwitchTap.c: 133: baseline_delay_time = tap_total / tapCntDivisor;
  7373  0D25  0020               	movlb	0	; select bank0
  7374  0D26  083E               	movf	updateSwitchTap@tapCntDivisor,w
  7375  0D27  00A8               	movwf	___aldiv@divisor
  7376  0D28  083F               	movf	updateSwitchTap@tapCntDivisor+1,w
  7377  0D29  00A9               	movwf	___aldiv@divisor+1
  7378  0D2A  0D89               	rlf	9,f
  7379  0D2B  3B89               	subwfb	9,f
  7380  0D2C  0989               	comf	9,f
  7381  0D2D  00AA               	movwf	___aldiv@divisor+2
  7382  0D2E  00AB               	movwf	___aldiv@divisor+3
  7383  0D2F  0023               	movlb	3	; select bank3
  7384  0D30  0863               	movf	(_tap_total+3)^(0+384),w
  7385  0D31  0020               	movlb	0	; select bank0
  7386  0D32  00AF               	movwf	___aldiv@dividend+3
  7387  0D33  0023               	movlb	3	; select bank3
  7388  0D34  0862               	movf	(_tap_total+2)^(0+384),w
  7389  0D35  0020               	movlb	0	; select bank0
  7390  0D36  00AE               	movwf	___aldiv@dividend+2
  7391  0D37  0023               	movlb	3	; select bank3
  7392  0D38  0861               	movf	(_tap_total+1)^(0+384),w
  7393  0D39  0020               	movlb	0	; select bank0
  7394  0D3A  00AD               	movwf	___aldiv@dividend+1
  7395  0D3B  0023               	movlb	3	; select bank3
  7396  0D3C  0860               	movf	_tap_total^(0+384),w
  7397  0D3D  0020               	movlb	0	; select bank0
  7398  0D3E  00AC               	movwf	___aldiv@dividend
  7399  0D3F  3195  25C3         	fcall	___aldiv
  7400  0D41  0020               	movlb	0	; select bank0
  7401  0D42  082B               	movf	?___aldiv+3,w
  7402  0D43  0021               	movlb	1	; select bank1
  7403  0D44  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7404  0D45  0020               	movlb	0	; select bank0
  7405  0D46  082A               	movf	?___aldiv+2,w
  7406  0D47  0021               	movlb	1	; select bank1
  7407  0D48  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7408  0D49  0020               	movlb	0	; select bank0
  7409  0D4A  0829               	movf	?___aldiv+1,w
  7410  0D4B  0021               	movlb	1	; select bank1
  7411  0D4C  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7412  0D4D  0020               	movlb	0	; select bank0
  7413  0D4E  0828               	movf	?___aldiv,w
  7414  0D4F  0021               	movlb	1	; select bank1
  7415  0D50  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  7416                           
  7417                           ;SwitchTap.c: 134: delay_time_changed = 1;
  7418  0D51  3001               	movlw	1
  7419  0D52  0022               	movlb	2	; select bank2
  7420  0D53  00DC               	movwf	_delay_time_changed^(0+256)
  7421  0D54  3000               	movlw	0
  7422  0D55  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  7423                           
  7424                           ;SwitchTap.c: 135: tap_timer = 0;
  7425  0D56  3000               	movlw	0
  7426  0D57  0021               	movlb	1	; select bank1
  7427  0D58  00E4               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7428  0D59  3000               	movlw	0
  7429  0D5A  00E3               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7430  0D5B  3000               	movlw	0
  7431  0D5C  00E2               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7432  0D5D  3000               	movlw	0
  7433  0D5E  00E1               	movwf	_tap_timer^(0+128)	;volatile
  7434                           
  7435                           ;SwitchTap.c: 137: tap_iteration++;
  7436  0D5F  3001               	movlw	1
  7437  0D60  0022               	movlb	2	; select bank2
  7438  0D61  07E8               	addwf	_tap_iteration^(0+256),f
  7439  0D62  3000               	movlw	0
  7440  0D63  3DE9               	addwfc	(_tap_iteration+1)^(0+256),f
  7441                           
  7442                           ;SwitchTap.c: 138: }
  7443                           ;SwitchTap.c: 140: } else if (switchTap_pressed >= 25) {
  7444  0D64  0008               	return
  7445  0D65                     l5626:	
  7446  0D65  3019               	movlw	25
  7447  0D66  0021               	movlb	1	; select bank1
  7448  0D67  026D               	subwf	_switchTap_pressed^(0+128),w
  7449  0D68  1C03               	skipc
  7450  0D69  0008               	return
  7451                           
  7452                           ;SwitchTap.c: 141: switchTap_down = 0;
  7453  0D6A  0022               	movlb	2	; select bank2
  7454  0D6B  01D8               	clrf	_switchTap_down^(0+256)
  7455                           
  7456                           ;SwitchTap.c: 142: switchTap_state = 0;
  7457  0D6C  01EC               	clrf	_switchTap_state^(0+256)
  7458                           
  7459                           ;SwitchTap.c: 148: setLongTapState(0);
  7460  0D6D  3000               	movlw	0
  7461  0D6E  0020               	movlb	0	; select bank0
  7462  0D6F  00A2               	movwf	setLongTapState@f_state
  7463  0D70  00A3               	movwf	setLongTapState@f_state+1
  7464  0D71  319E  2688         	fcall	_setLongTapState
  7465                           
  7466                           ;SwitchTap.c: 150: longTap_timer = 0;
  7467  0D73  0022               	movlb	2	; select bank2
  7468  0D74  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7469  0D75  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7470                           
  7471                           ;SwitchTap.c: 151: longTap_start = 0;
  7472  0D76  01D3               	clrf	_longTap_start^(0+256)
  7473                           
  7474                           ;SwitchTap.c: 153: switchTap_pressed = 25;
  7475  0D77  3019               	movlw	25
  7476  0D78  0020               	movlb	0	; select bank0
  7477  0D79  00B8               	movwf	??_updateSwitchTap
  7478  0D7A  0838               	movf	??_updateSwitchTap,w
  7479  0D7B  0021               	movlb	1	; select bank1
  7480  0D7C  00ED               	movwf	_switchTap_pressed^(0+128)
  7481  0D7D  0008               	return
  7482  0D7E                     __end_of_updateSwitchTap:	
  7483                           
  7484                           	psect	text3
  7485  1E88                     __ptext3:	
  7486 ;; *************** function _setLongTapState *****************
  7487 ;; Defined at:
  7488 ;;		line 168 in file "SwitchTap.c"
  7489 ;; Parameters:    Size  Location     Type
  7490 ;;  f_state         2    2[BANK0 ] int 
  7491 ;; Auto vars:     Size  Location     Type
  7492 ;;		None
  7493 ;; Return value:  Size  Location     Type
  7494 ;;                  1    wreg      void 
  7495 ;; Registers used:
  7496 ;;		wreg, status,0
  7497 ;; Tracked objects:
  7498 ;;		On entry : 0/0
  7499 ;;		On exit  : 0/0
  7500 ;;		Unchanged: 0/0
  7501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7502 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7504 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7505 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7506 ;;Total ram usage:        4 bytes
  7507 ;; Hardware stack levels used:    1
  7508 ;; Hardware stack levels required when called:    2
  7509 ;; This function calls:
  7510 ;;		Nothing
  7511 ;; This function is called by:
  7512 ;;		_updateSwitchTap
  7513 ;; This function uses a non-reentrant model
  7514 ;;
  7515                           
  7516                           
  7517                           ;psect for function _setLongTapState
  7518  1E88                     _setLongTapState:	
  7519                           
  7520                           ;SwitchTap.c: 169: if (longTap_state == f_state) {return;}
  7521                           
  7522                           ;incstack = 0
  7523                           ; Regs used in _setLongTapState: [wreg+status,0]
  7524  1E88  0020               	movlb	0	; select bank0
  7525  1E89  086A               	movf	_longTap_state,w	;volatile
  7526  1E8A  00A4               	movwf	??_setLongTapState
  7527  1E8B  01A5               	clrf	??_setLongTapState+1
  7528  1E8C  0823               	movf	setLongTapState@f_state+1,w
  7529  1E8D  0625               	xorwf	??_setLongTapState+1,w
  7530  1E8E  1D03               	skipz
  7531  1E8F  2E92               	goto	u5035
  7532  1E90  0822               	movf	setLongTapState@f_state,w
  7533  1E91  0624               	xorwf	??_setLongTapState,w
  7534  1E92                     u5035:	
  7535  1E92  1903               	btfsc	3,2
  7536  1E93  0008               	return
  7537                           
  7538                           ;SwitchTap.c: 170: longTap_state = f_state;
  7539  1E94  0822               	movf	setLongTapState@f_state,w
  7540  1E95  00A4               	movwf	??_setLongTapState
  7541  1E96  0824               	movf	??_setLongTapState,w
  7542  1E97  00EA               	movwf	_longTap_state	;volatile
  7543                           
  7544                           ;SwitchTap.c: 171: LATBbits.LATB5 = f_state;
  7545  1E98  0C22               	rrf	setLongTapState@f_state,w
  7546  1E99  0022               	movlb	2	; select bank2
  7547  1E9A  1C03               	skipc
  7548  1E9B  128D               	bcf	13,5	;volatile
  7549  1E9C  1803               	skipnc
  7550  1E9D  168D               	bsf	13,5	;volatile
  7551  1E9E  0008               	return
  7552  1E9F                     __end_of_setLongTapState:	
  7553                           
  7554                           	psect	text4
  7555  09BE                     __ptext4:	
  7556 ;; *************** function _updateSwitchBypass *****************
  7557 ;; Defined at:
  7558 ;;		line 34 in file "SwitchBypass.c"
  7559 ;; Parameters:    Size  Location     Type
  7560 ;;		None
  7561 ;; Auto vars:     Size  Location     Type
  7562 ;;		None
  7563 ;; Return value:  Size  Location     Type
  7564 ;;                  1    wreg      void 
  7565 ;; Registers used:
  7566 ;;		wreg, status,2, status,0, pclath, cstack
  7567 ;; Tracked objects:
  7568 ;;		On entry : 0/0
  7569 ;;		On exit  : 0/0
  7570 ;;		Unchanged: 0/0
  7571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7573 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7574 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7575 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7576 ;;Total ram usage:        2 bytes
  7577 ;; Hardware stack levels used:    1
  7578 ;; Hardware stack levels required when called:    5
  7579 ;; This function calls:
  7580 ;;		_setDoublePressState
  7581 ;;		_setFeedbackState
  7582 ;;		_setSwitchBypassState
  7583 ;; This function is called by:
  7584 ;;		_main
  7585 ;; This function uses a non-reentrant model
  7586 ;;
  7587                           
  7588                           
  7589                           ;psect for function _updateSwitchBypass
  7590  09BE                     _updateSwitchBypass:	
  7591                           
  7592                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7593                           
  7594                           ;incstack = 0
  7595                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7596  09BE  0020               	movlb	0	; select bank0
  7597  09BF  1890               	btfsc	16,1	;volatile
  7598  09C0  29D4               	goto	l5454
  7599                           
  7600                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7601  09C1  0022               	movlb	2	; select bank2
  7602  09C2  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7603  09C3  3A80               	xorlw	128
  7604  09C4  0020               	movlb	0	; select bank0
  7605  09C5  00B8               	movwf	??_updateSwitchBypass
  7606  09C6  3080               	movlw	128
  7607  09C7  0238               	subwf	??_updateSwitchBypass,w
  7608  09C8  1D03               	skipz
  7609  09C9  29CD               	goto	u5955
  7610  09CA  3001               	movlw	1
  7611  09CB  0022               	movlb	2	; select bank2
  7612  09CC  024C               	subwf	_switchBypass_pressed^(0+256),w
  7613  09CD                     u5955:	
  7614  09CD  1C03               	skipc
  7615  09CE  29E7               	goto	l5458
  7616                           
  7617                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7618  09CF  30FF               	movlw	255
  7619  09D0  0022               	movlb	2	; select bank2
  7620  09D1  07CC               	addwf	_switchBypass_pressed^(0+256),f
  7621  09D2  30FF               	movlw	255
  7622  09D3  29E6               	goto	L6
  7623  09D4                     l5454:	
  7624                           ;SwitchBypass.c: 44: }
  7625                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7626                           
  7627  09D4  0022               	movlb	2	; select bank2
  7628  09D5  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7629  09D6  3A80               	xorlw	128
  7630  09D7  0020               	movlb	0	; select bank0
  7631  09D8  00B8               	movwf	??_updateSwitchBypass
  7632  09D9  3080               	movlw	128
  7633  09DA  0238               	subwf	??_updateSwitchBypass,w
  7634  09DB  1D03               	skipz
  7635  09DC  29E0               	goto	u5965
  7636  09DD  3019               	movlw	25
  7637  09DE  0022               	movlb	2	; select bank2
  7638  09DF  024C               	subwf	_switchBypass_pressed^(0+256),w
  7639  09E0                     u5965:	
  7640  09E0  1803               	skipnc
  7641  09E1  29E7               	goto	l5458
  7642                           
  7643                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7644  09E2  3001               	movlw	1
  7645  09E3  0022               	movlb	2	; select bank2
  7646  09E4  07CC               	addwf	_switchBypass_pressed^(0+256),f
  7647  09E5  3000               	movlw	0
  7648  09E6                     L6:	
  7649  09E6  3DCD               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7650  09E7                     l5458:	
  7651                           
  7652                           ;SwitchBypass.c: 47: }
  7653                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7654  09E7  0022               	movlb	2	; select bank2
  7655  09E8  084C               	movf	_switchBypass_pressed^(0+256),w
  7656  09E9  044D               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7657  09EA  1D03               	btfss	3,2
  7658  09EB  2A45               	goto	l5498
  7659                           
  7660                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7661  09EC  0021               	movlb	1	; select bank1
  7662  09ED  086B               	movf	_feedback_start^(0+128),w
  7663  09EE  1D03               	btfss	3,2
  7664  09EF  29F5               	goto	l5466
  7665                           
  7666                           ;SwitchBypass.c: 57: feedback_start = 1;
  7667  09F0  01EB               	clrf	_feedback_start^(0+128)
  7668  09F1  0AEB               	incf	_feedback_start^(0+128),f
  7669                           
  7670                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7671  09F2  0022               	movlb	2	; select bank2
  7672  09F3  01B8               	clrf	_feedback_timer^(0+256)	;volatile
  7673  09F4  01B9               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7674  09F5                     l5466:	
  7675                           
  7676                           ;SwitchBypass.c: 59: }
  7677                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7678  09F5  0021               	movlb	1	; select bank1
  7679  09F6  0858               	movf	(_long_press_limit+1)^(0+128),w
  7680  09F7  0022               	movlb	2	; select bank2
  7681  09F8  0239               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7682  09F9  1D03               	skipz
  7683  09FA  29FF               	goto	u5995
  7684  09FB  0021               	movlb	1	; select bank1
  7685  09FC  0857               	movf	_long_press_limit^(0+128),w
  7686  09FD  0022               	movlb	2	; select bank2
  7687  09FE  0238               	subwf	_feedback_timer^(0+256),w	;volatile
  7688  09FF                     u5995:	
  7689  09FF  1C03               	skipc
  7690  0A00  2A1E               	goto	l5480
  7691  0A01  0020               	movlb	0	; select bank0
  7692  0A02  0869               	movf	_feedback_state,w	;volatile
  7693  0A03  1D03               	btfss	3,2
  7694  0A04  2A1E               	goto	l5480
  7695  0A05  086B               	movf	_doubleTap_state,w	;volatile
  7696  0A06  1D03               	btfss	3,2
  7697  0A07  2A1E               	goto	l5480
  7698                           
  7699                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7700  0A08  0022               	movlb	2	; select bank2
  7701  0A09  110D               	bcf	13,2	;volatile
  7702                           
  7703                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7704  0A0A  0353               	decf	_longTap_start^(0+256),w
  7705  0A0B  1903               	btfsc	3,2
  7706  0A0C  2A16               	goto	l5478
  7707                           
  7708                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7709  0A0D  3001               	movlw	1
  7710  0A0E  0020               	movlb	0	; select bank0
  7711  0A0F  00A2               	movwf	setFeedbackState@f_state
  7712  0A10  3000               	movlw	0
  7713  0A11  00A3               	movwf	setFeedbackState@f_state+1
  7714  0A12  319E  2671  3189   	fcall	_setFeedbackState
  7715                           
  7716                           ;SwitchBypass.c: 67: } else {
  7717  0A15  2A1E               	goto	l5480
  7718  0A16                     l5478:	
  7719                           
  7720                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7721  0A16  3001               	movlw	1
  7722  0A17  0020               	movlb	0	; select bank0
  7723  0A18  00B4               	movwf	setDoublePressState@f_state
  7724  0A19  3000               	movlw	0
  7725  0A1A  00B5               	movwf	setDoublePressState@f_state+1
  7726  0A1B  319F  2741  3189   	fcall	_setDoublePressState
  7727  0A1E                     l5480:	
  7728                           
  7729                           ;SwitchBypass.c: 69: }
  7730                           ;SwitchBypass.c: 70: }
  7731                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7732  0A1E  0020               	movlb	0	; select bank0
  7733  0A1F  086B               	movf	_doubleTap_state,w	;volatile
  7734  0A20  1D03               	btfss	3,2
  7735  0A21  2A41               	goto	l1077
  7736  0A22  0869               	movf	_feedback_state,w	;volatile
  7737  0A23  1D03               	btfss	3,2
  7738  0A24  2A41               	goto	l1077
  7739                           
  7740                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7741  0A25  037D               	decf	_switchBypass_state,w
  7742  0A26  1D03               	btfss	3,2
  7743  0A27  2A34               	goto	l5492
  7744                           
  7745                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7746  0A28  0022               	movlb	2	; select bank2
  7747  0A29  0366               	decf	_switchBypass_up^(0+256),w
  7748  0A2A  0467               	iorwf	(_switchBypass_up+1)^(0+256),w
  7749  0A2B  1D03               	btfss	3,2
  7750  0A2C  2A41               	goto	l1077
  7751                           
  7752                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7753  0A2D  01EB               	clrf	_currentBypassState^(0+256)
  7754  0A2E  0AEB               	incf	_currentBypassState^(0+256),f
  7755                           
  7756                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7757  0A2F  3001               	movlw	1
  7758  0A30  00CE               	movwf	_switchBypass_toggle^(0+256)
  7759  0A31  3000               	movlw	0
  7760  0A32  00CF               	movwf	(_switchBypass_toggle^(0+256)+1)
  7761                           
  7762                           ;SwitchBypass.c: 78: }
  7763                           ;SwitchBypass.c: 93: } else {
  7764  0A33  2A41               	goto	l1077
  7765  0A34                     l5492:	
  7766                           
  7767                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7768  0A34  0022               	movlb	2	; select bank2
  7769  0A35  0351               	decf	_bypass_turning_on^(0+256),w
  7770  0A36  1903               	btfsc	3,2
  7771  0A37  2A41               	goto	l1077
  7772                           
  7773                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7774  0A38  01EB               	clrf	_currentBypassState^(0+256)
  7775                           
  7776                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7777  0A39  01D1               	clrf	_bypass_turning_on^(0+256)
  7778  0A3A  0AD1               	incf	_bypass_turning_on^(0+256),f
  7779                           
  7780                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7781  0A3B  01CE               	clrf	_switchBypass_toggle^(0+256)
  7782  0A3C  01CF               	clrf	(_switchBypass_toggle+1)^(0+256)
  7783                           
  7784                           ;SwitchBypass.c: 101: feedback_state = 0;
  7785  0A3D  0020               	movlb	0	; select bank0
  7786  0A3E  01E9               	clrf	_feedback_state	;volatile
  7787                           
  7788                           ;SwitchBypass.c: 102: feedback_start = 0;
  7789  0A3F  0021               	movlb	1	; select bank1
  7790  0A40  01EB               	clrf	_feedback_start^(0+128)
  7791  0A41                     l1077:	
  7792                           
  7793                           ;SwitchBypass.c: 103: }
  7794                           ;SwitchBypass.c: 104: }
  7795                           ;SwitchBypass.c: 106: }
  7796                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7797  0A41  0022               	movlb	2	; select bank2
  7798  0A42  01E6               	clrf	_switchBypass_up^(0+256)
  7799  0A43  01E7               	clrf	(_switchBypass_up+1)^(0+256)
  7800                           
  7801                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7802  0A44  0008               	return
  7803  0A45                     l5498:	
  7804  0A45  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7805  0A46  3A80               	xorlw	128
  7806  0A47  0020               	movlb	0	; select bank0
  7807  0A48  00B8               	movwf	??_updateSwitchBypass
  7808  0A49  3080               	movlw	128
  7809  0A4A  0238               	subwf	??_updateSwitchBypass,w
  7810  0A4B  1D03               	skipz
  7811  0A4C  2A50               	goto	u6085
  7812  0A4D  3019               	movlw	25
  7813  0A4E  0022               	movlb	2	; select bank2
  7814  0A4F  024C               	subwf	_switchBypass_pressed^(0+256),w
  7815  0A50                     u6085:	
  7816  0A50  1C03               	skipc
  7817  0A51  0008               	return
  7818                           
  7819                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7820  0A52  0020               	movlb	0	; select bank0
  7821  0A53  036B               	decf	_doubleTap_state,w	;volatile
  7822  0A54  1D03               	btfss	3,2
  7823  0A55  2A5F               	goto	l5504
  7824                           
  7825                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7826  0A56  0022               	movlb	2	; select bank2
  7827  0A57  086B               	movf	_currentBypassState^(0+256),w
  7828  0A58  0020               	movlb	0	; select bank0
  7829  0A59  00B8               	movwf	??_updateSwitchBypass
  7830  0A5A  01B9               	clrf	??_updateSwitchBypass+1
  7831  0A5B  0838               	movf	??_updateSwitchBypass,w
  7832  0A5C  00B4               	movwf	setSwitchBypassState@f_state
  7833  0A5D  0839               	movf	??_updateSwitchBypass+1,w
  7834  0A5E  2A7A               	goto	L7
  7835  0A5F                     l5504:	
  7836                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7837                           
  7838  0A5F  0022               	movlb	2	; select bank2
  7839  0A60  0351               	decf	_bypass_turning_on^(0+256),w
  7840  0A61  1903               	btfsc	3,2
  7841  0A62  2A67               	goto	l5508
  7842  0A63  0020               	movlb	0	; select bank0
  7843  0A64  0369               	decf	_feedback_state,w	;volatile
  7844  0A65  1D03               	btfss	3,2
  7845  0A66  2A6C               	goto	l5510
  7846  0A67                     l5508:	
  7847                           
  7848                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7849  0A67  3001               	movlw	1
  7850  0A68  0020               	movlb	0	; select bank0
  7851  0A69  00B4               	movwf	setSwitchBypassState@f_state
  7852  0A6A  3000               	movlw	0
  7853  0A6B  2A7A               	goto	L7
  7854  0A6C                     l5510:	
  7855                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7856                           
  7857  0A6C  0022               	movlb	2	; select bank2
  7858  0A6D  034E               	decf	_switchBypass_toggle^(0+256),w
  7859  0A6E  044F               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  7860  0A6F  1D03               	btfss	3,2
  7861  0A70  2A7E               	goto	l5518
  7862  0A71  0020               	movlb	0	; select bank0
  7863  0A72  0869               	movf	_feedback_state,w	;volatile
  7864  0A73  1D03               	btfss	3,2
  7865  0A74  2A7E               	goto	l5518
  7866  0A75  086B               	movf	_doubleTap_state,w	;volatile
  7867  0A76  1D03               	btfss	3,2
  7868  0A77  2A7E               	goto	l5518
  7869                           
  7870                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7871  0A78  3000               	movlw	0
  7872  0A79  00B4               	movwf	setSwitchBypassState@f_state
  7873  0A7A                     L7:	
  7874  0A7A  00B5               	movwf	setSwitchBypassState@f_state+1
  7875  0A7B  3192  2238  3189   	fcall	_setSwitchBypassState
  7876  0A7E                     l5518:	
  7877                           
  7878                           ;SwitchBypass.c: 115: }
  7879                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7880  0A7E  0C7D               	rrf	_switchBypass_state,w
  7881  0A7F  0022               	movlb	2	; select bank2
  7882  0A80  1C03               	skipc
  7883  0A81  110D               	bcf	13,2	;volatile
  7884  0A82  1803               	skipnc
  7885  0A83  150D               	bsf	13,2	;volatile
  7886                           
  7887                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7888  0A84  3000               	movlw	0
  7889  0A85  0020               	movlb	0	; select bank0
  7890  0A86  00A2               	movwf	setFeedbackState@f_state
  7891  0A87  00A3               	movwf	setFeedbackState@f_state+1
  7892  0A88  319E  2671  3189   	fcall	_setFeedbackState
  7893                           
  7894                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7895  0A8B  3000               	movlw	0
  7896  0A8C  0020               	movlb	0	; select bank0
  7897  0A8D  00B4               	movwf	setDoublePressState@f_state
  7898  0A8E  00B5               	movwf	setDoublePressState@f_state+1
  7899  0A8F  319F  2741         	fcall	_setDoublePressState
  7900                           
  7901                           ;SwitchBypass.c: 122: feedback_start = 0;
  7902  0A91  0021               	movlb	1	; select bank1
  7903  0A92  01EB               	clrf	_feedback_start^(0+128)
  7904                           
  7905                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7906  0A93  0022               	movlb	2	; select bank2
  7907  0A94  01D1               	clrf	_bypass_turning_on^(0+256)
  7908                           
  7909                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7910  0A95  01CE               	clrf	_switchBypass_toggle^(0+256)
  7911  0A96  01CF               	clrf	(_switchBypass_toggle+1)^(0+256)
  7912                           
  7913                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7914  0A97  3001               	movlw	1
  7915  0A98  00E6               	movwf	_switchBypass_up^(0+256)
  7916  0A99  3000               	movlw	0
  7917  0A9A  00E7               	movwf	(_switchBypass_up^(0+256)+1)
  7918                           
  7919                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7920  0A9B  3019               	movlw	25
  7921  0A9C  00CC               	movwf	_switchBypass_pressed^(0+256)
  7922  0A9D  3000               	movlw	0
  7923  0A9E  00CD               	movwf	(_switchBypass_pressed^(0+256)+1)
  7924  0A9F  0008               	return
  7925  0AA0                     __end_of_updateSwitchBypass:	
  7926                           
  7927                           	psect	text5
  7928  1E71                     __ptext5:	
  7929 ;; *************** function _setFeedbackState *****************
  7930 ;; Defined at:
  7931 ;;		line 151 in file "SwitchBypass.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  f_state         2    2[BANK0 ] int 
  7934 ;; Auto vars:     Size  Location     Type
  7935 ;;		None
  7936 ;; Return value:  Size  Location     Type
  7937 ;;                  1    wreg      void 
  7938 ;; Registers used:
  7939 ;;		wreg, status,0
  7940 ;; Tracked objects:
  7941 ;;		On entry : 0/0
  7942 ;;		On exit  : 0/0
  7943 ;;		Unchanged: 0/0
  7944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7947 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7948 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7949 ;;Total ram usage:        4 bytes
  7950 ;; Hardware stack levels used:    1
  7951 ;; Hardware stack levels required when called:    2
  7952 ;; This function calls:
  7953 ;;		Nothing
  7954 ;; This function is called by:
  7955 ;;		_updateSwitchBypass
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _setFeedbackState
  7961  1E71                     _setFeedbackState:	
  7962                           
  7963                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7964                           
  7965                           ;incstack = 0
  7966                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7967  1E71  0020               	movlb	0	; select bank0
  7968  1E72  0869               	movf	_feedback_state,w	;volatile
  7969  1E73  00A4               	movwf	??_setFeedbackState
  7970  1E74  01A5               	clrf	??_setFeedbackState+1
  7971  1E75  0823               	movf	setFeedbackState@f_state+1,w
  7972  1E76  0625               	xorwf	??_setFeedbackState+1,w
  7973  1E77  1D03               	skipz
  7974  1E78  2E7B               	goto	u5005
  7975  1E79  0822               	movf	setFeedbackState@f_state,w
  7976  1E7A  0624               	xorwf	??_setFeedbackState,w
  7977  1E7B                     u5005:	
  7978  1E7B  1903               	btfsc	3,2
  7979  1E7C  0008               	return
  7980                           
  7981                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7982  1E7D  0822               	movf	setFeedbackState@f_state,w
  7983  1E7E  00A4               	movwf	??_setFeedbackState
  7984  1E7F  0824               	movf	??_setFeedbackState,w
  7985  1E80  00E9               	movwf	_feedback_state	;volatile
  7986                           
  7987                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7988  1E81  0C22               	rrf	setFeedbackState@f_state,w
  7989  1E82  0022               	movlb	2	; select bank2
  7990  1E83  1C03               	skipc
  7991  1E84  118D               	bcf	13,3	;volatile
  7992  1E85  1803               	skipnc
  7993  1E86  158D               	bsf	13,3	;volatile
  7994  1E87  0008               	return
  7995  1E88                     __end_of_setFeedbackState:	
  7996                           
  7997                           	psect	text6
  7998  1F41                     __ptext6:	
  7999 ;; *************** function _setDoublePressState *****************
  8000 ;; Defined at:
  8001 ;;		line 20 in file "preset_programming.c"
  8002 ;; Parameters:    Size  Location     Type
  8003 ;;  f_state         2   20[BANK0 ] int 
  8004 ;; Auto vars:     Size  Location     Type
  8005 ;;		None
  8006 ;; Return value:  Size  Location     Type
  8007 ;;                  1    wreg      void 
  8008 ;; Registers used:
  8009 ;;		wreg, status,2, status,0, pclath, cstack
  8010 ;; Tracked objects:
  8011 ;;		On entry : 0/0
  8012 ;;		On exit  : 0/0
  8013 ;;		Unchanged: 0/0
  8014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8019 ;;Total ram usage:        4 bytes
  8020 ;; Hardware stack levels used:    1
  8021 ;; Hardware stack levels required when called:    4
  8022 ;; This function calls:
  8023 ;;		_wait_ms
  8024 ;; This function is called by:
  8025 ;;		_updateSwitchBypass
  8026 ;;		_updateSwitchTap
  8027 ;; This function uses a non-reentrant model
  8028 ;;
  8029                           
  8030                           
  8031                           ;psect for function _setDoublePressState
  8032  1F41                     _setDoublePressState:	
  8033                           
  8034                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  8035                           
  8036                           ;incstack = 0
  8037                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  8038  1F41  0020               	movlb	0	; select bank0
  8039  1F42  086B               	movf	_doubleTap_state,w	;volatile
  8040  1F43  00B6               	movwf	??_setDoublePressState
  8041  1F44  01B7               	clrf	??_setDoublePressState+1
  8042  1F45  0835               	movf	setDoublePressState@f_state+1,w
  8043  1F46  0637               	xorwf	??_setDoublePressState+1,w
  8044  1F47  1D03               	skipz
  8045  1F48  2F4B               	goto	u5015
  8046  1F49  0834               	movf	setDoublePressState@f_state,w
  8047  1F4A  0636               	xorwf	??_setDoublePressState,w
  8048  1F4B                     u5015:	
  8049  1F4B  1903               	btfsc	3,2
  8050  1F4C  0008               	return
  8051                           
  8052                           ;preset_programming.c: 22: doubleTap_state = f_state;
  8053  1F4D  0834               	movf	setDoublePressState@f_state,w
  8054  1F4E  00B6               	movwf	??_setDoublePressState
  8055  1F4F  0836               	movf	??_setDoublePressState,w
  8056  1F50  00EB               	movwf	_doubleTap_state	;volatile
  8057                           
  8058                           ;preset_programming.c: 23: if (f_state == 1) {
  8059  1F51  0334               	decf	setDoublePressState@f_state,w
  8060  1F52  0435               	iorwf	setDoublePressState@f_state+1,w
  8061  1F53  1D03               	btfss	3,2
  8062  1F54  2F58               	goto	l5016
  8063                           
  8064                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  8065  1F55  0022               	movlb	2	; select bank2
  8066  1F56  120D               	bcf	13,4	;volatile
  8067                           
  8068                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  8069  1F57  110D               	bcf	13,2	;volatile
  8070  1F58                     l5016:	
  8071                           
  8072                           ;preset_programming.c: 26: }
  8073                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  8074  1F58  0020               	movlb	0	; select bank0
  8075  1F59  0C34               	rrf	setDoublePressState@f_state,w
  8076  1F5A  0022               	movlb	2	; select bank2
  8077  1F5B  1C03               	skipc
  8078  1F5C  108D               	bcf	13,1	;volatile
  8079  1F5D  1803               	skipnc
  8080  1F5E  148D               	bsf	13,1	;volatile
  8081                           
  8082                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  8083  1F5F  0020               	movlb	0	; select bank0
  8084  1F60  0C34               	rrf	setDoublePressState@f_state,w
  8085  1F61  0022               	movlb	2	; select bank2
  8086  1F62  1C03               	skipc
  8087  1F63  100D               	bcf	13,0	;volatile
  8088  1F64  1803               	skipnc
  8089  1F65  140D               	bsf	13,0	;volatile
  8090                           
  8091                           ;preset_programming.c: 31: wait_ms(20);
  8092  1F66  3014               	movlw	20
  8093  1F67  0020               	movlb	0	; select bank0
  8094  1F68  00AE               	movwf	wait_ms@timeSec
  8095  1F69  3000               	movlw	0
  8096  1F6A  00AF               	movwf	wait_ms@timeSec+1
  8097  1F6B  319F  27CE         	fcall	_wait_ms
  8098  1F6D  0008               	return
  8099  1F6E                     __end_of_setDoublePressState:	
  8100                           
  8101                           	psect	text7
  8102  1F16                     __ptext7:	
  8103 ;; *************** function _showBootSequence *****************
  8104 ;; Defined at:
  8105 ;;		line 86 in file "LEDs.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;		None
  8108 ;; Auto vars:     Size  Location     Type
  8109 ;;		None
  8110 ;; Return value:  Size  Location     Type
  8111 ;;                  1    wreg      void 
  8112 ;; Registers used:
  8113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8114 ;; Tracked objects:
  8115 ;;		On entry : 0/0
  8116 ;;		On exit  : 0/0
  8117 ;;		Unchanged: 0/0
  8118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8123 ;;Total ram usage:        1 bytes
  8124 ;; Hardware stack levels used:    1
  8125 ;; Hardware stack levels required when called:    5
  8126 ;; This function calls:
  8127 ;;		_getCurrentLEDState
  8128 ;;		_restoreLEDState
  8129 ;;		_solidring_tactiles
  8130 ;;		_star_tactiles
  8131 ;; This function is called by:
  8132 ;;		_main
  8133 ;; This function uses a non-reentrant model
  8134 ;;
  8135                           
  8136                           
  8137                           ;psect for function _showBootSequence
  8138  1F16                     _showBootSequence:	
  8139                           
  8140                           ;LEDs.c: 87: getCurrentLEDState();
  8141                           
  8142                           ;incstack = 0
  8143                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8144  1F16  319E  2622  319F   	fcall	_getCurrentLEDState
  8145                           
  8146                           ;LEDs.c: 88: suspend_blink = 1;
  8147  1F19  3001               	movlw	1
  8148  1F1A  0020               	movlb	0	; select bank0
  8149  1F1B  00BB               	movwf	??_showBootSequence
  8150  1F1C  083B               	movf	??_showBootSequence,w
  8151  1F1D  0021               	movlb	1	; select bank1
  8152  1F1E  00EC               	movwf	_suspend_blink^(0+128)	;volatile
  8153                           
  8154                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8155  1F1F  0022               	movlb	2	; select bank2
  8156  1F20  120D               	bcf	13,4	;volatile
  8157                           
  8158                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8159  1F21  110D               	bcf	13,2	;volatile
  8160                           
  8161                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8162  1F22  128D               	bcf	13,5	;volatile
  8163                           
  8164                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8165  1F23  118D               	bcf	13,3	;volatile
  8166                           
  8167                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8168  1F24  100D               	bcf	13,0	;volatile
  8169                           
  8170                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8171  1F25  108D               	bcf	13,1	;volatile
  8172                           
  8173                           ;LEDs.c: 113: star_tactiles(0);
  8174  1F26  3000               	movlw	0
  8175  1F27  3195  2554  319F   	fcall	_star_tactiles
  8176                           
  8177                           ;LEDs.c: 114: star_tactiles(0);
  8178  1F2A  3000               	movlw	0
  8179  1F2B  3195  2554  319F   	fcall	_star_tactiles
  8180                           
  8181                           ;LEDs.c: 115: star_tactiles(1);
  8182  1F2E  3001               	movlw	1
  8183  1F2F  3195  2554  319F   	fcall	_star_tactiles
  8184                           
  8185                           ;LEDs.c: 116: star_tactiles(1);
  8186  1F32  3001               	movlw	1
  8187  1F33  3195  2554  319F   	fcall	_star_tactiles
  8188                           
  8189                           ;LEDs.c: 118: solidring_tactiles();
  8190  1F36  3191  21B7  319F   	fcall	_solidring_tactiles
  8191                           
  8192                           ;LEDs.c: 119: solidring_tactiles();
  8193  1F39  3191  21B7  319F   	fcall	_solidring_tactiles
  8194                           
  8195                           ;LEDs.c: 122: suspend_blink = 0;
  8196  1F3C  0021               	movlb	1	; select bank1
  8197  1F3D  01EC               	clrf	_suspend_blink^(0+128)	;volatile
  8198                           
  8199                           ;LEDs.c: 123: restoreLEDState();
  8200  1F3E  319E  265B         	fcall	_restoreLEDState
  8201  1F40  0008               	return
  8202  1F41                     __end_of_showBootSequence:	
  8203                           
  8204                           	psect	text8
  8205  1554                     __ptext8:	
  8206 ;; *************** function _star_tactiles *****************
  8207 ;; Defined at:
  8208 ;;		line 194 in file "LEDs.c"
  8209 ;; Parameters:    Size  Location     Type
  8210 ;;  reverse         1    wreg     unsigned char 
  8211 ;; Auto vars:     Size  Location     Type
  8212 ;;  reverse         1   22[BANK0 ] unsigned char 
  8213 ;;  iLed            2   25[BANK0 ] int 
  8214 ;;  iLed            2   23[BANK0 ] int 
  8215 ;; Return value:  Size  Location     Type
  8216 ;;                  1    wreg      void 
  8217 ;; Registers used:
  8218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8219 ;; Tracked objects:
  8220 ;;		On entry : 0/0
  8221 ;;		On exit  : 0/0
  8222 ;;		Unchanged: 0/0
  8223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8225 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8227 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8228 ;;Total ram usage:        7 bytes
  8229 ;; Hardware stack levels used:    1
  8230 ;; Hardware stack levels required when called:    4
  8231 ;; This function calls:
  8232 ;;		_set_leds_bottom
  8233 ;;		_set_leds_top
  8234 ;;		_wait_ms
  8235 ;; This function is called by:
  8236 ;;		_showBootSequence
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           
  8241                           ;psect for function _star_tactiles
  8242  1554                     _star_tactiles:	
  8243                           
  8244                           ;incstack = 0
  8245                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8246                           ;star_tactiles@reverse stored from wreg
  8247  1554  0020               	movlb	0	; select bank0
  8248  1555  00B6               	movwf	star_tactiles@reverse
  8249                           
  8250                           ;LEDs.c: 195: if (reverse == 1) {
  8251  1556  0336               	decf	star_tactiles@reverse,w
  8252  1557  1D03               	btfss	3,2
  8253  1558  2D89               	goto	l4942
  8254                           
  8255                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8256  1559  3005               	movlw	5
  8257  155A  00B7               	movwf	star_tactiles@iLed
  8258  155B  3000               	movlw	0
  8259  155C  00B8               	movwf	star_tactiles@iLed+1
  8260  155D                     L8:	
  8261  155D  1BB8               	btfsc	star_tactiles@iLed+1,7
  8262  155E  0008               	return
  8263                           
  8264                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8265  155F  0838               	movf	star_tactiles@iLed+1,w
  8266  1560  00A3               	movwf	set_leds_top@x+1
  8267  1561  0837               	movf	star_tactiles@iLed,w
  8268  1562  00A2               	movwf	set_leds_top@x
  8269  1563  3001               	movlw	1
  8270  1564  00A4               	movwf	set_leds_top@ledState
  8271  1565  3000               	movlw	0
  8272  1566  00A5               	movwf	set_leds_top@ledState+1
  8273  1567  3194  249B  3195   	fcall	_set_leds_top
  8274                           
  8275                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8276  156A  0020               	movlb	0	; select bank0
  8277  156B  0937               	comf	star_tactiles@iLed,w
  8278  156C  00B4               	movwf	??_star_tactiles
  8279  156D  0938               	comf	star_tactiles@iLed+1,w
  8280  156E  00B5               	movwf	??_star_tactiles+1
  8281  156F  0AB4               	incf	??_star_tactiles,f
  8282  1570  1903               	skipnz
  8283  1571  0AB5               	incf	??_star_tactiles+1,f
  8284  1572  0834               	movf	??_star_tactiles,w
  8285  1573  3E06               	addlw	6
  8286  1574  00A2               	movwf	set_leds_bottom@x
  8287  1575  3000               	movlw	0
  8288  1576  3D35               	addwfc	??_star_tactiles+1,w
  8289  1577  00A3               	movwf	set_leds_bottom@x+1
  8290  1578  3190  2009  3195   	fcall	_set_leds_bottom
  8291                           
  8292                           ;LEDs.c: 199: wait_ms(5);
  8293  157B  3005               	movlw	5
  8294  157C  0020               	movlb	0	; select bank0
  8295  157D  00AE               	movwf	wait_ms@timeSec
  8296  157E  3000               	movlw	0
  8297  157F  00AF               	movwf	wait_ms@timeSec+1
  8298  1580  319F  27CE  3195   	fcall	_wait_ms
  8299  1583  30FF               	movlw	255
  8300  1584  0020               	movlb	0	; select bank0
  8301  1585  07B7               	addwf	star_tactiles@iLed,f
  8302  1586  30FF               	movlw	255
  8303  1587  3DB8               	addwfc	star_tactiles@iLed+1,f
  8304  1588  2D5D               	goto	L8
  8305  1589                     l4942:	
  8306                           ;LEDs.c: 200: }
  8307                           ;LEDs.c: 201: } else {
  8308                           
  8309                           
  8310                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8311  1589  3001               	movlw	1
  8312  158A  00B9               	movwf	star_tactiles@iLed_1441
  8313  158B  3000               	movlw	0
  8314  158C  00BA               	movwf	star_tactiles@iLed_1441+1
  8315  158D                     L9:	
  8316  158D  083A               	movf	star_tactiles@iLed_1441+1,w
  8317  158E  3A80               	xorlw	128
  8318  158F  00B4               	movwf	??_star_tactiles
  8319  1590  3080               	movlw	128
  8320  1591  0234               	subwf	??_star_tactiles,w
  8321  1592  1D03               	skipz
  8322  1593  2D96               	goto	u4955
  8323  1594  3007               	movlw	7
  8324  1595  0239               	subwf	star_tactiles@iLed_1441,w
  8325  1596                     u4955:	
  8326  1596  1803               	btfsc	3,0
  8327  1597  0008               	return
  8328                           
  8329                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8330  1598  0020               	movlb	0	; select bank0
  8331  1599  083A               	movf	star_tactiles@iLed_1441+1,w
  8332  159A  00A3               	movwf	set_leds_top@x+1
  8333  159B  0839               	movf	star_tactiles@iLed_1441,w
  8334  159C  00A2               	movwf	set_leds_top@x
  8335  159D  3001               	movlw	1
  8336  159E  00A4               	movwf	set_leds_top@ledState
  8337  159F  3000               	movlw	0
  8338  15A0  00A5               	movwf	set_leds_top@ledState+1
  8339  15A1  3194  249B  3195   	fcall	_set_leds_top
  8340                           
  8341                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8342  15A4  0020               	movlb	0	; select bank0
  8343  15A5  0939               	comf	star_tactiles@iLed_1441,w
  8344  15A6  00B4               	movwf	??_star_tactiles
  8345  15A7  093A               	comf	star_tactiles@iLed_1441+1,w
  8346  15A8  00B5               	movwf	??_star_tactiles+1
  8347  15A9  0AB4               	incf	??_star_tactiles,f
  8348  15AA  1903               	skipnz
  8349  15AB  0AB5               	incf	??_star_tactiles+1,f
  8350  15AC  0834               	movf	??_star_tactiles,w
  8351  15AD  3E06               	addlw	6
  8352  15AE  00A2               	movwf	set_leds_bottom@x
  8353  15AF  3000               	movlw	0
  8354  15B0  3D35               	addwfc	??_star_tactiles+1,w
  8355  15B1  00A3               	movwf	set_leds_bottom@x+1
  8356  15B2  3190  2009  3195   	fcall	_set_leds_bottom
  8357                           
  8358                           ;LEDs.c: 205: wait_ms(5);
  8359  15B5  3005               	movlw	5
  8360  15B6  0020               	movlb	0	; select bank0
  8361  15B7  00AE               	movwf	wait_ms@timeSec
  8362  15B8  3000               	movlw	0
  8363  15B9  00AF               	movwf	wait_ms@timeSec+1
  8364  15BA  319F  27CE  3195   	fcall	_wait_ms
  8365  15BD  3001               	movlw	1
  8366  15BE  0020               	movlb	0	; select bank0
  8367  15BF  07B9               	addwf	star_tactiles@iLed_1441,f
  8368  15C0  3000               	movlw	0
  8369  15C1  3DBA               	addwfc	star_tactiles@iLed_1441+1,f
  8370  15C2  2D8D               	goto	L9
  8371  15C3                     __end_of_star_tactiles:	
  8372                           
  8373                           	psect	text9
  8374  11B7                     __ptext9:	
  8375 ;; *************** function _solidring_tactiles *****************
  8376 ;; Defined at:
  8377 ;;		line 223 in file "LEDs.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;		None
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  ring_delay      1   22[BANK0 ] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8393 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8395 ;;Total ram usage:        3 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    4
  8398 ;; This function calls:
  8399 ;;		_set_leds_bottom
  8400 ;;		_set_leds_top
  8401 ;;		_wait_ms
  8402 ;; This function is called by:
  8403 ;;		_showBootSequence
  8404 ;;		_showSave
  8405 ;; This function uses a non-reentrant model
  8406 ;;
  8407                           
  8408                           
  8409                           ;psect for function _solidring_tactiles
  8410  11B7                     _solidring_tactiles:	
  8411                           
  8412                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8413                           
  8414                           ;incstack = 0
  8415                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8416  11B7  301E               	movlw	30
  8417  11B8  0020               	movlb	0	; select bank0
  8418  11B9  00B4               	movwf	??_solidring_tactiles
  8419  11BA  0834               	movf	??_solidring_tactiles,w
  8420  11BB  00B6               	movwf	solidring_tactiles@ring_delay
  8421                           
  8422                           ;LEDs.c: 225: set_leds_top(100, 1);
  8423  11BC  3064               	movlw	100
  8424  11BD  00A2               	movwf	set_leds_top@x
  8425  11BE  3000               	movlw	0
  8426  11BF  00A3               	movwf	set_leds_top@x+1
  8427  11C0  3001               	movlw	1
  8428  11C1  00A4               	movwf	set_leds_top@ledState
  8429  11C2  3000               	movlw	0
  8430  11C3  00A5               	movwf	set_leds_top@ledState+1
  8431  11C4  3194  249B  3191   	fcall	_set_leds_top
  8432                           
  8433                           ;LEDs.c: 226: set_leds_bottom(100);
  8434  11C7  3064               	movlw	100
  8435  11C8  0020               	movlb	0	; select bank0
  8436  11C9  00A2               	movwf	set_leds_bottom@x
  8437  11CA  3000               	movlw	0
  8438  11CB  00A3               	movwf	set_leds_bottom@x+1
  8439  11CC  3190  2009  3191   	fcall	_set_leds_bottom
  8440                           
  8441                           ;LEDs.c: 227: wait_ms(ring_delay);
  8442  11CF  0020               	movlb	0	; select bank0
  8443  11D0  0836               	movf	solidring_tactiles@ring_delay,w
  8444  11D1  00B4               	movwf	??_solidring_tactiles
  8445  11D2  01B5               	clrf	??_solidring_tactiles+1
  8446  11D3  0834               	movf	??_solidring_tactiles,w
  8447  11D4  00AE               	movwf	wait_ms@timeSec
  8448  11D5  0835               	movf	??_solidring_tactiles+1,w
  8449  11D6  00AF               	movwf	wait_ms@timeSec+1
  8450  11D7  319F  27CE  3191   	fcall	_wait_ms
  8451                           
  8452                           ;LEDs.c: 229: set_leds_top(0, 1);
  8453  11DA  3000               	movlw	0
  8454  11DB  0020               	movlb	0	; select bank0
  8455  11DC  00A2               	movwf	set_leds_top@x
  8456  11DD  00A3               	movwf	set_leds_top@x+1
  8457  11DE  3001               	movlw	1
  8458  11DF  00A4               	movwf	set_leds_top@ledState
  8459  11E0  3000               	movlw	0
  8460  11E1  00A5               	movwf	set_leds_top@ledState+1
  8461  11E2  3194  249B  3191   	fcall	_set_leds_top
  8462                           
  8463                           ;LEDs.c: 230: set_leds_bottom(0);
  8464  11E5  3000               	movlw	0
  8465  11E6  0020               	movlb	0	; select bank0
  8466  11E7  00A2               	movwf	set_leds_bottom@x
  8467  11E8  00A3               	movwf	set_leds_bottom@x+1
  8468  11E9  3190  2009  3191   	fcall	_set_leds_bottom
  8469                           
  8470                           ;LEDs.c: 231: wait_ms(ring_delay);
  8471  11EC  0020               	movlb	0	; select bank0
  8472  11ED  0836               	movf	solidring_tactiles@ring_delay,w
  8473  11EE  00B4               	movwf	??_solidring_tactiles
  8474  11EF  01B5               	clrf	??_solidring_tactiles+1
  8475  11F0  0834               	movf	??_solidring_tactiles,w
  8476  11F1  00AE               	movwf	wait_ms@timeSec
  8477  11F2  0835               	movf	??_solidring_tactiles+1,w
  8478  11F3  00AF               	movwf	wait_ms@timeSec+1
  8479  11F4  319F  27CE         	fcall	_wait_ms
  8480  11F6  0008               	return
  8481  11F7                     __end_of_solidring_tactiles:	
  8482                           
  8483                           	psect	text10
  8484  1E5B                     __ptext10:	
  8485 ;; *************** function _restoreLEDState *****************
  8486 ;; Defined at:
  8487 ;;		line 89 in file "state_manager.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;		None
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;		None
  8492 ;; Return value:  Size  Location     Type
  8493 ;;                  1    wreg      void 
  8494 ;; Registers used:
  8495 ;;		wreg, status,0
  8496 ;; Tracked objects:
  8497 ;;		On entry : 0/0
  8498 ;;		On exit  : 0/0
  8499 ;;		Unchanged: 0/0
  8500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8505 ;;Total ram usage:        0 bytes
  8506 ;; Hardware stack levels used:    1
  8507 ;; Hardware stack levels required when called:    2
  8508 ;; This function calls:
  8509 ;;		Nothing
  8510 ;; This function is called by:
  8511 ;;		_showBootSequence
  8512 ;;		_showError_Alternating
  8513 ;;		_show_error
  8514 ;;		_show_cancel
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           
  8519                           ;psect for function _restoreLEDState
  8520  1E5B                     _restoreLEDState:	
  8521                           
  8522                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8523                           
  8524                           ;incstack = 0
  8525                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8526  1E5B  0022               	movlb	2	; select bank2
  8527  1E5C  0C20               	rrf	_ledState^(0+256),w
  8528  1E5D  1C03               	skipc
  8529  1E5E  120D               	bcf	13,4	;volatile
  8530  1E5F  1803               	skipnc
  8531  1E60  160D               	bsf	13,4	;volatile
  8532                           
  8533                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8534  1E61  0C22               	rrf	(_ledState^(0+256)+2),w
  8535  1E62  1C03               	skipc
  8536  1E63  110D               	bcf	13,2	;volatile
  8537  1E64  1803               	skipnc
  8538  1E65  150D               	bsf	13,2	;volatile
  8539                           
  8540                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8541  1E66  0C21               	rrf	(_ledState^(0+256)+1),w
  8542  1E67  1C03               	skipc
  8543  1E68  128D               	bcf	13,5	;volatile
  8544  1E69  1803               	skipnc
  8545  1E6A  168D               	bsf	13,5	;volatile
  8546                           
  8547                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8548  1E6B  0C23               	rrf	(_ledState^(0+256)+3),w
  8549  1E6C  1C03               	skipc
  8550  1E6D  118D               	bcf	13,3	;volatile
  8551  1E6E  1803               	skipnc
  8552  1E6F  158D               	bsf	13,3	;volatile
  8553  1E70  0008               	return
  8554  1E71                     __end_of_restoreLEDState:	
  8555                           
  8556                           	psect	text11
  8557  1E22                     __ptext11:	
  8558 ;; *************** function _getCurrentLEDState *****************
  8559 ;; Defined at:
  8560 ;;		line 83 in file "state_manager.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;		None
  8565 ;; Return value:  Size  Location     Type
  8566 ;;                  1    wreg      void 
  8567 ;; Registers used:
  8568 ;;		wreg, status,2
  8569 ;; Tracked objects:
  8570 ;;		On entry : 0/0
  8571 ;;		On exit  : 0/0
  8572 ;;		Unchanged: 0/0
  8573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8575 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8576 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8577 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8578 ;;Total ram usage:        0 bytes
  8579 ;; Hardware stack levels used:    1
  8580 ;; Hardware stack levels required when called:    2
  8581 ;; This function calls:
  8582 ;;		Nothing
  8583 ;; This function is called by:
  8584 ;;		_showBootSequence
  8585 ;;		_showError_Alternating
  8586 ;;		_show_error
  8587 ;;		_show_cancel
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           
  8592                           ;psect for function _getCurrentLEDState
  8593  1E22                     _getCurrentLEDState:	
  8594                           
  8595                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8596                           
  8597                           ;incstack = 0
  8598                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8599  1E22  3000               	movlw	0
  8600  1E23  0022               	movlb	2	; select bank2
  8601  1E24  1A0D               	btfsc	13,4	;volatile
  8602  1E25  3001               	movlw	1
  8603  1E26  00A0               	movwf	_ledState^(0+256)
  8604                           
  8605                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8606  1E27  3000               	movlw	0
  8607  1E28  190D               	btfsc	13,2	;volatile
  8608  1E29  3001               	movlw	1
  8609  1E2A  00A2               	movwf	(_ledState^(0+256)+2)
  8610                           
  8611                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8612  1E2B  3000               	movlw	0
  8613  1E2C  1A8D               	btfsc	13,5	;volatile
  8614  1E2D  3001               	movlw	1
  8615  1E2E  00A1               	movwf	(_ledState^(0+256)+1)
  8616                           
  8617                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8618  1E2F  3000               	movlw	0
  8619  1E30  198D               	btfsc	13,3	;volatile
  8620  1E31  3001               	movlw	1
  8621  1E32  00A3               	movwf	(_ledState^(0+256)+3)
  8622  1E33  0008               	return
  8623  1E34                     __end_of_getCurrentLEDState:	
  8624                           
  8625                           	psect	text12
  8626  08F6                     __ptext12:	
  8627 ;; *************** function _set_subdivision *****************
  8628 ;; Defined at:
  8629 ;;		line 77 in file "user.c"
  8630 ;; Parameters:    Size  Location     Type
  8631 ;;  x               2   14[BANK1 ] int 
  8632 ;;  y               2   16[BANK1 ] int 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  scalar          3   23[BANK1 ] float 
  8635 ;;  tmpX            2   21[BANK1 ] int 
  8636 ;; Return value:  Size  Location     Type
  8637 ;;                  2   14[BANK1 ] int 
  8638 ;; Registers used:
  8639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8640 ;; Tracked objects:
  8641 ;;		On entry : 0/0
  8642 ;;		On exit  : 0/0
  8643 ;;		Unchanged: 0/0
  8644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8645 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8646 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8647 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8648 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8649 ;;Total ram usage:       12 bytes
  8650 ;; Hardware stack levels used:    1
  8651 ;; Hardware stack levels required when called:    4
  8652 ;; This function calls:
  8653 ;;		___awtoft
  8654 ;;		___ftdiv
  8655 ;;		___ftmul
  8656 ;;		___fttol
  8657 ;; This function is called by:
  8658 ;;		_main
  8659 ;; This function uses a non-reentrant model
  8660 ;;
  8661                           
  8662                           
  8663                           ;psect for function _set_subdivision
  8664  08F6                     _set_subdivision:	
  8665                           
  8666                           ;user.c: 78: adjust_sub_delay = 0;
  8667                           
  8668                           ;incstack = 0
  8669                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8670  08F6  0022               	movlb	2	; select bank2
  8671  08F7  01AA               	clrf	_adjust_sub_delay^(0+256)
  8672  08F8  01AB               	clrf	(_adjust_sub_delay+1)^(0+256)
  8673                           
  8674                           ;user.c: 79: int tmpX = x;
  8675  08F9  0021               	movlb	1	; select bank1
  8676  08FA  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8677  08FB  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8678  08FC  082E               	movf	set_subdivision@x^(0+128),w
  8679  08FD  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8680                           
  8681                           ;user.c: 80: float scalar = 1.0;
  8682  08FE  3000               	movlw	0
  8683  08FF  00B7               	movwf	set_subdivision@scalar^(0+128)
  8684  0900  3080               	movlw	128
  8685  0901  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8686  0902  303F               	movlw	63
  8687  0903  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8688                           
  8689                           ;user.c: 83: switch (y) {
  8690  0904  291E               	goto	l5674
  8691  0905                     l5662:	
  8692                           ;user.c: 84: case 1:
  8693                           
  8694                           
  8695                           ;user.c: 85: scalar = 0.75;
  8696  0905  3000               	movlw	0
  8697  0906  00B7               	movwf	set_subdivision@scalar^(0+128)
  8698  0907  3040               	movlw	64
  8699  0908  2910               	goto	L11
  8700  0909                     l5664:	
  8701                           ;user.c: 87: case 2:
  8702                           
  8703                           ;user.c: 86: break;
  8704                           
  8705                           
  8706                           ;user.c: 88: scalar = 0.6666;
  8707  0909  30A6               	movlw	166
  8708  090A  00B7               	movwf	set_subdivision@scalar^(0+128)
  8709  090B  302A               	movlw	42
  8710  090C  2910               	goto	L11
  8711  090D                     l5666:	
  8712                           ;user.c: 90: case 3:
  8713                           
  8714                           ;user.c: 89: break;
  8715                           
  8716                           
  8717                           ;user.c: 91: scalar = .5;
  8718  090D  3000               	movlw	0
  8719  090E  00B7               	movwf	set_subdivision@scalar^(0+128)
  8720  090F  3000               	movlw	0
  8721  0910                     L11:	
  8722  0910  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8723  0911  303F               	movlw	63
  8724  0912  291C               	goto	L13
  8725  0913                     l5668:	
  8726                           ;user.c: 93: case 4:
  8727                           
  8728                           ;user.c: 92: break;
  8729                           
  8730                           
  8731                           ;user.c: 94: scalar = 0.3333;
  8732  0913  30A6               	movlw	166
  8733  0914  00B7               	movwf	set_subdivision@scalar^(0+128)
  8734  0915  30AA               	movlw	170
  8735  0916  291A               	goto	L14
  8736  0917                     l5670:	
  8737                           ;user.c: 96: case 5:
  8738                           
  8739                           ;user.c: 95: break;
  8740                           
  8741                           
  8742                           ;user.c: 97: scalar = 0.25;
  8743  0917  3000               	movlw	0
  8744  0918  00B7               	movwf	set_subdivision@scalar^(0+128)
  8745  0919  3080               	movlw	128
  8746  091A                     L14:	
  8747  091A  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8748  091B  303E               	movlw	62
  8749  091C                     L13:	
  8750  091C  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8751                           
  8752                           ;user.c: 102: }
  8753                           
  8754                           ;user.c: 101: break;
  8755                           
  8756                           ;user.c: 99: case 6:
  8757                           
  8758                           ;user.c: 98: break;
  8759  091D  2937               	goto	l5676
  8760  091E                     l5674:	
  8761                           
  8762                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8763                           ; Switch size 1, requested type "space"
  8764                           ; Number of cases is 1, Range of values is 0 to 0
  8765                           ; switch strategies available:
  8766                           ; Name         Instructions Cycles
  8767                           ; simple_byte            4     3 (average)
  8768                           ; direct_byte            8     6 (fixed)
  8769                           ; jumptable            260     6 (fixed)
  8770                           ;	Chosen strategy is simple_byte
  8771  091E  0831               	movf	(set_subdivision@y+1)^(0+128),w
  8772  091F  3A00               	xorlw	0	; case 0
  8773  0920  1903               	skipnz
  8774  0921  2923               	goto	l6176
  8775  0922  2937               	goto	l5676
  8776  0923                     l6176:	
  8777                           
  8778                           ; Switch size 1, requested type "space"
  8779                           ; Number of cases is 6, Range of values is 1 to 6
  8780                           ; switch strategies available:
  8781                           ; Name         Instructions Cycles
  8782                           ; simple_byte           19    10 (average)
  8783                           ; direct_byte           21     9 (fixed)
  8784                           ; jumptable            263     9 (fixed)
  8785                           ;	Chosen strategy is simple_byte
  8786  0923  0830               	movf	set_subdivision@y^(0+128),w
  8787  0924  3A01               	xorlw	1	; case 1
  8788  0925  1903               	skipnz
  8789  0926  2905               	goto	l5662
  8790  0927  3A03               	xorlw	3	; case 2
  8791  0928  1903               	skipnz
  8792  0929  2909               	goto	l5664
  8793  092A  3A01               	xorlw	1	; case 3
  8794  092B  1903               	skipnz
  8795  092C  290D               	goto	l5666
  8796  092D  3A07               	xorlw	7	; case 4
  8797  092E  1903               	skipnz
  8798  092F  2913               	goto	l5668
  8799  0930  3A01               	xorlw	1	; case 5
  8800  0931  1903               	skipnz
  8801  0932  2917               	goto	l5670
  8802  0933  3A03               	xorlw	3	; case 6
  8803  0934  1903               	skipnz
  8804  0935  2937               	goto	l5676
  8805  0936  2937               	goto	l5676
  8806  0937                     l5676:	
  8807                           
  8808                           ;user.c: 104: tmpX = tmpX * scalar;
  8809  0937  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8810  0938  0020               	movlb	0	; select bank0
  8811  0939  00AB               	movwf	___awtoft@c+1
  8812  093A  0021               	movlb	1	; select bank1
  8813  093B  0835               	movf	set_subdivision@tmpX^(0+128),w
  8814  093C  0020               	movlb	0	; select bank0
  8815  093D  00AA               	movwf	___awtoft@c
  8816  093E  319E  26F4  3188   	fcall	___awtoft
  8817  0941  0020               	movlb	0	; select bank0
  8818  0942  082A               	movf	?___awtoft,w
  8819  0943  00BA               	movwf	___ftmul@f2
  8820  0944  082B               	movf	?___awtoft+1,w
  8821  0945  00BB               	movwf	___ftmul@f2+1
  8822  0946  082C               	movf	?___awtoft+2,w
  8823  0947  00BC               	movwf	___ftmul@f2+2
  8824  0948  0021               	movlb	1	; select bank1
  8825  0949  0837               	movf	set_subdivision@scalar^(0+128),w
  8826  094A  0020               	movlb	0	; select bank0
  8827  094B  00B7               	movwf	___ftmul@f1
  8828  094C  0021               	movlb	1	; select bank1
  8829  094D  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  8830  094E  0020               	movlb	0	; select bank0
  8831  094F  00B8               	movwf	___ftmul@f1+1
  8832  0950  0021               	movlb	1	; select bank1
  8833  0951  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  8834  0952  0020               	movlb	0	; select bank0
  8835  0953  00B9               	movwf	___ftmul@f1+2
  8836  0954  3188  2042  3188   	fcall	___ftmul
  8837  0957  0020               	movlb	0	; select bank0
  8838  0958  0837               	movf	?___ftmul,w
  8839  0959  0021               	movlb	1	; select bank1
  8840  095A  00A0               	movwf	___fttol@f1^(0+128)
  8841  095B  0020               	movlb	0	; select bank0
  8842  095C  0838               	movf	?___ftmul+1,w
  8843  095D  0021               	movlb	1	; select bank1
  8844  095E  00A1               	movwf	(___fttol@f1+1)^(0+128)
  8845  095F  0020               	movlb	0	; select bank0
  8846  0960  0839               	movf	?___ftmul+2,w
  8847  0961  0021               	movlb	1	; select bank1
  8848  0962  00A2               	movwf	(___fttol@f1+2)^(0+128)
  8849  0963  3196  2645  3188   	fcall	___fttol
  8850  0966  0021               	movlb	1	; select bank1
  8851  0967  0821               	movf	(?___fttol^(0+128)+1),w
  8852  0968  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8853  0969  0820               	movf	?___fttol^(0+128),w
  8854  096A  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8855                           
  8856                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  8857  096B  0837               	movf	set_subdivision@scalar^(0+128),w
  8858  096C  0020               	movlb	0	; select bank0
  8859  096D  00C7               	movwf	___ftdiv@f2
  8860  096E  0021               	movlb	1	; select bank1
  8861  096F  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  8862  0970  0020               	movlb	0	; select bank0
  8863  0971  00C8               	movwf	___ftdiv@f2+1
  8864  0972  0021               	movlb	1	; select bank1
  8865  0973  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  8866  0974  0020               	movlb	0	; select bank0
  8867  0975  00C9               	movwf	___ftdiv@f2+2
  8868  0976  0021               	movlb	1	; select bank1
  8869  0977  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8870  0978  0020               	movlb	0	; select bank0
  8871  0979  00AB               	movwf	___awtoft@c+1
  8872  097A  0021               	movlb	1	; select bank1
  8873  097B  0835               	movf	set_subdivision@tmpX^(0+128),w
  8874  097C  0020               	movlb	0	; select bank0
  8875  097D  00AA               	movwf	___awtoft@c
  8876  097E  319E  26F4  3188   	fcall	___awtoft
  8877  0981  0020               	movlb	0	; select bank0
  8878  0982  082A               	movf	?___awtoft,w
  8879  0983  00CA               	movwf	___ftdiv@f1
  8880  0984  082B               	movf	?___awtoft+1,w
  8881  0985  00CB               	movwf	___ftdiv@f1+1
  8882  0986  082C               	movf	?___awtoft+2,w
  8883  0987  00CC               	movwf	___ftdiv@f1+2
  8884  0988  3197  2757  3188   	fcall	___ftdiv
  8885  098B  0020               	movlb	0	; select bank0
  8886  098C  0847               	movf	?___ftdiv,w
  8887  098D  0021               	movlb	1	; select bank1
  8888  098E  00B2               	movwf	??_set_subdivision^(0+128)
  8889  098F  0020               	movlb	0	; select bank0
  8890  0990  0848               	movf	?___ftdiv+1,w
  8891  0991  0021               	movlb	1	; select bank1
  8892  0992  00B3               	movwf	(??_set_subdivision^(0+128)+1)
  8893  0993  0020               	movlb	0	; select bank0
  8894  0994  0849               	movf	?___ftdiv+2,w
  8895  0995  0021               	movlb	1	; select bank1
  8896  0996  00B4               	movwf	(??_set_subdivision^(0+128)+2)
  8897  0997  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8898  0998  0020               	movlb	0	; select bank0
  8899  0999  00AB               	movwf	___awtoft@c+1
  8900  099A  0021               	movlb	1	; select bank1
  8901  099B  082E               	movf	set_subdivision@x^(0+128),w
  8902  099C  0020               	movlb	0	; select bank0
  8903  099D  00AA               	movwf	___awtoft@c
  8904  099E  319E  26F4  3188   	fcall	___awtoft
  8905  09A1  0020               	movlb	0	; select bank0
  8906  09A2  082C               	movf	?___awtoft+2,w
  8907  09A3  0021               	movlb	1	; select bank1
  8908  09A4  0634               	xorwf	(??_set_subdivision+2)^(0+128),w
  8909  09A5  1D03               	skipz
  8910  09A6  29B1               	goto	u6405
  8911  09A7  0020               	movlb	0	; select bank0
  8912  09A8  082B               	movf	?___awtoft+1,w
  8913  09A9  0021               	movlb	1	; select bank1
  8914  09AA  0633               	xorwf	(??_set_subdivision+1)^(0+128),w
  8915  09AB  1D03               	skipz
  8916  09AC  29B1               	goto	u6405
  8917  09AD  0020               	movlb	0	; select bank0
  8918  09AE  082A               	movf	?___awtoft,w
  8919  09AF  0021               	movlb	1	; select bank1
  8920  09B0  0632               	xorwf	??_set_subdivision^(0+128),w
  8921  09B1                     u6405:	
  8922  09B1  1903               	skipnz
  8923  09B2  29B8               	goto	l519
  8924  09B3  3001               	movlw	1
  8925  09B4  0022               	movlb	2	; select bank2
  8926  09B5  00AA               	movwf	_adjust_sub_delay^(0+256)
  8927  09B6  3000               	movlw	0
  8928  09B7  00AB               	movwf	(_adjust_sub_delay^(0+256)+1)
  8929  09B8                     l519:	
  8930                           
  8931                           ;user.c: 106: return tmpX;
  8932  09B8  0021               	movlb	1	; select bank1
  8933  09B9  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8934  09BA  00AF               	movwf	(?_set_subdivision+1)^(0+128)
  8935  09BB  0835               	movf	set_subdivision@tmpX^(0+128),w
  8936  09BC  00AE               	movwf	?_set_subdivision^(0+128)
  8937  09BD  0008               	return
  8938  09BE                     __end_of_set_subdivision:	
  8939                           
  8940                           	psect	text13
  8941  1645                     __ptext13:	
  8942 ;; *************** function ___fttol *****************
  8943 ;; Defined at:
  8944 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8945 ;; Parameters:    Size  Location     Type
  8946 ;;  f1              3    0[BANK1 ] float 
  8947 ;; Auto vars:     Size  Location     Type
  8948 ;;  lval            4    9[BANK1 ] unsigned long 
  8949 ;;  exp1            1   13[BANK1 ] unsigned char 
  8950 ;;  sign1           1    8[BANK1 ] unsigned char 
  8951 ;; Return value:  Size  Location     Type
  8952 ;;                  4    0[BANK1 ] long 
  8953 ;; Registers used:
  8954 ;;		wreg, status,2, status,0
  8955 ;; Tracked objects:
  8956 ;;		On entry : 0/0
  8957 ;;		On exit  : 0/0
  8958 ;;		Unchanged: 0/0
  8959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8960 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8961 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8962 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8963 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8964 ;;Total ram usage:       14 bytes
  8965 ;; Hardware stack levels used:    1
  8966 ;; Hardware stack levels required when called:    2
  8967 ;; This function calls:
  8968 ;;		Nothing
  8969 ;; This function is called by:
  8970 ;;		_main
  8971 ;;		_set_subdivision
  8972 ;; This function uses a non-reentrant model
  8973 ;;
  8974                           
  8975                           
  8976                           ;psect for function ___fttol
  8977  1645                     ___fttol:	
  8978                           
  8979                           ;incstack = 0
  8980                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8981  1645  0021               	movlb	1	; select bank1
  8982  1646  0820               	movf	___fttol@f1^(0+128),w
  8983  1647  00A4               	movwf	??___fttol^(0+128)
  8984  1648  0821               	movf	(___fttol@f1+1)^(0+128),w
  8985  1649  00A5               	movwf	(??___fttol^(0+128)+1)
  8986  164A  0822               	movf	(___fttol@f1+2)^(0+128),w
  8987  164B  00A6               	movwf	(??___fttol^(0+128)+2)
  8988  164C  1003               	clrc
  8989  164D  0D25               	rlf	(??___fttol^(0+128)+1),w
  8990  164E  0D26               	rlf	(??___fttol^(0+128)+2),w
  8991  164F  00A7               	movwf	(??___fttol+3)^(0+128)
  8992  1650  0827               	movf	(??___fttol+3)^(0+128),w
  8993  1651  00AD               	movwf	___fttol@exp1^(0+128)
  8994  1652  082D               	movf	___fttol@exp1^(0+128),w
  8995  1653  1D03               	btfss	3,2
  8996  1654  2E5E               	goto	l5270
  8997  1655  3000               	movlw	0
  8998  1656  00A3               	movwf	(?___fttol+3)^(0+128)
  8999  1657  3000               	movlw	0
  9000  1658  00A2               	movwf	(?___fttol+2)^(0+128)
  9001  1659  3000               	movlw	0
  9002  165A  00A1               	movwf	(?___fttol+1)^(0+128)
  9003  165B  3000               	movlw	0
  9004  165C  00A0               	movwf	?___fttol^(0+128)
  9005  165D  0008               	return
  9006  165E                     l5270:	
  9007  165E  0820               	movf	___fttol@f1^(0+128),w
  9008  165F  00A4               	movwf	??___fttol^(0+128)
  9009  1660  0821               	movf	(___fttol@f1+1)^(0+128),w
  9010  1661  00A5               	movwf	(??___fttol^(0+128)+1)
  9011  1662  0822               	movf	(___fttol@f1+2)^(0+128),w
  9012  1663  00A6               	movwf	(??___fttol^(0+128)+2)
  9013  1664  3017               	movlw	23
  9014  1665                     u5645:	
  9015  1665  36A6               	lsrf	(??___fttol^(0+128)+2),f
  9016  1666  0CA5               	rrf	(??___fttol^(0+128)+1),f
  9017  1667  0CA4               	rrf	??___fttol^(0+128),f
  9018  1668  0B89               	decfsz	9,f
  9019  1669  2E65               	goto	u5645
  9020  166A  0824               	movf	??___fttol^(0+128),w
  9021  166B  00A7               	movwf	(??___fttol+3)^(0+128)
  9022  166C  0827               	movf	(??___fttol+3)^(0+128),w
  9023  166D  00A8               	movwf	___fttol@sign1^(0+128)
  9024  166E  17A1               	bsf	(___fttol@f1^(0+128)+1),7
  9025  166F  30FF               	movlw	255
  9026  1670  05A0               	andwf	___fttol@f1^(0+128),f
  9027  1671  30FF               	movlw	255
  9028  1672  05A1               	andwf	(___fttol@f1+1)^(0+128),f
  9029  1673  3000               	movlw	0
  9030  1674  05A2               	andwf	(___fttol@f1+2)^(0+128),f
  9031  1675  0820               	movf	___fttol@f1^(0+128),w
  9032  1676  00A9               	movwf	___fttol@lval^(0+128)
  9033  1677  0821               	movf	(___fttol@f1+1)^(0+128),w
  9034  1678  00AA               	movwf	(___fttol@lval^(0+128)+1)
  9035  1679  0822               	movf	(___fttol@f1+2)^(0+128),w
  9036  167A  00AB               	movwf	(___fttol@lval^(0+128)+2)
  9037  167B  01AC               	clrf	(___fttol@lval^(0+128)+3)
  9038  167C  308E               	movlw	142
  9039  167D  02AD               	subwf	___fttol@exp1^(0+128),f
  9040  167E  1FAD               	btfss	___fttol@exp1^(0+128),7
  9041  167F  2E9C               	goto	l5290
  9042  1680  082D               	movf	___fttol@exp1^(0+128),w
  9043  1681  3A80               	xorlw	128
  9044  1682  3E8F               	addlw	143
  9045  1683  1803               	skipnc
  9046  1684  2E8E               	goto	l5288
  9047  1685  3000               	movlw	0
  9048  1686  00A3               	movwf	(?___fttol+3)^(0+128)
  9049  1687  3000               	movlw	0
  9050  1688  00A2               	movwf	(?___fttol+2)^(0+128)
  9051  1689  3000               	movlw	0
  9052  168A  00A1               	movwf	(?___fttol+1)^(0+128)
  9053  168B  3000               	movlw	0
  9054  168C  00A0               	movwf	?___fttol^(0+128)
  9055  168D  0008               	return
  9056  168E                     l5288:	
  9057  168E  3001               	movlw	1
  9058  168F                     u5675:	
  9059  168F  36AC               	lsrf	(___fttol@lval+3)^(0+128),f
  9060  1690  0CAB               	rrf	(___fttol@lval+2)^(0+128),f
  9061  1691  0CAA               	rrf	(___fttol@lval+1)^(0+128),f
  9062  1692  0CA9               	rrf	___fttol@lval^(0+128),f
  9063  1693  0B89               	decfsz	9,f
  9064  1694  2E8F               	goto	u5675
  9065  1695  3001               	movlw	1
  9066  1696  00A4               	movwf	??___fttol^(0+128)
  9067  1697  0824               	movf	??___fttol^(0+128),w
  9068  1698  07AD               	addwf	___fttol@exp1^(0+128),f
  9069  1699  1903               	btfsc	3,2
  9070  169A  2EB5               	goto	l5298
  9071  169B  2E8E               	goto	l5288
  9072  169C                     l5290:	
  9073  169C  3018               	movlw	24
  9074  169D  022D               	subwf	___fttol@exp1^(0+128),w
  9075  169E  1C03               	skipc
  9076  169F  2EB2               	goto	l1568
  9077  16A0  3000               	movlw	0
  9078  16A1  00A3               	movwf	(?___fttol+3)^(0+128)
  9079  16A2  3000               	movlw	0
  9080  16A3  00A2               	movwf	(?___fttol+2)^(0+128)
  9081  16A4  3000               	movlw	0
  9082  16A5  00A1               	movwf	(?___fttol+1)^(0+128)
  9083  16A6  3000               	movlw	0
  9084  16A7  00A0               	movwf	?___fttol^(0+128)
  9085  16A8  0008               	return
  9086  16A9                     l5296:	
  9087  16A9  3001               	movlw	1
  9088  16AA                     u5705:	
  9089  16AA  35A9               	lslf	___fttol@lval^(0+128),f
  9090  16AB  0DAA               	rlf	(___fttol@lval+1)^(0+128),f
  9091  16AC  0DAB               	rlf	(___fttol@lval+2)^(0+128),f
  9092  16AD  0DAC               	rlf	(___fttol@lval+3)^(0+128),f
  9093  16AE  0B89               	decfsz	9,f
  9094  16AF  2EAA               	goto	u5705
  9095  16B0  3001               	movlw	1
  9096  16B1  02AD               	subwf	___fttol@exp1^(0+128),f
  9097  16B2                     l1568:	
  9098  16B2  082D               	movf	___fttol@exp1^(0+128),w
  9099  16B3  1D03               	btfss	3,2
  9100  16B4  2EA9               	goto	l5296
  9101  16B5                     l5298:	
  9102  16B5  0828               	movf	___fttol@sign1^(0+128),w
  9103  16B6  1903               	btfsc	3,2
  9104  16B7  2EC3               	goto	l5302
  9105  16B8  09A9               	comf	___fttol@lval^(0+128),f
  9106  16B9  09AA               	comf	(___fttol@lval+1)^(0+128),f
  9107  16BA  09AB               	comf	(___fttol@lval+2)^(0+128),f
  9108  16BB  09AC               	comf	(___fttol@lval+3)^(0+128),f
  9109  16BC  0AA9               	incf	___fttol@lval^(0+128),f
  9110  16BD  1903               	skipnz
  9111  16BE  0AAA               	incf	(___fttol@lval+1)^(0+128),f
  9112  16BF  1903               	skipnz
  9113  16C0  0AAB               	incf	(___fttol@lval+2)^(0+128),f
  9114  16C1  1903               	skipnz
  9115  16C2  0AAC               	incf	(___fttol@lval+3)^(0+128),f
  9116  16C3                     l5302:	
  9117  16C3  082C               	movf	(___fttol@lval+3)^(0+128),w
  9118  16C4  00A3               	movwf	(?___fttol+3)^(0+128)
  9119  16C5  082B               	movf	(___fttol@lval+2)^(0+128),w
  9120  16C6  00A2               	movwf	(?___fttol+2)^(0+128)
  9121  16C7  082A               	movf	(___fttol@lval+1)^(0+128),w
  9122  16C8  00A1               	movwf	(?___fttol+1)^(0+128)
  9123  16C9  0829               	movf	___fttol@lval^(0+128),w
  9124  16CA  00A0               	movwf	?___fttol^(0+128)
  9125  16CB  0008               	return
  9126  16CC                     __end_of___fttol:	
  9127                           
  9128                           	psect	text14
  9129  1EF4                     __ptext14:	
  9130 ;; *************** function ___awtoft *****************
  9131 ;; Defined at:
  9132 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9133 ;; Parameters:    Size  Location     Type
  9134 ;;  c               2   10[BANK0 ] int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  sign            1   15[BANK0 ] unsigned char 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  3   10[BANK0 ] float 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0, pclath, cstack
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9146 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:        6 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    3
  9153 ;; This function calls:
  9154 ;;		___ftpack
  9155 ;; This function is called by:
  9156 ;;		_main
  9157 ;;		_set_subdivision
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           
  9162                           ;psect for function ___awtoft
  9163  1EF4                     ___awtoft:	
  9164                           
  9165                           ;incstack = 0
  9166                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9167  1EF4  0020               	movlb	0	; select bank0
  9168  1EF5  01AF               	clrf	___awtoft@sign
  9169  1EF6  1FAB               	btfss	___awtoft@c+1,7
  9170  1EF7  2EFF               	goto	l5090
  9171  1EF8  09AA               	comf	___awtoft@c,f
  9172  1EF9  09AB               	comf	___awtoft@c+1,f
  9173  1EFA  0AAA               	incf	___awtoft@c,f
  9174  1EFB  1903               	skipnz
  9175  1EFC  0AAB               	incf	___awtoft@c+1,f
  9176  1EFD  01AF               	clrf	___awtoft@sign
  9177  1EFE  0AAF               	incf	___awtoft@sign,f
  9178  1EFF                     l5090:	
  9179  1EFF  082A               	movf	___awtoft@c,w
  9180  1F00  00A2               	movwf	___ftpack@arg
  9181  1F01  082B               	movf	___awtoft@c+1,w
  9182  1F02  00A3               	movwf	___ftpack@arg+1
  9183  1F03  01A4               	clrf	___ftpack@arg+2
  9184  1F04  308E               	movlw	142
  9185  1F05  00AD               	movwf	??___awtoft
  9186  1F06  082D               	movf	??___awtoft,w
  9187  1F07  00A5               	movwf	___ftpack@exp
  9188  1F08  082F               	movf	___awtoft@sign,w
  9189  1F09  00AE               	movwf	??___awtoft+1
  9190  1F0A  082E               	movf	??___awtoft+1,w
  9191  1F0B  00A6               	movwf	___ftpack@sign
  9192  1F0C  3194  24EF         	fcall	___ftpack
  9193  1F0E  0020               	movlb	0	; select bank0
  9194  1F0F  0822               	movf	?___ftpack,w
  9195  1F10  00AA               	movwf	?___awtoft
  9196  1F11  0823               	movf	?___ftpack+1,w
  9197  1F12  00AB               	movwf	?___awtoft+1
  9198  1F13  0824               	movf	?___ftpack+2,w
  9199  1F14  00AC               	movwf	?___awtoft+2
  9200  1F15  0008               	return
  9201  1F16                     __end_of___awtoft:	
  9202                           
  9203                           	psect	text15
  9204  135A                     __ptext15:	
  9205 ;; *************** function _read_top_tactile *****************
  9206 ;; Defined at:
  9207 ;;		line 47 in file "tactiles.c"
  9208 ;; Parameters:    Size  Location     Type
  9209 ;;		None
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      void 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9224 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9225 ;;Total ram usage:        1 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    4
  9228 ;; This function calls:
  9229 ;;		_set_leds_top
  9230 ;;		_wait_ms
  9231 ;; This function is called by:
  9232 ;;		_main
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           
  9237                           ;psect for function _read_top_tactile
  9238  135A                     _read_top_tactile:	
  9239                           
  9240                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9241                           
  9242                           ;incstack = 0
  9243                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9244  135A  0020               	movlb	0	; select bank0
  9245  135B  1A8F               	btfsc	15,5	;volatile
  9246  135C  2B64               	goto	l5382
  9247                           
  9248                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9249  135D  0022               	movlb	2	; select bank2
  9250  135E  0859               	movf	_topTactile_pressed^(0+256),w
  9251  135F  1903               	btfsc	3,2
  9252  1360  2B6F               	goto	l850
  9253                           
  9254                           ;tactiles.c: 58: topTactile_pressed--;
  9255  1361  3001               	movlw	1
  9256  1362  02D9               	subwf	_topTactile_pressed^(0+256),f
  9257                           
  9258                           ;tactiles.c: 59: }
  9259                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9260  1363  2B6F               	goto	l850
  9261  1364                     l5382:	
  9262  1364  3019               	movlw	25
  9263  1365  0022               	movlb	2	; select bank2
  9264  1366  0259               	subwf	_topTactile_pressed^(0+256),w
  9265  1367  1803               	skipnc
  9266  1368  2B6F               	goto	l850
  9267                           
  9268                           ;tactiles.c: 61: topTactile_pressed++;
  9269  1369  3001               	movlw	1
  9270  136A  0020               	movlb	0	; select bank0
  9271  136B  00B4               	movwf	??_read_top_tactile
  9272  136C  0834               	movf	??_read_top_tactile,w
  9273  136D  0022               	movlb	2	; select bank2
  9274  136E  07D9               	addwf	_topTactile_pressed^(0+256),f
  9275  136F                     l850:	
  9276                           
  9277                           ;tactiles.c: 62: }
  9278                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9279  136F  0859               	movf	_topTactile_pressed^(0+256),w
  9280  1370  1D03               	btfss	3,2
  9281  1371  0008               	return
  9282                           
  9283                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9284  1372  0021               	movlb	1	; select bank1
  9285  1373  0859               	movf	_top_push_state^(0+128),w
  9286  1374  3E01               	addlw	1
  9287  1375  00D9               	movwf	_top_push_state^(0+128)
  9288  1376  3000               	movlw	0
  9289  1377  3D5A               	addwfc	(_top_push_state+1)^(0+128),w
  9290  1378  00DA               	movwf	(_top_push_state+1)^(0+128)
  9291                           
  9292                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9293  1379  085A               	movf	(_top_push_state+1)^(0+128),w
  9294  137A  3A80               	xorlw	128
  9295  137B  0020               	movlb	0	; select bank0
  9296  137C  00B4               	movwf	??_read_top_tactile
  9297  137D  3080               	movlw	128
  9298  137E  0234               	subwf	??_read_top_tactile,w
  9299  137F  1D03               	skipz
  9300  1380  2B84               	goto	u5885
  9301  1381  3007               	movlw	7
  9302  1382  0021               	movlb	1	; select bank1
  9303  1383  0259               	subwf	_top_push_state^(0+128),w
  9304  1384                     u5885:	
  9305  1384  1C03               	skipc
  9306  1385  2B8B               	goto	l5392
  9307                           
  9308                           ;tactiles.c: 70: top_push_state = 1;
  9309  1386  3001               	movlw	1
  9310  1387  0021               	movlb	1	; select bank1
  9311  1388  00D9               	movwf	_top_push_state^(0+128)
  9312  1389  3000               	movlw	0
  9313  138A  00DA               	movwf	(_top_push_state^(0+128)+1)
  9314  138B                     l5392:	
  9315                           
  9316                           ;tactiles.c: 71: }
  9317                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9318  138B  0021               	movlb	1	; select bank1
  9319  138C  085A               	movf	(_top_push_state+1)^(0+128),w
  9320  138D  0020               	movlb	0	; select bank0
  9321  138E  00A3               	movwf	set_leds_top@x+1
  9322  138F  0021               	movlb	1	; select bank1
  9323  1390  0859               	movf	_top_push_state^(0+128),w
  9324  1391  0020               	movlb	0	; select bank0
  9325  1392  00A2               	movwf	set_leds_top@x
  9326  1393  3001               	movlw	1
  9327  1394  00A4               	movwf	set_leds_top@ledState
  9328  1395  3000               	movlw	0
  9329  1396  00A5               	movwf	set_leds_top@ledState+1
  9330  1397  3194  249B  3193   	fcall	_set_leds_top
  9331                           
  9332                           ;tactiles.c: 73: delay_time_changed = 1;
  9333  139A  3001               	movlw	1
  9334  139B  0022               	movlb	2	; select bank2
  9335  139C  00DC               	movwf	_delay_time_changed^(0+256)
  9336  139D  3000               	movlw	0
  9337  139E  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  9338  139F                     l854:	
  9339                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9340                           
  9341  139F  0020               	movlb	0	; select bank0
  9342  13A0  1E8F               	btfss	15,5	;volatile
  9343  13A1  2B9F               	goto	l854
  9344                           
  9345                           ;tactiles.c: 77: }
  9346                           ;tactiles.c: 78: wait_ms(20);
  9347  13A2  3014               	movlw	20
  9348  13A3  00AE               	movwf	wait_ms@timeSec
  9349  13A4  3000               	movlw	0
  9350  13A5  00AF               	movwf	wait_ms@timeSec+1
  9351  13A6  319F  27CE         	fcall	_wait_ms
  9352  13A8  0008               	return
  9353  13A9                     __end_of_read_top_tactile:	
  9354                           
  9355                           	psect	text16
  9356  127E                     __ptext16:	
  9357 ;; *************** function _read_bottom_tactile *****************
  9358 ;; Defined at:
  9359 ;;		line 17 in file "tactiles.c"
  9360 ;; Parameters:    Size  Location     Type
  9361 ;;		None
  9362 ;; Auto vars:     Size  Location     Type
  9363 ;;		None
  9364 ;; Return value:  Size  Location     Type
  9365 ;;                  1    wreg      void 
  9366 ;; Registers used:
  9367 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9368 ;; Tracked objects:
  9369 ;;		On entry : 0/0
  9370 ;;		On exit  : 0/0
  9371 ;;		Unchanged: 0/0
  9372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9376 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9377 ;;Total ram usage:        1 bytes
  9378 ;; Hardware stack levels used:    1
  9379 ;; Hardware stack levels required when called:    4
  9380 ;; This function calls:
  9381 ;;		_set_leds_bottom
  9382 ;;		_wait_ms
  9383 ;; This function is called by:
  9384 ;;		_main
  9385 ;; This function uses a non-reentrant model
  9386 ;;
  9387                           
  9388                           
  9389                           ;psect for function _read_bottom_tactile
  9390  127E                     _read_bottom_tactile:	
  9391                           
  9392                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9393                           
  9394                           ;incstack = 0
  9395                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9396  127E  0020               	movlb	0	; select bank0
  9397  127F  1B0F               	btfsc	15,6	;volatile
  9398  1280  2A88               	goto	l5362
  9399                           
  9400                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9401  1281  0022               	movlb	2	; select bank2
  9402  1282  0850               	movf	_bottomTactile_pressed^(0+256),w
  9403  1283  1903               	btfsc	3,2
  9404  1284  2A93               	goto	l838
  9405                           
  9406                           ;tactiles.c: 27: bottomTactile_pressed--;
  9407  1285  3001               	movlw	1
  9408  1286  02D0               	subwf	_bottomTactile_pressed^(0+256),f
  9409                           
  9410                           ;tactiles.c: 28: }
  9411                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9412  1287  2A93               	goto	l838
  9413  1288                     l5362:	
  9414  1288  3019               	movlw	25
  9415  1289  0022               	movlb	2	; select bank2
  9416  128A  0250               	subwf	_bottomTactile_pressed^(0+256),w
  9417  128B  1803               	skipnc
  9418  128C  2A93               	goto	l838
  9419                           
  9420                           ;tactiles.c: 30: bottomTactile_pressed++;
  9421  128D  3001               	movlw	1
  9422  128E  0020               	movlb	0	; select bank0
  9423  128F  00B4               	movwf	??_read_bottom_tactile
  9424  1290  0834               	movf	??_read_bottom_tactile,w
  9425  1291  0022               	movlb	2	; select bank2
  9426  1292  07D0               	addwf	_bottomTactile_pressed^(0+256),f
  9427  1293                     l838:	
  9428                           
  9429                           ;tactiles.c: 31: }
  9430                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9431  1293  0850               	movf	_bottomTactile_pressed^(0+256),w
  9432  1294  1D03               	btfss	3,2
  9433  1295  0008               	return
  9434                           
  9435                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9436  1296  0021               	movlb	1	; select bank1
  9437  1297  0851               	movf	_bottom_push_state^(0+128),w
  9438  1298  3E01               	addlw	1
  9439  1299  00D1               	movwf	_bottom_push_state^(0+128)
  9440  129A  3000               	movlw	0
  9441  129B  3D52               	addwfc	(_bottom_push_state+1)^(0+128),w
  9442  129C  00D2               	movwf	(_bottom_push_state+1)^(0+128)
  9443                           
  9444                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9445  129D  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9446  129E  3A80               	xorlw	128
  9447  129F  0020               	movlb	0	; select bank0
  9448  12A0  00B4               	movwf	??_read_bottom_tactile
  9449  12A1  3080               	movlw	128
  9450  12A2  0234               	subwf	??_read_bottom_tactile,w
  9451  12A3  1D03               	skipz
  9452  12A4  2AA8               	goto	u5825
  9453  12A5  3007               	movlw	7
  9454  12A6  0021               	movlb	1	; select bank1
  9455  12A7  0251               	subwf	_bottom_push_state^(0+128),w
  9456  12A8                     u5825:	
  9457  12A8  1C03               	skipc
  9458  12A9  2AAF               	goto	l5372
  9459                           
  9460                           ;tactiles.c: 37: bottom_push_state = 1;
  9461  12AA  3001               	movlw	1
  9462  12AB  0021               	movlb	1	; select bank1
  9463  12AC  00D1               	movwf	_bottom_push_state^(0+128)
  9464  12AD  3000               	movlw	0
  9465  12AE  00D2               	movwf	(_bottom_push_state^(0+128)+1)
  9466  12AF                     l5372:	
  9467                           
  9468                           ;tactiles.c: 38: }
  9469                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9470  12AF  0021               	movlb	1	; select bank1
  9471  12B0  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9472  12B1  0020               	movlb	0	; select bank0
  9473  12B2  00A3               	movwf	set_leds_bottom@x+1
  9474  12B3  0021               	movlb	1	; select bank1
  9475  12B4  0851               	movf	_bottom_push_state^(0+128),w
  9476  12B5  0020               	movlb	0	; select bank0
  9477  12B6  00A2               	movwf	set_leds_bottom@x
  9478  12B7  3190  2009  3192   	fcall	_set_leds_bottom
  9479  12BA                     l842:	
  9480                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9481                           
  9482  12BA  0020               	movlb	0	; select bank0
  9483  12BB  1F0F               	btfss	15,6	;volatile
  9484  12BC  2ABA               	goto	l842
  9485                           
  9486                           ;tactiles.c: 42: }
  9487                           ;tactiles.c: 43: wait_ms(20);
  9488  12BD  3014               	movlw	20
  9489  12BE  00AE               	movwf	wait_ms@timeSec
  9490  12BF  3000               	movlw	0
  9491  12C0  00AF               	movwf	wait_ms@timeSec+1
  9492  12C1  319F  27CE         	fcall	_wait_ms
  9493  12C3  0008               	return
  9494  12C4                     __end_of_read_bottom_tactile:	
  9495                           
  9496                           	psect	text17
  9497  1081                     __ptext17:	
  9498 ;; *************** function _modulation *****************
  9499 ;; Defined at:
  9500 ;;		line 181 in file "user.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  x               2   23[BANK0 ] int 
  9503 ;;  y               2   25[BANK0 ] int 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;		None
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  2   23[BANK0 ] int 
  9508 ;; Registers used:
  9509 ;;		wreg, status,2, status,0, pclath, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9517 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9518 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9519 ;;Total ram usage:       12 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:    3
  9522 ;; This function calls:
  9523 ;;		___aldiv
  9524 ;;		___wmul
  9525 ;; This function is called by:
  9526 ;;		_main
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           
  9531                           ;psect for function _modulation
  9532  1081                     _modulation:	
  9533                           
  9534                           ;user.c: 183: x = (127500 + (y * x)) / 1000;
  9535                           
  9536                           ;incstack = 0
  9537                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9538  1081  3000               	movlw	0
  9539  1082  0020               	movlb	0	; select bank0
  9540  1083  00AB               	movwf	___aldiv@divisor+3
  9541  1084  3000               	movlw	0
  9542  1085  00AA               	movwf	___aldiv@divisor+2
  9543  1086  3003               	movlw	3
  9544  1087  00A9               	movwf	___aldiv@divisor+1
  9545  1088  30E8               	movlw	232
  9546  1089  00A8               	movwf	___aldiv@divisor
  9547  108A  300C               	movlw	12
  9548  108B  00BB               	movwf	??_modulation
  9549  108C  30F2               	movlw	242
  9550  108D  00BC               	movwf	??_modulation+1
  9551  108E  3001               	movlw	1
  9552  108F  00BD               	movwf	??_modulation+2
  9553  1090  3000               	movlw	0
  9554  1091  00BE               	movwf	??_modulation+3
  9555  1092  083A               	movf	modulation@y+1,w
  9556  1093  00A3               	movwf	___wmul@multiplier+1
  9557  1094  0839               	movf	modulation@y,w
  9558  1095  00A2               	movwf	___wmul@multiplier
  9559  1096  0838               	movf	modulation@x+1,w
  9560  1097  00A5               	movwf	___wmul@multiplicand+1
  9561  1098  0837               	movf	modulation@x,w
  9562  1099  00A4               	movwf	___wmul@multiplicand
  9563  109A  319E  26B8  3190   	fcall	___wmul
  9564  109D  0020               	movlb	0	; select bank0
  9565  109E  0822               	movf	?___wmul,w
  9566  109F  00BF               	movwf	??_modulation+4
  9567  10A0  0823               	movf	?___wmul+1,w
  9568  10A1  00C0               	movwf	??_modulation+5
  9569  10A2  3000               	movlw	0
  9570  10A3  1BC0               	btfsc	??_modulation+5,7
  9571  10A4  30FF               	movlw	255
  9572  10A5  00C1               	movwf	??_modulation+6
  9573  10A6  00C2               	movwf	??_modulation+7
  9574  10A7  083F               	movf	??_modulation+4,w
  9575  10A8  07BB               	addwf	??_modulation,f
  9576  10A9  0840               	movf	??_modulation+5,w
  9577  10AA  3DBC               	addwfc	??_modulation+1,f
  9578  10AB  0841               	movf	??_modulation+6,w
  9579  10AC  3DBD               	addwfc	??_modulation+2,f
  9580  10AD  0842               	movf	??_modulation+7,w
  9581  10AE  3DBE               	addwfc	??_modulation+3,f
  9582  10AF  083E               	movf	??_modulation+3,w
  9583  10B0  00AF               	movwf	___aldiv@dividend+3
  9584  10B1  083D               	movf	??_modulation+2,w
  9585  10B2  00AE               	movwf	___aldiv@dividend+2
  9586  10B3  083C               	movf	??_modulation+1,w
  9587  10B4  00AD               	movwf	___aldiv@dividend+1
  9588  10B5  083B               	movf	??_modulation,w
  9589  10B6  00AC               	movwf	___aldiv@dividend
  9590  10B7  3195  25C3         	fcall	___aldiv
  9591  10B9  0020               	movlb	0	; select bank0
  9592  10BA  0829               	movf	?___aldiv+1,w
  9593  10BB  00B8               	movwf	modulation@x+1
  9594  10BC  0828               	movf	?___aldiv,w
  9595  10BD  00B7               	movwf	modulation@x
  9596                           
  9597                           ;user.c: 184: return x;
  9598  10BE  0008               	return
  9599  10BF                     __end_of_modulation:	
  9600                           
  9601                           	psect	text18
  9602  1EB8                     __ptext18:	
  9603 ;; *************** function ___wmul *****************
  9604 ;; Defined at:
  9605 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  9606 ;; Parameters:    Size  Location     Type
  9607 ;;  multiplier      2    2[BANK0 ] unsigned int 
  9608 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;  product         2    6[BANK0 ] unsigned int 
  9611 ;; Return value:  Size  Location     Type
  9612 ;;                  2    2[BANK0 ] unsigned int 
  9613 ;; Registers used:
  9614 ;;		wreg, status,2, status,0
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9620 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9621 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9623 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9624 ;;Total ram usage:        6 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    2
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_modulation
  9631 ;; This function uses a non-reentrant model
  9632 ;;
  9633                           
  9634                           
  9635                           ;psect for function ___wmul
  9636  1EB8                     ___wmul:	
  9637                           
  9638                           ;incstack = 0
  9639                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9640  1EB8  0020               	movlb	0	; select bank0
  9641  1EB9  01A6               	clrf	___wmul@product
  9642  1EBA  01A7               	clrf	___wmul@product+1
  9643  1EBB                     l5030:	
  9644  1EBB  1C22               	btfss	___wmul@multiplier,0
  9645  1EBC  2EC1               	goto	l1316
  9646  1EBD  0824               	movf	___wmul@multiplicand,w
  9647  1EBE  07A6               	addwf	___wmul@product,f
  9648  1EBF  0825               	movf	___wmul@multiplicand+1,w
  9649  1EC0  3DA7               	addwfc	___wmul@product+1,f
  9650  1EC1                     l1316:	
  9651  1EC1  3001               	movlw	1
  9652  1EC2                     u5055:	
  9653  1EC2  35A4               	lslf	___wmul@multiplicand,f
  9654  1EC3  0DA5               	rlf	___wmul@multiplicand+1,f
  9655  1EC4  0B89               	decfsz	9,f
  9656  1EC5  2EC2               	goto	u5055
  9657  1EC6  3001               	movlw	1
  9658  1EC7                     u5065:	
  9659  1EC7  36A3               	lsrf	___wmul@multiplier+1,f
  9660  1EC8  0CA2               	rrf	___wmul@multiplier,f
  9661  1EC9  0B89               	decfsz	9,f
  9662  1ECA  2EC7               	goto	u5065
  9663  1ECB  0822               	movf	___wmul@multiplier,w
  9664  1ECC  0423               	iorwf	___wmul@multiplier+1,w
  9665  1ECD  1D03               	btfss	3,2
  9666  1ECE  2EBB               	goto	l5030
  9667  1ECF  0827               	movf	___wmul@product+1,w
  9668  1ED0  00A3               	movwf	?___wmul+1
  9669  1ED1  0826               	movf	___wmul@product,w
  9670  1ED2  00A2               	movwf	?___wmul
  9671  1ED3  0008               	return
  9672  1ED4                     __end_of___wmul:	
  9673                           
  9674                           	psect	text19
  9675  15C3                     __ptext19:	
  9676 ;; *************** function ___aldiv *****************
  9677 ;; Defined at:
  9678 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9679 ;; Parameters:    Size  Location     Type
  9680 ;;  divisor         4    8[BANK0 ] long 
  9681 ;;  dividend        4   12[BANK0 ] long 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;  quotient        4   19[BANK0 ] long 
  9684 ;;  sign            1   18[BANK0 ] unsigned char 
  9685 ;;  counter         1   17[BANK0 ] unsigned char 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  4    8[BANK0 ] long 
  9688 ;; Registers used:
  9689 ;;		wreg, status,2, status,0
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9695 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9696 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9698 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9699 ;;Total ram usage:       15 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    2
  9702 ;; This function calls:
  9703 ;;		Nothing
  9704 ;; This function is called by:
  9705 ;;		_modulation
  9706 ;;		_updateSwitchTap
  9707 ;; This function uses a non-reentrant model
  9708 ;;
  9709                           
  9710                           
  9711                           ;psect for function ___aldiv
  9712  15C3                     ___aldiv:	
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9716  15C3  0020               	movlb	0	; select bank0
  9717  15C4  01B2               	clrf	___aldiv@sign
  9718  15C5  1FAB               	btfss	___aldiv@divisor+3,7
  9719  15C6  2DD4               	goto	l1371
  9720  15C7  09A8               	comf	___aldiv@divisor,f
  9721  15C8  09A9               	comf	___aldiv@divisor+1,f
  9722  15C9  09AA               	comf	___aldiv@divisor+2,f
  9723  15CA  09AB               	comf	___aldiv@divisor+3,f
  9724  15CB  0AA8               	incf	___aldiv@divisor,f
  9725  15CC  1903               	skipnz
  9726  15CD  0AA9               	incf	___aldiv@divisor+1,f
  9727  15CE  1903               	skipnz
  9728  15CF  0AAA               	incf	___aldiv@divisor+2,f
  9729  15D0  1903               	skipnz
  9730  15D1  0AAB               	incf	___aldiv@divisor+3,f
  9731  15D2  01B2               	clrf	___aldiv@sign
  9732  15D3  0AB2               	incf	___aldiv@sign,f
  9733  15D4                     l1371:	
  9734  15D4  1FAF               	btfss	___aldiv@dividend+3,7
  9735  15D5  2DE5               	goto	l5052
  9736  15D6  09AC               	comf	___aldiv@dividend,f
  9737  15D7  09AD               	comf	___aldiv@dividend+1,f
  9738  15D8  09AE               	comf	___aldiv@dividend+2,f
  9739  15D9  09AF               	comf	___aldiv@dividend+3,f
  9740  15DA  0AAC               	incf	___aldiv@dividend,f
  9741  15DB  1903               	skipnz
  9742  15DC  0AAD               	incf	___aldiv@dividend+1,f
  9743  15DD  1903               	skipnz
  9744  15DE  0AAE               	incf	___aldiv@dividend+2,f
  9745  15DF  1903               	skipnz
  9746  15E0  0AAF               	incf	___aldiv@dividend+3,f
  9747  15E1  3001               	movlw	1
  9748  15E2  00B0               	movwf	??___aldiv
  9749  15E3  0830               	movf	??___aldiv,w
  9750  15E4  06B2               	xorwf	___aldiv@sign,f
  9751  15E5                     l5052:	
  9752  15E5  3000               	movlw	0
  9753  15E6  00B6               	movwf	___aldiv@quotient+3
  9754  15E7  3000               	movlw	0
  9755  15E8  00B5               	movwf	___aldiv@quotient+2
  9756  15E9  3000               	movlw	0
  9757  15EA  00B4               	movwf	___aldiv@quotient+1
  9758  15EB  3000               	movlw	0
  9759  15EC  00B3               	movwf	___aldiv@quotient
  9760  15ED  082B               	movf	___aldiv@divisor+3,w
  9761  15EE  042A               	iorwf	___aldiv@divisor+2,w
  9762  15EF  0429               	iorwf	___aldiv@divisor+1,w
  9763  15F0  0428               	iorwf	___aldiv@divisor,w
  9764  15F1  1903               	skipnz
  9765  15F2  2E2E               	goto	l5074
  9766  15F3  01B1               	clrf	___aldiv@counter
  9767  15F4  0AB1               	incf	___aldiv@counter,f
  9768  15F5                     l5060:	
  9769  15F5  1BAB               	btfsc	___aldiv@divisor+3,7
  9770  15F6  2E03               	goto	l5062
  9771  15F7  3001               	movlw	1
  9772  15F8                     u5115:	
  9773  15F8  35A8               	lslf	___aldiv@divisor,f
  9774  15F9  0DA9               	rlf	___aldiv@divisor+1,f
  9775  15FA  0DAA               	rlf	___aldiv@divisor+2,f
  9776  15FB  0DAB               	rlf	___aldiv@divisor+3,f
  9777  15FC  0B89               	decfsz	9,f
  9778  15FD  2DF8               	goto	u5115
  9779  15FE  3001               	movlw	1
  9780  15FF  00B0               	movwf	??___aldiv
  9781  1600  0830               	movf	??___aldiv,w
  9782  1601  07B1               	addwf	___aldiv@counter,f
  9783  1602  2DF5               	goto	l5060
  9784  1603                     l5062:	
  9785  1603  3001               	movlw	1
  9786  1604                     u5135:	
  9787  1604  35B3               	lslf	___aldiv@quotient,f
  9788  1605  0DB4               	rlf	___aldiv@quotient+1,f
  9789  1606  0DB5               	rlf	___aldiv@quotient+2,f
  9790  1607  0DB6               	rlf	___aldiv@quotient+3,f
  9791  1608  0B89               	decfsz	9,f
  9792  1609  2E04               	goto	u5135
  9793  160A  082B               	movf	___aldiv@divisor+3,w
  9794  160B  022F               	subwf	___aldiv@dividend+3,w
  9795  160C  1D03               	skipz
  9796  160D  2E18               	goto	u5145
  9797  160E  082A               	movf	___aldiv@divisor+2,w
  9798  160F  022E               	subwf	___aldiv@dividend+2,w
  9799  1610  1D03               	skipz
  9800  1611  2E18               	goto	u5145
  9801  1612  0829               	movf	___aldiv@divisor+1,w
  9802  1613  022D               	subwf	___aldiv@dividend+1,w
  9803  1614  1D03               	skipz
  9804  1615  2E18               	goto	u5145
  9805  1616  0828               	movf	___aldiv@divisor,w
  9806  1617  022C               	subwf	___aldiv@dividend,w
  9807  1618                     u5145:	
  9808  1618  1C03               	skipc
  9809  1619  2E23               	goto	l5070
  9810  161A  0828               	movf	___aldiv@divisor,w
  9811  161B  02AC               	subwf	___aldiv@dividend,f
  9812  161C  0829               	movf	___aldiv@divisor+1,w
  9813  161D  3BAD               	subwfb	___aldiv@dividend+1,f
  9814  161E  082A               	movf	___aldiv@divisor+2,w
  9815  161F  3BAE               	subwfb	___aldiv@dividend+2,f
  9816  1620  082B               	movf	___aldiv@divisor+3,w
  9817  1621  3BAF               	subwfb	___aldiv@dividend+3,f
  9818  1622  1433               	bsf	___aldiv@quotient,0
  9819  1623                     l5070:	
  9820  1623  3001               	movlw	1
  9821  1624                     u5155:	
  9822  1624  36AB               	lsrf	___aldiv@divisor+3,f
  9823  1625  0CAA               	rrf	___aldiv@divisor+2,f
  9824  1626  0CA9               	rrf	___aldiv@divisor+1,f
  9825  1627  0CA8               	rrf	___aldiv@divisor,f
  9826  1628  0B89               	decfsz	9,f
  9827  1629  2E24               	goto	u5155
  9828  162A  3001               	movlw	1
  9829  162B  02B1               	subwf	___aldiv@counter,f
  9830  162C  1D03               	btfss	3,2
  9831  162D  2E03               	goto	l5062
  9832  162E                     l5074:	
  9833  162E  0832               	movf	___aldiv@sign,w
  9834  162F  1903               	btfsc	3,2
  9835  1630  2E3C               	goto	l5078
  9836  1631  09B3               	comf	___aldiv@quotient,f
  9837  1632  09B4               	comf	___aldiv@quotient+1,f
  9838  1633  09B5               	comf	___aldiv@quotient+2,f
  9839  1634  09B6               	comf	___aldiv@quotient+3,f
  9840  1635  0AB3               	incf	___aldiv@quotient,f
  9841  1636  1903               	skipnz
  9842  1637  0AB4               	incf	___aldiv@quotient+1,f
  9843  1638  1903               	skipnz
  9844  1639  0AB5               	incf	___aldiv@quotient+2,f
  9845  163A  1903               	skipnz
  9846  163B  0AB6               	incf	___aldiv@quotient+3,f
  9847  163C                     l5078:	
  9848  163C  0836               	movf	___aldiv@quotient+3,w
  9849  163D  00AB               	movwf	?___aldiv+3
  9850  163E  0835               	movf	___aldiv@quotient+2,w
  9851  163F  00AA               	movwf	?___aldiv+2
  9852  1640  0834               	movf	___aldiv@quotient+1,w
  9853  1641  00A9               	movwf	?___aldiv+1
  9854  1642  0833               	movf	___aldiv@quotient,w
  9855  1643  00A8               	movwf	?___aldiv
  9856  1644  0008               	return
  9857  1645                     __end_of___aldiv:	
  9858                           
  9859                           	psect	text20
  9860  16CC                     __ptext20:	
  9861 ;; *************** function _map *****************
  9862 ;; Defined at:
  9863 ;;		line 171 in file "user.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;  x               3   55[BANK0 ] float 
  9866 ;;  in_min          3   58[BANK0 ] float 
  9867 ;;  in_max          3   61[BANK0 ] float 
  9868 ;;  out_min         3   64[BANK0 ] float 
  9869 ;;  out_max         3   67[BANK0 ] float 
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  3   55[BANK0 ] float 
  9874 ;; Registers used:
  9875 ;;		wreg, status,2, status,0, pclath, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9881 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9882 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9884 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9885 ;;Total ram usage:       18 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    4
  9888 ;; This function calls:
  9889 ;;		___ftadd
  9890 ;;		___ftdiv
  9891 ;;		___ftmul
  9892 ;;		___ftneg
  9893 ;; This function is called by:
  9894 ;;		_main
  9895 ;; This function uses a non-reentrant model
  9896 ;;
  9897                           
  9898                           
  9899                           ;psect for function _map
  9900  16CC                     _map:	
  9901                           
  9902                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9903                           
  9904                           ;incstack = 0
  9905                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9906  16CC  0020               	movlb	0	; select bank0
  9907  16CD  085D               	movf	map@in_max,w
  9908  16CE  00AA               	movwf	___ftadd@f1
  9909  16CF  085E               	movf	map@in_max+1,w
  9910  16D0  00AB               	movwf	___ftadd@f1+1
  9911  16D1  085F               	movf	map@in_max+2,w
  9912  16D2  00AC               	movwf	___ftadd@f1+2
  9913  16D3  085A               	movf	map@in_min,w
  9914  16D4  00A2               	movwf	___ftneg@f1
  9915  16D5  085B               	movf	map@in_min+1,w
  9916  16D6  00A3               	movwf	___ftneg@f1+1
  9917  16D7  085C               	movf	map@in_min+2,w
  9918  16D8  00A4               	movwf	___ftneg@f1+2
  9919  16D9  3190  2000  3196   	fcall	___ftneg
  9920  16DC  0020               	movlb	0	; select bank0
  9921  16DD  0822               	movf	?___ftneg,w
  9922  16DE  00AD               	movwf	___ftadd@f2
  9923  16DF  0823               	movf	?___ftneg+1,w
  9924  16E0  00AE               	movwf	___ftadd@f2+1
  9925  16E1  0824               	movf	?___ftneg+2,w
  9926  16E2  00AF               	movwf	___ftadd@f2+2
  9927  16E3  318A  22A0  3196   	fcall	___ftadd
  9928  16E6  0020               	movlb	0	; select bank0
  9929  16E7  082A               	movf	?___ftadd,w
  9930  16E8  00C7               	movwf	___ftdiv@f2
  9931  16E9  082B               	movf	?___ftadd+1,w
  9932  16EA  00C8               	movwf	___ftdiv@f2+1
  9933  16EB  082C               	movf	?___ftadd+2,w
  9934  16EC  00C9               	movwf	___ftdiv@f2+2
  9935  16ED  0863               	movf	map@out_max,w
  9936  16EE  00AA               	movwf	___ftadd@f1
  9937  16EF  0864               	movf	map@out_max+1,w
  9938  16F0  00AB               	movwf	___ftadd@f1+1
  9939  16F1  0865               	movf	map@out_max+2,w
  9940  16F2  00AC               	movwf	___ftadd@f1+2
  9941  16F3  0860               	movf	map@out_min,w
  9942  16F4  00A2               	movwf	___ftneg@f1
  9943  16F5  0861               	movf	map@out_min+1,w
  9944  16F6  00A3               	movwf	___ftneg@f1+1
  9945  16F7  0862               	movf	map@out_min+2,w
  9946  16F8  00A4               	movwf	___ftneg@f1+2
  9947  16F9  3190  2000  3196   	fcall	___ftneg
  9948  16FC  0020               	movlb	0	; select bank0
  9949  16FD  0822               	movf	?___ftneg,w
  9950  16FE  00AD               	movwf	___ftadd@f2
  9951  16FF  0823               	movf	?___ftneg+1,w
  9952  1700  00AE               	movwf	___ftadd@f2+1
  9953  1701  0824               	movf	?___ftneg+2,w
  9954  1702  00AF               	movwf	___ftadd@f2+2
  9955  1703  318A  22A0  3196   	fcall	___ftadd
  9956  1706  0020               	movlb	0	; select bank0
  9957  1707  082A               	movf	?___ftadd,w
  9958  1708  00B7               	movwf	___ftmul@f1
  9959  1709  082B               	movf	?___ftadd+1,w
  9960  170A  00B8               	movwf	___ftmul@f1+1
  9961  170B  082C               	movf	?___ftadd+2,w
  9962  170C  00B9               	movwf	___ftmul@f1+2
  9963  170D  0857               	movf	map@x,w
  9964  170E  00AA               	movwf	___ftadd@f1
  9965  170F  0858               	movf	map@x+1,w
  9966  1710  00AB               	movwf	___ftadd@f1+1
  9967  1711  0859               	movf	map@x+2,w
  9968  1712  00AC               	movwf	___ftadd@f1+2
  9969  1713  085A               	movf	map@in_min,w
  9970  1714  00A2               	movwf	___ftneg@f1
  9971  1715  085B               	movf	map@in_min+1,w
  9972  1716  00A3               	movwf	___ftneg@f1+1
  9973  1717  085C               	movf	map@in_min+2,w
  9974  1718  00A4               	movwf	___ftneg@f1+2
  9975  1719  3190  2000  3196   	fcall	___ftneg
  9976  171C  0020               	movlb	0	; select bank0
  9977  171D  0822               	movf	?___ftneg,w
  9978  171E  00AD               	movwf	___ftadd@f2
  9979  171F  0823               	movf	?___ftneg+1,w
  9980  1720  00AE               	movwf	___ftadd@f2+1
  9981  1721  0824               	movf	?___ftneg+2,w
  9982  1722  00AF               	movwf	___ftadd@f2+2
  9983  1723  318A  22A0  3196   	fcall	___ftadd
  9984  1726  0020               	movlb	0	; select bank0
  9985  1727  082A               	movf	?___ftadd,w
  9986  1728  00BA               	movwf	___ftmul@f2
  9987  1729  082B               	movf	?___ftadd+1,w
  9988  172A  00BB               	movwf	___ftmul@f2+1
  9989  172B  082C               	movf	?___ftadd+2,w
  9990  172C  00BC               	movwf	___ftmul@f2+2
  9991  172D  3188  2042  3196   	fcall	___ftmul
  9992  1730  0020               	movlb	0	; select bank0
  9993  1731  0837               	movf	?___ftmul,w
  9994  1732  00CA               	movwf	___ftdiv@f1
  9995  1733  0838               	movf	?___ftmul+1,w
  9996  1734  00CB               	movwf	___ftdiv@f1+1
  9997  1735  0839               	movf	?___ftmul+2,w
  9998  1736  00CC               	movwf	___ftdiv@f1+2
  9999  1737  3197  2757  3196   	fcall	___ftdiv
 10000  173A  0020               	movlb	0	; select bank0
 10001  173B  0847               	movf	?___ftdiv,w
 10002  173C  00E6               	movwf	_map$2160
 10003  173D  0848               	movf	?___ftdiv+1,w
 10004  173E  00E7               	movwf	_map$2160+1
 10005  173F  0849               	movf	?___ftdiv+2,w
 10006  1740  00E8               	movwf	_map$2160+2
 10007                           
 10008                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10009  1741  0860               	movf	map@out_min,w
 10010  1742  00AA               	movwf	___ftadd@f1
 10011  1743  0861               	movf	map@out_min+1,w
 10012  1744  00AB               	movwf	___ftadd@f1+1
 10013  1745  0862               	movf	map@out_min+2,w
 10014  1746  00AC               	movwf	___ftadd@f1+2
 10015  1747  0866               	movf	_map$2160,w
 10016  1748  00AD               	movwf	___ftadd@f2
 10017  1749  0867               	movf	_map$2160+1,w
 10018  174A  00AE               	movwf	___ftadd@f2+1
 10019  174B  0868               	movf	_map$2160+2,w
 10020  174C  00AF               	movwf	___ftadd@f2+2
 10021  174D  318A  22A0         	fcall	___ftadd
 10022  174F  0020               	movlb	0	; select bank0
 10023  1750  082A               	movf	?___ftadd,w
 10024  1751  00D7               	movwf	?_map
 10025  1752  082B               	movf	?___ftadd+1,w
 10026  1753  00D8               	movwf	?_map+1
 10027  1754  082C               	movf	?___ftadd+2,w
 10028  1755  00D9               	movwf	?_map+2
 10029  1756  0008               	return
 10030  1757                     __end_of_map:	
 10031                           
 10032                           	psect	text21
 10033  1000                     __ptext21:	
 10034 ;; *************** function ___ftneg *****************
 10035 ;; Defined at:
 10036 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;  f1              3    2[BANK0 ] float 
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  3    2[BANK0 ] float 
 10043 ;; Registers used:
 10044 ;;		wreg
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10050 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10053 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10054 ;;Total ram usage:        3 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    2
 10057 ;; This function calls:
 10058 ;;		Nothing
 10059 ;; This function is called by:
 10060 ;;		_map
 10061 ;;		_scalePotValue
 10062 ;; This function uses a non-reentrant model
 10063 ;;
 10064                           
 10065                           
 10066                           ;psect for function ___ftneg
 10067  1000                     ___ftneg:	
 10068                           
 10069                           ;incstack = 0
 10070                           ; Regs used in ___ftneg: [wreg]
 10071  1000  0020               	movlb	0	; select bank0
 10072  1001  0824               	movf	___ftneg@f1+2,w
 10073  1002  0423               	iorwf	___ftneg@f1+1,w
 10074  1003  0422               	iorwf	___ftneg@f1,w
 10075  1004  1903               	skipnz
 10076  1005  0008               	return
 10077  1006  3080               	movlw	128
 10078  1007  06A4               	xorwf	___ftneg@f1+2,f
 10079  1008  0008               	return
 10080  1009                     __end_of___ftneg:	
 10081                           
 10082                           	psect	text22
 10083  0842                     __ptext22:	
 10084 ;; *************** function ___ftmul *****************
 10085 ;; Defined at:
 10086 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  f1              3   23[BANK0 ] float 
 10089 ;;  f2              3   26[BANK0 ] float 
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
 10092 ;;  sign            1   38[BANK0 ] unsigned char 
 10093 ;;  cntr            1   37[BANK0 ] unsigned char 
 10094 ;;  exp             1   33[BANK0 ] unsigned char 
 10095 ;; Return value:  Size  Location     Type
 10096 ;;                  3   23[BANK0 ] float 
 10097 ;; Registers used:
 10098 ;;		wreg, status,2, status,0, pclath, cstack
 10099 ;; Tracked objects:
 10100 ;;		On entry : 0/0
 10101 ;;		On exit  : 0/0
 10102 ;;		Unchanged: 0/0
 10103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10104 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10105 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10106 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10107 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10108 ;;Total ram usage:       16 bytes
 10109 ;; Hardware stack levels used:    1
 10110 ;; Hardware stack levels required when called:    3
 10111 ;; This function calls:
 10112 ;;		___ftpack
 10113 ;; This function is called by:
 10114 ;;		_set_subdivision
 10115 ;;		_map
 10116 ;;		_scalePotValue
 10117 ;; This function uses a non-reentrant model
 10118 ;;
 10119                           
 10120                           
 10121                           ;psect for function ___ftmul
 10122  0842                     ___ftmul:	
 10123                           
 10124                           ;incstack = 0
 10125                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10126  0842  0020               	movlb	0	; select bank0
 10127  0843  0837               	movf	___ftmul@f1,w
 10128  0844  00BD               	movwf	??___ftmul
 10129  0845  0838               	movf	___ftmul@f1+1,w
 10130  0846  00BE               	movwf	??___ftmul+1
 10131  0847  0839               	movf	___ftmul@f1+2,w
 10132  0848  00BF               	movwf	??___ftmul+2
 10133  0849  1003               	clrc
 10134  084A  0D3E               	rlf	??___ftmul+1,w
 10135  084B  0D3F               	rlf	??___ftmul+2,w
 10136  084C  00C0               	movwf	??___ftmul+3
 10137  084D  0840               	movf	??___ftmul+3,w
 10138  084E  00C1               	movwf	___ftmul@exp
 10139  084F  0841               	movf	___ftmul@exp,w
 10140  0850  1D03               	btfss	3,2
 10141  0851  2859               	goto	l5212
 10142  0852  3000               	movlw	0
 10143  0853  00B7               	movwf	?___ftmul
 10144  0854  3000               	movlw	0
 10145  0855  00B8               	movwf	?___ftmul+1
 10146  0856  3000               	movlw	0
 10147  0857  00B9               	movwf	?___ftmul+2
 10148  0858  0008               	return
 10149  0859                     l5212:	
 10150  0859  083A               	movf	___ftmul@f2,w
 10151  085A  00BD               	movwf	??___ftmul
 10152  085B  083B               	movf	___ftmul@f2+1,w
 10153  085C  00BE               	movwf	??___ftmul+1
 10154  085D  083C               	movf	___ftmul@f2+2,w
 10155  085E  00BF               	movwf	??___ftmul+2
 10156  085F  1003               	clrc
 10157  0860  0D3E               	rlf	??___ftmul+1,w
 10158  0861  0D3F               	rlf	??___ftmul+2,w
 10159  0862  00C0               	movwf	??___ftmul+3
 10160  0863  0840               	movf	??___ftmul+3,w
 10161  0864  00C6               	movwf	___ftmul@sign
 10162  0865  0846               	movf	___ftmul@sign,w
 10163  0866  1D03               	btfss	3,2
 10164  0867  286F               	goto	l5218
 10165  0868  3000               	movlw	0
 10166  0869  00B7               	movwf	?___ftmul
 10167  086A  3000               	movlw	0
 10168  086B  00B8               	movwf	?___ftmul+1
 10169  086C  3000               	movlw	0
 10170  086D  00B9               	movwf	?___ftmul+2
 10171  086E  0008               	return
 10172  086F                     l5218:	
 10173  086F  0846               	movf	___ftmul@sign,w
 10174  0870  3E7B               	addlw	123
 10175  0871  00BD               	movwf	??___ftmul
 10176  0872  083D               	movf	??___ftmul,w
 10177  0873  07C1               	addwf	___ftmul@exp,f
 10178  0874  0837               	movf	___ftmul@f1,w
 10179  0875  00BD               	movwf	??___ftmul
 10180  0876  0838               	movf	___ftmul@f1+1,w
 10181  0877  00BE               	movwf	??___ftmul+1
 10182  0878  0839               	movf	___ftmul@f1+2,w
 10183  0879  00BF               	movwf	??___ftmul+2
 10184  087A  3010               	movlw	16
 10185  087B                     u5525:	
 10186  087B  36BF               	lsrf	??___ftmul+2,f
 10187  087C  0CBE               	rrf	??___ftmul+1,f
 10188  087D  0CBD               	rrf	??___ftmul,f
 10189  087E  0B89               	decfsz	9,f
 10190  087F  287B               	goto	u5525
 10191  0880  083D               	movf	??___ftmul,w
 10192  0881  00C0               	movwf	??___ftmul+3
 10193  0882  0840               	movf	??___ftmul+3,w
 10194  0883  00C6               	movwf	___ftmul@sign
 10195  0884  083A               	movf	___ftmul@f2,w
 10196  0885  00BD               	movwf	??___ftmul
 10197  0886  083B               	movf	___ftmul@f2+1,w
 10198  0887  00BE               	movwf	??___ftmul+1
 10199  0888  083C               	movf	___ftmul@f2+2,w
 10200  0889  00BF               	movwf	??___ftmul+2
 10201  088A  3010               	movlw	16
 10202  088B                     u5535:	
 10203  088B  36BF               	lsrf	??___ftmul+2,f
 10204  088C  0CBE               	rrf	??___ftmul+1,f
 10205  088D  0CBD               	rrf	??___ftmul,f
 10206  088E  0B89               	decfsz	9,f
 10207  088F  288B               	goto	u5535
 10208  0890  083D               	movf	??___ftmul,w
 10209  0891  00C0               	movwf	??___ftmul+3
 10210  0892  0840               	movf	??___ftmul+3,w
 10211  0893  06C6               	xorwf	___ftmul@sign,f
 10212  0894  3080               	movlw	128
 10213  0895  00BD               	movwf	??___ftmul
 10214  0896  083D               	movf	??___ftmul,w
 10215  0897  05C6               	andwf	___ftmul@sign,f
 10216  0898  17B8               	bsf	___ftmul@f1+1,7
 10217  0899  17BB               	bsf	___ftmul@f2+1,7
 10218  089A  30FF               	movlw	255
 10219  089B  05BA               	andwf	___ftmul@f2,f
 10220  089C  30FF               	movlw	255
 10221  089D  05BB               	andwf	___ftmul@f2+1,f
 10222  089E  3000               	movlw	0
 10223  089F  05BC               	andwf	___ftmul@f2+2,f
 10224  08A0  3000               	movlw	0
 10225  08A1  00C2               	movwf	___ftmul@f3_as_product
 10226  08A2  3000               	movlw	0
 10227  08A3  00C3               	movwf	___ftmul@f3_as_product+1
 10228  08A4  3000               	movlw	0
 10229  08A5  00C4               	movwf	___ftmul@f3_as_product+2
 10230  08A6  3007               	movlw	7
 10231  08A7  00BD               	movwf	??___ftmul
 10232  08A8  083D               	movf	??___ftmul,w
 10233  08A9  00C5               	movwf	___ftmul@cntr
 10234  08AA                     l5230:	
 10235  08AA  1C37               	btfss	___ftmul@f1,0
 10236  08AB  28B2               	goto	l5234
 10237  08AC  083A               	movf	___ftmul@f2,w
 10238  08AD  07C2               	addwf	___ftmul@f3_as_product,f
 10239  08AE  083B               	movf	___ftmul@f2+1,w
 10240  08AF  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10241  08B0  083C               	movf	___ftmul@f2+2,w
 10242  08B1  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10243  08B2                     l5234:	
 10244  08B2  3001               	movlw	1
 10245  08B3                     u5555:	
 10246  08B3  36B9               	lsrf	___ftmul@f1+2,f
 10247  08B4  0CB8               	rrf	___ftmul@f1+1,f
 10248  08B5  0CB7               	rrf	___ftmul@f1,f
 10249  08B6  0B89               	decfsz	9,f
 10250  08B7  28B3               	goto	u5555
 10251  08B8  3001               	movlw	1
 10252  08B9                     u5565:	
 10253  08B9  35BA               	lslf	___ftmul@f2,f
 10254  08BA  0DBB               	rlf	___ftmul@f2+1,f
 10255  08BB  0DBC               	rlf	___ftmul@f2+2,f
 10256  08BC  0B89               	decfsz	9,f
 10257  08BD  28B9               	goto	u5565
 10258  08BE  3001               	movlw	1
 10259  08BF  02C5               	subwf	___ftmul@cntr,f
 10260  08C0  1D03               	btfss	3,2
 10261  08C1  28AA               	goto	l5230
 10262  08C2  3009               	movlw	9
 10263  08C3  00BD               	movwf	??___ftmul
 10264  08C4  083D               	movf	??___ftmul,w
 10265  08C5  00C5               	movwf	___ftmul@cntr
 10266  08C6                     l5242:	
 10267  08C6  1C37               	btfss	___ftmul@f1,0
 10268  08C7  28CE               	goto	l5246
 10269  08C8  083A               	movf	___ftmul@f2,w
 10270  08C9  07C2               	addwf	___ftmul@f3_as_product,f
 10271  08CA  083B               	movf	___ftmul@f2+1,w
 10272  08CB  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10273  08CC  083C               	movf	___ftmul@f2+2,w
 10274  08CD  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10275  08CE                     l5246:	
 10276  08CE  3001               	movlw	1
 10277  08CF                     u5595:	
 10278  08CF  36B9               	lsrf	___ftmul@f1+2,f
 10279  08D0  0CB8               	rrf	___ftmul@f1+1,f
 10280  08D1  0CB7               	rrf	___ftmul@f1,f
 10281  08D2  0B89               	decfsz	9,f
 10282  08D3  28CF               	goto	u5595
 10283  08D4  3001               	movlw	1
 10284  08D5                     u5605:	
 10285  08D5  36C4               	lsrf	___ftmul@f3_as_product+2,f
 10286  08D6  0CC3               	rrf	___ftmul@f3_as_product+1,f
 10287  08D7  0CC2               	rrf	___ftmul@f3_as_product,f
 10288  08D8  0B89               	decfsz	9,f
 10289  08D9  28D5               	goto	u5605
 10290  08DA  3001               	movlw	1
 10291  08DB  02C5               	subwf	___ftmul@cntr,f
 10292  08DC  1D03               	btfss	3,2
 10293  08DD  28C6               	goto	l5242
 10294  08DE  0842               	movf	___ftmul@f3_as_product,w
 10295  08DF  00A2               	movwf	___ftpack@arg
 10296  08E0  0843               	movf	___ftmul@f3_as_product+1,w
 10297  08E1  00A3               	movwf	___ftpack@arg+1
 10298  08E2  0844               	movf	___ftmul@f3_as_product+2,w
 10299  08E3  00A4               	movwf	___ftpack@arg+2
 10300  08E4  0841               	movf	___ftmul@exp,w
 10301  08E5  00BD               	movwf	??___ftmul
 10302  08E6  083D               	movf	??___ftmul,w
 10303  08E7  00A5               	movwf	___ftpack@exp
 10304  08E8  0846               	movf	___ftmul@sign,w
 10305  08E9  00BE               	movwf	??___ftmul+1
 10306  08EA  083E               	movf	??___ftmul+1,w
 10307  08EB  00A6               	movwf	___ftpack@sign
 10308  08EC  3194  24EF         	fcall	___ftpack
 10309  08EE  0020               	movlb	0	; select bank0
 10310  08EF  0822               	movf	?___ftpack,w
 10311  08F0  00B7               	movwf	?___ftmul
 10312  08F1  0823               	movf	?___ftpack+1,w
 10313  08F2  00B8               	movwf	?___ftmul+1
 10314  08F3  0824               	movf	?___ftpack+2,w
 10315  08F4  00B9               	movwf	?___ftmul+2
 10316  08F5  0008               	return
 10317  08F6                     __end_of___ftmul:	
 10318                           
 10319                           	psect	text23
 10320  1757                     __ptext23:	
 10321 ;; *************** function ___ftdiv *****************
 10322 ;; Defined at:
 10323 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10324 ;; Parameters:    Size  Location     Type
 10325 ;;  f2              3   39[BANK0 ] float 
 10326 ;;  f1              3   42[BANK0 ] float 
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;  f3              3   50[BANK0 ] float 
 10329 ;;  sign            1   54[BANK0 ] unsigned char 
 10330 ;;  exp             1   53[BANK0 ] unsigned char 
 10331 ;;  cntr            1   49[BANK0 ] unsigned char 
 10332 ;; Return value:  Size  Location     Type
 10333 ;;                  3   39[BANK0 ] float 
 10334 ;; Registers used:
 10335 ;;		wreg, status,2, status,0, pclath, cstack
 10336 ;; Tracked objects:
 10337 ;;		On entry : 0/0
 10338 ;;		On exit  : 0/0
 10339 ;;		Unchanged: 0/0
 10340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10341 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10342 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10343 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10344 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10345 ;;Total ram usage:       16 bytes
 10346 ;; Hardware stack levels used:    1
 10347 ;; Hardware stack levels required when called:    3
 10348 ;; This function calls:
 10349 ;;		___ftpack
 10350 ;; This function is called by:
 10351 ;;		_main
 10352 ;;		_set_subdivision
 10353 ;;		_map
 10354 ;;		_scalePotValue
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function ___ftdiv
 10360  1757                     ___ftdiv:	
 10361                           
 10362                           ;incstack = 0
 10363                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10364  1757  0020               	movlb	0	; select bank0
 10365  1758  084A               	movf	___ftdiv@f1,w
 10366  1759  00CD               	movwf	??___ftdiv
 10367  175A  084B               	movf	___ftdiv@f1+1,w
 10368  175B  00CE               	movwf	??___ftdiv+1
 10369  175C  084C               	movf	___ftdiv@f1+2,w
 10370  175D  00CF               	movwf	??___ftdiv+2
 10371  175E  1003               	clrc
 10372  175F  0D4E               	rlf	??___ftdiv+1,w
 10373  1760  0D4F               	rlf	??___ftdiv+2,w
 10374  1761  00D0               	movwf	??___ftdiv+3
 10375  1762  0850               	movf	??___ftdiv+3,w
 10376  1763  00D5               	movwf	___ftdiv@exp
 10377  1764  0855               	movf	___ftdiv@exp,w
 10378  1765  1D03               	btfss	3,2
 10379  1766  2F6E               	goto	l5170
 10380  1767  3000               	movlw	0
 10381  1768  00C7               	movwf	?___ftdiv
 10382  1769  3000               	movlw	0
 10383  176A  00C8               	movwf	?___ftdiv+1
 10384  176B  3000               	movlw	0
 10385  176C  00C9               	movwf	?___ftdiv+2
 10386  176D  0008               	return
 10387  176E                     l5170:	
 10388  176E  0847               	movf	___ftdiv@f2,w
 10389  176F  00CD               	movwf	??___ftdiv
 10390  1770  0848               	movf	___ftdiv@f2+1,w
 10391  1771  00CE               	movwf	??___ftdiv+1
 10392  1772  0849               	movf	___ftdiv@f2+2,w
 10393  1773  00CF               	movwf	??___ftdiv+2
 10394  1774  1003               	clrc
 10395  1775  0D4E               	rlf	??___ftdiv+1,w
 10396  1776  0D4F               	rlf	??___ftdiv+2,w
 10397  1777  00D0               	movwf	??___ftdiv+3
 10398  1778  0850               	movf	??___ftdiv+3,w
 10399  1779  00D6               	movwf	___ftdiv@sign
 10400  177A  0856               	movf	___ftdiv@sign,w
 10401  177B  1D03               	btfss	3,2
 10402  177C  2F84               	goto	l5176
 10403  177D  3000               	movlw	0
 10404  177E  00C7               	movwf	?___ftdiv
 10405  177F  3000               	movlw	0
 10406  1780  00C8               	movwf	?___ftdiv+1
 10407  1781  3000               	movlw	0
 10408  1782  00C9               	movwf	?___ftdiv+2
 10409  1783  0008               	return
 10410  1784                     l5176:	
 10411  1784  3000               	movlw	0
 10412  1785  00D2               	movwf	___ftdiv@f3
 10413  1786  3000               	movlw	0
 10414  1787  00D3               	movwf	___ftdiv@f3+1
 10415  1788  3000               	movlw	0
 10416  1789  00D4               	movwf	___ftdiv@f3+2
 10417  178A  3089               	movlw	137
 10418  178B  0756               	addwf	___ftdiv@sign,w
 10419  178C  00CD               	movwf	??___ftdiv
 10420  178D  084D               	movf	??___ftdiv,w
 10421  178E  02D5               	subwf	___ftdiv@exp,f
 10422  178F  084A               	movf	___ftdiv@f1,w
 10423  1790  00CD               	movwf	??___ftdiv
 10424  1791  084B               	movf	___ftdiv@f1+1,w
 10425  1792  00CE               	movwf	??___ftdiv+1
 10426  1793  084C               	movf	___ftdiv@f1+2,w
 10427  1794  00CF               	movwf	??___ftdiv+2
 10428  1795  3010               	movlw	16
 10429  1796                     u5445:	
 10430  1796  36CF               	lsrf	??___ftdiv+2,f
 10431  1797  0CCE               	rrf	??___ftdiv+1,f
 10432  1798  0CCD               	rrf	??___ftdiv,f
 10433  1799  0B89               	decfsz	9,f
 10434  179A  2F96               	goto	u5445
 10435  179B  084D               	movf	??___ftdiv,w
 10436  179C  00D0               	movwf	??___ftdiv+3
 10437  179D  0850               	movf	??___ftdiv+3,w
 10438  179E  00D6               	movwf	___ftdiv@sign
 10439  179F  0847               	movf	___ftdiv@f2,w
 10440  17A0  00CD               	movwf	??___ftdiv
 10441  17A1  0848               	movf	___ftdiv@f2+1,w
 10442  17A2  00CE               	movwf	??___ftdiv+1
 10443  17A3  0849               	movf	___ftdiv@f2+2,w
 10444  17A4  00CF               	movwf	??___ftdiv+2
 10445  17A5  3010               	movlw	16
 10446  17A6                     u5455:	
 10447  17A6  36CF               	lsrf	??___ftdiv+2,f
 10448  17A7  0CCE               	rrf	??___ftdiv+1,f
 10449  17A8  0CCD               	rrf	??___ftdiv,f
 10450  17A9  0B89               	decfsz	9,f
 10451  17AA  2FA6               	goto	u5455
 10452  17AB  084D               	movf	??___ftdiv,w
 10453  17AC  00D0               	movwf	??___ftdiv+3
 10454  17AD  0850               	movf	??___ftdiv+3,w
 10455  17AE  06D6               	xorwf	___ftdiv@sign,f
 10456  17AF  3080               	movlw	128
 10457  17B0  00CD               	movwf	??___ftdiv
 10458  17B1  084D               	movf	??___ftdiv,w
 10459  17B2  05D6               	andwf	___ftdiv@sign,f
 10460  17B3  17CB               	bsf	___ftdiv@f1+1,7
 10461  17B4  30FF               	movlw	255
 10462  17B5  05CA               	andwf	___ftdiv@f1,f
 10463  17B6  30FF               	movlw	255
 10464  17B7  05CB               	andwf	___ftdiv@f1+1,f
 10465  17B8  3000               	movlw	0
 10466  17B9  05CC               	andwf	___ftdiv@f1+2,f
 10467  17BA  17C8               	bsf	___ftdiv@f2+1,7
 10468  17BB  30FF               	movlw	255
 10469  17BC  05C7               	andwf	___ftdiv@f2,f
 10470  17BD  30FF               	movlw	255
 10471  17BE  05C8               	andwf	___ftdiv@f2+1,f
 10472  17BF  3000               	movlw	0
 10473  17C0  05C9               	andwf	___ftdiv@f2+2,f
 10474  17C1  3018               	movlw	24
 10475  17C2  00CD               	movwf	??___ftdiv
 10476  17C3  084D               	movf	??___ftdiv,w
 10477  17C4  00D1               	movwf	___ftdiv@cntr
 10478  17C5                     l5190:	
 10479  17C5  3001               	movlw	1
 10480  17C6                     u5465:	
 10481  17C6  35D2               	lslf	___ftdiv@f3,f
 10482  17C7  0DD3               	rlf	___ftdiv@f3+1,f
 10483  17C8  0DD4               	rlf	___ftdiv@f3+2,f
 10484  17C9  0B89               	decfsz	9,f
 10485  17CA  2FC6               	goto	u5465
 10486  17CB  0849               	movf	___ftdiv@f2+2,w
 10487  17CC  024C               	subwf	___ftdiv@f1+2,w
 10488  17CD  1D03               	skipz
 10489  17CE  2FD5               	goto	u5475
 10490  17CF  0848               	movf	___ftdiv@f2+1,w
 10491  17D0  024B               	subwf	___ftdiv@f1+1,w
 10492  17D1  1D03               	skipz
 10493  17D2  2FD5               	goto	u5475
 10494  17D3  0847               	movf	___ftdiv@f2,w
 10495  17D4  024A               	subwf	___ftdiv@f1,w
 10496  17D5                     u5475:	
 10497  17D5  1C03               	skipc
 10498  17D6  2FDE               	goto	l5198
 10499  17D7  0847               	movf	___ftdiv@f2,w
 10500  17D8  02CA               	subwf	___ftdiv@f1,f
 10501  17D9  0848               	movf	___ftdiv@f2+1,w
 10502  17DA  3BCB               	subwfb	___ftdiv@f1+1,f
 10503  17DB  0849               	movf	___ftdiv@f2+2,w
 10504  17DC  3BCC               	subwfb	___ftdiv@f1+2,f
 10505  17DD  1452               	bsf	___ftdiv@f3,0
 10506  17DE                     l5198:	
 10507  17DE  3001               	movlw	1
 10508  17DF                     u5485:	
 10509  17DF  35CA               	lslf	___ftdiv@f1,f
 10510  17E0  0DCB               	rlf	___ftdiv@f1+1,f
 10511  17E1  0DCC               	rlf	___ftdiv@f1+2,f
 10512  17E2  0B89               	decfsz	9,f
 10513  17E3  2FDF               	goto	u5485
 10514  17E4  3001               	movlw	1
 10515  17E5  02D1               	subwf	___ftdiv@cntr,f
 10516  17E6  1D03               	btfss	3,2
 10517  17E7  2FC5               	goto	l5190
 10518  17E8  0852               	movf	___ftdiv@f3,w
 10519  17E9  00A2               	movwf	___ftpack@arg
 10520  17EA  0853               	movf	___ftdiv@f3+1,w
 10521  17EB  00A3               	movwf	___ftpack@arg+1
 10522  17EC  0854               	movf	___ftdiv@f3+2,w
 10523  17ED  00A4               	movwf	___ftpack@arg+2
 10524  17EE  0855               	movf	___ftdiv@exp,w
 10525  17EF  00CD               	movwf	??___ftdiv
 10526  17F0  084D               	movf	??___ftdiv,w
 10527  17F1  00A5               	movwf	___ftpack@exp
 10528  17F2  0856               	movf	___ftdiv@sign,w
 10529  17F3  00CE               	movwf	??___ftdiv+1
 10530  17F4  084E               	movf	??___ftdiv+1,w
 10531  17F5  00A6               	movwf	___ftpack@sign
 10532  17F6  3194  24EF         	fcall	___ftpack
 10533  17F8  0020               	movlb	0	; select bank0
 10534  17F9  0822               	movf	?___ftpack,w
 10535  17FA  00C7               	movwf	?___ftdiv
 10536  17FB  0823               	movf	?___ftpack+1,w
 10537  17FC  00C8               	movwf	?___ftdiv+1
 10538  17FD  0824               	movf	?___ftpack+2,w
 10539  17FE  00C9               	movwf	?___ftdiv+2
 10540  17FF  0008               	return
 10541  1800                     __end_of___ftdiv:	
 10542                           
 10543                           	psect	text24
 10544  0AA0                     __ptext24:	
 10545 ;; *************** function ___ftadd *****************
 10546 ;; Defined at:
 10547 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;  f1              3   10[BANK0 ] float 
 10550 ;;  f2              3   13[BANK0 ] float 
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;  exp1            1   22[BANK0 ] unsigned char 
 10553 ;;  exp2            1   21[BANK0 ] unsigned char 
 10554 ;;  sign            1   20[BANK0 ] unsigned char 
 10555 ;; Return value:  Size  Location     Type
 10556 ;;                  3   10[BANK0 ] float 
 10557 ;; Registers used:
 10558 ;;		wreg, status,2, status,0, pclath, cstack
 10559 ;; Tracked objects:
 10560 ;;		On entry : 0/0
 10561 ;;		On exit  : 0/0
 10562 ;;		Unchanged: 0/0
 10563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10564 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10565 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10566 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10567 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10568 ;;Total ram usage:       13 bytes
 10569 ;; Hardware stack levels used:    1
 10570 ;; Hardware stack levels required when called:    3
 10571 ;; This function calls:
 10572 ;;		___ftpack
 10573 ;; This function is called by:
 10574 ;;		_map
 10575 ;;		_scalePotValue
 10576 ;; This function uses a non-reentrant model
 10577 ;;
 10578                           
 10579                           
 10580                           ;psect for function ___ftadd
 10581  0AA0                     ___ftadd:	
 10582                           
 10583                           ;incstack = 0
 10584                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10585  0AA0  0020               	movlb	0	; select bank0
 10586  0AA1  082A               	movf	___ftadd@f1,w
 10587  0AA2  00B0               	movwf	??___ftadd
 10588  0AA3  082B               	movf	___ftadd@f1+1,w
 10589  0AA4  00B1               	movwf	??___ftadd+1
 10590  0AA5  082C               	movf	___ftadd@f1+2,w
 10591  0AA6  00B2               	movwf	??___ftadd+2
 10592  0AA7  1003               	clrc
 10593  0AA8  0D31               	rlf	??___ftadd+1,w
 10594  0AA9  0D32               	rlf	??___ftadd+2,w
 10595  0AAA  00B3               	movwf	??___ftadd+3
 10596  0AAB  0833               	movf	??___ftadd+3,w
 10597  0AAC  00B6               	movwf	___ftadd@exp1
 10598  0AAD  082D               	movf	___ftadd@f2,w
 10599  0AAE  00B0               	movwf	??___ftadd
 10600  0AAF  082E               	movf	___ftadd@f2+1,w
 10601  0AB0  00B1               	movwf	??___ftadd+1
 10602  0AB1  082F               	movf	___ftadd@f2+2,w
 10603  0AB2  00B2               	movwf	??___ftadd+2
 10604  0AB3  1003               	clrc
 10605  0AB4  0D31               	rlf	??___ftadd+1,w
 10606  0AB5  0D32               	rlf	??___ftadd+2,w
 10607  0AB6  00B3               	movwf	??___ftadd+3
 10608  0AB7  0833               	movf	??___ftadd+3,w
 10609  0AB8  00B5               	movwf	___ftadd@exp2
 10610  0AB9  0836               	movf	___ftadd@exp1,w
 10611  0ABA  1903               	btfsc	3,2
 10612  0ABB  2AC8               	goto	l5100
 10613  0ABC  0835               	movf	___ftadd@exp2,w
 10614  0ABD  0236               	subwf	___ftadd@exp1,w
 10615  0ABE  1803               	skipnc
 10616  0ABF  2ACF               	goto	l5104
 10617  0AC0  0336               	decf	___ftadd@exp1,w
 10618  0AC1  3AFF               	xorlw	255
 10619  0AC2  0735               	addwf	___ftadd@exp2,w
 10620  0AC3  00B0               	movwf	??___ftadd
 10621  0AC4  3019               	movlw	25
 10622  0AC5  0230               	subwf	??___ftadd,w
 10623  0AC6  1C03               	skipc
 10624  0AC7  2ACF               	goto	l5104
 10625  0AC8                     l5100:	
 10626  0AC8  082D               	movf	___ftadd@f2,w
 10627  0AC9  00AA               	movwf	?___ftadd
 10628  0ACA  082E               	movf	___ftadd@f2+1,w
 10629  0ACB  00AB               	movwf	?___ftadd+1
 10630  0ACC  082F               	movf	___ftadd@f2+2,w
 10631  0ACD  00AC               	movwf	?___ftadd+2
 10632  0ACE  0008               	return
 10633  0ACF                     l5104:	
 10634  0ACF  0835               	movf	___ftadd@exp2,w
 10635  0AD0  1903               	btfsc	3,2
 10636  0AD1  0008               	return
 10637  0AD2  0836               	movf	___ftadd@exp1,w
 10638  0AD3  0235               	subwf	___ftadd@exp2,w
 10639  0AD4  1803               	skipnc
 10640  0AD5  2ADE               	goto	l5110
 10641  0AD6  0335               	decf	___ftadd@exp2,w
 10642  0AD7  3AFF               	xorlw	255
 10643  0AD8  0736               	addwf	___ftadd@exp1,w
 10644  0AD9  00B0               	movwf	??___ftadd
 10645  0ADA  3019               	movlw	25
 10646  0ADB  0230               	subwf	??___ftadd,w
 10647  0ADC  1803               	btfsc	3,0
 10648  0ADD  0008               	return
 10649  0ADE                     l5110:	
 10650  0ADE  3006               	movlw	6
 10651  0ADF  00B0               	movwf	??___ftadd
 10652  0AE0  0830               	movf	??___ftadd,w
 10653  0AE1  00B4               	movwf	___ftadd@sign
 10654  0AE2  1BAC               	btfsc	___ftadd@f1+2,7
 10655  0AE3  17B4               	bsf	___ftadd@sign,7
 10656  0AE4  1BAF               	btfsc	___ftadd@f2+2,7
 10657  0AE5  1734               	bsf	___ftadd@sign,6
 10658  0AE6  17AB               	bsf	___ftadd@f1+1,7
 10659  0AE7  30FF               	movlw	255
 10660  0AE8  05AA               	andwf	___ftadd@f1,f
 10661  0AE9  30FF               	movlw	255
 10662  0AEA  05AB               	andwf	___ftadd@f1+1,f
 10663  0AEB  3000               	movlw	0
 10664  0AEC  05AC               	andwf	___ftadd@f1+2,f
 10665  0AED  17AE               	bsf	___ftadd@f2+1,7
 10666  0AEE  30FF               	movlw	255
 10667  0AEF  05AD               	andwf	___ftadd@f2,f
 10668  0AF0  30FF               	movlw	255
 10669  0AF1  05AE               	andwf	___ftadd@f2+1,f
 10670  0AF2  3000               	movlw	0
 10671  0AF3  05AF               	andwf	___ftadd@f2+2,f
 10672  0AF4  0835               	movf	___ftadd@exp2,w
 10673  0AF5  0236               	subwf	___ftadd@exp1,w
 10674  0AF6  1803               	skipnc
 10675  0AF7  2B1A               	goto	l5132
 10676  0AF8                     l5122:	
 10677  0AF8  3001               	movlw	1
 10678  0AF9                     u5285:	
 10679  0AF9  35AD               	lslf	___ftadd@f2,f
 10680  0AFA  0DAE               	rlf	___ftadd@f2+1,f
 10681  0AFB  0DAF               	rlf	___ftadd@f2+2,f
 10682  0AFC  0B89               	decfsz	9,f
 10683  0AFD  2AF9               	goto	u5285
 10684  0AFE  3001               	movlw	1
 10685  0AFF  02B5               	subwf	___ftadd@exp2,f
 10686  0B00  0835               	movf	___ftadd@exp2,w
 10687  0B01  0636               	xorwf	___ftadd@exp1,w
 10688  0B02  1903               	skipnz
 10689  0B03  2B15               	goto	l5130
 10690  0B04  3001               	movlw	1
 10691  0B05  02B4               	subwf	___ftadd@sign,f
 10692  0B06  0834               	movf	___ftadd@sign,w
 10693  0B07  3907               	andlw	7
 10694  0B08  1903               	btfsc	3,2
 10695  0B09  2B15               	goto	l5130
 10696  0B0A  2AF8               	goto	l5122
 10697  0B0B                     l5128:	
 10698  0B0B  3001               	movlw	1
 10699  0B0C                     u5315:	
 10700  0B0C  36AC               	lsrf	___ftadd@f1+2,f
 10701  0B0D  0CAB               	rrf	___ftadd@f1+1,f
 10702  0B0E  0CAA               	rrf	___ftadd@f1,f
 10703  0B0F  0B89               	decfsz	9,f
 10704  0B10  2B0C               	goto	u5315
 10705  0B11  3001               	movlw	1
 10706  0B12  00B0               	movwf	??___ftadd
 10707  0B13  0830               	movf	??___ftadd,w
 10708  0B14  07B6               	addwf	___ftadd@exp1,f
 10709  0B15                     l5130:	
 10710  0B15  0836               	movf	___ftadd@exp1,w
 10711  0B16  0635               	xorwf	___ftadd@exp2,w
 10712  0B17  1903               	btfsc	3,2
 10713  0B18  2B3F               	goto	l1508
 10714  0B19  2B0B               	goto	l5128
 10715  0B1A                     l5132:	
 10716  0B1A  0836               	movf	___ftadd@exp1,w
 10717  0B1B  0235               	subwf	___ftadd@exp2,w
 10718  0B1C  1803               	skipnc
 10719  0B1D  2B3F               	goto	l1508
 10720  0B1E                     l5134:	
 10721  0B1E  3001               	movlw	1
 10722  0B1F                     u5345:	
 10723  0B1F  35AA               	lslf	___ftadd@f1,f
 10724  0B20  0DAB               	rlf	___ftadd@f1+1,f
 10725  0B21  0DAC               	rlf	___ftadd@f1+2,f
 10726  0B22  0B89               	decfsz	9,f
 10727  0B23  2B1F               	goto	u5345
 10728  0B24  3001               	movlw	1
 10729  0B25  02B6               	subwf	___ftadd@exp1,f
 10730  0B26  0835               	movf	___ftadd@exp2,w
 10731  0B27  0636               	xorwf	___ftadd@exp1,w
 10732  0B28  1903               	skipnz
 10733  0B29  2B3B               	goto	l5142
 10734  0B2A  3001               	movlw	1
 10735  0B2B  02B4               	subwf	___ftadd@sign,f
 10736  0B2C  0834               	movf	___ftadd@sign,w
 10737  0B2D  3907               	andlw	7
 10738  0B2E  1903               	btfsc	3,2
 10739  0B2F  2B3B               	goto	l5142
 10740  0B30  2B1E               	goto	l5134
 10741  0B31                     l5140:	
 10742  0B31  3001               	movlw	1
 10743  0B32                     u5375:	
 10744  0B32  36AF               	lsrf	___ftadd@f2+2,f
 10745  0B33  0CAE               	rrf	___ftadd@f2+1,f
 10746  0B34  0CAD               	rrf	___ftadd@f2,f
 10747  0B35  0B89               	decfsz	9,f
 10748  0B36  2B32               	goto	u5375
 10749  0B37  3001               	movlw	1
 10750  0B38  00B0               	movwf	??___ftadd
 10751  0B39  0830               	movf	??___ftadd,w
 10752  0B3A  07B5               	addwf	___ftadd@exp2,f
 10753  0B3B                     l5142:	
 10754  0B3B  0836               	movf	___ftadd@exp1,w
 10755  0B3C  0635               	xorwf	___ftadd@exp2,w
 10756  0B3D  1D03               	skipz
 10757  0B3E  2B31               	goto	l5140
 10758  0B3F                     l1508:	
 10759  0B3F  1FB4               	btfss	___ftadd@sign,7
 10760  0B40  2B51               	goto	l5146
 10761  0B41  30FF               	movlw	255
 10762  0B42  06AA               	xorwf	___ftadd@f1,f
 10763  0B43  30FF               	movlw	255
 10764  0B44  06AB               	xorwf	___ftadd@f1+1,f
 10765  0B45  30FF               	movlw	255
 10766  0B46  06AC               	xorwf	___ftadd@f1+2,f
 10767  0B47  3001               	movlw	1
 10768  0B48  07AA               	addwf	___ftadd@f1,f
 10769  0B49  3000               	movlw	0
 10770  0B4A  1803               	skipnc
 10771  0B4B  3001               	movlw	1
 10772  0B4C  07AB               	addwf	___ftadd@f1+1,f
 10773  0B4D  3000               	movlw	0
 10774  0B4E  1803               	skipnc
 10775  0B4F  3001               	movlw	1
 10776  0B50  07AC               	addwf	___ftadd@f1+2,f
 10777  0B51                     l5146:	
 10778  0B51  1F34               	btfss	___ftadd@sign,6
 10779  0B52  2B63               	goto	l5150
 10780  0B53  30FF               	movlw	255
 10781  0B54  06AD               	xorwf	___ftadd@f2,f
 10782  0B55  30FF               	movlw	255
 10783  0B56  06AE               	xorwf	___ftadd@f2+1,f
 10784  0B57  30FF               	movlw	255
 10785  0B58  06AF               	xorwf	___ftadd@f2+2,f
 10786  0B59  3001               	movlw	1
 10787  0B5A  07AD               	addwf	___ftadd@f2,f
 10788  0B5B  3000               	movlw	0
 10789  0B5C  1803               	skipnc
 10790  0B5D  3001               	movlw	1
 10791  0B5E  07AE               	addwf	___ftadd@f2+1,f
 10792  0B5F  3000               	movlw	0
 10793  0B60  1803               	skipnc
 10794  0B61  3001               	movlw	1
 10795  0B62  07AF               	addwf	___ftadd@f2+2,f
 10796  0B63                     l5150:	
 10797  0B63  01B4               	clrf	___ftadd@sign
 10798  0B64  082A               	movf	___ftadd@f1,w
 10799  0B65  07AD               	addwf	___ftadd@f2,f
 10800  0B66  082B               	movf	___ftadd@f1+1,w
 10801  0B67  3DAE               	addwfc	___ftadd@f2+1,f
 10802  0B68  082C               	movf	___ftadd@f1+2,w
 10803  0B69  3DAF               	addwfc	___ftadd@f2+2,f
 10804  0B6A  1FAF               	btfss	___ftadd@f2+2,7
 10805  0B6B  2B7E               	goto	l5160
 10806  0B6C  30FF               	movlw	255
 10807  0B6D  06AD               	xorwf	___ftadd@f2,f
 10808  0B6E  30FF               	movlw	255
 10809  0B6F  06AE               	xorwf	___ftadd@f2+1,f
 10810  0B70  30FF               	movlw	255
 10811  0B71  06AF               	xorwf	___ftadd@f2+2,f
 10812  0B72  3001               	movlw	1
 10813  0B73  07AD               	addwf	___ftadd@f2,f
 10814  0B74  3000               	movlw	0
 10815  0B75  1803               	skipnc
 10816  0B76  3001               	movlw	1
 10817  0B77  07AE               	addwf	___ftadd@f2+1,f
 10818  0B78  3000               	movlw	0
 10819  0B79  1803               	skipnc
 10820  0B7A  3001               	movlw	1
 10821  0B7B  07AF               	addwf	___ftadd@f2+2,f
 10822  0B7C  01B4               	clrf	___ftadd@sign
 10823  0B7D  0AB4               	incf	___ftadd@sign,f
 10824  0B7E                     l5160:	
 10825  0B7E  082D               	movf	___ftadd@f2,w
 10826  0B7F  00A2               	movwf	___ftpack@arg
 10827  0B80  082E               	movf	___ftadd@f2+1,w
 10828  0B81  00A3               	movwf	___ftpack@arg+1
 10829  0B82  082F               	movf	___ftadd@f2+2,w
 10830  0B83  00A4               	movwf	___ftpack@arg+2
 10831  0B84  0836               	movf	___ftadd@exp1,w
 10832  0B85  00B0               	movwf	??___ftadd
 10833  0B86  0830               	movf	??___ftadd,w
 10834  0B87  00A5               	movwf	___ftpack@exp
 10835  0B88  0834               	movf	___ftadd@sign,w
 10836  0B89  00B1               	movwf	??___ftadd+1
 10837  0B8A  0831               	movf	??___ftadd+1,w
 10838  0B8B  00A6               	movwf	___ftpack@sign
 10839  0B8C  3194  24EF         	fcall	___ftpack
 10840  0B8E  0020               	movlb	0	; select bank0
 10841  0B8F  0822               	movf	?___ftpack,w
 10842  0B90  00AA               	movwf	?___ftadd
 10843  0B91  0823               	movf	?___ftpack+1,w
 10844  0B92  00AB               	movwf	?___ftadd+1
 10845  0B93  0824               	movf	?___ftpack+2,w
 10846  0B94  00AC               	movwf	?___ftadd+2
 10847  0B95  0008               	return
 10848  0B96                     __end_of___ftadd:	
 10849                           
 10850                           	psect	text25
 10851  1E13                     __ptext25:	
 10852 ;; *************** function _initSwitchBypass *****************
 10853 ;; Defined at:
 10854 ;;		line 29 in file "SwitchBypass.c"
 10855 ;; Parameters:    Size  Location     Type
 10856 ;;		None
 10857 ;; Auto vars:     Size  Location     Type
 10858 ;;  initState       2   24[BANK0 ] int 
 10859 ;; Return value:  Size  Location     Type
 10860 ;;                  1    wreg      void 
 10861 ;; Registers used:
 10862 ;;		wreg, status,2, status,0, pclath, cstack
 10863 ;; Tracked objects:
 10864 ;;		On entry : 0/0
 10865 ;;		On exit  : 0/0
 10866 ;;		Unchanged: 0/0
 10867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10870 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10872 ;;Total ram usage:        2 bytes
 10873 ;; Hardware stack levels used:    1
 10874 ;; Hardware stack levels required when called:    5
 10875 ;; This function calls:
 10876 ;;		_getSwitchBypassState
 10877 ;;		_setSwitchBypassState
 10878 ;; This function is called by:
 10879 ;;		_main
 10880 ;; This function uses a non-reentrant model
 10881 ;;
 10882                           
 10883                           
 10884                           ;psect for function _initSwitchBypass
 10885  1E13                     _initSwitchBypass:	
 10886                           
 10887                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10888                           
 10889                           ;incstack = 0
 10890                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10891  1E13  319D  25DD  319E   	fcall	_getSwitchBypassState
 10892  1E16  0020               	movlb	0	; select bank0
 10893  1E17  0823               	movf	?_getSwitchBypassState+1,w
 10894  1E18  00B9               	movwf	initSwitchBypass@initState+1
 10895  1E19  0822               	movf	?_getSwitchBypassState,w
 10896  1E1A  00B8               	movwf	initSwitchBypass@initState
 10897                           
 10898                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10899  1E1B  0839               	movf	initSwitchBypass@initState+1,w
 10900  1E1C  00B5               	movwf	setSwitchBypassState@f_state+1
 10901  1E1D  0838               	movf	initSwitchBypass@initState,w
 10902  1E1E  00B4               	movwf	setSwitchBypassState@f_state
 10903  1E1F  3192  2238         	fcall	_setSwitchBypassState
 10904  1E21  0008               	return
 10905  1E22                     __end_of_initSwitchBypass:	
 10906                           
 10907                           	psect	text26
 10908  1238                     __ptext26:	
 10909 ;; *************** function _setSwitchBypassState *****************
 10910 ;; Defined at:
 10911 ;;		line 134 in file "SwitchBypass.c"
 10912 ;; Parameters:    Size  Location     Type
 10913 ;;  f_state         2   20[BANK0 ] int 
 10914 ;; Auto vars:     Size  Location     Type
 10915 ;;		None
 10916 ;; Return value:  Size  Location     Type
 10917 ;;                  1    wreg      void 
 10918 ;; Registers used:
 10919 ;;		wreg, status,2, status,0, pclath, cstack
 10920 ;; Tracked objects:
 10921 ;;		On entry : 0/0
 10922 ;;		On exit  : 0/0
 10923 ;;		Unchanged: 0/0
 10924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10929 ;;Total ram usage:        4 bytes
 10930 ;; Hardware stack levels used:    1
 10931 ;; Hardware stack levels required when called:    4
 10932 ;; This function calls:
 10933 ;;		_updateSwitchBypassState
 10934 ;;		_wait_ms
 10935 ;; This function is called by:
 10936 ;;		_initSwitchBypass
 10937 ;;		_updateSwitchBypass
 10938 ;; This function uses a non-reentrant model
 10939 ;;
 10940                           
 10941                           
 10942                           ;psect for function _setSwitchBypassState
 10943  1238                     _setSwitchBypassState:	
 10944                           
 10945                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10946                           
 10947                           ;incstack = 0
 10948                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10949  1238  087D               	movf	_switchBypass_state,w
 10950  1239  0020               	movlb	0	; select bank0
 10951  123A  00B6               	movwf	??_setSwitchBypassState
 10952  123B  01B7               	clrf	??_setSwitchBypassState+1
 10953  123C  0835               	movf	setSwitchBypassState@f_state+1,w
 10954  123D  0637               	xorwf	??_setSwitchBypassState+1,w
 10955  123E  1D03               	skipz
 10956  123F  2A42               	goto	u4975
 10957  1240  0834               	movf	setSwitchBypassState@f_state,w
 10958  1241  0636               	xorwf	??_setSwitchBypassState,w
 10959  1242                     u4975:	
 10960  1242  1903               	btfsc	3,2
 10961  1243  0008               	return
 10962                           
 10963                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10964  1244  0834               	movf	setSwitchBypassState@f_state,w
 10965  1245  00B6               	movwf	??_setSwitchBypassState
 10966  1246  0836               	movf	??_setSwitchBypassState,w
 10967  1247  00FD               	movwf	_switchBypass_state
 10968                           
 10969                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10970  1248  0C34               	rrf	setSwitchBypassState@f_state,w
 10971  1249  0022               	movlb	2	; select bank2
 10972  124A  1C03               	skipc
 10973  124B  110D               	bcf	13,2	;volatile
 10974  124C  1803               	skipnc
 10975  124D  150D               	bsf	13,2	;volatile
 10976                           
 10977                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10978  124E  118D               	bcf	13,3	;volatile
 10979                           
 10980                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10981  124F  0020               	movlb	0	; select bank0
 10982  1250  0C34               	rrf	setSwitchBypassState@f_state,w
 10983  1251  0027               	movlb	7	; select bank7
 10984  1252  1C03               	skipc
 10985  1253  110D               	bcf	13,2	;volatile
 10986  1254  1803               	skipnc
 10987  1255  150D               	bsf	13,2	;volatile
 10988                           
 10989                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10990  1256  0020               	movlb	0	; select bank0
 10991  1257  0834               	movf	setSwitchBypassState@f_state,w
 10992  1258  0435               	iorwf	setSwitchBypassState@f_state+1,w
 10993  1259  1D03               	btfss	3,2
 10994  125A  2A5E               	goto	u4980
 10995  125B  0027               	movlb	7	; select bank7
 10996  125C  148D               	bsf	13,1	;volatile
 10997  125D  2A60               	goto	l4988
 10998  125E                     u4980:	
 10999  125E  0027               	movlb	7	; select bank7
 11000  125F  108D               	bcf	13,1	;volatile
 11001  1260                     l4988:	
 11002                           
 11003                           ;SwitchBypass.c: 142: wait_ms(20);
 11004  1260  3014               	movlw	20
 11005  1261  0020               	movlb	0	; select bank0
 11006  1262  00AE               	movwf	wait_ms@timeSec
 11007  1263  3000               	movlw	0
 11008  1264  00AF               	movwf	wait_ms@timeSec+1
 11009  1265  319F  27CE  3192   	fcall	_wait_ms
 11010                           
 11011                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11012  1268  0027               	movlb	7	; select bank7
 11013  1269  110D               	bcf	13,2	;volatile
 11014                           
 11015                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11016  126A  108D               	bcf	13,1	;volatile
 11017                           
 11018                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11019  126B  087D               	movf	_switchBypass_state,w
 11020  126C  0020               	movlb	0	; select bank0
 11021  126D  00B6               	movwf	??_setSwitchBypassState
 11022  126E  01B7               	clrf	??_setSwitchBypassState+1
 11023  126F  0836               	movf	??_setSwitchBypassState,w
 11024  1270  00A2               	movwf	updateSwitchBypassState@state
 11025  1271  0837               	movf	??_setSwitchBypassState+1,w
 11026  1272  00A3               	movwf	updateSwitchBypassState@state+1
 11027  1273  319D  25D8  3192   	fcall	_updateSwitchBypassState
 11028                           
 11029                           ;SwitchBypass.c: 148: wait_ms(20);
 11030  1276  3014               	movlw	20
 11031  1277  0020               	movlb	0	; select bank0
 11032  1278  00AE               	movwf	wait_ms@timeSec
 11033  1279  3000               	movlw	0
 11034  127A  00AF               	movwf	wait_ms@timeSec+1
 11035  127B  319F  27CE         	fcall	_wait_ms
 11036  127D  0008               	return
 11037  127E                     __end_of_setSwitchBypassState:	
 11038                           
 11039                           	psect	text27
 11040  1FCE                     __ptext27:	
 11041 ;; *************** function _wait_ms *****************
 11042 ;; Defined at:
 11043 ;;		line 23 in file "system.c"
 11044 ;; Parameters:    Size  Location     Type
 11045 ;;  timeSec         2   14[BANK0 ] unsigned int 
 11046 ;; Auto vars:     Size  Location     Type
 11047 ;;  timemsl         4   16[BANK0 ] long 
 11048 ;; Return value:  Size  Location     Type
 11049 ;;                  1    wreg      void 
 11050 ;; Registers used:
 11051 ;;		wreg, status,2, status,0, pclath, cstack
 11052 ;; Tracked objects:
 11053 ;;		On entry : 0/0
 11054 ;;		On exit  : 0/0
 11055 ;;		Unchanged: 0/0
 11056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11058 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11061 ;;Total ram usage:        6 bytes
 11062 ;; Hardware stack levels used:    1
 11063 ;; Hardware stack levels required when called:    3
 11064 ;; This function calls:
 11065 ;;		___lmul
 11066 ;; This function is called by:
 11067 ;;		_star_tactiles
 11068 ;;		_solidring_tactiles
 11069 ;;		_read_bottom_tactile
 11070 ;;		_read_top_tactile
 11071 ;;		_setSwitchBypassState
 11072 ;;		_setDoublePressState
 11073 ;;		_showError_Alternating
 11074 ;;		_show_error
 11075 ;;		_show_cancel
 11076 ;;		_ring_tactiles
 11077 ;; This function uses a non-reentrant model
 11078 ;;
 11079                           
 11080                           
 11081                           ;psect for function _wait_ms
 11082  1FCE                     _wait_ms:	
 11083                           
 11084                           ;system.c: 25: long timemsl = 0;
 11085                           
 11086                           ;incstack = 0
 11087                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11088  1FCE  3000               	movlw	0
 11089  1FCF  0020               	movlb	0	; select bank0
 11090  1FD0  00B3               	movwf	wait_ms@timemsl+3
 11091  1FD1  3000               	movlw	0
 11092  1FD2  00B2               	movwf	wait_ms@timemsl+2
 11093  1FD3  3000               	movlw	0
 11094  1FD4  00B1               	movwf	wait_ms@timemsl+1
 11095  1FD5  3000               	movlw	0
 11096  1FD6  00B0               	movwf	wait_ms@timemsl
 11097                           
 11098                           ;system.c: 26: timemsl = timeSec * 1000l;
 11099  1FD7  082E               	movf	wait_ms@timeSec,w
 11100  1FD8  00A2               	movwf	___lmul@multiplier
 11101  1FD9  082F               	movf	wait_ms@timeSec+1,w
 11102  1FDA  00A3               	movwf	___lmul@multiplier+1
 11103  1FDB  01A4               	clrf	___lmul@multiplier+2
 11104  1FDC  01A5               	clrf	___lmul@multiplier+3
 11105  1FDD  3000               	movlw	0
 11106  1FDE  00A9               	movwf	___lmul@multiplicand+3
 11107  1FDF  3000               	movlw	0
 11108  1FE0  00A8               	movwf	___lmul@multiplicand+2
 11109  1FE1  3003               	movlw	3
 11110  1FE2  00A7               	movwf	___lmul@multiplicand+1
 11111  1FE3  30E8               	movlw	232
 11112  1FE4  00A6               	movwf	___lmul@multiplicand
 11113  1FE5  319F  279E  319F   	fcall	___lmul
 11114  1FE8  0020               	movlb	0	; select bank0
 11115  1FE9  0825               	movf	?___lmul+3,w
 11116  1FEA  00B3               	movwf	wait_ms@timemsl+3
 11117  1FEB  0824               	movf	?___lmul+2,w
 11118  1FEC  00B2               	movwf	wait_ms@timemsl+2
 11119  1FED  0823               	movf	?___lmul+1,w
 11120  1FEE  00B1               	movwf	wait_ms@timemsl+1
 11121  1FEF  0822               	movf	?___lmul,w
 11122  1FF0  00B0               	movwf	wait_ms@timemsl
 11123  1FF1                     l344:	
 11124                           ;system.c: 27: for( ; timemsl; timemsl--);
 11125                           
 11126  1FF1  0833               	movf	wait_ms@timemsl+3,w
 11127  1FF2  0432               	iorwf	wait_ms@timemsl+2,w
 11128  1FF3  0431               	iorwf	wait_ms@timemsl+1,w
 11129  1FF4  0430               	iorwf	wait_ms@timemsl,w
 11130  1FF5  1903               	btfsc	3,2
 11131  1FF6  0008               	return
 11132  1FF7  30FF               	movlw	255
 11133  1FF8  07B0               	addwf	wait_ms@timemsl,f
 11134  1FF9  30FF               	movlw	255
 11135  1FFA  3DB1               	addwfc	wait_ms@timemsl+1,f
 11136  1FFB  30FF               	movlw	255
 11137  1FFC  3DB2               	addwfc	wait_ms@timemsl+2,f
 11138  1FFD  30FF               	movlw	255
 11139  1FFE  3DB3               	addwfc	wait_ms@timemsl+3,f
 11140  1FFF  2FF1               	goto	l344
 11141  2000                     __end_of_wait_ms:	
 11142                           
 11143                           	psect	text28
 11144  1F9E                     __ptext28:	
 11145 ;; *************** function ___lmul *****************
 11146 ;; Defined at:
 11147 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  multiplier      4    2[BANK0 ] unsigned long 
 11150 ;;  multiplicand    4    6[BANK0 ] unsigned long 
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  product         4   10[BANK0 ] unsigned long 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  4    2[BANK0 ] unsigned long 
 11155 ;; Registers used:
 11156 ;;		wreg, status,2, status,0
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11162 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11163 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11165 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11166 ;;Total ram usage:       12 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:    2
 11169 ;; This function calls:
 11170 ;;		Nothing
 11171 ;; This function is called by:
 11172 ;;		_wait_ms
 11173 ;; This function uses a non-reentrant model
 11174 ;;
 11175                           
 11176                           
 11177                           ;psect for function ___lmul
 11178  1F9E                     ___lmul:	
 11179                           
 11180                           ;incstack = 0
 11181                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11182  1F9E  3000               	movlw	0
 11183  1F9F  0020               	movlb	0	; select bank0
 11184  1FA0  00AD               	movwf	___lmul@product+3
 11185  1FA1  3000               	movlw	0
 11186  1FA2  00AC               	movwf	___lmul@product+2
 11187  1FA3  3000               	movlw	0
 11188  1FA4  00AB               	movwf	___lmul@product+1
 11189  1FA5  3000               	movlw	0
 11190  1FA6  00AA               	movwf	___lmul@product
 11191  1FA7                     l4786:	
 11192  1FA7  1C22               	btfss	___lmul@multiplier,0
 11193  1FA8  2FB1               	goto	l4790
 11194  1FA9  0826               	movf	___lmul@multiplicand,w
 11195  1FAA  07AA               	addwf	___lmul@product,f
 11196  1FAB  0827               	movf	___lmul@multiplicand+1,w
 11197  1FAC  3DAB               	addwfc	___lmul@product+1,f
 11198  1FAD  0828               	movf	___lmul@multiplicand+2,w
 11199  1FAE  3DAC               	addwfc	___lmul@product+2,f
 11200  1FAF  0829               	movf	___lmul@multiplicand+3,w
 11201  1FB0  3DAD               	addwfc	___lmul@product+3,f
 11202  1FB1                     l4790:	
 11203  1FB1  3001               	movlw	1
 11204  1FB2                     u4765:	
 11205  1FB2  35A6               	lslf	___lmul@multiplicand,f
 11206  1FB3  0DA7               	rlf	___lmul@multiplicand+1,f
 11207  1FB4  0DA8               	rlf	___lmul@multiplicand+2,f
 11208  1FB5  0DA9               	rlf	___lmul@multiplicand+3,f
 11209  1FB6  0B89               	decfsz	9,f
 11210  1FB7  2FB2               	goto	u4765
 11211  1FB8  3001               	movlw	1
 11212  1FB9                     u4775:	
 11213  1FB9  36A5               	lsrf	___lmul@multiplier+3,f
 11214  1FBA  0CA4               	rrf	___lmul@multiplier+2,f
 11215  1FBB  0CA3               	rrf	___lmul@multiplier+1,f
 11216  1FBC  0CA2               	rrf	___lmul@multiplier,f
 11217  1FBD  0B89               	decfsz	9,f
 11218  1FBE  2FB9               	goto	u4775
 11219  1FBF  0825               	movf	___lmul@multiplier+3,w
 11220  1FC0  0424               	iorwf	___lmul@multiplier+2,w
 11221  1FC1  0423               	iorwf	___lmul@multiplier+1,w
 11222  1FC2  0422               	iorwf	___lmul@multiplier,w
 11223  1FC3  1D03               	skipz
 11224  1FC4  2FA7               	goto	l4786
 11225  1FC5  082D               	movf	___lmul@product+3,w
 11226  1FC6  00A5               	movwf	?___lmul+3
 11227  1FC7  082C               	movf	___lmul@product+2,w
 11228  1FC8  00A4               	movwf	?___lmul+2
 11229  1FC9  082B               	movf	___lmul@product+1,w
 11230  1FCA  00A3               	movwf	?___lmul+1
 11231  1FCB  082A               	movf	___lmul@product,w
 11232  1FCC  00A2               	movwf	?___lmul
 11233  1FCD  0008               	return
 11234  1FCE                     __end_of___lmul:	
 11235                           
 11236                           	psect	text29
 11237  1DD8                     __ptext29:	
 11238 ;; *************** function _updateSwitchBypassState *****************
 11239 ;; Defined at:
 11240 ;;		line 96 in file "state_manager.c"
 11241 ;; Parameters:    Size  Location     Type
 11242 ;;  state           2    2[BANK0 ] int 
 11243 ;; Auto vars:     Size  Location     Type
 11244 ;;		None
 11245 ;; Return value:  Size  Location     Type
 11246 ;;                  1    wreg      void 
 11247 ;; Registers used:
 11248 ;;		None
 11249 ;; Tracked objects:
 11250 ;;		On entry : 0/0
 11251 ;;		On exit  : 0/0
 11252 ;;		Unchanged: 0/0
 11253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11257 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11258 ;;Total ram usage:        2 bytes
 11259 ;; Hardware stack levels used:    1
 11260 ;; Hardware stack levels required when called:    2
 11261 ;; This function calls:
 11262 ;;		Nothing
 11263 ;; This function is called by:
 11264 ;;		_setSwitchBypassState
 11265 ;; This function uses a non-reentrant model
 11266 ;;
 11267                           
 11268                           
 11269                           ;psect for function _updateSwitchBypassState
 11270  1DD8                     _updateSwitchBypassState:	
 11271                           
 11272                           ;incstack = 0
 11273                           ; Regs used in _updateSwitchBypassState: []
 11274  1DD8  0008               	return
 11275  1DD9                     __end_of_updateSwitchBypassState:	
 11276                           
 11277                           	psect	text30
 11278  1DDD                     __ptext30:	
 11279 ;; *************** function _getSwitchBypassState *****************
 11280 ;; Defined at:
 11281 ;;		line 103 in file "state_manager.c"
 11282 ;; Parameters:    Size  Location     Type
 11283 ;;		None
 11284 ;; Auto vars:     Size  Location     Type
 11285 ;;		None
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2    2[BANK0 ] int 
 11288 ;; Registers used:
 11289 ;;		status,2
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11299 ;;Total ram usage:        2 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    2
 11302 ;; This function calls:
 11303 ;;		Nothing
 11304 ;; This function is called by:
 11305 ;;		_initSwitchBypass
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           
 11310                           ;psect for function _getSwitchBypassState
 11311  1DDD                     _getSwitchBypassState:	
 11312                           
 11313                           ;state_manager.c: 108: return 0;
 11314                           
 11315                           ;incstack = 0
 11316                           ; Regs used in _getSwitchBypassState: [status,2]
 11317  1DDD  0020               	movlb	0	; select bank0
 11318  1DDE  01A2               	clrf	?_getSwitchBypassState
 11319  1DDF  01A3               	clrf	?_getSwitchBypassState+1
 11320  1DE0  0008               	return
 11321  1DE1                     __end_of_getSwitchBypassState:	
 11322                           
 11323                           	psect	text31
 11324  1E9F                     __ptext31:	
 11325 ;; *************** function _adc_convert *****************
 11326 ;; Defined at:
 11327 ;;		line 116 in file "user.c"
 11328 ;; Parameters:    Size  Location     Type
 11329 ;;  channel         1    wreg     unsigned char 
 11330 ;; Auto vars:     Size  Location     Type
 11331 ;;  channel         1    5[BANK0 ] unsigned char 
 11332 ;; Return value:  Size  Location     Type
 11333 ;;                  2    2[BANK0 ] unsigned int 
 11334 ;; Registers used:
 11335 ;;		wreg, status,2, status,0
 11336 ;; Tracked objects:
 11337 ;;		On entry : 0/0
 11338 ;;		On exit  : 0/0
 11339 ;;		Unchanged: 0/0
 11340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11341 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11342 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11343 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11344 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11345 ;;Total ram usage:        4 bytes
 11346 ;; Hardware stack levels used:    1
 11347 ;; Hardware stack levels required when called:    2
 11348 ;; This function calls:
 11349 ;;		Nothing
 11350 ;; This function is called by:
 11351 ;;		_main
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           
 11356                           ;psect for function _adc_convert
 11357  1E9F                     _adc_convert:	
 11358                           
 11359                           ;incstack = 0
 11360                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11361                           ;adc_convert@channel stored from wreg
 11362  1E9F  0020               	movlb	0	; select bank0
 11363  1EA0  00A5               	movwf	adc_convert@channel
 11364                           
 11365                           ;user.c: 117: ADCON0bits.CHS = channel;
 11366  1EA1  0825               	movf	adc_convert@channel,w
 11367  1EA2  00A4               	movwf	??_adc_convert
 11368  1EA3  0DA4               	rlf	??_adc_convert,f
 11369  1EA4  0DA4               	rlf	??_adc_convert,f
 11370  1EA5  0021               	movlb	1	; select bank1
 11371  1EA6  081D               	movf	29,w	;volatile
 11372  1EA7  0020               	movlb	0	; select bank0
 11373  1EA8  0624               	xorwf	??_adc_convert,w
 11374  1EA9  3983               	andlw	-125
 11375  1EAA  0624               	xorwf	??_adc_convert,w
 11376  1EAB  0021               	movlb	1	; select bank1
 11377  1EAC  009D               	movwf	29	;volatile
 11378                           
 11379                           ;user.c: 118: ADCON0bits.GO = 0b1;
 11380  1EAD  149D               	bsf	29,1	;volatile
 11381  1EAE                     l526:	
 11382                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 11383                           
 11384  1EAE  189D               	btfsc	29,1	;volatile
 11385  1EAF  2EAE               	goto	l526
 11386                           
 11387                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 11388  1EB0  081C               	movf	28,w	;volatile
 11389  1EB1  0020               	movlb	0	; select bank0
 11390  1EB2  00A3               	movwf	?_adc_convert+1
 11391  1EB3  0021               	movlb	1	; select bank1
 11392  1EB4  081B               	movf	27,w	;volatile
 11393  1EB5  0020               	movlb	0	; select bank0
 11394  1EB6  00A2               	movwf	?_adc_convert
 11395  1EB7  0008               	return
 11396  1EB8                     __end_of_adc_convert:	
 11397                           
 11398                           	psect	text32
 11399  1449                     __ptext32:	
 11400 ;; *************** function ___awdiv *****************
 11401 ;; Defined at:
 11402 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11403 ;; Parameters:    Size  Location     Type
 11404 ;;  divisor         2    2[BANK0 ] int 
 11405 ;;  dividend        2    4[BANK0 ] int 
 11406 ;; Auto vars:     Size  Location     Type
 11407 ;;  quotient        2    9[BANK0 ] int 
 11408 ;;  sign            1    8[BANK0 ] unsigned char 
 11409 ;;  counter         1    7[BANK0 ] unsigned char 
 11410 ;; Return value:  Size  Location     Type
 11411 ;;                  2    2[BANK0 ] int 
 11412 ;; Registers used:
 11413 ;;		wreg, status,2, status,0
 11414 ;; Tracked objects:
 11415 ;;		On entry : 0/0
 11416 ;;		On exit  : 0/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11419 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11420 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11421 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11422 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11423 ;;Total ram usage:        9 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    2
 11426 ;; This function calls:
 11427 ;;		Nothing
 11428 ;; This function is called by:
 11429 ;;		_main
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           
 11434                           ;psect for function ___awdiv
 11435  1449                     ___awdiv:	
 11436                           
 11437                           ;incstack = 0
 11438                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11439  1449  0020               	movlb	0	; select bank0
 11440  144A  01A8               	clrf	___awdiv@sign
 11441  144B  1FA3               	btfss	___awdiv@divisor+1,7
 11442  144C  2C54               	goto	l5710
 11443  144D  09A2               	comf	___awdiv@divisor,f
 11444  144E  09A3               	comf	___awdiv@divisor+1,f
 11445  144F  0AA2               	incf	___awdiv@divisor,f
 11446  1450  1903               	skipnz
 11447  1451  0AA3               	incf	___awdiv@divisor+1,f
 11448  1452  01A8               	clrf	___awdiv@sign
 11449  1453  0AA8               	incf	___awdiv@sign,f
 11450  1454                     l5710:	
 11451  1454  1FA5               	btfss	___awdiv@dividend+1,7
 11452  1455  2C5F               	goto	l5716
 11453  1456  09A4               	comf	___awdiv@dividend,f
 11454  1457  09A5               	comf	___awdiv@dividend+1,f
 11455  1458  0AA4               	incf	___awdiv@dividend,f
 11456  1459  1903               	skipnz
 11457  145A  0AA5               	incf	___awdiv@dividend+1,f
 11458  145B  3001               	movlw	1
 11459  145C  00A6               	movwf	??___awdiv
 11460  145D  0826               	movf	??___awdiv,w
 11461  145E  06A8               	xorwf	___awdiv@sign,f
 11462  145F                     l5716:	
 11463  145F  01A9               	clrf	___awdiv@quotient
 11464  1460  01AA               	clrf	___awdiv@quotient+1
 11465  1461  0822               	movf	___awdiv@divisor,w
 11466  1462  0423               	iorwf	___awdiv@divisor+1,w
 11467  1463  1903               	btfsc	3,2
 11468  1464  2C8E               	goto	l5738
 11469  1465  01A7               	clrf	___awdiv@counter
 11470  1466  0AA7               	incf	___awdiv@counter,f
 11471  1467                     l5726:	
 11472  1467  1BA3               	btfsc	___awdiv@divisor+1,7
 11473  1468  2C73               	goto	l5728
 11474  1469  3001               	movlw	1
 11475  146A                     u6475:	
 11476  146A  35A2               	lslf	___awdiv@divisor,f
 11477  146B  0DA3               	rlf	___awdiv@divisor+1,f
 11478  146C  0B89               	decfsz	9,f
 11479  146D  2C6A               	goto	u6475
 11480  146E  3001               	movlw	1
 11481  146F  00A6               	movwf	??___awdiv
 11482  1470  0826               	movf	??___awdiv,w
 11483  1471  07A7               	addwf	___awdiv@counter,f
 11484  1472  2C67               	goto	l5726
 11485  1473                     l5728:	
 11486  1473  3001               	movlw	1
 11487  1474                     u6495:	
 11488  1474  35A9               	lslf	___awdiv@quotient,f
 11489  1475  0DAA               	rlf	___awdiv@quotient+1,f
 11490  1476  0B89               	decfsz	9,f
 11491  1477  2C74               	goto	u6495
 11492  1478  0823               	movf	___awdiv@divisor+1,w
 11493  1479  0225               	subwf	___awdiv@dividend+1,w
 11494  147A  1D03               	skipz
 11495  147B  2C7E               	goto	u6505
 11496  147C  0822               	movf	___awdiv@divisor,w
 11497  147D  0224               	subwf	___awdiv@dividend,w
 11498  147E                     u6505:	
 11499  147E  1C03               	skipc
 11500  147F  2C85               	goto	l5734
 11501  1480  0822               	movf	___awdiv@divisor,w
 11502  1481  02A4               	subwf	___awdiv@dividend,f
 11503  1482  0823               	movf	___awdiv@divisor+1,w
 11504  1483  3BA5               	subwfb	___awdiv@dividend+1,f
 11505  1484  1429               	bsf	___awdiv@quotient,0
 11506  1485                     l5734:	
 11507  1485  3001               	movlw	1
 11508  1486                     u6515:	
 11509  1486  36A3               	lsrf	___awdiv@divisor+1,f
 11510  1487  0CA2               	rrf	___awdiv@divisor,f
 11511  1488  0B89               	decfsz	9,f
 11512  1489  2C86               	goto	u6515
 11513  148A  3001               	movlw	1
 11514  148B  02A7               	subwf	___awdiv@counter,f
 11515  148C  1D03               	btfss	3,2
 11516  148D  2C73               	goto	l5728
 11517  148E                     l5738:	
 11518  148E  0828               	movf	___awdiv@sign,w
 11519  148F  1903               	btfsc	3,2
 11520  1490  2C96               	goto	l5742
 11521  1491  09A9               	comf	___awdiv@quotient,f
 11522  1492  09AA               	comf	___awdiv@quotient+1,f
 11523  1493  0AA9               	incf	___awdiv@quotient,f
 11524  1494  1903               	skipnz
 11525  1495  0AAA               	incf	___awdiv@quotient+1,f
 11526  1496                     l5742:	
 11527  1496  082A               	movf	___awdiv@quotient+1,w
 11528  1497  00A3               	movwf	?___awdiv+1
 11529  1498  0829               	movf	___awdiv@quotient,w
 11530  1499  00A2               	movwf	?___awdiv
 11531  149A  0008               	return
 11532  149B                     __end_of___awdiv:	
 11533                           
 11534                           	psect	text33
 11535  1044                     __ptext33:	
 11536 ;; *************** function ___altoft *****************
 11537 ;; Defined at:
 11538 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11539 ;; Parameters:    Size  Location     Type
 11540 ;;  c               4   10[BANK0 ] long 
 11541 ;; Auto vars:     Size  Location     Type
 11542 ;;  sign            1   17[BANK0 ] unsigned char 
 11543 ;;  exp             1   16[BANK0 ] unsigned char 
 11544 ;; Return value:  Size  Location     Type
 11545 ;;                  3   10[BANK0 ] float 
 11546 ;; Registers used:
 11547 ;;		wreg, status,2, status,0, pclath, cstack
 11548 ;; Tracked objects:
 11549 ;;		On entry : 0/0
 11550 ;;		On exit  : 0/0
 11551 ;;		Unchanged: 0/0
 11552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11553 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11554 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11556 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11557 ;;Total ram usage:        8 bytes
 11558 ;; Hardware stack levels used:    1
 11559 ;; Hardware stack levels required when called:    3
 11560 ;; This function calls:
 11561 ;;		___ftpack
 11562 ;; This function is called by:
 11563 ;;		_main
 11564 ;; This function uses a non-reentrant model
 11565 ;;
 11566                           
 11567                           
 11568                           ;psect for function ___altoft
 11569  1044                     ___altoft:	
 11570                           
 11571                           ;incstack = 0
 11572                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11573  1044  0020               	movlb	0	; select bank0
 11574  1045  01B1               	clrf	___altoft@sign
 11575  1046  308E               	movlw	142
 11576  1047  00AE               	movwf	??___altoft
 11577  1048  082E               	movf	??___altoft,w
 11578  1049  00B0               	movwf	___altoft@exp
 11579  104A  1FAD               	btfss	___altoft@c+3,7
 11580  104B  2859               	goto	l5696
 11581  104C  09AA               	comf	___altoft@c,f
 11582  104D  09AB               	comf	___altoft@c+1,f
 11583  104E  09AC               	comf	___altoft@c+2,f
 11584  104F  09AD               	comf	___altoft@c+3,f
 11585  1050  0AAA               	incf	___altoft@c,f
 11586  1051  1903               	skipnz
 11587  1052  0AAB               	incf	___altoft@c+1,f
 11588  1053  1903               	skipnz
 11589  1054  0AAC               	incf	___altoft@c+2,f
 11590  1055  1903               	skipnz
 11591  1056  0AAD               	incf	___altoft@c+3,f
 11592  1057  01B1               	clrf	___altoft@sign
 11593  1058  0AB1               	incf	___altoft@sign,f
 11594  1059                     l5696:	
 11595  1059  30FF               	movlw	255
 11596  105A  052D               	andwf	___altoft@c+3,w
 11597  105B  1903               	btfsc	3,2
 11598  105C  2869               	goto	l5698
 11599  105D  3001               	movlw	1
 11600  105E                     u6425:	
 11601  105E  36AD               	lsrf	___altoft@c+3,f
 11602  105F  0CAC               	rrf	___altoft@c+2,f
 11603  1060  0CAB               	rrf	___altoft@c+1,f
 11604  1061  0CAA               	rrf	___altoft@c,f
 11605  1062  0B89               	decfsz	9,f
 11606  1063  285E               	goto	u6425
 11607  1064  3001               	movlw	1
 11608  1065  00AE               	movwf	??___altoft
 11609  1066  082E               	movf	??___altoft,w
 11610  1067  07B0               	addwf	___altoft@exp,f
 11611  1068  2859               	goto	l5696
 11612  1069                     l5698:	
 11613  1069  082A               	movf	___altoft@c,w
 11614  106A  00A2               	movwf	___ftpack@arg
 11615  106B  082B               	movf	___altoft@c+1,w
 11616  106C  00A3               	movwf	___ftpack@arg+1
 11617  106D  082C               	movf	___altoft@c+2,w
 11618  106E  00A4               	movwf	___ftpack@arg+2
 11619  106F  0830               	movf	___altoft@exp,w
 11620  1070  00AE               	movwf	??___altoft
 11621  1071  082E               	movf	??___altoft,w
 11622  1072  00A5               	movwf	___ftpack@exp
 11623  1073  0831               	movf	___altoft@sign,w
 11624  1074  00AF               	movwf	??___altoft+1
 11625  1075  082F               	movf	??___altoft+1,w
 11626  1076  00A6               	movwf	___ftpack@sign
 11627  1077  3194  24EF         	fcall	___ftpack
 11628  1079  0020               	movlb	0	; select bank0
 11629  107A  0822               	movf	?___ftpack,w
 11630  107B  00AA               	movwf	?___altoft
 11631  107C  0823               	movf	?___ftpack+1,w
 11632  107D  00AB               	movwf	?___altoft+1
 11633  107E  0824               	movf	?___ftpack+2,w
 11634  107F  00AC               	movwf	?___altoft+2
 11635  1080  0008               	return
 11636  1081                     __end_of___altoft:	
 11637                           
 11638                           	psect	text34
 11639  14EF                     __ptext34:	
 11640 ;; *************** function ___ftpack *****************
 11641 ;; Defined at:
 11642 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11643 ;; Parameters:    Size  Location     Type
 11644 ;;  arg             3    2[BANK0 ] unsigned um
 11645 ;;  exp             1    5[BANK0 ] unsigned char 
 11646 ;;  sign            1    6[BANK0 ] unsigned char 
 11647 ;; Auto vars:     Size  Location     Type
 11648 ;;		None
 11649 ;; Return value:  Size  Location     Type
 11650 ;;                  3    2[BANK0 ] float 
 11651 ;; Registers used:
 11652 ;;		wreg, status,2, status,0
 11653 ;; Tracked objects:
 11654 ;;		On entry : 0/0
 11655 ;;		On exit  : 0/0
 11656 ;;		Unchanged: 0/0
 11657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11658 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11660 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11661 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11662 ;;Total ram usage:        8 bytes
 11663 ;; Hardware stack levels used:    1
 11664 ;; Hardware stack levels required when called:    2
 11665 ;; This function calls:
 11666 ;;		Nothing
 11667 ;; This function is called by:
 11668 ;;		___altoft
 11669 ;;		___awtoft
 11670 ;;		___ftadd
 11671 ;;		___ftdiv
 11672 ;;		___ftmul
 11673 ;; This function uses a non-reentrant model
 11674 ;;
 11675                           
 11676                           
 11677                           ;psect for function ___ftpack
 11678  14EF                     ___ftpack:	
 11679                           
 11680                           ;incstack = 0
 11681                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11682  14EF  0020               	movlb	0	; select bank0
 11683  14F0  0825               	movf	___ftpack@exp,w
 11684  14F1  1903               	btfsc	3,2
 11685  14F2  2CF8               	goto	l4846
 11686  14F3  0824               	movf	___ftpack@arg+2,w
 11687  14F4  0423               	iorwf	___ftpack@arg+1,w
 11688  14F5  0422               	iorwf	___ftpack@arg,w
 11689  14F6  1D03               	skipz
 11690  14F7  2D09               	goto	l4852
 11691  14F8                     l4846:	
 11692  14F8  3000               	movlw	0
 11693  14F9  00A2               	movwf	?___ftpack
 11694  14FA  3000               	movlw	0
 11695  14FB  00A3               	movwf	?___ftpack+1
 11696  14FC  3000               	movlw	0
 11697  14FD  00A4               	movwf	?___ftpack+2
 11698  14FE  0008               	return
 11699  14FF                     l4850:	
 11700  14FF  3001               	movlw	1
 11701  1500  00A7               	movwf	??___ftpack
 11702  1501  0827               	movf	??___ftpack,w
 11703  1502  07A5               	addwf	___ftpack@exp,f
 11704  1503  3001               	movlw	1
 11705  1504                     u4825:	
 11706  1504  36A4               	lsrf	___ftpack@arg+2,f
 11707  1505  0CA3               	rrf	___ftpack@arg+1,f
 11708  1506  0CA2               	rrf	___ftpack@arg,f
 11709  1507  0B89               	decfsz	9,f
 11710  1508  2D04               	goto	u4825
 11711  1509                     l4852:	
 11712  1509  30FE               	movlw	254
 11713  150A  0524               	andwf	___ftpack@arg+2,w
 11714  150B  1903               	btfsc	3,2
 11715  150C  2D22               	goto	l1477
 11716  150D  2CFF               	goto	l4850
 11717  150E                     l4854:	
 11718  150E  3001               	movlw	1
 11719  150F  00A7               	movwf	??___ftpack
 11720  1510  0827               	movf	??___ftpack,w
 11721  1511  07A5               	addwf	___ftpack@exp,f
 11722  1512  3001               	movlw	1
 11723  1513  07A2               	addwf	___ftpack@arg,f
 11724  1514  3000               	movlw	0
 11725  1515  1803               	skipnc
 11726  1516  3001               	movlw	1
 11727  1517  07A3               	addwf	___ftpack@arg+1,f
 11728  1518  3000               	movlw	0
 11729  1519  1803               	skipnc
 11730  151A  3001               	movlw	1
 11731  151B  07A4               	addwf	___ftpack@arg+2,f
 11732  151C  3001               	movlw	1
 11733  151D                     u4845:	
 11734  151D  36A4               	lsrf	___ftpack@arg+2,f
 11735  151E  0CA3               	rrf	___ftpack@arg+1,f
 11736  151F  0CA2               	rrf	___ftpack@arg,f
 11737  1520  0B89               	decfsz	9,f
 11738  1521  2D1D               	goto	u4845
 11739  1522                     l1477:	
 11740  1522  30FF               	movlw	255
 11741  1523  0524               	andwf	___ftpack@arg+2,w
 11742  1524  1903               	btfsc	3,2
 11743  1525  2D2F               	goto	l4862
 11744  1526  2D0E               	goto	l4854
 11745  1527                     l4860:	
 11746  1527  3001               	movlw	1
 11747  1528  02A5               	subwf	___ftpack@exp,f
 11748  1529  3001               	movlw	1
 11749  152A                     u4865:	
 11750  152A  35A2               	lslf	___ftpack@arg,f
 11751  152B  0DA3               	rlf	___ftpack@arg+1,f
 11752  152C  0DA4               	rlf	___ftpack@arg+2,f
 11753  152D  0B89               	decfsz	9,f
 11754  152E  2D2A               	goto	u4865
 11755  152F                     l4862:	
 11756  152F  1BA3               	btfsc	___ftpack@arg+1,7
 11757  1530  2D35               	goto	l1484
 11758  1531  3002               	movlw	2
 11759  1532  0225               	subwf	___ftpack@exp,w
 11760  1533  1803               	skipnc
 11761  1534  2D27               	goto	l4860
 11762  1535                     l1484:	
 11763  1535  1825               	btfsc	___ftpack@exp,0
 11764  1536  2D3D               	goto	l1485
 11765  1537  30FF               	movlw	255
 11766  1538  05A2               	andwf	___ftpack@arg,f
 11767  1539  307F               	movlw	127
 11768  153A  05A3               	andwf	___ftpack@arg+1,f
 11769  153B  30FF               	movlw	255
 11770  153C  05A4               	andwf	___ftpack@arg+2,f
 11771  153D                     l1485:	
 11772  153D  1003               	clrc
 11773  153E  0CA5               	rrf	___ftpack@exp,f
 11774  153F  0825               	movf	___ftpack@exp,w
 11775  1540  00A7               	movwf	??___ftpack
 11776  1541  01A8               	clrf	??___ftpack+1
 11777  1542  01A9               	clrf	??___ftpack+2
 11778  1543  3010               	movlw	16
 11779  1544                     u4905:	
 11780  1544  35A7               	lslf	??___ftpack,f
 11781  1545  0DA8               	rlf	??___ftpack+1,f
 11782  1546  0DA9               	rlf	??___ftpack+2,f
 11783  1547  0B89               	decfsz	9,f
 11784  1548  2D44               	goto	u4905
 11785  1549  0827               	movf	??___ftpack,w
 11786  154A  04A2               	iorwf	___ftpack@arg,f
 11787  154B  0828               	movf	??___ftpack+1,w
 11788  154C  04A3               	iorwf	___ftpack@arg+1,f
 11789  154D  0829               	movf	??___ftpack+2,w
 11790  154E  04A4               	iorwf	___ftpack@arg+2,f
 11791  154F  0826               	movf	___ftpack@sign,w
 11792  1550  1903               	btfsc	3,2
 11793  1551  0008               	return
 11794  1552  17A4               	bsf	___ftpack@arg+2,7
 11795  1553  0008               	return
 11796  1554                     __end_of___ftpack:	
 11797                           
 11798                           	psect	text35
 11799  130C                     __ptext35:	
 11800 ;; *************** function _ReadSavedSettings *****************
 11801 ;; Defined at:
 11802 ;;		line 193 in file "user.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;		None
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      void 
 11809 ;; Registers used:
 11810 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11817 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11819 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11820 ;;Total ram usage:        0 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    3
 11823 ;; This function calls:
 11824 ;;		_FLASH_ReadWord
 11825 ;;		_set_leds_bottom
 11826 ;;		_set_leds_top
 11827 ;; This function is called by:
 11828 ;;		_main
 11829 ;; This function uses a non-reentrant model
 11830 ;;
 11831                           
 11832                           
 11833                           ;psect for function _ReadSavedSettings
 11834  130C                     _ReadSavedSettings:	
 11835                           
 11836                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11837                           
 11838                           ;incstack = 0
 11839                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11840  130C  3081               	movlw	129
 11841  130D  0020               	movlb	0	; select bank0
 11842  130E  00A2               	movwf	FLASH_ReadWord@flashAddr
 11843  130F  301F               	movlw	31
 11844  1310  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11845  1311  319E  26D4  3193   	fcall	_FLASH_ReadWord
 11846  1314  0020               	movlb	0	; select bank0
 11847  1315  0823               	movf	?_FLASH_ReadWord+1,w
 11848  1316  0021               	movlb	1	; select bank1
 11849  1317  00DA               	movwf	(_top_push_state+1)^(0+128)
 11850  1318  0020               	movlb	0	; select bank0
 11851  1319  0822               	movf	?_FLASH_ReadWord,w
 11852  131A  0021               	movlb	1	; select bank1
 11853  131B  00D9               	movwf	_top_push_state^(0+128)
 11854                           
 11855                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 11856  131C  3082               	movlw	130
 11857  131D  0020               	movlb	0	; select bank0
 11858  131E  00A2               	movwf	FLASH_ReadWord@flashAddr
 11859  131F  301F               	movlw	31
 11860  1320  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11861  1321  319E  26D4  3193   	fcall	_FLASH_ReadWord
 11862  1324  0020               	movlb	0	; select bank0
 11863  1325  0823               	movf	?_FLASH_ReadWord+1,w
 11864  1326  0021               	movlb	1	; select bank1
 11865  1327  00D2               	movwf	(_bottom_push_state+1)^(0+128)
 11866  1328  0020               	movlb	0	; select bank0
 11867  1329  0822               	movf	?_FLASH_ReadWord,w
 11868  132A  0021               	movlb	1	; select bank1
 11869  132B  00D1               	movwf	_bottom_push_state^(0+128)
 11870                           
 11871                           ;user.c: 199: LATGbits.LATG1 = !switchBypass_state;
 11872  132C  087D               	movf	_switchBypass_state,w
 11873  132D  1D03               	btfss	3,2
 11874  132E  2B32               	goto	u5760
 11875  132F  0027               	movlb	7	; select bank7
 11876  1330  148D               	bsf	13,1	;volatile
 11877  1331  2B34               	goto	l5338
 11878  1332                     u5760:	
 11879  1332  0027               	movlb	7	; select bank7
 11880  1333  108D               	bcf	13,1	;volatile
 11881  1334                     l5338:	
 11882                           
 11883                           ;user.c: 200: LATGbits.LATG2 = switchBypass_state;
 11884  1334  0C7D               	rrf	_switchBypass_state,w
 11885  1335  1C03               	skipc
 11886  1336  110D               	bcf	13,2	;volatile
 11887  1337  1803               	skipnc
 11888  1338  150D               	bsf	13,2	;volatile
 11889                           
 11890                           ;user.c: 201: LATBbits.LATB2 = 0;
 11891  1339  0022               	movlb	2	; select bank2
 11892  133A  110D               	bcf	13,2	;volatile
 11893                           
 11894                           ;user.c: 202: LATBbits.LATB3 = 0;
 11895  133B  118D               	bcf	13,3	;volatile
 11896                           
 11897                           ;user.c: 204: LATBbits.LATB4 = 0;
 11898  133C  120D               	bcf	13,4	;volatile
 11899                           
 11900                           ;user.c: 205: LATBbits.LATB5 = 0;
 11901  133D  128D               	bcf	13,5	;volatile
 11902                           
 11903                           ;user.c: 207: LATBbits.LATB1 = 0;
 11904  133E  108D               	bcf	13,1	;volatile
 11905                           
 11906                           ;user.c: 208: LATBbits.LATB0 = 0;
 11907  133F  100D               	bcf	13,0	;volatile
 11908                           
 11909                           ;user.c: 211: set_leds_top(top_push_state, 1);
 11910  1340  0021               	movlb	1	; select bank1
 11911  1341  085A               	movf	(_top_push_state+1)^(0+128),w
 11912  1342  0020               	movlb	0	; select bank0
 11913  1343  00A3               	movwf	set_leds_top@x+1
 11914  1344  0021               	movlb	1	; select bank1
 11915  1345  0859               	movf	_top_push_state^(0+128),w
 11916  1346  0020               	movlb	0	; select bank0
 11917  1347  00A2               	movwf	set_leds_top@x
 11918  1348  3001               	movlw	1
 11919  1349  00A4               	movwf	set_leds_top@ledState
 11920  134A  3000               	movlw	0
 11921  134B  00A5               	movwf	set_leds_top@ledState+1
 11922  134C  3194  249B  3193   	fcall	_set_leds_top
 11923                           
 11924                           ;user.c: 212: set_leds_bottom(bottom_push_state);
 11925  134F  0021               	movlb	1	; select bank1
 11926  1350  0852               	movf	(_bottom_push_state+1)^(0+128),w
 11927  1351  0020               	movlb	0	; select bank0
 11928  1352  00A3               	movwf	set_leds_bottom@x+1
 11929  1353  0021               	movlb	1	; select bank1
 11930  1354  0851               	movf	_bottom_push_state^(0+128),w
 11931  1355  0020               	movlb	0	; select bank0
 11932  1356  00A2               	movwf	set_leds_bottom@x
 11933  1357  3190  2009         	fcall	_set_leds_bottom
 11934  1359  0008               	return
 11935  135A                     __end_of_ReadSavedSettings:	
 11936                           
 11937                           	psect	text36
 11938  149B                     __ptext36:	
 11939 ;; *************** function _set_leds_top *****************
 11940 ;; Defined at:
 11941 ;;		line 16 in file "LEDs.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;  x               2    2[BANK0 ] int 
 11944 ;;  ledState        2    4[BANK0 ] int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;		None
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  1    wreg      void 
 11949 ;; Registers used:
 11950 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11956 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11960 ;;Total ram usage:        4 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    2
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_ReadSavedSettings
 11967 ;;		_star_tactiles
 11968 ;;		_solidring_tactiles
 11969 ;;		_read_top_tactile
 11970 ;;		_ring_tactiles
 11971 ;; This function uses a non-reentrant model
 11972 ;;
 11973                           
 11974                           
 11975                           ;psect for function _set_leds_top
 11976  149B                     _set_leds_top:	
 11977                           
 11978                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11979                           
 11980                           ;incstack = 0
 11981                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11982  149B  0027               	movlb	7	; select bank7
 11983  149C  100C               	bcf	12,0	;volatile
 11984                           
 11985                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11986  149D  108C               	bcf	12,1	;volatile
 11987                           
 11988                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11989  149E  110C               	bcf	12,2	;volatile
 11990                           
 11991                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11992  149F  118C               	bcf	12,3	;volatile
 11993                           
 11994                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11995  14A0  120C               	bcf	12,4	;volatile
 11996                           
 11997                           ;LEDs.c: 22: switch (x) {
 11998  14A1  2CD1               	goto	l4812
 11999  14A2                     l4800:	
 12000                           ;LEDs.c: 23: case 1:
 12001                           
 12002                           
 12003                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 12004  14A2  0020               	movlb	0	; select bank0
 12005  14A3  0C24               	rrf	set_leds_top@ledState,w
 12006  14A4  0027               	movlb	7	; select bank7
 12007  14A5  1C03               	skipc
 12008  14A6  100C               	bcf	12,0	;volatile
 12009  14A7  1803               	skipnc
 12010  14A8  140C               	bsf	12,0	;volatile
 12011                           
 12012                           ;LEDs.c: 25: break;
 12013  14A9  0008               	return
 12014  14AA                     l4802:	
 12015                           ;LEDs.c: 26: case 2:
 12016                           
 12017                           
 12018                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 12019  14AA  0020               	movlb	0	; select bank0
 12020  14AB  0C24               	rrf	set_leds_top@ledState,w
 12021  14AC  0027               	movlb	7	; select bank7
 12022  14AD  1C03               	skipc
 12023  14AE  108C               	bcf	12,1	;volatile
 12024  14AF  1803               	skipnc
 12025  14B0  148C               	bsf	12,1	;volatile
 12026                           
 12027                           ;LEDs.c: 28: break;
 12028  14B1  0008               	return
 12029  14B2                     l4804:	
 12030                           ;LEDs.c: 29: case 3:
 12031                           
 12032                           
 12033                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 12034  14B2  0020               	movlb	0	; select bank0
 12035  14B3  0C24               	rrf	set_leds_top@ledState,w
 12036  14B4  0027               	movlb	7	; select bank7
 12037  14B5  1C03               	skipc
 12038  14B6  110C               	bcf	12,2	;volatile
 12039  14B7  1803               	skipnc
 12040  14B8  150C               	bsf	12,2	;volatile
 12041                           
 12042                           ;LEDs.c: 31: break;
 12043  14B9  0008               	return
 12044  14BA                     l4806:	
 12045                           ;LEDs.c: 32: case 4:
 12046                           
 12047                           
 12048                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12049  14BA  0020               	movlb	0	; select bank0
 12050  14BB  0C24               	rrf	set_leds_top@ledState,w
 12051  14BC  0027               	movlb	7	; select bank7
 12052  14BD  1C03               	skipc
 12053  14BE  118C               	bcf	12,3	;volatile
 12054  14BF  1803               	skipnc
 12055  14C0  158C               	bsf	12,3	;volatile
 12056                           
 12057                           ;LEDs.c: 34: break;
 12058  14C1  0008               	return
 12059  14C2                     l4808:	
 12060                           ;LEDs.c: 35: case 5:
 12061                           
 12062                           
 12063                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12064  14C2  0020               	movlb	0	; select bank0
 12065  14C3  0C24               	rrf	set_leds_top@ledState,w
 12066  14C4  0027               	movlb	7	; select bank7
 12067  14C5  1C03               	skipc
 12068  14C6  120C               	bcf	12,4	;volatile
 12069  14C7  1803               	skipnc
 12070  14C8  160C               	bsf	12,4	;volatile
 12071                           
 12072                           ;LEDs.c: 39: break;
 12073                           
 12074                           ;LEDs.c: 38: case 6:
 12075                           
 12076                           ;LEDs.c: 37: break;
 12077  14C9  0008               	return
 12078  14CA                     l694:	
 12079                           ;LEDs.c: 40: case 100:
 12080                           
 12081                           
 12082                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12083  14CA  0027               	movlb	7	; select bank7
 12084  14CB  140C               	bsf	12,0	;volatile
 12085                           
 12086                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12087  14CC  148C               	bsf	12,1	;volatile
 12088                           
 12089                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12090  14CD  150C               	bsf	12,2	;volatile
 12091                           
 12092                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12093  14CE  158C               	bsf	12,3	;volatile
 12094                           
 12095                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12096  14CF  160C               	bsf	12,4	;volatile
 12097                           
 12098                           ;LEDs.c: 47: }
 12099                           
 12100                           ;LEDs.c: 46: break;
 12101  14D0  0008               	return
 12102  14D1                     l4812:	
 12103                           
 12104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12105                           ; Switch size 1, requested type "space"
 12106                           ; Number of cases is 1, Range of values is 0 to 0
 12107                           ; switch strategies available:
 12108                           ; Name         Instructions Cycles
 12109                           ; simple_byte            4     3 (average)
 12110                           ; direct_byte            8     6 (fixed)
 12111                           ; jumptable            260     6 (fixed)
 12112                           ;	Chosen strategy is simple_byte
 12113  14D1  0020               	movlb	0	; select bank0
 12114  14D2  0823               	movf	set_leds_top@x+1,w
 12115  14D3  3A00               	xorlw	0	; case 0
 12116  14D4  1903               	skipnz
 12117  14D5  2CD7               	goto	l6178
 12118  14D6  2CEE               	goto	l695
 12119  14D7                     l6178:	
 12120                           
 12121                           ; Switch size 1, requested type "space"
 12122                           ; Number of cases is 7, Range of values is 1 to 100
 12123                           ; switch strategies available:
 12124                           ; Name         Instructions Cycles
 12125                           ; simple_byte           22    12 (average)
 12126                           ; direct_byte          209     9 (fixed)
 12127                           ; jumptable            263     9 (fixed)
 12128                           ;	Chosen strategy is simple_byte
 12129  14D7  0822               	movf	set_leds_top@x,w
 12130  14D8  3A01               	xorlw	1	; case 1
 12131  14D9  1903               	skipnz
 12132  14DA  2CA2               	goto	l4800
 12133  14DB  3A03               	xorlw	3	; case 2
 12134  14DC  1903               	skipnz
 12135  14DD  2CAA               	goto	l4802
 12136  14DE  3A01               	xorlw	1	; case 3
 12137  14DF  1903               	skipnz
 12138  14E0  2CB2               	goto	l4804
 12139  14E1  3A07               	xorlw	7	; case 4
 12140  14E2  1903               	skipnz
 12141  14E3  2CBA               	goto	l4806
 12142  14E4  3A01               	xorlw	1	; case 5
 12143  14E5  1903               	skipnz
 12144  14E6  2CC2               	goto	l4808
 12145  14E7  3A03               	xorlw	3	; case 6
 12146  14E8  1903               	skipnz
 12147  14E9  2CEE               	goto	l695
 12148  14EA  3A62               	xorlw	98	; case 100
 12149  14EB  1903               	skipnz
 12150  14EC  2CCA               	goto	l694
 12151  14ED  2CEE               	goto	l695
 12152  14EE                     l695:	
 12153  14EE  0008               	return
 12154  14EF                     __end_of_set_leds_top:	
 12155                           
 12156                           	psect	text37
 12157  1009                     __ptext37:	
 12158 ;; *************** function _set_leds_bottom *****************
 12159 ;; Defined at:
 12160 ;;		line 51 in file "LEDs.c"
 12161 ;; Parameters:    Size  Location     Type
 12162 ;;  x               2    2[BANK0 ] int 
 12163 ;; Auto vars:     Size  Location     Type
 12164 ;;		None
 12165 ;; Return value:  Size  Location     Type
 12166 ;;                  1    wreg      void 
 12167 ;; Registers used:
 12168 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12169 ;; Tracked objects:
 12170 ;;		On entry : 0/0
 12171 ;;		On exit  : 0/0
 12172 ;;		Unchanged: 0/0
 12173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12174 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12178 ;;Total ram usage:        2 bytes
 12179 ;; Hardware stack levels used:    1
 12180 ;; Hardware stack levels required when called:    2
 12181 ;; This function calls:
 12182 ;;		Nothing
 12183 ;; This function is called by:
 12184 ;;		_ReadSavedSettings
 12185 ;;		_star_tactiles
 12186 ;;		_solidring_tactiles
 12187 ;;		_read_bottom_tactile
 12188 ;;		_ring_tactiles
 12189 ;; This function uses a non-reentrant model
 12190 ;;
 12191                           
 12192                           
 12193                           ;psect for function _set_leds_bottom
 12194  1009                     _set_leds_bottom:	
 12195                           
 12196                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12197                           
 12198                           ;incstack = 0
 12199                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12200  1009  0022               	movlb	2	; select bank2
 12201  100A  100F               	bcf	15,0	;volatile
 12202                           
 12203                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12204  100B  108F               	bcf	15,1	;volatile
 12205                           
 12206                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12207  100C  110F               	bcf	15,2	;volatile
 12208                           
 12209                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12210  100D  118F               	bcf	15,3	;volatile
 12211                           
 12212                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12213  100E  120F               	bcf	15,4	;volatile
 12214                           
 12215                           ;LEDs.c: 57: switch (x) {
 12216  100F  2826               	goto	l4836
 12217  1010                     l699:	
 12218                           ;LEDs.c: 58: case 1:
 12219                           
 12220                           
 12221                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12222  1010  0022               	movlb	2	; select bank2
 12223  1011  140F               	bsf	15,0	;volatile
 12224                           
 12225                           ;LEDs.c: 60: break;
 12226  1012  0008               	return
 12227  1013                     l701:	
 12228                           ;LEDs.c: 61: case 2:
 12229                           
 12230                           
 12231                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12232  1013  0022               	movlb	2	; select bank2
 12233  1014  148F               	bsf	15,1	;volatile
 12234                           
 12235                           ;LEDs.c: 63: break;
 12236  1015  0008               	return
 12237  1016                     l702:	
 12238                           ;LEDs.c: 64: case 3:
 12239                           
 12240                           
 12241                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12242  1016  0022               	movlb	2	; select bank2
 12243  1017  150F               	bsf	15,2	;volatile
 12244                           
 12245                           ;LEDs.c: 66: break;
 12246  1018  0008               	return
 12247  1019                     l703:	
 12248                           ;LEDs.c: 67: case 4:
 12249                           
 12250                           
 12251                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12252  1019  0022               	movlb	2	; select bank2
 12253  101A  158F               	bsf	15,3	;volatile
 12254                           
 12255                           ;LEDs.c: 69: break;
 12256  101B  0008               	return
 12257  101C                     l704:	
 12258                           ;LEDs.c: 70: case 5:
 12259                           
 12260                           
 12261                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12262  101C  0022               	movlb	2	; select bank2
 12263  101D  160F               	bsf	15,4	;volatile
 12264                           
 12265                           ;LEDs.c: 74: break;
 12266                           
 12267                           ;LEDs.c: 73: case 6:
 12268                           
 12269                           ;LEDs.c: 72: break;
 12270  101E  0008               	return
 12271  101F                     l706:	
 12272                           ;LEDs.c: 75: case 100:
 12273                           
 12274                           
 12275                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12276  101F  0022               	movlb	2	; select bank2
 12277  1020  140F               	bsf	15,0	;volatile
 12278                           
 12279                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12280  1021  148F               	bsf	15,1	;volatile
 12281                           
 12282                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12283  1022  150F               	bsf	15,2	;volatile
 12284                           
 12285                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12286  1023  158F               	bsf	15,3	;volatile
 12287                           
 12288                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12289  1024  160F               	bsf	15,4	;volatile
 12290                           
 12291                           ;LEDs.c: 82: }
 12292                           
 12293                           ;LEDs.c: 81: break;
 12294  1025  0008               	return
 12295  1026                     l4836:	
 12296                           
 12297                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12298                           ; Switch size 1, requested type "space"
 12299                           ; Number of cases is 1, Range of values is 0 to 0
 12300                           ; switch strategies available:
 12301                           ; Name         Instructions Cycles
 12302                           ; simple_byte            4     3 (average)
 12303                           ; direct_byte            8     6 (fixed)
 12304                           ; jumptable            260     6 (fixed)
 12305                           ;	Chosen strategy is simple_byte
 12306  1026  0020               	movlb	0	; select bank0
 12307  1027  0823               	movf	set_leds_bottom@x+1,w
 12308  1028  3A00               	xorlw	0	; case 0
 12309  1029  1903               	skipnz
 12310  102A  282C               	goto	l6180
 12311  102B  2843               	goto	l707
 12312  102C                     l6180:	
 12313                           
 12314                           ; Switch size 1, requested type "space"
 12315                           ; Number of cases is 7, Range of values is 1 to 100
 12316                           ; switch strategies available:
 12317                           ; Name         Instructions Cycles
 12318                           ; simple_byte           22    12 (average)
 12319                           ; direct_byte          209     9 (fixed)
 12320                           ; jumptable            263     9 (fixed)
 12321                           ;	Chosen strategy is simple_byte
 12322  102C  0822               	movf	set_leds_bottom@x,w
 12323  102D  3A01               	xorlw	1	; case 1
 12324  102E  1903               	skipnz
 12325  102F  2810               	goto	l699
 12326  1030  3A03               	xorlw	3	; case 2
 12327  1031  1903               	skipnz
 12328  1032  2813               	goto	l701
 12329  1033  3A01               	xorlw	1	; case 3
 12330  1034  1903               	skipnz
 12331  1035  2816               	goto	l702
 12332  1036  3A07               	xorlw	7	; case 4
 12333  1037  1903               	skipnz
 12334  1038  2819               	goto	l703
 12335  1039  3A01               	xorlw	1	; case 5
 12336  103A  1903               	skipnz
 12337  103B  281C               	goto	l704
 12338  103C  3A03               	xorlw	3	; case 6
 12339  103D  1903               	skipnz
 12340  103E  2843               	goto	l707
 12341  103F  3A62               	xorlw	98	; case 100
 12342  1040  1903               	skipnz
 12343  1041  281F               	goto	l706
 12344  1042  2843               	goto	l707
 12345  1043                     l707:	
 12346  1043  0008               	return
 12347  1044                     __end_of_set_leds_bottom:	
 12348                           
 12349                           	psect	text38
 12350  1ED4                     __ptext38:	
 12351 ;; *************** function _FLASH_ReadWord *****************
 12352 ;; Defined at:
 12353 ;;		line 58 in file "memory.c"
 12354 ;; Parameters:    Size  Location     Type
 12355 ;;  flashAddr       2    2[BANK0 ] unsigned int 
 12356 ;; Auto vars:     Size  Location     Type
 12357 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 12358 ;; Return value:  Size  Location     Type
 12359 ;;                  2    2[BANK0 ] unsigned int 
 12360 ;; Registers used:
 12361 ;;		wreg, status,2, status,0
 12362 ;; Tracked objects:
 12363 ;;		On entry : 0/0
 12364 ;;		On exit  : 0/0
 12365 ;;		Unchanged: 0/0
 12366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12368 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12370 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12371 ;;Total ram usage:        3 bytes
 12372 ;; Hardware stack levels used:    1
 12373 ;; Hardware stack levels required when called:    2
 12374 ;; This function calls:
 12375 ;;		Nothing
 12376 ;; This function is called by:
 12377 ;;		_ReadSavedSettings
 12378 ;;		_FLASH_WriteWord
 12379 ;; This function uses a non-reentrant model
 12380 ;;
 12381                           
 12382                           
 12383                           ;psect for function _FLASH_ReadWord
 12384  1ED4                     _FLASH_ReadWord:	
 12385                           
 12386                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12387                           
 12388                           ;incstack = 0
 12389                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12390  1ED4  3000               	movlw	0
 12391  1ED5  1B8B               	btfsc	11,7	;volatile
 12392  1ED6  3001               	movlw	1
 12393  1ED7  0020               	movlb	0	; select bank0
 12394  1ED8  00A4               	movwf	FLASH_ReadWord@GIEBitValue
 12395                           
 12396                           ;memory.c: 61: INTCONbits.GIE = 0;
 12397  1ED9  138B               	bcf	11,7	;volatile
 12398                           
 12399                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12400  1EDA  0822               	movf	FLASH_ReadWord@flashAddr,w
 12401  1EDB  0023               	movlb	3	; select bank3
 12402  1EDC  0091               	movwf	17	;volatile
 12403                           
 12404                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12405  1EDD  0020               	movlb	0	; select bank0
 12406  1EDE  0823               	movf	FLASH_ReadWord@flashAddr+1,w
 12407  1EDF  0023               	movlb	3	; select bank3
 12408  1EE0  0092               	movwf	18	;volatile
 12409                           
 12410                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12411  1EE1  1315               	bcf	21,6	;volatile
 12412                           
 12413                           ;memory.c: 66: PMCON1bits.RD = 1;
 12414  1EE2  1415               	bsf	21,0	;volatile
 12415                           
 12416                           ;memory.c: 67: __nop();
 12417  1EE3  0000               	nop
 12418                           
 12419                           ;memory.c: 68: __nop();
 12420  1EE4  0000               	nop
 12421                           
 12422                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12423  1EE5  0020               	movlb	0	; select bank0
 12424  1EE6  0C24               	rrf	FLASH_ReadWord@GIEBitValue,w
 12425  1EE7  1C03               	skipc
 12426  1EE8  138B               	bcf	11,7	;volatile
 12427  1EE9  1803               	skipnc
 12428  1EEA  178B               	bsf	11,7	;volatile
 12429                           
 12430                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12431  1EEB  0023               	movlb	3	; select bank3
 12432  1EEC  0814               	movf	20,w	;volatile
 12433  1EED  0020               	movlb	0	; select bank0
 12434  1EEE  00A3               	movwf	?_FLASH_ReadWord+1
 12435  1EEF  0023               	movlb	3	; select bank3
 12436  1EF0  0813               	movf	19,w	;volatile
 12437  1EF1  0020               	movlb	0	; select bank0
 12438  1EF2  00A2               	movwf	?_FLASH_ReadWord
 12439  1EF3  0008               	return
 12440  1EF4                     __end_of_FLASH_ReadWord:	
 12441                           
 12442                           	psect	text39
 12443  07DA                     __ptext39:	
 12444 ;; *************** function _InitializeTaps *****************
 12445 ;; Defined at:
 12446 ;;		line 187 in file "user.c"
 12447 ;; Parameters:    Size  Location     Type
 12448 ;;		None
 12449 ;; Auto vars:     Size  Location     Type
 12450 ;;  itap            2    3[BANK0 ] int 
 12451 ;; Return value:  Size  Location     Type
 12452 ;;                  1    wreg      void 
 12453 ;; Registers used:
 12454 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12455 ;; Tracked objects:
 12456 ;;		On entry : 0/0
 12457 ;;		On exit  : 0/0
 12458 ;;		Unchanged: 0/0
 12459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12462 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12464 ;;Total ram usage:        3 bytes
 12465 ;; Hardware stack levels used:    1
 12466 ;; Hardware stack levels required when called:    2
 12467 ;; This function calls:
 12468 ;;		Nothing
 12469 ;; This function is called by:
 12470 ;;		_main
 12471 ;; This function uses a non-reentrant model
 12472 ;;
 12473                           
 12474                           
 12475                           ;psect for function _InitializeTaps
 12476  07DA                     _InitializeTaps:	
 12477                           
 12478                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 12479                           
 12480                           ;incstack = 0
 12481                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12482  07DA  0020               	movlb	0	; select bank0
 12483  07DB  01A3               	clrf	InitializeTaps@itap
 12484  07DC  01A4               	clrf	InitializeTaps@itap+1
 12485  07DD                     L15:	
 12486  07DD  0824               	movf	InitializeTaps@itap+1,w
 12487  07DE  3A80               	xorlw	128
 12488  07DF  00A2               	movwf	??_InitializeTaps
 12489  07E0  3080               	movlw	128
 12490  07E1  0222               	subwf	??_InitializeTaps,w
 12491  07E2  1D03               	skipz
 12492  07E3  2FE6               	goto	u5735
 12493  07E4  300C               	movlw	12
 12494  07E5  0223               	subwf	InitializeTaps@itap,w
 12495  07E6                     u5735:	
 12496  07E6  1803               	btfsc	3,0
 12497  07E7  0008               	return
 12498                           
 12499                           ;user.c: 189: tap[itap] = 0;
 12500  07E8  0020               	movlb	0	; select bank0
 12501  07E9  0823               	movf	InitializeTaps@itap,w
 12502  07EA  00A2               	movwf	??_InitializeTaps
 12503  07EB  3001               	movlw	1
 12504  07EC                     u5745:	
 12505  07EC  35A2               	lslf	??_InitializeTaps,f
 12506  07ED  3EFF               	addlw	-1
 12507  07EE  1D03               	skipz
 12508  07EF  2FEC               	goto	u5745
 12509  07F0  3522               	lslf	??_InitializeTaps,w
 12510  07F1  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12511  07F2  0086               	movwf	6
 12512  07F3  3001               	movlw	1	; select bank3/4
 12513  07F4  0087               	movwf	7
 12514  07F5  3000               	movlw	0
 12515  07F6  3FC0               	movwi [0]fsr1
 12516  07F7  3000               	movlw	0
 12517  07F8  3FC1               	movwi [1]fsr1
 12518  07F9  3FC2               	movwi [2]fsr1
 12519  07FA  3FC3               	movwi [3]fsr1
 12520  07FB  3001               	movlw	1
 12521  07FC  07A3               	addwf	InitializeTaps@itap,f
 12522  07FD  3000               	movlw	0
 12523  07FE  3DA4               	addwfc	InitializeTaps@itap+1,f
 12524  07FF  2FDD               	goto	L15
 12525  0800                     __end_of_InitializeTaps:	
 12526                           
 12527                           	psect	text40
 12528  1F6E                     __ptext40:	
 12529 ;; *************** function _InitApp *****************
 12530 ;; Defined at:
 12531 ;;		line 23 in file "user.c"
 12532 ;; Parameters:    Size  Location     Type
 12533 ;;		None
 12534 ;; Auto vars:     Size  Location     Type
 12535 ;;		None
 12536 ;; Return value:  Size  Location     Type
 12537 ;;                  1    wreg      void 
 12538 ;; Registers used:
 12539 ;;		wreg, status,2, status,0, pclath, cstack
 12540 ;; Tracked objects:
 12541 ;;		On entry : 0/0
 12542 ;;		On exit  : 0/0
 12543 ;;		Unchanged: 0/0
 12544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12549 ;;Total ram usage:        0 bytes
 12550 ;; Hardware stack levels used:    1
 12551 ;; Hardware stack levels required when called:    4
 12552 ;; This function calls:
 12553 ;;		_init_adc
 12554 ;;		_init_pwm
 12555 ;; This function is called by:
 12556 ;;		_main
 12557 ;; This function uses a non-reentrant model
 12558 ;;
 12559                           
 12560                           
 12561                           ;psect for function _InitApp
 12562  1F6E                     _InitApp:	
 12563                           
 12564                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12565                           
 12566                           ;incstack = 0
 12567                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12568  1F6E  0021               	movlb	1	; select bank1
 12569  1F6F  100D               	bcf	13,0	;volatile
 12570                           
 12571                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12572  1F70  108D               	bcf	13,1	;volatile
 12573                           
 12574                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12575  1F71  110D               	bcf	13,2	;volatile
 12576                           
 12577                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12578  1F72  118D               	bcf	13,3	;volatile
 12579                           
 12580                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12581  1F73  120D               	bcf	13,4	;volatile
 12582                           
 12583                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12584  1F74  128D               	bcf	13,5	;volatile
 12585                           
 12586                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12587  1F75  140E               	bsf	14,0	;volatile
 12588                           
 12589                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12590  1F76  120E               	bcf	14,4	;volatile
 12591                           
 12592                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12593  1F77  128E               	bcf	14,5	;volatile
 12594                           
 12595                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12596  1F78  100F               	bcf	15,0	;volatile
 12597                           
 12598                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12599  1F79  108F               	bcf	15,1	;volatile
 12600                           
 12601                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12602  1F7A  110F               	bcf	15,2	;volatile
 12603                           
 12604                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12605  1F7B  118F               	bcf	15,3	;volatile
 12606                           
 12607                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12608  1F7C  120F               	bcf	15,4	;volatile
 12609                           
 12610                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12611  1F7D  168F               	bsf	15,5	;volatile
 12612                           
 12613                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12614  1F7E  170F               	bsf	15,6	;volatile
 12615                           
 12616                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12617  1F7F  178F               	bsf	15,7	;volatile
 12618                           
 12619                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12620  1F80  1410               	bsf	16,0	;volatile
 12621                           
 12622                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12623  1F81  1490               	bsf	16,1	;volatile
 12624                           
 12625                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12626  1F82  0023               	movlb	3	; select bank3
 12627  1F83  1010               	bcf	16,0	;volatile
 12628                           
 12629                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12630  1F84  1090               	bcf	16,1	;volatile
 12631                           
 12632                           ;user.c: 53: PORTEbits.RE0 = 0;
 12633  1F85  0020               	movlb	0	; select bank0
 12634  1F86  1010               	bcf	16,0	;volatile
 12635                           
 12636                           ;user.c: 54: PORTEbits.RE1 = 0;
 12637  1F87  1090               	bcf	16,1	;volatile
 12638                           
 12639                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12640  1F88  0026               	movlb	6	; select bank6
 12641  1F89  100C               	bcf	12,0	;volatile
 12642                           
 12643                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12644  1F8A  108C               	bcf	12,1	;volatile
 12645                           
 12646                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12647  1F8B  110C               	bcf	12,2	;volatile
 12648                           
 12649                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12650  1F8C  118C               	bcf	12,3	;volatile
 12651                           
 12652                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12653  1F8D  120C               	bcf	12,4	;volatile
 12654                           
 12655                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12656  1F8E  128C               	bcf	12,5	;volatile
 12657                           
 12658                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12659  1F8F  170C               	bsf	12,6	;volatile
 12660                           
 12661                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12662  1F90  0028               	movlb	8	; select bank8
 12663  1F91  130C               	bcf	12,6	;volatile
 12664                           
 12665                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12666  1F92  0026               	movlb	6	; select bank6
 12667  1F93  108D               	bcf	13,1	;volatile
 12668                           
 12669                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12670  1F94  110D               	bcf	13,2	;volatile
 12671                           
 12672                           ;user.c: 68: init_adc();
 12673  1F95  319D  25F1  319F   	fcall	_init_adc
 12674                           
 12675                           ;user.c: 69: init_pwm();
 12676  1F98  3191  21F7         	fcall	_init_pwm
 12677                           
 12678                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12679  1F9A  178B               	bsf	11,7	;volatile
 12680                           
 12681                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12682  1F9B  168B               	bsf	11,5	;volatile
 12683                           
 12684                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12685  1F9C  110B               	bcf	11,2	;volatile
 12686  1F9D  0008               	return
 12687  1F9E                     __end_of_InitApp:	
 12688                           
 12689                           	psect	text41
 12690  11F7                     __ptext41:	
 12691 ;; *************** function _init_pwm *****************
 12692 ;; Defined at:
 12693 ;;		line 123 in file "user.c"
 12694 ;; Parameters:    Size  Location     Type
 12695 ;;		None
 12696 ;; Auto vars:     Size  Location     Type
 12697 ;;		None
 12698 ;; Return value:  Size  Location     Type
 12699 ;;                  1    wreg      void 
 12700 ;; Registers used:
 12701 ;;		wreg, status,2, status,0, pclath, cstack
 12702 ;; Tracked objects:
 12703 ;;		On entry : 0/0
 12704 ;;		On exit  : 0/0
 12705 ;;		Unchanged: 0/0
 12706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12711 ;;Total ram usage:        0 bytes
 12712 ;; Hardware stack levels used:    1
 12713 ;; Hardware stack levels required when called:    3
 12714 ;; This function calls:
 12715 ;;		_init_timer0
 12716 ;;		_init_timer2
 12717 ;; This function is called by:
 12718 ;;		_InitApp
 12719 ;; This function uses a non-reentrant model
 12720 ;;
 12721                           
 12722                           
 12723                           ;psect for function _init_pwm
 12724  11F7                     _init_pwm:	
 12725                           
 12726                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12727                           
 12728                           ;incstack = 0
 12729                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12730  11F7  0022               	movlb	2	; select bank2
 12731  11F8  101D               	bcf	29,0	;volatile
 12732                           
 12733                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12734  11F9  0021               	movlb	1	; select bank1
 12735  11FA  110E               	bcf	14,2	;volatile
 12736                           
 12737                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12738  11FB  108E               	bcf	14,1	;volatile
 12739                           
 12740                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12741  11FC  0026               	movlb	6	; select bank6
 12742  11FD  100D               	bcf	13,0	;volatile
 12743                           
 12744                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12745  11FE  118D               	bcf	13,3	;volatile
 12746                           
 12747                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12748  11FF  120D               	bcf	13,4	;volatile
 12749                           
 12750                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12751  1200  0021               	movlb	1	; select bank1
 12752  1201  1310               	bcf	16,6	;volatile
 12753                           
 12754                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12755  1202  1290               	bcf	16,5	;volatile
 12756                           
 12757                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12758  1203  1210               	bcf	16,4	;volatile
 12759                           
 12760                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12761  1204  1190               	bcf	16,3	;volatile
 12762                           
 12763                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12764  1205  1110               	bcf	16,2	;volatile
 12765                           
 12766                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12767  1206  300F               	movlw	15
 12768  1207  0025               	movlb	5	; select bank5
 12769  1208  0493               	iorwf	19,f	;volatile
 12770                           
 12771                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12772  1209  300F               	movlw	15
 12773  120A  049A               	iorwf	26,f	;volatile
 12774                           
 12775                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12776  120B  300F               	movlw	15
 12777  120C  0026               	movlb	6	; select bank6
 12778  120D  0493               	iorwf	19,f	;volatile
 12779                           
 12780                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12781  120E  300F               	movlw	15
 12782  120F  049A               	iorwf	26,f	;volatile
 12783                           
 12784                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12785  1210  300F               	movlw	15
 12786  1211  049E               	iorwf	30,f	;volatile
 12787                           
 12788                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12789  1212  300F               	movlw	15
 12790  1213  002C               	movlb	12	; select bank12
 12791  1214  0493               	iorwf	19,f	;volatile
 12792                           
 12793                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12794  1215  300F               	movlw	15
 12795  1216  0496               	iorwf	22,f	;volatile
 12796                           
 12797                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12798  1217  300F               	movlw	15
 12799  1218  0499               	iorwf	25,f	;volatile
 12800                           
 12801                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12802  1219  300F               	movlw	15
 12803  121A  049C               	iorwf	28,f	;volatile
 12804                           
 12805                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12806  121B  300F               	movlw	15
 12807  121C  049F               	iorwf	31,f	;volatile
 12808                           
 12809                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12810  121D  0025               	movlb	5	; select bank5
 12811  121E  019D               	clrf	29	;volatile
 12812                           
 12813                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12814  121F  019E               	clrf	30	;volatile
 12815                           
 12816                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12817  1220  019F               	clrf	31	;volatile
 12818                           
 12819                           ;user.c: 148: CCPR1 = 50;
 12820  1221  3000               	movlw	0
 12821  1222  0092               	movwf	18	;volatile
 12822  1223  3032               	movlw	50
 12823  1224  0091               	movwf	17	;volatile
 12824                           
 12825                           ;user.c: 149: CCPR2 = 100;
 12826  1225  3000               	movlw	0
 12827  1226  0099               	movwf	25	;volatile
 12828  1227  3064               	movlw	100
 12829  1228  0098               	movwf	24	;volatile
 12830                           
 12831                           ;user.c: 150: CCPR3 = 150;
 12832  1229  3000               	movlw	0
 12833  122A  0026               	movlb	6	; select bank6
 12834  122B  0092               	movwf	18	;volatile
 12835  122C  3096               	movlw	150
 12836  122D  0091               	movwf	17	;volatile
 12837                           
 12838                           ;user.c: 151: CCPR4 = 200;
 12839  122E  3000               	movlw	0
 12840  122F  0099               	movwf	25	;volatile
 12841  1230  30C8               	movlw	200
 12842  1231  0098               	movwf	24	;volatile
 12843                           
 12844                           ;user.c: 152: init_timer2();
 12845  1232  319D  25E8  3191   	fcall	_init_timer2
 12846                           
 12847                           ;user.c: 153: init_timer0();
 12848  1235  319D  25E1         	fcall	_init_timer0
 12849  1237  0008               	return
 12850  1238                     __end_of_init_pwm:	
 12851                           
 12852                           	psect	text42
 12853  1DE8                     __ptext42:	
 12854 ;; *************** function _init_timer2 *****************
 12855 ;; Defined at:
 12856 ;;		line 156 in file "user.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;		None
 12859 ;; Auto vars:     Size  Location     Type
 12860 ;;		None
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  1    wreg      void 
 12863 ;; Registers used:
 12864 ;;		wreg, status,2, status,0
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12874 ;;Total ram usage:        0 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:    2
 12877 ;; This function calls:
 12878 ;;		Nothing
 12879 ;; This function is called by:
 12880 ;;		_init_pwm
 12881 ;; This function uses a non-reentrant model
 12882 ;;
 12883                           
 12884                           
 12885                           ;psect for function _init_timer2
 12886  1DE8                     _init_timer2:	
 12887                           
 12888                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 12889                           
 12890                           ;incstack = 0
 12891                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12892  1DE8  3087               	movlw	-121
 12893  1DE9  0020               	movlb	0	; select bank0
 12894  1DEA  059C               	andwf	28,f	;volatile
 12895                           
 12896                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 12897  1DEB  30FC               	movlw	-4
 12898  1DEC  059C               	andwf	28,f	;volatile
 12899                           
 12900                           ;user.c: 159: PR2 = 0xFF;
 12901  1DED  30FF               	movlw	255
 12902  1DEE  009B               	movwf	27	;volatile
 12903                           
 12904                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 12905  1DEF  151C               	bsf	28,2	;volatile
 12906  1DF0  0008               	return
 12907  1DF1                     __end_of_init_timer2:	
 12908                           
 12909                           	psect	text43
 12910  1DE1                     __ptext43:	
 12911 ;; *************** function _init_timer0 *****************
 12912 ;; Defined at:
 12913 ;;		line 163 in file "user.c"
 12914 ;; Parameters:    Size  Location     Type
 12915 ;;		None
 12916 ;; Auto vars:     Size  Location     Type
 12917 ;;		None
 12918 ;; Return value:  Size  Location     Type
 12919 ;;                  1    wreg      void 
 12920 ;; Registers used:
 12921 ;;		None
 12922 ;; Tracked objects:
 12923 ;;		On entry : 0/0
 12924 ;;		On exit  : 0/0
 12925 ;;		Unchanged: 0/0
 12926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12931 ;;Total ram usage:        0 bytes
 12932 ;; Hardware stack levels used:    1
 12933 ;; Hardware stack levels required when called:    2
 12934 ;; This function calls:
 12935 ;;		Nothing
 12936 ;; This function is called by:
 12937 ;;		_init_pwm
 12938 ;; This function uses a non-reentrant model
 12939 ;;
 12940                           
 12941                           
 12942                           ;psect for function _init_timer0
 12943  1DE1                     _init_timer0:	
 12944                           
 12945                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 12946                           
 12947                           ;incstack = 0
 12948                           ; Regs used in _init_timer0: []
 12949  1DE1  0021               	movlb	1	; select bank1
 12950  1DE2  1295               	bcf	21,5	;volatile
 12951                           
 12952                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 12953  1DE3  1195               	bcf	21,3	;volatile
 12954                           
 12955                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 12956  1DE4  1015               	bcf	21,0	;volatile
 12957                           
 12958                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 12959  1DE5  1495               	bsf	21,1	;volatile
 12960                           
 12961                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 12962  1DE6  1115               	bcf	21,2	;volatile
 12963  1DE7  0008               	return
 12964  1DE8                     __end_of_init_timer0:	
 12965                           
 12966                           	psect	text44
 12967  1DF1                     __ptext44:	
 12968 ;; *************** function _init_adc *****************
 12969 ;; Defined at:
 12970 ;;		line 109 in file "user.c"
 12971 ;; Parameters:    Size  Location     Type
 12972 ;;		None
 12973 ;; Auto vars:     Size  Location     Type
 12974 ;;		None
 12975 ;; Return value:  Size  Location     Type
 12976 ;;                  1    wreg      void 
 12977 ;; Registers used:
 12978 ;;		wreg, status,2, status,0
 12979 ;; Tracked objects:
 12980 ;;		On entry : 0/0
 12981 ;;		On exit  : 0/0
 12982 ;;		Unchanged: 0/0
 12983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12988 ;;Total ram usage:        0 bytes
 12989 ;; Hardware stack levels used:    1
 12990 ;; Hardware stack levels required when called:    2
 12991 ;; This function calls:
 12992 ;;		Nothing
 12993 ;; This function is called by:
 12994 ;;		_InitApp
 12995 ;; This function uses a non-reentrant model
 12996 ;;
 12997                           
 12998                           
 12999                           ;psect for function _init_adc
 13000  1DF1                     _init_adc:	
 13001                           
 13002                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 13003                           
 13004                           ;incstack = 0
 13005                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 13006  1DF1  0021               	movlb	1	; select bank1
 13007  1DF2  179E               	bsf	30,7	;volatile
 13008                           
 13009                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 13010  1DF3  081E               	movf	30,w	;volatile
 13011  1DF4  398F               	andlw	-113
 13012  1DF5  3860               	iorlw	96
 13013  1DF6  009E               	movwf	30	;volatile
 13014                           
 13015                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 13016  1DF7  30FC               	movlw	-4
 13017  1DF8  059E               	andwf	30,f	;volatile
 13018                           
 13019                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 13020  1DF9  141D               	bsf	29,0	;volatile
 13021  1DFA  0008               	return
 13022  1DFB                     __end_of_init_adc:	
 13023                           
 13024                           	psect	text45
 13025  1DD9                     __ptext45:	
 13026 ;; *************** function _ConfigureOscillator *****************
 13027 ;; Defined at:
 13028 ;;		line 18 in file "system.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;		None
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;		None
 13033 ;; Return value:  Size  Location     Type
 13034 ;;                  1    wreg      void 
 13035 ;; Registers used:
 13036 ;;		wreg, status,2, status,0
 13037 ;; Tracked objects:
 13038 ;;		On entry : 0/0
 13039 ;;		On exit  : 0/0
 13040 ;;		Unchanged: 0/0
 13041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13046 ;;Total ram usage:        0 bytes
 13047 ;; Hardware stack levels used:    1
 13048 ;; Hardware stack levels required when called:    2
 13049 ;; This function calls:
 13050 ;;		Nothing
 13051 ;; This function is called by:
 13052 ;;		_main
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _ConfigureOscillator
 13058  1DD9                     _ConfigureOscillator:	
 13059                           
 13060                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13064  1DD9  30FC               	movlw	-4
 13065  1DDA  0021               	movlb	1	; select bank1
 13066  1DDB  0599               	andwf	25,f	;volatile
 13067  1DDC  0008               	return
 13068  1DDD                     __end_of_ConfigureOscillator:	
 13069                           
 13070                           	psect	intentry
 13071  0004                     __pintentry:	
 13072 ;; *************** function _isr *****************
 13073 ;; Defined at:
 13074 ;;		line 23 in file "interrupts.c"
 13075 ;; Parameters:    Size  Location     Type
 13076 ;;		None
 13077 ;; Auto vars:     Size  Location     Type
 13078 ;;  tmpSubDelay     2    0[BANK0 ] int 
 13079 ;; Return value:  Size  Location     Type
 13080 ;;                  1    wreg      void 
 13081 ;; Registers used:
 13082 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13083 ;; Tracked objects:
 13084 ;;		On entry : 0/0
 13085 ;;		On exit  : 0/0
 13086 ;;		Unchanged: 0/0
 13087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13090 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13091 ;;      Totals:         9       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13092 ;;Total ram usage:       11 bytes
 13093 ;; Hardware stack levels used:    1
 13094 ;; Hardware stack levels required when called:    1
 13095 ;; This function calls:
 13096 ;;		i1_set_leds_top
 13097 ;; This function is called by:
 13098 ;;		Interrupt level 1
 13099 ;; This function uses a non-reentrant model
 13100 ;;
 13101                           
 13102  0004                     _isr:	
 13103                           
 13104                           ;incstack = 0
 13105                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13106  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13107  0005  3180               	pagesel	$
 13108  0006  0020               	movlb	0	; select bank0
 13109  0007  087F               	movf	127,w
 13110  0008  00FC               	movwf	??_isr+8
 13111                           
 13112                           ;interrupts.c: 24: int tmpSubDelay;
 13113                           ;interrupts.c: 25: extern volatile long timer;
 13114                           ;interrupts.c: 26: extern volatile long sub_timer;
 13115                           ;interrupts.c: 27: extern volatile long tap_timer;
 13116                           ;interrupts.c: 29: extern volatile long baseline_delay_time;
 13117                           ;interrupts.c: 31: extern int top_push_state;
 13118                           ;interrupts.c: 32: extern uint8_t feedback_start;
 13119                           ;interrupts.c: 33: extern volatile long mod_timer;
 13120                           ;interrupts.c: 34: extern volatile long delay_time;
 13121                           ;interrupts.c: 35: if (INTCONbits.TMR0IF == 1) {
 13122  0009  1D0B               	btfss	11,2	;volatile
 13123  000A  2912               	goto	i1l97
 13124                           
 13125                           ;interrupts.c: 36: tmpSubDelay = delay_time;
 13126  000B  0021               	movlb	1	; select bank1
 13127  000C  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13128  000D  0020               	movlb	0	; select bank0
 13129  000E  00A1               	movwf	isr@tmpSubDelay+1
 13130  000F  0021               	movlb	1	; select bank1
 13131  0010  084D               	movf	_delay_time^(0+128),w	;volatile
 13132  0011  0020               	movlb	0	; select bank0
 13133  0012  00A0               	movwf	isr@tmpSubDelay
 13134                           
 13135                           ;interrupts.c: 37: timer = timer + 1;
 13136  0013  3001               	movlw	1
 13137  0014  00F4               	movwf	??_isr
 13138  0015  3000               	movlw	0
 13139  0016  00F5               	movwf	??_isr+1
 13140  0017  3000               	movlw	0
 13141  0018  00F6               	movwf	??_isr+2
 13142  0019  3000               	movlw	0
 13143  001A  00F7               	movwf	??_isr+3
 13144  001B  0021               	movlb	1	; select bank1
 13145  001C  0865               	movf	_timer^(0+128),w	;volatile
 13146  001D  07F4               	addwf	??_isr,f
 13147  001E  0866               	movf	(_timer+1)^(0+128),w	;volatile
 13148  001F  3DF5               	addwfc	??_isr+1,f
 13149  0020  0867               	movf	(_timer+2)^(0+128),w	;volatile
 13150  0021  3DF6               	addwfc	??_isr+2,f
 13151  0022  0868               	movf	(_timer+3)^(0+128),w	;volatile
 13152  0023  3DF7               	addwfc	??_isr+3,f
 13153  0024  0877               	movf	??_isr+3,w
 13154  0025  00E8               	movwf	(_timer+3)^(0+128)	;volatile
 13155  0026  0876               	movf	??_isr+2,w
 13156  0027  00E7               	movwf	(_timer+2)^(0+128)	;volatile
 13157  0028  0875               	movf	??_isr+1,w
 13158  0029  00E6               	movwf	(_timer+1)^(0+128)	;volatile
 13159  002A  0874               	movf	??_isr,w
 13160  002B  00E5               	movwf	_timer^(0+128)	;volatile
 13161                           
 13162                           ;interrupts.c: 38: sub_timer = sub_timer + 1;
 13163  002C  3001               	movlw	1
 13164  002D  00F4               	movwf	??_isr
 13165  002E  3000               	movlw	0
 13166  002F  00F5               	movwf	??_isr+1
 13167  0030  3000               	movlw	0
 13168  0031  00F6               	movwf	??_isr+2
 13169  0032  3000               	movlw	0
 13170  0033  00F7               	movwf	??_isr+3
 13171  0034  085D               	movf	_sub_timer^(0+128),w	;volatile
 13172  0035  07F4               	addwf	??_isr,f
 13173  0036  085E               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13174  0037  3DF5               	addwfc	??_isr+1,f
 13175  0038  085F               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13176  0039  3DF6               	addwfc	??_isr+2,f
 13177  003A  0860               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13178  003B  3DF7               	addwfc	??_isr+3,f
 13179  003C  0877               	movf	??_isr+3,w
 13180  003D  00E0               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13181  003E  0876               	movf	??_isr+2,w
 13182  003F  00DF               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13183  0040  0875               	movf	??_isr+1,w
 13184  0041  00DE               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13185  0042  0874               	movf	??_isr,w
 13186  0043  00DD               	movwf	_sub_timer^(0+128)	;volatile
 13187                           
 13188                           ;interrupts.c: 39: tap_timer = tap_timer + 1;
 13189  0044  3001               	movlw	1
 13190  0045  00F4               	movwf	??_isr
 13191  0046  3000               	movlw	0
 13192  0047  00F5               	movwf	??_isr+1
 13193  0048  3000               	movlw	0
 13194  0049  00F6               	movwf	??_isr+2
 13195  004A  3000               	movlw	0
 13196  004B  00F7               	movwf	??_isr+3
 13197  004C  0861               	movf	_tap_timer^(0+128),w	;volatile
 13198  004D  07F4               	addwf	??_isr,f
 13199  004E  0862               	movf	(_tap_timer+1)^(0+128),w	;volatile
 13200  004F  3DF5               	addwfc	??_isr+1,f
 13201  0050  0863               	movf	(_tap_timer+2)^(0+128),w	;volatile
 13202  0051  3DF6               	addwfc	??_isr+2,f
 13203  0052  0864               	movf	(_tap_timer+3)^(0+128),w	;volatile
 13204  0053  3DF7               	addwfc	??_isr+3,f
 13205  0054  0877               	movf	??_isr+3,w
 13206  0055  00E4               	movwf	(_tap_timer+3)^(0+128)	;volatile
 13207  0056  0876               	movf	??_isr+2,w
 13208  0057  00E3               	movwf	(_tap_timer+2)^(0+128)	;volatile
 13209  0058  0875               	movf	??_isr+1,w
 13210  0059  00E2               	movwf	(_tap_timer+1)^(0+128)	;volatile
 13211  005A  0874               	movf	??_isr,w
 13212  005B  00E1               	movwf	_tap_timer^(0+128)	;volatile
 13213                           
 13214                           ;interrupts.c: 40: mod_timer = mod_timer + 1;
 13215  005C  3001               	movlw	1
 13216  005D  00F4               	movwf	??_isr
 13217  005E  3000               	movlw	0
 13218  005F  00F5               	movwf	??_isr+1
 13219  0060  3000               	movlw	0
 13220  0061  00F6               	movwf	??_isr+2
 13221  0062  3000               	movlw	0
 13222  0063  00F7               	movwf	??_isr+3
 13223  0064  0022               	movlb	2	; select bank2
 13224  0065  0824               	movf	_mod_timer^(0+256),w	;volatile
 13225  0066  07F4               	addwf	??_isr,f
 13226  0067  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 13227  0068  3DF5               	addwfc	??_isr+1,f
 13228  0069  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 13229  006A  3DF6               	addwfc	??_isr+2,f
 13230  006B  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13231  006C  3DF7               	addwfc	??_isr+3,f
 13232  006D  0877               	movf	??_isr+3,w
 13233  006E  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13234  006F  0876               	movf	??_isr+2,w
 13235  0070  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13236  0071  0875               	movf	??_isr+1,w
 13237  0072  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13238  0073  0874               	movf	??_isr,w
 13239  0074  00A4               	movwf	_mod_timer^(0+256)	;volatile
 13240                           
 13241                           ;interrupts.c: 41: test_timer++;
 13242  0075  3001               	movlw	1
 13243  0076  0023               	movlb	3	; select bank3
 13244  0077  07E4               	addwf	_test_timer^(0+384),f	;volatile
 13245  0078  3000               	movlw	0
 13246  0079  3DE5               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13247  007A  3000               	movlw	0
 13248  007B  3DE6               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13249  007C  3000               	movlw	0
 13250  007D  3DE7               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13251                           
 13252                           ;interrupts.c: 42: if (feedback_start == 1) {
 13253  007E  0021               	movlb	1	; select bank1
 13254  007F  036B               	decf	_feedback_start^(0+128),w
 13255  0080  1D03               	btfss	3,2
 13256  0081  2899               	goto	i1l4278
 13257                           
 13258                           ;interrupts.c: 43: feedback_timer++;
 13259  0082  3001               	movlw	1
 13260  0083  0022               	movlb	2	; select bank2
 13261  0084  07B8               	addwf	_feedback_timer^(0+256),f	;volatile
 13262  0085  3000               	movlw	0
 13263  0086  3DB9               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13264                           
 13265                           ;interrupts.c: 44: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13266  0087  0839               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13267  0088  0021               	movlb	1	; select bank1
 13268  0089  0258               	subwf	(_long_press_limit+1)^(0+128),w
 13269  008A  1D03               	skipz
 13270  008B  2890               	goto	u421_25
 13271  008C  0022               	movlb	2	; select bank2
 13272  008D  0838               	movf	_feedback_timer^(0+256),w	;volatile
 13273  008E  0021               	movlb	1	; select bank1
 13274  008F  0257               	subwf	_long_press_limit^(0+128),w
 13275  0090                     u421_25:	
 13276  0090  1803               	skipnc
 13277  0091  2899               	goto	i1l4278
 13278  0092  0858               	movf	(_long_press_limit+1)^(0+128),w
 13279  0093  0022               	movlb	2	; select bank2
 13280  0094  00B9               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13281  0095  0021               	movlb	1	; select bank1
 13282  0096  0857               	movf	_long_press_limit^(0+128),w
 13283  0097  0022               	movlb	2	; select bank2
 13284  0098  00B8               	movwf	_feedback_timer^(0+256)	;volatile
 13285  0099                     i1l4278:	
 13286                           
 13287                           ;interrupts.c: 45: }
 13288                           ;interrupts.c: 46: if (longTap_start == 1) {
 13289  0099  0022               	movlb	2	; select bank2
 13290  009A  0353               	decf	_longTap_start^(0+256),w
 13291  009B  1D03               	btfss	3,2
 13292  009C  28B3               	goto	i1l4284
 13293                           
 13294                           ;interrupts.c: 47: longTap_timer++;
 13295  009D  3001               	movlw	1
 13296  009E  07C4               	addwf	_longTap_timer^(0+256),f	;volatile
 13297  009F  3000               	movlw	0
 13298  00A0  3DC5               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13299                           
 13300                           ;interrupts.c: 48: if (longTap_timer > long_press_limit) {
 13301  00A1  0845               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13302  00A2  0021               	movlb	1	; select bank1
 13303  00A3  0258               	subwf	(_long_press_limit+1)^(0+128),w
 13304  00A4  1D03               	skipz
 13305  00A5  28AA               	goto	u423_25
 13306  00A6  0022               	movlb	2	; select bank2
 13307  00A7  0844               	movf	_longTap_timer^(0+256),w	;volatile
 13308  00A8  0021               	movlb	1	; select bank1
 13309  00A9  0257               	subwf	_long_press_limit^(0+128),w
 13310  00AA                     u423_25:	
 13311  00AA  1803               	skipnc
 13312  00AB  28B3               	goto	i1l4284
 13313                           
 13314                           ;interrupts.c: 49: longTap_timer = long_press_limit;
 13315  00AC  0858               	movf	(_long_press_limit+1)^(0+128),w
 13316  00AD  0022               	movlb	2	; select bank2
 13317  00AE  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13318  00AF  0021               	movlb	1	; select bank1
 13319  00B0  0857               	movf	_long_press_limit^(0+128),w
 13320  00B1  0022               	movlb	2	; select bank2
 13321  00B2  00C4               	movwf	_longTap_timer^(0+256)	;volatile
 13322  00B3                     i1l4284:	
 13323                           
 13324                           ;interrupts.c: 50: }
 13325                           ;interrupts.c: 51: }
 13326                           ;interrupts.c: 52: INTCONbits.TMR0IF = 0;
 13327  00B3  110B               	bcf	11,2	;volatile
 13328                           
 13329                           ;interrupts.c: 54: if (adjust_sub_delay == 1) {
 13330  00B4  0022               	movlb	2	; select bank2
 13331  00B5  032A               	decf	_adjust_sub_delay^(0+256),w
 13332  00B6  042B               	iorwf	(_adjust_sub_delay+1)^(0+256),w
 13333  00B7  1D03               	btfss	3,2
 13334  00B8  2912               	goto	i1l97
 13335                           
 13336                           ;interrupts.c: 55: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13337  00B9  0021               	movlb	1	; select bank1
 13338  00BA  0860               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13339  00BB  3A80               	xorlw	128
 13340  00BC  00F4               	movwf	??_isr
 13341  00BD  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13342  00BE  3A80               	xorlw	128
 13343  00BF  0274               	subwf	??_isr,w
 13344  00C0  1D03               	skipz
 13345  00C1  28CC               	goto	u425_23
 13346  00C2  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13347  00C3  025F               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13348  00C4  1D03               	skipz
 13349  00C5  28CC               	goto	u425_23
 13350  00C6  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13351  00C7  025E               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13352  00C8  1D03               	skipz
 13353  00C9  28CC               	goto	u425_23
 13354  00CA  084D               	movf	_delay_time^(0+128),w	;volatile
 13355  00CB  025D               	subwf	_sub_timer^(0+128),w	;volatile
 13356  00CC                     u425_23:	
 13357  00CC  1C03               	skipc
 13358  00CD  2912               	goto	i1l97
 13359  00CE  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13360  00CF  00F4               	movwf	??_isr
 13361  00D0  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13362  00D1  00F5               	movwf	??_isr+1
 13363  00D2  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13364  00D3  00F6               	movwf	??_isr+2
 13365  00D4  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13366  00D5  00F7               	movwf	??_isr+3
 13367  00D6  0965               	comf	_timer^(0+128),w	;volatile
 13368  00D7  00F8               	movwf	??_isr+4
 13369  00D8  0966               	comf	(_timer+1)^(0+128),w	;volatile
 13370  00D9  00F9               	movwf	??_isr+5
 13371  00DA  0967               	comf	(_timer+2)^(0+128),w	;volatile
 13372  00DB  00FA               	movwf	??_isr+6
 13373  00DC  0968               	comf	(_timer+3)^(0+128),w	;volatile
 13374  00DD  00FB               	movwf	??_isr+7
 13375  00DE  0AF8               	incf	??_isr+4,f
 13376  00DF  1903               	skipnz
 13377  00E0  0AF9               	incf	??_isr+5,f
 13378  00E1  1903               	skipnz
 13379  00E2  0AFA               	incf	??_isr+6,f
 13380  00E3  1903               	skipnz
 13381  00E4  0AFB               	incf	??_isr+7,f
 13382  00E5  0878               	movf	??_isr+4,w
 13383  00E6  07F4               	addwf	??_isr,f
 13384  00E7  0879               	movf	??_isr+5,w
 13385  00E8  3DF5               	addwfc	??_isr+1,f
 13386  00E9  087A               	movf	??_isr+6,w
 13387  00EA  3DF6               	addwfc	??_isr+2,f
 13388  00EB  087B               	movf	??_isr+7,w
 13389  00EC  3DF7               	addwfc	??_isr+3,f
 13390  00ED  1BF7               	btfsc	??_isr+3,7
 13391  00EE  28FC               	goto	i1l4292
 13392  00EF  0877               	movf	??_isr+3,w
 13393  00F0  1D03               	btfss	3,2
 13394  00F1  2912               	goto	i1l97
 13395  00F2  0876               	movf	??_isr+2,w
 13396  00F3  1D03               	btfss	3,2
 13397  00F4  2912               	goto	i1l97
 13398  00F5  0875               	movf	??_isr+1,w
 13399  00F6  1D03               	btfss	3,2
 13400  00F7  2912               	goto	i1l97
 13401  00F8  3004               	movlw	4
 13402  00F9  0274               	subwf	??_isr,w
 13403  00FA  1803               	btfsc	3,0
 13404  00FB  2912               	goto	i1l97
 13405  00FC                     i1l4292:	
 13406                           
 13407                           ;interrupts.c: 56: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13408  00FC  0965               	comf	_timer^(0+128),w	;volatile
 13409  00FD  00F4               	movwf	??_isr
 13410  00FE  0966               	comf	(_timer+1)^(0+128),w	;volatile
 13411  00FF  00F5               	movwf	??_isr+1
 13412  0100  0AF4               	incf	??_isr,f
 13413  0101  1903               	skipnz
 13414  0102  0AF5               	incf	??_isr+1,f
 13415  0103  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13416  0104  0774               	addwf	??_isr,w
 13417  0105  00F6               	movwf	??_isr+2
 13418  0106  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13419  0107  3D75               	addwfc	??_isr+1,w
 13420  0108  00F7               	movwf	??_isr+3
 13421  0109  085D               	movf	_sub_timer^(0+128),w	;volatile
 13422  010A  0776               	addwf	??_isr+2,w
 13423  010B  0020               	movlb	0	; select bank0
 13424  010C  00A0               	movwf	isr@tmpSubDelay
 13425  010D  0021               	movlb	1	; select bank1
 13426  010E  085E               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13427  010F  3D77               	addwfc	??_isr+3,w
 13428  0110  0020               	movlb	0	; select bank0
 13429  0111  00A1               	movwf	isr@tmpSubDelay+1
 13430  0112                     i1l97:	
 13431                           
 13432                           ;interrupts.c: 57: }
 13433                           ;interrupts.c: 58: }
 13434                           ;interrupts.c: 59: }
 13435                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1) {
 13436  0112  0020               	movlb	0	; select bank0
 13437  0113  086A               	movf	_longTap_state,w	;volatile
 13438  0114  1D03               	btfss	3,2
 13439  0115  2963               	goto	i1l4314
 13440  0116  086B               	movf	_doubleTap_state,w	;volatile
 13441  0117  1D03               	btfss	3,2
 13442  0118  2963               	goto	i1l4314
 13443                           
 13444                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 13445  0119  0021               	movlb	1	; select bank1
 13446  011A  0868               	movf	(_timer+3)^(0+128),w	;volatile
 13447  011B  3A80               	xorlw	128
 13448  011C  00F4               	movwf	??_isr
 13449  011D  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13450  011E  3A80               	xorlw	128
 13451  011F  0274               	subwf	??_isr,w
 13452  0120  1D03               	skipz
 13453  0121  292C               	goto	u429_23
 13454  0122  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13455  0123  0267               	subwf	(_timer+2)^(0+128),w	;volatile
 13456  0124  1D03               	skipz
 13457  0125  292C               	goto	u429_23
 13458  0126  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13459  0127  0266               	subwf	(_timer+1)^(0+128),w	;volatile
 13460  0128  1D03               	skipz
 13461  0129  292C               	goto	u429_23
 13462  012A  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13463  012B  0265               	subwf	_timer^(0+128),w	;volatile
 13464  012C                     u429_23:	
 13465  012C  1C03               	skipc
 13466  012D  2951               	goto	i1l4310
 13467                           
 13468                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 13469  012E  0022               	movlb	2	; select bank2
 13470  012F  160D               	bsf	13,4	;volatile
 13471                           
 13472                           ;interrupts.c: 80: timer = 0;
 13473  0130  3000               	movlw	0
 13474  0131  0021               	movlb	1	; select bank1
 13475  0132  00E8               	movwf	(_timer+3)^(0+128)	;volatile
 13476  0133  3000               	movlw	0
 13477  0134  00E7               	movwf	(_timer+2)^(0+128)	;volatile
 13478  0135  3000               	movlw	0
 13479  0136  00E6               	movwf	(_timer+1)^(0+128)	;volatile
 13480  0137  3000               	movlw	0
 13481  0138  00E5               	movwf	_timer^(0+128)	;volatile
 13482                           
 13483                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 13484  0139  0022               	movlb	2	; select bank2
 13485  013A  034A               	decf	_reset_sub_delay^(0+256),w
 13486  013B  044B               	iorwf	(_reset_sub_delay+1)^(0+256),w
 13487  013C  1D03               	btfss	3,2
 13488  013D  2951               	goto	i1l4310
 13489                           
 13490                           ;interrupts.c: 82: CCPR1 = delay_counter;
 13491  013E  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13492  013F  0025               	movlb	5	; select bank5
 13493  0140  0092               	movwf	18	;volatile
 13494  0141  0022               	movlb	2	; select bank2
 13495  0142  0834               	movf	_delay_counter^(0+256),w	;volatile
 13496  0143  0025               	movlb	5	; select bank5
 13497  0144  0091               	movwf	17	;volatile
 13498                           
 13499                           ;interrupts.c: 83: reset_sub_delay = 0;
 13500  0145  0022               	movlb	2	; select bank2
 13501  0146  01CA               	clrf	_reset_sub_delay^(0+256)
 13502  0147  01CB               	clrf	(_reset_sub_delay+1)^(0+256)
 13503                           
 13504                           ;interrupts.c: 84: sub_timer = delay_time;
 13505  0148  0021               	movlb	1	; select bank1
 13506  0149  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13507  014A  00E0               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13508  014B  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13509  014C  00DF               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13510  014D  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13511  014E  00DE               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13512  014F  084D               	movf	_delay_time^(0+128),w	;volatile
 13513  0150  00DD               	movwf	_sub_timer^(0+128)	;volatile
 13514  0151                     i1l4310:	
 13515                           
 13516                           ;interrupts.c: 85: }
 13517                           ;interrupts.c: 86: }
 13518                           ;interrupts.c: 88: if (timer >= 30) {
 13519  0151  0021               	movlb	1	; select bank1
 13520  0152  1BE8               	btfsc	(_timer+3)^(0+128),7	;volatile
 13521  0153  2963               	goto	i1l4314
 13522  0154  0868               	movf	(_timer+3)^(0+128),w	;volatile
 13523  0155  1D03               	btfss	3,2
 13524  0156  2961               	goto	i1l4312
 13525  0157  0867               	movf	(_timer+2)^(0+128),w	;volatile
 13526  0158  1D03               	btfss	3,2
 13527  0159  2961               	goto	i1l4312
 13528  015A  0866               	movf	(_timer+1)^(0+128),w	;volatile
 13529  015B  1D03               	btfss	3,2
 13530  015C  2961               	goto	i1l4312
 13531  015D  301E               	movlw	30
 13532  015E  0265               	subwf	_timer^(0+128),w	;volatile
 13533  015F  1C03               	btfss	3,0
 13534  0160  2963               	goto	i1l4314
 13535  0161                     i1l4312:	
 13536                           
 13537                           ;interrupts.c: 90: LATBbits.LATB4 = 0;
 13538  0161  0022               	movlb	2	; select bank2
 13539  0162  120D               	bcf	13,4	;volatile
 13540  0163                     i1l4314:	
 13541                           
 13542                           ;interrupts.c: 92: }
 13543                           ;interrupts.c: 93: }
 13544                           ;interrupts.c: 96: if (sub_timer >= tmpSubDelay) {
 13545  0163  0020               	movlb	0	; select bank0
 13546  0164  0820               	movf	isr@tmpSubDelay,w
 13547  0165  00F4               	movwf	??_isr
 13548  0166  0821               	movf	isr@tmpSubDelay+1,w
 13549  0167  00F5               	movwf	??_isr+1
 13550  0168  3000               	movlw	0
 13551  0169  1BF5               	btfsc	??_isr+1,7
 13552  016A  30FF               	movlw	255
 13553  016B  00F6               	movwf	??_isr+2
 13554  016C  00F7               	movwf	??_isr+3
 13555  016D  0021               	movlb	1	; select bank1
 13556  016E  0860               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13557  016F  3A80               	xorlw	128
 13558  0170  00F8               	movwf	??_isr+4
 13559  0171  0877               	movf	??_isr+3,w
 13560  0172  3A80               	xorlw	128
 13561  0173  0278               	subwf	??_isr+4,w
 13562  0174  1D03               	skipz
 13563  0175  2980               	goto	u432_23
 13564  0176  0876               	movf	??_isr+2,w
 13565  0177  025F               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13566  0178  1D03               	skipz
 13567  0179  2980               	goto	u432_23
 13568  017A  0875               	movf	??_isr+1,w
 13569  017B  025E               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13570  017C  1D03               	skipz
 13571  017D  2980               	goto	u432_23
 13572  017E  0874               	movf	??_isr,w
 13573  017F  025D               	subwf	_sub_timer^(0+128),w	;volatile
 13574  0180                     u432_23:	
 13575  0180  1C03               	skipc
 13576  0181  29A1               	goto	i1l4324
 13577                           
 13578                           ;interrupts.c: 97: if (suspend_blink == 0) {
 13579  0182  086C               	movf	_suspend_blink^(0+128),w	;volatile
 13580  0183  1D03               	btfss	3,2
 13581  0184  2990               	goto	i1l4320
 13582                           
 13583                           ;interrupts.c: 98: set_leds_top(top_push_state, 1);
 13584  0185  085A               	movf	(_top_push_state+1)^(0+128),w
 13585  0186  00F1               	movwf	i1set_leds_top@x+1
 13586  0187  0859               	movf	_top_push_state^(0+128),w
 13587  0188  00F0               	movwf	i1set_leds_top@x
 13588  0189  3001               	movlw	1
 13589  018A  00F2               	movwf	i1set_leds_top@ledState
 13590  018B  3000               	movlw	0
 13591  018C  00F3               	movwf	i1set_leds_top@ledState+1
 13592  018D  3192  22C4  3180   	fcall	i1_set_leds_top
 13593  0190                     i1l4320:	
 13594                           
 13595                           ;interrupts.c: 99: }
 13596                           ;interrupts.c: 100: tmpSubDelay = delay_time;
 13597  0190  0021               	movlb	1	; select bank1
 13598  0191  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13599  0192  0020               	movlb	0	; select bank0
 13600  0193  00A1               	movwf	isr@tmpSubDelay+1
 13601  0194  0021               	movlb	1	; select bank1
 13602  0195  084D               	movf	_delay_time^(0+128),w	;volatile
 13603  0196  0020               	movlb	0	; select bank0
 13604  0197  00A0               	movwf	isr@tmpSubDelay
 13605                           
 13606                           ;interrupts.c: 101: sub_timer = 0;
 13607  0198  3000               	movlw	0
 13608  0199  0021               	movlb	1	; select bank1
 13609  019A  00E0               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13610  019B  3000               	movlw	0
 13611  019C  00DF               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13612  019D  3000               	movlw	0
 13613  019E  00DE               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13614  019F  3000               	movlw	0
 13615  01A0  00DD               	movwf	_sub_timer^(0+128)	;volatile
 13616  01A1                     i1l4324:	
 13617                           
 13618                           ;interrupts.c: 102: }
 13619                           ;interrupts.c: 104: if (sub_timer >= 20) {
 13620  01A1  1BE0               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 13621  01A2  29BD               	goto	i1l4330
 13622  01A3  0860               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13623  01A4  1D03               	btfss	3,2
 13624  01A5  29B0               	goto	i1l4326
 13625  01A6  085F               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13626  01A7  1D03               	btfss	3,2
 13627  01A8  29B0               	goto	i1l4326
 13628  01A9  085E               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13629  01AA  1D03               	btfss	3,2
 13630  01AB  29B0               	goto	i1l4326
 13631  01AC  3014               	movlw	20
 13632  01AD  025D               	subwf	_sub_timer^(0+128),w	;volatile
 13633  01AE  1C03               	btfss	3,0
 13634  01AF  29BD               	goto	i1l4330
 13635  01B0                     i1l4326:	
 13636                           
 13637                           ;interrupts.c: 105: if (suspend_blink == 0) {
 13638  01B0  086C               	movf	_suspend_blink^(0+128),w	;volatile
 13639  01B1  1D03               	btfss	3,2
 13640  01B2  29BD               	goto	i1l4330
 13641                           
 13642                           ;interrupts.c: 106: set_leds_top(top_push_state, 0);
 13643  01B3  085A               	movf	(_top_push_state+1)^(0+128),w
 13644  01B4  00F1               	movwf	i1set_leds_top@x+1
 13645  01B5  0859               	movf	_top_push_state^(0+128),w
 13646  01B6  00F0               	movwf	i1set_leds_top@x
 13647  01B7  3000               	movlw	0
 13648  01B8  00F2               	movwf	i1set_leds_top@ledState
 13649  01B9  00F3               	movwf	i1set_leds_top@ledState+1
 13650  01BA  3192  22C4  3180   	fcall	i1_set_leds_top
 13651  01BD                     i1l4330:	
 13652                           
 13653                           ;interrupts.c: 107: }
 13654                           ;interrupts.c: 108: }
 13655                           ;interrupts.c: 111: if (preset_programmning_on == 1) {
 13656  01BD  0022               	movlb	2	; select bank2
 13657  01BE  0357               	decf	_preset_programmning_on^(0+256),w
 13658  01BF  1D03               	btfss	3,2
 13659  01C0  29E6               	goto	i1l4342
 13660                           
 13661                           ;interrupts.c: 112: preset_blink++;
 13662  01C1  3001               	movlw	1
 13663  01C2  00F4               	movwf	??_isr
 13664  01C3  0874               	movf	??_isr,w
 13665  01C4  07D6               	addwf	_preset_blink^(0+256),f
 13666                           
 13667                           ;interrupts.c: 114: if (preset_blink >= blink_delay) {
 13668  01C5  085B               	movf	(_blink_delay+1)^(0+256),w
 13669  01C6  3A80               	xorlw	128
 13670  01C7  3C80               	sublw	128
 13671  01C8  1D03               	skipz
 13672  01C9  29CC               	goto	u437_25
 13673  01CA  085A               	movf	_blink_delay^(0+256),w
 13674  01CB  0256               	subwf	_preset_blink^(0+256),w
 13675  01CC                     u437_25:	
 13676  01CC  1C03               	skipc
 13677  01CD  29E4               	goto	i1l113
 13678                           
 13679                           ;interrupts.c: 115: LATBbits.LATB1 = 1;
 13680  01CE  0022               	movlb	2	; select bank2
 13681  01CF  148D               	bsf	13,1	;volatile
 13682                           
 13683                           ;interrupts.c: 116: if (preset_blink > blink_delay*2) {
 13684  01D0  085B               	movf	(_blink_delay+1)^(0+256),w
 13685  01D1  00F5               	movwf	??_isr+1
 13686  01D2  085A               	movf	_blink_delay^(0+256),w
 13687  01D3  00F4               	movwf	??_isr
 13688  01D4  35F4               	lslf	??_isr,f
 13689  01D5  0DF5               	rlf	??_isr+1,f
 13690  01D6  0875               	movf	??_isr+1,w
 13691  01D7  3A80               	xorlw	128
 13692  01D8  00F6               	movwf	??_isr+2
 13693  01D9  3080               	movlw	128
 13694  01DA  0276               	subwf	??_isr+2,w
 13695  01DB  1D03               	skipz
 13696  01DC  29DF               	goto	u438_25
 13697  01DD  0856               	movf	_preset_blink^(0+256),w
 13698  01DE  0274               	subwf	??_isr,w
 13699  01DF                     u438_25:	
 13700  01DF  1803               	skipnc
 13701  01E0  29EB               	goto	i1l118
 13702                           
 13703                           ;interrupts.c: 117: preset_blink = 0;
 13704  01E1  0022               	movlb	2	; select bank2
 13705  01E2  01D6               	clrf	_preset_blink^(0+256)
 13706                           
 13707                           ;interrupts.c: 118: }
 13708                           ;interrupts.c: 120: } else {
 13709  01E3  29EB               	goto	i1l118
 13710  01E4                     i1l113:	
 13711                           
 13712                           ;interrupts.c: 121: LATBbits.LATB1 = 0;
 13713  01E4  0022               	movlb	2	; select bank2
 13714  01E5  29EA               	goto	i1l4346
 13715  01E6                     i1l4342:	
 13716                           ;interrupts.c: 122: }
 13717                           ;interrupts.c: 124: } else {
 13718                           
 13719                           
 13720                           ;interrupts.c: 125: if (preset_blink > 0) {
 13721  01E6  0856               	movf	_preset_blink^(0+256),w
 13722  01E7  1903               	btfsc	3,2
 13723  01E8  29EB               	goto	i1l118
 13724                           
 13725                           ;interrupts.c: 126: preset_blink = 0;
 13726  01E9  01D6               	clrf	_preset_blink^(0+256)
 13727  01EA                     i1l4346:	
 13728                           
 13729                           ;interrupts.c: 127: LATBbits.LATB1 = 0;
 13730  01EA  108D               	bcf	13,1	;volatile
 13731  01EB                     i1l118:	
 13732  01EB  087C               	movf	??_isr+8,w
 13733  01EC  0020               	movlb	0	; select bank0
 13734  01ED  00FF               	movwf	127
 13735  01EE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13736  01EF  0009               	retfie
 13737  01F0                     __end_of_isr:	
 13738                           
 13739                           	psect	text47
 13740  12C4                     __ptext47:	
 13741 ;; *************** function i1_set_leds_top *****************
 13742 ;; Defined at:
 13743 ;;		line 16 in file "LEDs.c"
 13744 ;; Parameters:    Size  Location     Type
 13745 ;;  x               2    0[COMMON] int 
 13746 ;;  ledState        2    2[COMMON] int 
 13747 ;; Auto vars:     Size  Location     Type
 13748 ;;		None
 13749 ;; Return value:  Size  Location     Type
 13750 ;;                  1    wreg      void 
 13751 ;; Registers used:
 13752 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13753 ;; Tracked objects:
 13754 ;;		On entry : 0/0
 13755 ;;		On exit  : 0/0
 13756 ;;		Unchanged: 0/0
 13757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13758 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13761 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13762 ;;Total ram usage:        4 bytes
 13763 ;; Hardware stack levels used:    1
 13764 ;; This function calls:
 13765 ;;		Nothing
 13766 ;; This function is called by:
 13767 ;;		_isr
 13768 ;; This function uses a non-reentrant model
 13769 ;;
 13770                           
 13771                           
 13772                           ;psect for function i1_set_leds_top
 13773  12C4                     i1_set_leds_top:	
 13774                           
 13775                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13776                           
 13777                           ;incstack = 0
 13778                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13779  12C4  0027               	movlb	7	; select bank7
 13780  12C5  100C               	bcf	12,0	;volatile
 13781                           
 13782                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13783  12C6  108C               	bcf	12,1	;volatile
 13784                           
 13785                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13786  12C7  110C               	bcf	12,2	;volatile
 13787                           
 13788                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13789  12C8  118C               	bcf	12,3	;volatile
 13790                           
 13791                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13792  12C9  120C               	bcf	12,4	;volatile
 13793                           
 13794                           ;LEDs.c: 22: switch (x) {
 13795  12CA  2AEF               	goto	i1l4262
 13796  12CB                     i1l4250:	
 13797                           ;LEDs.c: 23: case 1:
 13798                           
 13799                           
 13800                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13801  12CB  0C72               	rrf	i1set_leds_top@ledState,w
 13802  12CC  1C03               	skipc
 13803  12CD  100C               	bcf	12,0	;volatile
 13804  12CE  1803               	skipnc
 13805  12CF  140C               	bsf	12,0	;volatile
 13806                           
 13807                           ;LEDs.c: 25: break;
 13808  12D0  0008               	return
 13809  12D1                     i1l4252:	
 13810                           ;LEDs.c: 26: case 2:
 13811                           
 13812                           
 13813                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13814  12D1  0C72               	rrf	i1set_leds_top@ledState,w
 13815  12D2  1C03               	skipc
 13816  12D3  108C               	bcf	12,1	;volatile
 13817  12D4  1803               	skipnc
 13818  12D5  148C               	bsf	12,1	;volatile
 13819                           
 13820                           ;LEDs.c: 28: break;
 13821  12D6  0008               	return
 13822  12D7                     i1l4254:	
 13823                           ;LEDs.c: 29: case 3:
 13824                           
 13825                           
 13826                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13827  12D7  0C72               	rrf	i1set_leds_top@ledState,w
 13828  12D8  1C03               	skipc
 13829  12D9  110C               	bcf	12,2	;volatile
 13830  12DA  1803               	skipnc
 13831  12DB  150C               	bsf	12,2	;volatile
 13832                           
 13833                           ;LEDs.c: 31: break;
 13834  12DC  0008               	return
 13835  12DD                     i1l4256:	
 13836                           ;LEDs.c: 32: case 4:
 13837                           
 13838                           
 13839                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13840  12DD  0C72               	rrf	i1set_leds_top@ledState,w
 13841  12DE  1C03               	skipc
 13842  12DF  118C               	bcf	12,3	;volatile
 13843  12E0  1803               	skipnc
 13844  12E1  158C               	bsf	12,3	;volatile
 13845                           
 13846                           ;LEDs.c: 34: break;
 13847  12E2  0008               	return
 13848  12E3                     i1l4258:	
 13849                           ;LEDs.c: 35: case 5:
 13850                           
 13851                           
 13852                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13853  12E3  0C72               	rrf	i1set_leds_top@ledState,w
 13854  12E4  1C03               	skipc
 13855  12E5  120C               	bcf	12,4	;volatile
 13856  12E6  1803               	skipnc
 13857  12E7  160C               	bsf	12,4	;volatile
 13858                           
 13859                           ;LEDs.c: 39: break;
 13860                           
 13861                           ;LEDs.c: 38: case 6:
 13862                           
 13863                           ;LEDs.c: 37: break;
 13864  12E8  0008               	return
 13865  12E9                     i1l694:	
 13866                           ;LEDs.c: 40: case 100:
 13867                           
 13868                           
 13869                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13870  12E9  140C               	bsf	12,0	;volatile
 13871                           
 13872                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13873  12EA  148C               	bsf	12,1	;volatile
 13874                           
 13875                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13876  12EB  150C               	bsf	12,2	;volatile
 13877                           
 13878                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13879  12EC  158C               	bsf	12,3	;volatile
 13880                           
 13881                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13882  12ED  160C               	bsf	12,4	;volatile
 13883                           
 13884                           ;LEDs.c: 47: }
 13885                           
 13886                           ;LEDs.c: 46: break;
 13887  12EE  0008               	return
 13888  12EF                     i1l4262:	
 13889                           
 13890                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13891                           ; Switch size 1, requested type "space"
 13892                           ; Number of cases is 1, Range of values is 0 to 0
 13893                           ; switch strategies available:
 13894                           ; Name         Instructions Cycles
 13895                           ; simple_byte            4     3 (average)
 13896                           ; direct_byte            8     6 (fixed)
 13897                           ; jumptable            260     6 (fixed)
 13898                           ;	Chosen strategy is simple_byte
 13899  12EF  0871               	movf	i1set_leds_top@x+1,w
 13900  12F0  3A00               	xorlw	0	; case 0
 13901  12F1  1903               	skipnz
 13902  12F2  2AF4               	goto	i1l6182
 13903  12F3  2B0B               	goto	i1l695
 13904  12F4                     i1l6182:	
 13905                           
 13906                           ; Switch size 1, requested type "space"
 13907                           ; Number of cases is 7, Range of values is 1 to 100
 13908                           ; switch strategies available:
 13909                           ; Name         Instructions Cycles
 13910                           ; simple_byte           22    12 (average)
 13911                           ; direct_byte          209     9 (fixed)
 13912                           ; jumptable            263     9 (fixed)
 13913                           ;	Chosen strategy is simple_byte
 13914  12F4  0870               	movf	i1set_leds_top@x,w
 13915  12F5  3A01               	xorlw	1	; case 1
 13916  12F6  1903               	skipnz
 13917  12F7  2ACB               	goto	i1l4250
 13918  12F8  3A03               	xorlw	3	; case 2
 13919  12F9  1903               	skipnz
 13920  12FA  2AD1               	goto	i1l4252
 13921  12FB  3A01               	xorlw	1	; case 3
 13922  12FC  1903               	skipnz
 13923  12FD  2AD7               	goto	i1l4254
 13924  12FE  3A07               	xorlw	7	; case 4
 13925  12FF  1903               	skipnz
 13926  1300  2ADD               	goto	i1l4256
 13927  1301  3A01               	xorlw	1	; case 5
 13928  1302  1903               	skipnz
 13929  1303  2AE3               	goto	i1l4258
 13930  1304  3A03               	xorlw	3	; case 6
 13931  1305  1903               	skipnz
 13932  1306  2B0B               	goto	i1l695
 13933  1307  3A62               	xorlw	98	; case 100
 13934  1308  1903               	skipnz
 13935  1309  2AE9               	goto	i1l694
 13936  130A  2B0B               	goto	i1l695
 13937  130B                     i1l695:	
 13938  130B  0008               	return
 13939  130C                     __end_ofi1_set_leds_top:	
 13940  007E                     btemp	set	126	;btemp
 13941  007E                     int$flags	set	126
 13942  007E                     wtemp	set	126
 13943  007E                     wtemp0	set	126
 13944  0080                     wtemp1	set	128
 13945  0082                     wtemp2	set	130
 13946  0084                     wtemp3	set	132
 13947  0086                     wtemp4	set	134
 13948  0088                     wtemp5	set	136
 13949  007F                     wtemp6	set	127
 13950  007E                     ttemp	set	126
 13951  007E                     ttemp0	set	126
 13952  0081                     ttemp1	set	129
 13953  0084                     ttemp2	set	132
 13954  0087                     ttemp3	set	135
 13955  007F                     ttemp4	set	127
 13956  007E                     ltemp	set	126
 13957  007E                     ltemp0	set	126
 13958  0082                     ltemp1	set	130
 13959  0086                     ltemp2	set	134
 13960  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1092
    BSS         212
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     73      76
    BANK1            80     41      78
    BANK2            80      0      77
    BANK3            80      6      78
    BANK4            80      0      62
    BANK5            80      0      62
    BANK6            80      0      62
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0      64
    BANK10           78      0      62
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->_map
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   64172
                                             26 BANK1     15    15      0
                                              0 BANK3      6     6      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3294
                                             24 BANK0      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4513
                                             24 BANK0      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2056
                                             20 BANK0      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7700
                                             27 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    3963
                                             20 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3737
                                             20 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11643
                                             14 BANK1     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                              0 BANK1     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                             10 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3102
                                             20 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2240
                                             20 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4    1293
                                             23 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                              8 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14370
                                             55 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              2 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             23 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3560
                                             39 BANK0     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                             10 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2244
                                             24 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2210
                                             20 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1670
                                             14 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     290
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     599
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2805
                                             10 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              2 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    0     0      0    2329
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0     261
                                              4 COMMON     9     9      0
                                              0 BANK0      2     2      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___wmul (ARG)
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      6      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3E      13       77.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3E      15       77.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     31B      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      50      20      100.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      3E      26       79.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     31B      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 28 01:30:01 2016

                     _update_mode 0801                      ___altoft@exp 0030                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0031                      ___awdiv@sign 0028                _topTactile_pressed 0159  
      setDoublePressState@f_state 0034               ___wmul@multiplicand 0024                   _updateSwitchTap 0B96  
                    ___ftadd@exp1 0036                      ___ftadd@exp2 0035                      ___ftadd@sign 0034  
                             l344 1FF1                               l701 1013                               l702 1016  
                             l526 1EAE                               l294 02E8                               l703 1019  
                             l519 09B8                               l704 101C                               l706 101F  
                             l707 1043              __size_of_adc_convert 0019                               l842 12BA  
                             l850 136F                               l694 14CA                               l838 1293  
                             l854 139F                               l695 14EE                               l864 0827  
                             l866 0829                               l699 1010                               l867 082C  
                             l868 083A                               _PR2 001B      solidring_tactiles@ring_delay 0036  
                             _map 16CC                               _isr 0004                               _tap 01A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 00B5           __end_of_set_leds_bottom 1044  
                    __CFG_LVP$OFF 0000                      ___ftdiv@cntr 0051                      ___ftdiv@sign 0056  
                            _B25k 03A0                              l1203 0BAC                              l1217 0C66  
                            l1316 1EC1                              l1077 0A41                              l1371 15D4  
                            l1508 0B3F                              l1484 1535                              l5100 0AC8  
                            l1485 153D                              l1477 1522                              l5110 0ADE  
                            l5030 1EBB                              l5104 0ACF                              l1568 16B2  
                            l5016 1F58                              l5130 0B15                              l5122 0AF8  
                            l5140 0B31                              l5132 0B1A                              l5212 0859  
                            l5060 15F5                              l5052 15E5                              l5150 0B63  
                            l5142 0B3B                              l5134 0B1E                              l5230 08AA  
                            l5070 1623                              l5062 1603                              l5302 16C3  
                            l5160 0B7E                              l5128 0B0B                              l5146 0B51  
                            l5170 176E                              l5242 08C6                              l5234 08B2  
                            l5218 086F                              l5074 162E                              l5090 1EFF  
                            l5412 082F                              l5190 17C5                              l5246 08CE  
                            l5078 163C                              l5270 165E                              l5510 0A6C  
                            l5414 083E                              ?_map 0057                              l4800 14A2  
                            l5176 1784                              l5504 0A5F                              l4802 14AA  
                            l5338 1334                              l5362 1288                              l5290 169C  
                            l6180 102C                              l4804 14B2                              l4812 14D1  
                            l5372 12AF                              l5508 0A67                              l5612 0CB5  
                            l5604 0CA9                              l4806 14BA                              l5710 1454  
                            l5198 17DE                              l5382 1364                              l5518 0A7E  
                            l5454 09D4                              l5614 0CFF                              l5542 0BA1  
                            l6174 06CF                              l4808 14C2                              l5392 138B  
                            l5296 16A9                              l5288 168E                              l6176 0923  
                            l5480 0A1E                              l6178 14D7                              l4850 14FF  
                            l5298 16B5                              l5466 09F5                              l5458 09E7  
                            l5618 0D25                              l5626 0D65                              l5810 03C0  
                            l5802 036C                              l4836 1026                              l4860 1527  
                            l4852 1509                              l5716 145F                              l5492 0A34  
                            l5572 0C09                              l5564 0BE1                              l5548 0BBD  
                            l5900 06E3                              l4862 152F                              l4854 150E  
                            l4846 14F8                              l5742 1496                              l5734 1485  
                            l5726 1467                              l4790 1FB1                              l5670 0917  
                            l5662 0905                              l4942 1589                              l5478 0A16  
                            l5566 0BFE                              l5822 045C                              l5814 03FA  
                            l5728 1473                              l5664 0909                              l5584 0C2E  
                            l5920 0797                              l5904 071F                              l5738 148E  
                            l4786 1FA7                              l5666 090D                              l5674 091E  
                            l5498 0A45                              l5586 0C36                              l5922 074A  
                            l5842 0585                              l5834 04FB                              l5826 049C  
                            l5668 0913                              l5676 0937                              l5596 0C5E  
                            l5588 0C45                              l5924 079D                              l5860 0610  
                            l5780 02EC                              ?_isr 0070                              l5870 066D  
                            l5846 05C5                              l5838 053B                              l5782 02EF  
                            l5766 02C2                              l5696 1059                              l5864 0619  
                            l5848 05CA                              l5698 1069                              l5882 0699  
                            l5874 0683                              l4988 1260                              l5892 06C3  
                            l5868 0627                              l5894 06C6                              l5886 06A5  
                            l5878 068E                              l5898 06C9                              u5005 1E7B  
                            u5015 1F4B                              u5115 15F8                              u5035 1E92  
                            u5135 1604                              u5055 1EC2                              u5145 1618  
                            u5065 1EC7                              u5315 0B0C                              u5155 1624  
                            u6215 0BEA                              u5345 0B1F                              u6315 0C77  
                            u5285 0AF9                              u5445 1796                              u5605 08D5  
                            u5525 087B                              u6405 09B1                              u6085 0A50  
                            u6325 0C8E                              u6245 0C13                              u5375 0B32  
                            u5455 17A6                              u5535 088B                              u6335 0CBE  
                            u4905 1544                              u4825 1504                              u6425 105E  
                            u6505 147E                              u5465 17C6                              u5705 16AA  
                            u6345 0CD3                              u6515 1486                              u5475 17D5  
                            u5555 08B3                              u6355 0CE7                              u4845 151D  
                            u4765 1FB2                              u5485 17DF                              u5565 08B9  
                            u5645 1665                              u6605 03F8                              u5735 07E6  
                            u4775 1FB9                              u6375 0D04                              u6615 047A  
                            u5760 1332                              i1l97 0112                              u5745 07EC  
                            u4865 152A                              u5825 12A8                              u6625 049A  
                            u6475 146A                              u5595 08CF                              u5675 168F  
                            u4955 1596                              u5915 0814                              u6715 0622  
                            u6635 0519                              u6555 02DE                              u4980 125E  
                            u6645 0539                              u6495 1474                              u4975 1242  
                            u6743 078F                              u6735 0777                              u6655 05A3  
                            u6575 034D                              u6673 05F3                              u6665 05C3  
                            u6585 036A                              u5955 09CD                              u6595 03DB  
                            u5885 1384                              u5965 09E0                              u5995 09FF  
                   _star_tactiles 1554                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 0152                              _mod1 0520                              _mod2 0220  
                            _mod3 02A0                              _mod4 0320                              _mod5 2576  
                            _main 02AC                      ___ftpack@arg 0022                      ___ftpack@exp 0025  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              fsr1l 0006                              map@x 0057  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
        __end_of_setFeedbackState 1E88                              start 01F0                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 1DE1      updateSwitchTap@tapCntDivisor 003E  
    __end_of_setSwitchBypassState 127E                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 0045                      ___ftmul@sign 0046                   __end_of_InitApp 1F9E  
               ??_restoreLEDState 0022                      ___fttol@exp1 00AD                             ??_map 0066  
                    ___fttol@lval 00A9                             ??_isr 0074                   _switchBypass_up 0166  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 1645                             ?_main 0070  
                 __end_of___awdiv 149B                   __end_of___ftadd 0B96                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1800                   __end_of___ftneg 1009                   __end_of___ftmul 08F6  
                 ___awdiv@divisor 0022                   __end_of___fttol 16CC                             i1l113 01E4  
                           i1l118 01EB                             i1l694 12E9                             i1l695 130B  
                 ___awdiv@counter 0027                             _iB25k 0420               _ConfigureOscillator 1DD9  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 0026  
                 _switchTap_state 016C                 ??_setLongTapState 0024                     ___awtoft@sign 002F  
                           _myBuf 04A0                     ___ftpack@sign 0026                             _timer 00E5  
                  ?_star_tactiles 0070                             main@i 01EA                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 2000                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 12C4                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
           set_subdivision@scalar 00B7              ?_ConfigureOscillator 0070                _getCurrentLEDState 1E22  
              _updateSwitchBypass 09BE           __end_of_updateSwitchTap 0D7E                   __initialization 01F2  
         _updateSwitchBypassState 1DD8                      __end_of_main 07DA           __size_of_InitializeTaps 0026  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 08F6                            ??_main 00BA                     ___fttol@sign1 00A8  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 11F7                    _feedback_timer 0138  
                  _feedback_state 0069                    _feedback_start 00EB                  ?_set_leds_bottom 0022  
                __end_of___altoft 1081                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0024               _baseline_delay_time 00C9              ??_getCurrentLEDState 0022  
                __end_of___awtoft 1F16                  __end_of___ftpack 1554              ??_updateSwitchBypass 0038  
                          i1l4310 0151                            i1l4320 0190                            i1l4312 0161  
                          i1l4250 12CB                            i1l4330 01BD                            i1l4314 0163  
                          i1l4252 12D1                            i1l4324 01A1                            i1l4254 12D7  
                          i1l4262 12EF                            i1l4342 01E6                            i1l4326 01B0  
                          i1l4256 12DD                            i1l4258 12E3                            i1l4346 01EA  
                          i1l4292 00FC                            i1l4284 00B3                            i1l4278 0099  
                          i1l6182 12F4                            u421_25 0090                            u423_25 00AA  
                          u432_23 0180                            _PMADRH 0192                            _PMADRL 0191  
                          u425_23 00CC                            _PMDATH 0194                            _PMDATL 0193  
                          _PMCON2 0196                            u429_23 012C                            u437_25 01CC  
                          u438_25 01DF                    _debounce_count 012E                    _debounce_mode1 0130  
                  _debounce_mode2 0132                         ??_InitApp 0022             ??_ConfigureOscillator 0022  
        __end_of_read_top_tactile 13A9                    __CFG_PWRTE$OFF 0000                            ___lmul 1F9E  
                       ??___aldiv 0030                            ___wmul 1EB8                         ??___awdiv 0026  
                       ??___ftadd 0030                    __CFG_STVREN$ON 0000                         ??___ftdiv 004D  
                       ??___ftneg 0025                         ??___ftmul 003D                         ??___fttol 00A4  
                __end_of_init_adc 1DFB                  __end_of_init_pwm 1238         __size_of_showBootSequence 002B  
                ___awdiv@quotient 0029                      __pdataBANK10 0520             ___ftmul@f3_as_product 0042  
                    __pdataBIGRAM 236E           FLASH_ReadWord@flashAddr 0022                      __pdataCOMMON 007D  
            _getSwitchBypassState 1DDD                         ??_wait_ms 0030              _setSwitchBypassState 1238  
                 ??_star_tactiles 0034            setLongTapState@f_state 0022           __end_of__initialization 02A8  
                      ___altoft@c 002A                        ___ftadd@f1 002A                        ___ftadd@f2 002D  
               _bypass_turning_on 0151                        ___ftdiv@f1 004A                        ___ftdiv@f2 0047  
                      ___ftdiv@f3 0052                    _top_push_state 00D9         ??_updateSwitchBypassState 0024  
                      ___ftneg@f1 0022               _switchBypass_toggle 014E                        ___awtoft@c 002A  
         __end_of_set_subdivision 09BE                        ___ftmul@f1 0037                        ___ftmul@f2 003A  
                      ___fttol@f1 00A0                  ?_updateSwitchTap 0070                      ?_update_mode 0070  
                  __pcstackCOMMON 0070                      __pidataBANK0 0002                      __pidataBANK1 1E47  
                    __pidataBANK2 1E34                      __pidataBANK4 1179                      __pidataBANK5 113B  
                    __pidataBANK6 10FD                      __pidataBANK7 13F9                      __pidataBANK8 13A9  
                _initSwitchBypass 1E13                   _doubleTap_state 006B                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 0022             ?_setSwitchBypassState 0034              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                        __pbssBANK0 006B                        __pbssBANK1 00DD  
                      __pbssBANK2 0120                        __pbssBANK3 01A0                        __pbssBANK9 04A0  
                ??i1_set_leds_top 0074                   _restoreLEDState 1E5B                   __CFG_VCAPEN$OFF 0000  
                      _delayArray 236E                 ?_setFeedbackState 0022                        _delay_time 00CD  
                _long_press_limit 00D7      __size_of_setDoublePressState 002D                        _delayfound 0136  
                      __pmaintext 02AC                ??_setFeedbackState 0024                    _InitializeTaps 07DA  
                         ?___lmul 0022                           ?___wmul 0022                        __pintentry 0004  
                      _blink_rate 00DB                     ??_adc_convert 0024                         ?___altoft 002A  
                  ___lmul@product 002A                   _setLongTapState 1E88                         ?___awtoft 002A  
                       ?___ftpack 0022                    _FLASH_ReadWord 1ED4   __end_of_updateSwitchBypassState 1DD9  
                     modulation@x 0037                       modulation@y 0039                   _debounce_bypass 012C  
                   _suspend_blink 00EC                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1F6E            __end_of_InitializeTaps 0800                     ?_set_leds_top 0022  
                      _knob1_prev 00D3                        _knob2_prev 00D5                        _knob3_prev 015E  
                      _knob4_prev 0160                        _knob5_prev 0162                  ?_set_subdivision 00AE  
                         ___aldiv 15C3                           ___awdiv 1449                   __size_of___lmul 0030  
                         ___ftadd 0AA0                           ___ftdiv 1757                           ___ftneg 1000  
                      _knob_1_pos 013A                        _knob_2_pos 013C                   __size_of___wmul 001C  
                         ___ftmul 0842                        _knob_3_pos 013E                           ___fttol 1645  
                      _knob_4_pos 0140                        _knob_5_pos 0142                 _switchTap_pressed 00ED  
                      ??___altoft 002E                  _showBootSequence 1F16            __end_of_FLASH_ReadWord 1EF4  
                      ??___awtoft 002D                        ??___ftpack 0027                InitializeTaps@itap 0023  
                         __ptext1 0801                           __ptext2 0B96                           __ptext3 1E88  
                         __ptext4 09BE                           __ptext5 1E71                           __ptext6 1F41  
                         __ptext7 1F16                           __ptext8 1554                           __ptext9 11B7  
          ??_getSwitchBypassState 0024                         _T2CONbits 001C                  _adjust_sub_delay 012A  
                    __size_of_map 008B                      __size_of_isr 01EC            ??_setSwitchBypassState 0036  
             __end_of_adc_convert 1EB8                  ___aldiv@dividend 002C                           _wait_ms 1FCE  
         __end_of_restoreLEDState 1E71                           clrloop0 1E08              end_of_initialization 02A8  
                      _modulation 1081                           init_ram 1DFB                        ??_init_adc 0022  
                         initloop 1DFC                        ??_init_pwm 0022      updateSwitchBypassState@state 0022  
              _solidring_tactiles 11B7                     _longTap_timer 0144                     _longTap_state 006A  
                   _longTap_start 0153                    ??_set_leds_top 0026                 ?_read_top_tactile 0070  
                 ?_InitializeTaps 0070           __end_of_setLongTapState 1E9F            i1set_leds_top@ledState 0072  
              ??_read_top_tactile 0034                  ___aldiv@quotient 0033      __size_of_read_bottom_tactile 0046  
             ?_solidring_tactiles 0070         FLASH_ReadWord@GIEBitValue 0024              __size_of_update_mode 0041  
                 ?_FLASH_ReadWord 0022                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010              star_tactiles@reverse 0036                        _test_timer 01E4  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       _SPI_Value 0128           setFeedbackState@f_state 0022              ??_solidring_tactiles 0034  
     __end_of_ConfigureOscillator 1DDD       __size_of_getCurrentLEDState 0012                        map@out_max 0063  
                      map@out_min 0060       __size_of_updateSwitchBypass 00E2          __end_of_initSwitchBypass 1E22  
                     _CCP1CONbits 0293                       ___ftdiv@exp 0055          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A              _switchBypass_pressed 014C                       _CCP3CONbits 0313  
                     _CCP4CONbits 031A                       _CCP5CONbits 031E                       _CCP6CONbits 0613  
                     _CCP7CONbits 0616                       ___ftmul@exp 0041                adc_convert@channel 0025  
                     _CCP8CONbits 0619                       _CCP9CONbits 061C              set_leds_top@ledState 0024  
                   __pidataBANK10 10BF                    __end_of___lmul 1FCE                     __pidataBIGRAM 0D7E  
                  __end_of___wmul 1ED4                       _adc_convert 1E9F                     __pidataCOMMON 0800  
                  _switchTap_down 0158               start_initialization 01F2             _bottomTactile_pressed 0150  
             _setDoublePressState 1F41                       __end_of_map 1757                       __end_of_isr 01F0  
                ?_restoreLEDState 0070                _mod_delay_time_bak 0146             __end_of_star_tactiles 15C3  
                     ?_modulation 0037              ?_setDoublePressState 0034                  ?_setLongTapState 0022  
                        ??___lmul 002A                          ??___wmul 0026                       __pdataBANK0 0069  
                     __pdataBANK1 00C9                       __pdataBANK2 015A                       __pdataBANK4 0220  
                     __pdataBANK5 02A0                       __pdataBANK6 0320                       __pdataBANK7 03A0  
                     __pdataBANK8 0420                     _tap_iteration 0168          __size_of_updateSwitchTap 01E8  
               __size_of___altoft 003D         __size_of_setFeedbackState 0017                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 0022                     ??_init_timer2 0022  
            __end_of_set_leds_top 14EF                         ___latbits 0003                _switchBypass_state 007D  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK3 01E8  
                   _delay_counter 0134          __end_of_showBootSequence 1F41          ?_updateSwitchBypassState 0022  
                  isr@tmpSubDelay 0020                          ?_InitApp 0070             ??_setDoublePressState 0036  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 0028  
               ??_set_leds_bottom 0024                _currentBypassState 016B                          ?___awdiv 0022  
                        ?___ftadd 002A                          ?___ftdiv 0047                          ?___ftneg 0022  
                        ?___ftmul 0037                          ?___fttol 00A0                       _blink_delay 015A  
             __size_of_modulation 003E                       _blink_state 016A                          _CCPTMRS0 029D  
                        _CCPTMRS1 029E                          _CCPTMRS2 029F                          ?_wait_ms 002E  
             _read_bottom_tactile 127E               __end_of_init_timer0 1DE8               __end_of_init_timer2 1DF1  
                       _mod_value 0148                         _mod_timer 0124                  ??_InitializeTaps 0022  
                 ___aldiv@divisor 0028                   ___aldiv@counter 0031                    ___wmul@product 0026  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 0164                         clear_ram0 1E07  
                       _tap_timer 00E1                         _tap_total 01E0                     set_leds_top@x 0022  
                ??_FLASH_ReadWord 0024              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 0038                         map@in_max 005D                         map@in_min 005A  
                       _sub_timer 00DD                        _ADCON0bits 009D                        _ADCON1bits 009E  
                       main@i_378 01EC          __size_of_set_subdivision 00C8                 ___wmul@multiplier 0022  
                set_subdivision@x 00AE                  set_subdivision@y 00B0         __size_of_read_top_tactile 004F  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0046                 ??_updateSwitchTap 0038  
               ___lmul@multiplier 0022                 _ReadSavedSettings 130C                 ?_initSwitchBypass 0070  
                  wait_ms@timeSec 002E                ?_ReadSavedSettings 0070                    wait_ms@timemsl 0030  
     setSwitchBypassState@f_state 0034                ??_initSwitchBypass 0038                  __size_of_InitApp 0030  
                     _mode1_state 0154                     ??_update_mode 0022                       _mode2_state 0155  
           ??_read_bottom_tactile 0034               updateSwitchTap@iCnt 0040               ??_ReadSavedSettings 0026  
                      _APFCONbits 011D                 star_tactiles@iLed 0037                  __size_of___aldiv 0082  
                __size_of___awdiv 0052                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 0022                  __size_of___ftneg 0009                          ___altoft 1044  
                __size_of___ftmul 00B4                  __size_of___fttol 0087                          ___awtoft 1EF4  
           __size_of_set_leds_top 0054                          ___ftpack 14EF                          _map$2160 0066  
          _preset_programmning_on 0157            star_tactiles@iLed_1441 0039                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 0022                  _setFeedbackState 1E71  
                     _init_timer0 1DE1                       _init_timer2 1DE8                _delay_time_changed 015C  
      __end_of_getCurrentLEDState 1E34        __end_of_updateSwitchBypass 0AA0                          __ptext10 1E5B  
                        __ptext11 1E22                          __ptext20 16CC                          __ptext12 08F6  
                        __ptext21 1000                          __ptext13 1645                          __ptext30 1DDD  
                        __ptext22 0842                          __ptext14 1EF4                          __ptext31 1E9F  
                        __ptext23 1757                          __ptext15 135A                          __ptext40 1F6E  
                        __ptext32 1449                          __ptext24 0AA0                          __ptext16 127E  
                        __ptext41 11F7                          __ptext33 1044                          __ptext25 1E13  
                        __ptext17 1081                          __ptext42 1DE8                          __ptext34 14EF  
                        __ptext26 1238                          __ptext18 1EB8                          __ptext43 1DE1  
                        __ptext35 130C                          __ptext27 1FCE                          __ptext19 15C3  
                        __ptext44 1DF1                          __ptext36 149B                          __ptext28 1F9E  
                        __ptext45 1DD9                          __ptext37 1009                          __ptext29 1DD8  
                        __ptext38 1ED4                          __ptext47 12C4                          __ptext39 07DA  
       __end_of_ReadSavedSettings 135A                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 0120                      ??_modulation 003B                       _mod_counter 00E9  
                        _init_adc 1DF1                     __size_of_main 052E                          _init_pwm 11F7  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 149B                          _num_taps 00DC  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 0842  
              __end_of_modulation 10BF                        _INTCONbits 000B                       _tap_history 01CC  
               ??_set_subdivision 00B2                          intlevel1 0000                   _set_leds_bottom 1009  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 0016                ??_showBootSequence 003B                   _reset_sub_delay 014A  
                      _OSCCONbits 0099                      _preset_blink 0156                    i1_set_leds_top 12C4  
__size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F          __size_of_setLongTapState 0017  
                _read_top_tactile 135A                      ___aldiv@sign 0032        __size_of_ReadSavedSettings 004E  
          main@adjusted_pot_value 01E8       __end_of_setDoublePressState 1F6E                      _CCP10CONbits 061F  
               _bottom_push_state 00D1            __end_ofi1_set_leds_top 130C  
