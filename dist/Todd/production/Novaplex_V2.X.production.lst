

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Dec 29 22:43:43 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    28                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    29                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    30                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    34                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x920,80
    87                           	dabs	1,0x8C6,42
    88                           	dabs	1,0x8A0,38
    89                           	dabs	1,0x820,80
    90                           	dabs	1,0x7A0,80
    91                           	dabs	1,0x720,80
    92                           	dabs	1,0x6A0,80
    93                           	dabs	1,0x620,80
    94                           	dabs	1,0x5A0,80
    95                           	dabs	1,0x56E,2
    96                           	dabs	1,0x236E,0,_delayArray
    97                           	dabs	1,0x2576,0,_mod5
    98                           	dabs	1,0x7E,2
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0099                     	;# 
   142  009A                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  011D                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  018F                     	;# 
   159  0190                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020D                     	;# 
   193  020F                     	;# 
   194  0210                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021E                     	;# 
   216  021F                     	;# 
   217  028C                     	;# 
   218  028D                     	;# 
   219  0291                     	;# 
   220  0291                     	;# 
   221  0292                     	;# 
   222  0293                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  029F                     	;# 
   230  030C                     	;# 
   231  030D                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  040C                     	;# 
   250  040D                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  048D                     	;# 
   268  0491                     	;# 
   269  0491                     	;# 
   270  0492                     	;# 
   271  0492                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0494                     	;# 
   276  0494                     	;# 
   277  0495                     	;# 
   278  0495                     	;# 
   279  0496                     	;# 
   280  0496                     	;# 
   281  0497                     	;# 
   282  0497                     	;# 
   283  0595                     	;# 
   284  0596                     	;# 
   285  0597                     	;# 
   286  059C                     	;# 
   287  059D                     	;# 
   288  059E                     	;# 
   289  0611                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061D                     	;# 
   306  061D                     	;# 
   307  061E                     	;# 
   308  061F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  008F                     	;# 
   354  0090                     	;# 
   355  0091                     	;# 
   356  0092                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0110                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018F                     	;# 
   380  0190                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  020F                     	;# 
   415  0210                     	;# 
   416  0211                     	;# 
   417  0211                     	;# 
   418  0212                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0213                     	;# 
   422  0214                     	;# 
   423  0214                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0216                     	;# 
   428  0216                     	;# 
   429  0217                     	;# 
   430  0217                     	;# 
   431  0219                     	;# 
   432  021A                     	;# 
   433  021B                     	;# 
   434  021C                     	;# 
   435  021D                     	;# 
   436  021E                     	;# 
   437  021F                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  0291                     	;# 
   441  0291                     	;# 
   442  0292                     	;# 
   443  0293                     	;# 
   444  0298                     	;# 
   445  0298                     	;# 
   446  0299                     	;# 
   447  029A                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  029F                     	;# 
   451  030C                     	;# 
   452  030D                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  031C                     	;# 
   462  031C                     	;# 
   463  031D                     	;# 
   464  031E                     	;# 
   465  038C                     	;# 
   466  038D                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  040C                     	;# 
   471  040D                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  048D                     	;# 
   489  0491                     	;# 
   490  0491                     	;# 
   491  0492                     	;# 
   492  0492                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0494                     	;# 
   497  0494                     	;# 
   498  0495                     	;# 
   499  0495                     	;# 
   500  0496                     	;# 
   501  0496                     	;# 
   502  0497                     	;# 
   503  0497                     	;# 
   504  0595                     	;# 
   505  0596                     	;# 
   506  0597                     	;# 
   507  059C                     	;# 
   508  059D                     	;# 
   509  059E                     	;# 
   510  0611                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  0614                     	;# 
   516  0615                     	;# 
   517  0616                     	;# 
   518  0617                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  061A                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061D                     	;# 
   527  061D                     	;# 
   528  061E                     	;# 
   529  061F                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0116                     	;# 
   596  0117                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018F                     	;# 
   601  0190                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0197                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  020D                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0219                     	;# 
   653  021A                     	;# 
   654  021B                     	;# 
   655  021C                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029D                     	;# 
   670  029E                     	;# 
   671  029F                     	;# 
   672  030C                     	;# 
   673  030D                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  031C                     	;# 
   683  031C                     	;# 
   684  031D                     	;# 
   685  031E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  040C                     	;# 
   692  040D                     	;# 
   693  0411                     	;# 
   694  0411                     	;# 
   695  0412                     	;# 
   696  0413                     	;# 
   697  0414                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  0418                     	;# 
   702  0418                     	;# 
   703  0419                     	;# 
   704  041A                     	;# 
   705  041B                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  048D                     	;# 
   710  0491                     	;# 
   711  0491                     	;# 
   712  0492                     	;# 
   713  0492                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0494                     	;# 
   718  0494                     	;# 
   719  0495                     	;# 
   720  0495                     	;# 
   721  0496                     	;# 
   722  0496                     	;# 
   723  0497                     	;# 
   724  0497                     	;# 
   725  0595                     	;# 
   726  0596                     	;# 
   727  0597                     	;# 
   728  059C                     	;# 
   729  059D                     	;# 
   730  059E                     	;# 
   731  0611                     	;# 
   732  0611                     	;# 
   733  0612                     	;# 
   734  0613                     	;# 
   735  0614                     	;# 
   736  0614                     	;# 
   737  0615                     	;# 
   738  0616                     	;# 
   739  0617                     	;# 
   740  0617                     	;# 
   741  0618                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061A                     	;# 
   745  061B                     	;# 
   746  061C                     	;# 
   747  061D                     	;# 
   748  061D                     	;# 
   749  061E                     	;# 
   750  061F                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0016                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001C                     	;# 
   792  008C                     	;# 
   793  008D                     	;# 
   794  008E                     	;# 
   795  008F                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0095                     	;# 
   802  0096                     	;# 
   803  0097                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0110                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018F                     	;# 
   822  0190                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0197                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020D                     	;# 
   856  020F                     	;# 
   857  0210                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0216                     	;# 
   871  0217                     	;# 
   872  0217                     	;# 
   873  0219                     	;# 
   874  021A                     	;# 
   875  021B                     	;# 
   876  021C                     	;# 
   877  021D                     	;# 
   878  021E                     	;# 
   879  021F                     	;# 
   880  028C                     	;# 
   881  028D                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029D                     	;# 
   891  029E                     	;# 
   892  029F                     	;# 
   893  030C                     	;# 
   894  030D                     	;# 
   895  0311                     	;# 
   896  0311                     	;# 
   897  0312                     	;# 
   898  0313                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  040C                     	;# 
   913  040D                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  048D                     	;# 
   931  0491                     	;# 
   932  0491                     	;# 
   933  0492                     	;# 
   934  0492                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0494                     	;# 
   939  0494                     	;# 
   940  0495                     	;# 
   941  0495                     	;# 
   942  0496                     	;# 
   943  0496                     	;# 
   944  0497                     	;# 
   945  0497                     	;# 
   946  0595                     	;# 
   947  0596                     	;# 
   948  0597                     	;# 
   949  059C                     	;# 
   950  059D                     	;# 
   951  059E                     	;# 
   952  0611                     	;# 
   953  0611                     	;# 
   954  0612                     	;# 
   955  0613                     	;# 
   956  0614                     	;# 
   957  0614                     	;# 
   958  0615                     	;# 
   959  0616                     	;# 
   960  0617                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061D                     	;# 
   969  061D                     	;# 
   970  061E                     	;# 
   971  061F                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018F                     	;# 
  1043  0190                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020D                     	;# 
  1077  020F                     	;# 
  1078  0210                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  028C                     	;# 
  1102  028D                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029D                     	;# 
  1112  029E                     	;# 
  1113  029F                     	;# 
  1114  030C                     	;# 
  1115  030D                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  031C                     	;# 
  1125  031C                     	;# 
  1126  031D                     	;# 
  1127  031E                     	;# 
  1128  038C                     	;# 
  1129  038D                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  040C                     	;# 
  1134  040D                     	;# 
  1135  0411                     	;# 
  1136  0411                     	;# 
  1137  0412                     	;# 
  1138  0413                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  0418                     	;# 
  1145  0419                     	;# 
  1146  041A                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  048D                     	;# 
  1152  0491                     	;# 
  1153  0491                     	;# 
  1154  0492                     	;# 
  1155  0492                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0494                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0495                     	;# 
  1163  0496                     	;# 
  1164  0496                     	;# 
  1165  0497                     	;# 
  1166  0497                     	;# 
  1167  0595                     	;# 
  1168  0596                     	;# 
  1169  0597                     	;# 
  1170  059C                     	;# 
  1171  059D                     	;# 
  1172  059E                     	;# 
  1173  0611                     	;# 
  1174  0611                     	;# 
  1175  0612                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0614                     	;# 
  1179  0615                     	;# 
  1180  0616                     	;# 
  1181  0617                     	;# 
  1182  0617                     	;# 
  1183  0618                     	;# 
  1184  0619                     	;# 
  1185  061A                     	;# 
  1186  061A                     	;# 
  1187  061B                     	;# 
  1188  061C                     	;# 
  1189  061D                     	;# 
  1190  061D                     	;# 
  1191  061E                     	;# 
  1192  061F                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  000F                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0116                     	;# 
  1259  0117                     	;# 
  1260  011D                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018F                     	;# 
  1264  0190                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0197                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  020D                     	;# 
  1298  020F                     	;# 
  1299  0210                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0298                     	;# 
  1329  0298                     	;# 
  1330  0299                     	;# 
  1331  029A                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0318                     	;# 
  1342  0318                     	;# 
  1343  0319                     	;# 
  1344  031A                     	;# 
  1345  031C                     	;# 
  1346  031C                     	;# 
  1347  031D                     	;# 
  1348  031E                     	;# 
  1349  038C                     	;# 
  1350  038D                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  040C                     	;# 
  1355  040D                     	;# 
  1356  0411                     	;# 
  1357  0411                     	;# 
  1358  0412                     	;# 
  1359  0413                     	;# 
  1360  0414                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  0418                     	;# 
  1365  0418                     	;# 
  1366  0419                     	;# 
  1367  041A                     	;# 
  1368  041B                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  048D                     	;# 
  1373  0491                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0492                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0494                     	;# 
  1381  0494                     	;# 
  1382  0495                     	;# 
  1383  0495                     	;# 
  1384  0496                     	;# 
  1385  0496                     	;# 
  1386  0497                     	;# 
  1387  0497                     	;# 
  1388  0595                     	;# 
  1389  0596                     	;# 
  1390  0597                     	;# 
  1391  059C                     	;# 
  1392  059D                     	;# 
  1393  059E                     	;# 
  1394  0611                     	;# 
  1395  0611                     	;# 
  1396  0612                     	;# 
  1397  0613                     	;# 
  1398  0614                     	;# 
  1399  0614                     	;# 
  1400  0615                     	;# 
  1401  0616                     	;# 
  1402  0617                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  061A                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061D                     	;# 
  1411  061D                     	;# 
  1412  061E                     	;# 
  1413  061F                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  000F                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0016                     	;# 
  1448  0016                     	;# 
  1449  0017                     	;# 
  1450  0018                     	;# 
  1451  0019                     	;# 
  1452  001A                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  008F                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0094                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  010F                     	;# 
  1478  0110                     	;# 
  1479  0116                     	;# 
  1480  0117                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0197                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  020D                     	;# 
  1519  020F                     	;# 
  1520  0210                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  029F                     	;# 
  1556  030C                     	;# 
  1557  030D                     	;# 
  1558  0311                     	;# 
  1559  0311                     	;# 
  1560  0312                     	;# 
  1561  0313                     	;# 
  1562  0318                     	;# 
  1563  0318                     	;# 
  1564  0319                     	;# 
  1565  031A                     	;# 
  1566  031C                     	;# 
  1567  031C                     	;# 
  1568  031D                     	;# 
  1569  031E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  040C                     	;# 
  1576  040D                     	;# 
  1577  0411                     	;# 
  1578  0411                     	;# 
  1579  0412                     	;# 
  1580  0413                     	;# 
  1581  0414                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  0418                     	;# 
  1586  0418                     	;# 
  1587  0419                     	;# 
  1588  041A                     	;# 
  1589  041B                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  048D                     	;# 
  1594  0491                     	;# 
  1595  0491                     	;# 
  1596  0492                     	;# 
  1597  0492                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0494                     	;# 
  1602  0494                     	;# 
  1603  0495                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  0496                     	;# 
  1607  0497                     	;# 
  1608  0497                     	;# 
  1609  0595                     	;# 
  1610  0596                     	;# 
  1611  0597                     	;# 
  1612  059C                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  0611                     	;# 
  1616  0611                     	;# 
  1617  0612                     	;# 
  1618  0613                     	;# 
  1619  0614                     	;# 
  1620  0614                     	;# 
  1621  0615                     	;# 
  1622  0616                     	;# 
  1623  0617                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  061A                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061D                     	;# 
  1632  061D                     	;# 
  1633  061E                     	;# 
  1634  061F                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  000F                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0013                     	;# 
  1666  0014                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  008F                     	;# 
  1680  0090                     	;# 
  1681  0091                     	;# 
  1682  0092                     	;# 
  1683  0093                     	;# 
  1684  0094                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  010C                     	;# 
  1696  010D                     	;# 
  1697  010E                     	;# 
  1698  010F                     	;# 
  1699  0110                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020D                     	;# 
  1740  020F                     	;# 
  1741  0210                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0219                     	;# 
  1758  021A                     	;# 
  1759  021B                     	;# 
  1760  021C                     	;# 
  1761  021D                     	;# 
  1762  021E                     	;# 
  1763  021F                     	;# 
  1764  028C                     	;# 
  1765  028D                     	;# 
  1766  0291                     	;# 
  1767  0291                     	;# 
  1768  0292                     	;# 
  1769  0293                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  030C                     	;# 
  1778  030D                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0318                     	;# 
  1784  0318                     	;# 
  1785  0319                     	;# 
  1786  031A                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  040C                     	;# 
  1797  040D                     	;# 
  1798  0411                     	;# 
  1799  0411                     	;# 
  1800  0412                     	;# 
  1801  0413                     	;# 
  1802  0414                     	;# 
  1803  0415                     	;# 
  1804  0416                     	;# 
  1805  0417                     	;# 
  1806  0418                     	;# 
  1807  0418                     	;# 
  1808  0419                     	;# 
  1809  041A                     	;# 
  1810  041B                     	;# 
  1811  041C                     	;# 
  1812  041D                     	;# 
  1813  041E                     	;# 
  1814  048D                     	;# 
  1815  0491                     	;# 
  1816  0491                     	;# 
  1817  0492                     	;# 
  1818  0492                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0494                     	;# 
  1823  0494                     	;# 
  1824  0495                     	;# 
  1825  0495                     	;# 
  1826  0496                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0497                     	;# 
  1830  0595                     	;# 
  1831  0596                     	;# 
  1832  0597                     	;# 
  1833  059C                     	;# 
  1834  059D                     	;# 
  1835  059E                     	;# 
  1836  0611                     	;# 
  1837  0611                     	;# 
  1838  0612                     	;# 
  1839  0613                     	;# 
  1840  0614                     	;# 
  1841  0614                     	;# 
  1842  0615                     	;# 
  1843  0616                     	;# 
  1844  0617                     	;# 
  1845  0617                     	;# 
  1846  0618                     	;# 
  1847  0619                     	;# 
  1848  061A                     	;# 
  1849  061A                     	;# 
  1850  061B                     	;# 
  1851  061C                     	;# 
  1852  061D                     	;# 
  1853  061D                     	;# 
  1854  061E                     	;# 
  1855  061F                     	;# 
  1856  0FE4                     	;# 
  1857  0FE5                     	;# 
  1858  0FE6                     	;# 
  1859  0FE7                     	;# 
  1860  0FE8                     	;# 
  1861  0FE9                     	;# 
  1862  0FEA                     	;# 
  1863  0FEB                     	;# 
  1864  0FED                     	;# 
  1865  0FEE                     	;# 
  1866  0FEF                     	;# 
  1867  0000                     	;# 
  1868  0001                     	;# 
  1869  0002                     	;# 
  1870  0003                     	;# 
  1871  0004                     	;# 
  1872  0005                     	;# 
  1873  0006                     	;# 
  1874  0007                     	;# 
  1875  0008                     	;# 
  1876  0009                     	;# 
  1877  000A                     	;# 
  1878  000B                     	;# 
  1879  000C                     	;# 
  1880  000D                     	;# 
  1881  000E                     	;# 
  1882  000F                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0013                     	;# 
  1887  0014                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  008F                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  010F                     	;# 
  1920  0110                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018F                     	;# 
  1927  0190                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0197                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  020D                     	;# 
  1961  020F                     	;# 
  1962  0210                     	;# 
  1963  0211                     	;# 
  1964  0211                     	;# 
  1965  0212                     	;# 
  1966  0212                     	;# 
  1967  0213                     	;# 
  1968  0213                     	;# 
  1969  0214                     	;# 
  1970  0214                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0216                     	;# 
  1975  0216                     	;# 
  1976  0217                     	;# 
  1977  0217                     	;# 
  1978  0219                     	;# 
  1979  021A                     	;# 
  1980  021B                     	;# 
  1981  021C                     	;# 
  1982  021D                     	;# 
  1983  021E                     	;# 
  1984  021F                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  0291                     	;# 
  1988  0291                     	;# 
  1989  0292                     	;# 
  1990  0293                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029D                     	;# 
  1996  029E                     	;# 
  1997  029F                     	;# 
  1998  030C                     	;# 
  1999  030D                     	;# 
  2000  0311                     	;# 
  2001  0311                     	;# 
  2002  0312                     	;# 
  2003  0313                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  038C                     	;# 
  2013  038D                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  040C                     	;# 
  2018  040D                     	;# 
  2019  0411                     	;# 
  2020  0411                     	;# 
  2021  0412                     	;# 
  2022  0413                     	;# 
  2023  0414                     	;# 
  2024  0415                     	;# 
  2025  0416                     	;# 
  2026  0417                     	;# 
  2027  0418                     	;# 
  2028  0418                     	;# 
  2029  0419                     	;# 
  2030  041A                     	;# 
  2031  041B                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  048D                     	;# 
  2036  0491                     	;# 
  2037  0491                     	;# 
  2038  0492                     	;# 
  2039  0492                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0494                     	;# 
  2044  0494                     	;# 
  2045  0495                     	;# 
  2046  0495                     	;# 
  2047  0496                     	;# 
  2048  0496                     	;# 
  2049  0497                     	;# 
  2050  0497                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0597                     	;# 
  2054  059C                     	;# 
  2055  059D                     	;# 
  2056  059E                     	;# 
  2057  0611                     	;# 
  2058  0611                     	;# 
  2059  0612                     	;# 
  2060  0613                     	;# 
  2061  0614                     	;# 
  2062  0614                     	;# 
  2063  0615                     	;# 
  2064  0616                     	;# 
  2065  0617                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  061A                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061D                     	;# 
  2074  061D                     	;# 
  2075  061E                     	;# 
  2076  061F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  000F                     	;# 
  2104  0010                     	;# 
  2105  0011                     	;# 
  2106  0012                     	;# 
  2107  0013                     	;# 
  2108  0014                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  008F                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0093                     	;# 
  2126  0094                     	;# 
  2127  0095                     	;# 
  2128  0096                     	;# 
  2129  0097                     	;# 
  2130  0099                     	;# 
  2131  009A                     	;# 
  2132  009B                     	;# 
  2133  009B                     	;# 
  2134  009C                     	;# 
  2135  009D                     	;# 
  2136  009E                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  010F                     	;# 
  2141  0110                     	;# 
  2142  0116                     	;# 
  2143  0117                     	;# 
  2144  011D                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018F                     	;# 
  2148  0190                     	;# 
  2149  0191                     	;# 
  2150  0191                     	;# 
  2151  0192                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0197                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  020D                     	;# 
  2182  020F                     	;# 
  2183  0210                     	;# 
  2184  0211                     	;# 
  2185  0211                     	;# 
  2186  0212                     	;# 
  2187  0212                     	;# 
  2188  0213                     	;# 
  2189  0213                     	;# 
  2190  0214                     	;# 
  2191  0214                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0216                     	;# 
  2196  0216                     	;# 
  2197  0217                     	;# 
  2198  0217                     	;# 
  2199  0219                     	;# 
  2200  021A                     	;# 
  2201  021B                     	;# 
  2202  021C                     	;# 
  2203  021D                     	;# 
  2204  021E                     	;# 
  2205  021F                     	;# 
  2206  028C                     	;# 
  2207  028D                     	;# 
  2208  0291                     	;# 
  2209  0291                     	;# 
  2210  0292                     	;# 
  2211  0293                     	;# 
  2212  0298                     	;# 
  2213  0298                     	;# 
  2214  0299                     	;# 
  2215  029A                     	;# 
  2216  029D                     	;# 
  2217  029E                     	;# 
  2218  029F                     	;# 
  2219  030C                     	;# 
  2220  030D                     	;# 
  2221  0311                     	;# 
  2222  0311                     	;# 
  2223  0312                     	;# 
  2224  0313                     	;# 
  2225  0318                     	;# 
  2226  0318                     	;# 
  2227  0319                     	;# 
  2228  031A                     	;# 
  2229  031C                     	;# 
  2230  031C                     	;# 
  2231  031D                     	;# 
  2232  031E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  040C                     	;# 
  2239  040D                     	;# 
  2240  0411                     	;# 
  2241  0411                     	;# 
  2242  0412                     	;# 
  2243  0413                     	;# 
  2244  0414                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  0418                     	;# 
  2249  0418                     	;# 
  2250  0419                     	;# 
  2251  041A                     	;# 
  2252  041B                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  048D                     	;# 
  2257  0491                     	;# 
  2258  0491                     	;# 
  2259  0492                     	;# 
  2260  0492                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0494                     	;# 
  2266  0495                     	;# 
  2267  0495                     	;# 
  2268  0496                     	;# 
  2269  0496                     	;# 
  2270  0497                     	;# 
  2271  0497                     	;# 
  2272  0595                     	;# 
  2273  0596                     	;# 
  2274  0597                     	;# 
  2275  059C                     	;# 
  2276  059D                     	;# 
  2277  059E                     	;# 
  2278  0611                     	;# 
  2279  0611                     	;# 
  2280  0612                     	;# 
  2281  0613                     	;# 
  2282  0614                     	;# 
  2283  0614                     	;# 
  2284  0615                     	;# 
  2285  0616                     	;# 
  2286  0617                     	;# 
  2287  0617                     	;# 
  2288  0618                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061A                     	;# 
  2292  061B                     	;# 
  2293  061C                     	;# 
  2294  061D                     	;# 
  2295  061D                     	;# 
  2296  061E                     	;# 
  2297  061F                     	;# 
  2298  0FE4                     	;# 
  2299  0FE5                     	;# 
  2300  0FE6                     	;# 
  2301  0FE7                     	;# 
  2302  0FE8                     	;# 
  2303  0FE9                     	;# 
  2304  0FEA                     	;# 
  2305  0FEB                     	;# 
  2306  0FED                     	;# 
  2307  0FEE                     	;# 
  2308  0FEF                     	;# 
  2309  0000                     	;# 
  2310  0001                     	;# 
  2311  0002                     	;# 
  2312  0003                     	;# 
  2313  0004                     	;# 
  2314  0005                     	;# 
  2315  0006                     	;# 
  2316  0007                     	;# 
  2317  0008                     	;# 
  2318  0009                     	;# 
  2319  000A                     	;# 
  2320  000B                     	;# 
  2321  000C                     	;# 
  2322  000D                     	;# 
  2323  000E                     	;# 
  2324  000F                     	;# 
  2325  0010                     	;# 
  2326  0011                     	;# 
  2327  0012                     	;# 
  2328  0013                     	;# 
  2329  0014                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  008F                     	;# 
  2343  0090                     	;# 
  2344  0091                     	;# 
  2345  0092                     	;# 
  2346  0093                     	;# 
  2347  0094                     	;# 
  2348  0095                     	;# 
  2349  0096                     	;# 
  2350  0097                     	;# 
  2351  0099                     	;# 
  2352  009A                     	;# 
  2353  009B                     	;# 
  2354  009B                     	;# 
  2355  009C                     	;# 
  2356  009D                     	;# 
  2357  009E                     	;# 
  2358  010C                     	;# 
  2359  010D                     	;# 
  2360  010E                     	;# 
  2361  010F                     	;# 
  2362  0110                     	;# 
  2363  0116                     	;# 
  2364  0117                     	;# 
  2365  011D                     	;# 
  2366  018C                     	;# 
  2367  018D                     	;# 
  2368  018F                     	;# 
  2369  0190                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020D                     	;# 
  2403  020F                     	;# 
  2404  0210                     	;# 
  2405  0211                     	;# 
  2406  0211                     	;# 
  2407  0212                     	;# 
  2408  0212                     	;# 
  2409  0213                     	;# 
  2410  0213                     	;# 
  2411  0214                     	;# 
  2412  0214                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0216                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0217                     	;# 
  2420  0219                     	;# 
  2421  021A                     	;# 
  2422  021B                     	;# 
  2423  021C                     	;# 
  2424  021D                     	;# 
  2425  021E                     	;# 
  2426  021F                     	;# 
  2427  028C                     	;# 
  2428  028D                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0298                     	;# 
  2434  0298                     	;# 
  2435  0299                     	;# 
  2436  029A                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  0311                     	;# 
  2443  0311                     	;# 
  2444  0312                     	;# 
  2445  0313                     	;# 
  2446  0318                     	;# 
  2447  0318                     	;# 
  2448  0319                     	;# 
  2449  031A                     	;# 
  2450  031C                     	;# 
  2451  031C                     	;# 
  2452  031D                     	;# 
  2453  031E                     	;# 
  2454  038C                     	;# 
  2455  038D                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  040C                     	;# 
  2460  040D                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  048D                     	;# 
  2478  0491                     	;# 
  2479  0491                     	;# 
  2480  0492                     	;# 
  2481  0492                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0494                     	;# 
  2486  0494                     	;# 
  2487  0495                     	;# 
  2488  0495                     	;# 
  2489  0496                     	;# 
  2490  0496                     	;# 
  2491  0497                     	;# 
  2492  0497                     	;# 
  2493  0595                     	;# 
  2494  0596                     	;# 
  2495  0597                     	;# 
  2496  059C                     	;# 
  2497  059D                     	;# 
  2498  059E                     	;# 
  2499  0611                     	;# 
  2500  0611                     	;# 
  2501  0612                     	;# 
  2502  0613                     	;# 
  2503  0614                     	;# 
  2504  0614                     	;# 
  2505  0615                     	;# 
  2506  0616                     	;# 
  2507  0617                     	;# 
  2508  0617                     	;# 
  2509  0618                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061A                     	;# 
  2513  061B                     	;# 
  2514  061C                     	;# 
  2515  061D                     	;# 
  2516  061D                     	;# 
  2517  061E                     	;# 
  2518  061F                     	;# 
  2519  0FE4                     	;# 
  2520  0FE5                     	;# 
  2521  0FE6                     	;# 
  2522  0FE7                     	;# 
  2523  0FE8                     	;# 
  2524  0FE9                     	;# 
  2525  0FEA                     	;# 
  2526  0FEB                     	;# 
  2527  0FED                     	;# 
  2528  0FEE                     	;# 
  2529  0FEF                     	;# 
  2530  0000                     	;# 
  2531  0001                     	;# 
  2532  0002                     	;# 
  2533  0003                     	;# 
  2534  0004                     	;# 
  2535  0005                     	;# 
  2536  0006                     	;# 
  2537  0007                     	;# 
  2538  0008                     	;# 
  2539  0009                     	;# 
  2540  000A                     	;# 
  2541  000B                     	;# 
  2542  000C                     	;# 
  2543  000D                     	;# 
  2544  000E                     	;# 
  2545  000F                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0016                     	;# 
  2553  0016                     	;# 
  2554  0017                     	;# 
  2555  0018                     	;# 
  2556  0019                     	;# 
  2557  001A                     	;# 
  2558  001B                     	;# 
  2559  001C                     	;# 
  2560  008C                     	;# 
  2561  008D                     	;# 
  2562  008E                     	;# 
  2563  008F                     	;# 
  2564  0090                     	;# 
  2565  0091                     	;# 
  2566  0092                     	;# 
  2567  0093                     	;# 
  2568  0094                     	;# 
  2569  0095                     	;# 
  2570  0096                     	;# 
  2571  0097                     	;# 
  2572  0099                     	;# 
  2573  009A                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  010C                     	;# 
  2580  010D                     	;# 
  2581  010E                     	;# 
  2582  010F                     	;# 
  2583  0110                     	;# 
  2584  0116                     	;# 
  2585  0117                     	;# 
  2586  011D                     	;# 
  2587  018C                     	;# 
  2588  018D                     	;# 
  2589  018F                     	;# 
  2590  0190                     	;# 
  2591  0191                     	;# 
  2592  0191                     	;# 
  2593  0192                     	;# 
  2594  0193                     	;# 
  2595  0193                     	;# 
  2596  0194                     	;# 
  2597  0195                     	;# 
  2598  0196                     	;# 
  2599  0197                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  020D                     	;# 
  2624  020F                     	;# 
  2625  0210                     	;# 
  2626  0211                     	;# 
  2627  0211                     	;# 
  2628  0212                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0213                     	;# 
  2632  0214                     	;# 
  2633  0214                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  0219                     	;# 
  2642  021A                     	;# 
  2643  021B                     	;# 
  2644  021C                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  0291                     	;# 
  2651  0291                     	;# 
  2652  0292                     	;# 
  2653  0293                     	;# 
  2654  0298                     	;# 
  2655  0298                     	;# 
  2656  0299                     	;# 
  2657  029A                     	;# 
  2658  029D                     	;# 
  2659  029E                     	;# 
  2660  029F                     	;# 
  2661  030C                     	;# 
  2662  030D                     	;# 
  2663  0311                     	;# 
  2664  0311                     	;# 
  2665  0312                     	;# 
  2666  0313                     	;# 
  2667  0318                     	;# 
  2668  0318                     	;# 
  2669  0319                     	;# 
  2670  031A                     	;# 
  2671  031C                     	;# 
  2672  031C                     	;# 
  2673  031D                     	;# 
  2674  031E                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  040C                     	;# 
  2681  040D                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  048D                     	;# 
  2699  0491                     	;# 
  2700  0491                     	;# 
  2701  0492                     	;# 
  2702  0492                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0494                     	;# 
  2707  0494                     	;# 
  2708  0495                     	;# 
  2709  0495                     	;# 
  2710  0496                     	;# 
  2711  0496                     	;# 
  2712  0497                     	;# 
  2713  0497                     	;# 
  2714  0595                     	;# 
  2715  0596                     	;# 
  2716  0597                     	;# 
  2717  059C                     	;# 
  2718  059D                     	;# 
  2719  059E                     	;# 
  2720  0611                     	;# 
  2721  0611                     	;# 
  2722  0612                     	;# 
  2723  0613                     	;# 
  2724  0614                     	;# 
  2725  0614                     	;# 
  2726  0615                     	;# 
  2727  0616                     	;# 
  2728  0617                     	;# 
  2729  0617                     	;# 
  2730  0618                     	;# 
  2731  0619                     	;# 
  2732  061A                     	;# 
  2733  061A                     	;# 
  2734  061B                     	;# 
  2735  061C                     	;# 
  2736  061D                     	;# 
  2737  061D                     	;# 
  2738  061E                     	;# 
  2739  061F                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;_delayArray
  2751                           
  2752                           	psect	idataCOMMON
  2753  07FE                     __pidataCOMMON:	
  2754                           
  2755                           ;initializer for _blink_rate
  2756  07FE  3414               	retlw	20
  2757                           
  2758                           	psect	idataBANK0
  2759  1DD8                     __pidataBANK0:	
  2760                           
  2761                           ;initializer for _baseline_delay_time
  2762  1DD8  34D0               	retlw	208
  2763  1DD9  3407               	retlw	7
  2764  1DDA  3400               	retlw	0
  2765  1DDB  3400               	retlw	0
  2766                           
  2767                           ;initializer for _delay_time
  2768  1DDC  34D0               	retlw	208
  2769  1DDD  3407               	retlw	7
  2770  1DDE  3400               	retlw	0
  2771  1DDF  3400               	retlw	0
  2772                           
  2773                           ;initializer for _bottom_push_state
  2774  1DE0  3406               	retlw	6
  2775  1DE1  3400               	retlw	0
  2776                           
  2777                           ;initializer for _long_press_limit
  2778  1DE2  34E8               	retlw	232
  2779  1DE3  3403               	retlw	3
  2780                           
  2781                           ;initializer for _top_push_state
  2782  1DE4  3406               	retlw	6
  2783  1DE5  3400               	retlw	0
  2784                           
  2785                           ;initializer for _feedback_state
  2786  1DE6  34FF               	retlw	255
  2787                           
  2788                           ;initializer for _longTap_state
  2789  1DE7  34FF               	retlw	255
  2790                           
  2791                           ;initializer for _num_taps
  2792  1DE8  3404               	retlw	4
  2793                           
  2794                           ;initializer for _switchBypass_state
  2795  1DE9  34FF               	retlw	255
  2796                           
  2797                           	psect	idataBANK2
  2798  1DC7                     __pidataBANK2:	
  2799                           
  2800                           ;initializer for _blink_delay
  2801  1DC7  3464               	retlw	100
  2802  1DC8  3400               	retlw	0
  2803                           
  2804                           ;initializer for _knob1_prev
  2805  1DC9  34D0               	retlw	208
  2806  1DCA  3407               	retlw	7
  2807                           
  2808                           ;initializer for _knob2_prev
  2809  1DCB  34D0               	retlw	208
  2810  1DCC  3407               	retlw	7
  2811                           
  2812                           ;initializer for _knob3_prev
  2813  1DCD  34D0               	retlw	208
  2814  1DCE  3407               	retlw	7
  2815                           
  2816                           ;initializer for _knob4_prev
  2817  1DCF  34D0               	retlw	208
  2818  1DD0  3407               	retlw	7
  2819                           
  2820                           ;initializer for _knob5_prev
  2821  1DD1  34D0               	retlw	208
  2822  1DD2  3407               	retlw	7
  2823                           
  2824                           ;initializer for _tap_iteration
  2825  1DD3  3401               	retlw	1
  2826  1DD4  3400               	retlw	0
  2827                           
  2828                           ;initializer for _blink_state
  2829  1DD5  3401               	retlw	1
  2830                           
  2831                           ;initializer for _currentBypassState
  2832  1DD6  34FF               	retlw	255
  2833                           
  2834                           ;initializer for _switchTap_state
  2835  1DD7  34FF               	retlw	255
  2836                           
  2837                           	psect	idataBANK3
  2838  1000                     __pidataBANK3:	
  2839                           
  2840                           ;initializer for _delay_time_changed
  2841  1000  3401               	retlw	1
  2842  1001  3400               	retlw	0
  2843                           
  2844                           ;initializer for _mod_delay_time
  2845  1002  34D0               	retlw	208
  2846  1003  3407               	retlw	7
  2847                           
  2848                           ;initializer for _switchBypass_up
  2849  1004  3401               	retlw	1
  2850  1005  3400               	retlw	0
  2851                           
  2852                           	psect	idataBANK5
  2853  12EA                     __pidataBANK5:	
  2854                           
  2855                           ;initializer for _B25k
  2856  12EA  34FF               	retlw	255
  2857  12EB  3400               	retlw	0
  2858  12EC  34FF               	retlw	255
  2859  12ED  3400               	retlw	0
  2860  12EE  34FF               	retlw	255
  2861  12EF  3400               	retlw	0
  2862  12F0  34DF               	retlw	223
  2863  12F1  3400               	retlw	0
  2864  12F2  34AE               	retlw	174
  2865  12F3  3400               	retlw	0
  2866  12F4  348E               	retlw	142
  2867  12F5  3400               	retlw	0
  2868  12F6  3478               	retlw	120
  2869  12F7  3400               	retlw	0
  2870  12F8  3467               	retlw	103
  2871  12F9  3400               	retlw	0
  2872  12FA  345B               	retlw	91
  2873  12FB  3400               	retlw	0
  2874  12FC  3450               	retlw	80
  2875  12FD  3400               	retlw	0
  2876  12FE  3448               	retlw	72
  2877  12FF  3400               	retlw	0
  2878  1300  3442               	retlw	66
  2879  1301  3400               	retlw	0
  2880  1302  343C               	retlw	60
  2881  1303  3400               	retlw	0
  2882  1304  3437               	retlw	55
  2883  1305  3400               	retlw	0
  2884  1306  3433               	retlw	51
  2885  1307  3400               	retlw	0
  2886  1308  3430               	retlw	48
  2887  1309  3400               	retlw	0
  2888  130A  342D               	retlw	45
  2889  130B  3400               	retlw	0
  2890  130C  342A               	retlw	42
  2891  130D  3400               	retlw	0
  2892  130E  3427               	retlw	39
  2893  130F  3400               	retlw	0
  2894  1310  3425               	retlw	37
  2895  1311  3400               	retlw	0
  2896  1312  3423               	retlw	35
  2897  1313  3400               	retlw	0
  2898  1314  3421               	retlw	33
  2899  1315  3400               	retlw	0
  2900  1316  3420               	retlw	32
  2901  1317  3400               	retlw	0
  2902  1318  341E               	retlw	30
  2903  1319  3400               	retlw	0
  2904  131A  341D               	retlw	29
  2905  131B  3400               	retlw	0
  2906  131C  341C               	retlw	28
  2907  131D  3400               	retlw	0
  2908  131E  341B               	retlw	27
  2909  131F  3400               	retlw	0
  2910  1320  341A               	retlw	26
  2911  1321  3400               	retlw	0
  2912  1322  3419               	retlw	25
  2913  1323  3400               	retlw	0
  2914  1324  3418               	retlw	24
  2915  1325  3400               	retlw	0
  2916  1326  3417               	retlw	23
  2917  1327  3400               	retlw	0
  2918  1328  3416               	retlw	22
  2919  1329  3400               	retlw	0
  2920  132A  3415               	retlw	21
  2921  132B  3400               	retlw	0
  2922  132C  3415               	retlw	21
  2923  132D  3400               	retlw	0
  2924  132E  3414               	retlw	20
  2925  132F  3400               	retlw	0
  2926  1330  3413               	retlw	19
  2927  1331  3400               	retlw	0
  2928  1332  340F               	retlw	15
  2929  1333  3400               	retlw	0
  2930  1334  340B               	retlw	11
  2931  1335  3400               	retlw	0
  2932  1336  3407               	retlw	7
  2933  1337  3400               	retlw	0
  2934  1338  3407               	retlw	7
  2935  1339  3400               	retlw	0
  2936                           
  2937                           	psect	idataBANK6
  2938  10C0                     __pidataBANK6:	
  2939                           
  2940                           ;initializer for _mod2
  2941  10C0  3400               	retlw	0
  2942  10C1  3400               	retlw	0
  2943  10C2  340D               	retlw	13
  2944  10C3  3400               	retlw	0
  2945  10C4  341B               	retlw	27
  2946  10C5  3400               	retlw	0
  2947  10C6  3428               	retlw	40
  2948  10C7  3400               	retlw	0
  2949  10C8  3435               	retlw	53
  2950  10C9  3400               	retlw	0
  2951  10CA  3443               	retlw	67
  2952  10CB  3400               	retlw	0
  2953  10CC  3450               	retlw	80
  2954  10CD  3400               	retlw	0
  2955  10CE  345D               	retlw	93
  2956  10CF  3400               	retlw	0
  2957  10D0  345D               	retlw	93
  2958  10D1  3400               	retlw	0
  2959  10D2  3450               	retlw	80
  2960  10D3  3400               	retlw	0
  2961  10D4  3443               	retlw	67
  2962  10D5  3400               	retlw	0
  2963  10D6  3435               	retlw	53
  2964  10D7  3400               	retlw	0
  2965  10D8  3428               	retlw	40
  2966  10D9  3400               	retlw	0
  2967  10DA  341B               	retlw	27
  2968  10DB  3400               	retlw	0
  2969  10DC  340D               	retlw	13
  2970  10DD  3400               	retlw	0
  2971  10DE  3400               	retlw	0
  2972  10DF  3400               	retlw	0
  2973  10E0  34F3               	retlw	243
  2974  10E1  34FF               	retlw	255
  2975  10E2  34E5               	retlw	229
  2976  10E3  34FF               	retlw	255
  2977  10E4  34D8               	retlw	216
  2978  10E5  34FF               	retlw	255
  2979  10E6  34CB               	retlw	203
  2980  10E7  34FF               	retlw	255
  2981  10E8  34BD               	retlw	189
  2982  10E9  34FF               	retlw	255
  2983  10EA  34B0               	retlw	176
  2984  10EB  34FF               	retlw	255
  2985  10EC  34A3               	retlw	163
  2986  10ED  34FF               	retlw	255
  2987  10EE  34A3               	retlw	163
  2988  10EF  34FF               	retlw	255
  2989  10F0  34B0               	retlw	176
  2990  10F1  34FF               	retlw	255
  2991  10F2  34BD               	retlw	189
  2992  10F3  34FF               	retlw	255
  2993  10F4  34CB               	retlw	203
  2994  10F5  34FF               	retlw	255
  2995  10F6  34D8               	retlw	216
  2996  10F7  34FF               	retlw	255
  2997  10F8  34E5               	retlw	229
  2998  10F9  34FF               	retlw	255
  2999  10FA  34F3               	retlw	243
  3000  10FB  34FF               	retlw	255
  3001  10FC  3400               	retlw	0
  3002  10FD  3400               	retlw	0
  3003                           
  3004                           	psect	idataBANK7
  3005  1082                     __pidataBANK7:	
  3006                           
  3007                           ;initializer for _mod3
  3008  1082  3400               	retlw	0
  3009  1083  3400               	retlw	0
  3010  1084  3407               	retlw	7
  3011  1085  3400               	retlw	0
  3012  1086  340D               	retlw	13
  3013  1087  3400               	retlw	0
  3014  1088  3414               	retlw	20
  3015  1089  3400               	retlw	0
  3016  108A  341B               	retlw	27
  3017  108B  3400               	retlw	0
  3018  108C  3421               	retlw	33
  3019  108D  3400               	retlw	0
  3020  108E  3428               	retlw	40
  3021  108F  3400               	retlw	0
  3022  1090  342F               	retlw	47
  3023  1091  3400               	retlw	0
  3024  1092  3435               	retlw	53
  3025  1093  3400               	retlw	0
  3026  1094  343C               	retlw	60
  3027  1095  3400               	retlw	0
  3028  1096  3443               	retlw	67
  3029  1097  3400               	retlw	0
  3030  1098  3449               	retlw	73
  3031  1099  3400               	retlw	0
  3032  109A  3450               	retlw	80
  3033  109B  3400               	retlw	0
  3034  109C  3457               	retlw	87
  3035  109D  3400               	retlw	0
  3036  109E  345D               	retlw	93
  3037  109F  3400               	retlw	0
  3038  10A0  349C               	retlw	156
  3039  10A1  34FF               	retlw	255
  3040  10A2  34A3               	retlw	163
  3041  10A3  34FF               	retlw	255
  3042  10A4  34A9               	retlw	169
  3043  10A5  34FF               	retlw	255
  3044  10A6  34B0               	retlw	176
  3045  10A7  34FF               	retlw	255
  3046  10A8  34B7               	retlw	183
  3047  10A9  34FF               	retlw	255
  3048  10AA  34BD               	retlw	189
  3049  10AB  34FF               	retlw	255
  3050  10AC  34C4               	retlw	196
  3051  10AD  34FF               	retlw	255
  3052  10AE  34CB               	retlw	203
  3053  10AF  34FF               	retlw	255
  3054  10B0  34D1               	retlw	209
  3055  10B1  34FF               	retlw	255
  3056  10B2  34D8               	retlw	216
  3057  10B3  34FF               	retlw	255
  3058  10B4  34DF               	retlw	223
  3059  10B5  34FF               	retlw	255
  3060  10B6  34E5               	retlw	229
  3061  10B7  34FF               	retlw	255
  3062  10B8  34EC               	retlw	236
  3063  10B9  34FF               	retlw	255
  3064  10BA  34F3               	retlw	243
  3065  10BB  34FF               	retlw	255
  3066  10BC  34F9               	retlw	249
  3067  10BD  34FF               	retlw	255
  3068  10BE  3400               	retlw	0
  3069  10BF  3400               	retlw	0
  3070                           
  3071                           	psect	idataBANK8
  3072  1044                     __pidataBANK8:	
  3073                           
  3074                           ;initializer for _mod4
  3075  1044  3464               	retlw	100
  3076  1045  3400               	retlw	0
  3077  1046  3464               	retlw	100
  3078  1047  3400               	retlw	0
  3079  1048  3464               	retlw	100
  3080  1049  3400               	retlw	0
  3081  104A  3464               	retlw	100
  3082  104B  3400               	retlw	0
  3083  104C  3464               	retlw	100
  3084  104D  3400               	retlw	0
  3085  104E  3464               	retlw	100
  3086  104F  3400               	retlw	0
  3087  1050  3464               	retlw	100
  3088  1051  3400               	retlw	0
  3089  1052  3464               	retlw	100
  3090  1053  3400               	retlw	0
  3091  1054  3464               	retlw	100
  3092  1055  3400               	retlw	0
  3093  1056  3464               	retlw	100
  3094  1057  3400               	retlw	0
  3095  1058  3464               	retlw	100
  3096  1059  3400               	retlw	0
  3097  105A  3464               	retlw	100
  3098  105B  3400               	retlw	0
  3099  105C  3464               	retlw	100
  3100  105D  3400               	retlw	0
  3101  105E  3464               	retlw	100
  3102  105F  3400               	retlw	0
  3103  1060  3464               	retlw	100
  3104  1061  3400               	retlw	0
  3105  1062  349C               	retlw	156
  3106  1063  34FF               	retlw	255
  3107  1064  349C               	retlw	156
  3108  1065  34FF               	retlw	255
  3109  1066  349C               	retlw	156
  3110  1067  34FF               	retlw	255
  3111  1068  349C               	retlw	156
  3112  1069  34FF               	retlw	255
  3113  106A  349C               	retlw	156
  3114  106B  34FF               	retlw	255
  3115  106C  349C               	retlw	156
  3116  106D  34FF               	retlw	255
  3117  106E  349C               	retlw	156
  3118  106F  34FF               	retlw	255
  3119  1070  349C               	retlw	156
  3120  1071  34FF               	retlw	255
  3121  1072  349C               	retlw	156
  3122  1073  34FF               	retlw	255
  3123  1074  349C               	retlw	156
  3124  1075  34FF               	retlw	255
  3125  1076  349C               	retlw	156
  3126  1077  34FF               	retlw	255
  3127  1078  349C               	retlw	156
  3128  1079  34FF               	retlw	255
  3129  107A  349C               	retlw	156
  3130  107B  34FF               	retlw	255
  3131  107C  349C               	retlw	156
  3132  107D  34FF               	retlw	255
  3133  107E  349C               	retlw	156
  3134  107F  34FF               	retlw	255
  3135  1080  3464               	retlw	100
  3136  1081  3400               	retlw	0
  3137                           
  3138                           	psect	idataBANK10
  3139  1006                     __pidataBANK10:	
  3140                           
  3141                           ;initializer for _mod1
  3142  1006  3400               	retlw	0
  3143  1007  3400               	retlw	0
  3144  1008  3415               	retlw	21
  3145  1009  3400               	retlw	0
  3146  100A  3429               	retlw	41
  3147  100B  3400               	retlw	0
  3148  100C  343B               	retlw	59
  3149  100D  3400               	retlw	0
  3150  100E  344A               	retlw	74
  3151  100F  3400               	retlw	0
  3152  1010  3457               	retlw	87
  3153  1011  3400               	retlw	0
  3154  1012  345F               	retlw	95
  3155  1013  3400               	retlw	0
  3156  1014  3463               	retlw	99
  3157  1015  3400               	retlw	0
  3158  1016  3463               	retlw	99
  3159  1017  3400               	retlw	0
  3160  1018  345F               	retlw	95
  3161  1019  3400               	retlw	0
  3162  101A  3457               	retlw	87
  3163  101B  3400               	retlw	0
  3164  101C  344A               	retlw	74
  3165  101D  3400               	retlw	0
  3166  101E  343B               	retlw	59
  3167  101F  3400               	retlw	0
  3168  1020  3429               	retlw	41
  3169  1021  3400               	retlw	0
  3170  1022  3415               	retlw	21
  3171  1023  3400               	retlw	0
  3172  1024  3400               	retlw	0
  3173  1025  3400               	retlw	0
  3174  1026  34EB               	retlw	235
  3175  1027  34FF               	retlw	255
  3176  1028  34D7               	retlw	215
  3177  1029  34FF               	retlw	255
  3178  102A  34C5               	retlw	197
  3179  102B  34FF               	retlw	255
  3180  102C  34B6               	retlw	182
  3181  102D  34FF               	retlw	255
  3182  102E  34A9               	retlw	169
  3183  102F  34FF               	retlw	255
  3184  1030  34A1               	retlw	161
  3185  1031  34FF               	retlw	255
  3186  1032  349D               	retlw	157
  3187  1033  34FF               	retlw	255
  3188  1034  349D               	retlw	157
  3189  1035  34FF               	retlw	255
  3190  1036  34A1               	retlw	161
  3191  1037  34FF               	retlw	255
  3192  1038  34A9               	retlw	169
  3193  1039  34FF               	retlw	255
  3194  103A  34B6               	retlw	182
  3195  103B  34FF               	retlw	255
  3196  103C  34C5               	retlw	197
  3197  103D  34FF               	retlw	255
  3198  103E  34D7               	retlw	215
  3199  103F  34FF               	retlw	255
  3200  1040  34EB               	retlw	235
  3201  1041  34FF               	retlw	255
  3202  1042  3400               	retlw	0
  3203  1043  3400               	retlw	0
  3204                           
  3205                           	psect	idataBIGRAM
  3206  0D7E                     __pidataBIGRAM:	
  3207                           
  3208                           ;initializer for _delayArray
  3209  0D7E  3422               	retlw	34
  3210  0D7F  3408               	retlw	8
  3211  0D80  34FC               	retlw	252
  3212  0D81  3407               	retlw	7
  3213  0D82  34D8               	retlw	216
  3214  0D83  3407               	retlw	7
  3215  0D84  34B5               	retlw	181
  3216  0D85  3407               	retlw	7
  3217  0D86  3493               	retlw	147
  3218  0D87  3407               	retlw	7
  3219  0D88  3472               	retlw	114
  3220  0D89  3407               	retlw	7
  3221  0D8A  3452               	retlw	82
  3222  0D8B  3407               	retlw	7
  3223  0D8C  3434               	retlw	52
  3224  0D8D  3407               	retlw	7
  3225  0D8E  3416               	retlw	22
  3226  0D8F  3407               	retlw	7
  3227  0D90  34F9               	retlw	249
  3228  0D91  3406               	retlw	6
  3229  0D92  34DD               	retlw	221
  3230  0D93  3406               	retlw	6
  3231  0D94  34C2               	retlw	194
  3232  0D95  3406               	retlw	6
  3233  0D96  34A8               	retlw	168
  3234  0D97  3406               	retlw	6
  3235  0D98  348F               	retlw	143
  3236  0D99  3406               	retlw	6
  3237  0D9A  3476               	retlw	118
  3238  0D9B  3406               	retlw	6
  3239  0D9C  345E               	retlw	94
  3240  0D9D  3406               	retlw	6
  3241  0D9E  3447               	retlw	71
  3242  0D9F  3406               	retlw	6
  3243  0DA0  3430               	retlw	48
  3244  0DA1  3406               	retlw	6
  3245  0DA2  341A               	retlw	26
  3246  0DA3  3406               	retlw	6
  3247  0DA4  3405               	retlw	5
  3248  0DA5  3406               	retlw	6
  3249  0DA6  34F0               	retlw	240
  3250  0DA7  3405               	retlw	5
  3251  0DA8  34DC               	retlw	220
  3252  0DA9  3405               	retlw	5
  3253  0DAA  34C8               	retlw	200
  3254  0DAB  3405               	retlw	5
  3255  0DAC  34B5               	retlw	181
  3256  0DAD  3405               	retlw	5
  3257  0DAE  34A3               	retlw	163
  3258  0DAF  3405               	retlw	5
  3259  0DB0  3490               	retlw	144
  3260  0DB1  3405               	retlw	5
  3261  0DB2  347F               	retlw	127
  3262  0DB3  3405               	retlw	5
  3263  0DB4  346D               	retlw	109
  3264  0DB5  3405               	retlw	5
  3265  0DB6  345C               	retlw	92
  3266  0DB7  3405               	retlw	5
  3267  0DB8  344C               	retlw	76
  3268  0DB9  3405               	retlw	5
  3269  0DBA  343C               	retlw	60
  3270  0DBB  3405               	retlw	5
  3271  0DBC  342C               	retlw	44
  3272  0DBD  3405               	retlw	5
  3273  0DBE  341D               	retlw	29
  3274  0DBF  3405               	retlw	5
  3275  0DC0  340E               	retlw	14
  3276  0DC1  3405               	retlw	5
  3277  0DC2  34FF               	retlw	255
  3278  0DC3  3404               	retlw	4
  3279  0DC4  34F1               	retlw	241
  3280  0DC5  3404               	retlw	4
  3281  0DC6  34E2               	retlw	226
  3282  0DC7  3404               	retlw	4
  3283  0DC8  34D5               	retlw	213
  3284  0DC9  3404               	retlw	4
  3285  0DCA  34C7               	retlw	199
  3286  0DCB  3404               	retlw	4
  3287  0DCC  34BA               	retlw	186
  3288  0DCD  3404               	retlw	4
  3289  0DCE  34AD               	retlw	173
  3290  0DCF  3404               	retlw	4
  3291  0DD0  34A1               	retlw	161
  3292  0DD1  3404               	retlw	4
  3293  0DD2  3494               	retlw	148
  3294  0DD3  3404               	retlw	4
  3295  0DD4  3488               	retlw	136
  3296  0DD5  3404               	retlw	4
  3297  0DD6  347D               	retlw	125
  3298  0DD7  3404               	retlw	4
  3299  0DD8  3471               	retlw	113
  3300  0DD9  3404               	retlw	4
  3301  0DDA  3466               	retlw	102
  3302  0DDB  3404               	retlw	4
  3303  0DDC  345A               	retlw	90
  3304  0DDD  3404               	retlw	4
  3305  0DDE  3450               	retlw	80
  3306  0DDF  3404               	retlw	4
  3307  0DE0  3445               	retlw	69
  3308  0DE1  3404               	retlw	4
  3309  0DE2  343A               	retlw	58
  3310  0DE3  3404               	retlw	4
  3311  0DE4  3430               	retlw	48
  3312  0DE5  3404               	retlw	4
  3313  0DE6  3426               	retlw	38
  3314  0DE7  3404               	retlw	4
  3315  0DE8  341C               	retlw	28
  3316  0DE9  3404               	retlw	4
  3317  0DEA  3412               	retlw	18
  3318  0DEB  3404               	retlw	4
  3319  0DEC  3409               	retlw	9
  3320  0DED  3404               	retlw	4
  3321  0DEE  34FF               	retlw	255
  3322  0DEF  3403               	retlw	3
  3323  0DF0  34F6               	retlw	246
  3324  0DF1  3403               	retlw	3
  3325  0DF2  34ED               	retlw	237
  3326  0DF3  3403               	retlw	3
  3327  0DF4  34E4               	retlw	228
  3328  0DF5  3403               	retlw	3
  3329  0DF6  34DC               	retlw	220
  3330  0DF7  3403               	retlw	3
  3331  0DF8  34D3               	retlw	211
  3332  0DF9  3403               	retlw	3
  3333  0DFA  34CB               	retlw	203
  3334  0DFB  3403               	retlw	3
  3335  0DFC  34C2               	retlw	194
  3336  0DFD  3403               	retlw	3
  3337  0DFE  34BA               	retlw	186
  3338  0DFF  3403               	retlw	3
  3339  0E00  34B2               	retlw	178
  3340  0E01  3403               	retlw	3
  3341  0E02  34AA               	retlw	170
  3342  0E03  3403               	retlw	3
  3343  0E04  34A2               	retlw	162
  3344  0E05  3403               	retlw	3
  3345  0E06  349B               	retlw	155
  3346  0E07  3403               	retlw	3
  3347  0E08  3493               	retlw	147
  3348  0E09  3403               	retlw	3
  3349  0E0A  348C               	retlw	140
  3350  0E0B  3403               	retlw	3
  3351  0E0C  3485               	retlw	133
  3352  0E0D  3403               	retlw	3
  3353  0E0E  347E               	retlw	126
  3354  0E0F  3403               	retlw	3
  3355  0E10  3477               	retlw	119
  3356  0E11  3403               	retlw	3
  3357  0E12  3470               	retlw	112
  3358  0E13  3403               	retlw	3
  3359  0E14  3469               	retlw	105
  3360  0E15  3403               	retlw	3
  3361  0E16  3462               	retlw	98
  3362  0E17  3403               	retlw	3
  3363  0E18  345C               	retlw	92
  3364  0E19  3403               	retlw	3
  3365  0E1A  3455               	retlw	85
  3366  0E1B  3403               	retlw	3
  3367  0E1C  344F               	retlw	79
  3368  0E1D  3403               	retlw	3
  3369  0E1E  3448               	retlw	72
  3370  0E1F  3403               	retlw	3
  3371  0E20  3442               	retlw	66
  3372  0E21  3403               	retlw	3
  3373  0E22  343C               	retlw	60
  3374  0E23  3403               	retlw	3
  3375  0E24  3436               	retlw	54
  3376  0E25  3403               	retlw	3
  3377  0E26  3430               	retlw	48
  3378  0E27  3403               	retlw	3
  3379  0E28  342A               	retlw	42
  3380  0E29  3403               	retlw	3
  3381  0E2A  3424               	retlw	36
  3382  0E2B  3403               	retlw	3
  3383  0E2C  341F               	retlw	31
  3384  0E2D  3403               	retlw	3
  3385  0E2E  3419               	retlw	25
  3386  0E2F  3403               	retlw	3
  3387  0E30  3413               	retlw	19
  3388  0E31  3403               	retlw	3
  3389  0E32  340E               	retlw	14
  3390  0E33  3403               	retlw	3
  3391  0E34  3409               	retlw	9
  3392  0E35  3403               	retlw	3
  3393  0E36  3403               	retlw	3
  3394  0E37  3403               	retlw	3
  3395  0E38  34FE               	retlw	254
  3396  0E39  3402               	retlw	2
  3397  0E3A  34F9               	retlw	249
  3398  0E3B  3402               	retlw	2
  3399  0E3C  34F4               	retlw	244
  3400  0E3D  3402               	retlw	2
  3401  0E3E  34EF               	retlw	239
  3402  0E3F  3402               	retlw	2
  3403  0E40  34EA               	retlw	234
  3404  0E41  3402               	retlw	2
  3405  0E42  34E5               	retlw	229
  3406  0E43  3402               	retlw	2
  3407  0E44  34E0               	retlw	224
  3408  0E45  3402               	retlw	2
  3409  0E46  34DB               	retlw	219
  3410  0E47  3402               	retlw	2
  3411  0E48  34D7               	retlw	215
  3412  0E49  3402               	retlw	2
  3413  0E4A  34D2               	retlw	210
  3414  0E4B  3402               	retlw	2
  3415  0E4C  34CD               	retlw	205
  3416  0E4D  3402               	retlw	2
  3417  0E4E  34C9               	retlw	201
  3418  0E4F  3402               	retlw	2
  3419  0E50  34C4               	retlw	196
  3420  0E51  3402               	retlw	2
  3421  0E52  34C0               	retlw	192
  3422  0E53  3402               	retlw	2
  3423  0E54  34BC               	retlw	188
  3424  0E55  3402               	retlw	2
  3425  0E56  34B7               	retlw	183
  3426  0E57  3402               	retlw	2
  3427  0E58  34B3               	retlw	179
  3428  0E59  3402               	retlw	2
  3429  0E5A  34AF               	retlw	175
  3430  0E5B  3402               	retlw	2
  3431  0E5C  34AB               	retlw	171
  3432  0E5D  3402               	retlw	2
  3433  0E5E  34A6               	retlw	166
  3434  0E5F  3402               	retlw	2
  3435  0E60  34A2               	retlw	162
  3436  0E61  3402               	retlw	2
  3437  0E62  349E               	retlw	158
  3438  0E63  3402               	retlw	2
  3439  0E64  349A               	retlw	154
  3440  0E65  3402               	retlw	2
  3441  0E66  3497               	retlw	151
  3442  0E67  3402               	retlw	2
  3443  0E68  3493               	retlw	147
  3444  0E69  3402               	retlw	2
  3445  0E6A  348F               	retlw	143
  3446  0E6B  3402               	retlw	2
  3447  0E6C  348B               	retlw	139
  3448  0E6D  3402               	retlw	2
  3449  0E6E  3487               	retlw	135
  3450  0E6F  3402               	retlw	2
  3451  0E70  3484               	retlw	132
  3452  0E71  3402               	retlw	2
  3453  0E72  3480               	retlw	128
  3454  0E73  3402               	retlw	2
  3455  0E74  347C               	retlw	124
  3456  0E75  3402               	retlw	2
  3457  0E76  3479               	retlw	121
  3458  0E77  3402               	retlw	2
  3459  0E78  3475               	retlw	117
  3460  0E79  3402               	retlw	2
  3461  0E7A  3472               	retlw	114
  3462  0E7B  3402               	retlw	2
  3463  0E7C  346E               	retlw	110
  3464  0E7D  3402               	retlw	2
  3465  0E7E  346B               	retlw	107
  3466  0E7F  3402               	retlw	2
  3467  0E80  3467               	retlw	103
  3468  0E81  3402               	retlw	2
  3469  0E82  3464               	retlw	100
  3470  0E83  3402               	retlw	2
  3471  0E84  3461               	retlw	97
  3472  0E85  3402               	retlw	2
  3473  0E86  345E               	retlw	94
  3474  0E87  3402               	retlw	2
  3475  0E88  345A               	retlw	90
  3476  0E89  3402               	retlw	2
  3477  0E8A  3457               	retlw	87
  3478  0E8B  3402               	retlw	2
  3479  0E8C  3454               	retlw	84
  3480  0E8D  3402               	retlw	2
  3481  0E8E  3451               	retlw	81
  3482  0E8F  3402               	retlw	2
  3483  0E90  344E               	retlw	78
  3484  0E91  3402               	retlw	2
  3485  0E92  344B               	retlw	75
  3486  0E93  3402               	retlw	2
  3487  0E94  3448               	retlw	72
  3488  0E95  3402               	retlw	2
  3489  0E96  3445               	retlw	69
  3490  0E97  3402               	retlw	2
  3491  0E98  3442               	retlw	66
  3492  0E99  3402               	retlw	2
  3493  0E9A  343F               	retlw	63
  3494  0E9B  3402               	retlw	2
  3495  0E9C  343C               	retlw	60
  3496  0E9D  3402               	retlw	2
  3497  0E9E  3439               	retlw	57
  3498  0E9F  3402               	retlw	2
  3499  0EA0  3436               	retlw	54
  3500  0EA1  3402               	retlw	2
  3501  0EA2  3433               	retlw	51
  3502  0EA3  3402               	retlw	2
  3503  0EA4  3430               	retlw	48
  3504  0EA5  3402               	retlw	2
  3505  0EA6  342E               	retlw	46
  3506  0EA7  3402               	retlw	2
  3507  0EA8  342B               	retlw	43
  3508  0EA9  3402               	retlw	2
  3509  0EAA  3428               	retlw	40
  3510  0EAB  3402               	retlw	2
  3511  0EAC  3425               	retlw	37
  3512  0EAD  3402               	retlw	2
  3513  0EAE  3423               	retlw	35
  3514  0EAF  3402               	retlw	2
  3515  0EB0  3420               	retlw	32
  3516  0EB1  3402               	retlw	2
  3517  0EB2  341E               	retlw	30
  3518  0EB3  3402               	retlw	2
  3519  0EB4  341B               	retlw	27
  3520  0EB5  3402               	retlw	2
  3521  0EB6  3418               	retlw	24
  3522  0EB7  3402               	retlw	2
  3523  0EB8  3416               	retlw	22
  3524  0EB9  3402               	retlw	2
  3525  0EBA  3413               	retlw	19
  3526  0EBB  3402               	retlw	2
  3527  0EBC  3411               	retlw	17
  3528  0EBD  3402               	retlw	2
  3529  0EBE  340E               	retlw	14
  3530  0EBF  3402               	retlw	2
  3531  0EC0  340C               	retlw	12
  3532  0EC1  3402               	retlw	2
  3533  0EC2  340A               	retlw	10
  3534  0EC3  3402               	retlw	2
  3535  0EC4  3407               	retlw	7
  3536  0EC5  3402               	retlw	2
  3537  0EC6  3405               	retlw	5
  3538  0EC7  3402               	retlw	2
  3539  0EC8  3402               	retlw	2
  3540  0EC9  3402               	retlw	2
  3541  0ECA  3400               	retlw	0
  3542  0ECB  3402               	retlw	2
  3543  0ECC  34FE               	retlw	254
  3544  0ECD  3401               	retlw	1
  3545  0ECE  34FB               	retlw	251
  3546  0ECF  3401               	retlw	1
  3547  0ED0  34F9               	retlw	249
  3548  0ED1  3401               	retlw	1
  3549  0ED2  34F7               	retlw	247
  3550  0ED3  3401               	retlw	1
  3551  0ED4  34F5               	retlw	245
  3552  0ED5  3401               	retlw	1
  3553  0ED6  34F2               	retlw	242
  3554  0ED7  3401               	retlw	1
  3555  0ED8  34F0               	retlw	240
  3556  0ED9  3401               	retlw	1
  3557  0EDA  34EE               	retlw	238
  3558  0EDB  3401               	retlw	1
  3559  0EDC  34EC               	retlw	236
  3560  0EDD  3401               	retlw	1
  3561  0EDE  34EA               	retlw	234
  3562  0EDF  3401               	retlw	1
  3563  0EE0  34E8               	retlw	232
  3564  0EE1  3401               	retlw	1
  3565  0EE2  34E6               	retlw	230
  3566  0EE3  3401               	retlw	1
  3567  0EE4  34E3               	retlw	227
  3568  0EE5  3401               	retlw	1
  3569  0EE6  34E1               	retlw	225
  3570  0EE7  3401               	retlw	1
  3571  0EE8  34DF               	retlw	223
  3572  0EE9  3401               	retlw	1
  3573  0EEA  34DD               	retlw	221
  3574  0EEB  3401               	retlw	1
  3575  0EEC  34DB               	retlw	219
  3576  0EED  3401               	retlw	1
  3577  0EEE  34D9               	retlw	217
  3578  0EEF  3401               	retlw	1
  3579  0EF0  34D7               	retlw	215
  3580  0EF1  3401               	retlw	1
  3581  0EF2  34D5               	retlw	213
  3582  0EF3  3401               	retlw	1
  3583  0EF4  34D3               	retlw	211
  3584  0EF5  3401               	retlw	1
  3585  0EF6  34D2               	retlw	210
  3586  0EF7  3401               	retlw	1
  3587  0EF8  34D0               	retlw	208
  3588  0EF9  3401               	retlw	1
  3589  0EFA  34CE               	retlw	206
  3590  0EFB  3401               	retlw	1
  3591  0EFC  34CC               	retlw	204
  3592  0EFD  3401               	retlw	1
  3593  0EFE  34CA               	retlw	202
  3594  0EFF  3401               	retlw	1
  3595  0F00  34C8               	retlw	200
  3596  0F01  3401               	retlw	1
  3597  0F02  34C6               	retlw	198
  3598  0F03  3401               	retlw	1
  3599  0F04  34C4               	retlw	196
  3600  0F05  3401               	retlw	1
  3601  0F06  34C3               	retlw	195
  3602  0F07  3401               	retlw	1
  3603  0F08  34C1               	retlw	193
  3604  0F09  3401               	retlw	1
  3605  0F0A  34BF               	retlw	191
  3606  0F0B  3401               	retlw	1
  3607  0F0C  34BD               	retlw	189
  3608  0F0D  3401               	retlw	1
  3609  0F0E  34BC               	retlw	188
  3610  0F0F  3401               	retlw	1
  3611  0F10  34BA               	retlw	186
  3612  0F11  3401               	retlw	1
  3613  0F12  34B8               	retlw	184
  3614  0F13  3401               	retlw	1
  3615  0F14  34B6               	retlw	182
  3616  0F15  3401               	retlw	1
  3617  0F16  34B5               	retlw	181
  3618  0F17  3401               	retlw	1
  3619  0F18  34B3               	retlw	179
  3620  0F19  3401               	retlw	1
  3621  0F1A  34B1               	retlw	177
  3622  0F1B  3401               	retlw	1
  3623  0F1C  34B0               	retlw	176
  3624  0F1D  3401               	retlw	1
  3625  0F1E  34AE               	retlw	174
  3626  0F1F  3401               	retlw	1
  3627  0F20  34AC               	retlw	172
  3628  0F21  3401               	retlw	1
  3629  0F22  34AB               	retlw	171
  3630  0F23  3401               	retlw	1
  3631  0F24  34A9               	retlw	169
  3632  0F25  3401               	retlw	1
  3633  0F26  34A8               	retlw	168
  3634  0F27  3401               	retlw	1
  3635  0F28  34A6               	retlw	166
  3636  0F29  3401               	retlw	1
  3637  0F2A  34A4               	retlw	164
  3638  0F2B  3401               	retlw	1
  3639  0F2C  34A3               	retlw	163
  3640  0F2D  3401               	retlw	1
  3641  0F2E  34A1               	retlw	161
  3642  0F2F  3401               	retlw	1
  3643  0F30  34A0               	retlw	160
  3644  0F31  3401               	retlw	1
  3645  0F32  349E               	retlw	158
  3646  0F33  3401               	retlw	1
  3647  0F34  349D               	retlw	157
  3648  0F35  3401               	retlw	1
  3649  0F36  349B               	retlw	155
  3650  0F37  3401               	retlw	1
  3651  0F38  349A               	retlw	154
  3652  0F39  3401               	retlw	1
  3653  0F3A  3498               	retlw	152
  3654  0F3B  3401               	retlw	1
  3655  0F3C  3497               	retlw	151
  3656  0F3D  3401               	retlw	1
  3657  0F3E  3495               	retlw	149
  3658  0F3F  3401               	retlw	1
  3659  0F40  3494               	retlw	148
  3660  0F41  3401               	retlw	1
  3661  0F42  3492               	retlw	146
  3662  0F43  3401               	retlw	1
  3663  0F44  3491               	retlw	145
  3664  0F45  3401               	retlw	1
  3665  0F46  3490               	retlw	144
  3666  0F47  3401               	retlw	1
  3667  0F48  348E               	retlw	142
  3668  0F49  3401               	retlw	1
  3669  0F4A  348D               	retlw	141
  3670  0F4B  3401               	retlw	1
  3671  0F4C  348B               	retlw	139
  3672  0F4D  3401               	retlw	1
  3673  0F4E  348A               	retlw	138
  3674  0F4F  3401               	retlw	1
  3675  0F50  3489               	retlw	137
  3676  0F51  3401               	retlw	1
  3677  0F52  3487               	retlw	135
  3678  0F53  3401               	retlw	1
  3679  0F54  3486               	retlw	134
  3680  0F55  3401               	retlw	1
  3681  0F56  3485               	retlw	133
  3682  0F57  3401               	retlw	1
  3683  0F58  3483               	retlw	131
  3684  0F59  3401               	retlw	1
  3685  0F5A  3482               	retlw	130
  3686  0F5B  3401               	retlw	1
  3687  0F5C  3481               	retlw	129
  3688  0F5D  3401               	retlw	1
  3689  0F5E  347F               	retlw	127
  3690  0F5F  3401               	retlw	1
  3691  0F60  347E               	retlw	126
  3692  0F61  3401               	retlw	1
  3693  0F62  347D               	retlw	125
  3694  0F63  3401               	retlw	1
  3695  0F64  347B               	retlw	123
  3696  0F65  3401               	retlw	1
  3697  0F66  347A               	retlw	122
  3698  0F67  3401               	retlw	1
  3699  0F68  3479               	retlw	121
  3700  0F69  3401               	retlw	1
  3701  0F6A  3478               	retlw	120
  3702  0F6B  3401               	retlw	1
  3703  0F6C  3476               	retlw	118
  3704  0F6D  3401               	retlw	1
  3705  0F6E  3475               	retlw	117
  3706  0F6F  3401               	retlw	1
  3707  0F70  3474               	retlw	116
  3708  0F71  3401               	retlw	1
  3709  0F72  3473               	retlw	115
  3710  0F73  3401               	retlw	1
  3711  0F74  3471               	retlw	113
  3712  0F75  3401               	retlw	1
  3713  0F76  3470               	retlw	112
  3714  0F77  3401               	retlw	1
  3715  0F78  346F               	retlw	111
  3716  0F79  3401               	retlw	1
  3717  0F7A  346E               	retlw	110
  3718  0F7B  3401               	retlw	1
  3719  0F7C  3400               	retlw	0
  3720  0F7D  3400               	retlw	0
  3721  0F7E  3400               	retlw	0
  3722  0F7F  3400               	retlw	0
  3723  0F80  3400               	retlw	0
  3724  0F81  3400               	retlw	0
  3725  0F82  3400               	retlw	0
  3726  0F83  3400               	retlw	0
  3727  0F84  3400               	retlw	0
  3728  0F85  3400               	retlw	0
  3729                           
  3730                           ;initializer for _mod5
  3731  0F86  3400               	retlw	0
  3732  0F87  3400               	retlw	0
  3733  0F88  340A               	retlw	10
  3734  0F89  3400               	retlw	0
  3735  0F8A  3414               	retlw	20
  3736  0F8B  3400               	retlw	0
  3737  0F8C  341E               	retlw	30
  3738  0F8D  3400               	retlw	0
  3739  0F8E  3428               	retlw	40
  3740  0F8F  3400               	retlw	0
  3741  0F90  3432               	retlw	50
  3742  0F91  3400               	retlw	0
  3743  0F92  343A               	retlw	58
  3744  0F93  3400               	retlw	0
  3745  0F94  3442               	retlw	66
  3746  0F95  3400               	retlw	0
  3747  0F96  344A               	retlw	74
  3748  0F97  3400               	retlw	0
  3749  0F98  3450               	retlw	80
  3750  0F99  3400               	retlw	0
  3751  0F9A  3456               	retlw	86
  3752  0F9B  3400               	retlw	0
  3753  0F9C  345B               	retlw	91
  3754  0F9D  3400               	retlw	0
  3755  0F9E  345F               	retlw	95
  3756  0F9F  3400               	retlw	0
  3757  0FA0  3461               	retlw	97
  3758  0FA1  3400               	retlw	0
  3759  0FA2  3463               	retlw	99
  3760  0FA3  3400               	retlw	0
  3761  0FA4  3464               	retlw	100
  3762  0FA5  3400               	retlw	0
  3763  0FA6  3463               	retlw	99
  3764  0FA7  3400               	retlw	0
  3765  0FA8  3461               	retlw	97
  3766  0FA9  3400               	retlw	0
  3767  0FAA  345F               	retlw	95
  3768  0FAB  3400               	retlw	0
  3769  0FAC  345B               	retlw	91
  3770  0FAD  3400               	retlw	0
  3771  0FAE  3456               	retlw	86
  3772  0FAF  3400               	retlw	0
  3773  0FB0  3450               	retlw	80
  3774  0FB1  3400               	retlw	0
  3775  0FB2  344A               	retlw	74
  3776  0FB3  3400               	retlw	0
  3777  0FB4  3442               	retlw	66
  3778  0FB5  3400               	retlw	0
  3779  0FB6  343A               	retlw	58
  3780  0FB7  3400               	retlw	0
  3781  0FB8  3432               	retlw	50
  3782  0FB9  3400               	retlw	0
  3783  0FBA  3428               	retlw	40
  3784  0FBB  3400               	retlw	0
  3785  0FBC  341E               	retlw	30
  3786  0FBD  3400               	retlw	0
  3787  0FBE  3414               	retlw	20
  3788  0FBF  3400               	retlw	0
  3789  0FC0  340A               	retlw	10
  3790  0FC1  3400               	retlw	0
  3791  0FC2  3400               	retlw	0
  3792  0FC3  3400               	retlw	0
  3793  0FC4  34F6               	retlw	246
  3794  0FC5  34FF               	retlw	255
  3795  0FC6  34EC               	retlw	236
  3796  0FC7  34FF               	retlw	255
  3797  0FC8  34E2               	retlw	226
  3798  0FC9  34FF               	retlw	255
  3799  0FCA  34D8               	retlw	216
  3800  0FCB  34FF               	retlw	255
  3801  0FCC  34CE               	retlw	206
  3802  0FCD  34FF               	retlw	255
  3803  0FCE  34C6               	retlw	198
  3804  0FCF  34FF               	retlw	255
  3805  0FD0  34BE               	retlw	190
  3806  0FD1  34FF               	retlw	255
  3807  0FD2  34B6               	retlw	182
  3808  0FD3  34FF               	retlw	255
  3809  0FD4  34B0               	retlw	176
  3810  0FD5  34FF               	retlw	255
  3811  0FD6  34AA               	retlw	170
  3812  0FD7  34FF               	retlw	255
  3813  0FD8  34A5               	retlw	165
  3814  0FD9  34FF               	retlw	255
  3815  0FDA  34A1               	retlw	161
  3816  0FDB  34FF               	retlw	255
  3817  0FDC  349F               	retlw	159
  3818  0FDD  34FF               	retlw	255
  3819  0FDE  349D               	retlw	157
  3820  0FDF  34FF               	retlw	255
  3821  0FE0  349C               	retlw	156
  3822  0FE1  34FF               	retlw	255
  3823  0FE2  349D               	retlw	157
  3824  0FE3  34FF               	retlw	255
  3825  0FE4  349F               	retlw	159
  3826  0FE5  34FF               	retlw	255
  3827  0FE6  34A1               	retlw	161
  3828  0FE7  34FF               	retlw	255
  3829  0FE8  34A5               	retlw	165
  3830  0FE9  34FF               	retlw	255
  3831  0FEA  34AA               	retlw	170
  3832  0FEB  34FF               	retlw	255
  3833  0FEC  34B0               	retlw	176
  3834  0FED  34FF               	retlw	255
  3835  0FEE  34B6               	retlw	182
  3836  0FEF  34FF               	retlw	255
  3837  0FF0  34BE               	retlw	190
  3838  0FF1  34FF               	retlw	255
  3839  0FF2  34C6               	retlw	198
  3840  0FF3  34FF               	retlw	255
  3841  0FF4  34CE               	retlw	206
  3842  0FF5  34FF               	retlw	255
  3843  0FF6  34D8               	retlw	216
  3844  0FF7  34FF               	retlw	255
  3845  0FF8  34E2               	retlw	226
  3846  0FF9  34FF               	retlw	255
  3847  0FFA  34EC               	retlw	236
  3848  0FFB  34FF               	retlw	255
  3849  0FFC  34F6               	retlw	246
  3850  0FFD  34FF               	retlw	255
  3851  0FFE  3400               	retlw	0
  3852  0FFF  3400               	retlw	0
  3853                           
  3854                           	psect	nvBANK3
  3855  01E9                     __pnvBANK3:	
  3856  01E9                     _B25kLength:	
  3857  01E9                     	ds	2
  3858  000B                     _INTCONbits	set	11
  3859  000E                     _PORTCbits	set	14
  3860  000F                     _PORTDbits	set	15
  3861  0010                     _PORTEbits	set	16
  3862  001B                     _PR2	set	27
  3863  001C                     _T2CONbits	set	28
  3864  009D                     _ADCON0bits	set	157
  3865  009E                     _ADCON1bits	set	158
  3866  009C                     _ADRESH	set	156
  3867  009B                     _ADRESL	set	155
  3868  0095                     _OPTION_REGbits	set	149
  3869  0099                     _OSCCONbits	set	153
  3870  008D                     _TRISBbits	set	141
  3871  008E                     _TRISCbits	set	142
  3872  008F                     _TRISDbits	set	143
  3873  0090                     _TRISEbits	set	144
  3874  011D                     _APFCONbits	set	285
  3875  010D                     _LATBbits	set	269
  3876  010F                     _LATDbits	set	271
  3877  0190                     _ANSELEbits	set	400
  3878  0192                     _PMADRH	set	402
  3879  0191                     _PMADRL	set	401
  3880  0195                     _PMCON1bits	set	405
  3881  0196                     _PMCON2	set	406
  3882  0194                     _PMDATH	set	404
  3883  0193                     _PMDATL	set	403
  3884  0291                     _CCPR1	set	657
  3885  0298                     _CCPR2	set	664
  3886  0293                     _CCP1CONbits	set	659
  3887  029A                     _CCP2CONbits	set	666
  3888  029D                     _CCPTMRS0	set	669
  3889  029E                     _CCPTMRS1	set	670
  3890  029F                     _CCPTMRS2	set	671
  3891  0311                     _CCPR3	set	785
  3892  0318                     _CCPR4	set	792
  3893  031C                     _CCPR5	set	796
  3894  0313                     _CCP3CONbits	set	787
  3895  031A                     _CCP4CONbits	set	794
  3896  031E                     _CCP5CONbits	set	798
  3897  030C                     _TRISFbits	set	780
  3898  030D                     _TRISGbits	set	781
  3899  038C                     _LATFbits	set	908
  3900  038D                     _LATGbits	set	909
  3901  040C                     _ANSELFbits	set	1036
  3902  061A                     _CCPR9	set	1562
  3903  061F                     _CCP10CONbits	set	1567
  3904  0613                     _CCP6CONbits	set	1555
  3905  0616                     _CCP7CONbits	set	1558
  3906  0619                     _CCP8CONbits	set	1561
  3907  061C                     _CCP9CONbits	set	1564
  3908                           
  3909                           ; #config settings
  3910  0000                     
  3911                           	psect	cinit
  3912  0320                     start_initialization:	
  3913  0320                     __initialization:		;BIGRAM
  3914                           
  3915                           ; Clear objects allocated to BANK0
  3916  0320  3045               	movlw	low __pbssBANK0
  3917  0321  0084               	movwf	4
  3918  0322  3000               	movlw	high __pbssBANK0
  3919  0323  0085               	movwf	5
  3920  0324  3013               	movlw	19
  3921  0325  00FE               	movwf	btemp
  3922  0326  3000               	movlw	0
  3923  0327  00FF               	movwf	btemp+1
  3924  0328  319D  25AC  3183   	fcall	clear_ram0
  3925                           
  3926                           ; Clear objects allocated to BANK2
  3927  032B  3020               	movlw	low __pbssBANK2
  3928  032C  0084               	movwf	4
  3929  032D  3001               	movlw	high __pbssBANK2
  3930  032E  0085               	movwf	5
  3931  032F  301F               	movlw	31
  3932  0330  00FE               	movwf	btemp
  3933  0331  3000               	movlw	0
  3934  0332  00FF               	movwf	btemp+1
  3935  0333  319D  25AC  3183   	fcall	clear_ram0
  3936                           
  3937                           ; Clear objects allocated to BANK3
  3938  0336  30A0               	movlw	low __pbssBANK3
  3939  0337  0084               	movwf	4
  3940  0338  3001               	movlw	high __pbssBANK3
  3941  0339  0085               	movwf	5
  3942  033A  3034               	movlw	52
  3943  033B  00FE               	movwf	btemp
  3944  033C  3000               	movlw	0
  3945  033D  00FF               	movwf	btemp+1
  3946  033E  319D  25AC  3183   	fcall	clear_ram0
  3947                           
  3948                           ; Clear objects allocated to BANK4
  3949  0341  3020               	movlw	low __pbssBANK4
  3950  0342  0084               	movwf	4
  3951  0343  3002               	movlw	high __pbssBANK4
  3952  0344  0085               	movwf	5
  3953  0345  302C               	movlw	44
  3954  0346  00FE               	movwf	btemp
  3955  0347  3000               	movlw	0
  3956  0348  00FF               	movwf	btemp+1
  3957  0349  319D  25AC  3183   	fcall	clear_ram0
  3958                           
  3959                           ; Clear objects allocated to BANK9
  3960  034C  30A0               	movlw	low __pbssBANK9
  3961  034D  0084               	movwf	4
  3962  034E  3004               	movlw	high __pbssBANK9
  3963  034F  0085               	movwf	5
  3964  0350  3040               	movlw	64
  3965  0351  00FE               	movwf	btemp
  3966  0352  3000               	movlw	0
  3967  0353  00FF               	movwf	btemp+1
  3968  0354  319D  25AC  3183   	fcall	clear_ram0
  3969                           
  3970                           ; Initialize objects allocated to BIGRAM
  3971  0357  307E               	movlw	low __pidataBIGRAM
  3972  0358  0084               	movwf	4
  3973  0359  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3974  035A  0085               	movwf	5
  3975  035B  306E               	movlw	low (0+9070)
  3976  035C  0086               	movwf	6
  3977  035D  3023               	movlw	high (0+9070)
  3978  035E  0087               	movwf	7
  3979  035F  3002               	movlw	2
  3980  0360  00FF               	movwf	btemp+1
  3981  0361  3082               	movlw	130
  3982  0362  319D  25A0  3183   	fcall	init_ram
  3983                           
  3984                           ; Initialize objects allocated to COMMON
  3985  0365  3187  27FE  3183   	fcall	__pidataCOMMON	;fetch initializer
  3986  0368  00FD               	movwf	__pdataCOMMON& (0+127)
  3987                           
  3988                           ; Initialize objects allocated to BANK0
  3989  0369  30D8               	movlw	low __pidataBANK0
  3990  036A  0084               	movwf	4
  3991  036B  309D               	movlw	(high __pidataBANK0)| (0+128)
  3992  036C  0085               	movwf	5
  3993  036D  3058               	movlw	low __pdataBANK0
  3994  036E  0086               	movwf	6
  3995  036F  3000               	movlw	high __pdataBANK0
  3996  0370  0087               	movwf	7
  3997  0371  3000               	movlw	0
  3998  0372  00FF               	movwf	btemp+1
  3999  0373  3012               	movlw	18
  4000  0374  319D  25A0  3183   	fcall	init_ram
  4001                           
  4002                           ; Initialize objects allocated to BANK2
  4003  0377  30C7               	movlw	low __pidataBANK2
  4004  0378  0084               	movwf	4
  4005  0379  309D               	movlw	(high __pidataBANK2)| (0+128)
  4006  037A  0085               	movwf	5
  4007  037B  3055               	movlw	low __pdataBANK2
  4008  037C  0086               	movwf	6
  4009  037D  3001               	movlw	high __pdataBANK2
  4010  037E  0087               	movwf	7
  4011  037F  3000               	movlw	0
  4012  0380  00FF               	movwf	btemp+1
  4013  0381  3011               	movlw	17
  4014  0382  319D  25A0  3183   	fcall	init_ram
  4015                           
  4016                           ; Initialize objects allocated to BANK3
  4017  0385  3000               	movlw	low __pidataBANK3
  4018  0386  0084               	movwf	4
  4019  0387  3090               	movlw	(high __pidataBANK3)| (0+128)
  4020  0388  0085               	movwf	5
  4021  0389  30E3               	movlw	low __pdataBANK3
  4022  038A  0086               	movwf	6
  4023  038B  3001               	movlw	high __pdataBANK3
  4024  038C  0087               	movwf	7
  4025  038D  3000               	movlw	0
  4026  038E  00FF               	movwf	btemp+1
  4027  038F  3006               	movlw	6
  4028  0390  319D  25A0  3183   	fcall	init_ram
  4029                           
  4030                           ; Initialize objects allocated to BANK5
  4031  0393  30EA               	movlw	low __pidataBANK5
  4032  0394  0084               	movwf	4
  4033  0395  3092               	movlw	(high __pidataBANK5)| (0+128)
  4034  0396  0085               	movwf	5
  4035  0397  30A0               	movlw	low __pdataBANK5
  4036  0398  0086               	movwf	6
  4037  0399  3002               	movlw	high __pdataBANK5
  4038  039A  0087               	movwf	7
  4039  039B  3000               	movlw	0
  4040  039C  00FF               	movwf	btemp+1
  4041  039D  3050               	movlw	80
  4042  039E  319D  25A0  3183   	fcall	init_ram
  4043                           
  4044                           ; Initialize objects allocated to BANK6
  4045  03A1  30C0               	movlw	low __pidataBANK6
  4046  03A2  0084               	movwf	4
  4047  03A3  3090               	movlw	(high __pidataBANK6)| (0+128)
  4048  03A4  0085               	movwf	5
  4049  03A5  3020               	movlw	low __pdataBANK6
  4050  03A6  0086               	movwf	6
  4051  03A7  3003               	movlw	high __pdataBANK6
  4052  03A8  0087               	movwf	7
  4053  03A9  3000               	movlw	0
  4054  03AA  00FF               	movwf	btemp+1
  4055  03AB  303E               	movlw	62
  4056  03AC  319D  25A0  3183   	fcall	init_ram
  4057                           
  4058                           ; Initialize objects allocated to BANK7
  4059  03AF  3082               	movlw	low __pidataBANK7
  4060  03B0  0084               	movwf	4
  4061  03B1  3090               	movlw	(high __pidataBANK7)| (0+128)
  4062  03B2  0085               	movwf	5
  4063  03B3  30A0               	movlw	low __pdataBANK7
  4064  03B4  0086               	movwf	6
  4065  03B5  3003               	movlw	high __pdataBANK7
  4066  03B6  0087               	movwf	7
  4067  03B7  3000               	movlw	0
  4068  03B8  00FF               	movwf	btemp+1
  4069  03B9  303E               	movlw	62
  4070  03BA  319D  25A0  3183   	fcall	init_ram
  4071                           
  4072                           ; Initialize objects allocated to BANK8
  4073  03BD  3044               	movlw	low __pidataBANK8
  4074  03BE  0084               	movwf	4
  4075  03BF  3090               	movlw	(high __pidataBANK8)| (0+128)
  4076  03C0  0085               	movwf	5
  4077  03C1  3020               	movlw	low __pdataBANK8
  4078  03C2  0086               	movwf	6
  4079  03C3  3004               	movlw	high __pdataBANK8
  4080  03C4  0087               	movwf	7
  4081  03C5  3000               	movlw	0
  4082  03C6  00FF               	movwf	btemp+1
  4083  03C7  303E               	movlw	62
  4084  03C8  319D  25A0  3183   	fcall	init_ram
  4085                           
  4086                           ; Initialize objects allocated to BANK10
  4087  03CB  3006               	movlw	low __pidataBANK10
  4088  03CC  0084               	movwf	4
  4089  03CD  3090               	movlw	(high __pidataBANK10)| (0+128)
  4090  03CE  0085               	movwf	5
  4091  03CF  3020               	movlw	low __pdataBANK10
  4092  03D0  0086               	movwf	6
  4093  03D1  3005               	movlw	high __pdataBANK10
  4094  03D2  0087               	movwf	7
  4095  03D3  3000               	movlw	0
  4096  03D4  00FF               	movwf	btemp+1
  4097  03D5  303E               	movlw	62
  4098  03D6  319D  25A0         	fcall	init_ram
  4099  03D8                     end_of_initialization:	
  4100                           ;End of C runtime variable initialization code
  4101                           
  4102  03D8                     __end_of__initialization:	
  4103  03D8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4104  03D9  0020               	movlb	0
  4105  03DA  3183  2BDC         	ljmp	_main	;jump to C main() function
  4106                           
  4107                           	psect	dataCOMMON
  4108  007D                     __pdataCOMMON:	
  4109  007D                     _blink_rate:	
  4110  007D                     	ds	1
  4111                           
  4112                           	psect	bssBANK0
  4113  0045                     __pbssBANK0:	
  4114  0045                     _sub_timer:	
  4115  0045                     	ds	4
  4116  0049                     _tap_timer:	
  4117  0049                     	ds	4
  4118  004D                     _timer:	
  4119  004D                     	ds	4
  4120  0051                     _mod_counter:	
  4121  0051                     	ds	2
  4122  0053                     _doubleTap_state:	
  4123  0053                     	ds	1
  4124  0054                     _feedback_start:	
  4125  0054                     	ds	1
  4126  0055                     _longTap_start:	
  4127  0055                     	ds	1
  4128  0056                     _suspend_blink:	
  4129  0056                     	ds	1
  4130  0057                     _switchTap_pressed:	
  4131  0057                     	ds	1
  4132                           
  4133                           	psect	dataBANK0
  4134  0058                     __pdataBANK0:	
  4135  0058                     _baseline_delay_time:	
  4136  0058                     	ds	4
  4137  005C                     _delay_time:	
  4138  005C                     	ds	4
  4139  0060                     _bottom_push_state:	
  4140  0060                     	ds	2
  4141  0062                     _long_press_limit:	
  4142  0062                     	ds	2
  4143  0064                     _top_push_state:	
  4144  0064                     	ds	2
  4145  0066                     _feedback_state:	
  4146  0066                     	ds	1
  4147  0067                     _longTap_state:	
  4148  0067                     	ds	1
  4149  0068                     _num_taps:	
  4150  0068                     	ds	1
  4151  0069                     _switchBypass_state:	
  4152  0069                     	ds	1
  4153                           
  4154                           	psect	bssBANK2
  4155  0120                     __pbssBANK2:	
  4156  0120                     _mod_timer:	
  4157  0120                     	ds	4
  4158  0124                     _delay_counter:	
  4159  0124                     	ds	2
  4160  0126                     _feedback_timer:	
  4161  0126                     	ds	2
  4162  0128                     _knob_1_pos:	
  4163  0128                     	ds	2
  4164  012A                     _knob_2_pos:	
  4165  012A                     	ds	2
  4166  012C                     _knob_3_pos:	
  4167  012C                     	ds	2
  4168  012E                     _knob_4_pos:	
  4169  012E                     	ds	2
  4170  0130                     _knob_5_pos:	
  4171  0130                     	ds	2
  4172  0132                     _longTap_timer:	
  4173  0132                     	ds	2
  4174  0134                     _switchBypass_pressed:	
  4175  0134                     	ds	2
  4176  0136                     _bottomTactile_pressed:	
  4177  0136                     	ds	1
  4178  0137                     _bypass_turning_on:	
  4179  0137                     	ds	1
  4180  0138                     _iCnt:	
  4181  0138                     	ds	1
  4182  0139                     _mode1_state:	
  4183  0139                     	ds	1
  4184  013A                     _mode2_state:	
  4185  013A                     	ds	1
  4186  013B                     _preset_blink:	
  4187  013B                     	ds	1
  4188  013C                     _preset_programmning_on:	
  4189  013C                     	ds	1
  4190  013D                     _switchTap_down:	
  4191  013D                     	ds	1
  4192  013E                     _topTactile_pressed:	
  4193  013E                     	ds	1
  4194                           
  4195                           	psect	dataBANK2
  4196  0155                     __pdataBANK2:	
  4197  0155                     _blink_delay:	
  4198  0155                     	ds	2
  4199  0157                     _knob1_prev:	
  4200  0157                     	ds	2
  4201  0159                     _knob2_prev:	
  4202  0159                     	ds	2
  4203  015B                     _knob3_prev:	
  4204  015B                     	ds	2
  4205  015D                     _knob4_prev:	
  4206  015D                     	ds	2
  4207  015F                     _knob5_prev:	
  4208  015F                     	ds	2
  4209  0161                     _tap_iteration:	
  4210  0161                     	ds	2
  4211  0163                     _blink_state:	
  4212  0163                     	ds	1
  4213  0164                     _currentBypassState:	
  4214  0164                     	ds	1
  4215  0165                     _switchTap_state:	
  4216  0165                     	ds	1
  4217                           
  4218                           	psect	bssBANK3
  4219  01A0                     __pbssBANK3:	
  4220  01A0                     _tap_history:	
  4221  01A0                     	ds	20
  4222  01B4                     _ledState:	
  4223  01B4                     	ds	4
  4224  01B8                     _tap_total:	
  4225  01B8                     	ds	4
  4226  01BC                     _test_timer:	
  4227  01BC                     	ds	4
  4228  01C0                     _adjust_sub_delay:	
  4229  01C0                     	ds	2
  4230  01C2                     _adjusted_pot_value:	
  4231  01C2                     	ds	2
  4232  01C4                     _debounce_bypass:	
  4233  01C4                     	ds	2
  4234  01C6                     _debounce_count:	
  4235  01C6                     	ds	2
  4236  01C8                     _debounce_mode1:	
  4237  01C8                     	ds	2
  4238  01CA                     _debounce_mode2:	
  4239  01CA                     	ds	2
  4240  01CC                     _delayfound:	
  4241  01CC                     	ds	2
  4242  01CE                     _mod_value:	
  4243  01CE                     	ds	2
  4244  01D0                     _reset_sub_delay:	
  4245  01D0                     	ds	2
  4246  01D2                     _switchBypass_toggle:	
  4247  01D2                     	ds	2
  4248                           
  4249                           	psect	dataBANK3
  4250  01E3                     __pdataBANK3:	
  4251  01E3                     _delay_time_changed:	
  4252  01E3                     	ds	2
  4253  01E5                     _mod_delay_time:	
  4254  01E5                     	ds	2
  4255  01E7                     _switchBypass_up:	
  4256  01E7                     	ds	2
  4257                           
  4258                           	psect	bssBANK4
  4259  0220                     __pbssBANK4:	
  4260  0220                     _tap:	
  4261  0220                     	ds	44
  4262                           
  4263                           	psect	dataBANK5
  4264  02A0                     __pdataBANK5:	
  4265  02A0                     _B25k:	
  4266  02A0                     	ds	80
  4267                           
  4268                           	psect	dataBANK6
  4269  0320                     __pdataBANK6:	
  4270  0320                     _mod2:	
  4271  0320                     	ds	62
  4272                           
  4273                           	psect	dataBANK7
  4274  03A0                     __pdataBANK7:	
  4275  03A0                     _mod3:	
  4276  03A0                     	ds	62
  4277                           
  4278                           	psect	dataBANK8
  4279  0420                     __pdataBANK8:	
  4280  0420                     _mod4:	
  4281  0420                     	ds	62
  4282                           
  4283                           	psect	bssBANK9
  4284  04A0                     __pbssBANK9:	
  4285  04A0                     _myBuf:	
  4286  04A0                     	ds	64
  4287                           
  4288                           	psect	dataBANK10
  4289  0520                     __pdataBANK10:	
  4290  0520                     _mod1:	
  4291  0520                     	ds	62
  4292                           
  4293                           	psect	clrtext
  4294  1DAC                     clear_ram0:	
  4295                           ;	Called with FSR0 containing the base address, and
  4296                           ;	btemp/btemp+1 has the size to clear
  4297                           
  4298  1DAC  0064               	clrwdt	;clear the watchdog before getting into this loop
  4299  1DAD                     clrloop0:	
  4300  1DAD  0180               	clrf	0	;clear RAM location pointed to by FSR
  4301  1DAE  3101               	addfsr 0,1
  4302  1DAF  3001               	movlw	1
  4303  1DB0  02FE               	subwf	126,f
  4304  1DB1  3000               	movlw	0
  4305  1DB2  3BFF               	subwfb	127,f
  4306  1DB3  087F               	movf	127,w
  4307  1DB4  047E               	iorwf	126,w
  4308  1DB5  1903               	btfsc	3,2
  4309  1DB6  3400               	retlw	0	;all done for this memory range, return
  4310  1DB7  2DAD               	goto	clrloop0	;have we reached the end yet?
  4311                           
  4312                           	psect	inittext
  4313  1DA0                     init_ram:	
  4314  1DA0  00FE               	movwf	126
  4315  1DA1                     initloop:	
  4316  1DA1  0012               	moviw fsr0++
  4317  1DA2  001E               	movwi fsr1++
  4318  1DA3  3001               	movlw	1
  4319  1DA4  02FE               	subwf	126,f
  4320  1DA5  3000               	movlw	0
  4321  1DA6  3BFF               	subwfb	127,f
  4322  1DA7  087F               	movf	127,w
  4323  1DA8  047E               	iorwf	126,w
  4324  1DA9  1903               	btfsc	3,2
  4325  1DAA  3400               	retlw	0
  4326  1DAB  2DA1               	goto	initloop
  4327                           
  4328                           	psect	cstackBANK3
  4329  01D4                     __pcstackBANK3:	
  4330  01D4                     ??_main:	
  4331                           
  4332                           ; 1 bytes @ 0x0
  4333  01D4                     	ds	15
  4334                           
  4335                           	psect	cstackBANK2
  4336  013F                     __pcstackBANK2:	
  4337  013F                     ___fttol@sign1:	
  4338                           
  4339                           ; 1 bytes @ 0x0
  4340  013F                     	ds	1
  4341  0140                     ___fttol@lval:	
  4342                           
  4343                           ; 4 bytes @ 0x1
  4344  0140                     	ds	4
  4345  0144                     ___fttol@exp1:	
  4346                           
  4347                           ; 1 bytes @ 0x5
  4348  0144                     	ds	1
  4349  0145                     ?_set_subdivision:	
  4350  0145                     set_subdivision@x:	
  4351                           ; 2 bytes @ 0x6
  4352                           
  4353                           
  4354                           ; 2 bytes @ 0x6
  4355  0145                     	ds	2
  4356  0147                     set_subdivision@y:	
  4357                           
  4358                           ; 2 bytes @ 0x8
  4359  0147                     	ds	2
  4360  0149                     ??_set_subdivision:	
  4361                           
  4362                           ; 1 bytes @ 0xA
  4363  0149                     	ds	3
  4364  014C                     set_subdivision@tmpX:	
  4365                           
  4366                           ; 2 bytes @ 0xD
  4367  014C                     	ds	2
  4368  014E                     set_subdivision@scalar:	
  4369                           
  4370                           ; 3 bytes @ 0xF
  4371  014E                     	ds	3
  4372  0151                     main@i:	
  4373                           
  4374                           ; 2 bytes @ 0x12
  4375  0151                     	ds	2
  4376  0153                     main@i_391:	
  4377                           
  4378                           ; 2 bytes @ 0x14
  4379  0153                     	ds	2
  4380                           
  4381                           	psect	cstackBANK1
  4382  00A0                     __pcstackBANK1:	
  4383  00A0                     ?_set_leds_top:	
  4384  00A0                     ??_ConfigureOscillator:	
  4385                           ; 1 bytes @ 0x0
  4386                           
  4387  00A0                     ??_InitApp:	
  4388                           ; 1 bytes @ 0x0
  4389                           
  4390  00A0                     ??_InitializeTaps:	
  4391                           ; 1 bytes @ 0x0
  4392                           
  4393  00A0                     ??_update_mode:	
  4394                           ; 1 bytes @ 0x0
  4395                           
  4396  00A0                     ??_init_adc:	
  4397                           ; 1 bytes @ 0x0
  4398                           
  4399  00A0                     ??_init_pwm:	
  4400                           ; 1 bytes @ 0x0
  4401                           
  4402  00A0                     ??_init_timer2:	
  4403                           ; 1 bytes @ 0x0
  4404                           
  4405  00A0                     ??_init_timer0:	
  4406                           ; 1 bytes @ 0x0
  4407                           
  4408  00A0                     ?_set_leds_bottom:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  00A0                     ??_getCurrentLEDState:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  00A0                     ??_restoreLEDState:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  00A0                     ?_setFeedbackState:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420  00A0                     ?_setLongTapState:	
  4421                           ; 1 bytes @ 0x0
  4422                           
  4423  00A0                     ?_updateSwitchBypassState:	
  4424                           ; 1 bytes @ 0x0
  4425                           
  4426  00A0                     ?_adc_convert:	
  4427                           ; 1 bytes @ 0x0
  4428                           
  4429  00A0                     ?_FLASH_ReadWord:	
  4430                           ; 2 bytes @ 0x0
  4431                           
  4432  00A0                     ?_getSwitchBypassState:	
  4433                           ; 2 bytes @ 0x0
  4434                           
  4435  00A0                     ?___ftpack:	
  4436                           ; 2 bytes @ 0x0
  4437                           
  4438  00A0                     ?___ftneg:	
  4439                           ; 3 bytes @ 0x0
  4440                           
  4441  00A0                     ?___lmul:	
  4442                           ; 3 bytes @ 0x0
  4443                           
  4444  00A0                     ?___aldiv:	
  4445                           ; 4 bytes @ 0x0
  4446                           
  4447  00A0                     FLASH_ReadWord@flashAddr:	
  4448                           ; 4 bytes @ 0x0
  4449                           
  4450  00A0                     set_leds_top@x:	
  4451                           ; 2 bytes @ 0x0
  4452                           
  4453  00A0                     set_leds_bottom@x:	
  4454                           ; 2 bytes @ 0x0
  4455                           
  4456  00A0                     updateSwitchBypassState@state:	
  4457                           ; 2 bytes @ 0x0
  4458                           
  4459  00A0                     setFeedbackState@f_state:	
  4460                           ; 2 bytes @ 0x0
  4461                           
  4462  00A0                     setLongTapState@f_state:	
  4463                           ; 2 bytes @ 0x0
  4464                           
  4465  00A0                     ___ftpack@arg:	
  4466                           ; 2 bytes @ 0x0
  4467                           
  4468  00A0                     ___ftneg@f1:	
  4469                           ; 3 bytes @ 0x0
  4470                           
  4471  00A0                     ___lmul@multiplier:	
  4472                           ; 3 bytes @ 0x0
  4473                           
  4474  00A0                     ___aldiv@divisor:	
  4475                           ; 4 bytes @ 0x0
  4476                           
  4477                           
  4478                           ; 4 bytes @ 0x0
  4479  00A0                     	ds	1
  4480  00A1                     InitializeTaps@itap:	
  4481                           
  4482                           ; 2 bytes @ 0x1
  4483  00A1                     	ds	1
  4484  00A2                     ??_adc_convert:	
  4485  00A2                     ??_FLASH_ReadWord:	
  4486                           ; 1 bytes @ 0x2
  4487                           
  4488  00A2                     ??_set_leds_bottom:	
  4489                           ; 1 bytes @ 0x2
  4490                           
  4491  00A2                     ??_setFeedbackState:	
  4492                           ; 1 bytes @ 0x2
  4493                           
  4494  00A2                     ??_setLongTapState:	
  4495                           ; 1 bytes @ 0x2
  4496                           
  4497  00A2                     ??_updateSwitchBypassState:	
  4498                           ; 1 bytes @ 0x2
  4499                           
  4500  00A2                     ??_getSwitchBypassState:	
  4501                           ; 1 bytes @ 0x2
  4502                           
  4503  00A2                     FLASH_ReadWord@GIEBitValue:	
  4504                           ; 1 bytes @ 0x2
  4505                           
  4506  00A2                     set_leds_top@ledState:	
  4507                           ; 1 bytes @ 0x2
  4508                           
  4509                           
  4510                           ; 2 bytes @ 0x2
  4511  00A2                     	ds	1
  4512  00A3                     ??___ftneg:	
  4513  00A3                     adc_convert@channel:	
  4514                           ; 1 bytes @ 0x3
  4515                           
  4516  00A3                     ___ftpack@exp:	
  4517                           ; 1 bytes @ 0x3
  4518                           
  4519                           
  4520                           ; 1 bytes @ 0x3
  4521  00A3                     	ds	1
  4522  00A4                     ??_set_leds_top:	
  4523  00A4                     ??_ReadSavedSettings:	
  4524                           ; 1 bytes @ 0x4
  4525                           
  4526  00A4                     ___ftpack@sign:	
  4527                           ; 1 bytes @ 0x4
  4528                           
  4529  00A4                     ___lmul@multiplicand:	
  4530                           ; 1 bytes @ 0x4
  4531                           
  4532  00A4                     ___aldiv@dividend:	
  4533                           ; 4 bytes @ 0x4
  4534                           
  4535                           
  4536                           ; 4 bytes @ 0x4
  4537  00A4                     	ds	1
  4538  00A5                     ??___ftpack:	
  4539                           
  4540                           ; 1 bytes @ 0x5
  4541  00A5                     	ds	3
  4542  00A8                     ??___lmul:	
  4543  00A8                     ??___aldiv:	
  4544                           ; 1 bytes @ 0x8
  4545                           
  4546  00A8                     ?___awtoft:	
  4547                           ; 1 bytes @ 0x8
  4548                           
  4549  00A8                     ?___ftadd:	
  4550                           ; 3 bytes @ 0x8
  4551                           
  4552  00A8                     ___awtoft@c:	
  4553                           ; 3 bytes @ 0x8
  4554                           
  4555  00A8                     ___ftadd@f1:	
  4556                           ; 2 bytes @ 0x8
  4557                           
  4558  00A8                     ___lmul@product:	
  4559                           ; 3 bytes @ 0x8
  4560                           
  4561                           
  4562                           ; 4 bytes @ 0x8
  4563  00A8                     	ds	1
  4564  00A9                     ___aldiv@counter:	
  4565                           
  4566                           ; 1 bytes @ 0x9
  4567  00A9                     	ds	1
  4568  00AA                     ___aldiv@sign:	
  4569                           
  4570                           ; 1 bytes @ 0xA
  4571  00AA                     	ds	1
  4572  00AB                     ??___awtoft:	
  4573  00AB                     ___ftadd@f2:	
  4574                           ; 1 bytes @ 0xB
  4575                           
  4576  00AB                     ___aldiv@quotient:	
  4577                           ; 3 bytes @ 0xB
  4578                           
  4579                           
  4580                           ; 4 bytes @ 0xB
  4581  00AB                     	ds	1
  4582  00AC                     ?_wait_ms:	
  4583  00AC                     wait_ms@timeSec:	
  4584                           ; 1 bytes @ 0xC
  4585                           
  4586                           
  4587                           ; 2 bytes @ 0xC
  4588  00AC                     	ds	1
  4589  00AD                     ___awtoft@sign:	
  4590                           
  4591                           ; 1 bytes @ 0xD
  4592  00AD                     	ds	1
  4593  00AE                     ??_wait_ms:	
  4594  00AE                     ??___ftadd:	
  4595                           ; 1 bytes @ 0xE
  4596                           
  4597  00AE                     wait_ms@timemsl:	
  4598                           ; 1 bytes @ 0xE
  4599                           
  4600                           
  4601                           ; 4 bytes @ 0xE
  4602  00AE                     	ds	4
  4603  00B2                     ??_read_bottom_tactile:	
  4604  00B2                     ??_read_top_tactile:	
  4605                           ; 1 bytes @ 0x12
  4606                           
  4607  00B2                     ??_star_tactiles:	
  4608                           ; 1 bytes @ 0x12
  4609                           
  4610  00B2                     ??_solidring_tactiles:	
  4611                           ; 1 bytes @ 0x12
  4612                           
  4613  00B2                     ?_setSwitchBypassState:	
  4614                           ; 1 bytes @ 0x12
  4615                           
  4616  00B2                     ?_setDoublePressState:	
  4617                           ; 1 bytes @ 0x12
  4618                           
  4619  00B2                     ___ftadd@sign:	
  4620                           ; 1 bytes @ 0x12
  4621                           
  4622  00B2                     setSwitchBypassState@f_state:	
  4623                           ; 1 bytes @ 0x12
  4624                           
  4625  00B2                     setDoublePressState@f_state:	
  4626                           ; 2 bytes @ 0x12
  4627                           
  4628                           
  4629                           ; 2 bytes @ 0x12
  4630  00B2                     	ds	1
  4631  00B3                     ___ftadd@exp2:	
  4632                           
  4633                           ; 1 bytes @ 0x13
  4634  00B3                     	ds	1
  4635  00B4                     ??_setSwitchBypassState:	
  4636  00B4                     ??_setDoublePressState:	
  4637                           ; 1 bytes @ 0x14
  4638                           
  4639  00B4                     star_tactiles@reverse:	
  4640                           ; 1 bytes @ 0x14
  4641                           
  4642  00B4                     solidring_tactiles@ring_delay:	
  4643                           ; 1 bytes @ 0x14
  4644                           
  4645  00B4                     ___ftadd@exp1:	
  4646                           ; 1 bytes @ 0x14
  4647                           
  4648                           
  4649                           ; 1 bytes @ 0x14
  4650  00B4                     	ds	1
  4651  00B5                     ?___ftmul:	
  4652  00B5                     star_tactiles@iLed:	
  4653                           ; 3 bytes @ 0x15
  4654                           
  4655  00B5                     ___ftmul@f1:	
  4656                           ; 2 bytes @ 0x15
  4657                           
  4658                           
  4659                           ; 3 bytes @ 0x15
  4660  00B5                     	ds	1
  4661  00B6                     ??_initSwitchBypass:	
  4662  00B6                     ??_updateSwitchBypass:	
  4663                           ; 1 bytes @ 0x16
  4664                           
  4665  00B6                     ??_updateSwitchTap:	
  4666                           ; 1 bytes @ 0x16
  4667                           
  4668  00B6                     initSwitchBypass@initState:	
  4669                           ; 1 bytes @ 0x16
  4670                           
  4671                           
  4672                           ; 2 bytes @ 0x16
  4673  00B6                     	ds	1
  4674  00B7                     star_tactiles@iLed_1453:	
  4675                           
  4676                           ; 2 bytes @ 0x17
  4677  00B7                     	ds	1
  4678  00B8                     ___ftmul@f2:	
  4679                           
  4680                           ; 3 bytes @ 0x18
  4681  00B8                     	ds	1
  4682  00B9                     ??_showBootSequence:	
  4683                           
  4684                           ; 1 bytes @ 0x19
  4685  00B9                     	ds	2
  4686  00BB                     ??___ftmul:	
  4687                           
  4688                           ; 1 bytes @ 0x1B
  4689  00BB                     	ds	1
  4690  00BC                     updateSwitchTap@tapCntDivisor:	
  4691                           
  4692                           ; 2 bytes @ 0x1C
  4693  00BC                     	ds	2
  4694  00BE                     updateSwitchTap@iCnt:	
  4695                           
  4696                           ; 1 bytes @ 0x1E
  4697  00BE                     	ds	1
  4698  00BF                     ___ftmul@exp:	
  4699                           
  4700                           ; 1 bytes @ 0x1F
  4701  00BF                     	ds	1
  4702  00C0                     ___ftmul@f3_as_product:	
  4703                           
  4704                           ; 3 bytes @ 0x20
  4705  00C0                     	ds	3
  4706  00C3                     ___ftmul@cntr:	
  4707                           
  4708                           ; 1 bytes @ 0x23
  4709  00C3                     	ds	1
  4710  00C4                     ___ftmul@sign:	
  4711                           
  4712                           ; 1 bytes @ 0x24
  4713  00C4                     	ds	1
  4714  00C5                     ?___ftdiv:	
  4715  00C5                     ___ftdiv@f2:	
  4716                           ; 3 bytes @ 0x25
  4717                           
  4718                           
  4719                           ; 3 bytes @ 0x25
  4720  00C5                     	ds	3
  4721  00C8                     ___ftdiv@f1:	
  4722                           
  4723                           ; 3 bytes @ 0x28
  4724  00C8                     	ds	3
  4725  00CB                     ??___ftdiv:	
  4726                           
  4727                           ; 1 bytes @ 0x2B
  4728  00CB                     	ds	4
  4729  00CF                     ___ftdiv@cntr:	
  4730                           
  4731                           ; 1 bytes @ 0x2F
  4732  00CF                     	ds	1
  4733  00D0                     ___ftdiv@f3:	
  4734                           
  4735                           ; 3 bytes @ 0x30
  4736  00D0                     	ds	3
  4737  00D3                     ___ftdiv@exp:	
  4738                           
  4739                           ; 1 bytes @ 0x33
  4740  00D3                     	ds	1
  4741  00D4                     ___ftdiv@sign:	
  4742                           
  4743                           ; 1 bytes @ 0x34
  4744  00D4                     	ds	1
  4745  00D5                     ?_map:	
  4746  00D5                     map@x:	
  4747                           ; 3 bytes @ 0x35
  4748                           
  4749                           
  4750                           ; 3 bytes @ 0x35
  4751  00D5                     	ds	3
  4752  00D8                     map@in_min:	
  4753                           
  4754                           ; 3 bytes @ 0x38
  4755  00D8                     	ds	3
  4756  00DB                     map@in_max:	
  4757                           
  4758                           ; 3 bytes @ 0x3B
  4759  00DB                     	ds	3
  4760  00DE                     map@out_min:	
  4761                           
  4762                           ; 3 bytes @ 0x3E
  4763  00DE                     	ds	3
  4764  00E1                     map@out_max:	
  4765                           
  4766                           ; 3 bytes @ 0x41
  4767  00E1                     	ds	3
  4768  00E4                     ??_map:	
  4769  00E4                     _map$2157:	
  4770                           ; 1 bytes @ 0x44
  4771                           
  4772                           
  4773                           ; 3 bytes @ 0x44
  4774  00E4                     	ds	3
  4775  00E7                     ?___fttol:	
  4776  00E7                     ___fttol@f1:	
  4777                           ; 4 bytes @ 0x47
  4778                           
  4779                           
  4780                           ; 3 bytes @ 0x47
  4781  00E7                     	ds	4
  4782  00EB                     ??___fttol:	
  4783                           
  4784                           ; 1 bytes @ 0x4B
  4785  00EB                     	ds	4
  4786                           
  4787                           	psect	cstackCOMMON
  4788  0070                     __pcstackCOMMON:	
  4789  0070                     ?_ConfigureOscillator:	
  4790  0070                     ?_InitApp:	
  4791                           ; 1 bytes @ 0x0
  4792                           
  4793  0070                     ?_InitializeTaps:	
  4794                           ; 1 bytes @ 0x0
  4795                           
  4796  0070                     ?_initSwitchBypass:	
  4797                           ; 1 bytes @ 0x0
  4798                           
  4799  0070                     ?_ReadSavedSettings:	
  4800                           ; 1 bytes @ 0x0
  4801                           
  4802  0070                     ?_read_bottom_tactile:	
  4803                           ; 1 bytes @ 0x0
  4804                           
  4805  0070                     ?_read_top_tactile:	
  4806                           ; 1 bytes @ 0x0
  4807                           
  4808  0070                     ?_update_mode:	
  4809                           ; 1 bytes @ 0x0
  4810                           
  4811  0070                     ?_showBootSequence:	
  4812                           ; 1 bytes @ 0x0
  4813                           
  4814  0070                     ?_updateSwitchBypass:	
  4815                           ; 1 bytes @ 0x0
  4816                           
  4817  0070                     ?_updateSwitchTap:	
  4818                           ; 1 bytes @ 0x0
  4819                           
  4820  0070                     ?_init_adc:	
  4821                           ; 1 bytes @ 0x0
  4822                           
  4823  0070                     ?_init_pwm:	
  4824                           ; 1 bytes @ 0x0
  4825                           
  4826  0070                     ?_init_timer2:	
  4827                           ; 1 bytes @ 0x0
  4828                           
  4829  0070                     ?_init_timer0:	
  4830                           ; 1 bytes @ 0x0
  4831                           
  4832  0070                     ?_getCurrentLEDState:	
  4833                           ; 1 bytes @ 0x0
  4834                           
  4835  0070                     ?_star_tactiles:	
  4836                           ; 1 bytes @ 0x0
  4837                           
  4838  0070                     ?_solidring_tactiles:	
  4839                           ; 1 bytes @ 0x0
  4840                           
  4841  0070                     ?_restoreLEDState:	
  4842                           ; 1 bytes @ 0x0
  4843                           
  4844  0070                     ?_isr:	
  4845                           ; 1 bytes @ 0x0
  4846                           
  4847  0070                     ?_main:	
  4848                           ; 1 bytes @ 0x0
  4849                           
  4850  0070                     ?i1_set_leds_top:	
  4851                           ; 1 bytes @ 0x0
  4852                           
  4853  0070                     ?___awdiv:	
  4854                           ; 1 bytes @ 0x0
  4855                           
  4856  0070                     ?i1___lmul:	
  4857                           ; 2 bytes @ 0x0
  4858                           
  4859  0070                     ___awdiv@divisor:	
  4860                           ; 4 bytes @ 0x0
  4861                           
  4862  0070                     i1set_leds_top@x:	
  4863                           ; 2 bytes @ 0x0
  4864                           
  4865  0070                     i1___lmul@multiplier:	
  4866                           ; 2 bytes @ 0x0
  4867                           
  4868                           
  4869                           ; 4 bytes @ 0x0
  4870  0070                     	ds	2
  4871  0072                     ___awdiv@dividend:	
  4872  0072                     i1set_leds_top@ledState:	
  4873                           ; 2 bytes @ 0x2
  4874                           
  4875                           
  4876                           ; 2 bytes @ 0x2
  4877  0072                     	ds	2
  4878  0074                     ??___awdiv:	
  4879  0074                     ??i1_set_leds_top:	
  4880                           ; 1 bytes @ 0x4
  4881                           
  4882  0074                     i1___lmul@multiplicand:	
  4883                           ; 1 bytes @ 0x4
  4884                           
  4885                           
  4886                           ; 4 bytes @ 0x4
  4887  0074                     	ds	1
  4888  0075                     ___awdiv@counter:	
  4889                           
  4890                           ; 1 bytes @ 0x5
  4891  0075                     	ds	1
  4892  0076                     ___awdiv@sign:	
  4893                           
  4894                           ; 1 bytes @ 0x6
  4895  0076                     	ds	1
  4896  0077                     ___awdiv@quotient:	
  4897                           
  4898                           ; 2 bytes @ 0x7
  4899  0077                     	ds	1
  4900  0078                     ??i1___lmul:	
  4901  0078                     i1___lmul@product:	
  4902                           ; 1 bytes @ 0x8
  4903                           
  4904                           
  4905                           ; 4 bytes @ 0x8
  4906  0078                     	ds	4
  4907  007C                     ??i1___aldiv:	
  4908                           
  4909                           ; 1 bytes @ 0xC
  4910  007C                     	ds	1
  4911                           
  4912                           	psect	cstackBANK0
  4913  0020                     __pcstackBANK0:	
  4914  0020                     ?i1___aldiv:	
  4915  0020                     i1___aldiv@divisor:	
  4916                           ; 4 bytes @ 0x0
  4917                           
  4918                           
  4919                           ; 4 bytes @ 0x0
  4920  0020                     	ds	4
  4921  0024                     i1___aldiv@dividend:	
  4922                           
  4923                           ; 4 bytes @ 0x4
  4924  0024                     	ds	4
  4925  0028                     i1___aldiv@counter:	
  4926                           
  4927                           ; 1 bytes @ 0x8
  4928  0028                     	ds	1
  4929  0029                     i1___aldiv@sign:	
  4930                           
  4931                           ; 1 bytes @ 0x9
  4932  0029                     	ds	1
  4933  002A                     i1___aldiv@quotient:	
  4934                           
  4935                           ; 4 bytes @ 0xA
  4936  002A                     	ds	4
  4937  002E                     ?_modulation:	
  4938  002E                     modulation@x:	
  4939                           ; 4 bytes @ 0xE
  4940                           
  4941                           
  4942                           ; 4 bytes @ 0xE
  4943  002E                     	ds	4
  4944  0032                     modulation@y:	
  4945                           
  4946                           ; 4 bytes @ 0x12
  4947  0032                     	ds	4
  4948  0036                     ??_modulation:	
  4949                           
  4950                           ; 1 bytes @ 0x16
  4951  0036                     	ds	4
  4952  003A                     ??_isr:	
  4953                           
  4954                           ; 1 bytes @ 0x1A
  4955  003A                     	ds	9
  4956  0043                     isr@tmpSubDelay:	
  4957                           
  4958                           ; 2 bytes @ 0x23
  4959  0043                     	ds	2
  4960                           
  4961                           	psect	maintext
  4962  03DC                     __pmaintext:	
  4963 ;;
  4964 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4965 ;;
  4966 ;; *************** function _main *****************
  4967 ;; Defined at:
  4968 ;;		line 81 in file "main.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  i               2   20[BANK2 ] int 
  4973 ;;  i               2   18[BANK2 ] int 
  4974 ;; Return value:  Size  Location     Type
  4975 ;;                  1    wreg      void 
  4976 ;; Registers used:
  4977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4978 ;; Tracked objects:
  4979 ;;		On entry : B1F/0
  4980 ;;		On exit  : 0/0
  4981 ;;		Unchanged: 0/0
  4982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4984 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4985 ;;      Temps:          0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4986 ;;      Totals:         0       0       0       4      15       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4987 ;;Total ram usage:       19 bytes
  4988 ;; Hardware stack levels required when called:    7
  4989 ;; This function calls:
  4990 ;;		_ConfigureOscillator
  4991 ;;		_InitApp
  4992 ;;		_InitializeTaps
  4993 ;;		_ReadSavedSettings
  4994 ;;		___awtoft
  4995 ;;		___fttol
  4996 ;;		_adc_convert
  4997 ;;		_initSwitchBypass
  4998 ;;		_map
  4999 ;;		_read_bottom_tactile
  5000 ;;		_read_top_tactile
  5001 ;;		_set_subdivision
  5002 ;;		_showBootSequence
  5003 ;;		_updateSwitchBypass
  5004 ;;		_updateSwitchTap
  5005 ;;		_update_mode
  5006 ;; This function is called by:
  5007 ;;		Startup code after reset
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           
  5012                           ;psect for function _main
  5013  03DC                     _main:	
  5014                           
  5015                           ;main.c: 82: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5016                           
  5017                           ;incstack = 0
  5018                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5019  03DC  3028               	movlw	40
  5020  03DD  0023               	movlb	3	; select bank3
  5021  03DE  00E9               	movwf	_B25kLength^(0+384)
  5022  03DF  3000               	movlw	0
  5023  03E0  00EA               	movwf	(_B25kLength^(0+384)+1)
  5024                           
  5025                           ;main.c: 83: ConfigureOscillator();
  5026  03E1  319D  2575  3183   	fcall	_ConfigureOscillator
  5027                           
  5028                           ;main.c: 84: InitApp();
  5029  03E4  319F  2703  3183   	fcall	_InitApp
  5030                           
  5031                           ;main.c: 86: PORTEbits.RE0 = 1;
  5032  03E7  0020               	movlb	0	; select bank0
  5033  03E8  1410               	bsf	16,0	;volatile
  5034                           
  5035                           ;main.c: 87: PORTEbits.RE1 = 1;
  5036  03E9  1490               	bsf	16,1	;volatile
  5037                           
  5038                           ;main.c: 88: PORTDbits.RD6 = 1;
  5039  03EA  170F               	bsf	15,6	;volatile
  5040                           
  5041                           ;main.c: 89: PORTDbits.RD5 = 1;
  5042  03EB  168F               	bsf	15,5	;volatile
  5043                           
  5044                           ;main.c: 90: PORTCbits.RC0 = 1;
  5045  03EC  140E               	bsf	14,0	;volatile
  5046                           
  5047                           ;main.c: 91: PORTDbits.RD7 = 1;
  5048  03ED  178F               	bsf	15,7	;volatile
  5049                           
  5050                           ;main.c: 93: InitializeTaps();
  5051  03EE  3187  27D8  3183   	fcall	_InitializeTaps
  5052                           
  5053                           ;main.c: 94: initSwitchBypass();
  5054  03F1  319D  25B8  3183   	fcall	_initSwitchBypass
  5055                           
  5056                           ;main.c: 97: ReadSavedSettings();
  5057  03F4  3194  24B3  3183   	fcall	_ReadSavedSettings
  5058  03F7                     l5772:	
  5059                           ;main.c: 99: while (1) {
  5060                           
  5061                           
  5062                           ;main.c: 100: read_bottom_tactile();
  5063  03F7  3191  21C1  3183   	fcall	_read_bottom_tactile
  5064                           
  5065                           ;main.c: 101: read_top_tactile();
  5066  03FA  3192  229A  3183   	fcall	_read_top_tactile
  5067                           
  5068                           ;main.c: 104: update_mode();
  5069  03FD  3191  2180  3183   	fcall	_update_mode
  5070                           
  5071                           ;main.c: 106: if (PORTDbits.RD7 == 0) {
  5072  0400  0020               	movlb	0	; select bank0
  5073  0401  1B8F               	btfsc	15,7	;volatile
  5074  0402  2C1F               	goto	l5786
  5075                           
  5076                           ;main.c: 107: debounce_mode1++;
  5077  0403  3001               	movlw	1
  5078  0404  0023               	movlb	3	; select bank3
  5079  0405  07C8               	addwf	_debounce_mode1^(0+384),f
  5080  0406  3000               	movlw	0
  5081  0407  3DC9               	addwfc	(_debounce_mode1+1)^(0+384),f
  5082                           
  5083                           ;main.c: 108: if (debounce_mode1 > 25) {
  5084  0408  0849               	movf	(_debounce_mode1+1)^(0+384),w
  5085  0409  3A80               	xorlw	128
  5086  040A  00D4               	movwf	??_main^(0+384)
  5087  040B  3080               	movlw	128
  5088  040C  0254               	subwf	??_main^(0+384),w
  5089  040D  1D03               	skipz
  5090  040E  2C11               	goto	u6605
  5091  040F  301A               	movlw	26
  5092  0410  0248               	subwf	_debounce_mode1^(0+384),w
  5093  0411                     u6605:	
  5094  0411  1C03               	skipc
  5095  0412  2C22               	goto	l5788
  5096                           
  5097                           ;main.c: 109: debounce_mode1 = 25;
  5098  0413  3019               	movlw	25
  5099  0414  0023               	movlb	3	; select bank3
  5100  0415  00C8               	movwf	_debounce_mode1^(0+384)
  5101  0416  3000               	movlw	0
  5102  0417  00C9               	movwf	(_debounce_mode1^(0+384)+1)
  5103                           
  5104                           ;main.c: 113: showBootSequence();
  5105  0418  319E  26A9  3183   	fcall	_showBootSequence
  5106  041B                     l315:	
  5107                           ;main.c: 116: while (PORTDbits.RD7 == 0) {
  5108                           
  5109  041B  0020               	movlb	0	; select bank0
  5110  041C  1B8F               	btfsc	15,7	;volatile
  5111  041D  2C22               	goto	l5788
  5112  041E  2C1B               	goto	l315
  5113  041F                     l5786:	
  5114                           ;main.c: 117: }
  5115                           ;main.c: 118: }
  5116                           ;main.c: 119: } else {
  5117                           
  5118                           
  5119                           ;main.c: 120: debounce_mode1 = 0;
  5120  041F  0023               	movlb	3	; select bank3
  5121  0420  01C8               	clrf	_debounce_mode1^(0+384)
  5122  0421  01C9               	clrf	(_debounce_mode1+1)^(0+384)
  5123  0422                     l5788:	
  5124                           
  5125                           ;main.c: 121: }
  5126                           ;main.c: 123: updateSwitchBypass();
  5127  0422  3189  21BA  3183   	fcall	_updateSwitchBypass
  5128                           
  5129                           ;main.c: 124: updateSwitchTap();
  5130  0425  318B  239B  3183   	fcall	_updateSwitchTap
  5131                           
  5132                           ;main.c: 218: knob_1_pos = adc_convert(0);
  5133  0428  3000               	movlw	0
  5134  0429  319D  25EA  3183   	fcall	_adc_convert
  5135  042C  0021               	movlb	1	; select bank1
  5136  042D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5137  042E  0022               	movlb	2	; select bank2
  5138  042F  00A9               	movwf	(_knob_1_pos+1)^(0+256)
  5139  0430  0021               	movlb	1	; select bank1
  5140  0431  0820               	movf	?_adc_convert^(0+128),w
  5141  0432  0022               	movlb	2	; select bank2
  5142  0433  00A8               	movwf	_knob_1_pos^(0+256)
  5143                           
  5144                           ;main.c: 219: knob_2_pos = adc_convert(1);
  5145  0434  3001               	movlw	1
  5146  0435  319D  25EA  3183   	fcall	_adc_convert
  5147  0438  0021               	movlb	1	; select bank1
  5148  0439  0821               	movf	(?_adc_convert+1)^(0+128),w
  5149  043A  0022               	movlb	2	; select bank2
  5150  043B  00AB               	movwf	(_knob_2_pos+1)^(0+256)
  5151  043C  0021               	movlb	1	; select bank1
  5152  043D  0820               	movf	?_adc_convert^(0+128),w
  5153  043E  0022               	movlb	2	; select bank2
  5154  043F  00AA               	movwf	_knob_2_pos^(0+256)
  5155                           
  5156                           ;main.c: 220: knob_3_pos = adc_convert(2);
  5157  0440  3002               	movlw	2
  5158  0441  319D  25EA  3183   	fcall	_adc_convert
  5159  0444  0021               	movlb	1	; select bank1
  5160  0445  0821               	movf	(?_adc_convert+1)^(0+128),w
  5161  0446  0022               	movlb	2	; select bank2
  5162  0447  00AD               	movwf	(_knob_3_pos+1)^(0+256)
  5163  0448  0021               	movlb	1	; select bank1
  5164  0449  0820               	movf	?_adc_convert^(0+128),w
  5165  044A  0022               	movlb	2	; select bank2
  5166  044B  00AC               	movwf	_knob_3_pos^(0+256)
  5167                           
  5168                           ;main.c: 221: knob_4_pos = adc_convert(3);
  5169  044C  3003               	movlw	3
  5170  044D  319D  25EA  3183   	fcall	_adc_convert
  5171  0450  0021               	movlb	1	; select bank1
  5172  0451  0821               	movf	(?_adc_convert+1)^(0+128),w
  5173  0452  0022               	movlb	2	; select bank2
  5174  0453  00AF               	movwf	(_knob_4_pos+1)^(0+256)
  5175  0454  0021               	movlb	1	; select bank1
  5176  0455  0820               	movf	?_adc_convert^(0+128),w
  5177  0456  0022               	movlb	2	; select bank2
  5178  0457  00AE               	movwf	_knob_4_pos^(0+256)
  5179                           
  5180                           ;main.c: 222: knob_5_pos = adc_convert(4);
  5181  0458  3004               	movlw	4
  5182  0459  319D  25EA  3183   	fcall	_adc_convert
  5183  045C  0021               	movlb	1	; select bank1
  5184  045D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5185  045E  0022               	movlb	2	; select bank2
  5186  045F  00B1               	movwf	(_knob_5_pos+1)^(0+256)
  5187  0460  0021               	movlb	1	; select bank1
  5188  0461  0820               	movf	?_adc_convert^(0+128),w
  5189  0462  0022               	movlb	2	; select bank2
  5190  0463  00B0               	movwf	_knob_5_pos^(0+256)
  5191                           
  5192                           ;main.c: 249: LATBbits.LATB1 = 0;
  5193  0464  108D               	bcf	13,1	;volatile
  5194                           
  5195                           ;main.c: 250: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5196  0465  0957               	comf	_knob1_prev^(0+256),w	;volatile
  5197  0466  0023               	movlb	3	; select bank3
  5198  0467  00D4               	movwf	??_main^(0+384)
  5199  0468  0022               	movlb	2	; select bank2
  5200  0469  0958               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5201  046A  0023               	movlb	3	; select bank3
  5202  046B  00D5               	movwf	(??_main^(0+384)+1)
  5203  046C  0AD4               	incf	??_main^(0+384),f
  5204  046D  1903               	skipnz
  5205  046E  0AD5               	incf	(??_main^(0+384)+1),f
  5206  046F  0022               	movlb	2	; select bank2
  5207  0470  0828               	movf	_knob_1_pos^(0+256),w
  5208  0471  0023               	movlb	3	; select bank3
  5209  0472  0754               	addwf	??_main^(0+384),w
  5210  0473  00D6               	movwf	(??_main+2)^(0+384)
  5211  0474  0022               	movlb	2	; select bank2
  5212  0475  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5213  0476  0023               	movlb	3	; select bank3
  5214  0477  3D55               	addwfc	(??_main+1)^(0+384),w
  5215  0478  00D7               	movwf	(??_main+3)^(0+384)
  5216  0479  0857               	movf	(??_main+3)^(0+384),w
  5217  047A  3A80               	xorlw	128
  5218  047B  00D8               	movwf	(??_main+4)^(0+384)
  5219  047C  3080               	movlw	128
  5220  047D  0258               	subwf	(??_main+4)^(0+384),w
  5221  047E  1D03               	skipz
  5222  047F  2C82               	goto	u6625
  5223  0480  3004               	movlw	4
  5224  0481  0256               	subwf	(??_main+2)^(0+384),w
  5225  0482                     u6625:	
  5226  0482  1803               	skipnc
  5227  0483  2CA4               	goto	l5808
  5228  0484  0022               	movlb	2	; select bank2
  5229  0485  0957               	comf	_knob1_prev^(0+256),w	;volatile
  5230  0486  0023               	movlb	3	; select bank3
  5231  0487  00D4               	movwf	??_main^(0+384)
  5232  0488  0022               	movlb	2	; select bank2
  5233  0489  0958               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5234  048A  0023               	movlb	3	; select bank3
  5235  048B  00D5               	movwf	(??_main^(0+384)+1)
  5236  048C  0AD4               	incf	??_main^(0+384),f
  5237  048D  1903               	skipnz
  5238  048E  0AD5               	incf	(??_main^(0+384)+1),f
  5239  048F  0022               	movlb	2	; select bank2
  5240  0490  0828               	movf	_knob_1_pos^(0+256),w
  5241  0491  0023               	movlb	3	; select bank3
  5242  0492  0754               	addwf	??_main^(0+384),w
  5243  0493  00D6               	movwf	(??_main+2)^(0+384)
  5244  0494  0022               	movlb	2	; select bank2
  5245  0495  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5246  0496  0023               	movlb	3	; select bank3
  5247  0497  3D55               	addwfc	(??_main+1)^(0+384),w
  5248  0498  00D7               	movwf	(??_main+3)^(0+384)
  5249  0499  0857               	movf	(??_main+3)^(0+384),w
  5250  049A  3A80               	xorlw	128
  5251  049B  00D8               	movwf	(??_main+4)^(0+384)
  5252  049C  307F               	movlw	127
  5253  049D  0258               	subwf	(??_main+4)^(0+384),w
  5254  049E  1D03               	skipz
  5255  049F  2CA2               	goto	u6635
  5256  04A0  30FD               	movlw	253
  5257  04A1  0256               	subwf	(??_main+2)^(0+384),w
  5258  04A2                     u6635:	
  5259  04A2  1803               	skipnc
  5260  04A3  2CF8               	goto	l5816
  5261  04A4                     l5808:	
  5262                           
  5263                           ;main.c: 251: knob1_prev = knob_1_pos;
  5264  04A4  0022               	movlb	2	; select bank2
  5265  04A5  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5266  04A6  00D8               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5267  04A7  0828               	movf	_knob_1_pos^(0+256),w
  5268  04A8  00D7               	movwf	_knob1_prev^(0+256)	;volatile
  5269                           
  5270                           ;main.c: 252: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5271  04A9  3000               	movlw	0
  5272  04AA  0021               	movlb	1	; select bank1
  5273  04AB  00E1               	movwf	map@out_max^(0+128)
  5274  04AC  3048               	movlw	72
  5275  04AD  00E2               	movwf	(map@out_max+1)^(0+128)
  5276  04AE  3043               	movlw	67
  5277  04AF  00E3               	movwf	(map@out_max+2)^(0+128)
  5278  04B0  3080               	movlw	128
  5279  04B1  00DE               	movwf	map@out_min^(0+128)
  5280  04B2  3092               	movlw	146
  5281  04B3  00DF               	movwf	(map@out_min+1)^(0+128)
  5282  04B4  3044               	movlw	68
  5283  04B5  00E0               	movwf	(map@out_min+2)^(0+128)
  5284  04B6  30C0               	movlw	192
  5285  04B7  00DB               	movwf	map@in_max^(0+128)
  5286  04B8  307F               	movlw	127
  5287  04B9  00DC               	movwf	(map@in_max+1)^(0+128)
  5288  04BA  3044               	movlw	68
  5289  04BB  00DD               	movwf	(map@in_max+2)^(0+128)
  5290  04BC  3000               	movlw	0
  5291  04BD  00D8               	movwf	map@in_min^(0+128)
  5292  04BE  3000               	movlw	0
  5293  04BF  00D9               	movwf	(map@in_min+1)^(0+128)
  5294  04C0  3000               	movlw	0
  5295  04C1  00DA               	movwf	(map@in_min+2)^(0+128)
  5296  04C2  0022               	movlb	2	; select bank2
  5297  04C3  0858               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5298  04C4  0021               	movlb	1	; select bank1
  5299  04C5  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5300  04C6  0022               	movlb	2	; select bank2
  5301  04C7  0857               	movf	_knob1_prev^(0+256),w	;volatile
  5302  04C8  0021               	movlb	1	; select bank1
  5303  04C9  00A8               	movwf	___awtoft@c^(0+128)
  5304  04CA  319E  2687  3183   	fcall	___awtoft
  5305  04CD  0021               	movlb	1	; select bank1
  5306  04CE  0828               	movf	?___awtoft^(0+128),w
  5307  04CF  00D5               	movwf	map@x^(0+128)
  5308  04D0  0829               	movf	(?___awtoft+1)^(0+128),w
  5309  04D1  00D6               	movwf	(map@x+1)^(0+128)
  5310  04D2  082A               	movf	(?___awtoft+2)^(0+128),w
  5311  04D3  00D7               	movwf	(map@x+2)^(0+128)
  5312  04D4  3196  262D  3183   	fcall	_map
  5313  04D7  0021               	movlb	1	; select bank1
  5314  04D8  0855               	movf	?_map^(0+128),w
  5315  04D9  00E7               	movwf	___fttol@f1^(0+128)
  5316  04DA  0856               	movf	(?_map+1)^(0+128),w
  5317  04DB  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5318  04DC  0857               	movf	(?_map+2)^(0+128),w
  5319  04DD  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5320  04DE  3196  26B8  3183   	fcall	___fttol
  5321  04E1  0021               	movlb	1	; select bank1
  5322  04E2  086A               	movf	(?___fttol+3)^(0+128),w
  5323  04E3  0020               	movlb	0	; select bank0
  5324  04E4  00DB               	movwf	_baseline_delay_time+3	;volatile
  5325  04E5  0021               	movlb	1	; select bank1
  5326  04E6  0869               	movf	(?___fttol+2)^(0+128),w
  5327  04E7  0020               	movlb	0	; select bank0
  5328  04E8  00DA               	movwf	_baseline_delay_time+2	;volatile
  5329  04E9  0021               	movlb	1	; select bank1
  5330  04EA  0868               	movf	(?___fttol+1)^(0+128),w
  5331  04EB  0020               	movlb	0	; select bank0
  5332  04EC  00D9               	movwf	_baseline_delay_time+1	;volatile
  5333  04ED  0021               	movlb	1	; select bank1
  5334  04EE  0867               	movf	?___fttol^(0+128),w
  5335  04EF  0020               	movlb	0	; select bank0
  5336  04F0  00D8               	movwf	_baseline_delay_time	;volatile
  5337                           
  5338                           ;main.c: 253: delay_time_changed = 1;
  5339  04F1  3001               	movlw	1
  5340  04F2  0023               	movlb	3	; select bank3
  5341  04F3  00E3               	movwf	_delay_time_changed^(0+384)
  5342  04F4  3000               	movlw	0
  5343  04F5  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  5344                           
  5345                           ;main.c: 254: LATBbits.LATB1 = 1;
  5346  04F6  0022               	movlb	2	; select bank2
  5347  04F7  148D               	bsf	13,1	;volatile
  5348  04F8                     l5816:	
  5349                           
  5350                           ;main.c: 255: }
  5351                           ;main.c: 265: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5352  04F8  0022               	movlb	2	; select bank2
  5353  04F9  0959               	comf	_knob2_prev^(0+256),w	;volatile
  5354  04FA  0023               	movlb	3	; select bank3
  5355  04FB  00D4               	movwf	??_main^(0+384)
  5356  04FC  0022               	movlb	2	; select bank2
  5357  04FD  095A               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5358  04FE  0023               	movlb	3	; select bank3
  5359  04FF  00D5               	movwf	(??_main^(0+384)+1)
  5360  0500  0AD4               	incf	??_main^(0+384),f
  5361  0501  1903               	skipnz
  5362  0502  0AD5               	incf	(??_main^(0+384)+1),f
  5363  0503  0022               	movlb	2	; select bank2
  5364  0504  082A               	movf	_knob_2_pos^(0+256),w
  5365  0505  0023               	movlb	3	; select bank3
  5366  0506  0754               	addwf	??_main^(0+384),w
  5367  0507  00D6               	movwf	(??_main+2)^(0+384)
  5368  0508  0022               	movlb	2	; select bank2
  5369  0509  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5370  050A  0023               	movlb	3	; select bank3
  5371  050B  3D55               	addwfc	(??_main+1)^(0+384),w
  5372  050C  00D7               	movwf	(??_main+3)^(0+384)
  5373  050D  0857               	movf	(??_main+3)^(0+384),w
  5374  050E  3A80               	xorlw	128
  5375  050F  00D8               	movwf	(??_main+4)^(0+384)
  5376  0510  3080               	movlw	128
  5377  0511  0258               	subwf	(??_main+4)^(0+384),w
  5378  0512  1D03               	skipz
  5379  0513  2D16               	goto	u6645
  5380  0514  3004               	movlw	4
  5381  0515  0256               	subwf	(??_main+2)^(0+384),w
  5382  0516                     u6645:	
  5383  0516  1803               	skipnc
  5384  0517  2D38               	goto	l5820
  5385  0518  0022               	movlb	2	; select bank2
  5386  0519  0959               	comf	_knob2_prev^(0+256),w	;volatile
  5387  051A  0023               	movlb	3	; select bank3
  5388  051B  00D4               	movwf	??_main^(0+384)
  5389  051C  0022               	movlb	2	; select bank2
  5390  051D  095A               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5391  051E  0023               	movlb	3	; select bank3
  5392  051F  00D5               	movwf	(??_main^(0+384)+1)
  5393  0520  0AD4               	incf	??_main^(0+384),f
  5394  0521  1903               	skipnz
  5395  0522  0AD5               	incf	(??_main^(0+384)+1),f
  5396  0523  0022               	movlb	2	; select bank2
  5397  0524  082A               	movf	_knob_2_pos^(0+256),w
  5398  0525  0023               	movlb	3	; select bank3
  5399  0526  0754               	addwf	??_main^(0+384),w
  5400  0527  00D6               	movwf	(??_main+2)^(0+384)
  5401  0528  0022               	movlb	2	; select bank2
  5402  0529  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5403  052A  0023               	movlb	3	; select bank3
  5404  052B  3D55               	addwfc	(??_main+1)^(0+384),w
  5405  052C  00D7               	movwf	(??_main+3)^(0+384)
  5406  052D  0857               	movf	(??_main+3)^(0+384),w
  5407  052E  3A80               	xorlw	128
  5408  052F  00D8               	movwf	(??_main+4)^(0+384)
  5409  0530  307F               	movlw	127
  5410  0531  0258               	subwf	(??_main+4)^(0+384),w
  5411  0532  1D03               	skipz
  5412  0533  2D36               	goto	u6655
  5413  0534  30FD               	movlw	253
  5414  0535  0256               	subwf	(??_main+2)^(0+384),w
  5415  0536                     u6655:	
  5416  0536  1803               	skipnc
  5417  0537  2D98               	goto	l5828
  5418  0538                     l5820:	
  5419                           
  5420                           ;main.c: 266: knob2_prev = knob_2_pos;
  5421  0538  0022               	movlb	2	; select bank2
  5422  0539  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5423  053A  00DA               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5424  053B  082A               	movf	_knob_2_pos^(0+256),w
  5425  053C  00D9               	movwf	_knob2_prev^(0+256)	;volatile
  5426                           
  5427                           ;main.c: 267: int i = map(knob2_prev, 0, 1023, 0, 39);
  5428  053D  3000               	movlw	0
  5429  053E  0021               	movlb	1	; select bank1
  5430  053F  00E1               	movwf	map@out_max^(0+128)
  5431  0540  301C               	movlw	28
  5432  0541  00E2               	movwf	(map@out_max+1)^(0+128)
  5433  0542  3042               	movlw	66
  5434  0543  00E3               	movwf	(map@out_max+2)^(0+128)
  5435  0544  3000               	movlw	0
  5436  0545  00DE               	movwf	map@out_min^(0+128)
  5437  0546  3000               	movlw	0
  5438  0547  00DF               	movwf	(map@out_min+1)^(0+128)
  5439  0548  3000               	movlw	0
  5440  0549  00E0               	movwf	(map@out_min+2)^(0+128)
  5441  054A  30C0               	movlw	192
  5442  054B  00DB               	movwf	map@in_max^(0+128)
  5443  054C  307F               	movlw	127
  5444  054D  00DC               	movwf	(map@in_max+1)^(0+128)
  5445  054E  3044               	movlw	68
  5446  054F  00DD               	movwf	(map@in_max+2)^(0+128)
  5447  0550  3000               	movlw	0
  5448  0551  00D8               	movwf	map@in_min^(0+128)
  5449  0552  3000               	movlw	0
  5450  0553  00D9               	movwf	(map@in_min+1)^(0+128)
  5451  0554  3000               	movlw	0
  5452  0555  00DA               	movwf	(map@in_min+2)^(0+128)
  5453  0556  0022               	movlb	2	; select bank2
  5454  0557  085A               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5455  0558  0021               	movlb	1	; select bank1
  5456  0559  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5457  055A  0022               	movlb	2	; select bank2
  5458  055B  0859               	movf	_knob2_prev^(0+256),w	;volatile
  5459  055C  0021               	movlb	1	; select bank1
  5460  055D  00A8               	movwf	___awtoft@c^(0+128)
  5461  055E  319E  2687  3183   	fcall	___awtoft
  5462  0561  0021               	movlb	1	; select bank1
  5463  0562  0828               	movf	?___awtoft^(0+128),w
  5464  0563  00D5               	movwf	map@x^(0+128)
  5465  0564  0829               	movf	(?___awtoft+1)^(0+128),w
  5466  0565  00D6               	movwf	(map@x+1)^(0+128)
  5467  0566  082A               	movf	(?___awtoft+2)^(0+128),w
  5468  0567  00D7               	movwf	(map@x+2)^(0+128)
  5469  0568  3196  262D  3183   	fcall	_map
  5470  056B  0021               	movlb	1	; select bank1
  5471  056C  0855               	movf	?_map^(0+128),w
  5472  056D  00E7               	movwf	___fttol@f1^(0+128)
  5473  056E  0856               	movf	(?_map+1)^(0+128),w
  5474  056F  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5475  0570  0857               	movf	(?_map+2)^(0+128),w
  5476  0571  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5477  0572  3196  26B8  3183   	fcall	___fttol
  5478  0575  0021               	movlb	1	; select bank1
  5479  0576  0868               	movf	(?___fttol^(0+128)+1),w
  5480  0577  0022               	movlb	2	; select bank2
  5481  0578  00D2               	movwf	(main@i+1)^(0+256)
  5482  0579  0021               	movlb	1	; select bank1
  5483  057A  0867               	movf	?___fttol^(0+128),w
  5484  057B  0022               	movlb	2	; select bank2
  5485  057C  00D1               	movwf	main@i^(0+256)
  5486                           
  5487                           ;main.c: 268: CCPR2 = B25k[B25kLength - 1 - i];
  5488  057D  0851               	movf	main@i^(0+256),w
  5489  057E  3E01               	addlw	1
  5490  057F  3AFF               	xorlw	255
  5491  0580  3E01               	addlw	1
  5492  0581  0023               	movlb	3	; select bank3
  5493  0582  0769               	addwf	_B25kLength^(0+384),w
  5494  0583  0709               	addwf	9,w
  5495  0584  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5496  0585  0086               	movwf	6
  5497  0586  3002               	movlw	2	; select bank5/6
  5498  0587  0087               	movwf	7
  5499  0588  3F40               	moviw [0]fsr1
  5500  0589  0025               	movlb	5	; select bank5
  5501  058A  0098               	movwf	24	;volatile
  5502  058B  3F41               	moviw [1]fsr1
  5503  058C  0099               	movwf	25	;volatile
  5504                           
  5505                           ;main.c: 269: CCPR3 = B25k[i];
  5506  058D  0022               	movlb	2	; select bank2
  5507  058E  3551               	lslf	main@i^(0+256),w
  5508  058F  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5509  0590  0086               	movwf	6
  5510  0591  3002               	movlw	2	; select bank5/6
  5511  0592  0087               	movwf	7
  5512  0593  3F40               	moviw [0]fsr1
  5513  0594  0026               	movlb	6	; select bank6
  5514  0595  0091               	movwf	17	;volatile
  5515  0596  3F41               	moviw [1]fsr1
  5516  0597  0092               	movwf	18	;volatile
  5517  0598                     l5828:	
  5518                           
  5519                           ;main.c: 270: }
  5520                           ;main.c: 280: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5521  0598  0022               	movlb	2	; select bank2
  5522  0599  095B               	comf	_knob3_prev^(0+256),w	;volatile
  5523  059A  0023               	movlb	3	; select bank3
  5524  059B  00D4               	movwf	??_main^(0+384)
  5525  059C  0022               	movlb	2	; select bank2
  5526  059D  095C               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5527  059E  0023               	movlb	3	; select bank3
  5528  059F  00D5               	movwf	(??_main^(0+384)+1)
  5529  05A0  0AD4               	incf	??_main^(0+384),f
  5530  05A1  1903               	skipnz
  5531  05A2  0AD5               	incf	(??_main^(0+384)+1),f
  5532  05A3  0022               	movlb	2	; select bank2
  5533  05A4  082C               	movf	_knob_3_pos^(0+256),w
  5534  05A5  0023               	movlb	3	; select bank3
  5535  05A6  0754               	addwf	??_main^(0+384),w
  5536  05A7  00D6               	movwf	(??_main+2)^(0+384)
  5537  05A8  0022               	movlb	2	; select bank2
  5538  05A9  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5539  05AA  0023               	movlb	3	; select bank3
  5540  05AB  3D55               	addwfc	(??_main+1)^(0+384),w
  5541  05AC  00D7               	movwf	(??_main+3)^(0+384)
  5542  05AD  0857               	movf	(??_main+3)^(0+384),w
  5543  05AE  3A80               	xorlw	128
  5544  05AF  00D8               	movwf	(??_main+4)^(0+384)
  5545  05B0  3080               	movlw	128
  5546  05B1  0258               	subwf	(??_main+4)^(0+384),w
  5547  05B2  1D03               	skipz
  5548  05B3  2DB6               	goto	u6665
  5549  05B4  3004               	movlw	4
  5550  05B5  0256               	subwf	(??_main+2)^(0+384),w
  5551  05B6                     u6665:	
  5552  05B6  1803               	skipnc
  5553  05B7  2DD8               	goto	l5832
  5554  05B8  0022               	movlb	2	; select bank2
  5555  05B9  095B               	comf	_knob3_prev^(0+256),w	;volatile
  5556  05BA  0023               	movlb	3	; select bank3
  5557  05BB  00D4               	movwf	??_main^(0+384)
  5558  05BC  0022               	movlb	2	; select bank2
  5559  05BD  095C               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5560  05BE  0023               	movlb	3	; select bank3
  5561  05BF  00D5               	movwf	(??_main^(0+384)+1)
  5562  05C0  0AD4               	incf	??_main^(0+384),f
  5563  05C1  1903               	skipnz
  5564  05C2  0AD5               	incf	(??_main^(0+384)+1),f
  5565  05C3  0022               	movlb	2	; select bank2
  5566  05C4  082C               	movf	_knob_3_pos^(0+256),w
  5567  05C5  0023               	movlb	3	; select bank3
  5568  05C6  0754               	addwf	??_main^(0+384),w
  5569  05C7  00D6               	movwf	(??_main+2)^(0+384)
  5570  05C8  0022               	movlb	2	; select bank2
  5571  05C9  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5572  05CA  0023               	movlb	3	; select bank3
  5573  05CB  3D55               	addwfc	(??_main+1)^(0+384),w
  5574  05CC  00D7               	movwf	(??_main+3)^(0+384)
  5575  05CD  0857               	movf	(??_main+3)^(0+384),w
  5576  05CE  3A80               	xorlw	128
  5577  05CF  00D8               	movwf	(??_main+4)^(0+384)
  5578  05D0  307F               	movlw	127
  5579  05D1  0258               	subwf	(??_main+4)^(0+384),w
  5580  05D2  1D03               	skipz
  5581  05D3  2DD6               	goto	u6675
  5582  05D4  30FD               	movlw	253
  5583  05D5  0256               	subwf	(??_main+2)^(0+384),w
  5584  05D6                     u6675:	
  5585  05D6  1803               	skipnc
  5586  05D7  2E38               	goto	l5840
  5587  05D8                     l5832:	
  5588                           
  5589                           ;main.c: 281: knob3_prev = knob_3_pos;
  5590  05D8  0022               	movlb	2	; select bank2
  5591  05D9  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5592  05DA  00DC               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5593  05DB  082C               	movf	_knob_3_pos^(0+256),w
  5594  05DC  00DB               	movwf	_knob3_prev^(0+256)	;volatile
  5595                           
  5596                           ;main.c: 282: int i = map(knob3_prev, 0, 1023, 16, 0);
  5597  05DD  3000               	movlw	0
  5598  05DE  0021               	movlb	1	; select bank1
  5599  05DF  00E1               	movwf	map@out_max^(0+128)
  5600  05E0  3000               	movlw	0
  5601  05E1  00E2               	movwf	(map@out_max+1)^(0+128)
  5602  05E2  3000               	movlw	0
  5603  05E3  00E3               	movwf	(map@out_max+2)^(0+128)
  5604  05E4  3000               	movlw	0
  5605  05E5  00DE               	movwf	map@out_min^(0+128)
  5606  05E6  3080               	movlw	128
  5607  05E7  00DF               	movwf	(map@out_min+1)^(0+128)
  5608  05E8  3041               	movlw	65
  5609  05E9  00E0               	movwf	(map@out_min+2)^(0+128)
  5610  05EA  30C0               	movlw	192
  5611  05EB  00DB               	movwf	map@in_max^(0+128)
  5612  05EC  307F               	movlw	127
  5613  05ED  00DC               	movwf	(map@in_max+1)^(0+128)
  5614  05EE  3044               	movlw	68
  5615  05EF  00DD               	movwf	(map@in_max+2)^(0+128)
  5616  05F0  3000               	movlw	0
  5617  05F1  00D8               	movwf	map@in_min^(0+128)
  5618  05F2  3000               	movlw	0
  5619  05F3  00D9               	movwf	(map@in_min+1)^(0+128)
  5620  05F4  3000               	movlw	0
  5621  05F5  00DA               	movwf	(map@in_min+2)^(0+128)
  5622  05F6  0022               	movlb	2	; select bank2
  5623  05F7  085C               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5624  05F8  0021               	movlb	1	; select bank1
  5625  05F9  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5626  05FA  0022               	movlb	2	; select bank2
  5627  05FB  085B               	movf	_knob3_prev^(0+256),w	;volatile
  5628  05FC  0021               	movlb	1	; select bank1
  5629  05FD  00A8               	movwf	___awtoft@c^(0+128)
  5630  05FE  319E  2687  3183   	fcall	___awtoft
  5631  0601  0021               	movlb	1	; select bank1
  5632  0602  0828               	movf	?___awtoft^(0+128),w
  5633  0603  00D5               	movwf	map@x^(0+128)
  5634  0604  0829               	movf	(?___awtoft+1)^(0+128),w
  5635  0605  00D6               	movwf	(map@x+1)^(0+128)
  5636  0606  082A               	movf	(?___awtoft+2)^(0+128),w
  5637  0607  00D7               	movwf	(map@x+2)^(0+128)
  5638  0608  3196  262D  3183   	fcall	_map
  5639  060B  0021               	movlb	1	; select bank1
  5640  060C  0855               	movf	?_map^(0+128),w
  5641  060D  00E7               	movwf	___fttol@f1^(0+128)
  5642  060E  0856               	movf	(?_map+1)^(0+128),w
  5643  060F  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5644  0610  0857               	movf	(?_map+2)^(0+128),w
  5645  0611  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5646  0612  3196  26B8  3183   	fcall	___fttol
  5647  0615  0021               	movlb	1	; select bank1
  5648  0616  0868               	movf	(?___fttol^(0+128)+1),w
  5649  0617  0022               	movlb	2	; select bank2
  5650  0618  00D4               	movwf	(main@i_391+1)^(0+256)
  5651  0619  0021               	movlb	1	; select bank1
  5652  061A  0867               	movf	?___fttol^(0+128),w
  5653  061B  0022               	movlb	2	; select bank2
  5654  061C  00D3               	movwf	main@i_391^(0+256)
  5655                           
  5656                           ;main.c: 283: CCPR4 = B25k[B25kLength - 1 - i];
  5657  061D  0853               	movf	main@i_391^(0+256),w
  5658  061E  3E01               	addlw	1
  5659  061F  3AFF               	xorlw	255
  5660  0620  3E01               	addlw	1
  5661  0621  0023               	movlb	3	; select bank3
  5662  0622  0769               	addwf	_B25kLength^(0+384),w
  5663  0623  0709               	addwf	9,w
  5664  0624  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5665  0625  0086               	movwf	6
  5666  0626  3002               	movlw	2	; select bank5/6
  5667  0627  0087               	movwf	7
  5668  0628  3F40               	moviw [0]fsr1
  5669  0629  0026               	movlb	6	; select bank6
  5670  062A  0098               	movwf	24	;volatile
  5671  062B  3F41               	moviw [1]fsr1
  5672  062C  0099               	movwf	25	;volatile
  5673                           
  5674                           ;main.c: 284: CCPR5 = B25k[i];
  5675  062D  0022               	movlb	2	; select bank2
  5676  062E  3553               	lslf	main@i_391^(0+256),w
  5677  062F  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5678  0630  0086               	movwf	6
  5679  0631  3002               	movlw	2	; select bank5/6
  5680  0632  0087               	movwf	7
  5681  0633  3F40               	moviw [0]fsr1
  5682  0634  0026               	movlb	6	; select bank6
  5683  0635  009C               	movwf	28	;volatile
  5684  0636  3F41               	moviw [1]fsr1
  5685  0637  009D               	movwf	29	;volatile
  5686  0638                     l5840:	
  5687                           
  5688                           ;main.c: 285: }
  5689                           ;main.c: 295: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5690  0638  0022               	movlb	2	; select bank2
  5691  0639  095D               	comf	_knob4_prev^(0+256),w	;volatile
  5692  063A  0023               	movlb	3	; select bank3
  5693  063B  00D4               	movwf	??_main^(0+384)
  5694  063C  0022               	movlb	2	; select bank2
  5695  063D  095E               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5696  063E  0023               	movlb	3	; select bank3
  5697  063F  00D5               	movwf	(??_main^(0+384)+1)
  5698  0640  0AD4               	incf	??_main^(0+384),f
  5699  0641  1903               	skipnz
  5700  0642  0AD5               	incf	(??_main^(0+384)+1),f
  5701  0643  0022               	movlb	2	; select bank2
  5702  0644  082E               	movf	_knob_4_pos^(0+256),w
  5703  0645  0023               	movlb	3	; select bank3
  5704  0646  0754               	addwf	??_main^(0+384),w
  5705  0647  00D6               	movwf	(??_main+2)^(0+384)
  5706  0648  0022               	movlb	2	; select bank2
  5707  0649  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5708  064A  0023               	movlb	3	; select bank3
  5709  064B  3D55               	addwfc	(??_main+1)^(0+384),w
  5710  064C  00D7               	movwf	(??_main+3)^(0+384)
  5711  064D  0857               	movf	(??_main+3)^(0+384),w
  5712  064E  3A80               	xorlw	128
  5713  064F  00D8               	movwf	(??_main+4)^(0+384)
  5714  0650  3080               	movlw	128
  5715  0651  0258               	subwf	(??_main+4)^(0+384),w
  5716  0652  1D03               	skipz
  5717  0653  2E56               	goto	u6685
  5718  0654  3004               	movlw	4
  5719  0655  0256               	subwf	(??_main+2)^(0+384),w
  5720  0656                     u6685:	
  5721  0656  1803               	skipnc
  5722  0657  2E78               	goto	l5844
  5723  0658  0022               	movlb	2	; select bank2
  5724  0659  095D               	comf	_knob4_prev^(0+256),w	;volatile
  5725  065A  0023               	movlb	3	; select bank3
  5726  065B  00D4               	movwf	??_main^(0+384)
  5727  065C  0022               	movlb	2	; select bank2
  5728  065D  095E               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5729  065E  0023               	movlb	3	; select bank3
  5730  065F  00D5               	movwf	(??_main^(0+384)+1)
  5731  0660  0AD4               	incf	??_main^(0+384),f
  5732  0661  1903               	skipnz
  5733  0662  0AD5               	incf	(??_main^(0+384)+1),f
  5734  0663  0022               	movlb	2	; select bank2
  5735  0664  082E               	movf	_knob_4_pos^(0+256),w
  5736  0665  0023               	movlb	3	; select bank3
  5737  0666  0754               	addwf	??_main^(0+384),w
  5738  0667  00D6               	movwf	(??_main+2)^(0+384)
  5739  0668  0022               	movlb	2	; select bank2
  5740  0669  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5741  066A  0023               	movlb	3	; select bank3
  5742  066B  3D55               	addwfc	(??_main+1)^(0+384),w
  5743  066C  00D7               	movwf	(??_main+3)^(0+384)
  5744  066D  0857               	movf	(??_main+3)^(0+384),w
  5745  066E  3A80               	xorlw	128
  5746  066F  00D8               	movwf	(??_main+4)^(0+384)
  5747  0670  307F               	movlw	127
  5748  0671  0258               	subwf	(??_main+4)^(0+384),w
  5749  0672  1D03               	skipz
  5750  0673  2E76               	goto	u6695
  5751  0674  30FD               	movlw	253
  5752  0675  0256               	subwf	(??_main+2)^(0+384),w
  5753  0676                     u6695:	
  5754  0676  1803               	skipnc
  5755  0677  2EBD               	goto	l5848
  5756  0678                     l5844:	
  5757                           
  5758                           ;main.c: 296: knob4_prev = knob_4_pos;
  5759  0678  0022               	movlb	2	; select bank2
  5760  0679  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5761  067A  00DE               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5762  067B  082E               	movf	_knob_4_pos^(0+256),w
  5763  067C  00DD               	movwf	_knob4_prev^(0+256)	;volatile
  5764                           
  5765                           ;main.c: 298: mod_delay_time = map(knob4_prev, 0, 1023, 3, 47);
  5766  067D  3000               	movlw	0
  5767  067E  0021               	movlb	1	; select bank1
  5768  067F  00E1               	movwf	map@out_max^(0+128)
  5769  0680  303C               	movlw	60
  5770  0681  00E2               	movwf	(map@out_max+1)^(0+128)
  5771  0682  3042               	movlw	66
  5772  0683  00E3               	movwf	(map@out_max+2)^(0+128)
  5773  0684  3000               	movlw	0
  5774  0685  00DE               	movwf	map@out_min^(0+128)
  5775  0686  3040               	movlw	64
  5776  0687  00DF               	movwf	(map@out_min+1)^(0+128)
  5777  0688  3040               	movlw	64
  5778  0689  00E0               	movwf	(map@out_min+2)^(0+128)
  5779  068A  30C0               	movlw	192
  5780  068B  00DB               	movwf	map@in_max^(0+128)
  5781  068C  307F               	movlw	127
  5782  068D  00DC               	movwf	(map@in_max+1)^(0+128)
  5783  068E  3044               	movlw	68
  5784  068F  00DD               	movwf	(map@in_max+2)^(0+128)
  5785  0690  3000               	movlw	0
  5786  0691  00D8               	movwf	map@in_min^(0+128)
  5787  0692  3000               	movlw	0
  5788  0693  00D9               	movwf	(map@in_min+1)^(0+128)
  5789  0694  3000               	movlw	0
  5790  0695  00DA               	movwf	(map@in_min+2)^(0+128)
  5791  0696  0022               	movlb	2	; select bank2
  5792  0697  085E               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5793  0698  0021               	movlb	1	; select bank1
  5794  0699  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5795  069A  0022               	movlb	2	; select bank2
  5796  069B  085D               	movf	_knob4_prev^(0+256),w	;volatile
  5797  069C  0021               	movlb	1	; select bank1
  5798  069D  00A8               	movwf	___awtoft@c^(0+128)
  5799  069E  319E  2687  3183   	fcall	___awtoft
  5800  06A1  0021               	movlb	1	; select bank1
  5801  06A2  0828               	movf	?___awtoft^(0+128),w
  5802  06A3  00D5               	movwf	map@x^(0+128)
  5803  06A4  0829               	movf	(?___awtoft+1)^(0+128),w
  5804  06A5  00D6               	movwf	(map@x+1)^(0+128)
  5805  06A6  082A               	movf	(?___awtoft+2)^(0+128),w
  5806  06A7  00D7               	movwf	(map@x+2)^(0+128)
  5807  06A8  3196  262D  3183   	fcall	_map
  5808  06AB  0021               	movlb	1	; select bank1
  5809  06AC  0855               	movf	?_map^(0+128),w
  5810  06AD  00E7               	movwf	___fttol@f1^(0+128)
  5811  06AE  0856               	movf	(?_map+1)^(0+128),w
  5812  06AF  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5813  06B0  0857               	movf	(?_map+2)^(0+128),w
  5814  06B1  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5815  06B2  3196  26B8  3183   	fcall	___fttol
  5816  06B5  0021               	movlb	1	; select bank1
  5817  06B6  0868               	movf	(?___fttol^(0+128)+1),w
  5818  06B7  0023               	movlb	3	; select bank3
  5819  06B8  00E6               	movwf	(_mod_delay_time+1)^(0+384)
  5820  06B9  0021               	movlb	1	; select bank1
  5821  06BA  0867               	movf	?___fttol^(0+128),w
  5822  06BB  0023               	movlb	3	; select bank3
  5823  06BC  00E5               	movwf	_mod_delay_time^(0+384)
  5824  06BD                     l5848:	
  5825                           
  5826                           ;main.c: 299: }
  5827                           ;main.c: 307: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5828  06BD  0022               	movlb	2	; select bank2
  5829  06BE  095F               	comf	_knob5_prev^(0+256),w	;volatile
  5830  06BF  0023               	movlb	3	; select bank3
  5831  06C0  00D4               	movwf	??_main^(0+384)
  5832  06C1  0022               	movlb	2	; select bank2
  5833  06C2  0960               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5834  06C3  0023               	movlb	3	; select bank3
  5835  06C4  00D5               	movwf	(??_main^(0+384)+1)
  5836  06C5  0AD4               	incf	??_main^(0+384),f
  5837  06C6  1903               	skipnz
  5838  06C7  0AD5               	incf	(??_main^(0+384)+1),f
  5839  06C8  0022               	movlb	2	; select bank2
  5840  06C9  0830               	movf	_knob_5_pos^(0+256),w
  5841  06CA  0023               	movlb	3	; select bank3
  5842  06CB  0754               	addwf	??_main^(0+384),w
  5843  06CC  00D6               	movwf	(??_main+2)^(0+384)
  5844  06CD  0022               	movlb	2	; select bank2
  5845  06CE  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5846  06CF  0023               	movlb	3	; select bank3
  5847  06D0  3D55               	addwfc	(??_main+1)^(0+384),w
  5848  06D1  00D7               	movwf	(??_main+3)^(0+384)
  5849  06D2  0857               	movf	(??_main+3)^(0+384),w
  5850  06D3  3A80               	xorlw	128
  5851  06D4  00D8               	movwf	(??_main+4)^(0+384)
  5852  06D5  3080               	movlw	128
  5853  06D6  0258               	subwf	(??_main+4)^(0+384),w
  5854  06D7  1D03               	skipz
  5855  06D8  2EDB               	goto	u6705
  5856  06D9  3004               	movlw	4
  5857  06DA  0256               	subwf	(??_main+2)^(0+384),w
  5858  06DB                     u6705:	
  5859  06DB  1803               	skipnc
  5860  06DC  2EFD               	goto	l5852
  5861  06DD  0022               	movlb	2	; select bank2
  5862  06DE  095F               	comf	_knob5_prev^(0+256),w	;volatile
  5863  06DF  0023               	movlb	3	; select bank3
  5864  06E0  00D4               	movwf	??_main^(0+384)
  5865  06E1  0022               	movlb	2	; select bank2
  5866  06E2  0960               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5867  06E3  0023               	movlb	3	; select bank3
  5868  06E4  00D5               	movwf	(??_main^(0+384)+1)
  5869  06E5  0AD4               	incf	??_main^(0+384),f
  5870  06E6  1903               	skipnz
  5871  06E7  0AD5               	incf	(??_main^(0+384)+1),f
  5872  06E8  0022               	movlb	2	; select bank2
  5873  06E9  0830               	movf	_knob_5_pos^(0+256),w
  5874  06EA  0023               	movlb	3	; select bank3
  5875  06EB  0754               	addwf	??_main^(0+384),w
  5876  06EC  00D6               	movwf	(??_main+2)^(0+384)
  5877  06ED  0022               	movlb	2	; select bank2
  5878  06EE  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5879  06EF  0023               	movlb	3	; select bank3
  5880  06F0  3D55               	addwfc	(??_main+1)^(0+384),w
  5881  06F1  00D7               	movwf	(??_main+3)^(0+384)
  5882  06F2  0857               	movf	(??_main+3)^(0+384),w
  5883  06F3  3A80               	xorlw	128
  5884  06F4  00D8               	movwf	(??_main+4)^(0+384)
  5885  06F5  307F               	movlw	127
  5886  06F6  0258               	subwf	(??_main+4)^(0+384),w
  5887  06F7  1D03               	skipz
  5888  06F8  2EFB               	goto	u6715
  5889  06F9  30FD               	movlw	253
  5890  06FA  0256               	subwf	(??_main+2)^(0+384),w
  5891  06FB                     u6715:	
  5892  06FB  1803               	skipnc
  5893  06FC  2F42               	goto	l5856
  5894  06FD                     l5852:	
  5895                           
  5896                           ;main.c: 308: knob5_prev = knob_5_pos;
  5897  06FD  0022               	movlb	2	; select bank2
  5898  06FE  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5899  06FF  00E0               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5900  0700  0830               	movf	_knob_5_pos^(0+256),w
  5901  0701  00DF               	movwf	_knob5_prev^(0+256)	;volatile
  5902                           
  5903                           ;main.c: 309: adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  5904  0702  3000               	movlw	0
  5905  0703  0021               	movlb	1	; select bank1
  5906  0704  00E1               	movwf	map@out_max^(0+128)
  5907  0705  3000               	movlw	0
  5908  0706  00E2               	movwf	(map@out_max+1)^(0+128)
  5909  0707  3000               	movlw	0
  5910  0708  00E3               	movwf	(map@out_max+2)^(0+128)
  5911  0709  3060               	movlw	96
  5912  070A  00DE               	movwf	map@out_min^(0+128)
  5913  070B  309F               	movlw	159
  5914  070C  00DF               	movwf	(map@out_min+1)^(0+128)
  5915  070D  3044               	movlw	68
  5916  070E  00E0               	movwf	(map@out_min+2)^(0+128)
  5917  070F  30C0               	movlw	192
  5918  0710  00DB               	movwf	map@in_max^(0+128)
  5919  0711  307F               	movlw	127
  5920  0712  00DC               	movwf	(map@in_max+1)^(0+128)
  5921  0713  3044               	movlw	68
  5922  0714  00DD               	movwf	(map@in_max+2)^(0+128)
  5923  0715  3000               	movlw	0
  5924  0716  00D8               	movwf	map@in_min^(0+128)
  5925  0717  3000               	movlw	0
  5926  0718  00D9               	movwf	(map@in_min+1)^(0+128)
  5927  0719  3000               	movlw	0
  5928  071A  00DA               	movwf	(map@in_min+2)^(0+128)
  5929  071B  0022               	movlb	2	; select bank2
  5930  071C  0860               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  5931  071D  0021               	movlb	1	; select bank1
  5932  071E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5933  071F  0022               	movlb	2	; select bank2
  5934  0720  085F               	movf	_knob5_prev^(0+256),w	;volatile
  5935  0721  0021               	movlb	1	; select bank1
  5936  0722  00A8               	movwf	___awtoft@c^(0+128)
  5937  0723  319E  2687  3183   	fcall	___awtoft
  5938  0726  0021               	movlb	1	; select bank1
  5939  0727  0828               	movf	?___awtoft^(0+128),w
  5940  0728  00D5               	movwf	map@x^(0+128)
  5941  0729  0829               	movf	(?___awtoft+1)^(0+128),w
  5942  072A  00D6               	movwf	(map@x+1)^(0+128)
  5943  072B  082A               	movf	(?___awtoft+2)^(0+128),w
  5944  072C  00D7               	movwf	(map@x+2)^(0+128)
  5945  072D  3196  262D  3183   	fcall	_map
  5946  0730  0021               	movlb	1	; select bank1
  5947  0731  0855               	movf	?_map^(0+128),w
  5948  0732  00E7               	movwf	___fttol@f1^(0+128)
  5949  0733  0856               	movf	(?_map+1)^(0+128),w
  5950  0734  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5951  0735  0857               	movf	(?_map+2)^(0+128),w
  5952  0736  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5953  0737  3196  26B8  3183   	fcall	___fttol
  5954  073A  0021               	movlb	1	; select bank1
  5955  073B  0868               	movf	(?___fttol^(0+128)+1),w
  5956  073C  0023               	movlb	3	; select bank3
  5957  073D  00C3               	movwf	(_adjusted_pot_value+1)^(0+384)
  5958  073E  0021               	movlb	1	; select bank1
  5959  073F  0867               	movf	?___fttol^(0+128),w
  5960  0740  0023               	movlb	3	; select bank3
  5961  0741  00C2               	movwf	_adjusted_pot_value^(0+384)
  5962  0742                     l5856:	
  5963                           
  5964                           ;main.c: 311: }
  5965                           ;main.c: 390: if (delay_time_changed == 1) {
  5966  0742  0023               	movlb	3	; select bank3
  5967  0743  0363               	decf	_delay_time_changed^(0+384),w
  5968  0744  0464               	iorwf	(_delay_time_changed+1)^(0+384),w
  5969  0745  1D03               	btfss	3,2
  5970  0746  2BF7               	goto	l5772
  5971                           
  5972                           ;main.c: 391: delay_time = baseline_delay_time;
  5973  0747  0020               	movlb	0	; select bank0
  5974  0748  085B               	movf	_baseline_delay_time+3,w	;volatile
  5975  0749  00DF               	movwf	_delay_time+3	;volatile
  5976  074A  085A               	movf	_baseline_delay_time+2,w	;volatile
  5977  074B  00DE               	movwf	_delay_time+2	;volatile
  5978  074C  0859               	movf	_baseline_delay_time+1,w	;volatile
  5979  074D  00DD               	movwf	_delay_time+1	;volatile
  5980  074E  0858               	movf	_baseline_delay_time,w	;volatile
  5981  074F  00DC               	movwf	_delay_time	;volatile
  5982                           
  5983                           ;main.c: 392: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  5984  0750  0859               	movf	_baseline_delay_time+1,w	;volatile
  5985  0751  0022               	movlb	2	; select bank2
  5986  0752  00C6               	movwf	(set_subdivision@x+1)^(0+256)
  5987  0753  0020               	movlb	0	; select bank0
  5988  0754  0858               	movf	_baseline_delay_time,w	;volatile
  5989  0755  0022               	movlb	2	; select bank2
  5990  0756  00C5               	movwf	set_subdivision@x^(0+256)
  5991  0757  0020               	movlb	0	; select bank0
  5992  0758  0865               	movf	_top_push_state+1,w
  5993  0759  0022               	movlb	2	; select bank2
  5994  075A  00C8               	movwf	(set_subdivision@y+1)^(0+256)
  5995  075B  0020               	movlb	0	; select bank0
  5996  075C  0864               	movf	_top_push_state,w
  5997  075D  0022               	movlb	2	; select bank2
  5998  075E  00C7               	movwf	set_subdivision@y^(0+256)
  5999  075F  3188  20F4  3183   	fcall	_set_subdivision
  6000  0762  0022               	movlb	2	; select bank2
  6001  0763  0845               	movf	?_set_subdivision^(0+256),w
  6002  0764  0020               	movlb	0	; select bank0
  6003  0765  00DC               	movwf	_delay_time	;volatile
  6004  0766  0022               	movlb	2	; select bank2
  6005  0767  0846               	movf	(?_set_subdivision+1)^(0+256),w
  6006  0768  0020               	movlb	0	; select bank0
  6007  0769  00DD               	movwf	_delay_time+1	;volatile
  6008  076A  0D89               	rlf	9,f
  6009  076B  3B89               	subwfb	9,f
  6010  076C  0989               	comf	9,f
  6011  076D  00DE               	movwf	_delay_time+2	;volatile
  6012  076E  00DF               	movwf	_delay_time+3	;volatile
  6013                           
  6014                           ;main.c: 393: reset_sub_delay = 1;
  6015  076F  3001               	movlw	1
  6016  0770  0023               	movlb	3	; select bank3
  6017  0771  00D0               	movwf	_reset_sub_delay^(0+384)
  6018  0772  3000               	movlw	0
  6019  0773  00D1               	movwf	(_reset_sub_delay^(0+384)+1)
  6020                           
  6021                           ;main.c: 394: delayfound = 0;
  6022  0774  01CC               	clrf	_delayfound^(0+384)
  6023  0775  01CD               	clrf	(_delayfound+1)^(0+384)
  6024                           
  6025                           ;main.c: 395: delay_counter = 0;
  6026  0776  0022               	movlb	2	; select bank2
  6027  0777  01A4               	clrf	_delay_counter^(0+256)	;volatile
  6028  0778  01A5               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6029  0779                     l5874:	
  6030                           ;main.c: 397: while (delayfound == 0) {
  6031                           
  6032  0779  0023               	movlb	3	; select bank3
  6033  077A  084C               	movf	_delayfound^(0+384),w
  6034  077B  044D               	iorwf	(_delayfound+1)^(0+384),w
  6035  077C  1D03               	btfss	3,2
  6036  077D  2FD5               	goto	l5876
  6037                           
  6038                           ;main.c: 398: if (delayArray[delay_counter] <= delay_time * 2) {
  6039  077E  0022               	movlb	2	; select bank2
  6040  077F  0825               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6041  0780  0023               	movlb	3	; select bank3
  6042  0781  00D5               	movwf	(??_main^(0+384)+1)
  6043  0782  0022               	movlb	2	; select bank2
  6044  0783  0824               	movf	_delay_counter^(0+256),w	;volatile
  6045  0784  0023               	movlb	3	; select bank3
  6046  0785  00D4               	movwf	??_main^(0+384)
  6047  0786  35D4               	lslf	??_main^(0+384),f
  6048  0787  0DD5               	rlf	(??_main^(0+384)+1),f
  6049  0788  306E               	movlw	110
  6050  0789  00D6               	movwf	(??_main+2)^(0+384)
  6051  078A  3023               	movlw	35
  6052  078B  00D7               	movwf	((??_main+2)^(0+384)+1)
  6053  078C  0854               	movf	??_main^(0+384),w
  6054  078D  0756               	addwf	(??_main+2)^(0+384),w
  6055  078E  0086               	movwf	6
  6056  078F  0855               	movf	(??_main+1)^(0+384),w
  6057  0790  3D57               	addwfc	(??_main+3)^(0+384),w
  6058  0791  0087               	movwf	7
  6059  0792  3F40               	moviw [0]fsr1
  6060  0793  00D8               	movwf	(??_main+4)^(0+384)
  6061  0794  3F41               	moviw [1]fsr1
  6062  0795  00D9               	movwf	((??_main+4)^(0+384)+1)
  6063  0796  0858               	movf	(??_main+4)^(0+384),w
  6064  0797  00DA               	movwf	(??_main+6)^(0+384)
  6065  0798  0859               	movf	(??_main+5)^(0+384),w
  6066  0799  00DB               	movwf	((??_main+6)^(0+384)+1)
  6067  079A  3000               	movlw	0
  6068  079B  1BDB               	btfsc	((??_main+6)^(0+384)+1),7
  6069  079C  30FF               	movlw	255
  6070  079D  00DC               	movwf	((??_main+6)^(0+384)+2)
  6071  079E  00DD               	movwf	((??_main+6)^(0+384)+3)
  6072  079F  0020               	movlb	0	; select bank0
  6073  07A0  085C               	movf	_delay_time,w	;volatile
  6074  07A1  0023               	movlb	3	; select bank3
  6075  07A2  00DE               	movwf	(??_main+10)^(0+384)
  6076  07A3  0020               	movlb	0	; select bank0
  6077  07A4  085D               	movf	_delay_time+1,w	;volatile
  6078  07A5  0023               	movlb	3	; select bank3
  6079  07A6  00DF               	movwf	((??_main+10)^(0+384)+1)
  6080  07A7  0020               	movlb	0	; select bank0
  6081  07A8  085E               	movf	_delay_time+2,w	;volatile
  6082  07A9  0023               	movlb	3	; select bank3
  6083  07AA  00E0               	movwf	((??_main+10)^(0+384)+2)
  6084  07AB  0020               	movlb	0	; select bank0
  6085  07AC  085F               	movf	_delay_time+3,w	;volatile
  6086  07AD  0023               	movlb	3	; select bank3
  6087  07AE  00E1               	movwf	((??_main+10)^(0+384)+3)
  6088  07AF  3001               	movlw	1
  6089  07B0                     u6735:	
  6090  07B0  35DE               	lslf	(??_main+10)^(0+384),f
  6091  07B1  0DDF               	rlf	((??_main+10)^(0+384)+1),f
  6092  07B2  0DE0               	rlf	((??_main+10)^(0+384)+2),f
  6093  07B3  0DE1               	rlf	((??_main+10)^(0+384)+3),f
  6094  07B4  0B89               	decfsz	9,f
  6095  07B5  2FB0               	goto	u6735
  6096  07B6  0861               	movf	(??_main+13)^(0+384),w
  6097  07B7  3A80               	xorlw	128
  6098  07B8  00E2               	movwf	(??_main+14)^(0+384)
  6099  07B9  085D               	movf	(??_main+9)^(0+384),w
  6100  07BA  3A80               	xorlw	128
  6101  07BB  0262               	subwf	(??_main+14)^(0+384),w
  6102  07BC  1D03               	skipz
  6103  07BD  2FC8               	goto	u6743
  6104  07BE  085C               	movf	(??_main+8)^(0+384),w
  6105  07BF  0260               	subwf	(??_main+12)^(0+384),w
  6106  07C0  1D03               	skipz
  6107  07C1  2FC8               	goto	u6743
  6108  07C2  085B               	movf	(??_main+7)^(0+384),w
  6109  07C3  025F               	subwf	(??_main+11)^(0+384),w
  6110  07C4  1D03               	skipz
  6111  07C5  2FC8               	goto	u6743
  6112  07C6  085A               	movf	(??_main+6)^(0+384),w
  6113  07C7  025E               	subwf	(??_main+10)^(0+384),w
  6114  07C8                     u6743:	
  6115  07C8  1C03               	skipc
  6116  07C9  2FCF               	goto	l5872
  6117                           
  6118                           ;main.c: 399: delayfound = 1;
  6119  07CA  3001               	movlw	1
  6120  07CB  00CC               	movwf	_delayfound^(0+384)
  6121  07CC  3000               	movlw	0
  6122  07CD  00CD               	movwf	(_delayfound^(0+384)+1)
  6123                           
  6124                           ;main.c: 403: } else {
  6125  07CE  2F79               	goto	l5874
  6126  07CF                     l5872:	
  6127                           
  6128                           ;main.c: 404: delay_counter++;
  6129  07CF  3001               	movlw	1
  6130  07D0  0022               	movlb	2	; select bank2
  6131  07D1  07A4               	addwf	_delay_counter^(0+256),f	;volatile
  6132  07D2  3000               	movlw	0
  6133  07D3  3DA5               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6134  07D4  2F79               	goto	l5874
  6135  07D5                     l5876:	
  6136                           
  6137                           ;main.c: 406: }
  6138                           ;main.c: 407: }
  6139                           ;main.c: 426: delay_time_changed = 0;
  6140  07D5  01E3               	clrf	_delay_time_changed^(0+384)
  6141  07D6  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  6142  07D7  2BF7               	goto	l5772
  6143  07D8                     __end_of_main:	
  6144                           
  6145                           	psect	text1
  6146  1180                     __ptext1:	
  6147 ;; *************** function _update_mode *****************
  6148 ;; Defined at:
  6149 ;;		line 82 in file "tactiles.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;		None
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;                  1    wreg      void 
  6156 ;; Registers used:
  6157 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6165 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6166 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; Hardware stack levels required when called:    3
  6170 ;; This function calls:
  6171 ;;		Nothing
  6172 ;; This function is called by:
  6173 ;;		_main
  6174 ;; This function uses a non-reentrant model
  6175 ;;
  6176                           
  6177                           
  6178                           ;psect for function _update_mode
  6179  1180                     _update_mode:	
  6180                           
  6181                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6182                           
  6183                           ;incstack = 0
  6184                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6185  1180  0020               	movlb	0	; select bank0
  6186  1181  180E               	btfsc	14,0	;volatile
  6187  1182  29BD               	goto	l5484
  6188                           
  6189                           ;tactiles.c: 88: debounce_mode2++;
  6190  1183  3001               	movlw	1
  6191  1184  0023               	movlb	3	; select bank3
  6192  1185  07CA               	addwf	_debounce_mode2^(0+384),f
  6193  1186  3000               	movlw	0
  6194  1187  3DCB               	addwfc	(_debounce_mode2+1)^(0+384),f
  6195                           
  6196                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6197  1188  084B               	movf	(_debounce_mode2+1)^(0+384),w
  6198  1189  3A80               	xorlw	128
  6199  118A  0021               	movlb	1	; select bank1
  6200  118B  00A0               	movwf	??_update_mode^(0+128)
  6201  118C  3080               	movlw	128
  6202  118D  0220               	subwf	??_update_mode^(0+128),w
  6203  118E  1D03               	skipz
  6204  118F  2993               	goto	u6095
  6205  1190  301A               	movlw	26
  6206  1191  0023               	movlb	3	; select bank3
  6207  1192  024A               	subwf	_debounce_mode2^(0+384),w
  6208  1193                     u6095:	
  6209  1193  1C03               	skipc
  6210  1194  0008               	return
  6211                           
  6212                           ;tactiles.c: 90: debounce_mode2 = 25;
  6213  1195  3019               	movlw	25
  6214  1196  0023               	movlb	3	; select bank3
  6215  1197  00CA               	movwf	_debounce_mode2^(0+384)
  6216  1198  3000               	movlw	0
  6217  1199  00CB               	movwf	(_debounce_mode2^(0+384)+1)
  6218                           
  6219                           ;tactiles.c: 91: mode2_state++;
  6220  119A  3001               	movlw	1
  6221  119B  0021               	movlb	1	; select bank1
  6222  119C  00A0               	movwf	??_update_mode^(0+128)
  6223  119D  0820               	movf	??_update_mode^(0+128),w
  6224  119E  0022               	movlb	2	; select bank2
  6225  119F  07BA               	addwf	_mode2_state^(0+256),f
  6226                           
  6227                           ;tactiles.c: 92: if (mode2_state > 2) {
  6228  11A0  3003               	movlw	3
  6229  11A1  023A               	subwf	_mode2_state^(0+256),w
  6230  11A2  1C03               	skipc
  6231  11A3  29AE               	goto	l5482
  6232                           
  6233                           ;tactiles.c: 93: mode2_state = 0;
  6234  11A4  01BA               	clrf	_mode2_state^(0+256)
  6235                           
  6236                           ;tactiles.c: 94: }
  6237                           ;tactiles.c: 95: switch(mode2_state) {
  6238  11A5  29AE               	goto	l5482
  6239  11A6                     l872:	
  6240                           ;tactiles.c: 96: case 0:
  6241                           
  6242                           
  6243                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6244  11A6  108D               	bcf	13,1	;volatile
  6245  11A7  29AC               	goto	L1
  6246  11A8                     l874:	
  6247                           ;tactiles.c: 100: case 1:
  6248                           
  6249                           ;tactiles.c: 99: break;
  6250                           
  6251                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6252                           
  6253                           
  6254                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6255  11A8  108D               	bcf	13,1	;volatile
  6256                           
  6257                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6258  11A9  140D               	bsf	13,0	;volatile
  6259                           
  6260                           ;tactiles.c: 103: break;
  6261  11AA  29B9               	goto	l876
  6262  11AB                     l875:	
  6263                           ;tactiles.c: 104: case 2:
  6264                           
  6265                           
  6266                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6267  11AB  148D               	bsf	13,1	;volatile
  6268  11AC                     L1:	
  6269                           
  6270                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6271  11AC  100D               	bcf	13,0	;volatile
  6272                           
  6273                           ;tactiles.c: 108: }
  6274                           
  6275                           ;tactiles.c: 107: break;
  6276  11AD  29B9               	goto	l876
  6277  11AE                     l5482:	
  6278  11AE  083A               	movf	_mode2_state^(0+256),w
  6279                           
  6280                           ; Switch size 1, requested type "space"
  6281                           ; Number of cases is 3, Range of values is 0 to 2
  6282                           ; switch strategies available:
  6283                           ; Name         Instructions Cycles
  6284                           ; simple_byte           10     6 (average)
  6285                           ; direct_byte           12     6 (fixed)
  6286                           ; jumptable            260     6 (fixed)
  6287                           ;	Chosen strategy is simple_byte
  6288  11AF  3A00               	xorlw	0	; case 0
  6289  11B0  1903               	skipnz
  6290  11B1  29A6               	goto	l872
  6291  11B2  3A01               	xorlw	1	; case 1
  6292  11B3  1903               	skipnz
  6293  11B4  29A8               	goto	l874
  6294  11B5  3A03               	xorlw	3	; case 2
  6295  11B6  1903               	skipnz
  6296  11B7  29AB               	goto	l875
  6297  11B8  29B9               	goto	l876
  6298  11B9                     l876:	
  6299                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6300                           
  6301  11B9  0020               	movlb	0	; select bank0
  6302  11BA  180E               	btfsc	14,0	;volatile
  6303  11BB  0008               	return
  6304  11BC  29B9               	goto	l876
  6305  11BD                     l5484:	
  6306                           ;tactiles.c: 110: }
  6307                           ;tactiles.c: 111: }
  6308                           ;tactiles.c: 112: } else {
  6309                           
  6310                           
  6311                           ;tactiles.c: 113: debounce_mode2 = 0;
  6312  11BD  0023               	movlb	3	; select bank3
  6313  11BE  01CA               	clrf	_debounce_mode2^(0+384)
  6314  11BF  01CB               	clrf	(_debounce_mode2+1)^(0+384)
  6315  11C0  0008               	return
  6316  11C1                     __end_of_update_mode:	
  6317                           
  6318                           	psect	text2
  6319  0B9B                     __ptext2:	
  6320 ;; *************** function _updateSwitchTap *****************
  6321 ;; Defined at:
  6322 ;;		line 48 in file "SwitchTap.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;  tapCntDiviso    2   28[BANK1 ] int 
  6327 ;;  iCnt            1   30[BANK1 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  1    wreg      void 
  6330 ;; Registers used:
  6331 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : 0/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6338 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6339 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6340 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6341 ;;Total ram usage:        9 bytes
  6342 ;; Hardware stack levels used:    1
  6343 ;; Hardware stack levels required when called:    6
  6344 ;; This function calls:
  6345 ;;		___aldiv
  6346 ;;		_setDoublePressState
  6347 ;;		_setLongTapState
  6348 ;; This function is called by:
  6349 ;;		_main
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           
  6354                           ;psect for function _updateSwitchTap
  6355  0B9B                     _updateSwitchTap:	
  6356                           
  6357                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6358                           
  6359                           ;incstack = 0
  6360                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6361  0B9B  0021               	movlb	1	; select bank1
  6362  0B9C  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6363                           
  6364                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6365  0B9D  0020               	movlb	0	; select bank0
  6366  0B9E  1810               	btfsc	16,0	;volatile
  6367  0B9F  2BA6               	goto	l5612
  6368                           
  6369                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6370  0BA0  0857               	movf	_switchTap_pressed,w
  6371  0BA1  1903               	btfsc	3,2
  6372  0BA2  2BB0               	goto	l1209
  6373                           
  6374                           ;SwitchTap.c: 59: switchTap_pressed--;
  6375  0BA3  3001               	movlw	1
  6376  0BA4  02D7               	subwf	_switchTap_pressed,f
  6377                           
  6378                           ;SwitchTap.c: 60: }
  6379                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6380  0BA5  2BB0               	goto	l1209
  6381  0BA6                     l5612:	
  6382  0BA6  3019               	movlw	25
  6383  0BA7  0257               	subwf	_switchTap_pressed,w
  6384  0BA8  1803               	skipnc
  6385  0BA9  2BB0               	goto	l1209
  6386                           
  6387                           ;SwitchTap.c: 62: switchTap_pressed++;
  6388  0BAA  3001               	movlw	1
  6389  0BAB  0021               	movlb	1	; select bank1
  6390  0BAC  00B6               	movwf	??_updateSwitchTap^(0+128)
  6391  0BAD  0836               	movf	??_updateSwitchTap^(0+128),w
  6392  0BAE  0020               	movlb	0	; select bank0
  6393  0BAF  07D7               	addwf	_switchTap_pressed,f
  6394  0BB0                     l1209:	
  6395                           
  6396                           ;SwitchTap.c: 63: }
  6397                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6398  0BB0  0857               	movf	_switchTap_pressed,w
  6399  0BB1  1D03               	btfss	3,2
  6400  0BB2  2D64               	goto	l5694
  6401                           
  6402                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6403  0BB3  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6404  0BB4  2C36               	goto	l5654
  6405  0BB5  084C               	movf	_tap_timer+3,w	;volatile
  6406  0BB6  1D03               	btfss	3,2
  6407  0BB7  2BC1               	goto	l5618
  6408  0BB8  084B               	movf	_tap_timer+2,w	;volatile
  6409  0BB9  1D03               	btfss	3,2
  6410  0BBA  2BC1               	goto	l5618
  6411  0BBB  301B               	movlw	27
  6412  0BBC  0249               	subwf	_tap_timer,w	;volatile
  6413  0BBD  3006               	movlw	6
  6414  0BBE  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6415  0BBF  1C03               	btfss	3,0
  6416  0BC0  2C36               	goto	l5654
  6417  0BC1                     l5618:	
  6418                           
  6419                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6420  0BC1  0022               	movlb	2	; select bank2
  6421  0BC2  033D               	decf	_switchTap_down^(0+256),w
  6422  0BC3  1903               	btfsc	3,2
  6423  0BC4  2C00               	goto	l5634
  6424                           
  6425                           ;SwitchTap.c: 78: switchTap_down = 1;
  6426  0BC5  01BD               	clrf	_switchTap_down^(0+256)
  6427  0BC6  0ABD               	incf	_switchTap_down^(0+256),f
  6428                           
  6429                           ;SwitchTap.c: 79: tap_timer = 0;
  6430  0BC7  3000               	movlw	0
  6431  0BC8  0020               	movlb	0	; select bank0
  6432  0BC9  00CC               	movwf	_tap_timer+3	;volatile
  6433  0BCA  3000               	movlw	0
  6434  0BCB  00CB               	movwf	_tap_timer+2	;volatile
  6435  0BCC  3000               	movlw	0
  6436  0BCD  00CA               	movwf	_tap_timer+1	;volatile
  6437  0BCE  3000               	movlw	0
  6438  0BCF  00C9               	movwf	_tap_timer	;volatile
  6439                           
  6440                           ;SwitchTap.c: 80: tap_iteration = 1;
  6441  0BD0  3001               	movlw	1
  6442  0BD1  0022               	movlb	2	; select bank2
  6443  0BD2  00E1               	movwf	_tap_iteration^(0+256)
  6444  0BD3  3000               	movlw	0
  6445  0BD4  00E2               	movwf	(_tap_iteration^(0+256)+1)
  6446                           
  6447                           ;SwitchTap.c: 81: tap_total = 0;
  6448  0BD5  3000               	movlw	0
  6449  0BD6  0023               	movlb	3	; select bank3
  6450  0BD7  00BB               	movwf	(_tap_total+3)^(0+384)
  6451  0BD8  3000               	movlw	0
  6452  0BD9  00BA               	movwf	(_tap_total+2)^(0+384)
  6453  0BDA  3000               	movlw	0
  6454  0BDB  00B9               	movwf	(_tap_total+1)^(0+384)
  6455  0BDC  3000               	movlw	0
  6456  0BDD  00B8               	movwf	_tap_total^(0+384)
  6457                           
  6458                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6459  0BDE  01E3               	clrf	_delay_time_changed^(0+384)
  6460  0BDF  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  6461                           
  6462                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6463  0BE0  0021               	movlb	1	; select bank1
  6464  0BE1  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6465  0BE2  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6466  0BE3                     l5632:	
  6467  0BE3  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6468  0BE4  0020               	movlb	0	; select bank0
  6469  0BE5  0268               	subwf	_num_taps,w
  6470  0BE6  1C03               	btfss	3,0
  6471  0BE7  2C00               	goto	l5634
  6472                           
  6473                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6474  0BE8  0021               	movlb	1	; select bank1
  6475  0BE9  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6476  0BEA  00B6               	movwf	??_updateSwitchTap^(0+128)
  6477  0BEB  3001               	movlw	1
  6478  0BEC                     u6395:	
  6479  0BEC  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6480  0BED  3EFF               	addlw	-1
  6481  0BEE  1D03               	skipz
  6482  0BEF  2BEC               	goto	u6395
  6483  0BF0  3536               	lslf	??_updateSwitchTap^(0+128),w
  6484  0BF1  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6485  0BF2  0086               	movwf	6
  6486  0BF3  3001               	movlw	1	; select bank3/4
  6487  0BF4  0087               	movwf	7
  6488  0BF5  3000               	movlw	0
  6489  0BF6  3FC0               	movwi [0]fsr1
  6490  0BF7  3000               	movlw	0
  6491  0BF8  3FC1               	movwi [1]fsr1
  6492  0BF9  3FC2               	movwi [2]fsr1
  6493  0BFA  3FC3               	movwi [3]fsr1
  6494  0BFB  3001               	movlw	1
  6495  0BFC  00B6               	movwf	??_updateSwitchTap^(0+128)
  6496  0BFD  0836               	movf	??_updateSwitchTap^(0+128),w
  6497  0BFE  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6498  0BFF  2BE3               	goto	l5632
  6499  0C00                     l5634:	
  6500                           
  6501                           ;SwitchTap.c: 86: }
  6502                           ;SwitchTap.c: 87: }
  6503                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6504  0C00  0020               	movlb	0	; select bank0
  6505  0C01  0855               	movf	_longTap_start,w
  6506  0C02  1D03               	btfss	3,2
  6507  0C03  2C0A               	goto	l5640
  6508                           
  6509                           ;SwitchTap.c: 91: longTap_start = 1;
  6510  0C04  01D5               	clrf	_longTap_start
  6511  0C05  0AD5               	incf	_longTap_start,f
  6512                           
  6513                           ;SwitchTap.c: 92: longTap_state = 0;
  6514  0C06  01E7               	clrf	_longTap_state	;volatile
  6515                           
  6516                           ;SwitchTap.c: 93: longTap_timer = 0;
  6517  0C07  0022               	movlb	2	; select bank2
  6518  0C08  01B2               	clrf	_longTap_timer^(0+256)	;volatile
  6519  0C09  01B3               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6520  0C0A                     l5640:	
  6521                           
  6522                           ;SwitchTap.c: 94: }
  6523                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6524  0C0A  0020               	movlb	0	; select bank0
  6525  0C0B  0863               	movf	_long_press_limit+1,w
  6526  0C0C  0022               	movlb	2	; select bank2
  6527  0C0D  0233               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6528  0C0E  1D03               	skipz
  6529  0C0F  2C14               	goto	u6425
  6530  0C10  0020               	movlb	0	; select bank0
  6531  0C11  0862               	movf	_long_press_limit,w
  6532  0C12  0022               	movlb	2	; select bank2
  6533  0C13  0232               	subwf	_longTap_timer^(0+256),w	;volatile
  6534  0C14                     u6425:	
  6535  0C14  1C03               	skipc
  6536  0C15  0008               	return
  6537  0C16  0020               	movlb	0	; select bank0
  6538  0C17  0867               	movf	_longTap_state,w	;volatile
  6539  0C18  1D03               	btfss	3,2
  6540  0C19  0008               	return
  6541                           
  6542                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6543  0C1A  0863               	movf	_long_press_limit+1,w
  6544  0C1B  0022               	movlb	2	; select bank2
  6545  0C1C  00B3               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6546  0C1D  0020               	movlb	0	; select bank0
  6547  0C1E  0862               	movf	_long_press_limit,w
  6548  0C1F  0022               	movlb	2	; select bank2
  6549  0C20  00B2               	movwf	_longTap_timer^(0+256)	;volatile
  6550                           
  6551                           ;SwitchTap.c: 101: LATBbits.LATB4 = 0;
  6552  0C21  120D               	bcf	13,4	;volatile
  6553                           
  6554                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6555  0C22  0020               	movlb	0	; select bank0
  6556  0C23  0354               	decf	_feedback_start,w
  6557  0C24  1903               	btfsc	3,2
  6558  0C25  2C2E               	goto	l5652
  6559                           
  6560                           ;SwitchTap.c: 104: setLongTapState(1);
  6561  0C26  3001               	movlw	1
  6562  0C27  0021               	movlb	1	; select bank1
  6563  0C28  00A0               	movwf	setLongTapState@f_state^(0+128)
  6564  0C29  3000               	movlw	0
  6565  0C2A  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6566  0C2B  319E  2630         	fcall	_setLongTapState
  6567                           
  6568                           ;SwitchTap.c: 105: } else {
  6569  0C2D  0008               	return
  6570  0C2E                     l5652:	
  6571                           
  6572                           ;SwitchTap.c: 106: setDoublePressState(1);
  6573  0C2E  3001               	movlw	1
  6574  0C2F  0021               	movlb	1	; select bank1
  6575  0C30  00B2               	movwf	setDoublePressState@f_state^(0+128)
  6576  0C31  3000               	movlw	0
  6577  0C32  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6578  0C33  319F  2763         	fcall	_setDoublePressState
  6579                           
  6580                           ;SwitchTap.c: 107: }
  6581                           ;SwitchTap.c: 108: }
  6582                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6583  0C35  0008               	return
  6584  0C36                     l5654:	
  6585  0C36  0020               	movlb	0	; select bank0
  6586  0C37  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6587  0C38  2C45               	goto	l5656
  6588  0C39  084C               	movf	_tap_timer+3,w	;volatile
  6589  0C3A  1D03               	btfss	3,2
  6590  0C3B  0008               	return
  6591  0C3C  084B               	movf	_tap_timer+2,w	;volatile
  6592  0C3D  1D03               	btfss	3,2
  6593  0C3E  0008               	return
  6594  0C3F  301B               	movlw	27
  6595  0C40  0249               	subwf	_tap_timer,w	;volatile
  6596  0C41  3006               	movlw	6
  6597  0C42  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6598  0C43  1803               	btfsc	3,0
  6599  0C44  0008               	return
  6600  0C45                     l5656:	
  6601  0C45  0867               	movf	_longTap_state,w	;volatile
  6602  0C46  1D03               	btfss	3,2
  6603  0C47  0008               	return
  6604  0C48  0022               	movlb	2	; select bank2
  6605  0C49  033D               	decf	_switchTap_down^(0+256),w
  6606  0C4A  1903               	btfsc	3,2
  6607  0C4B  0008               	return
  6608                           
  6609                           ;SwitchTap.c: 112: switchTap_down = 1;
  6610  0C4C  01BD               	clrf	_switchTap_down^(0+256)
  6611  0C4D  0ABD               	incf	_switchTap_down^(0+256),f
  6612                           
  6613                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6614  0C4E  0020               	movlb	0	; select bank0
  6615  0C4F  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6616  0C50  2C65               	goto	l1223
  6617  0C51  084C               	movf	_tap_timer+3,w	;volatile
  6618  0C52  1D03               	btfss	3,2
  6619  0C53  2C5D               	goto	l5664
  6620  0C54  084B               	movf	_tap_timer+2,w	;volatile
  6621  0C55  1D03               	btfss	3,2
  6622  0C56  2C5D               	goto	l5664
  6623  0C57  3094               	movlw	148
  6624  0C58  0249               	subwf	_tap_timer,w	;volatile
  6625  0C59  3004               	movlw	4
  6626  0C5A  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6627  0C5B  1C03               	btfss	3,0
  6628  0C5C  2C65               	goto	l1223
  6629  0C5D                     l5664:	
  6630                           
  6631                           ;SwitchTap.c: 114: tap_timer = 1172;
  6632  0C5D  3000               	movlw	0
  6633  0C5E  00CC               	movwf	_tap_timer+3	;volatile
  6634  0C5F  3000               	movlw	0
  6635  0C60  00CB               	movwf	_tap_timer+2	;volatile
  6636  0C61  3004               	movlw	4
  6637  0C62  00CA               	movwf	_tap_timer+1	;volatile
  6638  0C63  3094               	movlw	148
  6639  0C64  00C9               	movwf	_tap_timer	;volatile
  6640  0C65                     l1223:	
  6641                           
  6642                           ;SwitchTap.c: 115: }
  6643                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6644  0C65  0868               	movf	_num_taps,w
  6645  0C66  0021               	movlb	1	; select bank1
  6646  0C67  00B6               	movwf	??_updateSwitchTap^(0+128)
  6647  0C68  01B7               	clrf	(??_updateSwitchTap^(0+128)+1)
  6648  0C69  0836               	movf	??_updateSwitchTap^(0+128),w
  6649  0C6A  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6650  0C6B  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6651  0C6C  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6652                           
  6653                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6654  0C6D  0022               	movlb	2	; select bank2
  6655  0C6E  0862               	movf	(_tap_iteration+1)^(0+256),w
  6656  0C6F  3A80               	xorlw	128
  6657  0C70  3C80               	sublw	128
  6658  0C71  1D03               	skipz
  6659  0C72  2C76               	goto	u6495
  6660  0C73  0861               	movf	_tap_iteration^(0+256),w
  6661  0C74  0020               	movlb	0	; select bank0
  6662  0C75  0268               	subwf	_num_taps,w
  6663  0C76                     u6495:	
  6664  0C76  1C03               	skipc
  6665  0C77  2CA8               	goto	l5672
  6666                           
  6667                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6668  0C78  0020               	movlb	0	; select bank0
  6669  0C79  0849               	movf	_tap_timer,w	;volatile
  6670  0C7A  0023               	movlb	3	; select bank3
  6671  0C7B  07B8               	addwf	_tap_total^(0+384),f
  6672  0C7C  0020               	movlb	0	; select bank0
  6673  0C7D  084A               	movf	_tap_timer+1,w	;volatile
  6674  0C7E  0023               	movlb	3	; select bank3
  6675  0C7F  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6676  0C80  0020               	movlb	0	; select bank0
  6677  0C81  084B               	movf	_tap_timer+2,w	;volatile
  6678  0C82  0023               	movlb	3	; select bank3
  6679  0C83  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6680  0C84  0020               	movlb	0	; select bank0
  6681  0C85  084C               	movf	_tap_timer+3,w	;volatile
  6682  0C86  0023               	movlb	3	; select bank3
  6683  0C87  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6684                           
  6685                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6686  0C88  0022               	movlb	2	; select bank2
  6687  0C89  0861               	movf	_tap_iteration^(0+256),w
  6688  0C8A  0021               	movlb	1	; select bank1
  6689  0C8B  00B6               	movwf	??_updateSwitchTap^(0+128)
  6690  0C8C  3001               	movlw	1
  6691  0C8D                     u6505:	
  6692  0C8D  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6693  0C8E  3EFF               	addlw	-1
  6694  0C8F  1D03               	skipz
  6695  0C90  2C8D               	goto	u6505
  6696  0C91  3536               	lslf	??_updateSwitchTap^(0+128),w
  6697  0C92  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6698  0C93  0086               	movwf	6
  6699  0C94  3001               	movlw	1	; select bank3/4
  6700  0C95  0087               	movwf	7
  6701  0C96  0020               	movlb	0	; select bank0
  6702  0C97  0849               	movf	_tap_timer,w	;volatile
  6703  0C98  3FC0               	movwi [0]fsr1
  6704  0C99  084A               	movf	_tap_timer+1,w	;volatile
  6705  0C9A  3FC1               	movwi [1]fsr1
  6706  0C9B  084B               	movf	_tap_timer+2,w	;volatile
  6707  0C9C  3FC2               	movwi [2]fsr1
  6708  0C9D  084C               	movf	_tap_timer+3,w	;volatile
  6709  0C9E  3FC3               	movwi [3]fsr1
  6710                           
  6711                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6712  0C9F  0022               	movlb	2	; select bank2
  6713  0CA0  0862               	movf	(_tap_iteration+1)^(0+256),w
  6714  0CA1  0021               	movlb	1	; select bank1
  6715  0CA2  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6716  0CA3  0022               	movlb	2	; select bank2
  6717  0CA4  0861               	movf	_tap_iteration^(0+256),w
  6718  0CA5  0021               	movlb	1	; select bank1
  6719  0CA6  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6720                           
  6721                           ;SwitchTap.c: 122: } else {
  6722  0CA7  2D24               	goto	l5686
  6723  0CA8                     l5672:	
  6724                           
  6725                           ;SwitchTap.c: 123: tap_total = 0;
  6726  0CA8  3000               	movlw	0
  6727  0CA9  0023               	movlb	3	; select bank3
  6728  0CAA  00BB               	movwf	(_tap_total+3)^(0+384)
  6729  0CAB  3000               	movlw	0
  6730  0CAC  00BA               	movwf	(_tap_total+2)^(0+384)
  6731  0CAD  3000               	movlw	0
  6732  0CAE  00B9               	movwf	(_tap_total+1)^(0+384)
  6733  0CAF  3000               	movlw	0
  6734  0CB0  00B8               	movwf	_tap_total^(0+384)
  6735                           
  6736                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6737  0CB1  0021               	movlb	1	; select bank1
  6738  0CB2  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6739  0CB3  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6740  0CB4                     l5680:	
  6741  0CB4  0020               	movlb	0	; select bank0
  6742  0CB5  0868               	movf	_num_taps,w
  6743  0CB6  0021               	movlb	1	; select bank1
  6744  0CB7  023E               	subwf	updateSwitchTap@iCnt^(0+128),w
  6745  0CB8  1803               	btfsc	3,0
  6746  0CB9  2CFE               	goto	l5682
  6747                           
  6748                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6749  0CBA  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6750  0CBB  00B6               	movwf	??_updateSwitchTap^(0+128)
  6751  0CBC  3001               	movlw	1
  6752  0CBD                     u6515:	
  6753  0CBD  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6754  0CBE  3EFF               	addlw	-1
  6755  0CBF  1D03               	skipz
  6756  0CC0  2CBD               	goto	u6515
  6757  0CC1  3536               	lslf	??_updateSwitchTap^(0+128),w
  6758  0CC2  3E04               	addlw	4
  6759  0CC3  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6760  0CC4  0086               	movwf	6
  6761  0CC5  3001               	movlw	1	; select bank3/4
  6762  0CC6  0087               	movwf	7
  6763  0CC7  3F40               	moviw [0]fsr1
  6764  0CC8  00B7               	movwf	(??_updateSwitchTap+1)^(0+128)
  6765  0CC9  3F41               	moviw [1]fsr1
  6766  0CCA  00B8               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6767  0CCB  3F42               	moviw [2]fsr1
  6768  0CCC  00B9               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  6769  0CCD  3F43               	moviw [3]fsr1
  6770  0CCE  00BA               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  6771  0CCF  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6772  0CD0  00BB               	movwf	(??_updateSwitchTap+5)^(0+128)
  6773  0CD1  3001               	movlw	1
  6774  0CD2                     u6525:	
  6775  0CD2  35BB               	lslf	(??_updateSwitchTap+5)^(0+128),f
  6776  0CD3  3EFF               	addlw	-1
  6777  0CD4  1D03               	skipz
  6778  0CD5  2CD2               	goto	u6525
  6779  0CD6  353B               	lslf	(??_updateSwitchTap+5)^(0+128),w
  6780  0CD7  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6781  0CD8  0086               	movwf	6
  6782  0CD9  3001               	movlw	1	; select bank3/4
  6783  0CDA  0087               	movwf	7
  6784  0CDB  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6785  0CDC  3FC0               	movwi [0]fsr1
  6786  0CDD  0838               	movf	(??_updateSwitchTap+2)^(0+128),w
  6787  0CDE  3FC1               	movwi [1]fsr1
  6788  0CDF  0839               	movf	(??_updateSwitchTap+3)^(0+128),w
  6789  0CE0  3FC2               	movwi [2]fsr1
  6790  0CE1  083A               	movf	(??_updateSwitchTap+4)^(0+128),w
  6791  0CE2  3FC3               	movwi [3]fsr1
  6792                           
  6793                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  6794  0CE3  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6795  0CE4  00B6               	movwf	??_updateSwitchTap^(0+128)
  6796  0CE5  3001               	movlw	1
  6797  0CE6                     u6535:	
  6798  0CE6  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6799  0CE7  3EFF               	addlw	-1
  6800  0CE8  1D03               	skipz
  6801  0CE9  2CE6               	goto	u6535
  6802  0CEA  3536               	lslf	??_updateSwitchTap^(0+128),w
  6803  0CEB  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6804  0CEC  0086               	movwf	6
  6805  0CED  3001               	movlw	1	; select bank3/4
  6806  0CEE  0087               	movwf	7
  6807  0CEF  3F40               	moviw [0]fsr1
  6808  0CF0  0023               	movlb	3	; select bank3
  6809  0CF1  07B8               	addwf	_tap_total^(0+384),f
  6810  0CF2  3F41               	moviw [1]fsr1
  6811  0CF3  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6812  0CF4  3F42               	moviw [2]fsr1
  6813  0CF5  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6814  0CF6  3F43               	moviw [3]fsr1
  6815  0CF7  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6816  0CF8  3001               	movlw	1
  6817  0CF9  0021               	movlb	1	; select bank1
  6818  0CFA  00B6               	movwf	??_updateSwitchTap^(0+128)
  6819  0CFB  0836               	movf	??_updateSwitchTap^(0+128),w
  6820  0CFC  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6821  0CFD  2CB4               	goto	l5680
  6822  0CFE                     l5682:	
  6823                           
  6824                           ;SwitchTap.c: 127: }
  6825                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  6826  0CFE  0020               	movlb	0	; select bank0
  6827  0CFF  0868               	movf	_num_taps,w
  6828  0D00  0021               	movlb	1	; select bank1
  6829  0D01  00B6               	movwf	??_updateSwitchTap^(0+128)
  6830  0D02  3001               	movlw	1
  6831  0D03                     u6555:	
  6832  0D03  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6833  0D04  3EFF               	addlw	-1
  6834  0D05  1D03               	skipz
  6835  0D06  2D03               	goto	u6555
  6836  0D07  3536               	lslf	??_updateSwitchTap^(0+128),w
  6837  0D08  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6838  0D09  0086               	movwf	6
  6839  0D0A  3001               	movlw	1	; select bank3/4
  6840  0D0B  0087               	movwf	7
  6841  0D0C  0020               	movlb	0	; select bank0
  6842  0D0D  0849               	movf	_tap_timer,w	;volatile
  6843  0D0E  3FC0               	movwi [0]fsr1
  6844  0D0F  084A               	movf	_tap_timer+1,w	;volatile
  6845  0D10  3FC1               	movwi [1]fsr1
  6846  0D11  084B               	movf	_tap_timer+2,w	;volatile
  6847  0D12  3FC2               	movwi [2]fsr1
  6848  0D13  084C               	movf	_tap_timer+3,w	;volatile
  6849  0D14  3FC3               	movwi [3]fsr1
  6850                           
  6851                           ;SwitchTap.c: 129: tap_total += tap_timer;
  6852  0D15  0849               	movf	_tap_timer,w	;volatile
  6853  0D16  0023               	movlb	3	; select bank3
  6854  0D17  07B8               	addwf	_tap_total^(0+384),f
  6855  0D18  0020               	movlb	0	; select bank0
  6856  0D19  084A               	movf	_tap_timer+1,w	;volatile
  6857  0D1A  0023               	movlb	3	; select bank3
  6858  0D1B  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6859  0D1C  0020               	movlb	0	; select bank0
  6860  0D1D  084B               	movf	_tap_timer+2,w	;volatile
  6861  0D1E  0023               	movlb	3	; select bank3
  6862  0D1F  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6863  0D20  0020               	movlb	0	; select bank0
  6864  0D21  084C               	movf	_tap_timer+3,w	;volatile
  6865  0D22  0023               	movlb	3	; select bank3
  6866  0D23  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6867  0D24                     l5686:	
  6868                           
  6869                           ;SwitchTap.c: 130: }
  6870                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  6871  0D24  0021               	movlb	1	; select bank1
  6872  0D25  083C               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  6873  0D26  00A0               	movwf	___aldiv@divisor^(0+128)
  6874  0D27  083D               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  6875  0D28  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  6876  0D29  0D89               	rlf	9,f
  6877  0D2A  3B89               	subwfb	9,f
  6878  0D2B  0989               	comf	9,f
  6879  0D2C  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  6880  0D2D  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  6881  0D2E  0023               	movlb	3	; select bank3
  6882  0D2F  083B               	movf	(_tap_total+3)^(0+384),w
  6883  0D30  0021               	movlb	1	; select bank1
  6884  0D31  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6885  0D32  0023               	movlb	3	; select bank3
  6886  0D33  083A               	movf	(_tap_total+2)^(0+384),w
  6887  0D34  0021               	movlb	1	; select bank1
  6888  0D35  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6889  0D36  0023               	movlb	3	; select bank3
  6890  0D37  0839               	movf	(_tap_total+1)^(0+384),w
  6891  0D38  0021               	movlb	1	; select bank1
  6892  0D39  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6893  0D3A  0023               	movlb	3	; select bank3
  6894  0D3B  0838               	movf	_tap_total^(0+384),w
  6895  0D3C  0021               	movlb	1	; select bank1
  6896  0D3D  00A4               	movwf	___aldiv@dividend^(0+128)
  6897  0D3E  3195  25AB         	fcall	___aldiv
  6898  0D40  0021               	movlb	1	; select bank1
  6899  0D41  0823               	movf	(?___aldiv+3)^(0+128),w
  6900  0D42  0020               	movlb	0	; select bank0
  6901  0D43  00DB               	movwf	_baseline_delay_time+3	;volatile
  6902  0D44  0021               	movlb	1	; select bank1
  6903  0D45  0822               	movf	(?___aldiv+2)^(0+128),w
  6904  0D46  0020               	movlb	0	; select bank0
  6905  0D47  00DA               	movwf	_baseline_delay_time+2	;volatile
  6906  0D48  0021               	movlb	1	; select bank1
  6907  0D49  0821               	movf	(?___aldiv+1)^(0+128),w
  6908  0D4A  0020               	movlb	0	; select bank0
  6909  0D4B  00D9               	movwf	_baseline_delay_time+1	;volatile
  6910  0D4C  0021               	movlb	1	; select bank1
  6911  0D4D  0820               	movf	?___aldiv^(0+128),w
  6912  0D4E  0020               	movlb	0	; select bank0
  6913  0D4F  00D8               	movwf	_baseline_delay_time	;volatile
  6914                           
  6915                           ;SwitchTap.c: 133: delay_time_changed = 1;
  6916  0D50  3001               	movlw	1
  6917  0D51  0023               	movlb	3	; select bank3
  6918  0D52  00E3               	movwf	_delay_time_changed^(0+384)
  6919  0D53  3000               	movlw	0
  6920  0D54  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  6921                           
  6922                           ;SwitchTap.c: 134: tap_timer = 0;
  6923  0D55  3000               	movlw	0
  6924  0D56  0020               	movlb	0	; select bank0
  6925  0D57  00CC               	movwf	_tap_timer+3	;volatile
  6926  0D58  3000               	movlw	0
  6927  0D59  00CB               	movwf	_tap_timer+2	;volatile
  6928  0D5A  3000               	movlw	0
  6929  0D5B  00CA               	movwf	_tap_timer+1	;volatile
  6930  0D5C  3000               	movlw	0
  6931  0D5D  00C9               	movwf	_tap_timer	;volatile
  6932                           
  6933                           ;SwitchTap.c: 136: tap_iteration++;
  6934  0D5E  3001               	movlw	1
  6935  0D5F  0022               	movlb	2	; select bank2
  6936  0D60  07E1               	addwf	_tap_iteration^(0+256),f
  6937  0D61  3000               	movlw	0
  6938  0D62  3DE2               	addwfc	(_tap_iteration+1)^(0+256),f
  6939                           
  6940                           ;SwitchTap.c: 137: }
  6941                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  6942  0D63  0008               	return
  6943  0D64                     l5694:	
  6944  0D64  3019               	movlw	25
  6945  0D65  0020               	movlb	0	; select bank0
  6946  0D66  0257               	subwf	_switchTap_pressed,w
  6947  0D67  1C03               	skipc
  6948  0D68  0008               	return
  6949                           
  6950                           ;SwitchTap.c: 140: switchTap_down = 0;
  6951  0D69  0022               	movlb	2	; select bank2
  6952  0D6A  01BD               	clrf	_switchTap_down^(0+256)
  6953                           
  6954                           ;SwitchTap.c: 141: switchTap_state = 0;
  6955  0D6B  01E5               	clrf	_switchTap_state^(0+256)
  6956                           
  6957                           ;SwitchTap.c: 147: setLongTapState(0);
  6958  0D6C  3000               	movlw	0
  6959  0D6D  0021               	movlb	1	; select bank1
  6960  0D6E  00A0               	movwf	setLongTapState@f_state^(0+128)
  6961  0D6F  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  6962  0D70  319E  2630         	fcall	_setLongTapState
  6963                           
  6964                           ;SwitchTap.c: 149: longTap_timer = 0;
  6965  0D72  0022               	movlb	2	; select bank2
  6966  0D73  01B2               	clrf	_longTap_timer^(0+256)	;volatile
  6967  0D74  01B3               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6968                           
  6969                           ;SwitchTap.c: 150: longTap_start = 0;
  6970  0D75  0020               	movlb	0	; select bank0
  6971  0D76  01D5               	clrf	_longTap_start
  6972                           
  6973                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  6974  0D77  3019               	movlw	25
  6975  0D78  0021               	movlb	1	; select bank1
  6976  0D79  00B6               	movwf	??_updateSwitchTap^(0+128)
  6977  0D7A  0836               	movf	??_updateSwitchTap^(0+128),w
  6978  0D7B  0020               	movlb	0	; select bank0
  6979  0D7C  00D7               	movwf	_switchTap_pressed
  6980  0D7D  0008               	return
  6981  0D7E                     __end_of_updateSwitchTap:	
  6982                           
  6983                           	psect	text3
  6984  1E30                     __ptext3:	
  6985 ;; *************** function _setLongTapState *****************
  6986 ;; Defined at:
  6987 ;;		line 167 in file "SwitchTap.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  f_state         2    0[BANK1 ] int 
  6990 ;; Auto vars:     Size  Location     Type
  6991 ;;		None
  6992 ;; Return value:  Size  Location     Type
  6993 ;;                  1    wreg      void 
  6994 ;; Registers used:
  6995 ;;		wreg, status,0
  6996 ;; Tracked objects:
  6997 ;;		On entry : 0/0
  6998 ;;		On exit  : 0/0
  6999 ;;		Unchanged: 0/0
  7000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7001 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7003 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7004 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7005 ;;Total ram usage:        4 bytes
  7006 ;; Hardware stack levels used:    1
  7007 ;; Hardware stack levels required when called:    3
  7008 ;; This function calls:
  7009 ;;		Nothing
  7010 ;; This function is called by:
  7011 ;;		_updateSwitchTap
  7012 ;; This function uses a non-reentrant model
  7013 ;;
  7014                           
  7015                           
  7016                           ;psect for function _setLongTapState
  7017  1E30                     _setLongTapState:	
  7018                           
  7019                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7020                           
  7021                           ;incstack = 0
  7022                           ; Regs used in _setLongTapState: [wreg+status,0]
  7023  1E30  0020               	movlb	0	; select bank0
  7024  1E31  0867               	movf	_longTap_state,w	;volatile
  7025  1E32  0021               	movlb	1	; select bank1
  7026  1E33  00A2               	movwf	??_setLongTapState^(0+128)
  7027  1E34  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7028  1E35  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7029  1E36  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7030  1E37  1D03               	skipz
  7031  1E38  2E3B               	goto	u5235
  7032  1E39  0820               	movf	setLongTapState@f_state^(0+128),w
  7033  1E3A  0622               	xorwf	??_setLongTapState^(0+128),w
  7034  1E3B                     u5235:	
  7035  1E3B  1903               	btfsc	3,2
  7036  1E3C  0008               	return
  7037                           
  7038                           ;SwitchTap.c: 169: longTap_state = f_state;
  7039  1E3D  0820               	movf	setLongTapState@f_state^(0+128),w
  7040  1E3E  00A2               	movwf	??_setLongTapState^(0+128)
  7041  1E3F  0822               	movf	??_setLongTapState^(0+128),w
  7042  1E40  0020               	movlb	0	; select bank0
  7043  1E41  00E7               	movwf	_longTap_state	;volatile
  7044                           
  7045                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7046  1E42  0021               	movlb	1	; select bank1
  7047  1E43  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7048  1E44  0022               	movlb	2	; select bank2
  7049  1E45  1C03               	skipc
  7050  1E46  128D               	bcf	13,5	;volatile
  7051  1E47  1803               	skipnc
  7052  1E48  168D               	bsf	13,5	;volatile
  7053  1E49  0008               	return
  7054  1E4A                     __end_of_setLongTapState:	
  7055                           
  7056                           	psect	text4
  7057  15AB                     __ptext4:	
  7058 ;; *************** function ___aldiv *****************
  7059 ;; Defined at:
  7060 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;  divisor         4    0[BANK1 ] long 
  7063 ;;  dividend        4    4[BANK1 ] long 
  7064 ;; Auto vars:     Size  Location     Type
  7065 ;;  quotient        4   11[BANK1 ] long 
  7066 ;;  sign            1   10[BANK1 ] unsigned char 
  7067 ;;  counter         1    9[BANK1 ] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  4    0[BANK1 ] long 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7077 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7078 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7079 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7080 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7081 ;;Total ram usage:       15 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    3
  7084 ;; This function calls:
  7085 ;;		Nothing
  7086 ;; This function is called by:
  7087 ;;		_updateSwitchTap
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           
  7092                           ;psect for function ___aldiv
  7093  15AB                     ___aldiv:	
  7094                           
  7095                           ;incstack = 0
  7096                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7097  15AB  0021               	movlb	1	; select bank1
  7098  15AC  01AA               	clrf	___aldiv@sign^(0+128)
  7099  15AD  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7100  15AE  2DBC               	goto	l1377
  7101  15AF  09A0               	comf	___aldiv@divisor^(0+128),f
  7102  15B0  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7103  15B1  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7104  15B2  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7105  15B3  0AA0               	incf	___aldiv@divisor^(0+128),f
  7106  15B4  1903               	skipnz
  7107  15B5  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7108  15B6  1903               	skipnz
  7109  15B7  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7110  15B8  1903               	skipnz
  7111  15B9  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7112  15BA  01AA               	clrf	___aldiv@sign^(0+128)
  7113  15BB  0AAA               	incf	___aldiv@sign^(0+128),f
  7114  15BC                     l1377:	
  7115  15BC  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7116  15BD  2DCD               	goto	l5116
  7117  15BE  09A4               	comf	___aldiv@dividend^(0+128),f
  7118  15BF  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7119  15C0  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7120  15C1  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7121  15C2  0AA4               	incf	___aldiv@dividend^(0+128),f
  7122  15C3  1903               	skipnz
  7123  15C4  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7124  15C5  1903               	skipnz
  7125  15C6  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7126  15C7  1903               	skipnz
  7127  15C8  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7128  15C9  3001               	movlw	1
  7129  15CA  00A8               	movwf	??___aldiv^(0+128)
  7130  15CB  0828               	movf	??___aldiv^(0+128),w
  7131  15CC  06AA               	xorwf	___aldiv@sign^(0+128),f
  7132  15CD                     l5116:	
  7133  15CD  3000               	movlw	0
  7134  15CE  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7135  15CF  3000               	movlw	0
  7136  15D0  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7137  15D1  3000               	movlw	0
  7138  15D2  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7139  15D3  3000               	movlw	0
  7140  15D4  00AB               	movwf	___aldiv@quotient^(0+128)
  7141  15D5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7142  15D6  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7143  15D7  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7144  15D8  0420               	iorwf	___aldiv@divisor^(0+128),w
  7145  15D9  1903               	skipnz
  7146  15DA  2E16               	goto	l5138
  7147  15DB  01A9               	clrf	___aldiv@counter^(0+128)
  7148  15DC  0AA9               	incf	___aldiv@counter^(0+128),f
  7149  15DD                     l5124:	
  7150  15DD  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7151  15DE  2DEB               	goto	l5126
  7152  15DF  3001               	movlw	1
  7153  15E0                     u5275:	
  7154  15E0  35A0               	lslf	___aldiv@divisor^(0+128),f
  7155  15E1  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7156  15E2  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7157  15E3  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7158  15E4  0B89               	decfsz	9,f
  7159  15E5  2DE0               	goto	u5275
  7160  15E6  3001               	movlw	1
  7161  15E7  00A8               	movwf	??___aldiv^(0+128)
  7162  15E8  0828               	movf	??___aldiv^(0+128),w
  7163  15E9  07A9               	addwf	___aldiv@counter^(0+128),f
  7164  15EA  2DDD               	goto	l5124
  7165  15EB                     l5126:	
  7166  15EB  3001               	movlw	1
  7167  15EC                     u5295:	
  7168  15EC  35AB               	lslf	___aldiv@quotient^(0+128),f
  7169  15ED  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7170  15EE  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7171  15EF  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7172  15F0  0B89               	decfsz	9,f
  7173  15F1  2DEC               	goto	u5295
  7174  15F2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7175  15F3  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7176  15F4  1D03               	skipz
  7177  15F5  2E00               	goto	u5305
  7178  15F6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7179  15F7  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7180  15F8  1D03               	skipz
  7181  15F9  2E00               	goto	u5305
  7182  15FA  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7183  15FB  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7184  15FC  1D03               	skipz
  7185  15FD  2E00               	goto	u5305
  7186  15FE  0820               	movf	___aldiv@divisor^(0+128),w
  7187  15FF  0224               	subwf	___aldiv@dividend^(0+128),w
  7188  1600                     u5305:	
  7189  1600  1C03               	skipc
  7190  1601  2E0B               	goto	l5134
  7191  1602  0820               	movf	___aldiv@divisor^(0+128),w
  7192  1603  02A4               	subwf	___aldiv@dividend^(0+128),f
  7193  1604  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7194  1605  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7195  1606  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7196  1607  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7197  1608  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7198  1609  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7199  160A  142B               	bsf	___aldiv@quotient^(0+128),0
  7200  160B                     l5134:	
  7201  160B  3001               	movlw	1
  7202  160C                     u5315:	
  7203  160C  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7204  160D  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7205  160E  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7206  160F  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7207  1610  0B89               	decfsz	9,f
  7208  1611  2E0C               	goto	u5315
  7209  1612  3001               	movlw	1
  7210  1613  02A9               	subwf	___aldiv@counter^(0+128),f
  7211  1614  1D03               	btfss	3,2
  7212  1615  2DEB               	goto	l5126
  7213  1616                     l5138:	
  7214  1616  082A               	movf	___aldiv@sign^(0+128),w
  7215  1617  1903               	btfsc	3,2
  7216  1618  2E24               	goto	l5142
  7217  1619  09AB               	comf	___aldiv@quotient^(0+128),f
  7218  161A  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7219  161B  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7220  161C  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7221  161D  0AAB               	incf	___aldiv@quotient^(0+128),f
  7222  161E  1903               	skipnz
  7223  161F  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7224  1620  1903               	skipnz
  7225  1621  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7226  1622  1903               	skipnz
  7227  1623  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7228  1624                     l5142:	
  7229  1624  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7230  1625  00A3               	movwf	(?___aldiv+3)^(0+128)
  7231  1626  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7232  1627  00A2               	movwf	(?___aldiv+2)^(0+128)
  7233  1628  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7234  1629  00A1               	movwf	(?___aldiv+1)^(0+128)
  7235  162A  082B               	movf	___aldiv@quotient^(0+128),w
  7236  162B  00A0               	movwf	?___aldiv^(0+128)
  7237  162C  0008               	return
  7238  162D                     __end_of___aldiv:	
  7239                           
  7240                           	psect	text5
  7241  09BA                     __ptext5:	
  7242 ;; *************** function _updateSwitchBypass *****************
  7243 ;; Defined at:
  7244 ;;		line 34 in file "SwitchBypass.c"
  7245 ;; Parameters:    Size  Location     Type
  7246 ;;		None
  7247 ;; Auto vars:     Size  Location     Type
  7248 ;;		None
  7249 ;; Return value:  Size  Location     Type
  7250 ;;                  1    wreg      void 
  7251 ;; Registers used:
  7252 ;;		wreg, status,2, status,0, pclath, cstack
  7253 ;; Tracked objects:
  7254 ;;		On entry : 0/0
  7255 ;;		On exit  : 0/0
  7256 ;;		Unchanged: 0/0
  7257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7260 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7261 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7262 ;;Total ram usage:        2 bytes
  7263 ;; Hardware stack levels used:    1
  7264 ;; Hardware stack levels required when called:    6
  7265 ;; This function calls:
  7266 ;;		_setDoublePressState
  7267 ;;		_setFeedbackState
  7268 ;;		_setSwitchBypassState
  7269 ;; This function is called by:
  7270 ;;		_main
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           
  7275                           ;psect for function _updateSwitchBypass
  7276  09BA                     _updateSwitchBypass:	
  7277                           
  7278                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7279                           
  7280                           ;incstack = 0
  7281                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7282  09BA  0020               	movlb	0	; select bank0
  7283  09BB  1890               	btfsc	16,1	;volatile
  7284  09BC  29D0               	goto	l5524
  7285                           
  7286                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7287  09BD  0022               	movlb	2	; select bank2
  7288  09BE  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7289  09BF  3A80               	xorlw	128
  7290  09C0  0021               	movlb	1	; select bank1
  7291  09C1  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7292  09C2  3080               	movlw	128
  7293  09C3  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7294  09C4  1D03               	skipz
  7295  09C5  29C9               	goto	u6135
  7296  09C6  3001               	movlw	1
  7297  09C7  0022               	movlb	2	; select bank2
  7298  09C8  0234               	subwf	_switchBypass_pressed^(0+256),w
  7299  09C9                     u6135:	
  7300  09C9  1C03               	skipc
  7301  09CA  29E3               	goto	l5528
  7302                           
  7303                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7304  09CB  30FF               	movlw	255
  7305  09CC  0022               	movlb	2	; select bank2
  7306  09CD  07B4               	addwf	_switchBypass_pressed^(0+256),f
  7307  09CE  30FF               	movlw	255
  7308  09CF  29E2               	goto	L2
  7309  09D0                     l5524:	
  7310                           ;SwitchBypass.c: 44: }
  7311                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7312                           
  7313  09D0  0022               	movlb	2	; select bank2
  7314  09D1  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7315  09D2  3A80               	xorlw	128
  7316  09D3  0021               	movlb	1	; select bank1
  7317  09D4  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7318  09D5  3080               	movlw	128
  7319  09D6  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7320  09D7  1D03               	skipz
  7321  09D8  29DC               	goto	u6145
  7322  09D9  3019               	movlw	25
  7323  09DA  0022               	movlb	2	; select bank2
  7324  09DB  0234               	subwf	_switchBypass_pressed^(0+256),w
  7325  09DC                     u6145:	
  7326  09DC  1803               	skipnc
  7327  09DD  29E3               	goto	l5528
  7328                           
  7329                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7330  09DE  3001               	movlw	1
  7331  09DF  0022               	movlb	2	; select bank2
  7332  09E0  07B4               	addwf	_switchBypass_pressed^(0+256),f
  7333  09E1  3000               	movlw	0
  7334  09E2                     L2:	
  7335  09E2  3DB5               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7336  09E3                     l5528:	
  7337                           
  7338                           ;SwitchBypass.c: 47: }
  7339                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7340  09E3  0022               	movlb	2	; select bank2
  7341  09E4  0834               	movf	_switchBypass_pressed^(0+256),w
  7342  09E5  0435               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7343  09E6  1D03               	btfss	3,2
  7344  09E7  2A44               	goto	l5568
  7345                           
  7346                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7347  09E8  0020               	movlb	0	; select bank0
  7348  09E9  0854               	movf	_feedback_start,w
  7349  09EA  1D03               	btfss	3,2
  7350  09EB  29F1               	goto	l5536
  7351                           
  7352                           ;SwitchBypass.c: 57: feedback_start = 1;
  7353  09EC  01D4               	clrf	_feedback_start
  7354  09ED  0AD4               	incf	_feedback_start,f
  7355                           
  7356                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7357  09EE  0022               	movlb	2	; select bank2
  7358  09EF  01A6               	clrf	_feedback_timer^(0+256)	;volatile
  7359  09F0  01A7               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7360  09F1                     l5536:	
  7361                           
  7362                           ;SwitchBypass.c: 59: }
  7363                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7364  09F1  0020               	movlb	0	; select bank0
  7365  09F2  0863               	movf	_long_press_limit+1,w
  7366  09F3  0022               	movlb	2	; select bank2
  7367  09F4  0227               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7368  09F5  1D03               	skipz
  7369  09F6  29FB               	goto	u6175
  7370  09F7  0020               	movlb	0	; select bank0
  7371  09F8  0862               	movf	_long_press_limit,w
  7372  09F9  0022               	movlb	2	; select bank2
  7373  09FA  0226               	subwf	_feedback_timer^(0+256),w	;volatile
  7374  09FB                     u6175:	
  7375  09FB  1C03               	skipc
  7376  09FC  2A1B               	goto	l5550
  7377  09FD  0020               	movlb	0	; select bank0
  7378  09FE  0866               	movf	_feedback_state,w	;volatile
  7379  09FF  1D03               	btfss	3,2
  7380  0A00  2A1B               	goto	l5550
  7381  0A01  0853               	movf	_doubleTap_state,w	;volatile
  7382  0A02  1D03               	btfss	3,2
  7383  0A03  2A1B               	goto	l5550
  7384                           
  7385                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7386  0A04  0022               	movlb	2	; select bank2
  7387  0A05  110D               	bcf	13,2	;volatile
  7388                           
  7389                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7390  0A06  0020               	movlb	0	; select bank0
  7391  0A07  0355               	decf	_longTap_start,w
  7392  0A08  1903               	btfsc	3,2
  7393  0A09  2A13               	goto	l5548
  7394                           
  7395                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7396  0A0A  3001               	movlw	1
  7397  0A0B  0021               	movlb	1	; select bank1
  7398  0A0C  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7399  0A0D  3000               	movlw	0
  7400  0A0E  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7401  0A0F  319E  2616  3189   	fcall	_setFeedbackState
  7402                           
  7403                           ;SwitchBypass.c: 67: } else {
  7404  0A12  2A1B               	goto	l5550
  7405  0A13                     l5548:	
  7406                           
  7407                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7408  0A13  3001               	movlw	1
  7409  0A14  0021               	movlb	1	; select bank1
  7410  0A15  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7411  0A16  3000               	movlw	0
  7412  0A17  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7413  0A18  319F  2763  3189   	fcall	_setDoublePressState
  7414  0A1B                     l5550:	
  7415                           
  7416                           ;SwitchBypass.c: 69: }
  7417                           ;SwitchBypass.c: 70: }
  7418                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7419  0A1B  0020               	movlb	0	; select bank0
  7420  0A1C  0853               	movf	_doubleTap_state,w	;volatile
  7421  0A1D  1D03               	btfss	3,2
  7422  0A1E  2A40               	goto	l1085
  7423  0A1F  0866               	movf	_feedback_state,w	;volatile
  7424  0A20  1D03               	btfss	3,2
  7425  0A21  2A40               	goto	l1085
  7426                           
  7427                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7428  0A22  0369               	decf	_switchBypass_state,w
  7429  0A23  1D03               	btfss	3,2
  7430  0A24  2A33               	goto	l5562
  7431                           
  7432                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7433  0A25  0023               	movlb	3	; select bank3
  7434  0A26  0367               	decf	_switchBypass_up^(0+384),w
  7435  0A27  0468               	iorwf	(_switchBypass_up+1)^(0+384),w
  7436  0A28  1D03               	btfss	3,2
  7437  0A29  2A40               	goto	l1085
  7438                           
  7439                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7440  0A2A  0022               	movlb	2	; select bank2
  7441  0A2B  01E4               	clrf	_currentBypassState^(0+256)
  7442  0A2C  0AE4               	incf	_currentBypassState^(0+256),f
  7443                           
  7444                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7445  0A2D  3001               	movlw	1
  7446  0A2E  0023               	movlb	3	; select bank3
  7447  0A2F  00D2               	movwf	_switchBypass_toggle^(0+384)
  7448  0A30  3000               	movlw	0
  7449  0A31  00D3               	movwf	(_switchBypass_toggle^(0+384)+1)
  7450                           
  7451                           ;SwitchBypass.c: 78: }
  7452                           ;SwitchBypass.c: 93: } else {
  7453  0A32  2A40               	goto	l1085
  7454  0A33                     l5562:	
  7455                           
  7456                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7457  0A33  0022               	movlb	2	; select bank2
  7458  0A34  0337               	decf	_bypass_turning_on^(0+256),w
  7459  0A35  1903               	btfsc	3,2
  7460  0A36  2A40               	goto	l1085
  7461                           
  7462                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7463  0A37  01E4               	clrf	_currentBypassState^(0+256)
  7464                           
  7465                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7466  0A38  01B7               	clrf	_bypass_turning_on^(0+256)
  7467  0A39  0AB7               	incf	_bypass_turning_on^(0+256),f
  7468                           
  7469                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7470  0A3A  0023               	movlb	3	; select bank3
  7471  0A3B  01D2               	clrf	_switchBypass_toggle^(0+384)
  7472  0A3C  01D3               	clrf	(_switchBypass_toggle+1)^(0+384)
  7473                           
  7474                           ;SwitchBypass.c: 101: feedback_state = 0;
  7475  0A3D  0020               	movlb	0	; select bank0
  7476  0A3E  01E6               	clrf	_feedback_state	;volatile
  7477                           
  7478                           ;SwitchBypass.c: 102: feedback_start = 0;
  7479  0A3F  01D4               	clrf	_feedback_start
  7480  0A40                     l1085:	
  7481                           
  7482                           ;SwitchBypass.c: 103: }
  7483                           ;SwitchBypass.c: 104: }
  7484                           ;SwitchBypass.c: 106: }
  7485                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7486  0A40  0023               	movlb	3	; select bank3
  7487  0A41  01E7               	clrf	_switchBypass_up^(0+384)
  7488  0A42  01E8               	clrf	(_switchBypass_up+1)^(0+384)
  7489                           
  7490                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7491  0A43  0008               	return
  7492  0A44                     l5568:	
  7493  0A44  0022               	movlb	2	; select bank2
  7494  0A45  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7495  0A46  3A80               	xorlw	128
  7496  0A47  0021               	movlb	1	; select bank1
  7497  0A48  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7498  0A49  3080               	movlw	128
  7499  0A4A  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7500  0A4B  1D03               	skipz
  7501  0A4C  2A50               	goto	u6265
  7502  0A4D  3019               	movlw	25
  7503  0A4E  0022               	movlb	2	; select bank2
  7504  0A4F  0234               	subwf	_switchBypass_pressed^(0+256),w
  7505  0A50                     u6265:	
  7506  0A50  1C03               	skipc
  7507  0A51  0008               	return
  7508                           
  7509                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7510  0A52  0020               	movlb	0	; select bank0
  7511  0A53  0353               	decf	_doubleTap_state,w	;volatile
  7512  0A54  1D03               	btfss	3,2
  7513  0A55  2A5F               	goto	l5574
  7514                           
  7515                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7516  0A56  0022               	movlb	2	; select bank2
  7517  0A57  0864               	movf	_currentBypassState^(0+256),w
  7518  0A58  0021               	movlb	1	; select bank1
  7519  0A59  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7520  0A5A  01B7               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7521  0A5B  0836               	movf	??_updateSwitchBypass^(0+128),w
  7522  0A5C  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7523  0A5D  0837               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7524  0A5E  2A7C               	goto	L3
  7525  0A5F                     l5574:	
  7526                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7527                           
  7528  0A5F  0022               	movlb	2	; select bank2
  7529  0A60  0337               	decf	_bypass_turning_on^(0+256),w
  7530  0A61  1903               	btfsc	3,2
  7531  0A62  2A67               	goto	l5578
  7532  0A63  0020               	movlb	0	; select bank0
  7533  0A64  0366               	decf	_feedback_state,w	;volatile
  7534  0A65  1D03               	btfss	3,2
  7535  0A66  2A6D               	goto	l5580
  7536  0A67                     l5578:	
  7537                           
  7538                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7539  0A67  3001               	movlw	1
  7540  0A68  0021               	movlb	1	; select bank1
  7541  0A69  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7542  0A6A  3000               	movlw	0
  7543  0A6B  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7544  0A6C  2A7D               	goto	L4
  7545  0A6D                     l5580:	
  7546                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7547                           
  7548  0A6D  0023               	movlb	3	; select bank3
  7549  0A6E  0352               	decf	_switchBypass_toggle^(0+384),w
  7550  0A6F  0453               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7551  0A70  1D03               	btfss	3,2
  7552  0A71  2A80               	goto	l5588
  7553  0A72  0020               	movlb	0	; select bank0
  7554  0A73  0866               	movf	_feedback_state,w	;volatile
  7555  0A74  1D03               	btfss	3,2
  7556  0A75  2A80               	goto	l5588
  7557  0A76  0853               	movf	_doubleTap_state,w	;volatile
  7558  0A77  1D03               	btfss	3,2
  7559  0A78  2A80               	goto	l5588
  7560                           
  7561                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7562  0A79  3000               	movlw	0
  7563  0A7A  0021               	movlb	1	; select bank1
  7564  0A7B  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7565  0A7C                     L3:	
  7566  0A7C  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7567  0A7D                     L4:	
  7568  0A7D  3192  2250  3189   	fcall	_setSwitchBypassState
  7569  0A80                     l5588:	
  7570                           
  7571                           ;SwitchBypass.c: 115: }
  7572                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7573  0A80  0020               	movlb	0	; select bank0
  7574  0A81  0C69               	rrf	_switchBypass_state,w
  7575  0A82  0022               	movlb	2	; select bank2
  7576  0A83  1C03               	skipc
  7577  0A84  110D               	bcf	13,2	;volatile
  7578  0A85  1803               	skipnc
  7579  0A86  150D               	bsf	13,2	;volatile
  7580                           
  7581                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7582  0A87  3000               	movlw	0
  7583  0A88  0021               	movlb	1	; select bank1
  7584  0A89  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7585  0A8A  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7586  0A8B  319E  2616  3189   	fcall	_setFeedbackState
  7587                           
  7588                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7589  0A8E  3000               	movlw	0
  7590  0A8F  0021               	movlb	1	; select bank1
  7591  0A90  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7592  0A91  00B3               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7593  0A92  319F  2763         	fcall	_setDoublePressState
  7594                           
  7595                           ;SwitchBypass.c: 122: feedback_start = 0;
  7596  0A94  0020               	movlb	0	; select bank0
  7597  0A95  01D4               	clrf	_feedback_start
  7598                           
  7599                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7600  0A96  0022               	movlb	2	; select bank2
  7601  0A97  01B7               	clrf	_bypass_turning_on^(0+256)
  7602                           
  7603                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7604  0A98  0023               	movlb	3	; select bank3
  7605  0A99  01D2               	clrf	_switchBypass_toggle^(0+384)
  7606  0A9A  01D3               	clrf	(_switchBypass_toggle+1)^(0+384)
  7607                           
  7608                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7609  0A9B  3001               	movlw	1
  7610  0A9C  00E7               	movwf	_switchBypass_up^(0+384)
  7611  0A9D  3000               	movlw	0
  7612  0A9E  00E8               	movwf	(_switchBypass_up^(0+384)+1)
  7613                           
  7614                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7615  0A9F  3019               	movlw	25
  7616  0AA0  0022               	movlb	2	; select bank2
  7617  0AA1  00B4               	movwf	_switchBypass_pressed^(0+256)
  7618  0AA2  3000               	movlw	0
  7619  0AA3  00B5               	movwf	(_switchBypass_pressed^(0+256)+1)
  7620  0AA4  0008               	return
  7621  0AA5                     __end_of_updateSwitchBypass:	
  7622                           
  7623                           	psect	text6
  7624  1E16                     __ptext6:	
  7625 ;; *************** function _setFeedbackState *****************
  7626 ;; Defined at:
  7627 ;;		line 151 in file "SwitchBypass.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  f_state         2    0[BANK1 ] int 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7641 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7643 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7644 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7645 ;;Total ram usage:        4 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    3
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_updateSwitchBypass
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           
  7656                           ;psect for function _setFeedbackState
  7657  1E16                     _setFeedbackState:	
  7658                           
  7659                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7660                           
  7661                           ;incstack = 0
  7662                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7663  1E16  0020               	movlb	0	; select bank0
  7664  1E17  0866               	movf	_feedback_state,w	;volatile
  7665  1E18  0021               	movlb	1	; select bank1
  7666  1E19  00A2               	movwf	??_setFeedbackState^(0+128)
  7667  1E1A  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7668  1E1B  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7669  1E1C  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7670  1E1D  1D03               	skipz
  7671  1E1E  2E21               	goto	u5205
  7672  1E1F  0820               	movf	setFeedbackState@f_state^(0+128),w
  7673  1E20  0622               	xorwf	??_setFeedbackState^(0+128),w
  7674  1E21                     u5205:	
  7675  1E21  1903               	btfsc	3,2
  7676  1E22  0008               	return
  7677                           
  7678                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7679  1E23  0820               	movf	setFeedbackState@f_state^(0+128),w
  7680  1E24  00A2               	movwf	??_setFeedbackState^(0+128)
  7681  1E25  0822               	movf	??_setFeedbackState^(0+128),w
  7682  1E26  0020               	movlb	0	; select bank0
  7683  1E27  00E6               	movwf	_feedback_state	;volatile
  7684                           
  7685                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7686  1E28  0021               	movlb	1	; select bank1
  7687  1E29  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7688  1E2A  0022               	movlb	2	; select bank2
  7689  1E2B  1C03               	skipc
  7690  1E2C  118D               	bcf	13,3	;volatile
  7691  1E2D  1803               	skipnc
  7692  1E2E  158D               	bsf	13,3	;volatile
  7693  1E2F  0008               	return
  7694  1E30                     __end_of_setFeedbackState:	
  7695                           
  7696                           	psect	text7
  7697  1F63                     __ptext7:	
  7698 ;; *************** function _setDoublePressState *****************
  7699 ;; Defined at:
  7700 ;;		line 20 in file "preset_programming.c"
  7701 ;; Parameters:    Size  Location     Type
  7702 ;;  f_state         2   18[BANK1 ] int 
  7703 ;; Auto vars:     Size  Location     Type
  7704 ;;		None
  7705 ;; Return value:  Size  Location     Type
  7706 ;;                  1    wreg      void 
  7707 ;; Registers used:
  7708 ;;		wreg, status,2, status,0, pclath, cstack
  7709 ;; Tracked objects:
  7710 ;;		On entry : 0/0
  7711 ;;		On exit  : 0/0
  7712 ;;		Unchanged: 0/0
  7713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7714 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7716 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7717 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7718 ;;Total ram usage:        4 bytes
  7719 ;; Hardware stack levels used:    1
  7720 ;; Hardware stack levels required when called:    5
  7721 ;; This function calls:
  7722 ;;		_wait_ms
  7723 ;; This function is called by:
  7724 ;;		_updateSwitchBypass
  7725 ;;		_updateSwitchTap
  7726 ;; This function uses a non-reentrant model
  7727 ;;
  7728                           
  7729                           
  7730                           ;psect for function _setDoublePressState
  7731  1F63                     _setDoublePressState:	
  7732                           
  7733                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  7734                           
  7735                           ;incstack = 0
  7736                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  7737  1F63  0020               	movlb	0	; select bank0
  7738  1F64  0853               	movf	_doubleTap_state,w	;volatile
  7739  1F65  0021               	movlb	1	; select bank1
  7740  1F66  00B4               	movwf	??_setDoublePressState^(0+128)
  7741  1F67  01B5               	clrf	(??_setDoublePressState^(0+128)+1)
  7742  1F68  0833               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7743  1F69  0635               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7744  1F6A  1D03               	skipz
  7745  1F6B  2F6E               	goto	u5215
  7746  1F6C  0832               	movf	setDoublePressState@f_state^(0+128),w
  7747  1F6D  0634               	xorwf	??_setDoublePressState^(0+128),w
  7748  1F6E                     u5215:	
  7749  1F6E  1903               	btfsc	3,2
  7750  1F6F  0008               	return
  7751                           
  7752                           ;preset_programming.c: 22: doubleTap_state = f_state;
  7753  1F70  0832               	movf	setDoublePressState@f_state^(0+128),w
  7754  1F71  00B4               	movwf	??_setDoublePressState^(0+128)
  7755  1F72  0834               	movf	??_setDoublePressState^(0+128),w
  7756  1F73  0020               	movlb	0	; select bank0
  7757  1F74  00D3               	movwf	_doubleTap_state	;volatile
  7758                           
  7759                           ;preset_programming.c: 23: if (f_state == 1) {
  7760  1F75  0021               	movlb	1	; select bank1
  7761  1F76  0332               	decf	setDoublePressState@f_state^(0+128),w
  7762  1F77  0433               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7763  1F78  1D03               	btfss	3,2
  7764  1F79  2F7D               	goto	l5094
  7765                           
  7766                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  7767  1F7A  0022               	movlb	2	; select bank2
  7768  1F7B  120D               	bcf	13,4	;volatile
  7769                           
  7770                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  7771  1F7C  110D               	bcf	13,2	;volatile
  7772  1F7D                     l5094:	
  7773                           
  7774                           ;preset_programming.c: 26: }
  7775                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  7776  1F7D  0021               	movlb	1	; select bank1
  7777  1F7E  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7778  1F7F  0022               	movlb	2	; select bank2
  7779  1F80  1C03               	skipc
  7780  1F81  108D               	bcf	13,1	;volatile
  7781  1F82  1803               	skipnc
  7782  1F83  148D               	bsf	13,1	;volatile
  7783                           
  7784                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  7785  1F84  0021               	movlb	1	; select bank1
  7786  1F85  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7787  1F86  0022               	movlb	2	; select bank2
  7788  1F87  1C03               	skipc
  7789  1F88  100D               	bcf	13,0	;volatile
  7790  1F89  1803               	skipnc
  7791  1F8A  140D               	bsf	13,0	;volatile
  7792                           
  7793                           ;preset_programming.c: 31: wait_ms(20);
  7794  1F8B  3014               	movlw	20
  7795  1F8C  0021               	movlb	1	; select bank1
  7796  1F8D  00AC               	movwf	wait_ms@timeSec^(0+128)
  7797  1F8E  3000               	movlw	0
  7798  1F8F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7799  1F90  319F  2793         	fcall	_wait_ms
  7800  1F92  0008               	return
  7801  1F93                     __end_of_setDoublePressState:	
  7802                           
  7803                           	psect	text8
  7804  1EA9                     __ptext8:	
  7805 ;; *************** function _showBootSequence *****************
  7806 ;; Defined at:
  7807 ;;		line 86 in file "LEDs.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;		None
  7810 ;; Auto vars:     Size  Location     Type
  7811 ;;		None
  7812 ;; Return value:  Size  Location     Type
  7813 ;;                  1    wreg      void 
  7814 ;; Registers used:
  7815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7816 ;; Tracked objects:
  7817 ;;		On entry : 0/0
  7818 ;;		On exit  : 0/0
  7819 ;;		Unchanged: 0/0
  7820 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7823 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7824 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7825 ;;Total ram usage:        1 bytes
  7826 ;; Hardware stack levels used:    1
  7827 ;; Hardware stack levels required when called:    6
  7828 ;; This function calls:
  7829 ;;		_getCurrentLEDState
  7830 ;;		_restoreLEDState
  7831 ;;		_solidring_tactiles
  7832 ;;		_star_tactiles
  7833 ;; This function is called by:
  7834 ;;		_main
  7835 ;; This function uses a non-reentrant model
  7836 ;;
  7837                           
  7838                           
  7839                           ;psect for function _showBootSequence
  7840  1EA9                     _showBootSequence:	
  7841                           
  7842                           ;LEDs.c: 87: getCurrentLEDState();
  7843                           
  7844                           ;incstack = 0
  7845                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7846  1EA9  319D  25FD  319E   	fcall	_getCurrentLEDState
  7847                           
  7848                           ;LEDs.c: 88: suspend_blink = 1;
  7849  1EAC  3001               	movlw	1
  7850  1EAD  0021               	movlb	1	; select bank1
  7851  1EAE  00B9               	movwf	??_showBootSequence^(0+128)
  7852  1EAF  0839               	movf	??_showBootSequence^(0+128),w
  7853  1EB0  0020               	movlb	0	; select bank0
  7854  1EB1  00D6               	movwf	_suspend_blink	;volatile
  7855                           
  7856                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  7857  1EB2  0022               	movlb	2	; select bank2
  7858  1EB3  120D               	bcf	13,4	;volatile
  7859                           
  7860                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  7861  1EB4  110D               	bcf	13,2	;volatile
  7862                           
  7863                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  7864  1EB5  128D               	bcf	13,5	;volatile
  7865                           
  7866                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  7867  1EB6  118D               	bcf	13,3	;volatile
  7868                           
  7869                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  7870  1EB7  100D               	bcf	13,0	;volatile
  7871                           
  7872                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  7873  1EB8  108D               	bcf	13,1	;volatile
  7874                           
  7875                           ;LEDs.c: 113: star_tactiles(0);
  7876  1EB9  3000               	movlw	0
  7877  1EBA  3194  2444  319E   	fcall	_star_tactiles
  7878                           
  7879                           ;LEDs.c: 114: star_tactiles(0);
  7880  1EBD  3000               	movlw	0
  7881  1EBE  3194  2444  319E   	fcall	_star_tactiles
  7882                           
  7883                           ;LEDs.c: 115: star_tactiles(1);
  7884  1EC1  3001               	movlw	1
  7885  1EC2  3194  2444  319E   	fcall	_star_tactiles
  7886                           
  7887                           ;LEDs.c: 116: star_tactiles(1);
  7888  1EC5  3001               	movlw	1
  7889  1EC6  3194  2444  319E   	fcall	_star_tactiles
  7890                           
  7891                           ;LEDs.c: 118: solidring_tactiles();
  7892  1EC9  3188  2000  319E   	fcall	_solidring_tactiles
  7893                           
  7894                           ;LEDs.c: 119: solidring_tactiles();
  7895  1ECC  3188  2000  319E   	fcall	_solidring_tactiles
  7896                           
  7897                           ;LEDs.c: 122: suspend_blink = 0;
  7898  1ECF  0020               	movlb	0	; select bank0
  7899  1ED0  01D6               	clrf	_suspend_blink	;volatile
  7900                           
  7901                           ;LEDs.c: 123: restoreLEDState();
  7902  1ED1  319E  264A         	fcall	_restoreLEDState
  7903  1ED3  0008               	return
  7904  1ED4                     __end_of_showBootSequence:	
  7905                           
  7906                           	psect	text9
  7907  1444                     __ptext9:	
  7908 ;; *************** function _star_tactiles *****************
  7909 ;; Defined at:
  7910 ;;		line 194 in file "LEDs.c"
  7911 ;; Parameters:    Size  Location     Type
  7912 ;;  reverse         1    wreg     unsigned char 
  7913 ;; Auto vars:     Size  Location     Type
  7914 ;;  reverse         1   20[BANK1 ] unsigned char 
  7915 ;;  iLed            2   23[BANK1 ] int 
  7916 ;;  iLed            2   21[BANK1 ] int 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;                  1    wreg      void 
  7919 ;; Registers used:
  7920 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7927 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7928 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7929 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7930 ;;Total ram usage:        7 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    5
  7933 ;; This function calls:
  7934 ;;		_set_leds_bottom
  7935 ;;		_set_leds_top
  7936 ;;		_wait_ms
  7937 ;; This function is called by:
  7938 ;;		_showBootSequence
  7939 ;; This function uses a non-reentrant model
  7940 ;;
  7941                           
  7942                           
  7943                           ;psect for function _star_tactiles
  7944  1444                     _star_tactiles:	
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7948                           ;star_tactiles@reverse stored from wreg
  7949  1444  0021               	movlb	1	; select bank1
  7950  1445  00B4               	movwf	star_tactiles@reverse^(0+128)
  7951                           
  7952                           ;LEDs.c: 195: if (reverse == 1) {
  7953  1446  0334               	decf	star_tactiles@reverse^(0+128),w
  7954  1447  1D03               	btfss	3,2
  7955  1448  2C79               	goto	l5020
  7956                           
  7957                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  7958  1449  3005               	movlw	5
  7959  144A  00B5               	movwf	star_tactiles@iLed^(0+128)
  7960  144B  3000               	movlw	0
  7961  144C  00B6               	movwf	(star_tactiles@iLed^(0+128)+1)
  7962  144D                     L5:	
  7963  144D  1BB6               	btfsc	(star_tactiles@iLed+1)^(0+128),7
  7964  144E  0008               	return
  7965                           
  7966                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  7967  144F  0836               	movf	(star_tactiles@iLed+1)^(0+128),w
  7968  1450  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  7969  1451  0835               	movf	star_tactiles@iLed^(0+128),w
  7970  1452  00A0               	movwf	set_leds_top@x^(0+128)
  7971  1453  3001               	movlw	1
  7972  1454  00A2               	movwf	set_leds_top@ledState^(0+128)
  7973  1455  3000               	movlw	0
  7974  1456  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  7975  1457  3193  238B  3194   	fcall	_set_leds_top
  7976                           
  7977                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  7978  145A  0021               	movlb	1	; select bank1
  7979  145B  0935               	comf	star_tactiles@iLed^(0+128),w
  7980  145C  00B2               	movwf	??_star_tactiles^(0+128)
  7981  145D  0936               	comf	(star_tactiles@iLed+1)^(0+128),w
  7982  145E  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  7983  145F  0AB2               	incf	??_star_tactiles^(0+128),f
  7984  1460  1903               	skipnz
  7985  1461  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  7986  1462  0832               	movf	??_star_tactiles^(0+128),w
  7987  1463  3E06               	addlw	6
  7988  1464  00A0               	movwf	set_leds_bottom@x^(0+128)
  7989  1465  3000               	movlw	0
  7990  1466  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  7991  1467  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  7992  1468  319F  27C5  3194   	fcall	_set_leds_bottom
  7993                           
  7994                           ;LEDs.c: 199: wait_ms(5);
  7995  146B  3005               	movlw	5
  7996  146C  0021               	movlb	1	; select bank1
  7997  146D  00AC               	movwf	wait_ms@timeSec^(0+128)
  7998  146E  3000               	movlw	0
  7999  146F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8000  1470  319F  2793  3194   	fcall	_wait_ms
  8001  1473  30FF               	movlw	255
  8002  1474  0021               	movlb	1	; select bank1
  8003  1475  07B5               	addwf	star_tactiles@iLed^(0+128),f
  8004  1476  30FF               	movlw	255
  8005  1477  3DB6               	addwfc	(star_tactiles@iLed+1)^(0+128),f
  8006  1478  2C4D               	goto	L5
  8007  1479                     l5020:	
  8008                           ;LEDs.c: 200: }
  8009                           ;LEDs.c: 201: } else {
  8010                           
  8011                           
  8012                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8013  1479  3001               	movlw	1
  8014  147A  00B7               	movwf	star_tactiles@iLed_1453^(0+128)
  8015  147B  3000               	movlw	0
  8016  147C  00B8               	movwf	(star_tactiles@iLed_1453^(0+128)+1)
  8017  147D                     L6:	
  8018  147D  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8019  147E  3A80               	xorlw	128
  8020  147F  00B2               	movwf	??_star_tactiles^(0+128)
  8021  1480  3080               	movlw	128
  8022  1481  0232               	subwf	??_star_tactiles^(0+128),w
  8023  1482  1D03               	skipz
  8024  1483  2C86               	goto	u5155
  8025  1484  3007               	movlw	7
  8026  1485  0237               	subwf	star_tactiles@iLed_1453^(0+128),w
  8027  1486                     u5155:	
  8028  1486  1803               	btfsc	3,0
  8029  1487  0008               	return
  8030                           
  8031                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8032  1488  0021               	movlb	1	; select bank1
  8033  1489  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8034  148A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8035  148B  0837               	movf	star_tactiles@iLed_1453^(0+128),w
  8036  148C  00A0               	movwf	set_leds_top@x^(0+128)
  8037  148D  3001               	movlw	1
  8038  148E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8039  148F  3000               	movlw	0
  8040  1490  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8041  1491  3193  238B  3194   	fcall	_set_leds_top
  8042                           
  8043                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8044  1494  0021               	movlb	1	; select bank1
  8045  1495  0937               	comf	star_tactiles@iLed_1453^(0+128),w
  8046  1496  00B2               	movwf	??_star_tactiles^(0+128)
  8047  1497  0938               	comf	(star_tactiles@iLed_1453+1)^(0+128),w
  8048  1498  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8049  1499  0AB2               	incf	??_star_tactiles^(0+128),f
  8050  149A  1903               	skipnz
  8051  149B  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8052  149C  0832               	movf	??_star_tactiles^(0+128),w
  8053  149D  3E06               	addlw	6
  8054  149E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8055  149F  3000               	movlw	0
  8056  14A0  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8057  14A1  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8058  14A2  319F  27C5  3194   	fcall	_set_leds_bottom
  8059                           
  8060                           ;LEDs.c: 205: wait_ms(5);
  8061  14A5  3005               	movlw	5
  8062  14A6  0021               	movlb	1	; select bank1
  8063  14A7  00AC               	movwf	wait_ms@timeSec^(0+128)
  8064  14A8  3000               	movlw	0
  8065  14A9  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8066  14AA  319F  2793  3194   	fcall	_wait_ms
  8067  14AD  3001               	movlw	1
  8068  14AE  0021               	movlb	1	; select bank1
  8069  14AF  07B7               	addwf	star_tactiles@iLed_1453^(0+128),f
  8070  14B0  3000               	movlw	0
  8071  14B1  3DB8               	addwfc	(star_tactiles@iLed_1453+1)^(0+128),f
  8072  14B2  2C7D               	goto	L6
  8073  14B3                     __end_of_star_tactiles:	
  8074                           
  8075                           	psect	text10
  8076  0800                     __ptext10:	
  8077 ;; *************** function _solidring_tactiles *****************
  8078 ;; Defined at:
  8079 ;;		line 223 in file "LEDs.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;		None
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8094 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8095 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8096 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8097 ;;Total ram usage:        3 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    5
  8100 ;; This function calls:
  8101 ;;		_set_leds_bottom
  8102 ;;		_set_leds_top
  8103 ;;		_wait_ms
  8104 ;; This function is called by:
  8105 ;;		_showBootSequence
  8106 ;;		_showSave
  8107 ;; This function uses a non-reentrant model
  8108 ;;
  8109                           
  8110                           
  8111                           ;psect for function _solidring_tactiles
  8112  0800                     _solidring_tactiles:	
  8113                           
  8114                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8115                           
  8116                           ;incstack = 0
  8117                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8118  0800  301E               	movlw	30
  8119  0801  0021               	movlb	1	; select bank1
  8120  0802  00B2               	movwf	??_solidring_tactiles^(0+128)
  8121  0803  0832               	movf	??_solidring_tactiles^(0+128),w
  8122  0804  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8123                           
  8124                           ;LEDs.c: 225: set_leds_top(100, 1);
  8125  0805  3064               	movlw	100
  8126  0806  00A0               	movwf	set_leds_top@x^(0+128)
  8127  0807  3000               	movlw	0
  8128  0808  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8129  0809  3001               	movlw	1
  8130  080A  00A2               	movwf	set_leds_top@ledState^(0+128)
  8131  080B  3000               	movlw	0
  8132  080C  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8133  080D  3193  238B  3188   	fcall	_set_leds_top
  8134                           
  8135                           ;LEDs.c: 226: set_leds_bottom(100);
  8136  0810  3064               	movlw	100
  8137  0811  0021               	movlb	1	; select bank1
  8138  0812  00A0               	movwf	set_leds_bottom@x^(0+128)
  8139  0813  3000               	movlw	0
  8140  0814  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8141  0815  319F  27C5  3188   	fcall	_set_leds_bottom
  8142                           
  8143                           ;LEDs.c: 227: wait_ms(ring_delay);
  8144  0818  0021               	movlb	1	; select bank1
  8145  0819  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8146  081A  00B2               	movwf	??_solidring_tactiles^(0+128)
  8147  081B  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8148  081C  0832               	movf	??_solidring_tactiles^(0+128),w
  8149  081D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8150  081E  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8151  081F  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8152  0820  319F  2793  3188   	fcall	_wait_ms
  8153                           
  8154                           ;LEDs.c: 229: set_leds_top(0, 1);
  8155  0823  3000               	movlw	0
  8156  0824  0021               	movlb	1	; select bank1
  8157  0825  00A0               	movwf	set_leds_top@x^(0+128)
  8158  0826  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8159  0827  3001               	movlw	1
  8160  0828  00A2               	movwf	set_leds_top@ledState^(0+128)
  8161  0829  3000               	movlw	0
  8162  082A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8163  082B  3193  238B  3188   	fcall	_set_leds_top
  8164                           
  8165                           ;LEDs.c: 230: set_leds_bottom(0);
  8166  082E  3000               	movlw	0
  8167  082F  0021               	movlb	1	; select bank1
  8168  0830  00A0               	movwf	set_leds_bottom@x^(0+128)
  8169  0831  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8170  0832  319F  27C5  3188   	fcall	_set_leds_bottom
  8171                           
  8172                           ;LEDs.c: 231: wait_ms(ring_delay);
  8173  0835  0021               	movlb	1	; select bank1
  8174  0836  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8175  0837  00B2               	movwf	??_solidring_tactiles^(0+128)
  8176  0838  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8177  0839  0832               	movf	??_solidring_tactiles^(0+128),w
  8178  083A  00AC               	movwf	wait_ms@timeSec^(0+128)
  8179  083B  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8180  083C  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8181  083D  319F  2793         	fcall	_wait_ms
  8182  083F  0008               	return
  8183  0840                     __end_of_solidring_tactiles:	
  8184                           
  8185                           	psect	text11
  8186  1E4A                     __ptext11:	
  8187 ;; *************** function _restoreLEDState *****************
  8188 ;; Defined at:
  8189 ;;		line 89 in file "state_manager.c"
  8190 ;; Parameters:    Size  Location     Type
  8191 ;;		None
  8192 ;; Auto vars:     Size  Location     Type
  8193 ;;		None
  8194 ;; Return value:  Size  Location     Type
  8195 ;;                  1    wreg      void 
  8196 ;; Registers used:
  8197 ;;		wreg, status,0
  8198 ;; Tracked objects:
  8199 ;;		On entry : 0/0
  8200 ;;		On exit  : 0/0
  8201 ;;		Unchanged: 0/0
  8202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8207 ;;Total ram usage:        0 bytes
  8208 ;; Hardware stack levels used:    1
  8209 ;; Hardware stack levels required when called:    3
  8210 ;; This function calls:
  8211 ;;		Nothing
  8212 ;; This function is called by:
  8213 ;;		_showBootSequence
  8214 ;;		_showError_Alternating
  8215 ;;		_show_error
  8216 ;;		_show_cancel
  8217 ;; This function uses a non-reentrant model
  8218 ;;
  8219                           
  8220                           
  8221                           ;psect for function _restoreLEDState
  8222  1E4A                     _restoreLEDState:	
  8223                           
  8224                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8225                           
  8226                           ;incstack = 0
  8227                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8228  1E4A  0023               	movlb	3	; select bank3
  8229  1E4B  0C34               	rrf	_ledState^(0+384),w
  8230  1E4C  0022               	movlb	2	; select bank2
  8231  1E4D  1C03               	skipc
  8232  1E4E  120D               	bcf	13,4	;volatile
  8233  1E4F  1803               	skipnc
  8234  1E50  160D               	bsf	13,4	;volatile
  8235                           
  8236                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8237  1E51  0023               	movlb	3	; select bank3
  8238  1E52  0C36               	rrf	(_ledState^(0+384)+2),w
  8239  1E53  0022               	movlb	2	; select bank2
  8240  1E54  1C03               	skipc
  8241  1E55  110D               	bcf	13,2	;volatile
  8242  1E56  1803               	skipnc
  8243  1E57  150D               	bsf	13,2	;volatile
  8244                           
  8245                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8246  1E58  0023               	movlb	3	; select bank3
  8247  1E59  0C35               	rrf	(_ledState^(0+384)+1),w
  8248  1E5A  0022               	movlb	2	; select bank2
  8249  1E5B  1C03               	skipc
  8250  1E5C  128D               	bcf	13,5	;volatile
  8251  1E5D  1803               	skipnc
  8252  1E5E  168D               	bsf	13,5	;volatile
  8253                           
  8254                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8255  1E5F  0023               	movlb	3	; select bank3
  8256  1E60  0C37               	rrf	(_ledState^(0+384)+3),w
  8257  1E61  0022               	movlb	2	; select bank2
  8258  1E62  1C03               	skipc
  8259  1E63  118D               	bcf	13,3	;volatile
  8260  1E64  1803               	skipnc
  8261  1E65  158D               	bsf	13,3	;volatile
  8262  1E66  0008               	return
  8263  1E67                     __end_of_restoreLEDState:	
  8264                           
  8265                           	psect	text12
  8266  1DFD                     __ptext12:	
  8267 ;; *************** function _getCurrentLEDState *****************
  8268 ;; Defined at:
  8269 ;;		line 83 in file "state_manager.c"
  8270 ;; Parameters:    Size  Location     Type
  8271 ;;		None
  8272 ;; Auto vars:     Size  Location     Type
  8273 ;;		None
  8274 ;; Return value:  Size  Location     Type
  8275 ;;                  1    wreg      void 
  8276 ;; Registers used:
  8277 ;;		wreg, status,2
  8278 ;; Tracked objects:
  8279 ;;		On entry : 0/0
  8280 ;;		On exit  : 0/0
  8281 ;;		Unchanged: 0/0
  8282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8286 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8287 ;;Total ram usage:        0 bytes
  8288 ;; Hardware stack levels used:    1
  8289 ;; Hardware stack levels required when called:    3
  8290 ;; This function calls:
  8291 ;;		Nothing
  8292 ;; This function is called by:
  8293 ;;		_showBootSequence
  8294 ;;		_showError_Alternating
  8295 ;;		_show_error
  8296 ;;		_show_cancel
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _getCurrentLEDState
  8302  1DFD                     _getCurrentLEDState:	
  8303                           
  8304                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8308  1DFD  3000               	movlw	0
  8309  1DFE  0022               	movlb	2	; select bank2
  8310  1DFF  1A0D               	btfsc	13,4	;volatile
  8311  1E00  3001               	movlw	1
  8312  1E01  0023               	movlb	3	; select bank3
  8313  1E02  00B4               	movwf	_ledState^(0+384)
  8314                           
  8315                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8316  1E03  3000               	movlw	0
  8317  1E04  0022               	movlb	2	; select bank2
  8318  1E05  190D               	btfsc	13,2	;volatile
  8319  1E06  3001               	movlw	1
  8320  1E07  0023               	movlb	3	; select bank3
  8321  1E08  00B6               	movwf	(_ledState^(0+384)+2)
  8322                           
  8323                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8324  1E09  3000               	movlw	0
  8325  1E0A  0022               	movlb	2	; select bank2
  8326  1E0B  1A8D               	btfsc	13,5	;volatile
  8327  1E0C  3001               	movlw	1
  8328  1E0D  0023               	movlb	3	; select bank3
  8329  1E0E  00B5               	movwf	(_ledState^(0+384)+1)
  8330                           
  8331                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8332  1E0F  3000               	movlw	0
  8333  1E10  0022               	movlb	2	; select bank2
  8334  1E11  198D               	btfsc	13,3	;volatile
  8335  1E12  3001               	movlw	1
  8336  1E13  0023               	movlb	3	; select bank3
  8337  1E14  00B7               	movwf	(_ledState^(0+384)+3)
  8338  1E15  0008               	return
  8339  1E16                     __end_of_getCurrentLEDState:	
  8340                           
  8341                           	psect	text13
  8342  08F4                     __ptext13:	
  8343 ;; *************** function _set_subdivision *****************
  8344 ;; Defined at:
  8345 ;;		line 77 in file "user.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;  x               2    6[BANK2 ] int 
  8348 ;;  y               2    8[BANK2 ] int 
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;  scalar          3   15[BANK2 ] float 
  8351 ;;  tmpX            2   13[BANK2 ] int 
  8352 ;; Return value:  Size  Location     Type
  8353 ;;                  2    6[BANK2 ] int 
  8354 ;; Registers used:
  8355 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8356 ;; Tracked objects:
  8357 ;;		On entry : 0/0
  8358 ;;		On exit  : 0/0
  8359 ;;		Unchanged: 0/0
  8360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8361 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8362 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8363 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8364 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8365 ;;Total ram usage:       12 bytes
  8366 ;; Hardware stack levels used:    1
  8367 ;; Hardware stack levels required when called:    5
  8368 ;; This function calls:
  8369 ;;		___awtoft
  8370 ;;		___ftdiv
  8371 ;;		___ftmul
  8372 ;;		___fttol
  8373 ;; This function is called by:
  8374 ;;		_main
  8375 ;; This function uses a non-reentrant model
  8376 ;;
  8377                           
  8378                           
  8379                           ;psect for function _set_subdivision
  8380  08F4                     _set_subdivision:	
  8381                           
  8382                           ;user.c: 78: adjust_sub_delay = 0;
  8383                           
  8384                           ;incstack = 0
  8385                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8386  08F4  0023               	movlb	3	; select bank3
  8387  08F5  01C0               	clrf	_adjust_sub_delay^(0+384)
  8388  08F6  01C1               	clrf	(_adjust_sub_delay+1)^(0+384)
  8389                           
  8390                           ;user.c: 79: int tmpX = x;
  8391  08F7  0022               	movlb	2	; select bank2
  8392  08F8  0846               	movf	(set_subdivision@x+1)^(0+256),w
  8393  08F9  00CD               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8394  08FA  0845               	movf	set_subdivision@x^(0+256),w
  8395  08FB  00CC               	movwf	set_subdivision@tmpX^(0+256)
  8396                           
  8397                           ;user.c: 80: float scalar = 1.0;
  8398  08FC  3000               	movlw	0
  8399  08FD  00CE               	movwf	set_subdivision@scalar^(0+256)
  8400  08FE  3080               	movlw	128
  8401  08FF  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8402  0900  303F               	movlw	63
  8403  0901  00D0               	movwf	(set_subdivision@scalar+2)^(0+256)
  8404                           
  8405                           ;user.c: 83: switch (y) {
  8406  0902  291C               	goto	l5736
  8407  0903                     l5724:	
  8408                           ;user.c: 84: case 1:
  8409                           
  8410                           
  8411                           ;user.c: 85: scalar = 0.75;
  8412  0903  3000               	movlw	0
  8413  0904  00CE               	movwf	set_subdivision@scalar^(0+256)
  8414  0905  3040               	movlw	64
  8415  0906  290E               	goto	L8
  8416  0907                     l5726:	
  8417                           ;user.c: 87: case 2:
  8418                           
  8419                           ;user.c: 86: break;
  8420                           
  8421                           
  8422                           ;user.c: 88: scalar = 0.6666;
  8423  0907  30A6               	movlw	166
  8424  0908  00CE               	movwf	set_subdivision@scalar^(0+256)
  8425  0909  302A               	movlw	42
  8426  090A  290E               	goto	L8
  8427  090B                     l5728:	
  8428                           ;user.c: 90: case 3:
  8429                           
  8430                           ;user.c: 89: break;
  8431                           
  8432                           
  8433                           ;user.c: 91: scalar = .5;
  8434  090B  3000               	movlw	0
  8435  090C  00CE               	movwf	set_subdivision@scalar^(0+256)
  8436  090D  3000               	movlw	0
  8437  090E                     L8:	
  8438  090E  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8439  090F  303F               	movlw	63
  8440  0910  291A               	goto	L10
  8441  0911                     l5730:	
  8442                           ;user.c: 93: case 4:
  8443                           
  8444                           ;user.c: 92: break;
  8445                           
  8446                           
  8447                           ;user.c: 94: scalar = 0.3333;
  8448  0911  30A6               	movlw	166
  8449  0912  00CE               	movwf	set_subdivision@scalar^(0+256)
  8450  0913  30AA               	movlw	170
  8451  0914  2918               	goto	L11
  8452  0915                     l5732:	
  8453                           ;user.c: 96: case 5:
  8454                           
  8455                           ;user.c: 95: break;
  8456                           
  8457                           
  8458                           ;user.c: 97: scalar = 0.25;
  8459  0915  3000               	movlw	0
  8460  0916  00CE               	movwf	set_subdivision@scalar^(0+256)
  8461  0917  3080               	movlw	128
  8462  0918                     L11:	
  8463  0918  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8464  0919  303E               	movlw	62
  8465  091A                     L10:	
  8466  091A  00D0               	movwf	(set_subdivision@scalar+2)^(0+256)
  8467                           
  8468                           ;user.c: 102: }
  8469                           
  8470                           ;user.c: 101: break;
  8471                           
  8472                           ;user.c: 99: case 6:
  8473                           
  8474                           ;user.c: 98: break;
  8475  091B  2935               	goto	l5738
  8476  091C                     l5736:	
  8477                           
  8478                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8479                           ; Switch size 1, requested type "space"
  8480                           ; Number of cases is 1, Range of values is 0 to 0
  8481                           ; switch strategies available:
  8482                           ; Name         Instructions Cycles
  8483                           ; simple_byte            4     3 (average)
  8484                           ; direct_byte            8     6 (fixed)
  8485                           ; jumptable            260     6 (fixed)
  8486                           ;	Chosen strategy is simple_byte
  8487  091C  0848               	movf	(set_subdivision@y+1)^(0+256),w
  8488  091D  3A00               	xorlw	0	; case 0
  8489  091E  1903               	skipnz
  8490  091F  2921               	goto	l6130
  8491  0920  2935               	goto	l5738
  8492  0921                     l6130:	
  8493                           
  8494                           ; Switch size 1, requested type "space"
  8495                           ; Number of cases is 6, Range of values is 1 to 6
  8496                           ; switch strategies available:
  8497                           ; Name         Instructions Cycles
  8498                           ; simple_byte           19    10 (average)
  8499                           ; direct_byte           21     9 (fixed)
  8500                           ; jumptable            263     9 (fixed)
  8501                           ;	Chosen strategy is simple_byte
  8502  0921  0847               	movf	set_subdivision@y^(0+256),w
  8503  0922  3A01               	xorlw	1	; case 1
  8504  0923  1903               	skipnz
  8505  0924  2903               	goto	l5724
  8506  0925  3A03               	xorlw	3	; case 2
  8507  0926  1903               	skipnz
  8508  0927  2907               	goto	l5726
  8509  0928  3A01               	xorlw	1	; case 3
  8510  0929  1903               	skipnz
  8511  092A  290B               	goto	l5728
  8512  092B  3A07               	xorlw	7	; case 4
  8513  092C  1903               	skipnz
  8514  092D  2911               	goto	l5730
  8515  092E  3A01               	xorlw	1	; case 5
  8516  092F  1903               	skipnz
  8517  0930  2915               	goto	l5732
  8518  0931  3A03               	xorlw	3	; case 6
  8519  0932  1903               	skipnz
  8520  0933  2935               	goto	l5738
  8521  0934  2935               	goto	l5738
  8522  0935                     l5738:	
  8523                           
  8524                           ;user.c: 104: tmpX = tmpX * scalar;
  8525  0935  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8526  0936  0021               	movlb	1	; select bank1
  8527  0937  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8528  0938  0022               	movlb	2	; select bank2
  8529  0939  084C               	movf	set_subdivision@tmpX^(0+256),w
  8530  093A  0021               	movlb	1	; select bank1
  8531  093B  00A8               	movwf	___awtoft@c^(0+128)
  8532  093C  319E  2687  3188   	fcall	___awtoft
  8533  093F  0021               	movlb	1	; select bank1
  8534  0940  0828               	movf	?___awtoft^(0+128),w
  8535  0941  00B8               	movwf	___ftmul@f2^(0+128)
  8536  0942  0829               	movf	(?___awtoft+1)^(0+128),w
  8537  0943  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  8538  0944  082A               	movf	(?___awtoft+2)^(0+128),w
  8539  0945  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  8540  0946  0022               	movlb	2	; select bank2
  8541  0947  084E               	movf	set_subdivision@scalar^(0+256),w
  8542  0948  0021               	movlb	1	; select bank1
  8543  0949  00B5               	movwf	___ftmul@f1^(0+128)
  8544  094A  0022               	movlb	2	; select bank2
  8545  094B  084F               	movf	(set_subdivision@scalar+1)^(0+256),w
  8546  094C  0021               	movlb	1	; select bank1
  8547  094D  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  8548  094E  0022               	movlb	2	; select bank2
  8549  094F  0850               	movf	(set_subdivision@scalar+2)^(0+256),w
  8550  0950  0021               	movlb	1	; select bank1
  8551  0951  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  8552  0952  3188  2040  3188   	fcall	___ftmul
  8553  0955  0021               	movlb	1	; select bank1
  8554  0956  0835               	movf	?___ftmul^(0+128),w
  8555  0957  00E7               	movwf	___fttol@f1^(0+128)
  8556  0958  0836               	movf	(?___ftmul+1)^(0+128),w
  8557  0959  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8558  095A  0837               	movf	(?___ftmul+2)^(0+128),w
  8559  095B  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8560  095C  3196  26B8  3188   	fcall	___fttol
  8561  095F  0021               	movlb	1	; select bank1
  8562  0960  0868               	movf	(?___fttol^(0+128)+1),w
  8563  0961  0022               	movlb	2	; select bank2
  8564  0962  00CD               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8565  0963  0021               	movlb	1	; select bank1
  8566  0964  0867               	movf	?___fttol^(0+128),w
  8567  0965  0022               	movlb	2	; select bank2
  8568  0966  00CC               	movwf	set_subdivision@tmpX^(0+256)
  8569                           
  8570                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  8571  0967  084E               	movf	set_subdivision@scalar^(0+256),w
  8572  0968  0021               	movlb	1	; select bank1
  8573  0969  00C5               	movwf	___ftdiv@f2^(0+128)
  8574  096A  0022               	movlb	2	; select bank2
  8575  096B  084F               	movf	(set_subdivision@scalar+1)^(0+256),w
  8576  096C  0021               	movlb	1	; select bank1
  8577  096D  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  8578  096E  0022               	movlb	2	; select bank2
  8579  096F  0850               	movf	(set_subdivision@scalar+2)^(0+256),w
  8580  0970  0021               	movlb	1	; select bank1
  8581  0971  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  8582  0972  0022               	movlb	2	; select bank2
  8583  0973  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8584  0974  0021               	movlb	1	; select bank1
  8585  0975  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8586  0976  0022               	movlb	2	; select bank2
  8587  0977  084C               	movf	set_subdivision@tmpX^(0+256),w
  8588  0978  0021               	movlb	1	; select bank1
  8589  0979  00A8               	movwf	___awtoft@c^(0+128)
  8590  097A  319E  2687  3188   	fcall	___awtoft
  8591  097D  0021               	movlb	1	; select bank1
  8592  097E  0828               	movf	?___awtoft^(0+128),w
  8593  097F  00C8               	movwf	___ftdiv@f1^(0+128)
  8594  0980  0829               	movf	(?___awtoft+1)^(0+128),w
  8595  0981  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  8596  0982  082A               	movf	(?___awtoft+2)^(0+128),w
  8597  0983  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  8598  0984  3197  2757  3188   	fcall	___ftdiv
  8599  0987  0021               	movlb	1	; select bank1
  8600  0988  0845               	movf	?___ftdiv^(0+128),w
  8601  0989  0022               	movlb	2	; select bank2
  8602  098A  00C9               	movwf	??_set_subdivision^(0+256)
  8603  098B  0021               	movlb	1	; select bank1
  8604  098C  0846               	movf	(?___ftdiv+1)^(0+128),w
  8605  098D  0022               	movlb	2	; select bank2
  8606  098E  00CA               	movwf	(??_set_subdivision^(0+256)+1)
  8607  098F  0021               	movlb	1	; select bank1
  8608  0990  0847               	movf	(?___ftdiv+2)^(0+128),w
  8609  0991  0022               	movlb	2	; select bank2
  8610  0992  00CB               	movwf	(??_set_subdivision^(0+256)+2)
  8611  0993  0846               	movf	(set_subdivision@x+1)^(0+256),w
  8612  0994  0021               	movlb	1	; select bank1
  8613  0995  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8614  0996  0022               	movlb	2	; select bank2
  8615  0997  0845               	movf	set_subdivision@x^(0+256),w
  8616  0998  0021               	movlb	1	; select bank1
  8617  0999  00A8               	movwf	___awtoft@c^(0+128)
  8618  099A  319E  2687  3188   	fcall	___awtoft
  8619  099D  0021               	movlb	1	; select bank1
  8620  099E  082A               	movf	(?___awtoft+2)^(0+128),w
  8621  099F  0022               	movlb	2	; select bank2
  8622  09A0  064B               	xorwf	(??_set_subdivision+2)^(0+256),w
  8623  09A1  1D03               	skipz
  8624  09A2  29AD               	goto	u6585
  8625  09A3  0021               	movlb	1	; select bank1
  8626  09A4  0829               	movf	(?___awtoft+1)^(0+128),w
  8627  09A5  0022               	movlb	2	; select bank2
  8628  09A6  064A               	xorwf	(??_set_subdivision+1)^(0+256),w
  8629  09A7  1D03               	skipz
  8630  09A8  29AD               	goto	u6585
  8631  09A9  0021               	movlb	1	; select bank1
  8632  09AA  0828               	movf	?___awtoft^(0+128),w
  8633  09AB  0022               	movlb	2	; select bank2
  8634  09AC  0649               	xorwf	??_set_subdivision^(0+256),w
  8635  09AD                     u6585:	
  8636  09AD  1903               	skipnz
  8637  09AE  29B4               	goto	l525
  8638  09AF  3001               	movlw	1
  8639  09B0  0023               	movlb	3	; select bank3
  8640  09B1  00C0               	movwf	_adjust_sub_delay^(0+384)
  8641  09B2  3000               	movlw	0
  8642  09B3  00C1               	movwf	(_adjust_sub_delay^(0+384)+1)
  8643  09B4                     l525:	
  8644                           
  8645                           ;user.c: 106: return tmpX;
  8646  09B4  0022               	movlb	2	; select bank2
  8647  09B5  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8648  09B6  00C6               	movwf	(?_set_subdivision+1)^(0+256)
  8649  09B7  084C               	movf	set_subdivision@tmpX^(0+256),w
  8650  09B8  00C5               	movwf	?_set_subdivision^(0+256)
  8651  09B9  0008               	return
  8652  09BA                     __end_of_set_subdivision:	
  8653                           
  8654                           	psect	text14
  8655  16B8                     __ptext14:	
  8656 ;; *************** function ___fttol *****************
  8657 ;; Defined at:
  8658 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8659 ;; Parameters:    Size  Location     Type
  8660 ;;  f1              3   71[BANK1 ] float 
  8661 ;; Auto vars:     Size  Location     Type
  8662 ;;  lval            4    1[BANK2 ] unsigned long 
  8663 ;;  exp1            1    5[BANK2 ] unsigned char 
  8664 ;;  sign1           1    0[BANK2 ] unsigned char 
  8665 ;; Return value:  Size  Location     Type
  8666 ;;                  4   71[BANK1 ] long 
  8667 ;; Registers used:
  8668 ;;		wreg, status,2, status,0
  8669 ;; Tracked objects:
  8670 ;;		On entry : 0/0
  8671 ;;		On exit  : 0/0
  8672 ;;		Unchanged: 0/0
  8673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8674 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8675 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8676 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8677 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8678 ;;Total ram usage:       14 bytes
  8679 ;; Hardware stack levels used:    1
  8680 ;; Hardware stack levels required when called:    3
  8681 ;; This function calls:
  8682 ;;		Nothing
  8683 ;; This function is called by:
  8684 ;;		_main
  8685 ;;		_set_subdivision
  8686 ;; This function uses a non-reentrant model
  8687 ;;
  8688                           
  8689                           
  8690                           ;psect for function ___fttol
  8691  16B8                     ___fttol:	
  8692                           
  8693                           ;incstack = 0
  8694                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8695  16B8  0021               	movlb	1	; select bank1
  8696  16B9  0867               	movf	___fttol@f1^(0+128),w
  8697  16BA  00EB               	movwf	??___fttol^(0+128)
  8698  16BB  0868               	movf	(___fttol@f1+1)^(0+128),w
  8699  16BC  00EC               	movwf	(??___fttol^(0+128)+1)
  8700  16BD  0869               	movf	(___fttol@f1+2)^(0+128),w
  8701  16BE  00ED               	movwf	(??___fttol^(0+128)+2)
  8702  16BF  1003               	clrc
  8703  16C0  0D6C               	rlf	(??___fttol^(0+128)+1),w
  8704  16C1  0D6D               	rlf	(??___fttol^(0+128)+2),w
  8705  16C2  00EE               	movwf	(??___fttol+3)^(0+128)
  8706  16C3  086E               	movf	(??___fttol+3)^(0+128),w
  8707  16C4  0022               	movlb	2	; select bank2
  8708  16C5  00C4               	movwf	___fttol@exp1^(0+256)
  8709  16C6  0844               	movf	___fttol@exp1^(0+256),w
  8710  16C7  1D03               	btfss	3,2
  8711  16C8  2ED3               	goto	l5334
  8712  16C9  3000               	movlw	0
  8713  16CA  0021               	movlb	1	; select bank1
  8714  16CB  00EA               	movwf	(?___fttol+3)^(0+128)
  8715  16CC  3000               	movlw	0
  8716  16CD  00E9               	movwf	(?___fttol+2)^(0+128)
  8717  16CE  3000               	movlw	0
  8718  16CF  00E8               	movwf	(?___fttol+1)^(0+128)
  8719  16D0  3000               	movlw	0
  8720  16D1  00E7               	movwf	?___fttol^(0+128)
  8721  16D2  0008               	return
  8722  16D3                     l5334:	
  8723  16D3  0021               	movlb	1	; select bank1
  8724  16D4  0867               	movf	___fttol@f1^(0+128),w
  8725  16D5  00EB               	movwf	??___fttol^(0+128)
  8726  16D6  0868               	movf	(___fttol@f1+1)^(0+128),w
  8727  16D7  00EC               	movwf	(??___fttol^(0+128)+1)
  8728  16D8  0869               	movf	(___fttol@f1+2)^(0+128),w
  8729  16D9  00ED               	movwf	(??___fttol^(0+128)+2)
  8730  16DA  3017               	movlw	23
  8731  16DB                     u5805:	
  8732  16DB  36ED               	lsrf	(??___fttol^(0+128)+2),f
  8733  16DC  0CEC               	rrf	(??___fttol^(0+128)+1),f
  8734  16DD  0CEB               	rrf	??___fttol^(0+128),f
  8735  16DE  0B89               	decfsz	9,f
  8736  16DF  2EDB               	goto	u5805
  8737  16E0  086B               	movf	??___fttol^(0+128),w
  8738  16E1  00EE               	movwf	(??___fttol+3)^(0+128)
  8739  16E2  086E               	movf	(??___fttol+3)^(0+128),w
  8740  16E3  0022               	movlb	2	; select bank2
  8741  16E4  00BF               	movwf	___fttol@sign1^(0+256)
  8742  16E5  0021               	movlb	1	; select bank1
  8743  16E6  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  8744  16E7  30FF               	movlw	255
  8745  16E8  05E7               	andwf	___fttol@f1^(0+128),f
  8746  16E9  30FF               	movlw	255
  8747  16EA  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  8748  16EB  3000               	movlw	0
  8749  16EC  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  8750  16ED  0867               	movf	___fttol@f1^(0+128),w
  8751  16EE  0022               	movlb	2	; select bank2
  8752  16EF  00C0               	movwf	___fttol@lval^(0+256)
  8753  16F0  0021               	movlb	1	; select bank1
  8754  16F1  0868               	movf	(___fttol@f1+1)^(0+128),w
  8755  16F2  0022               	movlb	2	; select bank2
  8756  16F3  00C1               	movwf	(___fttol@lval^(0+256)+1)
  8757  16F4  0021               	movlb	1	; select bank1
  8758  16F5  0869               	movf	(___fttol@f1+2)^(0+128),w
  8759  16F6  0022               	movlb	2	; select bank2
  8760  16F7  00C2               	movwf	(___fttol@lval^(0+256)+2)
  8761  16F8  01C3               	clrf	(___fttol@lval^(0+256)+3)
  8762  16F9  308E               	movlw	142
  8763  16FA  02C4               	subwf	___fttol@exp1^(0+256),f
  8764  16FB  1FC4               	btfss	___fttol@exp1^(0+256),7
  8765  16FC  2F1D               	goto	l5354
  8766  16FD  0844               	movf	___fttol@exp1^(0+256),w
  8767  16FE  3A80               	xorlw	128
  8768  16FF  3E8F               	addlw	143
  8769  1700  1803               	skipnc
  8770  1701  2F0C               	goto	l5352
  8771  1702  3000               	movlw	0
  8772  1703  0021               	movlb	1	; select bank1
  8773  1704  00EA               	movwf	(?___fttol+3)^(0+128)
  8774  1705  3000               	movlw	0
  8775  1706  00E9               	movwf	(?___fttol+2)^(0+128)
  8776  1707  3000               	movlw	0
  8777  1708  00E8               	movwf	(?___fttol+1)^(0+128)
  8778  1709  3000               	movlw	0
  8779  170A  00E7               	movwf	?___fttol^(0+128)
  8780  170B  0008               	return
  8781  170C                     l5352:	
  8782  170C  3001               	movlw	1
  8783  170D                     u5835:	
  8784  170D  0022               	movlb	2	; select bank2
  8785  170E  36C3               	lsrf	(___fttol@lval+3)^(0+256),f
  8786  170F  0CC2               	rrf	(___fttol@lval+2)^(0+256),f
  8787  1710  0CC1               	rrf	(___fttol@lval+1)^(0+256),f
  8788  1711  0CC0               	rrf	___fttol@lval^(0+256),f
  8789  1712  0B89               	decfsz	9,f
  8790  1713  2F0D               	goto	u5835
  8791  1714  3001               	movlw	1
  8792  1715  0021               	movlb	1	; select bank1
  8793  1716  00EB               	movwf	??___fttol^(0+128)
  8794  1717  086B               	movf	??___fttol^(0+128),w
  8795  1718  0022               	movlb	2	; select bank2
  8796  1719  07C4               	addwf	___fttol@exp1^(0+256),f
  8797  171A  1903               	btfsc	3,2
  8798  171B  2F39               	goto	l5362
  8799  171C  2F0C               	goto	l5352
  8800  171D                     l5354:	
  8801  171D  3018               	movlw	24
  8802  171E  0244               	subwf	___fttol@exp1^(0+256),w
  8803  171F  1C03               	skipc
  8804  1720  2F35               	goto	l1574
  8805  1721  3000               	movlw	0
  8806  1722  0021               	movlb	1	; select bank1
  8807  1723  00EA               	movwf	(?___fttol+3)^(0+128)
  8808  1724  3000               	movlw	0
  8809  1725  00E9               	movwf	(?___fttol+2)^(0+128)
  8810  1726  3000               	movlw	0
  8811  1727  00E8               	movwf	(?___fttol+1)^(0+128)
  8812  1728  3000               	movlw	0
  8813  1729  00E7               	movwf	?___fttol^(0+128)
  8814  172A  0008               	return
  8815  172B                     l5360:	
  8816  172B  3001               	movlw	1
  8817  172C                     u5865:	
  8818  172C  0022               	movlb	2	; select bank2
  8819  172D  35C0               	lslf	___fttol@lval^(0+256),f
  8820  172E  0DC1               	rlf	(___fttol@lval+1)^(0+256),f
  8821  172F  0DC2               	rlf	(___fttol@lval+2)^(0+256),f
  8822  1730  0DC3               	rlf	(___fttol@lval+3)^(0+256),f
  8823  1731  0B89               	decfsz	9,f
  8824  1732  2F2C               	goto	u5865
  8825  1733  3001               	movlw	1
  8826  1734  02C4               	subwf	___fttol@exp1^(0+256),f
  8827  1735                     l1574:	
  8828  1735  0022               	movlb	2	; select bank2
  8829  1736  0844               	movf	___fttol@exp1^(0+256),w
  8830  1737  1D03               	btfss	3,2
  8831  1738  2F2B               	goto	l5360
  8832  1739                     l5362:	
  8833  1739  083F               	movf	___fttol@sign1^(0+256),w
  8834  173A  1903               	btfsc	3,2
  8835  173B  2F47               	goto	l5366
  8836  173C  09C0               	comf	___fttol@lval^(0+256),f
  8837  173D  09C1               	comf	(___fttol@lval+1)^(0+256),f
  8838  173E  09C2               	comf	(___fttol@lval+2)^(0+256),f
  8839  173F  09C3               	comf	(___fttol@lval+3)^(0+256),f
  8840  1740  0AC0               	incf	___fttol@lval^(0+256),f
  8841  1741  1903               	skipnz
  8842  1742  0AC1               	incf	(___fttol@lval+1)^(0+256),f
  8843  1743  1903               	skipnz
  8844  1744  0AC2               	incf	(___fttol@lval+2)^(0+256),f
  8845  1745  1903               	skipnz
  8846  1746  0AC3               	incf	(___fttol@lval+3)^(0+256),f
  8847  1747                     l5366:	
  8848  1747  0843               	movf	(___fttol@lval+3)^(0+256),w
  8849  1748  0021               	movlb	1	; select bank1
  8850  1749  00EA               	movwf	(?___fttol+3)^(0+128)
  8851  174A  0022               	movlb	2	; select bank2
  8852  174B  0842               	movf	(___fttol@lval+2)^(0+256),w
  8853  174C  0021               	movlb	1	; select bank1
  8854  174D  00E9               	movwf	(?___fttol+2)^(0+128)
  8855  174E  0022               	movlb	2	; select bank2
  8856  174F  0841               	movf	(___fttol@lval+1)^(0+256),w
  8857  1750  0021               	movlb	1	; select bank1
  8858  1751  00E8               	movwf	(?___fttol+1)^(0+128)
  8859  1752  0022               	movlb	2	; select bank2
  8860  1753  0840               	movf	___fttol@lval^(0+256),w
  8861  1754  0021               	movlb	1	; select bank1
  8862  1755  00E7               	movwf	?___fttol^(0+128)
  8863  1756  0008               	return
  8864  1757                     __end_of___fttol:	
  8865                           
  8866                           	psect	text15
  8867  1E87                     __ptext15:	
  8868 ;; *************** function ___awtoft *****************
  8869 ;; Defined at:
  8870 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  8871 ;; Parameters:    Size  Location     Type
  8872 ;;  c               2    8[BANK1 ] int 
  8873 ;; Auto vars:     Size  Location     Type
  8874 ;;  sign            1   13[BANK1 ] unsigned char 
  8875 ;; Return value:  Size  Location     Type
  8876 ;;                  3    8[BANK1 ] float 
  8877 ;; Registers used:
  8878 ;;		wreg, status,2, status,0, pclath, cstack
  8879 ;; Tracked objects:
  8880 ;;		On entry : 0/0
  8881 ;;		On exit  : 0/0
  8882 ;;		Unchanged: 0/0
  8883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8884 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8885 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8886 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8887 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8888 ;;Total ram usage:        6 bytes
  8889 ;; Hardware stack levels used:    1
  8890 ;; Hardware stack levels required when called:    4
  8891 ;; This function calls:
  8892 ;;		___ftpack
  8893 ;; This function is called by:
  8894 ;;		_main
  8895 ;;		_set_subdivision
  8896 ;; This function uses a non-reentrant model
  8897 ;;
  8898                           
  8899                           
  8900                           ;psect for function ___awtoft
  8901  1E87                     ___awtoft:	
  8902                           
  8903                           ;incstack = 0
  8904                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8905  1E87  0021               	movlb	1	; select bank1
  8906  1E88  01AD               	clrf	___awtoft@sign^(0+128)
  8907  1E89  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  8908  1E8A  2E92               	goto	l5154
  8909  1E8B  09A8               	comf	___awtoft@c^(0+128),f
  8910  1E8C  09A9               	comf	(___awtoft@c+1)^(0+128),f
  8911  1E8D  0AA8               	incf	___awtoft@c^(0+128),f
  8912  1E8E  1903               	skipnz
  8913  1E8F  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  8914  1E90  01AD               	clrf	___awtoft@sign^(0+128)
  8915  1E91  0AAD               	incf	___awtoft@sign^(0+128),f
  8916  1E92                     l5154:	
  8917  1E92  0828               	movf	___awtoft@c^(0+128),w
  8918  1E93  00A0               	movwf	___ftpack@arg^(0+128)
  8919  1E94  0829               	movf	(___awtoft@c+1)^(0+128),w
  8920  1E95  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8921  1E96  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  8922  1E97  308E               	movlw	142
  8923  1E98  00AB               	movwf	??___awtoft^(0+128)
  8924  1E99  082B               	movf	??___awtoft^(0+128),w
  8925  1E9A  00A3               	movwf	___ftpack@exp^(0+128)
  8926  1E9B  082D               	movf	___awtoft@sign^(0+128),w
  8927  1E9C  00AC               	movwf	(??___awtoft+1)^(0+128)
  8928  1E9D  082C               	movf	(??___awtoft+1)^(0+128),w
  8929  1E9E  00A4               	movwf	___ftpack@sign^(0+128)
  8930  1E9F  3193  23DF         	fcall	___ftpack
  8931  1EA1  0021               	movlb	1	; select bank1
  8932  1EA2  0820               	movf	?___ftpack^(0+128),w
  8933  1EA3  00A8               	movwf	?___awtoft^(0+128)
  8934  1EA4  0821               	movf	(?___ftpack+1)^(0+128),w
  8935  1EA5  00A9               	movwf	(?___awtoft+1)^(0+128)
  8936  1EA6  0822               	movf	(?___ftpack+2)^(0+128),w
  8937  1EA7  00AA               	movwf	(?___awtoft+2)^(0+128)
  8938  1EA8  0008               	return
  8939  1EA9                     __end_of___awtoft:	
  8940                           
  8941                           	psect	text16
  8942  129A                     __ptext16:	
  8943 ;; *************** function _read_top_tactile *****************
  8944 ;; Defined at:
  8945 ;;		line 47 in file "tactiles.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;		None
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;		None
  8950 ;; Return value:  Size  Location     Type
  8951 ;;                  1    wreg      void 
  8952 ;; Registers used:
  8953 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8954 ;; Tracked objects:
  8955 ;;		On entry : 0/0
  8956 ;;		On exit  : 0/0
  8957 ;;		Unchanged: 0/0
  8958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8961 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8962 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8963 ;;Total ram usage:        1 bytes
  8964 ;; Hardware stack levels used:    1
  8965 ;; Hardware stack levels required when called:    5
  8966 ;; This function calls:
  8967 ;;		_set_leds_top
  8968 ;;		_wait_ms
  8969 ;; This function is called by:
  8970 ;;		_main
  8971 ;; This function uses a non-reentrant model
  8972 ;;
  8973                           
  8974                           
  8975                           ;psect for function _read_top_tactile
  8976  129A                     _read_top_tactile:	
  8977                           
  8978                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8982  129A  0020               	movlb	0	; select bank0
  8983  129B  1A8F               	btfsc	15,5	;volatile
  8984  129C  2AA4               	goto	l5452
  8985                           
  8986                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  8987  129D  0022               	movlb	2	; select bank2
  8988  129E  083E               	movf	_topTactile_pressed^(0+256),w
  8989  129F  1903               	btfsc	3,2
  8990  12A0  2AAF               	goto	l858
  8991                           
  8992                           ;tactiles.c: 58: topTactile_pressed--;
  8993  12A1  3001               	movlw	1
  8994  12A2  02BE               	subwf	_topTactile_pressed^(0+256),f
  8995                           
  8996                           ;tactiles.c: 59: }
  8997                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  8998  12A3  2AAF               	goto	l858
  8999  12A4                     l5452:	
  9000  12A4  3019               	movlw	25
  9001  12A5  0022               	movlb	2	; select bank2
  9002  12A6  023E               	subwf	_topTactile_pressed^(0+256),w
  9003  12A7  1803               	skipnc
  9004  12A8  2AAF               	goto	l858
  9005                           
  9006                           ;tactiles.c: 61: topTactile_pressed++;
  9007  12A9  3001               	movlw	1
  9008  12AA  0021               	movlb	1	; select bank1
  9009  12AB  00B2               	movwf	??_read_top_tactile^(0+128)
  9010  12AC  0832               	movf	??_read_top_tactile^(0+128),w
  9011  12AD  0022               	movlb	2	; select bank2
  9012  12AE  07BE               	addwf	_topTactile_pressed^(0+256),f
  9013  12AF                     l858:	
  9014                           
  9015                           ;tactiles.c: 62: }
  9016                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9017  12AF  083E               	movf	_topTactile_pressed^(0+256),w
  9018  12B0  1D03               	btfss	3,2
  9019  12B1  0008               	return
  9020                           
  9021                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9022  12B2  0020               	movlb	0	; select bank0
  9023  12B3  0864               	movf	_top_push_state,w
  9024  12B4  3E01               	addlw	1
  9025  12B5  00E4               	movwf	_top_push_state
  9026  12B6  3000               	movlw	0
  9027  12B7  3D65               	addwfc	_top_push_state+1,w
  9028  12B8  00E5               	movwf	_top_push_state+1
  9029                           
  9030                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9031  12B9  0865               	movf	_top_push_state+1,w
  9032  12BA  3A80               	xorlw	128
  9033  12BB  0021               	movlb	1	; select bank1
  9034  12BC  00B2               	movwf	??_read_top_tactile^(0+128)
  9035  12BD  3080               	movlw	128
  9036  12BE  0232               	subwf	??_read_top_tactile^(0+128),w
  9037  12BF  1D03               	skipz
  9038  12C0  2AC4               	goto	u6065
  9039  12C1  3007               	movlw	7
  9040  12C2  0020               	movlb	0	; select bank0
  9041  12C3  0264               	subwf	_top_push_state,w
  9042  12C4                     u6065:	
  9043  12C4  1C03               	skipc
  9044  12C5  2ACB               	goto	l5462
  9045                           
  9046                           ;tactiles.c: 70: top_push_state = 1;
  9047  12C6  3001               	movlw	1
  9048  12C7  0020               	movlb	0	; select bank0
  9049  12C8  00E4               	movwf	_top_push_state
  9050  12C9  3000               	movlw	0
  9051  12CA  00E5               	movwf	_top_push_state+1
  9052  12CB                     l5462:	
  9053                           
  9054                           ;tactiles.c: 71: }
  9055                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9056  12CB  0020               	movlb	0	; select bank0
  9057  12CC  0865               	movf	_top_push_state+1,w
  9058  12CD  0021               	movlb	1	; select bank1
  9059  12CE  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9060  12CF  0020               	movlb	0	; select bank0
  9061  12D0  0864               	movf	_top_push_state,w
  9062  12D1  0021               	movlb	1	; select bank1
  9063  12D2  00A0               	movwf	set_leds_top@x^(0+128)
  9064  12D3  3001               	movlw	1
  9065  12D4  00A2               	movwf	set_leds_top@ledState^(0+128)
  9066  12D5  3000               	movlw	0
  9067  12D6  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9068  12D7  3193  238B  3192   	fcall	_set_leds_top
  9069                           
  9070                           ;tactiles.c: 73: delay_time_changed = 1;
  9071  12DA  3001               	movlw	1
  9072  12DB  0023               	movlb	3	; select bank3
  9073  12DC  00E3               	movwf	_delay_time_changed^(0+384)
  9074  12DD  3000               	movlw	0
  9075  12DE  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  9076  12DF                     l862:	
  9077                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9078                           
  9079  12DF  0020               	movlb	0	; select bank0
  9080  12E0  1E8F               	btfss	15,5	;volatile
  9081  12E1  2ADF               	goto	l862
  9082                           
  9083                           ;tactiles.c: 77: }
  9084                           ;tactiles.c: 78: wait_ms(20);
  9085  12E2  3014               	movlw	20
  9086  12E3  0021               	movlb	1	; select bank1
  9087  12E4  00AC               	movwf	wait_ms@timeSec^(0+128)
  9088  12E5  3000               	movlw	0
  9089  12E6  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9090  12E7  319F  2793         	fcall	_wait_ms
  9091  12E9  0008               	return
  9092  12EA                     __end_of_read_top_tactile:	
  9093                           
  9094                           	psect	text17
  9095  11C1                     __ptext17:	
  9096 ;; *************** function _read_bottom_tactile *****************
  9097 ;; Defined at:
  9098 ;;		line 17 in file "tactiles.c"
  9099 ;; Parameters:    Size  Location     Type
  9100 ;;		None
  9101 ;; Auto vars:     Size  Location     Type
  9102 ;;		None
  9103 ;; Return value:  Size  Location     Type
  9104 ;;                  1    wreg      void 
  9105 ;; Registers used:
  9106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9107 ;; Tracked objects:
  9108 ;;		On entry : 0/0
  9109 ;;		On exit  : 0/0
  9110 ;;		Unchanged: 0/0
  9111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9113 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9114 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9115 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9116 ;;Total ram usage:        1 bytes
  9117 ;; Hardware stack levels used:    1
  9118 ;; Hardware stack levels required when called:    5
  9119 ;; This function calls:
  9120 ;;		_set_leds_bottom
  9121 ;;		_wait_ms
  9122 ;; This function is called by:
  9123 ;;		_main
  9124 ;; This function uses a non-reentrant model
  9125 ;;
  9126                           
  9127                           
  9128                           ;psect for function _read_bottom_tactile
  9129  11C1                     _read_bottom_tactile:	
  9130                           
  9131                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9132                           
  9133                           ;incstack = 0
  9134                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9135  11C1  0020               	movlb	0	; select bank0
  9136  11C2  1B0F               	btfsc	15,6	;volatile
  9137  11C3  29CB               	goto	l5432
  9138                           
  9139                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9140  11C4  0022               	movlb	2	; select bank2
  9141  11C5  0836               	movf	_bottomTactile_pressed^(0+256),w
  9142  11C6  1903               	btfsc	3,2
  9143  11C7  29D6               	goto	l846
  9144                           
  9145                           ;tactiles.c: 27: bottomTactile_pressed--;
  9146  11C8  3001               	movlw	1
  9147  11C9  02B6               	subwf	_bottomTactile_pressed^(0+256),f
  9148                           
  9149                           ;tactiles.c: 28: }
  9150                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9151  11CA  29D6               	goto	l846
  9152  11CB                     l5432:	
  9153  11CB  3019               	movlw	25
  9154  11CC  0022               	movlb	2	; select bank2
  9155  11CD  0236               	subwf	_bottomTactile_pressed^(0+256),w
  9156  11CE  1803               	skipnc
  9157  11CF  29D6               	goto	l846
  9158                           
  9159                           ;tactiles.c: 30: bottomTactile_pressed++;
  9160  11D0  3001               	movlw	1
  9161  11D1  0021               	movlb	1	; select bank1
  9162  11D2  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9163  11D3  0832               	movf	??_read_bottom_tactile^(0+128),w
  9164  11D4  0022               	movlb	2	; select bank2
  9165  11D5  07B6               	addwf	_bottomTactile_pressed^(0+256),f
  9166  11D6                     l846:	
  9167                           
  9168                           ;tactiles.c: 31: }
  9169                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9170  11D6  0836               	movf	_bottomTactile_pressed^(0+256),w
  9171  11D7  1D03               	btfss	3,2
  9172  11D8  0008               	return
  9173                           
  9174                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9175  11D9  0020               	movlb	0	; select bank0
  9176  11DA  0860               	movf	_bottom_push_state,w
  9177  11DB  3E01               	addlw	1
  9178  11DC  00E0               	movwf	_bottom_push_state
  9179  11DD  3000               	movlw	0
  9180  11DE  3D61               	addwfc	_bottom_push_state+1,w
  9181  11DF  00E1               	movwf	_bottom_push_state+1
  9182                           
  9183                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9184  11E0  0861               	movf	_bottom_push_state+1,w
  9185  11E1  3A80               	xorlw	128
  9186  11E2  0021               	movlb	1	; select bank1
  9187  11E3  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9188  11E4  3080               	movlw	128
  9189  11E5  0232               	subwf	??_read_bottom_tactile^(0+128),w
  9190  11E6  1D03               	skipz
  9191  11E7  29EB               	goto	u6005
  9192  11E8  3007               	movlw	7
  9193  11E9  0020               	movlb	0	; select bank0
  9194  11EA  0260               	subwf	_bottom_push_state,w
  9195  11EB                     u6005:	
  9196  11EB  1C03               	skipc
  9197  11EC  29F2               	goto	l5442
  9198                           
  9199                           ;tactiles.c: 37: bottom_push_state = 1;
  9200  11ED  3001               	movlw	1
  9201  11EE  0020               	movlb	0	; select bank0
  9202  11EF  00E0               	movwf	_bottom_push_state
  9203  11F0  3000               	movlw	0
  9204  11F1  00E1               	movwf	_bottom_push_state+1
  9205  11F2                     l5442:	
  9206                           
  9207                           ;tactiles.c: 38: }
  9208                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9209  11F2  0020               	movlb	0	; select bank0
  9210  11F3  0861               	movf	_bottom_push_state+1,w
  9211  11F4  0021               	movlb	1	; select bank1
  9212  11F5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9213  11F6  0020               	movlb	0	; select bank0
  9214  11F7  0860               	movf	_bottom_push_state,w
  9215  11F8  0021               	movlb	1	; select bank1
  9216  11F9  00A0               	movwf	set_leds_bottom@x^(0+128)
  9217  11FA  319F  27C5  3191   	fcall	_set_leds_bottom
  9218  11FD                     l850:	
  9219                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9220                           
  9221  11FD  0020               	movlb	0	; select bank0
  9222  11FE  1F0F               	btfss	15,6	;volatile
  9223  11FF  29FD               	goto	l850
  9224                           
  9225                           ;tactiles.c: 42: }
  9226                           ;tactiles.c: 43: wait_ms(20);
  9227  1200  3014               	movlw	20
  9228  1201  0021               	movlb	1	; select bank1
  9229  1202  00AC               	movwf	wait_ms@timeSec^(0+128)
  9230  1203  3000               	movlw	0
  9231  1204  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9232  1205  319F  2793         	fcall	_wait_ms
  9233  1207  0008               	return
  9234  1208                     __end_of_read_bottom_tactile:	
  9235                           
  9236                           	psect	text18
  9237  162D                     __ptext18:	
  9238 ;; *************** function _map *****************
  9239 ;; Defined at:
  9240 ;;		line 171 in file "user.c"
  9241 ;; Parameters:    Size  Location     Type
  9242 ;;  x               3   53[BANK1 ] float 
  9243 ;;  in_min          3   56[BANK1 ] float 
  9244 ;;  in_max          3   59[BANK1 ] float 
  9245 ;;  out_min         3   62[BANK1 ] float 
  9246 ;;  out_max         3   65[BANK1 ] float 
  9247 ;; Auto vars:     Size  Location     Type
  9248 ;;		None
  9249 ;; Return value:  Size  Location     Type
  9250 ;;                  3   53[BANK1 ] float 
  9251 ;; Registers used:
  9252 ;;		wreg, status,2, status,0, pclath, cstack
  9253 ;; Tracked objects:
  9254 ;;		On entry : 0/0
  9255 ;;		On exit  : 0/0
  9256 ;;		Unchanged: 0/0
  9257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9258 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9259 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9261 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9262 ;;Total ram usage:       18 bytes
  9263 ;; Hardware stack levels used:    1
  9264 ;; Hardware stack levels required when called:    5
  9265 ;; This function calls:
  9266 ;;		___ftadd
  9267 ;;		___ftdiv
  9268 ;;		___ftmul
  9269 ;;		___ftneg
  9270 ;; This function is called by:
  9271 ;;		_main
  9272 ;; This function uses a non-reentrant model
  9273 ;;
  9274                           
  9275                           
  9276                           ;psect for function _map
  9277  162D                     _map:	
  9278                           
  9279                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9280                           
  9281                           ;incstack = 0
  9282                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9283  162D  0021               	movlb	1	; select bank1
  9284  162E  085B               	movf	map@in_max^(0+128),w
  9285  162F  00A8               	movwf	___ftadd@f1^(0+128)
  9286  1630  085C               	movf	(map@in_max+1)^(0+128),w
  9287  1631  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9288  1632  085D               	movf	(map@in_max+2)^(0+128),w
  9289  1633  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9290  1634  0858               	movf	map@in_min^(0+128),w
  9291  1635  00A0               	movwf	___ftneg@f1^(0+128)
  9292  1636  0859               	movf	(map@in_min+1)^(0+128),w
  9293  1637  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9294  1638  085A               	movf	(map@in_min+2)^(0+128),w
  9295  1639  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9296  163A  319D  258D  3196   	fcall	___ftneg
  9297  163D  0021               	movlb	1	; select bank1
  9298  163E  0820               	movf	?___ftneg^(0+128),w
  9299  163F  00AB               	movwf	___ftadd@f2^(0+128)
  9300  1640  0821               	movf	(?___ftneg+1)^(0+128),w
  9301  1641  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9302  1642  0822               	movf	(?___ftneg+2)^(0+128),w
  9303  1643  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9304  1644  318A  22A5  3196   	fcall	___ftadd
  9305  1647  0021               	movlb	1	; select bank1
  9306  1648  0828               	movf	?___ftadd^(0+128),w
  9307  1649  00C5               	movwf	___ftdiv@f2^(0+128)
  9308  164A  0829               	movf	(?___ftadd+1)^(0+128),w
  9309  164B  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  9310  164C  082A               	movf	(?___ftadd+2)^(0+128),w
  9311  164D  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  9312  164E  0861               	movf	map@out_max^(0+128),w
  9313  164F  00A8               	movwf	___ftadd@f1^(0+128)
  9314  1650  0862               	movf	(map@out_max+1)^(0+128),w
  9315  1651  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9316  1652  0863               	movf	(map@out_max+2)^(0+128),w
  9317  1653  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9318  1654  085E               	movf	map@out_min^(0+128),w
  9319  1655  00A0               	movwf	___ftneg@f1^(0+128)
  9320  1656  085F               	movf	(map@out_min+1)^(0+128),w
  9321  1657  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9322  1658  0860               	movf	(map@out_min+2)^(0+128),w
  9323  1659  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9324  165A  319D  258D  3196   	fcall	___ftneg
  9325  165D  0021               	movlb	1	; select bank1
  9326  165E  0820               	movf	?___ftneg^(0+128),w
  9327  165F  00AB               	movwf	___ftadd@f2^(0+128)
  9328  1660  0821               	movf	(?___ftneg+1)^(0+128),w
  9329  1661  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9330  1662  0822               	movf	(?___ftneg+2)^(0+128),w
  9331  1663  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9332  1664  318A  22A5  3196   	fcall	___ftadd
  9333  1667  0021               	movlb	1	; select bank1
  9334  1668  0828               	movf	?___ftadd^(0+128),w
  9335  1669  00B5               	movwf	___ftmul@f1^(0+128)
  9336  166A  0829               	movf	(?___ftadd+1)^(0+128),w
  9337  166B  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9338  166C  082A               	movf	(?___ftadd+2)^(0+128),w
  9339  166D  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9340  166E  0855               	movf	map@x^(0+128),w
  9341  166F  00A8               	movwf	___ftadd@f1^(0+128)
  9342  1670  0856               	movf	(map@x+1)^(0+128),w
  9343  1671  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9344  1672  0857               	movf	(map@x+2)^(0+128),w
  9345  1673  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9346  1674  0858               	movf	map@in_min^(0+128),w
  9347  1675  00A0               	movwf	___ftneg@f1^(0+128)
  9348  1676  0859               	movf	(map@in_min+1)^(0+128),w
  9349  1677  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9350  1678  085A               	movf	(map@in_min+2)^(0+128),w
  9351  1679  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9352  167A  319D  258D  3196   	fcall	___ftneg
  9353  167D  0021               	movlb	1	; select bank1
  9354  167E  0820               	movf	?___ftneg^(0+128),w
  9355  167F  00AB               	movwf	___ftadd@f2^(0+128)
  9356  1680  0821               	movf	(?___ftneg+1)^(0+128),w
  9357  1681  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9358  1682  0822               	movf	(?___ftneg+2)^(0+128),w
  9359  1683  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9360  1684  318A  22A5  3196   	fcall	___ftadd
  9361  1687  0021               	movlb	1	; select bank1
  9362  1688  0828               	movf	?___ftadd^(0+128),w
  9363  1689  00B8               	movwf	___ftmul@f2^(0+128)
  9364  168A  0829               	movf	(?___ftadd+1)^(0+128),w
  9365  168B  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9366  168C  082A               	movf	(?___ftadd+2)^(0+128),w
  9367  168D  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9368  168E  3188  2040  3196   	fcall	___ftmul
  9369  1691  0021               	movlb	1	; select bank1
  9370  1692  0835               	movf	?___ftmul^(0+128),w
  9371  1693  00C8               	movwf	___ftdiv@f1^(0+128)
  9372  1694  0836               	movf	(?___ftmul+1)^(0+128),w
  9373  1695  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  9374  1696  0837               	movf	(?___ftmul+2)^(0+128),w
  9375  1697  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  9376  1698  3197  2757  3196   	fcall	___ftdiv
  9377  169B  0021               	movlb	1	; select bank1
  9378  169C  0845               	movf	?___ftdiv^(0+128),w
  9379  169D  00E4               	movwf	_map$2157^(0+128)
  9380  169E  0846               	movf	(?___ftdiv+1)^(0+128),w
  9381  169F  00E5               	movwf	(_map$2157+1)^(0+128)
  9382  16A0  0847               	movf	(?___ftdiv+2)^(0+128),w
  9383  16A1  00E6               	movwf	(_map$2157+2)^(0+128)
  9384                           
  9385                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9386  16A2  085E               	movf	map@out_min^(0+128),w
  9387  16A3  00A8               	movwf	___ftadd@f1^(0+128)
  9388  16A4  085F               	movf	(map@out_min+1)^(0+128),w
  9389  16A5  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9390  16A6  0860               	movf	(map@out_min+2)^(0+128),w
  9391  16A7  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9392  16A8  0864               	movf	_map$2157^(0+128),w
  9393  16A9  00AB               	movwf	___ftadd@f2^(0+128)
  9394  16AA  0865               	movf	(_map$2157+1)^(0+128),w
  9395  16AB  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9396  16AC  0866               	movf	(_map$2157+2)^(0+128),w
  9397  16AD  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9398  16AE  318A  22A5         	fcall	___ftadd
  9399  16B0  0021               	movlb	1	; select bank1
  9400  16B1  0828               	movf	?___ftadd^(0+128),w
  9401  16B2  00D5               	movwf	?_map^(0+128)
  9402  16B3  0829               	movf	(?___ftadd+1)^(0+128),w
  9403  16B4  00D6               	movwf	(?_map+1)^(0+128)
  9404  16B5  082A               	movf	(?___ftadd+2)^(0+128),w
  9405  16B6  00D7               	movwf	(?_map+2)^(0+128)
  9406  16B7  0008               	return
  9407  16B8                     __end_of_map:	
  9408                           
  9409                           	psect	text19
  9410  1D8D                     __ptext19:	
  9411 ;; *************** function ___ftneg *****************
  9412 ;; Defined at:
  9413 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9414 ;; Parameters:    Size  Location     Type
  9415 ;;  f1              3    0[BANK1 ] float 
  9416 ;; Auto vars:     Size  Location     Type
  9417 ;;		None
  9418 ;; Return value:  Size  Location     Type
  9419 ;;                  3    0[BANK1 ] float 
  9420 ;; Registers used:
  9421 ;;		wreg
  9422 ;; Tracked objects:
  9423 ;;		On entry : 0/0
  9424 ;;		On exit  : 0/0
  9425 ;;		Unchanged: 0/0
  9426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9427 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9430 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9431 ;;Total ram usage:        3 bytes
  9432 ;; Hardware stack levels used:    1
  9433 ;; Hardware stack levels required when called:    3
  9434 ;; This function calls:
  9435 ;;		Nothing
  9436 ;; This function is called by:
  9437 ;;		_map
  9438 ;;		_scalePotValue
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           
  9443                           ;psect for function ___ftneg
  9444  1D8D                     ___ftneg:	
  9445                           
  9446                           ;incstack = 0
  9447                           ; Regs used in ___ftneg: [wreg]
  9448  1D8D  0021               	movlb	1	; select bank1
  9449  1D8E  0822               	movf	(___ftneg@f1+2)^(0+128),w
  9450  1D8F  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  9451  1D90  0420               	iorwf	___ftneg@f1^(0+128),w
  9452  1D91  1903               	skipnz
  9453  1D92  0008               	return
  9454  1D93  3080               	movlw	128
  9455  1D94  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  9456  1D95  0008               	return
  9457  1D96                     __end_of___ftneg:	
  9458                           
  9459                           	psect	text20
  9460  0840                     __ptext20:	
  9461 ;; *************** function ___ftmul *****************
  9462 ;; Defined at:
  9463 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9464 ;; Parameters:    Size  Location     Type
  9465 ;;  f1              3   21[BANK1 ] float 
  9466 ;;  f2              3   24[BANK1 ] float 
  9467 ;; Auto vars:     Size  Location     Type
  9468 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
  9469 ;;  sign            1   36[BANK1 ] unsigned char 
  9470 ;;  cntr            1   35[BANK1 ] unsigned char 
  9471 ;;  exp             1   31[BANK1 ] unsigned char 
  9472 ;; Return value:  Size  Location     Type
  9473 ;;                  3   21[BANK1 ] float 
  9474 ;; Registers used:
  9475 ;;		wreg, status,2, status,0, pclath, cstack
  9476 ;; Tracked objects:
  9477 ;;		On entry : 0/0
  9478 ;;		On exit  : 0/0
  9479 ;;		Unchanged: 0/0
  9480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9481 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9482 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9483 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9484 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9485 ;;Total ram usage:       16 bytes
  9486 ;; Hardware stack levels used:    1
  9487 ;; Hardware stack levels required when called:    4
  9488 ;; This function calls:
  9489 ;;		___ftpack
  9490 ;; This function is called by:
  9491 ;;		_set_subdivision
  9492 ;;		_map
  9493 ;;		_scalePotValue
  9494 ;; This function uses a non-reentrant model
  9495 ;;
  9496                           
  9497                           
  9498                           ;psect for function ___ftmul
  9499  0840                     ___ftmul:	
  9500                           
  9501                           ;incstack = 0
  9502                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9503  0840  0021               	movlb	1	; select bank1
  9504  0841  0835               	movf	___ftmul@f1^(0+128),w
  9505  0842  00BB               	movwf	??___ftmul^(0+128)
  9506  0843  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9507  0844  00BC               	movwf	(??___ftmul^(0+128)+1)
  9508  0845  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9509  0846  00BD               	movwf	(??___ftmul^(0+128)+2)
  9510  0847  1003               	clrc
  9511  0848  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9512  0849  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9513  084A  00BE               	movwf	(??___ftmul+3)^(0+128)
  9514  084B  083E               	movf	(??___ftmul+3)^(0+128),w
  9515  084C  00BF               	movwf	___ftmul@exp^(0+128)
  9516  084D  083F               	movf	___ftmul@exp^(0+128),w
  9517  084E  1D03               	btfss	3,2
  9518  084F  2857               	goto	l5276
  9519  0850  3000               	movlw	0
  9520  0851  00B5               	movwf	?___ftmul^(0+128)
  9521  0852  3000               	movlw	0
  9522  0853  00B6               	movwf	(?___ftmul+1)^(0+128)
  9523  0854  3000               	movlw	0
  9524  0855  00B7               	movwf	(?___ftmul+2)^(0+128)
  9525  0856  0008               	return
  9526  0857                     l5276:	
  9527  0857  0838               	movf	___ftmul@f2^(0+128),w
  9528  0858  00BB               	movwf	??___ftmul^(0+128)
  9529  0859  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9530  085A  00BC               	movwf	(??___ftmul^(0+128)+1)
  9531  085B  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9532  085C  00BD               	movwf	(??___ftmul^(0+128)+2)
  9533  085D  1003               	clrc
  9534  085E  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9535  085F  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9536  0860  00BE               	movwf	(??___ftmul+3)^(0+128)
  9537  0861  083E               	movf	(??___ftmul+3)^(0+128),w
  9538  0862  00C4               	movwf	___ftmul@sign^(0+128)
  9539  0863  0844               	movf	___ftmul@sign^(0+128),w
  9540  0864  1D03               	btfss	3,2
  9541  0865  286D               	goto	l5282
  9542  0866  3000               	movlw	0
  9543  0867  00B5               	movwf	?___ftmul^(0+128)
  9544  0868  3000               	movlw	0
  9545  0869  00B6               	movwf	(?___ftmul+1)^(0+128)
  9546  086A  3000               	movlw	0
  9547  086B  00B7               	movwf	(?___ftmul+2)^(0+128)
  9548  086C  0008               	return
  9549  086D                     l5282:	
  9550  086D  0844               	movf	___ftmul@sign^(0+128),w
  9551  086E  3E7B               	addlw	123
  9552  086F  00BB               	movwf	??___ftmul^(0+128)
  9553  0870  083B               	movf	??___ftmul^(0+128),w
  9554  0871  07BF               	addwf	___ftmul@exp^(0+128),f
  9555  0872  0835               	movf	___ftmul@f1^(0+128),w
  9556  0873  00BB               	movwf	??___ftmul^(0+128)
  9557  0874  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9558  0875  00BC               	movwf	(??___ftmul^(0+128)+1)
  9559  0876  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9560  0877  00BD               	movwf	(??___ftmul^(0+128)+2)
  9561  0878  3010               	movlw	16
  9562  0879                     u5685:	
  9563  0879  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9564  087A  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9565  087B  0CBB               	rrf	??___ftmul^(0+128),f
  9566  087C  0B89               	decfsz	9,f
  9567  087D  2879               	goto	u5685
  9568  087E  083B               	movf	??___ftmul^(0+128),w
  9569  087F  00BE               	movwf	(??___ftmul+3)^(0+128)
  9570  0880  083E               	movf	(??___ftmul+3)^(0+128),w
  9571  0881  00C4               	movwf	___ftmul@sign^(0+128)
  9572  0882  0838               	movf	___ftmul@f2^(0+128),w
  9573  0883  00BB               	movwf	??___ftmul^(0+128)
  9574  0884  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9575  0885  00BC               	movwf	(??___ftmul^(0+128)+1)
  9576  0886  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9577  0887  00BD               	movwf	(??___ftmul^(0+128)+2)
  9578  0888  3010               	movlw	16
  9579  0889                     u5695:	
  9580  0889  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9581  088A  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9582  088B  0CBB               	rrf	??___ftmul^(0+128),f
  9583  088C  0B89               	decfsz	9,f
  9584  088D  2889               	goto	u5695
  9585  088E  083B               	movf	??___ftmul^(0+128),w
  9586  088F  00BE               	movwf	(??___ftmul+3)^(0+128)
  9587  0890  083E               	movf	(??___ftmul+3)^(0+128),w
  9588  0891  06C4               	xorwf	___ftmul@sign^(0+128),f
  9589  0892  3080               	movlw	128
  9590  0893  00BB               	movwf	??___ftmul^(0+128)
  9591  0894  083B               	movf	??___ftmul^(0+128),w
  9592  0895  05C4               	andwf	___ftmul@sign^(0+128),f
  9593  0896  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
  9594  0897  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
  9595  0898  30FF               	movlw	255
  9596  0899  05B8               	andwf	___ftmul@f2^(0+128),f
  9597  089A  30FF               	movlw	255
  9598  089B  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
  9599  089C  3000               	movlw	0
  9600  089D  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
  9601  089E  3000               	movlw	0
  9602  089F  00C0               	movwf	___ftmul@f3_as_product^(0+128)
  9603  08A0  3000               	movlw	0
  9604  08A1  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  9605  08A2  3000               	movlw	0
  9606  08A3  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  9607  08A4  3007               	movlw	7
  9608  08A5  00BB               	movwf	??___ftmul^(0+128)
  9609  08A6  083B               	movf	??___ftmul^(0+128),w
  9610  08A7  00C3               	movwf	___ftmul@cntr^(0+128)
  9611  08A8                     l5294:	
  9612  08A8  1C35               	btfss	___ftmul@f1^(0+128),0
  9613  08A9  28B0               	goto	l5298
  9614  08AA  0838               	movf	___ftmul@f2^(0+128),w
  9615  08AB  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9616  08AC  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9617  08AD  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9618  08AE  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9619  08AF  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9620  08B0                     l5298:	
  9621  08B0  3001               	movlw	1
  9622  08B1                     u5715:	
  9623  08B1  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9624  08B2  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9625  08B3  0CB5               	rrf	___ftmul@f1^(0+128),f
  9626  08B4  0B89               	decfsz	9,f
  9627  08B5  28B1               	goto	u5715
  9628  08B6  3001               	movlw	1
  9629  08B7                     u5725:	
  9630  08B7  35B8               	lslf	___ftmul@f2^(0+128),f
  9631  08B8  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
  9632  08B9  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
  9633  08BA  0B89               	decfsz	9,f
  9634  08BB  28B7               	goto	u5725
  9635  08BC  3001               	movlw	1
  9636  08BD  02C3               	subwf	___ftmul@cntr^(0+128),f
  9637  08BE  1D03               	btfss	3,2
  9638  08BF  28A8               	goto	l5294
  9639  08C0  3009               	movlw	9
  9640  08C1  00BB               	movwf	??___ftmul^(0+128)
  9641  08C2  083B               	movf	??___ftmul^(0+128),w
  9642  08C3  00C3               	movwf	___ftmul@cntr^(0+128)
  9643  08C4                     l5306:	
  9644  08C4  1C35               	btfss	___ftmul@f1^(0+128),0
  9645  08C5  28CC               	goto	l5310
  9646  08C6  0838               	movf	___ftmul@f2^(0+128),w
  9647  08C7  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9648  08C8  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9649  08C9  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9650  08CA  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9651  08CB  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9652  08CC                     l5310:	
  9653  08CC  3001               	movlw	1
  9654  08CD                     u5755:	
  9655  08CD  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9656  08CE  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9657  08CF  0CB5               	rrf	___ftmul@f1^(0+128),f
  9658  08D0  0B89               	decfsz	9,f
  9659  08D1  28CD               	goto	u5755
  9660  08D2  3001               	movlw	1
  9661  08D3                     u5765:	
  9662  08D3  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  9663  08D4  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  9664  08D5  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
  9665  08D6  0B89               	decfsz	9,f
  9666  08D7  28D3               	goto	u5765
  9667  08D8  3001               	movlw	1
  9668  08D9  02C3               	subwf	___ftmul@cntr^(0+128),f
  9669  08DA  1D03               	btfss	3,2
  9670  08DB  28C4               	goto	l5306
  9671  08DC  0840               	movf	___ftmul@f3_as_product^(0+128),w
  9672  08DD  00A0               	movwf	___ftpack@arg^(0+128)
  9673  08DE  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  9674  08DF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9675  08E0  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  9676  08E1  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9677  08E2  083F               	movf	___ftmul@exp^(0+128),w
  9678  08E3  00BB               	movwf	??___ftmul^(0+128)
  9679  08E4  083B               	movf	??___ftmul^(0+128),w
  9680  08E5  00A3               	movwf	___ftpack@exp^(0+128)
  9681  08E6  0844               	movf	___ftmul@sign^(0+128),w
  9682  08E7  00BC               	movwf	(??___ftmul+1)^(0+128)
  9683  08E8  083C               	movf	(??___ftmul+1)^(0+128),w
  9684  08E9  00A4               	movwf	___ftpack@sign^(0+128)
  9685  08EA  3193  23DF         	fcall	___ftpack
  9686  08EC  0021               	movlb	1	; select bank1
  9687  08ED  0820               	movf	?___ftpack^(0+128),w
  9688  08EE  00B5               	movwf	?___ftmul^(0+128)
  9689  08EF  0821               	movf	(?___ftpack+1)^(0+128),w
  9690  08F0  00B6               	movwf	(?___ftmul+1)^(0+128)
  9691  08F1  0822               	movf	(?___ftpack+2)^(0+128),w
  9692  08F2  00B7               	movwf	(?___ftmul+2)^(0+128)
  9693  08F3  0008               	return
  9694  08F4                     __end_of___ftmul:	
  9695                           
  9696                           	psect	text21
  9697  1757                     __ptext21:	
  9698 ;; *************** function ___ftdiv *****************
  9699 ;; Defined at:
  9700 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9701 ;; Parameters:    Size  Location     Type
  9702 ;;  f2              3   37[BANK1 ] float 
  9703 ;;  f1              3   40[BANK1 ] float 
  9704 ;; Auto vars:     Size  Location     Type
  9705 ;;  f3              3   48[BANK1 ] float 
  9706 ;;  sign            1   52[BANK1 ] unsigned char 
  9707 ;;  exp             1   51[BANK1 ] unsigned char 
  9708 ;;  cntr            1   47[BANK1 ] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;                  3   37[BANK1 ] float 
  9711 ;; Registers used:
  9712 ;;		wreg, status,2, status,0, pclath, cstack
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9718 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9719 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9720 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9721 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9722 ;;Total ram usage:       16 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    4
  9725 ;; This function calls:
  9726 ;;		___ftpack
  9727 ;; This function is called by:
  9728 ;;		_set_subdivision
  9729 ;;		_map
  9730 ;;		_scalePotValue
  9731 ;; This function uses a non-reentrant model
  9732 ;;
  9733                           
  9734                           
  9735                           ;psect for function ___ftdiv
  9736  1757                     ___ftdiv:	
  9737                           
  9738                           ;incstack = 0
  9739                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9740  1757  0021               	movlb	1	; select bank1
  9741  1758  0848               	movf	___ftdiv@f1^(0+128),w
  9742  1759  00CB               	movwf	??___ftdiv^(0+128)
  9743  175A  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9744  175B  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9745  175C  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9746  175D  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9747  175E  1003               	clrc
  9748  175F  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9749  1760  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9750  1761  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9751  1762  084E               	movf	(??___ftdiv+3)^(0+128),w
  9752  1763  00D3               	movwf	___ftdiv@exp^(0+128)
  9753  1764  0853               	movf	___ftdiv@exp^(0+128),w
  9754  1765  1D03               	btfss	3,2
  9755  1766  2F6E               	goto	l5234
  9756  1767  3000               	movlw	0
  9757  1768  00C5               	movwf	?___ftdiv^(0+128)
  9758  1769  3000               	movlw	0
  9759  176A  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9760  176B  3000               	movlw	0
  9761  176C  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9762  176D  0008               	return
  9763  176E                     l5234:	
  9764  176E  0845               	movf	___ftdiv@f2^(0+128),w
  9765  176F  00CB               	movwf	??___ftdiv^(0+128)
  9766  1770  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9767  1771  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9768  1772  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9769  1773  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9770  1774  1003               	clrc
  9771  1775  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9772  1776  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9773  1777  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9774  1778  084E               	movf	(??___ftdiv+3)^(0+128),w
  9775  1779  00D4               	movwf	___ftdiv@sign^(0+128)
  9776  177A  0854               	movf	___ftdiv@sign^(0+128),w
  9777  177B  1D03               	btfss	3,2
  9778  177C  2F84               	goto	l5240
  9779  177D  3000               	movlw	0
  9780  177E  00C5               	movwf	?___ftdiv^(0+128)
  9781  177F  3000               	movlw	0
  9782  1780  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9783  1781  3000               	movlw	0
  9784  1782  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9785  1783  0008               	return
  9786  1784                     l5240:	
  9787  1784  3000               	movlw	0
  9788  1785  00D0               	movwf	___ftdiv@f3^(0+128)
  9789  1786  3000               	movlw	0
  9790  1787  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
  9791  1788  3000               	movlw	0
  9792  1789  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
  9793  178A  3089               	movlw	137
  9794  178B  0754               	addwf	___ftdiv@sign^(0+128),w
  9795  178C  00CB               	movwf	??___ftdiv^(0+128)
  9796  178D  084B               	movf	??___ftdiv^(0+128),w
  9797  178E  02D3               	subwf	___ftdiv@exp^(0+128),f
  9798  178F  0848               	movf	___ftdiv@f1^(0+128),w
  9799  1790  00CB               	movwf	??___ftdiv^(0+128)
  9800  1791  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9801  1792  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9802  1793  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9803  1794  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9804  1795  3010               	movlw	16
  9805  1796                     u5605:	
  9806  1796  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9807  1797  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9808  1798  0CCB               	rrf	??___ftdiv^(0+128),f
  9809  1799  0B89               	decfsz	9,f
  9810  179A  2F96               	goto	u5605
  9811  179B  084B               	movf	??___ftdiv^(0+128),w
  9812  179C  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9813  179D  084E               	movf	(??___ftdiv+3)^(0+128),w
  9814  179E  00D4               	movwf	___ftdiv@sign^(0+128)
  9815  179F  0845               	movf	___ftdiv@f2^(0+128),w
  9816  17A0  00CB               	movwf	??___ftdiv^(0+128)
  9817  17A1  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9818  17A2  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9819  17A3  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9820  17A4  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9821  17A5  3010               	movlw	16
  9822  17A6                     u5615:	
  9823  17A6  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9824  17A7  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9825  17A8  0CCB               	rrf	??___ftdiv^(0+128),f
  9826  17A9  0B89               	decfsz	9,f
  9827  17AA  2FA6               	goto	u5615
  9828  17AB  084B               	movf	??___ftdiv^(0+128),w
  9829  17AC  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9830  17AD  084E               	movf	(??___ftdiv+3)^(0+128),w
  9831  17AE  06D4               	xorwf	___ftdiv@sign^(0+128),f
  9832  17AF  3080               	movlw	128
  9833  17B0  00CB               	movwf	??___ftdiv^(0+128)
  9834  17B1  084B               	movf	??___ftdiv^(0+128),w
  9835  17B2  05D4               	andwf	___ftdiv@sign^(0+128),f
  9836  17B3  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
  9837  17B4  30FF               	movlw	255
  9838  17B5  05C8               	andwf	___ftdiv@f1^(0+128),f
  9839  17B6  30FF               	movlw	255
  9840  17B7  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
  9841  17B8  3000               	movlw	0
  9842  17B9  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
  9843  17BA  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
  9844  17BB  30FF               	movlw	255
  9845  17BC  05C5               	andwf	___ftdiv@f2^(0+128),f
  9846  17BD  30FF               	movlw	255
  9847  17BE  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
  9848  17BF  3000               	movlw	0
  9849  17C0  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
  9850  17C1  3018               	movlw	24
  9851  17C2  00CB               	movwf	??___ftdiv^(0+128)
  9852  17C3  084B               	movf	??___ftdiv^(0+128),w
  9853  17C4  00CF               	movwf	___ftdiv@cntr^(0+128)
  9854  17C5                     l5254:	
  9855  17C5  3001               	movlw	1
  9856  17C6                     u5625:	
  9857  17C6  35D0               	lslf	___ftdiv@f3^(0+128),f
  9858  17C7  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
  9859  17C8  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
  9860  17C9  0B89               	decfsz	9,f
  9861  17CA  2FC6               	goto	u5625
  9862  17CB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9863  17CC  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
  9864  17CD  1D03               	skipz
  9865  17CE  2FD5               	goto	u5635
  9866  17CF  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9867  17D0  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
  9868  17D1  1D03               	skipz
  9869  17D2  2FD5               	goto	u5635
  9870  17D3  0845               	movf	___ftdiv@f2^(0+128),w
  9871  17D4  0248               	subwf	___ftdiv@f1^(0+128),w
  9872  17D5                     u5635:	
  9873  17D5  1C03               	skipc
  9874  17D6  2FDE               	goto	l5262
  9875  17D7  0845               	movf	___ftdiv@f2^(0+128),w
  9876  17D8  02C8               	subwf	___ftdiv@f1^(0+128),f
  9877  17D9  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9878  17DA  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
  9879  17DB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9880  17DC  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
  9881  17DD  1450               	bsf	___ftdiv@f3^(0+128),0
  9882  17DE                     l5262:	
  9883  17DE  3001               	movlw	1
  9884  17DF                     u5645:	
  9885  17DF  35C8               	lslf	___ftdiv@f1^(0+128),f
  9886  17E0  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
  9887  17E1  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
  9888  17E2  0B89               	decfsz	9,f
  9889  17E3  2FDF               	goto	u5645
  9890  17E4  3001               	movlw	1
  9891  17E5  02CF               	subwf	___ftdiv@cntr^(0+128),f
  9892  17E6  1D03               	btfss	3,2
  9893  17E7  2FC5               	goto	l5254
  9894  17E8  0850               	movf	___ftdiv@f3^(0+128),w
  9895  17E9  00A0               	movwf	___ftpack@arg^(0+128)
  9896  17EA  0851               	movf	(___ftdiv@f3+1)^(0+128),w
  9897  17EB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9898  17EC  0852               	movf	(___ftdiv@f3+2)^(0+128),w
  9899  17ED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9900  17EE  0853               	movf	___ftdiv@exp^(0+128),w
  9901  17EF  00CB               	movwf	??___ftdiv^(0+128)
  9902  17F0  084B               	movf	??___ftdiv^(0+128),w
  9903  17F1  00A3               	movwf	___ftpack@exp^(0+128)
  9904  17F2  0854               	movf	___ftdiv@sign^(0+128),w
  9905  17F3  00CC               	movwf	(??___ftdiv+1)^(0+128)
  9906  17F4  084C               	movf	(??___ftdiv+1)^(0+128),w
  9907  17F5  00A4               	movwf	___ftpack@sign^(0+128)
  9908  17F6  3193  23DF         	fcall	___ftpack
  9909  17F8  0021               	movlb	1	; select bank1
  9910  17F9  0820               	movf	?___ftpack^(0+128),w
  9911  17FA  00C5               	movwf	?___ftdiv^(0+128)
  9912  17FB  0821               	movf	(?___ftpack+1)^(0+128),w
  9913  17FC  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9914  17FD  0822               	movf	(?___ftpack+2)^(0+128),w
  9915  17FE  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9916  17FF  0008               	return
  9917  1800                     __end_of___ftdiv:	
  9918                           
  9919                           	psect	text22
  9920  0AA5                     __ptext22:	
  9921 ;; *************** function ___ftadd *****************
  9922 ;; Defined at:
  9923 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  9924 ;; Parameters:    Size  Location     Type
  9925 ;;  f1              3    8[BANK1 ] float 
  9926 ;;  f2              3   11[BANK1 ] float 
  9927 ;; Auto vars:     Size  Location     Type
  9928 ;;  exp1            1   20[BANK1 ] unsigned char 
  9929 ;;  exp2            1   19[BANK1 ] unsigned char 
  9930 ;;  sign            1   18[BANK1 ] unsigned char 
  9931 ;; Return value:  Size  Location     Type
  9932 ;;                  3    8[BANK1 ] float 
  9933 ;; Registers used:
  9934 ;;		wreg, status,2, status,0, pclath, cstack
  9935 ;; Tracked objects:
  9936 ;;		On entry : 0/0
  9937 ;;		On exit  : 0/0
  9938 ;;		Unchanged: 0/0
  9939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9940 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9941 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9942 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9943 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9944 ;;Total ram usage:       13 bytes
  9945 ;; Hardware stack levels used:    1
  9946 ;; Hardware stack levels required when called:    4
  9947 ;; This function calls:
  9948 ;;		___ftpack
  9949 ;; This function is called by:
  9950 ;;		_map
  9951 ;;		_scalePotValue
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955                           
  9956                           ;psect for function ___ftadd
  9957  0AA5                     ___ftadd:	
  9958                           
  9959                           ;incstack = 0
  9960                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9961  0AA5  0021               	movlb	1	; select bank1
  9962  0AA6  0828               	movf	___ftadd@f1^(0+128),w
  9963  0AA7  00AE               	movwf	??___ftadd^(0+128)
  9964  0AA8  0829               	movf	(___ftadd@f1+1)^(0+128),w
  9965  0AA9  00AF               	movwf	(??___ftadd^(0+128)+1)
  9966  0AAA  082A               	movf	(___ftadd@f1+2)^(0+128),w
  9967  0AAB  00B0               	movwf	(??___ftadd^(0+128)+2)
  9968  0AAC  1003               	clrc
  9969  0AAD  0D2F               	rlf	(??___ftadd^(0+128)+1),w
  9970  0AAE  0D30               	rlf	(??___ftadd^(0+128)+2),w
  9971  0AAF  00B1               	movwf	(??___ftadd+3)^(0+128)
  9972  0AB0  0831               	movf	(??___ftadd+3)^(0+128),w
  9973  0AB1  00B4               	movwf	___ftadd@exp1^(0+128)
  9974  0AB2  082B               	movf	___ftadd@f2^(0+128),w
  9975  0AB3  00AE               	movwf	??___ftadd^(0+128)
  9976  0AB4  082C               	movf	(___ftadd@f2+1)^(0+128),w
  9977  0AB5  00AF               	movwf	(??___ftadd^(0+128)+1)
  9978  0AB6  082D               	movf	(___ftadd@f2+2)^(0+128),w
  9979  0AB7  00B0               	movwf	(??___ftadd^(0+128)+2)
  9980  0AB8  1003               	clrc
  9981  0AB9  0D2F               	rlf	(??___ftadd^(0+128)+1),w
  9982  0ABA  0D30               	rlf	(??___ftadd^(0+128)+2),w
  9983  0ABB  00B1               	movwf	(??___ftadd+3)^(0+128)
  9984  0ABC  0831               	movf	(??___ftadd+3)^(0+128),w
  9985  0ABD  00B3               	movwf	___ftadd@exp2^(0+128)
  9986  0ABE  0834               	movf	___ftadd@exp1^(0+128),w
  9987  0ABF  1903               	btfsc	3,2
  9988  0AC0  2ACD               	goto	l5164
  9989  0AC1  0833               	movf	___ftadd@exp2^(0+128),w
  9990  0AC2  0234               	subwf	___ftadd@exp1^(0+128),w
  9991  0AC3  1803               	skipnc
  9992  0AC4  2AD4               	goto	l5168
  9993  0AC5  0334               	decf	___ftadd@exp1^(0+128),w
  9994  0AC6  3AFF               	xorlw	255
  9995  0AC7  0733               	addwf	___ftadd@exp2^(0+128),w
  9996  0AC8  00AE               	movwf	??___ftadd^(0+128)
  9997  0AC9  3019               	movlw	25
  9998  0ACA  022E               	subwf	??___ftadd^(0+128),w
  9999  0ACB  1C03               	skipc
 10000  0ACC  2AD4               	goto	l5168
 10001  0ACD                     l5164:	
 10002  0ACD  082B               	movf	___ftadd@f2^(0+128),w
 10003  0ACE  00A8               	movwf	?___ftadd^(0+128)
 10004  0ACF  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10005  0AD0  00A9               	movwf	(?___ftadd+1)^(0+128)
 10006  0AD1  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10007  0AD2  00AA               	movwf	(?___ftadd+2)^(0+128)
 10008  0AD3  0008               	return
 10009  0AD4                     l5168:	
 10010  0AD4  0833               	movf	___ftadd@exp2^(0+128),w
 10011  0AD5  1903               	btfsc	3,2
 10012  0AD6  0008               	return
 10013  0AD7  0834               	movf	___ftadd@exp1^(0+128),w
 10014  0AD8  0233               	subwf	___ftadd@exp2^(0+128),w
 10015  0AD9  1803               	skipnc
 10016  0ADA  2AE3               	goto	l5174
 10017  0ADB  0333               	decf	___ftadd@exp2^(0+128),w
 10018  0ADC  3AFF               	xorlw	255
 10019  0ADD  0734               	addwf	___ftadd@exp1^(0+128),w
 10020  0ADE  00AE               	movwf	??___ftadd^(0+128)
 10021  0ADF  3019               	movlw	25
 10022  0AE0  022E               	subwf	??___ftadd^(0+128),w
 10023  0AE1  1803               	btfsc	3,0
 10024  0AE2  0008               	return
 10025  0AE3                     l5174:	
 10026  0AE3  3006               	movlw	6
 10027  0AE4  00AE               	movwf	??___ftadd^(0+128)
 10028  0AE5  082E               	movf	??___ftadd^(0+128),w
 10029  0AE6  00B2               	movwf	___ftadd@sign^(0+128)
 10030  0AE7  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10031  0AE8  17B2               	bsf	___ftadd@sign^(0+128),7
 10032  0AE9  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10033  0AEA  1732               	bsf	___ftadd@sign^(0+128),6
 10034  0AEB  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10035  0AEC  30FF               	movlw	255
 10036  0AED  05A8               	andwf	___ftadd@f1^(0+128),f
 10037  0AEE  30FF               	movlw	255
 10038  0AEF  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10039  0AF0  3000               	movlw	0
 10040  0AF1  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10041  0AF2  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10042  0AF3  30FF               	movlw	255
 10043  0AF4  05AB               	andwf	___ftadd@f2^(0+128),f
 10044  0AF5  30FF               	movlw	255
 10045  0AF6  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10046  0AF7  3000               	movlw	0
 10047  0AF8  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10048  0AF9  0833               	movf	___ftadd@exp2^(0+128),w
 10049  0AFA  0234               	subwf	___ftadd@exp1^(0+128),w
 10050  0AFB  1803               	skipnc
 10051  0AFC  2B1F               	goto	l5196
 10052  0AFD                     l5186:	
 10053  0AFD  3001               	movlw	1
 10054  0AFE                     u5445:	
 10055  0AFE  35AB               	lslf	___ftadd@f2^(0+128),f
 10056  0AFF  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 10057  0B00  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 10058  0B01  0B89               	decfsz	9,f
 10059  0B02  2AFE               	goto	u5445
 10060  0B03  3001               	movlw	1
 10061  0B04  02B3               	subwf	___ftadd@exp2^(0+128),f
 10062  0B05  0833               	movf	___ftadd@exp2^(0+128),w
 10063  0B06  0634               	xorwf	___ftadd@exp1^(0+128),w
 10064  0B07  1903               	skipnz
 10065  0B08  2B1A               	goto	l5194
 10066  0B09  3001               	movlw	1
 10067  0B0A  02B2               	subwf	___ftadd@sign^(0+128),f
 10068  0B0B  0832               	movf	___ftadd@sign^(0+128),w
 10069  0B0C  3907               	andlw	7
 10070  0B0D  1903               	btfsc	3,2
 10071  0B0E  2B1A               	goto	l5194
 10072  0B0F  2AFD               	goto	l5186
 10073  0B10                     l5192:	
 10074  0B10  3001               	movlw	1
 10075  0B11                     u5475:	
 10076  0B11  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 10077  0B12  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 10078  0B13  0CA8               	rrf	___ftadd@f1^(0+128),f
 10079  0B14  0B89               	decfsz	9,f
 10080  0B15  2B11               	goto	u5475
 10081  0B16  3001               	movlw	1
 10082  0B17  00AE               	movwf	??___ftadd^(0+128)
 10083  0B18  082E               	movf	??___ftadd^(0+128),w
 10084  0B19  07B4               	addwf	___ftadd@exp1^(0+128),f
 10085  0B1A                     l5194:	
 10086  0B1A  0834               	movf	___ftadd@exp1^(0+128),w
 10087  0B1B  0633               	xorwf	___ftadd@exp2^(0+128),w
 10088  0B1C  1903               	btfsc	3,2
 10089  0B1D  2B44               	goto	l1514
 10090  0B1E  2B10               	goto	l5192
 10091  0B1F                     l5196:	
 10092  0B1F  0834               	movf	___ftadd@exp1^(0+128),w
 10093  0B20  0233               	subwf	___ftadd@exp2^(0+128),w
 10094  0B21  1803               	skipnc
 10095  0B22  2B44               	goto	l1514
 10096  0B23                     l5198:	
 10097  0B23  3001               	movlw	1
 10098  0B24                     u5505:	
 10099  0B24  35A8               	lslf	___ftadd@f1^(0+128),f
 10100  0B25  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 10101  0B26  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 10102  0B27  0B89               	decfsz	9,f
 10103  0B28  2B24               	goto	u5505
 10104  0B29  3001               	movlw	1
 10105  0B2A  02B4               	subwf	___ftadd@exp1^(0+128),f
 10106  0B2B  0833               	movf	___ftadd@exp2^(0+128),w
 10107  0B2C  0634               	xorwf	___ftadd@exp1^(0+128),w
 10108  0B2D  1903               	skipnz
 10109  0B2E  2B40               	goto	l5206
 10110  0B2F  3001               	movlw	1
 10111  0B30  02B2               	subwf	___ftadd@sign^(0+128),f
 10112  0B31  0832               	movf	___ftadd@sign^(0+128),w
 10113  0B32  3907               	andlw	7
 10114  0B33  1903               	btfsc	3,2
 10115  0B34  2B40               	goto	l5206
 10116  0B35  2B23               	goto	l5198
 10117  0B36                     l5204:	
 10118  0B36  3001               	movlw	1
 10119  0B37                     u5535:	
 10120  0B37  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 10121  0B38  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 10122  0B39  0CAB               	rrf	___ftadd@f2^(0+128),f
 10123  0B3A  0B89               	decfsz	9,f
 10124  0B3B  2B37               	goto	u5535
 10125  0B3C  3001               	movlw	1
 10126  0B3D  00AE               	movwf	??___ftadd^(0+128)
 10127  0B3E  082E               	movf	??___ftadd^(0+128),w
 10128  0B3F  07B3               	addwf	___ftadd@exp2^(0+128),f
 10129  0B40                     l5206:	
 10130  0B40  0834               	movf	___ftadd@exp1^(0+128),w
 10131  0B41  0633               	xorwf	___ftadd@exp2^(0+128),w
 10132  0B42  1D03               	skipz
 10133  0B43  2B36               	goto	l5204
 10134  0B44                     l1514:	
 10135  0B44  1FB2               	btfss	___ftadd@sign^(0+128),7
 10136  0B45  2B56               	goto	l5210
 10137  0B46  30FF               	movlw	255
 10138  0B47  06A8               	xorwf	___ftadd@f1^(0+128),f
 10139  0B48  30FF               	movlw	255
 10140  0B49  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 10141  0B4A  30FF               	movlw	255
 10142  0B4B  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 10143  0B4C  3001               	movlw	1
 10144  0B4D  07A8               	addwf	___ftadd@f1^(0+128),f
 10145  0B4E  3000               	movlw	0
 10146  0B4F  1803               	skipnc
 10147  0B50  3001               	movlw	1
 10148  0B51  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 10149  0B52  3000               	movlw	0
 10150  0B53  1803               	skipnc
 10151  0B54  3001               	movlw	1
 10152  0B55  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 10153  0B56                     l5210:	
 10154  0B56  1F32               	btfss	___ftadd@sign^(0+128),6
 10155  0B57  2B68               	goto	l5214
 10156  0B58  30FF               	movlw	255
 10157  0B59  06AB               	xorwf	___ftadd@f2^(0+128),f
 10158  0B5A  30FF               	movlw	255
 10159  0B5B  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10160  0B5C  30FF               	movlw	255
 10161  0B5D  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10162  0B5E  3001               	movlw	1
 10163  0B5F  07AB               	addwf	___ftadd@f2^(0+128),f
 10164  0B60  3000               	movlw	0
 10165  0B61  1803               	skipnc
 10166  0B62  3001               	movlw	1
 10167  0B63  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10168  0B64  3000               	movlw	0
 10169  0B65  1803               	skipnc
 10170  0B66  3001               	movlw	1
 10171  0B67  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10172  0B68                     l5214:	
 10173  0B68  01B2               	clrf	___ftadd@sign^(0+128)
 10174  0B69  0828               	movf	___ftadd@f1^(0+128),w
 10175  0B6A  07AB               	addwf	___ftadd@f2^(0+128),f
 10176  0B6B  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10177  0B6C  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 10178  0B6D  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10179  0B6E  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 10180  0B6F  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 10181  0B70  2B83               	goto	l5224
 10182  0B71  30FF               	movlw	255
 10183  0B72  06AB               	xorwf	___ftadd@f2^(0+128),f
 10184  0B73  30FF               	movlw	255
 10185  0B74  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10186  0B75  30FF               	movlw	255
 10187  0B76  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10188  0B77  3001               	movlw	1
 10189  0B78  07AB               	addwf	___ftadd@f2^(0+128),f
 10190  0B79  3000               	movlw	0
 10191  0B7A  1803               	skipnc
 10192  0B7B  3001               	movlw	1
 10193  0B7C  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10194  0B7D  3000               	movlw	0
 10195  0B7E  1803               	skipnc
 10196  0B7F  3001               	movlw	1
 10197  0B80  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10198  0B81  01B2               	clrf	___ftadd@sign^(0+128)
 10199  0B82  0AB2               	incf	___ftadd@sign^(0+128),f
 10200  0B83                     l5224:	
 10201  0B83  082B               	movf	___ftadd@f2^(0+128),w
 10202  0B84  00A0               	movwf	___ftpack@arg^(0+128)
 10203  0B85  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10204  0B86  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10205  0B87  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10206  0B88  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10207  0B89  0834               	movf	___ftadd@exp1^(0+128),w
 10208  0B8A  00AE               	movwf	??___ftadd^(0+128)
 10209  0B8B  082E               	movf	??___ftadd^(0+128),w
 10210  0B8C  00A3               	movwf	___ftpack@exp^(0+128)
 10211  0B8D  0832               	movf	___ftadd@sign^(0+128),w
 10212  0B8E  00AF               	movwf	(??___ftadd+1)^(0+128)
 10213  0B8F  082F               	movf	(??___ftadd+1)^(0+128),w
 10214  0B90  00A4               	movwf	___ftpack@sign^(0+128)
 10215  0B91  3193  23DF         	fcall	___ftpack
 10216  0B93  0021               	movlb	1	; select bank1
 10217  0B94  0820               	movf	?___ftpack^(0+128),w
 10218  0B95  00A8               	movwf	?___ftadd^(0+128)
 10219  0B96  0821               	movf	(?___ftpack+1)^(0+128),w
 10220  0B97  00A9               	movwf	(?___ftadd+1)^(0+128)
 10221  0B98  0822               	movf	(?___ftpack+2)^(0+128),w
 10222  0B99  00AA               	movwf	(?___ftadd+2)^(0+128)
 10223  0B9A  0008               	return
 10224  0B9B                     __end_of___ftadd:	
 10225                           
 10226                           	psect	text23
 10227  13DF                     __ptext23:	
 10228 ;; *************** function ___ftpack *****************
 10229 ;; Defined at:
 10230 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10231 ;; Parameters:    Size  Location     Type
 10232 ;;  arg             3    0[BANK1 ] unsigned um
 10233 ;;  exp             1    3[BANK1 ] unsigned char 
 10234 ;;  sign            1    4[BANK1 ] unsigned char 
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;		None
 10237 ;; Return value:  Size  Location     Type
 10238 ;;                  3    0[BANK1 ] float 
 10239 ;; Registers used:
 10240 ;;		wreg, status,2, status,0
 10241 ;; Tracked objects:
 10242 ;;		On entry : 0/0
 10243 ;;		On exit  : 0/0
 10244 ;;		Unchanged: 0/0
 10245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10246 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10248 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10249 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10250 ;;Total ram usage:        8 bytes
 10251 ;; Hardware stack levels used:    1
 10252 ;; Hardware stack levels required when called:    3
 10253 ;; This function calls:
 10254 ;;		Nothing
 10255 ;; This function is called by:
 10256 ;;		___awtoft
 10257 ;;		___ftadd
 10258 ;;		___ftdiv
 10259 ;;		___ftmul
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           
 10264                           ;psect for function ___ftpack
 10265  13DF                     ___ftpack:	
 10266                           
 10267                           ;incstack = 0
 10268                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10269  13DF  0021               	movlb	1	; select bank1
 10270  13E0  0823               	movf	___ftpack@exp^(0+128),w
 10271  13E1  1903               	btfsc	3,2
 10272  13E2  2BE8               	goto	l4924
 10273  13E3  0822               	movf	(___ftpack@arg+2)^(0+128),w
 10274  13E4  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 10275  13E5  0420               	iorwf	___ftpack@arg^(0+128),w
 10276  13E6  1D03               	skipz
 10277  13E7  2BF9               	goto	l4930
 10278  13E8                     l4924:	
 10279  13E8  3000               	movlw	0
 10280  13E9  00A0               	movwf	?___ftpack^(0+128)
 10281  13EA  3000               	movlw	0
 10282  13EB  00A1               	movwf	(?___ftpack+1)^(0+128)
 10283  13EC  3000               	movlw	0
 10284  13ED  00A2               	movwf	(?___ftpack+2)^(0+128)
 10285  13EE  0008               	return
 10286  13EF                     l4928:	
 10287  13EF  3001               	movlw	1
 10288  13F0  00A5               	movwf	??___ftpack^(0+128)
 10289  13F1  0825               	movf	??___ftpack^(0+128),w
 10290  13F2  07A3               	addwf	___ftpack@exp^(0+128),f
 10291  13F3  3001               	movlw	1
 10292  13F4                     u5025:	
 10293  13F4  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10294  13F5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10295  13F6  0CA0               	rrf	___ftpack@arg^(0+128),f
 10296  13F7  0B89               	decfsz	9,f
 10297  13F8  2BF4               	goto	u5025
 10298  13F9                     l4930:	
 10299  13F9  30FE               	movlw	254
 10300  13FA  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10301  13FB  1903               	btfsc	3,2
 10302  13FC  2C12               	goto	l1483
 10303  13FD  2BEF               	goto	l4928
 10304  13FE                     l4932:	
 10305  13FE  3001               	movlw	1
 10306  13FF  00A5               	movwf	??___ftpack^(0+128)
 10307  1400  0825               	movf	??___ftpack^(0+128),w
 10308  1401  07A3               	addwf	___ftpack@exp^(0+128),f
 10309  1402  3001               	movlw	1
 10310  1403  07A0               	addwf	___ftpack@arg^(0+128),f
 10311  1404  3000               	movlw	0
 10312  1405  1803               	skipnc
 10313  1406  3001               	movlw	1
 10314  1407  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 10315  1408  3000               	movlw	0
 10316  1409  1803               	skipnc
 10317  140A  3001               	movlw	1
 10318  140B  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 10319  140C  3001               	movlw	1
 10320  140D                     u5045:	
 10321  140D  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10322  140E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10323  140F  0CA0               	rrf	___ftpack@arg^(0+128),f
 10324  1410  0B89               	decfsz	9,f
 10325  1411  2C0D               	goto	u5045
 10326  1412                     l1483:	
 10327  1412  30FF               	movlw	255
 10328  1413  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10329  1414  1903               	btfsc	3,2
 10330  1415  2C1F               	goto	l4940
 10331  1416  2BFE               	goto	l4932
 10332  1417                     l4938:	
 10333  1417  3001               	movlw	1
 10334  1418  02A3               	subwf	___ftpack@exp^(0+128),f
 10335  1419  3001               	movlw	1
 10336  141A                     u5065:	
 10337  141A  35A0               	lslf	___ftpack@arg^(0+128),f
 10338  141B  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 10339  141C  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 10340  141D  0B89               	decfsz	9,f
 10341  141E  2C1A               	goto	u5065
 10342  141F                     l4940:	
 10343  141F  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 10344  1420  2C25               	goto	l1490
 10345  1421  3002               	movlw	2
 10346  1422  0223               	subwf	___ftpack@exp^(0+128),w
 10347  1423  1803               	skipnc
 10348  1424  2C17               	goto	l4938
 10349  1425                     l1490:	
 10350  1425  1823               	btfsc	___ftpack@exp^(0+128),0
 10351  1426  2C2D               	goto	l1491
 10352  1427  30FF               	movlw	255
 10353  1428  05A0               	andwf	___ftpack@arg^(0+128),f
 10354  1429  307F               	movlw	127
 10355  142A  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 10356  142B  30FF               	movlw	255
 10357  142C  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 10358  142D                     l1491:	
 10359  142D  1003               	clrc
 10360  142E  0CA3               	rrf	___ftpack@exp^(0+128),f
 10361  142F  0823               	movf	___ftpack@exp^(0+128),w
 10362  1430  00A5               	movwf	??___ftpack^(0+128)
 10363  1431  01A6               	clrf	(??___ftpack^(0+128)+1)
 10364  1432  01A7               	clrf	(??___ftpack^(0+128)+2)
 10365  1433  3010               	movlw	16
 10366  1434                     u5105:	
 10367  1434  35A5               	lslf	??___ftpack^(0+128),f
 10368  1435  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 10369  1436  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 10370  1437  0B89               	decfsz	9,f
 10371  1438  2C34               	goto	u5105
 10372  1439  0825               	movf	??___ftpack^(0+128),w
 10373  143A  04A0               	iorwf	___ftpack@arg^(0+128),f
 10374  143B  0826               	movf	(??___ftpack+1)^(0+128),w
 10375  143C  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 10376  143D  0827               	movf	(??___ftpack+2)^(0+128),w
 10377  143E  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 10378  143F  0824               	movf	___ftpack@sign^(0+128),w
 10379  1440  1903               	btfsc	3,2
 10380  1441  0008               	return
 10381  1442  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 10382  1443  0008               	return
 10383  1444                     __end_of___ftpack:	
 10384                           
 10385                           	psect	text24
 10386  1DB8                     __ptext24:	
 10387 ;; *************** function _initSwitchBypass *****************
 10388 ;; Defined at:
 10389 ;;		line 29 in file "SwitchBypass.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  initState       2   22[BANK1 ] int 
 10394 ;; Return value:  Size  Location     Type
 10395 ;;                  1    wreg      void 
 10396 ;; Registers used:
 10397 ;;		wreg, status,2, status,0, pclath, cstack
 10398 ;; Tracked objects:
 10399 ;;		On entry : 0/0
 10400 ;;		On exit  : 0/0
 10401 ;;		Unchanged: 0/0
 10402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10404 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10406 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10407 ;;Total ram usage:        2 bytes
 10408 ;; Hardware stack levels used:    1
 10409 ;; Hardware stack levels required when called:    6
 10410 ;; This function calls:
 10411 ;;		_getSwitchBypassState
 10412 ;;		_setSwitchBypassState
 10413 ;; This function is called by:
 10414 ;;		_main
 10415 ;; This function uses a non-reentrant model
 10416 ;;
 10417                           
 10418                           
 10419                           ;psect for function _initSwitchBypass
 10420  1DB8                     _initSwitchBypass:	
 10421                           
 10422                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10423                           
 10424                           ;incstack = 0
 10425                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10426  1DB8  319D  2579  319D   	fcall	_getSwitchBypassState
 10427  1DBB  0021               	movlb	1	; select bank1
 10428  1DBC  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 10429  1DBD  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 10430  1DBE  0820               	movf	?_getSwitchBypassState^(0+128),w
 10431  1DBF  00B6               	movwf	initSwitchBypass@initState^(0+128)
 10432                           
 10433                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10434  1DC0  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 10435  1DC1  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 10436  1DC2  0836               	movf	initSwitchBypass@initState^(0+128),w
 10437  1DC3  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 10438  1DC4  3192  2250         	fcall	_setSwitchBypassState
 10439  1DC6  0008               	return
 10440  1DC7                     __end_of_initSwitchBypass:	
 10441                           
 10442                           	psect	text25
 10443  1250                     __ptext25:	
 10444 ;; *************** function _setSwitchBypassState *****************
 10445 ;; Defined at:
 10446 ;;		line 134 in file "SwitchBypass.c"
 10447 ;; Parameters:    Size  Location     Type
 10448 ;;  f_state         2   18[BANK1 ] int 
 10449 ;; Auto vars:     Size  Location     Type
 10450 ;;		None
 10451 ;; Return value:  Size  Location     Type
 10452 ;;                  1    wreg      void 
 10453 ;; Registers used:
 10454 ;;		wreg, status,2, status,0, pclath, cstack
 10455 ;; Tracked objects:
 10456 ;;		On entry : 0/0
 10457 ;;		On exit  : 0/0
 10458 ;;		Unchanged: 0/0
 10459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10460 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10462 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10463 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10464 ;;Total ram usage:        4 bytes
 10465 ;; Hardware stack levels used:    1
 10466 ;; Hardware stack levels required when called:    5
 10467 ;; This function calls:
 10468 ;;		_updateSwitchBypassState
 10469 ;;		_wait_ms
 10470 ;; This function is called by:
 10471 ;;		_initSwitchBypass
 10472 ;;		_updateSwitchBypass
 10473 ;; This function uses a non-reentrant model
 10474 ;;
 10475                           
 10476                           
 10477                           ;psect for function _setSwitchBypassState
 10478  1250                     _setSwitchBypassState:	
 10479                           
 10480                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10481                           
 10482                           ;incstack = 0
 10483                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10484  1250  0020               	movlb	0	; select bank0
 10485  1251  0869               	movf	_switchBypass_state,w
 10486  1252  0021               	movlb	1	; select bank1
 10487  1253  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10488  1254  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10489  1255  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 10490  1256  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 10491  1257  1D03               	skipz
 10492  1258  2A5B               	goto	u5175
 10493  1259  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10494  125A  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 10495  125B                     u5175:	
 10496  125B  1903               	btfsc	3,2
 10497  125C  0008               	return
 10498                           
 10499                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10500  125D  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10501  125E  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10502  125F  0834               	movf	??_setSwitchBypassState^(0+128),w
 10503  1260  0020               	movlb	0	; select bank0
 10504  1261  00E9               	movwf	_switchBypass_state
 10505                           
 10506                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10507  1262  0021               	movlb	1	; select bank1
 10508  1263  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10509  1264  0022               	movlb	2	; select bank2
 10510  1265  1C03               	skipc
 10511  1266  110D               	bcf	13,2	;volatile
 10512  1267  1803               	skipnc
 10513  1268  150D               	bsf	13,2	;volatile
 10514                           
 10515                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10516  1269  118D               	bcf	13,3	;volatile
 10517                           
 10518                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10519  126A  0021               	movlb	1	; select bank1
 10520  126B  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10521  126C  0027               	movlb	7	; select bank7
 10522  126D  1C03               	skipc
 10523  126E  110D               	bcf	13,2	;volatile
 10524  126F  1803               	skipnc
 10525  1270  150D               	bsf	13,2	;volatile
 10526                           
 10527                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10528  1271  0021               	movlb	1	; select bank1
 10529  1272  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10530  1273  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 10531  1274  1D03               	btfss	3,2
 10532  1275  2A79               	goto	u5180
 10533  1276  0027               	movlb	7	; select bank7
 10534  1277  148D               	bsf	13,1	;volatile
 10535  1278  2A7B               	goto	l5066
 10536  1279                     u5180:	
 10537  1279  0027               	movlb	7	; select bank7
 10538  127A  108D               	bcf	13,1	;volatile
 10539  127B                     l5066:	
 10540                           
 10541                           ;SwitchBypass.c: 142: wait_ms(20);
 10542  127B  3014               	movlw	20
 10543  127C  0021               	movlb	1	; select bank1
 10544  127D  00AC               	movwf	wait_ms@timeSec^(0+128)
 10545  127E  3000               	movlw	0
 10546  127F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10547  1280  319F  2793  3192   	fcall	_wait_ms
 10548                           
 10549                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10550  1283  0027               	movlb	7	; select bank7
 10551  1284  110D               	bcf	13,2	;volatile
 10552                           
 10553                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10554  1285  108D               	bcf	13,1	;volatile
 10555                           
 10556                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10557  1286  0020               	movlb	0	; select bank0
 10558  1287  0869               	movf	_switchBypass_state,w
 10559  1288  0021               	movlb	1	; select bank1
 10560  1289  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10561  128A  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10562  128B  0834               	movf	??_setSwitchBypassState^(0+128),w
 10563  128C  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 10564  128D  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 10565  128E  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 10566  128F  3187  27FF  3192   	fcall	_updateSwitchBypassState
 10567                           
 10568                           ;SwitchBypass.c: 148: wait_ms(20);
 10569  1292  3014               	movlw	20
 10570  1293  0021               	movlb	1	; select bank1
 10571  1294  00AC               	movwf	wait_ms@timeSec^(0+128)
 10572  1295  3000               	movlw	0
 10573  1296  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10574  1297  319F  2793         	fcall	_wait_ms
 10575  1299  0008               	return
 10576  129A                     __end_of_setSwitchBypassState:	
 10577                           
 10578                           	psect	text26
 10579  1F93                     __ptext26:	
 10580 ;; *************** function _wait_ms *****************
 10581 ;; Defined at:
 10582 ;;		line 23 in file "system.c"
 10583 ;; Parameters:    Size  Location     Type
 10584 ;;  timeSec         2   12[BANK1 ] unsigned int 
 10585 ;; Auto vars:     Size  Location     Type
 10586 ;;  timemsl         4   14[BANK1 ] long 
 10587 ;; Return value:  Size  Location     Type
 10588 ;;                  1    wreg      void 
 10589 ;; Registers used:
 10590 ;;		wreg, status,2, status,0, pclath, cstack
 10591 ;; Tracked objects:
 10592 ;;		On entry : 0/0
 10593 ;;		On exit  : 0/0
 10594 ;;		Unchanged: 0/0
 10595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10596 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10597 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10599 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10600 ;;Total ram usage:        6 bytes
 10601 ;; Hardware stack levels used:    1
 10602 ;; Hardware stack levels required when called:    4
 10603 ;; This function calls:
 10604 ;;		___lmul
 10605 ;; This function is called by:
 10606 ;;		_star_tactiles
 10607 ;;		_solidring_tactiles
 10608 ;;		_read_bottom_tactile
 10609 ;;		_read_top_tactile
 10610 ;;		_setSwitchBypassState
 10611 ;;		_setDoublePressState
 10612 ;;		_showError_Alternating
 10613 ;;		_show_error
 10614 ;;		_show_cancel
 10615 ;;		_ring_tactiles
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _wait_ms
 10621  1F93                     _wait_ms:	
 10622                           
 10623                           ;system.c: 25: long timemsl = 0;
 10624                           
 10625                           ;incstack = 0
 10626                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10627  1F93  3000               	movlw	0
 10628  1F94  0021               	movlb	1	; select bank1
 10629  1F95  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10630  1F96  3000               	movlw	0
 10631  1F97  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10632  1F98  3000               	movlw	0
 10633  1F99  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10634  1F9A  3000               	movlw	0
 10635  1F9B  00AE               	movwf	wait_ms@timemsl^(0+128)
 10636                           
 10637                           ;system.c: 26: timemsl = timeSec * 1000l;
 10638  1F9C  082C               	movf	wait_ms@timeSec^(0+128),w
 10639  1F9D  00A0               	movwf	___lmul@multiplier^(0+128)
 10640  1F9E  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 10641  1F9F  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 10642  1FA0  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 10643  1FA1  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 10644  1FA2  3000               	movlw	0
 10645  1FA3  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 10646  1FA4  3000               	movlw	0
 10647  1FA5  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 10648  1FA6  3003               	movlw	3
 10649  1FA7  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 10650  1FA8  30E8               	movlw	232
 10651  1FA9  00A4               	movwf	___lmul@multiplicand^(0+128)
 10652  1FAA  319F  2733  319F   	fcall	___lmul
 10653  1FAD  0021               	movlb	1	; select bank1
 10654  1FAE  0823               	movf	(?___lmul+3)^(0+128),w
 10655  1FAF  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10656  1FB0  0822               	movf	(?___lmul+2)^(0+128),w
 10657  1FB1  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10658  1FB2  0821               	movf	(?___lmul+1)^(0+128),w
 10659  1FB3  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10660  1FB4  0820               	movf	?___lmul^(0+128),w
 10661  1FB5  00AE               	movwf	wait_ms@timemsl^(0+128)
 10662  1FB6                     l350:	
 10663                           ;system.c: 27: for( ; timemsl; timemsl--);
 10664                           
 10665  1FB6  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 10666  1FB7  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 10667  1FB8  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 10668  1FB9  042E               	iorwf	wait_ms@timemsl^(0+128),w
 10669  1FBA  1903               	btfsc	3,2
 10670  1FBB  0008               	return
 10671  1FBC  30FF               	movlw	255
 10672  1FBD  07AE               	addwf	wait_ms@timemsl^(0+128),f
 10673  1FBE  30FF               	movlw	255
 10674  1FBF  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 10675  1FC0  30FF               	movlw	255
 10676  1FC1  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 10677  1FC2  30FF               	movlw	255
 10678  1FC3  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 10679  1FC4  2FB6               	goto	l350
 10680  1FC5                     __end_of_wait_ms:	
 10681                           
 10682                           	psect	text27
 10683  1F33                     __ptext27:	
 10684 ;; *************** function ___lmul *****************
 10685 ;; Defined at:
 10686 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10687 ;; Parameters:    Size  Location     Type
 10688 ;;  multiplier      4    0[BANK1 ] unsigned long 
 10689 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 10690 ;; Auto vars:     Size  Location     Type
 10691 ;;  product         4    8[BANK1 ] unsigned long 
 10692 ;; Return value:  Size  Location     Type
 10693 ;;                  4    0[BANK1 ] unsigned long 
 10694 ;; Registers used:
 10695 ;;		wreg, status,2, status,0
 10696 ;; Tracked objects:
 10697 ;;		On entry : 0/0
 10698 ;;		On exit  : 0/0
 10699 ;;		Unchanged: 0/0
 10700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10701 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10702 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10704 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10705 ;;Total ram usage:       12 bytes
 10706 ;; Hardware stack levels used:    1
 10707 ;; Hardware stack levels required when called:    3
 10708 ;; This function calls:
 10709 ;;		Nothing
 10710 ;; This function is called by:
 10711 ;;		_wait_ms
 10712 ;; This function uses a non-reentrant model
 10713 ;;
 10714                           
 10715                           
 10716                           ;psect for function ___lmul
 10717  1F33                     ___lmul:	
 10718                           
 10719                           ;incstack = 0
 10720                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10721  1F33  3000               	movlw	0
 10722  1F34  0021               	movlb	1	; select bank1
 10723  1F35  00AB               	movwf	(___lmul@product+3)^(0+128)
 10724  1F36  3000               	movlw	0
 10725  1F37  00AA               	movwf	(___lmul@product+2)^(0+128)
 10726  1F38  3000               	movlw	0
 10727  1F39  00A9               	movwf	(___lmul@product+1)^(0+128)
 10728  1F3A  3000               	movlw	0
 10729  1F3B  00A8               	movwf	___lmul@product^(0+128)
 10730  1F3C                     l4864:	
 10731  1F3C  1C20               	btfss	___lmul@multiplier^(0+128),0
 10732  1F3D  2F46               	goto	l4868
 10733  1F3E  0824               	movf	___lmul@multiplicand^(0+128),w
 10734  1F3F  07A8               	addwf	___lmul@product^(0+128),f
 10735  1F40  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 10736  1F41  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 10737  1F42  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 10738  1F43  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 10739  1F44  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 10740  1F45  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 10741  1F46                     l4868:	
 10742  1F46  3001               	movlw	1
 10743  1F47                     u4965:	
 10744  1F47  35A4               	lslf	___lmul@multiplicand^(0+128),f
 10745  1F48  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 10746  1F49  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 10747  1F4A  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 10748  1F4B  0B89               	decfsz	9,f
 10749  1F4C  2F47               	goto	u4965
 10750  1F4D  3001               	movlw	1
 10751  1F4E                     u4975:	
 10752  1F4E  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 10753  1F4F  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 10754  1F50  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 10755  1F51  0CA0               	rrf	___lmul@multiplier^(0+128),f
 10756  1F52  0B89               	decfsz	9,f
 10757  1F53  2F4E               	goto	u4975
 10758  1F54  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 10759  1F55  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 10760  1F56  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 10761  1F57  0420               	iorwf	___lmul@multiplier^(0+128),w
 10762  1F58  1D03               	skipz
 10763  1F59  2F3C               	goto	l4864
 10764  1F5A  082B               	movf	(___lmul@product+3)^(0+128),w
 10765  1F5B  00A3               	movwf	(?___lmul+3)^(0+128)
 10766  1F5C  082A               	movf	(___lmul@product+2)^(0+128),w
 10767  1F5D  00A2               	movwf	(?___lmul+2)^(0+128)
 10768  1F5E  0829               	movf	(___lmul@product+1)^(0+128),w
 10769  1F5F  00A1               	movwf	(?___lmul+1)^(0+128)
 10770  1F60  0828               	movf	___lmul@product^(0+128),w
 10771  1F61  00A0               	movwf	?___lmul^(0+128)
 10772  1F62  0008               	return
 10773  1F63                     __end_of___lmul:	
 10774                           
 10775                           	psect	text28
 10776  07FF                     __ptext28:	
 10777 ;; *************** function _updateSwitchBypassState *****************
 10778 ;; Defined at:
 10779 ;;		line 96 in file "state_manager.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;  state           2    0[BANK1 ] int 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		None
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10793 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10796 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10797 ;;Total ram usage:        2 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    3
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_setSwitchBypassState
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _updateSwitchBypassState
 10809  07FF                     _updateSwitchBypassState:	
 10810                           
 10811                           ;incstack = 0
 10812                           ; Regs used in _updateSwitchBypassState: []
 10813  07FF  0008               	return
 10814  0800                     __end_of_updateSwitchBypassState:	
 10815                           
 10816                           	psect	text29
 10817  1D79                     __ptext29:	
 10818 ;; *************** function _getSwitchBypassState *****************
 10819 ;; Defined at:
 10820 ;;		line 103 in file "state_manager.c"
 10821 ;; Parameters:    Size  Location     Type
 10822 ;;		None
 10823 ;; Auto vars:     Size  Location     Type
 10824 ;;		None
 10825 ;; Return value:  Size  Location     Type
 10826 ;;                  2    0[BANK1 ] int 
 10827 ;; Registers used:
 10828 ;;		status,2
 10829 ;; Tracked objects:
 10830 ;;		On entry : 0/0
 10831 ;;		On exit  : 0/0
 10832 ;;		Unchanged: 0/0
 10833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10834 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10837 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10838 ;;Total ram usage:        2 bytes
 10839 ;; Hardware stack levels used:    1
 10840 ;; Hardware stack levels required when called:    3
 10841 ;; This function calls:
 10842 ;;		Nothing
 10843 ;; This function is called by:
 10844 ;;		_initSwitchBypass
 10845 ;; This function uses a non-reentrant model
 10846 ;;
 10847                           
 10848                           
 10849                           ;psect for function _getSwitchBypassState
 10850  1D79                     _getSwitchBypassState:	
 10851                           
 10852                           ;state_manager.c: 108: return 0;
 10853                           
 10854                           ;incstack = 0
 10855                           ; Regs used in _getSwitchBypassState: [status,2]
 10856  1D79  0021               	movlb	1	; select bank1
 10857  1D7A  01A0               	clrf	?_getSwitchBypassState^(0+128)
 10858  1D7B  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 10859  1D7C  0008               	return
 10860  1D7D                     __end_of_getSwitchBypassState:	
 10861                           
 10862                           	psect	text30
 10863  1DEA                     __ptext30:	
 10864 ;; *************** function _adc_convert *****************
 10865 ;; Defined at:
 10866 ;;		line 116 in file "user.c"
 10867 ;; Parameters:    Size  Location     Type
 10868 ;;  channel         1    wreg     unsigned char 
 10869 ;; Auto vars:     Size  Location     Type
 10870 ;;  channel         1    3[BANK1 ] unsigned char 
 10871 ;; Return value:  Size  Location     Type
 10872 ;;                  2    0[BANK1 ] unsigned int 
 10873 ;; Registers used:
 10874 ;;		wreg, status,2, status,0
 10875 ;; Tracked objects:
 10876 ;;		On entry : 0/0
 10877 ;;		On exit  : 0/0
 10878 ;;		Unchanged: 0/0
 10879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10880 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10881 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10882 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10883 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10884 ;;Total ram usage:        4 bytes
 10885 ;; Hardware stack levels used:    1
 10886 ;; Hardware stack levels required when called:    3
 10887 ;; This function calls:
 10888 ;;		Nothing
 10889 ;; This function is called by:
 10890 ;;		_main
 10891 ;; This function uses a non-reentrant model
 10892 ;;
 10893                           
 10894                           
 10895                           ;psect for function _adc_convert
 10896  1DEA                     _adc_convert:	
 10897                           
 10898                           ;incstack = 0
 10899                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 10900                           ;adc_convert@channel stored from wreg
 10901  1DEA  0021               	movlb	1	; select bank1
 10902  1DEB  00A3               	movwf	adc_convert@channel^(0+128)
 10903                           
 10904                           ;user.c: 117: ADCON0bits.CHS = channel;
 10905  1DEC  0823               	movf	adc_convert@channel^(0+128),w
 10906  1DED  00A2               	movwf	??_adc_convert^(0+128)
 10907  1DEE  0DA2               	rlf	??_adc_convert^(0+128),f
 10908  1DEF  0DA2               	rlf	??_adc_convert^(0+128),f
 10909  1DF0  081D               	movf	29,w	;volatile
 10910  1DF1  0622               	xorwf	??_adc_convert^(0+128),w
 10911  1DF2  3983               	andlw	-125
 10912  1DF3  0622               	xorwf	??_adc_convert^(0+128),w
 10913  1DF4  009D               	movwf	29	;volatile
 10914                           
 10915                           ;user.c: 118: ADCON0bits.GO = 0b1;
 10916  1DF5  149D               	bsf	29,1	;volatile
 10917  1DF6                     l532:	
 10918                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 10919                           
 10920  1DF6  189D               	btfsc	29,1	;volatile
 10921  1DF7  2DF6               	goto	l532
 10922                           
 10923                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 10924  1DF8  081C               	movf	28,w	;volatile
 10925  1DF9  00A1               	movwf	(?_adc_convert+1)^(0+128)
 10926  1DFA  081B               	movf	27,w	;volatile
 10927  1DFB  00A0               	movwf	?_adc_convert^(0+128)
 10928  1DFC  0008               	return
 10929  1DFD                     __end_of_adc_convert:	
 10930                           
 10931                           	psect	text31
 10932  14B3                     __ptext31:	
 10933 ;; *************** function _ReadSavedSettings *****************
 10934 ;; Defined at:
 10935 ;;		line 193 in file "user.c"
 10936 ;; Parameters:    Size  Location     Type
 10937 ;;		None
 10938 ;; Auto vars:     Size  Location     Type
 10939 ;;		None
 10940 ;; Return value:  Size  Location     Type
 10941 ;;                  1    wreg      void 
 10942 ;; Registers used:
 10943 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10944 ;; Tracked objects:
 10945 ;;		On entry : 0/0
 10946 ;;		On exit  : 0/0
 10947 ;;		Unchanged: 0/0
 10948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10950 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10951 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10952 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10953 ;;Total ram usage:        1 bytes
 10954 ;; Hardware stack levels used:    1
 10955 ;; Hardware stack levels required when called:    4
 10956 ;; This function calls:
 10957 ;;		_FLASH_ReadWord
 10958 ;;		_set_leds_bottom
 10959 ;;		_set_leds_top
 10960 ;; This function is called by:
 10961 ;;		_main
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           
 10966                           ;psect for function _ReadSavedSettings
 10967  14B3                     _ReadSavedSettings:	
 10968                           
 10969                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 10970                           
 10971                           ;incstack = 0
 10972                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10973  14B3  3081               	movlw	129
 10974  14B4  0021               	movlb	1	; select bank1
 10975  14B5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 10976  14B6  301F               	movlw	31
 10977  14B7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 10978  14B8  319E  2667  3194   	fcall	_FLASH_ReadWord
 10979  14BB  0021               	movlb	1	; select bank1
 10980  14BC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 10981  14BD  0020               	movlb	0	; select bank0
 10982  14BE  00E5               	movwf	_top_push_state+1
 10983  14BF  0021               	movlb	1	; select bank1
 10984  14C0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 10985  14C1  0020               	movlb	0	; select bank0
 10986  14C2  00E4               	movwf	_top_push_state
 10987                           
 10988                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 10989  14C3  3082               	movlw	130
 10990  14C4  0021               	movlb	1	; select bank1
 10991  14C5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 10992  14C6  301F               	movlw	31
 10993  14C7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 10994  14C8  319E  2667  3194   	fcall	_FLASH_ReadWord
 10995  14CB  0021               	movlb	1	; select bank1
 10996  14CC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 10997  14CD  0020               	movlb	0	; select bank0
 10998  14CE  00E1               	movwf	_bottom_push_state+1
 10999  14CF  0021               	movlb	1	; select bank1
 11000  14D0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11001  14D1  0020               	movlb	0	; select bank0
 11002  14D2  00E0               	movwf	_bottom_push_state
 11003                           
 11004                           ;user.c: 198: if (top_push_state > 6) {
 11005  14D3  0865               	movf	_top_push_state+1,w
 11006  14D4  3A80               	xorlw	128
 11007  14D5  0021               	movlb	1	; select bank1
 11008  14D6  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11009  14D7  3080               	movlw	128
 11010  14D8  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11011  14D9  1D03               	skipz
 11012  14DA  2CDE               	goto	u5925
 11013  14DB  3007               	movlw	7
 11014  14DC  0020               	movlb	0	; select bank0
 11015  14DD  0264               	subwf	_top_push_state,w
 11016  14DE                     u5925:	
 11017  14DE  1C03               	skipc
 11018  14DF  2CE5               	goto	l561
 11019                           
 11020                           ;user.c: 200: top_push_state = 6;
 11021  14E0  3006               	movlw	6
 11022  14E1  0020               	movlb	0	; select bank0
 11023  14E2  00E4               	movwf	_top_push_state
 11024  14E3  3000               	movlw	0
 11025  14E4  00E5               	movwf	_top_push_state+1
 11026  14E5                     l561:	
 11027                           
 11028                           ;user.c: 201: }
 11029                           ;user.c: 202: if (bottom_push_state > 6) {
 11030  14E5  0020               	movlb	0	; select bank0
 11031  14E6  0861               	movf	_bottom_push_state+1,w
 11032  14E7  3A80               	xorlw	128
 11033  14E8  0021               	movlb	1	; select bank1
 11034  14E9  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11035  14EA  3080               	movlw	128
 11036  14EB  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11037  14EC  1D03               	skipz
 11038  14ED  2CF1               	goto	u5935
 11039  14EE  3007               	movlw	7
 11040  14EF  0020               	movlb	0	; select bank0
 11041  14F0  0260               	subwf	_bottom_push_state,w
 11042  14F1                     u5935:	
 11043  14F1  1C03               	skipc
 11044  14F2  2CF8               	goto	l5406
 11045                           
 11046                           ;user.c: 204: bottom_push_state = 6;
 11047  14F3  3006               	movlw	6
 11048  14F4  0020               	movlb	0	; select bank0
 11049  14F5  00E0               	movwf	_bottom_push_state
 11050  14F6  3000               	movlw	0
 11051  14F7  00E1               	movwf	_bottom_push_state+1
 11052  14F8                     l5406:	
 11053                           
 11054                           ;user.c: 205: }
 11055                           ;user.c: 208: LATGbits.LATG1 = !switchBypass_state;
 11056  14F8  0020               	movlb	0	; select bank0
 11057  14F9  0869               	movf	_switchBypass_state,w
 11058  14FA  1D03               	btfss	3,2
 11059  14FB  2CFF               	goto	u5940
 11060  14FC  0027               	movlb	7	; select bank7
 11061  14FD  148D               	bsf	13,1	;volatile
 11062  14FE  2D01               	goto	l5408
 11063  14FF                     u5940:	
 11064  14FF  0027               	movlb	7	; select bank7
 11065  1500  108D               	bcf	13,1	;volatile
 11066  1501                     l5408:	
 11067                           
 11068                           ;user.c: 209: LATGbits.LATG2 = switchBypass_state;
 11069  1501  0020               	movlb	0	; select bank0
 11070  1502  0C69               	rrf	_switchBypass_state,w
 11071  1503  0027               	movlb	7	; select bank7
 11072  1504  1C03               	skipc
 11073  1505  110D               	bcf	13,2	;volatile
 11074  1506  1803               	skipnc
 11075  1507  150D               	bsf	13,2	;volatile
 11076                           
 11077                           ;user.c: 210: LATBbits.LATB2 = 0;
 11078  1508  0022               	movlb	2	; select bank2
 11079  1509  110D               	bcf	13,2	;volatile
 11080                           
 11081                           ;user.c: 211: LATBbits.LATB3 = 0;
 11082  150A  118D               	bcf	13,3	;volatile
 11083                           
 11084                           ;user.c: 213: LATBbits.LATB4 = 0;
 11085  150B  120D               	bcf	13,4	;volatile
 11086                           
 11087                           ;user.c: 214: LATBbits.LATB5 = 0;
 11088  150C  128D               	bcf	13,5	;volatile
 11089                           
 11090                           ;user.c: 216: LATBbits.LATB1 = 0;
 11091  150D  108D               	bcf	13,1	;volatile
 11092                           
 11093                           ;user.c: 217: LATBbits.LATB0 = 0;
 11094  150E  100D               	bcf	13,0	;volatile
 11095                           
 11096                           ;user.c: 220: set_leds_top(top_push_state, 1);
 11097  150F  0020               	movlb	0	; select bank0
 11098  1510  0865               	movf	_top_push_state+1,w
 11099  1511  0021               	movlb	1	; select bank1
 11100  1512  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 11101  1513  0020               	movlb	0	; select bank0
 11102  1514  0864               	movf	_top_push_state,w
 11103  1515  0021               	movlb	1	; select bank1
 11104  1516  00A0               	movwf	set_leds_top@x^(0+128)
 11105  1517  3001               	movlw	1
 11106  1518  00A2               	movwf	set_leds_top@ledState^(0+128)
 11107  1519  3000               	movlw	0
 11108  151A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 11109  151B  3193  238B  3194   	fcall	_set_leds_top
 11110                           
 11111                           ;user.c: 221: set_leds_bottom(bottom_push_state);
 11112  151E  0020               	movlb	0	; select bank0
 11113  151F  0861               	movf	_bottom_push_state+1,w
 11114  1520  0021               	movlb	1	; select bank1
 11115  1521  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 11116  1522  0020               	movlb	0	; select bank0
 11117  1523  0860               	movf	_bottom_push_state,w
 11118  1524  0021               	movlb	1	; select bank1
 11119  1525  00A0               	movwf	set_leds_bottom@x^(0+128)
 11120  1526  319F  27C5         	fcall	_set_leds_bottom
 11121  1528  0008               	return
 11122  1529                     __end_of_ReadSavedSettings:	
 11123                           
 11124                           	psect	text32
 11125  138B                     __ptext32:	
 11126 ;; *************** function _set_leds_top *****************
 11127 ;; Defined at:
 11128 ;;		line 16 in file "LEDs.c"
 11129 ;; Parameters:    Size  Location     Type
 11130 ;;  x               2    0[BANK1 ] int 
 11131 ;;  ledState        2    2[BANK1 ] int 
 11132 ;; Auto vars:     Size  Location     Type
 11133 ;;		None
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11143 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11146 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11147 ;;Total ram usage:        4 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    3
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_ReadSavedSettings
 11154 ;;		_star_tactiles
 11155 ;;		_solidring_tactiles
 11156 ;;		_read_top_tactile
 11157 ;;		_ring_tactiles
 11158 ;; This function uses a non-reentrant model
 11159 ;;
 11160                           
 11161                           
 11162                           ;psect for function _set_leds_top
 11163  138B                     _set_leds_top:	
 11164                           
 11165                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11166                           
 11167                           ;incstack = 0
 11168                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11169  138B  0027               	movlb	7	; select bank7
 11170  138C  100C               	bcf	12,0	;volatile
 11171                           
 11172                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11173  138D  108C               	bcf	12,1	;volatile
 11174                           
 11175                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11176  138E  110C               	bcf	12,2	;volatile
 11177                           
 11178                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11179  138F  118C               	bcf	12,3	;volatile
 11180                           
 11181                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11182  1390  120C               	bcf	12,4	;volatile
 11183                           
 11184                           ;LEDs.c: 22: switch (x) {
 11185  1391  2BC1               	goto	l4890
 11186  1392                     l4878:	
 11187                           ;LEDs.c: 23: case 1:
 11188                           
 11189                           
 11190                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11191  1392  0021               	movlb	1	; select bank1
 11192  1393  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11193  1394  0027               	movlb	7	; select bank7
 11194  1395  1C03               	skipc
 11195  1396  100C               	bcf	12,0	;volatile
 11196  1397  1803               	skipnc
 11197  1398  140C               	bsf	12,0	;volatile
 11198                           
 11199                           ;LEDs.c: 25: break;
 11200  1399  0008               	return
 11201  139A                     l4880:	
 11202                           ;LEDs.c: 26: case 2:
 11203                           
 11204                           
 11205                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11206  139A  0021               	movlb	1	; select bank1
 11207  139B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11208  139C  0027               	movlb	7	; select bank7
 11209  139D  1C03               	skipc
 11210  139E  108C               	bcf	12,1	;volatile
 11211  139F  1803               	skipnc
 11212  13A0  148C               	bsf	12,1	;volatile
 11213                           
 11214                           ;LEDs.c: 28: break;
 11215  13A1  0008               	return
 11216  13A2                     l4882:	
 11217                           ;LEDs.c: 29: case 3:
 11218                           
 11219                           
 11220                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11221  13A2  0021               	movlb	1	; select bank1
 11222  13A3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11223  13A4  0027               	movlb	7	; select bank7
 11224  13A5  1C03               	skipc
 11225  13A6  110C               	bcf	12,2	;volatile
 11226  13A7  1803               	skipnc
 11227  13A8  150C               	bsf	12,2	;volatile
 11228                           
 11229                           ;LEDs.c: 31: break;
 11230  13A9  0008               	return
 11231  13AA                     l4884:	
 11232                           ;LEDs.c: 32: case 4:
 11233                           
 11234                           
 11235                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11236  13AA  0021               	movlb	1	; select bank1
 11237  13AB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11238  13AC  0027               	movlb	7	; select bank7
 11239  13AD  1C03               	skipc
 11240  13AE  118C               	bcf	12,3	;volatile
 11241  13AF  1803               	skipnc
 11242  13B0  158C               	bsf	12,3	;volatile
 11243                           
 11244                           ;LEDs.c: 34: break;
 11245  13B1  0008               	return
 11246  13B2                     l4886:	
 11247                           ;LEDs.c: 35: case 5:
 11248                           
 11249                           
 11250                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11251  13B2  0021               	movlb	1	; select bank1
 11252  13B3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11253  13B4  0027               	movlb	7	; select bank7
 11254  13B5  1C03               	skipc
 11255  13B6  120C               	bcf	12,4	;volatile
 11256  13B7  1803               	skipnc
 11257  13B8  160C               	bsf	12,4	;volatile
 11258                           
 11259                           ;LEDs.c: 39: break;
 11260                           
 11261                           ;LEDs.c: 38: case 6:
 11262                           
 11263                           ;LEDs.c: 37: break;
 11264  13B9  0008               	return
 11265  13BA                     l702:	
 11266                           ;LEDs.c: 40: case 100:
 11267                           
 11268                           
 11269                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11270  13BA  0027               	movlb	7	; select bank7
 11271  13BB  140C               	bsf	12,0	;volatile
 11272                           
 11273                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11274  13BC  148C               	bsf	12,1	;volatile
 11275                           
 11276                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11277  13BD  150C               	bsf	12,2	;volatile
 11278                           
 11279                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11280  13BE  158C               	bsf	12,3	;volatile
 11281                           
 11282                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11283  13BF  160C               	bsf	12,4	;volatile
 11284                           
 11285                           ;LEDs.c: 47: }
 11286                           
 11287                           ;LEDs.c: 46: break;
 11288  13C0  0008               	return
 11289  13C1                     l4890:	
 11290                           
 11291                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11292                           ; Switch size 1, requested type "space"
 11293                           ; Number of cases is 1, Range of values is 0 to 0
 11294                           ; switch strategies available:
 11295                           ; Name         Instructions Cycles
 11296                           ; simple_byte            4     3 (average)
 11297                           ; direct_byte            8     6 (fixed)
 11298                           ; jumptable            260     6 (fixed)
 11299                           ;	Chosen strategy is simple_byte
 11300  13C1  0021               	movlb	1	; select bank1
 11301  13C2  0821               	movf	(set_leds_top@x+1)^(0+128),w
 11302  13C3  3A00               	xorlw	0	; case 0
 11303  13C4  1903               	skipnz
 11304  13C5  2BC7               	goto	l6132
 11305  13C6  2BDE               	goto	l703
 11306  13C7                     l6132:	
 11307                           
 11308                           ; Switch size 1, requested type "space"
 11309                           ; Number of cases is 7, Range of values is 1 to 100
 11310                           ; switch strategies available:
 11311                           ; Name         Instructions Cycles
 11312                           ; simple_byte           22    12 (average)
 11313                           ; direct_byte          209     9 (fixed)
 11314                           ; jumptable            263     9 (fixed)
 11315                           ;	Chosen strategy is simple_byte
 11316  13C7  0820               	movf	set_leds_top@x^(0+128),w
 11317  13C8  3A01               	xorlw	1	; case 1
 11318  13C9  1903               	skipnz
 11319  13CA  2B92               	goto	l4878
 11320  13CB  3A03               	xorlw	3	; case 2
 11321  13CC  1903               	skipnz
 11322  13CD  2B9A               	goto	l4880
 11323  13CE  3A01               	xorlw	1	; case 3
 11324  13CF  1903               	skipnz
 11325  13D0  2BA2               	goto	l4882
 11326  13D1  3A07               	xorlw	7	; case 4
 11327  13D2  1903               	skipnz
 11328  13D3  2BAA               	goto	l4884
 11329  13D4  3A01               	xorlw	1	; case 5
 11330  13D5  1903               	skipnz
 11331  13D6  2BB2               	goto	l4886
 11332  13D7  3A03               	xorlw	3	; case 6
 11333  13D8  1903               	skipnz
 11334  13D9  2BDE               	goto	l703
 11335  13DA  3A62               	xorlw	98	; case 100
 11336  13DB  1903               	skipnz
 11337  13DC  2BBA               	goto	l702
 11338  13DD  2BDE               	goto	l703
 11339  13DE                     l703:	
 11340  13DE  0008               	return
 11341  13DF                     __end_of_set_leds_top:	
 11342                           
 11343                           	psect	text33
 11344  1FC5                     __ptext33:	
 11345 ;; *************** function _set_leds_bottom *****************
 11346 ;; Defined at:
 11347 ;;		line 51 in file "LEDs.c"
 11348 ;; Parameters:    Size  Location     Type
 11349 ;;  x               2    0[BANK1 ] int 
 11350 ;; Auto vars:     Size  Location     Type
 11351 ;;		None
 11352 ;; Return value:  Size  Location     Type
 11353 ;;                  1    wreg      void 
 11354 ;; Registers used:
 11355 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11356 ;; Tracked objects:
 11357 ;;		On entry : 0/0
 11358 ;;		On exit  : 0/0
 11359 ;;		Unchanged: 0/0
 11360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11361 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11364 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11365 ;;Total ram usage:        2 bytes
 11366 ;; Hardware stack levels used:    1
 11367 ;; Hardware stack levels required when called:    3
 11368 ;; This function calls:
 11369 ;;		Nothing
 11370 ;; This function is called by:
 11371 ;;		_ReadSavedSettings
 11372 ;;		_star_tactiles
 11373 ;;		_solidring_tactiles
 11374 ;;		_read_bottom_tactile
 11375 ;;		_ring_tactiles
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           
 11380                           ;psect for function _set_leds_bottom
 11381  1FC5                     _set_leds_bottom:	
 11382                           
 11383                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11387  1FC5  0022               	movlb	2	; select bank2
 11388  1FC6  100F               	bcf	15,0	;volatile
 11389                           
 11390                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11391  1FC7  108F               	bcf	15,1	;volatile
 11392                           
 11393                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11394  1FC8  110F               	bcf	15,2	;volatile
 11395                           
 11396                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11397  1FC9  118F               	bcf	15,3	;volatile
 11398                           
 11399                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11400  1FCA  120F               	bcf	15,4	;volatile
 11401                           
 11402                           ;LEDs.c: 57: switch (x) {
 11403  1FCB  2FE2               	goto	l4914
 11404  1FCC                     l707:	
 11405                           ;LEDs.c: 58: case 1:
 11406                           
 11407                           
 11408                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11409  1FCC  0022               	movlb	2	; select bank2
 11410  1FCD  140F               	bsf	15,0	;volatile
 11411                           
 11412                           ;LEDs.c: 60: break;
 11413  1FCE  0008               	return
 11414  1FCF                     l709:	
 11415                           ;LEDs.c: 61: case 2:
 11416                           
 11417                           
 11418                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11419  1FCF  0022               	movlb	2	; select bank2
 11420  1FD0  148F               	bsf	15,1	;volatile
 11421                           
 11422                           ;LEDs.c: 63: break;
 11423  1FD1  0008               	return
 11424  1FD2                     l710:	
 11425                           ;LEDs.c: 64: case 3:
 11426                           
 11427                           
 11428                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11429  1FD2  0022               	movlb	2	; select bank2
 11430  1FD3  150F               	bsf	15,2	;volatile
 11431                           
 11432                           ;LEDs.c: 66: break;
 11433  1FD4  0008               	return
 11434  1FD5                     l711:	
 11435                           ;LEDs.c: 67: case 4:
 11436                           
 11437                           
 11438                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11439  1FD5  0022               	movlb	2	; select bank2
 11440  1FD6  158F               	bsf	15,3	;volatile
 11441                           
 11442                           ;LEDs.c: 69: break;
 11443  1FD7  0008               	return
 11444  1FD8                     l712:	
 11445                           ;LEDs.c: 70: case 5:
 11446                           
 11447                           
 11448                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11449  1FD8  0022               	movlb	2	; select bank2
 11450  1FD9  160F               	bsf	15,4	;volatile
 11451                           
 11452                           ;LEDs.c: 74: break;
 11453                           
 11454                           ;LEDs.c: 73: case 6:
 11455                           
 11456                           ;LEDs.c: 72: break;
 11457  1FDA  0008               	return
 11458  1FDB                     l714:	
 11459                           ;LEDs.c: 75: case 100:
 11460                           
 11461                           
 11462                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11463  1FDB  0022               	movlb	2	; select bank2
 11464  1FDC  140F               	bsf	15,0	;volatile
 11465                           
 11466                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11467  1FDD  148F               	bsf	15,1	;volatile
 11468                           
 11469                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11470  1FDE  150F               	bsf	15,2	;volatile
 11471                           
 11472                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11473  1FDF  158F               	bsf	15,3	;volatile
 11474                           
 11475                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11476  1FE0  160F               	bsf	15,4	;volatile
 11477                           
 11478                           ;LEDs.c: 82: }
 11479                           
 11480                           ;LEDs.c: 81: break;
 11481  1FE1  0008               	return
 11482  1FE2                     l4914:	
 11483                           
 11484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11485                           ; Switch size 1, requested type "space"
 11486                           ; Number of cases is 1, Range of values is 0 to 0
 11487                           ; switch strategies available:
 11488                           ; Name         Instructions Cycles
 11489                           ; simple_byte            4     3 (average)
 11490                           ; direct_byte            8     6 (fixed)
 11491                           ; jumptable            260     6 (fixed)
 11492                           ;	Chosen strategy is simple_byte
 11493  1FE2  0021               	movlb	1	; select bank1
 11494  1FE3  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 11495  1FE4  3A00               	xorlw	0	; case 0
 11496  1FE5  1903               	skipnz
 11497  1FE6  2FE8               	goto	l6134
 11498  1FE7  2FFF               	goto	l715
 11499  1FE8                     l6134:	
 11500                           
 11501                           ; Switch size 1, requested type "space"
 11502                           ; Number of cases is 7, Range of values is 1 to 100
 11503                           ; switch strategies available:
 11504                           ; Name         Instructions Cycles
 11505                           ; simple_byte           22    12 (average)
 11506                           ; direct_byte          209     9 (fixed)
 11507                           ; jumptable            263     9 (fixed)
 11508                           ;	Chosen strategy is simple_byte
 11509  1FE8  0820               	movf	set_leds_bottom@x^(0+128),w
 11510  1FE9  3A01               	xorlw	1	; case 1
 11511  1FEA  1903               	skipnz
 11512  1FEB  2FCC               	goto	l707
 11513  1FEC  3A03               	xorlw	3	; case 2
 11514  1FED  1903               	skipnz
 11515  1FEE  2FCF               	goto	l709
 11516  1FEF  3A01               	xorlw	1	; case 3
 11517  1FF0  1903               	skipnz
 11518  1FF1  2FD2               	goto	l710
 11519  1FF2  3A07               	xorlw	7	; case 4
 11520  1FF3  1903               	skipnz
 11521  1FF4  2FD5               	goto	l711
 11522  1FF5  3A01               	xorlw	1	; case 5
 11523  1FF6  1903               	skipnz
 11524  1FF7  2FD8               	goto	l712
 11525  1FF8  3A03               	xorlw	3	; case 6
 11526  1FF9  1903               	skipnz
 11527  1FFA  2FFF               	goto	l715
 11528  1FFB  3A62               	xorlw	98	; case 100
 11529  1FFC  1903               	skipnz
 11530  1FFD  2FDB               	goto	l714
 11531  1FFE  2FFF               	goto	l715
 11532  1FFF                     l715:	
 11533  1FFF  0008               	return
 11534  2000                     __end_of_set_leds_bottom:	
 11535                           
 11536                           	psect	text34
 11537  1E67                     __ptext34:	
 11538 ;; *************** function _FLASH_ReadWord *****************
 11539 ;; Defined at:
 11540 ;;		line 58 in file "memory.c"
 11541 ;; Parameters:    Size  Location     Type
 11542 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 11543 ;; Auto vars:     Size  Location     Type
 11544 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 11545 ;; Return value:  Size  Location     Type
 11546 ;;                  2    0[BANK1 ] unsigned int 
 11547 ;; Registers used:
 11548 ;;		wreg, status,2, status,0
 11549 ;; Tracked objects:
 11550 ;;		On entry : 0/0
 11551 ;;		On exit  : 0/0
 11552 ;;		Unchanged: 0/0
 11553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11554 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11555 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11557 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11558 ;;Total ram usage:        3 bytes
 11559 ;; Hardware stack levels used:    1
 11560 ;; Hardware stack levels required when called:    3
 11561 ;; This function calls:
 11562 ;;		Nothing
 11563 ;; This function is called by:
 11564 ;;		_ReadSavedSettings
 11565 ;;		_FLASH_WriteWord
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           
 11570                           ;psect for function _FLASH_ReadWord
 11571  1E67                     _FLASH_ReadWord:	
 11572                           
 11573                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11574                           
 11575                           ;incstack = 0
 11576                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11577  1E67  3000               	movlw	0
 11578  1E68  1B8B               	btfsc	11,7	;volatile
 11579  1E69  3001               	movlw	1
 11580  1E6A  0021               	movlb	1	; select bank1
 11581  1E6B  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 11582                           
 11583                           ;memory.c: 61: INTCONbits.GIE = 0;
 11584  1E6C  138B               	bcf	11,7	;volatile
 11585                           
 11586                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11587  1E6D  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 11588  1E6E  0023               	movlb	3	; select bank3
 11589  1E6F  0091               	movwf	17	;volatile
 11590                           
 11591                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11592  1E70  0021               	movlb	1	; select bank1
 11593  1E71  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 11594  1E72  0023               	movlb	3	; select bank3
 11595  1E73  0092               	movwf	18	;volatile
 11596                           
 11597                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11598  1E74  1315               	bcf	21,6	;volatile
 11599                           
 11600                           ;memory.c: 66: PMCON1bits.RD = 1;
 11601  1E75  1415               	bsf	21,0	;volatile
 11602                           
 11603                           ;memory.c: 67: __nop();
 11604  1E76  0000               	nop
 11605                           
 11606                           ;memory.c: 68: __nop();
 11607  1E77  0000               	nop
 11608                           
 11609                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11610  1E78  0021               	movlb	1	; select bank1
 11611  1E79  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 11612  1E7A  1C03               	skipc
 11613  1E7B  138B               	bcf	11,7	;volatile
 11614  1E7C  1803               	skipnc
 11615  1E7D  178B               	bsf	11,7	;volatile
 11616                           
 11617                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11618  1E7E  0023               	movlb	3	; select bank3
 11619  1E7F  0814               	movf	20,w	;volatile
 11620  1E80  0021               	movlb	1	; select bank1
 11621  1E81  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 11622  1E82  0023               	movlb	3	; select bank3
 11623  1E83  0813               	movf	19,w	;volatile
 11624  1E84  0021               	movlb	1	; select bank1
 11625  1E85  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 11626  1E86  0008               	return
 11627  1E87                     __end_of_FLASH_ReadWord:	
 11628                           
 11629                           	psect	text35
 11630  07D8                     __ptext35:	
 11631 ;; *************** function _InitializeTaps *****************
 11632 ;; Defined at:
 11633 ;;		line 187 in file "user.c"
 11634 ;; Parameters:    Size  Location     Type
 11635 ;;		None
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;  itap            2    1[BANK1 ] int 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      void 
 11640 ;; Registers used:
 11641 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11648 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11649 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11650 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11651 ;;Total ram usage:        3 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    3
 11654 ;; This function calls:
 11655 ;;		Nothing
 11656 ;; This function is called by:
 11657 ;;		_main
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           
 11662                           ;psect for function _InitializeTaps
 11663  07D8                     _InitializeTaps:	
 11664                           
 11665                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 11666                           
 11667                           ;incstack = 0
 11668                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11669  07D8  0021               	movlb	1	; select bank1
 11670  07D9  01A1               	clrf	InitializeTaps@itap^(0+128)
 11671  07DA  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 11672  07DB                     L12:	
 11673  07DB  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 11674  07DC  3A80               	xorlw	128
 11675  07DD  00A0               	movwf	??_InitializeTaps^(0+128)
 11676  07DE  3080               	movlw	128
 11677  07DF  0220               	subwf	??_InitializeTaps^(0+128),w
 11678  07E0  1D03               	skipz
 11679  07E1  2FE4               	goto	u5895
 11680  07E2  300C               	movlw	12
 11681  07E3  0221               	subwf	InitializeTaps@itap^(0+128),w
 11682  07E4                     u5895:	
 11683  07E4  1803               	btfsc	3,0
 11684  07E5  0008               	return
 11685                           
 11686                           ;user.c: 189: tap[itap] = 0;
 11687  07E6  0021               	movlb	1	; select bank1
 11688  07E7  0821               	movf	InitializeTaps@itap^(0+128),w
 11689  07E8  00A0               	movwf	??_InitializeTaps^(0+128)
 11690  07E9  3001               	movlw	1
 11691  07EA                     u5905:	
 11692  07EA  35A0               	lslf	??_InitializeTaps^(0+128),f
 11693  07EB  3EFF               	addlw	-1
 11694  07EC  1D03               	skipz
 11695  07ED  2FEA               	goto	u5905
 11696  07EE  3520               	lslf	??_InitializeTaps^(0+128),w
 11697  07EF  3E20               	addlw	(low (_tap| (0+512)))& (0+255)
 11698  07F0  0086               	movwf	6
 11699  07F1  3002               	movlw	2	; select bank4/5
 11700  07F2  0087               	movwf	7
 11701  07F3  3000               	movlw	0
 11702  07F4  3FC0               	movwi [0]fsr1
 11703  07F5  3000               	movlw	0
 11704  07F6  3FC1               	movwi [1]fsr1
 11705  07F7  3FC2               	movwi [2]fsr1
 11706  07F8  3FC3               	movwi [3]fsr1
 11707  07F9  3001               	movlw	1
 11708  07FA  07A1               	addwf	InitializeTaps@itap^(0+128),f
 11709  07FB  3000               	movlw	0
 11710  07FC  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 11711  07FD  2FDB               	goto	L12
 11712  07FE                     __end_of_InitializeTaps:	
 11713                           
 11714                           	psect	text36
 11715  1F03                     __ptext36:	
 11716 ;; *************** function _InitApp *****************
 11717 ;; Defined at:
 11718 ;;		line 23 in file "user.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;		None
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;		None
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  1    wreg      void 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2, status,0, pclath, cstack
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11736 ;;Total ram usage:        0 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    5
 11739 ;; This function calls:
 11740 ;;		_init_adc
 11741 ;;		_init_pwm
 11742 ;; This function is called by:
 11743 ;;		_main
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           
 11748                           ;psect for function _InitApp
 11749  1F03                     _InitApp:	
 11750                           
 11751                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 11752                           
 11753                           ;incstack = 0
 11754                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 11755  1F03  0021               	movlb	1	; select bank1
 11756  1F04  100D               	bcf	13,0	;volatile
 11757                           
 11758                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 11759  1F05  108D               	bcf	13,1	;volatile
 11760                           
 11761                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 11762  1F06  110D               	bcf	13,2	;volatile
 11763                           
 11764                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 11765  1F07  118D               	bcf	13,3	;volatile
 11766                           
 11767                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 11768  1F08  120D               	bcf	13,4	;volatile
 11769                           
 11770                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 11771  1F09  128D               	bcf	13,5	;volatile
 11772                           
 11773                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 11774  1F0A  140E               	bsf	14,0	;volatile
 11775                           
 11776                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 11777  1F0B  120E               	bcf	14,4	;volatile
 11778                           
 11779                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 11780  1F0C  128E               	bcf	14,5	;volatile
 11781                           
 11782                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 11783  1F0D  100F               	bcf	15,0	;volatile
 11784                           
 11785                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 11786  1F0E  108F               	bcf	15,1	;volatile
 11787                           
 11788                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 11789  1F0F  110F               	bcf	15,2	;volatile
 11790                           
 11791                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 11792  1F10  118F               	bcf	15,3	;volatile
 11793                           
 11794                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 11795  1F11  120F               	bcf	15,4	;volatile
 11796                           
 11797                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 11798  1F12  168F               	bsf	15,5	;volatile
 11799                           
 11800                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 11801  1F13  170F               	bsf	15,6	;volatile
 11802                           
 11803                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 11804  1F14  178F               	bsf	15,7	;volatile
 11805                           
 11806                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 11807  1F15  1410               	bsf	16,0	;volatile
 11808                           
 11809                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 11810  1F16  1490               	bsf	16,1	;volatile
 11811                           
 11812                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 11813  1F17  0023               	movlb	3	; select bank3
 11814  1F18  1010               	bcf	16,0	;volatile
 11815                           
 11816                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 11817  1F19  1090               	bcf	16,1	;volatile
 11818                           
 11819                           ;user.c: 53: PORTEbits.RE0 = 0;
 11820  1F1A  0020               	movlb	0	; select bank0
 11821  1F1B  1010               	bcf	16,0	;volatile
 11822                           
 11823                           ;user.c: 54: PORTEbits.RE1 = 0;
 11824  1F1C  1090               	bcf	16,1	;volatile
 11825                           
 11826                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 11827  1F1D  0026               	movlb	6	; select bank6
 11828  1F1E  100C               	bcf	12,0	;volatile
 11829                           
 11830                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 11831  1F1F  108C               	bcf	12,1	;volatile
 11832                           
 11833                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 11834  1F20  110C               	bcf	12,2	;volatile
 11835                           
 11836                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 11837  1F21  118C               	bcf	12,3	;volatile
 11838                           
 11839                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 11840  1F22  120C               	bcf	12,4	;volatile
 11841                           
 11842                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 11843  1F23  128C               	bcf	12,5	;volatile
 11844                           
 11845                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 11846  1F24  170C               	bsf	12,6	;volatile
 11847                           
 11848                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 11849  1F25  0028               	movlb	8	; select bank8
 11850  1F26  130C               	bcf	12,6	;volatile
 11851                           
 11852                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 11853  1F27  0026               	movlb	6	; select bank6
 11854  1F28  108D               	bcf	13,1	;volatile
 11855                           
 11856                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 11857  1F29  110D               	bcf	13,2	;volatile
 11858                           
 11859                           ;user.c: 68: init_adc();
 11860  1F2A  319D  2596  319F   	fcall	_init_adc
 11861                           
 11862                           ;user.c: 69: init_pwm();
 11863  1F2D  3191  213F         	fcall	_init_pwm
 11864                           
 11865                           ;user.c: 71: INTCONbits.GIE = 0b1;
 11866  1F2F  178B               	bsf	11,7	;volatile
 11867                           
 11868                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 11869  1F30  168B               	bsf	11,5	;volatile
 11870                           
 11871                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 11872  1F31  110B               	bcf	11,2	;volatile
 11873  1F32  0008               	return
 11874  1F33                     __end_of_InitApp:	
 11875                           
 11876                           	psect	text37
 11877  113F                     __ptext37:	
 11878 ;; *************** function _init_pwm *****************
 11879 ;; Defined at:
 11880 ;;		line 123 in file "user.c"
 11881 ;; Parameters:    Size  Location     Type
 11882 ;;		None
 11883 ;; Auto vars:     Size  Location     Type
 11884 ;;		None
 11885 ;; Return value:  Size  Location     Type
 11886 ;;                  1    wreg      void 
 11887 ;; Registers used:
 11888 ;;		wreg, status,2, status,0, pclath, cstack
 11889 ;; Tracked objects:
 11890 ;;		On entry : 0/0
 11891 ;;		On exit  : 0/0
 11892 ;;		Unchanged: 0/0
 11893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11898 ;;Total ram usage:        0 bytes
 11899 ;; Hardware stack levels used:    1
 11900 ;; Hardware stack levels required when called:    4
 11901 ;; This function calls:
 11902 ;;		_init_timer0
 11903 ;;		_init_timer2
 11904 ;; This function is called by:
 11905 ;;		_InitApp
 11906 ;; This function uses a non-reentrant model
 11907 ;;
 11908                           
 11909                           
 11910                           ;psect for function _init_pwm
 11911  113F                     _init_pwm:	
 11912                           
 11913                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 11914                           
 11915                           ;incstack = 0
 11916                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 11917  113F  0022               	movlb	2	; select bank2
 11918  1140  101D               	bcf	29,0	;volatile
 11919                           
 11920                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 11921  1141  0021               	movlb	1	; select bank1
 11922  1142  110E               	bcf	14,2	;volatile
 11923                           
 11924                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 11925  1143  108E               	bcf	14,1	;volatile
 11926                           
 11927                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 11928  1144  0026               	movlb	6	; select bank6
 11929  1145  100D               	bcf	13,0	;volatile
 11930                           
 11931                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 11932  1146  118D               	bcf	13,3	;volatile
 11933                           
 11934                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 11935  1147  120D               	bcf	13,4	;volatile
 11936                           
 11937                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 11938  1148  0021               	movlb	1	; select bank1
 11939  1149  1310               	bcf	16,6	;volatile
 11940                           
 11941                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 11942  114A  1290               	bcf	16,5	;volatile
 11943                           
 11944                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 11945  114B  1210               	bcf	16,4	;volatile
 11946                           
 11947                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 11948  114C  1190               	bcf	16,3	;volatile
 11949                           
 11950                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 11951  114D  1110               	bcf	16,2	;volatile
 11952                           
 11953                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 11954  114E  300F               	movlw	15
 11955  114F  0025               	movlb	5	; select bank5
 11956  1150  0493               	iorwf	19,f	;volatile
 11957                           
 11958                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 11959  1151  300F               	movlw	15
 11960  1152  049A               	iorwf	26,f	;volatile
 11961                           
 11962                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 11963  1153  300F               	movlw	15
 11964  1154  0026               	movlb	6	; select bank6
 11965  1155  0493               	iorwf	19,f	;volatile
 11966                           
 11967                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 11968  1156  300F               	movlw	15
 11969  1157  049A               	iorwf	26,f	;volatile
 11970                           
 11971                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 11972  1158  300F               	movlw	15
 11973  1159  049E               	iorwf	30,f	;volatile
 11974                           
 11975                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 11976  115A  300F               	movlw	15
 11977  115B  002C               	movlb	12	; select bank12
 11978  115C  0493               	iorwf	19,f	;volatile
 11979                           
 11980                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 11981  115D  300F               	movlw	15
 11982  115E  0496               	iorwf	22,f	;volatile
 11983                           
 11984                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 11985  115F  300F               	movlw	15
 11986  1160  0499               	iorwf	25,f	;volatile
 11987                           
 11988                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 11989  1161  300F               	movlw	15
 11990  1162  049C               	iorwf	28,f	;volatile
 11991                           
 11992                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 11993  1163  300F               	movlw	15
 11994  1164  049F               	iorwf	31,f	;volatile
 11995                           
 11996                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 11997  1165  0025               	movlb	5	; select bank5
 11998  1166  019D               	clrf	29	;volatile
 11999                           
 12000                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12001  1167  019E               	clrf	30	;volatile
 12002                           
 12003                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12004  1168  019F               	clrf	31	;volatile
 12005                           
 12006                           ;user.c: 148: CCPR1 = 50;
 12007  1169  3000               	movlw	0
 12008  116A  0092               	movwf	18	;volatile
 12009  116B  3032               	movlw	50
 12010  116C  0091               	movwf	17	;volatile
 12011                           
 12012                           ;user.c: 149: CCPR2 = 100;
 12013  116D  3000               	movlw	0
 12014  116E  0099               	movwf	25	;volatile
 12015  116F  3064               	movlw	100
 12016  1170  0098               	movwf	24	;volatile
 12017                           
 12018                           ;user.c: 150: CCPR3 = 150;
 12019  1171  3000               	movlw	0
 12020  1172  0026               	movlb	6	; select bank6
 12021  1173  0092               	movwf	18	;volatile
 12022  1174  3096               	movlw	150
 12023  1175  0091               	movwf	17	;volatile
 12024                           
 12025                           ;user.c: 151: CCPR4 = 200;
 12026  1176  3000               	movlw	0
 12027  1177  0099               	movwf	25	;volatile
 12028  1178  30C8               	movlw	200
 12029  1179  0098               	movwf	24	;volatile
 12030                           
 12031                           ;user.c: 152: init_timer2();
 12032  117A  319D  2584  3191   	fcall	_init_timer2
 12033                           
 12034                           ;user.c: 153: init_timer0();
 12035  117D  319D  257D         	fcall	_init_timer0
 12036  117F  0008               	return
 12037  1180                     __end_of_init_pwm:	
 12038                           
 12039                           	psect	text38
 12040  1D84                     __ptext38:	
 12041 ;; *************** function _init_timer2 *****************
 12042 ;; Defined at:
 12043 ;;		line 156 in file "user.c"
 12044 ;; Parameters:    Size  Location     Type
 12045 ;;		None
 12046 ;; Auto vars:     Size  Location     Type
 12047 ;;		None
 12048 ;; Return value:  Size  Location     Type
 12049 ;;                  1    wreg      void 
 12050 ;; Registers used:
 12051 ;;		wreg, status,2, status,0
 12052 ;; Tracked objects:
 12053 ;;		On entry : 0/0
 12054 ;;		On exit  : 0/0
 12055 ;;		Unchanged: 0/0
 12056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12061 ;;Total ram usage:        0 bytes
 12062 ;; Hardware stack levels used:    1
 12063 ;; Hardware stack levels required when called:    3
 12064 ;; This function calls:
 12065 ;;		Nothing
 12066 ;; This function is called by:
 12067 ;;		_init_pwm
 12068 ;; This function uses a non-reentrant model
 12069 ;;
 12070                           
 12071                           
 12072                           ;psect for function _init_timer2
 12073  1D84                     _init_timer2:	
 12074                           
 12075                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 12076                           
 12077                           ;incstack = 0
 12078                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12079  1D84  3087               	movlw	-121
 12080  1D85  0020               	movlb	0	; select bank0
 12081  1D86  059C               	andwf	28,f	;volatile
 12082                           
 12083                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 12084  1D87  30FC               	movlw	-4
 12085  1D88  059C               	andwf	28,f	;volatile
 12086                           
 12087                           ;user.c: 159: PR2 = 0xFF;
 12088  1D89  30FF               	movlw	255
 12089  1D8A  009B               	movwf	27	;volatile
 12090                           
 12091                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 12092  1D8B  151C               	bsf	28,2	;volatile
 12093  1D8C  0008               	return
 12094  1D8D                     __end_of_init_timer2:	
 12095                           
 12096                           	psect	text39
 12097  1D7D                     __ptext39:	
 12098 ;; *************** function _init_timer0 *****************
 12099 ;; Defined at:
 12100 ;;		line 163 in file "user.c"
 12101 ;; Parameters:    Size  Location     Type
 12102 ;;		None
 12103 ;; Auto vars:     Size  Location     Type
 12104 ;;		None
 12105 ;; Return value:  Size  Location     Type
 12106 ;;                  1    wreg      void 
 12107 ;; Registers used:
 12108 ;;		None
 12109 ;; Tracked objects:
 12110 ;;		On entry : 0/0
 12111 ;;		On exit  : 0/0
 12112 ;;		Unchanged: 0/0
 12113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12118 ;;Total ram usage:        0 bytes
 12119 ;; Hardware stack levels used:    1
 12120 ;; Hardware stack levels required when called:    3
 12121 ;; This function calls:
 12122 ;;		Nothing
 12123 ;; This function is called by:
 12124 ;;		_init_pwm
 12125 ;; This function uses a non-reentrant model
 12126 ;;
 12127                           
 12128                           
 12129                           ;psect for function _init_timer0
 12130  1D7D                     _init_timer0:	
 12131                           
 12132                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 12133                           
 12134                           ;incstack = 0
 12135                           ; Regs used in _init_timer0: []
 12136  1D7D  0021               	movlb	1	; select bank1
 12137  1D7E  1295               	bcf	21,5	;volatile
 12138                           
 12139                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 12140  1D7F  1195               	bcf	21,3	;volatile
 12141                           
 12142                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 12143  1D80  1015               	bcf	21,0	;volatile
 12144                           
 12145                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 12146  1D81  1495               	bsf	21,1	;volatile
 12147                           
 12148                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 12149  1D82  1115               	bcf	21,2	;volatile
 12150  1D83  0008               	return
 12151  1D84                     __end_of_init_timer0:	
 12152                           
 12153                           	psect	text40
 12154  1D96                     __ptext40:	
 12155 ;; *************** function _init_adc *****************
 12156 ;; Defined at:
 12157 ;;		line 109 in file "user.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;		None
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, status,2, status,0
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12175 ;;Total ram usage:        0 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:    3
 12178 ;; This function calls:
 12179 ;;		Nothing
 12180 ;; This function is called by:
 12181 ;;		_InitApp
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           
 12186                           ;psect for function _init_adc
 12187  1D96                     _init_adc:	
 12188                           
 12189                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 12190                           
 12191                           ;incstack = 0
 12192                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12193  1D96  0021               	movlb	1	; select bank1
 12194  1D97  179E               	bsf	30,7	;volatile
 12195                           
 12196                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 12197  1D98  081E               	movf	30,w	;volatile
 12198  1D99  398F               	andlw	-113
 12199  1D9A  3860               	iorlw	96
 12200  1D9B  009E               	movwf	30	;volatile
 12201                           
 12202                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 12203  1D9C  30FC               	movlw	-4
 12204  1D9D  059E               	andwf	30,f	;volatile
 12205                           
 12206                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 12207  1D9E  141D               	bsf	29,0	;volatile
 12208  1D9F  0008               	return
 12209  1DA0                     __end_of_init_adc:	
 12210                           
 12211                           	psect	text41
 12212  1D75                     __ptext41:	
 12213 ;; *************** function _ConfigureOscillator *****************
 12214 ;; Defined at:
 12215 ;;		line 18 in file "system.c"
 12216 ;; Parameters:    Size  Location     Type
 12217 ;;		None
 12218 ;; Auto vars:     Size  Location     Type
 12219 ;;		None
 12220 ;; Return value:  Size  Location     Type
 12221 ;;                  1    wreg      void 
 12222 ;; Registers used:
 12223 ;;		wreg, status,2, status,0
 12224 ;; Tracked objects:
 12225 ;;		On entry : 0/0
 12226 ;;		On exit  : 0/0
 12227 ;;		Unchanged: 0/0
 12228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12233 ;;Total ram usage:        0 bytes
 12234 ;; Hardware stack levels used:    1
 12235 ;; Hardware stack levels required when called:    3
 12236 ;; This function calls:
 12237 ;;		Nothing
 12238 ;; This function is called by:
 12239 ;;		_main
 12240 ;; This function uses a non-reentrant model
 12241 ;;
 12242                           
 12243                           
 12244                           ;psect for function _ConfigureOscillator
 12245  1D75                     _ConfigureOscillator:	
 12246                           
 12247                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12248                           
 12249                           ;incstack = 0
 12250                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12251  1D75  30FC               	movlw	-4
 12252  1D76  0021               	movlb	1	; select bank1
 12253  1D77  0599               	andwf	25,f	;volatile
 12254  1D78  0008               	return
 12255  1D79                     __end_of_ConfigureOscillator:	
 12256                           
 12257                           	psect	intentry
 12258  0004                     __pintentry:	
 12259 ;; *************** function _isr *****************
 12260 ;; Defined at:
 12261 ;;		line 25 in file "interrupts.c"
 12262 ;; Parameters:    Size  Location     Type
 12263 ;;		None
 12264 ;; Auto vars:     Size  Location     Type
 12265 ;;  tmpSubDelay     2   35[BANK0 ] int 
 12266 ;; Return value:  Size  Location     Type
 12267 ;;                  1    wreg      void 
 12268 ;; Registers used:
 12269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12270 ;; Tracked objects:
 12271 ;;		On entry : 0/0
 12272 ;;		On exit  : 0/0
 12273 ;;		Unchanged: 0/0
 12274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12276 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12277 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12278 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12279 ;;Total ram usage:       11 bytes
 12280 ;; Hardware stack levels used:    1
 12281 ;; Hardware stack levels required when called:    2
 12282 ;; This function calls:
 12283 ;;		___awdiv
 12284 ;;		_modulation
 12285 ;;		i1_set_leds_top
 12286 ;; This function is called by:
 12287 ;;		Interrupt level 1
 12288 ;; This function uses a non-reentrant model
 12289 ;;
 12290                           
 12291  0004                     _isr:	
 12292                           
 12293                           ;incstack = 0
 12294                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12295  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12296  0005  3180               	pagesel	$
 12297  0006  0020               	movlb	0	; select bank0
 12298  0007  087F               	movf	127,w
 12299  0008  00C2               	movwf	??_isr+8
 12300                           
 12301                           ;interrupts.c: 26: int tmpSubDelay;
 12302                           ;interrupts.c: 28: extern volatile long timer;
 12303                           ;interrupts.c: 29: extern volatile long sub_timer;
 12304                           ;interrupts.c: 30: extern volatile long tap_timer;
 12305                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 12306                           ;interrupts.c: 32: extern int mod_delay_time;
 12307                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 12308                           ;interrupts.c: 36: extern int top_push_state;
 12309                           ;interrupts.c: 37: extern uint8_t feedback_start;
 12310                           ;interrupts.c: 38: extern volatile long mod_timer;
 12311                           ;interrupts.c: 39: extern volatile long delay_time;
 12312  0009  1D0B               	btfss	11,2	;volatile
 12313  000A  2919               	goto	i1l121
 12314                           
 12315                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 12316  000B  085D               	movf	_delay_time+1,w	;volatile
 12317  000C  00C4               	movwf	isr@tmpSubDelay+1
 12318  000D  085C               	movf	_delay_time,w	;volatile
 12319  000E  00C3               	movwf	isr@tmpSubDelay
 12320                           
 12321                           ;interrupts.c: 42: timer = timer + 1;
 12322  000F  3001               	movlw	1
 12323  0010  00BA               	movwf	??_isr
 12324  0011  3000               	movlw	0
 12325  0012  00BB               	movwf	??_isr+1
 12326  0013  3000               	movlw	0
 12327  0014  00BC               	movwf	??_isr+2
 12328  0015  3000               	movlw	0
 12329  0016  00BD               	movwf	??_isr+3
 12330  0017  084D               	movf	_timer,w	;volatile
 12331  0018  07BA               	addwf	??_isr,f
 12332  0019  084E               	movf	_timer+1,w	;volatile
 12333  001A  3DBB               	addwfc	??_isr+1,f
 12334  001B  084F               	movf	_timer+2,w	;volatile
 12335  001C  3DBC               	addwfc	??_isr+2,f
 12336  001D  0850               	movf	_timer+3,w	;volatile
 12337  001E  3DBD               	addwfc	??_isr+3,f
 12338  001F  083D               	movf	??_isr+3,w
 12339  0020  00D0               	movwf	_timer+3	;volatile
 12340  0021  083C               	movf	??_isr+2,w
 12341  0022  00CF               	movwf	_timer+2	;volatile
 12342  0023  083B               	movf	??_isr+1,w
 12343  0024  00CE               	movwf	_timer+1	;volatile
 12344  0025  083A               	movf	??_isr,w
 12345  0026  00CD               	movwf	_timer	;volatile
 12346                           
 12347                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 12348  0027  3001               	movlw	1
 12349  0028  00BA               	movwf	??_isr
 12350  0029  3000               	movlw	0
 12351  002A  00BB               	movwf	??_isr+1
 12352  002B  3000               	movlw	0
 12353  002C  00BC               	movwf	??_isr+2
 12354  002D  3000               	movlw	0
 12355  002E  00BD               	movwf	??_isr+3
 12356  002F  0845               	movf	_sub_timer,w	;volatile
 12357  0030  07BA               	addwf	??_isr,f
 12358  0031  0846               	movf	_sub_timer+1,w	;volatile
 12359  0032  3DBB               	addwfc	??_isr+1,f
 12360  0033  0847               	movf	_sub_timer+2,w	;volatile
 12361  0034  3DBC               	addwfc	??_isr+2,f
 12362  0035  0848               	movf	_sub_timer+3,w	;volatile
 12363  0036  3DBD               	addwfc	??_isr+3,f
 12364  0037  083D               	movf	??_isr+3,w
 12365  0038  00C8               	movwf	_sub_timer+3	;volatile
 12366  0039  083C               	movf	??_isr+2,w
 12367  003A  00C7               	movwf	_sub_timer+2	;volatile
 12368  003B  083B               	movf	??_isr+1,w
 12369  003C  00C6               	movwf	_sub_timer+1	;volatile
 12370  003D  083A               	movf	??_isr,w
 12371  003E  00C5               	movwf	_sub_timer	;volatile
 12372                           
 12373                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 12374  003F  3001               	movlw	1
 12375  0040  00BA               	movwf	??_isr
 12376  0041  3000               	movlw	0
 12377  0042  00BB               	movwf	??_isr+1
 12378  0043  3000               	movlw	0
 12379  0044  00BC               	movwf	??_isr+2
 12380  0045  3000               	movlw	0
 12381  0046  00BD               	movwf	??_isr+3
 12382  0047  0849               	movf	_tap_timer,w	;volatile
 12383  0048  07BA               	addwf	??_isr,f
 12384  0049  084A               	movf	_tap_timer+1,w	;volatile
 12385  004A  3DBB               	addwfc	??_isr+1,f
 12386  004B  084B               	movf	_tap_timer+2,w	;volatile
 12387  004C  3DBC               	addwfc	??_isr+2,f
 12388  004D  084C               	movf	_tap_timer+3,w	;volatile
 12389  004E  3DBD               	addwfc	??_isr+3,f
 12390  004F  083D               	movf	??_isr+3,w
 12391  0050  00CC               	movwf	_tap_timer+3	;volatile
 12392  0051  083C               	movf	??_isr+2,w
 12393  0052  00CB               	movwf	_tap_timer+2	;volatile
 12394  0053  083B               	movf	??_isr+1,w
 12395  0054  00CA               	movwf	_tap_timer+1	;volatile
 12396  0055  083A               	movf	??_isr,w
 12397  0056  00C9               	movwf	_tap_timer	;volatile
 12398                           
 12399                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 12400  0057  3001               	movlw	1
 12401  0058  00BA               	movwf	??_isr
 12402  0059  3000               	movlw	0
 12403  005A  00BB               	movwf	??_isr+1
 12404  005B  3000               	movlw	0
 12405  005C  00BC               	movwf	??_isr+2
 12406  005D  3000               	movlw	0
 12407  005E  00BD               	movwf	??_isr+3
 12408  005F  0022               	movlb	2	; select bank2
 12409  0060  0820               	movf	_mod_timer^(0+256),w	;volatile
 12410  0061  0020               	movlb	0	; select bank0
 12411  0062  07BA               	addwf	??_isr,f
 12412  0063  0022               	movlb	2	; select bank2
 12413  0064  0821               	movf	(_mod_timer+1)^(0+256),w	;volatile
 12414  0065  0020               	movlb	0	; select bank0
 12415  0066  3DBB               	addwfc	??_isr+1,f
 12416  0067  0022               	movlb	2	; select bank2
 12417  0068  0822               	movf	(_mod_timer+2)^(0+256),w	;volatile
 12418  0069  0020               	movlb	0	; select bank0
 12419  006A  3DBC               	addwfc	??_isr+2,f
 12420  006B  0022               	movlb	2	; select bank2
 12421  006C  0823               	movf	(_mod_timer+3)^(0+256),w	;volatile
 12422  006D  0020               	movlb	0	; select bank0
 12423  006E  3DBD               	addwfc	??_isr+3,f
 12424  006F  083D               	movf	??_isr+3,w
 12425  0070  0022               	movlb	2	; select bank2
 12426  0071  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12427  0072  0020               	movlb	0	; select bank0
 12428  0073  083C               	movf	??_isr+2,w
 12429  0074  0022               	movlb	2	; select bank2
 12430  0075  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12431  0076  0020               	movlb	0	; select bank0
 12432  0077  083B               	movf	??_isr+1,w
 12433  0078  0022               	movlb	2	; select bank2
 12434  0079  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12435  007A  0020               	movlb	0	; select bank0
 12436  007B  083A               	movf	??_isr,w
 12437  007C  0022               	movlb	2	; select bank2
 12438  007D  00A0               	movwf	_mod_timer^(0+256)	;volatile
 12439                           
 12440                           ;interrupts.c: 46: test_timer++;
 12441  007E  3001               	movlw	1
 12442  007F  0023               	movlb	3	; select bank3
 12443  0080  07BC               	addwf	_test_timer^(0+384),f	;volatile
 12444  0081  3000               	movlw	0
 12445  0082  3DBD               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 12446  0083  3000               	movlw	0
 12447  0084  3DBE               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 12448  0085  3000               	movlw	0
 12449  0086  3DBF               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 12450                           
 12451                           ;interrupts.c: 47: if (feedback_start == 1) {
 12452  0087  0020               	movlb	0	; select bank0
 12453  0088  0354               	decf	_feedback_start,w
 12454  0089  1D03               	btfss	3,2
 12455  008A  28A2               	goto	i1l4340
 12456                           
 12457                           ;interrupts.c: 48: feedback_timer++;
 12458  008B  3001               	movlw	1
 12459  008C  0022               	movlb	2	; select bank2
 12460  008D  07A6               	addwf	_feedback_timer^(0+256),f	;volatile
 12461  008E  3000               	movlw	0
 12462  008F  3DA7               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 12463                           
 12464                           ;interrupts.c: 49: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 12465  0090  0827               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 12466  0091  0020               	movlb	0	; select bank0
 12467  0092  0263               	subwf	_long_press_limit+1,w
 12468  0093  1D03               	skipz
 12469  0094  2899               	goto	u440_25
 12470  0095  0022               	movlb	2	; select bank2
 12471  0096  0826               	movf	_feedback_timer^(0+256),w	;volatile
 12472  0097  0020               	movlb	0	; select bank0
 12473  0098  0262               	subwf	_long_press_limit,w
 12474  0099                     u440_25:	
 12475  0099  1803               	skipnc
 12476  009A  28A2               	goto	i1l4340
 12477  009B  0863               	movf	_long_press_limit+1,w
 12478  009C  0022               	movlb	2	; select bank2
 12479  009D  00A7               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 12480  009E  0020               	movlb	0	; select bank0
 12481  009F  0862               	movf	_long_press_limit,w
 12482  00A0  0022               	movlb	2	; select bank2
 12483  00A1  00A6               	movwf	_feedback_timer^(0+256)	;volatile
 12484  00A2                     i1l4340:	
 12485                           
 12486                           ;interrupts.c: 50: }
 12487                           ;interrupts.c: 51: if (longTap_start == 1) {
 12488  00A2  0020               	movlb	0	; select bank0
 12489  00A3  0355               	decf	_longTap_start,w
 12490  00A4  1D03               	btfss	3,2
 12491  00A5  28BD               	goto	i1l4346
 12492                           
 12493                           ;interrupts.c: 52: longTap_timer++;
 12494  00A6  3001               	movlw	1
 12495  00A7  0022               	movlb	2	; select bank2
 12496  00A8  07B2               	addwf	_longTap_timer^(0+256),f	;volatile
 12497  00A9  3000               	movlw	0
 12498  00AA  3DB3               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 12499                           
 12500                           ;interrupts.c: 53: if (longTap_timer > long_press_limit) {
 12501  00AB  0833               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 12502  00AC  0020               	movlb	0	; select bank0
 12503  00AD  0263               	subwf	_long_press_limit+1,w
 12504  00AE  1D03               	skipz
 12505  00AF  28B4               	goto	u442_25
 12506  00B0  0022               	movlb	2	; select bank2
 12507  00B1  0832               	movf	_longTap_timer^(0+256),w	;volatile
 12508  00B2  0020               	movlb	0	; select bank0
 12509  00B3  0262               	subwf	_long_press_limit,w
 12510  00B4                     u442_25:	
 12511  00B4  1803               	skipnc
 12512  00B5  28BD               	goto	i1l4346
 12513                           
 12514                           ;interrupts.c: 54: longTap_timer = long_press_limit;
 12515  00B6  0863               	movf	_long_press_limit+1,w
 12516  00B7  0022               	movlb	2	; select bank2
 12517  00B8  00B3               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 12518  00B9  0020               	movlb	0	; select bank0
 12519  00BA  0862               	movf	_long_press_limit,w
 12520  00BB  0022               	movlb	2	; select bank2
 12521  00BC  00B2               	movwf	_longTap_timer^(0+256)	;volatile
 12522  00BD                     i1l4346:	
 12523                           
 12524                           ;interrupts.c: 55: }
 12525                           ;interrupts.c: 56: }
 12526                           ;interrupts.c: 57: INTCONbits.TMR0IF = 0;
 12527  00BD  110B               	bcf	11,2	;volatile
 12528                           
 12529                           ;interrupts.c: 59: if (adjust_sub_delay == 1) {
 12530  00BE  0023               	movlb	3	; select bank3
 12531  00BF  0340               	decf	_adjust_sub_delay^(0+384),w
 12532  00C0  0441               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 12533  00C1  1D03               	btfss	3,2
 12534  00C2  2919               	goto	i1l121
 12535                           
 12536                           ;interrupts.c: 60: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 12537  00C3  0020               	movlb	0	; select bank0
 12538  00C4  0848               	movf	_sub_timer+3,w	;volatile
 12539  00C5  3A80               	xorlw	128
 12540  00C6  00BA               	movwf	??_isr
 12541  00C7  085F               	movf	_delay_time+3,w	;volatile
 12542  00C8  3A80               	xorlw	128
 12543  00C9  023A               	subwf	??_isr,w
 12544  00CA  1D03               	skipz
 12545  00CB  28D6               	goto	u444_23
 12546  00CC  085E               	movf	_delay_time+2,w	;volatile
 12547  00CD  0247               	subwf	_sub_timer+2,w	;volatile
 12548  00CE  1D03               	skipz
 12549  00CF  28D6               	goto	u444_23
 12550  00D0  085D               	movf	_delay_time+1,w	;volatile
 12551  00D1  0246               	subwf	_sub_timer+1,w	;volatile
 12552  00D2  1D03               	skipz
 12553  00D3  28D6               	goto	u444_23
 12554  00D4  085C               	movf	_delay_time,w	;volatile
 12555  00D5  0245               	subwf	_sub_timer,w	;volatile
 12556  00D6                     u444_23:	
 12557  00D6  1C03               	skipc
 12558  00D7  2919               	goto	i1l121
 12559  00D8  0858               	movf	_baseline_delay_time,w	;volatile
 12560  00D9  00BA               	movwf	??_isr
 12561  00DA  0859               	movf	_baseline_delay_time+1,w	;volatile
 12562  00DB  00BB               	movwf	??_isr+1
 12563  00DC  085A               	movf	_baseline_delay_time+2,w	;volatile
 12564  00DD  00BC               	movwf	??_isr+2
 12565  00DE  085B               	movf	_baseline_delay_time+3,w	;volatile
 12566  00DF  00BD               	movwf	??_isr+3
 12567  00E0  094D               	comf	_timer,w	;volatile
 12568  00E1  00BE               	movwf	??_isr+4
 12569  00E2  094E               	comf	_timer+1,w	;volatile
 12570  00E3  00BF               	movwf	??_isr+5
 12571  00E4  094F               	comf	_timer+2,w	;volatile
 12572  00E5  00C0               	movwf	??_isr+6
 12573  00E6  0950               	comf	_timer+3,w	;volatile
 12574  00E7  00C1               	movwf	??_isr+7
 12575  00E8  0ABE               	incf	??_isr+4,f
 12576  00E9  1903               	skipnz
 12577  00EA  0ABF               	incf	??_isr+5,f
 12578  00EB  1903               	skipnz
 12579  00EC  0AC0               	incf	??_isr+6,f
 12580  00ED  1903               	skipnz
 12581  00EE  0AC1               	incf	??_isr+7,f
 12582  00EF  083E               	movf	??_isr+4,w
 12583  00F0  07BA               	addwf	??_isr,f
 12584  00F1  083F               	movf	??_isr+5,w
 12585  00F2  3DBB               	addwfc	??_isr+1,f
 12586  00F3  0840               	movf	??_isr+6,w
 12587  00F4  3DBC               	addwfc	??_isr+2,f
 12588  00F5  0841               	movf	??_isr+7,w
 12589  00F6  3DBD               	addwfc	??_isr+3,f
 12590  00F7  1BBD               	btfsc	??_isr+3,7
 12591  00F8  2906               	goto	i1l4354
 12592  00F9  083D               	movf	??_isr+3,w
 12593  00FA  1D03               	btfss	3,2
 12594  00FB  2919               	goto	i1l121
 12595  00FC  083C               	movf	??_isr+2,w
 12596  00FD  1D03               	btfss	3,2
 12597  00FE  2919               	goto	i1l121
 12598  00FF  083B               	movf	??_isr+1,w
 12599  0100  1D03               	btfss	3,2
 12600  0101  2919               	goto	i1l121
 12601  0102  3004               	movlw	4
 12602  0103  023A               	subwf	??_isr,w
 12603  0104  1803               	btfsc	3,0
 12604  0105  2919               	goto	i1l121
 12605  0106                     i1l4354:	
 12606                           
 12607                           ;interrupts.c: 61: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 12608  0106  094D               	comf	_timer,w	;volatile
 12609  0107  00BA               	movwf	??_isr
 12610  0108  094E               	comf	_timer+1,w	;volatile
 12611  0109  00BB               	movwf	??_isr+1
 12612  010A  0ABA               	incf	??_isr,f
 12613  010B  1903               	skipnz
 12614  010C  0ABB               	incf	??_isr+1,f
 12615  010D  0858               	movf	_baseline_delay_time,w	;volatile
 12616  010E  073A               	addwf	??_isr,w
 12617  010F  00BC               	movwf	??_isr+2
 12618  0110  0859               	movf	_baseline_delay_time+1,w	;volatile
 12619  0111  3D3B               	addwfc	??_isr+1,w
 12620  0112  00BD               	movwf	??_isr+3
 12621  0113  0845               	movf	_sub_timer,w	;volatile
 12622  0114  073C               	addwf	??_isr+2,w
 12623  0115  00C3               	movwf	isr@tmpSubDelay
 12624  0116  0846               	movf	_sub_timer+1,w	;volatile
 12625  0117  3D3D               	addwfc	??_isr+3,w
 12626  0118  00C4               	movwf	isr@tmpSubDelay+1
 12627  0119                     i1l121:	
 12628                           
 12629                           ;interrupts.c: 62: }
 12630                           ;interrupts.c: 63: }
 12631                           ;interrupts.c: 64: }
 12632                           ;interrupts.c: 77: if (longTap_state < 1 && doubleTap_state < 1) {
 12633  0119  0020               	movlb	0	; select bank0
 12634  011A  0867               	movf	_longTap_state,w	;volatile
 12635  011B  1D03               	btfss	3,2
 12636  011C  297A               	goto	i1l4378
 12637  011D  0853               	movf	_doubleTap_state,w	;volatile
 12638  011E  1D03               	btfss	3,2
 12639  011F  297A               	goto	i1l4378
 12640                           
 12641                           ;interrupts.c: 80: if (timer >= baseline_delay_time) {
 12642  0120  0850               	movf	_timer+3,w	;volatile
 12643  0121  3A80               	xorlw	128
 12644  0122  00BA               	movwf	??_isr
 12645  0123  085B               	movf	_baseline_delay_time+3,w	;volatile
 12646  0124  3A80               	xorlw	128
 12647  0125  023A               	subwf	??_isr,w
 12648  0126  1D03               	skipz
 12649  0127  2932               	goto	u448_23
 12650  0128  085A               	movf	_baseline_delay_time+2,w	;volatile
 12651  0129  024F               	subwf	_timer+2,w	;volatile
 12652  012A  1D03               	skipz
 12653  012B  2932               	goto	u448_23
 12654  012C  0859               	movf	_baseline_delay_time+1,w	;volatile
 12655  012D  024E               	subwf	_timer+1,w	;volatile
 12656  012E  1D03               	skipz
 12657  012F  2932               	goto	u448_23
 12658  0130  0858               	movf	_baseline_delay_time,w	;volatile
 12659  0131  024D               	subwf	_timer,w	;volatile
 12660  0132                     u448_23:	
 12661  0132  1C03               	skipc
 12662  0133  2968               	goto	i1l4374
 12663                           
 12664                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 12665  0134  0022               	movlb	2	; select bank2
 12666  0135  160D               	bsf	13,4	;volatile
 12667                           
 12668                           ;interrupts.c: 85: timer = 0;
 12669  0136  3000               	movlw	0
 12670  0137  0020               	movlb	0	; select bank0
 12671  0138  00D0               	movwf	_timer+3	;volatile
 12672  0139  3000               	movlw	0
 12673  013A  00CF               	movwf	_timer+2	;volatile
 12674  013B  3000               	movlw	0
 12675  013C  00CE               	movwf	_timer+1	;volatile
 12676  013D  3000               	movlw	0
 12677  013E  00CD               	movwf	_timer	;volatile
 12678                           
 12679                           ;interrupts.c: 86: if (reset_sub_delay == 1) {
 12680  013F  0023               	movlb	3	; select bank3
 12681  0140  0350               	decf	_reset_sub_delay^(0+384),w
 12682  0141  0451               	iorwf	(_reset_sub_delay+1)^(0+384),w
 12683  0142  1D03               	btfss	3,2
 12684  0143  2968               	goto	i1l4374
 12685                           
 12686                           ;interrupts.c: 88: CCPR1 = delay_counter;
 12687  0144  0022               	movlb	2	; select bank2
 12688  0145  0825               	movf	(_delay_counter+1)^(0+256),w	;volatile
 12689  0146  0025               	movlb	5	; select bank5
 12690  0147  0092               	movwf	18	;volatile
 12691  0148  0022               	movlb	2	; select bank2
 12692  0149  0824               	movf	_delay_counter^(0+256),w	;volatile
 12693  014A  0025               	movlb	5	; select bank5
 12694  014B  0091               	movwf	17	;volatile
 12695                           
 12696                           ;interrupts.c: 91: mod_counter = 0;
 12697  014C  0020               	movlb	0	; select bank0
 12698  014D  01D1               	clrf	_mod_counter
 12699  014E  01D2               	clrf	_mod_counter+1
 12700                           
 12701                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 12702  014F  0023               	movlb	3	; select bank3
 12703  0150  0865               	movf	_mod_delay_time^(0+384),w
 12704  0151  0022               	movlb	2	; select bank2
 12705  0152  00A0               	movwf	_mod_timer^(0+256)	;volatile
 12706  0153  0023               	movlb	3	; select bank3
 12707  0154  0866               	movf	(_mod_delay_time+1)^(0+384),w
 12708  0155  0022               	movlb	2	; select bank2
 12709  0156  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12710  0157  0D89               	rlf	9,f
 12711  0158  3B89               	subwfb	9,f
 12712  0159  0989               	comf	9,f
 12713  015A  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12714  015B  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12715                           
 12716                           ;interrupts.c: 94: reset_sub_delay = 0;
 12717  015C  0023               	movlb	3	; select bank3
 12718  015D  01D0               	clrf	_reset_sub_delay^(0+384)
 12719  015E  01D1               	clrf	(_reset_sub_delay+1)^(0+384)
 12720                           
 12721                           ;interrupts.c: 95: sub_timer = delay_time;
 12722  015F  0020               	movlb	0	; select bank0
 12723  0160  085F               	movf	_delay_time+3,w	;volatile
 12724  0161  00C8               	movwf	_sub_timer+3	;volatile
 12725  0162  085E               	movf	_delay_time+2,w	;volatile
 12726  0163  00C7               	movwf	_sub_timer+2	;volatile
 12727  0164  085D               	movf	_delay_time+1,w	;volatile
 12728  0165  00C6               	movwf	_sub_timer+1	;volatile
 12729  0166  085C               	movf	_delay_time,w	;volatile
 12730  0167  00C5               	movwf	_sub_timer	;volatile
 12731  0168                     i1l4374:	
 12732                           
 12733                           ;interrupts.c: 96: }
 12734                           ;interrupts.c: 97: }
 12735                           ;interrupts.c: 99: if (timer >= 30) {
 12736  0168  0020               	movlb	0	; select bank0
 12737  0169  1BD0               	btfsc	_timer+3,7	;volatile
 12738  016A  297A               	goto	i1l4378
 12739  016B  0850               	movf	_timer+3,w	;volatile
 12740  016C  1D03               	btfss	3,2
 12741  016D  2978               	goto	i1l4376
 12742  016E  084F               	movf	_timer+2,w	;volatile
 12743  016F  1D03               	btfss	3,2
 12744  0170  2978               	goto	i1l4376
 12745  0171  084E               	movf	_timer+1,w	;volatile
 12746  0172  1D03               	btfss	3,2
 12747  0173  2978               	goto	i1l4376
 12748  0174  301E               	movlw	30
 12749  0175  024D               	subwf	_timer,w	;volatile
 12750  0176  1C03               	btfss	3,0
 12751  0177  297A               	goto	i1l4378
 12752  0178                     i1l4376:	
 12753                           
 12754                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 12755  0178  0022               	movlb	2	; select bank2
 12756  0179  120D               	bcf	13,4	;volatile
 12757  017A                     i1l4378:	
 12758                           
 12759                           ;interrupts.c: 103: }
 12760                           ;interrupts.c: 104: }
 12761                           ;interrupts.c: 107: if (sub_timer >= tmpSubDelay) {
 12762  017A  0020               	movlb	0	; select bank0
 12763  017B  0843               	movf	isr@tmpSubDelay,w
 12764  017C  00BA               	movwf	??_isr
 12765  017D  0844               	movf	isr@tmpSubDelay+1,w
 12766  017E  00BB               	movwf	??_isr+1
 12767  017F  3000               	movlw	0
 12768  0180  1BBB               	btfsc	??_isr+1,7
 12769  0181  30FF               	movlw	255
 12770  0182  00BC               	movwf	??_isr+2
 12771  0183  00BD               	movwf	??_isr+3
 12772  0184  0848               	movf	_sub_timer+3,w	;volatile
 12773  0185  3A80               	xorlw	128
 12774  0186  00BE               	movwf	??_isr+4
 12775  0187  083D               	movf	??_isr+3,w
 12776  0188  3A80               	xorlw	128
 12777  0189  023E               	subwf	??_isr+4,w
 12778  018A  1D03               	skipz
 12779  018B  2996               	goto	u451_23
 12780  018C  083C               	movf	??_isr+2,w
 12781  018D  0247               	subwf	_sub_timer+2,w	;volatile
 12782  018E  1D03               	skipz
 12783  018F  2996               	goto	u451_23
 12784  0190  083B               	movf	??_isr+1,w
 12785  0191  0246               	subwf	_sub_timer+1,w	;volatile
 12786  0192  1D03               	skipz
 12787  0193  2996               	goto	u451_23
 12788  0194  083A               	movf	??_isr,w
 12789  0195  0245               	subwf	_sub_timer,w	;volatile
 12790  0196                     u451_23:	
 12791  0196  1C03               	skipc
 12792  0197  29B3               	goto	i1l4388
 12793                           
 12794                           ;interrupts.c: 108: if (suspend_blink == 0) {
 12795  0198  0856               	movf	_suspend_blink,w	;volatile
 12796  0199  1D03               	btfss	3,2
 12797  019A  29A6               	goto	i1l4384
 12798                           
 12799                           ;interrupts.c: 109: set_leds_top(top_push_state, 1);
 12800  019B  0865               	movf	_top_push_state+1,w
 12801  019C  00F1               	movwf	i1set_leds_top@x+1
 12802  019D  0864               	movf	_top_push_state,w
 12803  019E  00F0               	movwf	i1set_leds_top@x
 12804  019F  3001               	movlw	1
 12805  01A0  00F2               	movwf	i1set_leds_top@ledState
 12806  01A1  3000               	movlw	0
 12807  01A2  00F3               	movwf	i1set_leds_top@ledState+1
 12808  01A3  3192  2208  3180   	fcall	i1_set_leds_top
 12809  01A6                     i1l4384:	
 12810                           
 12811                           ;interrupts.c: 110: }
 12812                           ;interrupts.c: 111: tmpSubDelay = delay_time;
 12813  01A6  0020               	movlb	0	; select bank0
 12814  01A7  085D               	movf	_delay_time+1,w	;volatile
 12815  01A8  00C4               	movwf	isr@tmpSubDelay+1
 12816  01A9  085C               	movf	_delay_time,w	;volatile
 12817  01AA  00C3               	movwf	isr@tmpSubDelay
 12818                           
 12819                           ;interrupts.c: 112: sub_timer = 0;
 12820  01AB  3000               	movlw	0
 12821  01AC  00C8               	movwf	_sub_timer+3	;volatile
 12822  01AD  3000               	movlw	0
 12823  01AE  00C7               	movwf	_sub_timer+2	;volatile
 12824  01AF  3000               	movlw	0
 12825  01B0  00C6               	movwf	_sub_timer+1	;volatile
 12826  01B1  3000               	movlw	0
 12827  01B2  00C5               	movwf	_sub_timer	;volatile
 12828  01B3                     i1l4388:	
 12829                           
 12830                           ;interrupts.c: 113: }
 12831                           ;interrupts.c: 115: if (sub_timer >= 20) {
 12832  01B3  1BC8               	btfsc	_sub_timer+3,7	;volatile
 12833  01B4  29CF               	goto	i1l4394
 12834  01B5  0848               	movf	_sub_timer+3,w	;volatile
 12835  01B6  1D03               	btfss	3,2
 12836  01B7  29C2               	goto	i1l4390
 12837  01B8  0847               	movf	_sub_timer+2,w	;volatile
 12838  01B9  1D03               	btfss	3,2
 12839  01BA  29C2               	goto	i1l4390
 12840  01BB  0846               	movf	_sub_timer+1,w	;volatile
 12841  01BC  1D03               	btfss	3,2
 12842  01BD  29C2               	goto	i1l4390
 12843  01BE  3014               	movlw	20
 12844  01BF  0245               	subwf	_sub_timer,w	;volatile
 12845  01C0  1C03               	btfss	3,0
 12846  01C1  29CF               	goto	i1l4394
 12847  01C2                     i1l4390:	
 12848                           
 12849                           ;interrupts.c: 116: if (suspend_blink == 0) {
 12850  01C2  0856               	movf	_suspend_blink,w	;volatile
 12851  01C3  1D03               	btfss	3,2
 12852  01C4  29CF               	goto	i1l4394
 12853                           
 12854                           ;interrupts.c: 117: set_leds_top(top_push_state, 0);
 12855  01C5  0865               	movf	_top_push_state+1,w
 12856  01C6  00F1               	movwf	i1set_leds_top@x+1
 12857  01C7  0864               	movf	_top_push_state,w
 12858  01C8  00F0               	movwf	i1set_leds_top@x
 12859  01C9  3000               	movlw	0
 12860  01CA  00F2               	movwf	i1set_leds_top@ledState
 12861  01CB  00F3               	movwf	i1set_leds_top@ledState+1
 12862  01CC  3192  2208  3180   	fcall	i1_set_leds_top
 12863  01CF                     i1l4394:	
 12864                           
 12865                           ;interrupts.c: 118: }
 12866                           ;interrupts.c: 119: }
 12867                           ;interrupts.c: 131: if (mod_timer >= mod_delay_time) {
 12868  01CF  0023               	movlb	3	; select bank3
 12869  01D0  0865               	movf	_mod_delay_time^(0+384),w
 12870  01D1  0020               	movlb	0	; select bank0
 12871  01D2  00BA               	movwf	??_isr
 12872  01D3  0023               	movlb	3	; select bank3
 12873  01D4  0866               	movf	(_mod_delay_time+1)^(0+384),w
 12874  01D5  0020               	movlb	0	; select bank0
 12875  01D6  00BB               	movwf	??_isr+1
 12876  01D7  3000               	movlw	0
 12877  01D8  1BBB               	btfsc	??_isr+1,7
 12878  01D9  30FF               	movlw	255
 12879  01DA  00BC               	movwf	??_isr+2
 12880  01DB  00BD               	movwf	??_isr+3
 12881  01DC  0022               	movlb	2	; select bank2
 12882  01DD  0823               	movf	(_mod_timer+3)^(0+256),w	;volatile
 12883  01DE  3A80               	xorlw	128
 12884  01DF  0020               	movlb	0	; select bank0
 12885  01E0  00BE               	movwf	??_isr+4
 12886  01E1  083D               	movf	??_isr+3,w
 12887  01E2  3A80               	xorlw	128
 12888  01E3  023E               	subwf	??_isr+4,w
 12889  01E4  0022               	movlb	2	; select bank2
 12890  01E5  1D03               	skipz
 12891  01E6  29F7               	goto	u455_23
 12892  01E7  0020               	movlb	0	; select bank0
 12893  01E8  083C               	movf	??_isr+2,w
 12894  01E9  0022               	movlb	2	; select bank2
 12895  01EA  0222               	subwf	(_mod_timer+2)^(0+256),w	;volatile
 12896  01EB  1D03               	skipz
 12897  01EC  29F7               	goto	u455_23
 12898  01ED  0020               	movlb	0	; select bank0
 12899  01EE  083B               	movf	??_isr+1,w
 12900  01EF  0022               	movlb	2	; select bank2
 12901  01F0  0221               	subwf	(_mod_timer+1)^(0+256),w	;volatile
 12902  01F1  1D03               	skipz
 12903  01F2  29F7               	goto	u455_23
 12904  01F3  0020               	movlb	0	; select bank0
 12905  01F4  083A               	movf	??_isr,w
 12906  01F5  0022               	movlb	2	; select bank2
 12907  01F6  0220               	subwf	_mod_timer^(0+256),w	;volatile
 12908  01F7                     u455_23:	
 12909  01F7  1C03               	skipc
 12910  01F8  2AE4               	goto	i1l4448
 12911                           
 12912                           ;interrupts.c: 132: mod_timer = 0;
 12913  01F9  3000               	movlw	0
 12914  01FA  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12915  01FB  3000               	movlw	0
 12916  01FC  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12917  01FD  3000               	movlw	0
 12918  01FE  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12919  01FF  3000               	movlw	0
 12920  0200  00A0               	movwf	_mod_timer^(0+256)	;volatile
 12921                           
 12922                           ;interrupts.c: 134: if (bottom_push_state == 1 || bottom_push_state == 5) {
 12923  0201  0020               	movlb	0	; select bank0
 12924  0202  0360               	decf	_bottom_push_state,w
 12925  0203  0461               	iorwf	_bottom_push_state+1,w
 12926  0204  1903               	btfsc	3,2
 12927  0205  2A0B               	goto	i1l4402
 12928  0206  3005               	movlw	5
 12929  0207  0660               	xorwf	_bottom_push_state,w
 12930  0208  0461               	iorwf	_bottom_push_state+1,w
 12931  0209  1D03               	btfss	3,2
 12932  020A  2A14               	goto	i1l4406
 12933  020B                     i1l4402:	
 12934                           
 12935                           ;interrupts.c: 135: if (mod_counter >= 61) {
 12936  020B  0852               	movf	_mod_counter+1,w
 12937  020C  3A80               	xorlw	128
 12938  020D  00BA               	movwf	??_isr
 12939  020E  3080               	movlw	128
 12940  020F  023A               	subwf	??_isr,w
 12941  0210  1D03               	skipz
 12942  0211  2A1D               	goto	u459_25
 12943  0212  303D               	movlw	61
 12944  0213  2A1C               	goto	L13
 12945  0214                     i1l4406:	
 12946                           ;interrupts.c: 137: }
 12947                           ;interrupts.c: 138: } else {
 12948                           
 12949                           ;interrupts.c: 136: mod_counter = 0;
 12950                           
 12951                           
 12952                           ;interrupts.c: 139: if (mod_counter >= 31) {
 12953  0214  0852               	movf	_mod_counter+1,w
 12954  0215  3A80               	xorlw	128
 12955  0216  00BA               	movwf	??_isr
 12956  0217  3080               	movlw	128
 12957  0218  023A               	subwf	??_isr,w
 12958  0219  1D03               	skipz
 12959  021A  2A1D               	goto	u459_25
 12960  021B  301F               	movlw	31
 12961  021C                     L13:	
 12962  021C  0251               	subwf	_mod_counter,w
 12963  021D                     u459_25:	
 12964  021D  1C03               	skipc
 12965  021E  2A75               	goto	i1l4436
 12966                           
 12967                           ;interrupts.c: 140: mod_counter = 0;
 12968  021F  0020               	movlb	0	; select bank0
 12969  0220  01D1               	clrf	_mod_counter
 12970  0221  01D2               	clrf	_mod_counter+1
 12971                           
 12972                           ;interrupts.c: 141: }
 12973                           ;interrupts.c: 142: }
 12974                           ;interrupts.c: 144: switch (bottom_push_state) {
 12975  0222  2A75               	goto	i1l4436
 12976  0223                     i1l4410:	
 12977                           ;interrupts.c: 145: case 1:
 12978                           
 12979                           
 12980                           ;interrupts.c: 146: mod_value = mod5[mod_counter];
 12981  0223  0852               	movf	_mod_counter+1,w
 12982  0224  00BB               	movwf	??_isr+1
 12983  0225  0851               	movf	_mod_counter,w
 12984  0226  00BA               	movwf	??_isr
 12985  0227  35BA               	lslf	??_isr,f
 12986  0228  0DBB               	rlf	??_isr+1,f
 12987  0229  3076               	movlw	118
 12988  022A  00BC               	movwf	??_isr+2
 12989  022B  3025               	movlw	37
 12990  022C  00BD               	movwf	??_isr+3
 12991  022D  083A               	movf	??_isr,w
 12992  022E  073C               	addwf	??_isr+2,w
 12993  022F  0086               	movwf	6
 12994  0230  083B               	movf	??_isr+1,w
 12995  0231  3D3D               	addwfc	??_isr+3,w
 12996  0232  0087               	movwf	7
 12997  0233  3F40               	moviw [0]fsr1
 12998  0234  0023               	movlb	3	; select bank3
 12999  0235  00CE               	movwf	_mod_value^(0+384)
 13000  0236  3F41               	moviw [1]fsr1
 13001  0237  2A55               	goto	L16
 13002  0238                     i1l4414:	
 13003                           ;interrupts.c: 149: case 2:
 13004                           
 13005                           ;interrupts.c: 148: break;
 13006                           
 13007                           ;interrupts.c: 147: PORTCbits.RC4 = 0;
 13008                           
 13009                           
 13010                           ;interrupts.c: 150: mod_value = mod2[mod_counter];
 13011  0238  3551               	lslf	_mod_counter,w
 13012  0239  3E20               	addlw	(low (_mod2| (0+768)))& (0+255)
 13013  023A  0086               	movwf	6
 13014  023B  3003               	movlw	3	; select bank6/7
 13015  023C  0087               	movwf	7
 13016  023D  3F40               	moviw [0]fsr1
 13017  023E  0023               	movlb	3	; select bank3
 13018  023F  00CE               	movwf	_mod_value^(0+384)
 13019  0240  3F41               	moviw [1]fsr1
 13020  0241  2A55               	goto	L16
 13021  0242                     i1l4418:	
 13022                           ;interrupts.c: 153: case 3:
 13023                           
 13024                           ;interrupts.c: 152: break;
 13025                           
 13026                           ;interrupts.c: 151: PORTCbits.RC4 = 0;
 13027                           
 13028                           
 13029                           ;interrupts.c: 154: mod_value = mod3[mod_counter];
 13030  0242  3551               	lslf	_mod_counter,w
 13031  0243  3EA0               	addlw	(low (_mod3| (0+768)))& (0+255)
 13032  0244  0086               	movwf	6
 13033  0245  3003               	movlw	3	; select bank7/8
 13034  0246  0087               	movwf	7
 13035  0247  3F40               	moviw [0]fsr1
 13036  0248  0023               	movlb	3	; select bank3
 13037  0249  00CE               	movwf	_mod_value^(0+384)
 13038  024A  3F41               	moviw [1]fsr1
 13039  024B  2A55               	goto	L16
 13040  024C                     i1l4422:	
 13041                           ;interrupts.c: 157: case 4:
 13042                           
 13043                           ;interrupts.c: 156: break;
 13044                           
 13045                           ;interrupts.c: 155: PORTCbits.RC4 = 0;
 13046                           
 13047                           
 13048                           ;interrupts.c: 158: mod_value = mod4[mod_counter];
 13049  024C  3551               	lslf	_mod_counter,w
 13050  024D  3E20               	addlw	(low (_mod4| (0+1024)))& (0+255)
 13051  024E  0086               	movwf	6
 13052  024F  3004               	movlw	4	; select bank8/9
 13053  0250  0087               	movwf	7
 13054  0251  3F40               	moviw [0]fsr1
 13055  0252  0023               	movlb	3	; select bank3
 13056  0253  00CE               	movwf	_mod_value^(0+384)
 13057  0254  3F41               	moviw [1]fsr1
 13058  0255                     L16:	
 13059  0255  00CF               	movwf	(_mod_value+1)^(0+384)
 13060  0256  2A72               	goto	i1l4432
 13061  0257                     i1l4426:	
 13062                           ;interrupts.c: 161: case 5:
 13063                           
 13064                           ;interrupts.c: 160: break;
 13065                           
 13066                           ;interrupts.c: 159: PORTCbits.RC4 = 0;
 13067                           
 13068                           
 13069                           ;interrupts.c: 162: mod_value = mod5[mod_counter];
 13070  0257  0852               	movf	_mod_counter+1,w
 13071  0258  00BB               	movwf	??_isr+1
 13072  0259  0851               	movf	_mod_counter,w
 13073  025A  00BA               	movwf	??_isr
 13074  025B  35BA               	lslf	??_isr,f
 13075  025C  0DBB               	rlf	??_isr+1,f
 13076  025D  3076               	movlw	118
 13077  025E  00BC               	movwf	??_isr+2
 13078  025F  3025               	movlw	37
 13079  0260  00BD               	movwf	??_isr+3
 13080  0261  083A               	movf	??_isr,w
 13081  0262  073C               	addwf	??_isr+2,w
 13082  0263  0086               	movwf	6
 13083  0264  083B               	movf	??_isr+1,w
 13084  0265  3D3D               	addwfc	??_isr+3,w
 13085  0266  0087               	movwf	7
 13086  0267  3F40               	moviw [0]fsr1
 13087  0268  0023               	movlb	3	; select bank3
 13088  0269  00CE               	movwf	_mod_value^(0+384)
 13089  026A  3F41               	moviw [1]fsr1
 13090  026B  00CF               	movwf	(_mod_value+1)^(0+384)
 13091                           
 13092                           ;interrupts.c: 164: PORTCbits.RC4 = 1;
 13093  026C  0020               	movlb	0	; select bank0
 13094  026D  160E               	bsf	14,4	;volatile
 13095                           
 13096                           ;interrupts.c: 166: break;
 13097  026E  2A8F               	goto	i1l4438
 13098  026F                     i1l4430:	
 13099                           ;interrupts.c: 167: case 6:
 13100                           
 13101                           
 13102                           ;interrupts.c: 168: mod_value = 0;
 13103  026F  0023               	movlb	3	; select bank3
 13104  0270  01CE               	clrf	_mod_value^(0+384)
 13105  0271  01CF               	clrf	(_mod_value+1)^(0+384)
 13106  0272                     i1l4432:	
 13107                           
 13108                           ;interrupts.c: 169: PORTCbits.RC4 = 0;
 13109  0272  0020               	movlb	0	; select bank0
 13110  0273  120E               	bcf	14,4	;volatile
 13111                           
 13112                           ;interrupts.c: 171: }
 13113                           
 13114                           ;interrupts.c: 170: break;
 13115  0274  2A8F               	goto	i1l4438
 13116  0275                     i1l4436:	
 13117                           
 13118                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13119                           ; Switch size 1, requested type "space"
 13120                           ; Number of cases is 1, Range of values is 0 to 0
 13121                           ; switch strategies available:
 13122                           ; Name         Instructions Cycles
 13123                           ; simple_byte            4     3 (average)
 13124                           ; direct_byte            8     6 (fixed)
 13125                           ; jumptable            260     6 (fixed)
 13126                           ;	Chosen strategy is simple_byte
 13127  0275  0020               	movlb	0	; select bank0
 13128  0276  0861               	movf	_bottom_push_state+1,w
 13129  0277  3A00               	xorlw	0	; case 0
 13130  0278  1903               	skipnz
 13131  0279  2A7B               	goto	i1l6136
 13132  027A  2A8F               	goto	i1l4438
 13133  027B                     i1l6136:	
 13134                           
 13135                           ; Switch size 1, requested type "space"
 13136                           ; Number of cases is 6, Range of values is 1 to 6
 13137                           ; switch strategies available:
 13138                           ; Name         Instructions Cycles
 13139                           ; simple_byte           19    10 (average)
 13140                           ; direct_byte           21     9 (fixed)
 13141                           ; jumptable            263     9 (fixed)
 13142                           ;	Chosen strategy is simple_byte
 13143  027B  0860               	movf	_bottom_push_state,w
 13144  027C  3A01               	xorlw	1	; case 1
 13145  027D  1903               	skipnz
 13146  027E  2A23               	goto	i1l4410
 13147  027F  3A03               	xorlw	3	; case 2
 13148  0280  1903               	skipnz
 13149  0281  2A38               	goto	i1l4414
 13150  0282  3A01               	xorlw	1	; case 3
 13151  0283  1903               	skipnz
 13152  0284  2A42               	goto	i1l4418
 13153  0285  3A07               	xorlw	7	; case 4
 13154  0286  1903               	skipnz
 13155  0287  2A4C               	goto	i1l4422
 13156  0288  3A01               	xorlw	1	; case 5
 13157  0289  1903               	skipnz
 13158  028A  2A57               	goto	i1l4426
 13159  028B  3A03               	xorlw	3	; case 6
 13160  028C  1903               	skipnz
 13161  028D  2A6F               	goto	i1l4430
 13162  028E  2A8F               	goto	i1l4438
 13163  028F                     i1l4438:	
 13164                           
 13165                           ;interrupts.c: 174: if (mod_counter < 5) {
 13166  028F  0852               	movf	_mod_counter+1,w
 13167  0290  3A80               	xorlw	128
 13168  0291  00BA               	movwf	??_isr
 13169  0292  3080               	movlw	128
 13170  0293  023A               	subwf	??_isr,w
 13171  0294  1D03               	skipz
 13172  0295  2A98               	goto	u460_25
 13173  0296  3005               	movlw	5
 13174  0297  0251               	subwf	_mod_counter,w
 13175  0298                     u460_25:	
 13176  0298  1803               	skipnc
 13177  0299  2A9D               	goto	i1l151
 13178                           
 13179                           ;interrupts.c: 175: LATBbits.LATB0 = 1;
 13180  029A  0022               	movlb	2	; select bank2
 13181  029B  140D               	bsf	13,0	;volatile
 13182                           
 13183                           ;interrupts.c: 176: } else {
 13184  029C  2A9F               	goto	i1l4442
 13185  029D                     i1l151:	
 13186                           
 13187                           ;interrupts.c: 177: LATBbits.LATB0 = 0;
 13188  029D  0022               	movlb	2	; select bank2
 13189  029E  100D               	bcf	13,0	;volatile
 13190  029F                     i1l4442:	
 13191                           
 13192                           ;interrupts.c: 178: }
 13193                           ;interrupts.c: 187: mod_value = modulation(mod_value, adjusted_pot_value);
 13194  029F  0023               	movlb	3	; select bank3
 13195  02A0  084E               	movf	_mod_value^(0+384),w
 13196  02A1  0020               	movlb	0	; select bank0
 13197  02A2  00AE               	movwf	modulation@x
 13198  02A3  0023               	movlb	3	; select bank3
 13199  02A4  084F               	movf	(_mod_value+1)^(0+384),w
 13200  02A5  0020               	movlb	0	; select bank0
 13201  02A6  00AF               	movwf	modulation@x+1
 13202  02A7  0D89               	rlf	9,f
 13203  02A8  3B89               	subwfb	9,f
 13204  02A9  0989               	comf	9,f
 13205  02AA  00B0               	movwf	modulation@x+2
 13206  02AB  00B1               	movwf	modulation@x+3
 13207  02AC  0023               	movlb	3	; select bank3
 13208  02AD  0842               	movf	_adjusted_pot_value^(0+384),w
 13209  02AE  0020               	movlb	0	; select bank0
 13210  02AF  00B2               	movwf	modulation@y
 13211  02B0  0023               	movlb	3	; select bank3
 13212  02B1  0843               	movf	(_adjusted_pot_value+1)^(0+384),w
 13213  02B2  0020               	movlb	0	; select bank0
 13214  02B3  00B3               	movwf	modulation@y+1
 13215  02B4  0D89               	rlf	9,f
 13216  02B5  3B89               	subwfb	9,f
 13217  02B6  0989               	comf	9,f
 13218  02B7  00B4               	movwf	modulation@y+2
 13219  02B8  00B5               	movwf	modulation@y+3
 13220  02B9  3190  20FE  3180   	fcall	_modulation
 13221  02BC  0020               	movlb	0	; select bank0
 13222  02BD  082F               	movf	?_modulation+1,w
 13223  02BE  0023               	movlb	3	; select bank3
 13224  02BF  00CF               	movwf	(_mod_value+1)^(0+384)
 13225  02C0  0020               	movlb	0	; select bank0
 13226  02C1  082E               	movf	?_modulation,w
 13227  02C2  0023               	movlb	3	; select bank3
 13228  02C3  00CE               	movwf	_mod_value^(0+384)
 13229                           
 13230                           ;interrupts.c: 188: CCPR9 = mod_value / 2;
 13231  02C4  3002               	movlw	2
 13232  02C5  00F0               	movwf	___awdiv@divisor
 13233  02C6  3000               	movlw	0
 13234  02C7  00F1               	movwf	___awdiv@divisor+1
 13235  02C8  084F               	movf	(_mod_value+1)^(0+384),w
 13236  02C9  00F3               	movwf	___awdiv@dividend+1
 13237  02CA  084E               	movf	_mod_value^(0+384),w
 13238  02CB  00F2               	movwf	___awdiv@dividend
 13239  02CC  3193  233A  3180   	fcall	___awdiv
 13240  02CF  0871               	movf	?___awdiv+1,w
 13241  02D0  002C               	movlb	12	; select bank12
 13242  02D1  009B               	movwf	27	;volatile
 13243  02D2  0870               	movf	?___awdiv,w
 13244  02D3  009A               	movwf	26	;volatile
 13245                           
 13246                           ;interrupts.c: 189: mod_timer = 0;
 13247  02D4  3000               	movlw	0
 13248  02D5  0022               	movlb	2	; select bank2
 13249  02D6  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13250  02D7  3000               	movlw	0
 13251  02D8  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13252  02D9  3000               	movlw	0
 13253  02DA  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13254  02DB  3000               	movlw	0
 13255  02DC  00A0               	movwf	_mod_timer^(0+256)	;volatile
 13256                           
 13257                           ;interrupts.c: 190: mod_counter = mod_counter + 1;
 13258  02DD  0020               	movlb	0	; select bank0
 13259  02DE  0851               	movf	_mod_counter,w
 13260  02DF  3E01               	addlw	1
 13261  02E0  00D1               	movwf	_mod_counter
 13262  02E1  3000               	movlw	0
 13263  02E2  3D52               	addwfc	_mod_counter+1,w
 13264  02E3  00D2               	movwf	_mod_counter+1
 13265  02E4                     i1l4448:	
 13266                           
 13267                           ;interrupts.c: 204: }
 13268                           ;interrupts.c: 229: if (preset_programmning_on == 1) {
 13269  02E4  0022               	movlb	2	; select bank2
 13270  02E5  033C               	decf	_preset_programmning_on^(0+256),w
 13271  02E6  1D03               	btfss	3,2
 13272  02E7  2B14               	goto	i1l4460
 13273                           
 13274                           ;interrupts.c: 230: preset_blink++;
 13275  02E8  3001               	movlw	1
 13276  02E9  0020               	movlb	0	; select bank0
 13277  02EA  00BA               	movwf	??_isr
 13278  02EB  083A               	movf	??_isr,w
 13279  02EC  0022               	movlb	2	; select bank2
 13280  02ED  07BB               	addwf	_preset_blink^(0+256),f
 13281                           
 13282                           ;interrupts.c: 232: if (preset_blink >= blink_delay) {
 13283  02EE  0856               	movf	(_blink_delay+1)^(0+256),w
 13284  02EF  3A80               	xorlw	128
 13285  02F0  3C80               	sublw	128
 13286  02F1  1D03               	skipz
 13287  02F2  2AF5               	goto	u462_25
 13288  02F3  0855               	movf	_blink_delay^(0+256),w
 13289  02F4  023B               	subwf	_preset_blink^(0+256),w
 13290  02F5                     u462_25:	
 13291  02F5  1C03               	skipc
 13292  02F6  2B12               	goto	i1l154
 13293                           
 13294                           ;interrupts.c: 233: LATBbits.LATB1 = 1;
 13295  02F7  0022               	movlb	2	; select bank2
 13296  02F8  148D               	bsf	13,1	;volatile
 13297                           
 13298                           ;interrupts.c: 234: if (preset_blink > blink_delay*2) {
 13299  02F9  0856               	movf	(_blink_delay+1)^(0+256),w
 13300  02FA  0020               	movlb	0	; select bank0
 13301  02FB  00BB               	movwf	??_isr+1
 13302  02FC  0022               	movlb	2	; select bank2
 13303  02FD  0855               	movf	_blink_delay^(0+256),w
 13304  02FE  0020               	movlb	0	; select bank0
 13305  02FF  00BA               	movwf	??_isr
 13306  0300  35BA               	lslf	??_isr,f
 13307  0301  0DBB               	rlf	??_isr+1,f
 13308  0302  083B               	movf	??_isr+1,w
 13309  0303  3A80               	xorlw	128
 13310  0304  00BC               	movwf	??_isr+2
 13311  0305  3080               	movlw	128
 13312  0306  023C               	subwf	??_isr+2,w
 13313  0307  1D03               	skipz
 13314  0308  2B0D               	goto	u463_25
 13315  0309  0022               	movlb	2	; select bank2
 13316  030A  083B               	movf	_preset_blink^(0+256),w
 13317  030B  0020               	movlb	0	; select bank0
 13318  030C  023A               	subwf	??_isr,w
 13319  030D                     u463_25:	
 13320  030D  1803               	skipnc
 13321  030E  2B19               	goto	i1l159
 13322                           
 13323                           ;interrupts.c: 235: preset_blink = 0;
 13324  030F  0022               	movlb	2	; select bank2
 13325  0310  01BB               	clrf	_preset_blink^(0+256)
 13326                           
 13327                           ;interrupts.c: 236: }
 13328                           ;interrupts.c: 238: } else {
 13329  0311  2B19               	goto	i1l159
 13330  0312                     i1l154:	
 13331                           
 13332                           ;interrupts.c: 239: LATBbits.LATB1 = 0;
 13333  0312  0022               	movlb	2	; select bank2
 13334  0313  2B18               	goto	i1l4464
 13335  0314                     i1l4460:	
 13336                           ;interrupts.c: 240: }
 13337                           ;interrupts.c: 242: } else {
 13338                           
 13339                           
 13340                           ;interrupts.c: 243: if (preset_blink > 0) {
 13341  0314  083B               	movf	_preset_blink^(0+256),w
 13342  0315  1903               	btfsc	3,2
 13343  0316  2B19               	goto	i1l159
 13344                           
 13345                           ;interrupts.c: 244: preset_blink = 0;
 13346  0317  01BB               	clrf	_preset_blink^(0+256)
 13347  0318                     i1l4464:	
 13348                           
 13349                           ;interrupts.c: 245: LATBbits.LATB1 = 0;
 13350  0318  108D               	bcf	13,1	;volatile
 13351  0319                     i1l159:	
 13352  0319  0020               	movlb	0	; select bank0
 13353  031A  0842               	movf	??_isr+8,w
 13354  031B  00FF               	movwf	127
 13355  031C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13356  031D  0009               	retfie
 13357  031E                     __end_of_isr:	
 13358                           
 13359                           	psect	text43
 13360  1208                     __ptext43:	
 13361 ;; *************** function i1_set_leds_top *****************
 13362 ;; Defined at:
 13363 ;;		line 16 in file "LEDs.c"
 13364 ;; Parameters:    Size  Location     Type
 13365 ;;  x               2    0[COMMON] int 
 13366 ;;  ledState        2    2[COMMON] int 
 13367 ;; Auto vars:     Size  Location     Type
 13368 ;;		None
 13369 ;; Return value:  Size  Location     Type
 13370 ;;                  1    wreg      void 
 13371 ;; Registers used:
 13372 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13373 ;; Tracked objects:
 13374 ;;		On entry : 0/0
 13375 ;;		On exit  : 0/0
 13376 ;;		Unchanged: 0/0
 13377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13378 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13379 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13381 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13382 ;;Total ram usage:        4 bytes
 13383 ;; Hardware stack levels used:    1
 13384 ;; This function calls:
 13385 ;;		Nothing
 13386 ;; This function is called by:
 13387 ;;		_isr
 13388 ;; This function uses a non-reentrant model
 13389 ;;
 13390                           
 13391                           
 13392                           ;psect for function i1_set_leds_top
 13393  1208                     i1_set_leds_top:	
 13394                           
 13395                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13396                           
 13397                           ;incstack = 0
 13398                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13399  1208  0027               	movlb	7	; select bank7
 13400  1209  100C               	bcf	12,0	;volatile
 13401                           
 13402                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13403  120A  108C               	bcf	12,1	;volatile
 13404                           
 13405                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13406  120B  110C               	bcf	12,2	;volatile
 13407                           
 13408                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13409  120C  118C               	bcf	12,3	;volatile
 13410                           
 13411                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13412  120D  120C               	bcf	12,4	;volatile
 13413                           
 13414                           ;LEDs.c: 22: switch (x) {
 13415  120E  2A33               	goto	i1l4324
 13416  120F                     i1l4312:	
 13417                           ;LEDs.c: 23: case 1:
 13418                           
 13419                           
 13420                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13421  120F  0C72               	rrf	i1set_leds_top@ledState,w
 13422  1210  1C03               	skipc
 13423  1211  100C               	bcf	12,0	;volatile
 13424  1212  1803               	skipnc
 13425  1213  140C               	bsf	12,0	;volatile
 13426                           
 13427                           ;LEDs.c: 25: break;
 13428  1214  0008               	return
 13429  1215                     i1l4314:	
 13430                           ;LEDs.c: 26: case 2:
 13431                           
 13432                           
 13433                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13434  1215  0C72               	rrf	i1set_leds_top@ledState,w
 13435  1216  1C03               	skipc
 13436  1217  108C               	bcf	12,1	;volatile
 13437  1218  1803               	skipnc
 13438  1219  148C               	bsf	12,1	;volatile
 13439                           
 13440                           ;LEDs.c: 28: break;
 13441  121A  0008               	return
 13442  121B                     i1l4316:	
 13443                           ;LEDs.c: 29: case 3:
 13444                           
 13445                           
 13446                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13447  121B  0C72               	rrf	i1set_leds_top@ledState,w
 13448  121C  1C03               	skipc
 13449  121D  110C               	bcf	12,2	;volatile
 13450  121E  1803               	skipnc
 13451  121F  150C               	bsf	12,2	;volatile
 13452                           
 13453                           ;LEDs.c: 31: break;
 13454  1220  0008               	return
 13455  1221                     i1l4318:	
 13456                           ;LEDs.c: 32: case 4:
 13457                           
 13458                           
 13459                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13460  1221  0C72               	rrf	i1set_leds_top@ledState,w
 13461  1222  1C03               	skipc
 13462  1223  118C               	bcf	12,3	;volatile
 13463  1224  1803               	skipnc
 13464  1225  158C               	bsf	12,3	;volatile
 13465                           
 13466                           ;LEDs.c: 34: break;
 13467  1226  0008               	return
 13468  1227                     i1l4320:	
 13469                           ;LEDs.c: 35: case 5:
 13470                           
 13471                           
 13472                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13473  1227  0C72               	rrf	i1set_leds_top@ledState,w
 13474  1228  1C03               	skipc
 13475  1229  120C               	bcf	12,4	;volatile
 13476  122A  1803               	skipnc
 13477  122B  160C               	bsf	12,4	;volatile
 13478                           
 13479                           ;LEDs.c: 39: break;
 13480                           
 13481                           ;LEDs.c: 38: case 6:
 13482                           
 13483                           ;LEDs.c: 37: break;
 13484  122C  0008               	return
 13485  122D                     i1l702:	
 13486                           ;LEDs.c: 40: case 100:
 13487                           
 13488                           
 13489                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13490  122D  140C               	bsf	12,0	;volatile
 13491                           
 13492                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13493  122E  148C               	bsf	12,1	;volatile
 13494                           
 13495                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13496  122F  150C               	bsf	12,2	;volatile
 13497                           
 13498                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13499  1230  158C               	bsf	12,3	;volatile
 13500                           
 13501                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13502  1231  160C               	bsf	12,4	;volatile
 13503                           
 13504                           ;LEDs.c: 47: }
 13505                           
 13506                           ;LEDs.c: 46: break;
 13507  1232  0008               	return
 13508  1233                     i1l4324:	
 13509                           
 13510                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13511                           ; Switch size 1, requested type "space"
 13512                           ; Number of cases is 1, Range of values is 0 to 0
 13513                           ; switch strategies available:
 13514                           ; Name         Instructions Cycles
 13515                           ; simple_byte            4     3 (average)
 13516                           ; direct_byte            8     6 (fixed)
 13517                           ; jumptable            260     6 (fixed)
 13518                           ;	Chosen strategy is simple_byte
 13519  1233  0871               	movf	i1set_leds_top@x+1,w
 13520  1234  3A00               	xorlw	0	; case 0
 13521  1235  1903               	skipnz
 13522  1236  2A38               	goto	i1l6138
 13523  1237  2A4F               	goto	i1l703
 13524  1238                     i1l6138:	
 13525                           
 13526                           ; Switch size 1, requested type "space"
 13527                           ; Number of cases is 7, Range of values is 1 to 100
 13528                           ; switch strategies available:
 13529                           ; Name         Instructions Cycles
 13530                           ; simple_byte           22    12 (average)
 13531                           ; direct_byte          209     9 (fixed)
 13532                           ; jumptable            263     9 (fixed)
 13533                           ;	Chosen strategy is simple_byte
 13534  1238  0870               	movf	i1set_leds_top@x,w
 13535  1239  3A01               	xorlw	1	; case 1
 13536  123A  1903               	skipnz
 13537  123B  2A0F               	goto	i1l4312
 13538  123C  3A03               	xorlw	3	; case 2
 13539  123D  1903               	skipnz
 13540  123E  2A15               	goto	i1l4314
 13541  123F  3A01               	xorlw	1	; case 3
 13542  1240  1903               	skipnz
 13543  1241  2A1B               	goto	i1l4316
 13544  1242  3A07               	xorlw	7	; case 4
 13545  1243  1903               	skipnz
 13546  1244  2A21               	goto	i1l4318
 13547  1245  3A01               	xorlw	1	; case 5
 13548  1246  1903               	skipnz
 13549  1247  2A27               	goto	i1l4320
 13550  1248  3A03               	xorlw	3	; case 6
 13551  1249  1903               	skipnz
 13552  124A  2A4F               	goto	i1l703
 13553  124B  3A62               	xorlw	98	; case 100
 13554  124C  1903               	skipnz
 13555  124D  2A2D               	goto	i1l702
 13556  124E  2A4F               	goto	i1l703
 13557  124F                     i1l703:	
 13558  124F  0008               	return
 13559  1250                     __end_ofi1_set_leds_top:	
 13560                           
 13561                           	psect	text44
 13562  10FE                     __ptext44:	
 13563 ;; *************** function _modulation *****************
 13564 ;; Defined at:
 13565 ;;		line 181 in file "user.c"
 13566 ;; Parameters:    Size  Location     Type
 13567 ;;  x               4   14[BANK0 ] long 
 13568 ;;  y               4   18[BANK0 ] long 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;		None
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  4   14[BANK0 ] long 
 13573 ;; Registers used:
 13574 ;;		wreg, status,2, status,0, pclath, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13580 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13582 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13583 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13584 ;;Total ram usage:       12 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    1
 13587 ;; This function calls:
 13588 ;;		i1___aldiv
 13589 ;;		i1___lmul
 13590 ;; This function is called by:
 13591 ;;		_isr
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           
 13596                           ;psect for function _modulation
 13597  10FE                     _modulation:	
 13598                           
 13599                           ;user.c: 184: return (127500 + (y * x)) / 1000;
 13600                           
 13601                           ;incstack = 0
 13602                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 13603  10FE  3000               	movlw	0
 13604  10FF  0020               	movlb	0	; select bank0
 13605  1100  00A3               	movwf	i1___aldiv@divisor+3
 13606  1101  3000               	movlw	0
 13607  1102  00A2               	movwf	i1___aldiv@divisor+2
 13608  1103  3003               	movlw	3
 13609  1104  00A1               	movwf	i1___aldiv@divisor+1
 13610  1105  30E8               	movlw	232
 13611  1106  00A0               	movwf	i1___aldiv@divisor
 13612  1107  300C               	movlw	12
 13613  1108  00B6               	movwf	??_modulation
 13614  1109  30F2               	movlw	242
 13615  110A  00B7               	movwf	??_modulation+1
 13616  110B  3001               	movlw	1
 13617  110C  00B8               	movwf	??_modulation+2
 13618  110D  3000               	movlw	0
 13619  110E  00B9               	movwf	??_modulation+3
 13620  110F  0835               	movf	modulation@y+3,w
 13621  1110  00F3               	movwf	i1___lmul@multiplier+3
 13622  1111  0834               	movf	modulation@y+2,w
 13623  1112  00F2               	movwf	i1___lmul@multiplier+2
 13624  1113  0833               	movf	modulation@y+1,w
 13625  1114  00F1               	movwf	i1___lmul@multiplier+1
 13626  1115  0832               	movf	modulation@y,w
 13627  1116  00F0               	movwf	i1___lmul@multiplier
 13628  1117  0831               	movf	modulation@x+3,w
 13629  1118  00F7               	movwf	i1___lmul@multiplicand+3
 13630  1119  0830               	movf	modulation@x+2,w
 13631  111A  00F6               	movwf	i1___lmul@multiplicand+2
 13632  111B  082F               	movf	modulation@x+1,w
 13633  111C  00F5               	movwf	i1___lmul@multiplicand+1
 13634  111D  082E               	movf	modulation@x,w
 13635  111E  00F4               	movwf	i1___lmul@multiplicand
 13636  111F  319E  26D4  3190   	fcall	i1___lmul
 13637  1122  0870               	movf	?i1___lmul,w
 13638  1123  0020               	movlb	0	; select bank0
 13639  1124  07B6               	addwf	??_modulation,f
 13640  1125  0871               	movf	?i1___lmul+1,w
 13641  1126  3DB7               	addwfc	??_modulation+1,f
 13642  1127  0872               	movf	?i1___lmul+2,w
 13643  1128  3DB8               	addwfc	??_modulation+2,f
 13644  1129  0873               	movf	?i1___lmul+3,w
 13645  112A  3DB9               	addwfc	??_modulation+3,f
 13646  112B  0839               	movf	??_modulation+3,w
 13647  112C  00A7               	movwf	i1___aldiv@dividend+3
 13648  112D  0838               	movf	??_modulation+2,w
 13649  112E  00A6               	movwf	i1___aldiv@dividend+2
 13650  112F  0837               	movf	??_modulation+1,w
 13651  1130  00A5               	movwf	i1___aldiv@dividend+1
 13652  1131  0836               	movf	??_modulation,w
 13653  1132  00A4               	movwf	i1___aldiv@dividend
 13654  1133  3195  2529         	fcall	i1___aldiv
 13655  1135  0020               	movlb	0	; select bank0
 13656  1136  0823               	movf	?i1___aldiv+3,w
 13657  1137  00B1               	movwf	?_modulation+3
 13658  1138  0822               	movf	?i1___aldiv+2,w
 13659  1139  00B0               	movwf	?_modulation+2
 13660  113A  0821               	movf	?i1___aldiv+1,w
 13661  113B  00AF               	movwf	?_modulation+1
 13662  113C  0820               	movf	?i1___aldiv,w
 13663  113D  00AE               	movwf	?_modulation
 13664  113E  0008               	return
 13665  113F                     __end_of_modulation:	
 13666                           
 13667                           	psect	text45
 13668  1ED4                     __ptext45:	
 13669 ;; *************** function i1___lmul *****************
 13670 ;; Defined at:
 13671 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13672 ;; Parameters:    Size  Location     Type
 13673 ;;  multiplier      4    0[COMMON] unsigned long 
 13674 ;;  multiplicand    4    4[COMMON] unsigned long 
 13675 ;; Auto vars:     Size  Location     Type
 13676 ;;  __lmul          4    8[COMMON] unsigned long 
 13677 ;; Return value:  Size  Location     Type
 13678 ;;                  4    0[COMMON] unsigned long 
 13679 ;; Registers used:
 13680 ;;		wreg, status,2, status,0
 13681 ;; Tracked objects:
 13682 ;;		On entry : 0/0
 13683 ;;		On exit  : 0/0
 13684 ;;		Unchanged: 0/0
 13685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13686 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13687 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13689 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13690 ;;Total ram usage:       12 bytes
 13691 ;; Hardware stack levels used:    1
 13692 ;; This function calls:
 13693 ;;		Nothing
 13694 ;; This function is called by:
 13695 ;;		_modulation
 13696 ;; This function uses a non-reentrant model
 13697 ;;
 13698                           
 13699                           
 13700                           ;psect for function i1___lmul
 13701  1ED4                     i1___lmul:	
 13702                           
 13703                           ;incstack = 0
 13704                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 13705  1ED4  3000               	movlw	0
 13706  1ED5  00FB               	movwf	i1___lmul@product+3
 13707  1ED6  3000               	movlw	0
 13708  1ED7  00FA               	movwf	i1___lmul@product+2
 13709  1ED8  3000               	movlw	0
 13710  1ED9  00F9               	movwf	i1___lmul@product+1
 13711  1EDA  3000               	movlw	0
 13712  1EDB  00F8               	movwf	i1___lmul@product
 13713  1EDC                     i1l3832:	
 13714  1EDC  1C70               	btfss	i1___lmul@multiplier,0
 13715  1EDD  2EE6               	goto	i1l3836
 13716  1EDE  0874               	movf	i1___lmul@multiplicand,w
 13717  1EDF  07F8               	addwf	i1___lmul@product,f
 13718  1EE0  0875               	movf	i1___lmul@multiplicand+1,w
 13719  1EE1  3DF9               	addwfc	i1___lmul@product+1,f
 13720  1EE2  0876               	movf	i1___lmul@multiplicand+2,w
 13721  1EE3  3DFA               	addwfc	i1___lmul@product+2,f
 13722  1EE4  0877               	movf	i1___lmul@multiplicand+3,w
 13723  1EE5  3DFB               	addwfc	i1___lmul@product+3,f
 13724  1EE6                     i1l3836:	
 13725  1EE6  3001               	movlw	1
 13726  1EE7                     u345_25:	
 13727  1EE7  35F4               	lslf	i1___lmul@multiplicand,f
 13728  1EE8  0DF5               	rlf	i1___lmul@multiplicand+1,f
 13729  1EE9  0DF6               	rlf	i1___lmul@multiplicand+2,f
 13730  1EEA  0DF7               	rlf	i1___lmul@multiplicand+3,f
 13731  1EEB  0B89               	decfsz	9,f
 13732  1EEC  2EE7               	goto	u345_25
 13733  1EED  3001               	movlw	1
 13734  1EEE                     u346_25:	
 13735  1EEE  36F3               	lsrf	i1___lmul@multiplier+3,f
 13736  1EEF  0CF2               	rrf	i1___lmul@multiplier+2,f
 13737  1EF0  0CF1               	rrf	i1___lmul@multiplier+1,f
 13738  1EF1  0CF0               	rrf	i1___lmul@multiplier,f
 13739  1EF2  0B89               	decfsz	9,f
 13740  1EF3  2EEE               	goto	u346_25
 13741  1EF4  0873               	movf	i1___lmul@multiplier+3,w
 13742  1EF5  0472               	iorwf	i1___lmul@multiplier+2,w
 13743  1EF6  0471               	iorwf	i1___lmul@multiplier+1,w
 13744  1EF7  0470               	iorwf	i1___lmul@multiplier,w
 13745  1EF8  1D03               	skipz
 13746  1EF9  2EDC               	goto	i1l3832
 13747  1EFA  087B               	movf	i1___lmul@product+3,w
 13748  1EFB  00F3               	movwf	?i1___lmul+3
 13749  1EFC  087A               	movf	i1___lmul@product+2,w
 13750  1EFD  00F2               	movwf	?i1___lmul+2
 13751  1EFE  0879               	movf	i1___lmul@product+1,w
 13752  1EFF  00F1               	movwf	?i1___lmul+1
 13753  1F00  0878               	movf	i1___lmul@product,w
 13754  1F01  00F0               	movwf	?i1___lmul
 13755  1F02  0008               	return
 13756  1F03                     __end_ofi1___lmul:	
 13757                           
 13758                           	psect	text46
 13759  1529                     __ptext46:	
 13760 ;; *************** function i1___aldiv *****************
 13761 ;; Defined at:
 13762 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 13763 ;; Parameters:    Size  Location     Type
 13764 ;;  divisor         4    0[BANK0 ] long 
 13765 ;;  dividend        4    4[BANK0 ] long 
 13766 ;; Auto vars:     Size  Location     Type
 13767 ;;  __aldiv         4   10[BANK0 ] long 
 13768 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 13769 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  4    0[BANK0 ] long 
 13772 ;; Registers used:
 13773 ;;		wreg, status,2, status,0
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13779 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13780 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13781 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13782 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13783 ;;Total ram usage:       15 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; This function calls:
 13786 ;;		Nothing
 13787 ;; This function is called by:
 13788 ;;		_modulation
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           
 13793                           ;psect for function i1___aldiv
 13794  1529                     i1___aldiv:	
 13795                           
 13796                           ;incstack = 0
 13797                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 13798  1529  0020               	movlb	0	; select bank0
 13799  152A  01A9               	clrf	i1___aldiv@sign
 13800  152B  1FA3               	btfss	i1___aldiv@divisor+3,7
 13801  152C  2D3A               	goto	i1l1377
 13802  152D  09A0               	comf	i1___aldiv@divisor,f
 13803  152E  09A1               	comf	i1___aldiv@divisor+1,f
 13804  152F  09A2               	comf	i1___aldiv@divisor+2,f
 13805  1530  09A3               	comf	i1___aldiv@divisor+3,f
 13806  1531  0AA0               	incf	i1___aldiv@divisor,f
 13807  1532  1903               	skipnz
 13808  1533  0AA1               	incf	i1___aldiv@divisor+1,f
 13809  1534  1903               	skipnz
 13810  1535  0AA2               	incf	i1___aldiv@divisor+2,f
 13811  1536  1903               	skipnz
 13812  1537  0AA3               	incf	i1___aldiv@divisor+3,f
 13813  1538  01A9               	clrf	i1___aldiv@sign
 13814  1539  0AA9               	incf	i1___aldiv@sign,f
 13815  153A                     i1l1377:	
 13816  153A  1FA7               	btfss	i1___aldiv@dividend+3,7
 13817  153B  2D4B               	goto	i1l3854
 13818  153C  09A4               	comf	i1___aldiv@dividend,f
 13819  153D  09A5               	comf	i1___aldiv@dividend+1,f
 13820  153E  09A6               	comf	i1___aldiv@dividend+2,f
 13821  153F  09A7               	comf	i1___aldiv@dividend+3,f
 13822  1540  0AA4               	incf	i1___aldiv@dividend,f
 13823  1541  1903               	skipnz
 13824  1542  0AA5               	incf	i1___aldiv@dividend+1,f
 13825  1543  1903               	skipnz
 13826  1544  0AA6               	incf	i1___aldiv@dividend+2,f
 13827  1545  1903               	skipnz
 13828  1546  0AA7               	incf	i1___aldiv@dividend+3,f
 13829  1547  3001               	movlw	1
 13830  1548  00FC               	movwf	??i1___aldiv
 13831  1549  087C               	movf	??i1___aldiv,w
 13832  154A  06A9               	xorwf	i1___aldiv@sign,f
 13833  154B                     i1l3854:	
 13834  154B  3000               	movlw	0
 13835  154C  00AD               	movwf	i1___aldiv@quotient+3
 13836  154D  3000               	movlw	0
 13837  154E  00AC               	movwf	i1___aldiv@quotient+2
 13838  154F  3000               	movlw	0
 13839  1550  00AB               	movwf	i1___aldiv@quotient+1
 13840  1551  3000               	movlw	0
 13841  1552  00AA               	movwf	i1___aldiv@quotient
 13842  1553  0823               	movf	i1___aldiv@divisor+3,w
 13843  1554  0422               	iorwf	i1___aldiv@divisor+2,w
 13844  1555  0421               	iorwf	i1___aldiv@divisor+1,w
 13845  1556  0420               	iorwf	i1___aldiv@divisor,w
 13846  1557  1903               	skipnz
 13847  1558  2D94               	goto	i1l3876
 13848  1559  01A8               	clrf	i1___aldiv@counter
 13849  155A  0AA8               	incf	i1___aldiv@counter,f
 13850  155B                     i1l3862:	
 13851  155B  1BA3               	btfsc	i1___aldiv@divisor+3,7
 13852  155C  2D69               	goto	i1l3864
 13853  155D  3001               	movlw	1
 13854  155E                     u351_25:	
 13855  155E  35A0               	lslf	i1___aldiv@divisor,f
 13856  155F  0DA1               	rlf	i1___aldiv@divisor+1,f
 13857  1560  0DA2               	rlf	i1___aldiv@divisor+2,f
 13858  1561  0DA3               	rlf	i1___aldiv@divisor+3,f
 13859  1562  0B89               	decfsz	9,f
 13860  1563  2D5E               	goto	u351_25
 13861  1564  3001               	movlw	1
 13862  1565  00FC               	movwf	??i1___aldiv
 13863  1566  087C               	movf	??i1___aldiv,w
 13864  1567  07A8               	addwf	i1___aldiv@counter,f
 13865  1568  2D5B               	goto	i1l3862
 13866  1569                     i1l3864:	
 13867  1569  3001               	movlw	1
 13868  156A                     u353_25:	
 13869  156A  35AA               	lslf	i1___aldiv@quotient,f
 13870  156B  0DAB               	rlf	i1___aldiv@quotient+1,f
 13871  156C  0DAC               	rlf	i1___aldiv@quotient+2,f
 13872  156D  0DAD               	rlf	i1___aldiv@quotient+3,f
 13873  156E  0B89               	decfsz	9,f
 13874  156F  2D6A               	goto	u353_25
 13875  1570  0823               	movf	i1___aldiv@divisor+3,w
 13876  1571  0227               	subwf	i1___aldiv@dividend+3,w
 13877  1572  1D03               	skipz
 13878  1573  2D7E               	goto	u354_25
 13879  1574  0822               	movf	i1___aldiv@divisor+2,w
 13880  1575  0226               	subwf	i1___aldiv@dividend+2,w
 13881  1576  1D03               	skipz
 13882  1577  2D7E               	goto	u354_25
 13883  1578  0821               	movf	i1___aldiv@divisor+1,w
 13884  1579  0225               	subwf	i1___aldiv@dividend+1,w
 13885  157A  1D03               	skipz
 13886  157B  2D7E               	goto	u354_25
 13887  157C  0820               	movf	i1___aldiv@divisor,w
 13888  157D  0224               	subwf	i1___aldiv@dividend,w
 13889  157E                     u354_25:	
 13890  157E  1C03               	skipc
 13891  157F  2D89               	goto	i1l3872
 13892  1580  0820               	movf	i1___aldiv@divisor,w
 13893  1581  02A4               	subwf	i1___aldiv@dividend,f
 13894  1582  0821               	movf	i1___aldiv@divisor+1,w
 13895  1583  3BA5               	subwfb	i1___aldiv@dividend+1,f
 13896  1584  0822               	movf	i1___aldiv@divisor+2,w
 13897  1585  3BA6               	subwfb	i1___aldiv@dividend+2,f
 13898  1586  0823               	movf	i1___aldiv@divisor+3,w
 13899  1587  3BA7               	subwfb	i1___aldiv@dividend+3,f
 13900  1588  142A               	bsf	i1___aldiv@quotient,0
 13901  1589                     i1l3872:	
 13902  1589  3001               	movlw	1
 13903  158A                     u355_25:	
 13904  158A  36A3               	lsrf	i1___aldiv@divisor+3,f
 13905  158B  0CA2               	rrf	i1___aldiv@divisor+2,f
 13906  158C  0CA1               	rrf	i1___aldiv@divisor+1,f
 13907  158D  0CA0               	rrf	i1___aldiv@divisor,f
 13908  158E  0B89               	decfsz	9,f
 13909  158F  2D8A               	goto	u355_25
 13910  1590  3001               	movlw	1
 13911  1591  02A8               	subwf	i1___aldiv@counter,f
 13912  1592  1D03               	btfss	3,2
 13913  1593  2D69               	goto	i1l3864
 13914  1594                     i1l3876:	
 13915  1594  0829               	movf	i1___aldiv@sign,w
 13916  1595  1903               	btfsc	3,2
 13917  1596  2DA2               	goto	i1l3880
 13918  1597  09AA               	comf	i1___aldiv@quotient,f
 13919  1598  09AB               	comf	i1___aldiv@quotient+1,f
 13920  1599  09AC               	comf	i1___aldiv@quotient+2,f
 13921  159A  09AD               	comf	i1___aldiv@quotient+3,f
 13922  159B  0AAA               	incf	i1___aldiv@quotient,f
 13923  159C  1903               	skipnz
 13924  159D  0AAB               	incf	i1___aldiv@quotient+1,f
 13925  159E  1903               	skipnz
 13926  159F  0AAC               	incf	i1___aldiv@quotient+2,f
 13927  15A0  1903               	skipnz
 13928  15A1  0AAD               	incf	i1___aldiv@quotient+3,f
 13929  15A2                     i1l3880:	
 13930  15A2  082D               	movf	i1___aldiv@quotient+3,w
 13931  15A3  00A3               	movwf	?i1___aldiv+3
 13932  15A4  082C               	movf	i1___aldiv@quotient+2,w
 13933  15A5  00A2               	movwf	?i1___aldiv+2
 13934  15A6  082B               	movf	i1___aldiv@quotient+1,w
 13935  15A7  00A1               	movwf	?i1___aldiv+1
 13936  15A8  082A               	movf	i1___aldiv@quotient,w
 13937  15A9  00A0               	movwf	?i1___aldiv
 13938  15AA  0008               	return
 13939  15AB                     __end_ofi1___aldiv:	
 13940                           
 13941                           	psect	text47
 13942  133A                     __ptext47:	
 13943 ;; *************** function ___awdiv *****************
 13944 ;; Defined at:
 13945 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  divisor         2    0[COMMON] int 
 13948 ;;  dividend        2    2[COMMON] int 
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;  quotient        2    7[COMMON] int 
 13951 ;;  sign            1    6[COMMON] unsigned char 
 13952 ;;  counter         1    5[COMMON] unsigned char 
 13953 ;; Return value:  Size  Location     Type
 13954 ;;                  2    0[COMMON] int 
 13955 ;; Registers used:
 13956 ;;		wreg, status,2, status,0
 13957 ;; Tracked objects:
 13958 ;;		On entry : 0/0
 13959 ;;		On exit  : 0/0
 13960 ;;		Unchanged: 0/0
 13961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13962 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13963 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13965 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13966 ;;Total ram usage:        9 bytes
 13967 ;; Hardware stack levels used:    1
 13968 ;; This function calls:
 13969 ;;		Nothing
 13970 ;; This function is called by:
 13971 ;;		_isr
 13972 ;; This function uses a non-reentrant model
 13973 ;;
 13974                           
 13975                           
 13976                           ;psect for function ___awdiv
 13977  133A                     ___awdiv:	
 13978                           
 13979                           ;incstack = 0
 13980                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13981  133A  01F6               	clrf	___awdiv@sign
 13982  133B  1FF1               	btfss	___awdiv@divisor+1,7
 13983  133C  2B44               	goto	i1l4274
 13984  133D  09F0               	comf	___awdiv@divisor,f
 13985  133E  09F1               	comf	___awdiv@divisor+1,f
 13986  133F  0AF0               	incf	___awdiv@divisor,f
 13987  1340  1903               	skipnz
 13988  1341  0AF1               	incf	___awdiv@divisor+1,f
 13989  1342  01F6               	clrf	___awdiv@sign
 13990  1343  0AF6               	incf	___awdiv@sign,f
 13991  1344                     i1l4274:	
 13992  1344  1FF3               	btfss	___awdiv@dividend+1,7
 13993  1345  2B4F               	goto	i1l4280
 13994  1346  09F2               	comf	___awdiv@dividend,f
 13995  1347  09F3               	comf	___awdiv@dividend+1,f
 13996  1348  0AF2               	incf	___awdiv@dividend,f
 13997  1349  1903               	skipnz
 13998  134A  0AF3               	incf	___awdiv@dividend+1,f
 13999  134B  3001               	movlw	1
 14000  134C  00F4               	movwf	??___awdiv
 14001  134D  0874               	movf	??___awdiv,w
 14002  134E  06F6               	xorwf	___awdiv@sign,f
 14003  134F                     i1l4280:	
 14004  134F  01F7               	clrf	___awdiv@quotient
 14005  1350  01F8               	clrf	___awdiv@quotient+1
 14006  1351  0870               	movf	___awdiv@divisor,w
 14007  1352  0471               	iorwf	___awdiv@divisor+1,w
 14008  1353  1903               	btfsc	3,2
 14009  1354  2B7E               	goto	i1l4302
 14010  1355  01F5               	clrf	___awdiv@counter
 14011  1356  0AF5               	incf	___awdiv@counter,f
 14012  1357                     i1l4290:	
 14013  1357  1BF1               	btfsc	___awdiv@divisor+1,7
 14014  1358  2B63               	goto	i1l4292
 14015  1359  3001               	movlw	1
 14016  135A                     u431_25:	
 14017  135A  35F0               	lslf	___awdiv@divisor,f
 14018  135B  0DF1               	rlf	___awdiv@divisor+1,f
 14019  135C  0B89               	decfsz	9,f
 14020  135D  2B5A               	goto	u431_25
 14021  135E  3001               	movlw	1
 14022  135F  00F4               	movwf	??___awdiv
 14023  1360  0874               	movf	??___awdiv,w
 14024  1361  07F5               	addwf	___awdiv@counter,f
 14025  1362  2B57               	goto	i1l4290
 14026  1363                     i1l4292:	
 14027  1363  3001               	movlw	1
 14028  1364                     u433_25:	
 14029  1364  35F7               	lslf	___awdiv@quotient,f
 14030  1365  0DF8               	rlf	___awdiv@quotient+1,f
 14031  1366  0B89               	decfsz	9,f
 14032  1367  2B64               	goto	u433_25
 14033  1368  0871               	movf	___awdiv@divisor+1,w
 14034  1369  0273               	subwf	___awdiv@dividend+1,w
 14035  136A  1D03               	skipz
 14036  136B  2B6E               	goto	u434_25
 14037  136C  0870               	movf	___awdiv@divisor,w
 14038  136D  0272               	subwf	___awdiv@dividend,w
 14039  136E                     u434_25:	
 14040  136E  1C03               	skipc
 14041  136F  2B75               	goto	i1l4298
 14042  1370  0870               	movf	___awdiv@divisor,w
 14043  1371  02F2               	subwf	___awdiv@dividend,f
 14044  1372  0871               	movf	___awdiv@divisor+1,w
 14045  1373  3BF3               	subwfb	___awdiv@dividend+1,f
 14046  1374  1477               	bsf	___awdiv@quotient,0
 14047  1375                     i1l4298:	
 14048  1375  3001               	movlw	1
 14049  1376                     u435_25:	
 14050  1376  36F1               	lsrf	___awdiv@divisor+1,f
 14051  1377  0CF0               	rrf	___awdiv@divisor,f
 14052  1378  0B89               	decfsz	9,f
 14053  1379  2B76               	goto	u435_25
 14054  137A  3001               	movlw	1
 14055  137B  02F5               	subwf	___awdiv@counter,f
 14056  137C  1D03               	btfss	3,2
 14057  137D  2B63               	goto	i1l4292
 14058  137E                     i1l4302:	
 14059  137E  0876               	movf	___awdiv@sign,w
 14060  137F  1903               	btfsc	3,2
 14061  1380  2B86               	goto	i1l4306
 14062  1381  09F7               	comf	___awdiv@quotient,f
 14063  1382  09F8               	comf	___awdiv@quotient+1,f
 14064  1383  0AF7               	incf	___awdiv@quotient,f
 14065  1384  1903               	skipnz
 14066  1385  0AF8               	incf	___awdiv@quotient+1,f
 14067  1386                     i1l4306:	
 14068  1386  0878               	movf	___awdiv@quotient+1,w
 14069  1387  00F1               	movwf	?___awdiv+1
 14070  1388  0877               	movf	___awdiv@quotient,w
 14071  1389  00F0               	movwf	?___awdiv
 14072  138A  0008               	return
 14073  138B                     __end_of___awdiv:	
 14074  007E                     btemp	set	126	;btemp
 14075  007E                     int$flags	set	126
 14076  007E                     wtemp	set	126
 14077  007E                     wtemp0	set	126
 14078  0080                     wtemp1	set	128
 14079  0082                     wtemp2	set	130
 14080  0084                     wtemp3	set	132
 14081  0086                     wtemp4	set	134
 14082  0088                     wtemp5	set	136
 14083  007F                     wtemp6	set	127
 14084  007E                     ttemp	set	126
 14085  007E                     ttemp0	set	126
 14086  0081                     ttemp1	set	129
 14087  0084                     ttemp2	set	132
 14088  0087                     ttemp3	set	135
 14089  007F                     ttemp4	set	127
 14090  007E                     ltemp	set	126
 14091  007E                     ltemp0	set	126
 14092  0082                     ltemp1	set	130
 14093  0086                     ltemp2	set	134
 14094  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1012
    BSS         210
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     79      79
    BANK2            80     22      70
    BANK3            80     15      75
    BANK4            80      0      44
    BANK5            80      0      80
    BANK6            80      0      62
    BANK7            80      0      62
    BANK8            80      0      62
    BANK9            80      0      64
    BANK10           78      0      62
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->___fttol
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   55598
                                             18 BANK2      4     4      0
                                              0 BANK3     15    15      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3308
                                             22 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4681
                                             22 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2140
                                             18 BANK1      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7868
                                             25 BANK1      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4047
                                             18 BANK1      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3821
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11232
                                              6 BANK2     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     833
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3213
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3186
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2324
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14036
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3414
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3346
                                             37 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4727
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2464
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2328
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2294
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1754
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4F      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     16      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      F      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      2C      13       55.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2EC      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3E      20       77.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3E      22       77.5%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      3E      26       79.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2EC      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Dec 29 22:43:43 2016

                     _update_mode 1180                       __CFG_CP$OFF 0000                      ___awdiv@sign 0076  
              _topTactile_pressed 013E        setDoublePressState@f_state 00B2                   _updateSwitchTap 0B9B  
                    ___ftadd@exp1 00B4                      ___ftadd@exp2 00B3                      ___ftadd@sign 00B2  
                             l315 041B                               l350 1FB6                               l532 1DF6  
                             l525 09B4                               l710 1FD2                               l702 13BA  
                             l711 1FD5                               l703 13DE                               l712 1FD8  
                             l561 14E5                               l714 1FDB                               l715 1FFF  
                             l707 1FCC              __size_of_adc_convert 0013                               l709 1FCF  
                             l850 11FD                               l846 11D6                               l862 12DF  
                             l872 11A6                               l858 12AF                               l874 11A8  
                             l875 11AB                               l876 11B9                               _PR2 001B  
    solidring_tactiles@ring_delay 00B4                               _map 162D                               _isr 0004  
                             _tap 0220                      __CFG_BORV$LO 0000                               wreg 0009  
                    __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000               set_subdivision@tmpX 014C  
         __end_of_set_leds_bottom 2000                      __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029  
                    ___ftdiv@cntr 00CF                      ___ftdiv@sign 00D4                              _B25k 02A0  
                            l1223 0C65                              l1209 0BB0                              l1085 0A40  
                            l1514 0B44                              l1377 15BC                              l1490 1425  
                            l1491 142D                              l1483 1412                              l5020 1479  
                            l1574 1735                              l5210 0B56                              l5204 0B36  
                            l5124 15DD                              l5116 15CD                              l5214 0B68  
                            l5206 0B40                              l5310 08CC                              l5142 1624  
                            l5134 160B                              l5126 15EB                              l5224 0B83  
                            l5240 1784                              l5066 127B                              l5234 176E  
                            l5306 08C4                              l5154 1E92                              l6130 0921  
                            l5138 1616                              l6132 13C7                              l5164 0ACD  
                            l6134 1FE8                              l5406 14F8                              l5174 0AE3  
                            l5262 17DE                              l5254 17C5                              l5334 16D3  
                            l5094 1F7D                              ?_map 00D5                              l5408 1501  
                            l5192 0B10                              l5168 0AD4                              l5432 11CB  
                            l5360 172B                              l5352 170C                              l5194 0B1A  
                            l5186 0AFD                              l5282 086D                              l5442 11F2  
                            l5362 1739                              l5354 171D                              l5196 0B1F  
                            l5276 0857                              l5452 12A4                              l5524 09D0  
                            l5612 0BA6                              l5198 0B23                              l5294 08A8  
                            l5462 12CB                              l5366 1747                              l5550 0A1B  
                            l5536 09F1                              l5528 09E3                              l5640 0C0A  
                            l5632 0BE3                              l4914 1FE2                              l4930 13F9  
                            l5298 08B0                              l5730 0911                              l5562 0A33  
                            l5634 0C00                              l5618 0BC1                              l5482 11AE  
                            l4940 141F                              l4932 13FE                              l4924 13E8  
                            l5732 0915                              l5724 0903                              l5580 0A6D  
                            l5548 0A13                              l5652 0C2E                              l5484 11BD  
                            l5820 0538                              l5726 0907                              l5574 0A5F  
                            l5654 0C36                              l4880 139A                              l4864 1F3C  
                            l4928 13EF                              l5728 090B                              l5736 091C  
                            l5568 0A44                              l5680 0CB4                              l5672 0CA8  
                            l5664 0C5D                              l5656 0C45                              l5840 0638  
                            l5832 05D8                              l5816 04F8                              l5808 04A4  
                            l4882 13A2                              l4890 13C1                              l4938 1417  
                            l5738 0935                              l5578 0A67                              l5682 0CFE  
                            l4884 13AA                              l4868 1F46                              l5588 0A80  
                            l5852 06FD                              l5844 0678                              l5828 0598  
                            l5772 03F7                              ?_isr 0070                              l4886 13B2  
                            l4878 1392                              l5686 0D24                              l5694 0D64  
                            l5872 07CF                              l5856 0742                              l5848 06BD  
                            l5874 0779                              l5786 041F                              l5876 07D5  
                            l5788 0422                              u5105 1434                              u5025 13F4  
                            u5045 140D                              u6005 11EB                              u5205 1E21  
                            u5215 1F6E                              u5065 141A                              u5305 1600  
                            u5155 1486                              u5315 160C                              u5235 1E3B  
                            u5180 1279                              u5175 125B                              u6135 09C9  
                            u5505 0B24                              u6065 12C4                              u6145 09DC  
                            u5275 15E0                              u5445 0AFE                              u5605 1796  
                            u5535 0B37                              u5615 17A6                              u6175 09FB  
                            u5295 15EC                              u6095 1193                              u5625 17C6  
                            u6265 0A50                              u6505 0C8D                              u6425 0C14  
                            u5475 0B11                              u5635 17D5                              u5715 08B1  
                            u6515 0CBD                              u5645 17DF                              u5725 08B7  
                            u5805 16DB                              u6525 0CD2                              u6605 0411  
                            u6535 0CE6                              u5905 07EA                              u6705 06DB  
                            u6625 0482                              u5755 08CD                              u5835 170D  
                            u6555 0D03                              u6395 0BEC                              u6715 06FB  
                            u6635 04A2                              u5940 14FF                              u5925 14DE  
                            u4965 1F47                              u5765 08D3                              u5685 0879  
                            u6645 0516                              u5935 14F1                              u4975 1F4E  
                            u5695 0889                              u6495 0C76                              u6743 07C8  
                            u6735 07B0                              u6655 0536                              u5865 172C  
                            u6585 09AD                              u6665 05B6                              u6675 05D6  
                            u6685 0656                              u5895 07E4                              u6695 0676  
                   _star_tactiles 1444                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 0138                              _mod1 0520                              _mod2 0320  
                            _mod3 03A0                              _mod4 0420                              _mod5 2576  
                            _main 03DC                      ___ftpack@arg 00A0                      ___ftpack@exp 00A3  
                            fsr0h 0005                              fsr1h 0007                              fsr0l 0004  
                            indf0 0000                              fsr1l 0006                              map@x 00D5  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
        __end_of_setFeedbackState 1E30                              start 031E                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 1D7D      updateSwitchTap@tapCntDivisor 00BC  
    __end_of_setSwitchBypassState 129A                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 00C3                      ___ftmul@sign 00C4                   __end_of_InitApp 1F33  
               ??_restoreLEDState 00A0                      ___fttol@exp1 0144                             ??_map 00E4  
                    ___fttol@lval 0140                             ??_isr 003A                   _switchBypass_up 01E7  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 162D                             ?_main 0070  
                 __end_of___awdiv 138B                   __end_of___ftadd 0B9B                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 1800                   __end_of___ftneg 1D96                   __end_of___ftmul 08F4  
                 ___awdiv@divisor 0070                   __end_of___fttol 1757                             i1l121 0119  
                           i1l151 029D                             i1l154 0312                             i1l159 0319  
                           i1l702 122D                             i1l703 124F                   ___awdiv@counter 0075  
             _ConfigureOscillator 1D75                      ?_init_timer0 0070                      ?_init_timer2 0070  
             ___lmul@multiplicand 00A4                   _switchTap_state 0165                 ??_setLongTapState 00A2  
                   ___awtoft@sign 00AD                             _myBuf 04A0                     ___ftpack@sign 00A4  
                           _timer 004D                    ?_star_tactiles 0070                             main@i 0151  
                __end_ofi1___lmul 1F03                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                   __end_of_wait_ms 1FC5  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
     __end_of_read_bottom_tactile 1208                __size_ofi1___aldiv 0082                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
           set_subdivision@scalar 014E              ?_ConfigureOscillator 0070                _getCurrentLEDState 1DFD  
              _updateSwitchBypass 09BA           __end_of_updateSwitchTap 0D7E                   __initialization 0320  
         _updateSwitchBypassState 07FF                      __end_of_main 07D8           __size_of_InitializeTaps 0026  
             i1___lmul@multiplier 0070               ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070  
                  __CFG_LPBOR$OFF 0000                   _set_subdivision 08F4                            ??_main 01D4  
                   ___fttol@sign1 013F           __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 0840  
                  _feedback_timer 0126                    _feedback_state 0066                    _feedback_start 0054  
                ?_set_leds_bottom 00A0                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0072               _baseline_delay_time 0058              ??_getCurrentLEDState 00A0  
                __end_of___awtoft 1EA9                  __end_of___ftpack 1444              ??_updateSwitchBypass 00B6  
                          i1l1377 153A                            i1l4302 137E                            i1l4320 1227  
                          i1l4312 120F                            i1l4306 1386                            i1l4314 1215  
                          i1l4410 0223                            i1l4402 020B                            i1l4316 121B  
                          i1l4324 1233                            i1l4340 00A2                            i1l4318 1221  
                          i1l4430 026F                            i1l4422 024C                            i1l4414 0238  
                          i1l4406 0214                            i1l4280 134F                            i1l4432 0272  
                          i1l4290 1357                            i1l4274 1344                            i1l4442 029F  
                          i1l4426 0257                            i1l4418 0242                            i1l4354 0106  
                          i1l4346 00BD                            i1l4292 1363                            i1l4460 0314  
                          i1l4436 0275                            i1l4438 028F                            i1l4390 01C2  
                          i1l4374 0168                            i1l3832 1EDC                            i1l4464 0318  
                          i1l6136 027B                            i1l4448 02E4                            i1l4384 01A6  
                          i1l4376 0178                            i1l4298 1375                            i1l6138 1238  
                          i1l4394 01CF                            i1l4378 017A                            i1l3836 1EE6  
                          i1l4388 01B3                            i1l3862 155B                            i1l3854 154B  
                          i1l3880 15A2                            i1l3872 1589                            i1l3864 1569  
                          i1l3876 1594                            u431_25 135A                            u351_25 155E  
                          _PMADRH 0192                            u440_25 0099                            _PMADRL 0191  
                          u433_25 1364                            u353_25 156A                            u345_25 1EE7  
                          _PMDATH 0194                            u434_25 136E                            u354_25 157E  
                          u346_25 1EEE                            u442_25 00B4                            _PMDATL 0193  
                          u451_23 0196                            u435_25 1376                            u355_25 158A  
                          _PMCON2 0196                            u444_23 00D6                            u460_25 0298  
                          u462_25 02F5                            u455_23 01F7                            u463_25 030D  
                          u448_23 0132                            u459_25 021D                    _debounce_count 01C6  
                  _debounce_mode1 01C8                    _debounce_mode2 01CA                         ??_InitApp 00A0  
           ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 12EA                    __CFG_PWRTE$OFF 0000  
                          ___lmul 1F33                         ??___aldiv 00A8                         ??___awdiv 0074  
                       ??___ftadd 00AE                    __CFG_STVREN$ON 0000                         ??___ftdiv 00CB  
                       ??___ftneg 00A3                         ??___ftmul 00BB                         ??___fttol 00EB  
                __end_of_init_adc 1DA0                  __end_of_init_pwm 1180         __size_of_showBootSequence 002B  
                ___awdiv@quotient 0077                      __pdataBANK10 0520                 __end_ofi1___aldiv 15AB  
           ___ftmul@f3_as_product 00C0                      __pdataBIGRAM 236E           FLASH_ReadWord@flashAddr 00A0  
                    __pdataCOMMON 007D              _getSwitchBypassState 1D79                         ??_wait_ms 00AE  
            _setSwitchBypassState 1250                   ??_star_tactiles 00B2            setLongTapState@f_state 00A0  
         __end_of__initialization 03D8                        ___ftadd@f1 00A8                        ___ftadd@f2 00AB  
               _bypass_turning_on 0137                        ___ftdiv@f1 00C8                        ___ftdiv@f2 00C5  
                      ___ftdiv@f3 00D0                    _top_push_state 0064         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00A0               _switchBypass_toggle 01D2                        ___awtoft@c 00A8  
         __end_of_set_subdivision 09BA                        ___ftmul@f1 00B5                        ___ftmul@f2 00B8  
                      ___fttol@f1 00E7                  ?_updateSwitchTap 0070                      ?_update_mode 0070  
                  __pcstackCOMMON 0070                      __pidataBANK0 1DD8                      __pidataBANK2 1DC7  
                    __pidataBANK3 1000                      __pidataBANK5 12EA                      __pidataBANK6 10C0  
                    __pidataBANK7 1082                      __pidataBANK8 1044                  _initSwitchBypass 1DB8  
                       ?i1___lmul 0070                   _doubleTap_state 0053                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                 i1___aldiv@divisor 0020                 i1___aldiv@counter 0028  
                      __pbssBANK0 0045                        __pbssBANK2 0120                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK9 04A0                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1E4A                   __CFG_VCAPEN$OFF 0000                        _delayArray 236E  
               ?_setFeedbackState 00A0                        _delay_time 005C                  _long_press_limit 0062  
    __size_of_setDoublePressState 0030                        _delayfound 01CC                        __pmaintext 03DC  
              ??_setFeedbackState 00A2                    _InitializeTaps 07D8                           ?___lmul 00A0  
                      __pintentry 0004                        _blink_rate 007D                     ??_adc_convert 00A2  
                  ___lmul@product 00A8                   _setLongTapState 1E30                         ?___awtoft 00A8  
                       ?___ftpack 00A0                        ??i1___lmul 0078                    _FLASH_ReadWord 1E67  
 __end_of_updateSwitchBypassState 0800                       modulation@x 002E                       modulation@y 0032  
                 _debounce_bypass 01C4                     _suspend_blink 0056                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 1F03            __end_of_InitializeTaps 07FE  
                   ?_set_leds_top 00A0                        _knob1_prev 0157                        _knob2_prev 0159  
                      _knob3_prev 015B                        _knob4_prev 015D                        _knob5_prev 015F  
                ?_set_subdivision 0145                           ___aldiv 15AB                           ___awdiv 133A  
                 __size_of___lmul 0030                           ___ftadd 0AA5                           ___ftdiv 1757  
                         ___ftneg 1D8D                        _knob_1_pos 0128                        _knob_2_pos 012A  
                         ___ftmul 0840                        _knob_3_pos 012C                           ___fttol 16B8  
                      _knob_4_pos 012E                        _knob_5_pos 0130                 _switchTap_pressed 0057  
                _showBootSequence 1EA9            __end_of_FLASH_ReadWord 1E87                        ??___awtoft 00AB  
                      ??___ftpack 00A5                InitializeTaps@itap 00A1                           __ptext1 1180  
                         __ptext2 0B9B                           __ptext3 1E30                           __ptext4 15AB  
                         __ptext5 09BA                           __ptext6 1E16                           __ptext7 1F63  
                         __ptext8 1EA9                           __ptext9 1444            ??_getSwitchBypassState 00A2  
                       _T2CONbits 001C                  _adjust_sub_delay 01C0                      __size_of_map 008B  
                    __size_of_isr 031A            ??_setSwitchBypassState 00B4               __end_of_adc_convert 1DFD  
                ___aldiv@dividend 00A4                           _wait_ms 1F93           __end_of_restoreLEDState 1E67  
                         clrloop0 1DAD              end_of_initialization 03D8                        _modulation 10FE  
                         init_ram 1DA0                        ??_init_adc 00A0                           initloop 1DA1  
                      ??_init_pwm 00A0      updateSwitchBypassState@state 00A0                _solidring_tactiles 0800  
                   _longTap_timer 0132                     _longTap_state 0067                     _longTap_start 0055  
                  ??_set_leds_top 00A4                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1E4A            i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 00A2              __size_of_update_mode 0041                   ?_FLASH_ReadWord 00A0  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
            star_tactiles@reverse 00B4                        _test_timer 01BC                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         i1___aldiv 1529  
         setFeedbackState@f_state 00A0              ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 1D79  
     __size_of_getCurrentLEDState 0019                        map@out_max 00E1                        map@out_min 00DE  
     __size_of_updateSwitchBypass 00EB          __end_of_initSwitchBypass 1DC7                       _CCP1CONbits 0293  
                     ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 0134                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 00BF                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                     __pidataBANK10 1006  
                  __end_of___lmul 1F63                     __pidataBIGRAM 0D7E                       _adc_convert 1DEA  
                   __pidataCOMMON 07FE                    _switchTap_down 013D             i1___lmul@multiplicand 0074  
               __size_ofi1___lmul 002F               start_initialization 0320             _bottomTactile_pressed 0136  
             _setDoublePressState 1F63                        ?i1___aldiv 0020                       __end_of_map 16B8  
                     __end_of_isr 031E                  ?_restoreLEDState 0070             __end_of_star_tactiles 14B3  
              _adjusted_pot_value 01C2                       ?_modulation 002E              ?_setDoublePressState 00B2  
                ?_setLongTapState 00A0                          ??___lmul 00A8                       __pdataBANK0 0058  
                     __pdataBANK2 0155                       __pdataBANK3 01E3                       __pdataBANK5 02A0  
                     __pdataBANK6 0320                       __pdataBANK7 03A0                       __pdataBANK8 0420  
              i1___aldiv@dividend 0024                     _tap_iteration 0161          __size_of_updateSwitchTap 01E3  
       __size_of_setFeedbackState 001A                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0              __end_of_set_leds_top 13DF  
                       ___latbits 0003                _switchBypass_state 0069                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 013F                     __pcstackBANK3 01D4  
                   _delay_counter 0124                  i1___lmul@product 0078          __end_of_showBootSequence 1ED4  
        ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043  
                        ?_InitApp 0070                         __pnvBANK3 01E9             ??_setDoublePressState 00B4  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 00A0  
               ??_set_leds_bottom 00A2                _currentBypassState 0164                          ?___awdiv 0070  
                        ?___ftadd 00A8                          ?___ftdiv 00C5                          ?___ftneg 00A0  
                        ?___ftmul 00B5                          ?___fttol 00E7                       _blink_delay 0155  
             __size_of_modulation 0041                       _blink_state 0163                        _B25kLength 01E9  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC               _read_bottom_tactile 11C1  
             __end_of_init_timer0 1D84               __end_of_init_timer2 1D8D                         _mod_value 01CE  
                       _mod_timer 0120                  ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0  
                 ___aldiv@counter 00A9                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 01E5  
                       clear_ram0 1DAC                         _tap_timer 0049                         _tap_total 01B8  
                   set_leds_top@x 00A0                  ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6                         map@in_max 00DB  
                       map@in_min 00D8                         _sub_timer 0045                        _ADCON0bits 009D  
                        i1___lmul 1ED4                        _ADCON1bits 009E                         main@i_391 0153  
        __size_of_set_subdivision 00C6                  set_subdivision@x 0145                  set_subdivision@y 0147  
       __size_of_read_top_tactile 0050     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
               ??_updateSwitchTap 00B6                 ___lmul@multiplier 00A0                 _ReadSavedSettings 14B3  
               ?_initSwitchBypass 0070                    wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070  
                  wait_ms@timemsl 00AE       setSwitchBypassState@f_state 00B2                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                       _mode1_state 0139                     ??_update_mode 00A0  
                     _mode2_state 013A             ??_read_bottom_tactile 00B2               updateSwitchTap@iCnt 00BE  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D                 star_tactiles@iLed 00B5  
                __size_of___aldiv 0082                  __size_of___awdiv 0051                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 00A0                  __size_of___ftneg 0009  
                __size_of___ftmul 00B4                  __size_of___fttol 009F                          ___awtoft 1E87  
           __size_of_set_leds_top 0054                          ___ftpack 13DF                          _map$2157 00E4  
          _preset_programmning_on 013C            star_tactiles@iLed_1453 00B7                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 00A0                  _setFeedbackState 1E16  
                     _init_timer0 1D7D                       _init_timer2 1D84                _delay_time_changed 01E3  
      __end_of_getCurrentLEDState 1E16        __end_of_updateSwitchBypass 0AA5                          __ptext10 0800  
                        __ptext11 1E4A                          __ptext20 0840                          __ptext12 1DFD  
                        __ptext21 1757                          __ptext13 08F4                          __ptext30 1DEA  
                        __ptext22 0AA5                          __ptext14 16B8                          __ptext31 14B3  
                        __ptext23 13DF                          __ptext15 1E87                          __ptext40 1D96  
                        __ptext32 138B                          __ptext24 1DB8                          __ptext16 129A  
                        __ptext41 1D75                          __ptext33 1FC5                          __ptext25 1250  
                        __ptext17 11C1                          __ptext34 1E67                          __ptext26 1F93  
                        __ptext18 162D                          __ptext43 1208                          __ptext35 07D8  
                        __ptext27 1F33                          __ptext19 1D8D                          __ptext44 10FE  
                        __ptext36 1F03                          __ptext28 07FF                          __ptext45 1ED4  
                        __ptext37 113F                          __ptext29 1D79                          __ptext46 1529  
                        __ptext38 1D84                          __ptext47 133A                          __ptext39 1D7D  
       __end_of_ReadSavedSettings 1529                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 01B4                      ??_modulation 0036                       _mod_counter 0051  
                        _init_adc 1D96                     __size_of_main 03FC                          _init_pwm 113F  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 138B                          _num_taps 0068  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 11C1  
              __end_of_modulation 113F                        _INTCONbits 000B                       _tap_history 01A0  
               ??_set_subdivision 0149                          intlevel1 0000                   _set_leds_bottom 1FC5  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 001D                ??_showBootSequence 00B9                   _reset_sub_delay 01D0  
                      _OSCCONbits 0099                      _preset_blink 013B                    i1_set_leds_top 1208  
__size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F          __size_of_setLongTapState 001A  
                _read_top_tactile 129A                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 1F93                      _CCP10CONbits 061F                 _bottom_push_state 0060  
          __end_ofi1_set_leds_top 1250  
