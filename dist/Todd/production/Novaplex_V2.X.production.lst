

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Jan 07 21:06:22 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,merge=1,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	text36,local,class=CODE,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,merge=1,delta=2
    75                           	psect	text39,local,class=CODE,merge=1,delta=2
    76                           	psect	text40,local,class=CODE,merge=1,delta=2
    77                           	psect	text41,local,class=CODE,merge=1,delta=2
    78                           	psect	text42,local,class=CODE,merge=1,delta=2
    79                           	psect	text43,local,class=CODE,merge=1,delta=2
    80                           	psect	text44,local,class=CODE,merge=1,delta=2
    81                           	psect	text45,local,class=CODE,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,merge=1,delta=2
    83                           	psect	text47,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text49,local,class=CODE,merge=1,delta=2
    86                           	psect	text50,local,class=CODE,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x920,80
    91                           	dabs	1,0x8A0,80
    92                           	dabs	1,0x820,80
    93                           	dabs	1,0x7A0,80
    94                           	dabs	1,0x720,80
    95                           	dabs	1,0x6A0,80
    96                           	dabs	1,0x648,40
    97                           	dabs	1,0x23E8,0,_delayArray
    98                           	dabs	1,0x7E,2
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0099                     	;# 
   142  009A                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  011D                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  018F                     	;# 
   159  0190                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020D                     	;# 
   193  020F                     	;# 
   194  0210                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021E                     	;# 
   216  021F                     	;# 
   217  028C                     	;# 
   218  028D                     	;# 
   219  0291                     	;# 
   220  0291                     	;# 
   221  0292                     	;# 
   222  0293                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  029F                     	;# 
   230  030C                     	;# 
   231  030D                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  040C                     	;# 
   250  040D                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  048D                     	;# 
   268  0491                     	;# 
   269  0491                     	;# 
   270  0492                     	;# 
   271  0492                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0494                     	;# 
   276  0494                     	;# 
   277  0495                     	;# 
   278  0495                     	;# 
   279  0496                     	;# 
   280  0496                     	;# 
   281  0497                     	;# 
   282  0497                     	;# 
   283  0595                     	;# 
   284  0596                     	;# 
   285  0597                     	;# 
   286  059C                     	;# 
   287  059D                     	;# 
   288  059E                     	;# 
   289  0611                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061D                     	;# 
   306  061D                     	;# 
   307  061E                     	;# 
   308  061F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  008F                     	;# 
   354  0090                     	;# 
   355  0091                     	;# 
   356  0092                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0110                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018F                     	;# 
   380  0190                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  020F                     	;# 
   415  0210                     	;# 
   416  0211                     	;# 
   417  0211                     	;# 
   418  0212                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0213                     	;# 
   422  0214                     	;# 
   423  0214                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0216                     	;# 
   428  0216                     	;# 
   429  0217                     	;# 
   430  0217                     	;# 
   431  0219                     	;# 
   432  021A                     	;# 
   433  021B                     	;# 
   434  021C                     	;# 
   435  021D                     	;# 
   436  021E                     	;# 
   437  021F                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  0291                     	;# 
   441  0291                     	;# 
   442  0292                     	;# 
   443  0293                     	;# 
   444  0298                     	;# 
   445  0298                     	;# 
   446  0299                     	;# 
   447  029A                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  029F                     	;# 
   451  030C                     	;# 
   452  030D                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  031C                     	;# 
   462  031C                     	;# 
   463  031D                     	;# 
   464  031E                     	;# 
   465  038C                     	;# 
   466  038D                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  040C                     	;# 
   471  040D                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  048D                     	;# 
   489  0491                     	;# 
   490  0491                     	;# 
   491  0492                     	;# 
   492  0492                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0494                     	;# 
   497  0494                     	;# 
   498  0495                     	;# 
   499  0495                     	;# 
   500  0496                     	;# 
   501  0496                     	;# 
   502  0497                     	;# 
   503  0497                     	;# 
   504  0595                     	;# 
   505  0596                     	;# 
   506  0597                     	;# 
   507  059C                     	;# 
   508  059D                     	;# 
   509  059E                     	;# 
   510  0611                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  0614                     	;# 
   516  0615                     	;# 
   517  0616                     	;# 
   518  0617                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  061A                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061D                     	;# 
   527  061D                     	;# 
   528  061E                     	;# 
   529  061F                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0116                     	;# 
   596  0117                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018F                     	;# 
   601  0190                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0197                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  020D                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0219                     	;# 
   653  021A                     	;# 
   654  021B                     	;# 
   655  021C                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029D                     	;# 
   670  029E                     	;# 
   671  029F                     	;# 
   672  030C                     	;# 
   673  030D                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  031C                     	;# 
   683  031C                     	;# 
   684  031D                     	;# 
   685  031E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  040C                     	;# 
   692  040D                     	;# 
   693  0411                     	;# 
   694  0411                     	;# 
   695  0412                     	;# 
   696  0413                     	;# 
   697  0414                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  0418                     	;# 
   702  0418                     	;# 
   703  0419                     	;# 
   704  041A                     	;# 
   705  041B                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  048D                     	;# 
   710  0491                     	;# 
   711  0491                     	;# 
   712  0492                     	;# 
   713  0492                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0494                     	;# 
   718  0494                     	;# 
   719  0495                     	;# 
   720  0495                     	;# 
   721  0496                     	;# 
   722  0496                     	;# 
   723  0497                     	;# 
   724  0497                     	;# 
   725  0595                     	;# 
   726  0596                     	;# 
   727  0597                     	;# 
   728  059C                     	;# 
   729  059D                     	;# 
   730  059E                     	;# 
   731  0611                     	;# 
   732  0611                     	;# 
   733  0612                     	;# 
   734  0613                     	;# 
   735  0614                     	;# 
   736  0614                     	;# 
   737  0615                     	;# 
   738  0616                     	;# 
   739  0617                     	;# 
   740  0617                     	;# 
   741  0618                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061A                     	;# 
   745  061B                     	;# 
   746  061C                     	;# 
   747  061D                     	;# 
   748  061D                     	;# 
   749  061E                     	;# 
   750  061F                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0016                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001C                     	;# 
   792  008C                     	;# 
   793  008D                     	;# 
   794  008E                     	;# 
   795  008F                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0095                     	;# 
   802  0096                     	;# 
   803  0097                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0110                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018F                     	;# 
   822  0190                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0197                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020D                     	;# 
   856  020F                     	;# 
   857  0210                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0216                     	;# 
   871  0217                     	;# 
   872  0217                     	;# 
   873  0219                     	;# 
   874  021A                     	;# 
   875  021B                     	;# 
   876  021C                     	;# 
   877  021D                     	;# 
   878  021E                     	;# 
   879  021F                     	;# 
   880  028C                     	;# 
   881  028D                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029D                     	;# 
   891  029E                     	;# 
   892  029F                     	;# 
   893  030C                     	;# 
   894  030D                     	;# 
   895  0311                     	;# 
   896  0311                     	;# 
   897  0312                     	;# 
   898  0313                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  040C                     	;# 
   913  040D                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  048D                     	;# 
   931  0491                     	;# 
   932  0491                     	;# 
   933  0492                     	;# 
   934  0492                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0494                     	;# 
   939  0494                     	;# 
   940  0495                     	;# 
   941  0495                     	;# 
   942  0496                     	;# 
   943  0496                     	;# 
   944  0497                     	;# 
   945  0497                     	;# 
   946  0595                     	;# 
   947  0596                     	;# 
   948  0597                     	;# 
   949  059C                     	;# 
   950  059D                     	;# 
   951  059E                     	;# 
   952  0611                     	;# 
   953  0611                     	;# 
   954  0612                     	;# 
   955  0613                     	;# 
   956  0614                     	;# 
   957  0614                     	;# 
   958  0615                     	;# 
   959  0616                     	;# 
   960  0617                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061D                     	;# 
   969  061D                     	;# 
   970  061E                     	;# 
   971  061F                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018F                     	;# 
  1043  0190                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020D                     	;# 
  1077  020F                     	;# 
  1078  0210                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  028C                     	;# 
  1102  028D                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029D                     	;# 
  1112  029E                     	;# 
  1113  029F                     	;# 
  1114  030C                     	;# 
  1115  030D                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  031C                     	;# 
  1125  031C                     	;# 
  1126  031D                     	;# 
  1127  031E                     	;# 
  1128  038C                     	;# 
  1129  038D                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  040C                     	;# 
  1134  040D                     	;# 
  1135  0411                     	;# 
  1136  0411                     	;# 
  1137  0412                     	;# 
  1138  0413                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  0418                     	;# 
  1145  0419                     	;# 
  1146  041A                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  048D                     	;# 
  1152  0491                     	;# 
  1153  0491                     	;# 
  1154  0492                     	;# 
  1155  0492                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0494                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0495                     	;# 
  1163  0496                     	;# 
  1164  0496                     	;# 
  1165  0497                     	;# 
  1166  0497                     	;# 
  1167  0595                     	;# 
  1168  0596                     	;# 
  1169  0597                     	;# 
  1170  059C                     	;# 
  1171  059D                     	;# 
  1172  059E                     	;# 
  1173  0611                     	;# 
  1174  0611                     	;# 
  1175  0612                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0614                     	;# 
  1179  0615                     	;# 
  1180  0616                     	;# 
  1181  0617                     	;# 
  1182  0617                     	;# 
  1183  0618                     	;# 
  1184  0619                     	;# 
  1185  061A                     	;# 
  1186  061A                     	;# 
  1187  061B                     	;# 
  1188  061C                     	;# 
  1189  061D                     	;# 
  1190  061D                     	;# 
  1191  061E                     	;# 
  1192  061F                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  000F                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0116                     	;# 
  1259  0117                     	;# 
  1260  011D                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018F                     	;# 
  1264  0190                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0197                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  020D                     	;# 
  1298  020F                     	;# 
  1299  0210                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0298                     	;# 
  1329  0298                     	;# 
  1330  0299                     	;# 
  1331  029A                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0318                     	;# 
  1342  0318                     	;# 
  1343  0319                     	;# 
  1344  031A                     	;# 
  1345  031C                     	;# 
  1346  031C                     	;# 
  1347  031D                     	;# 
  1348  031E                     	;# 
  1349  038C                     	;# 
  1350  038D                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  040C                     	;# 
  1355  040D                     	;# 
  1356  0411                     	;# 
  1357  0411                     	;# 
  1358  0412                     	;# 
  1359  0413                     	;# 
  1360  0414                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  0418                     	;# 
  1365  0418                     	;# 
  1366  0419                     	;# 
  1367  041A                     	;# 
  1368  041B                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  048D                     	;# 
  1373  0491                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0492                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0494                     	;# 
  1381  0494                     	;# 
  1382  0495                     	;# 
  1383  0495                     	;# 
  1384  0496                     	;# 
  1385  0496                     	;# 
  1386  0497                     	;# 
  1387  0497                     	;# 
  1388  0595                     	;# 
  1389  0596                     	;# 
  1390  0597                     	;# 
  1391  059C                     	;# 
  1392  059D                     	;# 
  1393  059E                     	;# 
  1394  0611                     	;# 
  1395  0611                     	;# 
  1396  0612                     	;# 
  1397  0613                     	;# 
  1398  0614                     	;# 
  1399  0614                     	;# 
  1400  0615                     	;# 
  1401  0616                     	;# 
  1402  0617                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  061A                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061D                     	;# 
  1411  061D                     	;# 
  1412  061E                     	;# 
  1413  061F                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  000F                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0016                     	;# 
  1448  0016                     	;# 
  1449  0017                     	;# 
  1450  0018                     	;# 
  1451  0019                     	;# 
  1452  001A                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  008F                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0094                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  010F                     	;# 
  1478  0110                     	;# 
  1479  0116                     	;# 
  1480  0117                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0197                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  020D                     	;# 
  1519  020F                     	;# 
  1520  0210                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  029F                     	;# 
  1556  030C                     	;# 
  1557  030D                     	;# 
  1558  0311                     	;# 
  1559  0311                     	;# 
  1560  0312                     	;# 
  1561  0313                     	;# 
  1562  0318                     	;# 
  1563  0318                     	;# 
  1564  0319                     	;# 
  1565  031A                     	;# 
  1566  031C                     	;# 
  1567  031C                     	;# 
  1568  031D                     	;# 
  1569  031E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  040C                     	;# 
  1576  040D                     	;# 
  1577  0411                     	;# 
  1578  0411                     	;# 
  1579  0412                     	;# 
  1580  0413                     	;# 
  1581  0414                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  0418                     	;# 
  1586  0418                     	;# 
  1587  0419                     	;# 
  1588  041A                     	;# 
  1589  041B                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  048D                     	;# 
  1594  0491                     	;# 
  1595  0491                     	;# 
  1596  0492                     	;# 
  1597  0492                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0494                     	;# 
  1602  0494                     	;# 
  1603  0495                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  0496                     	;# 
  1607  0497                     	;# 
  1608  0497                     	;# 
  1609  0595                     	;# 
  1610  0596                     	;# 
  1611  0597                     	;# 
  1612  059C                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  0611                     	;# 
  1616  0611                     	;# 
  1617  0612                     	;# 
  1618  0613                     	;# 
  1619  0614                     	;# 
  1620  0614                     	;# 
  1621  0615                     	;# 
  1622  0616                     	;# 
  1623  0617                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  061A                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061D                     	;# 
  1632  061D                     	;# 
  1633  061E                     	;# 
  1634  061F                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  000F                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0013                     	;# 
  1666  0014                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  008F                     	;# 
  1680  0090                     	;# 
  1681  0091                     	;# 
  1682  0092                     	;# 
  1683  0093                     	;# 
  1684  0094                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  010C                     	;# 
  1696  010D                     	;# 
  1697  010E                     	;# 
  1698  010F                     	;# 
  1699  0110                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020D                     	;# 
  1740  020F                     	;# 
  1741  0210                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0219                     	;# 
  1758  021A                     	;# 
  1759  021B                     	;# 
  1760  021C                     	;# 
  1761  021D                     	;# 
  1762  021E                     	;# 
  1763  021F                     	;# 
  1764  028C                     	;# 
  1765  028D                     	;# 
  1766  0291                     	;# 
  1767  0291                     	;# 
  1768  0292                     	;# 
  1769  0293                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  030C                     	;# 
  1778  030D                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0318                     	;# 
  1784  0318                     	;# 
  1785  0319                     	;# 
  1786  031A                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  040C                     	;# 
  1797  040D                     	;# 
  1798  0411                     	;# 
  1799  0411                     	;# 
  1800  0412                     	;# 
  1801  0413                     	;# 
  1802  0414                     	;# 
  1803  0415                     	;# 
  1804  0416                     	;# 
  1805  0417                     	;# 
  1806  0418                     	;# 
  1807  0418                     	;# 
  1808  0419                     	;# 
  1809  041A                     	;# 
  1810  041B                     	;# 
  1811  041C                     	;# 
  1812  041D                     	;# 
  1813  041E                     	;# 
  1814  048D                     	;# 
  1815  0491                     	;# 
  1816  0491                     	;# 
  1817  0492                     	;# 
  1818  0492                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0494                     	;# 
  1823  0494                     	;# 
  1824  0495                     	;# 
  1825  0495                     	;# 
  1826  0496                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0497                     	;# 
  1830  0595                     	;# 
  1831  0596                     	;# 
  1832  0597                     	;# 
  1833  059C                     	;# 
  1834  059D                     	;# 
  1835  059E                     	;# 
  1836  0611                     	;# 
  1837  0611                     	;# 
  1838  0612                     	;# 
  1839  0613                     	;# 
  1840  0614                     	;# 
  1841  0614                     	;# 
  1842  0615                     	;# 
  1843  0616                     	;# 
  1844  0617                     	;# 
  1845  0617                     	;# 
  1846  0618                     	;# 
  1847  0619                     	;# 
  1848  061A                     	;# 
  1849  061A                     	;# 
  1850  061B                     	;# 
  1851  061C                     	;# 
  1852  061D                     	;# 
  1853  061D                     	;# 
  1854  061E                     	;# 
  1855  061F                     	;# 
  1856  0FE4                     	;# 
  1857  0FE5                     	;# 
  1858  0FE6                     	;# 
  1859  0FE7                     	;# 
  1860  0FE8                     	;# 
  1861  0FE9                     	;# 
  1862  0FEA                     	;# 
  1863  0FEB                     	;# 
  1864  0FED                     	;# 
  1865  0FEE                     	;# 
  1866  0FEF                     	;# 
  1867  0000                     	;# 
  1868  0001                     	;# 
  1869  0002                     	;# 
  1870  0003                     	;# 
  1871  0004                     	;# 
  1872  0005                     	;# 
  1873  0006                     	;# 
  1874  0007                     	;# 
  1875  0008                     	;# 
  1876  0009                     	;# 
  1877  000A                     	;# 
  1878  000B                     	;# 
  1879  000C                     	;# 
  1880  000D                     	;# 
  1881  000E                     	;# 
  1882  000F                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0013                     	;# 
  1887  0014                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  008F                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  010F                     	;# 
  1920  0110                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018F                     	;# 
  1927  0190                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0197                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  020D                     	;# 
  1961  020F                     	;# 
  1962  0210                     	;# 
  1963  0211                     	;# 
  1964  0211                     	;# 
  1965  0212                     	;# 
  1966  0212                     	;# 
  1967  0213                     	;# 
  1968  0213                     	;# 
  1969  0214                     	;# 
  1970  0214                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0216                     	;# 
  1975  0216                     	;# 
  1976  0217                     	;# 
  1977  0217                     	;# 
  1978  0219                     	;# 
  1979  021A                     	;# 
  1980  021B                     	;# 
  1981  021C                     	;# 
  1982  021D                     	;# 
  1983  021E                     	;# 
  1984  021F                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  0291                     	;# 
  1988  0291                     	;# 
  1989  0292                     	;# 
  1990  0293                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029D                     	;# 
  1996  029E                     	;# 
  1997  029F                     	;# 
  1998  030C                     	;# 
  1999  030D                     	;# 
  2000  0311                     	;# 
  2001  0311                     	;# 
  2002  0312                     	;# 
  2003  0313                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  038C                     	;# 
  2013  038D                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  040C                     	;# 
  2018  040D                     	;# 
  2019  0411                     	;# 
  2020  0411                     	;# 
  2021  0412                     	;# 
  2022  0413                     	;# 
  2023  0414                     	;# 
  2024  0415                     	;# 
  2025  0416                     	;# 
  2026  0417                     	;# 
  2027  0418                     	;# 
  2028  0418                     	;# 
  2029  0419                     	;# 
  2030  041A                     	;# 
  2031  041B                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  048D                     	;# 
  2036  0491                     	;# 
  2037  0491                     	;# 
  2038  0492                     	;# 
  2039  0492                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0494                     	;# 
  2044  0494                     	;# 
  2045  0495                     	;# 
  2046  0495                     	;# 
  2047  0496                     	;# 
  2048  0496                     	;# 
  2049  0497                     	;# 
  2050  0497                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0597                     	;# 
  2054  059C                     	;# 
  2055  059D                     	;# 
  2056  059E                     	;# 
  2057  0611                     	;# 
  2058  0611                     	;# 
  2059  0612                     	;# 
  2060  0613                     	;# 
  2061  0614                     	;# 
  2062  0614                     	;# 
  2063  0615                     	;# 
  2064  0616                     	;# 
  2065  0617                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  061A                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061D                     	;# 
  2074  061D                     	;# 
  2075  061E                     	;# 
  2076  061F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  000F                     	;# 
  2104  0010                     	;# 
  2105  0011                     	;# 
  2106  0012                     	;# 
  2107  0013                     	;# 
  2108  0014                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  008F                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0093                     	;# 
  2126  0094                     	;# 
  2127  0095                     	;# 
  2128  0096                     	;# 
  2129  0097                     	;# 
  2130  0099                     	;# 
  2131  009A                     	;# 
  2132  009B                     	;# 
  2133  009B                     	;# 
  2134  009C                     	;# 
  2135  009D                     	;# 
  2136  009E                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  010F                     	;# 
  2141  0110                     	;# 
  2142  0116                     	;# 
  2143  0117                     	;# 
  2144  011D                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018F                     	;# 
  2148  0190                     	;# 
  2149  0191                     	;# 
  2150  0191                     	;# 
  2151  0192                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0197                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  020D                     	;# 
  2182  020F                     	;# 
  2183  0210                     	;# 
  2184  0211                     	;# 
  2185  0211                     	;# 
  2186  0212                     	;# 
  2187  0212                     	;# 
  2188  0213                     	;# 
  2189  0213                     	;# 
  2190  0214                     	;# 
  2191  0214                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0216                     	;# 
  2196  0216                     	;# 
  2197  0217                     	;# 
  2198  0217                     	;# 
  2199  0219                     	;# 
  2200  021A                     	;# 
  2201  021B                     	;# 
  2202  021C                     	;# 
  2203  021D                     	;# 
  2204  021E                     	;# 
  2205  021F                     	;# 
  2206  028C                     	;# 
  2207  028D                     	;# 
  2208  0291                     	;# 
  2209  0291                     	;# 
  2210  0292                     	;# 
  2211  0293                     	;# 
  2212  0298                     	;# 
  2213  0298                     	;# 
  2214  0299                     	;# 
  2215  029A                     	;# 
  2216  029D                     	;# 
  2217  029E                     	;# 
  2218  029F                     	;# 
  2219  030C                     	;# 
  2220  030D                     	;# 
  2221  0311                     	;# 
  2222  0311                     	;# 
  2223  0312                     	;# 
  2224  0313                     	;# 
  2225  0318                     	;# 
  2226  0318                     	;# 
  2227  0319                     	;# 
  2228  031A                     	;# 
  2229  031C                     	;# 
  2230  031C                     	;# 
  2231  031D                     	;# 
  2232  031E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  040C                     	;# 
  2239  040D                     	;# 
  2240  0411                     	;# 
  2241  0411                     	;# 
  2242  0412                     	;# 
  2243  0413                     	;# 
  2244  0414                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  0418                     	;# 
  2249  0418                     	;# 
  2250  0419                     	;# 
  2251  041A                     	;# 
  2252  041B                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  048D                     	;# 
  2257  0491                     	;# 
  2258  0491                     	;# 
  2259  0492                     	;# 
  2260  0492                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0494                     	;# 
  2266  0495                     	;# 
  2267  0495                     	;# 
  2268  0496                     	;# 
  2269  0496                     	;# 
  2270  0497                     	;# 
  2271  0497                     	;# 
  2272  0595                     	;# 
  2273  0596                     	;# 
  2274  0597                     	;# 
  2275  059C                     	;# 
  2276  059D                     	;# 
  2277  059E                     	;# 
  2278  0611                     	;# 
  2279  0611                     	;# 
  2280  0612                     	;# 
  2281  0613                     	;# 
  2282  0614                     	;# 
  2283  0614                     	;# 
  2284  0615                     	;# 
  2285  0616                     	;# 
  2286  0617                     	;# 
  2287  0617                     	;# 
  2288  0618                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061A                     	;# 
  2292  061B                     	;# 
  2293  061C                     	;# 
  2294  061D                     	;# 
  2295  061D                     	;# 
  2296  061E                     	;# 
  2297  061F                     	;# 
  2298  0FE4                     	;# 
  2299  0FE5                     	;# 
  2300  0FE6                     	;# 
  2301  0FE7                     	;# 
  2302  0FE8                     	;# 
  2303  0FE9                     	;# 
  2304  0FEA                     	;# 
  2305  0FEB                     	;# 
  2306  0FED                     	;# 
  2307  0FEE                     	;# 
  2308  0FEF                     	;# 
  2309  0000                     	;# 
  2310  0001                     	;# 
  2311  0002                     	;# 
  2312  0003                     	;# 
  2313  0004                     	;# 
  2314  0005                     	;# 
  2315  0006                     	;# 
  2316  0007                     	;# 
  2317  0008                     	;# 
  2318  0009                     	;# 
  2319  000A                     	;# 
  2320  000B                     	;# 
  2321  000C                     	;# 
  2322  000D                     	;# 
  2323  000E                     	;# 
  2324  000F                     	;# 
  2325  0010                     	;# 
  2326  0011                     	;# 
  2327  0012                     	;# 
  2328  0013                     	;# 
  2329  0014                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  008F                     	;# 
  2343  0090                     	;# 
  2344  0091                     	;# 
  2345  0092                     	;# 
  2346  0093                     	;# 
  2347  0094                     	;# 
  2348  0095                     	;# 
  2349  0096                     	;# 
  2350  0097                     	;# 
  2351  0099                     	;# 
  2352  009A                     	;# 
  2353  009B                     	;# 
  2354  009B                     	;# 
  2355  009C                     	;# 
  2356  009D                     	;# 
  2357  009E                     	;# 
  2358  010C                     	;# 
  2359  010D                     	;# 
  2360  010E                     	;# 
  2361  010F                     	;# 
  2362  0110                     	;# 
  2363  0116                     	;# 
  2364  0117                     	;# 
  2365  011D                     	;# 
  2366  018C                     	;# 
  2367  018D                     	;# 
  2368  018F                     	;# 
  2369  0190                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020D                     	;# 
  2403  020F                     	;# 
  2404  0210                     	;# 
  2405  0211                     	;# 
  2406  0211                     	;# 
  2407  0212                     	;# 
  2408  0212                     	;# 
  2409  0213                     	;# 
  2410  0213                     	;# 
  2411  0214                     	;# 
  2412  0214                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0216                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0217                     	;# 
  2420  0219                     	;# 
  2421  021A                     	;# 
  2422  021B                     	;# 
  2423  021C                     	;# 
  2424  021D                     	;# 
  2425  021E                     	;# 
  2426  021F                     	;# 
  2427  028C                     	;# 
  2428  028D                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0298                     	;# 
  2434  0298                     	;# 
  2435  0299                     	;# 
  2436  029A                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  0311                     	;# 
  2443  0311                     	;# 
  2444  0312                     	;# 
  2445  0313                     	;# 
  2446  0318                     	;# 
  2447  0318                     	;# 
  2448  0319                     	;# 
  2449  031A                     	;# 
  2450  031C                     	;# 
  2451  031C                     	;# 
  2452  031D                     	;# 
  2453  031E                     	;# 
  2454  038C                     	;# 
  2455  038D                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  040C                     	;# 
  2460  040D                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  048D                     	;# 
  2478  0491                     	;# 
  2479  0491                     	;# 
  2480  0492                     	;# 
  2481  0492                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0494                     	;# 
  2486  0494                     	;# 
  2487  0495                     	;# 
  2488  0495                     	;# 
  2489  0496                     	;# 
  2490  0496                     	;# 
  2491  0497                     	;# 
  2492  0497                     	;# 
  2493  0595                     	;# 
  2494  0596                     	;# 
  2495  0597                     	;# 
  2496  059C                     	;# 
  2497  059D                     	;# 
  2498  059E                     	;# 
  2499  0611                     	;# 
  2500  0611                     	;# 
  2501  0612                     	;# 
  2502  0613                     	;# 
  2503  0614                     	;# 
  2504  0614                     	;# 
  2505  0615                     	;# 
  2506  0616                     	;# 
  2507  0617                     	;# 
  2508  0617                     	;# 
  2509  0618                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061A                     	;# 
  2513  061B                     	;# 
  2514  061C                     	;# 
  2515  061D                     	;# 
  2516  061D                     	;# 
  2517  061E                     	;# 
  2518  061F                     	;# 
  2519  0FE4                     	;# 
  2520  0FE5                     	;# 
  2521  0FE6                     	;# 
  2522  0FE7                     	;# 
  2523  0FE8                     	;# 
  2524  0FE9                     	;# 
  2525  0FEA                     	;# 
  2526  0FEB                     	;# 
  2527  0FED                     	;# 
  2528  0FEE                     	;# 
  2529  0FEF                     	;# 
  2530  0000                     	;# 
  2531  0001                     	;# 
  2532  0002                     	;# 
  2533  0003                     	;# 
  2534  0004                     	;# 
  2535  0005                     	;# 
  2536  0006                     	;# 
  2537  0007                     	;# 
  2538  0008                     	;# 
  2539  0009                     	;# 
  2540  000A                     	;# 
  2541  000B                     	;# 
  2542  000C                     	;# 
  2543  000D                     	;# 
  2544  000E                     	;# 
  2545  000F                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0016                     	;# 
  2553  0016                     	;# 
  2554  0017                     	;# 
  2555  0018                     	;# 
  2556  0019                     	;# 
  2557  001A                     	;# 
  2558  001B                     	;# 
  2559  001C                     	;# 
  2560  008C                     	;# 
  2561  008D                     	;# 
  2562  008E                     	;# 
  2563  008F                     	;# 
  2564  0090                     	;# 
  2565  0091                     	;# 
  2566  0092                     	;# 
  2567  0093                     	;# 
  2568  0094                     	;# 
  2569  0095                     	;# 
  2570  0096                     	;# 
  2571  0097                     	;# 
  2572  0099                     	;# 
  2573  009A                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  010C                     	;# 
  2580  010D                     	;# 
  2581  010E                     	;# 
  2582  010F                     	;# 
  2583  0110                     	;# 
  2584  0116                     	;# 
  2585  0117                     	;# 
  2586  011D                     	;# 
  2587  018C                     	;# 
  2588  018D                     	;# 
  2589  018F                     	;# 
  2590  0190                     	;# 
  2591  0191                     	;# 
  2592  0191                     	;# 
  2593  0192                     	;# 
  2594  0193                     	;# 
  2595  0193                     	;# 
  2596  0194                     	;# 
  2597  0195                     	;# 
  2598  0196                     	;# 
  2599  0197                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  020D                     	;# 
  2624  020F                     	;# 
  2625  0210                     	;# 
  2626  0211                     	;# 
  2627  0211                     	;# 
  2628  0212                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0213                     	;# 
  2632  0214                     	;# 
  2633  0214                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  0219                     	;# 
  2642  021A                     	;# 
  2643  021B                     	;# 
  2644  021C                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  0291                     	;# 
  2651  0291                     	;# 
  2652  0292                     	;# 
  2653  0293                     	;# 
  2654  0298                     	;# 
  2655  0298                     	;# 
  2656  0299                     	;# 
  2657  029A                     	;# 
  2658  029D                     	;# 
  2659  029E                     	;# 
  2660  029F                     	;# 
  2661  030C                     	;# 
  2662  030D                     	;# 
  2663  0311                     	;# 
  2664  0311                     	;# 
  2665  0312                     	;# 
  2666  0313                     	;# 
  2667  0318                     	;# 
  2668  0318                     	;# 
  2669  0319                     	;# 
  2670  031A                     	;# 
  2671  031C                     	;# 
  2672  031C                     	;# 
  2673  031D                     	;# 
  2674  031E                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  040C                     	;# 
  2681  040D                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  048D                     	;# 
  2699  0491                     	;# 
  2700  0491                     	;# 
  2701  0492                     	;# 
  2702  0492                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0494                     	;# 
  2707  0494                     	;# 
  2708  0495                     	;# 
  2709  0495                     	;# 
  2710  0496                     	;# 
  2711  0496                     	;# 
  2712  0497                     	;# 
  2713  0497                     	;# 
  2714  0595                     	;# 
  2715  0596                     	;# 
  2716  0597                     	;# 
  2717  059C                     	;# 
  2718  059D                     	;# 
  2719  059E                     	;# 
  2720  0611                     	;# 
  2721  0611                     	;# 
  2722  0612                     	;# 
  2723  0613                     	;# 
  2724  0614                     	;# 
  2725  0614                     	;# 
  2726  0615                     	;# 
  2727  0616                     	;# 
  2728  0617                     	;# 
  2729  0617                     	;# 
  2730  0618                     	;# 
  2731  0619                     	;# 
  2732  061A                     	;# 
  2733  061A                     	;# 
  2734  061B                     	;# 
  2735  061C                     	;# 
  2736  061D                     	;# 
  2737  061D                     	;# 
  2738  061E                     	;# 
  2739  061F                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;# 
  2751  0000                     	;# 
  2752  0001                     	;# 
  2753  0002                     	;# 
  2754  0003                     	;# 
  2755  0004                     	;# 
  2756  0005                     	;# 
  2757  0006                     	;# 
  2758  0007                     	;# 
  2759  0008                     	;# 
  2760  0009                     	;# 
  2761  000A                     	;# 
  2762  000B                     	;# 
  2763  000C                     	;# 
  2764  000D                     	;# 
  2765  000E                     	;# 
  2766  000F                     	;# 
  2767  0010                     	;# 
  2768  0011                     	;# 
  2769  0012                     	;# 
  2770  0013                     	;# 
  2771  0014                     	;# 
  2772  0015                     	;# 
  2773  0016                     	;# 
  2774  0016                     	;# 
  2775  0017                     	;# 
  2776  0018                     	;# 
  2777  0019                     	;# 
  2778  001A                     	;# 
  2779  001B                     	;# 
  2780  001C                     	;# 
  2781  008C                     	;# 
  2782  008D                     	;# 
  2783  008E                     	;# 
  2784  008F                     	;# 
  2785  0090                     	;# 
  2786  0091                     	;# 
  2787  0092                     	;# 
  2788  0093                     	;# 
  2789  0094                     	;# 
  2790  0095                     	;# 
  2791  0096                     	;# 
  2792  0097                     	;# 
  2793  0099                     	;# 
  2794  009A                     	;# 
  2795  009B                     	;# 
  2796  009B                     	;# 
  2797  009C                     	;# 
  2798  009D                     	;# 
  2799  009E                     	;# 
  2800  010C                     	;# 
  2801  010D                     	;# 
  2802  010E                     	;# 
  2803  010F                     	;# 
  2804  0110                     	;# 
  2805  0116                     	;# 
  2806  0117                     	;# 
  2807  011D                     	;# 
  2808  018C                     	;# 
  2809  018D                     	;# 
  2810  018F                     	;# 
  2811  0190                     	;# 
  2812  0191                     	;# 
  2813  0191                     	;# 
  2814  0192                     	;# 
  2815  0193                     	;# 
  2816  0193                     	;# 
  2817  0194                     	;# 
  2818  0195                     	;# 
  2819  0196                     	;# 
  2820  0197                     	;# 
  2821  0199                     	;# 
  2822  0199                     	;# 
  2823  0199                     	;# 
  2824  019A                     	;# 
  2825  019A                     	;# 
  2826  019A                     	;# 
  2827  019B                     	;# 
  2828  019B                     	;# 
  2829  019B                     	;# 
  2830  019B                     	;# 
  2831  019B                     	;# 
  2832  019C                     	;# 
  2833  019C                     	;# 
  2834  019C                     	;# 
  2835  019D                     	;# 
  2836  019D                     	;# 
  2837  019D                     	;# 
  2838  019E                     	;# 
  2839  019E                     	;# 
  2840  019E                     	;# 
  2841  019F                     	;# 
  2842  019F                     	;# 
  2843  019F                     	;# 
  2844  020D                     	;# 
  2845  020F                     	;# 
  2846  0210                     	;# 
  2847  0211                     	;# 
  2848  0211                     	;# 
  2849  0212                     	;# 
  2850  0212                     	;# 
  2851  0213                     	;# 
  2852  0213                     	;# 
  2853  0214                     	;# 
  2854  0214                     	;# 
  2855  0215                     	;# 
  2856  0215                     	;# 
  2857  0215                     	;# 
  2858  0216                     	;# 
  2859  0216                     	;# 
  2860  0217                     	;# 
  2861  0217                     	;# 
  2862  0219                     	;# 
  2863  021A                     	;# 
  2864  021B                     	;# 
  2865  021C                     	;# 
  2866  021D                     	;# 
  2867  021E                     	;# 
  2868  021F                     	;# 
  2869  028C                     	;# 
  2870  028D                     	;# 
  2871  0291                     	;# 
  2872  0291                     	;# 
  2873  0292                     	;# 
  2874  0293                     	;# 
  2875  0298                     	;# 
  2876  0298                     	;# 
  2877  0299                     	;# 
  2878  029A                     	;# 
  2879  029D                     	;# 
  2880  029E                     	;# 
  2881  029F                     	;# 
  2882  030C                     	;# 
  2883  030D                     	;# 
  2884  0311                     	;# 
  2885  0311                     	;# 
  2886  0312                     	;# 
  2887  0313                     	;# 
  2888  0318                     	;# 
  2889  0318                     	;# 
  2890  0319                     	;# 
  2891  031A                     	;# 
  2892  031C                     	;# 
  2893  031C                     	;# 
  2894  031D                     	;# 
  2895  031E                     	;# 
  2896  038C                     	;# 
  2897  038D                     	;# 
  2898  0394                     	;# 
  2899  0395                     	;# 
  2900  0396                     	;# 
  2901  040C                     	;# 
  2902  040D                     	;# 
  2903  0411                     	;# 
  2904  0411                     	;# 
  2905  0412                     	;# 
  2906  0413                     	;# 
  2907  0414                     	;# 
  2908  0415                     	;# 
  2909  0416                     	;# 
  2910  0417                     	;# 
  2911  0418                     	;# 
  2912  0418                     	;# 
  2913  0419                     	;# 
  2914  041A                     	;# 
  2915  041B                     	;# 
  2916  041C                     	;# 
  2917  041D                     	;# 
  2918  041E                     	;# 
  2919  048D                     	;# 
  2920  0491                     	;# 
  2921  0491                     	;# 
  2922  0492                     	;# 
  2923  0492                     	;# 
  2924  0493                     	;# 
  2925  0493                     	;# 
  2926  0493                     	;# 
  2927  0494                     	;# 
  2928  0494                     	;# 
  2929  0495                     	;# 
  2930  0495                     	;# 
  2931  0496                     	;# 
  2932  0496                     	;# 
  2933  0497                     	;# 
  2934  0497                     	;# 
  2935  0595                     	;# 
  2936  0596                     	;# 
  2937  0597                     	;# 
  2938  059C                     	;# 
  2939  059D                     	;# 
  2940  059E                     	;# 
  2941  0611                     	;# 
  2942  0611                     	;# 
  2943  0612                     	;# 
  2944  0613                     	;# 
  2945  0614                     	;# 
  2946  0614                     	;# 
  2947  0615                     	;# 
  2948  0616                     	;# 
  2949  0617                     	;# 
  2950  0617                     	;# 
  2951  0618                     	;# 
  2952  0619                     	;# 
  2953  061A                     	;# 
  2954  061A                     	;# 
  2955  061B                     	;# 
  2956  061C                     	;# 
  2957  061D                     	;# 
  2958  061D                     	;# 
  2959  061E                     	;# 
  2960  061F                     	;# 
  2961  0FE4                     	;# 
  2962  0FE5                     	;# 
  2963  0FE6                     	;# 
  2964  0FE7                     	;# 
  2965  0FE8                     	;# 
  2966  0FE9                     	;# 
  2967  0FEA                     	;# 
  2968  0FEB                     	;# 
  2969  0FED                     	;# 
  2970  0FEE                     	;# 
  2971  0FEF                     	;_delayArray
  2972                           
  2973                           	psect	idataCOMMON
  2974  0003                     __pidataCOMMON:	
  2975                           
  2976                           ;initializer for _blink_rate
  2977  0003  3414               	retlw	20
  2978                           
  2979                           	psect	idataBANK0
  2980  1CAC                     __pidataBANK0:	
  2981                           
  2982                           ;initializer for _baseline_delay_time
  2983  1CAC  34D0               	retlw	208
  2984  1CAD  3407               	retlw	7
  2985  1CAE  3400               	retlw	0
  2986  1CAF  3400               	retlw	0
  2987                           
  2988                           ;initializer for _delay_time
  2989  1CB0  34D0               	retlw	208
  2990  1CB1  3407               	retlw	7
  2991  1CB2  3400               	retlw	0
  2992  1CB3  3400               	retlw	0
  2993                           
  2994                           ;initializer for _bottom_push_state
  2995  1CB4  3406               	retlw	6
  2996  1CB5  3400               	retlw	0
  2997                           
  2998                           ;initializer for _long_press_limit
  2999  1CB6  34E8               	retlw	232
  3000  1CB7  3403               	retlw	3
  3001                           
  3002                           ;initializer for _top_push_state
  3003  1CB8  3406               	retlw	6
  3004  1CB9  3400               	retlw	0
  3005                           
  3006                           ;initializer for _longTap_state
  3007  1CBA  34FF               	retlw	255
  3008                           
  3009                           ;initializer for _num_taps
  3010  1CBB  3404               	retlw	4
  3011                           
  3012                           ;initializer for _presetChannel
  3013  1CBC  3401               	retlw	1
  3014                           
  3015                           ;initializer for _switchBypass_state
  3016  1CBD  34FF               	retlw	255
  3017                           
  3018                           	psect	idataBANK2
  3019  1C7F                     __pidataBANK2:	
  3020                           
  3021                           ;initializer for _knob1_prev
  3022  1C7F  34D0               	retlw	208
  3023  1C80  3407               	retlw	7
  3024                           
  3025                           ;initializer for _knob2_prev
  3026  1C81  34D0               	retlw	208
  3027  1C82  3407               	retlw	7
  3028                           
  3029                           ;initializer for _knob3_prev
  3030  1C83  34D0               	retlw	208
  3031  1C84  3407               	retlw	7
  3032                           
  3033                           ;initializer for _knob4_prev
  3034  1C85  34D0               	retlw	208
  3035  1C86  3407               	retlw	7
  3036                           
  3037                           ;initializer for _knob5_prev
  3038  1C87  34D0               	retlw	208
  3039  1C88  3407               	retlw	7
  3040                           
  3041                           ;initializer for _expressionChannel
  3042  1C89  3401               	retlw	1
  3043                           
  3044                           ;initializer for _feedback_state
  3045  1C8A  34FF               	retlw	255
  3046                           
  3047                           ;initializer for _presetModeCnst
  3048  1C8B  3401               	retlw	1
  3049                           
  3050                           ;initializer for _switchTap_state
  3051  1C8C  34FF               	retlw	255
  3052                           
  3053                           	psect	idataBANK3
  3054  1C9C                     __pidataBANK3:	
  3055                           
  3056                           ;initializer for _blink_delay
  3057  1C9C  3464               	retlw	100
  3058  1C9D  3400               	retlw	0
  3059                           
  3060                           ;initializer for _delay_time_changed
  3061  1C9E  3401               	retlw	1
  3062  1C9F  3400               	retlw	0
  3063                           
  3064                           ;initializer for _mod_delay_time
  3065  1CA0  34D0               	retlw	208
  3066  1CA1  3407               	retlw	7
  3067                           
  3068                           ;initializer for _switchBypass_up
  3069  1CA2  3401               	retlw	1
  3070  1CA3  3400               	retlw	0
  3071                           
  3072                           ;initializer for _symmetry
  3073  1CA4  34B4               	retlw	180
  3074  1CA5  3400               	retlw	0
  3075                           
  3076                           ;initializer for _tap_iteration
  3077  1CA6  3401               	retlw	1
  3078  1CA7  3400               	retlw	0
  3079                           
  3080                           ;initializer for _blink_state
  3081  1CA8  3401               	retlw	1
  3082                           
  3083                           ;initializer for _currentBypassState
  3084  1CA9  34FF               	retlw	255
  3085                           
  3086                           ;initializer for _expSwitchState
  3087  1CAA  34FF               	retlw	255
  3088                           
  3089                           ;initializer for _expressModeCnst
  3090  1CAB  3402               	retlw	2
  3091                           
  3092                           	psect	idataBANK4
  3093  1DB3                     __pidataBANK4:	
  3094                           
  3095                           ;initializer for _B25k
  3096  1DB3  34FF               	retlw	255
  3097  1DB4  34FF               	retlw	255
  3098  1DB5  34FF               	retlw	255
  3099  1DB6  34DF               	retlw	223
  3100  1DB7  34AE               	retlw	174
  3101  1DB8  348E               	retlw	142
  3102  1DB9  3478               	retlw	120
  3103  1DBA  3467               	retlw	103
  3104  1DBB  345B               	retlw	91
  3105  1DBC  3450               	retlw	80
  3106  1DBD  3448               	retlw	72
  3107  1DBE  3442               	retlw	66
  3108  1DBF  343C               	retlw	60
  3109  1DC0  3437               	retlw	55
  3110  1DC1  3433               	retlw	51
  3111  1DC2  3430               	retlw	48
  3112  1DC3  342D               	retlw	45
  3113  1DC4  342A               	retlw	42
  3114  1DC5  3427               	retlw	39
  3115  1DC6  3425               	retlw	37
  3116  1DC7  3423               	retlw	35
  3117  1DC8  3421               	retlw	33
  3118  1DC9  3420               	retlw	32
  3119  1DCA  341E               	retlw	30
  3120  1DCB  341D               	retlw	29
  3121  1DCC  341C               	retlw	28
  3122  1DCD  341B               	retlw	27
  3123  1DCE  341A               	retlw	26
  3124  1DCF  3419               	retlw	25
  3125  1DD0  3418               	retlw	24
  3126  1DD1  3417               	retlw	23
  3127  1DD2  3416               	retlw	22
  3128  1DD3  3415               	retlw	21
  3129  1DD4  3415               	retlw	21
  3130  1DD5  3414               	retlw	20
  3131  1DD6  3413               	retlw	19
  3132  1DD7  340F               	retlw	15
  3133  1DD8  340B               	retlw	11
  3134  1DD9  3407               	retlw	7
  3135  1DDA  3407               	retlw	7
  3136                           
  3137                           	psect	idataBANK6
  3138  1FC3                     __pidataBANK6:	
  3139                           
  3140                           ;initializer for _mod1
  3141  1FC3  3400               	retlw	0
  3142  1FC4  340A               	retlw	10
  3143  1FC5  3414               	retlw	20
  3144  1FC6  341E               	retlw	30
  3145  1FC7  3428               	retlw	40
  3146  1FC8  3432               	retlw	50
  3147  1FC9  343A               	retlw	58
  3148  1FCA  3442               	retlw	66
  3149  1FCB  344A               	retlw	74
  3150  1FCC  3450               	retlw	80
  3151  1FCD  3456               	retlw	86
  3152  1FCE  345B               	retlw	91
  3153  1FCF  345F               	retlw	95
  3154  1FD0  3461               	retlw	97
  3155  1FD1  3463               	retlw	99
  3156  1FD2  3464               	retlw	100
  3157  1FD3  3463               	retlw	99
  3158  1FD4  3461               	retlw	97
  3159  1FD5  345F               	retlw	95
  3160  1FD6  345B               	retlw	91
  3161  1FD7  3456               	retlw	86
  3162  1FD8  3450               	retlw	80
  3163  1FD9  344A               	retlw	74
  3164  1FDA  3442               	retlw	66
  3165  1FDB  343A               	retlw	58
  3166  1FDC  3432               	retlw	50
  3167  1FDD  3428               	retlw	40
  3168  1FDE  341E               	retlw	30
  3169  1FDF  3414               	retlw	20
  3170  1FE0  340A               	retlw	10
  3171  1FE1  3400               	retlw	0
  3172  1FE2  34F6               	retlw	-10
  3173  1FE3  34EC               	retlw	-20
  3174  1FE4  34E2               	retlw	-30
  3175  1FE5  34D8               	retlw	-40
  3176  1FE6  34CE               	retlw	-50
  3177  1FE7  34C6               	retlw	-58
  3178  1FE8  34BE               	retlw	-66
  3179  1FE9  34B6               	retlw	-74
  3180  1FEA  34B0               	retlw	-80
  3181  1FEB  34AA               	retlw	-86
  3182  1FEC  34A5               	retlw	-91
  3183  1FED  34A1               	retlw	-95
  3184  1FEE  349F               	retlw	-97
  3185  1FEF  349D               	retlw	-99
  3186  1FF0  349C               	retlw	-100
  3187  1FF1  349D               	retlw	-99
  3188  1FF2  349F               	retlw	-97
  3189  1FF3  34A1               	retlw	-95
  3190  1FF4  34A5               	retlw	-91
  3191  1FF5  34AA               	retlw	-86
  3192  1FF6  34B0               	retlw	-80
  3193  1FF7  34B6               	retlw	-74
  3194  1FF8  34BE               	retlw	-66
  3195  1FF9  34C6               	retlw	-58
  3196  1FFA  34CE               	retlw	-50
  3197  1FFB  34D8               	retlw	-40
  3198  1FFC  34E2               	retlw	-30
  3199  1FFD  34EC               	retlw	-20
  3200  1FFE  34F6               	retlw	-10
  3201  1FFF  3400               	retlw	0
  3202                           
  3203                           	psect	idataBANK7
  3204  1F86                     __pidataBANK7:	
  3205                           
  3206                           ;initializer for _mod2
  3207  1F86  3400               	retlw	0
  3208  1F87  34FD               	retlw	-3
  3209  1F88  34F9               	retlw	-7
  3210  1F89  34F6               	retlw	-10
  3211  1F8A  34F3               	retlw	-13
  3212  1F8B  34EF               	retlw	-17
  3213  1F8C  34EC               	retlw	-20
  3214  1F8D  34E9               	retlw	-23
  3215  1F8E  34E5               	retlw	-27
  3216  1F8F  34E2               	retlw	-30
  3217  1F90  34DF               	retlw	-33
  3218  1F91  34DB               	retlw	-37
  3219  1F92  34D8               	retlw	-40
  3220  1F93  34D5               	retlw	-43
  3221  1F94  34D1               	retlw	-47
  3222  1F95  34CE               	retlw	-50
  3223  1F96  34CB               	retlw	-53
  3224  1F97  34C7               	retlw	-57
  3225  1F98  34C4               	retlw	-60
  3226  1F99  34C1               	retlw	-63
  3227  1F9A  34BD               	retlw	-67
  3228  1F9B  34BA               	retlw	-70
  3229  1F9C  34B7               	retlw	-73
  3230  1F9D  34B3               	retlw	-77
  3231  1F9E  34B0               	retlw	-80
  3232  1F9F  34AD               	retlw	-83
  3233  1FA0  34A9               	retlw	-87
  3234  1FA1  34A6               	retlw	-90
  3235  1FA2  34A3               	retlw	-93
  3236  1FA3  349F               	retlw	-97
  3237  1FA4  349C               	retlw	-100
  3238  1FA5  3461               	retlw	97
  3239  1FA6  345D               	retlw	93
  3240  1FA7  345A               	retlw	90
  3241  1FA8  3457               	retlw	87
  3242  1FA9  3453               	retlw	83
  3243  1FAA  3450               	retlw	80
  3244  1FAB  344D               	retlw	77
  3245  1FAC  3449               	retlw	73
  3246  1FAD  3446               	retlw	70
  3247  1FAE  3443               	retlw	67
  3248  1FAF  343F               	retlw	63
  3249  1FB0  343C               	retlw	60
  3250  1FB1  3439               	retlw	57
  3251  1FB2  3435               	retlw	53
  3252  1FB3  3432               	retlw	50
  3253  1FB4  342F               	retlw	47
  3254  1FB5  342B               	retlw	43
  3255  1FB6  3428               	retlw	40
  3256  1FB7  3425               	retlw	37
  3257  1FB8  3421               	retlw	33
  3258  1FB9  341E               	retlw	30
  3259  1FBA  341B               	retlw	27
  3260  1FBB  3417               	retlw	23
  3261  1FBC  3414               	retlw	20
  3262  1FBD  3411               	retlw	17
  3263  1FBE  340D               	retlw	13
  3264  1FBF  340A               	retlw	10
  3265  1FC0  3407               	retlw	7
  3266  1FC1  3403               	retlw	3
  3267  1FC2  3400               	retlw	0
  3268                           
  3269                           	psect	idataBANK8
  3270  1F49                     __pidataBANK8:	
  3271                           
  3272                           ;initializer for _mod3
  3273  1F49  3400               	retlw	0
  3274  1F4A  3403               	retlw	3
  3275  1F4B  3407               	retlw	7
  3276  1F4C  340A               	retlw	10
  3277  1F4D  340D               	retlw	13
  3278  1F4E  3411               	retlw	17
  3279  1F4F  3414               	retlw	20
  3280  1F50  3417               	retlw	23
  3281  1F51  341B               	retlw	27
  3282  1F52  341E               	retlw	30
  3283  1F53  3421               	retlw	33
  3284  1F54  3425               	retlw	37
  3285  1F55  3428               	retlw	40
  3286  1F56  342B               	retlw	43
  3287  1F57  342F               	retlw	47
  3288  1F58  3432               	retlw	50
  3289  1F59  3435               	retlw	53
  3290  1F5A  3439               	retlw	57
  3291  1F5B  343C               	retlw	60
  3292  1F5C  343F               	retlw	63
  3293  1F5D  3443               	retlw	67
  3294  1F5E  3446               	retlw	70
  3295  1F5F  3449               	retlw	73
  3296  1F60  344D               	retlw	77
  3297  1F61  3450               	retlw	80
  3298  1F62  3453               	retlw	83
  3299  1F63  3457               	retlw	87
  3300  1F64  345A               	retlw	90
  3301  1F65  345D               	retlw	93
  3302  1F66  3461               	retlw	97
  3303  1F67  3464               	retlw	100
  3304  1F68  349F               	retlw	-97
  3305  1F69  34A3               	retlw	-93
  3306  1F6A  34A6               	retlw	-90
  3307  1F6B  34A9               	retlw	-87
  3308  1F6C  34AD               	retlw	-83
  3309  1F6D  34B0               	retlw	-80
  3310  1F6E  34B3               	retlw	-77
  3311  1F6F  34B7               	retlw	-73
  3312  1F70  34BA               	retlw	-70
  3313  1F71  34BD               	retlw	-67
  3314  1F72  34C1               	retlw	-63
  3315  1F73  34C4               	retlw	-60
  3316  1F74  34C7               	retlw	-57
  3317  1F75  34CB               	retlw	-53
  3318  1F76  34CE               	retlw	-50
  3319  1F77  34D1               	retlw	-47
  3320  1F78  34D5               	retlw	-43
  3321  1F79  34D8               	retlw	-40
  3322  1F7A  34DB               	retlw	-37
  3323  1F7B  34DF               	retlw	-33
  3324  1F7C  34E2               	retlw	-30
  3325  1F7D  34E5               	retlw	-27
  3326  1F7E  34E9               	retlw	-23
  3327  1F7F  34EC               	retlw	-20
  3328  1F80  34EF               	retlw	-17
  3329  1F81  34F3               	retlw	-13
  3330  1F82  34F6               	retlw	-10
  3331  1F83  34F9               	retlw	-7
  3332  1F84  34FD               	retlw	-3
  3333  1F85  3400               	retlw	0
  3334                           
  3335                           	psect	idataBIGRAM
  3336  03DB                     __pidataBIGRAM:	
  3337                           
  3338                           ;initializer for _delayArray
  3339  03DB  3422               	retlw	34
  3340  03DC  3408               	retlw	8
  3341  03DD  34FC               	retlw	252
  3342  03DE  3407               	retlw	7
  3343  03DF  34D8               	retlw	216
  3344  03E0  3407               	retlw	7
  3345  03E1  34B5               	retlw	181
  3346  03E2  3407               	retlw	7
  3347  03E3  3493               	retlw	147
  3348  03E4  3407               	retlw	7
  3349  03E5  3472               	retlw	114
  3350  03E6  3407               	retlw	7
  3351  03E7  3452               	retlw	82
  3352  03E8  3407               	retlw	7
  3353  03E9  3434               	retlw	52
  3354  03EA  3407               	retlw	7
  3355  03EB  3416               	retlw	22
  3356  03EC  3407               	retlw	7
  3357  03ED  34F9               	retlw	249
  3358  03EE  3406               	retlw	6
  3359  03EF  34DD               	retlw	221
  3360  03F0  3406               	retlw	6
  3361  03F1  34C2               	retlw	194
  3362  03F2  3406               	retlw	6
  3363  03F3  34A8               	retlw	168
  3364  03F4  3406               	retlw	6
  3365  03F5  348F               	retlw	143
  3366  03F6  3406               	retlw	6
  3367  03F7  3476               	retlw	118
  3368  03F8  3406               	retlw	6
  3369  03F9  345E               	retlw	94
  3370  03FA  3406               	retlw	6
  3371  03FB  3447               	retlw	71
  3372  03FC  3406               	retlw	6
  3373  03FD  3430               	retlw	48
  3374  03FE  3406               	retlw	6
  3375  03FF  341A               	retlw	26
  3376  0400  3406               	retlw	6
  3377  0401  3405               	retlw	5
  3378  0402  3406               	retlw	6
  3379  0403  34F0               	retlw	240
  3380  0404  3405               	retlw	5
  3381  0405  34DC               	retlw	220
  3382  0406  3405               	retlw	5
  3383  0407  34C8               	retlw	200
  3384  0408  3405               	retlw	5
  3385  0409  34B5               	retlw	181
  3386  040A  3405               	retlw	5
  3387  040B  34A3               	retlw	163
  3388  040C  3405               	retlw	5
  3389  040D  3490               	retlw	144
  3390  040E  3405               	retlw	5
  3391  040F  347F               	retlw	127
  3392  0410  3405               	retlw	5
  3393  0411  346D               	retlw	109
  3394  0412  3405               	retlw	5
  3395  0413  345C               	retlw	92
  3396  0414  3405               	retlw	5
  3397  0415  344C               	retlw	76
  3398  0416  3405               	retlw	5
  3399  0417  343C               	retlw	60
  3400  0418  3405               	retlw	5
  3401  0419  342C               	retlw	44
  3402  041A  3405               	retlw	5
  3403  041B  341D               	retlw	29
  3404  041C  3405               	retlw	5
  3405  041D  340E               	retlw	14
  3406  041E  3405               	retlw	5
  3407  041F  34FF               	retlw	255
  3408  0420  3404               	retlw	4
  3409  0421  34F1               	retlw	241
  3410  0422  3404               	retlw	4
  3411  0423  34E2               	retlw	226
  3412  0424  3404               	retlw	4
  3413  0425  34D5               	retlw	213
  3414  0426  3404               	retlw	4
  3415  0427  34C7               	retlw	199
  3416  0428  3404               	retlw	4
  3417  0429  34BA               	retlw	186
  3418  042A  3404               	retlw	4
  3419  042B  34AD               	retlw	173
  3420  042C  3404               	retlw	4
  3421  042D  34A1               	retlw	161
  3422  042E  3404               	retlw	4
  3423  042F  3494               	retlw	148
  3424  0430  3404               	retlw	4
  3425  0431  3488               	retlw	136
  3426  0432  3404               	retlw	4
  3427  0433  347D               	retlw	125
  3428  0434  3404               	retlw	4
  3429  0435  3471               	retlw	113
  3430  0436  3404               	retlw	4
  3431  0437  3466               	retlw	102
  3432  0438  3404               	retlw	4
  3433  0439  345A               	retlw	90
  3434  043A  3404               	retlw	4
  3435  043B  3450               	retlw	80
  3436  043C  3404               	retlw	4
  3437  043D  3445               	retlw	69
  3438  043E  3404               	retlw	4
  3439  043F  343A               	retlw	58
  3440  0440  3404               	retlw	4
  3441  0441  3430               	retlw	48
  3442  0442  3404               	retlw	4
  3443  0443  3426               	retlw	38
  3444  0444  3404               	retlw	4
  3445  0445  341C               	retlw	28
  3446  0446  3404               	retlw	4
  3447  0447  3412               	retlw	18
  3448  0448  3404               	retlw	4
  3449  0449  3409               	retlw	9
  3450  044A  3404               	retlw	4
  3451  044B  34FF               	retlw	255
  3452  044C  3403               	retlw	3
  3453  044D  34F6               	retlw	246
  3454  044E  3403               	retlw	3
  3455  044F  34ED               	retlw	237
  3456  0450  3403               	retlw	3
  3457  0451  34E4               	retlw	228
  3458  0452  3403               	retlw	3
  3459  0453  34DC               	retlw	220
  3460  0454  3403               	retlw	3
  3461  0455  34D3               	retlw	211
  3462  0456  3403               	retlw	3
  3463  0457  34CB               	retlw	203
  3464  0458  3403               	retlw	3
  3465  0459  34C2               	retlw	194
  3466  045A  3403               	retlw	3
  3467  045B  34BA               	retlw	186
  3468  045C  3403               	retlw	3
  3469  045D  34B2               	retlw	178
  3470  045E  3403               	retlw	3
  3471  045F  34AA               	retlw	170
  3472  0460  3403               	retlw	3
  3473  0461  34A2               	retlw	162
  3474  0462  3403               	retlw	3
  3475  0463  349B               	retlw	155
  3476  0464  3403               	retlw	3
  3477  0465  3493               	retlw	147
  3478  0466  3403               	retlw	3
  3479  0467  348C               	retlw	140
  3480  0468  3403               	retlw	3
  3481  0469  3485               	retlw	133
  3482  046A  3403               	retlw	3
  3483  046B  347E               	retlw	126
  3484  046C  3403               	retlw	3
  3485  046D  3477               	retlw	119
  3486  046E  3403               	retlw	3
  3487  046F  3470               	retlw	112
  3488  0470  3403               	retlw	3
  3489  0471  3469               	retlw	105
  3490  0472  3403               	retlw	3
  3491  0473  3462               	retlw	98
  3492  0474  3403               	retlw	3
  3493  0475  345C               	retlw	92
  3494  0476  3403               	retlw	3
  3495  0477  3455               	retlw	85
  3496  0478  3403               	retlw	3
  3497  0479  344F               	retlw	79
  3498  047A  3403               	retlw	3
  3499  047B  3448               	retlw	72
  3500  047C  3403               	retlw	3
  3501  047D  3442               	retlw	66
  3502  047E  3403               	retlw	3
  3503  047F  343C               	retlw	60
  3504  0480  3403               	retlw	3
  3505  0481  3436               	retlw	54
  3506  0482  3403               	retlw	3
  3507  0483  3430               	retlw	48
  3508  0484  3403               	retlw	3
  3509  0485  342A               	retlw	42
  3510  0486  3403               	retlw	3
  3511  0487  3424               	retlw	36
  3512  0488  3403               	retlw	3
  3513  0489  341F               	retlw	31
  3514  048A  3403               	retlw	3
  3515  048B  3419               	retlw	25
  3516  048C  3403               	retlw	3
  3517  048D  3413               	retlw	19
  3518  048E  3403               	retlw	3
  3519  048F  340E               	retlw	14
  3520  0490  3403               	retlw	3
  3521  0491  3409               	retlw	9
  3522  0492  3403               	retlw	3
  3523  0493  3403               	retlw	3
  3524  0494  3403               	retlw	3
  3525  0495  34FE               	retlw	254
  3526  0496  3402               	retlw	2
  3527  0497  34F9               	retlw	249
  3528  0498  3402               	retlw	2
  3529  0499  34F4               	retlw	244
  3530  049A  3402               	retlw	2
  3531  049B  34EF               	retlw	239
  3532  049C  3402               	retlw	2
  3533  049D  34EA               	retlw	234
  3534  049E  3402               	retlw	2
  3535  049F  34E5               	retlw	229
  3536  04A0  3402               	retlw	2
  3537  04A1  34E0               	retlw	224
  3538  04A2  3402               	retlw	2
  3539  04A3  34DB               	retlw	219
  3540  04A4  3402               	retlw	2
  3541  04A5  34D7               	retlw	215
  3542  04A6  3402               	retlw	2
  3543  04A7  34D2               	retlw	210
  3544  04A8  3402               	retlw	2
  3545  04A9  34CD               	retlw	205
  3546  04AA  3402               	retlw	2
  3547  04AB  34C9               	retlw	201
  3548  04AC  3402               	retlw	2
  3549  04AD  34C4               	retlw	196
  3550  04AE  3402               	retlw	2
  3551  04AF  34C0               	retlw	192
  3552  04B0  3402               	retlw	2
  3553  04B1  34BC               	retlw	188
  3554  04B2  3402               	retlw	2
  3555  04B3  34B7               	retlw	183
  3556  04B4  3402               	retlw	2
  3557  04B5  34B3               	retlw	179
  3558  04B6  3402               	retlw	2
  3559  04B7  34AF               	retlw	175
  3560  04B8  3402               	retlw	2
  3561  04B9  34AB               	retlw	171
  3562  04BA  3402               	retlw	2
  3563  04BB  34A6               	retlw	166
  3564  04BC  3402               	retlw	2
  3565  04BD  34A2               	retlw	162
  3566  04BE  3402               	retlw	2
  3567  04BF  349E               	retlw	158
  3568  04C0  3402               	retlw	2
  3569  04C1  349A               	retlw	154
  3570  04C2  3402               	retlw	2
  3571  04C3  3497               	retlw	151
  3572  04C4  3402               	retlw	2
  3573  04C5  3493               	retlw	147
  3574  04C6  3402               	retlw	2
  3575  04C7  348F               	retlw	143
  3576  04C8  3402               	retlw	2
  3577  04C9  348B               	retlw	139
  3578  04CA  3402               	retlw	2
  3579  04CB  3487               	retlw	135
  3580  04CC  3402               	retlw	2
  3581  04CD  3484               	retlw	132
  3582  04CE  3402               	retlw	2
  3583  04CF  3480               	retlw	128
  3584  04D0  3402               	retlw	2
  3585  04D1  347C               	retlw	124
  3586  04D2  3402               	retlw	2
  3587  04D3  3479               	retlw	121
  3588  04D4  3402               	retlw	2
  3589  04D5  3475               	retlw	117
  3590  04D6  3402               	retlw	2
  3591  04D7  3472               	retlw	114
  3592  04D8  3402               	retlw	2
  3593  04D9  346E               	retlw	110
  3594  04DA  3402               	retlw	2
  3595  04DB  346B               	retlw	107
  3596  04DC  3402               	retlw	2
  3597  04DD  3467               	retlw	103
  3598  04DE  3402               	retlw	2
  3599  04DF  3464               	retlw	100
  3600  04E0  3402               	retlw	2
  3601  04E1  3461               	retlw	97
  3602  04E2  3402               	retlw	2
  3603  04E3  345E               	retlw	94
  3604  04E4  3402               	retlw	2
  3605  04E5  345A               	retlw	90
  3606  04E6  3402               	retlw	2
  3607  04E7  3457               	retlw	87
  3608  04E8  3402               	retlw	2
  3609  04E9  3454               	retlw	84
  3610  04EA  3402               	retlw	2
  3611  04EB  3451               	retlw	81
  3612  04EC  3402               	retlw	2
  3613  04ED  344E               	retlw	78
  3614  04EE  3402               	retlw	2
  3615  04EF  344B               	retlw	75
  3616  04F0  3402               	retlw	2
  3617  04F1  3448               	retlw	72
  3618  04F2  3402               	retlw	2
  3619  04F3  3445               	retlw	69
  3620  04F4  3402               	retlw	2
  3621  04F5  3442               	retlw	66
  3622  04F6  3402               	retlw	2
  3623  04F7  343F               	retlw	63
  3624  04F8  3402               	retlw	2
  3625  04F9  343C               	retlw	60
  3626  04FA  3402               	retlw	2
  3627  04FB  3439               	retlw	57
  3628  04FC  3402               	retlw	2
  3629  04FD  3436               	retlw	54
  3630  04FE  3402               	retlw	2
  3631  04FF  3433               	retlw	51
  3632  0500  3402               	retlw	2
  3633  0501  3430               	retlw	48
  3634  0502  3402               	retlw	2
  3635  0503  342E               	retlw	46
  3636  0504  3402               	retlw	2
  3637  0505  342B               	retlw	43
  3638  0506  3402               	retlw	2
  3639  0507  3428               	retlw	40
  3640  0508  3402               	retlw	2
  3641  0509  3425               	retlw	37
  3642  050A  3402               	retlw	2
  3643  050B  3423               	retlw	35
  3644  050C  3402               	retlw	2
  3645  050D  3420               	retlw	32
  3646  050E  3402               	retlw	2
  3647  050F  341E               	retlw	30
  3648  0510  3402               	retlw	2
  3649  0511  341B               	retlw	27
  3650  0512  3402               	retlw	2
  3651  0513  3418               	retlw	24
  3652  0514  3402               	retlw	2
  3653  0515  3416               	retlw	22
  3654  0516  3402               	retlw	2
  3655  0517  3413               	retlw	19
  3656  0518  3402               	retlw	2
  3657  0519  3411               	retlw	17
  3658  051A  3402               	retlw	2
  3659  051B  340E               	retlw	14
  3660  051C  3402               	retlw	2
  3661  051D  340C               	retlw	12
  3662  051E  3402               	retlw	2
  3663  051F  340A               	retlw	10
  3664  0520  3402               	retlw	2
  3665  0521  3407               	retlw	7
  3666  0522  3402               	retlw	2
  3667  0523  3405               	retlw	5
  3668  0524  3402               	retlw	2
  3669  0525  3402               	retlw	2
  3670  0526  3402               	retlw	2
  3671  0527  3400               	retlw	0
  3672  0528  3402               	retlw	2
  3673  0529  34FE               	retlw	254
  3674  052A  3401               	retlw	1
  3675  052B  34FB               	retlw	251
  3676  052C  3401               	retlw	1
  3677  052D  34F9               	retlw	249
  3678  052E  3401               	retlw	1
  3679  052F  34F7               	retlw	247
  3680  0530  3401               	retlw	1
  3681  0531  34F5               	retlw	245
  3682  0532  3401               	retlw	1
  3683  0533  34F2               	retlw	242
  3684  0534  3401               	retlw	1
  3685  0535  34F0               	retlw	240
  3686  0536  3401               	retlw	1
  3687  0537  34EE               	retlw	238
  3688  0538  3401               	retlw	1
  3689  0539  34EC               	retlw	236
  3690  053A  3401               	retlw	1
  3691  053B  34EA               	retlw	234
  3692  053C  3401               	retlw	1
  3693  053D  34E8               	retlw	232
  3694  053E  3401               	retlw	1
  3695  053F  34E6               	retlw	230
  3696  0540  3401               	retlw	1
  3697  0541  34E3               	retlw	227
  3698  0542  3401               	retlw	1
  3699  0543  34E1               	retlw	225
  3700  0544  3401               	retlw	1
  3701  0545  34DF               	retlw	223
  3702  0546  3401               	retlw	1
  3703  0547  34DD               	retlw	221
  3704  0548  3401               	retlw	1
  3705  0549  34DB               	retlw	219
  3706  054A  3401               	retlw	1
  3707  054B  34D9               	retlw	217
  3708  054C  3401               	retlw	1
  3709  054D  34D7               	retlw	215
  3710  054E  3401               	retlw	1
  3711  054F  34D5               	retlw	213
  3712  0550  3401               	retlw	1
  3713  0551  34D3               	retlw	211
  3714  0552  3401               	retlw	1
  3715  0553  34D2               	retlw	210
  3716  0554  3401               	retlw	1
  3717  0555  34D0               	retlw	208
  3718  0556  3401               	retlw	1
  3719  0557  34CE               	retlw	206
  3720  0558  3401               	retlw	1
  3721  0559  34CC               	retlw	204
  3722  055A  3401               	retlw	1
  3723  055B  34CA               	retlw	202
  3724  055C  3401               	retlw	1
  3725  055D  34C8               	retlw	200
  3726  055E  3401               	retlw	1
  3727  055F  34C6               	retlw	198
  3728  0560  3401               	retlw	1
  3729  0561  34C4               	retlw	196
  3730  0562  3401               	retlw	1
  3731  0563  34C3               	retlw	195
  3732  0564  3401               	retlw	1
  3733  0565  34C1               	retlw	193
  3734  0566  3401               	retlw	1
  3735  0567  34BF               	retlw	191
  3736  0568  3401               	retlw	1
  3737  0569  34BD               	retlw	189
  3738  056A  3401               	retlw	1
  3739  056B  34BC               	retlw	188
  3740  056C  3401               	retlw	1
  3741  056D  34BA               	retlw	186
  3742  056E  3401               	retlw	1
  3743  056F  34B8               	retlw	184
  3744  0570  3401               	retlw	1
  3745  0571  34B6               	retlw	182
  3746  0572  3401               	retlw	1
  3747  0573  34B5               	retlw	181
  3748  0574  3401               	retlw	1
  3749  0575  34B3               	retlw	179
  3750  0576  3401               	retlw	1
  3751  0577  34B1               	retlw	177
  3752  0578  3401               	retlw	1
  3753  0579  34B0               	retlw	176
  3754  057A  3401               	retlw	1
  3755  057B  34AE               	retlw	174
  3756  057C  3401               	retlw	1
  3757  057D  34AC               	retlw	172
  3758  057E  3401               	retlw	1
  3759  057F  34AB               	retlw	171
  3760  0580  3401               	retlw	1
  3761  0581  34A9               	retlw	169
  3762  0582  3401               	retlw	1
  3763  0583  34A8               	retlw	168
  3764  0584  3401               	retlw	1
  3765  0585  34A6               	retlw	166
  3766  0586  3401               	retlw	1
  3767  0587  34A4               	retlw	164
  3768  0588  3401               	retlw	1
  3769  0589  34A3               	retlw	163
  3770  058A  3401               	retlw	1
  3771  058B  34A1               	retlw	161
  3772  058C  3401               	retlw	1
  3773  058D  34A0               	retlw	160
  3774  058E  3401               	retlw	1
  3775  058F  349E               	retlw	158
  3776  0590  3401               	retlw	1
  3777  0591  349D               	retlw	157
  3778  0592  3401               	retlw	1
  3779  0593  349B               	retlw	155
  3780  0594  3401               	retlw	1
  3781  0595  349A               	retlw	154
  3782  0596  3401               	retlw	1
  3783  0597  3498               	retlw	152
  3784  0598  3401               	retlw	1
  3785  0599  3497               	retlw	151
  3786  059A  3401               	retlw	1
  3787  059B  3495               	retlw	149
  3788  059C  3401               	retlw	1
  3789  059D  3494               	retlw	148
  3790  059E  3401               	retlw	1
  3791  059F  3492               	retlw	146
  3792  05A0  3401               	retlw	1
  3793  05A1  3491               	retlw	145
  3794  05A2  3401               	retlw	1
  3795  05A3  3490               	retlw	144
  3796  05A4  3401               	retlw	1
  3797  05A5  348E               	retlw	142
  3798  05A6  3401               	retlw	1
  3799  05A7  348D               	retlw	141
  3800  05A8  3401               	retlw	1
  3801  05A9  348B               	retlw	139
  3802  05AA  3401               	retlw	1
  3803  05AB  348A               	retlw	138
  3804  05AC  3401               	retlw	1
  3805  05AD  3489               	retlw	137
  3806  05AE  3401               	retlw	1
  3807  05AF  3487               	retlw	135
  3808  05B0  3401               	retlw	1
  3809  05B1  3486               	retlw	134
  3810  05B2  3401               	retlw	1
  3811  05B3  3485               	retlw	133
  3812  05B4  3401               	retlw	1
  3813  05B5  3483               	retlw	131
  3814  05B6  3401               	retlw	1
  3815  05B7  3482               	retlw	130
  3816  05B8  3401               	retlw	1
  3817  05B9  3481               	retlw	129
  3818  05BA  3401               	retlw	1
  3819  05BB  347F               	retlw	127
  3820  05BC  3401               	retlw	1
  3821  05BD  347E               	retlw	126
  3822  05BE  3401               	retlw	1
  3823  05BF  347D               	retlw	125
  3824  05C0  3401               	retlw	1
  3825  05C1  347B               	retlw	123
  3826  05C2  3401               	retlw	1
  3827  05C3  347A               	retlw	122
  3828  05C4  3401               	retlw	1
  3829  05C5  3479               	retlw	121
  3830  05C6  3401               	retlw	1
  3831  05C7  3478               	retlw	120
  3832  05C8  3401               	retlw	1
  3833  05C9  3476               	retlw	118
  3834  05CA  3401               	retlw	1
  3835  05CB  3475               	retlw	117
  3836  05CC  3401               	retlw	1
  3837  05CD  3474               	retlw	116
  3838  05CE  3401               	retlw	1
  3839  05CF  3473               	retlw	115
  3840  05D0  3401               	retlw	1
  3841  05D1  3471               	retlw	113
  3842  05D2  3401               	retlw	1
  3843  05D3  3470               	retlw	112
  3844  05D4  3401               	retlw	1
  3845  05D5  346F               	retlw	111
  3846  05D6  3401               	retlw	1
  3847  05D7  346E               	retlw	110
  3848  05D8  3401               	retlw	1
  3849  05D9  3400               	retlw	0
  3850  05DA  3400               	retlw	0
  3851  05DB  3400               	retlw	0
  3852  05DC  3400               	retlw	0
  3853  05DD  3400               	retlw	0
  3854  05DE  3400               	retlw	0
  3855  05DF  3400               	retlw	0
  3856  05E0  3400               	retlw	0
  3857  05E1  3400               	retlw	0
  3858  05E2  3400               	retlw	0
  3859                           
  3860                           	psect	nvBANK3
  3861  01E9                     __pnvBANK3:	
  3862  01E9                     _B25kLength:	
  3863  01E9                     	ds	2
  3864  000B                     _INTCONbits	set	11
  3865  000C                     _PORTAbits	set	12
  3866  000E                     _PORTCbits	set	14
  3867  000F                     _PORTDbits	set	15
  3868  0010                     _PORTEbits	set	16
  3869  001B                     _PR2	set	27
  3870  001C                     _T2CONbits	set	28
  3871  009D                     _ADCON0bits	set	157
  3872  009E                     _ADCON1bits	set	158
  3873  009C                     _ADRESH	set	156
  3874  009B                     _ADRESL	set	155
  3875  0095                     _OPTION_REGbits	set	149
  3876  0099                     _OSCCONbits	set	153
  3877  008D                     _TRISBbits	set	141
  3878  008E                     _TRISCbits	set	142
  3879  008F                     _TRISDbits	set	143
  3880  0090                     _TRISEbits	set	144
  3881  011D                     _APFCONbits	set	285
  3882  010D                     _LATBbits	set	269
  3883  010F                     _LATDbits	set	271
  3884  0190                     _ANSELEbits	set	400
  3885  0192                     _PMADRH	set	402
  3886  0191                     _PMADRL	set	401
  3887  0195                     _PMCON1bits	set	405
  3888  0196                     _PMCON2	set	406
  3889  0194                     _PMDATH	set	404
  3890  0193                     _PMDATL	set	403
  3891  0291                     _CCPR1	set	657
  3892  0298                     _CCPR2	set	664
  3893  0293                     _CCP1CONbits	set	659
  3894  029A                     _CCP2CONbits	set	666
  3895  029D                     _CCPTMRS0	set	669
  3896  029E                     _CCPTMRS1	set	670
  3897  029F                     _CCPTMRS2	set	671
  3898  0311                     _CCPR3	set	785
  3899  0318                     _CCPR4	set	792
  3900  031C                     _CCPR5	set	796
  3901  0313                     _CCP3CONbits	set	787
  3902  031A                     _CCP4CONbits	set	794
  3903  031E                     _CCP5CONbits	set	798
  3904  030C                     _TRISFbits	set	780
  3905  030D                     _TRISGbits	set	781
  3906  038C                     _LATFbits	set	908
  3907  038D                     _LATGbits	set	909
  3908  040C                     _ANSELFbits	set	1036
  3909  061A                     _CCPR9	set	1562
  3910  061F                     _CCP10CONbits	set	1567
  3911  0613                     _CCP6CONbits	set	1555
  3912  0616                     _CCP7CONbits	set	1558
  3913  0619                     _CCP8CONbits	set	1561
  3914  061C                     _CCP9CONbits	set	1564
  3915                           
  3916                           ; #config settings
  3917  0000                     
  3918                           	psect	cinit
  3919  0322                     start_initialization:	
  3920  0322                     __initialization:		;BIGRAM
  3921                           
  3922                           ; Clear objects allocated to BANK0
  3923  0322  3045               	movlw	low __pbssBANK0
  3924  0323  0084               	movwf	4
  3925  0324  3000               	movlw	high __pbssBANK0
  3926  0325  0085               	movwf	5
  3927  0326  3013               	movlw	19
  3928  0327  00FE               	movwf	btemp
  3929  0328  3000               	movlw	0
  3930  0329  00FF               	movwf	btemp+1
  3931  032A  319C  2473  3183   	fcall	clear_ram0
  3932                           
  3933                           ; Clear objects allocated to BANK2
  3934  032D  3051               	movlw	low __pbssBANK2
  3935  032E  0084               	movwf	4
  3936  032F  3001               	movlw	high __pbssBANK2
  3937  0330  0085               	movwf	5
  3938  0331  300E               	movlw	14
  3939  0332  00FE               	movwf	btemp
  3940  0333  3000               	movlw	0
  3941  0334  00FF               	movwf	btemp+1
  3942  0335  319C  2473  3183   	fcall	clear_ram0
  3943                           
  3944                           ; Clear objects allocated to BANK3
  3945  0338  30A0               	movlw	low __pbssBANK3
  3946  0339  0084               	movwf	4
  3947  033A  3001               	movlw	high __pbssBANK3
  3948  033B  0085               	movwf	5
  3949  033C  3039               	movlw	57
  3950  033D  00FE               	movwf	btemp
  3951  033E  3000               	movlw	0
  3952  033F  00FF               	movwf	btemp+1
  3953  0340  319C  2473  3183   	fcall	clear_ram0
  3954                           
  3955                           ; Clear objects allocated to BANK4
  3956  0343  3048               	movlw	low __pbssBANK4
  3957  0344  0084               	movwf	4
  3958  0345  3002               	movlw	high __pbssBANK4
  3959  0346  0085               	movwf	5
  3960  0347  3014               	movlw	20
  3961  0348  00FE               	movwf	btemp
  3962  0349  3000               	movlw	0
  3963  034A  00FF               	movwf	btemp+1
  3964  034B  319C  2473  3183   	fcall	clear_ram0
  3965                           
  3966                           ; Clear objects allocated to BANK5
  3967  034E  30A0               	movlw	low __pbssBANK5
  3968  034F  0084               	movwf	4
  3969  0350  3002               	movlw	high __pbssBANK5
  3970  0351  0085               	movwf	5
  3971  0352  302C               	movlw	44
  3972  0353  00FE               	movwf	btemp
  3973  0354  3000               	movlw	0
  3974  0355  00FF               	movwf	btemp+1
  3975  0356  319C  2473  3183   	fcall	clear_ram0
  3976                           
  3977                           ; Clear objects allocated to BANK9
  3978  0359  30A0               	movlw	low __pbssBANK9
  3979  035A  0084               	movwf	4
  3980  035B  3004               	movlw	high __pbssBANK9
  3981  035C  0085               	movwf	5
  3982  035D  3040               	movlw	64
  3983  035E  00FE               	movwf	btemp
  3984  035F  3000               	movlw	0
  3985  0360  00FF               	movwf	btemp+1
  3986  0361  319C  2473  3183   	fcall	clear_ram0
  3987                           
  3988                           ; Initialize objects allocated to BIGRAM
  3989  0364  30DB               	movlw	low __pidataBIGRAM
  3990  0365  0084               	movwf	4
  3991  0366  3083               	movlw	(high __pidataBIGRAM)| (0+128)
  3992  0367  0085               	movwf	5
  3993  0368  30E8               	movlw	low (0+9192)
  3994  0369  0086               	movwf	6
  3995  036A  3023               	movlw	high (0+9192)
  3996  036B  0087               	movwf	7
  3997  036C  3002               	movlw	2
  3998  036D  00FF               	movwf	btemp+1
  3999  036E  3008               	movlw	8
  4000  036F  319C  2467  3183   	fcall	init_ram
  4001                           
  4002                           ; Initialize objects allocated to COMMON
  4003  0372  3180  2003  3183   	fcall	__pidataCOMMON	;fetch initializer
  4004  0375  00FD               	movwf	__pdataCOMMON& (0+127)
  4005                           
  4006                           ; Initialize objects allocated to BANK0
  4007  0376  30AC               	movlw	low __pidataBANK0
  4008  0377  0084               	movwf	4
  4009  0378  309C               	movlw	(high __pidataBANK0)| (0+128)
  4010  0379  0085               	movwf	5
  4011  037A  3058               	movlw	low __pdataBANK0
  4012  037B  0086               	movwf	6
  4013  037C  3000               	movlw	high __pdataBANK0
  4014  037D  0087               	movwf	7
  4015  037E  3000               	movlw	0
  4016  037F  00FF               	movwf	btemp+1
  4017  0380  3012               	movlw	18
  4018  0381  319C  2467  3183   	fcall	init_ram
  4019                           
  4020                           ; Initialize objects allocated to BANK2
  4021  0384  307F               	movlw	low __pidataBANK2
  4022  0385  0084               	movwf	4
  4023  0386  309C               	movlw	(high __pidataBANK2)| (0+128)
  4024  0387  0085               	movwf	5
  4025  0388  305F               	movlw	low __pdataBANK2
  4026  0389  0086               	movwf	6
  4027  038A  3001               	movlw	high __pdataBANK2
  4028  038B  0087               	movwf	7
  4029  038C  3000               	movlw	0
  4030  038D  00FF               	movwf	btemp+1
  4031  038E  300E               	movlw	14
  4032  038F  319C  2467  3183   	fcall	init_ram
  4033                           
  4034                           ; Initialize objects allocated to BANK3
  4035  0392  309C               	movlw	low __pidataBANK3
  4036  0393  0084               	movwf	4
  4037  0394  309C               	movlw	(high __pidataBANK3)| (0+128)
  4038  0395  0085               	movwf	5
  4039  0396  30D9               	movlw	low __pdataBANK3
  4040  0397  0086               	movwf	6
  4041  0398  3001               	movlw	high __pdataBANK3
  4042  0399  0087               	movwf	7
  4043  039A  3000               	movlw	0
  4044  039B  00FF               	movwf	btemp+1
  4045  039C  3010               	movlw	16
  4046  039D  319C  2467  3183   	fcall	init_ram
  4047                           
  4048                           ; Initialize objects allocated to BANK4
  4049  03A0  30B3               	movlw	low __pidataBANK4
  4050  03A1  0084               	movwf	4
  4051  03A2  309D               	movlw	(high __pidataBANK4)| (0+128)
  4052  03A3  0085               	movwf	5
  4053  03A4  3020               	movlw	low __pdataBANK4
  4054  03A5  0086               	movwf	6
  4055  03A6  3002               	movlw	high __pdataBANK4
  4056  03A7  0087               	movwf	7
  4057  03A8  3000               	movlw	0
  4058  03A9  00FF               	movwf	btemp+1
  4059  03AA  3028               	movlw	40
  4060  03AB  319C  2467  3183   	fcall	init_ram
  4061                           
  4062                           ; Initialize objects allocated to BANK6
  4063  03AE  30C3               	movlw	low __pidataBANK6
  4064  03AF  0084               	movwf	4
  4065  03B0  309F               	movlw	(high __pidataBANK6)| (0+128)
  4066  03B1  0085               	movwf	5
  4067  03B2  3020               	movlw	low __pdataBANK6
  4068  03B3  0086               	movwf	6
  4069  03B4  3003               	movlw	high __pdataBANK6
  4070  03B5  0087               	movwf	7
  4071  03B6  3000               	movlw	0
  4072  03B7  00FF               	movwf	btemp+1
  4073  03B8  303D               	movlw	61
  4074  03B9  319C  2467  3183   	fcall	init_ram
  4075                           
  4076                           ; Initialize objects allocated to BANK7
  4077  03BC  3086               	movlw	low __pidataBANK7
  4078  03BD  0084               	movwf	4
  4079  03BE  309F               	movlw	(high __pidataBANK7)| (0+128)
  4080  03BF  0085               	movwf	5
  4081  03C0  30A0               	movlw	low __pdataBANK7
  4082  03C1  0086               	movwf	6
  4083  03C2  3003               	movlw	high __pdataBANK7
  4084  03C3  0087               	movwf	7
  4085  03C4  3000               	movlw	0
  4086  03C5  00FF               	movwf	btemp+1
  4087  03C6  303D               	movlw	61
  4088  03C7  319C  2467  3183   	fcall	init_ram
  4089                           
  4090                           ; Initialize objects allocated to BANK8
  4091  03CA  3049               	movlw	low __pidataBANK8
  4092  03CB  0084               	movwf	4
  4093  03CC  309F               	movlw	(high __pidataBANK8)| (0+128)
  4094  03CD  0085               	movwf	5
  4095  03CE  3020               	movlw	low __pdataBANK8
  4096  03CF  0086               	movwf	6
  4097  03D0  3004               	movlw	high __pdataBANK8
  4098  03D1  0087               	movwf	7
  4099  03D2  3000               	movlw	0
  4100  03D3  00FF               	movwf	btemp+1
  4101  03D4  303D               	movlw	61
  4102  03D5  319C  2467         	fcall	init_ram
  4103  03D7                     end_of_initialization:	
  4104                           ;End of C runtime variable initialization code
  4105                           
  4106  03D7                     __end_of__initialization:	
  4107  03D7  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4108  03D8  0020               	movlb	0
  4109  03D9  318B  2B3E         	ljmp	_main	;jump to C main() function
  4110                           
  4111                           	psect	dataCOMMON
  4112  007D                     __pdataCOMMON:	
  4113  007D                     _blink_rate:	
  4114  007D                     	ds	1
  4115                           
  4116                           	psect	bssBANK0
  4117  0045                     __pbssBANK0:	
  4118  0045                     _sub_timer:	
  4119  0045                     	ds	4
  4120  0049                     _tap_timer:	
  4121  0049                     	ds	4
  4122  004D                     _timer:	
  4123  004D                     	ds	4
  4124  0051                     _mod_counter:	
  4125  0051                     	ds	2
  4126  0053                     _doubleTap_state:	
  4127  0053                     	ds	1
  4128  0054                     _mode2_state:	
  4129  0054                     	ds	1
  4130  0055                     _presetSaveMode:	
  4131  0055                     	ds	1
  4132  0056                     _suspend_blink:	
  4133  0056                     	ds	1
  4134  0057                     _switchTap_pressed:	
  4135  0057                     	ds	1
  4136                           
  4137                           	psect	dataBANK0
  4138  0058                     __pdataBANK0:	
  4139  0058                     _baseline_delay_time:	
  4140  0058                     	ds	4
  4141  005C                     _delay_time:	
  4142  005C                     	ds	4
  4143  0060                     _bottom_push_state:	
  4144  0060                     	ds	2
  4145  0062                     _long_press_limit:	
  4146  0062                     	ds	2
  4147  0064                     _top_push_state:	
  4148  0064                     	ds	2
  4149  0066                     _longTap_state:	
  4150  0066                     	ds	1
  4151  0067                     _num_taps:	
  4152  0067                     	ds	1
  4153  0068                     _presetChannel:	
  4154  0068                     	ds	1
  4155  0069                     _switchBypass_state:	
  4156  0069                     	ds	1
  4157                           
  4158                           	psect	bssBANK2
  4159  0151                     __pbssBANK2:	
  4160  0151                     _delay_counter:	
  4161  0151                     	ds	2
  4162  0153                     _feedback_timer:	
  4163  0153                     	ds	2
  4164  0155                     _longTap_timer:	
  4165  0155                     	ds	2
  4166  0157                     _bottomTactile_pressed:	
  4167  0157                     	ds	1
  4168  0158                     _bypass_turning_on:	
  4169  0158                     	ds	1
  4170  0159                     _feedback_start:	
  4171  0159                     	ds	1
  4172  015A                     _longTap_start:	
  4173  015A                     	ds	1
  4174  015B                     _preset_blink:	
  4175  015B                     	ds	1
  4176  015C                     _preset_programmning_on:	
  4177  015C                     	ds	1
  4178  015D                     _switchTap_down:	
  4179  015D                     	ds	1
  4180  015E                     _topTactile_pressed:	
  4181  015E                     	ds	1
  4182                           
  4183                           	psect	dataBANK2
  4184  015F                     __pdataBANK2:	
  4185  015F                     _knob1_prev:	
  4186  015F                     	ds	2
  4187  0161                     _knob2_prev:	
  4188  0161                     	ds	2
  4189  0163                     _knob3_prev:	
  4190  0163                     	ds	2
  4191  0165                     _knob4_prev:	
  4192  0165                     	ds	2
  4193  0167                     _knob5_prev:	
  4194  0167                     	ds	2
  4195  0169                     _expressionChannel:	
  4196  0169                     	ds	1
  4197  016A                     _feedback_state:	
  4198  016A                     	ds	1
  4199  016B                     _presetModeCnst:	
  4200  016B                     	ds	1
  4201  016C                     _switchTap_state:	
  4202  016C                     	ds	1
  4203                           
  4204                           	psect	bssBANK3
  4205  01A0                     __pbssBANK3:	
  4206  01A0                     _double_timer:	
  4207  01A0                     	ds	4
  4208  01A4                     _ledState:	
  4209  01A4                     	ds	4
  4210  01A8                     _mod_timer:	
  4211  01A8                     	ds	4
  4212  01AC                     _tap_total:	
  4213  01AC                     	ds	4
  4214  01B0                     _test_timer:	
  4215  01B0                     	ds	4
  4216  01B4                     _adjust_sub_delay:	
  4217  01B4                     	ds	2
  4218  01B6                     _adjusted_pot_value:	
  4219  01B6                     	ds	2
  4220  01B8                     _debounce_bypass:	
  4221  01B8                     	ds	2
  4222  01BA                     _debounce_count:	
  4223  01BA                     	ds	2
  4224  01BC                     _debounce_mode1:	
  4225  01BC                     	ds	2
  4226  01BE                     _debounce_mode2:	
  4227  01BE                     	ds	2
  4228  01C0                     _delayfound:	
  4229  01C0                     	ds	2
  4230  01C2                     _errno:	
  4231  01C2                     	ds	2
  4232  01C4                     _knob_1_pos:	
  4233  01C4                     	ds	2
  4234  01C6                     _knob_2_pos:	
  4235  01C6                     	ds	2
  4236  01C8                     _knob_3_pos:	
  4237  01C8                     	ds	2
  4238  01CA                     _knob_4_pos:	
  4239  01CA                     	ds	2
  4240  01CC                     _knob_5_pos:	
  4241  01CC                     	ds	2
  4242  01CE                     _mod_value:	
  4243  01CE                     	ds	2
  4244  01D0                     _reset_sub_delay:	
  4245  01D0                     	ds	2
  4246  01D2                     _switchBypass_pressed:	
  4247  01D2                     	ds	2
  4248  01D4                     _switchBypass_toggle:	
  4249  01D4                     	ds	2
  4250  01D6                     _feedbackTriggered:	
  4251  01D6                     	ds	1
  4252  01D7                     _iCnt:	
  4253  01D7                     	ds	1
  4254  01D8                     _mode1_state:	
  4255  01D8                     	ds	1
  4256                           
  4257                           	psect	dataBANK3
  4258  01D9                     __pdataBANK3:	
  4259  01D9                     _blink_delay:	
  4260  01D9                     	ds	2
  4261  01DB                     _delay_time_changed:	
  4262  01DB                     	ds	2
  4263  01DD                     _mod_delay_time:	
  4264  01DD                     	ds	2
  4265  01DF                     _switchBypass_up:	
  4266  01DF                     	ds	2
  4267  01E1                     _symmetry:	
  4268  01E1                     	ds	2
  4269  01E3                     _tap_iteration:	
  4270  01E3                     	ds	2
  4271  01E5                     _blink_state:	
  4272  01E5                     	ds	1
  4273  01E6                     _currentBypassState:	
  4274  01E6                     	ds	1
  4275  01E7                     _expSwitchState:	
  4276  01E7                     	ds	1
  4277  01E8                     _expressModeCnst:	
  4278  01E8                     	ds	1
  4279                           
  4280                           	psect	bssBANK4
  4281  0248                     __pbssBANK4:	
  4282  0248                     _tap_history:	
  4283  0248                     	ds	20
  4284                           
  4285                           	psect	dataBANK4
  4286  0220                     __pdataBANK4:	
  4287  0220                     _B25k:	
  4288  0220                     	ds	40
  4289                           
  4290                           	psect	bssBANK5
  4291  02A0                     __pbssBANK5:	
  4292  02A0                     _tap:	
  4293  02A0                     	ds	44
  4294                           
  4295                           	psect	dataBANK6
  4296  0320                     __pdataBANK6:	
  4297  0320                     _mod1:	
  4298  0320                     	ds	61
  4299                           
  4300                           	psect	dataBANK7
  4301  03A0                     __pdataBANK7:	
  4302  03A0                     _mod2:	
  4303  03A0                     	ds	61
  4304                           
  4305                           	psect	dataBANK8
  4306  0420                     __pdataBANK8:	
  4307  0420                     _mod3:	
  4308  0420                     	ds	61
  4309                           
  4310                           	psect	bssBANK9
  4311  04A0                     __pbssBANK9:	
  4312  04A0                     _myBuf:	
  4313  04A0                     	ds	64
  4314                           
  4315                           	psect	clrtext
  4316  1C73                     clear_ram0:	
  4317                           ;	Called with FSR0 containing the base address, and
  4318                           ;	btemp/btemp+1 has the size to clear
  4319                           
  4320  1C73  0064               	clrwdt	;clear the watchdog before getting into this loop
  4321  1C74                     clrloop0:	
  4322  1C74  0180               	clrf	0	;clear RAM location pointed to by FSR
  4323  1C75  3101               	addfsr 0,1
  4324  1C76  3001               	movlw	1
  4325  1C77  02FE               	subwf	126,f
  4326  1C78  3000               	movlw	0
  4327  1C79  3BFF               	subwfb	127,f
  4328  1C7A  087F               	movf	127,w
  4329  1C7B  047E               	iorwf	126,w
  4330  1C7C  1903               	btfsc	3,2
  4331  1C7D  3400               	retlw	0	;all done for this memory range, return
  4332  1C7E  2C74               	goto	clrloop0	;have we reached the end yet?
  4333                           
  4334                           	psect	inittext
  4335  1C67                     init_ram:	
  4336  1C67  00FE               	movwf	126
  4337  1C68                     initloop:	
  4338  1C68  0012               	moviw fsr0++
  4339  1C69  001E               	movwi fsr1++
  4340  1C6A  3001               	movlw	1
  4341  1C6B  02FE               	subwf	126,f
  4342  1C6C  3000               	movlw	0
  4343  1C6D  3BFF               	subwfb	127,f
  4344  1C6E  087F               	movf	127,w
  4345  1C6F  047E               	iorwf	126,w
  4346  1C70  1903               	btfsc	3,2
  4347  1C71  3400               	retlw	0
  4348  1C72  2C68               	goto	initloop
  4349                           
  4350                           	psect	cstackBANK4
  4351  025C                     __pcstackBANK4:	
  4352  025C                     main@i:	
  4353                           
  4354                           ; 2 bytes @ 0x0
  4355  025C                     	ds	2
  4356  025E                     main@i_394:	
  4357                           
  4358                           ; 2 bytes @ 0x2
  4359  025E                     	ds	2
  4360  0260                     main@i_395:	
  4361                           
  4362                           ; 2 bytes @ 0x4
  4363  0260                     	ds	2
  4364  0262                     main@i_396:	
  4365                           
  4366                           ; 2 bytes @ 0x6
  4367  0262                     	ds	2
  4368                           
  4369                           	psect	cstackBANK2
  4370  0120                     __pcstackBANK2:	
  4371  0120                     ___fttol@sign1:	
  4372                           
  4373                           ; 1 bytes @ 0x0
  4374  0120                     	ds	1
  4375  0121                     ___fttol@lval:	
  4376                           
  4377                           ; 4 bytes @ 0x1
  4378  0121                     	ds	4
  4379  0125                     ___fttol@exp1:	
  4380                           
  4381                           ; 1 bytes @ 0x5
  4382  0125                     	ds	1
  4383  0126                     ?___altoft:	
  4384  0126                     ___altoft@c:	
  4385                           ; 3 bytes @ 0x6
  4386                           
  4387                           
  4388                           ; 4 bytes @ 0x6
  4389  0126                     	ds	4
  4390  012A                     ??___altoft:	
  4391                           
  4392                           ; 1 bytes @ 0xA
  4393  012A                     	ds	2
  4394  012C                     ___altoft@exp:	
  4395                           
  4396                           ; 1 bytes @ 0xC
  4397  012C                     	ds	1
  4398  012D                     ___altoft@sign:	
  4399                           
  4400                           ; 1 bytes @ 0xD
  4401  012D                     	ds	1
  4402  012E                     ?_trunc:	
  4403  012E                     trunc@x:	
  4404                           ; 3 bytes @ 0xE
  4405                           
  4406                           
  4407                           ; 3 bytes @ 0xE
  4408  012E                     	ds	3
  4409  0131                     trunc@i:	
  4410                           
  4411                           ; 3 bytes @ 0x11
  4412  0131                     	ds	3
  4413  0134                     trunc@expon:	
  4414                           
  4415                           ; 2 bytes @ 0x14
  4416  0134                     	ds	2
  4417  0136                     ?_set_subdivision:	
  4418  0136                     set_subdivision@x:	
  4419                           ; 2 bytes @ 0x16
  4420                           
  4421                           
  4422                           ; 2 bytes @ 0x16
  4423  0136                     	ds	2
  4424  0138                     set_subdivision@y:	
  4425                           
  4426                           ; 2 bytes @ 0x18
  4427  0138                     	ds	2
  4428  013A                     ??_set_subdivision:	
  4429                           
  4430                           ; 1 bytes @ 0x1A
  4431  013A                     	ds	3
  4432  013D                     set_subdivision@scalar:	
  4433                           
  4434                           ; 3 bytes @ 0x1D
  4435  013D                     	ds	3
  4436  0140                     set_subdivision@tmpX:	
  4437                           
  4438                           ; 2 bytes @ 0x20
  4439  0140                     	ds	2
  4440  0142                     ??_main:	
  4441                           
  4442                           ; 1 bytes @ 0x22
  4443  0142                     	ds	15
  4444                           
  4445                           	psect	cstackBANK1
  4446  00A0                     __pcstackBANK1:	
  4447  00A0                     ?_set_leds_top:	
  4448  00A0                     ??_ConfigureOscillator:	
  4449                           ; 1 bytes @ 0x0
  4450                           
  4451  00A0                     ??_InitApp:	
  4452                           ; 1 bytes @ 0x0
  4453                           
  4454  00A0                     ??_InitializeTaps:	
  4455                           ; 1 bytes @ 0x0
  4456                           
  4457  00A0                     ??_init_adc:	
  4458                           ; 1 bytes @ 0x0
  4459                           
  4460  00A0                     ??_init_pwm:	
  4461                           ; 1 bytes @ 0x0
  4462                           
  4463  00A0                     ??_init_timer2:	
  4464                           ; 1 bytes @ 0x0
  4465                           
  4466  00A0                     ??_init_timer0:	
  4467                           ; 1 bytes @ 0x0
  4468                           
  4469  00A0                     ?_set_leds_bottom:	
  4470                           ; 1 bytes @ 0x0
  4471                           
  4472  00A0                     ?_setFeedbackState:	
  4473                           ; 1 bytes @ 0x0
  4474                           
  4475  00A0                     ?_setLongTapState:	
  4476                           ; 1 bytes @ 0x0
  4477                           
  4478  00A0                     ?_updateSwitchBypassState:	
  4479                           ; 1 bytes @ 0x0
  4480                           
  4481  00A0                     ?_adc_convert:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  00A0                     ?_FLASH_ReadWord:	
  4485                           ; 2 bytes @ 0x0
  4486                           
  4487  00A0                     ?_getSwitchBypassState:	
  4488                           ; 2 bytes @ 0x0
  4489                           
  4490  00A0                     ?___ftpack:	
  4491                           ; 2 bytes @ 0x0
  4492                           
  4493  00A0                     ?_frexp:	
  4494                           ; 3 bytes @ 0x0
  4495                           
  4496  00A0                     ?___ftneg:	
  4497                           ; 3 bytes @ 0x0
  4498                           
  4499  00A0                     ?___lmul:	
  4500                           ; 3 bytes @ 0x0
  4501                           
  4502  00A0                     ?___aldiv:	
  4503                           ; 4 bytes @ 0x0
  4504                           
  4505  00A0                     FLASH_ReadWord@flashAddr:	
  4506                           ; 4 bytes @ 0x0
  4507                           
  4508  00A0                     set_leds_top@x:	
  4509                           ; 2 bytes @ 0x0
  4510                           
  4511  00A0                     set_leds_bottom@x:	
  4512                           ; 2 bytes @ 0x0
  4513                           
  4514  00A0                     updateSwitchBypassState@state:	
  4515                           ; 2 bytes @ 0x0
  4516                           
  4517  00A0                     setFeedbackState@f_state:	
  4518                           ; 2 bytes @ 0x0
  4519                           
  4520  00A0                     setLongTapState@f_state:	
  4521                           ; 2 bytes @ 0x0
  4522                           
  4523  00A0                     ___ftpack@arg:	
  4524                           ; 2 bytes @ 0x0
  4525                           
  4526  00A0                     ___ftneg@f1:	
  4527                           ; 3 bytes @ 0x0
  4528                           
  4529  00A0                     frexp@value:	
  4530                           ; 3 bytes @ 0x0
  4531                           
  4532  00A0                     ___lmul@multiplier:	
  4533                           ; 3 bytes @ 0x0
  4534                           
  4535  00A0                     ___aldiv@divisor:	
  4536                           ; 4 bytes @ 0x0
  4537                           
  4538                           
  4539                           ; 4 bytes @ 0x0
  4540  00A0                     	ds	1
  4541  00A1                     InitializeTaps@itap:	
  4542                           
  4543                           ; 2 bytes @ 0x1
  4544  00A1                     	ds	1
  4545  00A2                     ??_adc_convert:	
  4546  00A2                     ??_FLASH_ReadWord:	
  4547                           ; 1 bytes @ 0x2
  4548                           
  4549  00A2                     ??_set_leds_bottom:	
  4550                           ; 1 bytes @ 0x2
  4551                           
  4552  00A2                     ??_setFeedbackState:	
  4553                           ; 1 bytes @ 0x2
  4554                           
  4555  00A2                     ??_setLongTapState:	
  4556                           ; 1 bytes @ 0x2
  4557                           
  4558  00A2                     ??_updateSwitchBypassState:	
  4559                           ; 1 bytes @ 0x2
  4560                           
  4561  00A2                     ??_getSwitchBypassState:	
  4562                           ; 1 bytes @ 0x2
  4563                           
  4564  00A2                     FLASH_ReadWord@GIEBitValue:	
  4565                           ; 1 bytes @ 0x2
  4566                           
  4567  00A2                     set_leds_top@ledState:	
  4568                           ; 1 bytes @ 0x2
  4569                           
  4570                           
  4571                           ; 2 bytes @ 0x2
  4572  00A2                     	ds	1
  4573  00A3                     ??___ftneg:	
  4574  00A3                     adc_convert@channel:	
  4575                           ; 1 bytes @ 0x3
  4576                           
  4577  00A3                     ___ftpack@exp:	
  4578                           ; 1 bytes @ 0x3
  4579                           
  4580  00A3                     frexp@eptr:	
  4581                           ; 1 bytes @ 0x3
  4582                           
  4583                           
  4584                           ; 1 bytes @ 0x3
  4585  00A3                     	ds	1
  4586  00A4                     ??_set_leds_top:	
  4587  00A4                     ??_ReadSavedSettings:	
  4588                           ; 1 bytes @ 0x4
  4589                           
  4590  00A4                     ??_resetRingLEDs:	
  4591                           ; 1 bytes @ 0x4
  4592                           
  4593  00A4                     ??_setPresetDisplay:	
  4594                           ; 1 bytes @ 0x4
  4595                           
  4596  00A4                     ??_setExpressionDisplay:	
  4597                           ; 1 bytes @ 0x4
  4598                           
  4599  00A4                     ??_frexp:	
  4600                           ; 1 bytes @ 0x4
  4601                           
  4602  00A4                     ___ftpack@sign:	
  4603                           ; 1 bytes @ 0x4
  4604                           
  4605  00A4                     ___lmul@multiplicand:	
  4606                           ; 1 bytes @ 0x4
  4607                           
  4608  00A4                     ___aldiv@dividend:	
  4609                           ; 4 bytes @ 0x4
  4610                           
  4611                           
  4612                           ; 4 bytes @ 0x4
  4613  00A4                     	ds	1
  4614  00A5                     ??___ftpack:	
  4615                           
  4616                           ; 1 bytes @ 0x5
  4617  00A5                     	ds	1
  4618  00A6                     setPresetDisplay@ledChannel:	
  4619  00A6                     setExpressionDisplay@ledChannel:	
  4620                           ; 1 bytes @ 0x6
  4621                           
  4622                           
  4623                           ; 1 bytes @ 0x6
  4624  00A6                     	ds	1
  4625  00A7                     ??_update_mode:	
  4626  00A7                     ??_update_selectMode:	
  4627                           ; 1 bytes @ 0x7
  4628                           
  4629  00A7                     ??_setPedalMode:	
  4630                           ; 1 bytes @ 0x7
  4631                           
  4632                           
  4633                           ; 1 bytes @ 0x7
  4634  00A7                     	ds	1
  4635  00A8                     ??___lmul:	
  4636  00A8                     ??___aldiv:	
  4637                           ; 1 bytes @ 0x8
  4638                           
  4639  00A8                     ?___awtoft:	
  4640                           ; 1 bytes @ 0x8
  4641                           
  4642  00A8                     ?___ftadd:	
  4643                           ; 3 bytes @ 0x8
  4644                           
  4645  00A8                     ___awtoft@c:	
  4646                           ; 3 bytes @ 0x8
  4647                           
  4648  00A8                     ___ftadd@f1:	
  4649                           ; 2 bytes @ 0x8
  4650                           
  4651  00A8                     ___lmul@product:	
  4652                           ; 3 bytes @ 0x8
  4653                           
  4654                           
  4655                           ; 4 bytes @ 0x8
  4656  00A8                     	ds	1
  4657  00A9                     ___aldiv@counter:	
  4658                           
  4659                           ; 1 bytes @ 0x9
  4660  00A9                     	ds	1
  4661  00AA                     ___aldiv@sign:	
  4662                           
  4663                           ; 1 bytes @ 0xA
  4664  00AA                     	ds	1
  4665  00AB                     ??___awtoft:	
  4666  00AB                     ___ftadd@f2:	
  4667                           ; 1 bytes @ 0xB
  4668                           
  4669  00AB                     ___aldiv@quotient:	
  4670                           ; 3 bytes @ 0xB
  4671                           
  4672                           
  4673                           ; 4 bytes @ 0xB
  4674  00AB                     	ds	1
  4675  00AC                     ?_wait_ms:	
  4676  00AC                     wait_ms@timeSec:	
  4677                           ; 1 bytes @ 0xC
  4678                           
  4679                           
  4680                           ; 2 bytes @ 0xC
  4681  00AC                     	ds	1
  4682  00AD                     ___awtoft@sign:	
  4683                           
  4684                           ; 1 bytes @ 0xD
  4685  00AD                     	ds	1
  4686  00AE                     ??_wait_ms:	
  4687  00AE                     ??___ftadd:	
  4688                           ; 1 bytes @ 0xE
  4689                           
  4690  00AE                     wait_ms@timemsl:	
  4691                           ; 1 bytes @ 0xE
  4692                           
  4693                           
  4694                           ; 4 bytes @ 0xE
  4695  00AE                     	ds	4
  4696  00B2                     ??_read_bottom_tactile:	
  4697  00B2                     ??_read_top_tactile:	
  4698                           ; 1 bytes @ 0x12
  4699                           
  4700  00B2                     ??_solidring_tactiles:	
  4701                           ; 1 bytes @ 0x12
  4702                           
  4703  00B2                     ??_ring_tactiles:	
  4704                           ; 1 bytes @ 0x12
  4705                           
  4706  00B2                     ?_setSwitchBypassState:	
  4707                           ; 1 bytes @ 0x12
  4708                           
  4709  00B2                     ___ftadd@sign:	
  4710                           ; 1 bytes @ 0x12
  4711                           
  4712  00B2                     setSwitchBypassState@f_state:	
  4713                           ; 1 bytes @ 0x12
  4714                           
  4715                           
  4716                           ; 2 bytes @ 0x12
  4717  00B2                     	ds	1
  4718  00B3                     ___ftadd@exp2:	
  4719  00B3                     ring_tactiles@iLed:	
  4720                           ; 1 bytes @ 0x13
  4721                           
  4722                           
  4723                           ; 2 bytes @ 0x13
  4724  00B3                     	ds	1
  4725  00B4                     ??_setSwitchBypassState:	
  4726  00B4                     solidring_tactiles@ring_delay:	
  4727                           ; 1 bytes @ 0x14
  4728                           
  4729  00B4                     ___ftadd@exp1:	
  4730                           ; 1 bytes @ 0x14
  4731                           
  4732                           
  4733                           ; 1 bytes @ 0x14
  4734  00B4                     	ds	1
  4735  00B5                     ?___ftmul:	
  4736  00B5                     ring_tactiles@iLed_1482:	
  4737                           ; 3 bytes @ 0x15
  4738                           
  4739  00B5                     ___ftmul@f1:	
  4740                           ; 2 bytes @ 0x15
  4741                           
  4742                           
  4743                           ; 3 bytes @ 0x15
  4744  00B5                     	ds	1
  4745  00B6                     ??_initSwitchBypass:	
  4746  00B6                     initSwitchBypass@initState:	
  4747                           ; 1 bytes @ 0x16
  4748                           
  4749                           
  4750                           ; 2 bytes @ 0x16
  4751  00B6                     	ds	1
  4752  00B7                     ??_showSave:	
  4753                           
  4754                           ; 1 bytes @ 0x17
  4755  00B7                     	ds	1
  4756  00B8                     ?_setDoublePressState:	
  4757  00B8                     setDoublePressState@f_state:	
  4758                           ; 1 bytes @ 0x18
  4759                           
  4760  00B8                     ___ftmul@f2:	
  4761                           ; 2 bytes @ 0x18
  4762                           
  4763                           
  4764                           ; 3 bytes @ 0x18
  4765  00B8                     	ds	2
  4766  00BA                     ??_setDoublePressState:	
  4767                           
  4768                           ; 1 bytes @ 0x1A
  4769  00BA                     	ds	1
  4770  00BB                     ??___ftmul:	
  4771                           
  4772                           ; 1 bytes @ 0x1B
  4773  00BB                     	ds	1
  4774  00BC                     ??_updateSwitchBypass:	
  4775  00BC                     ??_updateSwitchTap:	
  4776                           ; 1 bytes @ 0x1C
  4777                           
  4778                           
  4779                           ; 1 bytes @ 0x1C
  4780  00BC                     	ds	3
  4781  00BF                     ___ftmul@exp:	
  4782                           
  4783                           ; 1 bytes @ 0x1F
  4784  00BF                     	ds	1
  4785  00C0                     ___ftmul@f3_as_product:	
  4786                           
  4787                           ; 3 bytes @ 0x20
  4788  00C0                     	ds	2
  4789  00C2                     updateSwitchTap@tapCntDivisor:	
  4790                           
  4791                           ; 2 bytes @ 0x22
  4792  00C2                     	ds	1
  4793  00C3                     ___ftmul@cntr:	
  4794                           
  4795                           ; 1 bytes @ 0x23
  4796  00C3                     	ds	1
  4797  00C4                     updateSwitchTap@iCnt:	
  4798  00C4                     ___ftmul@sign:	
  4799                           ; 1 bytes @ 0x24
  4800                           
  4801                           
  4802                           ; 1 bytes @ 0x24
  4803  00C4                     	ds	1
  4804  00C5                     ?___ftdiv:	
  4805  00C5                     ___ftdiv@f2:	
  4806                           ; 3 bytes @ 0x25
  4807                           
  4808                           
  4809                           ; 3 bytes @ 0x25
  4810  00C5                     	ds	3
  4811  00C8                     ___ftdiv@f1:	
  4812                           
  4813                           ; 3 bytes @ 0x28
  4814  00C8                     	ds	3
  4815  00CB                     ??___ftdiv:	
  4816                           
  4817                           ; 1 bytes @ 0x2B
  4818  00CB                     	ds	4
  4819  00CF                     ___ftdiv@cntr:	
  4820                           
  4821                           ; 1 bytes @ 0x2F
  4822  00CF                     	ds	1
  4823  00D0                     ___ftdiv@f3:	
  4824                           
  4825                           ; 3 bytes @ 0x30
  4826  00D0                     	ds	3
  4827  00D3                     ___ftdiv@exp:	
  4828                           
  4829                           ; 1 bytes @ 0x33
  4830  00D3                     	ds	1
  4831  00D4                     ___ftdiv@sign:	
  4832                           
  4833                           ; 1 bytes @ 0x34
  4834  00D4                     	ds	1
  4835  00D5                     ?_map:	
  4836  00D5                     map@x:	
  4837                           ; 3 bytes @ 0x35
  4838                           
  4839                           
  4840                           ; 3 bytes @ 0x35
  4841  00D5                     	ds	3
  4842  00D8                     map@in_min:	
  4843                           
  4844                           ; 3 bytes @ 0x38
  4845  00D8                     	ds	3
  4846  00DB                     map@in_max:	
  4847                           
  4848                           ; 3 bytes @ 0x3B
  4849  00DB                     	ds	3
  4850  00DE                     map@out_min:	
  4851                           
  4852                           ; 3 bytes @ 0x3E
  4853  00DE                     	ds	3
  4854  00E1                     map@out_max:	
  4855                           
  4856                           ; 3 bytes @ 0x41
  4857  00E1                     	ds	3
  4858  00E4                     ??_map:	
  4859  00E4                     _map$2397:	
  4860                           ; 1 bytes @ 0x44
  4861                           
  4862                           
  4863                           ; 3 bytes @ 0x44
  4864  00E4                     	ds	3
  4865  00E7                     ?___fttol:	
  4866  00E7                     ___fttol@f1:	
  4867                           ; 4 bytes @ 0x47
  4868                           
  4869                           
  4870                           ; 3 bytes @ 0x47
  4871  00E7                     	ds	4
  4872  00EB                     ??___fttol:	
  4873                           
  4874                           ; 1 bytes @ 0x4B
  4875  00EB                     	ds	4
  4876  00EF                     ??_trunc:	
  4877                           
  4878                           ; 1 bytes @ 0x4F
  4879  00EF                     	ds	1
  4880                           
  4881                           	psect	cstackCOMMON
  4882  0070                     __pcstackCOMMON:	
  4883  0070                     ?_ConfigureOscillator:	
  4884  0070                     ?_InitApp:	
  4885                           ; 1 bytes @ 0x0
  4886                           
  4887  0070                     ?_InitializeTaps:	
  4888                           ; 1 bytes @ 0x0
  4889                           
  4890  0070                     ?_initSwitchBypass:	
  4891                           ; 1 bytes @ 0x0
  4892                           
  4893  0070                     ?_ReadSavedSettings:	
  4894                           ; 1 bytes @ 0x0
  4895                           
  4896  0070                     ?_update_mode:	
  4897                           ; 1 bytes @ 0x0
  4898                           
  4899  0070                     ?_update_selectMode:	
  4900                           ; 1 bytes @ 0x0
  4901                           
  4902  0070                     ?_updateSwitchBypass:	
  4903                           ; 1 bytes @ 0x0
  4904                           
  4905  0070                     ?_updateSwitchTap:	
  4906                           ; 1 bytes @ 0x0
  4907                           
  4908  0070                     ?_read_bottom_tactile:	
  4909                           ; 1 bytes @ 0x0
  4910                           
  4911  0070                     ?_read_top_tactile:	
  4912                           ; 1 bytes @ 0x0
  4913                           
  4914  0070                     ?_init_adc:	
  4915                           ; 1 bytes @ 0x0
  4916                           
  4917  0070                     ?_init_pwm:	
  4918                           ; 1 bytes @ 0x0
  4919                           
  4920  0070                     ?_init_timer2:	
  4921                           ; 1 bytes @ 0x0
  4922                           
  4923  0070                     ?_init_timer0:	
  4924                           ; 1 bytes @ 0x0
  4925                           
  4926  0070                     ?_solidring_tactiles:	
  4927                           ; 1 bytes @ 0x0
  4928                           
  4929  0070                     ?_ring_tactiles:	
  4930                           ; 1 bytes @ 0x0
  4931                           
  4932  0070                     ?_resetRingLEDs:	
  4933                           ; 1 bytes @ 0x0
  4934                           
  4935  0070                     ?_setPedalMode:	
  4936                           ; 1 bytes @ 0x0
  4937                           
  4938  0070                     ?_setPresetDisplay:	
  4939                           ; 1 bytes @ 0x0
  4940                           
  4941  0070                     ?_setExpressionDisplay:	
  4942                           ; 1 bytes @ 0x0
  4943                           
  4944  0070                     ?_isr:	
  4945                           ; 1 bytes @ 0x0
  4946                           
  4947  0070                     ?_main:	
  4948                           ; 1 bytes @ 0x0
  4949                           
  4950  0070                     ?_showSave:	
  4951                           ; 1 bytes @ 0x0
  4952                           
  4953  0070                     ?i1_set_leds_top:	
  4954                           ; 1 bytes @ 0x0
  4955                           
  4956  0070                     ?___awdiv:	
  4957                           ; 1 bytes @ 0x0
  4958                           
  4959  0070                     ?i1___lmul:	
  4960                           ; 2 bytes @ 0x0
  4961                           
  4962  0070                     ___awdiv@divisor:	
  4963                           ; 4 bytes @ 0x0
  4964                           
  4965  0070                     i1set_leds_top@x:	
  4966                           ; 2 bytes @ 0x0
  4967                           
  4968  0070                     i1___lmul@multiplier:	
  4969                           ; 2 bytes @ 0x0
  4970                           
  4971                           
  4972                           ; 4 bytes @ 0x0
  4973  0070                     	ds	2
  4974  0072                     ___awdiv@dividend:	
  4975  0072                     i1set_leds_top@ledState:	
  4976                           ; 2 bytes @ 0x2
  4977                           
  4978                           
  4979                           ; 2 bytes @ 0x2
  4980  0072                     	ds	2
  4981  0074                     ??___awdiv:	
  4982  0074                     ??i1_set_leds_top:	
  4983                           ; 1 bytes @ 0x4
  4984                           
  4985  0074                     i1___lmul@multiplicand:	
  4986                           ; 1 bytes @ 0x4
  4987                           
  4988                           
  4989                           ; 4 bytes @ 0x4
  4990  0074                     	ds	1
  4991  0075                     ___awdiv@counter:	
  4992                           
  4993                           ; 1 bytes @ 0x5
  4994  0075                     	ds	1
  4995  0076                     ___awdiv@sign:	
  4996                           
  4997                           ; 1 bytes @ 0x6
  4998  0076                     	ds	1
  4999  0077                     ___awdiv@quotient:	
  5000                           
  5001                           ; 2 bytes @ 0x7
  5002  0077                     	ds	1
  5003  0078                     ??i1___lmul:	
  5004  0078                     i1___lmul@product:	
  5005                           ; 1 bytes @ 0x8
  5006                           
  5007                           
  5008                           ; 4 bytes @ 0x8
  5009  0078                     	ds	4
  5010  007C                     ??i1___aldiv:	
  5011                           
  5012                           ; 1 bytes @ 0xC
  5013  007C                     	ds	1
  5014                           
  5015                           	psect	cstackBANK0
  5016  0020                     __pcstackBANK0:	
  5017  0020                     ?i1___aldiv:	
  5018  0020                     i1___aldiv@divisor:	
  5019                           ; 4 bytes @ 0x0
  5020                           
  5021                           
  5022                           ; 4 bytes @ 0x0
  5023  0020                     	ds	4
  5024  0024                     i1___aldiv@dividend:	
  5025                           
  5026                           ; 4 bytes @ 0x4
  5027  0024                     	ds	4
  5028  0028                     i1___aldiv@counter:	
  5029                           
  5030                           ; 1 bytes @ 0x8
  5031  0028                     	ds	1
  5032  0029                     i1___aldiv@sign:	
  5033                           
  5034                           ; 1 bytes @ 0x9
  5035  0029                     	ds	1
  5036  002A                     i1___aldiv@quotient:	
  5037                           
  5038                           ; 4 bytes @ 0xA
  5039  002A                     	ds	4
  5040  002E                     ?_modulation:	
  5041  002E                     modulation@x:	
  5042                           ; 4 bytes @ 0xE
  5043                           
  5044                           
  5045                           ; 4 bytes @ 0xE
  5046  002E                     	ds	4
  5047  0032                     modulation@y:	
  5048                           
  5049                           ; 4 bytes @ 0x12
  5050  0032                     	ds	4
  5051  0036                     ??_modulation:	
  5052                           
  5053                           ; 1 bytes @ 0x16
  5054  0036                     	ds	4
  5055  003A                     ??_isr:	
  5056                           
  5057                           ; 1 bytes @ 0x1A
  5058  003A                     	ds	9
  5059  0043                     isr@tmpSubDelay:	
  5060                           
  5061                           ; 2 bytes @ 0x23
  5062  0043                     	ds	2
  5063                           
  5064                           	psect	maintext
  5065  0B3E                     __pmaintext:	
  5066 ;;
  5067 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5068 ;;
  5069 ;; *************** function _main *****************
  5070 ;; Defined at:
  5071 ;;		line 84 in file "main.c"
  5072 ;; Parameters:    Size  Location     Type
  5073 ;;		None
  5074 ;; Auto vars:     Size  Location     Type
  5075 ;;  i               2    6[BANK4 ] int 
  5076 ;;  i               2    4[BANK4 ] int 
  5077 ;;  i               2    2[BANK4 ] int 
  5078 ;;  i               2    0[BANK4 ] int 
  5079 ;; Return value:  Size  Location     Type
  5080 ;;                  1    wreg      void 
  5081 ;; Registers used:
  5082 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5083 ;; Tracked objects:
  5084 ;;		On entry : B1F/0
  5085 ;;		On exit  : 0/0
  5086 ;;		Unchanged: 0/0
  5087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5089 ;;      Locals:         0       0       0       0       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5090 ;;      Temps:          0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5091 ;;      Totals:         0       0       0      15       0       8       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5092 ;;Total ram usage:       23 bytes
  5093 ;; Hardware stack levels required when called:    9
  5094 ;; This function calls:
  5095 ;;		_ConfigureOscillator
  5096 ;;		_InitApp
  5097 ;;		_InitializeTaps
  5098 ;;		_ReadSavedSettings
  5099 ;;		___awtoft
  5100 ;;		___fttol
  5101 ;;		_adc_convert
  5102 ;;		_initSwitchBypass
  5103 ;;		_map
  5104 ;;		_read_bottom_tactile
  5105 ;;		_read_top_tactile
  5106 ;;		_set_subdivision
  5107 ;;		_updateSwitchBypass
  5108 ;;		_updateSwitchTap
  5109 ;;		_update_mode
  5110 ;;		_update_selectMode
  5111 ;; This function is called by:
  5112 ;;		Startup code after reset
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           
  5117                           ;psect for function _main
  5118  0B3E                     _main:	
  5119                           
  5120                           ;main.c: 85: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5121                           
  5122                           ;incstack = 0
  5123                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5124  0B3E  3028               	movlw	40
  5125  0B3F  0023               	movlb	3	; select bank3
  5126  0B40  00E9               	movwf	_B25kLength^(0+384)
  5127  0B41  3000               	movlw	0
  5128  0B42  00EA               	movwf	(_B25kLength^(0+384)+1)
  5129                           
  5130                           ;main.c: 92: ConfigureOscillator();
  5131  0B43  319C  2443  318B   	fcall	_ConfigureOscillator
  5132                           
  5133                           ;main.c: 93: InitApp();
  5134  0B46  319E  260A  318B   	fcall	_InitApp
  5135                           
  5136                           ;main.c: 95: PORTEbits.RE0 = 1;
  5137  0B49  0020               	movlb	0	; select bank0
  5138  0B4A  1410               	bsf	16,0	;volatile
  5139                           
  5140                           ;main.c: 96: PORTEbits.RE1 = 1;
  5141  0B4B  1490               	bsf	16,1	;volatile
  5142                           
  5143                           ;main.c: 97: PORTDbits.RD6 = 1;
  5144  0B4C  170F               	bsf	15,6	;volatile
  5145                           
  5146                           ;main.c: 98: PORTDbits.RD5 = 1;
  5147  0B4D  168F               	bsf	15,5	;volatile
  5148                           
  5149                           ;main.c: 99: PORTCbits.RC0 = 1;
  5150  0B4E  140E               	bsf	14,0	;volatile
  5151                           
  5152                           ;main.c: 100: PORTDbits.RD7 = 1;
  5153  0B4F  178F               	bsf	15,7	;volatile
  5154                           
  5155                           ;main.c: 102: InitializeTaps();
  5156  0B50  319D  258D  318B   	fcall	_InitializeTaps
  5157                           
  5158                           ;main.c: 103: initSwitchBypass();
  5159  0B53  319C  248D  318B   	fcall	_initSwitchBypass
  5160                           
  5161                           ;main.c: 106: ReadSavedSettings();
  5162  0B56  3194  249E  318B   	fcall	_ReadSavedSettings
  5163  0B59                     l6557:	
  5164                           ;main.c: 108: while (1) {
  5165                           
  5166                           
  5167                           ;main.c: 135: update_mode();
  5168  0B59  319E  269C  318B   	fcall	_update_mode
  5169                           
  5170                           ;main.c: 136: update_selectMode();
  5171  0B5C  3193  23E0  318B   	fcall	_update_selectMode
  5172                           
  5173                           ;main.c: 138: updateSwitchBypass();
  5174  0B5F  3189  2161  318B   	fcall	_updateSwitchBypass
  5175                           
  5176                           ;main.c: 139: if (presetSaveMode != 1) {
  5177  0B62  0020               	movlb	0	; select bank0
  5178  0B63  0355               	decf	_presetSaveMode,w
  5179  0B64  1903               	btfsc	3,2
  5180  0B65  2B69               	goto	l6567
  5181                           
  5182                           ;main.c: 140: updateSwitchTap();
  5183  0B66  3185  25E3  318B   	fcall	_updateSwitchTap
  5184  0B69                     l6567:	
  5185                           
  5186                           ;main.c: 141: }
  5187                           ;main.c: 143: if (presetSaveMode != 1 && mode2_state != presetModeCnst) {
  5188  0B69  0020               	movlb	0	; select bank0
  5189  0B6A  0355               	decf	_presetSaveMode,w
  5190  0B6B  1903               	btfsc	3,2
  5191  0B6C  2B78               	goto	l6573
  5192  0B6D  0854               	movf	_mode2_state,w
  5193  0B6E  0022               	movlb	2	; select bank2
  5194  0B6F  066B               	xorwf	_presetModeCnst^(0+256),w
  5195  0B70  1903               	skipnz
  5196  0B71  2B78               	goto	l6573
  5197                           
  5198                           ;main.c: 144: read_bottom_tactile();
  5199  0B72  3191  2125  318B   	fcall	_read_bottom_tactile
  5200                           
  5201                           ;main.c: 145: read_top_tactile();
  5202  0B75  3192  2249  318B   	fcall	_read_top_tactile
  5203  0B78                     l6573:	
  5204                           
  5205                           ;main.c: 146: }
  5206                           ;main.c: 150: knob_1_pos = adc_convert(0);
  5207  0B78  3000               	movlw	0
  5208  0B79  319C  24BE  318B   	fcall	_adc_convert
  5209  0B7C  0021               	movlb	1	; select bank1
  5210  0B7D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5211  0B7E  0023               	movlb	3	; select bank3
  5212  0B7F  00C5               	movwf	(_knob_1_pos+1)^(0+384)
  5213  0B80  0021               	movlb	1	; select bank1
  5214  0B81  0820               	movf	?_adc_convert^(0+128),w
  5215  0B82  0023               	movlb	3	; select bank3
  5216  0B83  00C4               	movwf	_knob_1_pos^(0+384)
  5217                           
  5218                           ;main.c: 151: knob_2_pos = adc_convert(1);
  5219  0B84  3001               	movlw	1
  5220  0B85  319C  24BE  318B   	fcall	_adc_convert
  5221  0B88  0021               	movlb	1	; select bank1
  5222  0B89  0821               	movf	(?_adc_convert+1)^(0+128),w
  5223  0B8A  0023               	movlb	3	; select bank3
  5224  0B8B  00C7               	movwf	(_knob_2_pos+1)^(0+384)
  5225  0B8C  0021               	movlb	1	; select bank1
  5226  0B8D  0820               	movf	?_adc_convert^(0+128),w
  5227  0B8E  0023               	movlb	3	; select bank3
  5228  0B8F  00C6               	movwf	_knob_2_pos^(0+384)
  5229                           
  5230                           ;main.c: 152: knob_3_pos = adc_convert(2);
  5231  0B90  3002               	movlw	2
  5232  0B91  319C  24BE  318B   	fcall	_adc_convert
  5233  0B94  0021               	movlb	1	; select bank1
  5234  0B95  0821               	movf	(?_adc_convert+1)^(0+128),w
  5235  0B96  0023               	movlb	3	; select bank3
  5236  0B97  00C9               	movwf	(_knob_3_pos+1)^(0+384)
  5237  0B98  0021               	movlb	1	; select bank1
  5238  0B99  0820               	movf	?_adc_convert^(0+128),w
  5239  0B9A  0023               	movlb	3	; select bank3
  5240  0B9B  00C8               	movwf	_knob_3_pos^(0+384)
  5241                           
  5242                           ;main.c: 153: knob_4_pos = adc_convert(3);
  5243  0B9C  3003               	movlw	3
  5244  0B9D  319C  24BE  318B   	fcall	_adc_convert
  5245  0BA0  0021               	movlb	1	; select bank1
  5246  0BA1  0821               	movf	(?_adc_convert+1)^(0+128),w
  5247  0BA2  0023               	movlb	3	; select bank3
  5248  0BA3  00CB               	movwf	(_knob_4_pos+1)^(0+384)
  5249  0BA4  0021               	movlb	1	; select bank1
  5250  0BA5  0820               	movf	?_adc_convert^(0+128),w
  5251  0BA6  0023               	movlb	3	; select bank3
  5252  0BA7  00CA               	movwf	_knob_4_pos^(0+384)
  5253                           
  5254                           ;main.c: 154: knob_5_pos = adc_convert(4);
  5255  0BA8  3004               	movlw	4
  5256  0BA9  319C  24BE  318B   	fcall	_adc_convert
  5257  0BAC  0021               	movlb	1	; select bank1
  5258  0BAD  0821               	movf	(?_adc_convert+1)^(0+128),w
  5259  0BAE  0023               	movlb	3	; select bank3
  5260  0BAF  00CD               	movwf	(_knob_5_pos+1)^(0+384)
  5261  0BB0  0021               	movlb	1	; select bank1
  5262  0BB1  0820               	movf	?_adc_convert^(0+128),w
  5263  0BB2  0023               	movlb	3	; select bank3
  5264  0BB3  00CC               	movwf	_knob_5_pos^(0+384)
  5265                           
  5266                           ;main.c: 182: if (bottom_push_state != 5) {
  5267  0BB4  3005               	movlw	5
  5268  0BB5  0020               	movlb	0	; select bank0
  5269  0BB6  0660               	xorwf	_bottom_push_state,w
  5270  0BB7  0461               	iorwf	_bottom_push_state+1,w
  5271  0BB8  1903               	btfsc	3,2
  5272  0BB9  2C46               	goto	l6595
  5273                           
  5274                           ;main.c: 183: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5275  0BBA  0022               	movlb	2	; select bank2
  5276  0BBB  095F               	comf	_knob1_prev^(0+256),w	;volatile
  5277  0BBC  00C2               	movwf	??_main^(0+256)
  5278  0BBD  0960               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5279  0BBE  00C3               	movwf	(??_main^(0+256)+1)
  5280  0BBF  0AC2               	incf	??_main^(0+256),f
  5281  0BC0  1903               	skipnz
  5282  0BC1  0AC3               	incf	(??_main^(0+256)+1),f
  5283  0BC2  0023               	movlb	3	; select bank3
  5284  0BC3  0844               	movf	_knob_1_pos^(0+384),w
  5285  0BC4  0022               	movlb	2	; select bank2
  5286  0BC5  0742               	addwf	??_main^(0+256),w
  5287  0BC6  00C4               	movwf	(??_main+2)^(0+256)
  5288  0BC7  0023               	movlb	3	; select bank3
  5289  0BC8  0845               	movf	(_knob_1_pos+1)^(0+384),w
  5290  0BC9  0022               	movlb	2	; select bank2
  5291  0BCA  3D43               	addwfc	(??_main+1)^(0+256),w
  5292  0BCB  00C5               	movwf	(??_main+3)^(0+256)
  5293  0BCC  0845               	movf	(??_main+3)^(0+256),w
  5294  0BCD  3A80               	xorlw	128
  5295  0BCE  00C6               	movwf	(??_main+4)^(0+256)
  5296  0BCF  3080               	movlw	128
  5297  0BD0  0246               	subwf	(??_main+4)^(0+256),w
  5298  0BD1  1D03               	skipz
  5299  0BD2  2BD5               	goto	u7475
  5300  0BD3  3004               	movlw	4
  5301  0BD4  0244               	subwf	(??_main+2)^(0+256),w
  5302  0BD5                     u7475:	
  5303  0BD5  1803               	skipnc
  5304  0BD6  2BF4               	goto	l6589
  5305  0BD7  0022               	movlb	2	; select bank2
  5306  0BD8  095F               	comf	_knob1_prev^(0+256),w	;volatile
  5307  0BD9  00C2               	movwf	??_main^(0+256)
  5308  0BDA  0960               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5309  0BDB  00C3               	movwf	(??_main^(0+256)+1)
  5310  0BDC  0AC2               	incf	??_main^(0+256),f
  5311  0BDD  1903               	skipnz
  5312  0BDE  0AC3               	incf	(??_main^(0+256)+1),f
  5313  0BDF  0023               	movlb	3	; select bank3
  5314  0BE0  0844               	movf	_knob_1_pos^(0+384),w
  5315  0BE1  0022               	movlb	2	; select bank2
  5316  0BE2  0742               	addwf	??_main^(0+256),w
  5317  0BE3  00C4               	movwf	(??_main+2)^(0+256)
  5318  0BE4  0023               	movlb	3	; select bank3
  5319  0BE5  0845               	movf	(_knob_1_pos+1)^(0+384),w
  5320  0BE6  0022               	movlb	2	; select bank2
  5321  0BE7  3D43               	addwfc	(??_main+1)^(0+256),w
  5322  0BE8  00C5               	movwf	(??_main+3)^(0+256)
  5323  0BE9  0845               	movf	(??_main+3)^(0+256),w
  5324  0BEA  3A80               	xorlw	128
  5325  0BEB  00C6               	movwf	(??_main+4)^(0+256)
  5326  0BEC  307F               	movlw	127
  5327  0BED  0246               	subwf	(??_main+4)^(0+256),w
  5328  0BEE  1D03               	skipz
  5329  0BEF  2BF2               	goto	u7485
  5330  0BF0  30FD               	movlw	253
  5331  0BF1  0244               	subwf	(??_main+2)^(0+256),w
  5332  0BF2                     u7485:	
  5333  0BF2  1803               	skipnc
  5334  0BF3  2C46               	goto	l6595
  5335  0BF4                     l6589:	
  5336                           
  5337                           ;main.c: 184: knob1_prev = knob_1_pos;
  5338  0BF4  0023               	movlb	3	; select bank3
  5339  0BF5  0845               	movf	(_knob_1_pos+1)^(0+384),w
  5340  0BF6  0022               	movlb	2	; select bank2
  5341  0BF7  00E0               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5342  0BF8  0023               	movlb	3	; select bank3
  5343  0BF9  0844               	movf	_knob_1_pos^(0+384),w
  5344  0BFA  0022               	movlb	2	; select bank2
  5345  0BFB  00DF               	movwf	_knob1_prev^(0+256)	;volatile
  5346                           
  5347                           ;main.c: 185: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5348  0BFC  3000               	movlw	0
  5349  0BFD  0021               	movlb	1	; select bank1
  5350  0BFE  00E1               	movwf	map@out_max^(0+128)
  5351  0BFF  3048               	movlw	72
  5352  0C00  00E2               	movwf	(map@out_max+1)^(0+128)
  5353  0C01  3043               	movlw	67
  5354  0C02  00E3               	movwf	(map@out_max+2)^(0+128)
  5355  0C03  3080               	movlw	128
  5356  0C04  00DE               	movwf	map@out_min^(0+128)
  5357  0C05  3092               	movlw	146
  5358  0C06  00DF               	movwf	(map@out_min+1)^(0+128)
  5359  0C07  3044               	movlw	68
  5360  0C08  00E0               	movwf	(map@out_min+2)^(0+128)
  5361  0C09  30C0               	movlw	192
  5362  0C0A  00DB               	movwf	map@in_max^(0+128)
  5363  0C0B  307F               	movlw	127
  5364  0C0C  00DC               	movwf	(map@in_max+1)^(0+128)
  5365  0C0D  3044               	movlw	68
  5366  0C0E  00DD               	movwf	(map@in_max+2)^(0+128)
  5367  0C0F  3000               	movlw	0
  5368  0C10  00D8               	movwf	map@in_min^(0+128)
  5369  0C11  3000               	movlw	0
  5370  0C12  00D9               	movwf	(map@in_min+1)^(0+128)
  5371  0C13  3000               	movlw	0
  5372  0C14  00DA               	movwf	(map@in_min+2)^(0+128)
  5373  0C15  0022               	movlb	2	; select bank2
  5374  0C16  0860               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5375  0C17  0021               	movlb	1	; select bank1
  5376  0C18  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5377  0C19  0022               	movlb	2	; select bank2
  5378  0C1A  085F               	movf	_knob1_prev^(0+256),w	;volatile
  5379  0C1B  0021               	movlb	1	; select bank1
  5380  0C1C  00A8               	movwf	___awtoft@c^(0+128)
  5381  0C1D  319D  256B  318B   	fcall	___awtoft
  5382  0C20  0021               	movlb	1	; select bank1
  5383  0C21  0828               	movf	?___awtoft^(0+128),w
  5384  0C22  00D5               	movwf	map@x^(0+128)
  5385  0C23  0829               	movf	(?___awtoft+1)^(0+128),w
  5386  0C24  00D6               	movwf	(map@x+1)^(0+128)
  5387  0C25  082A               	movf	(?___awtoft+2)^(0+128),w
  5388  0C26  00D7               	movwf	(map@x+2)^(0+128)
  5389  0C27  3196  2618  318B   	fcall	_map
  5390  0C2A  0021               	movlb	1	; select bank1
  5391  0C2B  0855               	movf	?_map^(0+128),w
  5392  0C2C  00E7               	movwf	___fttol@f1^(0+128)
  5393  0C2D  0856               	movf	(?_map+1)^(0+128),w
  5394  0C2E  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5395  0C2F  0857               	movf	(?_map+2)^(0+128),w
  5396  0C30  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5397  0C31  3188  2008  318B   	fcall	___fttol
  5398  0C34  0021               	movlb	1	; select bank1
  5399  0C35  0867               	movf	?___fttol^(0+128),w
  5400  0C36  0020               	movlb	0	; select bank0
  5401  0C37  00D8               	movwf	_baseline_delay_time	;volatile
  5402  0C38  0021               	movlb	1	; select bank1
  5403  0C39  0868               	movf	(?___fttol^(0+128)+1),w
  5404  0C3A  0020               	movlb	0	; select bank0
  5405  0C3B  00D9               	movwf	_baseline_delay_time+1	;volatile
  5406  0C3C  0D89               	rlf	9,f
  5407  0C3D  3B89               	subwfb	9,f
  5408  0C3E  0989               	comf	9,f
  5409  0C3F  00DA               	movwf	_baseline_delay_time+2	;volatile
  5410  0C40  00DB               	movwf	_baseline_delay_time+3	;volatile
  5411                           
  5412                           ;main.c: 186: delay_time_changed = 1;
  5413  0C41  3001               	movlw	1
  5414  0C42  0023               	movlb	3	; select bank3
  5415  0C43  00DB               	movwf	_delay_time_changed^(0+384)
  5416  0C44  3000               	movlw	0
  5417  0C45  00DC               	movwf	(_delay_time_changed^(0+384)+1)
  5418  0C46                     l6595:	
  5419                           
  5420                           ;main.c: 188: }
  5421                           ;main.c: 189: }
  5422                           ;main.c: 199: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5423  0C46  0022               	movlb	2	; select bank2
  5424  0C47  0961               	comf	_knob2_prev^(0+256),w	;volatile
  5425  0C48  00C2               	movwf	??_main^(0+256)
  5426  0C49  0962               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5427  0C4A  00C3               	movwf	(??_main^(0+256)+1)
  5428  0C4B  0AC2               	incf	??_main^(0+256),f
  5429  0C4C  1903               	skipnz
  5430  0C4D  0AC3               	incf	(??_main^(0+256)+1),f
  5431  0C4E  0023               	movlb	3	; select bank3
  5432  0C4F  0846               	movf	_knob_2_pos^(0+384),w
  5433  0C50  0022               	movlb	2	; select bank2
  5434  0C51  0742               	addwf	??_main^(0+256),w
  5435  0C52  00C4               	movwf	(??_main+2)^(0+256)
  5436  0C53  0023               	movlb	3	; select bank3
  5437  0C54  0847               	movf	(_knob_2_pos+1)^(0+384),w
  5438  0C55  0022               	movlb	2	; select bank2
  5439  0C56  3D43               	addwfc	(??_main+1)^(0+256),w
  5440  0C57  00C5               	movwf	(??_main+3)^(0+256)
  5441  0C58  0845               	movf	(??_main+3)^(0+256),w
  5442  0C59  3A80               	xorlw	128
  5443  0C5A  00C6               	movwf	(??_main+4)^(0+256)
  5444  0C5B  3080               	movlw	128
  5445  0C5C  0246               	subwf	(??_main+4)^(0+256),w
  5446  0C5D  1D03               	skipz
  5447  0C5E  2C61               	goto	u7495
  5448  0C5F  3004               	movlw	4
  5449  0C60  0244               	subwf	(??_main+2)^(0+256),w
  5450  0C61                     u7495:	
  5451  0C61  1803               	skipnc
  5452  0C62  2C80               	goto	l6599
  5453  0C63  0022               	movlb	2	; select bank2
  5454  0C64  0961               	comf	_knob2_prev^(0+256),w	;volatile
  5455  0C65  00C2               	movwf	??_main^(0+256)
  5456  0C66  0962               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5457  0C67  00C3               	movwf	(??_main^(0+256)+1)
  5458  0C68  0AC2               	incf	??_main^(0+256),f
  5459  0C69  1903               	skipnz
  5460  0C6A  0AC3               	incf	(??_main^(0+256)+1),f
  5461  0C6B  0023               	movlb	3	; select bank3
  5462  0C6C  0846               	movf	_knob_2_pos^(0+384),w
  5463  0C6D  0022               	movlb	2	; select bank2
  5464  0C6E  0742               	addwf	??_main^(0+256),w
  5465  0C6F  00C4               	movwf	(??_main+2)^(0+256)
  5466  0C70  0023               	movlb	3	; select bank3
  5467  0C71  0847               	movf	(_knob_2_pos+1)^(0+384),w
  5468  0C72  0022               	movlb	2	; select bank2
  5469  0C73  3D43               	addwfc	(??_main+1)^(0+256),w
  5470  0C74  00C5               	movwf	(??_main+3)^(0+256)
  5471  0C75  0845               	movf	(??_main+3)^(0+256),w
  5472  0C76  3A80               	xorlw	128
  5473  0C77  00C6               	movwf	(??_main+4)^(0+256)
  5474  0C78  307F               	movlw	127
  5475  0C79  0246               	subwf	(??_main+4)^(0+256),w
  5476  0C7A  1D03               	skipz
  5477  0C7B  2C7E               	goto	u7505
  5478  0C7C  30FD               	movlw	253
  5479  0C7D  0244               	subwf	(??_main+2)^(0+256),w
  5480  0C7E                     u7505:	
  5481  0C7E  1803               	skipnc
  5482  0C7F  2CEE               	goto	l6607
  5483  0C80                     l6599:	
  5484                           
  5485                           ;main.c: 200: knob2_prev = knob_2_pos;
  5486  0C80  0023               	movlb	3	; select bank3
  5487  0C81  0847               	movf	(_knob_2_pos+1)^(0+384),w
  5488  0C82  0022               	movlb	2	; select bank2
  5489  0C83  00E2               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5490  0C84  0023               	movlb	3	; select bank3
  5491  0C85  0846               	movf	_knob_2_pos^(0+384),w
  5492  0C86  0022               	movlb	2	; select bank2
  5493  0C87  00E1               	movwf	_knob2_prev^(0+256)	;volatile
  5494                           
  5495                           ;main.c: 201: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5496  0C88  3000               	movlw	0
  5497  0C89  0021               	movlb	1	; select bank1
  5498  0C8A  00E1               	movwf	map@out_max^(0+128)
  5499  0C8B  301C               	movlw	28
  5500  0C8C  00E2               	movwf	(map@out_max+1)^(0+128)
  5501  0C8D  3042               	movlw	66
  5502  0C8E  00E3               	movwf	(map@out_max+2)^(0+128)
  5503  0C8F  3000               	movlw	0
  5504  0C90  00DE               	movwf	map@out_min^(0+128)
  5505  0C91  3000               	movlw	0
  5506  0C92  00DF               	movwf	(map@out_min+1)^(0+128)
  5507  0C93  3000               	movlw	0
  5508  0C94  00E0               	movwf	(map@out_min+2)^(0+128)
  5509  0C95  30C0               	movlw	192
  5510  0C96  00DB               	movwf	map@in_max^(0+128)
  5511  0C97  307F               	movlw	127
  5512  0C98  00DC               	movwf	(map@in_max+1)^(0+128)
  5513  0C99  3044               	movlw	68
  5514  0C9A  00DD               	movwf	(map@in_max+2)^(0+128)
  5515  0C9B  3000               	movlw	0
  5516  0C9C  00D8               	movwf	map@in_min^(0+128)
  5517  0C9D  3000               	movlw	0
  5518  0C9E  00D9               	movwf	(map@in_min+1)^(0+128)
  5519  0C9F  3000               	movlw	0
  5520  0CA0  00DA               	movwf	(map@in_min+2)^(0+128)
  5521  0CA1  0022               	movlb	2	; select bank2
  5522  0CA2  0862               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5523  0CA3  0021               	movlb	1	; select bank1
  5524  0CA4  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5525  0CA5  0022               	movlb	2	; select bank2
  5526  0CA6  0861               	movf	_knob2_prev^(0+256),w	;volatile
  5527  0CA7  0021               	movlb	1	; select bank1
  5528  0CA8  00A8               	movwf	___awtoft@c^(0+128)
  5529  0CA9  319D  256B  318B   	fcall	___awtoft
  5530  0CAC  0021               	movlb	1	; select bank1
  5531  0CAD  0828               	movf	?___awtoft^(0+128),w
  5532  0CAE  00D5               	movwf	map@x^(0+128)
  5533  0CAF  0829               	movf	(?___awtoft+1)^(0+128),w
  5534  0CB0  00D6               	movwf	(map@x+1)^(0+128)
  5535  0CB1  082A               	movf	(?___awtoft+2)^(0+128),w
  5536  0CB2  00D7               	movwf	(map@x+2)^(0+128)
  5537  0CB3  3196  2618  318B   	fcall	_map
  5538  0CB6  0021               	movlb	1	; select bank1
  5539  0CB7  0855               	movf	?_map^(0+128),w
  5540  0CB8  00E7               	movwf	___fttol@f1^(0+128)
  5541  0CB9  0856               	movf	(?_map+1)^(0+128),w
  5542  0CBA  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5543  0CBB  0857               	movf	(?_map+2)^(0+128),w
  5544  0CBC  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5545  0CBD  3188  2008  318B   	fcall	___fttol
  5546  0CC0  0021               	movlb	1	; select bank1
  5547  0CC1  0868               	movf	(?___fttol^(0+128)+1),w
  5548  0CC2  0024               	movlb	4	; select bank4
  5549  0CC3  00DD               	movwf	(main@i+1)^(0+512)
  5550  0CC4  0021               	movlb	1	; select bank1
  5551  0CC5  0867               	movf	?___fttol^(0+128),w
  5552  0CC6  0024               	movlb	4	; select bank4
  5553  0CC7  00DC               	movwf	main@i^(0+512)
  5554                           
  5555                           ;main.c: 202: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5556  0CC8  085C               	movf	main@i^(0+512),w
  5557  0CC9  3E01               	addlw	1
  5558  0CCA  3AFF               	xorlw	255
  5559  0CCB  3E01               	addlw	1
  5560  0CCC  0023               	movlb	3	; select bank3
  5561  0CCD  0769               	addwf	_B25kLength^(0+384),w
  5562  0CCE  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5563  0CCF  0086               	movwf	6
  5564  0CD0  3002               	movlw	2	; select bank4/5
  5565  0CD1  0087               	movwf	7
  5566  0CD2  0801               	movf	1,w
  5567  0CD3  0022               	movlb	2	; select bank2
  5568  0CD4  00C2               	movwf	??_main^(0+256)
  5569  0CD5  01C3               	clrf	(??_main^(0+256)+1)
  5570  0CD6  0842               	movf	??_main^(0+256),w
  5571  0CD7  0025               	movlb	5	; select bank5
  5572  0CD8  0098               	movwf	24	;volatile
  5573  0CD9  0022               	movlb	2	; select bank2
  5574  0CDA  0843               	movf	(??_main+1)^(0+256),w
  5575  0CDB  0025               	movlb	5	; select bank5
  5576  0CDC  0099               	movwf	25	;volatile
  5577                           
  5578                           ;main.c: 203: CCPR3 = (int)B25k[i];
  5579  0CDD  0024               	movlb	4	; select bank4
  5580  0CDE  085C               	movf	main@i^(0+512),w
  5581  0CDF  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5582  0CE0  0086               	movwf	6
  5583  0CE1  3002               	movlw	2	; select bank4/5
  5584  0CE2  0087               	movwf	7
  5585  0CE3  0801               	movf	1,w
  5586  0CE4  0022               	movlb	2	; select bank2
  5587  0CE5  00C2               	movwf	??_main^(0+256)
  5588  0CE6  01C3               	clrf	(??_main^(0+256)+1)
  5589  0CE7  0842               	movf	??_main^(0+256),w
  5590  0CE8  0026               	movlb	6	; select bank6
  5591  0CE9  0091               	movwf	17	;volatile
  5592  0CEA  0022               	movlb	2	; select bank2
  5593  0CEB  0843               	movf	(??_main+1)^(0+256),w
  5594  0CEC  0026               	movlb	6	; select bank6
  5595  0CED  0092               	movwf	18	;volatile
  5596  0CEE                     l6607:	
  5597                           
  5598                           ;main.c: 204: }
  5599                           ;main.c: 232: if (bottom_push_state == 5) {
  5600  0CEE  3005               	movlw	5
  5601  0CEF  0020               	movlb	0	; select bank0
  5602  0CF0  0660               	xorwf	_bottom_push_state,w
  5603  0CF1  0461               	iorwf	_bottom_push_state+1,w
  5604  0CF2  1D03               	btfss	3,2
  5605  0CF3  2D57               	goto	l6619
  5606                           
  5607                           ;main.c: 233: if (knob3_prev != 1023) {
  5608  0CF4  0022               	movlb	2	; select bank2
  5609  0CF5  0A63               	incf	_knob3_prev^(0+256),w	;volatile
  5610  0CF6  3003               	movlw	3
  5611  0CF7  1903               	skipnz
  5612  0CF8  0664               	xorwf	(_knob3_prev+1)^(0+256),w	;volatile
  5613  0CF9  1903               	btfsc	3,2
  5614  0CFA  2E68               	goto	l6647
  5615                           
  5616                           ;main.c: 234: knob3_prev = 1023;
  5617  0CFB  30FF               	movlw	255
  5618  0CFC  00E3               	movwf	_knob3_prev^(0+256)	;volatile
  5619  0CFD  3003               	movlw	3
  5620  0CFE  00E4               	movwf	(_knob3_prev^(0+256)+1)	;volatile
  5621                           
  5622                           ;main.c: 236: int i = (int) map(knob3_prev, 0, 1023, 16, 0);
  5623  0CFF  3000               	movlw	0
  5624  0D00  0021               	movlb	1	; select bank1
  5625  0D01  00E1               	movwf	map@out_max^(0+128)
  5626  0D02  3000               	movlw	0
  5627  0D03  00E2               	movwf	(map@out_max+1)^(0+128)
  5628  0D04  3000               	movlw	0
  5629  0D05  00E3               	movwf	(map@out_max+2)^(0+128)
  5630  0D06  3000               	movlw	0
  5631  0D07  00DE               	movwf	map@out_min^(0+128)
  5632  0D08  3080               	movlw	128
  5633  0D09  00DF               	movwf	(map@out_min+1)^(0+128)
  5634  0D0A  3041               	movlw	65
  5635  0D0B  00E0               	movwf	(map@out_min+2)^(0+128)
  5636  0D0C  30C0               	movlw	192
  5637  0D0D  00DB               	movwf	map@in_max^(0+128)
  5638  0D0E  307F               	movlw	127
  5639  0D0F  00DC               	movwf	(map@in_max+1)^(0+128)
  5640  0D10  3044               	movlw	68
  5641  0D11  00DD               	movwf	(map@in_max+2)^(0+128)
  5642  0D12  3000               	movlw	0
  5643  0D13  00D8               	movwf	map@in_min^(0+128)
  5644  0D14  3000               	movlw	0
  5645  0D15  00D9               	movwf	(map@in_min+1)^(0+128)
  5646  0D16  3000               	movlw	0
  5647  0D17  00DA               	movwf	(map@in_min+2)^(0+128)
  5648  0D18  0022               	movlb	2	; select bank2
  5649  0D19  0864               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5650  0D1A  0021               	movlb	1	; select bank1
  5651  0D1B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5652  0D1C  0022               	movlb	2	; select bank2
  5653  0D1D  0863               	movf	_knob3_prev^(0+256),w	;volatile
  5654  0D1E  0021               	movlb	1	; select bank1
  5655  0D1F  00A8               	movwf	___awtoft@c^(0+128)
  5656  0D20  319D  256B  318B   	fcall	___awtoft
  5657  0D23  0021               	movlb	1	; select bank1
  5658  0D24  0828               	movf	?___awtoft^(0+128),w
  5659  0D25  00D5               	movwf	map@x^(0+128)
  5660  0D26  0829               	movf	(?___awtoft+1)^(0+128),w
  5661  0D27  00D6               	movwf	(map@x+1)^(0+128)
  5662  0D28  082A               	movf	(?___awtoft+2)^(0+128),w
  5663  0D29  00D7               	movwf	(map@x+2)^(0+128)
  5664  0D2A  3196  2618  318B   	fcall	_map
  5665  0D2D  0021               	movlb	1	; select bank1
  5666  0D2E  0855               	movf	?_map^(0+128),w
  5667  0D2F  00E7               	movwf	___fttol@f1^(0+128)
  5668  0D30  0856               	movf	(?_map+1)^(0+128),w
  5669  0D31  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5670  0D32  0857               	movf	(?_map+2)^(0+128),w
  5671  0D33  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5672  0D34  3188  2008  318B   	fcall	___fttol
  5673  0D37  0021               	movlb	1	; select bank1
  5674  0D38  0868               	movf	(?___fttol^(0+128)+1),w
  5675  0D39  0024               	movlb	4	; select bank4
  5676  0D3A  00DF               	movwf	(main@i_394+1)^(0+512)
  5677  0D3B  0021               	movlb	1	; select bank1
  5678  0D3C  0867               	movf	?___fttol^(0+128),w
  5679  0D3D  0024               	movlb	4	; select bank4
  5680  0D3E  00DE               	movwf	main@i_394^(0+512)
  5681                           
  5682                           ;main.c: 237: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5683  0D3F  085E               	movf	main@i_394^(0+512),w
  5684  0D40  3E01               	addlw	1
  5685  0D41  3AFF               	xorlw	255
  5686  0D42  3E01               	addlw	1
  5687  0D43  0023               	movlb	3	; select bank3
  5688  0D44  0769               	addwf	_B25kLength^(0+384),w
  5689  0D45  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5690  0D46  0086               	movwf	6
  5691  0D47  3002               	movlw	2	; select bank4/5
  5692  0D48  0087               	movwf	7
  5693  0D49  0801               	movf	1,w
  5694  0D4A  0022               	movlb	2	; select bank2
  5695  0D4B  00C2               	movwf	??_main^(0+256)
  5696  0D4C  01C3               	clrf	(??_main^(0+256)+1)
  5697  0D4D  0842               	movf	??_main^(0+256),w
  5698  0D4E  0026               	movlb	6	; select bank6
  5699  0D4F  0098               	movwf	24	;volatile
  5700  0D50  0022               	movlb	2	; select bank2
  5701  0D51  0843               	movf	(??_main+1)^(0+256),w
  5702  0D52  0026               	movlb	6	; select bank6
  5703  0D53  0099               	movwf	25	;volatile
  5704                           
  5705                           ;main.c: 238: CCPR5 = (int) B25k[i];
  5706  0D54  0024               	movlb	4	; select bank4
  5707  0D55  085E               	movf	main@i_394^(0+512),w
  5708  0D56  2E59               	goto	L2
  5709  0D57                     l6619:	
  5710                           ;main.c: 239: }
  5711                           ;main.c: 240: } else if (feedback_state == 1) {
  5712                           
  5713  0D57  0022               	movlb	2	; select bank2
  5714  0D58  036A               	decf	_feedback_state^(0+256),w	;volatile
  5715  0D59  1D03               	btfss	3,2
  5716  0D5A  2DBC               	goto	l6633
  5717                           
  5718                           ;main.c: 241: if (knob3_prev != 0) {
  5719  0D5B  0863               	movf	_knob3_prev^(0+256),w	;volatile
  5720  0D5C  0464               	iorwf	(_knob3_prev+1)^(0+256),w	;volatile
  5721  0D5D  1903               	btfsc	3,2
  5722  0D5E  2E68               	goto	l6647
  5723                           
  5724                           ;main.c: 242: knob3_prev = 0;
  5725  0D5F  01E3               	clrf	_knob3_prev^(0+256)	;volatile
  5726  0D60  01E4               	clrf	(_knob3_prev+1)^(0+256)	;volatile
  5727                           
  5728                           ;main.c: 243: feedbackTriggered = 1;
  5729  0D61  0023               	movlb	3	; select bank3
  5730  0D62  01D6               	clrf	_feedbackTriggered^(0+384)
  5731  0D63  0AD6               	incf	_feedbackTriggered^(0+384),f
  5732                           
  5733                           ;main.c: 245: int i = (int) map(knob3_prev, 0, 1023, 25, 0);
  5734  0D64  3000               	movlw	0
  5735  0D65  0021               	movlb	1	; select bank1
  5736  0D66  00E1               	movwf	map@out_max^(0+128)
  5737  0D67  3000               	movlw	0
  5738  0D68  00E2               	movwf	(map@out_max+1)^(0+128)
  5739  0D69  3000               	movlw	0
  5740  0D6A  00E3               	movwf	(map@out_max+2)^(0+128)
  5741  0D6B  3000               	movlw	0
  5742  0D6C  00DE               	movwf	map@out_min^(0+128)
  5743  0D6D  30C8               	movlw	200
  5744  0D6E  00DF               	movwf	(map@out_min+1)^(0+128)
  5745  0D6F  3041               	movlw	65
  5746  0D70  00E0               	movwf	(map@out_min+2)^(0+128)
  5747  0D71  30C0               	movlw	192
  5748  0D72  00DB               	movwf	map@in_max^(0+128)
  5749  0D73  307F               	movlw	127
  5750  0D74  00DC               	movwf	(map@in_max+1)^(0+128)
  5751  0D75  3044               	movlw	68
  5752  0D76  00DD               	movwf	(map@in_max+2)^(0+128)
  5753  0D77  3000               	movlw	0
  5754  0D78  00D8               	movwf	map@in_min^(0+128)
  5755  0D79  3000               	movlw	0
  5756  0D7A  00D9               	movwf	(map@in_min+1)^(0+128)
  5757  0D7B  3000               	movlw	0
  5758  0D7C  00DA               	movwf	(map@in_min+2)^(0+128)
  5759  0D7D  0022               	movlb	2	; select bank2
  5760  0D7E  0864               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5761  0D7F  0021               	movlb	1	; select bank1
  5762  0D80  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5763  0D81  0022               	movlb	2	; select bank2
  5764  0D82  0863               	movf	_knob3_prev^(0+256),w	;volatile
  5765  0D83  0021               	movlb	1	; select bank1
  5766  0D84  00A8               	movwf	___awtoft@c^(0+128)
  5767  0D85  319D  256B  318B   	fcall	___awtoft
  5768  0D88  0021               	movlb	1	; select bank1
  5769  0D89  0828               	movf	?___awtoft^(0+128),w
  5770  0D8A  00D5               	movwf	map@x^(0+128)
  5771  0D8B  0829               	movf	(?___awtoft+1)^(0+128),w
  5772  0D8C  00D6               	movwf	(map@x+1)^(0+128)
  5773  0D8D  082A               	movf	(?___awtoft+2)^(0+128),w
  5774  0D8E  00D7               	movwf	(map@x+2)^(0+128)
  5775  0D8F  3196  2618  318B   	fcall	_map
  5776  0D92  0021               	movlb	1	; select bank1
  5777  0D93  0855               	movf	?_map^(0+128),w
  5778  0D94  00E7               	movwf	___fttol@f1^(0+128)
  5779  0D95  0856               	movf	(?_map+1)^(0+128),w
  5780  0D96  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5781  0D97  0857               	movf	(?_map+2)^(0+128),w
  5782  0D98  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5783  0D99  3188  2008  318B   	fcall	___fttol
  5784  0D9C  0021               	movlb	1	; select bank1
  5785  0D9D  0868               	movf	(?___fttol^(0+128)+1),w
  5786  0D9E  0024               	movlb	4	; select bank4
  5787  0D9F  00E1               	movwf	(main@i_395+1)^(0+512)
  5788  0DA0  0021               	movlb	1	; select bank1
  5789  0DA1  0867               	movf	?___fttol^(0+128),w
  5790  0DA2  0024               	movlb	4	; select bank4
  5791  0DA3  00E0               	movwf	main@i_395^(0+512)
  5792                           
  5793                           ;main.c: 246: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5794  0DA4  0860               	movf	main@i_395^(0+512),w
  5795  0DA5  3E01               	addlw	1
  5796  0DA6  3AFF               	xorlw	255
  5797  0DA7  3E01               	addlw	1
  5798  0DA8  0023               	movlb	3	; select bank3
  5799  0DA9  0769               	addwf	_B25kLength^(0+384),w
  5800  0DAA  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5801  0DAB  0086               	movwf	6
  5802  0DAC  3002               	movlw	2	; select bank4/5
  5803  0DAD  0087               	movwf	7
  5804  0DAE  0801               	movf	1,w
  5805  0DAF  0022               	movlb	2	; select bank2
  5806  0DB0  00C2               	movwf	??_main^(0+256)
  5807  0DB1  01C3               	clrf	(??_main^(0+256)+1)
  5808  0DB2  0842               	movf	??_main^(0+256),w
  5809  0DB3  0026               	movlb	6	; select bank6
  5810  0DB4  0098               	movwf	24	;volatile
  5811  0DB5  0022               	movlb	2	; select bank2
  5812  0DB6  0843               	movf	(??_main+1)^(0+256),w
  5813  0DB7  0026               	movlb	6	; select bank6
  5814  0DB8  0099               	movwf	25	;volatile
  5815                           
  5816                           ;main.c: 247: CCPR5 = (int) B25k[i];
  5817  0DB9  0024               	movlb	4	; select bank4
  5818  0DBA  0860               	movf	main@i_395^(0+512),w
  5819  0DBB  2E59               	goto	L2
  5820  0DBC                     l6633:	
  5821                           ;main.c: 248: }
  5822                           ;main.c: 249: } else {
  5823                           
  5824                           
  5825                           ;main.c: 252: if ((knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) || fee
      +                          dbackTriggered == 1) {
  5826  0DBC  0022               	movlb	2	; select bank2
  5827  0DBD  0963               	comf	_knob3_prev^(0+256),w	;volatile
  5828  0DBE  00C2               	movwf	??_main^(0+256)
  5829  0DBF  0964               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5830  0DC0  00C3               	movwf	(??_main^(0+256)+1)
  5831  0DC1  0AC2               	incf	??_main^(0+256),f
  5832  0DC2  1903               	skipnz
  5833  0DC3  0AC3               	incf	(??_main^(0+256)+1),f
  5834  0DC4  0023               	movlb	3	; select bank3
  5835  0DC5  0848               	movf	_knob_3_pos^(0+384),w
  5836  0DC6  0022               	movlb	2	; select bank2
  5837  0DC7  0742               	addwf	??_main^(0+256),w
  5838  0DC8  00C4               	movwf	(??_main+2)^(0+256)
  5839  0DC9  0023               	movlb	3	; select bank3
  5840  0DCA  0849               	movf	(_knob_3_pos+1)^(0+384),w
  5841  0DCB  0022               	movlb	2	; select bank2
  5842  0DCC  3D43               	addwfc	(??_main+1)^(0+256),w
  5843  0DCD  00C5               	movwf	(??_main+3)^(0+256)
  5844  0DCE  0845               	movf	(??_main+3)^(0+256),w
  5845  0DCF  3A80               	xorlw	128
  5846  0DD0  00C6               	movwf	(??_main+4)^(0+256)
  5847  0DD1  3080               	movlw	128
  5848  0DD2  0246               	subwf	(??_main+4)^(0+256),w
  5849  0DD3  1D03               	skipz
  5850  0DD4  2DD7               	goto	u7555
  5851  0DD5  3004               	movlw	4
  5852  0DD6  0244               	subwf	(??_main+2)^(0+256),w
  5853  0DD7                     u7555:	
  5854  0DD7  1803               	skipnc
  5855  0DD8  2DFA               	goto	l6639
  5856  0DD9  0022               	movlb	2	; select bank2
  5857  0DDA  0963               	comf	_knob3_prev^(0+256),w	;volatile
  5858  0DDB  00C2               	movwf	??_main^(0+256)
  5859  0DDC  0964               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5860  0DDD  00C3               	movwf	(??_main^(0+256)+1)
  5861  0DDE  0AC2               	incf	??_main^(0+256),f
  5862  0DDF  1903               	skipnz
  5863  0DE0  0AC3               	incf	(??_main^(0+256)+1),f
  5864  0DE1  0023               	movlb	3	; select bank3
  5865  0DE2  0848               	movf	_knob_3_pos^(0+384),w
  5866  0DE3  0022               	movlb	2	; select bank2
  5867  0DE4  0742               	addwf	??_main^(0+256),w
  5868  0DE5  00C4               	movwf	(??_main+2)^(0+256)
  5869  0DE6  0023               	movlb	3	; select bank3
  5870  0DE7  0849               	movf	(_knob_3_pos+1)^(0+384),w
  5871  0DE8  0022               	movlb	2	; select bank2
  5872  0DE9  3D43               	addwfc	(??_main+1)^(0+256),w
  5873  0DEA  00C5               	movwf	(??_main+3)^(0+256)
  5874  0DEB  0845               	movf	(??_main+3)^(0+256),w
  5875  0DEC  3A80               	xorlw	128
  5876  0DED  00C6               	movwf	(??_main+4)^(0+256)
  5877  0DEE  307F               	movlw	127
  5878  0DEF  0246               	subwf	(??_main+4)^(0+256),w
  5879  0DF0  1D03               	skipz
  5880  0DF1  2DF4               	goto	u7565
  5881  0DF2  30FD               	movlw	253
  5882  0DF3  0244               	subwf	(??_main+2)^(0+256),w
  5883  0DF4                     u7565:	
  5884  0DF4  1C03               	skipc
  5885  0DF5  2DFA               	goto	l6639
  5886  0DF6  0023               	movlb	3	; select bank3
  5887  0DF7  0356               	decf	_feedbackTriggered^(0+384),w
  5888  0DF8  1D03               	btfss	3,2
  5889  0DF9  2E68               	goto	l6647
  5890  0DFA                     l6639:	
  5891                           
  5892                           ;main.c: 253: knob3_prev = knob_3_pos;
  5893  0DFA  0023               	movlb	3	; select bank3
  5894  0DFB  0849               	movf	(_knob_3_pos+1)^(0+384),w
  5895  0DFC  0022               	movlb	2	; select bank2
  5896  0DFD  00E4               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5897  0DFE  0023               	movlb	3	; select bank3
  5898  0DFF  0848               	movf	_knob_3_pos^(0+384),w
  5899  0E00  0022               	movlb	2	; select bank2
  5900  0E01  00E3               	movwf	_knob3_prev^(0+256)	;volatile
  5901                           
  5902                           ;main.c: 254: int i = (int) map(knob3_prev, 0, 1023, 18, 0);
  5903  0E02  3000               	movlw	0
  5904  0E03  0021               	movlb	1	; select bank1
  5905  0E04  00E1               	movwf	map@out_max^(0+128)
  5906  0E05  3000               	movlw	0
  5907  0E06  00E2               	movwf	(map@out_max+1)^(0+128)
  5908  0E07  3000               	movlw	0
  5909  0E08  00E3               	movwf	(map@out_max+2)^(0+128)
  5910  0E09  3000               	movlw	0
  5911  0E0A  00DE               	movwf	map@out_min^(0+128)
  5912  0E0B  3090               	movlw	144
  5913  0E0C  00DF               	movwf	(map@out_min+1)^(0+128)
  5914  0E0D  3041               	movlw	65
  5915  0E0E  00E0               	movwf	(map@out_min+2)^(0+128)
  5916  0E0F  30C0               	movlw	192
  5917  0E10  00DB               	movwf	map@in_max^(0+128)
  5918  0E11  307F               	movlw	127
  5919  0E12  00DC               	movwf	(map@in_max+1)^(0+128)
  5920  0E13  3044               	movlw	68
  5921  0E14  00DD               	movwf	(map@in_max+2)^(0+128)
  5922  0E15  3000               	movlw	0
  5923  0E16  00D8               	movwf	map@in_min^(0+128)
  5924  0E17  3000               	movlw	0
  5925  0E18  00D9               	movwf	(map@in_min+1)^(0+128)
  5926  0E19  3000               	movlw	0
  5927  0E1A  00DA               	movwf	(map@in_min+2)^(0+128)
  5928  0E1B  0022               	movlb	2	; select bank2
  5929  0E1C  0864               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5930  0E1D  0021               	movlb	1	; select bank1
  5931  0E1E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5932  0E1F  0022               	movlb	2	; select bank2
  5933  0E20  0863               	movf	_knob3_prev^(0+256),w	;volatile
  5934  0E21  0021               	movlb	1	; select bank1
  5935  0E22  00A8               	movwf	___awtoft@c^(0+128)
  5936  0E23  319D  256B  318B   	fcall	___awtoft
  5937  0E26  0021               	movlb	1	; select bank1
  5938  0E27  0828               	movf	?___awtoft^(0+128),w
  5939  0E28  00D5               	movwf	map@x^(0+128)
  5940  0E29  0829               	movf	(?___awtoft+1)^(0+128),w
  5941  0E2A  00D6               	movwf	(map@x+1)^(0+128)
  5942  0E2B  082A               	movf	(?___awtoft+2)^(0+128),w
  5943  0E2C  00D7               	movwf	(map@x+2)^(0+128)
  5944  0E2D  3196  2618  318B   	fcall	_map
  5945  0E30  0021               	movlb	1	; select bank1
  5946  0E31  0855               	movf	?_map^(0+128),w
  5947  0E32  00E7               	movwf	___fttol@f1^(0+128)
  5948  0E33  0856               	movf	(?_map+1)^(0+128),w
  5949  0E34  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5950  0E35  0857               	movf	(?_map+2)^(0+128),w
  5951  0E36  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5952  0E37  3188  2008  318B   	fcall	___fttol
  5953  0E3A  0021               	movlb	1	; select bank1
  5954  0E3B  0868               	movf	(?___fttol^(0+128)+1),w
  5955  0E3C  0024               	movlb	4	; select bank4
  5956  0E3D  00E3               	movwf	(main@i_396+1)^(0+512)
  5957  0E3E  0021               	movlb	1	; select bank1
  5958  0E3F  0867               	movf	?___fttol^(0+128),w
  5959  0E40  0024               	movlb	4	; select bank4
  5960  0E41  00E2               	movwf	main@i_396^(0+512)
  5961                           
  5962                           ;main.c: 255: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5963  0E42  0862               	movf	main@i_396^(0+512),w
  5964  0E43  3E01               	addlw	1
  5965  0E44  3AFF               	xorlw	255
  5966  0E45  3E01               	addlw	1
  5967  0E46  0023               	movlb	3	; select bank3
  5968  0E47  0769               	addwf	_B25kLength^(0+384),w
  5969  0E48  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5970  0E49  0086               	movwf	6
  5971  0E4A  3002               	movlw	2	; select bank4/5
  5972  0E4B  0087               	movwf	7
  5973  0E4C  0801               	movf	1,w
  5974  0E4D  0022               	movlb	2	; select bank2
  5975  0E4E  00C2               	movwf	??_main^(0+256)
  5976  0E4F  01C3               	clrf	(??_main^(0+256)+1)
  5977  0E50  0842               	movf	??_main^(0+256),w
  5978  0E51  0026               	movlb	6	; select bank6
  5979  0E52  0098               	movwf	24	;volatile
  5980  0E53  0022               	movlb	2	; select bank2
  5981  0E54  0843               	movf	(??_main+1)^(0+256),w
  5982  0E55  0026               	movlb	6	; select bank6
  5983  0E56  0099               	movwf	25	;volatile
  5984                           
  5985                           ;main.c: 256: CCPR5 = (int) B25k[i];
  5986  0E57  0024               	movlb	4	; select bank4
  5987  0E58  0862               	movf	main@i_396^(0+512),w
  5988  0E59                     L2:	
  5989  0E59  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5990  0E5A  0086               	movwf	6
  5991  0E5B  3002               	movlw	2	; select bank4/5
  5992  0E5C  0087               	movwf	7
  5993  0E5D  0801               	movf	1,w
  5994  0E5E  0022               	movlb	2	; select bank2
  5995  0E5F  00C2               	movwf	??_main^(0+256)
  5996  0E60  01C3               	clrf	(??_main^(0+256)+1)
  5997  0E61  0842               	movf	??_main^(0+256),w
  5998  0E62  0026               	movlb	6	; select bank6
  5999  0E63  009C               	movwf	28	;volatile
  6000  0E64  0022               	movlb	2	; select bank2
  6001  0E65  0843               	movf	(??_main+1)^(0+256),w
  6002  0E66  0026               	movlb	6	; select bank6
  6003  0E67  009D               	movwf	29	;volatile
  6004  0E68                     l6647:	
  6005                           
  6006                           ;main.c: 257: }
  6007                           ;main.c: 269: }
  6008                           ;main.c: 279: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  6009  0E68  0022               	movlb	2	; select bank2
  6010  0E69  0965               	comf	_knob4_prev^(0+256),w	;volatile
  6011  0E6A  00C2               	movwf	??_main^(0+256)
  6012  0E6B  0966               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6013  0E6C  00C3               	movwf	(??_main^(0+256)+1)
  6014  0E6D  0AC2               	incf	??_main^(0+256),f
  6015  0E6E  1903               	skipnz
  6016  0E6F  0AC3               	incf	(??_main^(0+256)+1),f
  6017  0E70  0023               	movlb	3	; select bank3
  6018  0E71  084A               	movf	_knob_4_pos^(0+384),w
  6019  0E72  0022               	movlb	2	; select bank2
  6020  0E73  0742               	addwf	??_main^(0+256),w
  6021  0E74  00C4               	movwf	(??_main+2)^(0+256)
  6022  0E75  0023               	movlb	3	; select bank3
  6023  0E76  084B               	movf	(_knob_4_pos+1)^(0+384),w
  6024  0E77  0022               	movlb	2	; select bank2
  6025  0E78  3D43               	addwfc	(??_main+1)^(0+256),w
  6026  0E79  00C5               	movwf	(??_main+3)^(0+256)
  6027  0E7A  0845               	movf	(??_main+3)^(0+256),w
  6028  0E7B  3A80               	xorlw	128
  6029  0E7C  00C6               	movwf	(??_main+4)^(0+256)
  6030  0E7D  3080               	movlw	128
  6031  0E7E  0246               	subwf	(??_main+4)^(0+256),w
  6032  0E7F  1D03               	skipz
  6033  0E80  2E83               	goto	u7585
  6034  0E81  3004               	movlw	4
  6035  0E82  0244               	subwf	(??_main+2)^(0+256),w
  6036  0E83                     u7585:	
  6037  0E83  1803               	skipnc
  6038  0E84  2EA2               	goto	l6651
  6039  0E85  0022               	movlb	2	; select bank2
  6040  0E86  0965               	comf	_knob4_prev^(0+256),w	;volatile
  6041  0E87  00C2               	movwf	??_main^(0+256)
  6042  0E88  0966               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  6043  0E89  00C3               	movwf	(??_main^(0+256)+1)
  6044  0E8A  0AC2               	incf	??_main^(0+256),f
  6045  0E8B  1903               	skipnz
  6046  0E8C  0AC3               	incf	(??_main^(0+256)+1),f
  6047  0E8D  0023               	movlb	3	; select bank3
  6048  0E8E  084A               	movf	_knob_4_pos^(0+384),w
  6049  0E8F  0022               	movlb	2	; select bank2
  6050  0E90  0742               	addwf	??_main^(0+256),w
  6051  0E91  00C4               	movwf	(??_main+2)^(0+256)
  6052  0E92  0023               	movlb	3	; select bank3
  6053  0E93  084B               	movf	(_knob_4_pos+1)^(0+384),w
  6054  0E94  0022               	movlb	2	; select bank2
  6055  0E95  3D43               	addwfc	(??_main+1)^(0+256),w
  6056  0E96  00C5               	movwf	(??_main+3)^(0+256)
  6057  0E97  0845               	movf	(??_main+3)^(0+256),w
  6058  0E98  3A80               	xorlw	128
  6059  0E99  00C6               	movwf	(??_main+4)^(0+256)
  6060  0E9A  307F               	movlw	127
  6061  0E9B  0246               	subwf	(??_main+4)^(0+256),w
  6062  0E9C  1D03               	skipz
  6063  0E9D  2EA0               	goto	u7595
  6064  0E9E  30FD               	movlw	253
  6065  0E9F  0244               	subwf	(??_main+2)^(0+256),w
  6066  0EA0                     u7595:	
  6067  0EA0  1803               	skipnc
  6068  0EA1  2EEA               	goto	l6655
  6069  0EA2                     l6651:	
  6070                           
  6071                           ;main.c: 280: knob4_prev = knob_4_pos;
  6072  0EA2  0023               	movlb	3	; select bank3
  6073  0EA3  084B               	movf	(_knob_4_pos+1)^(0+384),w
  6074  0EA4  0022               	movlb	2	; select bank2
  6075  0EA5  00E6               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  6076  0EA6  0023               	movlb	3	; select bank3
  6077  0EA7  084A               	movf	_knob_4_pos^(0+384),w
  6078  0EA8  0022               	movlb	2	; select bank2
  6079  0EA9  00E5               	movwf	_knob4_prev^(0+256)	;volatile
  6080                           
  6081                           ;main.c: 282: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  6082  0EAA  3000               	movlw	0
  6083  0EAB  0021               	movlb	1	; select bank1
  6084  0EAC  00E1               	movwf	map@out_max^(0+128)
  6085  0EAD  303C               	movlw	60
  6086  0EAE  00E2               	movwf	(map@out_max+1)^(0+128)
  6087  0EAF  3042               	movlw	66
  6088  0EB0  00E3               	movwf	(map@out_max+2)^(0+128)
  6089  0EB1  3000               	movlw	0
  6090  0EB2  00DE               	movwf	map@out_min^(0+128)
  6091  0EB3  3040               	movlw	64
  6092  0EB4  00DF               	movwf	(map@out_min+1)^(0+128)
  6093  0EB5  3040               	movlw	64
  6094  0EB6  00E0               	movwf	(map@out_min+2)^(0+128)
  6095  0EB7  30C0               	movlw	192
  6096  0EB8  00DB               	movwf	map@in_max^(0+128)
  6097  0EB9  307F               	movlw	127
  6098  0EBA  00DC               	movwf	(map@in_max+1)^(0+128)
  6099  0EBB  3044               	movlw	68
  6100  0EBC  00DD               	movwf	(map@in_max+2)^(0+128)
  6101  0EBD  3000               	movlw	0
  6102  0EBE  00D8               	movwf	map@in_min^(0+128)
  6103  0EBF  3000               	movlw	0
  6104  0EC0  00D9               	movwf	(map@in_min+1)^(0+128)
  6105  0EC1  3000               	movlw	0
  6106  0EC2  00DA               	movwf	(map@in_min+2)^(0+128)
  6107  0EC3  0022               	movlb	2	; select bank2
  6108  0EC4  0866               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  6109  0EC5  0021               	movlb	1	; select bank1
  6110  0EC6  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6111  0EC7  0022               	movlb	2	; select bank2
  6112  0EC8  0865               	movf	_knob4_prev^(0+256),w	;volatile
  6113  0EC9  0021               	movlb	1	; select bank1
  6114  0ECA  00A8               	movwf	___awtoft@c^(0+128)
  6115  0ECB  319D  256B  318B   	fcall	___awtoft
  6116  0ECE  0021               	movlb	1	; select bank1
  6117  0ECF  0828               	movf	?___awtoft^(0+128),w
  6118  0ED0  00D5               	movwf	map@x^(0+128)
  6119  0ED1  0829               	movf	(?___awtoft+1)^(0+128),w
  6120  0ED2  00D6               	movwf	(map@x+1)^(0+128)
  6121  0ED3  082A               	movf	(?___awtoft+2)^(0+128),w
  6122  0ED4  00D7               	movwf	(map@x+2)^(0+128)
  6123  0ED5  3196  2618  318B   	fcall	_map
  6124  0ED8  0021               	movlb	1	; select bank1
  6125  0ED9  0855               	movf	?_map^(0+128),w
  6126  0EDA  00E7               	movwf	___fttol@f1^(0+128)
  6127  0EDB  0856               	movf	(?_map+1)^(0+128),w
  6128  0EDC  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6129  0EDD  0857               	movf	(?_map+2)^(0+128),w
  6130  0EDE  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6131  0EDF  3188  2008  318B   	fcall	___fttol
  6132  0EE2  0021               	movlb	1	; select bank1
  6133  0EE3  0868               	movf	(?___fttol^(0+128)+1),w
  6134  0EE4  0023               	movlb	3	; select bank3
  6135  0EE5  00DE               	movwf	(_mod_delay_time+1)^(0+384)
  6136  0EE6  0021               	movlb	1	; select bank1
  6137  0EE7  0867               	movf	?___fttol^(0+128),w
  6138  0EE8  0023               	movlb	3	; select bank3
  6139  0EE9  00DD               	movwf	_mod_delay_time^(0+384)
  6140  0EEA                     l6655:	
  6141                           
  6142                           ;main.c: 283: }
  6143                           ;main.c: 291: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6144  0EEA  0022               	movlb	2	; select bank2
  6145  0EEB  0967               	comf	_knob5_prev^(0+256),w	;volatile
  6146  0EEC  00C2               	movwf	??_main^(0+256)
  6147  0EED  0968               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6148  0EEE  00C3               	movwf	(??_main^(0+256)+1)
  6149  0EEF  0AC2               	incf	??_main^(0+256),f
  6150  0EF0  1903               	skipnz
  6151  0EF1  0AC3               	incf	(??_main^(0+256)+1),f
  6152  0EF2  0023               	movlb	3	; select bank3
  6153  0EF3  084C               	movf	_knob_5_pos^(0+384),w
  6154  0EF4  0022               	movlb	2	; select bank2
  6155  0EF5  0742               	addwf	??_main^(0+256),w
  6156  0EF6  00C4               	movwf	(??_main+2)^(0+256)
  6157  0EF7  0023               	movlb	3	; select bank3
  6158  0EF8  084D               	movf	(_knob_5_pos+1)^(0+384),w
  6159  0EF9  0022               	movlb	2	; select bank2
  6160  0EFA  3D43               	addwfc	(??_main+1)^(0+256),w
  6161  0EFB  00C5               	movwf	(??_main+3)^(0+256)
  6162  0EFC  0845               	movf	(??_main+3)^(0+256),w
  6163  0EFD  3A80               	xorlw	128
  6164  0EFE  00C6               	movwf	(??_main+4)^(0+256)
  6165  0EFF  3080               	movlw	128
  6166  0F00  0246               	subwf	(??_main+4)^(0+256),w
  6167  0F01  1D03               	skipz
  6168  0F02  2F05               	goto	u7605
  6169  0F03  3004               	movlw	4
  6170  0F04  0244               	subwf	(??_main+2)^(0+256),w
  6171  0F05                     u7605:	
  6172  0F05  1803               	skipnc
  6173  0F06  2F24               	goto	l6659
  6174  0F07  0022               	movlb	2	; select bank2
  6175  0F08  0967               	comf	_knob5_prev^(0+256),w	;volatile
  6176  0F09  00C2               	movwf	??_main^(0+256)
  6177  0F0A  0968               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6178  0F0B  00C3               	movwf	(??_main^(0+256)+1)
  6179  0F0C  0AC2               	incf	??_main^(0+256),f
  6180  0F0D  1903               	skipnz
  6181  0F0E  0AC3               	incf	(??_main^(0+256)+1),f
  6182  0F0F  0023               	movlb	3	; select bank3
  6183  0F10  084C               	movf	_knob_5_pos^(0+384),w
  6184  0F11  0022               	movlb	2	; select bank2
  6185  0F12  0742               	addwf	??_main^(0+256),w
  6186  0F13  00C4               	movwf	(??_main+2)^(0+256)
  6187  0F14  0023               	movlb	3	; select bank3
  6188  0F15  084D               	movf	(_knob_5_pos+1)^(0+384),w
  6189  0F16  0022               	movlb	2	; select bank2
  6190  0F17  3D43               	addwfc	(??_main+1)^(0+256),w
  6191  0F18  00C5               	movwf	(??_main+3)^(0+256)
  6192  0F19  0845               	movf	(??_main+3)^(0+256),w
  6193  0F1A  3A80               	xorlw	128
  6194  0F1B  00C6               	movwf	(??_main+4)^(0+256)
  6195  0F1C  307F               	movlw	127
  6196  0F1D  0246               	subwf	(??_main+4)^(0+256),w
  6197  0F1E  1D03               	skipz
  6198  0F1F  2F22               	goto	u7615
  6199  0F20  30FD               	movlw	253
  6200  0F21  0244               	subwf	(??_main+2)^(0+256),w
  6201  0F22                     u7615:	
  6202  0F22  1803               	skipnc
  6203  0F23  2F6C               	goto	l6663
  6204  0F24                     l6659:	
  6205                           
  6206                           ;main.c: 292: knob5_prev = knob_5_pos;
  6207  0F24  0023               	movlb	3	; select bank3
  6208  0F25  084D               	movf	(_knob_5_pos+1)^(0+384),w
  6209  0F26  0022               	movlb	2	; select bank2
  6210  0F27  00E8               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  6211  0F28  0023               	movlb	3	; select bank3
  6212  0F29  084C               	movf	_knob_5_pos^(0+384),w
  6213  0F2A  0022               	movlb	2	; select bank2
  6214  0F2B  00E7               	movwf	_knob5_prev^(0+256)	;volatile
  6215                           
  6216                           ;main.c: 293: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6217  0F2C  3000               	movlw	0
  6218  0F2D  0021               	movlb	1	; select bank1
  6219  0F2E  00E1               	movwf	map@out_max^(0+128)
  6220  0F2F  3000               	movlw	0
  6221  0F30  00E2               	movwf	(map@out_max+1)^(0+128)
  6222  0F31  3000               	movlw	0
  6223  0F32  00E3               	movwf	(map@out_max+2)^(0+128)
  6224  0F33  3060               	movlw	96
  6225  0F34  00DE               	movwf	map@out_min^(0+128)
  6226  0F35  309F               	movlw	159
  6227  0F36  00DF               	movwf	(map@out_min+1)^(0+128)
  6228  0F37  3044               	movlw	68
  6229  0F38  00E0               	movwf	(map@out_min+2)^(0+128)
  6230  0F39  30C0               	movlw	192
  6231  0F3A  00DB               	movwf	map@in_max^(0+128)
  6232  0F3B  307F               	movlw	127
  6233  0F3C  00DC               	movwf	(map@in_max+1)^(0+128)
  6234  0F3D  3044               	movlw	68
  6235  0F3E  00DD               	movwf	(map@in_max+2)^(0+128)
  6236  0F3F  3000               	movlw	0
  6237  0F40  00D8               	movwf	map@in_min^(0+128)
  6238  0F41  3000               	movlw	0
  6239  0F42  00D9               	movwf	(map@in_min+1)^(0+128)
  6240  0F43  3000               	movlw	0
  6241  0F44  00DA               	movwf	(map@in_min+2)^(0+128)
  6242  0F45  0022               	movlb	2	; select bank2
  6243  0F46  0868               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6244  0F47  0021               	movlb	1	; select bank1
  6245  0F48  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6246  0F49  0022               	movlb	2	; select bank2
  6247  0F4A  0867               	movf	_knob5_prev^(0+256),w	;volatile
  6248  0F4B  0021               	movlb	1	; select bank1
  6249  0F4C  00A8               	movwf	___awtoft@c^(0+128)
  6250  0F4D  319D  256B  318B   	fcall	___awtoft
  6251  0F50  0021               	movlb	1	; select bank1
  6252  0F51  0828               	movf	?___awtoft^(0+128),w
  6253  0F52  00D5               	movwf	map@x^(0+128)
  6254  0F53  0829               	movf	(?___awtoft+1)^(0+128),w
  6255  0F54  00D6               	movwf	(map@x+1)^(0+128)
  6256  0F55  082A               	movf	(?___awtoft+2)^(0+128),w
  6257  0F56  00D7               	movwf	(map@x+2)^(0+128)
  6258  0F57  3196  2618  318B   	fcall	_map
  6259  0F5A  0021               	movlb	1	; select bank1
  6260  0F5B  0855               	movf	?_map^(0+128),w
  6261  0F5C  00E7               	movwf	___fttol@f1^(0+128)
  6262  0F5D  0856               	movf	(?_map+1)^(0+128),w
  6263  0F5E  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6264  0F5F  0857               	movf	(?_map+2)^(0+128),w
  6265  0F60  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6266  0F61  3188  2008  318B   	fcall	___fttol
  6267  0F64  0021               	movlb	1	; select bank1
  6268  0F65  0868               	movf	(?___fttol^(0+128)+1),w
  6269  0F66  0023               	movlb	3	; select bank3
  6270  0F67  00B7               	movwf	(_adjusted_pot_value+1)^(0+384)
  6271  0F68  0021               	movlb	1	; select bank1
  6272  0F69  0867               	movf	?___fttol^(0+128),w
  6273  0F6A  0023               	movlb	3	; select bank3
  6274  0F6B  00B6               	movwf	_adjusted_pot_value^(0+384)
  6275  0F6C                     l6663:	
  6276                           
  6277                           ;main.c: 295: }
  6278                           ;main.c: 298: if (delay_time_changed == 1) {
  6279  0F6C  0023               	movlb	3	; select bank3
  6280  0F6D  035B               	decf	_delay_time_changed^(0+384),w
  6281  0F6E  045C               	iorwf	(_delay_time_changed+1)^(0+384),w
  6282  0F6F  1D03               	btfss	3,2
  6283  0F70  2B59               	goto	l6557
  6284                           
  6285                           ;main.c: 299: delay_time = baseline_delay_time;
  6286  0F71  0020               	movlb	0	; select bank0
  6287  0F72  085B               	movf	_baseline_delay_time+3,w	;volatile
  6288  0F73  00DF               	movwf	_delay_time+3	;volatile
  6289  0F74  085A               	movf	_baseline_delay_time+2,w	;volatile
  6290  0F75  00DE               	movwf	_delay_time+2	;volatile
  6291  0F76  0859               	movf	_baseline_delay_time+1,w	;volatile
  6292  0F77  00DD               	movwf	_delay_time+1	;volatile
  6293  0F78  0858               	movf	_baseline_delay_time,w	;volatile
  6294  0F79  00DC               	movwf	_delay_time	;volatile
  6295                           
  6296                           ;main.c: 300: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6297  0F7A  0859               	movf	_baseline_delay_time+1,w	;volatile
  6298  0F7B  0022               	movlb	2	; select bank2
  6299  0F7C  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  6300  0F7D  0020               	movlb	0	; select bank0
  6301  0F7E  0858               	movf	_baseline_delay_time,w	;volatile
  6302  0F7F  0022               	movlb	2	; select bank2
  6303  0F80  00B6               	movwf	set_subdivision@x^(0+256)
  6304  0F81  0020               	movlb	0	; select bank0
  6305  0F82  0865               	movf	_top_push_state+1,w
  6306  0F83  0022               	movlb	2	; select bank2
  6307  0F84  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  6308  0F85  0020               	movlb	0	; select bank0
  6309  0F86  0864               	movf	_top_push_state,w
  6310  0F87  0022               	movlb	2	; select bank2
  6311  0F88  00B8               	movwf	set_subdivision@y^(0+256)
  6312  0F89  3188  20A7  318B   	fcall	_set_subdivision
  6313  0F8C  0022               	movlb	2	; select bank2
  6314  0F8D  0836               	movf	?_set_subdivision^(0+256),w
  6315  0F8E  0020               	movlb	0	; select bank0
  6316  0F8F  00DC               	movwf	_delay_time	;volatile
  6317  0F90  0022               	movlb	2	; select bank2
  6318  0F91  0837               	movf	(?_set_subdivision+1)^(0+256),w
  6319  0F92  0020               	movlb	0	; select bank0
  6320  0F93  00DD               	movwf	_delay_time+1	;volatile
  6321  0F94  0D89               	rlf	9,f
  6322  0F95  3B89               	subwfb	9,f
  6323  0F96  0989               	comf	9,f
  6324  0F97  00DE               	movwf	_delay_time+2	;volatile
  6325  0F98  00DF               	movwf	_delay_time+3	;volatile
  6326                           
  6327                           ;main.c: 301: reset_sub_delay = 1;
  6328  0F99  3001               	movlw	1
  6329  0F9A  0023               	movlb	3	; select bank3
  6330  0F9B  00D0               	movwf	_reset_sub_delay^(0+384)
  6331  0F9C  3000               	movlw	0
  6332  0F9D  00D1               	movwf	(_reset_sub_delay^(0+384)+1)
  6333                           
  6334                           ;main.c: 302: delayfound = 0;
  6335  0F9E  01C0               	clrf	_delayfound^(0+384)
  6336  0F9F  01C1               	clrf	(_delayfound+1)^(0+384)
  6337                           
  6338                           ;main.c: 303: delay_counter = 0;
  6339  0FA0  0022               	movlb	2	; select bank2
  6340  0FA1  01D1               	clrf	_delay_counter^(0+256)	;volatile
  6341  0FA2  01D2               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6342  0FA3                     l6681:	
  6343                           ;main.c: 305: while (delayfound == 0) {
  6344                           
  6345  0FA3  0023               	movlb	3	; select bank3
  6346  0FA4  0840               	movf	_delayfound^(0+384),w
  6347  0FA5  0441               	iorwf	(_delayfound+1)^(0+384),w
  6348  0FA6  1D03               	btfss	3,2
  6349  0FA7  2FFD               	goto	l6683
  6350                           
  6351                           ;main.c: 306: if (delayArray[delay_counter] <= delay_time * 2) {
  6352  0FA8  0022               	movlb	2	; select bank2
  6353  0FA9  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6354  0FAA  00C3               	movwf	(??_main^(0+256)+1)
  6355  0FAB  0851               	movf	_delay_counter^(0+256),w	;volatile
  6356  0FAC  00C2               	movwf	??_main^(0+256)
  6357  0FAD  35C2               	lslf	??_main^(0+256),f
  6358  0FAE  0DC3               	rlf	(??_main^(0+256)+1),f
  6359  0FAF  30E8               	movlw	232
  6360  0FB0  00C4               	movwf	(??_main+2)^(0+256)
  6361  0FB1  3023               	movlw	35
  6362  0FB2  00C5               	movwf	((??_main+2)^(0+256)+1)
  6363  0FB3  0842               	movf	??_main^(0+256),w
  6364  0FB4  0744               	addwf	(??_main+2)^(0+256),w
  6365  0FB5  0086               	movwf	6
  6366  0FB6  0843               	movf	(??_main+1)^(0+256),w
  6367  0FB7  3D45               	addwfc	(??_main+3)^(0+256),w
  6368  0FB8  0087               	movwf	7
  6369  0FB9  3F40               	moviw [0]fsr1
  6370  0FBA  00C6               	movwf	(??_main+4)^(0+256)
  6371  0FBB  3F41               	moviw [1]fsr1
  6372  0FBC  00C7               	movwf	((??_main+4)^(0+256)+1)
  6373  0FBD  0846               	movf	(??_main+4)^(0+256),w
  6374  0FBE  00C8               	movwf	(??_main+6)^(0+256)
  6375  0FBF  0847               	movf	(??_main+5)^(0+256),w
  6376  0FC0  00C9               	movwf	((??_main+6)^(0+256)+1)
  6377  0FC1  3000               	movlw	0
  6378  0FC2  1BC9               	btfsc	((??_main+6)^(0+256)+1),7
  6379  0FC3  30FF               	movlw	255
  6380  0FC4  00CA               	movwf	((??_main+6)^(0+256)+2)
  6381  0FC5  00CB               	movwf	((??_main+6)^(0+256)+3)
  6382  0FC6  0020               	movlb	0	; select bank0
  6383  0FC7  085C               	movf	_delay_time,w	;volatile
  6384  0FC8  0022               	movlb	2	; select bank2
  6385  0FC9  00CC               	movwf	(??_main+10)^(0+256)
  6386  0FCA  0020               	movlb	0	; select bank0
  6387  0FCB  085D               	movf	_delay_time+1,w	;volatile
  6388  0FCC  0022               	movlb	2	; select bank2
  6389  0FCD  00CD               	movwf	((??_main+10)^(0+256)+1)
  6390  0FCE  0020               	movlb	0	; select bank0
  6391  0FCF  085E               	movf	_delay_time+2,w	;volatile
  6392  0FD0  0022               	movlb	2	; select bank2
  6393  0FD1  00CE               	movwf	((??_main+10)^(0+256)+2)
  6394  0FD2  0020               	movlb	0	; select bank0
  6395  0FD3  085F               	movf	_delay_time+3,w	;volatile
  6396  0FD4  0022               	movlb	2	; select bank2
  6397  0FD5  00CF               	movwf	((??_main+10)^(0+256)+3)
  6398  0FD6  3001               	movlw	1
  6399  0FD7                     u7635:	
  6400  0FD7  35CC               	lslf	(??_main+10)^(0+256),f
  6401  0FD8  0DCD               	rlf	((??_main+10)^(0+256)+1),f
  6402  0FD9  0DCE               	rlf	((??_main+10)^(0+256)+2),f
  6403  0FDA  0DCF               	rlf	((??_main+10)^(0+256)+3),f
  6404  0FDB  0B89               	decfsz	9,f
  6405  0FDC  2FD7               	goto	u7635
  6406  0FDD  084F               	movf	(??_main+13)^(0+256),w
  6407  0FDE  3A80               	xorlw	128
  6408  0FDF  00D0               	movwf	(??_main+14)^(0+256)
  6409  0FE0  084B               	movf	(??_main+9)^(0+256),w
  6410  0FE1  3A80               	xorlw	128
  6411  0FE2  0250               	subwf	(??_main+14)^(0+256),w
  6412  0FE3  1D03               	skipz
  6413  0FE4  2FEF               	goto	u7643
  6414  0FE5  084A               	movf	(??_main+8)^(0+256),w
  6415  0FE6  024E               	subwf	(??_main+12)^(0+256),w
  6416  0FE7  1D03               	skipz
  6417  0FE8  2FEF               	goto	u7643
  6418  0FE9  0849               	movf	(??_main+7)^(0+256),w
  6419  0FEA  024D               	subwf	(??_main+11)^(0+256),w
  6420  0FEB  1D03               	skipz
  6421  0FEC  2FEF               	goto	u7643
  6422  0FED  0848               	movf	(??_main+6)^(0+256),w
  6423  0FEE  024C               	subwf	(??_main+10)^(0+256),w
  6424  0FEF                     u7643:	
  6425  0FEF  1C03               	skipc
  6426  0FF0  2FF7               	goto	l6679
  6427                           
  6428                           ;main.c: 307: delayfound = 1;
  6429  0FF1  3001               	movlw	1
  6430  0FF2  0023               	movlb	3	; select bank3
  6431  0FF3  00C0               	movwf	_delayfound^(0+384)
  6432  0FF4  3000               	movlw	0
  6433  0FF5  00C1               	movwf	(_delayfound^(0+384)+1)
  6434                           
  6435                           ;main.c: 311: } else {
  6436  0FF6  2FA3               	goto	l6681
  6437  0FF7                     l6679:	
  6438                           
  6439                           ;main.c: 312: delay_counter++;
  6440  0FF7  3001               	movlw	1
  6441  0FF8  0022               	movlb	2	; select bank2
  6442  0FF9  07D1               	addwf	_delay_counter^(0+256),f	;volatile
  6443  0FFA  3000               	movlw	0
  6444  0FFB  3DD2               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6445  0FFC  2FA3               	goto	l6681
  6446  0FFD                     l6683:	
  6447                           
  6448                           ;main.c: 314: }
  6449                           ;main.c: 315: }
  6450                           ;main.c: 334: delay_time_changed = 0;
  6451  0FFD  01DB               	clrf	_delay_time_changed^(0+384)
  6452  0FFE  01DC               	clrf	(_delay_time_changed+1)^(0+384)
  6453  0FFF  2B59               	goto	l6557
  6454  1000                     __end_of_main:	
  6455                           
  6456                           	psect	text1
  6457  13E0                     __ptext1:	
  6458 ;; *************** function _update_selectMode *****************
  6459 ;; Defined at:
  6460 ;;		line 133 in file "tactiles.c"
  6461 ;; Parameters:    Size  Location     Type
  6462 ;;		None
  6463 ;; Auto vars:     Size  Location     Type
  6464 ;;		None
  6465 ;; Return value:  Size  Location     Type
  6466 ;;                  1    wreg      void 
  6467 ;; Registers used:
  6468 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6469 ;; Tracked objects:
  6470 ;;		On entry : 0/0
  6471 ;;		On exit  : 0/0
  6472 ;;		Unchanged: 0/0
  6473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6476 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6477 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6478 ;;Total ram usage:        1 bytes
  6479 ;; Hardware stack levels used:    1
  6480 ;; Hardware stack levels required when called:    5
  6481 ;; This function calls:
  6482 ;;		_setExpressionDisplay
  6483 ;;		_setPresetDisplay
  6484 ;; This function is called by:
  6485 ;;		_main
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           
  6490                           ;psect for function _update_selectMode
  6491  13E0                     _update_selectMode:	
  6492                           
  6493                           ;tactiles.c: 134: if (mode2_state == 0 && presetSaveMode != 1) {
  6494                           
  6495                           ;incstack = 0
  6496                           ; Regs used in _update_selectMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6497  13E0  0020               	movlb	0	; select bank0
  6498  13E1  0854               	movf	_mode2_state,w
  6499  13E2  1D03               	btfss	3,2
  6500  13E3  2BE7               	goto	l976
  6501  13E4  0355               	decf	_presetSaveMode,w
  6502  13E5  1D03               	btfss	3,2
  6503  13E6  0008               	return
  6504  13E7                     l976:	
  6505                           ;tactiles.c: 136: return;
  6506                           
  6507                           
  6508                           ;tactiles.c: 137: }
  6509                           ;tactiles.c: 138: if (PORTDbits.RD7 == 0) {
  6510  13E7  1B8F               	btfsc	15,7	;volatile
  6511  13E8  2C35               	goto	l6255
  6512                           
  6513                           ;tactiles.c: 139: debounce_mode1++;
  6514  13E9  3001               	movlw	1
  6515  13EA  0023               	movlb	3	; select bank3
  6516  13EB  07BC               	addwf	_debounce_mode1^(0+384),f
  6517  13EC  3000               	movlw	0
  6518  13ED  3DBD               	addwfc	(_debounce_mode1+1)^(0+384),f
  6519                           
  6520                           ;tactiles.c: 140: if (debounce_mode1 > 25) {
  6521  13EE  083D               	movf	(_debounce_mode1+1)^(0+384),w
  6522  13EF  3A80               	xorlw	128
  6523  13F0  0021               	movlb	1	; select bank1
  6524  13F1  00A7               	movwf	??_update_selectMode^(0+128)
  6525  13F2  3080               	movlw	128
  6526  13F3  0227               	subwf	??_update_selectMode^(0+128),w
  6527  13F4  1D03               	skipz
  6528  13F5  2BF9               	goto	u6765
  6529  13F6  301A               	movlw	26
  6530  13F7  0023               	movlb	3	; select bank3
  6531  13F8  023C               	subwf	_debounce_mode1^(0+384),w
  6532  13F9                     u6765:	
  6533  13F9  1C03               	skipc
  6534  13FA  0008               	return
  6535                           
  6536                           ;tactiles.c: 141: debounce_mode1 = 25;
  6537  13FB  3019               	movlw	25
  6538  13FC  0023               	movlb	3	; select bank3
  6539  13FD  00BC               	movwf	_debounce_mode1^(0+384)
  6540  13FE  3000               	movlw	0
  6541  13FF  00BD               	movwf	(_debounce_mode1^(0+384)+1)
  6542                           
  6543                           ;tactiles.c: 142: if (mode2_state == presetModeCnst || presetSaveMode == 1) {
  6544  1400  0020               	movlb	0	; select bank0
  6545  1401  0854               	movf	_mode2_state,w
  6546  1402  0022               	movlb	2	; select bank2
  6547  1403  066B               	xorwf	_presetModeCnst^(0+256),w
  6548  1404  1903               	skipnz
  6549  1405  2C0A               	goto	l6237
  6550  1406  0020               	movlb	0	; select bank0
  6551  1407  0355               	decf	_presetSaveMode,w
  6552  1408  1D03               	btfss	3,2
  6553  1409  2C1B               	goto	l6245
  6554  140A                     l6237:	
  6555                           
  6556                           ;tactiles.c: 143: presetChannel++;
  6557  140A  3001               	movlw	1
  6558  140B  0021               	movlb	1	; select bank1
  6559  140C  00A7               	movwf	??_update_selectMode^(0+128)
  6560  140D  0827               	movf	??_update_selectMode^(0+128),w
  6561  140E  0020               	movlb	0	; select bank0
  6562  140F  07E8               	addwf	_presetChannel,f
  6563                           
  6564                           ;tactiles.c: 144: if (presetChannel > 10) {
  6565  1410  300B               	movlw	11
  6566  1411  0268               	subwf	_presetChannel,w
  6567  1412  1C03               	skipc
  6568  1413  2C16               	goto	l6243
  6569                           
  6570                           ;tactiles.c: 145: presetChannel = 1;
  6571  1414  01E8               	clrf	_presetChannel
  6572  1415  0AE8               	incf	_presetChannel,f
  6573  1416                     l6243:	
  6574                           
  6575                           ;tactiles.c: 146: }
  6576                           ;tactiles.c: 147: setPresetDisplay(presetChannel);
  6577  1416  0868               	movf	_presetChannel,w
  6578  1417  3187  27C6  3193   	fcall	_setPresetDisplay
  6579                           
  6580                           ;tactiles.c: 148: } else if (mode2_state == expressModeCnst) {
  6581  141A  2C31               	goto	l987
  6582  141B                     l6245:	
  6583  141B  0020               	movlb	0	; select bank0
  6584  141C  0854               	movf	_mode2_state,w
  6585  141D  0023               	movlb	3	; select bank3
  6586  141E  0668               	xorwf	_expressModeCnst^(0+384),w
  6587  141F  1D03               	skipz
  6588  1420  2C31               	goto	l987
  6589                           
  6590                           ;tactiles.c: 149: expressionChannel++;
  6591  1421  3001               	movlw	1
  6592  1422  0021               	movlb	1	; select bank1
  6593  1423  00A7               	movwf	??_update_selectMode^(0+128)
  6594  1424  0827               	movf	??_update_selectMode^(0+128),w
  6595  1425  0022               	movlb	2	; select bank2
  6596  1426  07E9               	addwf	_expressionChannel^(0+256),f
  6597                           
  6598                           ;tactiles.c: 150: if (expressionChannel > 5) {
  6599  1427  3006               	movlw	6
  6600  1428  0269               	subwf	_expressionChannel^(0+256),w
  6601  1429  1C03               	skipc
  6602  142A  2C2D               	goto	l6253
  6603                           
  6604                           ;tactiles.c: 151: expressionChannel = 1;
  6605  142B  01E9               	clrf	_expressionChannel^(0+256)
  6606  142C  0AE9               	incf	_expressionChannel^(0+256),f
  6607  142D                     l6253:	
  6608                           
  6609                           ;tactiles.c: 152: }
  6610                           ;tactiles.c: 153: setExpressionDisplay(expressionChannel);
  6611  142D  0869               	movf	_expressionChannel^(0+256),w
  6612  142E  319C  24E5  3193   	fcall	_setExpressionDisplay
  6613  1431                     l987:	
  6614                           ;tactiles.c: 154: }
  6615                           ;tactiles.c: 161: while (PORTDbits.RD7 == 0) {
  6616                           
  6617  1431  0020               	movlb	0	; select bank0
  6618  1432  1B8F               	btfsc	15,7	;volatile
  6619  1433  0008               	return
  6620  1434  2C31               	goto	l987
  6621  1435                     l6255:	
  6622                           ;tactiles.c: 162: }
  6623                           ;tactiles.c: 163: }
  6624                           ;tactiles.c: 164: } else {
  6625                           
  6626                           
  6627                           ;tactiles.c: 165: debounce_mode1 = 0;
  6628  1435  0023               	movlb	3	; select bank3
  6629  1436  01BC               	clrf	_debounce_mode1^(0+384)
  6630  1437  01BD               	clrf	(_debounce_mode1+1)^(0+384)
  6631  1438  0008               	return
  6632  1439                     __end_of_update_selectMode:	
  6633                           
  6634                           	psect	text2
  6635  1E9C                     __ptext2:	
  6636 ;; *************** function _update_mode *****************
  6637 ;; Defined at:
  6638 ;;		line 83 in file "tactiles.c"
  6639 ;; Parameters:    Size  Location     Type
  6640 ;;		None
  6641 ;; Auto vars:     Size  Location     Type
  6642 ;;		None
  6643 ;; Return value:  Size  Location     Type
  6644 ;;                  1    wreg      void 
  6645 ;; Registers used:
  6646 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6647 ;; Tracked objects:
  6648 ;;		On entry : 0/0
  6649 ;;		On exit  : 0/0
  6650 ;;		Unchanged: 0/0
  6651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6654 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6655 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6656 ;;Total ram usage:        1 bytes
  6657 ;; Hardware stack levels used:    1
  6658 ;; Hardware stack levels required when called:    6
  6659 ;; This function calls:
  6660 ;;		_resetRingLEDs
  6661 ;;		_setPedalMode
  6662 ;; This function is called by:
  6663 ;;		_main
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _update_mode
  6669  1E9C                     _update_mode:	
  6670                           
  6671                           ;tactiles.c: 88: if (PORTCbits.RC0 == 0) {
  6672                           
  6673                           ;incstack = 0
  6674                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6675  1E9C  0020               	movlb	0	; select bank0
  6676  1E9D  180E               	btfsc	14,0	;volatile
  6677  1E9E  2ED0               	goto	l6223
  6678                           
  6679                           ;tactiles.c: 89: debounce_mode2++;
  6680  1E9F  3001               	movlw	1
  6681  1EA0  0023               	movlb	3	; select bank3
  6682  1EA1  07BE               	addwf	_debounce_mode2^(0+384),f
  6683  1EA2  3000               	movlw	0
  6684  1EA3  3DBF               	addwfc	(_debounce_mode2+1)^(0+384),f
  6685                           
  6686                           ;tactiles.c: 90: if (debounce_mode2 > 25) {
  6687  1EA4  083F               	movf	(_debounce_mode2+1)^(0+384),w
  6688  1EA5  3A80               	xorlw	128
  6689  1EA6  0021               	movlb	1	; select bank1
  6690  1EA7  00A7               	movwf	??_update_mode^(0+128)
  6691  1EA8  3080               	movlw	128
  6692  1EA9  0227               	subwf	??_update_mode^(0+128),w
  6693  1EAA  1D03               	skipz
  6694  1EAB  2EAF               	goto	u6695
  6695  1EAC  301A               	movlw	26
  6696  1EAD  0023               	movlb	3	; select bank3
  6697  1EAE  023E               	subwf	_debounce_mode2^(0+384),w
  6698  1EAF                     u6695:	
  6699  1EAF  1C03               	skipc
  6700  1EB0  0008               	return
  6701                           
  6702                           ;tactiles.c: 91: debounce_mode2 = 25;
  6703  1EB1  3019               	movlw	25
  6704  1EB2  0023               	movlb	3	; select bank3
  6705  1EB3  00BE               	movwf	_debounce_mode2^(0+384)
  6706  1EB4  3000               	movlw	0
  6707  1EB5  00BF               	movwf	(_debounce_mode2^(0+384)+1)
  6708                           
  6709                           ;tactiles.c: 93: if (presetSaveMode == 1) {
  6710  1EB6  0020               	movlb	0	; select bank0
  6711  1EB7  0355               	decf	_presetSaveMode,w
  6712  1EB8  1D03               	btfss	3,2
  6713  1EB9  2EBF               	goto	l6215
  6714                           
  6715                           ;tactiles.c: 94: presetSaveMode = 0;
  6716  1EBA  01D5               	clrf	_presetSaveMode
  6717                           
  6718                           ;tactiles.c: 95: resetRingLEDs();
  6719  1EBB  319C  24FD  319E   	fcall	_resetRingLEDs
  6720                           
  6721                           ;tactiles.c: 96: } else {
  6722  1EBE  2EC9               	goto	l6221
  6723  1EBF                     l6215:	
  6724                           
  6725                           ;tactiles.c: 97: mode2_state++;
  6726  1EBF  3001               	movlw	1
  6727  1EC0  0021               	movlb	1	; select bank1
  6728  1EC1  00A7               	movwf	??_update_mode^(0+128)
  6729  1EC2  0827               	movf	??_update_mode^(0+128),w
  6730  1EC3  0020               	movlb	0	; select bank0
  6731  1EC4  07D4               	addwf	_mode2_state,f
  6732                           
  6733                           ;tactiles.c: 98: if (mode2_state > 2) {
  6734  1EC5  3003               	movlw	3
  6735  1EC6  0254               	subwf	_mode2_state,w
  6736  1EC7  1803               	btfsc	3,0
  6737                           
  6738                           ;tactiles.c: 99: mode2_state = 0;
  6739  1EC8  01D4               	clrf	_mode2_state
  6740  1EC9                     l6221:	
  6741                           
  6742                           ;tactiles.c: 100: }
  6743                           ;tactiles.c: 101: }
  6744                           ;tactiles.c: 103: setPedalMode();
  6745  1EC9  3190  2002  319E   	fcall	_setPedalMode
  6746  1ECC                     l961:	
  6747                           ;tactiles.c: 104: while (PORTCbits.RC0 == 0) {
  6748                           
  6749  1ECC  0020               	movlb	0	; select bank0
  6750  1ECD  180E               	btfsc	14,0	;volatile
  6751  1ECE  0008               	return
  6752  1ECF  2ECC               	goto	l961
  6753  1ED0                     l6223:	
  6754                           ;tactiles.c: 105: }
  6755                           ;tactiles.c: 106: }
  6756                           ;tactiles.c: 107: } else {
  6757                           
  6758                           
  6759                           ;tactiles.c: 108: debounce_mode2 = 0;
  6760  1ED0  0023               	movlb	3	; select bank3
  6761  1ED1  01BE               	clrf	_debounce_mode2^(0+384)
  6762  1ED2  01BF               	clrf	(_debounce_mode2+1)^(0+384)
  6763  1ED3  0008               	return
  6764  1ED4                     __end_of_update_mode:	
  6765                           
  6766                           	psect	text3
  6767  05E3                     __ptext3:	
  6768 ;; *************** function _updateSwitchTap *****************
  6769 ;; Defined at:
  6770 ;;		line 48 in file "SwitchTap.c"
  6771 ;; Parameters:    Size  Location     Type
  6772 ;;		None
  6773 ;; Auto vars:     Size  Location     Type
  6774 ;;  tapCntDiviso    2   34[BANK1 ] int 
  6775 ;;  iCnt            1   36[BANK1 ] unsigned char 
  6776 ;; Return value:  Size  Location     Type
  6777 ;;                  1    wreg      void 
  6778 ;; Registers used:
  6779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6780 ;; Tracked objects:
  6781 ;;		On entry : 0/0
  6782 ;;		On exit  : 0/0
  6783 ;;		Unchanged: 0/0
  6784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6786 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6787 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6788 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6789 ;;Total ram usage:        9 bytes
  6790 ;; Hardware stack levels used:    1
  6791 ;; Hardware stack levels required when called:    8
  6792 ;; This function calls:
  6793 ;;		___aldiv
  6794 ;;		_setDoublePressState
  6795 ;;		_setLongTapState
  6796 ;; This function is called by:
  6797 ;;		_main
  6798 ;; This function uses a non-reentrant model
  6799 ;;
  6800                           
  6801                           
  6802                           ;psect for function _updateSwitchTap
  6803  05E3                     _updateSwitchTap:	
  6804                           
  6805                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6806                           
  6807                           ;incstack = 0
  6808                           ; Regs used in _updateSwitchTap: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6809  05E3  0021               	movlb	1	; select bank1
  6810  05E4  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6811                           
  6812                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6813  05E5  0020               	movlb	0	; select bank0
  6814  05E6  1810               	btfsc	16,0	;volatile
  6815  05E7  2DEE               	goto	l6351
  6816                           
  6817                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6818  05E8  0857               	movf	_switchTap_pressed,w
  6819  05E9  1903               	btfsc	3,2
  6820  05EA  2DF8               	goto	l1367
  6821                           
  6822                           ;SwitchTap.c: 59: switchTap_pressed--;
  6823  05EB  3001               	movlw	1
  6824  05EC  02D7               	subwf	_switchTap_pressed,f
  6825                           
  6826                           ;SwitchTap.c: 60: }
  6827                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6828  05ED  2DF8               	goto	l1367
  6829  05EE                     l6351:	
  6830  05EE  3019               	movlw	25
  6831  05EF  0257               	subwf	_switchTap_pressed,w
  6832  05F0  1803               	skipnc
  6833  05F1  2DF8               	goto	l1367
  6834                           
  6835                           ;SwitchTap.c: 62: switchTap_pressed++;
  6836  05F2  3001               	movlw	1
  6837  05F3  0021               	movlb	1	; select bank1
  6838  05F4  00BC               	movwf	??_updateSwitchTap^(0+128)
  6839  05F5  083C               	movf	??_updateSwitchTap^(0+128),w
  6840  05F6  0020               	movlb	0	; select bank0
  6841  05F7  07D7               	addwf	_switchTap_pressed,f
  6842  05F8                     l1367:	
  6843                           
  6844                           ;SwitchTap.c: 63: }
  6845                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6846  05F8  0857               	movf	_switchTap_pressed,w
  6847  05F9  1D03               	btfss	3,2
  6848  05FA  2FAD               	goto	l6435
  6849                           
  6850                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6851  05FB  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6852  05FC  2E80               	goto	l6395
  6853  05FD  084C               	movf	_tap_timer+3,w	;volatile
  6854  05FE  1D03               	btfss	3,2
  6855  05FF  2E09               	goto	l6357
  6856  0600  084B               	movf	_tap_timer+2,w	;volatile
  6857  0601  1D03               	btfss	3,2
  6858  0602  2E09               	goto	l6357
  6859  0603  301B               	movlw	27
  6860  0604  0249               	subwf	_tap_timer,w	;volatile
  6861  0605  3006               	movlw	6
  6862  0606  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6863  0607  1C03               	btfss	3,0
  6864  0608  2E80               	goto	l6395
  6865  0609                     l6357:	
  6866                           
  6867                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6868  0609  0022               	movlb	2	; select bank2
  6869  060A  035D               	decf	_switchTap_down^(0+256),w
  6870  060B  1903               	btfsc	3,2
  6871  060C  2E47               	goto	l6373
  6872                           
  6873                           ;SwitchTap.c: 78: switchTap_down = 1;
  6874  060D  01DD               	clrf	_switchTap_down^(0+256)
  6875  060E  0ADD               	incf	_switchTap_down^(0+256),f
  6876                           
  6877                           ;SwitchTap.c: 79: tap_timer = 0;
  6878  060F  3000               	movlw	0
  6879  0610  0020               	movlb	0	; select bank0
  6880  0611  00CC               	movwf	_tap_timer+3	;volatile
  6881  0612  3000               	movlw	0
  6882  0613  00CB               	movwf	_tap_timer+2	;volatile
  6883  0614  3000               	movlw	0
  6884  0615  00CA               	movwf	_tap_timer+1	;volatile
  6885  0616  3000               	movlw	0
  6886  0617  00C9               	movwf	_tap_timer	;volatile
  6887                           
  6888                           ;SwitchTap.c: 80: tap_iteration = 1;
  6889  0618  3001               	movlw	1
  6890  0619  0023               	movlb	3	; select bank3
  6891  061A  00E3               	movwf	_tap_iteration^(0+384)
  6892  061B  3000               	movlw	0
  6893  061C  00E4               	movwf	(_tap_iteration^(0+384)+1)
  6894                           
  6895                           ;SwitchTap.c: 81: tap_total = 0;
  6896  061D  3000               	movlw	0
  6897  061E  00AF               	movwf	(_tap_total+3)^(0+384)
  6898  061F  3000               	movlw	0
  6899  0620  00AE               	movwf	(_tap_total+2)^(0+384)
  6900  0621  3000               	movlw	0
  6901  0622  00AD               	movwf	(_tap_total+1)^(0+384)
  6902  0623  3000               	movlw	0
  6903  0624  00AC               	movwf	_tap_total^(0+384)
  6904                           
  6905                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6906  0625  01DB               	clrf	_delay_time_changed^(0+384)
  6907  0626  01DC               	clrf	(_delay_time_changed+1)^(0+384)
  6908                           
  6909                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6910  0627  0021               	movlb	1	; select bank1
  6911  0628  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  6912  0629  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  6913  062A                     l6371:	
  6914  062A  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6915  062B  0020               	movlb	0	; select bank0
  6916  062C  0267               	subwf	_num_taps,w
  6917  062D  1C03               	btfss	3,0
  6918  062E  2E47               	goto	l6373
  6919                           
  6920                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6921  062F  0021               	movlb	1	; select bank1
  6922  0630  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  6923  0631  00BC               	movwf	??_updateSwitchTap^(0+128)
  6924  0632  3001               	movlw	1
  6925  0633                     u7105:	
  6926  0633  35BC               	lslf	??_updateSwitchTap^(0+128),f
  6927  0634  3EFF               	addlw	-1
  6928  0635  1D03               	skipz
  6929  0636  2E33               	goto	u7105
  6930  0637  353C               	lslf	??_updateSwitchTap^(0+128),w
  6931  0638  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  6932  0639  0086               	movwf	6
  6933  063A  3002               	movlw	2	; select bank4/5
  6934  063B  0087               	movwf	7
  6935  063C  3000               	movlw	0
  6936  063D  3FC0               	movwi [0]fsr1
  6937  063E  3000               	movlw	0
  6938  063F  3FC1               	movwi [1]fsr1
  6939  0640  3FC2               	movwi [2]fsr1
  6940  0641  3FC3               	movwi [3]fsr1
  6941  0642  3001               	movlw	1
  6942  0643  00BC               	movwf	??_updateSwitchTap^(0+128)
  6943  0644  083C               	movf	??_updateSwitchTap^(0+128),w
  6944  0645  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  6945  0646  2E2A               	goto	l6371
  6946  0647                     l6373:	
  6947                           
  6948                           ;SwitchTap.c: 86: }
  6949                           ;SwitchTap.c: 87: }
  6950                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6951  0647  0022               	movlb	2	; select bank2
  6952  0648  085A               	movf	_longTap_start^(0+256),w
  6953  0649  1D03               	btfss	3,2
  6954  064A  2E52               	goto	l6379
  6955                           
  6956                           ;SwitchTap.c: 91: longTap_start = 1;
  6957  064B  01DA               	clrf	_longTap_start^(0+256)
  6958  064C  0ADA               	incf	_longTap_start^(0+256),f
  6959                           
  6960                           ;SwitchTap.c: 92: longTap_state = 0;
  6961  064D  0020               	movlb	0	; select bank0
  6962  064E  01E6               	clrf	_longTap_state	;volatile
  6963                           
  6964                           ;SwitchTap.c: 93: longTap_timer = 0;
  6965  064F  0022               	movlb	2	; select bank2
  6966  0650  01D5               	clrf	_longTap_timer^(0+256)	;volatile
  6967  0651  01D6               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6968  0652                     l6379:	
  6969                           
  6970                           ;SwitchTap.c: 94: }
  6971                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6972  0652  0020               	movlb	0	; select bank0
  6973  0653  0863               	movf	_long_press_limit+1,w
  6974  0654  0022               	movlb	2	; select bank2
  6975  0655  0256               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6976  0656  1D03               	skipz
  6977  0657  2E5C               	goto	u7135
  6978  0658  0020               	movlb	0	; select bank0
  6979  0659  0862               	movf	_long_press_limit,w
  6980  065A  0022               	movlb	2	; select bank2
  6981  065B  0255               	subwf	_longTap_timer^(0+256),w	;volatile
  6982  065C                     u7135:	
  6983  065C  1C03               	skipc
  6984  065D  0008               	return
  6985  065E  0020               	movlb	0	; select bank0
  6986  065F  0866               	movf	_longTap_state,w	;volatile
  6987  0660  1D03               	btfss	3,2
  6988  0661  0008               	return
  6989  0662  0853               	movf	_doubleTap_state,w	;volatile
  6990  0663  1D03               	btfss	3,2
  6991  0664  0008               	return
  6992                           
  6993                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6994  0665  0863               	movf	_long_press_limit+1,w
  6995  0666  0022               	movlb	2	; select bank2
  6996  0667  00D6               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6997  0668  0020               	movlb	0	; select bank0
  6998  0669  0862               	movf	_long_press_limit,w
  6999  066A  0022               	movlb	2	; select bank2
  7000  066B  00D5               	movwf	_longTap_timer^(0+256)	;volatile
  7001                           
  7002                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7003  066C  120D               	bcf	13,4	;volatile
  7004                           
  7005                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  7006  066D  0359               	decf	_feedback_start^(0+256),w
  7007  066E  1903               	btfsc	3,2
  7008  066F  2E78               	goto	l6393
  7009                           
  7010                           ;SwitchTap.c: 104: setLongTapState(1);
  7011  0670  3001               	movlw	1
  7012  0671  0021               	movlb	1	; select bank1
  7013  0672  00A0               	movwf	setLongTapState@f_state^(0+128)
  7014  0673  3000               	movlw	0
  7015  0674  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  7016  0675  319D  2531         	fcall	_setLongTapState
  7017                           
  7018                           ;SwitchTap.c: 105: } else {
  7019  0677  0008               	return
  7020  0678                     l6393:	
  7021                           
  7022                           ;SwitchTap.c: 106: setDoublePressState(1);
  7023  0678  3001               	movlw	1
  7024  0679  0021               	movlb	1	; select bank1
  7025  067A  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7026  067B  3000               	movlw	0
  7027  067C  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7028  067D  3190  2025         	fcall	_setDoublePressState
  7029                           
  7030                           ;SwitchTap.c: 107: }
  7031                           ;SwitchTap.c: 108: }
  7032                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7033  067F  0008               	return
  7034  0680                     l6395:	
  7035  0680  0020               	movlb	0	; select bank0
  7036  0681  1BCC               	btfsc	_tap_timer+3,7	;volatile
  7037  0682  2E8F               	goto	l6397
  7038  0683  084C               	movf	_tap_timer+3,w	;volatile
  7039  0684  1D03               	btfss	3,2
  7040  0685  0008               	return
  7041  0686  084B               	movf	_tap_timer+2,w	;volatile
  7042  0687  1D03               	btfss	3,2
  7043  0688  0008               	return
  7044  0689  301B               	movlw	27
  7045  068A  0249               	subwf	_tap_timer,w	;volatile
  7046  068B  3006               	movlw	6
  7047  068C  3B4A               	subwfb	_tap_timer+1,w	;volatile
  7048  068D  1803               	btfsc	3,0
  7049  068E  0008               	return
  7050  068F                     l6397:	
  7051  068F  0866               	movf	_longTap_state,w	;volatile
  7052  0690  1D03               	btfss	3,2
  7053  0691  0008               	return
  7054  0692  0022               	movlb	2	; select bank2
  7055  0693  035D               	decf	_switchTap_down^(0+256),w
  7056  0694  1903               	btfsc	3,2
  7057  0695  0008               	return
  7058                           
  7059                           ;SwitchTap.c: 112: switchTap_down = 1;
  7060  0696  01DD               	clrf	_switchTap_down^(0+256)
  7061  0697  0ADD               	incf	_switchTap_down^(0+256),f
  7062                           
  7063                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  7064  0698  0020               	movlb	0	; select bank0
  7065  0699  1BCC               	btfsc	_tap_timer+3,7	;volatile
  7066  069A  2EAF               	goto	l1381
  7067  069B  084C               	movf	_tap_timer+3,w	;volatile
  7068  069C  1D03               	btfss	3,2
  7069  069D  2EA7               	goto	l6405
  7070  069E  084B               	movf	_tap_timer+2,w	;volatile
  7071  069F  1D03               	btfss	3,2
  7072  06A0  2EA7               	goto	l6405
  7073  06A1  3094               	movlw	148
  7074  06A2  0249               	subwf	_tap_timer,w	;volatile
  7075  06A3  3004               	movlw	4
  7076  06A4  3B4A               	subwfb	_tap_timer+1,w	;volatile
  7077  06A5  1C03               	btfss	3,0
  7078  06A6  2EAF               	goto	l1381
  7079  06A7                     l6405:	
  7080                           
  7081                           ;SwitchTap.c: 114: tap_timer = 1172;
  7082  06A7  3000               	movlw	0
  7083  06A8  00CC               	movwf	_tap_timer+3	;volatile
  7084  06A9  3000               	movlw	0
  7085  06AA  00CB               	movwf	_tap_timer+2	;volatile
  7086  06AB  3004               	movlw	4
  7087  06AC  00CA               	movwf	_tap_timer+1	;volatile
  7088  06AD  3094               	movlw	148
  7089  06AE  00C9               	movwf	_tap_timer	;volatile
  7090  06AF                     l1381:	
  7091                           
  7092                           ;SwitchTap.c: 115: }
  7093                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  7094  06AF  0867               	movf	_num_taps,w
  7095  06B0  0021               	movlb	1	; select bank1
  7096  06B1  00BC               	movwf	??_updateSwitchTap^(0+128)
  7097  06B2  01BD               	clrf	(??_updateSwitchTap^(0+128)+1)
  7098  06B3  083C               	movf	??_updateSwitchTap^(0+128),w
  7099  06B4  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7100  06B5  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7101  06B6  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7102                           
  7103                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7104  06B7  0023               	movlb	3	; select bank3
  7105  06B8  0864               	movf	(_tap_iteration+1)^(0+384),w
  7106  06B9  3A80               	xorlw	128
  7107  06BA  3C80               	sublw	128
  7108  06BB  1D03               	skipz
  7109  06BC  2EC0               	goto	u7215
  7110  06BD  0863               	movf	_tap_iteration^(0+384),w
  7111  06BE  0020               	movlb	0	; select bank0
  7112  06BF  0267               	subwf	_num_taps,w
  7113  06C0                     u7215:	
  7114  06C0  1C03               	skipc
  7115  06C1  2EF1               	goto	l6413
  7116                           
  7117                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7118  06C2  0020               	movlb	0	; select bank0
  7119  06C3  0849               	movf	_tap_timer,w	;volatile
  7120  06C4  0023               	movlb	3	; select bank3
  7121  06C5  07AC               	addwf	_tap_total^(0+384),f
  7122  06C6  0020               	movlb	0	; select bank0
  7123  06C7  084A               	movf	_tap_timer+1,w	;volatile
  7124  06C8  0023               	movlb	3	; select bank3
  7125  06C9  3DAD               	addwfc	(_tap_total+1)^(0+384),f
  7126  06CA  0020               	movlb	0	; select bank0
  7127  06CB  084B               	movf	_tap_timer+2,w	;volatile
  7128  06CC  0023               	movlb	3	; select bank3
  7129  06CD  3DAE               	addwfc	(_tap_total+2)^(0+384),f
  7130  06CE  0020               	movlb	0	; select bank0
  7131  06CF  084C               	movf	_tap_timer+3,w	;volatile
  7132  06D0  0023               	movlb	3	; select bank3
  7133  06D1  3DAF               	addwfc	(_tap_total+3)^(0+384),f
  7134                           
  7135                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7136  06D2  0863               	movf	_tap_iteration^(0+384),w
  7137  06D3  0021               	movlb	1	; select bank1
  7138  06D4  00BC               	movwf	??_updateSwitchTap^(0+128)
  7139  06D5  3001               	movlw	1
  7140  06D6                     u7225:	
  7141  06D6  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7142  06D7  3EFF               	addlw	-1
  7143  06D8  1D03               	skipz
  7144  06D9  2ED6               	goto	u7225
  7145  06DA  353C               	lslf	??_updateSwitchTap^(0+128),w
  7146  06DB  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7147  06DC  0086               	movwf	6
  7148  06DD  3002               	movlw	2	; select bank4/5
  7149  06DE  0087               	movwf	7
  7150  06DF  0020               	movlb	0	; select bank0
  7151  06E0  0849               	movf	_tap_timer,w	;volatile
  7152  06E1  3FC0               	movwi [0]fsr1
  7153  06E2  084A               	movf	_tap_timer+1,w	;volatile
  7154  06E3  3FC1               	movwi [1]fsr1
  7155  06E4  084B               	movf	_tap_timer+2,w	;volatile
  7156  06E5  3FC2               	movwi [2]fsr1
  7157  06E6  084C               	movf	_tap_timer+3,w	;volatile
  7158  06E7  3FC3               	movwi [3]fsr1
  7159                           
  7160                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7161  06E8  0023               	movlb	3	; select bank3
  7162  06E9  0864               	movf	(_tap_iteration+1)^(0+384),w
  7163  06EA  0021               	movlb	1	; select bank1
  7164  06EB  00C3               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7165  06EC  0023               	movlb	3	; select bank3
  7166  06ED  0863               	movf	_tap_iteration^(0+384),w
  7167  06EE  0021               	movlb	1	; select bank1
  7168  06EF  00C2               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7169                           
  7170                           ;SwitchTap.c: 122: } else {
  7171  06F0  2F6D               	goto	l6427
  7172  06F1                     l6413:	
  7173                           
  7174                           ;SwitchTap.c: 123: tap_total = 0;
  7175  06F1  3000               	movlw	0
  7176  06F2  0023               	movlb	3	; select bank3
  7177  06F3  00AF               	movwf	(_tap_total+3)^(0+384)
  7178  06F4  3000               	movlw	0
  7179  06F5  00AE               	movwf	(_tap_total+2)^(0+384)
  7180  06F6  3000               	movlw	0
  7181  06F7  00AD               	movwf	(_tap_total+1)^(0+384)
  7182  06F8  3000               	movlw	0
  7183  06F9  00AC               	movwf	_tap_total^(0+384)
  7184                           
  7185                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7186  06FA  0021               	movlb	1	; select bank1
  7187  06FB  01C4               	clrf	updateSwitchTap@iCnt^(0+128)
  7188  06FC  0AC4               	incf	updateSwitchTap@iCnt^(0+128),f
  7189  06FD                     l6421:	
  7190  06FD  0020               	movlb	0	; select bank0
  7191  06FE  0867               	movf	_num_taps,w
  7192  06FF  0021               	movlb	1	; select bank1
  7193  0700  0244               	subwf	updateSwitchTap@iCnt^(0+128),w
  7194  0701  1803               	btfsc	3,0
  7195  0702  2F47               	goto	l6423
  7196                           
  7197                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7198  0703  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7199  0704  00BC               	movwf	??_updateSwitchTap^(0+128)
  7200  0705  3001               	movlw	1
  7201  0706                     u7235:	
  7202  0706  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7203  0707  3EFF               	addlw	-1
  7204  0708  1D03               	skipz
  7205  0709  2F06               	goto	u7235
  7206  070A  353C               	lslf	??_updateSwitchTap^(0+128),w
  7207  070B  3E04               	addlw	4
  7208  070C  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7209  070D  0086               	movwf	6
  7210  070E  3002               	movlw	2	; select bank4/5
  7211  070F  0087               	movwf	7
  7212  0710  3F40               	moviw [0]fsr1
  7213  0711  00BD               	movwf	(??_updateSwitchTap+1)^(0+128)
  7214  0712  3F41               	moviw [1]fsr1
  7215  0713  00BE               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7216  0714  3F42               	moviw [2]fsr1
  7217  0715  00BF               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7218  0716  3F43               	moviw [3]fsr1
  7219  0717  00C0               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7220  0718  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7221  0719  00C1               	movwf	(??_updateSwitchTap+5)^(0+128)
  7222  071A  3001               	movlw	1
  7223  071B                     u7245:	
  7224  071B  35C1               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7225  071C  3EFF               	addlw	-1
  7226  071D  1D03               	skipz
  7227  071E  2F1B               	goto	u7245
  7228  071F  3541               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7229  0720  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7230  0721  0086               	movwf	6
  7231  0722  3002               	movlw	2	; select bank4/5
  7232  0723  0087               	movwf	7
  7233  0724  083D               	movf	(??_updateSwitchTap+1)^(0+128),w
  7234  0725  3FC0               	movwi [0]fsr1
  7235  0726  083E               	movf	(??_updateSwitchTap+2)^(0+128),w
  7236  0727  3FC1               	movwi [1]fsr1
  7237  0728  083F               	movf	(??_updateSwitchTap+3)^(0+128),w
  7238  0729  3FC2               	movwi [2]fsr1
  7239  072A  0840               	movf	(??_updateSwitchTap+4)^(0+128),w
  7240  072B  3FC3               	movwi [3]fsr1
  7241                           
  7242                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7243  072C  0844               	movf	updateSwitchTap@iCnt^(0+128),w
  7244  072D  00BC               	movwf	??_updateSwitchTap^(0+128)
  7245  072E  3001               	movlw	1
  7246  072F                     u7255:	
  7247  072F  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7248  0730  3EFF               	addlw	-1
  7249  0731  1D03               	skipz
  7250  0732  2F2F               	goto	u7255
  7251  0733  353C               	lslf	??_updateSwitchTap^(0+128),w
  7252  0734  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7253  0735  0086               	movwf	6
  7254  0736  3002               	movlw	2	; select bank4/5
  7255  0737  0087               	movwf	7
  7256  0738  3F40               	moviw [0]fsr1
  7257  0739  0023               	movlb	3	; select bank3
  7258  073A  07AC               	addwf	_tap_total^(0+384),f
  7259  073B  3F41               	moviw [1]fsr1
  7260  073C  3DAD               	addwfc	(_tap_total+1)^(0+384),f
  7261  073D  3F42               	moviw [2]fsr1
  7262  073E  3DAE               	addwfc	(_tap_total+2)^(0+384),f
  7263  073F  3F43               	moviw [3]fsr1
  7264  0740  3DAF               	addwfc	(_tap_total+3)^(0+384),f
  7265  0741  3001               	movlw	1
  7266  0742  0021               	movlb	1	; select bank1
  7267  0743  00BC               	movwf	??_updateSwitchTap^(0+128)
  7268  0744  083C               	movf	??_updateSwitchTap^(0+128),w
  7269  0745  07C4               	addwf	updateSwitchTap@iCnt^(0+128),f
  7270  0746  2EFD               	goto	l6421
  7271  0747                     l6423:	
  7272                           
  7273                           ;SwitchTap.c: 127: }
  7274                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7275  0747  0020               	movlb	0	; select bank0
  7276  0748  0867               	movf	_num_taps,w
  7277  0749  0021               	movlb	1	; select bank1
  7278  074A  00BC               	movwf	??_updateSwitchTap^(0+128)
  7279  074B  3001               	movlw	1
  7280  074C                     u7275:	
  7281  074C  35BC               	lslf	??_updateSwitchTap^(0+128),f
  7282  074D  3EFF               	addlw	-1
  7283  074E  1D03               	skipz
  7284  074F  2F4C               	goto	u7275
  7285  0750  353C               	lslf	??_updateSwitchTap^(0+128),w
  7286  0751  3E48               	addlw	(low (_tap_history| (0+512)))& (0+255)
  7287  0752  0086               	movwf	6
  7288  0753  3002               	movlw	2	; select bank4/5
  7289  0754  0087               	movwf	7
  7290  0755  0020               	movlb	0	; select bank0
  7291  0756  0849               	movf	_tap_timer,w	;volatile
  7292  0757  3FC0               	movwi [0]fsr1
  7293  0758  084A               	movf	_tap_timer+1,w	;volatile
  7294  0759  3FC1               	movwi [1]fsr1
  7295  075A  084B               	movf	_tap_timer+2,w	;volatile
  7296  075B  3FC2               	movwi [2]fsr1
  7297  075C  084C               	movf	_tap_timer+3,w	;volatile
  7298  075D  3FC3               	movwi [3]fsr1
  7299                           
  7300                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7301  075E  0849               	movf	_tap_timer,w	;volatile
  7302  075F  0023               	movlb	3	; select bank3
  7303  0760  07AC               	addwf	_tap_total^(0+384),f
  7304  0761  0020               	movlb	0	; select bank0
  7305  0762  084A               	movf	_tap_timer+1,w	;volatile
  7306  0763  0023               	movlb	3	; select bank3
  7307  0764  3DAD               	addwfc	(_tap_total+1)^(0+384),f
  7308  0765  0020               	movlb	0	; select bank0
  7309  0766  084B               	movf	_tap_timer+2,w	;volatile
  7310  0767  0023               	movlb	3	; select bank3
  7311  0768  3DAE               	addwfc	(_tap_total+2)^(0+384),f
  7312  0769  0020               	movlb	0	; select bank0
  7313  076A  084C               	movf	_tap_timer+3,w	;volatile
  7314  076B  0023               	movlb	3	; select bank3
  7315  076C  3DAF               	addwfc	(_tap_total+3)^(0+384),f
  7316  076D                     l6427:	
  7317                           
  7318                           ;SwitchTap.c: 130: }
  7319                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7320  076D  0021               	movlb	1	; select bank1
  7321  076E  0842               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7322  076F  00A0               	movwf	___aldiv@divisor^(0+128)
  7323  0770  0843               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7324  0771  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7325  0772  0D89               	rlf	9,f
  7326  0773  3B89               	subwfb	9,f
  7327  0774  0989               	comf	9,f
  7328  0775  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7329  0776  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7330  0777  0023               	movlb	3	; select bank3
  7331  0778  082F               	movf	(_tap_total+3)^(0+384),w
  7332  0779  0021               	movlb	1	; select bank1
  7333  077A  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7334  077B  0023               	movlb	3	; select bank3
  7335  077C  082E               	movf	(_tap_total+2)^(0+384),w
  7336  077D  0021               	movlb	1	; select bank1
  7337  077E  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7338  077F  0023               	movlb	3	; select bank3
  7339  0780  082D               	movf	(_tap_total+1)^(0+384),w
  7340  0781  0021               	movlb	1	; select bank1
  7341  0782  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7342  0783  0023               	movlb	3	; select bank3
  7343  0784  082C               	movf	_tap_total^(0+384),w
  7344  0785  0021               	movlb	1	; select bank1
  7345  0786  00A4               	movwf	___aldiv@dividend^(0+128)
  7346  0787  3195  2596         	fcall	___aldiv
  7347  0789  0021               	movlb	1	; select bank1
  7348  078A  0823               	movf	(?___aldiv+3)^(0+128),w
  7349  078B  0020               	movlb	0	; select bank0
  7350  078C  00DB               	movwf	_baseline_delay_time+3	;volatile
  7351  078D  0021               	movlb	1	; select bank1
  7352  078E  0822               	movf	(?___aldiv+2)^(0+128),w
  7353  078F  0020               	movlb	0	; select bank0
  7354  0790  00DA               	movwf	_baseline_delay_time+2	;volatile
  7355  0791  0021               	movlb	1	; select bank1
  7356  0792  0821               	movf	(?___aldiv+1)^(0+128),w
  7357  0793  0020               	movlb	0	; select bank0
  7358  0794  00D9               	movwf	_baseline_delay_time+1	;volatile
  7359  0795  0021               	movlb	1	; select bank1
  7360  0796  0820               	movf	?___aldiv^(0+128),w
  7361  0797  0020               	movlb	0	; select bank0
  7362  0798  00D8               	movwf	_baseline_delay_time	;volatile
  7363                           
  7364                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7365  0799  3001               	movlw	1
  7366  079A  0023               	movlb	3	; select bank3
  7367  079B  00DB               	movwf	_delay_time_changed^(0+384)
  7368  079C  3000               	movlw	0
  7369  079D  00DC               	movwf	(_delay_time_changed^(0+384)+1)
  7370                           
  7371                           ;SwitchTap.c: 134: tap_timer = 0;
  7372  079E  3000               	movlw	0
  7373  079F  0020               	movlb	0	; select bank0
  7374  07A0  00CC               	movwf	_tap_timer+3	;volatile
  7375  07A1  3000               	movlw	0
  7376  07A2  00CB               	movwf	_tap_timer+2	;volatile
  7377  07A3  3000               	movlw	0
  7378  07A4  00CA               	movwf	_tap_timer+1	;volatile
  7379  07A5  3000               	movlw	0
  7380  07A6  00C9               	movwf	_tap_timer	;volatile
  7381                           
  7382                           ;SwitchTap.c: 136: tap_iteration++;
  7383  07A7  3001               	movlw	1
  7384  07A8  0023               	movlb	3	; select bank3
  7385  07A9  07E3               	addwf	_tap_iteration^(0+384),f
  7386  07AA  3000               	movlw	0
  7387  07AB  3DE4               	addwfc	(_tap_iteration+1)^(0+384),f
  7388                           
  7389                           ;SwitchTap.c: 137: }
  7390                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7391  07AC  0008               	return
  7392  07AD                     l6435:	
  7393  07AD  3019               	movlw	25
  7394  07AE  0020               	movlb	0	; select bank0
  7395  07AF  0257               	subwf	_switchTap_pressed,w
  7396  07B0  1C03               	skipc
  7397  07B1  0008               	return
  7398                           
  7399                           ;SwitchTap.c: 140: switchTap_down = 0;
  7400  07B2  0022               	movlb	2	; select bank2
  7401  07B3  01DD               	clrf	_switchTap_down^(0+256)
  7402                           
  7403                           ;SwitchTap.c: 141: switchTap_state = 0;
  7404  07B4  01EC               	clrf	_switchTap_state^(0+256)
  7405                           
  7406                           ;SwitchTap.c: 147: setLongTapState(0);
  7407  07B5  3000               	movlw	0
  7408  07B6  0021               	movlb	1	; select bank1
  7409  07B7  00A0               	movwf	setLongTapState@f_state^(0+128)
  7410  07B8  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7411  07B9  319D  2531         	fcall	_setLongTapState
  7412                           
  7413                           ;SwitchTap.c: 149: longTap_timer = 0;
  7414  07BB  0022               	movlb	2	; select bank2
  7415  07BC  01D5               	clrf	_longTap_timer^(0+256)	;volatile
  7416  07BD  01D6               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7417                           
  7418                           ;SwitchTap.c: 150: longTap_start = 0;
  7419  07BE  01DA               	clrf	_longTap_start^(0+256)
  7420                           
  7421                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7422  07BF  3019               	movlw	25
  7423  07C0  0021               	movlb	1	; select bank1
  7424  07C1  00BC               	movwf	??_updateSwitchTap^(0+128)
  7425  07C2  083C               	movf	??_updateSwitchTap^(0+128),w
  7426  07C3  0020               	movlb	0	; select bank0
  7427  07C4  00D7               	movwf	_switchTap_pressed
  7428  07C5  0008               	return
  7429  07C6                     __end_of_updateSwitchTap:	
  7430                           
  7431                           	psect	text4
  7432  1D31                     __ptext4:	
  7433 ;; *************** function _setLongTapState *****************
  7434 ;; Defined at:
  7435 ;;		line 167 in file "SwitchTap.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  f_state         2    0[BANK1 ] int 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;		None
  7440 ;; Return value:  Size  Location     Type
  7441 ;;                  1    wreg      void 
  7442 ;; Registers used:
  7443 ;;		wreg, status,0
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7449 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7451 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7452 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7453 ;;Total ram usage:        4 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    3
  7456 ;; This function calls:
  7457 ;;		Nothing
  7458 ;; This function is called by:
  7459 ;;		_updateSwitchTap
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           
  7464                           ;psect for function _setLongTapState
  7465  1D31                     _setLongTapState:	
  7466                           
  7467                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _setLongTapState: [wreg+status,0]
  7471  1D31  0020               	movlb	0	; select bank0
  7472  1D32  0866               	movf	_longTap_state,w	;volatile
  7473  1D33  0021               	movlb	1	; select bank1
  7474  1D34  00A2               	movwf	??_setLongTapState^(0+128)
  7475  1D35  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7476  1D36  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7477  1D37  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7478  1D38  1D03               	skipz
  7479  1D39  2D3C               	goto	u6055
  7480  1D3A  0820               	movf	setLongTapState@f_state^(0+128),w
  7481  1D3B  0622               	xorwf	??_setLongTapState^(0+128),w
  7482  1D3C                     u6055:	
  7483  1D3C  1903               	btfsc	3,2
  7484  1D3D  0008               	return
  7485                           
  7486                           ;SwitchTap.c: 169: longTap_state = f_state;
  7487  1D3E  0820               	movf	setLongTapState@f_state^(0+128),w
  7488  1D3F  00A2               	movwf	??_setLongTapState^(0+128)
  7489  1D40  0822               	movf	??_setLongTapState^(0+128),w
  7490  1D41  0020               	movlb	0	; select bank0
  7491  1D42  00E6               	movwf	_longTap_state	;volatile
  7492                           
  7493                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7494  1D43  0021               	movlb	1	; select bank1
  7495  1D44  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7496  1D45  0022               	movlb	2	; select bank2
  7497  1D46  1C03               	skipc
  7498  1D47  128D               	bcf	13,5	;volatile
  7499  1D48  1803               	skipnc
  7500  1D49  168D               	bsf	13,5	;volatile
  7501  1D4A  0008               	return
  7502  1D4B                     __end_of_setLongTapState:	
  7503                           
  7504                           	psect	text5
  7505  1596                     __ptext5:	
  7506 ;; *************** function ___aldiv *****************
  7507 ;; Defined at:
  7508 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  divisor         4    0[BANK1 ] long 
  7511 ;;  dividend        4    4[BANK1 ] long 
  7512 ;; Auto vars:     Size  Location     Type
  7513 ;;  quotient        4   11[BANK1 ] long 
  7514 ;;  sign            1   10[BANK1 ] unsigned char 
  7515 ;;  counter         1    9[BANK1 ] unsigned char 
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  4    0[BANK1 ] long 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7525 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7526 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7527 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7528 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7529 ;;Total ram usage:       15 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    3
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_updateSwitchTap
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function ___aldiv
  7541  1596                     ___aldiv:	
  7542                           
  7543                           ;incstack = 0
  7544                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7545  1596  0021               	movlb	1	; select bank1
  7546  1597  01AA               	clrf	___aldiv@sign^(0+128)
  7547  1598  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7548  1599  2DA7               	goto	l1685
  7549  159A  09A0               	comf	___aldiv@divisor^(0+128),f
  7550  159B  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7551  159C  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7552  159D  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7553  159E  0AA0               	incf	___aldiv@divisor^(0+128),f
  7554  159F  1903               	skipnz
  7555  15A0  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7556  15A1  1903               	skipnz
  7557  15A2  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7558  15A3  1903               	skipnz
  7559  15A4  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7560  15A5  01AA               	clrf	___aldiv@sign^(0+128)
  7561  15A6  0AAA               	incf	___aldiv@sign^(0+128),f
  7562  15A7                     l1685:	
  7563  15A7  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7564  15A8  2DB8               	goto	l5935
  7565  15A9  09A4               	comf	___aldiv@dividend^(0+128),f
  7566  15AA  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7567  15AB  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7568  15AC  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7569  15AD  0AA4               	incf	___aldiv@dividend^(0+128),f
  7570  15AE  1903               	skipnz
  7571  15AF  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7572  15B0  1903               	skipnz
  7573  15B1  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7574  15B2  1903               	skipnz
  7575  15B3  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7576  15B4  3001               	movlw	1
  7577  15B5  00A8               	movwf	??___aldiv^(0+128)
  7578  15B6  0828               	movf	??___aldiv^(0+128),w
  7579  15B7  06AA               	xorwf	___aldiv@sign^(0+128),f
  7580  15B8                     l5935:	
  7581  15B8  3000               	movlw	0
  7582  15B9  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7583  15BA  3000               	movlw	0
  7584  15BB  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7585  15BC  3000               	movlw	0
  7586  15BD  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7587  15BE  3000               	movlw	0
  7588  15BF  00AB               	movwf	___aldiv@quotient^(0+128)
  7589  15C0  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7590  15C1  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7591  15C2  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7592  15C3  0420               	iorwf	___aldiv@divisor^(0+128),w
  7593  15C4  1903               	skipnz
  7594  15C5  2E01               	goto	l5957
  7595  15C6  01A9               	clrf	___aldiv@counter^(0+128)
  7596  15C7  0AA9               	incf	___aldiv@counter^(0+128),f
  7597  15C8                     l5943:	
  7598  15C8  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7599  15C9  2DD6               	goto	l5945
  7600  15CA  3001               	movlw	1
  7601  15CB                     u6095:	
  7602  15CB  35A0               	lslf	___aldiv@divisor^(0+128),f
  7603  15CC  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7604  15CD  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7605  15CE  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7606  15CF  0B89               	decfsz	9,f
  7607  15D0  2DCB               	goto	u6095
  7608  15D1  3001               	movlw	1
  7609  15D2  00A8               	movwf	??___aldiv^(0+128)
  7610  15D3  0828               	movf	??___aldiv^(0+128),w
  7611  15D4  07A9               	addwf	___aldiv@counter^(0+128),f
  7612  15D5  2DC8               	goto	l5943
  7613  15D6                     l5945:	
  7614  15D6  3001               	movlw	1
  7615  15D7                     u6115:	
  7616  15D7  35AB               	lslf	___aldiv@quotient^(0+128),f
  7617  15D8  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7618  15D9  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7619  15DA  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7620  15DB  0B89               	decfsz	9,f
  7621  15DC  2DD7               	goto	u6115
  7622  15DD  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7623  15DE  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7624  15DF  1D03               	skipz
  7625  15E0  2DEB               	goto	u6125
  7626  15E1  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7627  15E2  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7628  15E3  1D03               	skipz
  7629  15E4  2DEB               	goto	u6125
  7630  15E5  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7631  15E6  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7632  15E7  1D03               	skipz
  7633  15E8  2DEB               	goto	u6125
  7634  15E9  0820               	movf	___aldiv@divisor^(0+128),w
  7635  15EA  0224               	subwf	___aldiv@dividend^(0+128),w
  7636  15EB                     u6125:	
  7637  15EB  1C03               	skipc
  7638  15EC  2DF6               	goto	l5953
  7639  15ED  0820               	movf	___aldiv@divisor^(0+128),w
  7640  15EE  02A4               	subwf	___aldiv@dividend^(0+128),f
  7641  15EF  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7642  15F0  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7643  15F1  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7644  15F2  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7645  15F3  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7646  15F4  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7647  15F5  142B               	bsf	___aldiv@quotient^(0+128),0
  7648  15F6                     l5953:	
  7649  15F6  3001               	movlw	1
  7650  15F7                     u6135:	
  7651  15F7  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7652  15F8  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7653  15F9  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7654  15FA  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7655  15FB  0B89               	decfsz	9,f
  7656  15FC  2DF7               	goto	u6135
  7657  15FD  3001               	movlw	1
  7658  15FE  02A9               	subwf	___aldiv@counter^(0+128),f
  7659  15FF  1D03               	btfss	3,2
  7660  1600  2DD6               	goto	l5945
  7661  1601                     l5957:	
  7662  1601  082A               	movf	___aldiv@sign^(0+128),w
  7663  1602  1903               	btfsc	3,2
  7664  1603  2E0F               	goto	l5961
  7665  1604  09AB               	comf	___aldiv@quotient^(0+128),f
  7666  1605  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7667  1606  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7668  1607  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7669  1608  0AAB               	incf	___aldiv@quotient^(0+128),f
  7670  1609  1903               	skipnz
  7671  160A  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7672  160B  1903               	skipnz
  7673  160C  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7674  160D  1903               	skipnz
  7675  160E  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7676  160F                     l5961:	
  7677  160F  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7678  1610  00A3               	movwf	(?___aldiv+3)^(0+128)
  7679  1611  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7680  1612  00A2               	movwf	(?___aldiv+2)^(0+128)
  7681  1613  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7682  1614  00A1               	movwf	(?___aldiv+1)^(0+128)
  7683  1615  082B               	movf	___aldiv@quotient^(0+128),w
  7684  1616  00A0               	movwf	?___aldiv^(0+128)
  7685  1617  0008               	return
  7686  1618                     __end_of___aldiv:	
  7687                           
  7688                           	psect	text6
  7689  0961                     __ptext6:	
  7690 ;; *************** function _updateSwitchBypass *****************
  7691 ;; Defined at:
  7692 ;;		line 34 in file "SwitchBypass.c"
  7693 ;; Parameters:    Size  Location     Type
  7694 ;;		None
  7695 ;; Auto vars:     Size  Location     Type
  7696 ;;		None
  7697 ;; Return value:  Size  Location     Type
  7698 ;;                  1    wreg      void 
  7699 ;; Registers used:
  7700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7701 ;; Tracked objects:
  7702 ;;		On entry : 0/0
  7703 ;;		On exit  : 0/0
  7704 ;;		Unchanged: 0/0
  7705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7708 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7709 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7710 ;;Total ram usage:        2 bytes
  7711 ;; Hardware stack levels used:    1
  7712 ;; Hardware stack levels required when called:    8
  7713 ;; This function calls:
  7714 ;;		_setDoublePressState
  7715 ;;		_setFeedbackState
  7716 ;;		_setSwitchBypassState
  7717 ;; This function is called by:
  7718 ;;		_main
  7719 ;; This function uses a non-reentrant model
  7720 ;;
  7721                           
  7722                           
  7723                           ;psect for function _updateSwitchBypass
  7724  0961                     _updateSwitchBypass:	
  7725                           
  7726                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7727                           
  7728                           ;incstack = 0
  7729                           ; Regs used in _updateSwitchBypass: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7730  0961  0020               	movlb	0	; select bank0
  7731  0962  1890               	btfsc	16,1	;volatile
  7732  0963  2977               	goto	l6263
  7733                           
  7734                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7735  0964  0023               	movlb	3	; select bank3
  7736  0965  0853               	movf	(_switchBypass_pressed+1)^(0+384),w
  7737  0966  3A80               	xorlw	128
  7738  0967  0021               	movlb	1	; select bank1
  7739  0968  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7740  0969  3080               	movlw	128
  7741  096A  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7742  096B  1D03               	skipz
  7743  096C  2970               	goto	u6845
  7744  096D  3001               	movlw	1
  7745  096E  0023               	movlb	3	; select bank3
  7746  096F  0252               	subwf	_switchBypass_pressed^(0+384),w
  7747  0970                     u6845:	
  7748  0970  1C03               	skipc
  7749  0971  298A               	goto	l6267
  7750                           
  7751                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7752  0972  30FF               	movlw	255
  7753  0973  0023               	movlb	3	; select bank3
  7754  0974  07D2               	addwf	_switchBypass_pressed^(0+384),f
  7755  0975  30FF               	movlw	255
  7756  0976  2989               	goto	L3
  7757  0977                     l6263:	
  7758                           ;SwitchBypass.c: 44: }
  7759                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7760                           
  7761  0977  0023               	movlb	3	; select bank3
  7762  0978  0853               	movf	(_switchBypass_pressed+1)^(0+384),w
  7763  0979  3A80               	xorlw	128
  7764  097A  0021               	movlb	1	; select bank1
  7765  097B  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7766  097C  3080               	movlw	128
  7767  097D  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7768  097E  1D03               	skipz
  7769  097F  2983               	goto	u6855
  7770  0980  3019               	movlw	25
  7771  0981  0023               	movlb	3	; select bank3
  7772  0982  0252               	subwf	_switchBypass_pressed^(0+384),w
  7773  0983                     u6855:	
  7774  0983  1803               	skipnc
  7775  0984  298A               	goto	l6267
  7776                           
  7777                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7778  0985  3001               	movlw	1
  7779  0986  0023               	movlb	3	; select bank3
  7780  0987  07D2               	addwf	_switchBypass_pressed^(0+384),f
  7781  0988  3000               	movlw	0
  7782  0989                     L3:	
  7783  0989  3DD3               	addwfc	(_switchBypass_pressed+1)^(0+384),f
  7784  098A                     l6267:	
  7785                           
  7786                           ;SwitchBypass.c: 47: }
  7787                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7788  098A  0023               	movlb	3	; select bank3
  7789  098B  0852               	movf	_switchBypass_pressed^(0+384),w
  7790  098C  0453               	iorwf	(_switchBypass_pressed+1)^(0+384),w
  7791  098D  1D03               	btfss	3,2
  7792  098E  29EB               	goto	l6307
  7793                           
  7794                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7795  098F  0022               	movlb	2	; select bank2
  7796  0990  0859               	movf	_feedback_start^(0+256),w
  7797  0991  1D03               	btfss	3,2
  7798  0992  2997               	goto	l6275
  7799                           
  7800                           ;SwitchBypass.c: 57: feedback_start = 1;
  7801  0993  01D9               	clrf	_feedback_start^(0+256)
  7802  0994  0AD9               	incf	_feedback_start^(0+256),f
  7803                           
  7804                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7805  0995  01D3               	clrf	_feedback_timer^(0+256)	;volatile
  7806  0996  01D4               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7807  0997                     l6275:	
  7808                           
  7809                           ;SwitchBypass.c: 59: }
  7810                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7811  0997  0020               	movlb	0	; select bank0
  7812  0998  0863               	movf	_long_press_limit+1,w
  7813  0999  0022               	movlb	2	; select bank2
  7814  099A  0254               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7815  099B  1D03               	skipz
  7816  099C  29A1               	goto	u6885
  7817  099D  0020               	movlb	0	; select bank0
  7818  099E  0862               	movf	_long_press_limit,w
  7819  099F  0022               	movlb	2	; select bank2
  7820  09A0  0253               	subwf	_feedback_timer^(0+256),w	;volatile
  7821  09A1                     u6885:	
  7822  09A1  1C03               	skipc
  7823  09A2  29C0               	goto	l6289
  7824  09A3  086A               	movf	_feedback_state^(0+256),w	;volatile
  7825  09A4  1D03               	btfss	3,2
  7826  09A5  29C0               	goto	l6289
  7827  09A6  0020               	movlb	0	; select bank0
  7828  09A7  0853               	movf	_doubleTap_state,w	;volatile
  7829  09A8  1D03               	btfss	3,2
  7830  09A9  29C0               	goto	l6289
  7831                           
  7832                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7833  09AA  0022               	movlb	2	; select bank2
  7834  09AB  110D               	bcf	13,2	;volatile
  7835                           
  7836                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7837  09AC  035A               	decf	_longTap_start^(0+256),w
  7838  09AD  1903               	btfsc	3,2
  7839  09AE  29B8               	goto	l6287
  7840                           
  7841                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7842  09AF  3001               	movlw	1
  7843  09B0  0021               	movlb	1	; select bank1
  7844  09B1  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7845  09B2  3000               	movlw	0
  7846  09B3  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7847  09B4  319D  2517  3189   	fcall	_setFeedbackState
  7848                           
  7849                           ;SwitchBypass.c: 67: } else {
  7850  09B7  29C0               	goto	l6289
  7851  09B8                     l6287:	
  7852                           
  7853                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7854  09B8  3001               	movlw	1
  7855  09B9  0021               	movlb	1	; select bank1
  7856  09BA  00B8               	movwf	setDoublePressState@f_state^(0+128)
  7857  09BB  3000               	movlw	0
  7858  09BC  00B9               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7859  09BD  3190  2025  3189   	fcall	_setDoublePressState
  7860  09C0                     l6289:	
  7861                           
  7862                           ;SwitchBypass.c: 69: }
  7863                           ;SwitchBypass.c: 70: }
  7864                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7865  09C0  0020               	movlb	0	; select bank0
  7866  09C1  0853               	movf	_doubleTap_state,w	;volatile
  7867  09C2  1D03               	btfss	3,2
  7868  09C3  29E7               	goto	l1227
  7869  09C4  0022               	movlb	2	; select bank2
  7870  09C5  086A               	movf	_feedback_state^(0+256),w	;volatile
  7871  09C6  1D03               	btfss	3,2
  7872  09C7  29E7               	goto	l1227
  7873                           
  7874                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7875  09C8  0020               	movlb	0	; select bank0
  7876  09C9  0369               	decf	_switchBypass_state,w
  7877  09CA  1D03               	btfss	3,2
  7878  09CB  29D8               	goto	l6301
  7879                           
  7880                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7881  09CC  0023               	movlb	3	; select bank3
  7882  09CD  035F               	decf	_switchBypass_up^(0+384),w
  7883  09CE  0460               	iorwf	(_switchBypass_up+1)^(0+384),w
  7884  09CF  1D03               	btfss	3,2
  7885  09D0  29E7               	goto	l1227
  7886                           
  7887                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7888  09D1  01E6               	clrf	_currentBypassState^(0+384)
  7889  09D2  0AE6               	incf	_currentBypassState^(0+384),f
  7890                           
  7891                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7892  09D3  3001               	movlw	1
  7893  09D4  00D4               	movwf	_switchBypass_toggle^(0+384)
  7894  09D5  3000               	movlw	0
  7895  09D6  00D5               	movwf	(_switchBypass_toggle^(0+384)+1)
  7896                           
  7897                           ;SwitchBypass.c: 78: }
  7898                           ;SwitchBypass.c: 93: } else {
  7899  09D7  29E7               	goto	l1227
  7900  09D8                     l6301:	
  7901                           
  7902                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7903  09D8  0022               	movlb	2	; select bank2
  7904  09D9  0358               	decf	_bypass_turning_on^(0+256),w
  7905  09DA  1903               	btfsc	3,2
  7906  09DB  29E7               	goto	l1227
  7907                           
  7908                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7909  09DC  0023               	movlb	3	; select bank3
  7910  09DD  01E6               	clrf	_currentBypassState^(0+384)
  7911                           
  7912                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7913  09DE  0022               	movlb	2	; select bank2
  7914  09DF  01D8               	clrf	_bypass_turning_on^(0+256)
  7915  09E0  0AD8               	incf	_bypass_turning_on^(0+256),f
  7916                           
  7917                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7918  09E1  0023               	movlb	3	; select bank3
  7919  09E2  01D4               	clrf	_switchBypass_toggle^(0+384)
  7920  09E3  01D5               	clrf	(_switchBypass_toggle+1)^(0+384)
  7921                           
  7922                           ;SwitchBypass.c: 101: feedback_state = 0;
  7923  09E4  0022               	movlb	2	; select bank2
  7924  09E5  01EA               	clrf	_feedback_state^(0+256)	;volatile
  7925                           
  7926                           ;SwitchBypass.c: 102: feedback_start = 0;
  7927  09E6  01D9               	clrf	_feedback_start^(0+256)
  7928  09E7                     l1227:	
  7929                           
  7930                           ;SwitchBypass.c: 103: }
  7931                           ;SwitchBypass.c: 104: }
  7932                           ;SwitchBypass.c: 106: }
  7933                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7934  09E7  0023               	movlb	3	; select bank3
  7935  09E8  01DF               	clrf	_switchBypass_up^(0+384)
  7936  09E9  01E0               	clrf	(_switchBypass_up+1)^(0+384)
  7937                           
  7938                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7939  09EA  0008               	return
  7940  09EB                     l6307:	
  7941  09EB  0853               	movf	(_switchBypass_pressed+1)^(0+384),w
  7942  09EC  3A80               	xorlw	128
  7943  09ED  0021               	movlb	1	; select bank1
  7944  09EE  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7945  09EF  3080               	movlw	128
  7946  09F0  023C               	subwf	??_updateSwitchBypass^(0+128),w
  7947  09F1  1D03               	skipz
  7948  09F2  29F6               	goto	u6975
  7949  09F3  3019               	movlw	25
  7950  09F4  0023               	movlb	3	; select bank3
  7951  09F5  0252               	subwf	_switchBypass_pressed^(0+384),w
  7952  09F6                     u6975:	
  7953  09F6  1C03               	skipc
  7954  09F7  0008               	return
  7955                           
  7956                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7957  09F8  0020               	movlb	0	; select bank0
  7958  09F9  0353               	decf	_doubleTap_state,w	;volatile
  7959  09FA  1D03               	btfss	3,2
  7960  09FB  2A05               	goto	l6313
  7961                           
  7962                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7963  09FC  0023               	movlb	3	; select bank3
  7964  09FD  0866               	movf	_currentBypassState^(0+384),w
  7965  09FE  0021               	movlb	1	; select bank1
  7966  09FF  00BC               	movwf	??_updateSwitchBypass^(0+128)
  7967  0A00  01BD               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7968  0A01  083C               	movf	??_updateSwitchBypass^(0+128),w
  7969  0A02  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7970  0A03  083D               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7971  0A04  2A21               	goto	L4
  7972  0A05                     l6313:	
  7973                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7974                           
  7975  0A05  0022               	movlb	2	; select bank2
  7976  0A06  0358               	decf	_bypass_turning_on^(0+256),w
  7977  0A07  1D03               	btfss	3,2
  7978  0A08  036A               	decf	_feedback_state^(0+256),w	;volatile
  7979  0A09  1D03               	btfss	3,2
  7980  0A0A  2A11               	goto	l6319
  7981                           
  7982                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7983  0A0B  3001               	movlw	1
  7984  0A0C  0021               	movlb	1	; select bank1
  7985  0A0D  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7986  0A0E  3000               	movlw	0
  7987  0A0F  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7988  0A10  2A22               	goto	L5
  7989  0A11                     l6319:	
  7990                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7991                           
  7992  0A11  0023               	movlb	3	; select bank3
  7993  0A12  0354               	decf	_switchBypass_toggle^(0+384),w
  7994  0A13  0455               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7995  0A14  1D03               	btfss	3,2
  7996  0A15  2A25               	goto	l6327
  7997  0A16  0022               	movlb	2	; select bank2
  7998  0A17  086A               	movf	_feedback_state^(0+256),w	;volatile
  7999  0A18  1D03               	btfss	3,2
  8000  0A19  2A25               	goto	l6327
  8001  0A1A  0020               	movlb	0	; select bank0
  8002  0A1B  0853               	movf	_doubleTap_state,w	;volatile
  8003  0A1C  1D03               	btfss	3,2
  8004  0A1D  2A25               	goto	l6327
  8005                           
  8006                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8007  0A1E  3000               	movlw	0
  8008  0A1F  0021               	movlb	1	; select bank1
  8009  0A20  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  8010  0A21                     L4:	
  8011  0A21  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  8012  0A22                     L5:	
  8013  0A22  3191  21B4  3189   	fcall	_setSwitchBypassState
  8014  0A25                     l6327:	
  8015                           
  8016                           ;SwitchBypass.c: 115: }
  8017                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8018  0A25  0020               	movlb	0	; select bank0
  8019  0A26  0C69               	rrf	_switchBypass_state,w
  8020  0A27  0022               	movlb	2	; select bank2
  8021  0A28  1C03               	skipc
  8022  0A29  110D               	bcf	13,2	;volatile
  8023  0A2A  1803               	skipnc
  8024  0A2B  150D               	bsf	13,2	;volatile
  8025                           
  8026                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8027  0A2C  3000               	movlw	0
  8028  0A2D  0021               	movlb	1	; select bank1
  8029  0A2E  00A0               	movwf	setFeedbackState@f_state^(0+128)
  8030  0A2F  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  8031  0A30  319D  2517  3189   	fcall	_setFeedbackState
  8032                           
  8033                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8034  0A33  3000               	movlw	0
  8035  0A34  0021               	movlb	1	; select bank1
  8036  0A35  00B8               	movwf	setDoublePressState@f_state^(0+128)
  8037  0A36  00B9               	movwf	(setDoublePressState@f_state+1)^(0+128)
  8038  0A37  3190  2025         	fcall	_setDoublePressState
  8039                           
  8040                           ;SwitchBypass.c: 122: feedback_start = 0;
  8041  0A39  0022               	movlb	2	; select bank2
  8042  0A3A  01D9               	clrf	_feedback_start^(0+256)
  8043                           
  8044                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8045  0A3B  01D8               	clrf	_bypass_turning_on^(0+256)
  8046                           
  8047                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8048  0A3C  0023               	movlb	3	; select bank3
  8049  0A3D  01D4               	clrf	_switchBypass_toggle^(0+384)
  8050  0A3E  01D5               	clrf	(_switchBypass_toggle+1)^(0+384)
  8051                           
  8052                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8053  0A3F  3001               	movlw	1
  8054  0A40  00DF               	movwf	_switchBypass_up^(0+384)
  8055  0A41  3000               	movlw	0
  8056  0A42  00E0               	movwf	(_switchBypass_up^(0+384)+1)
  8057                           
  8058                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8059  0A43  3019               	movlw	25
  8060  0A44  00D2               	movwf	_switchBypass_pressed^(0+384)
  8061  0A45  3000               	movlw	0
  8062  0A46  00D3               	movwf	(_switchBypass_pressed^(0+384)+1)
  8063  0A47  0008               	return
  8064  0A48                     __end_of_updateSwitchBypass:	
  8065                           
  8066                           	psect	text7
  8067  1D17                     __ptext7:	
  8068 ;; *************** function _setFeedbackState *****************
  8069 ;; Defined at:
  8070 ;;		line 151 in file "SwitchBypass.c"
  8071 ;; Parameters:    Size  Location     Type
  8072 ;;  f_state         2    0[BANK1 ] int 
  8073 ;; Auto vars:     Size  Location     Type
  8074 ;;		None
  8075 ;; Return value:  Size  Location     Type
  8076 ;;                  1    wreg      void 
  8077 ;; Registers used:
  8078 ;;		wreg, status,0
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8084 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8086 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8087 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8088 ;;Total ram usage:        4 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    3
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_updateSwitchBypass
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           
  8099                           ;psect for function _setFeedbackState
  8100  1D17                     _setFeedbackState:	
  8101                           
  8102                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8106  1D17  0022               	movlb	2	; select bank2
  8107  1D18  086A               	movf	_feedback_state^(0+256),w	;volatile
  8108  1D19  0021               	movlb	1	; select bank1
  8109  1D1A  00A2               	movwf	??_setFeedbackState^(0+128)
  8110  1D1B  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  8111  1D1C  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  8112  1D1D  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  8113  1D1E  1D03               	skipz
  8114  1D1F  2D22               	goto	u6005
  8115  1D20  0820               	movf	setFeedbackState@f_state^(0+128),w
  8116  1D21  0622               	xorwf	??_setFeedbackState^(0+128),w
  8117  1D22                     u6005:	
  8118  1D22  1903               	btfsc	3,2
  8119  1D23  0008               	return
  8120                           
  8121                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8122  1D24  0820               	movf	setFeedbackState@f_state^(0+128),w
  8123  1D25  00A2               	movwf	??_setFeedbackState^(0+128)
  8124  1D26  0822               	movf	??_setFeedbackState^(0+128),w
  8125  1D27  0022               	movlb	2	; select bank2
  8126  1D28  00EA               	movwf	_feedback_state^(0+256)	;volatile
  8127                           
  8128                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8129  1D29  0021               	movlb	1	; select bank1
  8130  1D2A  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  8131  1D2B  0022               	movlb	2	; select bank2
  8132  1D2C  1C03               	skipc
  8133  1D2D  118D               	bcf	13,3	;volatile
  8134  1D2E  1803               	skipnc
  8135  1D2F  158D               	bsf	13,3	;volatile
  8136  1D30  0008               	return
  8137  1D31                     __end_of_setFeedbackState:	
  8138                           
  8139                           	psect	text8
  8140  1025                     __ptext8:	
  8141 ;; *************** function _setDoublePressState *****************
  8142 ;; Defined at:
  8143 ;;		line 21 in file "preset_programming.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  f_state         2   24[BANK1 ] int 
  8146 ;; Auto vars:     Size  Location     Type
  8147 ;;		None
  8148 ;; Return value:  Size  Location     Type
  8149 ;;                  1    wreg      void 
  8150 ;; Registers used:
  8151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8152 ;; Tracked objects:
  8153 ;;		On entry : 0/0
  8154 ;;		On exit  : 0/0
  8155 ;;		Unchanged: 0/0
  8156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8157 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8159 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8160 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8161 ;;Total ram usage:        4 bytes
  8162 ;; Hardware stack levels used:    1
  8163 ;; Hardware stack levels required when called:    7
  8164 ;; This function calls:
  8165 ;;		_resetRingLEDs
  8166 ;;		_setPedalMode
  8167 ;;		_setPresetDisplay
  8168 ;;		_showSave
  8169 ;;		_wait_ms
  8170 ;; This function is called by:
  8171 ;;		_updateSwitchBypass
  8172 ;;		_updateSwitchTap
  8173 ;; This function uses a non-reentrant model
  8174 ;;
  8175                           
  8176                           
  8177                           ;psect for function _setDoublePressState
  8178  1025                     _setDoublePressState:	
  8179                           
  8180                           ;preset_programming.c: 22: if (doubleTap_state == f_state) {return;}
  8181                           
  8182                           ;incstack = 0
  8183                           ; Regs used in _setDoublePressState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8184  1025  0020               	movlb	0	; select bank0
  8185  1026  0853               	movf	_doubleTap_state,w	;volatile
  8186  1027  0021               	movlb	1	; select bank1
  8187  1028  00BA               	movwf	??_setDoublePressState^(0+128)
  8188  1029  01BB               	clrf	(??_setDoublePressState^(0+128)+1)
  8189  102A  0839               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8190  102B  063B               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8191  102C  1D03               	skipz
  8192  102D  2830               	goto	u6015
  8193  102E  0838               	movf	setDoublePressState@f_state^(0+128),w
  8194  102F  063A               	xorwf	??_setDoublePressState^(0+128),w
  8195  1030                     u6015:	
  8196  1030  1903               	btfsc	3,2
  8197  1031  0008               	return
  8198                           
  8199                           ;preset_programming.c: 23: doubleTap_state = f_state;
  8200  1032  0838               	movf	setDoublePressState@f_state^(0+128),w
  8201  1033  00BA               	movwf	??_setDoublePressState^(0+128)
  8202  1034  083A               	movf	??_setDoublePressState^(0+128),w
  8203  1035  0020               	movlb	0	; select bank0
  8204  1036  00D3               	movwf	_doubleTap_state	;volatile
  8205                           
  8206                           ;preset_programming.c: 24: if (f_state == 1) {
  8207  1037  0021               	movlb	1	; select bank1
  8208  1038  0338               	decf	setDoublePressState@f_state^(0+128),w
  8209  1039  0439               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8210  103A  1D03               	btfss	3,2
  8211  103B  283F               	goto	l5899
  8212                           
  8213                           ;preset_programming.c: 25: LATBbits.LATB4 = 0;
  8214  103C  0022               	movlb	2	; select bank2
  8215  103D  120D               	bcf	13,4	;volatile
  8216                           
  8217                           ;preset_programming.c: 27: LATBbits.LATB5 = 0;
  8218  103E  128D               	bcf	13,5	;volatile
  8219  103F                     l5899:	
  8220                           
  8221                           ;preset_programming.c: 30: }
  8222                           ;preset_programming.c: 32: if (doubleTap_state == 1) {
  8223  103F  0020               	movlb	0	; select bank0
  8224  1040  0353               	decf	_doubleTap_state,w	;volatile
  8225  1041  1D03               	btfss	3,2
  8226  1042  285B               	goto	l5915
  8227                           
  8228                           ;preset_programming.c: 33: if (presetSaveMode == 0) {
  8229  1043  0855               	movf	_presetSaveMode,w
  8230  1044  1D03               	btfss	3,2
  8231  1045  2850               	goto	l5907
  8232                           
  8233                           ;preset_programming.c: 34: presetSaveMode = 1;
  8234  1046  01D5               	clrf	_presetSaveMode
  8235  1047  0AD5               	incf	_presetSaveMode,f
  8236                           
  8237                           ;preset_programming.c: 35: LATBbits.LATB1 = 0;
  8238  1048  0022               	movlb	2	; select bank2
  8239  1049  108D               	bcf	13,1	;volatile
  8240                           
  8241                           ;preset_programming.c: 36: setPresetDisplay(presetChannel);
  8242  104A  0020               	movlb	0	; select bank0
  8243  104B  0868               	movf	_presetChannel,w
  8244  104C  3187  27C6  3190   	fcall	_setPresetDisplay
  8245                           
  8246                           ;preset_programming.c: 37: } else {
  8247  104F  285B               	goto	l5915
  8248  1050                     l5907:	
  8249                           
  8250                           ;preset_programming.c: 39: presetSaveMode = 0;
  8251  1050  0020               	movlb	0	; select bank0
  8252  1051  01D5               	clrf	_presetSaveMode
  8253                           
  8254                           ;preset_programming.c: 40: setPedalMode();
  8255  1052  3190  2002  3190   	fcall	_setPedalMode
  8256                           
  8257                           ;preset_programming.c: 41: resetRingLEDs();
  8258  1055  319C  24FD  3190   	fcall	_resetRingLEDs
  8259                           
  8260                           ;preset_programming.c: 42: showSave();
  8261  1058  319C  24D1  3190   	fcall	_showSave
  8262  105B                     l5915:	
  8263                           
  8264                           ;preset_programming.c: 44: }
  8265                           ;preset_programming.c: 45: }
  8266                           ;preset_programming.c: 47: wait_ms(20);
  8267  105B  3014               	movlw	20
  8268  105C  0021               	movlb	1	; select bank1
  8269  105D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8270  105E  3000               	movlw	0
  8271  105F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8272  1060  319E  266A         	fcall	_wait_ms
  8273  1062  0008               	return
  8274  1063                     __end_of_setDoublePressState:	
  8275                           
  8276                           	psect	text9
  8277  1CD1                     __ptext9:	
  8278 ;; *************** function _showSave *****************
  8279 ;; Defined at:
  8280 ;;		line 127 in file "LEDs.c"
  8281 ;; Parameters:    Size  Location     Type
  8282 ;;		None
  8283 ;; Auto vars:     Size  Location     Type
  8284 ;;		None
  8285 ;; Return value:  Size  Location     Type
  8286 ;;                  1    wreg      void 
  8287 ;; Registers used:
  8288 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8289 ;; Tracked objects:
  8290 ;;		On entry : 0/0
  8291 ;;		On exit  : 0/0
  8292 ;;		Unchanged: 0/0
  8293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8296 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8297 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8298 ;;Total ram usage:        1 bytes
  8299 ;; Hardware stack levels used:    1
  8300 ;; Hardware stack levels required when called:    6
  8301 ;; This function calls:
  8302 ;;		_ring_tactiles
  8303 ;;		_solidring_tactiles
  8304 ;; This function is called by:
  8305 ;;		_setDoublePressState
  8306 ;; This function uses a non-reentrant model
  8307 ;;
  8308                           
  8309                           
  8310                           ;psect for function _showSave
  8311  1CD1                     _showSave:	
  8312                           
  8313                           ;LEDs.c: 128: suspend_blink = 1;
  8314                           
  8315                           ;incstack = 0
  8316                           ; Regs used in _showSave: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8317  1CD1  3001               	movlw	1
  8318  1CD2  0021               	movlb	1	; select bank1
  8319  1CD3  00B7               	movwf	??_showSave^(0+128)
  8320  1CD4  0837               	movf	??_showSave^(0+128),w
  8321  1CD5  0020               	movlb	0	; select bank0
  8322  1CD6  00D6               	movwf	_suspend_blink	;volatile
  8323                           
  8324                           ;LEDs.c: 129: ring_tactiles();
  8325  1CD7  3192  2299  319C   	fcall	_ring_tactiles
  8326                           
  8327                           ;LEDs.c: 130: ring_tactiles();
  8328  1CDA  3192  2299  319C   	fcall	_ring_tactiles
  8329                           
  8330                           ;LEDs.c: 131: solidring_tactiles();
  8331  1CDD  3190  2063  319C   	fcall	_solidring_tactiles
  8332                           
  8333                           ;LEDs.c: 132: solidring_tactiles();
  8334  1CE0  3190  2063         	fcall	_solidring_tactiles
  8335                           
  8336                           ;LEDs.c: 133: suspend_blink = 0;
  8337  1CE2  0020               	movlb	0	; select bank0
  8338  1CE3  01D6               	clrf	_suspend_blink	;volatile
  8339  1CE4  0008               	return
  8340  1CE5                     __end_of_showSave:	
  8341                           
  8342                           	psect	text10
  8343  1063                     __ptext10:	
  8344 ;; *************** function _solidring_tactiles *****************
  8345 ;; Defined at:
  8346 ;;		line 223 in file "LEDs.c"
  8347 ;; Parameters:    Size  Location     Type
  8348 ;;		None
  8349 ;; Auto vars:     Size  Location     Type
  8350 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8351 ;; Return value:  Size  Location     Type
  8352 ;;                  1    wreg      void 
  8353 ;; Registers used:
  8354 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8355 ;; Tracked objects:
  8356 ;;		On entry : 0/0
  8357 ;;		On exit  : 0/0
  8358 ;;		Unchanged: 0/0
  8359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8361 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8362 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8363 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8364 ;;Total ram usage:        3 bytes
  8365 ;; Hardware stack levels used:    1
  8366 ;; Hardware stack levels required when called:    5
  8367 ;; This function calls:
  8368 ;;		_set_leds_bottom
  8369 ;;		_set_leds_top
  8370 ;;		_wait_ms
  8371 ;; This function is called by:
  8372 ;;		_showSave
  8373 ;;		_showBootSequence
  8374 ;; This function uses a non-reentrant model
  8375 ;;
  8376                           
  8377                           
  8378                           ;psect for function _solidring_tactiles
  8379  1063                     _solidring_tactiles:	
  8380                           
  8381                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8382                           
  8383                           ;incstack = 0
  8384                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8385  1063  301E               	movlw	30
  8386  1064  0021               	movlb	1	; select bank1
  8387  1065  00B2               	movwf	??_solidring_tactiles^(0+128)
  8388  1066  0832               	movf	??_solidring_tactiles^(0+128),w
  8389  1067  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8390                           
  8391                           ;LEDs.c: 225: set_leds_top(100, 1);
  8392  1068  3064               	movlw	100
  8393  1069  00A0               	movwf	set_leds_top@x^(0+128)
  8394  106A  3000               	movlw	0
  8395  106B  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8396  106C  3001               	movlw	1
  8397  106D  00A2               	movwf	set_leds_top@ledState^(0+128)
  8398  106E  3000               	movlw	0
  8399  106F  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8400  1070  3193  238C  3190   	fcall	_set_leds_top
  8401                           
  8402                           ;LEDs.c: 226: set_leds_bottom(100);
  8403  1073  3064               	movlw	100
  8404  1074  0021               	movlb	1	; select bank1
  8405  1075  00A0               	movwf	set_leds_bottom@x^(0+128)
  8406  1076  3000               	movlw	0
  8407  1077  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8408  1078  319F  270E  3190   	fcall	_set_leds_bottom
  8409                           
  8410                           ;LEDs.c: 227: wait_ms(ring_delay);
  8411  107B  0021               	movlb	1	; select bank1
  8412  107C  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8413  107D  00B2               	movwf	??_solidring_tactiles^(0+128)
  8414  107E  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8415  107F  0832               	movf	??_solidring_tactiles^(0+128),w
  8416  1080  00AC               	movwf	wait_ms@timeSec^(0+128)
  8417  1081  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8418  1082  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8419  1083  319E  266A  3190   	fcall	_wait_ms
  8420                           
  8421                           ;LEDs.c: 229: set_leds_top(0, 1);
  8422  1086  3000               	movlw	0
  8423  1087  0021               	movlb	1	; select bank1
  8424  1088  00A0               	movwf	set_leds_top@x^(0+128)
  8425  1089  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8426  108A  3001               	movlw	1
  8427  108B  00A2               	movwf	set_leds_top@ledState^(0+128)
  8428  108C  3000               	movlw	0
  8429  108D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8430  108E  3193  238C  3190   	fcall	_set_leds_top
  8431                           
  8432                           ;LEDs.c: 230: set_leds_bottom(0);
  8433  1091  3000               	movlw	0
  8434  1092  0021               	movlb	1	; select bank1
  8435  1093  00A0               	movwf	set_leds_bottom@x^(0+128)
  8436  1094  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8437  1095  319F  270E  3190   	fcall	_set_leds_bottom
  8438                           
  8439                           ;LEDs.c: 231: wait_ms(ring_delay);
  8440  1098  0021               	movlb	1	; select bank1
  8441  1099  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8442  109A  00B2               	movwf	??_solidring_tactiles^(0+128)
  8443  109B  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8444  109C  0832               	movf	??_solidring_tactiles^(0+128),w
  8445  109D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8446  109E  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8447  109F  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8448  10A0  319E  266A         	fcall	_wait_ms
  8449  10A2  0008               	return
  8450  10A3                     __end_of_solidring_tactiles:	
  8451                           
  8452                           	psect	text11
  8453  1299                     __ptext11:	
  8454 ;; *************** function _ring_tactiles *****************
  8455 ;; Defined at:
  8456 ;;		line 211 in file "LEDs.c"
  8457 ;; Parameters:    Size  Location     Type
  8458 ;;		None
  8459 ;; Auto vars:     Size  Location     Type
  8460 ;;  iLed            2   21[BANK1 ] int 
  8461 ;;  iLed            2   19[BANK1 ] int 
  8462 ;; Return value:  Size  Location     Type
  8463 ;;                  1    wreg      void 
  8464 ;; Registers used:
  8465 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8466 ;; Tracked objects:
  8467 ;;		On entry : 0/0
  8468 ;;		On exit  : 0/0
  8469 ;;		Unchanged: 0/0
  8470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8472 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8473 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8474 ;;      Totals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8475 ;;Total ram usage:        5 bytes
  8476 ;; Hardware stack levels used:    1
  8477 ;; Hardware stack levels required when called:    5
  8478 ;; This function calls:
  8479 ;;		_set_leds_bottom
  8480 ;;		_set_leds_top
  8481 ;;		_wait_ms
  8482 ;; This function is called by:
  8483 ;;		_showSave
  8484 ;; This function uses a non-reentrant model
  8485 ;;
  8486                           
  8487                           
  8488                           ;psect for function _ring_tactiles
  8489  1299                     _ring_tactiles:	
  8490                           
  8491                           ;LEDs.c: 212: for (int iLed = 1; iLed < 7; iLed++) {
  8492                           
  8493                           ;incstack = 0
  8494                           ; Regs used in _ring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8495  1299  3001               	movlw	1
  8496  129A  0021               	movlb	1	; select bank1
  8497  129B  00B3               	movwf	ring_tactiles@iLed^(0+128)
  8498  129C  3000               	movlw	0
  8499  129D  00B4               	movwf	(ring_tactiles@iLed^(0+128)+1)
  8500  129E  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8501  129F  3A80               	xorlw	128
  8502  12A0  00B2               	movwf	??_ring_tactiles^(0+128)
  8503  12A1  3080               	movlw	128
  8504  12A2  0232               	subwf	??_ring_tactiles^(0+128),w
  8505  12A3  1D03               	skipz
  8506  12A4  2AA7               	goto	u5645
  8507  12A5  3007               	movlw	7
  8508  12A6  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8509  12A7                     u5645:	
  8510  12A7  1803               	btfsc	3,0
  8511  12A8  2ACD               	goto	l5623
  8512  12A9                     l5615:	
  8513                           
  8514                           ;LEDs.c: 213: set_leds_top(iLed, 1);
  8515  12A9  0021               	movlb	1	; select bank1
  8516  12AA  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8517  12AB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8518  12AC  0833               	movf	ring_tactiles@iLed^(0+128),w
  8519  12AD  00A0               	movwf	set_leds_top@x^(0+128)
  8520  12AE  3001               	movlw	1
  8521  12AF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8522  12B0  3000               	movlw	0
  8523  12B1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8524  12B2  3193  238C  3192   	fcall	_set_leds_top
  8525                           
  8526                           ;LEDs.c: 214: wait_ms(5);
  8527  12B5  3005               	movlw	5
  8528  12B6  0021               	movlb	1	; select bank1
  8529  12B7  00AC               	movwf	wait_ms@timeSec^(0+128)
  8530  12B8  3000               	movlw	0
  8531  12B9  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8532  12BA  319E  266A  3192   	fcall	_wait_ms
  8533  12BD  3001               	movlw	1
  8534  12BE  0021               	movlb	1	; select bank1
  8535  12BF  07B3               	addwf	ring_tactiles@iLed^(0+128),f
  8536  12C0  3000               	movlw	0
  8537  12C1  3DB4               	addwfc	(ring_tactiles@iLed+1)^(0+128),f
  8538  12C2  0834               	movf	(ring_tactiles@iLed+1)^(0+128),w
  8539  12C3  3A80               	xorlw	128
  8540  12C4  00B2               	movwf	??_ring_tactiles^(0+128)
  8541  12C5  3080               	movlw	128
  8542  12C6  0232               	subwf	??_ring_tactiles^(0+128),w
  8543  12C7  1D03               	skipz
  8544  12C8  2ACB               	goto	u5655
  8545  12C9  3007               	movlw	7
  8546  12CA  0233               	subwf	ring_tactiles@iLed^(0+128),w
  8547  12CB                     u5655:	
  8548  12CB  1C03               	skipc
  8549  12CC  2AA9               	goto	l5615
  8550  12CD                     l5623:	
  8551                           
  8552                           ;LEDs.c: 215: }
  8553                           ;LEDs.c: 216: for (int iLed = 5; iLed > -1; iLed--) {
  8554  12CD  3005               	movlw	5
  8555  12CE  0021               	movlb	1	; select bank1
  8556  12CF  00B5               	movwf	ring_tactiles@iLed_1482^(0+128)
  8557  12D0  3000               	movlw	0
  8558  12D1  00B6               	movwf	(ring_tactiles@iLed_1482^(0+128)+1)
  8559  12D2                     L6:	
  8560  12D2  1BB6               	btfsc	(ring_tactiles@iLed_1482+1)^(0+128),7
  8561  12D3  0008               	return
  8562                           
  8563                           ;LEDs.c: 217: set_leds_bottom(iLed);
  8564  12D4  0836               	movf	(ring_tactiles@iLed_1482+1)^(0+128),w
  8565  12D5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8566  12D6  0835               	movf	ring_tactiles@iLed_1482^(0+128),w
  8567  12D7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8568  12D8  319F  270E  3192   	fcall	_set_leds_bottom
  8569                           
  8570                           ;LEDs.c: 218: wait_ms(5);
  8571  12DB  3005               	movlw	5
  8572  12DC  0021               	movlb	1	; select bank1
  8573  12DD  00AC               	movwf	wait_ms@timeSec^(0+128)
  8574  12DE  3000               	movlw	0
  8575  12DF  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8576  12E0  319E  266A  3192   	fcall	_wait_ms
  8577  12E3  30FF               	movlw	255
  8578  12E4  0021               	movlb	1	; select bank1
  8579  12E5  07B5               	addwf	ring_tactiles@iLed_1482^(0+128),f
  8580  12E6  30FF               	movlw	255
  8581  12E7  3DB6               	addwfc	(ring_tactiles@iLed_1482+1)^(0+128),f
  8582  12E8  2AD2               	goto	L6
  8583  12E9                     __end_of_ring_tactiles:	
  8584                           
  8585                           	psect	text12
  8586  1002                     __ptext12:	
  8587 ;; *************** function _setPedalMode *****************
  8588 ;; Defined at:
  8589 ;;		line 113 in file "tactiles.c"
  8590 ;; Parameters:    Size  Location     Type
  8591 ;;		None
  8592 ;; Auto vars:     Size  Location     Type
  8593 ;;		None
  8594 ;; Return value:  Size  Location     Type
  8595 ;;                  1    wreg      void 
  8596 ;; Registers used:
  8597 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8598 ;; Tracked objects:
  8599 ;;		On entry : 0/0
  8600 ;;		On exit  : 0/0
  8601 ;;		Unchanged: 0/0
  8602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8607 ;;Total ram usage:        0 bytes
  8608 ;; Hardware stack levels used:    1
  8609 ;; Hardware stack levels required when called:    5
  8610 ;; This function calls:
  8611 ;;		_resetRingLEDs
  8612 ;;		_setExpressionDisplay
  8613 ;;		_setPresetDisplay
  8614 ;; This function is called by:
  8615 ;;		_update_mode
  8616 ;;		_setDoublePressState
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function _setPedalMode
  8622  1002                     _setPedalMode:	
  8623                           
  8624                           ;tactiles.c: 114: switch(mode2_state) {
  8625                           
  8626                           ;incstack = 0
  8627                           ; Regs used in _setPedalMode: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8628  1002  2818               	goto	l5709
  8629  1003                     l969:	
  8630                           ;tactiles.c: 115: case 0:
  8631                           
  8632                           
  8633                           ;tactiles.c: 116: LATBbits.LATB1 = 0;
  8634  1003  0022               	movlb	2	; select bank2
  8635  1004  108D               	bcf	13,1	;volatile
  8636                           
  8637                           ;tactiles.c: 117: LATBbits.LATB0 = 0;
  8638  1005  100D               	bcf	13,0	;volatile
  8639                           
  8640                           ;tactiles.c: 118: resetRingLEDs();
  8641  1006  319C  24FD         	fcall	_resetRingLEDs
  8642                           
  8643                           ;tactiles.c: 119: break;
  8644  1008  0008               	return
  8645  1009                     l971:	
  8646                           ;tactiles.c: 120: case 1:
  8647                           
  8648                           
  8649                           ;tactiles.c: 121: LATBbits.LATB1 = 0;
  8650  1009  0022               	movlb	2	; select bank2
  8651  100A  108D               	bcf	13,1	;volatile
  8652                           
  8653                           ;tactiles.c: 122: LATBbits.LATB0 = 1;
  8654  100B  140D               	bsf	13,0	;volatile
  8655                           
  8656                           ;tactiles.c: 123: setPresetDisplay(presetChannel);
  8657  100C  0020               	movlb	0	; select bank0
  8658  100D  0868               	movf	_presetChannel,w
  8659  100E  3187  27C6         	fcall	_setPresetDisplay
  8660                           
  8661                           ;tactiles.c: 124: break;
  8662  1010  0008               	return
  8663  1011                     l972:	
  8664                           ;tactiles.c: 125: case 2:
  8665                           
  8666                           
  8667                           ;tactiles.c: 126: LATBbits.LATB1 = 1;
  8668  1011  0022               	movlb	2	; select bank2
  8669  1012  148D               	bsf	13,1	;volatile
  8670                           
  8671                           ;tactiles.c: 127: LATBbits.LATB0 = 0;
  8672  1013  100D               	bcf	13,0	;volatile
  8673                           
  8674                           ;tactiles.c: 128: setExpressionDisplay(expressionChannel);
  8675  1014  0869               	movf	_expressionChannel^(0+256),w
  8676  1015  319C  24E5         	fcall	_setExpressionDisplay
  8677                           
  8678                           ;tactiles.c: 130: }
  8679                           
  8680                           ;tactiles.c: 129: break;
  8681  1017  0008               	return
  8682  1018                     l5709:	
  8683  1018  0020               	movlb	0	; select bank0
  8684  1019  0854               	movf	_mode2_state,w
  8685                           
  8686                           ; Switch size 1, requested type "space"
  8687                           ; Number of cases is 3, Range of values is 0 to 2
  8688                           ; switch strategies available:
  8689                           ; Name         Instructions Cycles
  8690                           ; simple_byte           10     6 (average)
  8691                           ; direct_byte           12     6 (fixed)
  8692                           ; jumptable            260     6 (fixed)
  8693                           ;	Chosen strategy is simple_byte
  8694  101A  3A00               	xorlw	0	; case 0
  8695  101B  1903               	skipnz
  8696  101C  2803               	goto	l969
  8697  101D  3A01               	xorlw	1	; case 1
  8698  101E  1903               	skipnz
  8699  101F  2809               	goto	l971
  8700  1020  3A03               	xorlw	3	; case 2
  8701  1021  1903               	skipnz
  8702  1022  2811               	goto	l972
  8703  1023  2824               	goto	l973
  8704  1024                     l973:	
  8705  1024  0008               	return
  8706  1025                     __end_of_setPedalMode:	
  8707                           
  8708                           	psect	text13
  8709  07C6                     __ptext13:	
  8710 ;; *************** function _setPresetDisplay *****************
  8711 ;; Defined at:
  8712 ;;		line 51 in file "preset_programming.c"
  8713 ;; Parameters:    Size  Location     Type
  8714 ;;  ledChannel      1    wreg     unsigned char 
  8715 ;; Auto vars:     Size  Location     Type
  8716 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8717 ;; Return value:  Size  Location     Type
  8718 ;;                  1    wreg      void 
  8719 ;; Registers used:
  8720 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8721 ;; Tracked objects:
  8722 ;;		On entry : 0/0
  8723 ;;		On exit  : 0/0
  8724 ;;		Unchanged: 0/0
  8725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8727 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8728 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8729 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8730 ;;Total ram usage:        3 bytes
  8731 ;; Hardware stack levels used:    1
  8732 ;; Hardware stack levels required when called:    4
  8733 ;; This function calls:
  8734 ;;		_set_leds_bottom
  8735 ;;		_set_leds_top
  8736 ;; This function is called by:
  8737 ;;		_setPedalMode
  8738 ;;		_update_selectMode
  8739 ;;		_setDoublePressState
  8740 ;; This function uses a non-reentrant model
  8741 ;;
  8742                           
  8743                           
  8744                           ;psect for function _setPresetDisplay
  8745  07C6                     _setPresetDisplay:	
  8746                           
  8747                           ;incstack = 0
  8748                           ; Regs used in _setPresetDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8749                           ;setPresetDisplay@ledChannel stored from wreg
  8750  07C6  0021               	movlb	1	; select bank1
  8751  07C7  00A6               	movwf	setPresetDisplay@ledChannel^(0+128)
  8752                           
  8753                           ;preset_programming.c: 52: if (ledChannel < 6) {
  8754  07C8  3006               	movlw	6
  8755  07C9  0226               	subwf	setPresetDisplay@ledChannel^(0+128),w
  8756  07CA  1803               	skipnc
  8757  07CB  2FE2               	goto	l5643
  8758                           
  8759                           ;preset_programming.c: 53: set_leds_top(ledChannel, 1);
  8760  07CC  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8761  07CD  00A4               	movwf	??_setPresetDisplay^(0+128)
  8762  07CE  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8763  07CF  0824               	movf	??_setPresetDisplay^(0+128),w
  8764  07D0  00A0               	movwf	set_leds_top@x^(0+128)
  8765  07D1  0825               	movf	(??_setPresetDisplay+1)^(0+128),w
  8766  07D2  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8767  07D3  3001               	movlw	1
  8768  07D4  00A2               	movwf	set_leds_top@ledState^(0+128)
  8769  07D5  3000               	movlw	0
  8770  07D6  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8771  07D7  3193  238C  3187   	fcall	_set_leds_top
  8772                           
  8773                           ;preset_programming.c: 54: set_leds_bottom(6);
  8774  07DA  3006               	movlw	6
  8775  07DB  0021               	movlb	1	; select bank1
  8776  07DC  00A0               	movwf	set_leds_bottom@x^(0+128)
  8777  07DD  3000               	movlw	0
  8778  07DE  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8779  07DF  319F  270E         	fcall	_set_leds_bottom
  8780                           
  8781                           ;preset_programming.c: 55: } else {
  8782  07E1  0008               	return
  8783  07E2                     l5643:	
  8784                           
  8785                           ;preset_programming.c: 56: set_leds_top(6, 1);
  8786  07E2  3006               	movlw	6
  8787  07E3  0021               	movlb	1	; select bank1
  8788  07E4  00A0               	movwf	set_leds_top@x^(0+128)
  8789  07E5  3000               	movlw	0
  8790  07E6  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8791  07E7  3001               	movlw	1
  8792  07E8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8793  07E9  3000               	movlw	0
  8794  07EA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8795  07EB  3193  238C  3187   	fcall	_set_leds_top
  8796                           
  8797                           ;preset_programming.c: 57: set_leds_bottom(10 - ledChannel + 1);
  8798  07EE  0021               	movlb	1	; select bank1
  8799  07EF  0826               	movf	setPresetDisplay@ledChannel^(0+128),w
  8800  07F0  00A4               	movwf	??_setPresetDisplay^(0+128)
  8801  07F1  01A5               	clrf	(??_setPresetDisplay^(0+128)+1)
  8802  07F2  09A4               	comf	??_setPresetDisplay^(0+128),f
  8803  07F3  09A5               	comf	(??_setPresetDisplay^(0+128)+1),f
  8804  07F4  0AA4               	incf	??_setPresetDisplay^(0+128),f
  8805  07F5  1903               	skipnz
  8806  07F6  0AA5               	incf	(??_setPresetDisplay^(0+128)+1),f
  8807  07F7  0824               	movf	??_setPresetDisplay^(0+128),w
  8808  07F8  3E0B               	addlw	11
  8809  07F9  00A0               	movwf	set_leds_bottom@x^(0+128)
  8810  07FA  3000               	movlw	0
  8811  07FB  3D25               	addwfc	(??_setPresetDisplay+1)^(0+128),w
  8812  07FC  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8813  07FD  319F  270E         	fcall	_set_leds_bottom
  8814  07FF  0008               	return
  8815  0800                     __end_of_setPresetDisplay:	
  8816                           
  8817                           	psect	text14
  8818  1CE5                     __ptext14:	
  8819 ;; *************** function _setExpressionDisplay *****************
  8820 ;; Defined at:
  8821 ;;		line 66 in file "preset_programming.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;  ledChannel      1    wreg     unsigned char 
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  ledChannel      1    6[BANK1 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  1    wreg      void 
  8828 ;; Registers used:
  8829 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8836 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8837 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8838 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8839 ;;Total ram usage:        3 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    4
  8842 ;; This function calls:
  8843 ;;		_set_leds_bottom
  8844 ;;		_set_leds_top
  8845 ;; This function is called by:
  8846 ;;		_setPedalMode
  8847 ;;		_update_selectMode
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           
  8852                           ;psect for function _setExpressionDisplay
  8853  1CE5                     _setExpressionDisplay:	
  8854                           
  8855                           ;incstack = 0
  8856                           ; Regs used in _setExpressionDisplay: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8857                           ;setExpressionDisplay@ledChannel stored from wreg
  8858  1CE5  0021               	movlb	1	; select bank1
  8859  1CE6  00A6               	movwf	setExpressionDisplay@ledChannel^(0+128)
  8860                           
  8861                           ;preset_programming.c: 67: set_leds_top(ledChannel, 1);
  8862  1CE7  0826               	movf	setExpressionDisplay@ledChannel^(0+128),w
  8863  1CE8  00A4               	movwf	??_setExpressionDisplay^(0+128)
  8864  1CE9  01A5               	clrf	(??_setExpressionDisplay^(0+128)+1)
  8865  1CEA  0824               	movf	??_setExpressionDisplay^(0+128),w
  8866  1CEB  00A0               	movwf	set_leds_top@x^(0+128)
  8867  1CEC  0825               	movf	(??_setExpressionDisplay+1)^(0+128),w
  8868  1CED  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8869  1CEE  3001               	movlw	1
  8870  1CEF  00A2               	movwf	set_leds_top@ledState^(0+128)
  8871  1CF0  3000               	movlw	0
  8872  1CF1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8873  1CF2  3193  238C  319C   	fcall	_set_leds_top
  8874                           
  8875                           ;preset_programming.c: 68: set_leds_bottom(6);
  8876  1CF5  3006               	movlw	6
  8877  1CF6  0021               	movlb	1	; select bank1
  8878  1CF7  00A0               	movwf	set_leds_bottom@x^(0+128)
  8879  1CF8  3000               	movlw	0
  8880  1CF9  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8881  1CFA  319F  270E         	fcall	_set_leds_bottom
  8882  1CFC  0008               	return
  8883  1CFD                     __end_of_setExpressionDisplay:	
  8884                           
  8885                           	psect	text15
  8886  1CFD                     __ptext15:	
  8887 ;; *************** function _resetRingLEDs *****************
  8888 ;; Defined at:
  8889 ;;		line 61 in file "preset_programming.c"
  8890 ;; Parameters:    Size  Location     Type
  8891 ;;		None
  8892 ;; Auto vars:     Size  Location     Type
  8893 ;;		None
  8894 ;; Return value:  Size  Location     Type
  8895 ;;                  1    wreg      void 
  8896 ;; Registers used:
  8897 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8898 ;; Tracked objects:
  8899 ;;		On entry : 0/0
  8900 ;;		On exit  : 0/0
  8901 ;;		Unchanged: 0/0
  8902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8906 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8907 ;;Total ram usage:        0 bytes
  8908 ;; Hardware stack levels used:    1
  8909 ;; Hardware stack levels required when called:    4
  8910 ;; This function calls:
  8911 ;;		_set_leds_bottom
  8912 ;;		_set_leds_top
  8913 ;; This function is called by:
  8914 ;;		_update_mode
  8915 ;;		_setPedalMode
  8916 ;;		_setDoublePressState
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _resetRingLEDs
  8922  1CFD                     _resetRingLEDs:	
  8923                           
  8924                           ;preset_programming.c: 62: set_leds_top(top_push_state, 1);
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _resetRingLEDs: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928  1CFD  0020               	movlb	0	; select bank0
  8929  1CFE  0865               	movf	_top_push_state+1,w
  8930  1CFF  0021               	movlb	1	; select bank1
  8931  1D00  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8932  1D01  0020               	movlb	0	; select bank0
  8933  1D02  0864               	movf	_top_push_state,w
  8934  1D03  0021               	movlb	1	; select bank1
  8935  1D04  00A0               	movwf	set_leds_top@x^(0+128)
  8936  1D05  3001               	movlw	1
  8937  1D06  00A2               	movwf	set_leds_top@ledState^(0+128)
  8938  1D07  3000               	movlw	0
  8939  1D08  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8940  1D09  3193  238C  319C   	fcall	_set_leds_top
  8941                           
  8942                           ;preset_programming.c: 63: set_leds_bottom(bottom_push_state);
  8943  1D0C  0020               	movlb	0	; select bank0
  8944  1D0D  0861               	movf	_bottom_push_state+1,w
  8945  1D0E  0021               	movlb	1	; select bank1
  8946  1D0F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8947  1D10  0020               	movlb	0	; select bank0
  8948  1D11  0860               	movf	_bottom_push_state,w
  8949  1D12  0021               	movlb	1	; select bank1
  8950  1D13  00A0               	movwf	set_leds_bottom@x^(0+128)
  8951  1D14  319F  270E         	fcall	_set_leds_bottom
  8952  1D16  0008               	return
  8953  1D17                     __end_of_resetRingLEDs:	
  8954                           
  8955                           	psect	text16
  8956  08A7                     __ptext16:	
  8957 ;; *************** function _set_subdivision *****************
  8958 ;; Defined at:
  8959 ;;		line 77 in file "user.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;  x               2   22[BANK2 ] int 
  8962 ;;  y               2   24[BANK2 ] int 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  scalar          3   29[BANK2 ] float 
  8965 ;;  tmpX            2   32[BANK2 ] int 
  8966 ;; Return value:  Size  Location     Type
  8967 ;;                  2   22[BANK2 ] int 
  8968 ;; Registers used:
  8969 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8970 ;; Tracked objects:
  8971 ;;		On entry : 0/0
  8972 ;;		On exit  : 0/0
  8973 ;;		Unchanged: 0/0
  8974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8975 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8976 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8977 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8978 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8979 ;;Total ram usage:       12 bytes
  8980 ;; Hardware stack levels used:    1
  8981 ;; Hardware stack levels required when called:    6
  8982 ;; This function calls:
  8983 ;;		___awtoft
  8984 ;;		___ftmul
  8985 ;;		___fttol
  8986 ;;		_trunc
  8987 ;; This function is called by:
  8988 ;;		_main
  8989 ;; This function uses a non-reentrant model
  8990 ;;
  8991                           
  8992                           
  8993                           ;psect for function _set_subdivision
  8994  08A7                     _set_subdivision:	
  8995                           
  8996                           ;user.c: 81: adjust_sub_delay = 0;
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9000  08A7  0023               	movlb	3	; select bank3
  9001  08A8  01B4               	clrf	_adjust_sub_delay^(0+384)
  9002  08A9  01B5               	clrf	(_adjust_sub_delay+1)^(0+384)
  9003                           
  9004                           ;user.c: 82: int tmpX = x;
  9005  08AA  0022               	movlb	2	; select bank2
  9006  08AB  0837               	movf	(set_subdivision@x+1)^(0+256),w
  9007  08AC  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9008  08AD  0836               	movf	set_subdivision@x^(0+256),w
  9009  08AE  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9010                           
  9011                           ;user.c: 83: float scalar = 1.0;
  9012  08AF  3000               	movlw	0
  9013  08B0  00BD               	movwf	set_subdivision@scalar^(0+256)
  9014  08B1  3080               	movlw	128
  9015  08B2  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9016  08B3  303F               	movlw	63
  9017  08B4  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9018                           
  9019                           ;user.c: 85: switch (y) {
  9020  08B5  28CF               	goto	l6519
  9021  08B6                     l6507:	
  9022                           ;user.c: 86: case 1:
  9023                           
  9024                           
  9025                           ;user.c: 87: scalar = 0.75;
  9026  08B6  3000               	movlw	0
  9027  08B7  00BD               	movwf	set_subdivision@scalar^(0+256)
  9028  08B8  3040               	movlw	64
  9029  08B9  28C1               	goto	L8
  9030  08BA                     l6509:	
  9031                           ;user.c: 89: case 2:
  9032                           
  9033                           ;user.c: 88: break;
  9034                           
  9035                           
  9036                           ;user.c: 90: scalar = 0.6666;
  9037  08BA  30A6               	movlw	166
  9038  08BB  00BD               	movwf	set_subdivision@scalar^(0+256)
  9039  08BC  302A               	movlw	42
  9040  08BD  28C1               	goto	L8
  9041  08BE                     l6511:	
  9042                           ;user.c: 92: case 3:
  9043                           
  9044                           ;user.c: 91: break;
  9045                           
  9046                           
  9047                           ;user.c: 93: scalar = .5;
  9048  08BE  3000               	movlw	0
  9049  08BF  00BD               	movwf	set_subdivision@scalar^(0+256)
  9050  08C0  3000               	movlw	0
  9051  08C1                     L8:	
  9052  08C1  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9053  08C2  303F               	movlw	63
  9054  08C3  28CD               	goto	L10
  9055  08C4                     l6513:	
  9056                           ;user.c: 95: case 4:
  9057                           
  9058                           ;user.c: 94: break;
  9059                           
  9060                           
  9061                           ;user.c: 96: scalar = 0.3333;
  9062  08C4  30A6               	movlw	166
  9063  08C5  00BD               	movwf	set_subdivision@scalar^(0+256)
  9064  08C6  30AA               	movlw	170
  9065  08C7  28CB               	goto	L11
  9066  08C8                     l6515:	
  9067                           ;user.c: 98: case 5:
  9068                           
  9069                           ;user.c: 97: break;
  9070                           
  9071                           
  9072                           ;user.c: 99: scalar = 0.25;
  9073  08C8  3000               	movlw	0
  9074  08C9  00BD               	movwf	set_subdivision@scalar^(0+256)
  9075  08CA  3080               	movlw	128
  9076  08CB                     L11:	
  9077  08CB  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  9078  08CC  303E               	movlw	62
  9079  08CD                     L10:	
  9080  08CD  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  9081                           
  9082                           ;user.c: 104: }
  9083                           
  9084                           ;user.c: 103: break;
  9085                           
  9086                           ;user.c: 101: case 6:
  9087                           
  9088                           ;user.c: 100: break;
  9089  08CE  28E8               	goto	l6521
  9090  08CF                     l6519:	
  9091                           
  9092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9093                           ; Switch size 1, requested type "space"
  9094                           ; Number of cases is 1, Range of values is 0 to 0
  9095                           ; switch strategies available:
  9096                           ; Name         Instructions Cycles
  9097                           ; simple_byte            4     3 (average)
  9098                           ; direct_byte            8     6 (fixed)
  9099                           ; jumptable            260     6 (fixed)
  9100                           ;	Chosen strategy is simple_byte
  9101  08CF  0839               	movf	(set_subdivision@y+1)^(0+256),w
  9102  08D0  3A00               	xorlw	0	; case 0
  9103  08D1  1903               	skipnz
  9104  08D2  28D4               	goto	l6973
  9105  08D3  28E8               	goto	l6521
  9106  08D4                     l6973:	
  9107                           
  9108                           ; Switch size 1, requested type "space"
  9109                           ; Number of cases is 6, Range of values is 1 to 6
  9110                           ; switch strategies available:
  9111                           ; Name         Instructions Cycles
  9112                           ; simple_byte           19    10 (average)
  9113                           ; direct_byte           21     9 (fixed)
  9114                           ; jumptable            263     9 (fixed)
  9115                           ;	Chosen strategy is simple_byte
  9116  08D4  0838               	movf	set_subdivision@y^(0+256),w
  9117  08D5  3A01               	xorlw	1	; case 1
  9118  08D6  1903               	skipnz
  9119  08D7  28B6               	goto	l6507
  9120  08D8  3A03               	xorlw	3	; case 2
  9121  08D9  1903               	skipnz
  9122  08DA  28BA               	goto	l6509
  9123  08DB  3A01               	xorlw	1	; case 3
  9124  08DC  1903               	skipnz
  9125  08DD  28BE               	goto	l6511
  9126  08DE  3A07               	xorlw	7	; case 4
  9127  08DF  1903               	skipnz
  9128  08E0  28C4               	goto	l6513
  9129  08E1  3A01               	xorlw	1	; case 5
  9130  08E2  1903               	skipnz
  9131  08E3  28C8               	goto	l6515
  9132  08E4  3A03               	xorlw	3	; case 6
  9133  08E5  1903               	skipnz
  9134  08E6  28E8               	goto	l6521
  9135  08E7  28E8               	goto	l6521
  9136  08E8                     l6521:	
  9137                           
  9138                           ;user.c: 106: tmpX = tmpX * scalar;
  9139  08E8  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9140  08E9  0021               	movlb	1	; select bank1
  9141  08EA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9142  08EB  0022               	movlb	2	; select bank2
  9143  08EC  0840               	movf	set_subdivision@tmpX^(0+256),w
  9144  08ED  0021               	movlb	1	; select bank1
  9145  08EE  00A8               	movwf	___awtoft@c^(0+128)
  9146  08EF  319D  256B  3188   	fcall	___awtoft
  9147  08F2  0021               	movlb	1	; select bank1
  9148  08F3  0828               	movf	?___awtoft^(0+128),w
  9149  08F4  00B8               	movwf	___ftmul@f2^(0+128)
  9150  08F5  0829               	movf	(?___awtoft+1)^(0+128),w
  9151  08F6  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9152  08F7  082A               	movf	(?___awtoft+2)^(0+128),w
  9153  08F8  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9154  08F9  0022               	movlb	2	; select bank2
  9155  08FA  083D               	movf	set_subdivision@scalar^(0+256),w
  9156  08FB  0021               	movlb	1	; select bank1
  9157  08FC  00B5               	movwf	___ftmul@f1^(0+128)
  9158  08FD  0022               	movlb	2	; select bank2
  9159  08FE  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  9160  08FF  0021               	movlb	1	; select bank1
  9161  0900  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9162  0901  0022               	movlb	2	; select bank2
  9163  0902  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  9164  0903  0021               	movlb	1	; select bank1
  9165  0904  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9166  0905  3197  274C  3188   	fcall	___ftmul
  9167  0908  0021               	movlb	1	; select bank1
  9168  0909  0835               	movf	?___ftmul^(0+128),w
  9169  090A  00E7               	movwf	___fttol@f1^(0+128)
  9170  090B  0836               	movf	(?___ftmul+1)^(0+128),w
  9171  090C  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9172  090D  0837               	movf	(?___ftmul+2)^(0+128),w
  9173  090E  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9174  090F  3188  2008  3188   	fcall	___fttol
  9175  0912  0021               	movlb	1	; select bank1
  9176  0913  0868               	movf	(?___fttol^(0+128)+1),w
  9177  0914  0022               	movlb	2	; select bank2
  9178  0915  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  9179  0916  0021               	movlb	1	; select bank1
  9180  0917  0867               	movf	?___fttol^(0+128),w
  9181  0918  0022               	movlb	2	; select bank2
  9182  0919  00C0               	movwf	set_subdivision@tmpX^(0+256)
  9183                           
  9184                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  9185  091A  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9186  091B  0021               	movlb	1	; select bank1
  9187  091C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9188  091D  0022               	movlb	2	; select bank2
  9189  091E  0840               	movf	set_subdivision@tmpX^(0+256),w
  9190  091F  0021               	movlb	1	; select bank1
  9191  0920  00A8               	movwf	___awtoft@c^(0+128)
  9192  0921  319D  256B  3188   	fcall	___awtoft
  9193  0924  0021               	movlb	1	; select bank1
  9194  0925  0828               	movf	?___awtoft^(0+128),w
  9195  0926  0022               	movlb	2	; select bank2
  9196  0927  00AE               	movwf	trunc@x^(0+256)
  9197  0928  0021               	movlb	1	; select bank1
  9198  0929  0829               	movf	(?___awtoft+1)^(0+128),w
  9199  092A  0022               	movlb	2	; select bank2
  9200  092B  00AF               	movwf	(trunc@x+1)^(0+256)
  9201  092C  0021               	movlb	1	; select bank1
  9202  092D  082A               	movf	(?___awtoft+2)^(0+128),w
  9203  092E  0022               	movlb	2	; select bank2
  9204  092F  00B0               	movwf	(trunc@x+2)^(0+256)
  9205  0930  3193  233A  3188   	fcall	_trunc
  9206  0933  0022               	movlb	2	; select bank2
  9207  0934  082E               	movf	?_trunc^(0+256),w
  9208  0935  00BA               	movwf	??_set_subdivision^(0+256)
  9209  0936  082F               	movf	(?_trunc+1)^(0+256),w
  9210  0937  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  9211  0938  0830               	movf	(?_trunc+2)^(0+256),w
  9212  0939  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  9213  093A  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9214  093B  0021               	movlb	1	; select bank1
  9215  093C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  9216  093D  0022               	movlb	2	; select bank2
  9217  093E  0840               	movf	set_subdivision@tmpX^(0+256),w
  9218  093F  0021               	movlb	1	; select bank1
  9219  0940  00A8               	movwf	___awtoft@c^(0+128)
  9220  0941  319D  256B  3188   	fcall	___awtoft
  9221  0944  0021               	movlb	1	; select bank1
  9222  0945  082A               	movf	(?___awtoft+2)^(0+128),w
  9223  0946  0022               	movlb	2	; select bank2
  9224  0947  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  9225  0948  1D03               	skipz
  9226  0949  2954               	goto	u7425
  9227  094A  0021               	movlb	1	; select bank1
  9228  094B  0829               	movf	(?___awtoft+1)^(0+128),w
  9229  094C  0022               	movlb	2	; select bank2
  9230  094D  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  9231  094E  1D03               	skipz
  9232  094F  2954               	goto	u7425
  9233  0950  0021               	movlb	1	; select bank1
  9234  0951  0828               	movf	?___awtoft^(0+128),w
  9235  0952  0022               	movlb	2	; select bank2
  9236  0953  063A               	xorwf	??_set_subdivision^(0+256),w
  9237  0954                     u7425:	
  9238  0954  1903               	skipnz
  9239  0955  295B               	goto	l573
  9240                           
  9241                           ;user.c: 109: adjust_sub_delay = 1;
  9242  0956  3001               	movlw	1
  9243  0957  0023               	movlb	3	; select bank3
  9244  0958  00B4               	movwf	_adjust_sub_delay^(0+384)
  9245  0959  3000               	movlw	0
  9246  095A  00B5               	movwf	(_adjust_sub_delay^(0+384)+1)
  9247  095B                     l573:	
  9248                           
  9249                           ;user.c: 110: }
  9250                           ;user.c: 112: return tmpX;
  9251  095B  0022               	movlb	2	; select bank2
  9252  095C  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  9253  095D  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  9254  095E  0840               	movf	set_subdivision@tmpX^(0+256),w
  9255  095F  00B6               	movwf	?_set_subdivision^(0+256)
  9256  0960  0008               	return
  9257  0961                     __end_of_set_subdivision:	
  9258                           
  9259                           	psect	text17
  9260  133A                     __ptext17:	
  9261 ;; *************** function _trunc *****************
  9262 ;; Defined at:
  9263 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  9264 ;; Parameters:    Size  Location     Type
  9265 ;;  x               3   14[BANK2 ] int 
  9266 ;; Auto vars:     Size  Location     Type
  9267 ;;  i               3   17[BANK2 ] int 
  9268 ;;  expon           2   20[BANK2 ] int 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;                  3   14[BANK2 ] int 
  9271 ;; Registers used:
  9272 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9278 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9279 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9280 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9281 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9282 ;;Total ram usage:        9 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    5
  9285 ;; This function calls:
  9286 ;;		___altoft
  9287 ;;		___fttol
  9288 ;;		_frexp
  9289 ;; This function is called by:
  9290 ;;		_set_subdivision
  9291 ;; This function uses a non-reentrant model
  9292 ;;
  9293                           
  9294                           
  9295                           ;psect for function _trunc
  9296  133A                     _trunc:	
  9297                           
  9298                           ;incstack = 0
  9299                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9300  133A  0022               	movlb	2	; select bank2
  9301  133B  082E               	movf	trunc@x^(0+256),w
  9302  133C  0021               	movlb	1	; select bank1
  9303  133D  00A0               	movwf	frexp@value^(0+128)
  9304  133E  0022               	movlb	2	; select bank2
  9305  133F  082F               	movf	(trunc@x+1)^(0+256),w
  9306  1340  0021               	movlb	1	; select bank1
  9307  1341  00A1               	movwf	(frexp@value+1)^(0+128)
  9308  1342  0022               	movlb	2	; select bank2
  9309  1343  0830               	movf	(trunc@x+2)^(0+256),w
  9310  1344  0021               	movlb	1	; select bank1
  9311  1345  00A2               	movwf	(frexp@value+2)^(0+128)
  9312  1346  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  9313  1347  00EF               	movwf	??_trunc^(0+128)
  9314  1348  086F               	movf	??_trunc^(0+128),w
  9315  1349  00A3               	movwf	frexp@eptr^(0+128)
  9316  134A  319E  26D4  3193   	fcall	_frexp
  9317  134D  0022               	movlb	2	; select bank2
  9318  134E  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  9319  134F  2B57               	goto	l5821
  9320  1350  3000               	movlw	0
  9321  1351  00AE               	movwf	?_trunc^(0+256)
  9322  1352  3000               	movlw	0
  9323  1353  00AF               	movwf	(?_trunc+1)^(0+256)
  9324  1354  3000               	movlw	0
  9325  1355  00B0               	movwf	(?_trunc+2)^(0+256)
  9326  1356  0008               	return
  9327  1357                     l5821:	
  9328  1357  3000               	movlw	0
  9329  1358  0235               	subwf	(trunc@expon+1)^(0+256),w
  9330  1359  3015               	movlw	21
  9331  135A  1903               	skipnz
  9332  135B  0234               	subwf	trunc@expon^(0+256),w
  9333  135C  1803               	btfsc	3,0
  9334  135D  0008               	return
  9335  135E  082E               	movf	trunc@x^(0+256),w
  9336  135F  0021               	movlb	1	; select bank1
  9337  1360  00E7               	movwf	___fttol@f1^(0+128)
  9338  1361  0022               	movlb	2	; select bank2
  9339  1362  082F               	movf	(trunc@x+1)^(0+256),w
  9340  1363  0021               	movlb	1	; select bank1
  9341  1364  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9342  1365  0022               	movlb	2	; select bank2
  9343  1366  0830               	movf	(trunc@x+2)^(0+256),w
  9344  1367  0021               	movlb	1	; select bank1
  9345  1368  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9346  1369  3188  2008  3193   	fcall	___fttol
  9347  136C  0021               	movlb	1	; select bank1
  9348  136D  086A               	movf	(?___fttol+3)^(0+128),w
  9349  136E  0022               	movlb	2	; select bank2
  9350  136F  00A9               	movwf	(___altoft@c+3)^(0+256)
  9351  1370  0021               	movlb	1	; select bank1
  9352  1371  0869               	movf	(?___fttol+2)^(0+128),w
  9353  1372  0022               	movlb	2	; select bank2
  9354  1373  00A8               	movwf	(___altoft@c+2)^(0+256)
  9355  1374  0021               	movlb	1	; select bank1
  9356  1375  0868               	movf	(?___fttol+1)^(0+128),w
  9357  1376  0022               	movlb	2	; select bank2
  9358  1377  00A7               	movwf	(___altoft@c+1)^(0+256)
  9359  1378  0021               	movlb	1	; select bank1
  9360  1379  0867               	movf	?___fttol^(0+128),w
  9361  137A  0022               	movlb	2	; select bank2
  9362  137B  00A6               	movwf	___altoft@c^(0+256)
  9363  137C  3191  21FE         	fcall	___altoft
  9364  137E  0022               	movlb	2	; select bank2
  9365  137F  0826               	movf	?___altoft^(0+256),w
  9366  1380  00B1               	movwf	trunc@i^(0+256)
  9367  1381  0827               	movf	(?___altoft+1)^(0+256),w
  9368  1382  00B2               	movwf	(trunc@i+1)^(0+256)
  9369  1383  0828               	movf	(?___altoft+2)^(0+256),w
  9370  1384  00B3               	movwf	(trunc@i+2)^(0+256)
  9371  1385  0831               	movf	trunc@i^(0+256),w
  9372  1386  00AE               	movwf	?_trunc^(0+256)
  9373  1387  0832               	movf	(trunc@i+1)^(0+256),w
  9374  1388  00AF               	movwf	(?_trunc+1)^(0+256)
  9375  1389  0833               	movf	(trunc@i+2)^(0+256),w
  9376  138A  00B0               	movwf	(?_trunc+2)^(0+256)
  9377  138B  0008               	return
  9378  138C                     __end_of_trunc:	
  9379                           
  9380                           	psect	text18
  9381  1ED4                     __ptext18:	
  9382 ;; *************** function _frexp *****************
  9383 ;; Defined at:
  9384 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  9385 ;; Parameters:    Size  Location     Type
  9386 ;;  value           3    0[BANK1 ] int 
  9387 ;;  eptr            1    3[BANK1 ] PTR int 
  9388 ;;		 -> trunc@expon(2), 
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;                  3    0[BANK1 ] PTR int 
  9393 ;; Registers used:
  9394 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9400 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9402 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9403 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9404 ;;Total ram usage:        6 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    3
  9407 ;; This function calls:
  9408 ;;		Nothing
  9409 ;; This function is called by:
  9410 ;;		_trunc
  9411 ;; This function uses a non-reentrant model
  9412 ;;
  9413                           
  9414                           
  9415                           ;psect for function _frexp
  9416  1ED4                     _frexp:	
  9417                           
  9418                           ;incstack = 0
  9419                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9420  1ED4  0021               	movlb	1	; select bank1
  9421  1ED5  0822               	movf	(frexp@value+2)^(0+128),w
  9422  1ED6  0421               	iorwf	(frexp@value+1)^(0+128),w
  9423  1ED7  0420               	iorwf	frexp@value^(0+128),w
  9424  1ED8  1D03               	skipz
  9425  1ED9  2EE2               	goto	l5775
  9426  1EDA  0823               	movf	frexp@eptr^(0+128),w
  9427  1EDB  0086               	movwf	6
  9428  1EDC  3001               	movlw	1	; select bank2/3
  9429  1EDD  0087               	movwf	7
  9430  1EDE  3000               	movlw	0
  9431  1EDF  3FC0               	movwi [0]fsr1
  9432  1EE0  3FC1               	movwi [1]fsr1
  9433                           
  9434                           ;	Return value of _frexp is never used
  9435  1EE1  0008               	return
  9436  1EE2                     l5775:	
  9437  1EE2  0822               	movf	(frexp@value^(0+128)+2),w
  9438  1EE3  397F               	andlw	127
  9439  1EE4  00A4               	movwf	??_frexp^(0+128)
  9440  1EE5  01A5               	clrf	(??_frexp^(0+128)+1)
  9441  1EE6  35A4               	lslf	??_frexp^(0+128),f
  9442  1EE7  0DA5               	rlf	(??_frexp^(0+128)+1),f
  9443  1EE8  0823               	movf	frexp@eptr^(0+128),w
  9444  1EE9  0086               	movwf	6
  9445  1EEA  3001               	movlw	1	; select bank2/3
  9446  1EEB  0087               	movwf	7
  9447  1EEC  0824               	movf	??_frexp^(0+128),w
  9448  1EED  3FC0               	movwi [0]fsr1
  9449  1EEE  0825               	movf	(??_frexp+1)^(0+128),w
  9450  1EEF  3FC1               	movwi [1]fsr1
  9451  1EF0  0D21               	rlf	(frexp@value^(0+128)+1),w
  9452  1EF1  0D21               	rlf	(frexp@value^(0+128)+1),w
  9453  1EF2  3901               	andlw	1
  9454  1EF3  00A4               	movwf	??_frexp^(0+128)
  9455  1EF4  01A5               	clrf	(??_frexp^(0+128)+1)
  9456  1EF5  0823               	movf	frexp@eptr^(0+128),w
  9457  1EF6  0086               	movwf	6
  9458  1EF7  3001               	movlw	1	; select bank2/3
  9459  1EF8  0087               	movwf	7
  9460  1EF9  0824               	movf	??_frexp^(0+128),w
  9461  1EFA  0481               	iorwf	1,f
  9462  1EFB  3141               	addfsr 1,1
  9463  1EFC  0825               	movf	(??_frexp+1)^(0+128),w
  9464  1EFD  0481               	iorwf	1,f
  9465  1EFE  0823               	movf	frexp@eptr^(0+128),w
  9466  1EFF  0086               	movwf	6
  9467  1F00  3001               	movlw	1	; select bank2/3
  9468  1F01  0087               	movwf	7
  9469  1F02  3082               	movlw	130
  9470  1F03  0781               	addwf	1,f
  9471  1F04  3141               	addfsr 1,1
  9472  1F05  30FF               	movlw	255
  9473  1F06  3D81               	addwfc	1,f
  9474  1F07  317F               	addfsr 1,-1
  9475  1F08  0822               	movf	(frexp@value^(0+128)+2),w
  9476  1F09  3980               	andlw	-128
  9477  1F0A  383F               	iorlw	63
  9478  1F0B  00A2               	movwf	(frexp@value^(0+128)+2)
  9479  1F0C  13A1               	bcf	(frexp@value^(0+128)+1),7
  9480  1F0D  0008               	return
  9481  1F0E                     __end_of_frexp:	
  9482                           ;	Return value of _frexp is never used
  9483                           
  9484                           
  9485                           	psect	text19
  9486  0808                     __ptext19:	
  9487 ;; *************** function ___fttol *****************
  9488 ;; Defined at:
  9489 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9490 ;; Parameters:    Size  Location     Type
  9491 ;;  f1              3   71[BANK1 ] float 
  9492 ;; Auto vars:     Size  Location     Type
  9493 ;;  lval            4    1[BANK2 ] unsigned long 
  9494 ;;  exp1            1    5[BANK2 ] unsigned char 
  9495 ;;  sign1           1    0[BANK2 ] unsigned char 
  9496 ;; Return value:  Size  Location     Type
  9497 ;;                  4   71[BANK1 ] long 
  9498 ;; Registers used:
  9499 ;;		wreg, status,2, status,0
  9500 ;; Tracked objects:
  9501 ;;		On entry : 0/0
  9502 ;;		On exit  : 0/0
  9503 ;;		Unchanged: 0/0
  9504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9505 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9506 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9507 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9508 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9509 ;;Total ram usage:       14 bytes
  9510 ;; Hardware stack levels used:    1
  9511 ;; Hardware stack levels required when called:    3
  9512 ;; This function calls:
  9513 ;;		Nothing
  9514 ;; This function is called by:
  9515 ;;		_main
  9516 ;;		_set_subdivision
  9517 ;;		_trunc
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           
  9522                           ;psect for function ___fttol
  9523  0808                     ___fttol:	
  9524                           
  9525                           ;incstack = 0
  9526                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9527  0808  0021               	movlb	1	; select bank1
  9528  0809  0867               	movf	___fttol@f1^(0+128),w
  9529  080A  00EB               	movwf	??___fttol^(0+128)
  9530  080B  0868               	movf	(___fttol@f1+1)^(0+128),w
  9531  080C  00EC               	movwf	(??___fttol^(0+128)+1)
  9532  080D  0869               	movf	(___fttol@f1+2)^(0+128),w
  9533  080E  00ED               	movwf	(??___fttol^(0+128)+2)
  9534  080F  1003               	clrc
  9535  0810  0D6C               	rlf	(??___fttol^(0+128)+1),w
  9536  0811  0D6D               	rlf	(??___fttol^(0+128)+2),w
  9537  0812  00EE               	movwf	(??___fttol+3)^(0+128)
  9538  0813  086E               	movf	(??___fttol+3)^(0+128),w
  9539  0814  0022               	movlb	2	; select bank2
  9540  0815  00A5               	movwf	___fttol@exp1^(0+256)
  9541  0816  0825               	movf	___fttol@exp1^(0+256),w
  9542  0817  1D03               	btfss	3,2
  9543  0818  2823               	goto	l5733
  9544  0819  3000               	movlw	0
  9545  081A  0021               	movlb	1	; select bank1
  9546  081B  00EA               	movwf	(?___fttol+3)^(0+128)
  9547  081C  3000               	movlw	0
  9548  081D  00E9               	movwf	(?___fttol+2)^(0+128)
  9549  081E  3000               	movlw	0
  9550  081F  00E8               	movwf	(?___fttol+1)^(0+128)
  9551  0820  3000               	movlw	0
  9552  0821  00E7               	movwf	?___fttol^(0+128)
  9553  0822  0008               	return
  9554  0823                     l5733:	
  9555  0823  0021               	movlb	1	; select bank1
  9556  0824  0867               	movf	___fttol@f1^(0+128),w
  9557  0825  00EB               	movwf	??___fttol^(0+128)
  9558  0826  0868               	movf	(___fttol@f1+1)^(0+128),w
  9559  0827  00EC               	movwf	(??___fttol^(0+128)+1)
  9560  0828  0869               	movf	(___fttol@f1+2)^(0+128),w
  9561  0829  00ED               	movwf	(??___fttol^(0+128)+2)
  9562  082A  3017               	movlw	23
  9563  082B                     u5855:	
  9564  082B  36ED               	lsrf	(??___fttol^(0+128)+2),f
  9565  082C  0CEC               	rrf	(??___fttol^(0+128)+1),f
  9566  082D  0CEB               	rrf	??___fttol^(0+128),f
  9567  082E  0B89               	decfsz	9,f
  9568  082F  282B               	goto	u5855
  9569  0830  086B               	movf	??___fttol^(0+128),w
  9570  0831  00EE               	movwf	(??___fttol+3)^(0+128)
  9571  0832  086E               	movf	(??___fttol+3)^(0+128),w
  9572  0833  0022               	movlb	2	; select bank2
  9573  0834  00A0               	movwf	___fttol@sign1^(0+256)
  9574  0835  0021               	movlb	1	; select bank1
  9575  0836  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  9576  0837  30FF               	movlw	255
  9577  0838  05E7               	andwf	___fttol@f1^(0+128),f
  9578  0839  30FF               	movlw	255
  9579  083A  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  9580  083B  3000               	movlw	0
  9581  083C  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  9582  083D  0867               	movf	___fttol@f1^(0+128),w
  9583  083E  0022               	movlb	2	; select bank2
  9584  083F  00A1               	movwf	___fttol@lval^(0+256)
  9585  0840  0021               	movlb	1	; select bank1
  9586  0841  0868               	movf	(___fttol@f1+1)^(0+128),w
  9587  0842  0022               	movlb	2	; select bank2
  9588  0843  00A2               	movwf	(___fttol@lval^(0+256)+1)
  9589  0844  0021               	movlb	1	; select bank1
  9590  0845  0869               	movf	(___fttol@f1+2)^(0+128),w
  9591  0846  0022               	movlb	2	; select bank2
  9592  0847  00A3               	movwf	(___fttol@lval^(0+256)+2)
  9593  0848  01A4               	clrf	(___fttol@lval^(0+256)+3)
  9594  0849  308E               	movlw	142
  9595  084A  02A5               	subwf	___fttol@exp1^(0+256),f
  9596  084B  1FA5               	btfss	___fttol@exp1^(0+256),7
  9597  084C  286D               	goto	l5753
  9598  084D  0825               	movf	___fttol@exp1^(0+256),w
  9599  084E  3A80               	xorlw	128
  9600  084F  3E8F               	addlw	143
  9601  0850  1803               	skipnc
  9602  0851  285C               	goto	l5751
  9603  0852  3000               	movlw	0
  9604  0853  0021               	movlb	1	; select bank1
  9605  0854  00EA               	movwf	(?___fttol+3)^(0+128)
  9606  0855  3000               	movlw	0
  9607  0856  00E9               	movwf	(?___fttol+2)^(0+128)
  9608  0857  3000               	movlw	0
  9609  0858  00E8               	movwf	(?___fttol+1)^(0+128)
  9610  0859  3000               	movlw	0
  9611  085A  00E7               	movwf	?___fttol^(0+128)
  9612  085B  0008               	return
  9613  085C                     l5751:	
  9614  085C  3001               	movlw	1
  9615  085D                     u5885:	
  9616  085D  0022               	movlb	2	; select bank2
  9617  085E  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  9618  085F  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  9619  0860  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  9620  0861  0CA1               	rrf	___fttol@lval^(0+256),f
  9621  0862  0B89               	decfsz	9,f
  9622  0863  285D               	goto	u5885
  9623  0864  3001               	movlw	1
  9624  0865  0021               	movlb	1	; select bank1
  9625  0866  00EB               	movwf	??___fttol^(0+128)
  9626  0867  086B               	movf	??___fttol^(0+128),w
  9627  0868  0022               	movlb	2	; select bank2
  9628  0869  07A5               	addwf	___fttol@exp1^(0+256),f
  9629  086A  1903               	btfsc	3,2
  9630  086B  2889               	goto	l5761
  9631  086C  285C               	goto	l5751
  9632  086D                     l5753:	
  9633  086D  3018               	movlw	24
  9634  086E  0225               	subwf	___fttol@exp1^(0+256),w
  9635  086F  1C03               	skipc
  9636  0870  2885               	goto	l1882
  9637  0871  3000               	movlw	0
  9638  0872  0021               	movlb	1	; select bank1
  9639  0873  00EA               	movwf	(?___fttol+3)^(0+128)
  9640  0874  3000               	movlw	0
  9641  0875  00E9               	movwf	(?___fttol+2)^(0+128)
  9642  0876  3000               	movlw	0
  9643  0877  00E8               	movwf	(?___fttol+1)^(0+128)
  9644  0878  3000               	movlw	0
  9645  0879  00E7               	movwf	?___fttol^(0+128)
  9646  087A  0008               	return
  9647  087B                     l5759:	
  9648  087B  3001               	movlw	1
  9649  087C                     u5915:	
  9650  087C  0022               	movlb	2	; select bank2
  9651  087D  35A1               	lslf	___fttol@lval^(0+256),f
  9652  087E  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  9653  087F  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  9654  0880  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  9655  0881  0B89               	decfsz	9,f
  9656  0882  287C               	goto	u5915
  9657  0883  3001               	movlw	1
  9658  0884  02A5               	subwf	___fttol@exp1^(0+256),f
  9659  0885                     l1882:	
  9660  0885  0022               	movlb	2	; select bank2
  9661  0886  0825               	movf	___fttol@exp1^(0+256),w
  9662  0887  1D03               	btfss	3,2
  9663  0888  287B               	goto	l5759
  9664  0889                     l5761:	
  9665  0889  0820               	movf	___fttol@sign1^(0+256),w
  9666  088A  1903               	btfsc	3,2
  9667  088B  2897               	goto	l5765
  9668  088C  09A1               	comf	___fttol@lval^(0+256),f
  9669  088D  09A2               	comf	(___fttol@lval+1)^(0+256),f
  9670  088E  09A3               	comf	(___fttol@lval+2)^(0+256),f
  9671  088F  09A4               	comf	(___fttol@lval+3)^(0+256),f
  9672  0890  0AA1               	incf	___fttol@lval^(0+256),f
  9673  0891  1903               	skipnz
  9674  0892  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  9675  0893  1903               	skipnz
  9676  0894  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  9677  0895  1903               	skipnz
  9678  0896  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  9679  0897                     l5765:	
  9680  0897  0824               	movf	(___fttol@lval+3)^(0+256),w
  9681  0898  0021               	movlb	1	; select bank1
  9682  0899  00EA               	movwf	(?___fttol+3)^(0+128)
  9683  089A  0022               	movlb	2	; select bank2
  9684  089B  0823               	movf	(___fttol@lval+2)^(0+256),w
  9685  089C  0021               	movlb	1	; select bank1
  9686  089D  00E9               	movwf	(?___fttol+2)^(0+128)
  9687  089E  0022               	movlb	2	; select bank2
  9688  089F  0822               	movf	(___fttol@lval+1)^(0+256),w
  9689  08A0  0021               	movlb	1	; select bank1
  9690  08A1  00E8               	movwf	(?___fttol+1)^(0+128)
  9691  08A2  0022               	movlb	2	; select bank2
  9692  08A3  0821               	movf	___fttol@lval^(0+256),w
  9693  08A4  0021               	movlb	1	; select bank1
  9694  08A5  00E7               	movwf	?___fttol^(0+128)
  9695  08A6  0008               	return
  9696  08A7                     __end_of___fttol:	
  9697                           
  9698                           	psect	text20
  9699  11FE                     __ptext20:	
  9700 ;; *************** function ___altoft *****************
  9701 ;; Defined at:
  9702 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  9703 ;; Parameters:    Size  Location     Type
  9704 ;;  c               4    6[BANK2 ] long 
  9705 ;; Auto vars:     Size  Location     Type
  9706 ;;  sign            1   13[BANK2 ] unsigned char 
  9707 ;;  exp             1   12[BANK2 ] unsigned char 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  3    6[BANK2 ] float 
  9710 ;; Registers used:
  9711 ;;		wreg, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9717 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9718 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9719 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9720 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9721 ;;Total ram usage:        8 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    4
  9724 ;; This function calls:
  9725 ;;		___ftpack
  9726 ;; This function is called by:
  9727 ;;		_trunc
  9728 ;; This function uses a non-reentrant model
  9729 ;;
  9730                           
  9731                           
  9732                           ;psect for function ___altoft
  9733  11FE                     ___altoft:	
  9734                           
  9735                           ;incstack = 0
  9736                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  9737  11FE  0022               	movlb	2	; select bank2
  9738  11FF  01AD               	clrf	___altoft@sign^(0+256)
  9739  1200  308E               	movlw	142
  9740  1201  00AA               	movwf	??___altoft^(0+256)
  9741  1202  082A               	movf	??___altoft^(0+256),w
  9742  1203  00AC               	movwf	___altoft@exp^(0+256)
  9743  1204  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  9744  1205  2A13               	goto	l5721
  9745  1206  09A6               	comf	___altoft@c^(0+256),f
  9746  1207  09A7               	comf	(___altoft@c+1)^(0+256),f
  9747  1208  09A8               	comf	(___altoft@c+2)^(0+256),f
  9748  1209  09A9               	comf	(___altoft@c+3)^(0+256),f
  9749  120A  0AA6               	incf	___altoft@c^(0+256),f
  9750  120B  1903               	skipnz
  9751  120C  0AA7               	incf	(___altoft@c+1)^(0+256),f
  9752  120D  1903               	skipnz
  9753  120E  0AA8               	incf	(___altoft@c+2)^(0+256),f
  9754  120F  1903               	skipnz
  9755  1210  0AA9               	incf	(___altoft@c+3)^(0+256),f
  9756  1211  01AD               	clrf	___altoft@sign^(0+256)
  9757  1212  0AAD               	incf	___altoft@sign^(0+256),f
  9758  1213                     l5721:	
  9759  1213  30FF               	movlw	255
  9760  1214  0529               	andwf	(___altoft@c+3)^(0+256),w
  9761  1215  1903               	btfsc	3,2
  9762  1216  2A23               	goto	l5723
  9763  1217  3001               	movlw	1
  9764  1218                     u5825:	
  9765  1218  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  9766  1219  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  9767  121A  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  9768  121B  0CA6               	rrf	___altoft@c^(0+256),f
  9769  121C  0B89               	decfsz	9,f
  9770  121D  2A18               	goto	u5825
  9771  121E  3001               	movlw	1
  9772  121F  00AA               	movwf	??___altoft^(0+256)
  9773  1220  082A               	movf	??___altoft^(0+256),w
  9774  1221  07AC               	addwf	___altoft@exp^(0+256),f
  9775  1222  2A13               	goto	l5721
  9776  1223                     l5723:	
  9777  1223  0826               	movf	___altoft@c^(0+256),w
  9778  1224  0021               	movlb	1	; select bank1
  9779  1225  00A0               	movwf	___ftpack@arg^(0+128)
  9780  1226  0022               	movlb	2	; select bank2
  9781  1227  0827               	movf	(___altoft@c+1)^(0+256),w
  9782  1228  0021               	movlb	1	; select bank1
  9783  1229  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9784  122A  0022               	movlb	2	; select bank2
  9785  122B  0828               	movf	(___altoft@c+2)^(0+256),w
  9786  122C  0021               	movlb	1	; select bank1
  9787  122D  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9788  122E  0022               	movlb	2	; select bank2
  9789  122F  082C               	movf	___altoft@exp^(0+256),w
  9790  1230  00AA               	movwf	??___altoft^(0+256)
  9791  1231  082A               	movf	??___altoft^(0+256),w
  9792  1232  0021               	movlb	1	; select bank1
  9793  1233  00A3               	movwf	___ftpack@exp^(0+128)
  9794  1234  0022               	movlb	2	; select bank2
  9795  1235  082D               	movf	___altoft@sign^(0+256),w
  9796  1236  00AB               	movwf	(??___altoft+1)^(0+256)
  9797  1237  082B               	movf	(??___altoft+1)^(0+256),w
  9798  1238  0021               	movlb	1	; select bank1
  9799  1239  00A4               	movwf	___ftpack@sign^(0+128)
  9800  123A  3194  2439         	fcall	___ftpack
  9801  123C  0021               	movlb	1	; select bank1
  9802  123D  0820               	movf	?___ftpack^(0+128),w
  9803  123E  0022               	movlb	2	; select bank2
  9804  123F  00A6               	movwf	?___altoft^(0+256)
  9805  1240  0021               	movlb	1	; select bank1
  9806  1241  0821               	movf	(?___ftpack+1)^(0+128),w
  9807  1242  0022               	movlb	2	; select bank2
  9808  1243  00A7               	movwf	(?___altoft+1)^(0+256)
  9809  1244  0021               	movlb	1	; select bank1
  9810  1245  0822               	movf	(?___ftpack+2)^(0+128),w
  9811  1246  0022               	movlb	2	; select bank2
  9812  1247  00A8               	movwf	(?___altoft+2)^(0+256)
  9813  1248  0008               	return
  9814  1249                     __end_of___altoft:	
  9815                           
  9816                           	psect	text21
  9817  1D6B                     __ptext21:	
  9818 ;; *************** function ___awtoft *****************
  9819 ;; Defined at:
  9820 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  c               2    8[BANK1 ] int 
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  sign            1   13[BANK1 ] unsigned char 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  3    8[BANK1 ] float 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, status,0, pclath, cstack
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9834 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9835 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9836 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9837 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9838 ;;Total ram usage:        6 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    4
  9841 ;; This function calls:
  9842 ;;		___ftpack
  9843 ;; This function is called by:
  9844 ;;		_main
  9845 ;;		_set_subdivision
  9846 ;; This function uses a non-reentrant model
  9847 ;;
  9848                           
  9849                           
  9850                           ;psect for function ___awtoft
  9851  1D6B                     ___awtoft:	
  9852                           
  9853                           ;incstack = 0
  9854                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9855  1D6B  0021               	movlb	1	; select bank1
  9856  1D6C  01AD               	clrf	___awtoft@sign^(0+128)
  9857  1D6D  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  9858  1D6E  2D76               	goto	l5973
  9859  1D6F  09A8               	comf	___awtoft@c^(0+128),f
  9860  1D70  09A9               	comf	(___awtoft@c+1)^(0+128),f
  9861  1D71  0AA8               	incf	___awtoft@c^(0+128),f
  9862  1D72  1903               	skipnz
  9863  1D73  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  9864  1D74  01AD               	clrf	___awtoft@sign^(0+128)
  9865  1D75  0AAD               	incf	___awtoft@sign^(0+128),f
  9866  1D76                     l5973:	
  9867  1D76  0828               	movf	___awtoft@c^(0+128),w
  9868  1D77  00A0               	movwf	___ftpack@arg^(0+128)
  9869  1D78  0829               	movf	(___awtoft@c+1)^(0+128),w
  9870  1D79  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9871  1D7A  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  9872  1D7B  308E               	movlw	142
  9873  1D7C  00AB               	movwf	??___awtoft^(0+128)
  9874  1D7D  082B               	movf	??___awtoft^(0+128),w
  9875  1D7E  00A3               	movwf	___ftpack@exp^(0+128)
  9876  1D7F  082D               	movf	___awtoft@sign^(0+128),w
  9877  1D80  00AC               	movwf	(??___awtoft+1)^(0+128)
  9878  1D81  082C               	movf	(??___awtoft+1)^(0+128),w
  9879  1D82  00A4               	movwf	___ftpack@sign^(0+128)
  9880  1D83  3194  2439         	fcall	___ftpack
  9881  1D85  0021               	movlb	1	; select bank1
  9882  1D86  0820               	movf	?___ftpack^(0+128),w
  9883  1D87  00A8               	movwf	?___awtoft^(0+128)
  9884  1D88  0821               	movf	(?___ftpack+1)^(0+128),w
  9885  1D89  00A9               	movwf	(?___awtoft+1)^(0+128)
  9886  1D8A  0822               	movf	(?___ftpack+2)^(0+128),w
  9887  1D8B  00AA               	movwf	(?___awtoft+2)^(0+128)
  9888  1D8C  0008               	return
  9889  1D8D                     __end_of___awtoft:	
  9890                           
  9891                           	psect	text22
  9892  1249                     __ptext22:	
  9893 ;; *************** function _read_top_tactile *****************
  9894 ;; Defined at:
  9895 ;;		line 48 in file "tactiles.c"
  9896 ;; Parameters:    Size  Location     Type
  9897 ;;		None
  9898 ;; Auto vars:     Size  Location     Type
  9899 ;;		None
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  1    wreg      void 
  9902 ;; Registers used:
  9903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9911 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9912 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9913 ;;Total ram usage:        1 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    5
  9916 ;; This function calls:
  9917 ;;		_set_leds_top
  9918 ;;		_wait_ms
  9919 ;; This function is called by:
  9920 ;;		_main
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function _read_top_tactile
  9926  1249                     _read_top_tactile:	
  9927                           
  9928                           ;tactiles.c: 57: if (PORTDbits.RD5 == 0) {
  9929                           
  9930                           ;incstack = 0
  9931                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9932  1249  0020               	movlb	0	; select bank0
  9933  124A  1A8F               	btfsc	15,5	;volatile
  9934  124B  2A53               	goto	l6473
  9935                           
  9936                           ;tactiles.c: 58: if (topTactile_pressed > 0) {
  9937  124C  0022               	movlb	2	; select bank2
  9938  124D  085E               	movf	_topTactile_pressed^(0+256),w
  9939  124E  1903               	btfsc	3,2
  9940  124F  2A5E               	goto	l946
  9941                           
  9942                           ;tactiles.c: 59: topTactile_pressed--;
  9943  1250  3001               	movlw	1
  9944  1251  02DE               	subwf	_topTactile_pressed^(0+256),f
  9945                           
  9946                           ;tactiles.c: 60: }
  9947                           ;tactiles.c: 61: } else if (topTactile_pressed < 25) {
  9948  1252  2A5E               	goto	l946
  9949  1253                     l6473:	
  9950  1253  3019               	movlw	25
  9951  1254  0022               	movlb	2	; select bank2
  9952  1255  025E               	subwf	_topTactile_pressed^(0+256),w
  9953  1256  1803               	skipnc
  9954  1257  2A5E               	goto	l946
  9955                           
  9956                           ;tactiles.c: 62: topTactile_pressed++;
  9957  1258  3001               	movlw	1
  9958  1259  0021               	movlb	1	; select bank1
  9959  125A  00B2               	movwf	??_read_top_tactile^(0+128)
  9960  125B  0832               	movf	??_read_top_tactile^(0+128),w
  9961  125C  0022               	movlb	2	; select bank2
  9962  125D  07DE               	addwf	_topTactile_pressed^(0+256),f
  9963  125E                     l946:	
  9964                           
  9965                           ;tactiles.c: 63: }
  9966                           ;tactiles.c: 68: if (topTactile_pressed == 0) {
  9967  125E  085E               	movf	_topTactile_pressed^(0+256),w
  9968  125F  1D03               	btfss	3,2
  9969  1260  0008               	return
  9970                           
  9971                           ;tactiles.c: 69: top_push_state = top_push_state + 1;
  9972  1261  0020               	movlb	0	; select bank0
  9973  1262  0864               	movf	_top_push_state,w
  9974  1263  3E01               	addlw	1
  9975  1264  00E4               	movwf	_top_push_state
  9976  1265  3000               	movlw	0
  9977  1266  3D65               	addwfc	_top_push_state+1,w
  9978  1267  00E5               	movwf	_top_push_state+1
  9979                           
  9980                           ;tactiles.c: 70: if (top_push_state >= 7) {
  9981  1268  0865               	movf	_top_push_state+1,w
  9982  1269  3A80               	xorlw	128
  9983  126A  0021               	movlb	1	; select bank1
  9984  126B  00B2               	movwf	??_read_top_tactile^(0+128)
  9985  126C  3080               	movlw	128
  9986  126D  0232               	subwf	??_read_top_tactile^(0+128),w
  9987  126E  1D03               	skipz
  9988  126F  2A73               	goto	u7395
  9989  1270  3007               	movlw	7
  9990  1271  0020               	movlb	0	; select bank0
  9991  1272  0264               	subwf	_top_push_state,w
  9992  1273                     u7395:	
  9993  1273  1C03               	skipc
  9994  1274  2A7A               	goto	l6483
  9995                           
  9996                           ;tactiles.c: 71: top_push_state = 1;
  9997  1275  3001               	movlw	1
  9998  1276  0020               	movlb	0	; select bank0
  9999  1277  00E4               	movwf	_top_push_state
 10000  1278  3000               	movlw	0
 10001  1279  00E5               	movwf	_top_push_state+1
 10002  127A                     l6483:	
 10003                           
 10004                           ;tactiles.c: 72: }
 10005                           ;tactiles.c: 73: set_leds_top(top_push_state, 1);
 10006  127A  0020               	movlb	0	; select bank0
 10007  127B  0865               	movf	_top_push_state+1,w
 10008  127C  0021               	movlb	1	; select bank1
 10009  127D  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 10010  127E  0020               	movlb	0	; select bank0
 10011  127F  0864               	movf	_top_push_state,w
 10012  1280  0021               	movlb	1	; select bank1
 10013  1281  00A0               	movwf	set_leds_top@x^(0+128)
 10014  1282  3001               	movlw	1
 10015  1283  00A2               	movwf	set_leds_top@ledState^(0+128)
 10016  1284  3000               	movlw	0
 10017  1285  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 10018  1286  3193  238C  3192   	fcall	_set_leds_top
 10019                           
 10020                           ;tactiles.c: 74: delay_time_changed = 1;
 10021  1289  3001               	movlw	1
 10022  128A  0023               	movlb	3	; select bank3
 10023  128B  00DB               	movwf	_delay_time_changed^(0+384)
 10024  128C  3000               	movlw	0
 10025  128D  00DC               	movwf	(_delay_time_changed^(0+384)+1)
 10026  128E                     l950:	
 10027                           ;tactiles.c: 77: while (PORTDbits.RD5 == 0) {
 10028                           
 10029  128E  0020               	movlb	0	; select bank0
 10030  128F  1E8F               	btfss	15,5	;volatile
 10031  1290  2A8E               	goto	l950
 10032                           
 10033                           ;tactiles.c: 78: }
 10034                           ;tactiles.c: 79: wait_ms(20);
 10035  1291  3014               	movlw	20
 10036  1292  0021               	movlb	1	; select bank1
 10037  1293  00AC               	movwf	wait_ms@timeSec^(0+128)
 10038  1294  3000               	movlw	0
 10039  1295  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10040  1296  319E  266A         	fcall	_wait_ms
 10041  1298  0008               	return
 10042  1299                     __end_of_read_top_tactile:	
 10043                           
 10044                           	psect	text23
 10045  1125                     __ptext23:	
 10046 ;; *************** function _read_bottom_tactile *****************
 10047 ;; Defined at:
 10048 ;;		line 18 in file "tactiles.c"
 10049 ;; Parameters:    Size  Location     Type
 10050 ;;		None
 10051 ;; Auto vars:     Size  Location     Type
 10052 ;;		None
 10053 ;; Return value:  Size  Location     Type
 10054 ;;                  1    wreg      void 
 10055 ;; Registers used:
 10056 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10057 ;; Tracked objects:
 10058 ;;		On entry : 0/0
 10059 ;;		On exit  : 0/0
 10060 ;;		Unchanged: 0/0
 10061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10064 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10065 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10066 ;;Total ram usage:        1 bytes
 10067 ;; Hardware stack levels used:    1
 10068 ;; Hardware stack levels required when called:    5
 10069 ;; This function calls:
 10070 ;;		_set_leds_bottom
 10071 ;;		_wait_ms
 10072 ;; This function is called by:
 10073 ;;		_main
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           
 10078                           ;psect for function _read_bottom_tactile
 10079  1125                     _read_bottom_tactile:	
 10080                           
 10081                           ;tactiles.c: 26: if (PORTDbits.RD6 == 0) {
 10082                           
 10083                           ;incstack = 0
 10084                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10085  1125  0020               	movlb	0	; select bank0
 10086  1126  1B0F               	btfsc	15,6	;volatile
 10087  1127  292F               	goto	l6453
 10088                           
 10089                           ;tactiles.c: 27: if (bottomTactile_pressed > 0) {
 10090  1128  0022               	movlb	2	; select bank2
 10091  1129  0857               	movf	_bottomTactile_pressed^(0+256),w
 10092  112A  1903               	btfsc	3,2
 10093  112B  293A               	goto	l934
 10094                           
 10095                           ;tactiles.c: 28: bottomTactile_pressed--;
 10096  112C  3001               	movlw	1
 10097  112D  02D7               	subwf	_bottomTactile_pressed^(0+256),f
 10098                           
 10099                           ;tactiles.c: 29: }
 10100                           ;tactiles.c: 30: } else if (bottomTactile_pressed < 25) {
 10101  112E  293A               	goto	l934
 10102  112F                     l6453:	
 10103  112F  3019               	movlw	25
 10104  1130  0022               	movlb	2	; select bank2
 10105  1131  0257               	subwf	_bottomTactile_pressed^(0+256),w
 10106  1132  1803               	skipnc
 10107  1133  293A               	goto	l934
 10108                           
 10109                           ;tactiles.c: 31: bottomTactile_pressed++;
 10110  1134  3001               	movlw	1
 10111  1135  0021               	movlb	1	; select bank1
 10112  1136  00B2               	movwf	??_read_bottom_tactile^(0+128)
 10113  1137  0832               	movf	??_read_bottom_tactile^(0+128),w
 10114  1138  0022               	movlb	2	; select bank2
 10115  1139  07D7               	addwf	_bottomTactile_pressed^(0+256),f
 10116  113A                     l934:	
 10117                           
 10118                           ;tactiles.c: 32: }
 10119                           ;tactiles.c: 35: if (bottomTactile_pressed == 0) {
 10120  113A  0857               	movf	_bottomTactile_pressed^(0+256),w
 10121  113B  1D03               	btfss	3,2
 10122  113C  0008               	return
 10123                           
 10124                           ;tactiles.c: 36: bottom_push_state = bottom_push_state + 1;
 10125  113D  0020               	movlb	0	; select bank0
 10126  113E  0860               	movf	_bottom_push_state,w
 10127  113F  3E01               	addlw	1
 10128  1140  00E0               	movwf	_bottom_push_state
 10129  1141  3000               	movlw	0
 10130  1142  3D61               	addwfc	_bottom_push_state+1,w
 10131  1143  00E1               	movwf	_bottom_push_state+1
 10132                           
 10133                           ;tactiles.c: 37: if (bottom_push_state > 6) {
 10134  1144  0861               	movf	_bottom_push_state+1,w
 10135  1145  3A80               	xorlw	128
 10136  1146  0021               	movlb	1	; select bank1
 10137  1147  00B2               	movwf	??_read_bottom_tactile^(0+128)
 10138  1148  3080               	movlw	128
 10139  1149  0232               	subwf	??_read_bottom_tactile^(0+128),w
 10140  114A  1D03               	skipz
 10141  114B  294F               	goto	u7335
 10142  114C  3007               	movlw	7
 10143  114D  0020               	movlb	0	; select bank0
 10144  114E  0260               	subwf	_bottom_push_state,w
 10145  114F                     u7335:	
 10146  114F  1C03               	skipc
 10147  1150  2956               	goto	l6463
 10148                           
 10149                           ;tactiles.c: 38: bottom_push_state = 1;
 10150  1151  3001               	movlw	1
 10151  1152  0020               	movlb	0	; select bank0
 10152  1153  00E0               	movwf	_bottom_push_state
 10153  1154  3000               	movlw	0
 10154  1155  00E1               	movwf	_bottom_push_state+1
 10155  1156                     l6463:	
 10156                           
 10157                           ;tactiles.c: 39: }
 10158                           ;tactiles.c: 40: set_leds_bottom(bottom_push_state);
 10159  1156  0020               	movlb	0	; select bank0
 10160  1157  0861               	movf	_bottom_push_state+1,w
 10161  1158  0021               	movlb	1	; select bank1
 10162  1159  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 10163  115A  0020               	movlb	0	; select bank0
 10164  115B  0860               	movf	_bottom_push_state,w
 10165  115C  0021               	movlb	1	; select bank1
 10166  115D  00A0               	movwf	set_leds_bottom@x^(0+128)
 10167  115E  319F  270E  3191   	fcall	_set_leds_bottom
 10168  1161                     l938:	
 10169                           ;tactiles.c: 42: while (PORTDbits.RD6 == 0) {
 10170                           
 10171  1161  0020               	movlb	0	; select bank0
 10172  1162  1F0F               	btfss	15,6	;volatile
 10173  1163  2961               	goto	l938
 10174                           
 10175                           ;tactiles.c: 43: }
 10176                           ;tactiles.c: 44: wait_ms(20);
 10177  1164  3014               	movlw	20
 10178  1165  0021               	movlb	1	; select bank1
 10179  1166  00AC               	movwf	wait_ms@timeSec^(0+128)
 10180  1167  3000               	movlw	0
 10181  1168  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10182  1169  319E  266A         	fcall	_wait_ms
 10183  116B  0008               	return
 10184  116C                     __end_of_read_bottom_tactile:	
 10185                           
 10186                           	psect	text24
 10187  1618                     __ptext24:	
 10188 ;; *************** function _map *****************
 10189 ;; Defined at:
 10190 ;;		line 177 in file "user.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;  x               3   53[BANK1 ] float 
 10193 ;;  in_min          3   56[BANK1 ] float 
 10194 ;;  in_max          3   59[BANK1 ] float 
 10195 ;;  out_min         3   62[BANK1 ] float 
 10196 ;;  out_max         3   65[BANK1 ] float 
 10197 ;; Auto vars:     Size  Location     Type
 10198 ;;		None
 10199 ;; Return value:  Size  Location     Type
 10200 ;;                  3   53[BANK1 ] float 
 10201 ;; Registers used:
 10202 ;;		wreg, status,2, status,0, pclath, cstack
 10203 ;; Tracked objects:
 10204 ;;		On entry : 0/0
 10205 ;;		On exit  : 0/0
 10206 ;;		Unchanged: 0/0
 10207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10208 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10209 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10211 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10212 ;;Total ram usage:       18 bytes
 10213 ;; Hardware stack levels used:    1
 10214 ;; Hardware stack levels required when called:    5
 10215 ;; This function calls:
 10216 ;;		___ftadd
 10217 ;;		___ftdiv
 10218 ;;		___ftmul
 10219 ;;		___ftneg
 10220 ;; This function is called by:
 10221 ;;		_main
 10222 ;; This function uses a non-reentrant model
 10223 ;;
 10224                           
 10225                           
 10226                           ;psect for function _map
 10227  1618                     _map:	
 10228                           
 10229                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10230                           
 10231                           ;incstack = 0
 10232                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 10233  1618  0021               	movlb	1	; select bank1
 10234  1619  085B               	movf	map@in_max^(0+128),w
 10235  161A  00A8               	movwf	___ftadd@f1^(0+128)
 10236  161B  085C               	movf	(map@in_max+1)^(0+128),w
 10237  161C  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10238  161D  085D               	movf	(map@in_max+2)^(0+128),w
 10239  161E  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10240  161F  0858               	movf	map@in_min^(0+128),w
 10241  1620  00A0               	movwf	___ftneg@f1^(0+128)
 10242  1621  0859               	movf	(map@in_min+1)^(0+128),w
 10243  1622  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10244  1623  085A               	movf	(map@in_min+2)^(0+128),w
 10245  1624  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10246  1625  319C  2454  3196   	fcall	___ftneg
 10247  1628  0021               	movlb	1	; select bank1
 10248  1629  0820               	movf	?___ftneg^(0+128),w
 10249  162A  00AB               	movwf	___ftadd@f2^(0+128)
 10250  162B  0821               	movf	(?___ftneg+1)^(0+128),w
 10251  162C  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10252  162D  0822               	movf	(?___ftneg+2)^(0+128),w
 10253  162E  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10254  162F  318A  2248  3196   	fcall	___ftadd
 10255  1632  0021               	movlb	1	; select bank1
 10256  1633  0828               	movf	?___ftadd^(0+128),w
 10257  1634  00C5               	movwf	___ftdiv@f2^(0+128)
 10258  1635  0829               	movf	(?___ftadd+1)^(0+128),w
 10259  1636  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
 10260  1637  082A               	movf	(?___ftadd+2)^(0+128),w
 10261  1638  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
 10262  1639  0861               	movf	map@out_max^(0+128),w
 10263  163A  00A8               	movwf	___ftadd@f1^(0+128)
 10264  163B  0862               	movf	(map@out_max+1)^(0+128),w
 10265  163C  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10266  163D  0863               	movf	(map@out_max+2)^(0+128),w
 10267  163E  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10268  163F  085E               	movf	map@out_min^(0+128),w
 10269  1640  00A0               	movwf	___ftneg@f1^(0+128)
 10270  1641  085F               	movf	(map@out_min+1)^(0+128),w
 10271  1642  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10272  1643  0860               	movf	(map@out_min+2)^(0+128),w
 10273  1644  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10274  1645  319C  2454  3196   	fcall	___ftneg
 10275  1648  0021               	movlb	1	; select bank1
 10276  1649  0820               	movf	?___ftneg^(0+128),w
 10277  164A  00AB               	movwf	___ftadd@f2^(0+128)
 10278  164B  0821               	movf	(?___ftneg+1)^(0+128),w
 10279  164C  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10280  164D  0822               	movf	(?___ftneg+2)^(0+128),w
 10281  164E  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10282  164F  318A  2248  3196   	fcall	___ftadd
 10283  1652  0021               	movlb	1	; select bank1
 10284  1653  0828               	movf	?___ftadd^(0+128),w
 10285  1654  00B5               	movwf	___ftmul@f1^(0+128)
 10286  1655  0829               	movf	(?___ftadd+1)^(0+128),w
 10287  1656  00B6               	movwf	(___ftmul@f1+1)^(0+128)
 10288  1657  082A               	movf	(?___ftadd+2)^(0+128),w
 10289  1658  00B7               	movwf	(___ftmul@f1+2)^(0+128)
 10290  1659  0855               	movf	map@x^(0+128),w
 10291  165A  00A8               	movwf	___ftadd@f1^(0+128)
 10292  165B  0856               	movf	(map@x+1)^(0+128),w
 10293  165C  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10294  165D  0857               	movf	(map@x+2)^(0+128),w
 10295  165E  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10296  165F  0858               	movf	map@in_min^(0+128),w
 10297  1660  00A0               	movwf	___ftneg@f1^(0+128)
 10298  1661  0859               	movf	(map@in_min+1)^(0+128),w
 10299  1662  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10300  1663  085A               	movf	(map@in_min+2)^(0+128),w
 10301  1664  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10302  1665  319C  2454  3196   	fcall	___ftneg
 10303  1668  0021               	movlb	1	; select bank1
 10304  1669  0820               	movf	?___ftneg^(0+128),w
 10305  166A  00AB               	movwf	___ftadd@f2^(0+128)
 10306  166B  0821               	movf	(?___ftneg+1)^(0+128),w
 10307  166C  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10308  166D  0822               	movf	(?___ftneg+2)^(0+128),w
 10309  166E  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10310  166F  318A  2248  3196   	fcall	___ftadd
 10311  1672  0021               	movlb	1	; select bank1
 10312  1673  0828               	movf	?___ftadd^(0+128),w
 10313  1674  00B8               	movwf	___ftmul@f2^(0+128)
 10314  1675  0829               	movf	(?___ftadd+1)^(0+128),w
 10315  1676  00B9               	movwf	(___ftmul@f2+1)^(0+128)
 10316  1677  082A               	movf	(?___ftadd+2)^(0+128),w
 10317  1678  00BA               	movwf	(___ftmul@f2+2)^(0+128)
 10318  1679  3197  274C  3196   	fcall	___ftmul
 10319  167C  0021               	movlb	1	; select bank1
 10320  167D  0835               	movf	?___ftmul^(0+128),w
 10321  167E  00C8               	movwf	___ftdiv@f1^(0+128)
 10322  167F  0836               	movf	(?___ftmul+1)^(0+128),w
 10323  1680  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
 10324  1681  0837               	movf	(?___ftmul+2)^(0+128),w
 10325  1682  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
 10326  1683  3196  26A3  3196   	fcall	___ftdiv
 10327  1686  0021               	movlb	1	; select bank1
 10328  1687  0845               	movf	?___ftdiv^(0+128),w
 10329  1688  00E4               	movwf	_map$2397^(0+128)
 10330  1689  0846               	movf	(?___ftdiv+1)^(0+128),w
 10331  168A  00E5               	movwf	(_map$2397+1)^(0+128)
 10332  168B  0847               	movf	(?___ftdiv+2)^(0+128),w
 10333  168C  00E6               	movwf	(_map$2397+2)^(0+128)
 10334                           
 10335                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10336  168D  085E               	movf	map@out_min^(0+128),w
 10337  168E  00A8               	movwf	___ftadd@f1^(0+128)
 10338  168F  085F               	movf	(map@out_min+1)^(0+128),w
 10339  1690  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10340  1691  0860               	movf	(map@out_min+2)^(0+128),w
 10341  1692  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10342  1693  0864               	movf	_map$2397^(0+128),w
 10343  1694  00AB               	movwf	___ftadd@f2^(0+128)
 10344  1695  0865               	movf	(_map$2397+1)^(0+128),w
 10345  1696  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10346  1697  0866               	movf	(_map$2397+2)^(0+128),w
 10347  1698  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10348  1699  318A  2248         	fcall	___ftadd
 10349  169B  0021               	movlb	1	; select bank1
 10350  169C  0828               	movf	?___ftadd^(0+128),w
 10351  169D  00D5               	movwf	?_map^(0+128)
 10352  169E  0829               	movf	(?___ftadd+1)^(0+128),w
 10353  169F  00D6               	movwf	(?_map+1)^(0+128)
 10354  16A0  082A               	movf	(?___ftadd+2)^(0+128),w
 10355  16A1  00D7               	movwf	(?_map+2)^(0+128)
 10356  16A2  0008               	return
 10357  16A3                     __end_of_map:	
 10358                           
 10359                           	psect	text25
 10360  1C54                     __ptext25:	
 10361 ;; *************** function ___ftneg *****************
 10362 ;; Defined at:
 10363 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;  f1              3    0[BANK1 ] float 
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;		None
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  3    0[BANK1 ] float 
 10370 ;; Registers used:
 10371 ;;		wreg
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10377 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10380 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10381 ;;Total ram usage:        3 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; Hardware stack levels required when called:    3
 10384 ;; This function calls:
 10385 ;;		Nothing
 10386 ;; This function is called by:
 10387 ;;		_map
 10388 ;;		_scalePotValue
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           
 10393                           ;psect for function ___ftneg
 10394  1C54                     ___ftneg:	
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in ___ftneg: [wreg]
 10398  1C54  0021               	movlb	1	; select bank1
 10399  1C55  0822               	movf	(___ftneg@f1+2)^(0+128),w
 10400  1C56  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
 10401  1C57  0420               	iorwf	___ftneg@f1^(0+128),w
 10402  1C58  1903               	skipnz
 10403  1C59  0008               	return
 10404  1C5A  3080               	movlw	128
 10405  1C5B  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
 10406  1C5C  0008               	return
 10407  1C5D                     __end_of___ftneg:	
 10408                           
 10409                           	psect	text26
 10410  174C                     __ptext26:	
 10411 ;; *************** function ___ftmul *****************
 10412 ;; Defined at:
 10413 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10414 ;; Parameters:    Size  Location     Type
 10415 ;;  f1              3   21[BANK1 ] float 
 10416 ;;  f2              3   24[BANK1 ] float 
 10417 ;; Auto vars:     Size  Location     Type
 10418 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
 10419 ;;  sign            1   36[BANK1 ] unsigned char 
 10420 ;;  cntr            1   35[BANK1 ] unsigned char 
 10421 ;;  exp             1   31[BANK1 ] unsigned char 
 10422 ;; Return value:  Size  Location     Type
 10423 ;;                  3   21[BANK1 ] float 
 10424 ;; Registers used:
 10425 ;;		wreg, status,2, status,0, pclath, cstack
 10426 ;; Tracked objects:
 10427 ;;		On entry : 0/0
 10428 ;;		On exit  : 0/0
 10429 ;;		Unchanged: 0/0
 10430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10431 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10432 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10433 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10434 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10435 ;;Total ram usage:       16 bytes
 10436 ;; Hardware stack levels used:    1
 10437 ;; Hardware stack levels required when called:    4
 10438 ;; This function calls:
 10439 ;;		___ftpack
 10440 ;; This function is called by:
 10441 ;;		_set_subdivision
 10442 ;;		_map
 10443 ;;		_scalePotValue
 10444 ;; This function uses a non-reentrant model
 10445 ;;
 10446                           
 10447                           
 10448                           ;psect for function ___ftmul
 10449  174C                     ___ftmul:	
 10450                           
 10451                           ;incstack = 0
 10452                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10453  174C  0021               	movlb	1	; select bank1
 10454  174D  0835               	movf	___ftmul@f1^(0+128),w
 10455  174E  00BB               	movwf	??___ftmul^(0+128)
 10456  174F  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10457  1750  00BC               	movwf	(??___ftmul^(0+128)+1)
 10458  1751  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10459  1752  00BD               	movwf	(??___ftmul^(0+128)+2)
 10460  1753  1003               	clrc
 10461  1754  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10462  1755  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10463  1756  00BE               	movwf	(??___ftmul+3)^(0+128)
 10464  1757  083E               	movf	(??___ftmul+3)^(0+128),w
 10465  1758  00BF               	movwf	___ftmul@exp^(0+128)
 10466  1759  083F               	movf	___ftmul@exp^(0+128),w
 10467  175A  1D03               	btfss	3,2
 10468  175B  2F63               	goto	l6095
 10469  175C  3000               	movlw	0
 10470  175D  00B5               	movwf	?___ftmul^(0+128)
 10471  175E  3000               	movlw	0
 10472  175F  00B6               	movwf	(?___ftmul+1)^(0+128)
 10473  1760  3000               	movlw	0
 10474  1761  00B7               	movwf	(?___ftmul+2)^(0+128)
 10475  1762  0008               	return
 10476  1763                     l6095:	
 10477  1763  0838               	movf	___ftmul@f2^(0+128),w
 10478  1764  00BB               	movwf	??___ftmul^(0+128)
 10479  1765  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10480  1766  00BC               	movwf	(??___ftmul^(0+128)+1)
 10481  1767  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10482  1768  00BD               	movwf	(??___ftmul^(0+128)+2)
 10483  1769  1003               	clrc
 10484  176A  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10485  176B  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10486  176C  00BE               	movwf	(??___ftmul+3)^(0+128)
 10487  176D  083E               	movf	(??___ftmul+3)^(0+128),w
 10488  176E  00C4               	movwf	___ftmul@sign^(0+128)
 10489  176F  0844               	movf	___ftmul@sign^(0+128),w
 10490  1770  1D03               	btfss	3,2
 10491  1771  2F79               	goto	l6101
 10492  1772  3000               	movlw	0
 10493  1773  00B5               	movwf	?___ftmul^(0+128)
 10494  1774  3000               	movlw	0
 10495  1775  00B6               	movwf	(?___ftmul+1)^(0+128)
 10496  1776  3000               	movlw	0
 10497  1777  00B7               	movwf	(?___ftmul+2)^(0+128)
 10498  1778  0008               	return
 10499  1779                     l6101:	
 10500  1779  0844               	movf	___ftmul@sign^(0+128),w
 10501  177A  3E7B               	addlw	123
 10502  177B  00BB               	movwf	??___ftmul^(0+128)
 10503  177C  083B               	movf	??___ftmul^(0+128),w
 10504  177D  07BF               	addwf	___ftmul@exp^(0+128),f
 10505  177E  0835               	movf	___ftmul@f1^(0+128),w
 10506  177F  00BB               	movwf	??___ftmul^(0+128)
 10507  1780  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10508  1781  00BC               	movwf	(??___ftmul^(0+128)+1)
 10509  1782  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10510  1783  00BD               	movwf	(??___ftmul^(0+128)+2)
 10511  1784  3010               	movlw	16
 10512  1785                     u6505:	
 10513  1785  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10514  1786  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10515  1787  0CBB               	rrf	??___ftmul^(0+128),f
 10516  1788  0B89               	decfsz	9,f
 10517  1789  2F85               	goto	u6505
 10518  178A  083B               	movf	??___ftmul^(0+128),w
 10519  178B  00BE               	movwf	(??___ftmul+3)^(0+128)
 10520  178C  083E               	movf	(??___ftmul+3)^(0+128),w
 10521  178D  00C4               	movwf	___ftmul@sign^(0+128)
 10522  178E  0838               	movf	___ftmul@f2^(0+128),w
 10523  178F  00BB               	movwf	??___ftmul^(0+128)
 10524  1790  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10525  1791  00BC               	movwf	(??___ftmul^(0+128)+1)
 10526  1792  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10527  1793  00BD               	movwf	(??___ftmul^(0+128)+2)
 10528  1794  3010               	movlw	16
 10529  1795                     u6515:	
 10530  1795  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10531  1796  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10532  1797  0CBB               	rrf	??___ftmul^(0+128),f
 10533  1798  0B89               	decfsz	9,f
 10534  1799  2F95               	goto	u6515
 10535  179A  083B               	movf	??___ftmul^(0+128),w
 10536  179B  00BE               	movwf	(??___ftmul+3)^(0+128)
 10537  179C  083E               	movf	(??___ftmul+3)^(0+128),w
 10538  179D  06C4               	xorwf	___ftmul@sign^(0+128),f
 10539  179E  3080               	movlw	128
 10540  179F  00BB               	movwf	??___ftmul^(0+128)
 10541  17A0  083B               	movf	??___ftmul^(0+128),w
 10542  17A1  05C4               	andwf	___ftmul@sign^(0+128),f
 10543  17A2  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
 10544  17A3  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
 10545  17A4  30FF               	movlw	255
 10546  17A5  05B8               	andwf	___ftmul@f2^(0+128),f
 10547  17A6  30FF               	movlw	255
 10548  17A7  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
 10549  17A8  3000               	movlw	0
 10550  17A9  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
 10551  17AA  3000               	movlw	0
 10552  17AB  00C0               	movwf	___ftmul@f3_as_product^(0+128)
 10553  17AC  3000               	movlw	0
 10554  17AD  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 10555  17AE  3000               	movlw	0
 10556  17AF  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 10557  17B0  3007               	movlw	7
 10558  17B1  00BB               	movwf	??___ftmul^(0+128)
 10559  17B2  083B               	movf	??___ftmul^(0+128),w
 10560  17B3  00C3               	movwf	___ftmul@cntr^(0+128)
 10561  17B4                     l6113:	
 10562  17B4  1C35               	btfss	___ftmul@f1^(0+128),0
 10563  17B5  2FBC               	goto	l6117
 10564  17B6  0838               	movf	___ftmul@f2^(0+128),w
 10565  17B7  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10566  17B8  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10567  17B9  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10568  17BA  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10569  17BB  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10570  17BC                     l6117:	
 10571  17BC  3001               	movlw	1
 10572  17BD                     u6535:	
 10573  17BD  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10574  17BE  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10575  17BF  0CB5               	rrf	___ftmul@f1^(0+128),f
 10576  17C0  0B89               	decfsz	9,f
 10577  17C1  2FBD               	goto	u6535
 10578  17C2  3001               	movlw	1
 10579  17C3                     u6545:	
 10580  17C3  35B8               	lslf	___ftmul@f2^(0+128),f
 10581  17C4  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
 10582  17C5  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
 10583  17C6  0B89               	decfsz	9,f
 10584  17C7  2FC3               	goto	u6545
 10585  17C8  3001               	movlw	1
 10586  17C9  02C3               	subwf	___ftmul@cntr^(0+128),f
 10587  17CA  1D03               	btfss	3,2
 10588  17CB  2FB4               	goto	l6113
 10589  17CC  3009               	movlw	9
 10590  17CD  00BB               	movwf	??___ftmul^(0+128)
 10591  17CE  083B               	movf	??___ftmul^(0+128),w
 10592  17CF  00C3               	movwf	___ftmul@cntr^(0+128)
 10593  17D0                     l6125:	
 10594  17D0  1C35               	btfss	___ftmul@f1^(0+128),0
 10595  17D1  2FD8               	goto	l6129
 10596  17D2  0838               	movf	___ftmul@f2^(0+128),w
 10597  17D3  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10598  17D4  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10599  17D5  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10600  17D6  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10601  17D7  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10602  17D8                     l6129:	
 10603  17D8  3001               	movlw	1
 10604  17D9                     u6575:	
 10605  17D9  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10606  17DA  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10607  17DB  0CB5               	rrf	___ftmul@f1^(0+128),f
 10608  17DC  0B89               	decfsz	9,f
 10609  17DD  2FD9               	goto	u6575
 10610  17DE  3001               	movlw	1
 10611  17DF                     u6585:	
 10612  17DF  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 10613  17E0  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 10614  17E1  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
 10615  17E2  0B89               	decfsz	9,f
 10616  17E3  2FDF               	goto	u6585
 10617  17E4  3001               	movlw	1
 10618  17E5  02C3               	subwf	___ftmul@cntr^(0+128),f
 10619  17E6  1D03               	btfss	3,2
 10620  17E7  2FD0               	goto	l6125
 10621  17E8  0840               	movf	___ftmul@f3_as_product^(0+128),w
 10622  17E9  00A0               	movwf	___ftpack@arg^(0+128)
 10623  17EA  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 10624  17EB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10625  17EC  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 10626  17ED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10627  17EE  083F               	movf	___ftmul@exp^(0+128),w
 10628  17EF  00BB               	movwf	??___ftmul^(0+128)
 10629  17F0  083B               	movf	??___ftmul^(0+128),w
 10630  17F1  00A3               	movwf	___ftpack@exp^(0+128)
 10631  17F2  0844               	movf	___ftmul@sign^(0+128),w
 10632  17F3  00BC               	movwf	(??___ftmul+1)^(0+128)
 10633  17F4  083C               	movf	(??___ftmul+1)^(0+128),w
 10634  17F5  00A4               	movwf	___ftpack@sign^(0+128)
 10635  17F6  3194  2439         	fcall	___ftpack
 10636  17F8  0021               	movlb	1	; select bank1
 10637  17F9  0820               	movf	?___ftpack^(0+128),w
 10638  17FA  00B5               	movwf	?___ftmul^(0+128)
 10639  17FB  0821               	movf	(?___ftpack+1)^(0+128),w
 10640  17FC  00B6               	movwf	(?___ftmul+1)^(0+128)
 10641  17FD  0822               	movf	(?___ftpack+2)^(0+128),w
 10642  17FE  00B7               	movwf	(?___ftmul+2)^(0+128)
 10643  17FF  0008               	return
 10644  1800                     __end_of___ftmul:	
 10645                           
 10646                           	psect	text27
 10647  16A3                     __ptext27:	
 10648 ;; *************** function ___ftdiv *****************
 10649 ;; Defined at:
 10650 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10651 ;; Parameters:    Size  Location     Type
 10652 ;;  f2              3   37[BANK1 ] float 
 10653 ;;  f1              3   40[BANK1 ] float 
 10654 ;; Auto vars:     Size  Location     Type
 10655 ;;  f3              3   48[BANK1 ] float 
 10656 ;;  sign            1   52[BANK1 ] unsigned char 
 10657 ;;  exp             1   51[BANK1 ] unsigned char 
 10658 ;;  cntr            1   47[BANK1 ] unsigned char 
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  3   37[BANK1 ] float 
 10661 ;; Registers used:
 10662 ;;		wreg, status,2, status,0, pclath, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 0/0
 10665 ;;		On exit  : 0/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10668 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10669 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10670 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10671 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10672 ;;Total ram usage:       16 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    4
 10675 ;; This function calls:
 10676 ;;		___ftpack
 10677 ;; This function is called by:
 10678 ;;		_map
 10679 ;;		_scalePotValue
 10680 ;; This function uses a non-reentrant model
 10681 ;;
 10682                           
 10683                           
 10684                           ;psect for function ___ftdiv
 10685  16A3                     ___ftdiv:	
 10686                           
 10687                           ;incstack = 0
 10688                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10689  16A3  0021               	movlb	1	; select bank1
 10690  16A4  0848               	movf	___ftdiv@f1^(0+128),w
 10691  16A5  00CB               	movwf	??___ftdiv^(0+128)
 10692  16A6  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10693  16A7  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10694  16A8  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10695  16A9  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10696  16AA  1003               	clrc
 10697  16AB  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10698  16AC  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10699  16AD  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10700  16AE  084E               	movf	(??___ftdiv+3)^(0+128),w
 10701  16AF  00D3               	movwf	___ftdiv@exp^(0+128)
 10702  16B0  0853               	movf	___ftdiv@exp^(0+128),w
 10703  16B1  1D03               	btfss	3,2
 10704  16B2  2EBA               	goto	l6053
 10705  16B3  3000               	movlw	0
 10706  16B4  00C5               	movwf	?___ftdiv^(0+128)
 10707  16B5  3000               	movlw	0
 10708  16B6  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10709  16B7  3000               	movlw	0
 10710  16B8  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10711  16B9  0008               	return
 10712  16BA                     l6053:	
 10713  16BA  0845               	movf	___ftdiv@f2^(0+128),w
 10714  16BB  00CB               	movwf	??___ftdiv^(0+128)
 10715  16BC  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10716  16BD  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10717  16BE  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10718  16BF  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10719  16C0  1003               	clrc
 10720  16C1  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10721  16C2  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10722  16C3  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10723  16C4  084E               	movf	(??___ftdiv+3)^(0+128),w
 10724  16C5  00D4               	movwf	___ftdiv@sign^(0+128)
 10725  16C6  0854               	movf	___ftdiv@sign^(0+128),w
 10726  16C7  1D03               	btfss	3,2
 10727  16C8  2ED0               	goto	l6059
 10728  16C9  3000               	movlw	0
 10729  16CA  00C5               	movwf	?___ftdiv^(0+128)
 10730  16CB  3000               	movlw	0
 10731  16CC  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10732  16CD  3000               	movlw	0
 10733  16CE  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10734  16CF  0008               	return
 10735  16D0                     l6059:	
 10736  16D0  3000               	movlw	0
 10737  16D1  00D0               	movwf	___ftdiv@f3^(0+128)
 10738  16D2  3000               	movlw	0
 10739  16D3  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
 10740  16D4  3000               	movlw	0
 10741  16D5  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
 10742  16D6  3089               	movlw	137
 10743  16D7  0754               	addwf	___ftdiv@sign^(0+128),w
 10744  16D8  00CB               	movwf	??___ftdiv^(0+128)
 10745  16D9  084B               	movf	??___ftdiv^(0+128),w
 10746  16DA  02D3               	subwf	___ftdiv@exp^(0+128),f
 10747  16DB  0848               	movf	___ftdiv@f1^(0+128),w
 10748  16DC  00CB               	movwf	??___ftdiv^(0+128)
 10749  16DD  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10750  16DE  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10751  16DF  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10752  16E0  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10753  16E1  3010               	movlw	16
 10754  16E2                     u6425:	
 10755  16E2  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10756  16E3  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10757  16E4  0CCB               	rrf	??___ftdiv^(0+128),f
 10758  16E5  0B89               	decfsz	9,f
 10759  16E6  2EE2               	goto	u6425
 10760  16E7  084B               	movf	??___ftdiv^(0+128),w
 10761  16E8  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10762  16E9  084E               	movf	(??___ftdiv+3)^(0+128),w
 10763  16EA  00D4               	movwf	___ftdiv@sign^(0+128)
 10764  16EB  0845               	movf	___ftdiv@f2^(0+128),w
 10765  16EC  00CB               	movwf	??___ftdiv^(0+128)
 10766  16ED  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10767  16EE  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10768  16EF  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10769  16F0  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10770  16F1  3010               	movlw	16
 10771  16F2                     u6435:	
 10772  16F2  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10773  16F3  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10774  16F4  0CCB               	rrf	??___ftdiv^(0+128),f
 10775  16F5  0B89               	decfsz	9,f
 10776  16F6  2EF2               	goto	u6435
 10777  16F7  084B               	movf	??___ftdiv^(0+128),w
 10778  16F8  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10779  16F9  084E               	movf	(??___ftdiv+3)^(0+128),w
 10780  16FA  06D4               	xorwf	___ftdiv@sign^(0+128),f
 10781  16FB  3080               	movlw	128
 10782  16FC  00CB               	movwf	??___ftdiv^(0+128)
 10783  16FD  084B               	movf	??___ftdiv^(0+128),w
 10784  16FE  05D4               	andwf	___ftdiv@sign^(0+128),f
 10785  16FF  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
 10786  1700  30FF               	movlw	255
 10787  1701  05C8               	andwf	___ftdiv@f1^(0+128),f
 10788  1702  30FF               	movlw	255
 10789  1703  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
 10790  1704  3000               	movlw	0
 10791  1705  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
 10792  1706  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
 10793  1707  30FF               	movlw	255
 10794  1708  05C5               	andwf	___ftdiv@f2^(0+128),f
 10795  1709  30FF               	movlw	255
 10796  170A  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
 10797  170B  3000               	movlw	0
 10798  170C  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
 10799  170D  3018               	movlw	24
 10800  170E  00CB               	movwf	??___ftdiv^(0+128)
 10801  170F  084B               	movf	??___ftdiv^(0+128),w
 10802  1710  00CF               	movwf	___ftdiv@cntr^(0+128)
 10803  1711                     l6073:	
 10804  1711  3001               	movlw	1
 10805  1712                     u6445:	
 10806  1712  35D0               	lslf	___ftdiv@f3^(0+128),f
 10807  1713  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
 10808  1714  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
 10809  1715  0B89               	decfsz	9,f
 10810  1716  2F12               	goto	u6445
 10811  1717  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10812  1718  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
 10813  1719  1D03               	skipz
 10814  171A  2F21               	goto	u6455
 10815  171B  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10816  171C  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
 10817  171D  1D03               	skipz
 10818  171E  2F21               	goto	u6455
 10819  171F  0845               	movf	___ftdiv@f2^(0+128),w
 10820  1720  0248               	subwf	___ftdiv@f1^(0+128),w
 10821  1721                     u6455:	
 10822  1721  1C03               	skipc
 10823  1722  2F2A               	goto	l6081
 10824  1723  0845               	movf	___ftdiv@f2^(0+128),w
 10825  1724  02C8               	subwf	___ftdiv@f1^(0+128),f
 10826  1725  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10827  1726  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
 10828  1727  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10829  1728  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
 10830  1729  1450               	bsf	___ftdiv@f3^(0+128),0
 10831  172A                     l6081:	
 10832  172A  3001               	movlw	1
 10833  172B                     u6465:	
 10834  172B  35C8               	lslf	___ftdiv@f1^(0+128),f
 10835  172C  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
 10836  172D  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
 10837  172E  0B89               	decfsz	9,f
 10838  172F  2F2B               	goto	u6465
 10839  1730  3001               	movlw	1
 10840  1731  02CF               	subwf	___ftdiv@cntr^(0+128),f
 10841  1732  1D03               	btfss	3,2
 10842  1733  2F11               	goto	l6073
 10843  1734  0850               	movf	___ftdiv@f3^(0+128),w
 10844  1735  00A0               	movwf	___ftpack@arg^(0+128)
 10845  1736  0851               	movf	(___ftdiv@f3+1)^(0+128),w
 10846  1737  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10847  1738  0852               	movf	(___ftdiv@f3+2)^(0+128),w
 10848  1739  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10849  173A  0853               	movf	___ftdiv@exp^(0+128),w
 10850  173B  00CB               	movwf	??___ftdiv^(0+128)
 10851  173C  084B               	movf	??___ftdiv^(0+128),w
 10852  173D  00A3               	movwf	___ftpack@exp^(0+128)
 10853  173E  0854               	movf	___ftdiv@sign^(0+128),w
 10854  173F  00CC               	movwf	(??___ftdiv+1)^(0+128)
 10855  1740  084C               	movf	(??___ftdiv+1)^(0+128),w
 10856  1741  00A4               	movwf	___ftpack@sign^(0+128)
 10857  1742  3194  2439         	fcall	___ftpack
 10858  1744  0021               	movlb	1	; select bank1
 10859  1745  0820               	movf	?___ftpack^(0+128),w
 10860  1746  00C5               	movwf	?___ftdiv^(0+128)
 10861  1747  0821               	movf	(?___ftpack+1)^(0+128),w
 10862  1748  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10863  1749  0822               	movf	(?___ftpack+2)^(0+128),w
 10864  174A  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10865  174B  0008               	return
 10866  174C                     __end_of___ftdiv:	
 10867                           
 10868                           	psect	text28
 10869  0A48                     __ptext28:	
 10870 ;; *************** function ___ftadd *****************
 10871 ;; Defined at:
 10872 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10873 ;; Parameters:    Size  Location     Type
 10874 ;;  f1              3    8[BANK1 ] float 
 10875 ;;  f2              3   11[BANK1 ] float 
 10876 ;; Auto vars:     Size  Location     Type
 10877 ;;  exp1            1   20[BANK1 ] unsigned char 
 10878 ;;  exp2            1   19[BANK1 ] unsigned char 
 10879 ;;  sign            1   18[BANK1 ] unsigned char 
 10880 ;; Return value:  Size  Location     Type
 10881 ;;                  3    8[BANK1 ] float 
 10882 ;; Registers used:
 10883 ;;		wreg, status,2, status,0, pclath, cstack
 10884 ;; Tracked objects:
 10885 ;;		On entry : 0/0
 10886 ;;		On exit  : 0/0
 10887 ;;		Unchanged: 0/0
 10888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10889 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10890 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10891 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10892 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10893 ;;Total ram usage:       13 bytes
 10894 ;; Hardware stack levels used:    1
 10895 ;; Hardware stack levels required when called:    4
 10896 ;; This function calls:
 10897 ;;		___ftpack
 10898 ;; This function is called by:
 10899 ;;		_map
 10900 ;;		_scalePotValue
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           
 10905                           ;psect for function ___ftadd
 10906  0A48                     ___ftadd:	
 10907                           
 10908                           ;incstack = 0
 10909                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10910  0A48  0021               	movlb	1	; select bank1
 10911  0A49  0828               	movf	___ftadd@f1^(0+128),w
 10912  0A4A  00AE               	movwf	??___ftadd^(0+128)
 10913  0A4B  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10914  0A4C  00AF               	movwf	(??___ftadd^(0+128)+1)
 10915  0A4D  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10916  0A4E  00B0               	movwf	(??___ftadd^(0+128)+2)
 10917  0A4F  1003               	clrc
 10918  0A50  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10919  0A51  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10920  0A52  00B1               	movwf	(??___ftadd+3)^(0+128)
 10921  0A53  0831               	movf	(??___ftadd+3)^(0+128),w
 10922  0A54  00B4               	movwf	___ftadd@exp1^(0+128)
 10923  0A55  082B               	movf	___ftadd@f2^(0+128),w
 10924  0A56  00AE               	movwf	??___ftadd^(0+128)
 10925  0A57  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10926  0A58  00AF               	movwf	(??___ftadd^(0+128)+1)
 10927  0A59  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10928  0A5A  00B0               	movwf	(??___ftadd^(0+128)+2)
 10929  0A5B  1003               	clrc
 10930  0A5C  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10931  0A5D  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10932  0A5E  00B1               	movwf	(??___ftadd+3)^(0+128)
 10933  0A5F  0831               	movf	(??___ftadd+3)^(0+128),w
 10934  0A60  00B3               	movwf	___ftadd@exp2^(0+128)
 10935  0A61  0834               	movf	___ftadd@exp1^(0+128),w
 10936  0A62  1903               	btfsc	3,2
 10937  0A63  2A70               	goto	l5983
 10938  0A64  0833               	movf	___ftadd@exp2^(0+128),w
 10939  0A65  0234               	subwf	___ftadd@exp1^(0+128),w
 10940  0A66  1803               	skipnc
 10941  0A67  2A77               	goto	l5987
 10942  0A68  0334               	decf	___ftadd@exp1^(0+128),w
 10943  0A69  3AFF               	xorlw	255
 10944  0A6A  0733               	addwf	___ftadd@exp2^(0+128),w
 10945  0A6B  00AE               	movwf	??___ftadd^(0+128)
 10946  0A6C  3019               	movlw	25
 10947  0A6D  022E               	subwf	??___ftadd^(0+128),w
 10948  0A6E  1C03               	skipc
 10949  0A6F  2A77               	goto	l5987
 10950  0A70                     l5983:	
 10951  0A70  082B               	movf	___ftadd@f2^(0+128),w
 10952  0A71  00A8               	movwf	?___ftadd^(0+128)
 10953  0A72  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10954  0A73  00A9               	movwf	(?___ftadd+1)^(0+128)
 10955  0A74  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10956  0A75  00AA               	movwf	(?___ftadd+2)^(0+128)
 10957  0A76  0008               	return
 10958  0A77                     l5987:	
 10959  0A77  0833               	movf	___ftadd@exp2^(0+128),w
 10960  0A78  1903               	btfsc	3,2
 10961  0A79  0008               	return
 10962  0A7A  0834               	movf	___ftadd@exp1^(0+128),w
 10963  0A7B  0233               	subwf	___ftadd@exp2^(0+128),w
 10964  0A7C  1803               	skipnc
 10965  0A7D  2A86               	goto	l5993
 10966  0A7E  0333               	decf	___ftadd@exp2^(0+128),w
 10967  0A7F  3AFF               	xorlw	255
 10968  0A80  0734               	addwf	___ftadd@exp1^(0+128),w
 10969  0A81  00AE               	movwf	??___ftadd^(0+128)
 10970  0A82  3019               	movlw	25
 10971  0A83  022E               	subwf	??___ftadd^(0+128),w
 10972  0A84  1803               	btfsc	3,0
 10973  0A85  0008               	return
 10974  0A86                     l5993:	
 10975  0A86  3006               	movlw	6
 10976  0A87  00AE               	movwf	??___ftadd^(0+128)
 10977  0A88  082E               	movf	??___ftadd^(0+128),w
 10978  0A89  00B2               	movwf	___ftadd@sign^(0+128)
 10979  0A8A  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10980  0A8B  17B2               	bsf	___ftadd@sign^(0+128),7
 10981  0A8C  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10982  0A8D  1732               	bsf	___ftadd@sign^(0+128),6
 10983  0A8E  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10984  0A8F  30FF               	movlw	255
 10985  0A90  05A8               	andwf	___ftadd@f1^(0+128),f
 10986  0A91  30FF               	movlw	255
 10987  0A92  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10988  0A93  3000               	movlw	0
 10989  0A94  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10990  0A95  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10991  0A96  30FF               	movlw	255
 10992  0A97  05AB               	andwf	___ftadd@f2^(0+128),f
 10993  0A98  30FF               	movlw	255
 10994  0A99  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10995  0A9A  3000               	movlw	0
 10996  0A9B  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10997  0A9C  0833               	movf	___ftadd@exp2^(0+128),w
 10998  0A9D  0234               	subwf	___ftadd@exp1^(0+128),w
 10999  0A9E  1803               	skipnc
 11000  0A9F  2AC2               	goto	l6015
 11001  0AA0                     l6005:	
 11002  0AA0  3001               	movlw	1
 11003  0AA1                     u6265:	
 11004  0AA1  35AB               	lslf	___ftadd@f2^(0+128),f
 11005  0AA2  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 11006  0AA3  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 11007  0AA4  0B89               	decfsz	9,f
 11008  0AA5  2AA1               	goto	u6265
 11009  0AA6  3001               	movlw	1
 11010  0AA7  02B3               	subwf	___ftadd@exp2^(0+128),f
 11011  0AA8  0833               	movf	___ftadd@exp2^(0+128),w
 11012  0AA9  0634               	xorwf	___ftadd@exp1^(0+128),w
 11013  0AAA  1903               	skipnz
 11014  0AAB  2ABD               	goto	l6013
 11015  0AAC  3001               	movlw	1
 11016  0AAD  02B2               	subwf	___ftadd@sign^(0+128),f
 11017  0AAE  0832               	movf	___ftadd@sign^(0+128),w
 11018  0AAF  3907               	andlw	7
 11019  0AB0  1903               	btfsc	3,2
 11020  0AB1  2ABD               	goto	l6013
 11021  0AB2  2AA0               	goto	l6005
 11022  0AB3                     l6011:	
 11023  0AB3  3001               	movlw	1
 11024  0AB4                     u6295:	
 11025  0AB4  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 11026  0AB5  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 11027  0AB6  0CA8               	rrf	___ftadd@f1^(0+128),f
 11028  0AB7  0B89               	decfsz	9,f
 11029  0AB8  2AB4               	goto	u6295
 11030  0AB9  3001               	movlw	1
 11031  0ABA  00AE               	movwf	??___ftadd^(0+128)
 11032  0ABB  082E               	movf	??___ftadd^(0+128),w
 11033  0ABC  07B4               	addwf	___ftadd@exp1^(0+128),f
 11034  0ABD                     l6013:	
 11035  0ABD  0834               	movf	___ftadd@exp1^(0+128),w
 11036  0ABE  0633               	xorwf	___ftadd@exp2^(0+128),w
 11037  0ABF  1903               	btfsc	3,2
 11038  0AC0  2AE7               	goto	l1822
 11039  0AC1  2AB3               	goto	l6011
 11040  0AC2                     l6015:	
 11041  0AC2  0834               	movf	___ftadd@exp1^(0+128),w
 11042  0AC3  0233               	subwf	___ftadd@exp2^(0+128),w
 11043  0AC4  1803               	skipnc
 11044  0AC5  2AE7               	goto	l1822
 11045  0AC6                     l6017:	
 11046  0AC6  3001               	movlw	1
 11047  0AC7                     u6325:	
 11048  0AC7  35A8               	lslf	___ftadd@f1^(0+128),f
 11049  0AC8  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 11050  0AC9  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 11051  0ACA  0B89               	decfsz	9,f
 11052  0ACB  2AC7               	goto	u6325
 11053  0ACC  3001               	movlw	1
 11054  0ACD  02B4               	subwf	___ftadd@exp1^(0+128),f
 11055  0ACE  0833               	movf	___ftadd@exp2^(0+128),w
 11056  0ACF  0634               	xorwf	___ftadd@exp1^(0+128),w
 11057  0AD0  1903               	skipnz
 11058  0AD1  2AE3               	goto	l6025
 11059  0AD2  3001               	movlw	1
 11060  0AD3  02B2               	subwf	___ftadd@sign^(0+128),f
 11061  0AD4  0832               	movf	___ftadd@sign^(0+128),w
 11062  0AD5  3907               	andlw	7
 11063  0AD6  1903               	btfsc	3,2
 11064  0AD7  2AE3               	goto	l6025
 11065  0AD8  2AC6               	goto	l6017
 11066  0AD9                     l6023:	
 11067  0AD9  3001               	movlw	1
 11068  0ADA                     u6355:	
 11069  0ADA  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 11070  0ADB  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 11071  0ADC  0CAB               	rrf	___ftadd@f2^(0+128),f
 11072  0ADD  0B89               	decfsz	9,f
 11073  0ADE  2ADA               	goto	u6355
 11074  0ADF  3001               	movlw	1
 11075  0AE0  00AE               	movwf	??___ftadd^(0+128)
 11076  0AE1  082E               	movf	??___ftadd^(0+128),w
 11077  0AE2  07B3               	addwf	___ftadd@exp2^(0+128),f
 11078  0AE3                     l6025:	
 11079  0AE3  0834               	movf	___ftadd@exp1^(0+128),w
 11080  0AE4  0633               	xorwf	___ftadd@exp2^(0+128),w
 11081  0AE5  1D03               	skipz
 11082  0AE6  2AD9               	goto	l6023
 11083  0AE7                     l1822:	
 11084  0AE7  1FB2               	btfss	___ftadd@sign^(0+128),7
 11085  0AE8  2AF9               	goto	l6029
 11086  0AE9  30FF               	movlw	255
 11087  0AEA  06A8               	xorwf	___ftadd@f1^(0+128),f
 11088  0AEB  30FF               	movlw	255
 11089  0AEC  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 11090  0AED  30FF               	movlw	255
 11091  0AEE  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 11092  0AEF  3001               	movlw	1
 11093  0AF0  07A8               	addwf	___ftadd@f1^(0+128),f
 11094  0AF1  3000               	movlw	0
 11095  0AF2  1803               	skipnc
 11096  0AF3  3001               	movlw	1
 11097  0AF4  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 11098  0AF5  3000               	movlw	0
 11099  0AF6  1803               	skipnc
 11100  0AF7  3001               	movlw	1
 11101  0AF8  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 11102  0AF9                     l6029:	
 11103  0AF9  1F32               	btfss	___ftadd@sign^(0+128),6
 11104  0AFA  2B0B               	goto	l6033
 11105  0AFB  30FF               	movlw	255
 11106  0AFC  06AB               	xorwf	___ftadd@f2^(0+128),f
 11107  0AFD  30FF               	movlw	255
 11108  0AFE  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 11109  0AFF  30FF               	movlw	255
 11110  0B00  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 11111  0B01  3001               	movlw	1
 11112  0B02  07AB               	addwf	___ftadd@f2^(0+128),f
 11113  0B03  3000               	movlw	0
 11114  0B04  1803               	skipnc
 11115  0B05  3001               	movlw	1
 11116  0B06  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 11117  0B07  3000               	movlw	0
 11118  0B08  1803               	skipnc
 11119  0B09  3001               	movlw	1
 11120  0B0A  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 11121  0B0B                     l6033:	
 11122  0B0B  01B2               	clrf	___ftadd@sign^(0+128)
 11123  0B0C  0828               	movf	___ftadd@f1^(0+128),w
 11124  0B0D  07AB               	addwf	___ftadd@f2^(0+128),f
 11125  0B0E  0829               	movf	(___ftadd@f1+1)^(0+128),w
 11126  0B0F  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 11127  0B10  082A               	movf	(___ftadd@f1+2)^(0+128),w
 11128  0B11  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 11129  0B12  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 11130  0B13  2B26               	goto	l6043
 11131  0B14  30FF               	movlw	255
 11132  0B15  06AB               	xorwf	___ftadd@f2^(0+128),f
 11133  0B16  30FF               	movlw	255
 11134  0B17  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 11135  0B18  30FF               	movlw	255
 11136  0B19  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 11137  0B1A  3001               	movlw	1
 11138  0B1B  07AB               	addwf	___ftadd@f2^(0+128),f
 11139  0B1C  3000               	movlw	0
 11140  0B1D  1803               	skipnc
 11141  0B1E  3001               	movlw	1
 11142  0B1F  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 11143  0B20  3000               	movlw	0
 11144  0B21  1803               	skipnc
 11145  0B22  3001               	movlw	1
 11146  0B23  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 11147  0B24  01B2               	clrf	___ftadd@sign^(0+128)
 11148  0B25  0AB2               	incf	___ftadd@sign^(0+128),f
 11149  0B26                     l6043:	
 11150  0B26  082B               	movf	___ftadd@f2^(0+128),w
 11151  0B27  00A0               	movwf	___ftpack@arg^(0+128)
 11152  0B28  082C               	movf	(___ftadd@f2+1)^(0+128),w
 11153  0B29  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 11154  0B2A  082D               	movf	(___ftadd@f2+2)^(0+128),w
 11155  0B2B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 11156  0B2C  0834               	movf	___ftadd@exp1^(0+128),w
 11157  0B2D  00AE               	movwf	??___ftadd^(0+128)
 11158  0B2E  082E               	movf	??___ftadd^(0+128),w
 11159  0B2F  00A3               	movwf	___ftpack@exp^(0+128)
 11160  0B30  0832               	movf	___ftadd@sign^(0+128),w
 11161  0B31  00AF               	movwf	(??___ftadd+1)^(0+128)
 11162  0B32  082F               	movf	(??___ftadd+1)^(0+128),w
 11163  0B33  00A4               	movwf	___ftpack@sign^(0+128)
 11164  0B34  3194  2439         	fcall	___ftpack
 11165  0B36  0021               	movlb	1	; select bank1
 11166  0B37  0820               	movf	?___ftpack^(0+128),w
 11167  0B38  00A8               	movwf	?___ftadd^(0+128)
 11168  0B39  0821               	movf	(?___ftpack+1)^(0+128),w
 11169  0B3A  00A9               	movwf	(?___ftadd+1)^(0+128)
 11170  0B3B  0822               	movf	(?___ftpack+2)^(0+128),w
 11171  0B3C  00AA               	movwf	(?___ftadd+2)^(0+128)
 11172  0B3D  0008               	return
 11173  0B3E                     __end_of___ftadd:	
 11174                           
 11175                           	psect	text29
 11176  1439                     __ptext29:	
 11177 ;; *************** function ___ftpack *****************
 11178 ;; Defined at:
 11179 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  arg             3    0[BANK1 ] unsigned um
 11182 ;;  exp             1    3[BANK1 ] unsigned char 
 11183 ;;  sign            1    4[BANK1 ] unsigned char 
 11184 ;; Auto vars:     Size  Location     Type
 11185 ;;		None
 11186 ;; Return value:  Size  Location     Type
 11187 ;;                  3    0[BANK1 ] float 
 11188 ;; Registers used:
 11189 ;;		wreg, status,2, status,0
 11190 ;; Tracked objects:
 11191 ;;		On entry : 0/0
 11192 ;;		On exit  : 0/0
 11193 ;;		Unchanged: 0/0
 11194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11195 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11197 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11198 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11199 ;;Total ram usage:        8 bytes
 11200 ;; Hardware stack levels used:    1
 11201 ;; Hardware stack levels required when called:    3
 11202 ;; This function calls:
 11203 ;;		Nothing
 11204 ;; This function is called by:
 11205 ;;		___altoft
 11206 ;;		___awtoft
 11207 ;;		___ftadd
 11208 ;;		___ftdiv
 11209 ;;		___ftmul
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           
 11214                           ;psect for function ___ftpack
 11215  1439                     ___ftpack:	
 11216                           
 11217                           ;incstack = 0
 11218                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11219  1439  0021               	movlb	1	; select bank1
 11220  143A  0823               	movf	___ftpack@exp^(0+128),w
 11221  143B  1903               	btfsc	3,2
 11222  143C  2C42               	goto	l5651
 11223  143D  0822               	movf	(___ftpack@arg+2)^(0+128),w
 11224  143E  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 11225  143F  0420               	iorwf	___ftpack@arg^(0+128),w
 11226  1440  1D03               	skipz
 11227  1441  2C53               	goto	l5657
 11228  1442                     l5651:	
 11229  1442  3000               	movlw	0
 11230  1443  00A0               	movwf	?___ftpack^(0+128)
 11231  1444  3000               	movlw	0
 11232  1445  00A1               	movwf	(?___ftpack+1)^(0+128)
 11233  1446  3000               	movlw	0
 11234  1447  00A2               	movwf	(?___ftpack+2)^(0+128)
 11235  1448  0008               	return
 11236  1449                     l5655:	
 11237  1449  3001               	movlw	1
 11238  144A  00A5               	movwf	??___ftpack^(0+128)
 11239  144B  0825               	movf	??___ftpack^(0+128),w
 11240  144C  07A3               	addwf	___ftpack@exp^(0+128),f
 11241  144D  3001               	movlw	1
 11242  144E                     u5715:	
 11243  144E  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11244  144F  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11245  1450  0CA0               	rrf	___ftpack@arg^(0+128),f
 11246  1451  0B89               	decfsz	9,f
 11247  1452  2C4E               	goto	u5715
 11248  1453                     l5657:	
 11249  1453  30FE               	movlw	254
 11250  1454  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11251  1455  1903               	btfsc	3,2
 11252  1456  2C6C               	goto	l1791
 11253  1457  2C49               	goto	l5655
 11254  1458                     l5659:	
 11255  1458  3001               	movlw	1
 11256  1459  00A5               	movwf	??___ftpack^(0+128)
 11257  145A  0825               	movf	??___ftpack^(0+128),w
 11258  145B  07A3               	addwf	___ftpack@exp^(0+128),f
 11259  145C  3001               	movlw	1
 11260  145D  07A0               	addwf	___ftpack@arg^(0+128),f
 11261  145E  3000               	movlw	0
 11262  145F  1803               	skipnc
 11263  1460  3001               	movlw	1
 11264  1461  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 11265  1462  3000               	movlw	0
 11266  1463  1803               	skipnc
 11267  1464  3001               	movlw	1
 11268  1465  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 11269  1466  3001               	movlw	1
 11270  1467                     u5735:	
 11271  1467  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11272  1468  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11273  1469  0CA0               	rrf	___ftpack@arg^(0+128),f
 11274  146A  0B89               	decfsz	9,f
 11275  146B  2C67               	goto	u5735
 11276  146C                     l1791:	
 11277  146C  30FF               	movlw	255
 11278  146D  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11279  146E  1903               	btfsc	3,2
 11280  146F  2C79               	goto	l5667
 11281  1470  2C58               	goto	l5659
 11282  1471                     l5665:	
 11283  1471  3001               	movlw	1
 11284  1472  02A3               	subwf	___ftpack@exp^(0+128),f
 11285  1473  3001               	movlw	1
 11286  1474                     u5755:	
 11287  1474  35A0               	lslf	___ftpack@arg^(0+128),f
 11288  1475  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 11289  1476  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 11290  1477  0B89               	decfsz	9,f
 11291  1478  2C74               	goto	u5755
 11292  1479                     l5667:	
 11293  1479  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 11294  147A  2C7F               	goto	l1798
 11295  147B  3002               	movlw	2
 11296  147C  0223               	subwf	___ftpack@exp^(0+128),w
 11297  147D  1803               	skipnc
 11298  147E  2C71               	goto	l5665
 11299  147F                     l1798:	
 11300  147F  1823               	btfsc	___ftpack@exp^(0+128),0
 11301  1480  2C87               	goto	l1799
 11302  1481  30FF               	movlw	255
 11303  1482  05A0               	andwf	___ftpack@arg^(0+128),f
 11304  1483  307F               	movlw	127
 11305  1484  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 11306  1485  30FF               	movlw	255
 11307  1486  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 11308  1487                     l1799:	
 11309  1487  1003               	clrc
 11310  1488  0CA3               	rrf	___ftpack@exp^(0+128),f
 11311  1489  0823               	movf	___ftpack@exp^(0+128),w
 11312  148A  00A5               	movwf	??___ftpack^(0+128)
 11313  148B  01A6               	clrf	(??___ftpack^(0+128)+1)
 11314  148C  01A7               	clrf	(??___ftpack^(0+128)+2)
 11315  148D  3010               	movlw	16
 11316  148E                     u5795:	
 11317  148E  35A5               	lslf	??___ftpack^(0+128),f
 11318  148F  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 11319  1490  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 11320  1491  0B89               	decfsz	9,f
 11321  1492  2C8E               	goto	u5795
 11322  1493  0825               	movf	??___ftpack^(0+128),w
 11323  1494  04A0               	iorwf	___ftpack@arg^(0+128),f
 11324  1495  0826               	movf	(??___ftpack+1)^(0+128),w
 11325  1496  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 11326  1497  0827               	movf	(??___ftpack+2)^(0+128),w
 11327  1498  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 11328  1499  0824               	movf	___ftpack@sign^(0+128),w
 11329  149A  1903               	btfsc	3,2
 11330  149B  0008               	return
 11331  149C  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 11332  149D  0008               	return
 11333  149E                     __end_of___ftpack:	
 11334                           
 11335                           	psect	text30
 11336  1C8D                     __ptext30:	
 11337 ;; *************** function _initSwitchBypass *****************
 11338 ;; Defined at:
 11339 ;;		line 29 in file "SwitchBypass.c"
 11340 ;; Parameters:    Size  Location     Type
 11341 ;;		None
 11342 ;; Auto vars:     Size  Location     Type
 11343 ;;  initState       2   22[BANK1 ] int 
 11344 ;; Return value:  Size  Location     Type
 11345 ;;                  1    wreg      void 
 11346 ;; Registers used:
 11347 ;;		wreg, status,2, status,0, pclath, cstack
 11348 ;; Tracked objects:
 11349 ;;		On entry : 0/0
 11350 ;;		On exit  : 0/0
 11351 ;;		Unchanged: 0/0
 11352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11354 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11356 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11357 ;;Total ram usage:        2 bytes
 11358 ;; Hardware stack levels used:    1
 11359 ;; Hardware stack levels required when called:    6
 11360 ;; This function calls:
 11361 ;;		_getSwitchBypassState
 11362 ;;		_setSwitchBypassState
 11363 ;; This function is called by:
 11364 ;;		_main
 11365 ;; This function uses a non-reentrant model
 11366 ;;
 11367                           
 11368                           
 11369                           ;psect for function _initSwitchBypass
 11370  1C8D                     _initSwitchBypass:	
 11371                           
 11372                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 11373                           
 11374                           ;incstack = 0
 11375                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 11376  1C8D  319C  2447  319C   	fcall	_getSwitchBypassState
 11377  1C90  0021               	movlb	1	; select bank1
 11378  1C91  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 11379  1C92  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 11380  1C93  0820               	movf	?_getSwitchBypassState^(0+128),w
 11381  1C94  00B6               	movwf	initSwitchBypass@initState^(0+128)
 11382                           
 11383                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 11384  1C95  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 11385  1C96  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 11386  1C97  0836               	movf	initSwitchBypass@initState^(0+128),w
 11387  1C98  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 11388  1C99  3191  21B4         	fcall	_setSwitchBypassState
 11389  1C9B  0008               	return
 11390  1C9C                     __end_of_initSwitchBypass:	
 11391                           
 11392                           	psect	text31
 11393  11B4                     __ptext31:	
 11394 ;; *************** function _setSwitchBypassState *****************
 11395 ;; Defined at:
 11396 ;;		line 134 in file "SwitchBypass.c"
 11397 ;; Parameters:    Size  Location     Type
 11398 ;;  f_state         2   18[BANK1 ] int 
 11399 ;; Auto vars:     Size  Location     Type
 11400 ;;		None
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  1    wreg      void 
 11403 ;; Registers used:
 11404 ;;		wreg, status,2, status,0, pclath, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11410 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11412 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11413 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11414 ;;Total ram usage:        4 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    5
 11417 ;; This function calls:
 11418 ;;		_updateSwitchBypassState
 11419 ;;		_wait_ms
 11420 ;; This function is called by:
 11421 ;;		_initSwitchBypass
 11422 ;;		_updateSwitchBypass
 11423 ;; This function uses a non-reentrant model
 11424 ;;
 11425                           
 11426                           
 11427                           ;psect for function _setSwitchBypassState
 11428  11B4                     _setSwitchBypassState:	
 11429                           
 11430                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 11431                           
 11432                           ;incstack = 0
 11433                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 11434  11B4  0020               	movlb	0	; select bank0
 11435  11B5  0869               	movf	_switchBypass_state,w
 11436  11B6  0021               	movlb	1	; select bank1
 11437  11B7  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11438  11B8  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11439  11B9  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 11440  11BA  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 11441  11BB  1D03               	skipz
 11442  11BC  29BF               	goto	u5975
 11443  11BD  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11444  11BE  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 11445  11BF                     u5975:	
 11446  11BF  1903               	btfsc	3,2
 11447  11C0  0008               	return
 11448                           
 11449                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 11450  11C1  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11451  11C2  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11452  11C3  0834               	movf	??_setSwitchBypassState^(0+128),w
 11453  11C4  0020               	movlb	0	; select bank0
 11454  11C5  00E9               	movwf	_switchBypass_state
 11455                           
 11456                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 11457  11C6  0021               	movlb	1	; select bank1
 11458  11C7  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11459  11C8  0022               	movlb	2	; select bank2
 11460  11C9  1C03               	skipc
 11461  11CA  110D               	bcf	13,2	;volatile
 11462  11CB  1803               	skipnc
 11463  11CC  150D               	bsf	13,2	;volatile
 11464                           
 11465                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 11466  11CD  118D               	bcf	13,3	;volatile
 11467                           
 11468                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 11469  11CE  0021               	movlb	1	; select bank1
 11470  11CF  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11471  11D0  0027               	movlb	7	; select bank7
 11472  11D1  1C03               	skipc
 11473  11D2  110D               	bcf	13,2	;volatile
 11474  11D3  1803               	skipnc
 11475  11D4  150D               	bsf	13,2	;volatile
 11476                           
 11477                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 11478  11D5  0021               	movlb	1	; select bank1
 11479  11D6  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11480  11D7  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 11481  11D8  1D03               	btfss	3,2
 11482  11D9  29DD               	goto	u5980
 11483  11DA  0027               	movlb	7	; select bank7
 11484  11DB  148D               	bsf	13,1	;volatile
 11485  11DC  29DF               	goto	l5871
 11486  11DD                     u5980:	
 11487  11DD  0027               	movlb	7	; select bank7
 11488  11DE  108D               	bcf	13,1	;volatile
 11489  11DF                     l5871:	
 11490                           
 11491                           ;SwitchBypass.c: 142: wait_ms(20);
 11492  11DF  3014               	movlw	20
 11493  11E0  0021               	movlb	1	; select bank1
 11494  11E1  00AC               	movwf	wait_ms@timeSec^(0+128)
 11495  11E2  3000               	movlw	0
 11496  11E3  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11497  11E4  319E  266A  3191   	fcall	_wait_ms
 11498                           
 11499                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11500  11E7  0027               	movlb	7	; select bank7
 11501  11E8  110D               	bcf	13,2	;volatile
 11502                           
 11503                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11504  11E9  108D               	bcf	13,1	;volatile
 11505                           
 11506                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11507  11EA  0020               	movlb	0	; select bank0
 11508  11EB  0869               	movf	_switchBypass_state,w
 11509  11EC  0021               	movlb	1	; select bank1
 11510  11ED  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11511  11EE  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11512  11EF  0834               	movf	??_setSwitchBypassState^(0+128),w
 11513  11F0  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 11514  11F1  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 11515  11F2  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 11516  11F3  3180  2002  3191   	fcall	_updateSwitchBypassState
 11517                           
 11518                           ;SwitchBypass.c: 148: wait_ms(20);
 11519  11F6  3014               	movlw	20
 11520  11F7  0021               	movlb	1	; select bank1
 11521  11F8  00AC               	movwf	wait_ms@timeSec^(0+128)
 11522  11F9  3000               	movlw	0
 11523  11FA  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11524  11FB  319E  266A         	fcall	_wait_ms
 11525  11FD  0008               	return
 11526  11FE                     __end_of_setSwitchBypassState:	
 11527                           
 11528                           	psect	text32
 11529  1E6A                     __ptext32:	
 11530 ;; *************** function _wait_ms *****************
 11531 ;; Defined at:
 11532 ;;		line 23 in file "system.c"
 11533 ;; Parameters:    Size  Location     Type
 11534 ;;  timeSec         2   12[BANK1 ] unsigned int 
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  timemsl         4   14[BANK1 ] long 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  1    wreg      void 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0, pclath, cstack
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11546 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11547 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11549 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11550 ;;Total ram usage:        6 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    4
 11553 ;; This function calls:
 11554 ;;		___lmul
 11555 ;; This function is called by:
 11556 ;;		_ring_tactiles
 11557 ;;		_solidring_tactiles
 11558 ;;		_read_bottom_tactile
 11559 ;;		_read_top_tactile
 11560 ;;		_setSwitchBypassState
 11561 ;;		_setDoublePressState
 11562 ;;		_showError_Alternating
 11563 ;;		_show_error
 11564 ;;		_show_cancel
 11565 ;;		_star_tactiles
 11566 ;;		_initExpModeState
 11567 ;; This function uses a non-reentrant model
 11568 ;;
 11569                           
 11570                           
 11571                           ;psect for function _wait_ms
 11572  1E6A                     _wait_ms:	
 11573                           
 11574                           ;system.c: 25: long timemsl = 0;
 11575                           
 11576                           ;incstack = 0
 11577                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11578  1E6A  3000               	movlw	0
 11579  1E6B  0021               	movlb	1	; select bank1
 11580  1E6C  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11581  1E6D  3000               	movlw	0
 11582  1E6E  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11583  1E6F  3000               	movlw	0
 11584  1E70  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11585  1E71  3000               	movlw	0
 11586  1E72  00AE               	movwf	wait_ms@timemsl^(0+128)
 11587                           
 11588                           ;system.c: 26: timemsl = timeSec * 1000l;
 11589  1E73  082C               	movf	wait_ms@timeSec^(0+128),w
 11590  1E74  00A0               	movwf	___lmul@multiplier^(0+128)
 11591  1E75  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 11592  1E76  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 11593  1E77  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 11594  1E78  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 11595  1E79  3000               	movlw	0
 11596  1E7A  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 11597  1E7B  3000               	movlw	0
 11598  1E7C  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 11599  1E7D  3003               	movlw	3
 11600  1E7E  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 11601  1E7F  30E8               	movlw	232
 11602  1E80  00A4               	movwf	___lmul@multiplicand^(0+128)
 11603  1E81  319E  263A  319E   	fcall	___lmul
 11604  1E84  0021               	movlb	1	; select bank1
 11605  1E85  0823               	movf	(?___lmul+3)^(0+128),w
 11606  1E86  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11607  1E87  0822               	movf	(?___lmul+2)^(0+128),w
 11608  1E88  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11609  1E89  0821               	movf	(?___lmul+1)^(0+128),w
 11610  1E8A  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11611  1E8B  0820               	movf	?___lmul^(0+128),w
 11612  1E8C  00AE               	movwf	wait_ms@timemsl^(0+128)
 11613  1E8D                     l380:	
 11614                           ;system.c: 27: for( ; timemsl; timemsl--);
 11615                           
 11616  1E8D  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 11617  1E8E  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 11618  1E8F  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 11619  1E90  042E               	iorwf	wait_ms@timemsl^(0+128),w
 11620  1E91  1903               	btfsc	3,2
 11621  1E92  0008               	return
 11622  1E93  30FF               	movlw	255
 11623  1E94  07AE               	addwf	wait_ms@timemsl^(0+128),f
 11624  1E95  30FF               	movlw	255
 11625  1E96  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 11626  1E97  30FF               	movlw	255
 11627  1E98  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 11628  1E99  30FF               	movlw	255
 11629  1E9A  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 11630  1E9B  2E8D               	goto	l380
 11631  1E9C                     __end_of_wait_ms:	
 11632                           
 11633                           	psect	text33
 11634  1E3A                     __ptext33:	
 11635 ;; *************** function ___lmul *****************
 11636 ;; Defined at:
 11637 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;  multiplier      4    0[BANK1 ] unsigned long 
 11640 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 11641 ;; Auto vars:     Size  Location     Type
 11642 ;;  product         4    8[BANK1 ] unsigned long 
 11643 ;; Return value:  Size  Location     Type
 11644 ;;                  4    0[BANK1 ] unsigned long 
 11645 ;; Registers used:
 11646 ;;		wreg, status,2, status,0
 11647 ;; Tracked objects:
 11648 ;;		On entry : 0/0
 11649 ;;		On exit  : 0/0
 11650 ;;		Unchanged: 0/0
 11651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11652 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11653 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11655 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11656 ;;Total ram usage:       12 bytes
 11657 ;; Hardware stack levels used:    1
 11658 ;; Hardware stack levels required when called:    3
 11659 ;; This function calls:
 11660 ;;		Nothing
 11661 ;; This function is called by:
 11662 ;;		_wait_ms
 11663 ;; This function uses a non-reentrant model
 11664 ;;
 11665                           
 11666                           
 11667                           ;psect for function ___lmul
 11668  1E3A                     ___lmul:	
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11672  1E3A  3000               	movlw	0
 11673  1E3B  0021               	movlb	1	; select bank1
 11674  1E3C  00AB               	movwf	(___lmul@product+3)^(0+128)
 11675  1E3D  3000               	movlw	0
 11676  1E3E  00AA               	movwf	(___lmul@product+2)^(0+128)
 11677  1E3F  3000               	movlw	0
 11678  1E40  00A9               	movwf	(___lmul@product+1)^(0+128)
 11679  1E41  3000               	movlw	0
 11680  1E42  00A8               	movwf	___lmul@product^(0+128)
 11681  1E43                     l5549:	
 11682  1E43  1C20               	btfss	___lmul@multiplier^(0+128),0
 11683  1E44  2E4D               	goto	l5553
 11684  1E45  0824               	movf	___lmul@multiplicand^(0+128),w
 11685  1E46  07A8               	addwf	___lmul@product^(0+128),f
 11686  1E47  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 11687  1E48  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 11688  1E49  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 11689  1E4A  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 11690  1E4B  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 11691  1E4C  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 11692  1E4D                     l5553:	
 11693  1E4D  3001               	movlw	1
 11694  1E4E                     u5605:	
 11695  1E4E  35A4               	lslf	___lmul@multiplicand^(0+128),f
 11696  1E4F  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 11697  1E50  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 11698  1E51  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 11699  1E52  0B89               	decfsz	9,f
 11700  1E53  2E4E               	goto	u5605
 11701  1E54  3001               	movlw	1
 11702  1E55                     u5615:	
 11703  1E55  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 11704  1E56  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 11705  1E57  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 11706  1E58  0CA0               	rrf	___lmul@multiplier^(0+128),f
 11707  1E59  0B89               	decfsz	9,f
 11708  1E5A  2E55               	goto	u5615
 11709  1E5B  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 11710  1E5C  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 11711  1E5D  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 11712  1E5E  0420               	iorwf	___lmul@multiplier^(0+128),w
 11713  1E5F  1D03               	skipz
 11714  1E60  2E43               	goto	l5549
 11715  1E61  082B               	movf	(___lmul@product+3)^(0+128),w
 11716  1E62  00A3               	movwf	(?___lmul+3)^(0+128)
 11717  1E63  082A               	movf	(___lmul@product+2)^(0+128),w
 11718  1E64  00A2               	movwf	(?___lmul+2)^(0+128)
 11719  1E65  0829               	movf	(___lmul@product+1)^(0+128),w
 11720  1E66  00A1               	movwf	(?___lmul+1)^(0+128)
 11721  1E67  0828               	movf	___lmul@product^(0+128),w
 11722  1E68  00A0               	movwf	?___lmul^(0+128)
 11723  1E69  0008               	return
 11724  1E6A                     __end_of___lmul:	
 11725                           
 11726                           	psect	text34
 11727  0002                     __ptext34:	
 11728 ;; *************** function _updateSwitchBypassState *****************
 11729 ;; Defined at:
 11730 ;;		line 96 in file "state_manager.c"
 11731 ;; Parameters:    Size  Location     Type
 11732 ;;  state           2    0[BANK1 ] int 
 11733 ;; Auto vars:     Size  Location     Type
 11734 ;;		None
 11735 ;; Return value:  Size  Location     Type
 11736 ;;                  1    wreg      void 
 11737 ;; Registers used:
 11738 ;;		None
 11739 ;; Tracked objects:
 11740 ;;		On entry : 0/0
 11741 ;;		On exit  : 0/0
 11742 ;;		Unchanged: 0/0
 11743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11744 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11747 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11748 ;;Total ram usage:        2 bytes
 11749 ;; Hardware stack levels used:    1
 11750 ;; Hardware stack levels required when called:    3
 11751 ;; This function calls:
 11752 ;;		Nothing
 11753 ;; This function is called by:
 11754 ;;		_setSwitchBypassState
 11755 ;; This function uses a non-reentrant model
 11756 ;;
 11757                           
 11758                           
 11759                           ;psect for function _updateSwitchBypassState
 11760  0002                     _updateSwitchBypassState:	
 11761                           
 11762                           ;incstack = 0
 11763                           ; Regs used in _updateSwitchBypassState: []
 11764  0002  0008               	return
 11765  0003                     __end_of_updateSwitchBypassState:	
 11766                           
 11767                           	psect	text35
 11768  1C47                     __ptext35:	
 11769 ;; *************** function _getSwitchBypassState *****************
 11770 ;; Defined at:
 11771 ;;		line 103 in file "state_manager.c"
 11772 ;; Parameters:    Size  Location     Type
 11773 ;;		None
 11774 ;; Auto vars:     Size  Location     Type
 11775 ;;		None
 11776 ;; Return value:  Size  Location     Type
 11777 ;;                  2    0[BANK1 ] int 
 11778 ;; Registers used:
 11779 ;;		status,2
 11780 ;; Tracked objects:
 11781 ;;		On entry : 0/0
 11782 ;;		On exit  : 0/0
 11783 ;;		Unchanged: 0/0
 11784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11785 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11788 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11789 ;;Total ram usage:        2 bytes
 11790 ;; Hardware stack levels used:    1
 11791 ;; Hardware stack levels required when called:    3
 11792 ;; This function calls:
 11793 ;;		Nothing
 11794 ;; This function is called by:
 11795 ;;		_initSwitchBypass
 11796 ;; This function uses a non-reentrant model
 11797 ;;
 11798                           
 11799                           
 11800                           ;psect for function _getSwitchBypassState
 11801  1C47                     _getSwitchBypassState:	
 11802                           
 11803                           ;state_manager.c: 108: return 0;
 11804                           
 11805                           ;incstack = 0
 11806                           ; Regs used in _getSwitchBypassState: [status,2]
 11807  1C47  0021               	movlb	1	; select bank1
 11808  1C48  01A0               	clrf	?_getSwitchBypassState^(0+128)
 11809  1C49  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 11810  1C4A  0008               	return
 11811  1C4B                     __end_of_getSwitchBypassState:	
 11812                           
 11813                           	psect	text36
 11814  1CBE                     __ptext36:	
 11815 ;; *************** function _adc_convert *****************
 11816 ;; Defined at:
 11817 ;;		line 122 in file "user.c"
 11818 ;; Parameters:    Size  Location     Type
 11819 ;;  channel         1    wreg     unsigned char 
 11820 ;; Auto vars:     Size  Location     Type
 11821 ;;  channel         1    3[BANK1 ] unsigned char 
 11822 ;; Return value:  Size  Location     Type
 11823 ;;                  2    0[BANK1 ] unsigned int 
 11824 ;; Registers used:
 11825 ;;		wreg, status,2, status,0
 11826 ;; Tracked objects:
 11827 ;;		On entry : 0/0
 11828 ;;		On exit  : 0/0
 11829 ;;		Unchanged: 0/0
 11830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11831 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11832 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11833 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11834 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11835 ;;Total ram usage:        4 bytes
 11836 ;; Hardware stack levels used:    1
 11837 ;; Hardware stack levels required when called:    3
 11838 ;; This function calls:
 11839 ;;		Nothing
 11840 ;; This function is called by:
 11841 ;;		_main
 11842 ;; This function uses a non-reentrant model
 11843 ;;
 11844                           
 11845                           
 11846                           ;psect for function _adc_convert
 11847  1CBE                     _adc_convert:	
 11848                           
 11849                           ;incstack = 0
 11850                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11851                           ;adc_convert@channel stored from wreg
 11852  1CBE  0021               	movlb	1	; select bank1
 11853  1CBF  00A3               	movwf	adc_convert@channel^(0+128)
 11854                           
 11855                           ;user.c: 123: ADCON0bits.CHS = channel;
 11856  1CC0  0823               	movf	adc_convert@channel^(0+128),w
 11857  1CC1  00A2               	movwf	??_adc_convert^(0+128)
 11858  1CC2  0DA2               	rlf	??_adc_convert^(0+128),f
 11859  1CC3  0DA2               	rlf	??_adc_convert^(0+128),f
 11860  1CC4  081D               	movf	29,w	;volatile
 11861  1CC5  0622               	xorwf	??_adc_convert^(0+128),w
 11862  1CC6  3983               	andlw	-125
 11863  1CC7  0622               	xorwf	??_adc_convert^(0+128),w
 11864  1CC8  009D               	movwf	29	;volatile
 11865                           
 11866                           ;user.c: 124: ADCON0bits.GO = 0b1;
 11867  1CC9  149D               	bsf	29,1	;volatile
 11868  1CCA                     l580:	
 11869                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 11870                           
 11871  1CCA  189D               	btfsc	29,1	;volatile
 11872  1CCB  2CCA               	goto	l580
 11873                           
 11874                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 11875  1CCC  081C               	movf	28,w	;volatile
 11876  1CCD  00A1               	movwf	(?_adc_convert+1)^(0+128)
 11877  1CCE  081B               	movf	27,w	;volatile
 11878  1CCF  00A0               	movwf	?_adc_convert^(0+128)
 11879  1CD0  0008               	return
 11880  1CD1                     __end_of_adc_convert:	
 11881                           
 11882                           	psect	text37
 11883  149E                     __ptext37:	
 11884 ;; *************** function _ReadSavedSettings *****************
 11885 ;; Defined at:
 11886 ;;		line 199 in file "user.c"
 11887 ;; Parameters:    Size  Location     Type
 11888 ;;		None
 11889 ;; Auto vars:     Size  Location     Type
 11890 ;;		None
 11891 ;; Return value:  Size  Location     Type
 11892 ;;                  1    wreg      void 
 11893 ;; Registers used:
 11894 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11895 ;; Tracked objects:
 11896 ;;		On entry : 0/0
 11897 ;;		On exit  : 0/0
 11898 ;;		Unchanged: 0/0
 11899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11902 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11903 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11904 ;;Total ram usage:        1 bytes
 11905 ;; Hardware stack levels used:    1
 11906 ;; Hardware stack levels required when called:    4
 11907 ;; This function calls:
 11908 ;;		_FLASH_ReadWord
 11909 ;;		_set_leds_bottom
 11910 ;;		_set_leds_top
 11911 ;; This function is called by:
 11912 ;;		_main
 11913 ;; This function uses a non-reentrant model
 11914 ;;
 11915                           
 11916                           
 11917                           ;psect for function _ReadSavedSettings
 11918  149E                     _ReadSavedSettings:	
 11919                           
 11920                           ;user.c: 201: top_push_state = FLASH_ReadWord(0x1F81);
 11921                           
 11922                           ;incstack = 0
 11923                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11924  149E  3081               	movlw	129
 11925  149F  0021               	movlb	1	; select bank1
 11926  14A0  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11927  14A1  301F               	movlw	31
 11928  14A2  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11929  14A3  319D  254B  3194   	fcall	_FLASH_ReadWord
 11930  14A6  0021               	movlb	1	; select bank1
 11931  14A7  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11932  14A8  0020               	movlb	0	; select bank0
 11933  14A9  00E5               	movwf	_top_push_state+1
 11934  14AA  0021               	movlb	1	; select bank1
 11935  14AB  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11936  14AC  0020               	movlb	0	; select bank0
 11937  14AD  00E4               	movwf	_top_push_state
 11938                           
 11939                           ;user.c: 202: bottom_push_state = FLASH_ReadWord(0x1F82);
 11940  14AE  3082               	movlw	130
 11941  14AF  0021               	movlb	1	; select bank1
 11942  14B0  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11943  14B1  301F               	movlw	31
 11944  14B2  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11945  14B3  319D  254B  3194   	fcall	_FLASH_ReadWord
 11946  14B6  0021               	movlb	1	; select bank1
 11947  14B7  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11948  14B8  0020               	movlb	0	; select bank0
 11949  14B9  00E1               	movwf	_bottom_push_state+1
 11950  14BA  0021               	movlb	1	; select bank1
 11951  14BB  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11952  14BC  0020               	movlb	0	; select bank0
 11953  14BD  00E0               	movwf	_bottom_push_state
 11954                           
 11955                           ;user.c: 204: if (top_push_state > 6) {
 11956  14BE  0865               	movf	_top_push_state+1,w
 11957  14BF  3A80               	xorlw	128
 11958  14C0  0021               	movlb	1	; select bank1
 11959  14C1  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11960  14C2  3080               	movlw	128
 11961  14C3  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11962  14C4  1D03               	skipz
 11963  14C5  2CC9               	goto	u6645
 11964  14C6  3007               	movlw	7
 11965  14C7  0020               	movlb	0	; select bank0
 11966  14C8  0264               	subwf	_top_push_state,w
 11967  14C9                     u6645:	
 11968  14C9  1C03               	skipc
 11969  14CA  2CD0               	goto	l609
 11970                           
 11971                           ;user.c: 206: top_push_state = 6;
 11972  14CB  3006               	movlw	6
 11973  14CC  0020               	movlb	0	; select bank0
 11974  14CD  00E4               	movwf	_top_push_state
 11975  14CE  3000               	movlw	0
 11976  14CF  00E5               	movwf	_top_push_state+1
 11977  14D0                     l609:	
 11978                           
 11979                           ;user.c: 207: }
 11980                           ;user.c: 208: if (bottom_push_state > 6) {
 11981  14D0  0020               	movlb	0	; select bank0
 11982  14D1  0861               	movf	_bottom_push_state+1,w
 11983  14D2  3A80               	xorlw	128
 11984  14D3  0021               	movlb	1	; select bank1
 11985  14D4  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11986  14D5  3080               	movlw	128
 11987  14D6  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11988  14D7  1D03               	skipz
 11989  14D8  2CDC               	goto	u6655
 11990  14D9  3007               	movlw	7
 11991  14DA  0020               	movlb	0	; select bank0
 11992  14DB  0260               	subwf	_bottom_push_state,w
 11993  14DC                     u6655:	
 11994  14DC  1C03               	skipc
 11995  14DD  2CE3               	goto	l6183
 11996                           
 11997                           ;user.c: 210: bottom_push_state = 6;
 11998  14DE  3006               	movlw	6
 11999  14DF  0020               	movlb	0	; select bank0
 12000  14E0  00E0               	movwf	_bottom_push_state
 12001  14E1  3000               	movlw	0
 12002  14E2  00E1               	movwf	_bottom_push_state+1
 12003  14E3                     l6183:	
 12004                           
 12005                           ;user.c: 211: }
 12006                           ;user.c: 214: LATGbits.LATG1 = !switchBypass_state;
 12007  14E3  0020               	movlb	0	; select bank0
 12008  14E4  0869               	movf	_switchBypass_state,w
 12009  14E5  1D03               	btfss	3,2
 12010  14E6  2CEA               	goto	u6660
 12011  14E7  0027               	movlb	7	; select bank7
 12012  14E8  148D               	bsf	13,1	;volatile
 12013  14E9  2CEC               	goto	l6185
 12014  14EA                     u6660:	
 12015  14EA  0027               	movlb	7	; select bank7
 12016  14EB  108D               	bcf	13,1	;volatile
 12017  14EC                     l6185:	
 12018                           
 12019                           ;user.c: 215: LATGbits.LATG2 = switchBypass_state;
 12020  14EC  0020               	movlb	0	; select bank0
 12021  14ED  0C69               	rrf	_switchBypass_state,w
 12022  14EE  0027               	movlb	7	; select bank7
 12023  14EF  1C03               	skipc
 12024  14F0  110D               	bcf	13,2	;volatile
 12025  14F1  1803               	skipnc
 12026  14F2  150D               	bsf	13,2	;volatile
 12027                           
 12028                           ;user.c: 216: LATBbits.LATB2 = 0;
 12029  14F3  0022               	movlb	2	; select bank2
 12030  14F4  110D               	bcf	13,2	;volatile
 12031                           
 12032                           ;user.c: 217: LATBbits.LATB3 = 0;
 12033  14F5  118D               	bcf	13,3	;volatile
 12034                           
 12035                           ;user.c: 219: LATBbits.LATB4 = 0;
 12036  14F6  120D               	bcf	13,4	;volatile
 12037                           
 12038                           ;user.c: 220: LATBbits.LATB5 = 0;
 12039  14F7  128D               	bcf	13,5	;volatile
 12040                           
 12041                           ;user.c: 222: LATBbits.LATB1 = 0;
 12042  14F8  108D               	bcf	13,1	;volatile
 12043                           
 12044                           ;user.c: 223: LATBbits.LATB0 = 0;
 12045  14F9  100D               	bcf	13,0	;volatile
 12046                           
 12047                           ;user.c: 226: set_leds_top(top_push_state, 1);
 12048  14FA  0020               	movlb	0	; select bank0
 12049  14FB  0865               	movf	_top_push_state+1,w
 12050  14FC  0021               	movlb	1	; select bank1
 12051  14FD  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 12052  14FE  0020               	movlb	0	; select bank0
 12053  14FF  0864               	movf	_top_push_state,w
 12054  1500  0021               	movlb	1	; select bank1
 12055  1501  00A0               	movwf	set_leds_top@x^(0+128)
 12056  1502  3001               	movlw	1
 12057  1503  00A2               	movwf	set_leds_top@ledState^(0+128)
 12058  1504  3000               	movlw	0
 12059  1505  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 12060  1506  3193  238C  3194   	fcall	_set_leds_top
 12061                           
 12062                           ;user.c: 227: set_leds_bottom(bottom_push_state);
 12063  1509  0020               	movlb	0	; select bank0
 12064  150A  0861               	movf	_bottom_push_state+1,w
 12065  150B  0021               	movlb	1	; select bank1
 12066  150C  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 12067  150D  0020               	movlb	0	; select bank0
 12068  150E  0860               	movf	_bottom_push_state,w
 12069  150F  0021               	movlb	1	; select bank1
 12070  1510  00A0               	movwf	set_leds_bottom@x^(0+128)
 12071  1511  319F  270E         	fcall	_set_leds_bottom
 12072  1513  0008               	return
 12073  1514                     __end_of_ReadSavedSettings:	
 12074                           
 12075                           	psect	text38
 12076  138C                     __ptext38:	
 12077 ;; *************** function _set_leds_top *****************
 12078 ;; Defined at:
 12079 ;;		line 16 in file "LEDs.c"
 12080 ;; Parameters:    Size  Location     Type
 12081 ;;  x               2    0[BANK1 ] int 
 12082 ;;  ledState        2    2[BANK1 ] int 
 12083 ;; Auto vars:     Size  Location     Type
 12084 ;;		None
 12085 ;; Return value:  Size  Location     Type
 12086 ;;                  1    wreg      void 
 12087 ;; Registers used:
 12088 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12089 ;; Tracked objects:
 12090 ;;		On entry : 0/0
 12091 ;;		On exit  : 0/0
 12092 ;;		Unchanged: 0/0
 12093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12094 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12097 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12098 ;;Total ram usage:        4 bytes
 12099 ;; Hardware stack levels used:    1
 12100 ;; Hardware stack levels required when called:    3
 12101 ;; This function calls:
 12102 ;;		Nothing
 12103 ;; This function is called by:
 12104 ;;		_ReadSavedSettings
 12105 ;;		_ring_tactiles
 12106 ;;		_solidring_tactiles
 12107 ;;		_read_top_tactile
 12108 ;;		_setPresetDisplay
 12109 ;;		_resetRingLEDs
 12110 ;;		_setExpressionDisplay
 12111 ;;		_star_tactiles
 12112 ;; This function uses a non-reentrant model
 12113 ;;
 12114                           
 12115                           
 12116                           ;psect for function _set_leds_top
 12117  138C                     _set_leds_top:	
 12118                           
 12119                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 12120                           
 12121                           ;incstack = 0
 12122                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 12123  138C  0027               	movlb	7	; select bank7
 12124  138D  100C               	bcf	12,0	;volatile
 12125                           
 12126                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 12127  138E  108C               	bcf	12,1	;volatile
 12128                           
 12129                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 12130  138F  110C               	bcf	12,2	;volatile
 12131                           
 12132                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 12133  1390  118C               	bcf	12,3	;volatile
 12134                           
 12135                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 12136  1391  120C               	bcf	12,4	;volatile
 12137                           
 12138                           ;LEDs.c: 22: switch (x) {
 12139  1392  2BC2               	goto	l5575
 12140  1393                     l5563:	
 12141                           ;LEDs.c: 23: case 1:
 12142                           
 12143                           
 12144                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 12145  1393  0021               	movlb	1	; select bank1
 12146  1394  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12147  1395  0027               	movlb	7	; select bank7
 12148  1396  1C03               	skipc
 12149  1397  100C               	bcf	12,0	;volatile
 12150  1398  1803               	skipnc
 12151  1399  140C               	bsf	12,0	;volatile
 12152                           
 12153                           ;LEDs.c: 25: break;
 12154  139A  0008               	return
 12155  139B                     l5565:	
 12156                           ;LEDs.c: 26: case 2:
 12157                           
 12158                           
 12159                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 12160  139B  0021               	movlb	1	; select bank1
 12161  139C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12162  139D  0027               	movlb	7	; select bank7
 12163  139E  1C03               	skipc
 12164  139F  108C               	bcf	12,1	;volatile
 12165  13A0  1803               	skipnc
 12166  13A1  148C               	bsf	12,1	;volatile
 12167                           
 12168                           ;LEDs.c: 28: break;
 12169  13A2  0008               	return
 12170  13A3                     l5567:	
 12171                           ;LEDs.c: 29: case 3:
 12172                           
 12173                           
 12174                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 12175  13A3  0021               	movlb	1	; select bank1
 12176  13A4  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12177  13A5  0027               	movlb	7	; select bank7
 12178  13A6  1C03               	skipc
 12179  13A7  110C               	bcf	12,2	;volatile
 12180  13A8  1803               	skipnc
 12181  13A9  150C               	bsf	12,2	;volatile
 12182                           
 12183                           ;LEDs.c: 31: break;
 12184  13AA  0008               	return
 12185  13AB                     l5569:	
 12186                           ;LEDs.c: 32: case 4:
 12187                           
 12188                           
 12189                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12190  13AB  0021               	movlb	1	; select bank1
 12191  13AC  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12192  13AD  0027               	movlb	7	; select bank7
 12193  13AE  1C03               	skipc
 12194  13AF  118C               	bcf	12,3	;volatile
 12195  13B0  1803               	skipnc
 12196  13B1  158C               	bsf	12,3	;volatile
 12197                           
 12198                           ;LEDs.c: 34: break;
 12199  13B2  0008               	return
 12200  13B3                     l5571:	
 12201                           ;LEDs.c: 35: case 5:
 12202                           
 12203                           
 12204                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12205  13B3  0021               	movlb	1	; select bank1
 12206  13B4  0C22               	rrf	set_leds_top@ledState^(0+128),w
 12207  13B5  0027               	movlb	7	; select bank7
 12208  13B6  1C03               	skipc
 12209  13B7  120C               	bcf	12,4	;volatile
 12210  13B8  1803               	skipnc
 12211  13B9  160C               	bsf	12,4	;volatile
 12212                           
 12213                           ;LEDs.c: 39: break;
 12214                           
 12215                           ;LEDs.c: 38: case 6:
 12216                           
 12217                           ;LEDs.c: 37: break;
 12218  13BA  0008               	return
 12219  13BB                     l766:	
 12220                           ;LEDs.c: 40: case 100:
 12221                           
 12222                           
 12223                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12224  13BB  0027               	movlb	7	; select bank7
 12225  13BC  140C               	bsf	12,0	;volatile
 12226                           
 12227                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12228  13BD  148C               	bsf	12,1	;volatile
 12229                           
 12230                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12231  13BE  150C               	bsf	12,2	;volatile
 12232                           
 12233                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12234  13BF  158C               	bsf	12,3	;volatile
 12235                           
 12236                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12237  13C0  160C               	bsf	12,4	;volatile
 12238                           
 12239                           ;LEDs.c: 47: }
 12240                           
 12241                           ;LEDs.c: 46: break;
 12242  13C1  0008               	return
 12243  13C2                     l5575:	
 12244                           
 12245                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12246                           ; Switch size 1, requested type "space"
 12247                           ; Number of cases is 1, Range of values is 0 to 0
 12248                           ; switch strategies available:
 12249                           ; Name         Instructions Cycles
 12250                           ; simple_byte            4     3 (average)
 12251                           ; direct_byte            8     6 (fixed)
 12252                           ; jumptable            260     6 (fixed)
 12253                           ;	Chosen strategy is simple_byte
 12254  13C2  0021               	movlb	1	; select bank1
 12255  13C3  0821               	movf	(set_leds_top@x+1)^(0+128),w
 12256  13C4  3A00               	xorlw	0	; case 0
 12257  13C5  1903               	skipnz
 12258  13C6  2BC8               	goto	l6975
 12259  13C7  2BDF               	goto	l767
 12260  13C8                     l6975:	
 12261                           
 12262                           ; Switch size 1, requested type "space"
 12263                           ; Number of cases is 7, Range of values is 1 to 100
 12264                           ; switch strategies available:
 12265                           ; Name         Instructions Cycles
 12266                           ; simple_byte           22    12 (average)
 12267                           ; direct_byte          209     9 (fixed)
 12268                           ; jumptable            263     9 (fixed)
 12269                           ;	Chosen strategy is simple_byte
 12270  13C8  0820               	movf	set_leds_top@x^(0+128),w
 12271  13C9  3A01               	xorlw	1	; case 1
 12272  13CA  1903               	skipnz
 12273  13CB  2B93               	goto	l5563
 12274  13CC  3A03               	xorlw	3	; case 2
 12275  13CD  1903               	skipnz
 12276  13CE  2B9B               	goto	l5565
 12277  13CF  3A01               	xorlw	1	; case 3
 12278  13D0  1903               	skipnz
 12279  13D1  2BA3               	goto	l5567
 12280  13D2  3A07               	xorlw	7	; case 4
 12281  13D3  1903               	skipnz
 12282  13D4  2BAB               	goto	l5569
 12283  13D5  3A01               	xorlw	1	; case 5
 12284  13D6  1903               	skipnz
 12285  13D7  2BB3               	goto	l5571
 12286  13D8  3A03               	xorlw	3	; case 6
 12287  13D9  1903               	skipnz
 12288  13DA  2BDF               	goto	l767
 12289  13DB  3A62               	xorlw	98	; case 100
 12290  13DC  1903               	skipnz
 12291  13DD  2BBB               	goto	l766
 12292  13DE  2BDF               	goto	l767
 12293  13DF                     l767:	
 12294  13DF  0008               	return
 12295  13E0                     __end_of_set_leds_top:	
 12296                           
 12297                           	psect	text39
 12298  1F0E                     __ptext39:	
 12299 ;; *************** function _set_leds_bottom *****************
 12300 ;; Defined at:
 12301 ;;		line 51 in file "LEDs.c"
 12302 ;; Parameters:    Size  Location     Type
 12303 ;;  x               2    0[BANK1 ] int 
 12304 ;; Auto vars:     Size  Location     Type
 12305 ;;		None
 12306 ;; Return value:  Size  Location     Type
 12307 ;;                  1    wreg      void 
 12308 ;; Registers used:
 12309 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12310 ;; Tracked objects:
 12311 ;;		On entry : 0/0
 12312 ;;		On exit  : 0/0
 12313 ;;		Unchanged: 0/0
 12314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12315 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12316 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12317 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12318 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12319 ;;Total ram usage:        2 bytes
 12320 ;; Hardware stack levels used:    1
 12321 ;; Hardware stack levels required when called:    3
 12322 ;; This function calls:
 12323 ;;		Nothing
 12324 ;; This function is called by:
 12325 ;;		_ReadSavedSettings
 12326 ;;		_ring_tactiles
 12327 ;;		_solidring_tactiles
 12328 ;;		_read_bottom_tactile
 12329 ;;		_setPresetDisplay
 12330 ;;		_resetRingLEDs
 12331 ;;		_setExpressionDisplay
 12332 ;;		_star_tactiles
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function _set_leds_bottom
 12338  1F0E                     _set_leds_bottom:	
 12339                           
 12340                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12341                           
 12342                           ;incstack = 0
 12343                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12344  1F0E  0022               	movlb	2	; select bank2
 12345  1F0F  100F               	bcf	15,0	;volatile
 12346                           
 12347                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12348  1F10  108F               	bcf	15,1	;volatile
 12349                           
 12350                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12351  1F11  110F               	bcf	15,2	;volatile
 12352                           
 12353                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12354  1F12  118F               	bcf	15,3	;volatile
 12355                           
 12356                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12357  1F13  120F               	bcf	15,4	;volatile
 12358                           
 12359                           ;LEDs.c: 57: switch (x) {
 12360  1F14  2F2B               	goto	l5591
 12361  1F15                     l771:	
 12362                           ;LEDs.c: 58: case 1:
 12363                           
 12364                           
 12365                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12366  1F15  0022               	movlb	2	; select bank2
 12367  1F16  140F               	bsf	15,0	;volatile
 12368                           
 12369                           ;LEDs.c: 60: break;
 12370  1F17  0008               	return
 12371  1F18                     l773:	
 12372                           ;LEDs.c: 61: case 2:
 12373                           
 12374                           
 12375                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12376  1F18  0022               	movlb	2	; select bank2
 12377  1F19  148F               	bsf	15,1	;volatile
 12378                           
 12379                           ;LEDs.c: 63: break;
 12380  1F1A  0008               	return
 12381  1F1B                     l774:	
 12382                           ;LEDs.c: 64: case 3:
 12383                           
 12384                           
 12385                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12386  1F1B  0022               	movlb	2	; select bank2
 12387  1F1C  150F               	bsf	15,2	;volatile
 12388                           
 12389                           ;LEDs.c: 66: break;
 12390  1F1D  0008               	return
 12391  1F1E                     l775:	
 12392                           ;LEDs.c: 67: case 4:
 12393                           
 12394                           
 12395                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12396  1F1E  0022               	movlb	2	; select bank2
 12397  1F1F  158F               	bsf	15,3	;volatile
 12398                           
 12399                           ;LEDs.c: 69: break;
 12400  1F20  0008               	return
 12401  1F21                     l776:	
 12402                           ;LEDs.c: 70: case 5:
 12403                           
 12404                           
 12405                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12406  1F21  0022               	movlb	2	; select bank2
 12407  1F22  160F               	bsf	15,4	;volatile
 12408                           
 12409                           ;LEDs.c: 74: break;
 12410                           
 12411                           ;LEDs.c: 73: case 6:
 12412                           
 12413                           ;LEDs.c: 72: break;
 12414  1F23  0008               	return
 12415  1F24                     l778:	
 12416                           ;LEDs.c: 75: case 100:
 12417                           
 12418                           
 12419                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12420  1F24  0022               	movlb	2	; select bank2
 12421  1F25  140F               	bsf	15,0	;volatile
 12422                           
 12423                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12424  1F26  148F               	bsf	15,1	;volatile
 12425                           
 12426                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12427  1F27  150F               	bsf	15,2	;volatile
 12428                           
 12429                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12430  1F28  158F               	bsf	15,3	;volatile
 12431                           
 12432                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12433  1F29  160F               	bsf	15,4	;volatile
 12434                           
 12435                           ;LEDs.c: 82: }
 12436                           
 12437                           ;LEDs.c: 81: break;
 12438  1F2A  0008               	return
 12439  1F2B                     l5591:	
 12440                           
 12441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12442                           ; Switch size 1, requested type "space"
 12443                           ; Number of cases is 1, Range of values is 0 to 0
 12444                           ; switch strategies available:
 12445                           ; Name         Instructions Cycles
 12446                           ; simple_byte            4     3 (average)
 12447                           ; direct_byte            8     6 (fixed)
 12448                           ; jumptable            260     6 (fixed)
 12449                           ;	Chosen strategy is simple_byte
 12450  1F2B  0021               	movlb	1	; select bank1
 12451  1F2C  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 12452  1F2D  3A00               	xorlw	0	; case 0
 12453  1F2E  1903               	skipnz
 12454  1F2F  2F31               	goto	l6977
 12455  1F30  2F48               	goto	l779
 12456  1F31                     l6977:	
 12457                           
 12458                           ; Switch size 1, requested type "space"
 12459                           ; Number of cases is 7, Range of values is 1 to 100
 12460                           ; switch strategies available:
 12461                           ; Name         Instructions Cycles
 12462                           ; simple_byte           22    12 (average)
 12463                           ; direct_byte          209     9 (fixed)
 12464                           ; jumptable            263     9 (fixed)
 12465                           ;	Chosen strategy is simple_byte
 12466  1F31  0820               	movf	set_leds_bottom@x^(0+128),w
 12467  1F32  3A01               	xorlw	1	; case 1
 12468  1F33  1903               	skipnz
 12469  1F34  2F15               	goto	l771
 12470  1F35  3A03               	xorlw	3	; case 2
 12471  1F36  1903               	skipnz
 12472  1F37  2F18               	goto	l773
 12473  1F38  3A01               	xorlw	1	; case 3
 12474  1F39  1903               	skipnz
 12475  1F3A  2F1B               	goto	l774
 12476  1F3B  3A07               	xorlw	7	; case 4
 12477  1F3C  1903               	skipnz
 12478  1F3D  2F1E               	goto	l775
 12479  1F3E  3A01               	xorlw	1	; case 5
 12480  1F3F  1903               	skipnz
 12481  1F40  2F21               	goto	l776
 12482  1F41  3A03               	xorlw	3	; case 6
 12483  1F42  1903               	skipnz
 12484  1F43  2F48               	goto	l779
 12485  1F44  3A62               	xorlw	98	; case 100
 12486  1F45  1903               	skipnz
 12487  1F46  2F24               	goto	l778
 12488  1F47  2F48               	goto	l779
 12489  1F48                     l779:	
 12490  1F48  0008               	return
 12491  1F49                     __end_of_set_leds_bottom:	
 12492                           
 12493                           	psect	text40
 12494  1D4B                     __ptext40:	
 12495 ;; *************** function _FLASH_ReadWord *****************
 12496 ;; Defined at:
 12497 ;;		line 58 in file "memory.c"
 12498 ;; Parameters:    Size  Location     Type
 12499 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 12500 ;; Auto vars:     Size  Location     Type
 12501 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 12502 ;; Return value:  Size  Location     Type
 12503 ;;                  2    0[BANK1 ] unsigned int 
 12504 ;; Registers used:
 12505 ;;		wreg, status,2, status,0
 12506 ;; Tracked objects:
 12507 ;;		On entry : 0/0
 12508 ;;		On exit  : 0/0
 12509 ;;		Unchanged: 0/0
 12510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12511 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12512 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12514 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12515 ;;Total ram usage:        3 bytes
 12516 ;; Hardware stack levels used:    1
 12517 ;; Hardware stack levels required when called:    3
 12518 ;; This function calls:
 12519 ;;		Nothing
 12520 ;; This function is called by:
 12521 ;;		_ReadSavedSettings
 12522 ;;		_FLASH_WriteWord
 12523 ;; This function uses a non-reentrant model
 12524 ;;
 12525                           
 12526                           
 12527                           ;psect for function _FLASH_ReadWord
 12528  1D4B                     _FLASH_ReadWord:	
 12529                           
 12530                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12531                           
 12532                           ;incstack = 0
 12533                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12534  1D4B  3000               	movlw	0
 12535  1D4C  1B8B               	btfsc	11,7	;volatile
 12536  1D4D  3001               	movlw	1
 12537  1D4E  0021               	movlb	1	; select bank1
 12538  1D4F  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 12539                           
 12540                           ;memory.c: 61: INTCONbits.GIE = 0;
 12541  1D50  138B               	bcf	11,7	;volatile
 12542                           
 12543                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12544  1D51  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 12545  1D52  0023               	movlb	3	; select bank3
 12546  1D53  0091               	movwf	17	;volatile
 12547                           
 12548                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12549  1D54  0021               	movlb	1	; select bank1
 12550  1D55  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 12551  1D56  0023               	movlb	3	; select bank3
 12552  1D57  0092               	movwf	18	;volatile
 12553                           
 12554                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12555  1D58  1315               	bcf	21,6	;volatile
 12556                           
 12557                           ;memory.c: 66: PMCON1bits.RD = 1;
 12558  1D59  1415               	bsf	21,0	;volatile
 12559                           
 12560                           ;memory.c: 67: __nop();
 12561  1D5A  0000               	nop
 12562                           
 12563                           ;memory.c: 68: __nop();
 12564  1D5B  0000               	nop
 12565                           
 12566                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12567  1D5C  0021               	movlb	1	; select bank1
 12568  1D5D  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 12569  1D5E  1C03               	skipc
 12570  1D5F  138B               	bcf	11,7	;volatile
 12571  1D60  1803               	skipnc
 12572  1D61  178B               	bsf	11,7	;volatile
 12573                           
 12574                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12575  1D62  0023               	movlb	3	; select bank3
 12576  1D63  0814               	movf	20,w	;volatile
 12577  1D64  0021               	movlb	1	; select bank1
 12578  1D65  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 12579  1D66  0023               	movlb	3	; select bank3
 12580  1D67  0813               	movf	19,w	;volatile
 12581  1D68  0021               	movlb	1	; select bank1
 12582  1D69  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 12583  1D6A  0008               	return
 12584  1D6B                     __end_of_FLASH_ReadWord:	
 12585                           
 12586                           	psect	text41
 12587  1D8D                     __ptext41:	
 12588 ;; *************** function _InitializeTaps *****************
 12589 ;; Defined at:
 12590 ;;		line 193 in file "user.c"
 12591 ;; Parameters:    Size  Location     Type
 12592 ;;		None
 12593 ;; Auto vars:     Size  Location     Type
 12594 ;;  itap            2    1[BANK1 ] int 
 12595 ;; Return value:  Size  Location     Type
 12596 ;;                  1    wreg      void 
 12597 ;; Registers used:
 12598 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12599 ;; Tracked objects:
 12600 ;;		On entry : 0/0
 12601 ;;		On exit  : 0/0
 12602 ;;		Unchanged: 0/0
 12603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12605 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12606 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12607 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12608 ;;Total ram usage:        3 bytes
 12609 ;; Hardware stack levels used:    1
 12610 ;; Hardware stack levels required when called:    3
 12611 ;; This function calls:
 12612 ;;		Nothing
 12613 ;; This function is called by:
 12614 ;;		_main
 12615 ;; This function uses a non-reentrant model
 12616 ;;
 12617                           
 12618                           
 12619                           ;psect for function _InitializeTaps
 12620  1D8D                     _InitializeTaps:	
 12621                           
 12622                           ;user.c: 194: for (int itap = 0; itap < 12; itap++) {
 12623                           
 12624                           ;incstack = 0
 12625                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12626  1D8D  0021               	movlb	1	; select bank1
 12627  1D8E  01A1               	clrf	InitializeTaps@itap^(0+128)
 12628  1D8F  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 12629  1D90                     L12:	
 12630  1D90  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 12631  1D91  3A80               	xorlw	128
 12632  1D92  00A0               	movwf	??_InitializeTaps^(0+128)
 12633  1D93  3080               	movlw	128
 12634  1D94  0220               	subwf	??_InitializeTaps^(0+128),w
 12635  1D95  1D03               	skipz
 12636  1D96  2D99               	goto	u6615
 12637  1D97  300C               	movlw	12
 12638  1D98  0221               	subwf	InitializeTaps@itap^(0+128),w
 12639  1D99                     u6615:	
 12640  1D99  1803               	btfsc	3,0
 12641  1D9A  0008               	return
 12642                           
 12643                           ;user.c: 195: tap[itap] = 0;
 12644  1D9B  0021               	movlb	1	; select bank1
 12645  1D9C  0821               	movf	InitializeTaps@itap^(0+128),w
 12646  1D9D  00A0               	movwf	??_InitializeTaps^(0+128)
 12647  1D9E  3001               	movlw	1
 12648  1D9F                     u6625:	
 12649  1D9F  35A0               	lslf	??_InitializeTaps^(0+128),f
 12650  1DA0  3EFF               	addlw	-1
 12651  1DA1  1D03               	skipz
 12652  1DA2  2D9F               	goto	u6625
 12653  1DA3  3520               	lslf	??_InitializeTaps^(0+128),w
 12654  1DA4  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 12655  1DA5  0086               	movwf	6
 12656  1DA6  3002               	movlw	2	; select bank5/6
 12657  1DA7  0087               	movwf	7
 12658  1DA8  3000               	movlw	0
 12659  1DA9  3FC0               	movwi [0]fsr1
 12660  1DAA  3000               	movlw	0
 12661  1DAB  3FC1               	movwi [1]fsr1
 12662  1DAC  3FC2               	movwi [2]fsr1
 12663  1DAD  3FC3               	movwi [3]fsr1
 12664  1DAE  3001               	movlw	1
 12665  1DAF  07A1               	addwf	InitializeTaps@itap^(0+128),f
 12666  1DB0  3000               	movlw	0
 12667  1DB1  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 12668  1DB2  2D90               	goto	L12
 12669  1DB3                     __end_of_InitializeTaps:	
 12670                           
 12671                           	psect	text42
 12672  1E0A                     __ptext42:	
 12673 ;; *************** function _InitApp *****************
 12674 ;; Defined at:
 12675 ;;		line 23 in file "user.c"
 12676 ;; Parameters:    Size  Location     Type
 12677 ;;		None
 12678 ;; Auto vars:     Size  Location     Type
 12679 ;;		None
 12680 ;; Return value:  Size  Location     Type
 12681 ;;                  1    wreg      void 
 12682 ;; Registers used:
 12683 ;;		wreg, status,2, status,0, pclath, cstack
 12684 ;; Tracked objects:
 12685 ;;		On entry : 0/0
 12686 ;;		On exit  : 0/0
 12687 ;;		Unchanged: 0/0
 12688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12693 ;;Total ram usage:        0 bytes
 12694 ;; Hardware stack levels used:    1
 12695 ;; Hardware stack levels required when called:    5
 12696 ;; This function calls:
 12697 ;;		_init_adc
 12698 ;;		_init_pwm
 12699 ;; This function is called by:
 12700 ;;		_main
 12701 ;; This function uses a non-reentrant model
 12702 ;;
 12703                           
 12704                           
 12705                           ;psect for function _InitApp
 12706  1E0A                     _InitApp:	
 12707                           
 12708                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12709                           
 12710                           ;incstack = 0
 12711                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12712  1E0A  0021               	movlb	1	; select bank1
 12713  1E0B  100D               	bcf	13,0	;volatile
 12714                           
 12715                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12716  1E0C  108D               	bcf	13,1	;volatile
 12717                           
 12718                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12719  1E0D  110D               	bcf	13,2	;volatile
 12720                           
 12721                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12722  1E0E  118D               	bcf	13,3	;volatile
 12723                           
 12724                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12725  1E0F  120D               	bcf	13,4	;volatile
 12726                           
 12727                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12728  1E10  128D               	bcf	13,5	;volatile
 12729                           
 12730                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12731  1E11  140E               	bsf	14,0	;volatile
 12732                           
 12733                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12734  1E12  120E               	bcf	14,4	;volatile
 12735                           
 12736                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12737  1E13  128E               	bcf	14,5	;volatile
 12738                           
 12739                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12740  1E14  100F               	bcf	15,0	;volatile
 12741                           
 12742                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12743  1E15  108F               	bcf	15,1	;volatile
 12744                           
 12745                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12746  1E16  110F               	bcf	15,2	;volatile
 12747                           
 12748                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12749  1E17  118F               	bcf	15,3	;volatile
 12750                           
 12751                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12752  1E18  120F               	bcf	15,4	;volatile
 12753                           
 12754                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12755  1E19  168F               	bsf	15,5	;volatile
 12756                           
 12757                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12758  1E1A  170F               	bsf	15,6	;volatile
 12759                           
 12760                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12761  1E1B  178F               	bsf	15,7	;volatile
 12762                           
 12763                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12764  1E1C  1410               	bsf	16,0	;volatile
 12765                           
 12766                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12767  1E1D  1490               	bsf	16,1	;volatile
 12768                           
 12769                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12770  1E1E  0023               	movlb	3	; select bank3
 12771  1E1F  1010               	bcf	16,0	;volatile
 12772                           
 12773                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12774  1E20  1090               	bcf	16,1	;volatile
 12775                           
 12776                           ;user.c: 53: PORTEbits.RE0 = 0;
 12777  1E21  0020               	movlb	0	; select bank0
 12778  1E22  1010               	bcf	16,0	;volatile
 12779                           
 12780                           ;user.c: 54: PORTEbits.RE1 = 0;
 12781  1E23  1090               	bcf	16,1	;volatile
 12782                           
 12783                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12784  1E24  0026               	movlb	6	; select bank6
 12785  1E25  100C               	bcf	12,0	;volatile
 12786                           
 12787                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12788  1E26  108C               	bcf	12,1	;volatile
 12789                           
 12790                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12791  1E27  110C               	bcf	12,2	;volatile
 12792                           
 12793                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12794  1E28  118C               	bcf	12,3	;volatile
 12795                           
 12796                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12797  1E29  120C               	bcf	12,4	;volatile
 12798                           
 12799                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12800  1E2A  128C               	bcf	12,5	;volatile
 12801                           
 12802                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12803  1E2B  170C               	bsf	12,6	;volatile
 12804                           
 12805                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12806  1E2C  0028               	movlb	8	; select bank8
 12807  1E2D  130C               	bcf	12,6	;volatile
 12808                           
 12809                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12810  1E2E  0026               	movlb	6	; select bank6
 12811  1E2F  108D               	bcf	13,1	;volatile
 12812                           
 12813                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12814  1E30  110D               	bcf	13,2	;volatile
 12815                           
 12816                           ;user.c: 68: init_adc();
 12817  1E31  319C  245D  319E   	fcall	_init_adc
 12818                           
 12819                           ;user.c: 69: init_pwm();
 12820  1E34  3190  20E4         	fcall	_init_pwm
 12821                           
 12822                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12823  1E36  178B               	bsf	11,7	;volatile
 12824                           
 12825                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12826  1E37  168B               	bsf	11,5	;volatile
 12827                           
 12828                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12829  1E38  110B               	bcf	11,2	;volatile
 12830  1E39  0008               	return
 12831  1E3A                     __end_of_InitApp:	
 12832                           
 12833                           	psect	text43
 12834  10E4                     __ptext43:	
 12835 ;; *************** function _init_pwm *****************
 12836 ;; Defined at:
 12837 ;;		line 129 in file "user.c"
 12838 ;; Parameters:    Size  Location     Type
 12839 ;;		None
 12840 ;; Auto vars:     Size  Location     Type
 12841 ;;		None
 12842 ;; Return value:  Size  Location     Type
 12843 ;;                  1    wreg      void 
 12844 ;; Registers used:
 12845 ;;		wreg, status,2, status,0, pclath, cstack
 12846 ;; Tracked objects:
 12847 ;;		On entry : 0/0
 12848 ;;		On exit  : 0/0
 12849 ;;		Unchanged: 0/0
 12850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12855 ;;Total ram usage:        0 bytes
 12856 ;; Hardware stack levels used:    1
 12857 ;; Hardware stack levels required when called:    4
 12858 ;; This function calls:
 12859 ;;		_init_timer0
 12860 ;;		_init_timer2
 12861 ;; This function is called by:
 12862 ;;		_InitApp
 12863 ;; This function uses a non-reentrant model
 12864 ;;
 12865                           
 12866                           
 12867                           ;psect for function _init_pwm
 12868  10E4                     _init_pwm:	
 12869                           
 12870                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 12871                           
 12872                           ;incstack = 0
 12873                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12874  10E4  0022               	movlb	2	; select bank2
 12875  10E5  101D               	bcf	29,0	;volatile
 12876                           
 12877                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 12878  10E6  0021               	movlb	1	; select bank1
 12879  10E7  110E               	bcf	14,2	;volatile
 12880                           
 12881                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 12882  10E8  108E               	bcf	14,1	;volatile
 12883                           
 12884                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 12885  10E9  0026               	movlb	6	; select bank6
 12886  10EA  100D               	bcf	13,0	;volatile
 12887                           
 12888                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 12889  10EB  118D               	bcf	13,3	;volatile
 12890                           
 12891                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 12892  10EC  120D               	bcf	13,4	;volatile
 12893                           
 12894                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 12895  10ED  0021               	movlb	1	; select bank1
 12896  10EE  1310               	bcf	16,6	;volatile
 12897                           
 12898                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 12899  10EF  1290               	bcf	16,5	;volatile
 12900                           
 12901                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 12902  10F0  1210               	bcf	16,4	;volatile
 12903                           
 12904                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 12905  10F1  1190               	bcf	16,3	;volatile
 12906                           
 12907                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 12908  10F2  1110               	bcf	16,2	;volatile
 12909                           
 12910                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 12911  10F3  300F               	movlw	15
 12912  10F4  0025               	movlb	5	; select bank5
 12913  10F5  0493               	iorwf	19,f	;volatile
 12914                           
 12915                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 12916  10F6  300F               	movlw	15
 12917  10F7  049A               	iorwf	26,f	;volatile
 12918                           
 12919                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 12920  10F8  300F               	movlw	15
 12921  10F9  0026               	movlb	6	; select bank6
 12922  10FA  0493               	iorwf	19,f	;volatile
 12923                           
 12924                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 12925  10FB  300F               	movlw	15
 12926  10FC  049A               	iorwf	26,f	;volatile
 12927                           
 12928                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 12929  10FD  300F               	movlw	15
 12930  10FE  049E               	iorwf	30,f	;volatile
 12931                           
 12932                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 12933  10FF  300F               	movlw	15
 12934  1100  002C               	movlb	12	; select bank12
 12935  1101  0493               	iorwf	19,f	;volatile
 12936                           
 12937                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 12938  1102  300F               	movlw	15
 12939  1103  0496               	iorwf	22,f	;volatile
 12940                           
 12941                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 12942  1104  300F               	movlw	15
 12943  1105  0499               	iorwf	25,f	;volatile
 12944                           
 12945                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 12946  1106  300F               	movlw	15
 12947  1107  049C               	iorwf	28,f	;volatile
 12948                           
 12949                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 12950  1108  300F               	movlw	15
 12951  1109  049F               	iorwf	31,f	;volatile
 12952                           
 12953                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 12954  110A  0025               	movlb	5	; select bank5
 12955  110B  019D               	clrf	29	;volatile
 12956                           
 12957                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 12958  110C  019E               	clrf	30	;volatile
 12959                           
 12960                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 12961  110D  019F               	clrf	31	;volatile
 12962                           
 12963                           ;user.c: 154: CCPR1 = 50;
 12964  110E  3000               	movlw	0
 12965  110F  0092               	movwf	18	;volatile
 12966  1110  3032               	movlw	50
 12967  1111  0091               	movwf	17	;volatile
 12968                           
 12969                           ;user.c: 155: CCPR2 = 100;
 12970  1112  3000               	movlw	0
 12971  1113  0099               	movwf	25	;volatile
 12972  1114  3064               	movlw	100
 12973  1115  0098               	movwf	24	;volatile
 12974                           
 12975                           ;user.c: 156: CCPR3 = 150;
 12976  1116  3000               	movlw	0
 12977  1117  0026               	movlb	6	; select bank6
 12978  1118  0092               	movwf	18	;volatile
 12979  1119  3096               	movlw	150
 12980  111A  0091               	movwf	17	;volatile
 12981                           
 12982                           ;user.c: 157: CCPR4 = 200;
 12983  111B  3000               	movlw	0
 12984  111C  0099               	movwf	25	;volatile
 12985  111D  30C8               	movlw	200
 12986  111E  0098               	movwf	24	;volatile
 12987                           
 12988                           ;user.c: 158: init_timer2();
 12989  111F  319C  244B  3190   	fcall	_init_timer2
 12990                           
 12991                           ;user.c: 159: init_timer0();
 12992  1122  3188  2001         	fcall	_init_timer0
 12993  1124  0008               	return
 12994  1125                     __end_of_init_pwm:	
 12995                           
 12996                           	psect	text44
 12997  1C4B                     __ptext44:	
 12998 ;; *************** function _init_timer2 *****************
 12999 ;; Defined at:
 13000 ;;		line 162 in file "user.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  1    wreg      void 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13018 ;;Total ram usage:        0 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    3
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_init_pwm
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _init_timer2
 13030  1C4B                     _init_timer2:	
 13031                           
 13032                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 13036  1C4B  3087               	movlw	-121
 13037  1C4C  0020               	movlb	0	; select bank0
 13038  1C4D  059C               	andwf	28,f	;volatile
 13039                           
 13040                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 13041  1C4E  30FC               	movlw	-4
 13042  1C4F  059C               	andwf	28,f	;volatile
 13043                           
 13044                           ;user.c: 165: PR2 = 0xFF;
 13045  1C50  30FF               	movlw	255
 13046  1C51  009B               	movwf	27	;volatile
 13047                           
 13048                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 13049  1C52  151C               	bsf	28,2	;volatile
 13050  1C53  0008               	return
 13051  1C54                     __end_of_init_timer2:	
 13052                           
 13053                           	psect	text45
 13054  0801                     __ptext45:	
 13055 ;; *************** function _init_timer0 *****************
 13056 ;; Defined at:
 13057 ;;		line 169 in file "user.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;		None
 13060 ;; Auto vars:     Size  Location     Type
 13061 ;;		None
 13062 ;; Return value:  Size  Location     Type
 13063 ;;                  1    wreg      void 
 13064 ;; Registers used:
 13065 ;;		None
 13066 ;; Tracked objects:
 13067 ;;		On entry : 0/0
 13068 ;;		On exit  : 0/0
 13069 ;;		Unchanged: 0/0
 13070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13071 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13072 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13074 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13075 ;;Total ram usage:        0 bytes
 13076 ;; Hardware stack levels used:    1
 13077 ;; Hardware stack levels required when called:    3
 13078 ;; This function calls:
 13079 ;;		Nothing
 13080 ;; This function is called by:
 13081 ;;		_init_pwm
 13082 ;; This function uses a non-reentrant model
 13083 ;;
 13084                           
 13085                           
 13086                           ;psect for function _init_timer0
 13087  0801                     _init_timer0:	
 13088                           
 13089                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 13090                           
 13091                           ;incstack = 0
 13092                           ; Regs used in _init_timer0: []
 13093  0801  0021               	movlb	1	; select bank1
 13094  0802  1295               	bcf	21,5	;volatile
 13095                           
 13096                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 13097  0803  1195               	bcf	21,3	;volatile
 13098                           
 13099                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 13100  0804  1015               	bcf	21,0	;volatile
 13101                           
 13102                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 13103  0805  1495               	bsf	21,1	;volatile
 13104                           
 13105                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 13106  0806  1115               	bcf	21,2	;volatile
 13107  0807  0008               	return
 13108  0808                     __end_of_init_timer0:	
 13109                           
 13110                           	psect	text46
 13111  1C5D                     __ptext46:	
 13112 ;; *************** function _init_adc *****************
 13113 ;; Defined at:
 13114 ;;		line 115 in file "user.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;		None
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;		None
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  1    wreg      void 
 13121 ;; Registers used:
 13122 ;;		wreg, status,2, status,0
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13131 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13132 ;;Total ram usage:        0 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    3
 13135 ;; This function calls:
 13136 ;;		Nothing
 13137 ;; This function is called by:
 13138 ;;		_InitApp
 13139 ;; This function uses a non-reentrant model
 13140 ;;
 13141                           
 13142                           
 13143                           ;psect for function _init_adc
 13144  1C5D                     _init_adc:	
 13145                           
 13146                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 13147                           
 13148                           ;incstack = 0
 13149                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 13150  1C5D  0021               	movlb	1	; select bank1
 13151  1C5E  179E               	bsf	30,7	;volatile
 13152                           
 13153                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 13154  1C5F  081E               	movf	30,w	;volatile
 13155  1C60  398F               	andlw	-113
 13156  1C61  3860               	iorlw	96
 13157  1C62  009E               	movwf	30	;volatile
 13158                           
 13159                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 13160  1C63  30FC               	movlw	-4
 13161  1C64  059E               	andwf	30,f	;volatile
 13162                           
 13163                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 13164  1C65  141D               	bsf	29,0	;volatile
 13165  1C66  0008               	return
 13166  1C67                     __end_of_init_adc:	
 13167                           
 13168                           	psect	text47
 13169  1C43                     __ptext47:	
 13170 ;; *************** function _ConfigureOscillator *****************
 13171 ;; Defined at:
 13172 ;;		line 18 in file "system.c"
 13173 ;; Parameters:    Size  Location     Type
 13174 ;;		None
 13175 ;; Auto vars:     Size  Location     Type
 13176 ;;		None
 13177 ;; Return value:  Size  Location     Type
 13178 ;;                  1    wreg      void 
 13179 ;; Registers used:
 13180 ;;		wreg, status,2, status,0
 13181 ;; Tracked objects:
 13182 ;;		On entry : 0/0
 13183 ;;		On exit  : 0/0
 13184 ;;		Unchanged: 0/0
 13185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13190 ;;Total ram usage:        0 bytes
 13191 ;; Hardware stack levels used:    1
 13192 ;; Hardware stack levels required when called:    3
 13193 ;; This function calls:
 13194 ;;		Nothing
 13195 ;; This function is called by:
 13196 ;;		_main
 13197 ;; This function uses a non-reentrant model
 13198 ;;
 13199                           
 13200                           
 13201                           ;psect for function _ConfigureOscillator
 13202  1C43                     _ConfigureOscillator:	
 13203                           
 13204                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13205                           
 13206                           ;incstack = 0
 13207                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13208  1C43  30FC               	movlw	-4
 13209  1C44  0021               	movlb	1	; select bank1
 13210  1C45  0599               	andwf	25,f	;volatile
 13211  1C46  0008               	return
 13212  1C47                     __end_of_ConfigureOscillator:	
 13213                           
 13214                           	psect	intentry
 13215  0004                     __pintentry:	
 13216 ;; *************** function _isr *****************
 13217 ;; Defined at:
 13218 ;;		line 25 in file "interrupts.c"
 13219 ;; Parameters:    Size  Location     Type
 13220 ;;		None
 13221 ;; Auto vars:     Size  Location     Type
 13222 ;;  tmpSubDelay     2   35[BANK0 ] int 
 13223 ;; Return value:  Size  Location     Type
 13224 ;;                  1    wreg      void 
 13225 ;; Registers used:
 13226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13227 ;; Tracked objects:
 13228 ;;		On entry : 0/0
 13229 ;;		On exit  : 0/0
 13230 ;;		Unchanged: 0/0
 13231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13234 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13235 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13236 ;;Total ram usage:       11 bytes
 13237 ;; Hardware stack levels used:    1
 13238 ;; Hardware stack levels required when called:    2
 13239 ;; This function calls:
 13240 ;;		___awdiv
 13241 ;;		_modulation
 13242 ;;		i1_set_leds_top
 13243 ;; This function is called by:
 13244 ;;		Interrupt level 1
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248  0004                     _isr:	
 13249                           
 13250                           ;incstack = 0
 13251                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13252  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13253  0005  3180               	pagesel	$
 13254  0006  0020               	movlb	0	; select bank0
 13255  0007  087F               	movf	127,w
 13256  0008  00C2               	movwf	??_isr+8
 13257                           
 13258                           ;interrupts.c: 26: int tmpSubDelay;
 13259                           ;interrupts.c: 28: extern volatile long timer;
 13260                           ;interrupts.c: 29: extern volatile long sub_timer;
 13261                           ;interrupts.c: 30: extern volatile long tap_timer;
 13262                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 13263                           ;interrupts.c: 32: extern int mod_delay_time;
 13264                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 13265                           ;interrupts.c: 36: extern int top_push_state;
 13266                           ;interrupts.c: 37: extern uint8_t feedback_start;
 13267                           ;interrupts.c: 38: extern volatile long mod_timer;
 13268                           ;interrupts.c: 39: extern volatile long delay_time;
 13269  0009  1D0B               	btfss	11,2	;volatile
 13270  000A  291E               	goto	i1l133
 13271                           
 13272                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 13273  000B  085D               	movf	_delay_time+1,w	;volatile
 13274  000C  00C4               	movwf	isr@tmpSubDelay+1
 13275  000D  085C               	movf	_delay_time,w	;volatile
 13276  000E  00C3               	movwf	isr@tmpSubDelay
 13277                           
 13278                           ;interrupts.c: 42: timer = timer + 1;
 13279  000F  3001               	movlw	1
 13280  0010  00BA               	movwf	??_isr
 13281  0011  3000               	movlw	0
 13282  0012  00BB               	movwf	??_isr+1
 13283  0013  3000               	movlw	0
 13284  0014  00BC               	movwf	??_isr+2
 13285  0015  3000               	movlw	0
 13286  0016  00BD               	movwf	??_isr+3
 13287  0017  084D               	movf	_timer,w	;volatile
 13288  0018  07BA               	addwf	??_isr,f
 13289  0019  084E               	movf	_timer+1,w	;volatile
 13290  001A  3DBB               	addwfc	??_isr+1,f
 13291  001B  084F               	movf	_timer+2,w	;volatile
 13292  001C  3DBC               	addwfc	??_isr+2,f
 13293  001D  0850               	movf	_timer+3,w	;volatile
 13294  001E  3DBD               	addwfc	??_isr+3,f
 13295  001F  083D               	movf	??_isr+3,w
 13296  0020  00D0               	movwf	_timer+3	;volatile
 13297  0021  083C               	movf	??_isr+2,w
 13298  0022  00CF               	movwf	_timer+2	;volatile
 13299  0023  083B               	movf	??_isr+1,w
 13300  0024  00CE               	movwf	_timer+1	;volatile
 13301  0025  083A               	movf	??_isr,w
 13302  0026  00CD               	movwf	_timer	;volatile
 13303                           
 13304                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 13305  0027  3001               	movlw	1
 13306  0028  00BA               	movwf	??_isr
 13307  0029  3000               	movlw	0
 13308  002A  00BB               	movwf	??_isr+1
 13309  002B  3000               	movlw	0
 13310  002C  00BC               	movwf	??_isr+2
 13311  002D  3000               	movlw	0
 13312  002E  00BD               	movwf	??_isr+3
 13313  002F  0845               	movf	_sub_timer,w	;volatile
 13314  0030  07BA               	addwf	??_isr,f
 13315  0031  0846               	movf	_sub_timer+1,w	;volatile
 13316  0032  3DBB               	addwfc	??_isr+1,f
 13317  0033  0847               	movf	_sub_timer+2,w	;volatile
 13318  0034  3DBC               	addwfc	??_isr+2,f
 13319  0035  0848               	movf	_sub_timer+3,w	;volatile
 13320  0036  3DBD               	addwfc	??_isr+3,f
 13321  0037  083D               	movf	??_isr+3,w
 13322  0038  00C8               	movwf	_sub_timer+3	;volatile
 13323  0039  083C               	movf	??_isr+2,w
 13324  003A  00C7               	movwf	_sub_timer+2	;volatile
 13325  003B  083B               	movf	??_isr+1,w
 13326  003C  00C6               	movwf	_sub_timer+1	;volatile
 13327  003D  083A               	movf	??_isr,w
 13328  003E  00C5               	movwf	_sub_timer	;volatile
 13329                           
 13330                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 13331  003F  3001               	movlw	1
 13332  0040  00BA               	movwf	??_isr
 13333  0041  3000               	movlw	0
 13334  0042  00BB               	movwf	??_isr+1
 13335  0043  3000               	movlw	0
 13336  0044  00BC               	movwf	??_isr+2
 13337  0045  3000               	movlw	0
 13338  0046  00BD               	movwf	??_isr+3
 13339  0047  0849               	movf	_tap_timer,w	;volatile
 13340  0048  07BA               	addwf	??_isr,f
 13341  0049  084A               	movf	_tap_timer+1,w	;volatile
 13342  004A  3DBB               	addwfc	??_isr+1,f
 13343  004B  084B               	movf	_tap_timer+2,w	;volatile
 13344  004C  3DBC               	addwfc	??_isr+2,f
 13345  004D  084C               	movf	_tap_timer+3,w	;volatile
 13346  004E  3DBD               	addwfc	??_isr+3,f
 13347  004F  083D               	movf	??_isr+3,w
 13348  0050  00CC               	movwf	_tap_timer+3	;volatile
 13349  0051  083C               	movf	??_isr+2,w
 13350  0052  00CB               	movwf	_tap_timer+2	;volatile
 13351  0053  083B               	movf	??_isr+1,w
 13352  0054  00CA               	movwf	_tap_timer+1	;volatile
 13353  0055  083A               	movf	??_isr,w
 13354  0056  00C9               	movwf	_tap_timer	;volatile
 13355                           
 13356                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 13357  0057  3001               	movlw	1
 13358  0058  00BA               	movwf	??_isr
 13359  0059  3000               	movlw	0
 13360  005A  00BB               	movwf	??_isr+1
 13361  005B  3000               	movlw	0
 13362  005C  00BC               	movwf	??_isr+2
 13363  005D  3000               	movlw	0
 13364  005E  00BD               	movwf	??_isr+3
 13365  005F  0023               	movlb	3	; select bank3
 13366  0060  0828               	movf	_mod_timer^(0+384),w	;volatile
 13367  0061  0020               	movlb	0	; select bank0
 13368  0062  07BA               	addwf	??_isr,f
 13369  0063  0023               	movlb	3	; select bank3
 13370  0064  0829               	movf	(_mod_timer+1)^(0+384),w	;volatile
 13371  0065  0020               	movlb	0	; select bank0
 13372  0066  3DBB               	addwfc	??_isr+1,f
 13373  0067  0023               	movlb	3	; select bank3
 13374  0068  082A               	movf	(_mod_timer+2)^(0+384),w	;volatile
 13375  0069  0020               	movlb	0	; select bank0
 13376  006A  3DBC               	addwfc	??_isr+2,f
 13377  006B  0023               	movlb	3	; select bank3
 13378  006C  082B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13379  006D  0020               	movlb	0	; select bank0
 13380  006E  3DBD               	addwfc	??_isr+3,f
 13381  006F  083D               	movf	??_isr+3,w
 13382  0070  0023               	movlb	3	; select bank3
 13383  0071  00AB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13384  0072  0020               	movlb	0	; select bank0
 13385  0073  083C               	movf	??_isr+2,w
 13386  0074  0023               	movlb	3	; select bank3
 13387  0075  00AA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13388  0076  0020               	movlb	0	; select bank0
 13389  0077  083B               	movf	??_isr+1,w
 13390  0078  0023               	movlb	3	; select bank3
 13391  0079  00A9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13392  007A  0020               	movlb	0	; select bank0
 13393  007B  083A               	movf	??_isr,w
 13394  007C  0023               	movlb	3	; select bank3
 13395  007D  00A8               	movwf	_mod_timer^(0+384)	;volatile
 13396                           
 13397                           ;interrupts.c: 46: double_timer++;
 13398  007E  3001               	movlw	1
 13399  007F  07A0               	addwf	_double_timer^(0+384),f	;volatile
 13400  0080  3000               	movlw	0
 13401  0081  3DA1               	addwfc	(_double_timer+1)^(0+384),f	;volatile
 13402  0082  3000               	movlw	0
 13403  0083  3DA2               	addwfc	(_double_timer+2)^(0+384),f	;volatile
 13404  0084  3000               	movlw	0
 13405  0085  3DA3               	addwfc	(_double_timer+3)^(0+384),f	;volatile
 13406                           
 13407                           ;interrupts.c: 47: test_timer++;
 13408  0086  3001               	movlw	1
 13409  0087  07B0               	addwf	_test_timer^(0+384),f	;volatile
 13410  0088  3000               	movlw	0
 13411  0089  3DB1               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13412  008A  3000               	movlw	0
 13413  008B  3DB2               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13414  008C  3000               	movlw	0
 13415  008D  3DB3               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13416                           
 13417                           ;interrupts.c: 48: if (feedback_start == 1) {
 13418  008E  0022               	movlb	2	; select bank2
 13419  008F  0359               	decf	_feedback_start^(0+256),w
 13420  0090  1D03               	btfss	3,2
 13421  0091  28A8               	goto	i1l4953
 13422                           
 13423                           ;interrupts.c: 49: feedback_timer++;
 13424  0092  3001               	movlw	1
 13425  0093  07D3               	addwf	_feedback_timer^(0+256),f	;volatile
 13426  0094  3000               	movlw	0
 13427  0095  3DD4               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13428                           
 13429                           ;interrupts.c: 50: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13430  0096  0854               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13431  0097  0020               	movlb	0	; select bank0
 13432  0098  0263               	subwf	_long_press_limit+1,w
 13433  0099  1D03               	skipz
 13434  009A  289F               	goto	u492_25
 13435  009B  0022               	movlb	2	; select bank2
 13436  009C  0853               	movf	_feedback_timer^(0+256),w	;volatile
 13437  009D  0020               	movlb	0	; select bank0
 13438  009E  0262               	subwf	_long_press_limit,w
 13439  009F                     u492_25:	
 13440  009F  1803               	skipnc
 13441  00A0  28A8               	goto	i1l4953
 13442  00A1  0863               	movf	_long_press_limit+1,w
 13443  00A2  0022               	movlb	2	; select bank2
 13444  00A3  00D4               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13445  00A4  0020               	movlb	0	; select bank0
 13446  00A5  0862               	movf	_long_press_limit,w
 13447  00A6  0022               	movlb	2	; select bank2
 13448  00A7  00D3               	movwf	_feedback_timer^(0+256)	;volatile
 13449  00A8                     i1l4953:	
 13450                           
 13451                           ;interrupts.c: 51: }
 13452                           ;interrupts.c: 52: if (longTap_start == 1) {
 13453  00A8  0022               	movlb	2	; select bank2
 13454  00A9  035A               	decf	_longTap_start^(0+256),w
 13455  00AA  1D03               	btfss	3,2
 13456  00AB  28C2               	goto	i1l4959
 13457                           
 13458                           ;interrupts.c: 53: longTap_timer++;
 13459  00AC  3001               	movlw	1
 13460  00AD  07D5               	addwf	_longTap_timer^(0+256),f	;volatile
 13461  00AE  3000               	movlw	0
 13462  00AF  3DD6               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13463                           
 13464                           ;interrupts.c: 54: if (longTap_timer > long_press_limit) {
 13465  00B0  0856               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13466  00B1  0020               	movlb	0	; select bank0
 13467  00B2  0263               	subwf	_long_press_limit+1,w
 13468  00B3  1D03               	skipz
 13469  00B4  28B9               	goto	u494_25
 13470  00B5  0022               	movlb	2	; select bank2
 13471  00B6  0855               	movf	_longTap_timer^(0+256),w	;volatile
 13472  00B7  0020               	movlb	0	; select bank0
 13473  00B8  0262               	subwf	_long_press_limit,w
 13474  00B9                     u494_25:	
 13475  00B9  1803               	skipnc
 13476  00BA  28C2               	goto	i1l4959
 13477                           
 13478                           ;interrupts.c: 55: longTap_timer = long_press_limit;
 13479  00BB  0863               	movf	_long_press_limit+1,w
 13480  00BC  0022               	movlb	2	; select bank2
 13481  00BD  00D6               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13482  00BE  0020               	movlb	0	; select bank0
 13483  00BF  0862               	movf	_long_press_limit,w
 13484  00C0  0022               	movlb	2	; select bank2
 13485  00C1  00D5               	movwf	_longTap_timer^(0+256)	;volatile
 13486  00C2                     i1l4959:	
 13487                           
 13488                           ;interrupts.c: 56: }
 13489                           ;interrupts.c: 57: }
 13490                           ;interrupts.c: 58: INTCONbits.TMR0IF = 0;
 13491  00C2  110B               	bcf	11,2	;volatile
 13492                           
 13493                           ;interrupts.c: 60: if (adjust_sub_delay == 1) {
 13494  00C3  0023               	movlb	3	; select bank3
 13495  00C4  0334               	decf	_adjust_sub_delay^(0+384),w
 13496  00C5  0435               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 13497  00C6  1D03               	btfss	3,2
 13498  00C7  291E               	goto	i1l133
 13499                           
 13500                           ;interrupts.c: 61: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13501  00C8  0020               	movlb	0	; select bank0
 13502  00C9  0848               	movf	_sub_timer+3,w	;volatile
 13503  00CA  3A80               	xorlw	128
 13504  00CB  00BA               	movwf	??_isr
 13505  00CC  085F               	movf	_delay_time+3,w	;volatile
 13506  00CD  3A80               	xorlw	128
 13507  00CE  023A               	subwf	??_isr,w
 13508  00CF  1D03               	skipz
 13509  00D0  28DB               	goto	u496_23
 13510  00D1  085E               	movf	_delay_time+2,w	;volatile
 13511  00D2  0247               	subwf	_sub_timer+2,w	;volatile
 13512  00D3  1D03               	skipz
 13513  00D4  28DB               	goto	u496_23
 13514  00D5  085D               	movf	_delay_time+1,w	;volatile
 13515  00D6  0246               	subwf	_sub_timer+1,w	;volatile
 13516  00D7  1D03               	skipz
 13517  00D8  28DB               	goto	u496_23
 13518  00D9  085C               	movf	_delay_time,w	;volatile
 13519  00DA  0245               	subwf	_sub_timer,w	;volatile
 13520  00DB                     u496_23:	
 13521  00DB  1C03               	skipc
 13522  00DC  291E               	goto	i1l133
 13523  00DD  0858               	movf	_baseline_delay_time,w	;volatile
 13524  00DE  00BA               	movwf	??_isr
 13525  00DF  0859               	movf	_baseline_delay_time+1,w	;volatile
 13526  00E0  00BB               	movwf	??_isr+1
 13527  00E1  085A               	movf	_baseline_delay_time+2,w	;volatile
 13528  00E2  00BC               	movwf	??_isr+2
 13529  00E3  085B               	movf	_baseline_delay_time+3,w	;volatile
 13530  00E4  00BD               	movwf	??_isr+3
 13531  00E5  094D               	comf	_timer,w	;volatile
 13532  00E6  00BE               	movwf	??_isr+4
 13533  00E7  094E               	comf	_timer+1,w	;volatile
 13534  00E8  00BF               	movwf	??_isr+5
 13535  00E9  094F               	comf	_timer+2,w	;volatile
 13536  00EA  00C0               	movwf	??_isr+6
 13537  00EB  0950               	comf	_timer+3,w	;volatile
 13538  00EC  00C1               	movwf	??_isr+7
 13539  00ED  0ABE               	incf	??_isr+4,f
 13540  00EE  1903               	skipnz
 13541  00EF  0ABF               	incf	??_isr+5,f
 13542  00F0  1903               	skipnz
 13543  00F1  0AC0               	incf	??_isr+6,f
 13544  00F2  1903               	skipnz
 13545  00F3  0AC1               	incf	??_isr+7,f
 13546  00F4  083E               	movf	??_isr+4,w
 13547  00F5  07BA               	addwf	??_isr,f
 13548  00F6  083F               	movf	??_isr+5,w
 13549  00F7  3DBB               	addwfc	??_isr+1,f
 13550  00F8  0840               	movf	??_isr+6,w
 13551  00F9  3DBC               	addwfc	??_isr+2,f
 13552  00FA  0841               	movf	??_isr+7,w
 13553  00FB  3DBD               	addwfc	??_isr+3,f
 13554  00FC  1BBD               	btfsc	??_isr+3,7
 13555  00FD  290B               	goto	i1l4967
 13556  00FE  083D               	movf	??_isr+3,w
 13557  00FF  1D03               	btfss	3,2
 13558  0100  291E               	goto	i1l133
 13559  0101  083C               	movf	??_isr+2,w
 13560  0102  1D03               	btfss	3,2
 13561  0103  291E               	goto	i1l133
 13562  0104  083B               	movf	??_isr+1,w
 13563  0105  1D03               	btfss	3,2
 13564  0106  291E               	goto	i1l133
 13565  0107  3004               	movlw	4
 13566  0108  023A               	subwf	??_isr,w
 13567  0109  1803               	btfsc	3,0
 13568  010A  291E               	goto	i1l133
 13569  010B                     i1l4967:	
 13570                           
 13571                           ;interrupts.c: 62: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13572  010B  094D               	comf	_timer,w	;volatile
 13573  010C  00BA               	movwf	??_isr
 13574  010D  094E               	comf	_timer+1,w	;volatile
 13575  010E  00BB               	movwf	??_isr+1
 13576  010F  0ABA               	incf	??_isr,f
 13577  0110  1903               	skipnz
 13578  0111  0ABB               	incf	??_isr+1,f
 13579  0112  0858               	movf	_baseline_delay_time,w	;volatile
 13580  0113  073A               	addwf	??_isr,w
 13581  0114  00BC               	movwf	??_isr+2
 13582  0115  0859               	movf	_baseline_delay_time+1,w	;volatile
 13583  0116  3D3B               	addwfc	??_isr+1,w
 13584  0117  00BD               	movwf	??_isr+3
 13585  0118  0845               	movf	_sub_timer,w	;volatile
 13586  0119  073C               	addwf	??_isr+2,w
 13587  011A  00C3               	movwf	isr@tmpSubDelay
 13588  011B  0846               	movf	_sub_timer+1,w	;volatile
 13589  011C  3D3D               	addwfc	??_isr+3,w
 13590  011D  00C4               	movwf	isr@tmpSubDelay+1
 13591  011E                     i1l133:	
 13592                           
 13593                           ;interrupts.c: 63: }
 13594                           ;interrupts.c: 64: }
 13595                           ;interrupts.c: 65: }
 13596                           ;interrupts.c: 78: if (longTap_state < 1 && doubleTap_state < 1 && presetSaveMode < 1) {
 13597  011E  0020               	movlb	0	; select bank0
 13598  011F  0866               	movf	_longTap_state,w	;volatile
 13599  0120  1D03               	btfss	3,2
 13600  0121  297E               	goto	i1l4993
 13601  0122  0853               	movf	_doubleTap_state,w	;volatile
 13602  0123  1D03               	btfss	3,2
 13603  0124  297E               	goto	i1l4993
 13604  0125  0855               	movf	_presetSaveMode,w
 13605  0126  1D03               	btfss	3,2
 13606  0127  297E               	goto	i1l4993
 13607                           
 13608                           ;interrupts.c: 81: if (timer >= baseline_delay_time) {
 13609  0128  0850               	movf	_timer+3,w	;volatile
 13610  0129  3A80               	xorlw	128
 13611  012A  00BA               	movwf	??_isr
 13612  012B  085B               	movf	_baseline_delay_time+3,w	;volatile
 13613  012C  3A80               	xorlw	128
 13614  012D  023A               	subwf	??_isr,w
 13615  012E  1D03               	skipz
 13616  012F  293A               	goto	u501_23
 13617  0130  085A               	movf	_baseline_delay_time+2,w	;volatile
 13618  0131  024F               	subwf	_timer+2,w	;volatile
 13619  0132  1D03               	skipz
 13620  0133  293A               	goto	u501_23
 13621  0134  0859               	movf	_baseline_delay_time+1,w	;volatile
 13622  0135  024E               	subwf	_timer+1,w	;volatile
 13623  0136  1D03               	skipz
 13624  0137  293A               	goto	u501_23
 13625  0138  0858               	movf	_baseline_delay_time,w	;volatile
 13626  0139  024D               	subwf	_timer,w	;volatile
 13627  013A                     u501_23:	
 13628  013A  1C03               	skipc
 13629  013B  296C               	goto	i1l4989
 13630                           
 13631                           ;interrupts.c: 84: LATBbits.LATB4 = 1;
 13632  013C  0022               	movlb	2	; select bank2
 13633  013D  160D               	bsf	13,4	;volatile
 13634                           
 13635                           ;interrupts.c: 86: timer = 0;
 13636  013E  3000               	movlw	0
 13637  013F  0020               	movlb	0	; select bank0
 13638  0140  00D0               	movwf	_timer+3	;volatile
 13639  0141  3000               	movlw	0
 13640  0142  00CF               	movwf	_timer+2	;volatile
 13641  0143  3000               	movlw	0
 13642  0144  00CE               	movwf	_timer+1	;volatile
 13643  0145  3000               	movlw	0
 13644  0146  00CD               	movwf	_timer	;volatile
 13645                           
 13646                           ;interrupts.c: 87: if (reset_sub_delay == 1) {
 13647  0147  0023               	movlb	3	; select bank3
 13648  0148  0350               	decf	_reset_sub_delay^(0+384),w
 13649  0149  0451               	iorwf	(_reset_sub_delay+1)^(0+384),w
 13650  014A  1D03               	btfss	3,2
 13651  014B  296C               	goto	i1l4989
 13652                           
 13653                           ;interrupts.c: 89: CCPR1 = delay_counter;
 13654  014C  0022               	movlb	2	; select bank2
 13655  014D  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13656  014E  0025               	movlb	5	; select bank5
 13657  014F  0092               	movwf	18	;volatile
 13658  0150  0022               	movlb	2	; select bank2
 13659  0151  0851               	movf	_delay_counter^(0+256),w	;volatile
 13660  0152  0025               	movlb	5	; select bank5
 13661  0153  0091               	movwf	17	;volatile
 13662                           
 13663                           ;interrupts.c: 92: mod_counter = 0;
 13664  0154  0020               	movlb	0	; select bank0
 13665  0155  01D1               	clrf	_mod_counter
 13666  0156  01D2               	clrf	_mod_counter+1
 13667                           
 13668                           ;interrupts.c: 93: mod_timer = mod_delay_time;
 13669  0157  0023               	movlb	3	; select bank3
 13670  0158  085D               	movf	_mod_delay_time^(0+384),w
 13671  0159  00A8               	movwf	_mod_timer^(0+384)	;volatile
 13672  015A  085E               	movf	(_mod_delay_time+1)^(0+384),w
 13673  015B  00A9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13674  015C  0D89               	rlf	9,f
 13675  015D  3B89               	subwfb	9,f
 13676  015E  0989               	comf	9,f
 13677  015F  00AA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13678  0160  00AB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13679                           
 13680                           ;interrupts.c: 95: reset_sub_delay = 0;
 13681  0161  01D0               	clrf	_reset_sub_delay^(0+384)
 13682  0162  01D1               	clrf	(_reset_sub_delay+1)^(0+384)
 13683                           
 13684                           ;interrupts.c: 96: sub_timer = delay_time;
 13685  0163  0020               	movlb	0	; select bank0
 13686  0164  085F               	movf	_delay_time+3,w	;volatile
 13687  0165  00C8               	movwf	_sub_timer+3	;volatile
 13688  0166  085E               	movf	_delay_time+2,w	;volatile
 13689  0167  00C7               	movwf	_sub_timer+2	;volatile
 13690  0168  085D               	movf	_delay_time+1,w	;volatile
 13691  0169  00C6               	movwf	_sub_timer+1	;volatile
 13692  016A  085C               	movf	_delay_time,w	;volatile
 13693  016B  00C5               	movwf	_sub_timer	;volatile
 13694  016C                     i1l4989:	
 13695                           
 13696                           ;interrupts.c: 97: }
 13697                           ;interrupts.c: 98: }
 13698                           ;interrupts.c: 100: if (timer >= 30) {
 13699  016C  0020               	movlb	0	; select bank0
 13700  016D  1BD0               	btfsc	_timer+3,7	;volatile
 13701  016E  297E               	goto	i1l4993
 13702  016F  0850               	movf	_timer+3,w	;volatile
 13703  0170  1D03               	btfss	3,2
 13704  0171  297C               	goto	i1l4991
 13705  0172  084F               	movf	_timer+2,w	;volatile
 13706  0173  1D03               	btfss	3,2
 13707  0174  297C               	goto	i1l4991
 13708  0175  084E               	movf	_timer+1,w	;volatile
 13709  0176  1D03               	btfss	3,2
 13710  0177  297C               	goto	i1l4991
 13711  0178  301E               	movlw	30
 13712  0179  024D               	subwf	_timer,w	;volatile
 13713  017A  1C03               	btfss	3,0
 13714  017B  297E               	goto	i1l4993
 13715  017C                     i1l4991:	
 13716                           
 13717                           ;interrupts.c: 102: LATBbits.LATB4 = 0;
 13718  017C  0022               	movlb	2	; select bank2
 13719  017D  120D               	bcf	13,4	;volatile
 13720  017E                     i1l4993:	
 13721                           
 13722                           ;interrupts.c: 104: }
 13723                           ;interrupts.c: 105: }
 13724                           ;interrupts.c: 108: if (presetSaveMode == 1) {
 13725  017E  0020               	movlb	0	; select bank0
 13726  017F  0355               	decf	_presetSaveMode,w
 13727  0180  1D03               	btfss	3,2
 13728  0181  29AE               	goto	i1l5005
 13729                           
 13730                           ;interrupts.c: 111: if (double_timer >= 250) {
 13731  0182  0023               	movlb	3	; select bank3
 13732  0183  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 13733  0184  299D               	goto	i1l5001
 13734  0185  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 13735  0186  1D03               	btfss	3,2
 13736  0187  2992               	goto	i1l4997
 13737  0188  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 13738  0189  1D03               	btfss	3,2
 13739  018A  2992               	goto	i1l4997
 13740  018B  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 13741  018C  1D03               	btfss	3,2
 13742  018D  2992               	goto	i1l4997
 13743  018E  30FA               	movlw	250
 13744  018F  0220               	subwf	_double_timer^(0+384),w	;volatile
 13745  0190  1C03               	btfss	3,0
 13746  0191  299D               	goto	i1l5001
 13747  0192                     i1l4997:	
 13748                           
 13749                           ;interrupts.c: 112: LATBbits.LATB0 = 1;
 13750  0192  0022               	movlb	2	; select bank2
 13751  0193  140D               	bsf	13,0	;volatile
 13752                           
 13753                           ;interrupts.c: 113: double_timer = 0;
 13754  0194  3000               	movlw	0
 13755  0195  0023               	movlb	3	; select bank3
 13756  0196  00A3               	movwf	(_double_timer+3)^(0+384)	;volatile
 13757  0197  3000               	movlw	0
 13758  0198  00A2               	movwf	(_double_timer+2)^(0+384)	;volatile
 13759  0199  3000               	movlw	0
 13760  019A  00A1               	movwf	(_double_timer+1)^(0+384)	;volatile
 13761  019B  3000               	movlw	0
 13762  019C  00A0               	movwf	_double_timer^(0+384)	;volatile
 13763  019D                     i1l5001:	
 13764                           
 13765                           ;interrupts.c: 115: }
 13766                           ;interrupts.c: 116: if (double_timer >= 30) {
 13767  019D  1BA3               	btfsc	(_double_timer+3)^(0+384),7	;volatile
 13768  019E  29AE               	goto	i1l5005
 13769  019F  0823               	movf	(_double_timer+3)^(0+384),w	;volatile
 13770  01A0  1D03               	btfss	3,2
 13771  01A1  29AC               	goto	i1l5003
 13772  01A2  0822               	movf	(_double_timer+2)^(0+384),w	;volatile
 13773  01A3  1D03               	btfss	3,2
 13774  01A4  29AC               	goto	i1l5003
 13775  01A5  0821               	movf	(_double_timer+1)^(0+384),w	;volatile
 13776  01A6  1D03               	btfss	3,2
 13777  01A7  29AC               	goto	i1l5003
 13778  01A8  301E               	movlw	30
 13779  01A9  0220               	subwf	_double_timer^(0+384),w	;volatile
 13780  01AA  1C03               	btfss	3,0
 13781  01AB  29AE               	goto	i1l5005
 13782  01AC                     i1l5003:	
 13783                           
 13784                           ;interrupts.c: 118: LATBbits.LATB0 = 0;
 13785  01AC  0022               	movlb	2	; select bank2
 13786  01AD  100D               	bcf	13,0	;volatile
 13787  01AE                     i1l5005:	
 13788                           
 13789                           ;interrupts.c: 119: }
 13790                           ;interrupts.c: 120: }
 13791                           ;interrupts.c: 122: if (presetSaveMode < 1 && mode2_state == 0) {
 13792  01AE  0020               	movlb	0	; select bank0
 13793  01AF  0855               	movf	_presetSaveMode,w
 13794  01B0  1D03               	btfss	3,2
 13795  01B1  2A09               	goto	i1l5025
 13796  01B2  0854               	movf	_mode2_state,w
 13797  01B3  1D03               	btfss	3,2
 13798  01B4  2A09               	goto	i1l5025
 13799                           
 13800                           ;interrupts.c: 125: if (sub_timer >= tmpSubDelay) {
 13801  01B5  0843               	movf	isr@tmpSubDelay,w
 13802  01B6  00BA               	movwf	??_isr
 13803  01B7  0844               	movf	isr@tmpSubDelay+1,w
 13804  01B8  00BB               	movwf	??_isr+1
 13805  01B9  3000               	movlw	0
 13806  01BA  1BBB               	btfsc	??_isr+1,7
 13807  01BB  30FF               	movlw	255
 13808  01BC  00BC               	movwf	??_isr+2
 13809  01BD  00BD               	movwf	??_isr+3
 13810  01BE  0848               	movf	_sub_timer+3,w	;volatile
 13811  01BF  3A80               	xorlw	128
 13812  01C0  00BE               	movwf	??_isr+4
 13813  01C1  083D               	movf	??_isr+3,w
 13814  01C2  3A80               	xorlw	128
 13815  01C3  023E               	subwf	??_isr+4,w
 13816  01C4  1D03               	skipz
 13817  01C5  29D0               	goto	u509_23
 13818  01C6  083C               	movf	??_isr+2,w
 13819  01C7  0247               	subwf	_sub_timer+2,w	;volatile
 13820  01C8  1D03               	skipz
 13821  01C9  29D0               	goto	u509_23
 13822  01CA  083B               	movf	??_isr+1,w
 13823  01CB  0246               	subwf	_sub_timer+1,w	;volatile
 13824  01CC  1D03               	skipz
 13825  01CD  29D0               	goto	u509_23
 13826  01CE  083A               	movf	??_isr,w
 13827  01CF  0245               	subwf	_sub_timer,w	;volatile
 13828  01D0                     u509_23:	
 13829  01D0  1C03               	skipc
 13830  01D1  29ED               	goto	i1l5019
 13831                           
 13832                           ;interrupts.c: 126: if (suspend_blink == 0) {
 13833  01D2  0856               	movf	_suspend_blink,w	;volatile
 13834  01D3  1D03               	btfss	3,2
 13835  01D4  29E0               	goto	i1l5015
 13836                           
 13837                           ;interrupts.c: 127: set_leds_top(top_push_state, 1);
 13838  01D5  0865               	movf	_top_push_state+1,w
 13839  01D6  00F1               	movwf	i1set_leds_top@x+1
 13840  01D7  0864               	movf	_top_push_state,w
 13841  01D8  00F0               	movwf	i1set_leds_top@x
 13842  01D9  3001               	movlw	1
 13843  01DA  00F2               	movwf	i1set_leds_top@ledState
 13844  01DB  3000               	movlw	0
 13845  01DC  00F3               	movwf	i1set_leds_top@ledState+1
 13846  01DD  3191  216C  3180   	fcall	i1_set_leds_top
 13847  01E0                     i1l5015:	
 13848                           
 13849                           ;interrupts.c: 128: }
 13850                           ;interrupts.c: 129: tmpSubDelay = delay_time;
 13851  01E0  0020               	movlb	0	; select bank0
 13852  01E1  085D               	movf	_delay_time+1,w	;volatile
 13853  01E2  00C4               	movwf	isr@tmpSubDelay+1
 13854  01E3  085C               	movf	_delay_time,w	;volatile
 13855  01E4  00C3               	movwf	isr@tmpSubDelay
 13856                           
 13857                           ;interrupts.c: 130: sub_timer = 0;
 13858  01E5  3000               	movlw	0
 13859  01E6  00C8               	movwf	_sub_timer+3	;volatile
 13860  01E7  3000               	movlw	0
 13861  01E8  00C7               	movwf	_sub_timer+2	;volatile
 13862  01E9  3000               	movlw	0
 13863  01EA  00C6               	movwf	_sub_timer+1	;volatile
 13864  01EB  3000               	movlw	0
 13865  01EC  00C5               	movwf	_sub_timer	;volatile
 13866  01ED                     i1l5019:	
 13867                           
 13868                           ;interrupts.c: 131: }
 13869                           ;interrupts.c: 133: if (sub_timer >= 20) {
 13870  01ED  1BC8               	btfsc	_sub_timer+3,7	;volatile
 13871  01EE  2A09               	goto	i1l5025
 13872  01EF  0848               	movf	_sub_timer+3,w	;volatile
 13873  01F0  1D03               	btfss	3,2
 13874  01F1  29FC               	goto	i1l5021
 13875  01F2  0847               	movf	_sub_timer+2,w	;volatile
 13876  01F3  1D03               	btfss	3,2
 13877  01F4  29FC               	goto	i1l5021
 13878  01F5  0846               	movf	_sub_timer+1,w	;volatile
 13879  01F6  1D03               	btfss	3,2
 13880  01F7  29FC               	goto	i1l5021
 13881  01F8  3014               	movlw	20
 13882  01F9  0245               	subwf	_sub_timer,w	;volatile
 13883  01FA  1C03               	btfss	3,0
 13884  01FB  2A09               	goto	i1l5025
 13885  01FC                     i1l5021:	
 13886                           
 13887                           ;interrupts.c: 134: if (suspend_blink == 0) {
 13888  01FC  0856               	movf	_suspend_blink,w	;volatile
 13889  01FD  1D03               	btfss	3,2
 13890  01FE  2A09               	goto	i1l5025
 13891                           
 13892                           ;interrupts.c: 135: set_leds_top(top_push_state, 0);
 13893  01FF  0865               	movf	_top_push_state+1,w
 13894  0200  00F1               	movwf	i1set_leds_top@x+1
 13895  0201  0864               	movf	_top_push_state,w
 13896  0202  00F0               	movwf	i1set_leds_top@x
 13897  0203  3000               	movlw	0
 13898  0204  00F2               	movwf	i1set_leds_top@ledState
 13899  0205  00F3               	movwf	i1set_leds_top@ledState+1
 13900  0206  3191  216C  3180   	fcall	i1_set_leds_top
 13901  0209                     i1l5025:	
 13902                           
 13903                           ;interrupts.c: 136: }
 13904                           ;interrupts.c: 137: }
 13905                           ;interrupts.c: 138: }
 13906                           ;interrupts.c: 152: if (mod_timer >= mod_delay_time) {
 13907  0209  0023               	movlb	3	; select bank3
 13908  020A  085D               	movf	_mod_delay_time^(0+384),w
 13909  020B  0020               	movlb	0	; select bank0
 13910  020C  00BA               	movwf	??_isr
 13911  020D  0023               	movlb	3	; select bank3
 13912  020E  085E               	movf	(_mod_delay_time+1)^(0+384),w
 13913  020F  0020               	movlb	0	; select bank0
 13914  0210  00BB               	movwf	??_isr+1
 13915  0211  3000               	movlw	0
 13916  0212  1BBB               	btfsc	??_isr+1,7
 13917  0213  30FF               	movlw	255
 13918  0214  00BC               	movwf	??_isr+2
 13919  0215  00BD               	movwf	??_isr+3
 13920  0216  0023               	movlb	3	; select bank3
 13921  0217  082B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13922  0218  3A80               	xorlw	128
 13923  0219  0020               	movlb	0	; select bank0
 13924  021A  00BE               	movwf	??_isr+4
 13925  021B  083D               	movf	??_isr+3,w
 13926  021C  3A80               	xorlw	128
 13927  021D  023E               	subwf	??_isr+4,w
 13928  021E  0023               	movlb	3	; select bank3
 13929  021F  1D03               	skipz
 13930  0220  2A31               	goto	u513_23
 13931  0221  0020               	movlb	0	; select bank0
 13932  0222  083C               	movf	??_isr+2,w
 13933  0223  0023               	movlb	3	; select bank3
 13934  0224  022A               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 13935  0225  1D03               	skipz
 13936  0226  2A31               	goto	u513_23
 13937  0227  0020               	movlb	0	; select bank0
 13938  0228  083B               	movf	??_isr+1,w
 13939  0229  0023               	movlb	3	; select bank3
 13940  022A  0229               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 13941  022B  1D03               	skipz
 13942  022C  2A31               	goto	u513_23
 13943  022D  0020               	movlb	0	; select bank0
 13944  022E  083A               	movf	??_isr,w
 13945  022F  0023               	movlb	3	; select bank3
 13946  0230  0228               	subwf	_mod_timer^(0+384),w	;volatile
 13947  0231                     u513_23:	
 13948  0231  1C03               	skipc
 13949  0232  2AE3               	goto	i1l5069
 13950                           
 13951                           ;interrupts.c: 153: mod_timer = 0;
 13952  0233  3000               	movlw	0
 13953  0234  00AB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13954  0235  3000               	movlw	0
 13955  0236  00AA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13956  0237  3000               	movlw	0
 13957  0238  00A9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13958  0239  3000               	movlw	0
 13959  023A  00A8               	movwf	_mod_timer^(0+384)	;volatile
 13960                           
 13961                           ;interrupts.c: 156: if (mod_counter >= 60) {
 13962  023B  0020               	movlb	0	; select bank0
 13963  023C  0852               	movf	_mod_counter+1,w
 13964  023D  3A80               	xorlw	128
 13965  023E  00BA               	movwf	??_isr
 13966  023F  3080               	movlw	128
 13967  0240  023A               	subwf	??_isr,w
 13968  0241  1D03               	skipz
 13969  0242  2A45               	goto	u514_25
 13970  0243  303C               	movlw	60
 13971  0244  0251               	subwf	_mod_counter,w
 13972  0245                     u514_25:	
 13973  0245  1C03               	skipc
 13974  0246  2A89               	goto	i1l5061
 13975                           
 13976                           ;interrupts.c: 157: mod_counter = 0;
 13977  0247  0020               	movlb	0	; select bank0
 13978  0248  01D1               	clrf	_mod_counter
 13979  0249  01D2               	clrf	_mod_counter+1
 13980                           
 13981                           ;interrupts.c: 158: }
 13982                           ;interrupts.c: 170: switch (bottom_push_state) {
 13983  024A  2A89               	goto	i1l5061
 13984  024B                     i1l5031:	
 13985                           ;interrupts.c: 171: case 1:
 13986                           
 13987                           
 13988                           ;interrupts.c: 172: mod_value = (int)mod1[mod_counter];
 13989  024B  0851               	movf	_mod_counter,w
 13990  024C  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13991  024D  2A50               	goto	L14
 13992  024E                     i1l5035:	
 13993                           ;interrupts.c: 175: case 2:
 13994                           
 13995                           ;interrupts.c: 174: break;
 13996                           
 13997                           ;interrupts.c: 173: PORTCbits.RC4 = 0;
 13998                           
 13999                           
 14000                           ;interrupts.c: 176: mod_value = (int)mod2[mod_counter];
 14001  024E  0851               	movf	_mod_counter,w
 14002  024F  3EA0               	addlw	(low (_mod2| (0+768)))& (0+255)
 14003  0250                     L14:	
 14004  0250  0086               	movwf	6
 14005  0251  3003               	movlw	3	; select bank7/8
 14006  0252  2A57               	goto	L15
 14007  0253                     i1l5039:	
 14008                           ;interrupts.c: 179: case 3:
 14009                           
 14010                           ;interrupts.c: 178: break;
 14011                           
 14012                           ;interrupts.c: 177: PORTCbits.RC4 = 0;
 14013                           
 14014                           
 14015                           ;interrupts.c: 180: mod_value = (int)mod3[mod_counter];
 14016  0253  0851               	movf	_mod_counter,w
 14017  0254  3E20               	addlw	(low (_mod3| (0+1024)))& (0+255)
 14018  0255  0086               	movwf	6
 14019  0256  3004               	movlw	4	; select bank8/9
 14020  0257                     L15:	
 14021  0257  0087               	movwf	7
 14022  0258  0801               	movf	1,w
 14023  0259  0023               	movlb	3	; select bank3
 14024  025A  00CE               	movwf	_mod_value^(0+384)
 14025  025B  01CF               	clrf	(_mod_value+1)^(0+384)
 14026  025C  1BCE               	btfsc	_mod_value^(0+384),7
 14027  025D  03CF               	decf	(_mod_value+1)^(0+384),f
 14028  025E  2A86               	goto	i1l5057
 14029  025F                     i1l5043:	
 14030                           ;interrupts.c: 183: case 4:
 14031                           
 14032                           ;interrupts.c: 182: break;
 14033                           
 14034                           ;interrupts.c: 181: PORTCbits.RC4 = 0;
 14035                           
 14036                           
 14037                           ;interrupts.c: 184: if (mod_counter <31) {
 14038  025F  0852               	movf	_mod_counter+1,w
 14039  0260  3A80               	xorlw	128
 14040  0261  00BA               	movwf	??_isr
 14041  0262  3080               	movlw	128
 14042  0263  023A               	subwf	??_isr,w
 14043  0264  1D03               	skipz
 14044  0265  2A68               	goto	u515_25
 14045  0266  301F               	movlw	31
 14046  0267  0251               	subwf	_mod_counter,w
 14047  0268                     u515_25:	
 14048  0268  1803               	skipnc
 14049  0269  2A6F               	goto	i1l5047
 14050                           
 14051                           ;interrupts.c: 185: mod_value = 100;
 14052  026A  3064               	movlw	100
 14053  026B  0023               	movlb	3	; select bank3
 14054  026C  00CE               	movwf	_mod_value^(0+384)
 14055  026D  3000               	movlw	0
 14056  026E  2A73               	goto	L13
 14057  026F                     i1l5047:	
 14058                           ;interrupts.c: 186: } else {
 14059                           
 14060                           
 14061                           ;interrupts.c: 187: mod_value = -100;
 14062  026F  309C               	movlw	156
 14063  0270  0023               	movlb	3	; select bank3
 14064  0271  00CE               	movwf	_mod_value^(0+384)
 14065  0272  30FF               	movlw	255
 14066  0273                     L13:	
 14067  0273  00CF               	movwf	(_mod_value^(0+384)+1)
 14068  0274  2A86               	goto	i1l5057
 14069  0275                     i1l5051:	
 14070                           ;interrupts.c: 191: case 5:
 14071                           
 14072                           ;interrupts.c: 190: break;
 14073                           
 14074                           ;interrupts.c: 188: }
 14075                           ;interrupts.c: 189: PORTCbits.RC4 = 0;
 14076                           
 14077                           
 14078                           ;interrupts.c: 192: mod_value = (int)mod1[mod_counter];
 14079  0275  0851               	movf	_mod_counter,w
 14080  0276  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 14081  0277  0086               	movwf	6
 14082  0278  3003               	movlw	3	; select bank6/7
 14083  0279  0087               	movwf	7
 14084  027A  0801               	movf	1,w
 14085  027B  0023               	movlb	3	; select bank3
 14086  027C  00CE               	movwf	_mod_value^(0+384)
 14087  027D  01CF               	clrf	(_mod_value+1)^(0+384)
 14088  027E  1BCE               	btfsc	_mod_value^(0+384),7
 14089  027F  03CF               	decf	(_mod_value+1)^(0+384),f
 14090                           
 14091                           ;interrupts.c: 194: PORTCbits.RC4 = 1;
 14092  0280  0020               	movlb	0	; select bank0
 14093  0281  160E               	bsf	14,4	;volatile
 14094                           
 14095                           ;interrupts.c: 196: break;
 14096  0282  2AA0               	goto	i1l5063
 14097  0283                     i1l5055:	
 14098                           ;interrupts.c: 197: default:
 14099                           
 14100                           
 14101                           ;interrupts.c: 198: mod_value = 0;
 14102  0283  0023               	movlb	3	; select bank3
 14103  0284  01CE               	clrf	_mod_value^(0+384)
 14104  0285  01CF               	clrf	(_mod_value+1)^(0+384)
 14105  0286                     i1l5057:	
 14106                           
 14107                           ;interrupts.c: 199: PORTCbits.RC4 = 0;
 14108  0286  0020               	movlb	0	; select bank0
 14109  0287  120E               	bcf	14,4	;volatile
 14110                           
 14111                           ;interrupts.c: 201: }
 14112                           
 14113                           ;interrupts.c: 200: break;
 14114  0288  2AA0               	goto	i1l5063
 14115  0289                     i1l5061:	
 14116                           
 14117                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14118                           ; Switch size 1, requested type "space"
 14119                           ; Number of cases is 1, Range of values is 0 to 0
 14120                           ; switch strategies available:
 14121                           ; Name         Instructions Cycles
 14122                           ; simple_byte            4     3 (average)
 14123                           ; direct_byte            8     6 (fixed)
 14124                           ; jumptable            260     6 (fixed)
 14125                           ;	Chosen strategy is simple_byte
 14126  0289  0020               	movlb	0	; select bank0
 14127  028A  0861               	movf	_bottom_push_state+1,w
 14128  028B  3A00               	xorlw	0	; case 0
 14129  028C  1903               	skipnz
 14130  028D  2A8F               	goto	i1l6979
 14131  028E  2A83               	goto	i1l5055
 14132  028F                     i1l6979:	
 14133                           
 14134                           ; Switch size 1, requested type "space"
 14135                           ; Number of cases is 5, Range of values is 1 to 5
 14136                           ; switch strategies available:
 14137                           ; Name         Instructions Cycles
 14138                           ; simple_byte           16     9 (average)
 14139                           ; direct_byte           19     9 (fixed)
 14140                           ; jumptable            263     9 (fixed)
 14141                           ;	Chosen strategy is simple_byte
 14142  028F  0860               	movf	_bottom_push_state,w
 14143  0290  3A01               	xorlw	1	; case 1
 14144  0291  1903               	skipnz
 14145  0292  2A4B               	goto	i1l5031
 14146  0293  3A03               	xorlw	3	; case 2
 14147  0294  1903               	skipnz
 14148  0295  2A4E               	goto	i1l5035
 14149  0296  3A01               	xorlw	1	; case 3
 14150  0297  1903               	skipnz
 14151  0298  2A53               	goto	i1l5039
 14152  0299  3A07               	xorlw	7	; case 4
 14153  029A  1903               	skipnz
 14154  029B  2A5F               	goto	i1l5043
 14155  029C  3A01               	xorlw	1	; case 5
 14156  029D  1903               	skipnz
 14157  029E  2A75               	goto	i1l5051
 14158  029F  2A83               	goto	i1l5055
 14159  02A0                     i1l5063:	
 14160                           
 14161                           ;interrupts.c: 218: mod_value = modulation(mod_value, adjusted_pot_value);
 14162  02A0  0023               	movlb	3	; select bank3
 14163  02A1  084E               	movf	_mod_value^(0+384),w
 14164  02A2  0020               	movlb	0	; select bank0
 14165  02A3  00AE               	movwf	modulation@x
 14166  02A4  0023               	movlb	3	; select bank3
 14167  02A5  084F               	movf	(_mod_value+1)^(0+384),w
 14168  02A6  0020               	movlb	0	; select bank0
 14169  02A7  00AF               	movwf	modulation@x+1
 14170  02A8  0D89               	rlf	9,f
 14171  02A9  3B89               	subwfb	9,f
 14172  02AA  0989               	comf	9,f
 14173  02AB  00B0               	movwf	modulation@x+2
 14174  02AC  00B1               	movwf	modulation@x+3
 14175  02AD  0023               	movlb	3	; select bank3
 14176  02AE  0836               	movf	_adjusted_pot_value^(0+384),w
 14177  02AF  0020               	movlb	0	; select bank0
 14178  02B0  00B2               	movwf	modulation@y
 14179  02B1  0023               	movlb	3	; select bank3
 14180  02B2  0837               	movf	(_adjusted_pot_value+1)^(0+384),w
 14181  02B3  0020               	movlb	0	; select bank0
 14182  02B4  00B3               	movwf	modulation@y+1
 14183  02B5  0D89               	rlf	9,f
 14184  02B6  3B89               	subwfb	9,f
 14185  02B7  0989               	comf	9,f
 14186  02B8  00B4               	movwf	modulation@y+2
 14187  02B9  00B5               	movwf	modulation@y+3
 14188  02BA  3190  20A3  3180   	fcall	_modulation
 14189  02BD  0020               	movlb	0	; select bank0
 14190  02BE  082F               	movf	?_modulation+1,w
 14191  02BF  0023               	movlb	3	; select bank3
 14192  02C0  00CF               	movwf	(_mod_value+1)^(0+384)
 14193  02C1  0020               	movlb	0	; select bank0
 14194  02C2  082E               	movf	?_modulation,w
 14195  02C3  0023               	movlb	3	; select bank3
 14196  02C4  00CE               	movwf	_mod_value^(0+384)
 14197                           
 14198                           ;interrupts.c: 219: CCPR9 = mod_value / 2;
 14199  02C5  3002               	movlw	2
 14200  02C6  00F0               	movwf	___awdiv@divisor
 14201  02C7  3000               	movlw	0
 14202  02C8  00F1               	movwf	___awdiv@divisor+1
 14203  02C9  084F               	movf	(_mod_value+1)^(0+384),w
 14204  02CA  00F3               	movwf	___awdiv@dividend+1
 14205  02CB  084E               	movf	_mod_value^(0+384),w
 14206  02CC  00F2               	movwf	___awdiv@dividend
 14207  02CD  3192  22E9  3180   	fcall	___awdiv
 14208  02D0  0871               	movf	?___awdiv+1,w
 14209  02D1  002C               	movlb	12	; select bank12
 14210  02D2  009B               	movwf	27	;volatile
 14211  02D3  0870               	movf	?___awdiv,w
 14212  02D4  009A               	movwf	26	;volatile
 14213                           
 14214                           ;interrupts.c: 220: mod_timer = 0;
 14215  02D5  3000               	movlw	0
 14216  02D6  0023               	movlb	3	; select bank3
 14217  02D7  00AB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 14218  02D8  3000               	movlw	0
 14219  02D9  00AA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 14220  02DA  3000               	movlw	0
 14221  02DB  00A9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 14222  02DC  3000               	movlw	0
 14223  02DD  00A8               	movwf	_mod_timer^(0+384)	;volatile
 14224                           
 14225                           ;interrupts.c: 221: mod_counter++;
 14226  02DE  3001               	movlw	1
 14227  02DF  0020               	movlb	0	; select bank0
 14228  02E0  07D1               	addwf	_mod_counter,f
 14229  02E1  3000               	movlw	0
 14230  02E2  3DD2               	addwfc	_mod_counter+1,f
 14231  02E3                     i1l5069:	
 14232                           
 14233                           ;interrupts.c: 235: }
 14234                           ;interrupts.c: 260: if (preset_programmning_on == 1) {
 14235  02E3  0022               	movlb	2	; select bank2
 14236  02E4  035C               	decf	_preset_programmning_on^(0+256),w
 14237  02E5  1D03               	btfss	3,2
 14238  02E6  2B16               	goto	i1l5081
 14239                           
 14240                           ;interrupts.c: 261: preset_blink++;
 14241  02E7  3001               	movlw	1
 14242  02E8  0020               	movlb	0	; select bank0
 14243  02E9  00BA               	movwf	??_isr
 14244  02EA  083A               	movf	??_isr,w
 14245  02EB  0022               	movlb	2	; select bank2
 14246  02EC  07DB               	addwf	_preset_blink^(0+256),f
 14247                           
 14248                           ;interrupts.c: 263: if (preset_blink >= blink_delay) {
 14249  02ED  0023               	movlb	3	; select bank3
 14250  02EE  085A               	movf	(_blink_delay+1)^(0+384),w
 14251  02EF  3A80               	xorlw	128
 14252  02F0  3C80               	sublw	128
 14253  02F1  1D03               	skipz
 14254  02F2  2AF6               	goto	u517_25
 14255  02F3  0859               	movf	_blink_delay^(0+384),w
 14256  02F4  0022               	movlb	2	; select bank2
 14257  02F5  025B               	subwf	_preset_blink^(0+256),w
 14258  02F6                     u517_25:	
 14259  02F6  1C03               	skipc
 14260  02F7  2B14               	goto	i1l165
 14261                           
 14262                           ;interrupts.c: 264: LATBbits.LATB1 = 1;
 14263  02F8  0022               	movlb	2	; select bank2
 14264  02F9  148D               	bsf	13,1	;volatile
 14265                           
 14266                           ;interrupts.c: 265: if (preset_blink > blink_delay*2) {
 14267  02FA  0023               	movlb	3	; select bank3
 14268  02FB  085A               	movf	(_blink_delay+1)^(0+384),w
 14269  02FC  0020               	movlb	0	; select bank0
 14270  02FD  00BB               	movwf	??_isr+1
 14271  02FE  0023               	movlb	3	; select bank3
 14272  02FF  0859               	movf	_blink_delay^(0+384),w
 14273  0300  0020               	movlb	0	; select bank0
 14274  0301  00BA               	movwf	??_isr
 14275  0302  35BA               	lslf	??_isr,f
 14276  0303  0DBB               	rlf	??_isr+1,f
 14277  0304  083B               	movf	??_isr+1,w
 14278  0305  3A80               	xorlw	128
 14279  0306  00BC               	movwf	??_isr+2
 14280  0307  3080               	movlw	128
 14281  0308  023C               	subwf	??_isr+2,w
 14282  0309  1D03               	skipz
 14283  030A  2B0F               	goto	u518_25
 14284  030B  0022               	movlb	2	; select bank2
 14285  030C  085B               	movf	_preset_blink^(0+256),w
 14286  030D  0020               	movlb	0	; select bank0
 14287  030E  023A               	subwf	??_isr,w
 14288  030F                     u518_25:	
 14289  030F  1803               	skipnc
 14290  0310  2B1B               	goto	i1l170
 14291                           
 14292                           ;interrupts.c: 266: preset_blink = 0;
 14293  0311  0022               	movlb	2	; select bank2
 14294  0312  01DB               	clrf	_preset_blink^(0+256)
 14295                           
 14296                           ;interrupts.c: 267: }
 14297                           ;interrupts.c: 269: } else {
 14298  0313  2B1B               	goto	i1l170
 14299  0314                     i1l165:	
 14300                           
 14301                           ;interrupts.c: 270: LATBbits.LATB1 = 0;
 14302  0314  0022               	movlb	2	; select bank2
 14303  0315  2B1A               	goto	i1l5085
 14304  0316                     i1l5081:	
 14305                           ;interrupts.c: 271: }
 14306                           ;interrupts.c: 273: } else {
 14307                           
 14308                           
 14309                           ;interrupts.c: 274: if (preset_blink > 0) {
 14310  0316  085B               	movf	_preset_blink^(0+256),w
 14311  0317  1903               	btfsc	3,2
 14312  0318  2B1B               	goto	i1l170
 14313                           
 14314                           ;interrupts.c: 275: preset_blink = 0;
 14315  0319  01DB               	clrf	_preset_blink^(0+256)
 14316  031A                     i1l5085:	
 14317                           
 14318                           ;interrupts.c: 276: LATBbits.LATB1 = 0;
 14319  031A  108D               	bcf	13,1	;volatile
 14320  031B                     i1l170:	
 14321  031B  0020               	movlb	0	; select bank0
 14322  031C  0842               	movf	??_isr+8,w
 14323  031D  00FF               	movwf	127
 14324  031E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14325  031F  0009               	retfie
 14326  0320                     __end_of_isr:	
 14327                           
 14328                           	psect	text49
 14329  116C                     __ptext49:	
 14330 ;; *************** function i1_set_leds_top *****************
 14331 ;; Defined at:
 14332 ;;		line 16 in file "LEDs.c"
 14333 ;; Parameters:    Size  Location     Type
 14334 ;;  x               2    0[COMMON] int 
 14335 ;;  ledState        2    2[COMMON] int 
 14336 ;; Auto vars:     Size  Location     Type
 14337 ;;		None
 14338 ;; Return value:  Size  Location     Type
 14339 ;;                  1    wreg      void 
 14340 ;; Registers used:
 14341 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14342 ;; Tracked objects:
 14343 ;;		On entry : 0/0
 14344 ;;		On exit  : 0/0
 14345 ;;		Unchanged: 0/0
 14346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14347 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14350 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14351 ;;Total ram usage:        4 bytes
 14352 ;; Hardware stack levels used:    1
 14353 ;; This function calls:
 14354 ;;		Nothing
 14355 ;; This function is called by:
 14356 ;;		_isr
 14357 ;; This function uses a non-reentrant model
 14358 ;;
 14359                           
 14360                           
 14361                           ;psect for function i1_set_leds_top
 14362  116C                     i1_set_leds_top:	
 14363                           
 14364                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 14365                           
 14366                           ;incstack = 0
 14367                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 14368  116C  0027               	movlb	7	; select bank7
 14369  116D  100C               	bcf	12,0	;volatile
 14370                           
 14371                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 14372  116E  108C               	bcf	12,1	;volatile
 14373                           
 14374                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 14375  116F  110C               	bcf	12,2	;volatile
 14376                           
 14377                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 14378  1170  118C               	bcf	12,3	;volatile
 14379                           
 14380                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 14381  1171  120C               	bcf	12,4	;volatile
 14382                           
 14383                           ;LEDs.c: 22: switch (x) {
 14384  1172  2997               	goto	i1l4937
 14385  1173                     i1l4925:	
 14386                           ;LEDs.c: 23: case 1:
 14387                           
 14388                           
 14389                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 14390  1173  0C72               	rrf	i1set_leds_top@ledState,w
 14391  1174  1C03               	skipc
 14392  1175  100C               	bcf	12,0	;volatile
 14393  1176  1803               	skipnc
 14394  1177  140C               	bsf	12,0	;volatile
 14395                           
 14396                           ;LEDs.c: 25: break;
 14397  1178  0008               	return
 14398  1179                     i1l4927:	
 14399                           ;LEDs.c: 26: case 2:
 14400                           
 14401                           
 14402                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 14403  1179  0C72               	rrf	i1set_leds_top@ledState,w
 14404  117A  1C03               	skipc
 14405  117B  108C               	bcf	12,1	;volatile
 14406  117C  1803               	skipnc
 14407  117D  148C               	bsf	12,1	;volatile
 14408                           
 14409                           ;LEDs.c: 28: break;
 14410  117E  0008               	return
 14411  117F                     i1l4929:	
 14412                           ;LEDs.c: 29: case 3:
 14413                           
 14414                           
 14415                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 14416  117F  0C72               	rrf	i1set_leds_top@ledState,w
 14417  1180  1C03               	skipc
 14418  1181  110C               	bcf	12,2	;volatile
 14419  1182  1803               	skipnc
 14420  1183  150C               	bsf	12,2	;volatile
 14421                           
 14422                           ;LEDs.c: 31: break;
 14423  1184  0008               	return
 14424  1185                     i1l4931:	
 14425                           ;LEDs.c: 32: case 4:
 14426                           
 14427                           
 14428                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 14429  1185  0C72               	rrf	i1set_leds_top@ledState,w
 14430  1186  1C03               	skipc
 14431  1187  118C               	bcf	12,3	;volatile
 14432  1188  1803               	skipnc
 14433  1189  158C               	bsf	12,3	;volatile
 14434                           
 14435                           ;LEDs.c: 34: break;
 14436  118A  0008               	return
 14437  118B                     i1l4933:	
 14438                           ;LEDs.c: 35: case 5:
 14439                           
 14440                           
 14441                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14442  118B  0C72               	rrf	i1set_leds_top@ledState,w
 14443  118C  1C03               	skipc
 14444  118D  120C               	bcf	12,4	;volatile
 14445  118E  1803               	skipnc
 14446  118F  160C               	bsf	12,4	;volatile
 14447                           
 14448                           ;LEDs.c: 39: break;
 14449                           
 14450                           ;LEDs.c: 38: case 6:
 14451                           
 14452                           ;LEDs.c: 37: break;
 14453  1190  0008               	return
 14454  1191                     i1l766:	
 14455                           ;LEDs.c: 40: case 100:
 14456                           
 14457                           
 14458                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14459  1191  140C               	bsf	12,0	;volatile
 14460                           
 14461                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14462  1192  148C               	bsf	12,1	;volatile
 14463                           
 14464                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14465  1193  150C               	bsf	12,2	;volatile
 14466                           
 14467                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14468  1194  158C               	bsf	12,3	;volatile
 14469                           
 14470                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14471  1195  160C               	bsf	12,4	;volatile
 14472                           
 14473                           ;LEDs.c: 47: }
 14474                           
 14475                           ;LEDs.c: 46: break;
 14476  1196  0008               	return
 14477  1197                     i1l4937:	
 14478                           
 14479                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14480                           ; Switch size 1, requested type "space"
 14481                           ; Number of cases is 1, Range of values is 0 to 0
 14482                           ; switch strategies available:
 14483                           ; Name         Instructions Cycles
 14484                           ; simple_byte            4     3 (average)
 14485                           ; direct_byte            8     6 (fixed)
 14486                           ; jumptable            260     6 (fixed)
 14487                           ;	Chosen strategy is simple_byte
 14488  1197  0871               	movf	i1set_leds_top@x+1,w
 14489  1198  3A00               	xorlw	0	; case 0
 14490  1199  1903               	skipnz
 14491  119A  299C               	goto	i1l6981
 14492  119B  29B3               	goto	i1l767
 14493  119C                     i1l6981:	
 14494                           
 14495                           ; Switch size 1, requested type "space"
 14496                           ; Number of cases is 7, Range of values is 1 to 100
 14497                           ; switch strategies available:
 14498                           ; Name         Instructions Cycles
 14499                           ; simple_byte           22    12 (average)
 14500                           ; direct_byte          209     9 (fixed)
 14501                           ; jumptable            263     9 (fixed)
 14502                           ;	Chosen strategy is simple_byte
 14503  119C  0870               	movf	i1set_leds_top@x,w
 14504  119D  3A01               	xorlw	1	; case 1
 14505  119E  1903               	skipnz
 14506  119F  2973               	goto	i1l4925
 14507  11A0  3A03               	xorlw	3	; case 2
 14508  11A1  1903               	skipnz
 14509  11A2  2979               	goto	i1l4927
 14510  11A3  3A01               	xorlw	1	; case 3
 14511  11A4  1903               	skipnz
 14512  11A5  297F               	goto	i1l4929
 14513  11A6  3A07               	xorlw	7	; case 4
 14514  11A7  1903               	skipnz
 14515  11A8  2985               	goto	i1l4931
 14516  11A9  3A01               	xorlw	1	; case 5
 14517  11AA  1903               	skipnz
 14518  11AB  298B               	goto	i1l4933
 14519  11AC  3A03               	xorlw	3	; case 6
 14520  11AD  1903               	skipnz
 14521  11AE  29B3               	goto	i1l767
 14522  11AF  3A62               	xorlw	98	; case 100
 14523  11B0  1903               	skipnz
 14524  11B1  2991               	goto	i1l766
 14525  11B2  29B3               	goto	i1l767
 14526  11B3                     i1l767:	
 14527  11B3  0008               	return
 14528  11B4                     __end_ofi1_set_leds_top:	
 14529                           
 14530                           	psect	text50
 14531  10A3                     __ptext50:	
 14532 ;; *************** function _modulation *****************
 14533 ;; Defined at:
 14534 ;;		line 187 in file "user.c"
 14535 ;; Parameters:    Size  Location     Type
 14536 ;;  x               4   14[BANK0 ] long 
 14537 ;;  y               4   18[BANK0 ] long 
 14538 ;; Auto vars:     Size  Location     Type
 14539 ;;		None
 14540 ;; Return value:  Size  Location     Type
 14541 ;;                  4   14[BANK0 ] long 
 14542 ;; Registers used:
 14543 ;;		wreg, status,2, status,0, pclath, cstack
 14544 ;; Tracked objects:
 14545 ;;		On entry : 0/0
 14546 ;;		On exit  : 0/0
 14547 ;;		Unchanged: 0/0
 14548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14549 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14551 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14552 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14553 ;;Total ram usage:       12 bytes
 14554 ;; Hardware stack levels used:    1
 14555 ;; Hardware stack levels required when called:    1
 14556 ;; This function calls:
 14557 ;;		i1___aldiv
 14558 ;;		i1___lmul
 14559 ;; This function is called by:
 14560 ;;		_isr
 14561 ;; This function uses a non-reentrant model
 14562 ;;
 14563                           
 14564                           
 14565                           ;psect for function _modulation
 14566  10A3                     _modulation:	
 14567                           
 14568                           ;user.c: 190: return (127500 + (y * x)) / 1000;
 14569                           
 14570                           ;incstack = 0
 14571                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 14572  10A3  3000               	movlw	0
 14573  10A4  0020               	movlb	0	; select bank0
 14574  10A5  00A3               	movwf	i1___aldiv@divisor+3
 14575  10A6  3000               	movlw	0
 14576  10A7  00A2               	movwf	i1___aldiv@divisor+2
 14577  10A8  3003               	movlw	3
 14578  10A9  00A1               	movwf	i1___aldiv@divisor+1
 14579  10AA  30E8               	movlw	232
 14580  10AB  00A0               	movwf	i1___aldiv@divisor
 14581  10AC  300C               	movlw	12
 14582  10AD  00B6               	movwf	??_modulation
 14583  10AE  30F2               	movlw	242
 14584  10AF  00B7               	movwf	??_modulation+1
 14585  10B0  3001               	movlw	1
 14586  10B1  00B8               	movwf	??_modulation+2
 14587  10B2  3000               	movlw	0
 14588  10B3  00B9               	movwf	??_modulation+3
 14589  10B4  0835               	movf	modulation@y+3,w
 14590  10B5  00F3               	movwf	i1___lmul@multiplier+3
 14591  10B6  0834               	movf	modulation@y+2,w
 14592  10B7  00F2               	movwf	i1___lmul@multiplier+2
 14593  10B8  0833               	movf	modulation@y+1,w
 14594  10B9  00F1               	movwf	i1___lmul@multiplier+1
 14595  10BA  0832               	movf	modulation@y,w
 14596  10BB  00F0               	movwf	i1___lmul@multiplier
 14597  10BC  0831               	movf	modulation@x+3,w
 14598  10BD  00F7               	movwf	i1___lmul@multiplicand+3
 14599  10BE  0830               	movf	modulation@x+2,w
 14600  10BF  00F6               	movwf	i1___lmul@multiplicand+2
 14601  10C0  082F               	movf	modulation@x+1,w
 14602  10C1  00F5               	movwf	i1___lmul@multiplicand+1
 14603  10C2  082E               	movf	modulation@x,w
 14604  10C3  00F4               	movwf	i1___lmul@multiplicand
 14605  10C4  319D  25DB  3190   	fcall	i1___lmul
 14606  10C7  0870               	movf	?i1___lmul,w
 14607  10C8  0020               	movlb	0	; select bank0
 14608  10C9  07B6               	addwf	??_modulation,f
 14609  10CA  0871               	movf	?i1___lmul+1,w
 14610  10CB  3DB7               	addwfc	??_modulation+1,f
 14611  10CC  0872               	movf	?i1___lmul+2,w
 14612  10CD  3DB8               	addwfc	??_modulation+2,f
 14613  10CE  0873               	movf	?i1___lmul+3,w
 14614  10CF  3DB9               	addwfc	??_modulation+3,f
 14615  10D0  0839               	movf	??_modulation+3,w
 14616  10D1  00A7               	movwf	i1___aldiv@dividend+3
 14617  10D2  0838               	movf	??_modulation+2,w
 14618  10D3  00A6               	movwf	i1___aldiv@dividend+2
 14619  10D4  0837               	movf	??_modulation+1,w
 14620  10D5  00A5               	movwf	i1___aldiv@dividend+1
 14621  10D6  0836               	movf	??_modulation,w
 14622  10D7  00A4               	movwf	i1___aldiv@dividend
 14623  10D8  3195  2514         	fcall	i1___aldiv
 14624  10DA  0020               	movlb	0	; select bank0
 14625  10DB  0823               	movf	?i1___aldiv+3,w
 14626  10DC  00B1               	movwf	?_modulation+3
 14627  10DD  0822               	movf	?i1___aldiv+2,w
 14628  10DE  00B0               	movwf	?_modulation+2
 14629  10DF  0821               	movf	?i1___aldiv+1,w
 14630  10E0  00AF               	movwf	?_modulation+1
 14631  10E1  0820               	movf	?i1___aldiv,w
 14632  10E2  00AE               	movwf	?_modulation
 14633  10E3  0008               	return
 14634  10E4                     __end_of_modulation:	
 14635                           
 14636                           	psect	text51
 14637  1DDB                     __ptext51:	
 14638 ;; *************** function i1___lmul *****************
 14639 ;; Defined at:
 14640 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14641 ;; Parameters:    Size  Location     Type
 14642 ;;  multiplier      4    0[COMMON] unsigned long 
 14643 ;;  multiplicand    4    4[COMMON] unsigned long 
 14644 ;; Auto vars:     Size  Location     Type
 14645 ;;  __lmul          4    8[COMMON] unsigned long 
 14646 ;; Return value:  Size  Location     Type
 14647 ;;                  4    0[COMMON] unsigned long 
 14648 ;; Registers used:
 14649 ;;		wreg, status,2, status,0
 14650 ;; Tracked objects:
 14651 ;;		On entry : 0/0
 14652 ;;		On exit  : 0/0
 14653 ;;		Unchanged: 0/0
 14654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14655 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14656 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14658 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14659 ;;Total ram usage:       12 bytes
 14660 ;; Hardware stack levels used:    1
 14661 ;; This function calls:
 14662 ;;		Nothing
 14663 ;; This function is called by:
 14664 ;;		_modulation
 14665 ;; This function uses a non-reentrant model
 14666 ;;
 14667                           
 14668                           
 14669                           ;psect for function i1___lmul
 14670  1DDB                     i1___lmul:	
 14671                           
 14672                           ;incstack = 0
 14673                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 14674  1DDB  3000               	movlw	0
 14675  1DDC  00FB               	movwf	i1___lmul@product+3
 14676  1DDD  3000               	movlw	0
 14677  1DDE  00FA               	movwf	i1___lmul@product+2
 14678  1DDF  3000               	movlw	0
 14679  1DE0  00F9               	movwf	i1___lmul@product+1
 14680  1DE1  3000               	movlw	0
 14681  1DE2  00F8               	movwf	i1___lmul@product
 14682  1DE3                     i1l4437:	
 14683  1DE3  1C70               	btfss	i1___lmul@multiplier,0
 14684  1DE4  2DED               	goto	i1l4441
 14685  1DE5  0874               	movf	i1___lmul@multiplicand,w
 14686  1DE6  07F8               	addwf	i1___lmul@product,f
 14687  1DE7  0875               	movf	i1___lmul@multiplicand+1,w
 14688  1DE8  3DF9               	addwfc	i1___lmul@product+1,f
 14689  1DE9  0876               	movf	i1___lmul@multiplicand+2,w
 14690  1DEA  3DFA               	addwfc	i1___lmul@product+2,f
 14691  1DEB  0877               	movf	i1___lmul@multiplicand+3,w
 14692  1DEC  3DFB               	addwfc	i1___lmul@product+3,f
 14693  1DED                     i1l4441:	
 14694  1DED  3001               	movlw	1
 14695  1DEE                     u385_25:	
 14696  1DEE  35F4               	lslf	i1___lmul@multiplicand,f
 14697  1DEF  0DF5               	rlf	i1___lmul@multiplicand+1,f
 14698  1DF0  0DF6               	rlf	i1___lmul@multiplicand+2,f
 14699  1DF1  0DF7               	rlf	i1___lmul@multiplicand+3,f
 14700  1DF2  0B89               	decfsz	9,f
 14701  1DF3  2DEE               	goto	u385_25
 14702  1DF4  3001               	movlw	1
 14703  1DF5                     u386_25:	
 14704  1DF5  36F3               	lsrf	i1___lmul@multiplier+3,f
 14705  1DF6  0CF2               	rrf	i1___lmul@multiplier+2,f
 14706  1DF7  0CF1               	rrf	i1___lmul@multiplier+1,f
 14707  1DF8  0CF0               	rrf	i1___lmul@multiplier,f
 14708  1DF9  0B89               	decfsz	9,f
 14709  1DFA  2DF5               	goto	u386_25
 14710  1DFB  0873               	movf	i1___lmul@multiplier+3,w
 14711  1DFC  0472               	iorwf	i1___lmul@multiplier+2,w
 14712  1DFD  0471               	iorwf	i1___lmul@multiplier+1,w
 14713  1DFE  0470               	iorwf	i1___lmul@multiplier,w
 14714  1DFF  1D03               	skipz
 14715  1E00  2DE3               	goto	i1l4437
 14716  1E01  087B               	movf	i1___lmul@product+3,w
 14717  1E02  00F3               	movwf	?i1___lmul+3
 14718  1E03  087A               	movf	i1___lmul@product+2,w
 14719  1E04  00F2               	movwf	?i1___lmul+2
 14720  1E05  0879               	movf	i1___lmul@product+1,w
 14721  1E06  00F1               	movwf	?i1___lmul+1
 14722  1E07  0878               	movf	i1___lmul@product,w
 14723  1E08  00F0               	movwf	?i1___lmul
 14724  1E09  0008               	return
 14725  1E0A                     __end_ofi1___lmul:	
 14726                           
 14727                           	psect	text52
 14728  1514                     __ptext52:	
 14729 ;; *************** function i1___aldiv *****************
 14730 ;; Defined at:
 14731 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 14732 ;; Parameters:    Size  Location     Type
 14733 ;;  divisor         4    0[BANK0 ] long 
 14734 ;;  dividend        4    4[BANK0 ] long 
 14735 ;; Auto vars:     Size  Location     Type
 14736 ;;  __aldiv         4   10[BANK0 ] long 
 14737 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 14738 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 14739 ;; Return value:  Size  Location     Type
 14740 ;;                  4    0[BANK0 ] long 
 14741 ;; Registers used:
 14742 ;;		wreg, status,2, status,0
 14743 ;; Tracked objects:
 14744 ;;		On entry : 0/0
 14745 ;;		On exit  : 0/0
 14746 ;;		Unchanged: 0/0
 14747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14748 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14749 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14751 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14752 ;;Total ram usage:       15 bytes
 14753 ;; Hardware stack levels used:    1
 14754 ;; This function calls:
 14755 ;;		Nothing
 14756 ;; This function is called by:
 14757 ;;		_modulation
 14758 ;; This function uses a non-reentrant model
 14759 ;;
 14760                           
 14761                           
 14762                           ;psect for function i1___aldiv
 14763  1514                     i1___aldiv:	
 14764                           
 14765                           ;incstack = 0
 14766                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 14767  1514  0020               	movlb	0	; select bank0
 14768  1515  01A9               	clrf	i1___aldiv@sign
 14769  1516  1FA3               	btfss	i1___aldiv@divisor+3,7
 14770  1517  2D25               	goto	i1l1685
 14771  1518  09A0               	comf	i1___aldiv@divisor,f
 14772  1519  09A1               	comf	i1___aldiv@divisor+1,f
 14773  151A  09A2               	comf	i1___aldiv@divisor+2,f
 14774  151B  09A3               	comf	i1___aldiv@divisor+3,f
 14775  151C  0AA0               	incf	i1___aldiv@divisor,f
 14776  151D  1903               	skipnz
 14777  151E  0AA1               	incf	i1___aldiv@divisor+1,f
 14778  151F  1903               	skipnz
 14779  1520  0AA2               	incf	i1___aldiv@divisor+2,f
 14780  1521  1903               	skipnz
 14781  1522  0AA3               	incf	i1___aldiv@divisor+3,f
 14782  1523  01A9               	clrf	i1___aldiv@sign
 14783  1524  0AA9               	incf	i1___aldiv@sign,f
 14784  1525                     i1l1685:	
 14785  1525  1FA7               	btfss	i1___aldiv@dividend+3,7
 14786  1526  2D36               	goto	i1l4459
 14787  1527  09A4               	comf	i1___aldiv@dividend,f
 14788  1528  09A5               	comf	i1___aldiv@dividend+1,f
 14789  1529  09A6               	comf	i1___aldiv@dividend+2,f
 14790  152A  09A7               	comf	i1___aldiv@dividend+3,f
 14791  152B  0AA4               	incf	i1___aldiv@dividend,f
 14792  152C  1903               	skipnz
 14793  152D  0AA5               	incf	i1___aldiv@dividend+1,f
 14794  152E  1903               	skipnz
 14795  152F  0AA6               	incf	i1___aldiv@dividend+2,f
 14796  1530  1903               	skipnz
 14797  1531  0AA7               	incf	i1___aldiv@dividend+3,f
 14798  1532  3001               	movlw	1
 14799  1533  00FC               	movwf	??i1___aldiv
 14800  1534  087C               	movf	??i1___aldiv,w
 14801  1535  06A9               	xorwf	i1___aldiv@sign,f
 14802  1536                     i1l4459:	
 14803  1536  3000               	movlw	0
 14804  1537  00AD               	movwf	i1___aldiv@quotient+3
 14805  1538  3000               	movlw	0
 14806  1539  00AC               	movwf	i1___aldiv@quotient+2
 14807  153A  3000               	movlw	0
 14808  153B  00AB               	movwf	i1___aldiv@quotient+1
 14809  153C  3000               	movlw	0
 14810  153D  00AA               	movwf	i1___aldiv@quotient
 14811  153E  0823               	movf	i1___aldiv@divisor+3,w
 14812  153F  0422               	iorwf	i1___aldiv@divisor+2,w
 14813  1540  0421               	iorwf	i1___aldiv@divisor+1,w
 14814  1541  0420               	iorwf	i1___aldiv@divisor,w
 14815  1542  1903               	skipnz
 14816  1543  2D7F               	goto	i1l4481
 14817  1544  01A8               	clrf	i1___aldiv@counter
 14818  1545  0AA8               	incf	i1___aldiv@counter,f
 14819  1546                     i1l4467:	
 14820  1546  1BA3               	btfsc	i1___aldiv@divisor+3,7
 14821  1547  2D54               	goto	i1l4469
 14822  1548  3001               	movlw	1
 14823  1549                     u391_25:	
 14824  1549  35A0               	lslf	i1___aldiv@divisor,f
 14825  154A  0DA1               	rlf	i1___aldiv@divisor+1,f
 14826  154B  0DA2               	rlf	i1___aldiv@divisor+2,f
 14827  154C  0DA3               	rlf	i1___aldiv@divisor+3,f
 14828  154D  0B89               	decfsz	9,f
 14829  154E  2D49               	goto	u391_25
 14830  154F  3001               	movlw	1
 14831  1550  00FC               	movwf	??i1___aldiv
 14832  1551  087C               	movf	??i1___aldiv,w
 14833  1552  07A8               	addwf	i1___aldiv@counter,f
 14834  1553  2D46               	goto	i1l4467
 14835  1554                     i1l4469:	
 14836  1554  3001               	movlw	1
 14837  1555                     u393_25:	
 14838  1555  35AA               	lslf	i1___aldiv@quotient,f
 14839  1556  0DAB               	rlf	i1___aldiv@quotient+1,f
 14840  1557  0DAC               	rlf	i1___aldiv@quotient+2,f
 14841  1558  0DAD               	rlf	i1___aldiv@quotient+3,f
 14842  1559  0B89               	decfsz	9,f
 14843  155A  2D55               	goto	u393_25
 14844  155B  0823               	movf	i1___aldiv@divisor+3,w
 14845  155C  0227               	subwf	i1___aldiv@dividend+3,w
 14846  155D  1D03               	skipz
 14847  155E  2D69               	goto	u394_25
 14848  155F  0822               	movf	i1___aldiv@divisor+2,w
 14849  1560  0226               	subwf	i1___aldiv@dividend+2,w
 14850  1561  1D03               	skipz
 14851  1562  2D69               	goto	u394_25
 14852  1563  0821               	movf	i1___aldiv@divisor+1,w
 14853  1564  0225               	subwf	i1___aldiv@dividend+1,w
 14854  1565  1D03               	skipz
 14855  1566  2D69               	goto	u394_25
 14856  1567  0820               	movf	i1___aldiv@divisor,w
 14857  1568  0224               	subwf	i1___aldiv@dividend,w
 14858  1569                     u394_25:	
 14859  1569  1C03               	skipc
 14860  156A  2D74               	goto	i1l4477
 14861  156B  0820               	movf	i1___aldiv@divisor,w
 14862  156C  02A4               	subwf	i1___aldiv@dividend,f
 14863  156D  0821               	movf	i1___aldiv@divisor+1,w
 14864  156E  3BA5               	subwfb	i1___aldiv@dividend+1,f
 14865  156F  0822               	movf	i1___aldiv@divisor+2,w
 14866  1570  3BA6               	subwfb	i1___aldiv@dividend+2,f
 14867  1571  0823               	movf	i1___aldiv@divisor+3,w
 14868  1572  3BA7               	subwfb	i1___aldiv@dividend+3,f
 14869  1573  142A               	bsf	i1___aldiv@quotient,0
 14870  1574                     i1l4477:	
 14871  1574  3001               	movlw	1
 14872  1575                     u395_25:	
 14873  1575  36A3               	lsrf	i1___aldiv@divisor+3,f
 14874  1576  0CA2               	rrf	i1___aldiv@divisor+2,f
 14875  1577  0CA1               	rrf	i1___aldiv@divisor+1,f
 14876  1578  0CA0               	rrf	i1___aldiv@divisor,f
 14877  1579  0B89               	decfsz	9,f
 14878  157A  2D75               	goto	u395_25
 14879  157B  3001               	movlw	1
 14880  157C  02A8               	subwf	i1___aldiv@counter,f
 14881  157D  1D03               	btfss	3,2
 14882  157E  2D54               	goto	i1l4469
 14883  157F                     i1l4481:	
 14884  157F  0829               	movf	i1___aldiv@sign,w
 14885  1580  1903               	btfsc	3,2
 14886  1581  2D8D               	goto	i1l4485
 14887  1582  09AA               	comf	i1___aldiv@quotient,f
 14888  1583  09AB               	comf	i1___aldiv@quotient+1,f
 14889  1584  09AC               	comf	i1___aldiv@quotient+2,f
 14890  1585  09AD               	comf	i1___aldiv@quotient+3,f
 14891  1586  0AAA               	incf	i1___aldiv@quotient,f
 14892  1587  1903               	skipnz
 14893  1588  0AAB               	incf	i1___aldiv@quotient+1,f
 14894  1589  1903               	skipnz
 14895  158A  0AAC               	incf	i1___aldiv@quotient+2,f
 14896  158B  1903               	skipnz
 14897  158C  0AAD               	incf	i1___aldiv@quotient+3,f
 14898  158D                     i1l4485:	
 14899  158D  082D               	movf	i1___aldiv@quotient+3,w
 14900  158E  00A3               	movwf	?i1___aldiv+3
 14901  158F  082C               	movf	i1___aldiv@quotient+2,w
 14902  1590  00A2               	movwf	?i1___aldiv+2
 14903  1591  082B               	movf	i1___aldiv@quotient+1,w
 14904  1592  00A1               	movwf	?i1___aldiv+1
 14905  1593  082A               	movf	i1___aldiv@quotient,w
 14906  1594  00A0               	movwf	?i1___aldiv
 14907  1595  0008               	return
 14908  1596                     __end_ofi1___aldiv:	
 14909                           
 14910                           	psect	text53
 14911  12E9                     __ptext53:	
 14912 ;; *************** function ___awdiv *****************
 14913 ;; Defined at:
 14914 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14915 ;; Parameters:    Size  Location     Type
 14916 ;;  divisor         2    0[COMMON] int 
 14917 ;;  dividend        2    2[COMMON] int 
 14918 ;; Auto vars:     Size  Location     Type
 14919 ;;  quotient        2    7[COMMON] int 
 14920 ;;  sign            1    6[COMMON] unsigned char 
 14921 ;;  counter         1    5[COMMON] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  2    0[COMMON] int 
 14924 ;; Registers used:
 14925 ;;		wreg, status,2, status,0
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14932 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14934 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14935 ;;Total ram usage:        9 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; This function calls:
 14938 ;;		Nothing
 14939 ;; This function is called by:
 14940 ;;		_isr
 14941 ;; This function uses a non-reentrant model
 14942 ;;
 14943                           
 14944                           
 14945                           ;psect for function ___awdiv
 14946  12E9                     ___awdiv:	
 14947                           
 14948                           ;incstack = 0
 14949                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14950  12E9  01F6               	clrf	___awdiv@sign
 14951  12EA  1FF1               	btfss	___awdiv@divisor+1,7
 14952  12EB  2AF3               	goto	i1l4887
 14953  12EC  09F0               	comf	___awdiv@divisor,f
 14954  12ED  09F1               	comf	___awdiv@divisor+1,f
 14955  12EE  0AF0               	incf	___awdiv@divisor,f
 14956  12EF  1903               	skipnz
 14957  12F0  0AF1               	incf	___awdiv@divisor+1,f
 14958  12F1  01F6               	clrf	___awdiv@sign
 14959  12F2  0AF6               	incf	___awdiv@sign,f
 14960  12F3                     i1l4887:	
 14961  12F3  1FF3               	btfss	___awdiv@dividend+1,7
 14962  12F4  2AFE               	goto	i1l4893
 14963  12F5  09F2               	comf	___awdiv@dividend,f
 14964  12F6  09F3               	comf	___awdiv@dividend+1,f
 14965  12F7  0AF2               	incf	___awdiv@dividend,f
 14966  12F8  1903               	skipnz
 14967  12F9  0AF3               	incf	___awdiv@dividend+1,f
 14968  12FA  3001               	movlw	1
 14969  12FB  00F4               	movwf	??___awdiv
 14970  12FC  0874               	movf	??___awdiv,w
 14971  12FD  06F6               	xorwf	___awdiv@sign,f
 14972  12FE                     i1l4893:	
 14973  12FE  01F7               	clrf	___awdiv@quotient
 14974  12FF  01F8               	clrf	___awdiv@quotient+1
 14975  1300  0870               	movf	___awdiv@divisor,w
 14976  1301  0471               	iorwf	___awdiv@divisor+1,w
 14977  1302  1903               	btfsc	3,2
 14978  1303  2B2D               	goto	i1l4915
 14979  1304  01F5               	clrf	___awdiv@counter
 14980  1305  0AF5               	incf	___awdiv@counter,f
 14981  1306                     i1l4903:	
 14982  1306  1BF1               	btfsc	___awdiv@divisor+1,7
 14983  1307  2B12               	goto	i1l4905
 14984  1308  3001               	movlw	1
 14985  1309                     u483_25:	
 14986  1309  35F0               	lslf	___awdiv@divisor,f
 14987  130A  0DF1               	rlf	___awdiv@divisor+1,f
 14988  130B  0B89               	decfsz	9,f
 14989  130C  2B09               	goto	u483_25
 14990  130D  3001               	movlw	1
 14991  130E  00F4               	movwf	??___awdiv
 14992  130F  0874               	movf	??___awdiv,w
 14993  1310  07F5               	addwf	___awdiv@counter,f
 14994  1311  2B06               	goto	i1l4903
 14995  1312                     i1l4905:	
 14996  1312  3001               	movlw	1
 14997  1313                     u485_25:	
 14998  1313  35F7               	lslf	___awdiv@quotient,f
 14999  1314  0DF8               	rlf	___awdiv@quotient+1,f
 15000  1315  0B89               	decfsz	9,f
 15001  1316  2B13               	goto	u485_25
 15002  1317  0871               	movf	___awdiv@divisor+1,w
 15003  1318  0273               	subwf	___awdiv@dividend+1,w
 15004  1319  1D03               	skipz
 15005  131A  2B1D               	goto	u486_25
 15006  131B  0870               	movf	___awdiv@divisor,w
 15007  131C  0272               	subwf	___awdiv@dividend,w
 15008  131D                     u486_25:	
 15009  131D  1C03               	skipc
 15010  131E  2B24               	goto	i1l4911
 15011  131F  0870               	movf	___awdiv@divisor,w
 15012  1320  02F2               	subwf	___awdiv@dividend,f
 15013  1321  0871               	movf	___awdiv@divisor+1,w
 15014  1322  3BF3               	subwfb	___awdiv@dividend+1,f
 15015  1323  1477               	bsf	___awdiv@quotient,0
 15016  1324                     i1l4911:	
 15017  1324  3001               	movlw	1
 15018  1325                     u487_25:	
 15019  1325  36F1               	lsrf	___awdiv@divisor+1,f
 15020  1326  0CF0               	rrf	___awdiv@divisor,f
 15021  1327  0B89               	decfsz	9,f
 15022  1328  2B25               	goto	u487_25
 15023  1329  3001               	movlw	1
 15024  132A  02F5               	subwf	___awdiv@counter,f
 15025  132B  1D03               	btfss	3,2
 15026  132C  2B12               	goto	i1l4905
 15027  132D                     i1l4915:	
 15028  132D  0876               	movf	___awdiv@sign,w
 15029  132E  1903               	btfsc	3,2
 15030  132F  2B35               	goto	i1l4919
 15031  1330  09F7               	comf	___awdiv@quotient,f
 15032  1331  09F8               	comf	___awdiv@quotient+1,f
 15033  1332  0AF7               	incf	___awdiv@quotient,f
 15034  1333  1903               	skipnz
 15035  1334  0AF8               	incf	___awdiv@quotient+1,f
 15036  1335                     i1l4919:	
 15037  1335  0878               	movf	___awdiv@quotient+1,w
 15038  1336  00F1               	movwf	?___awdiv+1
 15039  1337  0877               	movf	___awdiv@quotient,w
 15040  1338  00F0               	movwf	?___awdiv
 15041  1339  0008               	return
 15042  133A                     __end_of___awdiv:	
 15043  007E                     btemp	set	126	;btemp
 15044  007E                     int$flags	set	126
 15045  007E                     wtemp	set	126
 15046  007E                     wtemp0	set	126
 15047  0080                     wtemp1	set	128
 15048  0082                     wtemp2	set	130
 15049  0084                     wtemp3	set	132
 15050  0086                     wtemp4	set	134
 15051  0088                     wtemp5	set	136
 15052  007F                     wtemp6	set	127
 15053  007E                     ttemp	set	126
 15054  007E                     ttemp0	set	126
 15055  0081                     ttemp1	set	129
 15056  0084                     ttemp2	set	132
 15057  0087                     ttemp3	set	135
 15058  007F                     ttemp4	set	127
 15059  007E                     ltemp	set	126
 15060  007E                     ltemp0	set	126
 15061  0082                     ltemp1	set	130
 15062  0086                     ltemp2	set	134
 15063  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        792
    BSS         218
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     49      77
    BANK3            80      0      75
    BANK4            80      8      68
    BANK5            80      0      44
    BANK6            80      0      61
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _update_selectMode->_setExpressionDisplay
    _update_selectMode->_setPresetDisplay
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _setDoublePressState->_showSave
    _showSave->_ring_tactiles
    _solidring_tactiles->_wait_ms
    _ring_tactiles->_wait_ms
    _setPedalMode->_setExpressionDisplay
    _setPedalMode->_setPresetDisplay
    _setPresetDisplay->_set_leds_top
    _setExpressionDisplay->_set_leds_top
    _resetRingLEDs->_set_leds_top
    _set_subdivision->_trunc
    _trunc->___fttol
    ___fttol->_map
    ___altoft->___fttol
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->_trunc
    _trunc->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0  120166
                                             34 BANK2     15    15      0
                                              0 BANK4      8     8      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
                  _update_selectMode
 ---------------------------------------------------------------------------------
 (1) _update_selectMode                                    1     1      0    5976
                                              7 BANK1      1     1      0
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0   11828
                                              7 BANK1      1     1      0
                      _resetRingLEDs
                       _setPedalMode
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0   27947
                                             28 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0   29397
                                             28 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2   26779
                                             24 BANK1      4     2      2
                      _resetRingLEDs
                       _setPedalMode
                   _setPresetDisplay
                           _showSave
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _showSave                                             1     1      0    9777
                                             23 BANK1      1     1      0
                      _ring_tactiles
                 _solidring_tactiles
 ---------------------------------------------------------------------------------
 (4) _solidring_tactiles                                   3     3      0    4822
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (4) _ring_tactiles                                        5     5      0    4955
                                             18 BANK1      5     5      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setPedalMode                                         0     0      0    8902
                      _resetRingLEDs
               _setExpressionDisplay
                   _setPresetDisplay
 ---------------------------------------------------------------------------------
 (2) _setPresetDisplay                                     3     3      0    3019
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (2) _setExpressionDisplay                                 3     3      0    2957
                                              4 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _resetRingLEDs                                        0     0      0    2926
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   13002
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4642
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4    1064
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3427
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3879
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2709
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14889
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             37 BANK1     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    3253
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    2048
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     878
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (8) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (8) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (9) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (9) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _updateSwitchBypass
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setPedalMode
         _resetRingLEDs
           _set_leds_bottom
           _set_leds_top
         _setExpressionDisplay
           _set_leds_bottom
           _set_leds_top
         _setPresetDisplay
           _set_leds_bottom
           _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
       _showSave
         _ring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
         _solidring_tactiles
           _set_leds_bottom
           _set_leds_top
           _wait_ms
             ___lmul
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode
     _resetRingLEDs
       _set_leds_bottom
       _set_leds_top
     _setPedalMode
       _resetRingLEDs
         _set_leds_bottom
         _set_leds_top
       _setExpressionDisplay
         _set_leds_bottom
         _set_leds_top
       _setPresetDisplay
         _set_leds_bottom
         _set_leds_top
   _update_selectMode
     _setExpressionDisplay
       _set_leds_bottom
       _set_leds_top
     _setPresetDisplay
       _set_leds_bottom
       _set_leds_top

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      8      44      13       85.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2A7      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3D      18       76.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2A7      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Jan 07 21:06:22 2017

                     _update_mode 1E9C                      ___altoft@exp 012C                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012D                      ___awdiv@sign 0076                _topTactile_pressed 015E  
      setDoublePressState@f_state 00B8                   _updateSwitchTap 05E3                      ___ftadd@exp1 00B4  
                    ___ftadd@exp2 00B3                      ___ftadd@sign 00B2                               l380 1E8D  
                             l609 14D0              __size_of_adc_convert 0013                               l580 1CCA  
                             l573 095B                               l771 1F15                               l773 1F18  
                             l774 1F1B                               l766 13BB                               l934 113A  
                             l950 128E                               l775 1F1E                               l767 13DF  
                             l776 1F21                               l961 1ECC                               l778 1F24  
                             l938 1161                               l946 125E                               l779 1F48  
                             l971 1009                               l972 1011                               l973 1024  
                             l976 13E7                               l969 1003                               l987 1431  
                             _PR2 001B      solidring_tactiles@ring_delay 00B4                               _map 1618  
                             _isr 0004                               _tap 02A0                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
             set_subdivision@tmpX 0140           __end_of_set_leds_bottom 1F49                      __CFG_LVP$OFF 0000  
                  i1___aldiv@sign 0029                      ___ftdiv@cntr 00CF                      ___ftdiv@sign 00D4  
                            _B25k 0220                              l1227 09E7                              l1381 06AF  
                            l1367 05F8                              l1822 0AE7                              l6011 0AB3  
                            l6013 0ABD                              l6005 0AA0                              l6101 1779  
                            l1685 15A7                              l1791 146C                              l6023 0AD9  
                            l6015 0AC2                              l6033 0B0B                              l6025 0AE3  
                            l6017 0AC6                              l6113 17B4                              l1882 0885  
                            l6043 0B26                              l6029 0AF9                              l6053 16BA  
                            l6125 17D0                              l6117 17BC                              l6301 09D8  
                            l6221 1EC9                              l1798 147F                              ?_map 00D5  
                            l1799 1487                              l6215 1EBF                              l6223 1ED0  
                            l6081 172A                              l6073 1711                              l6129 17D8  
                            l6313 0A05                              l6059 16D0                              l6307 09EB  
                            l6243 1416                              l6421 06FD                              l6413 06F1  
                            l6405 06A7                              l6253 142D                              l6245 141B  
                            l6237 140A                              l6183 14E3                              l6095 1763  
                            l6511 08BE                              l5623 12CD                              l5615 12A9  
                            l6319 0A11                              l6327 0A25                              l6263 0977  
                            l6423 0747                              l6351 05EE                              l6255 1435  
                            l6185 14EC                              l5553 1E4D                              l5721 1213  
                            l6513 08C4                              l6521 08E8                              l5571 13B3  
                            l5563 1393                              l5651 1442                              l5723 1223  
                            l6515 08C8                              l6507 08B6                              l5643 07E2  
                            l6275 0997                              l6267 098A                              l6427 076D  
                            l6371 062A                              l6435 07AD                              l5565 139B  
                            l5549 1E43                              l6453 112F                              l5733 0823  
                            l5821 1357                              l6509 08BA                              l5709 1018  
                            l6373 0647                              l6357 0609                              l5591 1F2B  
                            l5567 13A3                              l5575 13C2                              l5655 1449  
                            l6463 1156                              l5751 085C                              l6519 08CF  
                            l6287 09B8                              l6607 0CEE                              l5569 13AB  
                            l5665 1471                              l5657 1453                              l6473 1253  
                            l5761 0889                              l5753 086D                              l6289 09C0  
                            l6393 0678                              l6633 0DBC                              l5667 1479  
                            l5659 1458                              l6483 127A                              l5907 1050  
                            l5915 105B                              l6379 0652                              l6395 0680  
                            l6651 0EA2                              l6619 0D57                              ?_isr 0070  
                            l5765 0897                              l6397 068F                              l6573 0B78  
                            l6557 0B59                              l5871 11DF                              l5759 087B  
                            l5775 1EE2                              l5943 15C8                              l5935 15B8  
                            l6663 0F6C                              l6655 0EEA                              l6639 0DFA  
                            l6647 0E68                              l6567 0B69                              l5961 160F  
                            l5953 15F6                              l5945 15D6                              l6681 0FA3  
                            l6683 0FFD                              l6659 0F24                              l6595 0C46  
                            l5973 1D76                              l5957 1601                              l6589 0BF4  
                            l5983 0A70                              l6679 0FF7                              l6599 0C80  
                            l5993 0A86                              l5987 0A77                              l5899 103F  
                            l6973 08D4                              l6975 13C8                              l6977 1F31  
                            u6005 1D22                              u6015 1030                              u6115 15D7  
                            u6125 15EB                              u6135 15F7                              u6055 1D3C  
                            u7105 0633                              u5605 1E4E                              u6325 0AC7  
                            u5615 1E55                              u6095 15CB                              u7215 06C0  
                            u7135 065C                              u6265 0AA1                              u6425 16E2  
                            u6505 1785                              u7225 06D6                              u5715 144E  
                            u6355 0ADA                              u6435 16F2                              u6515 1795  
                            u7235 0706                              u6445 1712                              u5645 12A7  
                            u7245 071B                              u6615 1D99                              u5735 1467  
                            u6295 0AB4                              u6455 1721                              u6535 17BD  
                            u7335 114F                              u5655 12CB                              u7255 072F  
                            u6625 1D9F                              u6465 172B                              u6545 17C3  
                            u5825 1218                              u7425 0954                              u7505 0C7E  
                            u5755 1474                              u5915 087C                              u7275 074C  
                            u6660 14EA                              u6645 14C9                              u7605 0F05  
                            u6655 14DC                              u6575 17D9                              u5855 082B  
                            u7615 0F22                              u6585 17DF                              u5795 148E  
                            u7395 1273                              u7643 0FEF                              u7635 0FD7  
                            u7555 0DD7                              u7475 0BD5                              u5980 11DD  
                            u5885 085D                              u6845 0970                              u6765 13F9  
                            u7565 0DF4                              u7485 0BF2                              u5975 11BF  
                            u6855 0983                              u6695 1EAF                              u7495 0C61  
                            u7585 0E83                              u7595 0EA0                              u6885 09A1  
                            u6975 09F6                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 01D7                              _mod1 0320                              _mod2 03A0  
                            _mod3 0420                              _main 0B3E                      ___ftpack@arg 00A0  
                    ___ftpack@exp 00A3                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 00D5                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E          __end_of_setFeedbackState 1D31  
                            start 0320                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 1C4B                   _expressModeCnst 01E8      updateSwitchTap@tapCntDivisor 00C2  
    __end_of_setSwitchBypassState 11FE                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 00C3                      ___ftmul@sign 00C4                   __end_of_InitApp 1E3A  
                    ___fttol@exp1 0125                             ??_map 00E4                      ___fttol@lval 0121  
                           ??_isr 003A                   _switchBypass_up 01DF         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 1618                             ?_main 0070                   __end_of___awdiv 133A  
                 __end_of___ftadd 0B3E                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 174C  
                 __end_of___ftneg 1C5D                   __end_of___ftmul 1800                   ___awdiv@divisor 0070  
                 __end_of___fttol 08A7                             i1l133 011E                             i1l170 031B  
                           i1l165 0314                             i1l766 1191                             i1l767 11B3  
                 ___awdiv@counter 0075               _ConfigureOscillator 1C43                  _setPresetDisplay 07C6  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                 _switchTap_state 016C                 ??_setLongTapState 00A2                     ___awtoft@sign 00AD  
                           _frexp 1ED4                             _myBuf 04A0                             _errno 01C2  
                   ___ftpack@sign 00A4                             _timer 004D                             main@i 025C  
                           _trunc 133A                  __end_ofi1___lmul 1E0A                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 1E9C                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 116C                __size_ofi1___aldiv 0082  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F             set_subdivision@scalar 013D              ?_ConfigureOscillator 0070  
              _updateSwitchBypass 0961           __end_of_updateSwitchTap 07C6                   __initialization 0322  
         _updateSwitchBypassState 0002                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             i1___lmul@multiplier 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
          ring_tactiles@iLed_1482 00B5                   _set_subdivision 08A7                            ??_main 0142  
                   ___fttol@sign1 0120           __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 10A3  
                  _feedback_timer 0153                    _feedback_state 016A                    _feedback_start 0159  
                ?_set_leds_bottom 00A0                            ?_frexp 00A0                  __end_of___altoft 1249  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0072  
             _baseline_delay_time 0058                  __end_of___awtoft 1D8D                  __end_of___ftpack 149E  
            ??_updateSwitchBypass 00BC                            ?_trunc 012E                            i1l5001 019D  
                          i1l5003 01AC                            i1l5021 01FC                            i1l5005 01AE  
                          i1l5031 024B                            i1l5015 01E0                            i1l5025 0209  
                          i1l5051 0275                            i1l5043 025F                            i1l5035 024E  
                          i1l5019 01ED                            i1l1685 1525                            i1l5061 0289  
                          i1l5055 0283                            i1l5047 026F                            i1l5039 0253  
                          i1l5063 02A0                            i1l4441 1DED                            i1l5081 0316  
                          i1l5057 0286                            i1l4437 1DE3                            i1l5085 031A  
                          i1l5069 02E3                            i1l4481 157F                            i1l4467 1546  
                          i1l4459 1536                            i1l4485 158D                            i1l4477 1574  
                          i1l4469 1554                            i1l4911 1324                            i1l4903 1306  
                          i1l4905 1312                            i1l4915 132D                            i1l4931 1185  
                          i1l4933 118B                            i1l4925 1173                            i1l4919 1335  
                          i1l4927 1179                            i1l4929 117F                            i1l4937 1197  
                          i1l4953 00A8                            i1l4893 12FE                            i1l4887 12F3  
                          i1l4991 017C                            i1l4967 010B                            i1l4959 00C2  
                          i1l4993 017E                            i1l4997 0192                            i1l4989 016C  
                          i1l6981 119C                            i1l6979 028F                            u501_23 013A  
                          _PMADRH 0192                            _PMADRL 0191                            u513_23 0231  
                          _PMDATH 0194                            u514_25 0245                            _PMDATL 0193  
                          u515_25 0268                            _PMCON2 0196                            u509_23 01D0  
                          u517_25 02F6                            u518_25 030F                            u391_25 1549  
                          u393_25 1555                            u385_25 1DEE                            u394_25 1569  
                          u386_25 1DF5                            u483_25 1309                            u395_25 1575  
                          u492_25 009F                            u485_25 1313                            u486_25 131D  
                          u494_25 00B9                            u487_25 1325                            u496_23 00DB  
                  _debounce_count 01BA                    _debounce_mode1 01BC                    _debounce_mode2 01BE  
                       ??_InitApp 00A0             ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 1299  
                  __CFG_PWRTE$OFF 0000                            ___lmul 1E3A                         ??___aldiv 00A8  
               _update_selectMode 13E0                         ??___awdiv 0074                         ??___ftadd 00AE  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 00CB                         ??___ftneg 00A3  
                       ??___ftmul 00BB                         ??___fttol 00EB                  __end_of_init_adc 1C67  
                __end_of_init_pwm 1125                ?_update_selectMode 0070                  ___awdiv@quotient 0077  
           __end_of_resetRingLEDs 1D17                 __end_ofi1___aldiv 1596             ___ftmul@f3_as_product 00C0  
                    __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0                      __pdataCOMMON 007D  
                __end_of_showSave 1CE5               ??_update_selectMode 00A7              _getSwitchBypassState 1C47  
                       ??_wait_ms 00AE              _setSwitchBypassState 11B4                            trunc@i 0131  
                          trunc@x 012E      __end_of_setExpressionDisplay 1CFD            setLongTapState@f_state 00A0  
         __end_of__initialization 03D7                        ___altoft@c 0126                        ___ftadd@f1 00A8  
                      ___ftadd@f2 00AB                 _bypass_turning_on 0158                        ___ftdiv@f1 00C8  
                      ___ftdiv@f2 00C5                        ___ftdiv@f3 00D0                    _top_push_state 0064  
       ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00A0               _switchBypass_toggle 01D4  
                      ___awtoft@c 00A8             __end_of_ring_tactiles 12E9         __end_of_update_selectMode 1439  
         __end_of_set_subdivision 0961                        ___ftmul@f1 00B5                        ___ftmul@f2 00B8  
               _feedbackTriggered 01D6                        ___fttol@f1 00E7                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 1CAC  
                    __pidataBANK2 1C7F                      __pidataBANK3 1C9C                      __pidataBANK4 1DB3  
                    __pidataBANK6 1FC3                      __pidataBANK7 1F86                      __pidataBANK8 1F49  
                   __end_of_frexp 1F0E                     __end_of_trunc 138C                  _initSwitchBypass 1C8D  
                       ?i1___lmul 0070                   _doubleTap_state 0053                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2                           ??_frexp 00A4  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                           ??_trunc 00EF                     ?_setPedalMode 0070  
                      __pbssBANK0 0045                        __pbssBANK2 0151                        __pbssBANK3 01A0  
                      __pbssBANK4 0248                        __pbssBANK5 02A0                        __pbssBANK9 04A0  
                ??i1_set_leds_top 0074                   __CFG_VCAPEN$OFF 0000                        _delayArray 23E8  
               ?_setFeedbackState 00A0          __end_of_setPresetDisplay 0800                        _delay_time 005C  
                _long_press_limit 0062      __size_of_setDoublePressState 003E                        _delayfound 01C0  
                      __pmaintext 0B3E                ??_setFeedbackState 00A2                    _InitializeTaps 1D8D  
                         ?___lmul 00A0                        __pintentry 0004                        _blink_rate 007D  
                   ??_adc_convert 00A2                         ?___altoft 0126                    ___lmul@product 00A8  
                 _setLongTapState 1D31                         ?___awtoft 00A8                         ?___ftpack 00A0  
                      ??i1___lmul 0078                    _FLASH_ReadWord 1D4B   __end_of_updateSwitchBypassState 0003  
                     modulation@x 002E                       modulation@y 0032                   _debounce_bypass 01B8  
                  ??_setPedalMode 00A7                     _suspend_blink 0056                         ?_init_adc 0070  
                       ?_init_pwm 0070                           _InitApp 1E0A            __end_of_InitializeTaps 1DB3  
                   ?_set_leds_top 00A0                        _knob1_prev 015F        __size_of_update_selectMode 0059  
                      _knob2_prev 0161                        _knob3_prev 0163                        _knob4_prev 0165  
                      _knob5_prev 0167                  ?_set_subdivision 0136                         ?_showSave 0070  
                         ___aldiv 1596                           ___awdiv 12E9                   __size_of___lmul 0030  
                         ___ftadd 0A48                           ___ftdiv 16A3                           ___ftneg 1C54  
                      _knob_1_pos 01C4                        _knob_2_pos 01C6                           ___ftmul 174C  
                      _knob_3_pos 01C8                           ___fttol 0808                        _knob_4_pos 01CA  
                      _knob_5_pos 01CC                 _switchTap_pressed 0057                        ??___altoft 012A  
            _setExpressionDisplay 1CE5            __end_of_FLASH_ReadWord 1D6B                        ??___awtoft 00AB  
                      ??___ftpack 00A5                InitializeTaps@itap 00A1                           __ptext1 13E0  
                         __ptext2 1E9C                           __ptext3 05E3                           __ptext4 1D31  
                         __ptext5 1596                           __ptext6 0961                           __ptext7 1D17  
                         __ptext8 1025                           __ptext9 1CD1            ??_getSwitchBypassState 00A2  
                       _T2CONbits 001C                  _adjust_sub_delay 01B4                      __size_of_map 008B  
                    __size_of_isr 031C            ??_setSwitchBypassState 00B4               __end_of_adc_convert 1CD1  
                ___aldiv@dividend 00A4                           _wait_ms 1E6A                           clrloop0 1C74  
            end_of_initialization 03D7                        _modulation 10A3                           init_ram 1C67  
                      ??_init_adc 00A0                           initloop 1C68                        ??_init_pwm 00A0  
    updateSwitchBypassState@state 00A0                _solidring_tactiles 1063                     _longTap_timer 0155  
                   _longTap_state 0066                     _longTap_start 015A                    ??_set_leds_top 00A4  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070           __end_of_setLongTapState 1D4B  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2                        ??_showSave 00B7  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 00A2             ?_setExpressionDisplay 0070              __size_of_update_mode 0038  
                 ?_FLASH_ReadWord 00A0                 _expressionChannel 0169                         _PORTAbits 000C  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
                      _test_timer 01B0                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         i1___aldiv 1514           setFeedbackState@f_state 00A0  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 1C47                        map@out_max 00E1  
                      map@out_min 00DE       __size_of_updateSwitchBypass 00E7          __end_of_initSwitchBypass 1C9C  
                     _CCP1CONbits 0293                       ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B  
                     _CCP2CONbits 029A              _switchBypass_pressed 01D2                       _CCP3CONbits 0313  
                     _CCP4CONbits 031A                       _CCP5CONbits 031E                       _CCP6CONbits 0613  
                     _CCP7CONbits 0616                       ___ftmul@exp 00BF                adc_convert@channel 00A3  
                     _CCP8CONbits 0619                       _CCP9CONbits 061C              set_leds_top@ledState 00A2  
            __end_of_setPedalMode 1025                    __end_of___lmul 1E6A                     __pidataBIGRAM 03DB  
                    _double_timer 01A0                       _adc_convert 1CBE                     __pidataCOMMON 0003  
                  _switchTap_down 015D             i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F  
             start_initialization 0322             _bottomTactile_pressed 0157               _setDoublePressState 1025  
                      ?i1___aldiv 0020                       __end_of_map 16A3                       __end_of_isr 0320  
              _adjusted_pot_value 01B6                       ?_modulation 002E                        frexp@value 00A0  
          __size_of_resetRingLEDs 001A              ?_setDoublePressState 00B8                  ?_setLongTapState 00A0  
               ?_setPresetDisplay 0070                          ??___lmul 00A8            ??_setExpressionDisplay 00A4  
              ??_setPresetDisplay 00A4                       __pdataBANK0 0058                       __pdataBANK2 015F  
                     __pdataBANK3 01D9                       __pdataBANK4 0220                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                i1___aldiv@dividend 0024  
                   _tap_iteration 01E3          __size_of_updateSwitchTap 01E3                 __size_of___altoft 004B  
       __size_of_setFeedbackState 001A                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0              __end_of_set_leds_top 13E0  
                       ___latbits 0003    setExpressionDisplay@ledChannel 00A6                _switchBypass_state 0069  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 0120  
                   __pcstackBANK4 025C            __size_of_ring_tactiles 0050                    _expSwitchState 01E7  
                   _delay_counter 0151                  i1___lmul@product 0078          ?_updateSwitchBypassState 00A0  
              i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043                          ?_InitApp 0070  
                       __pnvBANK3 01E9             ??_setDoublePressState 00BA                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 00A0                 ??_set_leds_bottom 00A2  
              _currentBypassState 01E6                          ?___awdiv 0070                          ?___ftadd 00A8  
                        ?___ftdiv 00C5                          ?___ftneg 00A0                          ?___ftmul 00B5  
                        ?___fttol 00E7                 __size_of_showSave 0014                       _blink_delay 01D9  
             __size_of_modulation 0041                     _resetRingLEDs 1CFD                       _blink_state 01E5  
                      _B25kLength 01E9                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                       ??i1___aldiv 007C                          ?_wait_ms 00AC  
             _read_bottom_tactile 1125                    __size_of_frexp 003A                    _presetModeCnst 016B  
                  __size_of_trunc 0052               __end_of_init_timer0 0808               __end_of_init_timer2 1C54  
                       _mod_value 01CE                         _mod_timer 01A8                  ??_InitializeTaps 00A0  
                 ___aldiv@divisor 00A0                   ___aldiv@counter 00A9                    _presetSaveMode 0055  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 01DD                         clear_ram0 1C73  
                       _tap_timer 0049                         _tap_total 01AC             __size_of_setPedalMode 0023  
                   set_leds_top@x 00A0                     _ring_tactiles 1299                  ??_FLASH_ReadWord 00A2  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6  
                       map@in_max 00DB                         map@in_min 00D8                    ?_resetRingLEDs 0070  
                       _sub_timer 0045                        _ADCON0bits 009D                          i1___lmul 1DDB  
                      _ADCON1bits 009E                         main@i_394 025E                         main@i_395 0260  
                       main@i_396 0262          __size_of_set_subdivision 00BA                  set_subdivision@x 0136  
                set_subdivision@y 0138         __size_of_read_top_tactile 0050     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 004A                 ??_updateSwitchTap 00BC                 ___lmul@multiplier 00A0  
                    _setPedalMode 1002                 _ReadSavedSettings 149E                 ?_initSwitchBypass 0070  
               ring_tactiles@iLed 00B3                    wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070  
                  wait_ms@timemsl 00AE                         frexp@eptr 00A3       setSwitchBypassState@f_state 00B2  
              ??_initSwitchBypass 00B6                  __size_of_InitApp 0030                    ?_ring_tactiles 0070  
                     _mode1_state 01D8                     ??_update_mode 00A7                       _mode2_state 0054  
           ??_read_bottom_tactile 00B2               updateSwitchTap@iCnt 00C4               ??_ReadSavedSettings 00A4  
                      _APFCONbits 011D                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 11FE                  __size_of___ftmul 00B4  
                __size_of___fttol 009F                          ___awtoft 1D6B             __size_of_set_leds_top 0054  
                        ___ftpack 1439                          _map$2397 00E4            _preset_programmning_on 015C  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  set_leds_bottom@x 00A0  
                _setFeedbackState 1D17                       _init_timer0 0801                       _init_timer2 1C4B  
              _delay_time_changed 01DB        __end_of_updateSwitchBypass 0A48                          __ptext10 1063  
                        __ptext11 1299                          __ptext20 11FE                          __ptext12 1002  
                        __ptext21 1D6B                          __ptext13 07C6                          __ptext30 1C8D  
                        __ptext22 1249                          __ptext14 1CE5                          __ptext31 11B4  
                        __ptext23 1125                          __ptext15 1CFD                          __ptext40 1D4B  
                        __ptext32 1E6A                          __ptext24 1618                          __ptext16 08A7  
                        __ptext41 1D8D                          __ptext33 1E3A                          __ptext25 1C54  
                        __ptext17 133A                          __ptext50 10A3                          __ptext42 1E0A  
                        __ptext34 0002                          __ptext26 174C                          __ptext18 1ED4  
                        __ptext51 1DDB                          __ptext43 10E4                          __ptext35 1C47  
                        __ptext27 16A3                          __ptext19 0808                          __ptext52 1514  
                        __ptext44 1C4B                          __ptext36 1CBE                          __ptext28 0A48  
                        __ptext53 12E9                          __ptext45 0801                          __ptext37 149E  
                        __ptext29 1439                          __ptext46 1C5D                          __ptext38 138C  
                        __ptext47 1C43                          __ptext39 1F0E                          __ptext49 116C  
       __end_of_ReadSavedSettings 1514                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 01A4                     _presetChannel 0068                      ??_modulation 0036  
                     _mod_counter 0051                        trunc@expon 0134                          _init_adc 1C5D  
                   __size_of_main 04C2                          _init_pwm 10E4      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 138C                          _showSave 1CD1                          _num_taps 0067  
                        int$flags 007E                   ??_resetRingLEDs 00A4                   i1set_leds_top@x 0070  
             __end_of_update_mode 1ED4                          _symmetry 01E1                __end_of_modulation 10E4  
                      _INTCONbits 000B         __size_of_setPresetDisplay 003A                       _tap_history 0248  
               ??_set_subdivision 013A                          intlevel1 0000                   _set_leds_bottom 1F0E  
                      _PMCON1bits 0195                   ??_ring_tactiles 00B2                 __CFG_CLKOUTEN$OFF 0000  
                 _reset_sub_delay 01D0                        _OSCCONbits 0099                      _preset_blink 015B  
                  i1_set_leds_top 116C  __size_of_updateSwitchBypassState 0001     __size_of_setExpressionDisplay 0018  
        __size_of_setLongTapState 001A                  _read_top_tactile 1249                      ___aldiv@sign 00AA  
      __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 1063                      _CCP10CONbits 061F  
               _bottom_push_state 0060        setPresetDisplay@ledChannel 00A6            __end_ofi1_set_leds_top 11B4  
