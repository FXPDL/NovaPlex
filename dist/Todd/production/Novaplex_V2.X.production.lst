

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Jan 04 10:04:28 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	clrtext,global,class=CODE,delta=2
    30                           	psect	inittext,global,class=CODE,delta=2
    31                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    32                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    33                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    34                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    35                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    36                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    37                           	psect	text1,local,class=CODE,merge=1,delta=2
    38                           	psect	text2,local,class=CODE,merge=1,delta=2
    39                           	psect	text3,local,class=CODE,merge=1,delta=2
    40                           	psect	text4,local,class=CODE,merge=1,delta=2
    41                           	psect	text5,local,class=CODE,merge=1,delta=2
    42                           	psect	text6,local,class=CODE,merge=1,delta=2
    43                           	psect	text7,local,class=CODE,merge=1,delta=2
    44                           	psect	text8,local,class=CODE,merge=1,delta=2
    45                           	psect	text9,local,class=CODE,merge=1,delta=2
    46                           	psect	text10,local,class=CODE,merge=1,delta=2
    47                           	psect	text11,local,class=CODE,merge=1,delta=2
    48                           	psect	text12,local,class=CODE,merge=1,delta=2
    49                           	psect	text13,local,class=CODE,merge=1,delta=2
    50                           	psect	text14,local,class=CODE,merge=1,delta=2
    51                           	psect	text15,local,class=CODE,merge=1,delta=2
    52                           	psect	text16,local,class=CODE,merge=1,delta=2
    53                           	psect	text17,local,class=CODE,merge=1,delta=2
    54                           	psect	text18,local,class=CODE,merge=1,delta=2
    55                           	psect	text19,local,class=CODE,merge=1,delta=2
    56                           	psect	text20,local,class=CODE,merge=1,delta=2
    57                           	psect	text21,local,class=CODE,merge=1,delta=2
    58                           	psect	text22,local,class=CODE,merge=1,delta=2
    59                           	psect	text23,local,class=CODE,merge=1,delta=2
    60                           	psect	text24,local,class=CODE,merge=1,delta=2
    61                           	psect	text25,local,class=CODE,merge=1,delta=2
    62                           	psect	text26,local,class=CODE,merge=1,delta=2
    63                           	psect	text27,local,class=CODE,merge=1,delta=2
    64                           	psect	text28,local,class=CODE,merge=1,delta=2
    65                           	psect	text29,local,class=CODE,merge=1,delta=2
    66                           	psect	text30,local,class=CODE,merge=1,delta=2
    67                           	psect	text31,local,class=CODE,merge=1,delta=2
    68                           	psect	text32,local,class=CODE,merge=1,delta=2
    69                           	psect	text33,local,class=CODE,merge=1,delta=2
    70                           	psect	text34,local,class=CODE,merge=1,delta=2
    71                           	psect	text35,local,class=CODE,merge=1,delta=2
    72                           	psect	text36,local,class=CODE,merge=1,delta=2
    73                           	psect	text37,local,class=CODE,merge=1,delta=2
    74                           	psect	text38,local,class=CODE,merge=1,delta=2
    75                           	psect	text39,local,class=CODE,merge=1,delta=2
    76                           	psect	text40,local,class=CODE,merge=1,delta=2
    77                           	psect	text41,local,class=CODE,merge=1,delta=2
    78                           	psect	text42,local,class=CODE,merge=1,delta=2
    79                           	psect	text43,local,class=CODE,merge=1,delta=2
    80                           	psect	text44,local,class=CODE,merge=1,delta=2
    81                           	psect	text45,local,class=CODE,merge=1,delta=2
    82                           	psect	text46,local,class=CODE,merge=1,delta=2
    83                           	psect	text47,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text49,local,class=CODE,merge=1,delta=2
    86                           	psect	text50,local,class=CODE,merge=1,delta=2
    87                           	psect	text51,local,class=CODE,merge=1,delta=2
    88                           	psect	text52,local,class=CODE,merge=1,delta=2
    89                           	psect	text53,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x920,80
    91                           	dabs	1,0x8A0,80
    92                           	dabs	1,0x820,80
    93                           	dabs	1,0x7A0,80
    94                           	dabs	1,0x720,80
    95                           	dabs	1,0x6A0,80
    96                           	dabs	1,0x648,40
    97                           	dabs	1,0x23E8,0,_delayArray
    98                           	dabs	1,0x7E,2
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0099                     	;# 
   142  009A                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  011D                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  018F                     	;# 
   159  0190                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020D                     	;# 
   193  020F                     	;# 
   194  0210                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021E                     	;# 
   216  021F                     	;# 
   217  028C                     	;# 
   218  028D                     	;# 
   219  0291                     	;# 
   220  0291                     	;# 
   221  0292                     	;# 
   222  0293                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  029F                     	;# 
   230  030C                     	;# 
   231  030D                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  040C                     	;# 
   250  040D                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  048D                     	;# 
   268  0491                     	;# 
   269  0491                     	;# 
   270  0492                     	;# 
   271  0492                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0494                     	;# 
   276  0494                     	;# 
   277  0495                     	;# 
   278  0495                     	;# 
   279  0496                     	;# 
   280  0496                     	;# 
   281  0497                     	;# 
   282  0497                     	;# 
   283  0595                     	;# 
   284  0596                     	;# 
   285  0597                     	;# 
   286  059C                     	;# 
   287  059D                     	;# 
   288  059E                     	;# 
   289  0611                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061D                     	;# 
   306  061D                     	;# 
   307  061E                     	;# 
   308  061F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  008F                     	;# 
   354  0090                     	;# 
   355  0091                     	;# 
   356  0092                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0110                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018F                     	;# 
   380  0190                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  020F                     	;# 
   415  0210                     	;# 
   416  0211                     	;# 
   417  0211                     	;# 
   418  0212                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0213                     	;# 
   422  0214                     	;# 
   423  0214                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0216                     	;# 
   428  0216                     	;# 
   429  0217                     	;# 
   430  0217                     	;# 
   431  0219                     	;# 
   432  021A                     	;# 
   433  021B                     	;# 
   434  021C                     	;# 
   435  021D                     	;# 
   436  021E                     	;# 
   437  021F                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  0291                     	;# 
   441  0291                     	;# 
   442  0292                     	;# 
   443  0293                     	;# 
   444  0298                     	;# 
   445  0298                     	;# 
   446  0299                     	;# 
   447  029A                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  029F                     	;# 
   451  030C                     	;# 
   452  030D                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  031C                     	;# 
   462  031C                     	;# 
   463  031D                     	;# 
   464  031E                     	;# 
   465  038C                     	;# 
   466  038D                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  040C                     	;# 
   471  040D                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  048D                     	;# 
   489  0491                     	;# 
   490  0491                     	;# 
   491  0492                     	;# 
   492  0492                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0494                     	;# 
   497  0494                     	;# 
   498  0495                     	;# 
   499  0495                     	;# 
   500  0496                     	;# 
   501  0496                     	;# 
   502  0497                     	;# 
   503  0497                     	;# 
   504  0595                     	;# 
   505  0596                     	;# 
   506  0597                     	;# 
   507  059C                     	;# 
   508  059D                     	;# 
   509  059E                     	;# 
   510  0611                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  0614                     	;# 
   516  0615                     	;# 
   517  0616                     	;# 
   518  0617                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  061A                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061D                     	;# 
   527  061D                     	;# 
   528  061E                     	;# 
   529  061F                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0116                     	;# 
   596  0117                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018F                     	;# 
   601  0190                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0197                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  020D                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0219                     	;# 
   653  021A                     	;# 
   654  021B                     	;# 
   655  021C                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029D                     	;# 
   670  029E                     	;# 
   671  029F                     	;# 
   672  030C                     	;# 
   673  030D                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  031C                     	;# 
   683  031C                     	;# 
   684  031D                     	;# 
   685  031E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  040C                     	;# 
   692  040D                     	;# 
   693  0411                     	;# 
   694  0411                     	;# 
   695  0412                     	;# 
   696  0413                     	;# 
   697  0414                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  0418                     	;# 
   702  0418                     	;# 
   703  0419                     	;# 
   704  041A                     	;# 
   705  041B                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  048D                     	;# 
   710  0491                     	;# 
   711  0491                     	;# 
   712  0492                     	;# 
   713  0492                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0494                     	;# 
   718  0494                     	;# 
   719  0495                     	;# 
   720  0495                     	;# 
   721  0496                     	;# 
   722  0496                     	;# 
   723  0497                     	;# 
   724  0497                     	;# 
   725  0595                     	;# 
   726  0596                     	;# 
   727  0597                     	;# 
   728  059C                     	;# 
   729  059D                     	;# 
   730  059E                     	;# 
   731  0611                     	;# 
   732  0611                     	;# 
   733  0612                     	;# 
   734  0613                     	;# 
   735  0614                     	;# 
   736  0614                     	;# 
   737  0615                     	;# 
   738  0616                     	;# 
   739  0617                     	;# 
   740  0617                     	;# 
   741  0618                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061A                     	;# 
   745  061B                     	;# 
   746  061C                     	;# 
   747  061D                     	;# 
   748  061D                     	;# 
   749  061E                     	;# 
   750  061F                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0016                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001C                     	;# 
   792  008C                     	;# 
   793  008D                     	;# 
   794  008E                     	;# 
   795  008F                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0095                     	;# 
   802  0096                     	;# 
   803  0097                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0110                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018F                     	;# 
   822  0190                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0197                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020D                     	;# 
   856  020F                     	;# 
   857  0210                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0216                     	;# 
   871  0217                     	;# 
   872  0217                     	;# 
   873  0219                     	;# 
   874  021A                     	;# 
   875  021B                     	;# 
   876  021C                     	;# 
   877  021D                     	;# 
   878  021E                     	;# 
   879  021F                     	;# 
   880  028C                     	;# 
   881  028D                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029D                     	;# 
   891  029E                     	;# 
   892  029F                     	;# 
   893  030C                     	;# 
   894  030D                     	;# 
   895  0311                     	;# 
   896  0311                     	;# 
   897  0312                     	;# 
   898  0313                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  040C                     	;# 
   913  040D                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  048D                     	;# 
   931  0491                     	;# 
   932  0491                     	;# 
   933  0492                     	;# 
   934  0492                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0494                     	;# 
   939  0494                     	;# 
   940  0495                     	;# 
   941  0495                     	;# 
   942  0496                     	;# 
   943  0496                     	;# 
   944  0497                     	;# 
   945  0497                     	;# 
   946  0595                     	;# 
   947  0596                     	;# 
   948  0597                     	;# 
   949  059C                     	;# 
   950  059D                     	;# 
   951  059E                     	;# 
   952  0611                     	;# 
   953  0611                     	;# 
   954  0612                     	;# 
   955  0613                     	;# 
   956  0614                     	;# 
   957  0614                     	;# 
   958  0615                     	;# 
   959  0616                     	;# 
   960  0617                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061D                     	;# 
   969  061D                     	;# 
   970  061E                     	;# 
   971  061F                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018F                     	;# 
  1043  0190                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020D                     	;# 
  1077  020F                     	;# 
  1078  0210                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  028C                     	;# 
  1102  028D                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029D                     	;# 
  1112  029E                     	;# 
  1113  029F                     	;# 
  1114  030C                     	;# 
  1115  030D                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  031C                     	;# 
  1125  031C                     	;# 
  1126  031D                     	;# 
  1127  031E                     	;# 
  1128  038C                     	;# 
  1129  038D                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  040C                     	;# 
  1134  040D                     	;# 
  1135  0411                     	;# 
  1136  0411                     	;# 
  1137  0412                     	;# 
  1138  0413                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  0418                     	;# 
  1145  0419                     	;# 
  1146  041A                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  048D                     	;# 
  1152  0491                     	;# 
  1153  0491                     	;# 
  1154  0492                     	;# 
  1155  0492                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0494                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0495                     	;# 
  1163  0496                     	;# 
  1164  0496                     	;# 
  1165  0497                     	;# 
  1166  0497                     	;# 
  1167  0595                     	;# 
  1168  0596                     	;# 
  1169  0597                     	;# 
  1170  059C                     	;# 
  1171  059D                     	;# 
  1172  059E                     	;# 
  1173  0611                     	;# 
  1174  0611                     	;# 
  1175  0612                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0614                     	;# 
  1179  0615                     	;# 
  1180  0616                     	;# 
  1181  0617                     	;# 
  1182  0617                     	;# 
  1183  0618                     	;# 
  1184  0619                     	;# 
  1185  061A                     	;# 
  1186  061A                     	;# 
  1187  061B                     	;# 
  1188  061C                     	;# 
  1189  061D                     	;# 
  1190  061D                     	;# 
  1191  061E                     	;# 
  1192  061F                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  000F                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0116                     	;# 
  1259  0117                     	;# 
  1260  011D                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018F                     	;# 
  1264  0190                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0197                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  020D                     	;# 
  1298  020F                     	;# 
  1299  0210                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0298                     	;# 
  1329  0298                     	;# 
  1330  0299                     	;# 
  1331  029A                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0318                     	;# 
  1342  0318                     	;# 
  1343  0319                     	;# 
  1344  031A                     	;# 
  1345  031C                     	;# 
  1346  031C                     	;# 
  1347  031D                     	;# 
  1348  031E                     	;# 
  1349  038C                     	;# 
  1350  038D                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  040C                     	;# 
  1355  040D                     	;# 
  1356  0411                     	;# 
  1357  0411                     	;# 
  1358  0412                     	;# 
  1359  0413                     	;# 
  1360  0414                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  0418                     	;# 
  1365  0418                     	;# 
  1366  0419                     	;# 
  1367  041A                     	;# 
  1368  041B                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  048D                     	;# 
  1373  0491                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0492                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0494                     	;# 
  1381  0494                     	;# 
  1382  0495                     	;# 
  1383  0495                     	;# 
  1384  0496                     	;# 
  1385  0496                     	;# 
  1386  0497                     	;# 
  1387  0497                     	;# 
  1388  0595                     	;# 
  1389  0596                     	;# 
  1390  0597                     	;# 
  1391  059C                     	;# 
  1392  059D                     	;# 
  1393  059E                     	;# 
  1394  0611                     	;# 
  1395  0611                     	;# 
  1396  0612                     	;# 
  1397  0613                     	;# 
  1398  0614                     	;# 
  1399  0614                     	;# 
  1400  0615                     	;# 
  1401  0616                     	;# 
  1402  0617                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  061A                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061D                     	;# 
  1411  061D                     	;# 
  1412  061E                     	;# 
  1413  061F                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  000F                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0016                     	;# 
  1448  0016                     	;# 
  1449  0017                     	;# 
  1450  0018                     	;# 
  1451  0019                     	;# 
  1452  001A                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  008F                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0094                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  010F                     	;# 
  1478  0110                     	;# 
  1479  0116                     	;# 
  1480  0117                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0197                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  020D                     	;# 
  1519  020F                     	;# 
  1520  0210                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  029F                     	;# 
  1556  030C                     	;# 
  1557  030D                     	;# 
  1558  0311                     	;# 
  1559  0311                     	;# 
  1560  0312                     	;# 
  1561  0313                     	;# 
  1562  0318                     	;# 
  1563  0318                     	;# 
  1564  0319                     	;# 
  1565  031A                     	;# 
  1566  031C                     	;# 
  1567  031C                     	;# 
  1568  031D                     	;# 
  1569  031E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  040C                     	;# 
  1576  040D                     	;# 
  1577  0411                     	;# 
  1578  0411                     	;# 
  1579  0412                     	;# 
  1580  0413                     	;# 
  1581  0414                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  0418                     	;# 
  1586  0418                     	;# 
  1587  0419                     	;# 
  1588  041A                     	;# 
  1589  041B                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  048D                     	;# 
  1594  0491                     	;# 
  1595  0491                     	;# 
  1596  0492                     	;# 
  1597  0492                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0494                     	;# 
  1602  0494                     	;# 
  1603  0495                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  0496                     	;# 
  1607  0497                     	;# 
  1608  0497                     	;# 
  1609  0595                     	;# 
  1610  0596                     	;# 
  1611  0597                     	;# 
  1612  059C                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  0611                     	;# 
  1616  0611                     	;# 
  1617  0612                     	;# 
  1618  0613                     	;# 
  1619  0614                     	;# 
  1620  0614                     	;# 
  1621  0615                     	;# 
  1622  0616                     	;# 
  1623  0617                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  061A                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061D                     	;# 
  1632  061D                     	;# 
  1633  061E                     	;# 
  1634  061F                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  000F                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0013                     	;# 
  1666  0014                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  008F                     	;# 
  1680  0090                     	;# 
  1681  0091                     	;# 
  1682  0092                     	;# 
  1683  0093                     	;# 
  1684  0094                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  010C                     	;# 
  1696  010D                     	;# 
  1697  010E                     	;# 
  1698  010F                     	;# 
  1699  0110                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020D                     	;# 
  1740  020F                     	;# 
  1741  0210                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0219                     	;# 
  1758  021A                     	;# 
  1759  021B                     	;# 
  1760  021C                     	;# 
  1761  021D                     	;# 
  1762  021E                     	;# 
  1763  021F                     	;# 
  1764  028C                     	;# 
  1765  028D                     	;# 
  1766  0291                     	;# 
  1767  0291                     	;# 
  1768  0292                     	;# 
  1769  0293                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  030C                     	;# 
  1778  030D                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0318                     	;# 
  1784  0318                     	;# 
  1785  0319                     	;# 
  1786  031A                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  040C                     	;# 
  1797  040D                     	;# 
  1798  0411                     	;# 
  1799  0411                     	;# 
  1800  0412                     	;# 
  1801  0413                     	;# 
  1802  0414                     	;# 
  1803  0415                     	;# 
  1804  0416                     	;# 
  1805  0417                     	;# 
  1806  0418                     	;# 
  1807  0418                     	;# 
  1808  0419                     	;# 
  1809  041A                     	;# 
  1810  041B                     	;# 
  1811  041C                     	;# 
  1812  041D                     	;# 
  1813  041E                     	;# 
  1814  048D                     	;# 
  1815  0491                     	;# 
  1816  0491                     	;# 
  1817  0492                     	;# 
  1818  0492                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0494                     	;# 
  1823  0494                     	;# 
  1824  0495                     	;# 
  1825  0495                     	;# 
  1826  0496                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0497                     	;# 
  1830  0595                     	;# 
  1831  0596                     	;# 
  1832  0597                     	;# 
  1833  059C                     	;# 
  1834  059D                     	;# 
  1835  059E                     	;# 
  1836  0611                     	;# 
  1837  0611                     	;# 
  1838  0612                     	;# 
  1839  0613                     	;# 
  1840  0614                     	;# 
  1841  0614                     	;# 
  1842  0615                     	;# 
  1843  0616                     	;# 
  1844  0617                     	;# 
  1845  0617                     	;# 
  1846  0618                     	;# 
  1847  0619                     	;# 
  1848  061A                     	;# 
  1849  061A                     	;# 
  1850  061B                     	;# 
  1851  061C                     	;# 
  1852  061D                     	;# 
  1853  061D                     	;# 
  1854  061E                     	;# 
  1855  061F                     	;# 
  1856  0FE4                     	;# 
  1857  0FE5                     	;# 
  1858  0FE6                     	;# 
  1859  0FE7                     	;# 
  1860  0FE8                     	;# 
  1861  0FE9                     	;# 
  1862  0FEA                     	;# 
  1863  0FEB                     	;# 
  1864  0FED                     	;# 
  1865  0FEE                     	;# 
  1866  0FEF                     	;# 
  1867  0000                     	;# 
  1868  0001                     	;# 
  1869  0002                     	;# 
  1870  0003                     	;# 
  1871  0004                     	;# 
  1872  0005                     	;# 
  1873  0006                     	;# 
  1874  0007                     	;# 
  1875  0008                     	;# 
  1876  0009                     	;# 
  1877  000A                     	;# 
  1878  000B                     	;# 
  1879  000C                     	;# 
  1880  000D                     	;# 
  1881  000E                     	;# 
  1882  000F                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0013                     	;# 
  1887  0014                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  008F                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  010F                     	;# 
  1920  0110                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018F                     	;# 
  1927  0190                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0197                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  020D                     	;# 
  1961  020F                     	;# 
  1962  0210                     	;# 
  1963  0211                     	;# 
  1964  0211                     	;# 
  1965  0212                     	;# 
  1966  0212                     	;# 
  1967  0213                     	;# 
  1968  0213                     	;# 
  1969  0214                     	;# 
  1970  0214                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0216                     	;# 
  1975  0216                     	;# 
  1976  0217                     	;# 
  1977  0217                     	;# 
  1978  0219                     	;# 
  1979  021A                     	;# 
  1980  021B                     	;# 
  1981  021C                     	;# 
  1982  021D                     	;# 
  1983  021E                     	;# 
  1984  021F                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  0291                     	;# 
  1988  0291                     	;# 
  1989  0292                     	;# 
  1990  0293                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029D                     	;# 
  1996  029E                     	;# 
  1997  029F                     	;# 
  1998  030C                     	;# 
  1999  030D                     	;# 
  2000  0311                     	;# 
  2001  0311                     	;# 
  2002  0312                     	;# 
  2003  0313                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  038C                     	;# 
  2013  038D                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  040C                     	;# 
  2018  040D                     	;# 
  2019  0411                     	;# 
  2020  0411                     	;# 
  2021  0412                     	;# 
  2022  0413                     	;# 
  2023  0414                     	;# 
  2024  0415                     	;# 
  2025  0416                     	;# 
  2026  0417                     	;# 
  2027  0418                     	;# 
  2028  0418                     	;# 
  2029  0419                     	;# 
  2030  041A                     	;# 
  2031  041B                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  048D                     	;# 
  2036  0491                     	;# 
  2037  0491                     	;# 
  2038  0492                     	;# 
  2039  0492                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0494                     	;# 
  2044  0494                     	;# 
  2045  0495                     	;# 
  2046  0495                     	;# 
  2047  0496                     	;# 
  2048  0496                     	;# 
  2049  0497                     	;# 
  2050  0497                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0597                     	;# 
  2054  059C                     	;# 
  2055  059D                     	;# 
  2056  059E                     	;# 
  2057  0611                     	;# 
  2058  0611                     	;# 
  2059  0612                     	;# 
  2060  0613                     	;# 
  2061  0614                     	;# 
  2062  0614                     	;# 
  2063  0615                     	;# 
  2064  0616                     	;# 
  2065  0617                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  061A                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061D                     	;# 
  2074  061D                     	;# 
  2075  061E                     	;# 
  2076  061F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  000F                     	;# 
  2104  0010                     	;# 
  2105  0011                     	;# 
  2106  0012                     	;# 
  2107  0013                     	;# 
  2108  0014                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  008F                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0093                     	;# 
  2126  0094                     	;# 
  2127  0095                     	;# 
  2128  0096                     	;# 
  2129  0097                     	;# 
  2130  0099                     	;# 
  2131  009A                     	;# 
  2132  009B                     	;# 
  2133  009B                     	;# 
  2134  009C                     	;# 
  2135  009D                     	;# 
  2136  009E                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  010F                     	;# 
  2141  0110                     	;# 
  2142  0116                     	;# 
  2143  0117                     	;# 
  2144  011D                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018F                     	;# 
  2148  0190                     	;# 
  2149  0191                     	;# 
  2150  0191                     	;# 
  2151  0192                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0197                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  020D                     	;# 
  2182  020F                     	;# 
  2183  0210                     	;# 
  2184  0211                     	;# 
  2185  0211                     	;# 
  2186  0212                     	;# 
  2187  0212                     	;# 
  2188  0213                     	;# 
  2189  0213                     	;# 
  2190  0214                     	;# 
  2191  0214                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0216                     	;# 
  2196  0216                     	;# 
  2197  0217                     	;# 
  2198  0217                     	;# 
  2199  0219                     	;# 
  2200  021A                     	;# 
  2201  021B                     	;# 
  2202  021C                     	;# 
  2203  021D                     	;# 
  2204  021E                     	;# 
  2205  021F                     	;# 
  2206  028C                     	;# 
  2207  028D                     	;# 
  2208  0291                     	;# 
  2209  0291                     	;# 
  2210  0292                     	;# 
  2211  0293                     	;# 
  2212  0298                     	;# 
  2213  0298                     	;# 
  2214  0299                     	;# 
  2215  029A                     	;# 
  2216  029D                     	;# 
  2217  029E                     	;# 
  2218  029F                     	;# 
  2219  030C                     	;# 
  2220  030D                     	;# 
  2221  0311                     	;# 
  2222  0311                     	;# 
  2223  0312                     	;# 
  2224  0313                     	;# 
  2225  0318                     	;# 
  2226  0318                     	;# 
  2227  0319                     	;# 
  2228  031A                     	;# 
  2229  031C                     	;# 
  2230  031C                     	;# 
  2231  031D                     	;# 
  2232  031E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  040C                     	;# 
  2239  040D                     	;# 
  2240  0411                     	;# 
  2241  0411                     	;# 
  2242  0412                     	;# 
  2243  0413                     	;# 
  2244  0414                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  0418                     	;# 
  2249  0418                     	;# 
  2250  0419                     	;# 
  2251  041A                     	;# 
  2252  041B                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  048D                     	;# 
  2257  0491                     	;# 
  2258  0491                     	;# 
  2259  0492                     	;# 
  2260  0492                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0494                     	;# 
  2266  0495                     	;# 
  2267  0495                     	;# 
  2268  0496                     	;# 
  2269  0496                     	;# 
  2270  0497                     	;# 
  2271  0497                     	;# 
  2272  0595                     	;# 
  2273  0596                     	;# 
  2274  0597                     	;# 
  2275  059C                     	;# 
  2276  059D                     	;# 
  2277  059E                     	;# 
  2278  0611                     	;# 
  2279  0611                     	;# 
  2280  0612                     	;# 
  2281  0613                     	;# 
  2282  0614                     	;# 
  2283  0614                     	;# 
  2284  0615                     	;# 
  2285  0616                     	;# 
  2286  0617                     	;# 
  2287  0617                     	;# 
  2288  0618                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061A                     	;# 
  2292  061B                     	;# 
  2293  061C                     	;# 
  2294  061D                     	;# 
  2295  061D                     	;# 
  2296  061E                     	;# 
  2297  061F                     	;# 
  2298  0FE4                     	;# 
  2299  0FE5                     	;# 
  2300  0FE6                     	;# 
  2301  0FE7                     	;# 
  2302  0FE8                     	;# 
  2303  0FE9                     	;# 
  2304  0FEA                     	;# 
  2305  0FEB                     	;# 
  2306  0FED                     	;# 
  2307  0FEE                     	;# 
  2308  0FEF                     	;# 
  2309  0000                     	;# 
  2310  0001                     	;# 
  2311  0002                     	;# 
  2312  0003                     	;# 
  2313  0004                     	;# 
  2314  0005                     	;# 
  2315  0006                     	;# 
  2316  0007                     	;# 
  2317  0008                     	;# 
  2318  0009                     	;# 
  2319  000A                     	;# 
  2320  000B                     	;# 
  2321  000C                     	;# 
  2322  000D                     	;# 
  2323  000E                     	;# 
  2324  000F                     	;# 
  2325  0010                     	;# 
  2326  0011                     	;# 
  2327  0012                     	;# 
  2328  0013                     	;# 
  2329  0014                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  008F                     	;# 
  2343  0090                     	;# 
  2344  0091                     	;# 
  2345  0092                     	;# 
  2346  0093                     	;# 
  2347  0094                     	;# 
  2348  0095                     	;# 
  2349  0096                     	;# 
  2350  0097                     	;# 
  2351  0099                     	;# 
  2352  009A                     	;# 
  2353  009B                     	;# 
  2354  009B                     	;# 
  2355  009C                     	;# 
  2356  009D                     	;# 
  2357  009E                     	;# 
  2358  010C                     	;# 
  2359  010D                     	;# 
  2360  010E                     	;# 
  2361  010F                     	;# 
  2362  0110                     	;# 
  2363  0116                     	;# 
  2364  0117                     	;# 
  2365  011D                     	;# 
  2366  018C                     	;# 
  2367  018D                     	;# 
  2368  018F                     	;# 
  2369  0190                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020D                     	;# 
  2403  020F                     	;# 
  2404  0210                     	;# 
  2405  0211                     	;# 
  2406  0211                     	;# 
  2407  0212                     	;# 
  2408  0212                     	;# 
  2409  0213                     	;# 
  2410  0213                     	;# 
  2411  0214                     	;# 
  2412  0214                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0216                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0217                     	;# 
  2420  0219                     	;# 
  2421  021A                     	;# 
  2422  021B                     	;# 
  2423  021C                     	;# 
  2424  021D                     	;# 
  2425  021E                     	;# 
  2426  021F                     	;# 
  2427  028C                     	;# 
  2428  028D                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0298                     	;# 
  2434  0298                     	;# 
  2435  0299                     	;# 
  2436  029A                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  0311                     	;# 
  2443  0311                     	;# 
  2444  0312                     	;# 
  2445  0313                     	;# 
  2446  0318                     	;# 
  2447  0318                     	;# 
  2448  0319                     	;# 
  2449  031A                     	;# 
  2450  031C                     	;# 
  2451  031C                     	;# 
  2452  031D                     	;# 
  2453  031E                     	;# 
  2454  038C                     	;# 
  2455  038D                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  040C                     	;# 
  2460  040D                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  048D                     	;# 
  2478  0491                     	;# 
  2479  0491                     	;# 
  2480  0492                     	;# 
  2481  0492                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0494                     	;# 
  2486  0494                     	;# 
  2487  0495                     	;# 
  2488  0495                     	;# 
  2489  0496                     	;# 
  2490  0496                     	;# 
  2491  0497                     	;# 
  2492  0497                     	;# 
  2493  0595                     	;# 
  2494  0596                     	;# 
  2495  0597                     	;# 
  2496  059C                     	;# 
  2497  059D                     	;# 
  2498  059E                     	;# 
  2499  0611                     	;# 
  2500  0611                     	;# 
  2501  0612                     	;# 
  2502  0613                     	;# 
  2503  0614                     	;# 
  2504  0614                     	;# 
  2505  0615                     	;# 
  2506  0616                     	;# 
  2507  0617                     	;# 
  2508  0617                     	;# 
  2509  0618                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061A                     	;# 
  2513  061B                     	;# 
  2514  061C                     	;# 
  2515  061D                     	;# 
  2516  061D                     	;# 
  2517  061E                     	;# 
  2518  061F                     	;# 
  2519  0FE4                     	;# 
  2520  0FE5                     	;# 
  2521  0FE6                     	;# 
  2522  0FE7                     	;# 
  2523  0FE8                     	;# 
  2524  0FE9                     	;# 
  2525  0FEA                     	;# 
  2526  0FEB                     	;# 
  2527  0FED                     	;# 
  2528  0FEE                     	;# 
  2529  0FEF                     	;# 
  2530  0000                     	;# 
  2531  0001                     	;# 
  2532  0002                     	;# 
  2533  0003                     	;# 
  2534  0004                     	;# 
  2535  0005                     	;# 
  2536  0006                     	;# 
  2537  0007                     	;# 
  2538  0008                     	;# 
  2539  0009                     	;# 
  2540  000A                     	;# 
  2541  000B                     	;# 
  2542  000C                     	;# 
  2543  000D                     	;# 
  2544  000E                     	;# 
  2545  000F                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0016                     	;# 
  2553  0016                     	;# 
  2554  0017                     	;# 
  2555  0018                     	;# 
  2556  0019                     	;# 
  2557  001A                     	;# 
  2558  001B                     	;# 
  2559  001C                     	;# 
  2560  008C                     	;# 
  2561  008D                     	;# 
  2562  008E                     	;# 
  2563  008F                     	;# 
  2564  0090                     	;# 
  2565  0091                     	;# 
  2566  0092                     	;# 
  2567  0093                     	;# 
  2568  0094                     	;# 
  2569  0095                     	;# 
  2570  0096                     	;# 
  2571  0097                     	;# 
  2572  0099                     	;# 
  2573  009A                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  010C                     	;# 
  2580  010D                     	;# 
  2581  010E                     	;# 
  2582  010F                     	;# 
  2583  0110                     	;# 
  2584  0116                     	;# 
  2585  0117                     	;# 
  2586  011D                     	;# 
  2587  018C                     	;# 
  2588  018D                     	;# 
  2589  018F                     	;# 
  2590  0190                     	;# 
  2591  0191                     	;# 
  2592  0191                     	;# 
  2593  0192                     	;# 
  2594  0193                     	;# 
  2595  0193                     	;# 
  2596  0194                     	;# 
  2597  0195                     	;# 
  2598  0196                     	;# 
  2599  0197                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  020D                     	;# 
  2624  020F                     	;# 
  2625  0210                     	;# 
  2626  0211                     	;# 
  2627  0211                     	;# 
  2628  0212                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0213                     	;# 
  2632  0214                     	;# 
  2633  0214                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  0219                     	;# 
  2642  021A                     	;# 
  2643  021B                     	;# 
  2644  021C                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  0291                     	;# 
  2651  0291                     	;# 
  2652  0292                     	;# 
  2653  0293                     	;# 
  2654  0298                     	;# 
  2655  0298                     	;# 
  2656  0299                     	;# 
  2657  029A                     	;# 
  2658  029D                     	;# 
  2659  029E                     	;# 
  2660  029F                     	;# 
  2661  030C                     	;# 
  2662  030D                     	;# 
  2663  0311                     	;# 
  2664  0311                     	;# 
  2665  0312                     	;# 
  2666  0313                     	;# 
  2667  0318                     	;# 
  2668  0318                     	;# 
  2669  0319                     	;# 
  2670  031A                     	;# 
  2671  031C                     	;# 
  2672  031C                     	;# 
  2673  031D                     	;# 
  2674  031E                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  040C                     	;# 
  2681  040D                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  048D                     	;# 
  2699  0491                     	;# 
  2700  0491                     	;# 
  2701  0492                     	;# 
  2702  0492                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0494                     	;# 
  2707  0494                     	;# 
  2708  0495                     	;# 
  2709  0495                     	;# 
  2710  0496                     	;# 
  2711  0496                     	;# 
  2712  0497                     	;# 
  2713  0497                     	;# 
  2714  0595                     	;# 
  2715  0596                     	;# 
  2716  0597                     	;# 
  2717  059C                     	;# 
  2718  059D                     	;# 
  2719  059E                     	;# 
  2720  0611                     	;# 
  2721  0611                     	;# 
  2722  0612                     	;# 
  2723  0613                     	;# 
  2724  0614                     	;# 
  2725  0614                     	;# 
  2726  0615                     	;# 
  2727  0616                     	;# 
  2728  0617                     	;# 
  2729  0617                     	;# 
  2730  0618                     	;# 
  2731  0619                     	;# 
  2732  061A                     	;# 
  2733  061A                     	;# 
  2734  061B                     	;# 
  2735  061C                     	;# 
  2736  061D                     	;# 
  2737  061D                     	;# 
  2738  061E                     	;# 
  2739  061F                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;# 
  2751  0000                     	;# 
  2752  0001                     	;# 
  2753  0002                     	;# 
  2754  0003                     	;# 
  2755  0004                     	;# 
  2756  0005                     	;# 
  2757  0006                     	;# 
  2758  0007                     	;# 
  2759  0008                     	;# 
  2760  0009                     	;# 
  2761  000A                     	;# 
  2762  000B                     	;# 
  2763  000C                     	;# 
  2764  000D                     	;# 
  2765  000E                     	;# 
  2766  000F                     	;# 
  2767  0010                     	;# 
  2768  0011                     	;# 
  2769  0012                     	;# 
  2770  0013                     	;# 
  2771  0014                     	;# 
  2772  0015                     	;# 
  2773  0016                     	;# 
  2774  0016                     	;# 
  2775  0017                     	;# 
  2776  0018                     	;# 
  2777  0019                     	;# 
  2778  001A                     	;# 
  2779  001B                     	;# 
  2780  001C                     	;# 
  2781  008C                     	;# 
  2782  008D                     	;# 
  2783  008E                     	;# 
  2784  008F                     	;# 
  2785  0090                     	;# 
  2786  0091                     	;# 
  2787  0092                     	;# 
  2788  0093                     	;# 
  2789  0094                     	;# 
  2790  0095                     	;# 
  2791  0096                     	;# 
  2792  0097                     	;# 
  2793  0099                     	;# 
  2794  009A                     	;# 
  2795  009B                     	;# 
  2796  009B                     	;# 
  2797  009C                     	;# 
  2798  009D                     	;# 
  2799  009E                     	;# 
  2800  010C                     	;# 
  2801  010D                     	;# 
  2802  010E                     	;# 
  2803  010F                     	;# 
  2804  0110                     	;# 
  2805  0116                     	;# 
  2806  0117                     	;# 
  2807  011D                     	;# 
  2808  018C                     	;# 
  2809  018D                     	;# 
  2810  018F                     	;# 
  2811  0190                     	;# 
  2812  0191                     	;# 
  2813  0191                     	;# 
  2814  0192                     	;# 
  2815  0193                     	;# 
  2816  0193                     	;# 
  2817  0194                     	;# 
  2818  0195                     	;# 
  2819  0196                     	;# 
  2820  0197                     	;# 
  2821  0199                     	;# 
  2822  0199                     	;# 
  2823  0199                     	;# 
  2824  019A                     	;# 
  2825  019A                     	;# 
  2826  019A                     	;# 
  2827  019B                     	;# 
  2828  019B                     	;# 
  2829  019B                     	;# 
  2830  019B                     	;# 
  2831  019B                     	;# 
  2832  019C                     	;# 
  2833  019C                     	;# 
  2834  019C                     	;# 
  2835  019D                     	;# 
  2836  019D                     	;# 
  2837  019D                     	;# 
  2838  019E                     	;# 
  2839  019E                     	;# 
  2840  019E                     	;# 
  2841  019F                     	;# 
  2842  019F                     	;# 
  2843  019F                     	;# 
  2844  020D                     	;# 
  2845  020F                     	;# 
  2846  0210                     	;# 
  2847  0211                     	;# 
  2848  0211                     	;# 
  2849  0212                     	;# 
  2850  0212                     	;# 
  2851  0213                     	;# 
  2852  0213                     	;# 
  2853  0214                     	;# 
  2854  0214                     	;# 
  2855  0215                     	;# 
  2856  0215                     	;# 
  2857  0215                     	;# 
  2858  0216                     	;# 
  2859  0216                     	;# 
  2860  0217                     	;# 
  2861  0217                     	;# 
  2862  0219                     	;# 
  2863  021A                     	;# 
  2864  021B                     	;# 
  2865  021C                     	;# 
  2866  021D                     	;# 
  2867  021E                     	;# 
  2868  021F                     	;# 
  2869  028C                     	;# 
  2870  028D                     	;# 
  2871  0291                     	;# 
  2872  0291                     	;# 
  2873  0292                     	;# 
  2874  0293                     	;# 
  2875  0298                     	;# 
  2876  0298                     	;# 
  2877  0299                     	;# 
  2878  029A                     	;# 
  2879  029D                     	;# 
  2880  029E                     	;# 
  2881  029F                     	;# 
  2882  030C                     	;# 
  2883  030D                     	;# 
  2884  0311                     	;# 
  2885  0311                     	;# 
  2886  0312                     	;# 
  2887  0313                     	;# 
  2888  0318                     	;# 
  2889  0318                     	;# 
  2890  0319                     	;# 
  2891  031A                     	;# 
  2892  031C                     	;# 
  2893  031C                     	;# 
  2894  031D                     	;# 
  2895  031E                     	;# 
  2896  038C                     	;# 
  2897  038D                     	;# 
  2898  0394                     	;# 
  2899  0395                     	;# 
  2900  0396                     	;# 
  2901  040C                     	;# 
  2902  040D                     	;# 
  2903  0411                     	;# 
  2904  0411                     	;# 
  2905  0412                     	;# 
  2906  0413                     	;# 
  2907  0414                     	;# 
  2908  0415                     	;# 
  2909  0416                     	;# 
  2910  0417                     	;# 
  2911  0418                     	;# 
  2912  0418                     	;# 
  2913  0419                     	;# 
  2914  041A                     	;# 
  2915  041B                     	;# 
  2916  041C                     	;# 
  2917  041D                     	;# 
  2918  041E                     	;# 
  2919  048D                     	;# 
  2920  0491                     	;# 
  2921  0491                     	;# 
  2922  0492                     	;# 
  2923  0492                     	;# 
  2924  0493                     	;# 
  2925  0493                     	;# 
  2926  0493                     	;# 
  2927  0494                     	;# 
  2928  0494                     	;# 
  2929  0495                     	;# 
  2930  0495                     	;# 
  2931  0496                     	;# 
  2932  0496                     	;# 
  2933  0497                     	;# 
  2934  0497                     	;# 
  2935  0595                     	;# 
  2936  0596                     	;# 
  2937  0597                     	;# 
  2938  059C                     	;# 
  2939  059D                     	;# 
  2940  059E                     	;# 
  2941  0611                     	;# 
  2942  0611                     	;# 
  2943  0612                     	;# 
  2944  0613                     	;# 
  2945  0614                     	;# 
  2946  0614                     	;# 
  2947  0615                     	;# 
  2948  0616                     	;# 
  2949  0617                     	;# 
  2950  0617                     	;# 
  2951  0618                     	;# 
  2952  0619                     	;# 
  2953  061A                     	;# 
  2954  061A                     	;# 
  2955  061B                     	;# 
  2956  061C                     	;# 
  2957  061D                     	;# 
  2958  061D                     	;# 
  2959  061E                     	;# 
  2960  061F                     	;# 
  2961  0FE4                     	;# 
  2962  0FE5                     	;# 
  2963  0FE6                     	;# 
  2964  0FE7                     	;# 
  2965  0FE8                     	;# 
  2966  0FE9                     	;# 
  2967  0FEA                     	;# 
  2968  0FEB                     	;# 
  2969  0FED                     	;# 
  2970  0FEE                     	;# 
  2971  0FEF                     	;_delayArray
  2972                           
  2973                           	psect	idataCOMMON
  2974  07FF                     __pidataCOMMON:	
  2975                           
  2976                           ;initializer for _blink_rate
  2977  07FF  3414               	retlw	20
  2978                           
  2979                           	psect	idataBANK0
  2980  1DB5                     __pidataBANK0:	
  2981                           
  2982                           ;initializer for _baseline_delay_time
  2983  1DB5  34D0               	retlw	208
  2984  1DB6  3407               	retlw	7
  2985  1DB7  3400               	retlw	0
  2986  1DB8  3400               	retlw	0
  2987                           
  2988                           ;initializer for _delay_time
  2989  1DB9  34D0               	retlw	208
  2990  1DBA  3407               	retlw	7
  2991  1DBB  3400               	retlw	0
  2992  1DBC  3400               	retlw	0
  2993                           
  2994                           ;initializer for _bottom_push_state
  2995  1DBD  3406               	retlw	6
  2996  1DBE  3400               	retlw	0
  2997                           
  2998                           ;initializer for _long_press_limit
  2999  1DBF  34E8               	retlw	232
  3000  1DC0  3403               	retlw	3
  3001                           
  3002                           ;initializer for _top_push_state
  3003  1DC1  3406               	retlw	6
  3004  1DC2  3400               	retlw	0
  3005                           
  3006                           ;initializer for _feedback_state
  3007  1DC3  34FF               	retlw	255
  3008                           
  3009                           ;initializer for _longTap_state
  3010  1DC4  34FF               	retlw	255
  3011                           
  3012                           ;initializer for _num_taps
  3013  1DC5  3404               	retlw	4
  3014                           
  3015                           ;initializer for _switchBypass_state
  3016  1DC6  34FF               	retlw	255
  3017                           
  3018                           	psect	idataBANK2
  3019  1D99                     __pidataBANK2:	
  3020                           
  3021                           ;initializer for _knob1_prev
  3022  1D99  34D0               	retlw	208
  3023  1D9A  3407               	retlw	7
  3024                           
  3025                           ;initializer for _knob2_prev
  3026  1D9B  34D0               	retlw	208
  3027  1D9C  3407               	retlw	7
  3028                           
  3029                           ;initializer for _knob3_prev
  3030  1D9D  34D0               	retlw	208
  3031  1D9E  3407               	retlw	7
  3032                           
  3033                           ;initializer for _knob4_prev
  3034  1D9F  34D0               	retlw	208
  3035  1DA0  3407               	retlw	7
  3036                           
  3037                           ;initializer for _knob5_prev
  3038  1DA1  34D0               	retlw	208
  3039  1DA2  3407               	retlw	7
  3040                           
  3041                           ;initializer for _currentBypassState
  3042  1DA3  34FF               	retlw	255
  3043                           
  3044                           ;initializer for _expSwitchState
  3045  1DA4  34FF               	retlw	255
  3046                           
  3047                           ;initializer for _switchTap_state
  3048  1DA5  34FF               	retlw	255
  3049                           
  3050                           	psect	idataBANK3
  3051  1D76                     __pidataBANK3:	
  3052                           
  3053                           ;initializer for _blink_delay
  3054  1D76  3464               	retlw	100
  3055  1D77  3400               	retlw	0
  3056                           
  3057                           ;initializer for _delay_time_changed
  3058  1D78  3401               	retlw	1
  3059  1D79  3400               	retlw	0
  3060                           
  3061                           ;initializer for _mod_delay_time
  3062  1D7A  34D0               	retlw	208
  3063  1D7B  3407               	retlw	7
  3064                           
  3065                           ;initializer for _switchBypass_up
  3066  1D7C  3401               	retlw	1
  3067  1D7D  3400               	retlw	0
  3068                           
  3069                           ;initializer for _tap_iteration
  3070  1D7E  3401               	retlw	1
  3071  1D7F  3400               	retlw	0
  3072                           
  3073                           ;initializer for _blink_state
  3074  1D80  3401               	retlw	1
  3075                           
  3076                           	psect	idataBANK4
  3077  1000                     __pidataBANK4:	
  3078                           
  3079                           ;initializer for _B25k
  3080  1000  34FF               	retlw	255
  3081  1001  34FF               	retlw	255
  3082  1002  34FF               	retlw	255
  3083  1003  34DF               	retlw	223
  3084  1004  34AE               	retlw	174
  3085  1005  348E               	retlw	142
  3086  1006  3478               	retlw	120
  3087  1007  3467               	retlw	103
  3088  1008  345B               	retlw	91
  3089  1009  3450               	retlw	80
  3090  100A  3448               	retlw	72
  3091  100B  3442               	retlw	66
  3092  100C  343C               	retlw	60
  3093  100D  3437               	retlw	55
  3094  100E  3433               	retlw	51
  3095  100F  3430               	retlw	48
  3096  1010  342D               	retlw	45
  3097  1011  342A               	retlw	42
  3098  1012  3427               	retlw	39
  3099  1013  3425               	retlw	37
  3100  1014  3423               	retlw	35
  3101  1015  3421               	retlw	33
  3102  1016  3420               	retlw	32
  3103  1017  341E               	retlw	30
  3104  1018  341D               	retlw	29
  3105  1019  341C               	retlw	28
  3106  101A  341B               	retlw	27
  3107  101B  341A               	retlw	26
  3108  101C  3419               	retlw	25
  3109  101D  3418               	retlw	24
  3110  101E  3417               	retlw	23
  3111  101F  3416               	retlw	22
  3112  1020  3415               	retlw	21
  3113  1021  3415               	retlw	21
  3114  1022  3414               	retlw	20
  3115  1023  3413               	retlw	19
  3116  1024  340F               	retlw	15
  3117  1025  340B               	retlw	11
  3118  1026  3407               	retlw	7
  3119  1027  3407               	retlw	7
  3120                           
  3121                           	psect	idataBANK6
  3122  10DD                     __pidataBANK6:	
  3123                           
  3124                           ;initializer for _mod1
  3125  10DD  3400               	retlw	0
  3126  10DE  340A               	retlw	10
  3127  10DF  3414               	retlw	20
  3128  10E0  341E               	retlw	30
  3129  10E1  3428               	retlw	40
  3130  10E2  3432               	retlw	50
  3131  10E3  343A               	retlw	58
  3132  10E4  3442               	retlw	66
  3133  10E5  344A               	retlw	74
  3134  10E6  3450               	retlw	80
  3135  10E7  3456               	retlw	86
  3136  10E8  345B               	retlw	91
  3137  10E9  345F               	retlw	95
  3138  10EA  3461               	retlw	97
  3139  10EB  3463               	retlw	99
  3140  10EC  3464               	retlw	100
  3141  10ED  3463               	retlw	99
  3142  10EE  3461               	retlw	97
  3143  10EF  345F               	retlw	95
  3144  10F0  345B               	retlw	91
  3145  10F1  3456               	retlw	86
  3146  10F2  3450               	retlw	80
  3147  10F3  344A               	retlw	74
  3148  10F4  3442               	retlw	66
  3149  10F5  343A               	retlw	58
  3150  10F6  3432               	retlw	50
  3151  10F7  3428               	retlw	40
  3152  10F8  341E               	retlw	30
  3153  10F9  3414               	retlw	20
  3154  10FA  340A               	retlw	10
  3155  10FB  3400               	retlw	0
  3156  10FC  34F6               	retlw	-10
  3157  10FD  34EC               	retlw	-20
  3158  10FE  34E2               	retlw	-30
  3159  10FF  34D8               	retlw	-40
  3160  1100  34CE               	retlw	-50
  3161  1101  34C6               	retlw	-58
  3162  1102  34BE               	retlw	-66
  3163  1103  34B6               	retlw	-74
  3164  1104  34B0               	retlw	-80
  3165  1105  34AA               	retlw	-86
  3166  1106  34A5               	retlw	-91
  3167  1107  34A1               	retlw	-95
  3168  1108  349F               	retlw	-97
  3169  1109  349D               	retlw	-99
  3170  110A  349C               	retlw	-100
  3171  110B  349D               	retlw	-99
  3172  110C  349F               	retlw	-97
  3173  110D  34A1               	retlw	-95
  3174  110E  34A5               	retlw	-91
  3175  110F  34AA               	retlw	-86
  3176  1110  34B0               	retlw	-80
  3177  1111  34B6               	retlw	-74
  3178  1112  34BE               	retlw	-66
  3179  1113  34C6               	retlw	-58
  3180  1114  34CE               	retlw	-50
  3181  1115  34D8               	retlw	-40
  3182  1116  34E2               	retlw	-30
  3183  1117  34EC               	retlw	-20
  3184  1118  34F6               	retlw	-10
  3185  1119  3400               	retlw	0
  3186                           
  3187                           	psect	idataBANK7
  3188  10A0                     __pidataBANK7:	
  3189                           
  3190                           ;initializer for _mod2
  3191  10A0  3400               	retlw	0
  3192  10A1  3407               	retlw	7
  3193  10A2  340D               	retlw	13
  3194  10A3  3414               	retlw	20
  3195  10A4  341B               	retlw	27
  3196  10A5  3421               	retlw	33
  3197  10A6  3428               	retlw	40
  3198  10A7  342F               	retlw	47
  3199  10A8  3435               	retlw	53
  3200  10A9  343C               	retlw	60
  3201  10AA  3443               	retlw	67
  3202  10AB  3449               	retlw	73
  3203  10AC  3450               	retlw	80
  3204  10AD  3457               	retlw	87
  3205  10AE  345D               	retlw	93
  3206  10AF  3464               	retlw	100
  3207  10B0  345D               	retlw	93
  3208  10B1  3457               	retlw	87
  3209  10B2  3450               	retlw	80
  3210  10B3  3449               	retlw	73
  3211  10B4  3443               	retlw	67
  3212  10B5  343C               	retlw	60
  3213  10B6  3435               	retlw	53
  3214  10B7  342F               	retlw	47
  3215  10B8  3428               	retlw	40
  3216  10B9  3421               	retlw	33
  3217  10BA  341B               	retlw	27
  3218  10BB  3414               	retlw	20
  3219  10BC  340D               	retlw	13
  3220  10BD  3407               	retlw	7
  3221  10BE  3400               	retlw	0
  3222  10BF  34F9               	retlw	-7
  3223  10C0  34F3               	retlw	-13
  3224  10C1  34EC               	retlw	-20
  3225  10C2  34E5               	retlw	-27
  3226  10C3  34DF               	retlw	-33
  3227  10C4  34D8               	retlw	-40
  3228  10C5  34D1               	retlw	-47
  3229  10C6  34CB               	retlw	-53
  3230  10C7  34C4               	retlw	-60
  3231  10C8  34BD               	retlw	-67
  3232  10C9  34B7               	retlw	-73
  3233  10CA  34B0               	retlw	-80
  3234  10CB  34A9               	retlw	-87
  3235  10CC  34A3               	retlw	-93
  3236  10CD  349C               	retlw	-100
  3237  10CE  34A3               	retlw	-93
  3238  10CF  34A9               	retlw	-87
  3239  10D0  34B0               	retlw	-80
  3240  10D1  34B7               	retlw	-73
  3241  10D2  34BD               	retlw	-67
  3242  10D3  34C4               	retlw	-60
  3243  10D4  34CB               	retlw	-53
  3244  10D5  34D1               	retlw	-47
  3245  10D6  34D8               	retlw	-40
  3246  10D7  34DF               	retlw	-33
  3247  10D8  34E5               	retlw	-27
  3248  10D9  34EC               	retlw	-20
  3249  10DA  34F3               	retlw	-13
  3250  10DB  34F9               	retlw	-7
  3251  10DC  3400               	retlw	0
  3252                           
  3253                           	psect	idataBANK8
  3254  1063                     __pidataBANK8:	
  3255                           
  3256                           ;initializer for _mod3
  3257  1063  3400               	retlw	0
  3258  1064  3403               	retlw	3
  3259  1065  3407               	retlw	7
  3260  1066  340A               	retlw	10
  3261  1067  340D               	retlw	13
  3262  1068  3411               	retlw	17
  3263  1069  3414               	retlw	20
  3264  106A  3417               	retlw	23
  3265  106B  341B               	retlw	27
  3266  106C  341E               	retlw	30
  3267  106D  3421               	retlw	33
  3268  106E  3425               	retlw	37
  3269  106F  3428               	retlw	40
  3270  1070  342B               	retlw	43
  3271  1071  342F               	retlw	47
  3272  1072  3432               	retlw	50
  3273  1073  3435               	retlw	53
  3274  1074  3439               	retlw	57
  3275  1075  343C               	retlw	60
  3276  1076  343F               	retlw	63
  3277  1077  3443               	retlw	67
  3278  1078  3446               	retlw	70
  3279  1079  3449               	retlw	73
  3280  107A  344D               	retlw	77
  3281  107B  3450               	retlw	80
  3282  107C  3453               	retlw	83
  3283  107D  3457               	retlw	87
  3284  107E  345A               	retlw	90
  3285  107F  345D               	retlw	93
  3286  1080  3461               	retlw	97
  3287  1081  3464               	retlw	100
  3288  1082  349F               	retlw	-97
  3289  1083  34A3               	retlw	-93
  3290  1084  34A6               	retlw	-90
  3291  1085  34A9               	retlw	-87
  3292  1086  34AD               	retlw	-83
  3293  1087  34B0               	retlw	-80
  3294  1088  34B3               	retlw	-77
  3295  1089  34B7               	retlw	-73
  3296  108A  34BA               	retlw	-70
  3297  108B  34BD               	retlw	-67
  3298  108C  34C1               	retlw	-63
  3299  108D  34C4               	retlw	-60
  3300  108E  34C7               	retlw	-57
  3301  108F  34CB               	retlw	-53
  3302  1090  34CE               	retlw	-50
  3303  1091  34D1               	retlw	-47
  3304  1092  34D5               	retlw	-43
  3305  1093  34D8               	retlw	-40
  3306  1094  34DB               	retlw	-37
  3307  1095  34DF               	retlw	-33
  3308  1096  34E2               	retlw	-30
  3309  1097  34E5               	retlw	-27
  3310  1098  34E9               	retlw	-23
  3311  1099  34EC               	retlw	-20
  3312  109A  34EF               	retlw	-17
  3313  109B  34F3               	retlw	-13
  3314  109C  34F6               	retlw	-10
  3315  109D  34F9               	retlw	-7
  3316  109E  34FD               	retlw	-3
  3317  109F  3400               	retlw	0
  3318                           
  3319                           	psect	idataBIGRAM
  3320  0DF8                     __pidataBIGRAM:	
  3321                           
  3322                           ;initializer for _delayArray
  3323  0DF8  3422               	retlw	34
  3324  0DF9  3408               	retlw	8
  3325  0DFA  34FC               	retlw	252
  3326  0DFB  3407               	retlw	7
  3327  0DFC  34D8               	retlw	216
  3328  0DFD  3407               	retlw	7
  3329  0DFE  34B5               	retlw	181
  3330  0DFF  3407               	retlw	7
  3331  0E00  3493               	retlw	147
  3332  0E01  3407               	retlw	7
  3333  0E02  3472               	retlw	114
  3334  0E03  3407               	retlw	7
  3335  0E04  3452               	retlw	82
  3336  0E05  3407               	retlw	7
  3337  0E06  3434               	retlw	52
  3338  0E07  3407               	retlw	7
  3339  0E08  3416               	retlw	22
  3340  0E09  3407               	retlw	7
  3341  0E0A  34F9               	retlw	249
  3342  0E0B  3406               	retlw	6
  3343  0E0C  34DD               	retlw	221
  3344  0E0D  3406               	retlw	6
  3345  0E0E  34C2               	retlw	194
  3346  0E0F  3406               	retlw	6
  3347  0E10  34A8               	retlw	168
  3348  0E11  3406               	retlw	6
  3349  0E12  348F               	retlw	143
  3350  0E13  3406               	retlw	6
  3351  0E14  3476               	retlw	118
  3352  0E15  3406               	retlw	6
  3353  0E16  345E               	retlw	94
  3354  0E17  3406               	retlw	6
  3355  0E18  3447               	retlw	71
  3356  0E19  3406               	retlw	6
  3357  0E1A  3430               	retlw	48
  3358  0E1B  3406               	retlw	6
  3359  0E1C  341A               	retlw	26
  3360  0E1D  3406               	retlw	6
  3361  0E1E  3405               	retlw	5
  3362  0E1F  3406               	retlw	6
  3363  0E20  34F0               	retlw	240
  3364  0E21  3405               	retlw	5
  3365  0E22  34DC               	retlw	220
  3366  0E23  3405               	retlw	5
  3367  0E24  34C8               	retlw	200
  3368  0E25  3405               	retlw	5
  3369  0E26  34B5               	retlw	181
  3370  0E27  3405               	retlw	5
  3371  0E28  34A3               	retlw	163
  3372  0E29  3405               	retlw	5
  3373  0E2A  3490               	retlw	144
  3374  0E2B  3405               	retlw	5
  3375  0E2C  347F               	retlw	127
  3376  0E2D  3405               	retlw	5
  3377  0E2E  346D               	retlw	109
  3378  0E2F  3405               	retlw	5
  3379  0E30  345C               	retlw	92
  3380  0E31  3405               	retlw	5
  3381  0E32  344C               	retlw	76
  3382  0E33  3405               	retlw	5
  3383  0E34  343C               	retlw	60
  3384  0E35  3405               	retlw	5
  3385  0E36  342C               	retlw	44
  3386  0E37  3405               	retlw	5
  3387  0E38  341D               	retlw	29
  3388  0E39  3405               	retlw	5
  3389  0E3A  340E               	retlw	14
  3390  0E3B  3405               	retlw	5
  3391  0E3C  34FF               	retlw	255
  3392  0E3D  3404               	retlw	4
  3393  0E3E  34F1               	retlw	241
  3394  0E3F  3404               	retlw	4
  3395  0E40  34E2               	retlw	226
  3396  0E41  3404               	retlw	4
  3397  0E42  34D5               	retlw	213
  3398  0E43  3404               	retlw	4
  3399  0E44  34C7               	retlw	199
  3400  0E45  3404               	retlw	4
  3401  0E46  34BA               	retlw	186
  3402  0E47  3404               	retlw	4
  3403  0E48  34AD               	retlw	173
  3404  0E49  3404               	retlw	4
  3405  0E4A  34A1               	retlw	161
  3406  0E4B  3404               	retlw	4
  3407  0E4C  3494               	retlw	148
  3408  0E4D  3404               	retlw	4
  3409  0E4E  3488               	retlw	136
  3410  0E4F  3404               	retlw	4
  3411  0E50  347D               	retlw	125
  3412  0E51  3404               	retlw	4
  3413  0E52  3471               	retlw	113
  3414  0E53  3404               	retlw	4
  3415  0E54  3466               	retlw	102
  3416  0E55  3404               	retlw	4
  3417  0E56  345A               	retlw	90
  3418  0E57  3404               	retlw	4
  3419  0E58  3450               	retlw	80
  3420  0E59  3404               	retlw	4
  3421  0E5A  3445               	retlw	69
  3422  0E5B  3404               	retlw	4
  3423  0E5C  343A               	retlw	58
  3424  0E5D  3404               	retlw	4
  3425  0E5E  3430               	retlw	48
  3426  0E5F  3404               	retlw	4
  3427  0E60  3426               	retlw	38
  3428  0E61  3404               	retlw	4
  3429  0E62  341C               	retlw	28
  3430  0E63  3404               	retlw	4
  3431  0E64  3412               	retlw	18
  3432  0E65  3404               	retlw	4
  3433  0E66  3409               	retlw	9
  3434  0E67  3404               	retlw	4
  3435  0E68  34FF               	retlw	255
  3436  0E69  3403               	retlw	3
  3437  0E6A  34F6               	retlw	246
  3438  0E6B  3403               	retlw	3
  3439  0E6C  34ED               	retlw	237
  3440  0E6D  3403               	retlw	3
  3441  0E6E  34E4               	retlw	228
  3442  0E6F  3403               	retlw	3
  3443  0E70  34DC               	retlw	220
  3444  0E71  3403               	retlw	3
  3445  0E72  34D3               	retlw	211
  3446  0E73  3403               	retlw	3
  3447  0E74  34CB               	retlw	203
  3448  0E75  3403               	retlw	3
  3449  0E76  34C2               	retlw	194
  3450  0E77  3403               	retlw	3
  3451  0E78  34BA               	retlw	186
  3452  0E79  3403               	retlw	3
  3453  0E7A  34B2               	retlw	178
  3454  0E7B  3403               	retlw	3
  3455  0E7C  34AA               	retlw	170
  3456  0E7D  3403               	retlw	3
  3457  0E7E  34A2               	retlw	162
  3458  0E7F  3403               	retlw	3
  3459  0E80  349B               	retlw	155
  3460  0E81  3403               	retlw	3
  3461  0E82  3493               	retlw	147
  3462  0E83  3403               	retlw	3
  3463  0E84  348C               	retlw	140
  3464  0E85  3403               	retlw	3
  3465  0E86  3485               	retlw	133
  3466  0E87  3403               	retlw	3
  3467  0E88  347E               	retlw	126
  3468  0E89  3403               	retlw	3
  3469  0E8A  3477               	retlw	119
  3470  0E8B  3403               	retlw	3
  3471  0E8C  3470               	retlw	112
  3472  0E8D  3403               	retlw	3
  3473  0E8E  3469               	retlw	105
  3474  0E8F  3403               	retlw	3
  3475  0E90  3462               	retlw	98
  3476  0E91  3403               	retlw	3
  3477  0E92  345C               	retlw	92
  3478  0E93  3403               	retlw	3
  3479  0E94  3455               	retlw	85
  3480  0E95  3403               	retlw	3
  3481  0E96  344F               	retlw	79
  3482  0E97  3403               	retlw	3
  3483  0E98  3448               	retlw	72
  3484  0E99  3403               	retlw	3
  3485  0E9A  3442               	retlw	66
  3486  0E9B  3403               	retlw	3
  3487  0E9C  343C               	retlw	60
  3488  0E9D  3403               	retlw	3
  3489  0E9E  3436               	retlw	54
  3490  0E9F  3403               	retlw	3
  3491  0EA0  3430               	retlw	48
  3492  0EA1  3403               	retlw	3
  3493  0EA2  342A               	retlw	42
  3494  0EA3  3403               	retlw	3
  3495  0EA4  3424               	retlw	36
  3496  0EA5  3403               	retlw	3
  3497  0EA6  341F               	retlw	31
  3498  0EA7  3403               	retlw	3
  3499  0EA8  3419               	retlw	25
  3500  0EA9  3403               	retlw	3
  3501  0EAA  3413               	retlw	19
  3502  0EAB  3403               	retlw	3
  3503  0EAC  340E               	retlw	14
  3504  0EAD  3403               	retlw	3
  3505  0EAE  3409               	retlw	9
  3506  0EAF  3403               	retlw	3
  3507  0EB0  3403               	retlw	3
  3508  0EB1  3403               	retlw	3
  3509  0EB2  34FE               	retlw	254
  3510  0EB3  3402               	retlw	2
  3511  0EB4  34F9               	retlw	249
  3512  0EB5  3402               	retlw	2
  3513  0EB6  34F4               	retlw	244
  3514  0EB7  3402               	retlw	2
  3515  0EB8  34EF               	retlw	239
  3516  0EB9  3402               	retlw	2
  3517  0EBA  34EA               	retlw	234
  3518  0EBB  3402               	retlw	2
  3519  0EBC  34E5               	retlw	229
  3520  0EBD  3402               	retlw	2
  3521  0EBE  34E0               	retlw	224
  3522  0EBF  3402               	retlw	2
  3523  0EC0  34DB               	retlw	219
  3524  0EC1  3402               	retlw	2
  3525  0EC2  34D7               	retlw	215
  3526  0EC3  3402               	retlw	2
  3527  0EC4  34D2               	retlw	210
  3528  0EC5  3402               	retlw	2
  3529  0EC6  34CD               	retlw	205
  3530  0EC7  3402               	retlw	2
  3531  0EC8  34C9               	retlw	201
  3532  0EC9  3402               	retlw	2
  3533  0ECA  34C4               	retlw	196
  3534  0ECB  3402               	retlw	2
  3535  0ECC  34C0               	retlw	192
  3536  0ECD  3402               	retlw	2
  3537  0ECE  34BC               	retlw	188
  3538  0ECF  3402               	retlw	2
  3539  0ED0  34B7               	retlw	183
  3540  0ED1  3402               	retlw	2
  3541  0ED2  34B3               	retlw	179
  3542  0ED3  3402               	retlw	2
  3543  0ED4  34AF               	retlw	175
  3544  0ED5  3402               	retlw	2
  3545  0ED6  34AB               	retlw	171
  3546  0ED7  3402               	retlw	2
  3547  0ED8  34A6               	retlw	166
  3548  0ED9  3402               	retlw	2
  3549  0EDA  34A2               	retlw	162
  3550  0EDB  3402               	retlw	2
  3551  0EDC  349E               	retlw	158
  3552  0EDD  3402               	retlw	2
  3553  0EDE  349A               	retlw	154
  3554  0EDF  3402               	retlw	2
  3555  0EE0  3497               	retlw	151
  3556  0EE1  3402               	retlw	2
  3557  0EE2  3493               	retlw	147
  3558  0EE3  3402               	retlw	2
  3559  0EE4  348F               	retlw	143
  3560  0EE5  3402               	retlw	2
  3561  0EE6  348B               	retlw	139
  3562  0EE7  3402               	retlw	2
  3563  0EE8  3487               	retlw	135
  3564  0EE9  3402               	retlw	2
  3565  0EEA  3484               	retlw	132
  3566  0EEB  3402               	retlw	2
  3567  0EEC  3480               	retlw	128
  3568  0EED  3402               	retlw	2
  3569  0EEE  347C               	retlw	124
  3570  0EEF  3402               	retlw	2
  3571  0EF0  3479               	retlw	121
  3572  0EF1  3402               	retlw	2
  3573  0EF2  3475               	retlw	117
  3574  0EF3  3402               	retlw	2
  3575  0EF4  3472               	retlw	114
  3576  0EF5  3402               	retlw	2
  3577  0EF6  346E               	retlw	110
  3578  0EF7  3402               	retlw	2
  3579  0EF8  346B               	retlw	107
  3580  0EF9  3402               	retlw	2
  3581  0EFA  3467               	retlw	103
  3582  0EFB  3402               	retlw	2
  3583  0EFC  3464               	retlw	100
  3584  0EFD  3402               	retlw	2
  3585  0EFE  3461               	retlw	97
  3586  0EFF  3402               	retlw	2
  3587  0F00  345E               	retlw	94
  3588  0F01  3402               	retlw	2
  3589  0F02  345A               	retlw	90
  3590  0F03  3402               	retlw	2
  3591  0F04  3457               	retlw	87
  3592  0F05  3402               	retlw	2
  3593  0F06  3454               	retlw	84
  3594  0F07  3402               	retlw	2
  3595  0F08  3451               	retlw	81
  3596  0F09  3402               	retlw	2
  3597  0F0A  344E               	retlw	78
  3598  0F0B  3402               	retlw	2
  3599  0F0C  344B               	retlw	75
  3600  0F0D  3402               	retlw	2
  3601  0F0E  3448               	retlw	72
  3602  0F0F  3402               	retlw	2
  3603  0F10  3445               	retlw	69
  3604  0F11  3402               	retlw	2
  3605  0F12  3442               	retlw	66
  3606  0F13  3402               	retlw	2
  3607  0F14  343F               	retlw	63
  3608  0F15  3402               	retlw	2
  3609  0F16  343C               	retlw	60
  3610  0F17  3402               	retlw	2
  3611  0F18  3439               	retlw	57
  3612  0F19  3402               	retlw	2
  3613  0F1A  3436               	retlw	54
  3614  0F1B  3402               	retlw	2
  3615  0F1C  3433               	retlw	51
  3616  0F1D  3402               	retlw	2
  3617  0F1E  3430               	retlw	48
  3618  0F1F  3402               	retlw	2
  3619  0F20  342E               	retlw	46
  3620  0F21  3402               	retlw	2
  3621  0F22  342B               	retlw	43
  3622  0F23  3402               	retlw	2
  3623  0F24  3428               	retlw	40
  3624  0F25  3402               	retlw	2
  3625  0F26  3425               	retlw	37
  3626  0F27  3402               	retlw	2
  3627  0F28  3423               	retlw	35
  3628  0F29  3402               	retlw	2
  3629  0F2A  3420               	retlw	32
  3630  0F2B  3402               	retlw	2
  3631  0F2C  341E               	retlw	30
  3632  0F2D  3402               	retlw	2
  3633  0F2E  341B               	retlw	27
  3634  0F2F  3402               	retlw	2
  3635  0F30  3418               	retlw	24
  3636  0F31  3402               	retlw	2
  3637  0F32  3416               	retlw	22
  3638  0F33  3402               	retlw	2
  3639  0F34  3413               	retlw	19
  3640  0F35  3402               	retlw	2
  3641  0F36  3411               	retlw	17
  3642  0F37  3402               	retlw	2
  3643  0F38  340E               	retlw	14
  3644  0F39  3402               	retlw	2
  3645  0F3A  340C               	retlw	12
  3646  0F3B  3402               	retlw	2
  3647  0F3C  340A               	retlw	10
  3648  0F3D  3402               	retlw	2
  3649  0F3E  3407               	retlw	7
  3650  0F3F  3402               	retlw	2
  3651  0F40  3405               	retlw	5
  3652  0F41  3402               	retlw	2
  3653  0F42  3402               	retlw	2
  3654  0F43  3402               	retlw	2
  3655  0F44  3400               	retlw	0
  3656  0F45  3402               	retlw	2
  3657  0F46  34FE               	retlw	254
  3658  0F47  3401               	retlw	1
  3659  0F48  34FB               	retlw	251
  3660  0F49  3401               	retlw	1
  3661  0F4A  34F9               	retlw	249
  3662  0F4B  3401               	retlw	1
  3663  0F4C  34F7               	retlw	247
  3664  0F4D  3401               	retlw	1
  3665  0F4E  34F5               	retlw	245
  3666  0F4F  3401               	retlw	1
  3667  0F50  34F2               	retlw	242
  3668  0F51  3401               	retlw	1
  3669  0F52  34F0               	retlw	240
  3670  0F53  3401               	retlw	1
  3671  0F54  34EE               	retlw	238
  3672  0F55  3401               	retlw	1
  3673  0F56  34EC               	retlw	236
  3674  0F57  3401               	retlw	1
  3675  0F58  34EA               	retlw	234
  3676  0F59  3401               	retlw	1
  3677  0F5A  34E8               	retlw	232
  3678  0F5B  3401               	retlw	1
  3679  0F5C  34E6               	retlw	230
  3680  0F5D  3401               	retlw	1
  3681  0F5E  34E3               	retlw	227
  3682  0F5F  3401               	retlw	1
  3683  0F60  34E1               	retlw	225
  3684  0F61  3401               	retlw	1
  3685  0F62  34DF               	retlw	223
  3686  0F63  3401               	retlw	1
  3687  0F64  34DD               	retlw	221
  3688  0F65  3401               	retlw	1
  3689  0F66  34DB               	retlw	219
  3690  0F67  3401               	retlw	1
  3691  0F68  34D9               	retlw	217
  3692  0F69  3401               	retlw	1
  3693  0F6A  34D7               	retlw	215
  3694  0F6B  3401               	retlw	1
  3695  0F6C  34D5               	retlw	213
  3696  0F6D  3401               	retlw	1
  3697  0F6E  34D3               	retlw	211
  3698  0F6F  3401               	retlw	1
  3699  0F70  34D2               	retlw	210
  3700  0F71  3401               	retlw	1
  3701  0F72  34D0               	retlw	208
  3702  0F73  3401               	retlw	1
  3703  0F74  34CE               	retlw	206
  3704  0F75  3401               	retlw	1
  3705  0F76  34CC               	retlw	204
  3706  0F77  3401               	retlw	1
  3707  0F78  34CA               	retlw	202
  3708  0F79  3401               	retlw	1
  3709  0F7A  34C8               	retlw	200
  3710  0F7B  3401               	retlw	1
  3711  0F7C  34C6               	retlw	198
  3712  0F7D  3401               	retlw	1
  3713  0F7E  34C4               	retlw	196
  3714  0F7F  3401               	retlw	1
  3715  0F80  34C3               	retlw	195
  3716  0F81  3401               	retlw	1
  3717  0F82  34C1               	retlw	193
  3718  0F83  3401               	retlw	1
  3719  0F84  34BF               	retlw	191
  3720  0F85  3401               	retlw	1
  3721  0F86  34BD               	retlw	189
  3722  0F87  3401               	retlw	1
  3723  0F88  34BC               	retlw	188
  3724  0F89  3401               	retlw	1
  3725  0F8A  34BA               	retlw	186
  3726  0F8B  3401               	retlw	1
  3727  0F8C  34B8               	retlw	184
  3728  0F8D  3401               	retlw	1
  3729  0F8E  34B6               	retlw	182
  3730  0F8F  3401               	retlw	1
  3731  0F90  34B5               	retlw	181
  3732  0F91  3401               	retlw	1
  3733  0F92  34B3               	retlw	179
  3734  0F93  3401               	retlw	1
  3735  0F94  34B1               	retlw	177
  3736  0F95  3401               	retlw	1
  3737  0F96  34B0               	retlw	176
  3738  0F97  3401               	retlw	1
  3739  0F98  34AE               	retlw	174
  3740  0F99  3401               	retlw	1
  3741  0F9A  34AC               	retlw	172
  3742  0F9B  3401               	retlw	1
  3743  0F9C  34AB               	retlw	171
  3744  0F9D  3401               	retlw	1
  3745  0F9E  34A9               	retlw	169
  3746  0F9F  3401               	retlw	1
  3747  0FA0  34A8               	retlw	168
  3748  0FA1  3401               	retlw	1
  3749  0FA2  34A6               	retlw	166
  3750  0FA3  3401               	retlw	1
  3751  0FA4  34A4               	retlw	164
  3752  0FA5  3401               	retlw	1
  3753  0FA6  34A3               	retlw	163
  3754  0FA7  3401               	retlw	1
  3755  0FA8  34A1               	retlw	161
  3756  0FA9  3401               	retlw	1
  3757  0FAA  34A0               	retlw	160
  3758  0FAB  3401               	retlw	1
  3759  0FAC  349E               	retlw	158
  3760  0FAD  3401               	retlw	1
  3761  0FAE  349D               	retlw	157
  3762  0FAF  3401               	retlw	1
  3763  0FB0  349B               	retlw	155
  3764  0FB1  3401               	retlw	1
  3765  0FB2  349A               	retlw	154
  3766  0FB3  3401               	retlw	1
  3767  0FB4  3498               	retlw	152
  3768  0FB5  3401               	retlw	1
  3769  0FB6  3497               	retlw	151
  3770  0FB7  3401               	retlw	1
  3771  0FB8  3495               	retlw	149
  3772  0FB9  3401               	retlw	1
  3773  0FBA  3494               	retlw	148
  3774  0FBB  3401               	retlw	1
  3775  0FBC  3492               	retlw	146
  3776  0FBD  3401               	retlw	1
  3777  0FBE  3491               	retlw	145
  3778  0FBF  3401               	retlw	1
  3779  0FC0  3490               	retlw	144
  3780  0FC1  3401               	retlw	1
  3781  0FC2  348E               	retlw	142
  3782  0FC3  3401               	retlw	1
  3783  0FC4  348D               	retlw	141
  3784  0FC5  3401               	retlw	1
  3785  0FC6  348B               	retlw	139
  3786  0FC7  3401               	retlw	1
  3787  0FC8  348A               	retlw	138
  3788  0FC9  3401               	retlw	1
  3789  0FCA  3489               	retlw	137
  3790  0FCB  3401               	retlw	1
  3791  0FCC  3487               	retlw	135
  3792  0FCD  3401               	retlw	1
  3793  0FCE  3486               	retlw	134
  3794  0FCF  3401               	retlw	1
  3795  0FD0  3485               	retlw	133
  3796  0FD1  3401               	retlw	1
  3797  0FD2  3483               	retlw	131
  3798  0FD3  3401               	retlw	1
  3799  0FD4  3482               	retlw	130
  3800  0FD5  3401               	retlw	1
  3801  0FD6  3481               	retlw	129
  3802  0FD7  3401               	retlw	1
  3803  0FD8  347F               	retlw	127
  3804  0FD9  3401               	retlw	1
  3805  0FDA  347E               	retlw	126
  3806  0FDB  3401               	retlw	1
  3807  0FDC  347D               	retlw	125
  3808  0FDD  3401               	retlw	1
  3809  0FDE  347B               	retlw	123
  3810  0FDF  3401               	retlw	1
  3811  0FE0  347A               	retlw	122
  3812  0FE1  3401               	retlw	1
  3813  0FE2  3479               	retlw	121
  3814  0FE3  3401               	retlw	1
  3815  0FE4  3478               	retlw	120
  3816  0FE5  3401               	retlw	1
  3817  0FE6  3476               	retlw	118
  3818  0FE7  3401               	retlw	1
  3819  0FE8  3475               	retlw	117
  3820  0FE9  3401               	retlw	1
  3821  0FEA  3474               	retlw	116
  3822  0FEB  3401               	retlw	1
  3823  0FEC  3473               	retlw	115
  3824  0FED  3401               	retlw	1
  3825  0FEE  3471               	retlw	113
  3826  0FEF  3401               	retlw	1
  3827  0FF0  3470               	retlw	112
  3828  0FF1  3401               	retlw	1
  3829  0FF2  346F               	retlw	111
  3830  0FF3  3401               	retlw	1
  3831  0FF4  346E               	retlw	110
  3832  0FF5  3401               	retlw	1
  3833  0FF6  3400               	retlw	0
  3834  0FF7  3400               	retlw	0
  3835  0FF8  3400               	retlw	0
  3836  0FF9  3400               	retlw	0
  3837  0FFA  3400               	retlw	0
  3838  0FFB  3400               	retlw	0
  3839  0FFC  3400               	retlw	0
  3840  0FFD  3400               	retlw	0
  3841  0FFE  3400               	retlw	0
  3842  0FFF  3400               	retlw	0
  3843                           
  3844                           	psect	nvBANK3
  3845  01EB                     __pnvBANK3:	
  3846  01EB                     _B25kLength:	
  3847  01EB                     	ds	2
  3848  000B                     _INTCONbits	set	11
  3849  000C                     _PORTAbits	set	12
  3850  000E                     _PORTCbits	set	14
  3851  000F                     _PORTDbits	set	15
  3852  0010                     _PORTEbits	set	16
  3853  001B                     _PR2	set	27
  3854  001C                     _T2CONbits	set	28
  3855  009D                     _ADCON0bits	set	157
  3856  009E                     _ADCON1bits	set	158
  3857  009C                     _ADRESH	set	156
  3858  009B                     _ADRESL	set	155
  3859  0095                     _OPTION_REGbits	set	149
  3860  0099                     _OSCCONbits	set	153
  3861  008D                     _TRISBbits	set	141
  3862  008E                     _TRISCbits	set	142
  3863  008F                     _TRISDbits	set	143
  3864  0090                     _TRISEbits	set	144
  3865  011D                     _APFCONbits	set	285
  3866  010D                     _LATBbits	set	269
  3867  010F                     _LATDbits	set	271
  3868  0190                     _ANSELEbits	set	400
  3869  0192                     _PMADRH	set	402
  3870  0191                     _PMADRL	set	401
  3871  0195                     _PMCON1bits	set	405
  3872  0196                     _PMCON2	set	406
  3873  0194                     _PMDATH	set	404
  3874  0193                     _PMDATL	set	403
  3875  0291                     _CCPR1	set	657
  3876  0298                     _CCPR2	set	664
  3877  0293                     _CCP1CONbits	set	659
  3878  029A                     _CCP2CONbits	set	666
  3879  029D                     _CCPTMRS0	set	669
  3880  029E                     _CCPTMRS1	set	670
  3881  029F                     _CCPTMRS2	set	671
  3882  0311                     _CCPR3	set	785
  3883  0318                     _CCPR4	set	792
  3884  031C                     _CCPR5	set	796
  3885  0313                     _CCP3CONbits	set	787
  3886  031A                     _CCP4CONbits	set	794
  3887  031E                     _CCP5CONbits	set	798
  3888  030C                     _TRISFbits	set	780
  3889  030D                     _TRISGbits	set	781
  3890  038C                     _LATFbits	set	908
  3891  038D                     _LATGbits	set	909
  3892  040C                     _ANSELFbits	set	1036
  3893  061A                     _CCPR9	set	1562
  3894  061F                     _CCP10CONbits	set	1567
  3895  0613                     _CCP6CONbits	set	1555
  3896  0616                     _CCP7CONbits	set	1558
  3897  0619                     _CCP8CONbits	set	1561
  3898  061C                     _CCP9CONbits	set	1564
  3899                           
  3900                           ; #config settings
  3901  0000                     
  3902                           	psect	cinit
  3903  02E4                     start_initialization:	
  3904  02E4                     __initialization:		;BIGRAM
  3905                           
  3906                           ; Clear objects allocated to BANK0
  3907  02E4  3045               	movlw	low __pbssBANK0
  3908  02E5  0084               	movwf	4
  3909  02E6  3000               	movlw	high __pbssBANK0
  3910  02E7  0085               	movwf	5
  3911  02E8  3013               	movlw	19
  3912  02E9  00FE               	movwf	btemp
  3913  02EA  3000               	movlw	0
  3914  02EB  00FF               	movwf	btemp+1
  3915  02EC  319D  258D  3182   	fcall	clear_ram0
  3916                           
  3917                           ; Clear objects allocated to BANK2
  3918  02EF  3051               	movlw	low __pbssBANK2
  3919  02F0  0084               	movwf	4
  3920  02F1  3001               	movlw	high __pbssBANK2
  3921  02F2  0085               	movwf	5
  3922  02F3  3011               	movlw	17
  3923  02F4  00FE               	movwf	btemp
  3924  02F5  3000               	movlw	0
  3925  02F6  00FF               	movwf	btemp+1
  3926  02F7  319D  258D  3182   	fcall	clear_ram0
  3927                           
  3928                           ; Clear objects allocated to BANK3
  3929  02FA  30A0               	movlw	low __pbssBANK3
  3930  02FB  0084               	movwf	4
  3931  02FC  3001               	movlw	high __pbssBANK3
  3932  02FD  0085               	movwf	5
  3933  02FE  3040               	movlw	64
  3934  02FF  00FE               	movwf	btemp
  3935  0300  3000               	movlw	0
  3936  0301  00FF               	movwf	btemp+1
  3937  0302  319D  258D  3182   	fcall	clear_ram0
  3938                           
  3939                           ; Clear objects allocated to BANK4
  3940  0305  0024               	movlb	4	; select bank4
  3941  0306  01CE               	clrf	__pbssBANK4& (0+127)
  3942  0307  01CF               	clrf	(__pbssBANK4+1)& (0+127)
  3943  0308  01D0               	clrf	(__pbssBANK4+2)& (0+127)
  3944  0309  01D1               	clrf	(__pbssBANK4+3)& (0+127)
  3945                           
  3946                           ; Clear objects allocated to BANK5
  3947  030A  30A0               	movlw	low __pbssBANK5
  3948  030B  0084               	movwf	4
  3949  030C  3002               	movlw	high __pbssBANK5
  3950  030D  0085               	movwf	5
  3951  030E  302C               	movlw	44
  3952  030F  00FE               	movwf	btemp
  3953  0310  3000               	movlw	0
  3954  0311  00FF               	movwf	btemp+1
  3955  0312  319D  258D  3182   	fcall	clear_ram0
  3956                           
  3957                           ; Clear objects allocated to BANK9
  3958  0315  30A0               	movlw	low __pbssBANK9
  3959  0316  0084               	movwf	4
  3960  0317  3004               	movlw	high __pbssBANK9
  3961  0318  0085               	movwf	5
  3962  0319  3040               	movlw	64
  3963  031A  00FE               	movwf	btemp
  3964  031B  3000               	movlw	0
  3965  031C  00FF               	movwf	btemp+1
  3966  031D  319D  258D  3182   	fcall	clear_ram0
  3967                           
  3968                           ; Initialize objects allocated to BIGRAM
  3969  0320  30F8               	movlw	low __pidataBIGRAM
  3970  0321  0084               	movwf	4
  3971  0322  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3972  0323  0085               	movwf	5
  3973  0324  30E8               	movlw	low (0+9192)
  3974  0325  0086               	movwf	6
  3975  0326  3023               	movlw	high (0+9192)
  3976  0327  0087               	movwf	7
  3977  0328  3002               	movlw	2
  3978  0329  00FF               	movwf	btemp+1
  3979  032A  3008               	movlw	8
  3980  032B  319D  2581  3182   	fcall	init_ram
  3981                           
  3982                           ; Initialize objects allocated to COMMON
  3983  032E  3187  27FF  3182   	fcall	__pidataCOMMON	;fetch initializer
  3984  0331  00FD               	movwf	__pdataCOMMON& (0+127)
  3985                           
  3986                           ; Initialize objects allocated to BANK0
  3987  0332  30B5               	movlw	low __pidataBANK0
  3988  0333  0084               	movwf	4
  3989  0334  309D               	movlw	(high __pidataBANK0)| (0+128)
  3990  0335  0085               	movwf	5
  3991  0336  3058               	movlw	low __pdataBANK0
  3992  0337  0086               	movwf	6
  3993  0338  3000               	movlw	high __pdataBANK0
  3994  0339  0087               	movwf	7
  3995  033A  3000               	movlw	0
  3996  033B  00FF               	movwf	btemp+1
  3997  033C  3012               	movlw	18
  3998  033D  319D  2581  3182   	fcall	init_ram
  3999                           
  4000                           ; Initialize objects allocated to BANK2
  4001  0340  3099               	movlw	low __pidataBANK2
  4002  0341  0084               	movwf	4
  4003  0342  309D               	movlw	(high __pidataBANK2)| (0+128)
  4004  0343  0085               	movwf	5
  4005  0344  3062               	movlw	low __pdataBANK2
  4006  0345  0086               	movwf	6
  4007  0346  3001               	movlw	high __pdataBANK2
  4008  0347  0087               	movwf	7
  4009  0348  3000               	movlw	0
  4010  0349  00FF               	movwf	btemp+1
  4011  034A  300D               	movlw	13
  4012  034B  319D  2581  3182   	fcall	init_ram
  4013                           
  4014                           ; Initialize objects allocated to BANK3
  4015  034E  3076               	movlw	low __pidataBANK3
  4016  034F  0084               	movwf	4
  4017  0350  309D               	movlw	(high __pidataBANK3)| (0+128)
  4018  0351  0085               	movwf	5
  4019  0352  30E0               	movlw	low __pdataBANK3
  4020  0353  0086               	movwf	6
  4021  0354  3001               	movlw	high __pdataBANK3
  4022  0355  0087               	movwf	7
  4023  0356  3000               	movlw	0
  4024  0357  00FF               	movwf	btemp+1
  4025  0358  300B               	movlw	11
  4026  0359  319D  2581  3182   	fcall	init_ram
  4027                           
  4028                           ; Initialize objects allocated to BANK4
  4029  035C  3000               	movlw	low __pidataBANK4
  4030  035D  0084               	movwf	4
  4031  035E  3090               	movlw	(high __pidataBANK4)| (0+128)
  4032  035F  0085               	movwf	5
  4033  0360  3020               	movlw	low __pdataBANK4
  4034  0361  0086               	movwf	6
  4035  0362  3002               	movlw	high __pdataBANK4
  4036  0363  0087               	movwf	7
  4037  0364  3000               	movlw	0
  4038  0365  00FF               	movwf	btemp+1
  4039  0366  3028               	movlw	40
  4040  0367  319D  2581  3182   	fcall	init_ram
  4041                           
  4042                           ; Initialize objects allocated to BANK6
  4043  036A  30DD               	movlw	low __pidataBANK6
  4044  036B  0084               	movwf	4
  4045  036C  3090               	movlw	(high __pidataBANK6)| (0+128)
  4046  036D  0085               	movwf	5
  4047  036E  3020               	movlw	low __pdataBANK6
  4048  036F  0086               	movwf	6
  4049  0370  3003               	movlw	high __pdataBANK6
  4050  0371  0087               	movwf	7
  4051  0372  3000               	movlw	0
  4052  0373  00FF               	movwf	btemp+1
  4053  0374  303D               	movlw	61
  4054  0375  319D  2581  3182   	fcall	init_ram
  4055                           
  4056                           ; Initialize objects allocated to BANK7
  4057  0378  30A0               	movlw	low __pidataBANK7
  4058  0379  0084               	movwf	4
  4059  037A  3090               	movlw	(high __pidataBANK7)| (0+128)
  4060  037B  0085               	movwf	5
  4061  037C  30A0               	movlw	low __pdataBANK7
  4062  037D  0086               	movwf	6
  4063  037E  3003               	movlw	high __pdataBANK7
  4064  037F  0087               	movwf	7
  4065  0380  3000               	movlw	0
  4066  0381  00FF               	movwf	btemp+1
  4067  0382  303D               	movlw	61
  4068  0383  319D  2581  3182   	fcall	init_ram
  4069                           
  4070                           ; Initialize objects allocated to BANK8
  4071  0386  3063               	movlw	low __pidataBANK8
  4072  0387  0084               	movwf	4
  4073  0388  3090               	movlw	(high __pidataBANK8)| (0+128)
  4074  0389  0085               	movwf	5
  4075  038A  3020               	movlw	low __pdataBANK8
  4076  038B  0086               	movwf	6
  4077  038C  3004               	movlw	high __pdataBANK8
  4078  038D  0087               	movwf	7
  4079  038E  3000               	movlw	0
  4080  038F  00FF               	movwf	btemp+1
  4081  0390  303D               	movlw	61
  4082  0391  319D  2581         	fcall	init_ram
  4083  0393                     end_of_initialization:	
  4084                           ;End of C runtime variable initialization code
  4085                           
  4086  0393                     __end_of__initialization:	
  4087  0393  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4088  0394  0020               	movlb	0
  4089  0395  3183  2B97         	ljmp	_main	;jump to C main() function
  4090                           
  4091                           	psect	dataCOMMON
  4092  007D                     __pdataCOMMON:	
  4093  007D                     _blink_rate:	
  4094  007D                     	ds	1
  4095                           
  4096                           	psect	bssBANK0
  4097  0045                     __pbssBANK0:	
  4098  0045                     _sub_timer:	
  4099  0045                     	ds	4
  4100  0049                     _tap_timer:	
  4101  0049                     	ds	4
  4102  004D                     _timer:	
  4103  004D                     	ds	4
  4104  0051                     _mod_counter:	
  4105  0051                     	ds	2
  4106  0053                     _doubleTap_state:	
  4107  0053                     	ds	1
  4108  0054                     _feedback_start:	
  4109  0054                     	ds	1
  4110  0055                     _longTap_start:	
  4111  0055                     	ds	1
  4112  0056                     _suspend_blink:	
  4113  0056                     	ds	1
  4114  0057                     _switchTap_pressed:	
  4115  0057                     	ds	1
  4116                           
  4117                           	psect	dataBANK0
  4118  0058                     __pdataBANK0:	
  4119  0058                     _baseline_delay_time:	
  4120  0058                     	ds	4
  4121  005C                     _delay_time:	
  4122  005C                     	ds	4
  4123  0060                     _bottom_push_state:	
  4124  0060                     	ds	2
  4125  0062                     _long_press_limit:	
  4126  0062                     	ds	2
  4127  0064                     _top_push_state:	
  4128  0064                     	ds	2
  4129  0066                     _feedback_state:	
  4130  0066                     	ds	1
  4131  0067                     _longTap_state:	
  4132  0067                     	ds	1
  4133  0068                     _num_taps:	
  4134  0068                     	ds	1
  4135  0069                     _switchBypass_state:	
  4136  0069                     	ds	1
  4137                           
  4138                           	psect	bssBANK2
  4139  0151                     __pbssBANK2:	
  4140  0151                     _delay_counter:	
  4141  0151                     	ds	2
  4142  0153                     _feedback_timer:	
  4143  0153                     	ds	2
  4144  0155                     _knob_1_pos:	
  4145  0155                     	ds	2
  4146  0157                     _longTap_timer:	
  4147  0157                     	ds	2
  4148  0159                     _switchBypass_pressed:	
  4149  0159                     	ds	2
  4150  015B                     _bottomTactile_pressed:	
  4151  015B                     	ds	1
  4152  015C                     _bypass_turning_on:	
  4153  015C                     	ds	1
  4154  015D                     _mode2_state:	
  4155  015D                     	ds	1
  4156  015E                     _preset_blink:	
  4157  015E                     	ds	1
  4158  015F                     _preset_programmning_on:	
  4159  015F                     	ds	1
  4160  0160                     _switchTap_down:	
  4161  0160                     	ds	1
  4162  0161                     _topTactile_pressed:	
  4163  0161                     	ds	1
  4164                           
  4165                           	psect	dataBANK2
  4166  0162                     __pdataBANK2:	
  4167  0162                     _knob1_prev:	
  4168  0162                     	ds	2
  4169  0164                     _knob2_prev:	
  4170  0164                     	ds	2
  4171  0166                     _knob3_prev:	
  4172  0166                     	ds	2
  4173  0168                     _knob4_prev:	
  4174  0168                     	ds	2
  4175  016A                     _knob5_prev:	
  4176  016A                     	ds	2
  4177  016C                     _currentBypassState:	
  4178  016C                     	ds	1
  4179  016D                     _expSwitchState:	
  4180  016D                     	ds	1
  4181  016E                     _switchTap_state:	
  4182  016E                     	ds	1
  4183                           
  4184                           	psect	bssBANK3
  4185  01A0                     __pbssBANK3:	
  4186  01A0                     _tap_history:	
  4187  01A0                     	ds	20
  4188  01B4                     _ledState:	
  4189  01B4                     	ds	4
  4190  01B8                     _mod_timer:	
  4191  01B8                     	ds	4
  4192  01BC                     _tap_total:	
  4193  01BC                     	ds	4
  4194  01C0                     _adjust_sub_delay:	
  4195  01C0                     	ds	2
  4196  01C2                     _adjusted_pot_value:	
  4197  01C2                     	ds	2
  4198  01C4                     _debounce_bypass:	
  4199  01C4                     	ds	2
  4200  01C6                     _debounce_count:	
  4201  01C6                     	ds	2
  4202  01C8                     _debounce_mode1:	
  4203  01C8                     	ds	2
  4204  01CA                     _debounce_mode2:	
  4205  01CA                     	ds	2
  4206  01CC                     _delayfound:	
  4207  01CC                     	ds	2
  4208  01CE                     _errno:	
  4209  01CE                     	ds	2
  4210  01D0                     _knob_2_pos:	
  4211  01D0                     	ds	2
  4212  01D2                     _knob_3_pos:	
  4213  01D2                     	ds	2
  4214  01D4                     _knob_4_pos:	
  4215  01D4                     	ds	2
  4216  01D6                     _knob_5_pos:	
  4217  01D6                     	ds	2
  4218  01D8                     _mod_value:	
  4219  01D8                     	ds	2
  4220  01DA                     _reset_sub_delay:	
  4221  01DA                     	ds	2
  4222  01DC                     _switchBypass_toggle:	
  4223  01DC                     	ds	2
  4224  01DE                     _iCnt:	
  4225  01DE                     	ds	1
  4226  01DF                     _mode1_state:	
  4227  01DF                     	ds	1
  4228                           
  4229                           	psect	dataBANK3
  4230  01E0                     __pdataBANK3:	
  4231  01E0                     _blink_delay:	
  4232  01E0                     	ds	2
  4233  01E2                     _delay_time_changed:	
  4234  01E2                     	ds	2
  4235  01E4                     _mod_delay_time:	
  4236  01E4                     	ds	2
  4237  01E6                     _switchBypass_up:	
  4238  01E6                     	ds	2
  4239  01E8                     _tap_iteration:	
  4240  01E8                     	ds	2
  4241  01EA                     _blink_state:	
  4242  01EA                     	ds	1
  4243                           
  4244                           	psect	bssBANK4
  4245  024E                     __pbssBANK4:	
  4246  024E                     _test_timer:	
  4247  024E                     	ds	4
  4248                           
  4249                           	psect	dataBANK4
  4250  0220                     __pdataBANK4:	
  4251  0220                     _B25k:	
  4252  0220                     	ds	40
  4253                           
  4254                           	psect	bssBANK5
  4255  02A0                     __pbssBANK5:	
  4256  02A0                     _tap:	
  4257  02A0                     	ds	44
  4258                           
  4259                           	psect	dataBANK6
  4260  0320                     __pdataBANK6:	
  4261  0320                     _mod1:	
  4262  0320                     	ds	61
  4263                           
  4264                           	psect	dataBANK7
  4265  03A0                     __pdataBANK7:	
  4266  03A0                     _mod2:	
  4267  03A0                     	ds	61
  4268                           
  4269                           	psect	dataBANK8
  4270  0420                     __pdataBANK8:	
  4271  0420                     _mod3:	
  4272  0420                     	ds	61
  4273                           
  4274                           	psect	bssBANK9
  4275  04A0                     __pbssBANK9:	
  4276  04A0                     _myBuf:	
  4277  04A0                     	ds	64
  4278                           
  4279                           	psect	clrtext
  4280  1D8D                     clear_ram0:	
  4281                           ;	Called with FSR0 containing the base address, and
  4282                           ;	btemp/btemp+1 has the size to clear
  4283                           
  4284  1D8D  0064               	clrwdt	;clear the watchdog before getting into this loop
  4285  1D8E                     clrloop0:	
  4286  1D8E  0180               	clrf	0	;clear RAM location pointed to by FSR
  4287  1D8F  3101               	addfsr 0,1
  4288  1D90  3001               	movlw	1
  4289  1D91  02FE               	subwf	126,f
  4290  1D92  3000               	movlw	0
  4291  1D93  3BFF               	subwfb	127,f
  4292  1D94  087F               	movf	127,w
  4293  1D95  047E               	iorwf	126,w
  4294  1D96  1903               	btfsc	3,2
  4295  1D97  3400               	retlw	0	;all done for this memory range, return
  4296  1D98  2D8E               	goto	clrloop0	;have we reached the end yet?
  4297                           
  4298                           	psect	inittext
  4299  1D81                     init_ram:	
  4300  1D81  00FE               	movwf	126
  4301  1D82                     initloop:	
  4302  1D82  0012               	moviw fsr0++
  4303  1D83  001E               	movwi fsr1++
  4304  1D84  3001               	movlw	1
  4305  1D85  02FE               	subwf	126,f
  4306  1D86  3000               	movlw	0
  4307  1D87  3BFF               	subwfb	127,f
  4308  1D88  087F               	movf	127,w
  4309  1D89  047E               	iorwf	126,w
  4310  1D8A  1903               	btfsc	3,2
  4311  1D8B  3400               	retlw	0
  4312  1D8C  2D82               	goto	initloop
  4313                           
  4314                           	psect	cstackBANK4
  4315  0248                     __pcstackBANK4:	
  4316  0248                     main@i:	
  4317                           
  4318                           ; 2 bytes @ 0x0
  4319  0248                     	ds	2
  4320  024A                     main@i_383:	
  4321                           
  4322                           ; 2 bytes @ 0x2
  4323  024A                     	ds	2
  4324  024C                     main@i_384:	
  4325                           
  4326                           ; 2 bytes @ 0x4
  4327  024C                     	ds	2
  4328                           
  4329                           	psect	cstackBANK2
  4330  0120                     __pcstackBANK2:	
  4331  0120                     ___fttol@sign1:	
  4332                           
  4333                           ; 1 bytes @ 0x0
  4334  0120                     	ds	1
  4335  0121                     ___fttol@lval:	
  4336                           
  4337                           ; 4 bytes @ 0x1
  4338  0121                     	ds	4
  4339  0125                     ___fttol@exp1:	
  4340                           
  4341                           ; 1 bytes @ 0x5
  4342  0125                     	ds	1
  4343  0126                     ?___altoft:	
  4344  0126                     ___altoft@c:	
  4345                           ; 3 bytes @ 0x6
  4346                           
  4347                           
  4348                           ; 4 bytes @ 0x6
  4349  0126                     	ds	4
  4350  012A                     ??___altoft:	
  4351                           
  4352                           ; 1 bytes @ 0xA
  4353  012A                     	ds	2
  4354  012C                     ___altoft@exp:	
  4355                           
  4356                           ; 1 bytes @ 0xC
  4357  012C                     	ds	1
  4358  012D                     ___altoft@sign:	
  4359                           
  4360                           ; 1 bytes @ 0xD
  4361  012D                     	ds	1
  4362  012E                     ?_trunc:	
  4363  012E                     trunc@x:	
  4364                           ; 3 bytes @ 0xE
  4365                           
  4366                           
  4367                           ; 3 bytes @ 0xE
  4368  012E                     	ds	3
  4369  0131                     trunc@i:	
  4370                           
  4371                           ; 3 bytes @ 0x11
  4372  0131                     	ds	3
  4373  0134                     trunc@expon:	
  4374                           
  4375                           ; 2 bytes @ 0x14
  4376  0134                     	ds	2
  4377  0136                     ?_set_subdivision:	
  4378  0136                     set_subdivision@x:	
  4379                           ; 2 bytes @ 0x16
  4380                           
  4381                           
  4382                           ; 2 bytes @ 0x16
  4383  0136                     	ds	2
  4384  0138                     set_subdivision@y:	
  4385                           
  4386                           ; 2 bytes @ 0x18
  4387  0138                     	ds	2
  4388  013A                     ??_set_subdivision:	
  4389                           
  4390                           ; 1 bytes @ 0x1A
  4391  013A                     	ds	3
  4392  013D                     set_subdivision@scalar:	
  4393                           
  4394                           ; 3 bytes @ 0x1D
  4395  013D                     	ds	3
  4396  0140                     set_subdivision@tmpX:	
  4397                           
  4398                           ; 2 bytes @ 0x20
  4399  0140                     	ds	2
  4400  0142                     ??_main:	
  4401                           
  4402                           ; 1 bytes @ 0x22
  4403  0142                     	ds	15
  4404                           
  4405                           	psect	cstackBANK1
  4406  00A0                     __pcstackBANK1:	
  4407  00A0                     ?_set_leds_top:	
  4408  00A0                     ??_ConfigureOscillator:	
  4409                           ; 1 bytes @ 0x0
  4410                           
  4411  00A0                     ??_InitApp:	
  4412                           ; 1 bytes @ 0x0
  4413                           
  4414  00A0                     ??_InitializeTaps:	
  4415                           ; 1 bytes @ 0x0
  4416                           
  4417  00A0                     ??_update_mode:	
  4418                           ; 1 bytes @ 0x0
  4419                           
  4420  00A0                     ??_init_adc:	
  4421                           ; 1 bytes @ 0x0
  4422                           
  4423  00A0                     ??_init_pwm:	
  4424                           ; 1 bytes @ 0x0
  4425                           
  4426  00A0                     ??_init_timer2:	
  4427                           ; 1 bytes @ 0x0
  4428                           
  4429  00A0                     ??_init_timer0:	
  4430                           ; 1 bytes @ 0x0
  4431                           
  4432  00A0                     ?_set_leds_bottom:	
  4433                           ; 1 bytes @ 0x0
  4434                           
  4435  00A0                     ??_getCurrentLEDState:	
  4436                           ; 1 bytes @ 0x0
  4437                           
  4438  00A0                     ??_restoreLEDState:	
  4439                           ; 1 bytes @ 0x0
  4440                           
  4441  00A0                     ?_setFeedbackState:	
  4442                           ; 1 bytes @ 0x0
  4443                           
  4444  00A0                     ?_setLongTapState:	
  4445                           ; 1 bytes @ 0x0
  4446                           
  4447  00A0                     ??_initTapeModeState:	
  4448                           ; 1 bytes @ 0x0
  4449                           
  4450  00A0                     ?_updateSwitchBypassState:	
  4451                           ; 1 bytes @ 0x0
  4452                           
  4453  00A0                     ?_adc_convert:	
  4454                           ; 1 bytes @ 0x0
  4455                           
  4456  00A0                     ?_FLASH_ReadWord:	
  4457                           ; 2 bytes @ 0x0
  4458                           
  4459  00A0                     ?_getSwitchBypassState:	
  4460                           ; 2 bytes @ 0x0
  4461                           
  4462  00A0                     ?___ftpack:	
  4463                           ; 2 bytes @ 0x0
  4464                           
  4465  00A0                     ?_frexp:	
  4466                           ; 3 bytes @ 0x0
  4467                           
  4468  00A0                     ?___ftneg:	
  4469                           ; 3 bytes @ 0x0
  4470                           
  4471  00A0                     ?___lmul:	
  4472                           ; 3 bytes @ 0x0
  4473                           
  4474  00A0                     ?___aldiv:	
  4475                           ; 4 bytes @ 0x0
  4476                           
  4477  00A0                     FLASH_ReadWord@flashAddr:	
  4478                           ; 4 bytes @ 0x0
  4479                           
  4480  00A0                     set_leds_top@x:	
  4481                           ; 2 bytes @ 0x0
  4482                           
  4483  00A0                     set_leds_bottom@x:	
  4484                           ; 2 bytes @ 0x0
  4485                           
  4486  00A0                     updateSwitchBypassState@state:	
  4487                           ; 2 bytes @ 0x0
  4488                           
  4489  00A0                     setFeedbackState@f_state:	
  4490                           ; 2 bytes @ 0x0
  4491                           
  4492  00A0                     setLongTapState@f_state:	
  4493                           ; 2 bytes @ 0x0
  4494                           
  4495  00A0                     ___ftpack@arg:	
  4496                           ; 2 bytes @ 0x0
  4497                           
  4498  00A0                     ___ftneg@f1:	
  4499                           ; 3 bytes @ 0x0
  4500                           
  4501  00A0                     frexp@value:	
  4502                           ; 3 bytes @ 0x0
  4503                           
  4504  00A0                     ___lmul@multiplier:	
  4505                           ; 3 bytes @ 0x0
  4506                           
  4507  00A0                     ___aldiv@divisor:	
  4508                           ; 4 bytes @ 0x0
  4509                           
  4510                           
  4511                           ; 4 bytes @ 0x0
  4512  00A0                     	ds	1
  4513  00A1                     InitializeTaps@itap:	
  4514                           
  4515                           ; 2 bytes @ 0x1
  4516  00A1                     	ds	1
  4517  00A2                     ??_adc_convert:	
  4518  00A2                     ??_FLASH_ReadWord:	
  4519                           ; 1 bytes @ 0x2
  4520                           
  4521  00A2                     ??_set_leds_bottom:	
  4522                           ; 1 bytes @ 0x2
  4523                           
  4524  00A2                     ??_setFeedbackState:	
  4525                           ; 1 bytes @ 0x2
  4526                           
  4527  00A2                     ??_setLongTapState:	
  4528                           ; 1 bytes @ 0x2
  4529                           
  4530  00A2                     ??_updateSwitchBypassState:	
  4531                           ; 1 bytes @ 0x2
  4532                           
  4533  00A2                     ??_getSwitchBypassState:	
  4534                           ; 1 bytes @ 0x2
  4535                           
  4536  00A2                     FLASH_ReadWord@GIEBitValue:	
  4537                           ; 1 bytes @ 0x2
  4538                           
  4539  00A2                     set_leds_top@ledState:	
  4540                           ; 1 bytes @ 0x2
  4541                           
  4542                           
  4543                           ; 2 bytes @ 0x2
  4544  00A2                     	ds	1
  4545  00A3                     ??___ftneg:	
  4546  00A3                     adc_convert@channel:	
  4547                           ; 1 bytes @ 0x3
  4548                           
  4549  00A3                     ___ftpack@exp:	
  4550                           ; 1 bytes @ 0x3
  4551                           
  4552  00A3                     frexp@eptr:	
  4553                           ; 1 bytes @ 0x3
  4554                           
  4555                           
  4556                           ; 1 bytes @ 0x3
  4557  00A3                     	ds	1
  4558  00A4                     ??_set_leds_top:	
  4559  00A4                     ??_ReadSavedSettings:	
  4560                           ; 1 bytes @ 0x4
  4561                           
  4562  00A4                     ??_frexp:	
  4563                           ; 1 bytes @ 0x4
  4564                           
  4565  00A4                     ___ftpack@sign:	
  4566                           ; 1 bytes @ 0x4
  4567                           
  4568  00A4                     ___lmul@multiplicand:	
  4569                           ; 1 bytes @ 0x4
  4570                           
  4571  00A4                     ___aldiv@dividend:	
  4572                           ; 4 bytes @ 0x4
  4573                           
  4574                           
  4575                           ; 4 bytes @ 0x4
  4576  00A4                     	ds	1
  4577  00A5                     ??___ftpack:	
  4578                           
  4579                           ; 1 bytes @ 0x5
  4580  00A5                     	ds	3
  4581  00A8                     ??___lmul:	
  4582  00A8                     ??___aldiv:	
  4583                           ; 1 bytes @ 0x8
  4584                           
  4585  00A8                     ?___awtoft:	
  4586                           ; 1 bytes @ 0x8
  4587                           
  4588  00A8                     ?___ftadd:	
  4589                           ; 3 bytes @ 0x8
  4590                           
  4591  00A8                     ___awtoft@c:	
  4592                           ; 3 bytes @ 0x8
  4593                           
  4594  00A8                     ___ftadd@f1:	
  4595                           ; 2 bytes @ 0x8
  4596                           
  4597  00A8                     ___lmul@product:	
  4598                           ; 3 bytes @ 0x8
  4599                           
  4600                           
  4601                           ; 4 bytes @ 0x8
  4602  00A8                     	ds	1
  4603  00A9                     ___aldiv@counter:	
  4604                           
  4605                           ; 1 bytes @ 0x9
  4606  00A9                     	ds	1
  4607  00AA                     ___aldiv@sign:	
  4608                           
  4609                           ; 1 bytes @ 0xA
  4610  00AA                     	ds	1
  4611  00AB                     ??___awtoft:	
  4612  00AB                     ___ftadd@f2:	
  4613                           ; 1 bytes @ 0xB
  4614                           
  4615  00AB                     ___aldiv@quotient:	
  4616                           ; 3 bytes @ 0xB
  4617                           
  4618                           
  4619                           ; 4 bytes @ 0xB
  4620  00AB                     	ds	1
  4621  00AC                     ?_wait_ms:	
  4622  00AC                     wait_ms@timeSec:	
  4623                           ; 1 bytes @ 0xC
  4624                           
  4625                           
  4626                           ; 2 bytes @ 0xC
  4627  00AC                     	ds	1
  4628  00AD                     ___awtoft@sign:	
  4629                           
  4630                           ; 1 bytes @ 0xD
  4631  00AD                     	ds	1
  4632  00AE                     ??_wait_ms:	
  4633  00AE                     ??___ftadd:	
  4634                           ; 1 bytes @ 0xE
  4635                           
  4636  00AE                     wait_ms@timemsl:	
  4637                           ; 1 bytes @ 0xE
  4638                           
  4639                           
  4640                           ; 4 bytes @ 0xE
  4641  00AE                     	ds	4
  4642  00B2                     ??_read_bottom_tactile:	
  4643  00B2                     ??_read_top_tactile:	
  4644                           ; 1 bytes @ 0x12
  4645                           
  4646  00B2                     ??_update_expressSwitchState:	
  4647                           ; 1 bytes @ 0x12
  4648                           
  4649  00B2                     ??_star_tactiles:	
  4650                           ; 1 bytes @ 0x12
  4651                           
  4652  00B2                     ??_solidring_tactiles:	
  4653                           ; 1 bytes @ 0x12
  4654                           
  4655  00B2                     ?_setSwitchBypassState:	
  4656                           ; 1 bytes @ 0x12
  4657                           
  4658  00B2                     ?_setDoublePressState:	
  4659                           ; 1 bytes @ 0x12
  4660                           
  4661  00B2                     ??_initExpModeState:	
  4662                           ; 1 bytes @ 0x12
  4663                           
  4664  00B2                     ___ftadd@sign:	
  4665                           ; 1 bytes @ 0x12
  4666                           
  4667  00B2                     setSwitchBypassState@f_state:	
  4668                           ; 1 bytes @ 0x12
  4669                           
  4670  00B2                     setDoublePressState@f_state:	
  4671                           ; 2 bytes @ 0x12
  4672                           
  4673                           
  4674                           ; 2 bytes @ 0x12
  4675  00B2                     	ds	1
  4676  00B3                     ___ftadd@exp2:	
  4677                           
  4678                           ; 1 bytes @ 0x13
  4679  00B3                     	ds	1
  4680  00B4                     ??_setSwitchBypassState:	
  4681  00B4                     ??_setDoublePressState:	
  4682                           ; 1 bytes @ 0x14
  4683                           
  4684  00B4                     star_tactiles@reverse:	
  4685                           ; 1 bytes @ 0x14
  4686                           
  4687  00B4                     solidring_tactiles@ring_delay:	
  4688                           ; 1 bytes @ 0x14
  4689                           
  4690  00B4                     ___ftadd@exp1:	
  4691                           ; 1 bytes @ 0x14
  4692                           
  4693                           
  4694                           ; 1 bytes @ 0x14
  4695  00B4                     	ds	1
  4696  00B5                     ?___ftmul:	
  4697  00B5                     star_tactiles@iLed:	
  4698                           ; 3 bytes @ 0x15
  4699                           
  4700  00B5                     ___ftmul@f1:	
  4701                           ; 2 bytes @ 0x15
  4702                           
  4703                           
  4704                           ; 3 bytes @ 0x15
  4705  00B5                     	ds	1
  4706  00B6                     ??_initSwitchBypass:	
  4707  00B6                     ??_updateSwitchBypass:	
  4708                           ; 1 bytes @ 0x16
  4709                           
  4710  00B6                     ??_updateSwitchTap:	
  4711                           ; 1 bytes @ 0x16
  4712                           
  4713  00B6                     initSwitchBypass@initState:	
  4714                           ; 1 bytes @ 0x16
  4715                           
  4716                           
  4717                           ; 2 bytes @ 0x16
  4718  00B6                     	ds	1
  4719  00B7                     star_tactiles@iLed_1453:	
  4720                           
  4721                           ; 2 bytes @ 0x17
  4722  00B7                     	ds	1
  4723  00B8                     ___ftmul@f2:	
  4724                           
  4725                           ; 3 bytes @ 0x18
  4726  00B8                     	ds	1
  4727  00B9                     ??_showBootSequence:	
  4728                           
  4729                           ; 1 bytes @ 0x19
  4730  00B9                     	ds	2
  4731  00BB                     ??___ftmul:	
  4732                           
  4733                           ; 1 bytes @ 0x1B
  4734  00BB                     	ds	1
  4735  00BC                     updateSwitchTap@tapCntDivisor:	
  4736                           
  4737                           ; 2 bytes @ 0x1C
  4738  00BC                     	ds	2
  4739  00BE                     updateSwitchTap@iCnt:	
  4740                           
  4741                           ; 1 bytes @ 0x1E
  4742  00BE                     	ds	1
  4743  00BF                     ___ftmul@exp:	
  4744                           
  4745                           ; 1 bytes @ 0x1F
  4746  00BF                     	ds	1
  4747  00C0                     ___ftmul@f3_as_product:	
  4748                           
  4749                           ; 3 bytes @ 0x20
  4750  00C0                     	ds	3
  4751  00C3                     ___ftmul@cntr:	
  4752                           
  4753                           ; 1 bytes @ 0x23
  4754  00C3                     	ds	1
  4755  00C4                     ___ftmul@sign:	
  4756                           
  4757                           ; 1 bytes @ 0x24
  4758  00C4                     	ds	1
  4759  00C5                     ?___ftdiv:	
  4760  00C5                     ___ftdiv@f2:	
  4761                           ; 3 bytes @ 0x25
  4762                           
  4763                           
  4764                           ; 3 bytes @ 0x25
  4765  00C5                     	ds	3
  4766  00C8                     ___ftdiv@f1:	
  4767                           
  4768                           ; 3 bytes @ 0x28
  4769  00C8                     	ds	3
  4770  00CB                     ??___ftdiv:	
  4771                           
  4772                           ; 1 bytes @ 0x2B
  4773  00CB                     	ds	4
  4774  00CF                     ___ftdiv@cntr:	
  4775                           
  4776                           ; 1 bytes @ 0x2F
  4777  00CF                     	ds	1
  4778  00D0                     ___ftdiv@f3:	
  4779                           
  4780                           ; 3 bytes @ 0x30
  4781  00D0                     	ds	3
  4782  00D3                     ___ftdiv@exp:	
  4783                           
  4784                           ; 1 bytes @ 0x33
  4785  00D3                     	ds	1
  4786  00D4                     ___ftdiv@sign:	
  4787                           
  4788                           ; 1 bytes @ 0x34
  4789  00D4                     	ds	1
  4790  00D5                     ?_map:	
  4791  00D5                     map@x:	
  4792                           ; 3 bytes @ 0x35
  4793                           
  4794                           
  4795                           ; 3 bytes @ 0x35
  4796  00D5                     	ds	3
  4797  00D8                     map@in_min:	
  4798                           
  4799                           ; 3 bytes @ 0x38
  4800  00D8                     	ds	3
  4801  00DB                     map@in_max:	
  4802                           
  4803                           ; 3 bytes @ 0x3B
  4804  00DB                     	ds	3
  4805  00DE                     map@out_min:	
  4806                           
  4807                           ; 3 bytes @ 0x3E
  4808  00DE                     	ds	3
  4809  00E1                     map@out_max:	
  4810                           
  4811                           ; 3 bytes @ 0x41
  4812  00E1                     	ds	3
  4813  00E4                     ??_map:	
  4814  00E4                     _map$2292:	
  4815                           ; 1 bytes @ 0x44
  4816                           
  4817                           
  4818                           ; 3 bytes @ 0x44
  4819  00E4                     	ds	3
  4820  00E7                     ?___fttol:	
  4821  00E7                     ___fttol@f1:	
  4822                           ; 4 bytes @ 0x47
  4823                           
  4824                           
  4825                           ; 3 bytes @ 0x47
  4826  00E7                     	ds	4
  4827  00EB                     ??___fttol:	
  4828                           
  4829                           ; 1 bytes @ 0x4B
  4830  00EB                     	ds	4
  4831  00EF                     ??_trunc:	
  4832                           
  4833                           ; 1 bytes @ 0x4F
  4834  00EF                     	ds	1
  4835                           
  4836                           	psect	cstackCOMMON
  4837  0070                     __pcstackCOMMON:	
  4838  0070                     ?_ConfigureOscillator:	
  4839  0070                     ?_InitApp:	
  4840                           ; 1 bytes @ 0x0
  4841                           
  4842  0070                     ?_InitializeTaps:	
  4843                           ; 1 bytes @ 0x0
  4844                           
  4845  0070                     ?_initSwitchBypass:	
  4846                           ; 1 bytes @ 0x0
  4847                           
  4848  0070                     ?_ReadSavedSettings:	
  4849                           ; 1 bytes @ 0x0
  4850                           
  4851  0070                     ?_read_bottom_tactile:	
  4852                           ; 1 bytes @ 0x0
  4853                           
  4854  0070                     ?_read_top_tactile:	
  4855                           ; 1 bytes @ 0x0
  4856                           
  4857  0070                     ?_update_mode:	
  4858                           ; 1 bytes @ 0x0
  4859                           
  4860  0070                     ?_showBootSequence:	
  4861                           ; 1 bytes @ 0x0
  4862                           
  4863  0070                     ?_updateSwitchBypass:	
  4864                           ; 1 bytes @ 0x0
  4865                           
  4866  0070                     ?_updateSwitchTap:	
  4867                           ; 1 bytes @ 0x0
  4868                           
  4869  0070                     ?_init_adc:	
  4870                           ; 1 bytes @ 0x0
  4871                           
  4872  0070                     ?_init_pwm:	
  4873                           ; 1 bytes @ 0x0
  4874                           
  4875  0070                     ?_init_timer2:	
  4876                           ; 1 bytes @ 0x0
  4877                           
  4878  0070                     ?_init_timer0:	
  4879                           ; 1 bytes @ 0x0
  4880                           
  4881  0070                     ?_getCurrentLEDState:	
  4882                           ; 1 bytes @ 0x0
  4883                           
  4884  0070                     ?_star_tactiles:	
  4885                           ; 1 bytes @ 0x0
  4886                           
  4887  0070                     ?_solidring_tactiles:	
  4888                           ; 1 bytes @ 0x0
  4889                           
  4890  0070                     ?_restoreLEDState:	
  4891                           ; 1 bytes @ 0x0
  4892                           
  4893  0070                     ?_initExpModeState:	
  4894                           ; 1 bytes @ 0x0
  4895                           
  4896  0070                     ?_initTapeModeState:	
  4897                           ; 1 bytes @ 0x0
  4898                           
  4899  0070                     ?_isr:	
  4900                           ; 1 bytes @ 0x0
  4901                           
  4902  0070                     ?_main:	
  4903                           ; 1 bytes @ 0x0
  4904                           
  4905  0070                     ?i1_set_leds_top:	
  4906                           ; 1 bytes @ 0x0
  4907                           
  4908  0070                     ?_update_expressSwitchState:	
  4909                           ; 1 bytes @ 0x0
  4910                           
  4911  0070                     ?___awdiv:	
  4912                           ; 2 bytes @ 0x0
  4913                           
  4914  0070                     ?i1___lmul:	
  4915                           ; 2 bytes @ 0x0
  4916                           
  4917  0070                     ___awdiv@divisor:	
  4918                           ; 4 bytes @ 0x0
  4919                           
  4920  0070                     i1set_leds_top@x:	
  4921                           ; 2 bytes @ 0x0
  4922                           
  4923  0070                     i1___lmul@multiplier:	
  4924                           ; 2 bytes @ 0x0
  4925                           
  4926                           
  4927                           ; 4 bytes @ 0x0
  4928  0070                     	ds	2
  4929  0072                     ___awdiv@dividend:	
  4930  0072                     i1set_leds_top@ledState:	
  4931                           ; 2 bytes @ 0x2
  4932                           
  4933                           
  4934                           ; 2 bytes @ 0x2
  4935  0072                     	ds	2
  4936  0074                     ??___awdiv:	
  4937  0074                     ??i1_set_leds_top:	
  4938                           ; 1 bytes @ 0x4
  4939                           
  4940  0074                     i1___lmul@multiplicand:	
  4941                           ; 1 bytes @ 0x4
  4942                           
  4943                           
  4944                           ; 4 bytes @ 0x4
  4945  0074                     	ds	1
  4946  0075                     ___awdiv@counter:	
  4947                           
  4948                           ; 1 bytes @ 0x5
  4949  0075                     	ds	1
  4950  0076                     ___awdiv@sign:	
  4951                           
  4952                           ; 1 bytes @ 0x6
  4953  0076                     	ds	1
  4954  0077                     ___awdiv@quotient:	
  4955                           
  4956                           ; 2 bytes @ 0x7
  4957  0077                     	ds	1
  4958  0078                     ??i1___lmul:	
  4959  0078                     i1___lmul@product:	
  4960                           ; 1 bytes @ 0x8
  4961                           
  4962                           
  4963                           ; 4 bytes @ 0x8
  4964  0078                     	ds	4
  4965  007C                     ??i1___aldiv:	
  4966                           
  4967                           ; 1 bytes @ 0xC
  4968  007C                     	ds	1
  4969                           
  4970                           	psect	cstackBANK0
  4971  0020                     __pcstackBANK0:	
  4972  0020                     ?i1___aldiv:	
  4973  0020                     i1___aldiv@divisor:	
  4974                           ; 4 bytes @ 0x0
  4975                           
  4976                           
  4977                           ; 4 bytes @ 0x0
  4978  0020                     	ds	4
  4979  0024                     i1___aldiv@dividend:	
  4980                           
  4981                           ; 4 bytes @ 0x4
  4982  0024                     	ds	4
  4983  0028                     i1___aldiv@counter:	
  4984                           
  4985                           ; 1 bytes @ 0x8
  4986  0028                     	ds	1
  4987  0029                     i1___aldiv@sign:	
  4988                           
  4989                           ; 1 bytes @ 0x9
  4990  0029                     	ds	1
  4991  002A                     i1___aldiv@quotient:	
  4992                           
  4993                           ; 4 bytes @ 0xA
  4994  002A                     	ds	4
  4995  002E                     ?_modulation:	
  4996  002E                     modulation@x:	
  4997                           ; 4 bytes @ 0xE
  4998                           
  4999                           
  5000                           ; 4 bytes @ 0xE
  5001  002E                     	ds	4
  5002  0032                     modulation@y:	
  5003                           
  5004                           ; 4 bytes @ 0x12
  5005  0032                     	ds	4
  5006  0036                     ??_modulation:	
  5007                           
  5008                           ; 1 bytes @ 0x16
  5009  0036                     	ds	4
  5010  003A                     ??_isr:	
  5011                           
  5012                           ; 1 bytes @ 0x1A
  5013  003A                     	ds	9
  5014  0043                     isr@tmpSubDelay:	
  5015                           
  5016                           ; 2 bytes @ 0x23
  5017  0043                     	ds	2
  5018                           
  5019                           	psect	maintext
  5020  0397                     __pmaintext:	
  5021 ;;
  5022 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5023 ;;
  5024 ;; *************** function _main *****************
  5025 ;; Defined at:
  5026 ;;		line 83 in file "main.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;		None
  5029 ;; Auto vars:     Size  Location     Type
  5030 ;;  i               2    4[BANK4 ] int 
  5031 ;;  i               2    2[BANK4 ] int 
  5032 ;;  i               2    0[BANK4 ] int 
  5033 ;; Return value:  Size  Location     Type
  5034 ;;                  1    wreg      void 
  5035 ;; Registers used:
  5036 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5037 ;; Tracked objects:
  5038 ;;		On entry : B1F/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5043 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5044 ;;      Temps:          0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5045 ;;      Totals:         0       0       0      15       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5046 ;;Total ram usage:       21 bytes
  5047 ;; Hardware stack levels required when called:    7
  5048 ;; This function calls:
  5049 ;;		_ConfigureOscillator
  5050 ;;		_InitApp
  5051 ;;		_InitializeTaps
  5052 ;;		_ReadSavedSettings
  5053 ;;		___awtoft
  5054 ;;		___fttol
  5055 ;;		_adc_convert
  5056 ;;		_initSwitchBypass
  5057 ;;		_map
  5058 ;;		_read_bottom_tactile
  5059 ;;		_read_top_tactile
  5060 ;;		_set_subdivision
  5061 ;;		_showBootSequence
  5062 ;;		_updateSwitchBypass
  5063 ;;		_updateSwitchTap
  5064 ;;		_update_expressSwitchState
  5065 ;;		_update_mode
  5066 ;; This function is called by:
  5067 ;;		Startup code after reset
  5068 ;; This function uses a non-reentrant model
  5069 ;;
  5070                           
  5071                           
  5072                           ;psect for function _main
  5073  0397                     _main:	
  5074                           
  5075                           ;main.c: 84: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5076                           
  5077                           ;incstack = 0
  5078                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5079  0397  3028               	movlw	40
  5080  0398  0023               	movlb	3	; select bank3
  5081  0399  00EB               	movwf	_B25kLength^(0+384)
  5082  039A  3000               	movlw	0
  5083  039B  00EC               	movwf	(_B25kLength^(0+384)+1)
  5084                           
  5085                           ;main.c: 86: ConfigureOscillator();
  5086  039C  319D  2545  3183   	fcall	_ConfigureOscillator
  5087                           
  5088                           ;main.c: 87: InitApp();
  5089  039F  319F  2702  3183   	fcall	_InitApp
  5090                           
  5091                           ;main.c: 89: PORTEbits.RE0 = 1;
  5092  03A2  0020               	movlb	0	; select bank0
  5093  03A3  1410               	bsf	16,0	;volatile
  5094                           
  5095                           ;main.c: 90: PORTEbits.RE1 = 1;
  5096  03A4  1490               	bsf	16,1	;volatile
  5097                           
  5098                           ;main.c: 91: PORTDbits.RD6 = 1;
  5099  03A5  170F               	bsf	15,6	;volatile
  5100                           
  5101                           ;main.c: 92: PORTDbits.RD5 = 1;
  5102  03A6  168F               	bsf	15,5	;volatile
  5103                           
  5104                           ;main.c: 93: PORTCbits.RC0 = 1;
  5105  03A7  140E               	bsf	14,0	;volatile
  5106                           
  5107                           ;main.c: 94: PORTDbits.RD7 = 1;
  5108  03A8  178F               	bsf	15,7	;volatile
  5109                           
  5110                           ;main.c: 96: InitializeTaps();
  5111  03A9  319E  2682  3183   	fcall	_InitializeTaps
  5112                           
  5113                           ;main.c: 97: initSwitchBypass();
  5114  03AC  319D  25A6  3183   	fcall	_initSwitchBypass
  5115                           
  5116                           ;main.c: 100: ReadSavedSettings();
  5117  03AF  3195  255C  3183   	fcall	_ReadSavedSettings
  5118  03B2                     l6128:	
  5119                           ;main.c: 102: while (1) {
  5120                           
  5121                           
  5122                           ;main.c: 103: read_bottom_tactile();
  5123  03B2  3192  221D  3183   	fcall	_read_bottom_tactile
  5124                           
  5125                           ;main.c: 104: read_top_tactile();
  5126  03B5  3193  2341  3183   	fcall	_read_top_tactile
  5127                           
  5128                           ;main.c: 106: update_expressSwitchState();
  5129  03B8  319D  25DA  3183   	fcall	_update_expressSwitchState
  5130                           
  5131                           ;main.c: 108: update_mode();
  5132  03BB  3191  21DC  3183   	fcall	_update_mode
  5133                           
  5134                           ;main.c: 110: if (PORTDbits.RD7 == 0) {
  5135  03BE  0020               	movlb	0	; select bank0
  5136  03BF  1B8F               	btfsc	15,7	;volatile
  5137  03C0  2BDF               	goto	l6144
  5138                           
  5139                           ;main.c: 111: debounce_mode1++;
  5140  03C1  3001               	movlw	1
  5141  03C2  0023               	movlb	3	; select bank3
  5142  03C3  07C8               	addwf	_debounce_mode1^(0+384),f
  5143  03C4  3000               	movlw	0
  5144  03C5  3DC9               	addwfc	(_debounce_mode1+1)^(0+384),f
  5145                           
  5146                           ;main.c: 112: if (debounce_mode1 > 25) {
  5147  03C6  0849               	movf	(_debounce_mode1+1)^(0+384),w
  5148  03C7  3A80               	xorlw	128
  5149  03C8  0022               	movlb	2	; select bank2
  5150  03C9  00C2               	movwf	??_main^(0+256)
  5151  03CA  3080               	movlw	128
  5152  03CB  0242               	subwf	??_main^(0+256),w
  5153  03CC  1D03               	skipz
  5154  03CD  2BD1               	goto	u6875
  5155  03CE  301A               	movlw	26
  5156  03CF  0023               	movlb	3	; select bank3
  5157  03D0  0248               	subwf	_debounce_mode1^(0+384),w
  5158  03D1                     u6875:	
  5159  03D1  1C03               	skipc
  5160  03D2  2BE2               	goto	l6146
  5161                           
  5162                           ;main.c: 113: debounce_mode1 = 25;
  5163  03D3  3019               	movlw	25
  5164  03D4  0023               	movlb	3	; select bank3
  5165  03D5  00C8               	movwf	_debounce_mode1^(0+384)
  5166  03D6  3000               	movlw	0
  5167  03D7  00C9               	movwf	(_debounce_mode1^(0+384)+1)
  5168                           
  5169                           ;main.c: 117: showBootSequence();
  5170  03D8  319E  26A8  3183   	fcall	_showBootSequence
  5171  03DB                     l310:	
  5172                           ;main.c: 120: while (PORTDbits.RD7 == 0) {
  5173                           
  5174  03DB  0020               	movlb	0	; select bank0
  5175  03DC  1B8F               	btfsc	15,7	;volatile
  5176  03DD  2BE2               	goto	l6146
  5177  03DE  2BDB               	goto	l310
  5178  03DF                     l6144:	
  5179                           ;main.c: 121: }
  5180                           ;main.c: 122: }
  5181                           ;main.c: 123: } else {
  5182                           
  5183                           
  5184                           ;main.c: 124: debounce_mode1 = 0;
  5185  03DF  0023               	movlb	3	; select bank3
  5186  03E0  01C8               	clrf	_debounce_mode1^(0+384)
  5187  03E1  01C9               	clrf	(_debounce_mode1+1)^(0+384)
  5188  03E2                     l6146:	
  5189                           
  5190                           ;main.c: 125: }
  5191                           ;main.c: 127: updateSwitchBypass();
  5192  03E2  318A  2233  3183   	fcall	_updateSwitchBypass
  5193                           
  5194                           ;main.c: 128: updateSwitchTap();
  5195  03E5  318C  2414  3183   	fcall	_updateSwitchTap
  5196                           
  5197                           ;main.c: 131: knob_1_pos = adc_convert(0);
  5198  03E8  3000               	movlw	0
  5199  03E9  319D  25C7  3183   	fcall	_adc_convert
  5200  03EC  0021               	movlb	1	; select bank1
  5201  03ED  0821               	movf	(?_adc_convert+1)^(0+128),w
  5202  03EE  0022               	movlb	2	; select bank2
  5203  03EF  00D6               	movwf	(_knob_1_pos+1)^(0+256)
  5204  03F0  0021               	movlb	1	; select bank1
  5205  03F1  0820               	movf	?_adc_convert^(0+128),w
  5206  03F2  0022               	movlb	2	; select bank2
  5207  03F3  00D5               	movwf	_knob_1_pos^(0+256)
  5208                           
  5209                           ;main.c: 132: knob_2_pos = adc_convert(1);
  5210  03F4  3001               	movlw	1
  5211  03F5  319D  25C7  3183   	fcall	_adc_convert
  5212  03F8  0021               	movlb	1	; select bank1
  5213  03F9  0821               	movf	(?_adc_convert+1)^(0+128),w
  5214  03FA  0023               	movlb	3	; select bank3
  5215  03FB  00D1               	movwf	(_knob_2_pos+1)^(0+384)
  5216  03FC  0021               	movlb	1	; select bank1
  5217  03FD  0820               	movf	?_adc_convert^(0+128),w
  5218  03FE  0023               	movlb	3	; select bank3
  5219  03FF  00D0               	movwf	_knob_2_pos^(0+384)
  5220                           
  5221                           ;main.c: 133: knob_3_pos = adc_convert(2);
  5222  0400  3002               	movlw	2
  5223  0401  319D  25C7  3183   	fcall	_adc_convert
  5224  0404  0021               	movlb	1	; select bank1
  5225  0405  0821               	movf	(?_adc_convert+1)^(0+128),w
  5226  0406  0023               	movlb	3	; select bank3
  5227  0407  00D3               	movwf	(_knob_3_pos+1)^(0+384)
  5228  0408  0021               	movlb	1	; select bank1
  5229  0409  0820               	movf	?_adc_convert^(0+128),w
  5230  040A  0023               	movlb	3	; select bank3
  5231  040B  00D2               	movwf	_knob_3_pos^(0+384)
  5232                           
  5233                           ;main.c: 134: knob_4_pos = adc_convert(3);
  5234  040C  3003               	movlw	3
  5235  040D  319D  25C7  3183   	fcall	_adc_convert
  5236  0410  0021               	movlb	1	; select bank1
  5237  0411  0821               	movf	(?_adc_convert+1)^(0+128),w
  5238  0412  0023               	movlb	3	; select bank3
  5239  0413  00D5               	movwf	(_knob_4_pos+1)^(0+384)
  5240  0414  0021               	movlb	1	; select bank1
  5241  0415  0820               	movf	?_adc_convert^(0+128),w
  5242  0416  0023               	movlb	3	; select bank3
  5243  0417  00D4               	movwf	_knob_4_pos^(0+384)
  5244                           
  5245                           ;main.c: 135: knob_5_pos = adc_convert(4);
  5246  0418  3004               	movlw	4
  5247  0419  319D  25C7  3183   	fcall	_adc_convert
  5248  041C  0021               	movlb	1	; select bank1
  5249  041D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5250  041E  0023               	movlb	3	; select bank3
  5251  041F  00D7               	movwf	(_knob_5_pos+1)^(0+384)
  5252  0420  0021               	movlb	1	; select bank1
  5253  0421  0820               	movf	?_adc_convert^(0+128),w
  5254  0422  0023               	movlb	3	; select bank3
  5255  0423  00D6               	movwf	_knob_5_pos^(0+384)
  5256                           
  5257                           ;main.c: 163: if (bottom_push_state != 5) {
  5258  0424  3005               	movlw	5
  5259  0425  0020               	movlb	0	; select bank0
  5260  0426  0660               	xorwf	_bottom_push_state,w
  5261  0427  0461               	iorwf	_bottom_push_state+1,w
  5262  0428  1903               	btfsc	3,2
  5263  0429  2CAB               	goto	l6172
  5264                           
  5265                           ;main.c: 164: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5266  042A  0022               	movlb	2	; select bank2
  5267  042B  0962               	comf	_knob1_prev^(0+256),w	;volatile
  5268  042C  00C2               	movwf	??_main^(0+256)
  5269  042D  0963               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5270  042E  00C3               	movwf	(??_main^(0+256)+1)
  5271  042F  0AC2               	incf	??_main^(0+256),f
  5272  0430  1903               	skipnz
  5273  0431  0AC3               	incf	(??_main^(0+256)+1),f
  5274  0432  0855               	movf	_knob_1_pos^(0+256),w
  5275  0433  0742               	addwf	??_main^(0+256),w
  5276  0434  00C4               	movwf	(??_main+2)^(0+256)
  5277  0435  0856               	movf	(_knob_1_pos+1)^(0+256),w
  5278  0436  3D43               	addwfc	(??_main+1)^(0+256),w
  5279  0437  00C5               	movwf	(??_main+3)^(0+256)
  5280  0438  0845               	movf	(??_main+3)^(0+256),w
  5281  0439  3A80               	xorlw	128
  5282  043A  00C6               	movwf	(??_main+4)^(0+256)
  5283  043B  3080               	movlw	128
  5284  043C  0246               	subwf	(??_main+4)^(0+256),w
  5285  043D  1D03               	skipz
  5286  043E  2C41               	goto	u6905
  5287  043F  3004               	movlw	4
  5288  0440  0244               	subwf	(??_main+2)^(0+256),w
  5289  0441                     u6905:	
  5290  0441  1803               	skipnc
  5291  0442  2C5C               	goto	l6166
  5292  0443  0022               	movlb	2	; select bank2
  5293  0444  0962               	comf	_knob1_prev^(0+256),w	;volatile
  5294  0445  00C2               	movwf	??_main^(0+256)
  5295  0446  0963               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5296  0447  00C3               	movwf	(??_main^(0+256)+1)
  5297  0448  0AC2               	incf	??_main^(0+256),f
  5298  0449  1903               	skipnz
  5299  044A  0AC3               	incf	(??_main^(0+256)+1),f
  5300  044B  0855               	movf	_knob_1_pos^(0+256),w
  5301  044C  0742               	addwf	??_main^(0+256),w
  5302  044D  00C4               	movwf	(??_main+2)^(0+256)
  5303  044E  0856               	movf	(_knob_1_pos+1)^(0+256),w
  5304  044F  3D43               	addwfc	(??_main+1)^(0+256),w
  5305  0450  00C5               	movwf	(??_main+3)^(0+256)
  5306  0451  0845               	movf	(??_main+3)^(0+256),w
  5307  0452  3A80               	xorlw	128
  5308  0453  00C6               	movwf	(??_main+4)^(0+256)
  5309  0454  307F               	movlw	127
  5310  0455  0246               	subwf	(??_main+4)^(0+256),w
  5311  0456  1D03               	skipz
  5312  0457  2C5A               	goto	u6915
  5313  0458  30FD               	movlw	253
  5314  0459  0244               	subwf	(??_main+2)^(0+256),w
  5315  045A                     u6915:	
  5316  045A  1803               	skipnc
  5317  045B  2CAB               	goto	l6172
  5318  045C                     l6166:	
  5319                           
  5320                           ;main.c: 165: knob1_prev = knob_1_pos;
  5321  045C  0022               	movlb	2	; select bank2
  5322  045D  0856               	movf	(_knob_1_pos+1)^(0+256),w
  5323  045E  00E3               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5324  045F  0855               	movf	_knob_1_pos^(0+256),w
  5325  0460  00E2               	movwf	_knob1_prev^(0+256)	;volatile
  5326                           
  5327                           ;main.c: 166: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5328  0461  3000               	movlw	0
  5329  0462  0021               	movlb	1	; select bank1
  5330  0463  00E1               	movwf	map@out_max^(0+128)
  5331  0464  3048               	movlw	72
  5332  0465  00E2               	movwf	(map@out_max+1)^(0+128)
  5333  0466  3043               	movlw	67
  5334  0467  00E3               	movwf	(map@out_max+2)^(0+128)
  5335  0468  3080               	movlw	128
  5336  0469  00DE               	movwf	map@out_min^(0+128)
  5337  046A  3092               	movlw	146
  5338  046B  00DF               	movwf	(map@out_min+1)^(0+128)
  5339  046C  3044               	movlw	68
  5340  046D  00E0               	movwf	(map@out_min+2)^(0+128)
  5341  046E  30C0               	movlw	192
  5342  046F  00DB               	movwf	map@in_max^(0+128)
  5343  0470  307F               	movlw	127
  5344  0471  00DC               	movwf	(map@in_max+1)^(0+128)
  5345  0472  3044               	movlw	68
  5346  0473  00DD               	movwf	(map@in_max+2)^(0+128)
  5347  0474  3000               	movlw	0
  5348  0475  00D8               	movwf	map@in_min^(0+128)
  5349  0476  3000               	movlw	0
  5350  0477  00D9               	movwf	(map@in_min+1)^(0+128)
  5351  0478  3000               	movlw	0
  5352  0479  00DA               	movwf	(map@in_min+2)^(0+128)
  5353  047A  0022               	movlb	2	; select bank2
  5354  047B  0863               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5355  047C  0021               	movlb	1	; select bank1
  5356  047D  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5357  047E  0022               	movlb	2	; select bank2
  5358  047F  0862               	movf	_knob1_prev^(0+256),w	;volatile
  5359  0480  0021               	movlb	1	; select bank1
  5360  0481  00A8               	movwf	___awtoft@c^(0+128)
  5361  0482  319E  2660  3183   	fcall	___awtoft
  5362  0485  0021               	movlb	1	; select bank1
  5363  0486  0828               	movf	?___awtoft^(0+128),w
  5364  0487  00D5               	movwf	map@x^(0+128)
  5365  0488  0829               	movf	(?___awtoft+1)^(0+128),w
  5366  0489  00D6               	movwf	(map@x+1)^(0+128)
  5367  048A  082A               	movf	(?___awtoft+2)^(0+128),w
  5368  048B  00D7               	movwf	(map@x+2)^(0+128)
  5369  048C  3196  26D6  3183   	fcall	_map
  5370  048F  0021               	movlb	1	; select bank1
  5371  0490  0855               	movf	?_map^(0+128),w
  5372  0491  00E7               	movwf	___fttol@f1^(0+128)
  5373  0492  0856               	movf	(?_map+1)^(0+128),w
  5374  0493  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5375  0494  0857               	movf	(?_map+2)^(0+128),w
  5376  0495  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5377  0496  3197  2761  3183   	fcall	___fttol
  5378  0499  0021               	movlb	1	; select bank1
  5379  049A  0867               	movf	?___fttol^(0+128),w
  5380  049B  0020               	movlb	0	; select bank0
  5381  049C  00D8               	movwf	_baseline_delay_time	;volatile
  5382  049D  0021               	movlb	1	; select bank1
  5383  049E  0868               	movf	(?___fttol^(0+128)+1),w
  5384  049F  0020               	movlb	0	; select bank0
  5385  04A0  00D9               	movwf	_baseline_delay_time+1	;volatile
  5386  04A1  0D89               	rlf	9,f
  5387  04A2  3B89               	subwfb	9,f
  5388  04A3  0989               	comf	9,f
  5389  04A4  00DA               	movwf	_baseline_delay_time+2	;volatile
  5390  04A5  00DB               	movwf	_baseline_delay_time+3	;volatile
  5391                           
  5392                           ;main.c: 167: delay_time_changed = 1;
  5393  04A6  3001               	movlw	1
  5394  04A7  0023               	movlb	3	; select bank3
  5395  04A8  00E2               	movwf	_delay_time_changed^(0+384)
  5396  04A9  3000               	movlw	0
  5397  04AA  00E3               	movwf	(_delay_time_changed^(0+384)+1)
  5398  04AB                     l6172:	
  5399                           
  5400                           ;main.c: 169: }
  5401                           ;main.c: 170: }
  5402                           ;main.c: 180: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5403  04AB  0022               	movlb	2	; select bank2
  5404  04AC  0964               	comf	_knob2_prev^(0+256),w	;volatile
  5405  04AD  00C2               	movwf	??_main^(0+256)
  5406  04AE  0965               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5407  04AF  00C3               	movwf	(??_main^(0+256)+1)
  5408  04B0  0AC2               	incf	??_main^(0+256),f
  5409  04B1  1903               	skipnz
  5410  04B2  0AC3               	incf	(??_main^(0+256)+1),f
  5411  04B3  0023               	movlb	3	; select bank3
  5412  04B4  0850               	movf	_knob_2_pos^(0+384),w
  5413  04B5  0022               	movlb	2	; select bank2
  5414  04B6  0742               	addwf	??_main^(0+256),w
  5415  04B7  00C4               	movwf	(??_main+2)^(0+256)
  5416  04B8  0023               	movlb	3	; select bank3
  5417  04B9  0851               	movf	(_knob_2_pos+1)^(0+384),w
  5418  04BA  0022               	movlb	2	; select bank2
  5419  04BB  3D43               	addwfc	(??_main+1)^(0+256),w
  5420  04BC  00C5               	movwf	(??_main+3)^(0+256)
  5421  04BD  0845               	movf	(??_main+3)^(0+256),w
  5422  04BE  3A80               	xorlw	128
  5423  04BF  00C6               	movwf	(??_main+4)^(0+256)
  5424  04C0  3080               	movlw	128
  5425  04C1  0246               	subwf	(??_main+4)^(0+256),w
  5426  04C2  1D03               	skipz
  5427  04C3  2CC6               	goto	u6925
  5428  04C4  3004               	movlw	4
  5429  04C5  0244               	subwf	(??_main+2)^(0+256),w
  5430  04C6                     u6925:	
  5431  04C6  1803               	skipnc
  5432  04C7  2CE5               	goto	l6176
  5433  04C8  0022               	movlb	2	; select bank2
  5434  04C9  0964               	comf	_knob2_prev^(0+256),w	;volatile
  5435  04CA  00C2               	movwf	??_main^(0+256)
  5436  04CB  0965               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5437  04CC  00C3               	movwf	(??_main^(0+256)+1)
  5438  04CD  0AC2               	incf	??_main^(0+256),f
  5439  04CE  1903               	skipnz
  5440  04CF  0AC3               	incf	(??_main^(0+256)+1),f
  5441  04D0  0023               	movlb	3	; select bank3
  5442  04D1  0850               	movf	_knob_2_pos^(0+384),w
  5443  04D2  0022               	movlb	2	; select bank2
  5444  04D3  0742               	addwf	??_main^(0+256),w
  5445  04D4  00C4               	movwf	(??_main+2)^(0+256)
  5446  04D5  0023               	movlb	3	; select bank3
  5447  04D6  0851               	movf	(_knob_2_pos+1)^(0+384),w
  5448  04D7  0022               	movlb	2	; select bank2
  5449  04D8  3D43               	addwfc	(??_main+1)^(0+256),w
  5450  04D9  00C5               	movwf	(??_main+3)^(0+256)
  5451  04DA  0845               	movf	(??_main+3)^(0+256),w
  5452  04DB  3A80               	xorlw	128
  5453  04DC  00C6               	movwf	(??_main+4)^(0+256)
  5454  04DD  307F               	movlw	127
  5455  04DE  0246               	subwf	(??_main+4)^(0+256),w
  5456  04DF  1D03               	skipz
  5457  04E0  2CE3               	goto	u6935
  5458  04E1  30FD               	movlw	253
  5459  04E2  0244               	subwf	(??_main+2)^(0+256),w
  5460  04E3                     u6935:	
  5461  04E3  1803               	skipnc
  5462  04E4  2D53               	goto	l6184
  5463  04E5                     l6176:	
  5464                           
  5465                           ;main.c: 181: knob2_prev = knob_2_pos;
  5466  04E5  0023               	movlb	3	; select bank3
  5467  04E6  0851               	movf	(_knob_2_pos+1)^(0+384),w
  5468  04E7  0022               	movlb	2	; select bank2
  5469  04E8  00E5               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5470  04E9  0023               	movlb	3	; select bank3
  5471  04EA  0850               	movf	_knob_2_pos^(0+384),w
  5472  04EB  0022               	movlb	2	; select bank2
  5473  04EC  00E4               	movwf	_knob2_prev^(0+256)	;volatile
  5474                           
  5475                           ;main.c: 182: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5476  04ED  3000               	movlw	0
  5477  04EE  0021               	movlb	1	; select bank1
  5478  04EF  00E1               	movwf	map@out_max^(0+128)
  5479  04F0  301C               	movlw	28
  5480  04F1  00E2               	movwf	(map@out_max+1)^(0+128)
  5481  04F2  3042               	movlw	66
  5482  04F3  00E3               	movwf	(map@out_max+2)^(0+128)
  5483  04F4  3000               	movlw	0
  5484  04F5  00DE               	movwf	map@out_min^(0+128)
  5485  04F6  3000               	movlw	0
  5486  04F7  00DF               	movwf	(map@out_min+1)^(0+128)
  5487  04F8  3000               	movlw	0
  5488  04F9  00E0               	movwf	(map@out_min+2)^(0+128)
  5489  04FA  30C0               	movlw	192
  5490  04FB  00DB               	movwf	map@in_max^(0+128)
  5491  04FC  307F               	movlw	127
  5492  04FD  00DC               	movwf	(map@in_max+1)^(0+128)
  5493  04FE  3044               	movlw	68
  5494  04FF  00DD               	movwf	(map@in_max+2)^(0+128)
  5495  0500  3000               	movlw	0
  5496  0501  00D8               	movwf	map@in_min^(0+128)
  5497  0502  3000               	movlw	0
  5498  0503  00D9               	movwf	(map@in_min+1)^(0+128)
  5499  0504  3000               	movlw	0
  5500  0505  00DA               	movwf	(map@in_min+2)^(0+128)
  5501  0506  0022               	movlb	2	; select bank2
  5502  0507  0865               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5503  0508  0021               	movlb	1	; select bank1
  5504  0509  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5505  050A  0022               	movlb	2	; select bank2
  5506  050B  0864               	movf	_knob2_prev^(0+256),w	;volatile
  5507  050C  0021               	movlb	1	; select bank1
  5508  050D  00A8               	movwf	___awtoft@c^(0+128)
  5509  050E  319E  2660  3183   	fcall	___awtoft
  5510  0511  0021               	movlb	1	; select bank1
  5511  0512  0828               	movf	?___awtoft^(0+128),w
  5512  0513  00D5               	movwf	map@x^(0+128)
  5513  0514  0829               	movf	(?___awtoft+1)^(0+128),w
  5514  0515  00D6               	movwf	(map@x+1)^(0+128)
  5515  0516  082A               	movf	(?___awtoft+2)^(0+128),w
  5516  0517  00D7               	movwf	(map@x+2)^(0+128)
  5517  0518  3196  26D6  3183   	fcall	_map
  5518  051B  0021               	movlb	1	; select bank1
  5519  051C  0855               	movf	?_map^(0+128),w
  5520  051D  00E7               	movwf	___fttol@f1^(0+128)
  5521  051E  0856               	movf	(?_map+1)^(0+128),w
  5522  051F  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5523  0520  0857               	movf	(?_map+2)^(0+128),w
  5524  0521  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5525  0522  3197  2761  3183   	fcall	___fttol
  5526  0525  0021               	movlb	1	; select bank1
  5527  0526  0868               	movf	(?___fttol^(0+128)+1),w
  5528  0527  0024               	movlb	4	; select bank4
  5529  0528  00C9               	movwf	(main@i+1)^(0+512)
  5530  0529  0021               	movlb	1	; select bank1
  5531  052A  0867               	movf	?___fttol^(0+128),w
  5532  052B  0024               	movlb	4	; select bank4
  5533  052C  00C8               	movwf	main@i^(0+512)
  5534                           
  5535                           ;main.c: 183: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5536  052D  0848               	movf	main@i^(0+512),w
  5537  052E  3E01               	addlw	1
  5538  052F  3AFF               	xorlw	255
  5539  0530  3E01               	addlw	1
  5540  0531  0023               	movlb	3	; select bank3
  5541  0532  076B               	addwf	_B25kLength^(0+384),w
  5542  0533  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5543  0534  0086               	movwf	6
  5544  0535  3002               	movlw	2	; select bank4/5
  5545  0536  0087               	movwf	7
  5546  0537  0801               	movf	1,w
  5547  0538  0022               	movlb	2	; select bank2
  5548  0539  00C2               	movwf	??_main^(0+256)
  5549  053A  01C3               	clrf	(??_main^(0+256)+1)
  5550  053B  0842               	movf	??_main^(0+256),w
  5551  053C  0025               	movlb	5	; select bank5
  5552  053D  0098               	movwf	24	;volatile
  5553  053E  0022               	movlb	2	; select bank2
  5554  053F  0843               	movf	(??_main+1)^(0+256),w
  5555  0540  0025               	movlb	5	; select bank5
  5556  0541  0099               	movwf	25	;volatile
  5557                           
  5558                           ;main.c: 184: CCPR3 = (int)B25k[i];
  5559  0542  0024               	movlb	4	; select bank4
  5560  0543  0848               	movf	main@i^(0+512),w
  5561  0544  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5562  0545  0086               	movwf	6
  5563  0546  3002               	movlw	2	; select bank4/5
  5564  0547  0087               	movwf	7
  5565  0548  0801               	movf	1,w
  5566  0549  0022               	movlb	2	; select bank2
  5567  054A  00C2               	movwf	??_main^(0+256)
  5568  054B  01C3               	clrf	(??_main^(0+256)+1)
  5569  054C  0842               	movf	??_main^(0+256),w
  5570  054D  0026               	movlb	6	; select bank6
  5571  054E  0091               	movwf	17	;volatile
  5572  054F  0022               	movlb	2	; select bank2
  5573  0550  0843               	movf	(??_main+1)^(0+256),w
  5574  0551  0026               	movlb	6	; select bank6
  5575  0552  0092               	movwf	18	;volatile
  5576  0553                     l6184:	
  5577                           
  5578                           ;main.c: 185: }
  5579                           ;main.c: 195: if (bottom_push_state != 5) {
  5580  0553  3005               	movlw	5
  5581  0554  0020               	movlb	0	; select bank0
  5582  0555  0660               	xorwf	_bottom_push_state,w
  5583  0556  0461               	iorwf	_bottom_push_state+1,w
  5584  0557  1903               	btfsc	3,2
  5585  0558  2DF3               	goto	l6198
  5586                           
  5587                           ;main.c: 196: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5588  0559  0022               	movlb	2	; select bank2
  5589  055A  0966               	comf	_knob3_prev^(0+256),w	;volatile
  5590  055B  00C2               	movwf	??_main^(0+256)
  5591  055C  0967               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5592  055D  00C3               	movwf	(??_main^(0+256)+1)
  5593  055E  0AC2               	incf	??_main^(0+256),f
  5594  055F  1903               	skipnz
  5595  0560  0AC3               	incf	(??_main^(0+256)+1),f
  5596  0561  0023               	movlb	3	; select bank3
  5597  0562  0852               	movf	_knob_3_pos^(0+384),w
  5598  0563  0022               	movlb	2	; select bank2
  5599  0564  0742               	addwf	??_main^(0+256),w
  5600  0565  00C4               	movwf	(??_main+2)^(0+256)
  5601  0566  0023               	movlb	3	; select bank3
  5602  0567  0853               	movf	(_knob_3_pos+1)^(0+384),w
  5603  0568  0022               	movlb	2	; select bank2
  5604  0569  3D43               	addwfc	(??_main+1)^(0+256),w
  5605  056A  00C5               	movwf	(??_main+3)^(0+256)
  5606  056B  0845               	movf	(??_main+3)^(0+256),w
  5607  056C  3A80               	xorlw	128
  5608  056D  00C6               	movwf	(??_main+4)^(0+256)
  5609  056E  3080               	movlw	128
  5610  056F  0246               	subwf	(??_main+4)^(0+256),w
  5611  0570  1D03               	skipz
  5612  0571  2D74               	goto	u6955
  5613  0572  3004               	movlw	4
  5614  0573  0244               	subwf	(??_main+2)^(0+256),w
  5615  0574                     u6955:	
  5616  0574  1803               	skipnc
  5617  0575  2D93               	goto	l6190
  5618  0576  0022               	movlb	2	; select bank2
  5619  0577  0966               	comf	_knob3_prev^(0+256),w	;volatile
  5620  0578  00C2               	movwf	??_main^(0+256)
  5621  0579  0967               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5622  057A  00C3               	movwf	(??_main^(0+256)+1)
  5623  057B  0AC2               	incf	??_main^(0+256),f
  5624  057C  1903               	skipnz
  5625  057D  0AC3               	incf	(??_main^(0+256)+1),f
  5626  057E  0023               	movlb	3	; select bank3
  5627  057F  0852               	movf	_knob_3_pos^(0+384),w
  5628  0580  0022               	movlb	2	; select bank2
  5629  0581  0742               	addwf	??_main^(0+256),w
  5630  0582  00C4               	movwf	(??_main+2)^(0+256)
  5631  0583  0023               	movlb	3	; select bank3
  5632  0584  0853               	movf	(_knob_3_pos+1)^(0+384),w
  5633  0585  0022               	movlb	2	; select bank2
  5634  0586  3D43               	addwfc	(??_main+1)^(0+256),w
  5635  0587  00C5               	movwf	(??_main+3)^(0+256)
  5636  0588  0845               	movf	(??_main+3)^(0+256),w
  5637  0589  3A80               	xorlw	128
  5638  058A  00C6               	movwf	(??_main+4)^(0+256)
  5639  058B  307F               	movlw	127
  5640  058C  0246               	subwf	(??_main+4)^(0+256),w
  5641  058D  1D03               	skipz
  5642  058E  2D91               	goto	u6965
  5643  058F  30FD               	movlw	253
  5644  0590  0244               	subwf	(??_main+2)^(0+256),w
  5645  0591                     u6965:	
  5646  0591  1803               	skipnc
  5647  0592  2E63               	goto	l6208
  5648  0593                     l6190:	
  5649                           
  5650                           ;main.c: 197: knob3_prev = knob_3_pos;
  5651  0593  0023               	movlb	3	; select bank3
  5652  0594  0853               	movf	(_knob_3_pos+1)^(0+384),w
  5653  0595  0022               	movlb	2	; select bank2
  5654  0596  00E7               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5655  0597  0023               	movlb	3	; select bank3
  5656  0598  0852               	movf	_knob_3_pos^(0+384),w
  5657  0599  0022               	movlb	2	; select bank2
  5658  059A  00E6               	movwf	_knob3_prev^(0+256)	;volatile
  5659                           
  5660                           ;main.c: 198: int i = (int)map(knob3_prev, 0, 1023, 16, 0);
  5661  059B  3000               	movlw	0
  5662  059C  0021               	movlb	1	; select bank1
  5663  059D  00E1               	movwf	map@out_max^(0+128)
  5664  059E  3000               	movlw	0
  5665  059F  00E2               	movwf	(map@out_max+1)^(0+128)
  5666  05A0  3000               	movlw	0
  5667  05A1  00E3               	movwf	(map@out_max+2)^(0+128)
  5668  05A2  3000               	movlw	0
  5669  05A3  00DE               	movwf	map@out_min^(0+128)
  5670  05A4  3080               	movlw	128
  5671  05A5  00DF               	movwf	(map@out_min+1)^(0+128)
  5672  05A6  3041               	movlw	65
  5673  05A7  00E0               	movwf	(map@out_min+2)^(0+128)
  5674  05A8  30C0               	movlw	192
  5675  05A9  00DB               	movwf	map@in_max^(0+128)
  5676  05AA  307F               	movlw	127
  5677  05AB  00DC               	movwf	(map@in_max+1)^(0+128)
  5678  05AC  3044               	movlw	68
  5679  05AD  00DD               	movwf	(map@in_max+2)^(0+128)
  5680  05AE  3000               	movlw	0
  5681  05AF  00D8               	movwf	map@in_min^(0+128)
  5682  05B0  3000               	movlw	0
  5683  05B1  00D9               	movwf	(map@in_min+1)^(0+128)
  5684  05B2  3000               	movlw	0
  5685  05B3  00DA               	movwf	(map@in_min+2)^(0+128)
  5686  05B4  0022               	movlb	2	; select bank2
  5687  05B5  0867               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5688  05B6  0021               	movlb	1	; select bank1
  5689  05B7  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5690  05B8  0022               	movlb	2	; select bank2
  5691  05B9  0866               	movf	_knob3_prev^(0+256),w	;volatile
  5692  05BA  0021               	movlb	1	; select bank1
  5693  05BB  00A8               	movwf	___awtoft@c^(0+128)
  5694  05BC  319E  2660  3183   	fcall	___awtoft
  5695  05BF  0021               	movlb	1	; select bank1
  5696  05C0  0828               	movf	?___awtoft^(0+128),w
  5697  05C1  00D5               	movwf	map@x^(0+128)
  5698  05C2  0829               	movf	(?___awtoft+1)^(0+128),w
  5699  05C3  00D6               	movwf	(map@x+1)^(0+128)
  5700  05C4  082A               	movf	(?___awtoft+2)^(0+128),w
  5701  05C5  00D7               	movwf	(map@x+2)^(0+128)
  5702  05C6  3196  26D6  3183   	fcall	_map
  5703  05C9  0021               	movlb	1	; select bank1
  5704  05CA  0855               	movf	?_map^(0+128),w
  5705  05CB  00E7               	movwf	___fttol@f1^(0+128)
  5706  05CC  0856               	movf	(?_map+1)^(0+128),w
  5707  05CD  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5708  05CE  0857               	movf	(?_map+2)^(0+128),w
  5709  05CF  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5710  05D0  3197  2761  3183   	fcall	___fttol
  5711  05D3  0021               	movlb	1	; select bank1
  5712  05D4  0868               	movf	(?___fttol^(0+128)+1),w
  5713  05D5  0024               	movlb	4	; select bank4
  5714  05D6  00CB               	movwf	(main@i_383+1)^(0+512)
  5715  05D7  0021               	movlb	1	; select bank1
  5716  05D8  0867               	movf	?___fttol^(0+128),w
  5717  05D9  0024               	movlb	4	; select bank4
  5718  05DA  00CA               	movwf	main@i_383^(0+512)
  5719                           
  5720                           ;main.c: 199: CCPR4 = (int)B25k[B25kLength - 1 - i];
  5721  05DB  084A               	movf	main@i_383^(0+512),w
  5722  05DC  3E01               	addlw	1
  5723  05DD  3AFF               	xorlw	255
  5724  05DE  3E01               	addlw	1
  5725  05DF  0023               	movlb	3	; select bank3
  5726  05E0  076B               	addwf	_B25kLength^(0+384),w
  5727  05E1  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5728  05E2  0086               	movwf	6
  5729  05E3  3002               	movlw	2	; select bank4/5
  5730  05E4  0087               	movwf	7
  5731  05E5  0801               	movf	1,w
  5732  05E6  0022               	movlb	2	; select bank2
  5733  05E7  00C2               	movwf	??_main^(0+256)
  5734  05E8  01C3               	clrf	(??_main^(0+256)+1)
  5735  05E9  0842               	movf	??_main^(0+256),w
  5736  05EA  0026               	movlb	6	; select bank6
  5737  05EB  0098               	movwf	24	;volatile
  5738  05EC  0022               	movlb	2	; select bank2
  5739  05ED  0843               	movf	(??_main+1)^(0+256),w
  5740  05EE  0026               	movlb	6	; select bank6
  5741  05EF  0099               	movwf	25	;volatile
  5742                           
  5743                           ;main.c: 200: CCPR5 = (int)B25k[i];
  5744  05F0  0024               	movlb	4	; select bank4
  5745  05F1  084A               	movf	main@i_383^(0+512),w
  5746  05F2  2E54               	goto	L1
  5747  05F3                     l6198:	
  5748                           ;main.c: 201: }
  5749                           ;main.c: 202: } else {
  5750                           
  5751                           
  5752                           ;main.c: 203: if (knob3_prev != 511) {
  5753  05F3  0022               	movlb	2	; select bank2
  5754  05F4  0A66               	incf	_knob3_prev^(0+256),w	;volatile
  5755  05F5  1903               	btfsc	3,2
  5756  05F6  0367               	decf	(_knob3_prev+1)^(0+256),w	;volatile
  5757  05F7  1903               	btfsc	3,2
  5758  05F8  2E63               	goto	l6208
  5759                           
  5760                           ;main.c: 204: knob3_prev = 511;
  5761  05F9  30FF               	movlw	255
  5762  05FA  00E6               	movwf	_knob3_prev^(0+256)	;volatile
  5763  05FB  3001               	movlw	1
  5764  05FC  00E7               	movwf	(_knob3_prev^(0+256)+1)	;volatile
  5765                           
  5766                           ;main.c: 206: int i = (int) map(knob3_prev, 0, 1023, 16, 0);
  5767  05FD  3000               	movlw	0
  5768  05FE  0021               	movlb	1	; select bank1
  5769  05FF  00E1               	movwf	map@out_max^(0+128)
  5770  0600  3000               	movlw	0
  5771  0601  00E2               	movwf	(map@out_max+1)^(0+128)
  5772  0602  3000               	movlw	0
  5773  0603  00E3               	movwf	(map@out_max+2)^(0+128)
  5774  0604  3000               	movlw	0
  5775  0605  00DE               	movwf	map@out_min^(0+128)
  5776  0606  3080               	movlw	128
  5777  0607  00DF               	movwf	(map@out_min+1)^(0+128)
  5778  0608  3041               	movlw	65
  5779  0609  00E0               	movwf	(map@out_min+2)^(0+128)
  5780  060A  30C0               	movlw	192
  5781  060B  00DB               	movwf	map@in_max^(0+128)
  5782  060C  307F               	movlw	127
  5783  060D  00DC               	movwf	(map@in_max+1)^(0+128)
  5784  060E  3044               	movlw	68
  5785  060F  00DD               	movwf	(map@in_max+2)^(0+128)
  5786  0610  3000               	movlw	0
  5787  0611  00D8               	movwf	map@in_min^(0+128)
  5788  0612  3000               	movlw	0
  5789  0613  00D9               	movwf	(map@in_min+1)^(0+128)
  5790  0614  3000               	movlw	0
  5791  0615  00DA               	movwf	(map@in_min+2)^(0+128)
  5792  0616  0022               	movlb	2	; select bank2
  5793  0617  0867               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5794  0618  0021               	movlb	1	; select bank1
  5795  0619  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5796  061A  0022               	movlb	2	; select bank2
  5797  061B  0866               	movf	_knob3_prev^(0+256),w	;volatile
  5798  061C  0021               	movlb	1	; select bank1
  5799  061D  00A8               	movwf	___awtoft@c^(0+128)
  5800  061E  319E  2660  3183   	fcall	___awtoft
  5801  0621  0021               	movlb	1	; select bank1
  5802  0622  0828               	movf	?___awtoft^(0+128),w
  5803  0623  00D5               	movwf	map@x^(0+128)
  5804  0624  0829               	movf	(?___awtoft+1)^(0+128),w
  5805  0625  00D6               	movwf	(map@x+1)^(0+128)
  5806  0626  082A               	movf	(?___awtoft+2)^(0+128),w
  5807  0627  00D7               	movwf	(map@x+2)^(0+128)
  5808  0628  3196  26D6  3183   	fcall	_map
  5809  062B  0021               	movlb	1	; select bank1
  5810  062C  0855               	movf	?_map^(0+128),w
  5811  062D  00E7               	movwf	___fttol@f1^(0+128)
  5812  062E  0856               	movf	(?_map+1)^(0+128),w
  5813  062F  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5814  0630  0857               	movf	(?_map+2)^(0+128),w
  5815  0631  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5816  0632  3197  2761  3183   	fcall	___fttol
  5817  0635  0021               	movlb	1	; select bank1
  5818  0636  0868               	movf	(?___fttol^(0+128)+1),w
  5819  0637  0024               	movlb	4	; select bank4
  5820  0638  00CD               	movwf	(main@i_384+1)^(0+512)
  5821  0639  0021               	movlb	1	; select bank1
  5822  063A  0867               	movf	?___fttol^(0+128),w
  5823  063B  0024               	movlb	4	; select bank4
  5824  063C  00CC               	movwf	main@i_384^(0+512)
  5825                           
  5826                           ;main.c: 207: CCPR4 = (int) B25k[B25kLength - 1 - i];
  5827  063D  084C               	movf	main@i_384^(0+512),w
  5828  063E  3E01               	addlw	1
  5829  063F  3AFF               	xorlw	255
  5830  0640  3E01               	addlw	1
  5831  0641  0023               	movlb	3	; select bank3
  5832  0642  076B               	addwf	_B25kLength^(0+384),w
  5833  0643  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5834  0644  0086               	movwf	6
  5835  0645  3002               	movlw	2	; select bank4/5
  5836  0646  0087               	movwf	7
  5837  0647  0801               	movf	1,w
  5838  0648  0022               	movlb	2	; select bank2
  5839  0649  00C2               	movwf	??_main^(0+256)
  5840  064A  01C3               	clrf	(??_main^(0+256)+1)
  5841  064B  0842               	movf	??_main^(0+256),w
  5842  064C  0026               	movlb	6	; select bank6
  5843  064D  0098               	movwf	24	;volatile
  5844  064E  0022               	movlb	2	; select bank2
  5845  064F  0843               	movf	(??_main+1)^(0+256),w
  5846  0650  0026               	movlb	6	; select bank6
  5847  0651  0099               	movwf	25	;volatile
  5848                           
  5849                           ;main.c: 208: CCPR5 = (int) B25k[i];
  5850  0652  0024               	movlb	4	; select bank4
  5851  0653  084C               	movf	main@i_384^(0+512),w
  5852  0654                     L1:	
  5853  0654  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5854  0655  0086               	movwf	6
  5855  0656  3002               	movlw	2	; select bank4/5
  5856  0657  0087               	movwf	7
  5857  0658  0801               	movf	1,w
  5858  0659  0022               	movlb	2	; select bank2
  5859  065A  00C2               	movwf	??_main^(0+256)
  5860  065B  01C3               	clrf	(??_main^(0+256)+1)
  5861  065C  0842               	movf	??_main^(0+256),w
  5862  065D  0026               	movlb	6	; select bank6
  5863  065E  009C               	movwf	28	;volatile
  5864  065F  0022               	movlb	2	; select bank2
  5865  0660  0843               	movf	(??_main+1)^(0+256),w
  5866  0661  0026               	movlb	6	; select bank6
  5867  0662  009D               	movwf	29	;volatile
  5868  0663                     l6208:	
  5869                           
  5870                           ;main.c: 209: }
  5871                           ;main.c: 211: }
  5872                           ;main.c: 221: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5873  0663  0022               	movlb	2	; select bank2
  5874  0664  0968               	comf	_knob4_prev^(0+256),w	;volatile
  5875  0665  00C2               	movwf	??_main^(0+256)
  5876  0666  0969               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5877  0667  00C3               	movwf	(??_main^(0+256)+1)
  5878  0668  0AC2               	incf	??_main^(0+256),f
  5879  0669  1903               	skipnz
  5880  066A  0AC3               	incf	(??_main^(0+256)+1),f
  5881  066B  0023               	movlb	3	; select bank3
  5882  066C  0854               	movf	_knob_4_pos^(0+384),w
  5883  066D  0022               	movlb	2	; select bank2
  5884  066E  0742               	addwf	??_main^(0+256),w
  5885  066F  00C4               	movwf	(??_main+2)^(0+256)
  5886  0670  0023               	movlb	3	; select bank3
  5887  0671  0855               	movf	(_knob_4_pos+1)^(0+384),w
  5888  0672  0022               	movlb	2	; select bank2
  5889  0673  3D43               	addwfc	(??_main+1)^(0+256),w
  5890  0674  00C5               	movwf	(??_main+3)^(0+256)
  5891  0675  0845               	movf	(??_main+3)^(0+256),w
  5892  0676  3A80               	xorlw	128
  5893  0677  00C6               	movwf	(??_main+4)^(0+256)
  5894  0678  3080               	movlw	128
  5895  0679  0246               	subwf	(??_main+4)^(0+256),w
  5896  067A  1D03               	skipz
  5897  067B  2E7E               	goto	u6985
  5898  067C  3004               	movlw	4
  5899  067D  0244               	subwf	(??_main+2)^(0+256),w
  5900  067E                     u6985:	
  5901  067E  1803               	skipnc
  5902  067F  2E9D               	goto	l6212
  5903  0680  0022               	movlb	2	; select bank2
  5904  0681  0968               	comf	_knob4_prev^(0+256),w	;volatile
  5905  0682  00C2               	movwf	??_main^(0+256)
  5906  0683  0969               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5907  0684  00C3               	movwf	(??_main^(0+256)+1)
  5908  0685  0AC2               	incf	??_main^(0+256),f
  5909  0686  1903               	skipnz
  5910  0687  0AC3               	incf	(??_main^(0+256)+1),f
  5911  0688  0023               	movlb	3	; select bank3
  5912  0689  0854               	movf	_knob_4_pos^(0+384),w
  5913  068A  0022               	movlb	2	; select bank2
  5914  068B  0742               	addwf	??_main^(0+256),w
  5915  068C  00C4               	movwf	(??_main+2)^(0+256)
  5916  068D  0023               	movlb	3	; select bank3
  5917  068E  0855               	movf	(_knob_4_pos+1)^(0+384),w
  5918  068F  0022               	movlb	2	; select bank2
  5919  0690  3D43               	addwfc	(??_main+1)^(0+256),w
  5920  0691  00C5               	movwf	(??_main+3)^(0+256)
  5921  0692  0845               	movf	(??_main+3)^(0+256),w
  5922  0693  3A80               	xorlw	128
  5923  0694  00C6               	movwf	(??_main+4)^(0+256)
  5924  0695  307F               	movlw	127
  5925  0696  0246               	subwf	(??_main+4)^(0+256),w
  5926  0697  1D03               	skipz
  5927  0698  2E9B               	goto	u6995
  5928  0699  30FD               	movlw	253
  5929  069A  0244               	subwf	(??_main+2)^(0+256),w
  5930  069B                     u6995:	
  5931  069B  1803               	skipnc
  5932  069C  2EE5               	goto	l6216
  5933  069D                     l6212:	
  5934                           
  5935                           ;main.c: 222: knob4_prev = knob_4_pos;
  5936  069D  0023               	movlb	3	; select bank3
  5937  069E  0855               	movf	(_knob_4_pos+1)^(0+384),w
  5938  069F  0022               	movlb	2	; select bank2
  5939  06A0  00E9               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5940  06A1  0023               	movlb	3	; select bank3
  5941  06A2  0854               	movf	_knob_4_pos^(0+384),w
  5942  06A3  0022               	movlb	2	; select bank2
  5943  06A4  00E8               	movwf	_knob4_prev^(0+256)	;volatile
  5944                           
  5945                           ;main.c: 224: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5946  06A5  3000               	movlw	0
  5947  06A6  0021               	movlb	1	; select bank1
  5948  06A7  00E1               	movwf	map@out_max^(0+128)
  5949  06A8  303C               	movlw	60
  5950  06A9  00E2               	movwf	(map@out_max+1)^(0+128)
  5951  06AA  3042               	movlw	66
  5952  06AB  00E3               	movwf	(map@out_max+2)^(0+128)
  5953  06AC  3000               	movlw	0
  5954  06AD  00DE               	movwf	map@out_min^(0+128)
  5955  06AE  3040               	movlw	64
  5956  06AF  00DF               	movwf	(map@out_min+1)^(0+128)
  5957  06B0  3040               	movlw	64
  5958  06B1  00E0               	movwf	(map@out_min+2)^(0+128)
  5959  06B2  30C0               	movlw	192
  5960  06B3  00DB               	movwf	map@in_max^(0+128)
  5961  06B4  307F               	movlw	127
  5962  06B5  00DC               	movwf	(map@in_max+1)^(0+128)
  5963  06B6  3044               	movlw	68
  5964  06B7  00DD               	movwf	(map@in_max+2)^(0+128)
  5965  06B8  3000               	movlw	0
  5966  06B9  00D8               	movwf	map@in_min^(0+128)
  5967  06BA  3000               	movlw	0
  5968  06BB  00D9               	movwf	(map@in_min+1)^(0+128)
  5969  06BC  3000               	movlw	0
  5970  06BD  00DA               	movwf	(map@in_min+2)^(0+128)
  5971  06BE  0022               	movlb	2	; select bank2
  5972  06BF  0869               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5973  06C0  0021               	movlb	1	; select bank1
  5974  06C1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5975  06C2  0022               	movlb	2	; select bank2
  5976  06C3  0868               	movf	_knob4_prev^(0+256),w	;volatile
  5977  06C4  0021               	movlb	1	; select bank1
  5978  06C5  00A8               	movwf	___awtoft@c^(0+128)
  5979  06C6  319E  2660  3183   	fcall	___awtoft
  5980  06C9  0021               	movlb	1	; select bank1
  5981  06CA  0828               	movf	?___awtoft^(0+128),w
  5982  06CB  00D5               	movwf	map@x^(0+128)
  5983  06CC  0829               	movf	(?___awtoft+1)^(0+128),w
  5984  06CD  00D6               	movwf	(map@x+1)^(0+128)
  5985  06CE  082A               	movf	(?___awtoft+2)^(0+128),w
  5986  06CF  00D7               	movwf	(map@x+2)^(0+128)
  5987  06D0  3196  26D6  3183   	fcall	_map
  5988  06D3  0021               	movlb	1	; select bank1
  5989  06D4  0855               	movf	?_map^(0+128),w
  5990  06D5  00E7               	movwf	___fttol@f1^(0+128)
  5991  06D6  0856               	movf	(?_map+1)^(0+128),w
  5992  06D7  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5993  06D8  0857               	movf	(?_map+2)^(0+128),w
  5994  06D9  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5995  06DA  3197  2761  3183   	fcall	___fttol
  5996  06DD  0021               	movlb	1	; select bank1
  5997  06DE  0868               	movf	(?___fttol^(0+128)+1),w
  5998  06DF  0023               	movlb	3	; select bank3
  5999  06E0  00E5               	movwf	(_mod_delay_time+1)^(0+384)
  6000  06E1  0021               	movlb	1	; select bank1
  6001  06E2  0867               	movf	?___fttol^(0+128),w
  6002  06E3  0023               	movlb	3	; select bank3
  6003  06E4  00E4               	movwf	_mod_delay_time^(0+384)
  6004  06E5                     l6216:	
  6005                           
  6006                           ;main.c: 225: }
  6007                           ;main.c: 233: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6008  06E5  0022               	movlb	2	; select bank2
  6009  06E6  096A               	comf	_knob5_prev^(0+256),w	;volatile
  6010  06E7  00C2               	movwf	??_main^(0+256)
  6011  06E8  096B               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6012  06E9  00C3               	movwf	(??_main^(0+256)+1)
  6013  06EA  0AC2               	incf	??_main^(0+256),f
  6014  06EB  1903               	skipnz
  6015  06EC  0AC3               	incf	(??_main^(0+256)+1),f
  6016  06ED  0023               	movlb	3	; select bank3
  6017  06EE  0856               	movf	_knob_5_pos^(0+384),w
  6018  06EF  0022               	movlb	2	; select bank2
  6019  06F0  0742               	addwf	??_main^(0+256),w
  6020  06F1  00C4               	movwf	(??_main+2)^(0+256)
  6021  06F2  0023               	movlb	3	; select bank3
  6022  06F3  0857               	movf	(_knob_5_pos+1)^(0+384),w
  6023  06F4  0022               	movlb	2	; select bank2
  6024  06F5  3D43               	addwfc	(??_main+1)^(0+256),w
  6025  06F6  00C5               	movwf	(??_main+3)^(0+256)
  6026  06F7  0845               	movf	(??_main+3)^(0+256),w
  6027  06F8  3A80               	xorlw	128
  6028  06F9  00C6               	movwf	(??_main+4)^(0+256)
  6029  06FA  3080               	movlw	128
  6030  06FB  0246               	subwf	(??_main+4)^(0+256),w
  6031  06FC  1D03               	skipz
  6032  06FD  2F00               	goto	u7005
  6033  06FE  3004               	movlw	4
  6034  06FF  0244               	subwf	(??_main+2)^(0+256),w
  6035  0700                     u7005:	
  6036  0700  1803               	skipnc
  6037  0701  2F1F               	goto	l6220
  6038  0702  0022               	movlb	2	; select bank2
  6039  0703  096A               	comf	_knob5_prev^(0+256),w	;volatile
  6040  0704  00C2               	movwf	??_main^(0+256)
  6041  0705  096B               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  6042  0706  00C3               	movwf	(??_main^(0+256)+1)
  6043  0707  0AC2               	incf	??_main^(0+256),f
  6044  0708  1903               	skipnz
  6045  0709  0AC3               	incf	(??_main^(0+256)+1),f
  6046  070A  0023               	movlb	3	; select bank3
  6047  070B  0856               	movf	_knob_5_pos^(0+384),w
  6048  070C  0022               	movlb	2	; select bank2
  6049  070D  0742               	addwf	??_main^(0+256),w
  6050  070E  00C4               	movwf	(??_main+2)^(0+256)
  6051  070F  0023               	movlb	3	; select bank3
  6052  0710  0857               	movf	(_knob_5_pos+1)^(0+384),w
  6053  0711  0022               	movlb	2	; select bank2
  6054  0712  3D43               	addwfc	(??_main+1)^(0+256),w
  6055  0713  00C5               	movwf	(??_main+3)^(0+256)
  6056  0714  0845               	movf	(??_main+3)^(0+256),w
  6057  0715  3A80               	xorlw	128
  6058  0716  00C6               	movwf	(??_main+4)^(0+256)
  6059  0717  307F               	movlw	127
  6060  0718  0246               	subwf	(??_main+4)^(0+256),w
  6061  0719  1D03               	skipz
  6062  071A  2F1D               	goto	u7015
  6063  071B  30FD               	movlw	253
  6064  071C  0244               	subwf	(??_main+2)^(0+256),w
  6065  071D                     u7015:	
  6066  071D  1803               	skipnc
  6067  071E  2F67               	goto	l6224
  6068  071F                     l6220:	
  6069                           
  6070                           ;main.c: 234: knob5_prev = knob_5_pos;
  6071  071F  0023               	movlb	3	; select bank3
  6072  0720  0857               	movf	(_knob_5_pos+1)^(0+384),w
  6073  0721  0022               	movlb	2	; select bank2
  6074  0722  00EB               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  6075  0723  0023               	movlb	3	; select bank3
  6076  0724  0856               	movf	_knob_5_pos^(0+384),w
  6077  0725  0022               	movlb	2	; select bank2
  6078  0726  00EA               	movwf	_knob5_prev^(0+256)	;volatile
  6079                           
  6080                           ;main.c: 235: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  6081  0727  3000               	movlw	0
  6082  0728  0021               	movlb	1	; select bank1
  6083  0729  00E1               	movwf	map@out_max^(0+128)
  6084  072A  3000               	movlw	0
  6085  072B  00E2               	movwf	(map@out_max+1)^(0+128)
  6086  072C  3000               	movlw	0
  6087  072D  00E3               	movwf	(map@out_max+2)^(0+128)
  6088  072E  3060               	movlw	96
  6089  072F  00DE               	movwf	map@out_min^(0+128)
  6090  0730  309F               	movlw	159
  6091  0731  00DF               	movwf	(map@out_min+1)^(0+128)
  6092  0732  3044               	movlw	68
  6093  0733  00E0               	movwf	(map@out_min+2)^(0+128)
  6094  0734  30C0               	movlw	192
  6095  0735  00DB               	movwf	map@in_max^(0+128)
  6096  0736  307F               	movlw	127
  6097  0737  00DC               	movwf	(map@in_max+1)^(0+128)
  6098  0738  3044               	movlw	68
  6099  0739  00DD               	movwf	(map@in_max+2)^(0+128)
  6100  073A  3000               	movlw	0
  6101  073B  00D8               	movwf	map@in_min^(0+128)
  6102  073C  3000               	movlw	0
  6103  073D  00D9               	movwf	(map@in_min+1)^(0+128)
  6104  073E  3000               	movlw	0
  6105  073F  00DA               	movwf	(map@in_min+2)^(0+128)
  6106  0740  0022               	movlb	2	; select bank2
  6107  0741  086B               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6108  0742  0021               	movlb	1	; select bank1
  6109  0743  00A9               	movwf	(___awtoft@c+1)^(0+128)
  6110  0744  0022               	movlb	2	; select bank2
  6111  0745  086A               	movf	_knob5_prev^(0+256),w	;volatile
  6112  0746  0021               	movlb	1	; select bank1
  6113  0747  00A8               	movwf	___awtoft@c^(0+128)
  6114  0748  319E  2660  3183   	fcall	___awtoft
  6115  074B  0021               	movlb	1	; select bank1
  6116  074C  0828               	movf	?___awtoft^(0+128),w
  6117  074D  00D5               	movwf	map@x^(0+128)
  6118  074E  0829               	movf	(?___awtoft+1)^(0+128),w
  6119  074F  00D6               	movwf	(map@x+1)^(0+128)
  6120  0750  082A               	movf	(?___awtoft+2)^(0+128),w
  6121  0751  00D7               	movwf	(map@x+2)^(0+128)
  6122  0752  3196  26D6  3183   	fcall	_map
  6123  0755  0021               	movlb	1	; select bank1
  6124  0756  0855               	movf	?_map^(0+128),w
  6125  0757  00E7               	movwf	___fttol@f1^(0+128)
  6126  0758  0856               	movf	(?_map+1)^(0+128),w
  6127  0759  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6128  075A  0857               	movf	(?_map+2)^(0+128),w
  6129  075B  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6130  075C  3197  2761  3183   	fcall	___fttol
  6131  075F  0021               	movlb	1	; select bank1
  6132  0760  0868               	movf	(?___fttol^(0+128)+1),w
  6133  0761  0023               	movlb	3	; select bank3
  6134  0762  00C3               	movwf	(_adjusted_pot_value+1)^(0+384)
  6135  0763  0021               	movlb	1	; select bank1
  6136  0764  0867               	movf	?___fttol^(0+128),w
  6137  0765  0023               	movlb	3	; select bank3
  6138  0766  00C2               	movwf	_adjusted_pot_value^(0+384)
  6139  0767                     l6224:	
  6140                           
  6141                           ;main.c: 237: }
  6142                           ;main.c: 240: if (delay_time_changed == 1) {
  6143  0767  0023               	movlb	3	; select bank3
  6144  0768  0362               	decf	_delay_time_changed^(0+384),w
  6145  0769  0463               	iorwf	(_delay_time_changed+1)^(0+384),w
  6146  076A  1D03               	btfss	3,2
  6147  076B  2BB2               	goto	l6128
  6148                           
  6149                           ;main.c: 241: delay_time = baseline_delay_time;
  6150  076C  0020               	movlb	0	; select bank0
  6151  076D  085B               	movf	_baseline_delay_time+3,w	;volatile
  6152  076E  00DF               	movwf	_delay_time+3	;volatile
  6153  076F  085A               	movf	_baseline_delay_time+2,w	;volatile
  6154  0770  00DE               	movwf	_delay_time+2	;volatile
  6155  0771  0859               	movf	_baseline_delay_time+1,w	;volatile
  6156  0772  00DD               	movwf	_delay_time+1	;volatile
  6157  0773  0858               	movf	_baseline_delay_time,w	;volatile
  6158  0774  00DC               	movwf	_delay_time	;volatile
  6159                           
  6160                           ;main.c: 242: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6161  0775  0859               	movf	_baseline_delay_time+1,w	;volatile
  6162  0776  0022               	movlb	2	; select bank2
  6163  0777  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  6164  0778  0020               	movlb	0	; select bank0
  6165  0779  0858               	movf	_baseline_delay_time,w	;volatile
  6166  077A  0022               	movlb	2	; select bank2
  6167  077B  00B6               	movwf	set_subdivision@x^(0+256)
  6168  077C  0020               	movlb	0	; select bank0
  6169  077D  0865               	movf	_top_push_state+1,w
  6170  077E  0022               	movlb	2	; select bank2
  6171  077F  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  6172  0780  0020               	movlb	0	; select bank0
  6173  0781  0864               	movf	_top_push_state,w
  6174  0782  0022               	movlb	2	; select bank2
  6175  0783  00B8               	movwf	set_subdivision@y^(0+256)
  6176  0784  3189  2179  3183   	fcall	_set_subdivision
  6177  0787  0022               	movlb	2	; select bank2
  6178  0788  0836               	movf	?_set_subdivision^(0+256),w
  6179  0789  0020               	movlb	0	; select bank0
  6180  078A  00DC               	movwf	_delay_time	;volatile
  6181  078B  0022               	movlb	2	; select bank2
  6182  078C  0837               	movf	(?_set_subdivision+1)^(0+256),w
  6183  078D  0020               	movlb	0	; select bank0
  6184  078E  00DD               	movwf	_delay_time+1	;volatile
  6185  078F  0D89               	rlf	9,f
  6186  0790  3B89               	subwfb	9,f
  6187  0791  0989               	comf	9,f
  6188  0792  00DE               	movwf	_delay_time+2	;volatile
  6189  0793  00DF               	movwf	_delay_time+3	;volatile
  6190                           
  6191                           ;main.c: 243: reset_sub_delay = 1;
  6192  0794  3001               	movlw	1
  6193  0795  0023               	movlb	3	; select bank3
  6194  0796  00DA               	movwf	_reset_sub_delay^(0+384)
  6195  0797  3000               	movlw	0
  6196  0798  00DB               	movwf	(_reset_sub_delay^(0+384)+1)
  6197                           
  6198                           ;main.c: 244: delayfound = 0;
  6199  0799  01CC               	clrf	_delayfound^(0+384)
  6200  079A  01CD               	clrf	(_delayfound+1)^(0+384)
  6201                           
  6202                           ;main.c: 245: delay_counter = 0;
  6203  079B  0022               	movlb	2	; select bank2
  6204  079C  01D1               	clrf	_delay_counter^(0+256)	;volatile
  6205  079D  01D2               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6206  079E                     l6242:	
  6207                           ;main.c: 247: while (delayfound == 0) {
  6208                           
  6209  079E  0023               	movlb	3	; select bank3
  6210  079F  084C               	movf	_delayfound^(0+384),w
  6211  07A0  044D               	iorwf	(_delayfound+1)^(0+384),w
  6212  07A1  1D03               	btfss	3,2
  6213  07A2  2FF8               	goto	l6244
  6214                           
  6215                           ;main.c: 248: if (delayArray[delay_counter] <= delay_time * 2) {
  6216  07A3  0022               	movlb	2	; select bank2
  6217  07A4  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6218  07A5  00C3               	movwf	(??_main^(0+256)+1)
  6219  07A6  0851               	movf	_delay_counter^(0+256),w	;volatile
  6220  07A7  00C2               	movwf	??_main^(0+256)
  6221  07A8  35C2               	lslf	??_main^(0+256),f
  6222  07A9  0DC3               	rlf	(??_main^(0+256)+1),f
  6223  07AA  30E8               	movlw	232
  6224  07AB  00C4               	movwf	(??_main+2)^(0+256)
  6225  07AC  3023               	movlw	35
  6226  07AD  00C5               	movwf	((??_main+2)^(0+256)+1)
  6227  07AE  0842               	movf	??_main^(0+256),w
  6228  07AF  0744               	addwf	(??_main+2)^(0+256),w
  6229  07B0  0086               	movwf	6
  6230  07B1  0843               	movf	(??_main+1)^(0+256),w
  6231  07B2  3D45               	addwfc	(??_main+3)^(0+256),w
  6232  07B3  0087               	movwf	7
  6233  07B4  3F40               	moviw [0]fsr1
  6234  07B5  00C6               	movwf	(??_main+4)^(0+256)
  6235  07B6  3F41               	moviw [1]fsr1
  6236  07B7  00C7               	movwf	((??_main+4)^(0+256)+1)
  6237  07B8  0846               	movf	(??_main+4)^(0+256),w
  6238  07B9  00C8               	movwf	(??_main+6)^(0+256)
  6239  07BA  0847               	movf	(??_main+5)^(0+256),w
  6240  07BB  00C9               	movwf	((??_main+6)^(0+256)+1)
  6241  07BC  3000               	movlw	0
  6242  07BD  1BC9               	btfsc	((??_main+6)^(0+256)+1),7
  6243  07BE  30FF               	movlw	255
  6244  07BF  00CA               	movwf	((??_main+6)^(0+256)+2)
  6245  07C0  00CB               	movwf	((??_main+6)^(0+256)+3)
  6246  07C1  0020               	movlb	0	; select bank0
  6247  07C2  085C               	movf	_delay_time,w	;volatile
  6248  07C3  0022               	movlb	2	; select bank2
  6249  07C4  00CC               	movwf	(??_main+10)^(0+256)
  6250  07C5  0020               	movlb	0	; select bank0
  6251  07C6  085D               	movf	_delay_time+1,w	;volatile
  6252  07C7  0022               	movlb	2	; select bank2
  6253  07C8  00CD               	movwf	((??_main+10)^(0+256)+1)
  6254  07C9  0020               	movlb	0	; select bank0
  6255  07CA  085E               	movf	_delay_time+2,w	;volatile
  6256  07CB  0022               	movlb	2	; select bank2
  6257  07CC  00CE               	movwf	((??_main+10)^(0+256)+2)
  6258  07CD  0020               	movlb	0	; select bank0
  6259  07CE  085F               	movf	_delay_time+3,w	;volatile
  6260  07CF  0022               	movlb	2	; select bank2
  6261  07D0  00CF               	movwf	((??_main+10)^(0+256)+3)
  6262  07D1  3001               	movlw	1
  6263  07D2                     u7035:	
  6264  07D2  35CC               	lslf	(??_main+10)^(0+256),f
  6265  07D3  0DCD               	rlf	((??_main+10)^(0+256)+1),f
  6266  07D4  0DCE               	rlf	((??_main+10)^(0+256)+2),f
  6267  07D5  0DCF               	rlf	((??_main+10)^(0+256)+3),f
  6268  07D6  0B89               	decfsz	9,f
  6269  07D7  2FD2               	goto	u7035
  6270  07D8  084F               	movf	(??_main+13)^(0+256),w
  6271  07D9  3A80               	xorlw	128
  6272  07DA  00D0               	movwf	(??_main+14)^(0+256)
  6273  07DB  084B               	movf	(??_main+9)^(0+256),w
  6274  07DC  3A80               	xorlw	128
  6275  07DD  0250               	subwf	(??_main+14)^(0+256),w
  6276  07DE  1D03               	skipz
  6277  07DF  2FEA               	goto	u7043
  6278  07E0  084A               	movf	(??_main+8)^(0+256),w
  6279  07E1  024E               	subwf	(??_main+12)^(0+256),w
  6280  07E2  1D03               	skipz
  6281  07E3  2FEA               	goto	u7043
  6282  07E4  0849               	movf	(??_main+7)^(0+256),w
  6283  07E5  024D               	subwf	(??_main+11)^(0+256),w
  6284  07E6  1D03               	skipz
  6285  07E7  2FEA               	goto	u7043
  6286  07E8  0848               	movf	(??_main+6)^(0+256),w
  6287  07E9  024C               	subwf	(??_main+10)^(0+256),w
  6288  07EA                     u7043:	
  6289  07EA  1C03               	skipc
  6290  07EB  2FF2               	goto	l6240
  6291                           
  6292                           ;main.c: 249: delayfound = 1;
  6293  07EC  3001               	movlw	1
  6294  07ED  0023               	movlb	3	; select bank3
  6295  07EE  00CC               	movwf	_delayfound^(0+384)
  6296  07EF  3000               	movlw	0
  6297  07F0  00CD               	movwf	(_delayfound^(0+384)+1)
  6298                           
  6299                           ;main.c: 253: } else {
  6300  07F1  2F9E               	goto	l6242
  6301  07F2                     l6240:	
  6302                           
  6303                           ;main.c: 254: delay_counter++;
  6304  07F2  3001               	movlw	1
  6305  07F3  0022               	movlb	2	; select bank2
  6306  07F4  07D1               	addwf	_delay_counter^(0+256),f	;volatile
  6307  07F5  3000               	movlw	0
  6308  07F6  3DD2               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6309  07F7  2F9E               	goto	l6242
  6310  07F8                     l6244:	
  6311                           
  6312                           ;main.c: 256: }
  6313                           ;main.c: 257: }
  6314                           ;main.c: 276: delay_time_changed = 0;
  6315  07F8  01E2               	clrf	_delay_time_changed^(0+384)
  6316  07F9  01E3               	clrf	(_delay_time_changed+1)^(0+384)
  6317  07FA  2BB2               	goto	l6128
  6318  07FB                     __end_of_main:	
  6319                           
  6320                           	psect	text1
  6321  11DC                     __ptext1:	
  6322 ;; *************** function _update_mode *****************
  6323 ;; Defined at:
  6324 ;;		line 82 in file "tactiles.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6340 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6341 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6342 ;;Total ram usage:        1 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    3
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_main
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           
  6353                           ;psect for function _update_mode
  6354  11DC                     _update_mode:	
  6355                           
  6356                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6357                           
  6358                           ;incstack = 0
  6359                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6360  11DC  0020               	movlb	0	; select bank0
  6361  11DD  180E               	btfsc	14,0	;volatile
  6362  11DE  2A19               	goto	l5836
  6363                           
  6364                           ;tactiles.c: 88: debounce_mode2++;
  6365  11DF  3001               	movlw	1
  6366  11E0  0023               	movlb	3	; select bank3
  6367  11E1  07CA               	addwf	_debounce_mode2^(0+384),f
  6368  11E2  3000               	movlw	0
  6369  11E3  3DCB               	addwfc	(_debounce_mode2+1)^(0+384),f
  6370                           
  6371                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6372  11E4  084B               	movf	(_debounce_mode2+1)^(0+384),w
  6373  11E5  3A80               	xorlw	128
  6374  11E6  0021               	movlb	1	; select bank1
  6375  11E7  00A0               	movwf	??_update_mode^(0+128)
  6376  11E8  3080               	movlw	128
  6377  11E9  0220               	subwf	??_update_mode^(0+128),w
  6378  11EA  1D03               	skipz
  6379  11EB  29EF               	goto	u6355
  6380  11EC  301A               	movlw	26
  6381  11ED  0023               	movlb	3	; select bank3
  6382  11EE  024A               	subwf	_debounce_mode2^(0+384),w
  6383  11EF                     u6355:	
  6384  11EF  1C03               	skipc
  6385  11F0  0008               	return
  6386                           
  6387                           ;tactiles.c: 90: debounce_mode2 = 25;
  6388  11F1  3019               	movlw	25
  6389  11F2  0023               	movlb	3	; select bank3
  6390  11F3  00CA               	movwf	_debounce_mode2^(0+384)
  6391  11F4  3000               	movlw	0
  6392  11F5  00CB               	movwf	(_debounce_mode2^(0+384)+1)
  6393                           
  6394                           ;tactiles.c: 91: mode2_state++;
  6395  11F6  3001               	movlw	1
  6396  11F7  0021               	movlb	1	; select bank1
  6397  11F8  00A0               	movwf	??_update_mode^(0+128)
  6398  11F9  0820               	movf	??_update_mode^(0+128),w
  6399  11FA  0022               	movlb	2	; select bank2
  6400  11FB  07DD               	addwf	_mode2_state^(0+256),f
  6401                           
  6402                           ;tactiles.c: 92: if (mode2_state > 2) {
  6403  11FC  3003               	movlw	3
  6404  11FD  025D               	subwf	_mode2_state^(0+256),w
  6405  11FE  1C03               	skipc
  6406  11FF  2A0A               	goto	l5834
  6407                           
  6408                           ;tactiles.c: 93: mode2_state = 0;
  6409  1200  01DD               	clrf	_mode2_state^(0+256)
  6410                           
  6411                           ;tactiles.c: 94: }
  6412                           ;tactiles.c: 95: switch(mode2_state) {
  6413  1201  2A0A               	goto	l5834
  6414  1202                     l879:	
  6415                           ;tactiles.c: 96: case 0:
  6416                           
  6417                           
  6418                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6419  1202  108D               	bcf	13,1	;volatile
  6420  1203  2A08               	goto	L2
  6421  1204                     l881:	
  6422                           ;tactiles.c: 100: case 1:
  6423                           
  6424                           ;tactiles.c: 99: break;
  6425                           
  6426                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6427                           
  6428                           
  6429                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6430  1204  108D               	bcf	13,1	;volatile
  6431                           
  6432                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6433  1205  140D               	bsf	13,0	;volatile
  6434                           
  6435                           ;tactiles.c: 103: break;
  6436  1206  2A15               	goto	l883
  6437  1207                     l882:	
  6438                           ;tactiles.c: 104: case 2:
  6439                           
  6440                           
  6441                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6442  1207  148D               	bsf	13,1	;volatile
  6443  1208                     L2:	
  6444                           
  6445                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6446  1208  100D               	bcf	13,0	;volatile
  6447                           
  6448                           ;tactiles.c: 108: }
  6449                           
  6450                           ;tactiles.c: 107: break;
  6451  1209  2A15               	goto	l883
  6452  120A                     l5834:	
  6453  120A  085D               	movf	_mode2_state^(0+256),w
  6454                           
  6455                           ; Switch size 1, requested type "space"
  6456                           ; Number of cases is 3, Range of values is 0 to 2
  6457                           ; switch strategies available:
  6458                           ; Name         Instructions Cycles
  6459                           ; simple_byte           10     6 (average)
  6460                           ; direct_byte           12     6 (fixed)
  6461                           ; jumptable            260     6 (fixed)
  6462                           ;	Chosen strategy is simple_byte
  6463  120B  3A00               	xorlw	0	; case 0
  6464  120C  1903               	skipnz
  6465  120D  2A02               	goto	l879
  6466  120E  3A01               	xorlw	1	; case 1
  6467  120F  1903               	skipnz
  6468  1210  2A04               	goto	l881
  6469  1211  3A03               	xorlw	3	; case 2
  6470  1212  1903               	skipnz
  6471  1213  2A07               	goto	l882
  6472  1214  2A15               	goto	l883
  6473  1215                     l883:	
  6474                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6475                           
  6476  1215  0020               	movlb	0	; select bank0
  6477  1216  180E               	btfsc	14,0	;volatile
  6478  1217  0008               	return
  6479  1218  2A15               	goto	l883
  6480  1219                     l5836:	
  6481                           ;tactiles.c: 110: }
  6482                           ;tactiles.c: 111: }
  6483                           ;tactiles.c: 112: } else {
  6484                           
  6485                           
  6486                           ;tactiles.c: 113: debounce_mode2 = 0;
  6487  1219  0023               	movlb	3	; select bank3
  6488  121A  01CA               	clrf	_debounce_mode2^(0+384)
  6489  121B  01CB               	clrf	(_debounce_mode2+1)^(0+384)
  6490  121C  0008               	return
  6491  121D                     __end_of_update_mode:	
  6492                           
  6493                           	psect	text2
  6494  1DDA                     __ptext2:	
  6495 ;; *************** function _update_expressSwitchState *****************
  6496 ;; Defined at:
  6497 ;;		line 13 in file "expressTap.c"
  6498 ;; Parameters:    Size  Location     Type
  6499 ;;		None
  6500 ;; Auto vars:     Size  Location     Type
  6501 ;;		None
  6502 ;; Return value:  Size  Location     Type
  6503 ;;                  2  174[None  ] int 
  6504 ;; Registers used:
  6505 ;;		wreg, status,2, status,0, pclath, cstack
  6506 ;; Tracked objects:
  6507 ;;		On entry : 0/0
  6508 ;;		On exit  : 0/0
  6509 ;;		Unchanged: 0/0
  6510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6515 ;;Total ram usage:        0 bytes
  6516 ;; Hardware stack levels used:    1
  6517 ;; Hardware stack levels required when called:    6
  6518 ;; This function calls:
  6519 ;;		_initExpModeState
  6520 ;;		_initTapeModeState
  6521 ;; This function is called by:
  6522 ;;		_main
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           
  6527                           ;psect for function _update_expressSwitchState
  6528  1DDA                     _update_expressSwitchState:	
  6529                           
  6530                           ;expressTap.c: 14: if (PORTAbits.RA4 != expSwitchState) {
  6531                           
  6532                           ;incstack = 0
  6533                           ; Regs used in _update_expressSwitchState: [wreg+status,2+status,0+pclath+cstack]
  6534  1DDA  0020               	movlb	0	; select bank0
  6535  1DDB  0E0C               	swapf	12,w	;volatile
  6536  1DDC  3901               	andlw	1
  6537  1DDD  0022               	movlb	2	; select bank2
  6538  1DDE  066D               	xorwf	_expSwitchState^(0+256),w
  6539  1DDF  1903               	skipnz
  6540  1DE0  0008               	return
  6541                           
  6542                           ;expressTap.c: 16: expSwitchState = PORTAbits.RA4;
  6543  1DE1  3000               	movlw	0
  6544  1DE2  0020               	movlb	0	; select bank0
  6545  1DE3  1A0C               	btfsc	12,4	;volatile
  6546  1DE4  3001               	movlw	1
  6547  1DE5  0022               	movlb	2	; select bank2
  6548  1DE6  00ED               	movwf	_expSwitchState^(0+256)
  6549                           
  6550                           ;expressTap.c: 17: if (PORTAbits.RA4 == 0) {
  6551  1DE7  0020               	movlb	0	; select bank0
  6552  1DE8  1A0C               	btfsc	12,4	;volatile
  6553  1DE9  2DED               	goto	l5818
  6554                           
  6555                           ;expressTap.c: 18: initExpModeState();
  6556  1DEA  319D  256C         	fcall	_initExpModeState
  6557                           
  6558                           ;expressTap.c: 19: } else {
  6559  1DEC  0008               	return
  6560  1DED                     l5818:	
  6561                           
  6562                           ;expressTap.c: 20: initTapeModeState();
  6563  1DED  319D  2542         	fcall	_initTapeModeState
  6564  1DEF  0008               	return
  6565  1DF0                     __end_of_update_expressSwitchState:	
  6566                           
  6567                           	psect	text3
  6568  1D42                     __ptext3:	
  6569 ;; *************** function _initTapeModeState *****************
  6570 ;; Defined at:
  6571 ;;		line 31 in file "expressTap.c"
  6572 ;; Parameters:    Size  Location     Type
  6573 ;;		None
  6574 ;; Auto vars:     Size  Location     Type
  6575 ;;		None
  6576 ;; Return value:  Size  Location     Type
  6577 ;;                  1    wreg      void 
  6578 ;; Registers used:
  6579 ;;		None
  6580 ;; Tracked objects:
  6581 ;;		On entry : 0/0
  6582 ;;		On exit  : 0/0
  6583 ;;		Unchanged: 0/0
  6584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6589 ;;Total ram usage:        0 bytes
  6590 ;; Hardware stack levels used:    1
  6591 ;; Hardware stack levels required when called:    3
  6592 ;; This function calls:
  6593 ;;		Nothing
  6594 ;; This function is called by:
  6595 ;;		_update_expressSwitchState
  6596 ;; This function uses a non-reentrant model
  6597 ;;
  6598                           
  6599                           
  6600                           ;psect for function _initTapeModeState
  6601  1D42                     _initTapeModeState:	
  6602                           
  6603                           ;expressTap.c: 32: ANSELFbits.ANSF6 = 0;
  6604                           
  6605                           ;incstack = 0
  6606                           ; Regs used in _initTapeModeState: []
  6607  1D42  0028               	movlb	8	; select bank8
  6608  1D43  130C               	bcf	12,6	;volatile
  6609  1D44  0008               	return
  6610  1D45                     __end_of_initTapeModeState:	
  6611                           
  6612                           	psect	text4
  6613  1D6C                     __ptext4:	
  6614 ;; *************** function _initExpModeState *****************
  6615 ;; Defined at:
  6616 ;;		line 25 in file "expressTap.c"
  6617 ;; Parameters:    Size  Location     Type
  6618 ;;		None
  6619 ;; Auto vars:     Size  Location     Type
  6620 ;;		None
  6621 ;; Return value:  Size  Location     Type
  6622 ;;                  1    wreg      void 
  6623 ;; Registers used:
  6624 ;;		wreg, status,2, status,0, pclath, cstack
  6625 ;; Tracked objects:
  6626 ;;		On entry : 0/0
  6627 ;;		On exit  : 0/0
  6628 ;;		Unchanged: 0/0
  6629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6634 ;;Total ram usage:        0 bytes
  6635 ;; Hardware stack levels used:    1
  6636 ;; Hardware stack levels required when called:    5
  6637 ;; This function calls:
  6638 ;;		_wait_ms
  6639 ;; This function is called by:
  6640 ;;		_update_expressSwitchState
  6641 ;; This function uses a non-reentrant model
  6642 ;;
  6643                           
  6644                           
  6645                           ;psect for function _initExpModeState
  6646  1D6C                     _initExpModeState:	
  6647                           
  6648                           ;expressTap.c: 26: ANSELFbits.ANSF6 = 0;
  6649                           
  6650                           ;incstack = 0
  6651                           ; Regs used in _initExpModeState: [wreg+status,2+status,0+pclath+cstack]
  6652  1D6C  0028               	movlb	8	; select bank8
  6653  1D6D  130C               	bcf	12,6	;volatile
  6654                           
  6655                           ;expressTap.c: 28: wait_ms(20);
  6656  1D6E  3014               	movlw	20
  6657  1D6F  0021               	movlb	1	; select bank1
  6658  1D70  00AC               	movwf	wait_ms@timeSec^(0+128)
  6659  1D71  3000               	movlw	0
  6660  1D72  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  6661  1D73  319F  2762         	fcall	_wait_ms
  6662  1D75  0008               	return
  6663  1D76                     __end_of_initExpModeState:	
  6664                           
  6665                           	psect	text5
  6666  0C14                     __ptext5:	
  6667 ;; *************** function _updateSwitchTap *****************
  6668 ;; Defined at:
  6669 ;;		line 48 in file "SwitchTap.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;		None
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  tapCntDiviso    2   28[BANK1 ] int 
  6674 ;;  iCnt            1   30[BANK1 ] unsigned char 
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6685 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6686 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6687 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6688 ;;Total ram usage:        9 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    6
  6691 ;; This function calls:
  6692 ;;		___aldiv
  6693 ;;		_setDoublePressState
  6694 ;;		_setLongTapState
  6695 ;; This function is called by:
  6696 ;;		_main
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function _updateSwitchTap
  6702  0C14                     _updateSwitchTap:	
  6703                           
  6704                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6705                           
  6706                           ;incstack = 0
  6707                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6708  0C14  0021               	movlb	1	; select bank1
  6709  0C15  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6710                           
  6711                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6712  0C16  0020               	movlb	0	; select bank0
  6713  0C17  1810               	btfsc	16,0	;volatile
  6714  0C18  2C1F               	goto	l5964
  6715                           
  6716                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6717  0C19  0857               	movf	_switchTap_pressed,w
  6718  0C1A  1903               	btfsc	3,2
  6719  0C1B  2C29               	goto	l1222
  6720                           
  6721                           ;SwitchTap.c: 59: switchTap_pressed--;
  6722  0C1C  3001               	movlw	1
  6723  0C1D  02D7               	subwf	_switchTap_pressed,f
  6724                           
  6725                           ;SwitchTap.c: 60: }
  6726                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6727  0C1E  2C29               	goto	l1222
  6728  0C1F                     l5964:	
  6729  0C1F  3019               	movlw	25
  6730  0C20  0257               	subwf	_switchTap_pressed,w
  6731  0C21  1803               	skipnc
  6732  0C22  2C29               	goto	l1222
  6733                           
  6734                           ;SwitchTap.c: 62: switchTap_pressed++;
  6735  0C23  3001               	movlw	1
  6736  0C24  0021               	movlb	1	; select bank1
  6737  0C25  00B6               	movwf	??_updateSwitchTap^(0+128)
  6738  0C26  0836               	movf	??_updateSwitchTap^(0+128),w
  6739  0C27  0020               	movlb	0	; select bank0
  6740  0C28  07D7               	addwf	_switchTap_pressed,f
  6741  0C29                     l1222:	
  6742                           
  6743                           ;SwitchTap.c: 63: }
  6744                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6745  0C29  0857               	movf	_switchTap_pressed,w
  6746  0C2A  1D03               	btfss	3,2
  6747  0C2B  2DDE               	goto	l6048
  6748                           
  6749                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6750  0C2C  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6751  0C2D  2CB1               	goto	l6008
  6752  0C2E  084C               	movf	_tap_timer+3,w	;volatile
  6753  0C2F  1D03               	btfss	3,2
  6754  0C30  2C3A               	goto	l5970
  6755  0C31  084B               	movf	_tap_timer+2,w	;volatile
  6756  0C32  1D03               	btfss	3,2
  6757  0C33  2C3A               	goto	l5970
  6758  0C34  301B               	movlw	27
  6759  0C35  0249               	subwf	_tap_timer,w	;volatile
  6760  0C36  3006               	movlw	6
  6761  0C37  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6762  0C38  1C03               	btfss	3,0
  6763  0C39  2CB1               	goto	l6008
  6764  0C3A                     l5970:	
  6765                           
  6766                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6767  0C3A  0022               	movlb	2	; select bank2
  6768  0C3B  0360               	decf	_switchTap_down^(0+256),w
  6769  0C3C  1903               	btfsc	3,2
  6770  0C3D  2C78               	goto	l5986
  6771                           
  6772                           ;SwitchTap.c: 78: switchTap_down = 1;
  6773  0C3E  01E0               	clrf	_switchTap_down^(0+256)
  6774  0C3F  0AE0               	incf	_switchTap_down^(0+256),f
  6775                           
  6776                           ;SwitchTap.c: 79: tap_timer = 0;
  6777  0C40  3000               	movlw	0
  6778  0C41  0020               	movlb	0	; select bank0
  6779  0C42  00CC               	movwf	_tap_timer+3	;volatile
  6780  0C43  3000               	movlw	0
  6781  0C44  00CB               	movwf	_tap_timer+2	;volatile
  6782  0C45  3000               	movlw	0
  6783  0C46  00CA               	movwf	_tap_timer+1	;volatile
  6784  0C47  3000               	movlw	0
  6785  0C48  00C9               	movwf	_tap_timer	;volatile
  6786                           
  6787                           ;SwitchTap.c: 80: tap_iteration = 1;
  6788  0C49  3001               	movlw	1
  6789  0C4A  0023               	movlb	3	; select bank3
  6790  0C4B  00E8               	movwf	_tap_iteration^(0+384)
  6791  0C4C  3000               	movlw	0
  6792  0C4D  00E9               	movwf	(_tap_iteration^(0+384)+1)
  6793                           
  6794                           ;SwitchTap.c: 81: tap_total = 0;
  6795  0C4E  3000               	movlw	0
  6796  0C4F  00BF               	movwf	(_tap_total+3)^(0+384)
  6797  0C50  3000               	movlw	0
  6798  0C51  00BE               	movwf	(_tap_total+2)^(0+384)
  6799  0C52  3000               	movlw	0
  6800  0C53  00BD               	movwf	(_tap_total+1)^(0+384)
  6801  0C54  3000               	movlw	0
  6802  0C55  00BC               	movwf	_tap_total^(0+384)
  6803                           
  6804                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6805  0C56  01E2               	clrf	_delay_time_changed^(0+384)
  6806  0C57  01E3               	clrf	(_delay_time_changed+1)^(0+384)
  6807                           
  6808                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6809  0C58  0021               	movlb	1	; select bank1
  6810  0C59  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6811  0C5A  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6812  0C5B                     l5984:	
  6813  0C5B  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6814  0C5C  0020               	movlb	0	; select bank0
  6815  0C5D  0268               	subwf	_num_taps,w
  6816  0C5E  1C03               	btfss	3,0
  6817  0C5F  2C78               	goto	l5986
  6818                           
  6819                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6820  0C60  0021               	movlb	1	; select bank1
  6821  0C61  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6822  0C62  00B6               	movwf	??_updateSwitchTap^(0+128)
  6823  0C63  3001               	movlw	1
  6824  0C64                     u6655:	
  6825  0C64  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6826  0C65  3EFF               	addlw	-1
  6827  0C66  1D03               	skipz
  6828  0C67  2C64               	goto	u6655
  6829  0C68  3536               	lslf	??_updateSwitchTap^(0+128),w
  6830  0C69  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6831  0C6A  0086               	movwf	6
  6832  0C6B  3001               	movlw	1	; select bank3/4
  6833  0C6C  0087               	movwf	7
  6834  0C6D  3000               	movlw	0
  6835  0C6E  3FC0               	movwi [0]fsr1
  6836  0C6F  3000               	movlw	0
  6837  0C70  3FC1               	movwi [1]fsr1
  6838  0C71  3FC2               	movwi [2]fsr1
  6839  0C72  3FC3               	movwi [3]fsr1
  6840  0C73  3001               	movlw	1
  6841  0C74  00B6               	movwf	??_updateSwitchTap^(0+128)
  6842  0C75  0836               	movf	??_updateSwitchTap^(0+128),w
  6843  0C76  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6844  0C77  2C5B               	goto	l5984
  6845  0C78                     l5986:	
  6846                           
  6847                           ;SwitchTap.c: 86: }
  6848                           ;SwitchTap.c: 87: }
  6849                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6850  0C78  0020               	movlb	0	; select bank0
  6851  0C79  0855               	movf	_longTap_start,w
  6852  0C7A  1D03               	btfss	3,2
  6853  0C7B  2C82               	goto	l5992
  6854                           
  6855                           ;SwitchTap.c: 91: longTap_start = 1;
  6856  0C7C  01D5               	clrf	_longTap_start
  6857  0C7D  0AD5               	incf	_longTap_start,f
  6858                           
  6859                           ;SwitchTap.c: 92: longTap_state = 0;
  6860  0C7E  01E7               	clrf	_longTap_state	;volatile
  6861                           
  6862                           ;SwitchTap.c: 93: longTap_timer = 0;
  6863  0C7F  0022               	movlb	2	; select bank2
  6864  0C80  01D7               	clrf	_longTap_timer^(0+256)	;volatile
  6865  0C81  01D8               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6866  0C82                     l5992:	
  6867                           
  6868                           ;SwitchTap.c: 94: }
  6869                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6870  0C82  0020               	movlb	0	; select bank0
  6871  0C83  0863               	movf	_long_press_limit+1,w
  6872  0C84  0022               	movlb	2	; select bank2
  6873  0C85  0258               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6874  0C86  1D03               	skipz
  6875  0C87  2C8C               	goto	u6685
  6876  0C88  0020               	movlb	0	; select bank0
  6877  0C89  0862               	movf	_long_press_limit,w
  6878  0C8A  0022               	movlb	2	; select bank2
  6879  0C8B  0257               	subwf	_longTap_timer^(0+256),w	;volatile
  6880  0C8C                     u6685:	
  6881  0C8C  1C03               	skipc
  6882  0C8D  0008               	return
  6883  0C8E  0020               	movlb	0	; select bank0
  6884  0C8F  0867               	movf	_longTap_state,w	;volatile
  6885  0C90  1D03               	btfss	3,2
  6886  0C91  0008               	return
  6887  0C92  0853               	movf	_doubleTap_state,w	;volatile
  6888  0C93  1D03               	btfss	3,2
  6889  0C94  0008               	return
  6890                           
  6891                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6892  0C95  0863               	movf	_long_press_limit+1,w
  6893  0C96  0022               	movlb	2	; select bank2
  6894  0C97  00D8               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6895  0C98  0020               	movlb	0	; select bank0
  6896  0C99  0862               	movf	_long_press_limit,w
  6897  0C9A  0022               	movlb	2	; select bank2
  6898  0C9B  00D7               	movwf	_longTap_timer^(0+256)	;volatile
  6899                           
  6900                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6901  0C9C  120D               	bcf	13,4	;volatile
  6902                           
  6903                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6904  0C9D  0020               	movlb	0	; select bank0
  6905  0C9E  0354               	decf	_feedback_start,w
  6906  0C9F  1903               	btfsc	3,2
  6907  0CA0  2CA9               	goto	l6006
  6908                           
  6909                           ;SwitchTap.c: 104: setLongTapState(1);
  6910  0CA1  3001               	movlw	1
  6911  0CA2  0021               	movlb	1	; select bank1
  6912  0CA3  00A0               	movwf	setLongTapState@f_state^(0+128)
  6913  0CA4  3000               	movlw	0
  6914  0CA5  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6915  0CA6  3188  2002         	fcall	_setLongTapState
  6916                           
  6917                           ;SwitchTap.c: 105: } else {
  6918  0CA8  0008               	return
  6919  0CA9                     l6006:	
  6920                           
  6921                           ;SwitchTap.c: 106: setDoublePressState(1);
  6922  0CA9  3001               	movlw	1
  6923  0CAA  0021               	movlb	1	; select bank1
  6924  0CAB  00B2               	movwf	setDoublePressState@f_state^(0+128)
  6925  0CAC  3000               	movlw	0
  6926  0CAD  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6927  0CAE  319F  2794         	fcall	_setDoublePressState
  6928                           
  6929                           ;SwitchTap.c: 107: }
  6930                           ;SwitchTap.c: 108: }
  6931                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6932  0CB0  0008               	return
  6933  0CB1                     l6008:	
  6934  0CB1  0020               	movlb	0	; select bank0
  6935  0CB2  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6936  0CB3  2CC0               	goto	l6010
  6937  0CB4  084C               	movf	_tap_timer+3,w	;volatile
  6938  0CB5  1D03               	btfss	3,2
  6939  0CB6  0008               	return
  6940  0CB7  084B               	movf	_tap_timer+2,w	;volatile
  6941  0CB8  1D03               	btfss	3,2
  6942  0CB9  0008               	return
  6943  0CBA  301B               	movlw	27
  6944  0CBB  0249               	subwf	_tap_timer,w	;volatile
  6945  0CBC  3006               	movlw	6
  6946  0CBD  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6947  0CBE  1803               	btfsc	3,0
  6948  0CBF  0008               	return
  6949  0CC0                     l6010:	
  6950  0CC0  0867               	movf	_longTap_state,w	;volatile
  6951  0CC1  1D03               	btfss	3,2
  6952  0CC2  0008               	return
  6953  0CC3  0022               	movlb	2	; select bank2
  6954  0CC4  0360               	decf	_switchTap_down^(0+256),w
  6955  0CC5  1903               	btfsc	3,2
  6956  0CC6  0008               	return
  6957                           
  6958                           ;SwitchTap.c: 112: switchTap_down = 1;
  6959  0CC7  01E0               	clrf	_switchTap_down^(0+256)
  6960  0CC8  0AE0               	incf	_switchTap_down^(0+256),f
  6961                           
  6962                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6963  0CC9  0020               	movlb	0	; select bank0
  6964  0CCA  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6965  0CCB  2CE0               	goto	l1236
  6966  0CCC  084C               	movf	_tap_timer+3,w	;volatile
  6967  0CCD  1D03               	btfss	3,2
  6968  0CCE  2CD8               	goto	l6018
  6969  0CCF  084B               	movf	_tap_timer+2,w	;volatile
  6970  0CD0  1D03               	btfss	3,2
  6971  0CD1  2CD8               	goto	l6018
  6972  0CD2  3094               	movlw	148
  6973  0CD3  0249               	subwf	_tap_timer,w	;volatile
  6974  0CD4  3004               	movlw	4
  6975  0CD5  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6976  0CD6  1C03               	btfss	3,0
  6977  0CD7  2CE0               	goto	l1236
  6978  0CD8                     l6018:	
  6979                           
  6980                           ;SwitchTap.c: 114: tap_timer = 1172;
  6981  0CD8  3000               	movlw	0
  6982  0CD9  00CC               	movwf	_tap_timer+3	;volatile
  6983  0CDA  3000               	movlw	0
  6984  0CDB  00CB               	movwf	_tap_timer+2	;volatile
  6985  0CDC  3004               	movlw	4
  6986  0CDD  00CA               	movwf	_tap_timer+1	;volatile
  6987  0CDE  3094               	movlw	148
  6988  0CDF  00C9               	movwf	_tap_timer	;volatile
  6989  0CE0                     l1236:	
  6990                           
  6991                           ;SwitchTap.c: 115: }
  6992                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6993  0CE0  0868               	movf	_num_taps,w
  6994  0CE1  0021               	movlb	1	; select bank1
  6995  0CE2  00B6               	movwf	??_updateSwitchTap^(0+128)
  6996  0CE3  01B7               	clrf	(??_updateSwitchTap^(0+128)+1)
  6997  0CE4  0836               	movf	??_updateSwitchTap^(0+128),w
  6998  0CE5  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6999  0CE6  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  7000  0CE7  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7001                           
  7002                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  7003  0CE8  0023               	movlb	3	; select bank3
  7004  0CE9  0869               	movf	(_tap_iteration+1)^(0+384),w
  7005  0CEA  3A80               	xorlw	128
  7006  0CEB  3C80               	sublw	128
  7007  0CEC  1D03               	skipz
  7008  0CED  2CF1               	goto	u6765
  7009  0CEE  0868               	movf	_tap_iteration^(0+384),w
  7010  0CEF  0020               	movlb	0	; select bank0
  7011  0CF0  0268               	subwf	_num_taps,w
  7012  0CF1                     u6765:	
  7013  0CF1  1C03               	skipc
  7014  0CF2  2D22               	goto	l6026
  7015                           
  7016                           ;SwitchTap.c: 119: tap_total += tap_timer;
  7017  0CF3  0020               	movlb	0	; select bank0
  7018  0CF4  0849               	movf	_tap_timer,w	;volatile
  7019  0CF5  0023               	movlb	3	; select bank3
  7020  0CF6  07BC               	addwf	_tap_total^(0+384),f
  7021  0CF7  0020               	movlb	0	; select bank0
  7022  0CF8  084A               	movf	_tap_timer+1,w	;volatile
  7023  0CF9  0023               	movlb	3	; select bank3
  7024  0CFA  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  7025  0CFB  0020               	movlb	0	; select bank0
  7026  0CFC  084B               	movf	_tap_timer+2,w	;volatile
  7027  0CFD  0023               	movlb	3	; select bank3
  7028  0CFE  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  7029  0CFF  0020               	movlb	0	; select bank0
  7030  0D00  084C               	movf	_tap_timer+3,w	;volatile
  7031  0D01  0023               	movlb	3	; select bank3
  7032  0D02  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  7033                           
  7034                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  7035  0D03  0868               	movf	_tap_iteration^(0+384),w
  7036  0D04  0021               	movlb	1	; select bank1
  7037  0D05  00B6               	movwf	??_updateSwitchTap^(0+128)
  7038  0D06  3001               	movlw	1
  7039  0D07                     u6775:	
  7040  0D07  35B6               	lslf	??_updateSwitchTap^(0+128),f
  7041  0D08  3EFF               	addlw	-1
  7042  0D09  1D03               	skipz
  7043  0D0A  2D07               	goto	u6775
  7044  0D0B  3536               	lslf	??_updateSwitchTap^(0+128),w
  7045  0D0C  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7046  0D0D  0086               	movwf	6
  7047  0D0E  3001               	movlw	1	; select bank3/4
  7048  0D0F  0087               	movwf	7
  7049  0D10  0020               	movlb	0	; select bank0
  7050  0D11  0849               	movf	_tap_timer,w	;volatile
  7051  0D12  3FC0               	movwi [0]fsr1
  7052  0D13  084A               	movf	_tap_timer+1,w	;volatile
  7053  0D14  3FC1               	movwi [1]fsr1
  7054  0D15  084B               	movf	_tap_timer+2,w	;volatile
  7055  0D16  3FC2               	movwi [2]fsr1
  7056  0D17  084C               	movf	_tap_timer+3,w	;volatile
  7057  0D18  3FC3               	movwi [3]fsr1
  7058                           
  7059                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  7060  0D19  0023               	movlb	3	; select bank3
  7061  0D1A  0869               	movf	(_tap_iteration+1)^(0+384),w
  7062  0D1B  0021               	movlb	1	; select bank1
  7063  0D1C  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  7064  0D1D  0023               	movlb	3	; select bank3
  7065  0D1E  0868               	movf	_tap_iteration^(0+384),w
  7066  0D1F  0021               	movlb	1	; select bank1
  7067  0D20  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  7068                           
  7069                           ;SwitchTap.c: 122: } else {
  7070  0D21  2D9E               	goto	l6040
  7071  0D22                     l6026:	
  7072                           
  7073                           ;SwitchTap.c: 123: tap_total = 0;
  7074  0D22  3000               	movlw	0
  7075  0D23  0023               	movlb	3	; select bank3
  7076  0D24  00BF               	movwf	(_tap_total+3)^(0+384)
  7077  0D25  3000               	movlw	0
  7078  0D26  00BE               	movwf	(_tap_total+2)^(0+384)
  7079  0D27  3000               	movlw	0
  7080  0D28  00BD               	movwf	(_tap_total+1)^(0+384)
  7081  0D29  3000               	movlw	0
  7082  0D2A  00BC               	movwf	_tap_total^(0+384)
  7083                           
  7084                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7085  0D2B  0021               	movlb	1	; select bank1
  7086  0D2C  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  7087  0D2D  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  7088  0D2E                     l6034:	
  7089  0D2E  0020               	movlb	0	; select bank0
  7090  0D2F  0868               	movf	_num_taps,w
  7091  0D30  0021               	movlb	1	; select bank1
  7092  0D31  023E               	subwf	updateSwitchTap@iCnt^(0+128),w
  7093  0D32  1803               	btfsc	3,0
  7094  0D33  2D78               	goto	l6036
  7095                           
  7096                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  7097  0D34  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  7098  0D35  00B6               	movwf	??_updateSwitchTap^(0+128)
  7099  0D36  3001               	movlw	1
  7100  0D37                     u6785:	
  7101  0D37  35B6               	lslf	??_updateSwitchTap^(0+128),f
  7102  0D38  3EFF               	addlw	-1
  7103  0D39  1D03               	skipz
  7104  0D3A  2D37               	goto	u6785
  7105  0D3B  3536               	lslf	??_updateSwitchTap^(0+128),w
  7106  0D3C  3E04               	addlw	4
  7107  0D3D  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7108  0D3E  0086               	movwf	6
  7109  0D3F  3001               	movlw	1	; select bank3/4
  7110  0D40  0087               	movwf	7
  7111  0D41  3F40               	moviw [0]fsr1
  7112  0D42  00B7               	movwf	(??_updateSwitchTap+1)^(0+128)
  7113  0D43  3F41               	moviw [1]fsr1
  7114  0D44  00B8               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  7115  0D45  3F42               	moviw [2]fsr1
  7116  0D46  00B9               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  7117  0D47  3F43               	moviw [3]fsr1
  7118  0D48  00BA               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  7119  0D49  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  7120  0D4A  00BB               	movwf	(??_updateSwitchTap+5)^(0+128)
  7121  0D4B  3001               	movlw	1
  7122  0D4C                     u6795:	
  7123  0D4C  35BB               	lslf	(??_updateSwitchTap+5)^(0+128),f
  7124  0D4D  3EFF               	addlw	-1
  7125  0D4E  1D03               	skipz
  7126  0D4F  2D4C               	goto	u6795
  7127  0D50  353B               	lslf	(??_updateSwitchTap+5)^(0+128),w
  7128  0D51  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7129  0D52  0086               	movwf	6
  7130  0D53  3001               	movlw	1	; select bank3/4
  7131  0D54  0087               	movwf	7
  7132  0D55  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  7133  0D56  3FC0               	movwi [0]fsr1
  7134  0D57  0838               	movf	(??_updateSwitchTap+2)^(0+128),w
  7135  0D58  3FC1               	movwi [1]fsr1
  7136  0D59  0839               	movf	(??_updateSwitchTap+3)^(0+128),w
  7137  0D5A  3FC2               	movwi [2]fsr1
  7138  0D5B  083A               	movf	(??_updateSwitchTap+4)^(0+128),w
  7139  0D5C  3FC3               	movwi [3]fsr1
  7140                           
  7141                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  7142  0D5D  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  7143  0D5E  00B6               	movwf	??_updateSwitchTap^(0+128)
  7144  0D5F  3001               	movlw	1
  7145  0D60                     u6805:	
  7146  0D60  35B6               	lslf	??_updateSwitchTap^(0+128),f
  7147  0D61  3EFF               	addlw	-1
  7148  0D62  1D03               	skipz
  7149  0D63  2D60               	goto	u6805
  7150  0D64  3536               	lslf	??_updateSwitchTap^(0+128),w
  7151  0D65  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7152  0D66  0086               	movwf	6
  7153  0D67  3001               	movlw	1	; select bank3/4
  7154  0D68  0087               	movwf	7
  7155  0D69  3F40               	moviw [0]fsr1
  7156  0D6A  0023               	movlb	3	; select bank3
  7157  0D6B  07BC               	addwf	_tap_total^(0+384),f
  7158  0D6C  3F41               	moviw [1]fsr1
  7159  0D6D  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  7160  0D6E  3F42               	moviw [2]fsr1
  7161  0D6F  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  7162  0D70  3F43               	moviw [3]fsr1
  7163  0D71  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  7164  0D72  3001               	movlw	1
  7165  0D73  0021               	movlb	1	; select bank1
  7166  0D74  00B6               	movwf	??_updateSwitchTap^(0+128)
  7167  0D75  0836               	movf	??_updateSwitchTap^(0+128),w
  7168  0D76  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  7169  0D77  2D2E               	goto	l6034
  7170  0D78                     l6036:	
  7171                           
  7172                           ;SwitchTap.c: 127: }
  7173                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  7174  0D78  0020               	movlb	0	; select bank0
  7175  0D79  0868               	movf	_num_taps,w
  7176  0D7A  0021               	movlb	1	; select bank1
  7177  0D7B  00B6               	movwf	??_updateSwitchTap^(0+128)
  7178  0D7C  3001               	movlw	1
  7179  0D7D                     u6825:	
  7180  0D7D  35B6               	lslf	??_updateSwitchTap^(0+128),f
  7181  0D7E  3EFF               	addlw	-1
  7182  0D7F  1D03               	skipz
  7183  0D80  2D7D               	goto	u6825
  7184  0D81  3536               	lslf	??_updateSwitchTap^(0+128),w
  7185  0D82  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7186  0D83  0086               	movwf	6
  7187  0D84  3001               	movlw	1	; select bank3/4
  7188  0D85  0087               	movwf	7
  7189  0D86  0020               	movlb	0	; select bank0
  7190  0D87  0849               	movf	_tap_timer,w	;volatile
  7191  0D88  3FC0               	movwi [0]fsr1
  7192  0D89  084A               	movf	_tap_timer+1,w	;volatile
  7193  0D8A  3FC1               	movwi [1]fsr1
  7194  0D8B  084B               	movf	_tap_timer+2,w	;volatile
  7195  0D8C  3FC2               	movwi [2]fsr1
  7196  0D8D  084C               	movf	_tap_timer+3,w	;volatile
  7197  0D8E  3FC3               	movwi [3]fsr1
  7198                           
  7199                           ;SwitchTap.c: 129: tap_total += tap_timer;
  7200  0D8F  0849               	movf	_tap_timer,w	;volatile
  7201  0D90  0023               	movlb	3	; select bank3
  7202  0D91  07BC               	addwf	_tap_total^(0+384),f
  7203  0D92  0020               	movlb	0	; select bank0
  7204  0D93  084A               	movf	_tap_timer+1,w	;volatile
  7205  0D94  0023               	movlb	3	; select bank3
  7206  0D95  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  7207  0D96  0020               	movlb	0	; select bank0
  7208  0D97  084B               	movf	_tap_timer+2,w	;volatile
  7209  0D98  0023               	movlb	3	; select bank3
  7210  0D99  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  7211  0D9A  0020               	movlb	0	; select bank0
  7212  0D9B  084C               	movf	_tap_timer+3,w	;volatile
  7213  0D9C  0023               	movlb	3	; select bank3
  7214  0D9D  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  7215  0D9E                     l6040:	
  7216                           
  7217                           ;SwitchTap.c: 130: }
  7218                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  7219  0D9E  0021               	movlb	1	; select bank1
  7220  0D9F  083C               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  7221  0DA0  00A0               	movwf	___aldiv@divisor^(0+128)
  7222  0DA1  083D               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  7223  0DA2  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  7224  0DA3  0D89               	rlf	9,f
  7225  0DA4  3B89               	subwfb	9,f
  7226  0DA5  0989               	comf	9,f
  7227  0DA6  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  7228  0DA7  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  7229  0DA8  0023               	movlb	3	; select bank3
  7230  0DA9  083F               	movf	(_tap_total+3)^(0+384),w
  7231  0DAA  0021               	movlb	1	; select bank1
  7232  0DAB  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  7233  0DAC  0023               	movlb	3	; select bank3
  7234  0DAD  083E               	movf	(_tap_total+2)^(0+384),w
  7235  0DAE  0021               	movlb	1	; select bank1
  7236  0DAF  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  7237  0DB0  0023               	movlb	3	; select bank3
  7238  0DB1  083D               	movf	(_tap_total+1)^(0+384),w
  7239  0DB2  0021               	movlb	1	; select bank1
  7240  0DB3  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  7241  0DB4  0023               	movlb	3	; select bank3
  7242  0DB5  083C               	movf	_tap_total^(0+384),w
  7243  0DB6  0021               	movlb	1	; select bank1
  7244  0DB7  00A4               	movwf	___aldiv@dividend^(0+128)
  7245  0DB8  3196  2654         	fcall	___aldiv
  7246  0DBA  0021               	movlb	1	; select bank1
  7247  0DBB  0823               	movf	(?___aldiv+3)^(0+128),w
  7248  0DBC  0020               	movlb	0	; select bank0
  7249  0DBD  00DB               	movwf	_baseline_delay_time+3	;volatile
  7250  0DBE  0021               	movlb	1	; select bank1
  7251  0DBF  0822               	movf	(?___aldiv+2)^(0+128),w
  7252  0DC0  0020               	movlb	0	; select bank0
  7253  0DC1  00DA               	movwf	_baseline_delay_time+2	;volatile
  7254  0DC2  0021               	movlb	1	; select bank1
  7255  0DC3  0821               	movf	(?___aldiv+1)^(0+128),w
  7256  0DC4  0020               	movlb	0	; select bank0
  7257  0DC5  00D9               	movwf	_baseline_delay_time+1	;volatile
  7258  0DC6  0021               	movlb	1	; select bank1
  7259  0DC7  0820               	movf	?___aldiv^(0+128),w
  7260  0DC8  0020               	movlb	0	; select bank0
  7261  0DC9  00D8               	movwf	_baseline_delay_time	;volatile
  7262                           
  7263                           ;SwitchTap.c: 133: delay_time_changed = 1;
  7264  0DCA  3001               	movlw	1
  7265  0DCB  0023               	movlb	3	; select bank3
  7266  0DCC  00E2               	movwf	_delay_time_changed^(0+384)
  7267  0DCD  3000               	movlw	0
  7268  0DCE  00E3               	movwf	(_delay_time_changed^(0+384)+1)
  7269                           
  7270                           ;SwitchTap.c: 134: tap_timer = 0;
  7271  0DCF  3000               	movlw	0
  7272  0DD0  0020               	movlb	0	; select bank0
  7273  0DD1  00CC               	movwf	_tap_timer+3	;volatile
  7274  0DD2  3000               	movlw	0
  7275  0DD3  00CB               	movwf	_tap_timer+2	;volatile
  7276  0DD4  3000               	movlw	0
  7277  0DD5  00CA               	movwf	_tap_timer+1	;volatile
  7278  0DD6  3000               	movlw	0
  7279  0DD7  00C9               	movwf	_tap_timer	;volatile
  7280                           
  7281                           ;SwitchTap.c: 136: tap_iteration++;
  7282  0DD8  3001               	movlw	1
  7283  0DD9  0023               	movlb	3	; select bank3
  7284  0DDA  07E8               	addwf	_tap_iteration^(0+384),f
  7285  0DDB  3000               	movlw	0
  7286  0DDC  3DE9               	addwfc	(_tap_iteration+1)^(0+384),f
  7287                           
  7288                           ;SwitchTap.c: 137: }
  7289                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  7290  0DDD  0008               	return
  7291  0DDE                     l6048:	
  7292  0DDE  3019               	movlw	25
  7293  0DDF  0020               	movlb	0	; select bank0
  7294  0DE0  0257               	subwf	_switchTap_pressed,w
  7295  0DE1  1C03               	skipc
  7296  0DE2  0008               	return
  7297                           
  7298                           ;SwitchTap.c: 140: switchTap_down = 0;
  7299  0DE3  0022               	movlb	2	; select bank2
  7300  0DE4  01E0               	clrf	_switchTap_down^(0+256)
  7301                           
  7302                           ;SwitchTap.c: 141: switchTap_state = 0;
  7303  0DE5  01EE               	clrf	_switchTap_state^(0+256)
  7304                           
  7305                           ;SwitchTap.c: 147: setLongTapState(0);
  7306  0DE6  3000               	movlw	0
  7307  0DE7  0021               	movlb	1	; select bank1
  7308  0DE8  00A0               	movwf	setLongTapState@f_state^(0+128)
  7309  0DE9  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7310  0DEA  3188  2002         	fcall	_setLongTapState
  7311                           
  7312                           ;SwitchTap.c: 149: longTap_timer = 0;
  7313  0DEC  0022               	movlb	2	; select bank2
  7314  0DED  01D7               	clrf	_longTap_timer^(0+256)	;volatile
  7315  0DEE  01D8               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7316                           
  7317                           ;SwitchTap.c: 150: longTap_start = 0;
  7318  0DEF  0020               	movlb	0	; select bank0
  7319  0DF0  01D5               	clrf	_longTap_start
  7320                           
  7321                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  7322  0DF1  3019               	movlw	25
  7323  0DF2  0021               	movlb	1	; select bank1
  7324  0DF3  00B6               	movwf	??_updateSwitchTap^(0+128)
  7325  0DF4  0836               	movf	??_updateSwitchTap^(0+128),w
  7326  0DF5  0020               	movlb	0	; select bank0
  7327  0DF6  00D7               	movwf	_switchTap_pressed
  7328  0DF7  0008               	return
  7329  0DF8                     __end_of_updateSwitchTap:	
  7330                           
  7331                           	psect	text6
  7332  0802                     __ptext6:	
  7333 ;; *************** function _setLongTapState *****************
  7334 ;; Defined at:
  7335 ;;		line 167 in file "SwitchTap.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;  f_state         2    0[BANK1 ] int 
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;                  1    wreg      void 
  7342 ;; Registers used:
  7343 ;;		wreg, status,0
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7349 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7351 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7352 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7353 ;;Total ram usage:        4 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    3
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_updateSwitchTap
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           
  7364                           ;psect for function _setLongTapState
  7365  0802                     _setLongTapState:	
  7366                           
  7367                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  7368                           
  7369                           ;incstack = 0
  7370                           ; Regs used in _setLongTapState: [wreg+status,0]
  7371  0802  0020               	movlb	0	; select bank0
  7372  0803  0867               	movf	_longTap_state,w	;volatile
  7373  0804  0021               	movlb	1	; select bank1
  7374  0805  00A2               	movwf	??_setLongTapState^(0+128)
  7375  0806  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7376  0807  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7377  0808  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7378  0809  1D03               	skipz
  7379  080A  280D               	goto	u5575
  7380  080B  0820               	movf	setLongTapState@f_state^(0+128),w
  7381  080C  0622               	xorwf	??_setLongTapState^(0+128),w
  7382  080D                     u5575:	
  7383  080D  1903               	btfsc	3,2
  7384  080E  0008               	return
  7385                           
  7386                           ;SwitchTap.c: 169: longTap_state = f_state;
  7387  080F  0820               	movf	setLongTapState@f_state^(0+128),w
  7388  0810  00A2               	movwf	??_setLongTapState^(0+128)
  7389  0811  0822               	movf	??_setLongTapState^(0+128),w
  7390  0812  0020               	movlb	0	; select bank0
  7391  0813  00E7               	movwf	_longTap_state	;volatile
  7392                           
  7393                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  7394  0814  0021               	movlb	1	; select bank1
  7395  0815  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7396  0816  0022               	movlb	2	; select bank2
  7397  0817  1C03               	skipc
  7398  0818  128D               	bcf	13,5	;volatile
  7399  0819  1803               	skipnc
  7400  081A  168D               	bsf	13,5	;volatile
  7401  081B  0008               	return
  7402  081C                     __end_of_setLongTapState:	
  7403                           
  7404                           	psect	text7
  7405  1654                     __ptext7:	
  7406 ;; *************** function ___aldiv *****************
  7407 ;; Defined at:
  7408 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;  divisor         4    0[BANK1 ] long 
  7411 ;;  dividend        4    4[BANK1 ] long 
  7412 ;; Auto vars:     Size  Location     Type
  7413 ;;  quotient        4   11[BANK1 ] long 
  7414 ;;  sign            1   10[BANK1 ] unsigned char 
  7415 ;;  counter         1    9[BANK1 ] unsigned char 
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  4    0[BANK1 ] long 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, status,0
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7425 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7426 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7427 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7428 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7429 ;;Total ram usage:       15 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; Hardware stack levels required when called:    3
  7432 ;; This function calls:
  7433 ;;		Nothing
  7434 ;; This function is called by:
  7435 ;;		_updateSwitchTap
  7436 ;; This function uses a non-reentrant model
  7437 ;;
  7438                           
  7439                           
  7440                           ;psect for function ___aldiv
  7441  1654                     ___aldiv:	
  7442                           
  7443                           ;incstack = 0
  7444                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7445  1654  0021               	movlb	1	; select bank1
  7446  1655  01AA               	clrf	___aldiv@sign^(0+128)
  7447  1656  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7448  1657  2E65               	goto	l1486
  7449  1658  09A0               	comf	___aldiv@divisor^(0+128),f
  7450  1659  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7451  165A  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7452  165B  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7453  165C  0AA0               	incf	___aldiv@divisor^(0+128),f
  7454  165D  1903               	skipnz
  7455  165E  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7456  165F  1903               	skipnz
  7457  1660  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7458  1661  1903               	skipnz
  7459  1662  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7460  1663  01AA               	clrf	___aldiv@sign^(0+128)
  7461  1664  0AAA               	incf	___aldiv@sign^(0+128),f
  7462  1665                     l1486:	
  7463  1665  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7464  1666  2E76               	goto	l5500
  7465  1667  09A4               	comf	___aldiv@dividend^(0+128),f
  7466  1668  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7467  1669  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7468  166A  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7469  166B  0AA4               	incf	___aldiv@dividend^(0+128),f
  7470  166C  1903               	skipnz
  7471  166D  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7472  166E  1903               	skipnz
  7473  166F  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7474  1670  1903               	skipnz
  7475  1671  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7476  1672  3001               	movlw	1
  7477  1673  00A8               	movwf	??___aldiv^(0+128)
  7478  1674  0828               	movf	??___aldiv^(0+128),w
  7479  1675  06AA               	xorwf	___aldiv@sign^(0+128),f
  7480  1676                     l5500:	
  7481  1676  3000               	movlw	0
  7482  1677  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7483  1678  3000               	movlw	0
  7484  1679  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7485  167A  3000               	movlw	0
  7486  167B  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7487  167C  3000               	movlw	0
  7488  167D  00AB               	movwf	___aldiv@quotient^(0+128)
  7489  167E  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7490  167F  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7491  1680  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7492  1681  0420               	iorwf	___aldiv@divisor^(0+128),w
  7493  1682  1903               	skipnz
  7494  1683  2EBF               	goto	l5522
  7495  1684  01A9               	clrf	___aldiv@counter^(0+128)
  7496  1685  0AA9               	incf	___aldiv@counter^(0+128),f
  7497  1686                     l5508:	
  7498  1686  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7499  1687  2E94               	goto	l5510
  7500  1688  3001               	movlw	1
  7501  1689                     u5615:	
  7502  1689  35A0               	lslf	___aldiv@divisor^(0+128),f
  7503  168A  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7504  168B  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7505  168C  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7506  168D  0B89               	decfsz	9,f
  7507  168E  2E89               	goto	u5615
  7508  168F  3001               	movlw	1
  7509  1690  00A8               	movwf	??___aldiv^(0+128)
  7510  1691  0828               	movf	??___aldiv^(0+128),w
  7511  1692  07A9               	addwf	___aldiv@counter^(0+128),f
  7512  1693  2E86               	goto	l5508
  7513  1694                     l5510:	
  7514  1694  3001               	movlw	1
  7515  1695                     u5635:	
  7516  1695  35AB               	lslf	___aldiv@quotient^(0+128),f
  7517  1696  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7518  1697  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7519  1698  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7520  1699  0B89               	decfsz	9,f
  7521  169A  2E95               	goto	u5635
  7522  169B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7523  169C  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7524  169D  1D03               	skipz
  7525  169E  2EA9               	goto	u5645
  7526  169F  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7527  16A0  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7528  16A1  1D03               	skipz
  7529  16A2  2EA9               	goto	u5645
  7530  16A3  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7531  16A4  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7532  16A5  1D03               	skipz
  7533  16A6  2EA9               	goto	u5645
  7534  16A7  0820               	movf	___aldiv@divisor^(0+128),w
  7535  16A8  0224               	subwf	___aldiv@dividend^(0+128),w
  7536  16A9                     u5645:	
  7537  16A9  1C03               	skipc
  7538  16AA  2EB4               	goto	l5518
  7539  16AB  0820               	movf	___aldiv@divisor^(0+128),w
  7540  16AC  02A4               	subwf	___aldiv@dividend^(0+128),f
  7541  16AD  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7542  16AE  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7543  16AF  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7544  16B0  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7545  16B1  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7546  16B2  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7547  16B3  142B               	bsf	___aldiv@quotient^(0+128),0
  7548  16B4                     l5518:	
  7549  16B4  3001               	movlw	1
  7550  16B5                     u5655:	
  7551  16B5  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7552  16B6  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7553  16B7  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7554  16B8  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7555  16B9  0B89               	decfsz	9,f
  7556  16BA  2EB5               	goto	u5655
  7557  16BB  3001               	movlw	1
  7558  16BC  02A9               	subwf	___aldiv@counter^(0+128),f
  7559  16BD  1D03               	btfss	3,2
  7560  16BE  2E94               	goto	l5510
  7561  16BF                     l5522:	
  7562  16BF  082A               	movf	___aldiv@sign^(0+128),w
  7563  16C0  1903               	btfsc	3,2
  7564  16C1  2ECD               	goto	l5526
  7565  16C2  09AB               	comf	___aldiv@quotient^(0+128),f
  7566  16C3  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7567  16C4  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7568  16C5  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7569  16C6  0AAB               	incf	___aldiv@quotient^(0+128),f
  7570  16C7  1903               	skipnz
  7571  16C8  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7572  16C9  1903               	skipnz
  7573  16CA  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7574  16CB  1903               	skipnz
  7575  16CC  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7576  16CD                     l5526:	
  7577  16CD  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7578  16CE  00A3               	movwf	(?___aldiv+3)^(0+128)
  7579  16CF  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7580  16D0  00A2               	movwf	(?___aldiv+2)^(0+128)
  7581  16D1  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7582  16D2  00A1               	movwf	(?___aldiv+1)^(0+128)
  7583  16D3  082B               	movf	___aldiv@quotient^(0+128),w
  7584  16D4  00A0               	movwf	?___aldiv^(0+128)
  7585  16D5  0008               	return
  7586  16D6                     __end_of___aldiv:	
  7587                           
  7588                           	psect	text8
  7589  0A33                     __ptext8:	
  7590 ;; *************** function _updateSwitchBypass *****************
  7591 ;; Defined at:
  7592 ;;		line 34 in file "SwitchBypass.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, pclath, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7608 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7609 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7610 ;;Total ram usage:        2 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    6
  7613 ;; This function calls:
  7614 ;;		_setDoublePressState
  7615 ;;		_setFeedbackState
  7616 ;;		_setSwitchBypassState
  7617 ;; This function is called by:
  7618 ;;		_main
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           
  7623                           ;psect for function _updateSwitchBypass
  7624  0A33                     _updateSwitchBypass:	
  7625                           
  7626                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7630  0A33  0020               	movlb	0	; select bank0
  7631  0A34  1890               	btfsc	16,1	;volatile
  7632  0A35  2A49               	goto	l5876
  7633                           
  7634                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7635  0A36  0022               	movlb	2	; select bank2
  7636  0A37  085A               	movf	(_switchBypass_pressed+1)^(0+256),w
  7637  0A38  3A80               	xorlw	128
  7638  0A39  0021               	movlb	1	; select bank1
  7639  0A3A  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7640  0A3B  3080               	movlw	128
  7641  0A3C  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7642  0A3D  1D03               	skipz
  7643  0A3E  2A42               	goto	u6395
  7644  0A3F  3001               	movlw	1
  7645  0A40  0022               	movlb	2	; select bank2
  7646  0A41  0259               	subwf	_switchBypass_pressed^(0+256),w
  7647  0A42                     u6395:	
  7648  0A42  1C03               	skipc
  7649  0A43  2A5C               	goto	l5880
  7650                           
  7651                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7652  0A44  30FF               	movlw	255
  7653  0A45  0022               	movlb	2	; select bank2
  7654  0A46  07D9               	addwf	_switchBypass_pressed^(0+256),f
  7655  0A47  30FF               	movlw	255
  7656  0A48  2A5B               	goto	L3
  7657  0A49                     l5876:	
  7658                           ;SwitchBypass.c: 44: }
  7659                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7660                           
  7661  0A49  0022               	movlb	2	; select bank2
  7662  0A4A  085A               	movf	(_switchBypass_pressed+1)^(0+256),w
  7663  0A4B  3A80               	xorlw	128
  7664  0A4C  0021               	movlb	1	; select bank1
  7665  0A4D  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7666  0A4E  3080               	movlw	128
  7667  0A4F  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7668  0A50  1D03               	skipz
  7669  0A51  2A55               	goto	u6405
  7670  0A52  3019               	movlw	25
  7671  0A53  0022               	movlb	2	; select bank2
  7672  0A54  0259               	subwf	_switchBypass_pressed^(0+256),w
  7673  0A55                     u6405:	
  7674  0A55  1803               	skipnc
  7675  0A56  2A5C               	goto	l5880
  7676                           
  7677                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7678  0A57  3001               	movlw	1
  7679  0A58  0022               	movlb	2	; select bank2
  7680  0A59  07D9               	addwf	_switchBypass_pressed^(0+256),f
  7681  0A5A  3000               	movlw	0
  7682  0A5B                     L3:	
  7683  0A5B  3DDA               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7684  0A5C                     l5880:	
  7685                           
  7686                           ;SwitchBypass.c: 47: }
  7687                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7688  0A5C  0022               	movlb	2	; select bank2
  7689  0A5D  0859               	movf	_switchBypass_pressed^(0+256),w
  7690  0A5E  045A               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7691  0A5F  1D03               	btfss	3,2
  7692  0A60  2ABD               	goto	l5920
  7693                           
  7694                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7695  0A61  0020               	movlb	0	; select bank0
  7696  0A62  0854               	movf	_feedback_start,w
  7697  0A63  1D03               	btfss	3,2
  7698  0A64  2A6A               	goto	l5888
  7699                           
  7700                           ;SwitchBypass.c: 57: feedback_start = 1;
  7701  0A65  01D4               	clrf	_feedback_start
  7702  0A66  0AD4               	incf	_feedback_start,f
  7703                           
  7704                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7705  0A67  0022               	movlb	2	; select bank2
  7706  0A68  01D3               	clrf	_feedback_timer^(0+256)	;volatile
  7707  0A69  01D4               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7708  0A6A                     l5888:	
  7709                           
  7710                           ;SwitchBypass.c: 59: }
  7711                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7712  0A6A  0020               	movlb	0	; select bank0
  7713  0A6B  0863               	movf	_long_press_limit+1,w
  7714  0A6C  0022               	movlb	2	; select bank2
  7715  0A6D  0254               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7716  0A6E  1D03               	skipz
  7717  0A6F  2A74               	goto	u6435
  7718  0A70  0020               	movlb	0	; select bank0
  7719  0A71  0862               	movf	_long_press_limit,w
  7720  0A72  0022               	movlb	2	; select bank2
  7721  0A73  0253               	subwf	_feedback_timer^(0+256),w	;volatile
  7722  0A74                     u6435:	
  7723  0A74  1C03               	skipc
  7724  0A75  2A94               	goto	l5902
  7725  0A76  0020               	movlb	0	; select bank0
  7726  0A77  0866               	movf	_feedback_state,w	;volatile
  7727  0A78  1D03               	btfss	3,2
  7728  0A79  2A94               	goto	l5902
  7729  0A7A  0853               	movf	_doubleTap_state,w	;volatile
  7730  0A7B  1D03               	btfss	3,2
  7731  0A7C  2A94               	goto	l5902
  7732                           
  7733                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7734  0A7D  0022               	movlb	2	; select bank2
  7735  0A7E  110D               	bcf	13,2	;volatile
  7736                           
  7737                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7738  0A7F  0020               	movlb	0	; select bank0
  7739  0A80  0355               	decf	_longTap_start,w
  7740  0A81  1903               	btfsc	3,2
  7741  0A82  2A8C               	goto	l5900
  7742                           
  7743                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7744  0A83  3001               	movlw	1
  7745  0A84  0021               	movlb	1	; select bank1
  7746  0A85  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7747  0A86  3000               	movlw	0
  7748  0A87  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7749  0A88  319E  2609  318A   	fcall	_setFeedbackState
  7750                           
  7751                           ;SwitchBypass.c: 67: } else {
  7752  0A8B  2A94               	goto	l5902
  7753  0A8C                     l5900:	
  7754                           
  7755                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7756  0A8C  3001               	movlw	1
  7757  0A8D  0021               	movlb	1	; select bank1
  7758  0A8E  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7759  0A8F  3000               	movlw	0
  7760  0A90  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7761  0A91  319F  2794  318A   	fcall	_setDoublePressState
  7762  0A94                     l5902:	
  7763                           
  7764                           ;SwitchBypass.c: 69: }
  7765                           ;SwitchBypass.c: 70: }
  7766                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7767  0A94  0020               	movlb	0	; select bank0
  7768  0A95  0853               	movf	_doubleTap_state,w	;volatile
  7769  0A96  1D03               	btfss	3,2
  7770  0A97  2AB9               	goto	l1096
  7771  0A98  0866               	movf	_feedback_state,w	;volatile
  7772  0A99  1D03               	btfss	3,2
  7773  0A9A  2AB9               	goto	l1096
  7774                           
  7775                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7776  0A9B  0369               	decf	_switchBypass_state,w
  7777  0A9C  1D03               	btfss	3,2
  7778  0A9D  2AAC               	goto	l5914
  7779                           
  7780                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7781  0A9E  0023               	movlb	3	; select bank3
  7782  0A9F  0366               	decf	_switchBypass_up^(0+384),w
  7783  0AA0  0467               	iorwf	(_switchBypass_up+1)^(0+384),w
  7784  0AA1  1D03               	btfss	3,2
  7785  0AA2  2AB9               	goto	l1096
  7786                           
  7787                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7788  0AA3  0022               	movlb	2	; select bank2
  7789  0AA4  01EC               	clrf	_currentBypassState^(0+256)
  7790  0AA5  0AEC               	incf	_currentBypassState^(0+256),f
  7791                           
  7792                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7793  0AA6  3001               	movlw	1
  7794  0AA7  0023               	movlb	3	; select bank3
  7795  0AA8  00DC               	movwf	_switchBypass_toggle^(0+384)
  7796  0AA9  3000               	movlw	0
  7797  0AAA  00DD               	movwf	(_switchBypass_toggle^(0+384)+1)
  7798                           
  7799                           ;SwitchBypass.c: 78: }
  7800                           ;SwitchBypass.c: 93: } else {
  7801  0AAB  2AB9               	goto	l1096
  7802  0AAC                     l5914:	
  7803                           
  7804                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7805  0AAC  0022               	movlb	2	; select bank2
  7806  0AAD  035C               	decf	_bypass_turning_on^(0+256),w
  7807  0AAE  1903               	btfsc	3,2
  7808  0AAF  2AB9               	goto	l1096
  7809                           
  7810                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7811  0AB0  01EC               	clrf	_currentBypassState^(0+256)
  7812                           
  7813                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7814  0AB1  01DC               	clrf	_bypass_turning_on^(0+256)
  7815  0AB2  0ADC               	incf	_bypass_turning_on^(0+256),f
  7816                           
  7817                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7818  0AB3  0023               	movlb	3	; select bank3
  7819  0AB4  01DC               	clrf	_switchBypass_toggle^(0+384)
  7820  0AB5  01DD               	clrf	(_switchBypass_toggle+1)^(0+384)
  7821                           
  7822                           ;SwitchBypass.c: 101: feedback_state = 0;
  7823  0AB6  0020               	movlb	0	; select bank0
  7824  0AB7  01E6               	clrf	_feedback_state	;volatile
  7825                           
  7826                           ;SwitchBypass.c: 102: feedback_start = 0;
  7827  0AB8  01D4               	clrf	_feedback_start
  7828  0AB9                     l1096:	
  7829                           
  7830                           ;SwitchBypass.c: 103: }
  7831                           ;SwitchBypass.c: 104: }
  7832                           ;SwitchBypass.c: 106: }
  7833                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7834  0AB9  0023               	movlb	3	; select bank3
  7835  0ABA  01E6               	clrf	_switchBypass_up^(0+384)
  7836  0ABB  01E7               	clrf	(_switchBypass_up+1)^(0+384)
  7837                           
  7838                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7839  0ABC  0008               	return
  7840  0ABD                     l5920:	
  7841  0ABD  0022               	movlb	2	; select bank2
  7842  0ABE  085A               	movf	(_switchBypass_pressed+1)^(0+256),w
  7843  0ABF  3A80               	xorlw	128
  7844  0AC0  0021               	movlb	1	; select bank1
  7845  0AC1  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7846  0AC2  3080               	movlw	128
  7847  0AC3  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7848  0AC4  1D03               	skipz
  7849  0AC5  2AC9               	goto	u6525
  7850  0AC6  3019               	movlw	25
  7851  0AC7  0022               	movlb	2	; select bank2
  7852  0AC8  0259               	subwf	_switchBypass_pressed^(0+256),w
  7853  0AC9                     u6525:	
  7854  0AC9  1C03               	skipc
  7855  0ACA  0008               	return
  7856                           
  7857                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7858  0ACB  0020               	movlb	0	; select bank0
  7859  0ACC  0353               	decf	_doubleTap_state,w	;volatile
  7860  0ACD  1D03               	btfss	3,2
  7861  0ACE  2AD8               	goto	l5926
  7862                           
  7863                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7864  0ACF  0022               	movlb	2	; select bank2
  7865  0AD0  086C               	movf	_currentBypassState^(0+256),w
  7866  0AD1  0021               	movlb	1	; select bank1
  7867  0AD2  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7868  0AD3  01B7               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7869  0AD4  0836               	movf	??_updateSwitchBypass^(0+128),w
  7870  0AD5  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7871  0AD6  0837               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7872  0AD7  2AF5               	goto	L4
  7873  0AD8                     l5926:	
  7874                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7875                           
  7876  0AD8  0022               	movlb	2	; select bank2
  7877  0AD9  035C               	decf	_bypass_turning_on^(0+256),w
  7878  0ADA  1903               	btfsc	3,2
  7879  0ADB  2AE0               	goto	l5930
  7880  0ADC  0020               	movlb	0	; select bank0
  7881  0ADD  0366               	decf	_feedback_state,w	;volatile
  7882  0ADE  1D03               	btfss	3,2
  7883  0ADF  2AE6               	goto	l5932
  7884  0AE0                     l5930:	
  7885                           
  7886                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7887  0AE0  3001               	movlw	1
  7888  0AE1  0021               	movlb	1	; select bank1
  7889  0AE2  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7890  0AE3  3000               	movlw	0
  7891  0AE4  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7892  0AE5  2AF6               	goto	L5
  7893  0AE6                     l5932:	
  7894                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7895                           
  7896  0AE6  0023               	movlb	3	; select bank3
  7897  0AE7  035C               	decf	_switchBypass_toggle^(0+384),w
  7898  0AE8  045D               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7899  0AE9  1D03               	btfss	3,2
  7900  0AEA  2AF9               	goto	l5940
  7901  0AEB  0020               	movlb	0	; select bank0
  7902  0AEC  0866               	movf	_feedback_state,w	;volatile
  7903  0AED  1D03               	btfss	3,2
  7904  0AEE  2AF9               	goto	l5940
  7905  0AEF  0853               	movf	_doubleTap_state,w	;volatile
  7906  0AF0  1D03               	btfss	3,2
  7907  0AF1  2AF9               	goto	l5940
  7908                           
  7909                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7910  0AF2  3000               	movlw	0
  7911  0AF3  0021               	movlb	1	; select bank1
  7912  0AF4  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7913  0AF5                     L4:	
  7914  0AF5  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7915  0AF6                     L5:	
  7916  0AF6  3192  22AC  318A   	fcall	_setSwitchBypassState
  7917  0AF9                     l5940:	
  7918                           
  7919                           ;SwitchBypass.c: 115: }
  7920                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7921  0AF9  0020               	movlb	0	; select bank0
  7922  0AFA  0C69               	rrf	_switchBypass_state,w
  7923  0AFB  0022               	movlb	2	; select bank2
  7924  0AFC  1C03               	skipc
  7925  0AFD  110D               	bcf	13,2	;volatile
  7926  0AFE  1803               	skipnc
  7927  0AFF  150D               	bsf	13,2	;volatile
  7928                           
  7929                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7930  0B00  3000               	movlw	0
  7931  0B01  0021               	movlb	1	; select bank1
  7932  0B02  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7933  0B03  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7934  0B04  319E  2609  318A   	fcall	_setFeedbackState
  7935                           
  7936                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7937  0B07  3000               	movlw	0
  7938  0B08  0021               	movlb	1	; select bank1
  7939  0B09  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7940  0B0A  00B3               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7941  0B0B  319F  2794         	fcall	_setDoublePressState
  7942                           
  7943                           ;SwitchBypass.c: 122: feedback_start = 0;
  7944  0B0D  0020               	movlb	0	; select bank0
  7945  0B0E  01D4               	clrf	_feedback_start
  7946                           
  7947                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7948  0B0F  0022               	movlb	2	; select bank2
  7949  0B10  01DC               	clrf	_bypass_turning_on^(0+256)
  7950                           
  7951                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7952  0B11  0023               	movlb	3	; select bank3
  7953  0B12  01DC               	clrf	_switchBypass_toggle^(0+384)
  7954  0B13  01DD               	clrf	(_switchBypass_toggle+1)^(0+384)
  7955                           
  7956                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7957  0B14  3001               	movlw	1
  7958  0B15  00E6               	movwf	_switchBypass_up^(0+384)
  7959  0B16  3000               	movlw	0
  7960  0B17  00E7               	movwf	(_switchBypass_up^(0+384)+1)
  7961                           
  7962                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7963  0B18  3019               	movlw	25
  7964  0B19  0022               	movlb	2	; select bank2
  7965  0B1A  00D9               	movwf	_switchBypass_pressed^(0+256)
  7966  0B1B  3000               	movlw	0
  7967  0B1C  00DA               	movwf	(_switchBypass_pressed^(0+256)+1)
  7968  0B1D  0008               	return
  7969  0B1E                     __end_of_updateSwitchBypass:	
  7970                           
  7971                           	psect	text9
  7972  1E09                     __ptext9:	
  7973 ;; *************** function _setFeedbackState *****************
  7974 ;; Defined at:
  7975 ;;		line 151 in file "SwitchBypass.c"
  7976 ;; Parameters:    Size  Location     Type
  7977 ;;  f_state         2    0[BANK1 ] int 
  7978 ;; Auto vars:     Size  Location     Type
  7979 ;;		None
  7980 ;; Return value:  Size  Location     Type
  7981 ;;                  1    wreg      void 
  7982 ;; Registers used:
  7983 ;;		wreg, status,0
  7984 ;; Tracked objects:
  7985 ;;		On entry : 0/0
  7986 ;;		On exit  : 0/0
  7987 ;;		Unchanged: 0/0
  7988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7989 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7991 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7992 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7993 ;;Total ram usage:        4 bytes
  7994 ;; Hardware stack levels used:    1
  7995 ;; Hardware stack levels required when called:    3
  7996 ;; This function calls:
  7997 ;;		Nothing
  7998 ;; This function is called by:
  7999 ;;		_updateSwitchBypass
  8000 ;; This function uses a non-reentrant model
  8001 ;;
  8002                           
  8003                           
  8004                           ;psect for function _setFeedbackState
  8005  1E09                     _setFeedbackState:	
  8006                           
  8007                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8008                           
  8009                           ;incstack = 0
  8010                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8011  1E09  0020               	movlb	0	; select bank0
  8012  1E0A  0866               	movf	_feedback_state,w	;volatile
  8013  1E0B  0021               	movlb	1	; select bank1
  8014  1E0C  00A2               	movwf	??_setFeedbackState^(0+128)
  8015  1E0D  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  8016  1E0E  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  8017  1E0F  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  8018  1E10  1D03               	skipz
  8019  1E11  2E14               	goto	u5545
  8020  1E12  0820               	movf	setFeedbackState@f_state^(0+128),w
  8021  1E13  0622               	xorwf	??_setFeedbackState^(0+128),w
  8022  1E14                     u5545:	
  8023  1E14  1903               	btfsc	3,2
  8024  1E15  0008               	return
  8025                           
  8026                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8027  1E16  0820               	movf	setFeedbackState@f_state^(0+128),w
  8028  1E17  00A2               	movwf	??_setFeedbackState^(0+128)
  8029  1E18  0822               	movf	??_setFeedbackState^(0+128),w
  8030  1E19  0020               	movlb	0	; select bank0
  8031  1E1A  00E6               	movwf	_feedback_state	;volatile
  8032                           
  8033                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8034  1E1B  0021               	movlb	1	; select bank1
  8035  1E1C  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  8036  1E1D  0022               	movlb	2	; select bank2
  8037  1E1E  1C03               	skipc
  8038  1E1F  118D               	bcf	13,3	;volatile
  8039  1E20  1803               	skipnc
  8040  1E21  158D               	bsf	13,3	;volatile
  8041  1E22  0008               	return
  8042  1E23                     __end_of_setFeedbackState:	
  8043                           
  8044                           	psect	text10
  8045  1F94                     __ptext10:	
  8046 ;; *************** function _setDoublePressState *****************
  8047 ;; Defined at:
  8048 ;;		line 20 in file "preset_programming.c"
  8049 ;; Parameters:    Size  Location     Type
  8050 ;;  f_state         2   18[BANK1 ] int 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      void 
  8055 ;; Registers used:
  8056 ;;		wreg, status,2, status,0, pclath, cstack
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8062 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8064 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8065 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8066 ;;Total ram usage:        4 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    5
  8069 ;; This function calls:
  8070 ;;		_wait_ms
  8071 ;; This function is called by:
  8072 ;;		_updateSwitchBypass
  8073 ;;		_updateSwitchTap
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           
  8078                           ;psect for function _setDoublePressState
  8079  1F94                     _setDoublePressState:	
  8080                           
  8081                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  8082                           
  8083                           ;incstack = 0
  8084                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  8085  1F94  0020               	movlb	0	; select bank0
  8086  1F95  0853               	movf	_doubleTap_state,w	;volatile
  8087  1F96  0021               	movlb	1	; select bank1
  8088  1F97  00B4               	movwf	??_setDoublePressState^(0+128)
  8089  1F98  01B5               	clrf	(??_setDoublePressState^(0+128)+1)
  8090  1F99  0833               	movf	(setDoublePressState@f_state+1)^(0+128),w
  8091  1F9A  0635               	xorwf	(??_setDoublePressState+1)^(0+128),w
  8092  1F9B  1D03               	skipz
  8093  1F9C  2F9F               	goto	u5555
  8094  1F9D  0832               	movf	setDoublePressState@f_state^(0+128),w
  8095  1F9E  0634               	xorwf	??_setDoublePressState^(0+128),w
  8096  1F9F                     u5555:	
  8097  1F9F  1903               	btfsc	3,2
  8098  1FA0  0008               	return
  8099                           
  8100                           ;preset_programming.c: 22: doubleTap_state = f_state;
  8101  1FA1  0832               	movf	setDoublePressState@f_state^(0+128),w
  8102  1FA2  00B4               	movwf	??_setDoublePressState^(0+128)
  8103  1FA3  0834               	movf	??_setDoublePressState^(0+128),w
  8104  1FA4  0020               	movlb	0	; select bank0
  8105  1FA5  00D3               	movwf	_doubleTap_state	;volatile
  8106                           
  8107                           ;preset_programming.c: 23: if (f_state == 1) {
  8108  1FA6  0021               	movlb	1	; select bank1
  8109  1FA7  0332               	decf	setDoublePressState@f_state^(0+128),w
  8110  1FA8  0433               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  8111  1FA9  1D03               	btfss	3,2
  8112  1FAA  2FB0               	goto	l5472
  8113                           
  8114                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  8115  1FAB  0022               	movlb	2	; select bank2
  8116  1FAC  120D               	bcf	13,4	;volatile
  8117                           
  8118                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  8119  1FAD  110D               	bcf	13,2	;volatile
  8120                           
  8121                           ;preset_programming.c: 26: LATBbits.LATB5 = 0;
  8122  1FAE  128D               	bcf	13,5	;volatile
  8123                           
  8124                           ;preset_programming.c: 27: LATBbits.LATB3 = 0;
  8125  1FAF  118D               	bcf	13,3	;volatile
  8126  1FB0                     l5472:	
  8127                           
  8128                           ;preset_programming.c: 28: }
  8129                           ;preset_programming.c: 30: LATBbits.LATB1 = f_state;
  8130  1FB0  0021               	movlb	1	; select bank1
  8131  1FB1  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  8132  1FB2  0022               	movlb	2	; select bank2
  8133  1FB3  1C03               	skipc
  8134  1FB4  108D               	bcf	13,1	;volatile
  8135  1FB5  1803               	skipnc
  8136  1FB6  148D               	bsf	13,1	;volatile
  8137                           
  8138                           ;preset_programming.c: 31: LATBbits.LATB0 = f_state;
  8139  1FB7  0021               	movlb	1	; select bank1
  8140  1FB8  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  8141  1FB9  0022               	movlb	2	; select bank2
  8142  1FBA  1C03               	skipc
  8143  1FBB  100D               	bcf	13,0	;volatile
  8144  1FBC  1803               	skipnc
  8145  1FBD  140D               	bsf	13,0	;volatile
  8146                           
  8147                           ;preset_programming.c: 33: wait_ms(20);
  8148  1FBE  3014               	movlw	20
  8149  1FBF  0021               	movlb	1	; select bank1
  8150  1FC0  00AC               	movwf	wait_ms@timeSec^(0+128)
  8151  1FC1  3000               	movlw	0
  8152  1FC2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8153  1FC3  319F  2762         	fcall	_wait_ms
  8154  1FC5  0008               	return
  8155  1FC6                     __end_of_setDoublePressState:	
  8156                           
  8157                           	psect	text11
  8158  1EA8                     __ptext11:	
  8159 ;; *************** function _showBootSequence *****************
  8160 ;; Defined at:
  8161 ;;		line 86 in file "LEDs.c"
  8162 ;; Parameters:    Size  Location     Type
  8163 ;;		None
  8164 ;; Auto vars:     Size  Location     Type
  8165 ;;		None
  8166 ;; Return value:  Size  Location     Type
  8167 ;;                  1    wreg      void 
  8168 ;; Registers used:
  8169 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8170 ;; Tracked objects:
  8171 ;;		On entry : 0/0
  8172 ;;		On exit  : 0/0
  8173 ;;		Unchanged: 0/0
  8174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8177 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8178 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8179 ;;Total ram usage:        1 bytes
  8180 ;; Hardware stack levels used:    1
  8181 ;; Hardware stack levels required when called:    6
  8182 ;; This function calls:
  8183 ;;		_getCurrentLEDState
  8184 ;;		_restoreLEDState
  8185 ;;		_solidring_tactiles
  8186 ;;		_star_tactiles
  8187 ;; This function is called by:
  8188 ;;		_main
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           
  8193                           ;psect for function _showBootSequence
  8194  1EA8                     _showBootSequence:	
  8195                           
  8196                           ;LEDs.c: 87: getCurrentLEDState();
  8197                           
  8198                           ;incstack = 0
  8199                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8200  1EA8  319D  25F0  319E   	fcall	_getCurrentLEDState
  8201                           
  8202                           ;LEDs.c: 88: suspend_blink = 1;
  8203  1EAB  3001               	movlw	1
  8204  1EAC  0021               	movlb	1	; select bank1
  8205  1EAD  00B9               	movwf	??_showBootSequence^(0+128)
  8206  1EAE  0839               	movf	??_showBootSequence^(0+128),w
  8207  1EAF  0020               	movlb	0	; select bank0
  8208  1EB0  00D6               	movwf	_suspend_blink	;volatile
  8209                           
  8210                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8211  1EB1  0022               	movlb	2	; select bank2
  8212  1EB2  120D               	bcf	13,4	;volatile
  8213                           
  8214                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8215  1EB3  110D               	bcf	13,2	;volatile
  8216                           
  8217                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8218  1EB4  128D               	bcf	13,5	;volatile
  8219                           
  8220                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8221  1EB5  118D               	bcf	13,3	;volatile
  8222                           
  8223                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8224  1EB6  100D               	bcf	13,0	;volatile
  8225                           
  8226                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8227  1EB7  108D               	bcf	13,1	;volatile
  8228                           
  8229                           ;LEDs.c: 113: star_tactiles(0);
  8230  1EB8  3000               	movlw	0
  8231  1EB9  3194  24ED  319E   	fcall	_star_tactiles
  8232                           
  8233                           ;LEDs.c: 114: star_tactiles(0);
  8234  1EBC  3000               	movlw	0
  8235  1EBD  3194  24ED  319E   	fcall	_star_tactiles
  8236                           
  8237                           ;LEDs.c: 115: star_tactiles(1);
  8238  1EC0  3001               	movlw	1
  8239  1EC1  3194  24ED  319E   	fcall	_star_tactiles
  8240                           
  8241                           ;LEDs.c: 116: star_tactiles(1);
  8242  1EC4  3001               	movlw	1
  8243  1EC5  3194  24ED  319E   	fcall	_star_tactiles
  8244                           
  8245                           ;LEDs.c: 118: solidring_tactiles();
  8246  1EC8  3191  211A  319E   	fcall	_solidring_tactiles
  8247                           
  8248                           ;LEDs.c: 119: solidring_tactiles();
  8249  1ECB  3191  211A  319E   	fcall	_solidring_tactiles
  8250                           
  8251                           ;LEDs.c: 122: suspend_blink = 0;
  8252  1ECE  0020               	movlb	0	; select bank0
  8253  1ECF  01D6               	clrf	_suspend_blink	;volatile
  8254                           
  8255                           ;LEDs.c: 123: restoreLEDState();
  8256  1ED0  319E  2623         	fcall	_restoreLEDState
  8257  1ED2  0008               	return
  8258  1ED3                     __end_of_showBootSequence:	
  8259                           
  8260                           	psect	text12
  8261  14ED                     __ptext12:	
  8262 ;; *************** function _star_tactiles *****************
  8263 ;; Defined at:
  8264 ;;		line 194 in file "LEDs.c"
  8265 ;; Parameters:    Size  Location     Type
  8266 ;;  reverse         1    wreg     unsigned char 
  8267 ;; Auto vars:     Size  Location     Type
  8268 ;;  reverse         1   20[BANK1 ] unsigned char 
  8269 ;;  iLed            2   23[BANK1 ] int 
  8270 ;;  iLed            2   21[BANK1 ] int 
  8271 ;; Return value:  Size  Location     Type
  8272 ;;                  1    wreg      void 
  8273 ;; Registers used:
  8274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8281 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8282 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8283 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8284 ;;Total ram usage:        7 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    5
  8287 ;; This function calls:
  8288 ;;		_set_leds_bottom
  8289 ;;		_set_leds_top
  8290 ;;		_wait_ms
  8291 ;; This function is called by:
  8292 ;;		_showBootSequence
  8293 ;; This function uses a non-reentrant model
  8294 ;;
  8295                           
  8296                           
  8297                           ;psect for function _star_tactiles
  8298  14ED                     _star_tactiles:	
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8302                           ;star_tactiles@reverse stored from wreg
  8303  14ED  0021               	movlb	1	; select bank1
  8304  14EE  00B4               	movwf	star_tactiles@reverse^(0+128)
  8305                           
  8306                           ;LEDs.c: 195: if (reverse == 1) {
  8307  14EF  0334               	decf	star_tactiles@reverse^(0+128),w
  8308  14F0  1D03               	btfss	3,2
  8309  14F1  2D22               	goto	l5398
  8310                           
  8311                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8312  14F2  3005               	movlw	5
  8313  14F3  00B5               	movwf	star_tactiles@iLed^(0+128)
  8314  14F4  3000               	movlw	0
  8315  14F5  00B6               	movwf	(star_tactiles@iLed^(0+128)+1)
  8316  14F6                     L6:	
  8317  14F6  1BB6               	btfsc	(star_tactiles@iLed+1)^(0+128),7
  8318  14F7  0008               	return
  8319                           
  8320                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8321  14F8  0836               	movf	(star_tactiles@iLed+1)^(0+128),w
  8322  14F9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8323  14FA  0835               	movf	star_tactiles@iLed^(0+128),w
  8324  14FB  00A0               	movwf	set_leds_top@x^(0+128)
  8325  14FC  3001               	movlw	1
  8326  14FD  00A2               	movwf	set_leds_top@ledState^(0+128)
  8327  14FE  3000               	movlw	0
  8328  14FF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8329  1500  3194  2434  3194   	fcall	_set_leds_top
  8330                           
  8331                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8332  1503  0021               	movlb	1	; select bank1
  8333  1504  0935               	comf	star_tactiles@iLed^(0+128),w
  8334  1505  00B2               	movwf	??_star_tactiles^(0+128)
  8335  1506  0936               	comf	(star_tactiles@iLed+1)^(0+128),w
  8336  1507  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8337  1508  0AB2               	incf	??_star_tactiles^(0+128),f
  8338  1509  1903               	skipnz
  8339  150A  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8340  150B  0832               	movf	??_star_tactiles^(0+128),w
  8341  150C  3E06               	addlw	6
  8342  150D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8343  150E  3000               	movlw	0
  8344  150F  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8345  1510  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8346  1511  3190  2028  3194   	fcall	_set_leds_bottom
  8347                           
  8348                           ;LEDs.c: 199: wait_ms(5);
  8349  1514  3005               	movlw	5
  8350  1515  0021               	movlb	1	; select bank1
  8351  1516  00AC               	movwf	wait_ms@timeSec^(0+128)
  8352  1517  3000               	movlw	0
  8353  1518  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8354  1519  319F  2762  3194   	fcall	_wait_ms
  8355  151C  30FF               	movlw	255
  8356  151D  0021               	movlb	1	; select bank1
  8357  151E  07B5               	addwf	star_tactiles@iLed^(0+128),f
  8358  151F  30FF               	movlw	255
  8359  1520  3DB6               	addwfc	(star_tactiles@iLed+1)^(0+128),f
  8360  1521  2CF6               	goto	L6
  8361  1522                     l5398:	
  8362                           ;LEDs.c: 200: }
  8363                           ;LEDs.c: 201: } else {
  8364                           
  8365                           
  8366                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8367  1522  3001               	movlw	1
  8368  1523  00B7               	movwf	star_tactiles@iLed_1453^(0+128)
  8369  1524  3000               	movlw	0
  8370  1525  00B8               	movwf	(star_tactiles@iLed_1453^(0+128)+1)
  8371  1526                     L7:	
  8372  1526  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8373  1527  3A80               	xorlw	128
  8374  1528  00B2               	movwf	??_star_tactiles^(0+128)
  8375  1529  3080               	movlw	128
  8376  152A  0232               	subwf	??_star_tactiles^(0+128),w
  8377  152B  1D03               	skipz
  8378  152C  2D2F               	goto	u5495
  8379  152D  3007               	movlw	7
  8380  152E  0237               	subwf	star_tactiles@iLed_1453^(0+128),w
  8381  152F                     u5495:	
  8382  152F  1803               	btfsc	3,0
  8383  1530  0008               	return
  8384                           
  8385                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8386  1531  0021               	movlb	1	; select bank1
  8387  1532  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8388  1533  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8389  1534  0837               	movf	star_tactiles@iLed_1453^(0+128),w
  8390  1535  00A0               	movwf	set_leds_top@x^(0+128)
  8391  1536  3001               	movlw	1
  8392  1537  00A2               	movwf	set_leds_top@ledState^(0+128)
  8393  1538  3000               	movlw	0
  8394  1539  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8395  153A  3194  2434  3194   	fcall	_set_leds_top
  8396                           
  8397                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8398  153D  0021               	movlb	1	; select bank1
  8399  153E  0937               	comf	star_tactiles@iLed_1453^(0+128),w
  8400  153F  00B2               	movwf	??_star_tactiles^(0+128)
  8401  1540  0938               	comf	(star_tactiles@iLed_1453+1)^(0+128),w
  8402  1541  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8403  1542  0AB2               	incf	??_star_tactiles^(0+128),f
  8404  1543  1903               	skipnz
  8405  1544  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8406  1545  0832               	movf	??_star_tactiles^(0+128),w
  8407  1546  3E06               	addlw	6
  8408  1547  00A0               	movwf	set_leds_bottom@x^(0+128)
  8409  1548  3000               	movlw	0
  8410  1549  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8411  154A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8412  154B  3190  2028  3194   	fcall	_set_leds_bottom
  8413                           
  8414                           ;LEDs.c: 205: wait_ms(5);
  8415  154E  3005               	movlw	5
  8416  154F  0021               	movlb	1	; select bank1
  8417  1550  00AC               	movwf	wait_ms@timeSec^(0+128)
  8418  1551  3000               	movlw	0
  8419  1552  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8420  1553  319F  2762  3194   	fcall	_wait_ms
  8421  1556  3001               	movlw	1
  8422  1557  0021               	movlb	1	; select bank1
  8423  1558  07B7               	addwf	star_tactiles@iLed_1453^(0+128),f
  8424  1559  3000               	movlw	0
  8425  155A  3DB8               	addwfc	(star_tactiles@iLed_1453+1)^(0+128),f
  8426  155B  2D26               	goto	L7
  8427  155C                     __end_of_star_tactiles:	
  8428                           
  8429                           	psect	text13
  8430  111A                     __ptext13:	
  8431 ;; *************** function _solidring_tactiles *****************
  8432 ;; Defined at:
  8433 ;;		line 223 in file "LEDs.c"
  8434 ;; Parameters:    Size  Location     Type
  8435 ;;		None
  8436 ;; Auto vars:     Size  Location     Type
  8437 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8438 ;; Return value:  Size  Location     Type
  8439 ;;                  1    wreg      void 
  8440 ;; Registers used:
  8441 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8442 ;; Tracked objects:
  8443 ;;		On entry : 0/0
  8444 ;;		On exit  : 0/0
  8445 ;;		Unchanged: 0/0
  8446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8448 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8449 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8450 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8451 ;;Total ram usage:        3 bytes
  8452 ;; Hardware stack levels used:    1
  8453 ;; Hardware stack levels required when called:    5
  8454 ;; This function calls:
  8455 ;;		_set_leds_bottom
  8456 ;;		_set_leds_top
  8457 ;;		_wait_ms
  8458 ;; This function is called by:
  8459 ;;		_showBootSequence
  8460 ;;		_showSave
  8461 ;; This function uses a non-reentrant model
  8462 ;;
  8463                           
  8464                           
  8465                           ;psect for function _solidring_tactiles
  8466  111A                     _solidring_tactiles:	
  8467                           
  8468                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8469                           
  8470                           ;incstack = 0
  8471                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8472  111A  301E               	movlw	30
  8473  111B  0021               	movlb	1	; select bank1
  8474  111C  00B2               	movwf	??_solidring_tactiles^(0+128)
  8475  111D  0832               	movf	??_solidring_tactiles^(0+128),w
  8476  111E  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8477                           
  8478                           ;LEDs.c: 225: set_leds_top(100, 1);
  8479  111F  3064               	movlw	100
  8480  1120  00A0               	movwf	set_leds_top@x^(0+128)
  8481  1121  3000               	movlw	0
  8482  1122  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8483  1123  3001               	movlw	1
  8484  1124  00A2               	movwf	set_leds_top@ledState^(0+128)
  8485  1125  3000               	movlw	0
  8486  1126  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8487  1127  3194  2434  3191   	fcall	_set_leds_top
  8488                           
  8489                           ;LEDs.c: 226: set_leds_bottom(100);
  8490  112A  3064               	movlw	100
  8491  112B  0021               	movlb	1	; select bank1
  8492  112C  00A0               	movwf	set_leds_bottom@x^(0+128)
  8493  112D  3000               	movlw	0
  8494  112E  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8495  112F  3190  2028  3191   	fcall	_set_leds_bottom
  8496                           
  8497                           ;LEDs.c: 227: wait_ms(ring_delay);
  8498  1132  0021               	movlb	1	; select bank1
  8499  1133  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8500  1134  00B2               	movwf	??_solidring_tactiles^(0+128)
  8501  1135  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8502  1136  0832               	movf	??_solidring_tactiles^(0+128),w
  8503  1137  00AC               	movwf	wait_ms@timeSec^(0+128)
  8504  1138  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8505  1139  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8506  113A  319F  2762  3191   	fcall	_wait_ms
  8507                           
  8508                           ;LEDs.c: 229: set_leds_top(0, 1);
  8509  113D  3000               	movlw	0
  8510  113E  0021               	movlb	1	; select bank1
  8511  113F  00A0               	movwf	set_leds_top@x^(0+128)
  8512  1140  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8513  1141  3001               	movlw	1
  8514  1142  00A2               	movwf	set_leds_top@ledState^(0+128)
  8515  1143  3000               	movlw	0
  8516  1144  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8517  1145  3194  2434  3191   	fcall	_set_leds_top
  8518                           
  8519                           ;LEDs.c: 230: set_leds_bottom(0);
  8520  1148  3000               	movlw	0
  8521  1149  0021               	movlb	1	; select bank1
  8522  114A  00A0               	movwf	set_leds_bottom@x^(0+128)
  8523  114B  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8524  114C  3190  2028  3191   	fcall	_set_leds_bottom
  8525                           
  8526                           ;LEDs.c: 231: wait_ms(ring_delay);
  8527  114F  0021               	movlb	1	; select bank1
  8528  1150  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8529  1151  00B2               	movwf	??_solidring_tactiles^(0+128)
  8530  1152  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8531  1153  0832               	movf	??_solidring_tactiles^(0+128),w
  8532  1154  00AC               	movwf	wait_ms@timeSec^(0+128)
  8533  1155  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8534  1156  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8535  1157  319F  2762         	fcall	_wait_ms
  8536  1159  0008               	return
  8537  115A                     __end_of_solidring_tactiles:	
  8538                           
  8539                           	psect	text14
  8540  1E23                     __ptext14:	
  8541 ;; *************** function _restoreLEDState *****************
  8542 ;; Defined at:
  8543 ;;		line 89 in file "state_manager.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;		None
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, status,0
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8561 ;;Total ram usage:        0 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    3
  8564 ;; This function calls:
  8565 ;;		Nothing
  8566 ;; This function is called by:
  8567 ;;		_showBootSequence
  8568 ;;		_showError_Alternating
  8569 ;;		_show_error
  8570 ;;		_show_cancel
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           
  8575                           ;psect for function _restoreLEDState
  8576  1E23                     _restoreLEDState:	
  8577                           
  8578                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8579                           
  8580                           ;incstack = 0
  8581                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8582  1E23  0023               	movlb	3	; select bank3
  8583  1E24  0C34               	rrf	_ledState^(0+384),w
  8584  1E25  0022               	movlb	2	; select bank2
  8585  1E26  1C03               	skipc
  8586  1E27  120D               	bcf	13,4	;volatile
  8587  1E28  1803               	skipnc
  8588  1E29  160D               	bsf	13,4	;volatile
  8589                           
  8590                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8591  1E2A  0023               	movlb	3	; select bank3
  8592  1E2B  0C36               	rrf	(_ledState^(0+384)+2),w
  8593  1E2C  0022               	movlb	2	; select bank2
  8594  1E2D  1C03               	skipc
  8595  1E2E  110D               	bcf	13,2	;volatile
  8596  1E2F  1803               	skipnc
  8597  1E30  150D               	bsf	13,2	;volatile
  8598                           
  8599                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8600  1E31  0023               	movlb	3	; select bank3
  8601  1E32  0C35               	rrf	(_ledState^(0+384)+1),w
  8602  1E33  0022               	movlb	2	; select bank2
  8603  1E34  1C03               	skipc
  8604  1E35  128D               	bcf	13,5	;volatile
  8605  1E36  1803               	skipnc
  8606  1E37  168D               	bsf	13,5	;volatile
  8607                           
  8608                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8609  1E38  0023               	movlb	3	; select bank3
  8610  1E39  0C37               	rrf	(_ledState^(0+384)+3),w
  8611  1E3A  0022               	movlb	2	; select bank2
  8612  1E3B  1C03               	skipc
  8613  1E3C  118D               	bcf	13,3	;volatile
  8614  1E3D  1803               	skipnc
  8615  1E3E  158D               	bsf	13,3	;volatile
  8616  1E3F  0008               	return
  8617  1E40                     __end_of_restoreLEDState:	
  8618                           
  8619                           	psect	text15
  8620  1DF0                     __ptext15:	
  8621 ;; *************** function _getCurrentLEDState *****************
  8622 ;; Defined at:
  8623 ;;		line 83 in file "state_manager.c"
  8624 ;; Parameters:    Size  Location     Type
  8625 ;;		None
  8626 ;; Auto vars:     Size  Location     Type
  8627 ;;		None
  8628 ;; Return value:  Size  Location     Type
  8629 ;;                  1    wreg      void 
  8630 ;; Registers used:
  8631 ;;		wreg, status,2
  8632 ;; Tracked objects:
  8633 ;;		On entry : 0/0
  8634 ;;		On exit  : 0/0
  8635 ;;		Unchanged: 0/0
  8636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8641 ;;Total ram usage:        0 bytes
  8642 ;; Hardware stack levels used:    1
  8643 ;; Hardware stack levels required when called:    3
  8644 ;; This function calls:
  8645 ;;		Nothing
  8646 ;; This function is called by:
  8647 ;;		_showBootSequence
  8648 ;;		_showError_Alternating
  8649 ;;		_show_error
  8650 ;;		_show_cancel
  8651 ;; This function uses a non-reentrant model
  8652 ;;
  8653                           
  8654                           
  8655                           ;psect for function _getCurrentLEDState
  8656  1DF0                     _getCurrentLEDState:	
  8657                           
  8658                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8659                           
  8660                           ;incstack = 0
  8661                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8662  1DF0  3000               	movlw	0
  8663  1DF1  0022               	movlb	2	; select bank2
  8664  1DF2  1A0D               	btfsc	13,4	;volatile
  8665  1DF3  3001               	movlw	1
  8666  1DF4  0023               	movlb	3	; select bank3
  8667  1DF5  00B4               	movwf	_ledState^(0+384)
  8668                           
  8669                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8670  1DF6  3000               	movlw	0
  8671  1DF7  0022               	movlb	2	; select bank2
  8672  1DF8  190D               	btfsc	13,2	;volatile
  8673  1DF9  3001               	movlw	1
  8674  1DFA  0023               	movlb	3	; select bank3
  8675  1DFB  00B6               	movwf	(_ledState^(0+384)+2)
  8676                           
  8677                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8678  1DFC  3000               	movlw	0
  8679  1DFD  0022               	movlb	2	; select bank2
  8680  1DFE  1A8D               	btfsc	13,5	;volatile
  8681  1DFF  3001               	movlw	1
  8682  1E00  0023               	movlb	3	; select bank3
  8683  1E01  00B5               	movwf	(_ledState^(0+384)+1)
  8684                           
  8685                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8686  1E02  3000               	movlw	0
  8687  1E03  0022               	movlb	2	; select bank2
  8688  1E04  198D               	btfsc	13,3	;volatile
  8689  1E05  3001               	movlw	1
  8690  1E06  0023               	movlb	3	; select bank3
  8691  1E07  00B7               	movwf	(_ledState^(0+384)+3)
  8692  1E08  0008               	return
  8693  1E09                     __end_of_getCurrentLEDState:	
  8694                           
  8695                           	psect	text16
  8696  0979                     __ptext16:	
  8697 ;; *************** function _set_subdivision *****************
  8698 ;; Defined at:
  8699 ;;		line 77 in file "user.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  x               2   22[BANK2 ] int 
  8702 ;;  y               2   24[BANK2 ] int 
  8703 ;; Auto vars:     Size  Location     Type
  8704 ;;  scalar          3   29[BANK2 ] float 
  8705 ;;  tmpX            2   32[BANK2 ] int 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;                  2   22[BANK2 ] int 
  8708 ;; Registers used:
  8709 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8715 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8716 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8717 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8718 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8719 ;;Total ram usage:       12 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    6
  8722 ;; This function calls:
  8723 ;;		___awtoft
  8724 ;;		___ftmul
  8725 ;;		___fttol
  8726 ;;		_trunc
  8727 ;; This function is called by:
  8728 ;;		_main
  8729 ;; This function uses a non-reentrant model
  8730 ;;
  8731                           
  8732                           
  8733                           ;psect for function _set_subdivision
  8734  0979                     _set_subdivision:	
  8735                           
  8736                           ;user.c: 81: adjust_sub_delay = 0;
  8737                           
  8738                           ;incstack = 0
  8739                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8740  0979  0023               	movlb	3	; select bank3
  8741  097A  01C0               	clrf	_adjust_sub_delay^(0+384)
  8742  097B  01C1               	clrf	(_adjust_sub_delay+1)^(0+384)
  8743                           
  8744                           ;user.c: 82: int tmpX = x;
  8745  097C  0022               	movlb	2	; select bank2
  8746  097D  0837               	movf	(set_subdivision@x+1)^(0+256),w
  8747  097E  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8748  097F  0836               	movf	set_subdivision@x^(0+256),w
  8749  0980  00C0               	movwf	set_subdivision@tmpX^(0+256)
  8750                           
  8751                           ;user.c: 83: float scalar = 1.0;
  8752  0981  3000               	movlw	0
  8753  0982  00BD               	movwf	set_subdivision@scalar^(0+256)
  8754  0983  3080               	movlw	128
  8755  0984  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8756  0985  303F               	movlw	63
  8757  0986  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  8758                           
  8759                           ;user.c: 85: switch (y) {
  8760  0987  29A1               	goto	l6090
  8761  0988                     l6078:	
  8762                           ;user.c: 86: case 1:
  8763                           
  8764                           
  8765                           ;user.c: 87: scalar = 0.75;
  8766  0988  3000               	movlw	0
  8767  0989  00BD               	movwf	set_subdivision@scalar^(0+256)
  8768  098A  3040               	movlw	64
  8769  098B  2993               	goto	L9
  8770  098C                     l6080:	
  8771                           ;user.c: 89: case 2:
  8772                           
  8773                           ;user.c: 88: break;
  8774                           
  8775                           
  8776                           ;user.c: 90: scalar = 0.6666;
  8777  098C  30A6               	movlw	166
  8778  098D  00BD               	movwf	set_subdivision@scalar^(0+256)
  8779  098E  302A               	movlw	42
  8780  098F  2993               	goto	L9
  8781  0990                     l6082:	
  8782                           ;user.c: 92: case 3:
  8783                           
  8784                           ;user.c: 91: break;
  8785                           
  8786                           
  8787                           ;user.c: 93: scalar = .5;
  8788  0990  3000               	movlw	0
  8789  0991  00BD               	movwf	set_subdivision@scalar^(0+256)
  8790  0992  3000               	movlw	0
  8791  0993                     L9:	
  8792  0993  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8793  0994  303F               	movlw	63
  8794  0995  299F               	goto	L11
  8795  0996                     l6084:	
  8796                           ;user.c: 95: case 4:
  8797                           
  8798                           ;user.c: 94: break;
  8799                           
  8800                           
  8801                           ;user.c: 96: scalar = 0.3333;
  8802  0996  30A6               	movlw	166
  8803  0997  00BD               	movwf	set_subdivision@scalar^(0+256)
  8804  0998  30AA               	movlw	170
  8805  0999  299D               	goto	L12
  8806  099A                     l6086:	
  8807                           ;user.c: 98: case 5:
  8808                           
  8809                           ;user.c: 97: break;
  8810                           
  8811                           
  8812                           ;user.c: 99: scalar = 0.25;
  8813  099A  3000               	movlw	0
  8814  099B  00BD               	movwf	set_subdivision@scalar^(0+256)
  8815  099C  3080               	movlw	128
  8816  099D                     L12:	
  8817  099D  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8818  099E  303E               	movlw	62
  8819  099F                     L11:	
  8820  099F  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  8821                           
  8822                           ;user.c: 104: }
  8823                           
  8824                           ;user.c: 103: break;
  8825                           
  8826                           ;user.c: 101: case 6:
  8827                           
  8828                           ;user.c: 100: break;
  8829  09A0  29BA               	goto	l6092
  8830  09A1                     l6090:	
  8831                           
  8832                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8833                           ; Switch size 1, requested type "space"
  8834                           ; Number of cases is 1, Range of values is 0 to 0
  8835                           ; switch strategies available:
  8836                           ; Name         Instructions Cycles
  8837                           ; simple_byte            4     3 (average)
  8838                           ; direct_byte            8     6 (fixed)
  8839                           ; jumptable            260     6 (fixed)
  8840                           ;	Chosen strategy is simple_byte
  8841  09A1  0839               	movf	(set_subdivision@y+1)^(0+256),w
  8842  09A2  3A00               	xorlw	0	; case 0
  8843  09A3  1903               	skipnz
  8844  09A4  29A6               	goto	l6498
  8845  09A5  29BA               	goto	l6092
  8846  09A6                     l6498:	
  8847                           
  8848                           ; Switch size 1, requested type "space"
  8849                           ; Number of cases is 6, Range of values is 1 to 6
  8850                           ; switch strategies available:
  8851                           ; Name         Instructions Cycles
  8852                           ; simple_byte           19    10 (average)
  8853                           ; direct_byte           21     9 (fixed)
  8854                           ; jumptable            263     9 (fixed)
  8855                           ;	Chosen strategy is simple_byte
  8856  09A6  0838               	movf	set_subdivision@y^(0+256),w
  8857  09A7  3A01               	xorlw	1	; case 1
  8858  09A8  1903               	skipnz
  8859  09A9  2988               	goto	l6078
  8860  09AA  3A03               	xorlw	3	; case 2
  8861  09AB  1903               	skipnz
  8862  09AC  298C               	goto	l6080
  8863  09AD  3A01               	xorlw	1	; case 3
  8864  09AE  1903               	skipnz
  8865  09AF  2990               	goto	l6082
  8866  09B0  3A07               	xorlw	7	; case 4
  8867  09B1  1903               	skipnz
  8868  09B2  2996               	goto	l6084
  8869  09B3  3A01               	xorlw	1	; case 5
  8870  09B4  1903               	skipnz
  8871  09B5  299A               	goto	l6086
  8872  09B6  3A03               	xorlw	3	; case 6
  8873  09B7  1903               	skipnz
  8874  09B8  29BA               	goto	l6092
  8875  09B9  29BA               	goto	l6092
  8876  09BA                     l6092:	
  8877                           
  8878                           ;user.c: 106: tmpX = tmpX * scalar;
  8879  09BA  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8880  09BB  0021               	movlb	1	; select bank1
  8881  09BC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8882  09BD  0022               	movlb	2	; select bank2
  8883  09BE  0840               	movf	set_subdivision@tmpX^(0+256),w
  8884  09BF  0021               	movlb	1	; select bank1
  8885  09C0  00A8               	movwf	___awtoft@c^(0+128)
  8886  09C1  319E  2660  3189   	fcall	___awtoft
  8887  09C4  0021               	movlb	1	; select bank1
  8888  09C5  0828               	movf	?___awtoft^(0+128),w
  8889  09C6  00B8               	movwf	___ftmul@f2^(0+128)
  8890  09C7  0829               	movf	(?___awtoft+1)^(0+128),w
  8891  09C8  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  8892  09C9  082A               	movf	(?___awtoft+2)^(0+128),w
  8893  09CA  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  8894  09CB  0022               	movlb	2	; select bank2
  8895  09CC  083D               	movf	set_subdivision@scalar^(0+256),w
  8896  09CD  0021               	movlb	1	; select bank1
  8897  09CE  00B5               	movwf	___ftmul@f1^(0+128)
  8898  09CF  0022               	movlb	2	; select bank2
  8899  09D0  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  8900  09D1  0021               	movlb	1	; select bank1
  8901  09D2  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  8902  09D3  0022               	movlb	2	; select bank2
  8903  09D4  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  8904  09D5  0021               	movlb	1	; select bank1
  8905  09D6  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  8906  09D7  3188  20C5  3189   	fcall	___ftmul
  8907  09DA  0021               	movlb	1	; select bank1
  8908  09DB  0835               	movf	?___ftmul^(0+128),w
  8909  09DC  00E7               	movwf	___fttol@f1^(0+128)
  8910  09DD  0836               	movf	(?___ftmul+1)^(0+128),w
  8911  09DE  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8912  09DF  0837               	movf	(?___ftmul+2)^(0+128),w
  8913  09E0  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8914  09E1  3197  2761  3189   	fcall	___fttol
  8915  09E4  0021               	movlb	1	; select bank1
  8916  09E5  0868               	movf	(?___fttol^(0+128)+1),w
  8917  09E6  0022               	movlb	2	; select bank2
  8918  09E7  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8919  09E8  0021               	movlb	1	; select bank1
  8920  09E9  0867               	movf	?___fttol^(0+128),w
  8921  09EA  0022               	movlb	2	; select bank2
  8922  09EB  00C0               	movwf	set_subdivision@tmpX^(0+256)
  8923                           
  8924                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  8925  09EC  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8926  09ED  0021               	movlb	1	; select bank1
  8927  09EE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8928  09EF  0022               	movlb	2	; select bank2
  8929  09F0  0840               	movf	set_subdivision@tmpX^(0+256),w
  8930  09F1  0021               	movlb	1	; select bank1
  8931  09F2  00A8               	movwf	___awtoft@c^(0+128)
  8932  09F3  319E  2660  3189   	fcall	___awtoft
  8933  09F6  0021               	movlb	1	; select bank1
  8934  09F7  0828               	movf	?___awtoft^(0+128),w
  8935  09F8  0022               	movlb	2	; select bank2
  8936  09F9  00AE               	movwf	trunc@x^(0+256)
  8937  09FA  0021               	movlb	1	; select bank1
  8938  09FB  0829               	movf	(?___awtoft+1)^(0+128),w
  8939  09FC  0022               	movlb	2	; select bank2
  8940  09FD  00AF               	movwf	(trunc@x+1)^(0+256)
  8941  09FE  0021               	movlb	1	; select bank1
  8942  09FF  082A               	movf	(?___awtoft+2)^(0+128),w
  8943  0A00  0022               	movlb	2	; select bank2
  8944  0A01  00B0               	movwf	(trunc@x+2)^(0+256)
  8945  0A02  3193  23E2  3189   	fcall	_trunc
  8946  0A05  0022               	movlb	2	; select bank2
  8947  0A06  082E               	movf	?_trunc^(0+256),w
  8948  0A07  00BA               	movwf	??_set_subdivision^(0+256)
  8949  0A08  082F               	movf	(?_trunc+1)^(0+256),w
  8950  0A09  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  8951  0A0A  0830               	movf	(?_trunc+2)^(0+256),w
  8952  0A0B  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  8953  0A0C  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8954  0A0D  0021               	movlb	1	; select bank1
  8955  0A0E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8956  0A0F  0022               	movlb	2	; select bank2
  8957  0A10  0840               	movf	set_subdivision@tmpX^(0+256),w
  8958  0A11  0021               	movlb	1	; select bank1
  8959  0A12  00A8               	movwf	___awtoft@c^(0+128)
  8960  0A13  319E  2660  3189   	fcall	___awtoft
  8961  0A16  0021               	movlb	1	; select bank1
  8962  0A17  082A               	movf	(?___awtoft+2)^(0+128),w
  8963  0A18  0022               	movlb	2	; select bank2
  8964  0A19  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  8965  0A1A  1D03               	skipz
  8966  0A1B  2A26               	goto	u6855
  8967  0A1C  0021               	movlb	1	; select bank1
  8968  0A1D  0829               	movf	(?___awtoft+1)^(0+128),w
  8969  0A1E  0022               	movlb	2	; select bank2
  8970  0A1F  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  8971  0A20  1D03               	skipz
  8972  0A21  2A26               	goto	u6855
  8973  0A22  0021               	movlb	1	; select bank1
  8974  0A23  0828               	movf	?___awtoft^(0+128),w
  8975  0A24  0022               	movlb	2	; select bank2
  8976  0A25  063A               	xorwf	??_set_subdivision^(0+256),w
  8977  0A26                     u6855:	
  8978  0A26  1903               	skipnz
  8979  0A27  2A2D               	goto	l528
  8980                           
  8981                           ;user.c: 109: adjust_sub_delay = 1;
  8982  0A28  3001               	movlw	1
  8983  0A29  0023               	movlb	3	; select bank3
  8984  0A2A  00C0               	movwf	_adjust_sub_delay^(0+384)
  8985  0A2B  3000               	movlw	0
  8986  0A2C  00C1               	movwf	(_adjust_sub_delay^(0+384)+1)
  8987  0A2D                     l528:	
  8988                           
  8989                           ;user.c: 110: }
  8990                           ;user.c: 112: return tmpX;
  8991  0A2D  0022               	movlb	2	; select bank2
  8992  0A2E  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8993  0A2F  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  8994  0A30  0840               	movf	set_subdivision@tmpX^(0+256),w
  8995  0A31  00B6               	movwf	?_set_subdivision^(0+256)
  8996  0A32  0008               	return
  8997  0A33                     __end_of_set_subdivision:	
  8998                           
  8999                           	psect	text17
  9000  13E2                     __ptext17:	
  9001 ;; *************** function _trunc *****************
  9002 ;; Defined at:
  9003 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  9004 ;; Parameters:    Size  Location     Type
  9005 ;;  x               3   14[BANK2 ] int 
  9006 ;; Auto vars:     Size  Location     Type
  9007 ;;  i               3   17[BANK2 ] int 
  9008 ;;  expon           2   20[BANK2 ] int 
  9009 ;; Return value:  Size  Location     Type
  9010 ;;                  3   14[BANK2 ] int 
  9011 ;; Registers used:
  9012 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9013 ;; Tracked objects:
  9014 ;;		On entry : 0/0
  9015 ;;		On exit  : 0/0
  9016 ;;		Unchanged: 0/0
  9017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9018 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9019 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9020 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9021 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9022 ;;Total ram usage:        9 bytes
  9023 ;; Hardware stack levels used:    1
  9024 ;; Hardware stack levels required when called:    5
  9025 ;; This function calls:
  9026 ;;		___altoft
  9027 ;;		___fttol
  9028 ;;		_frexp
  9029 ;; This function is called by:
  9030 ;;		_set_subdivision
  9031 ;; This function uses a non-reentrant model
  9032 ;;
  9033                           
  9034                           
  9035                           ;psect for function _trunc
  9036  13E2                     _trunc:	
  9037                           
  9038                           ;incstack = 0
  9039                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9040  13E2  0022               	movlb	2	; select bank2
  9041  13E3  082E               	movf	trunc@x^(0+256),w
  9042  13E4  0021               	movlb	1	; select bank1
  9043  13E5  00A0               	movwf	frexp@value^(0+128)
  9044  13E6  0022               	movlb	2	; select bank2
  9045  13E7  082F               	movf	(trunc@x+1)^(0+256),w
  9046  13E8  0021               	movlb	1	; select bank1
  9047  13E9  00A1               	movwf	(frexp@value+1)^(0+128)
  9048  13EA  0022               	movlb	2	; select bank2
  9049  13EB  0830               	movf	(trunc@x+2)^(0+256),w
  9050  13EC  0021               	movlb	1	; select bank1
  9051  13ED  00A2               	movwf	(frexp@value+2)^(0+128)
  9052  13EE  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  9053  13EF  00EF               	movwf	??_trunc^(0+128)
  9054  13F0  086F               	movf	??_trunc^(0+128),w
  9055  13F1  00A3               	movwf	frexp@eptr^(0+128)
  9056  13F2  319F  27C6  3193   	fcall	_frexp
  9057  13F5  0022               	movlb	2	; select bank2
  9058  13F6  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  9059  13F7  2BFF               	goto	l5348
  9060  13F8  3000               	movlw	0
  9061  13F9  00AE               	movwf	?_trunc^(0+256)
  9062  13FA  3000               	movlw	0
  9063  13FB  00AF               	movwf	(?_trunc+1)^(0+256)
  9064  13FC  3000               	movlw	0
  9065  13FD  00B0               	movwf	(?_trunc+2)^(0+256)
  9066  13FE  0008               	return
  9067  13FF                     l5348:	
  9068  13FF  3000               	movlw	0
  9069  1400  0235               	subwf	(trunc@expon+1)^(0+256),w
  9070  1401  3015               	movlw	21
  9071  1402  1903               	skipnz
  9072  1403  0234               	subwf	trunc@expon^(0+256),w
  9073  1404  1803               	btfsc	3,0
  9074  1405  0008               	return
  9075  1406  082E               	movf	trunc@x^(0+256),w
  9076  1407  0021               	movlb	1	; select bank1
  9077  1408  00E7               	movwf	___fttol@f1^(0+128)
  9078  1409  0022               	movlb	2	; select bank2
  9079  140A  082F               	movf	(trunc@x+1)^(0+256),w
  9080  140B  0021               	movlb	1	; select bank1
  9081  140C  00E8               	movwf	(___fttol@f1+1)^(0+128)
  9082  140D  0022               	movlb	2	; select bank2
  9083  140E  0830               	movf	(trunc@x+2)^(0+256),w
  9084  140F  0021               	movlb	1	; select bank1
  9085  1410  00E9               	movwf	(___fttol@f1+2)^(0+128)
  9086  1411  3197  2761  3193   	fcall	___fttol
  9087  1414  0021               	movlb	1	; select bank1
  9088  1415  086A               	movf	(?___fttol+3)^(0+128),w
  9089  1416  0022               	movlb	2	; select bank2
  9090  1417  00A9               	movwf	(___altoft@c+3)^(0+256)
  9091  1418  0021               	movlb	1	; select bank1
  9092  1419  0869               	movf	(?___fttol+2)^(0+128),w
  9093  141A  0022               	movlb	2	; select bank2
  9094  141B  00A8               	movwf	(___altoft@c+2)^(0+256)
  9095  141C  0021               	movlb	1	; select bank1
  9096  141D  0868               	movf	(?___fttol+1)^(0+128),w
  9097  141E  0022               	movlb	2	; select bank2
  9098  141F  00A7               	movwf	(___altoft@c+1)^(0+256)
  9099  1420  0021               	movlb	1	; select bank1
  9100  1421  0867               	movf	?___fttol^(0+128),w
  9101  1422  0022               	movlb	2	; select bank2
  9102  1423  00A6               	movwf	___altoft@c^(0+256)
  9103  1424  3192  22F6         	fcall	___altoft
  9104  1426  0022               	movlb	2	; select bank2
  9105  1427  0826               	movf	?___altoft^(0+256),w
  9106  1428  00B1               	movwf	trunc@i^(0+256)
  9107  1429  0827               	movf	(?___altoft+1)^(0+256),w
  9108  142A  00B2               	movwf	(trunc@i+1)^(0+256)
  9109  142B  0828               	movf	(?___altoft+2)^(0+256),w
  9110  142C  00B3               	movwf	(trunc@i+2)^(0+256)
  9111  142D  0831               	movf	trunc@i^(0+256),w
  9112  142E  00AE               	movwf	?_trunc^(0+256)
  9113  142F  0832               	movf	(trunc@i+1)^(0+256),w
  9114  1430  00AF               	movwf	(?_trunc+1)^(0+256)
  9115  1431  0833               	movf	(trunc@i+2)^(0+256),w
  9116  1432  00B0               	movwf	(?_trunc+2)^(0+256)
  9117  1433  0008               	return
  9118  1434                     __end_of_trunc:	
  9119                           
  9120                           	psect	text18
  9121  1FC6                     __ptext18:	
  9122 ;; *************** function _frexp *****************
  9123 ;; Defined at:
  9124 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  value           3    0[BANK1 ] int 
  9127 ;;  eptr            1    3[BANK1 ] PTR int 
  9128 ;;		 -> trunc@expon(2), 
  9129 ;; Auto vars:     Size  Location     Type
  9130 ;;		None
  9131 ;; Return value:  Size  Location     Type
  9132 ;;                  3    0[BANK1 ] PTR int 
  9133 ;; Registers used:
  9134 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9135 ;; Tracked objects:
  9136 ;;		On entry : 0/0
  9137 ;;		On exit  : 0/0
  9138 ;;		Unchanged: 0/0
  9139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9140 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9142 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9143 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9144 ;;Total ram usage:        6 bytes
  9145 ;; Hardware stack levels used:    1
  9146 ;; Hardware stack levels required when called:    3
  9147 ;; This function calls:
  9148 ;;		Nothing
  9149 ;; This function is called by:
  9150 ;;		_trunc
  9151 ;; This function uses a non-reentrant model
  9152 ;;
  9153                           
  9154                           
  9155                           ;psect for function _frexp
  9156  1FC6                     _frexp:	
  9157                           
  9158                           ;incstack = 0
  9159                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  9160  1FC6  0021               	movlb	1	; select bank1
  9161  1FC7  0822               	movf	(frexp@value+2)^(0+128),w
  9162  1FC8  0421               	iorwf	(frexp@value+1)^(0+128),w
  9163  1FC9  0420               	iorwf	frexp@value^(0+128),w
  9164  1FCA  1D03               	skipz
  9165  1FCB  2FD4               	goto	l5302
  9166  1FCC  0823               	movf	frexp@eptr^(0+128),w
  9167  1FCD  0086               	movwf	6
  9168  1FCE  3001               	movlw	1	; select bank2/3
  9169  1FCF  0087               	movwf	7
  9170  1FD0  3000               	movlw	0
  9171  1FD1  3FC0               	movwi [0]fsr1
  9172  1FD2  3FC1               	movwi [1]fsr1
  9173                           
  9174                           ;	Return value of _frexp is never used
  9175  1FD3  0008               	return
  9176  1FD4                     l5302:	
  9177  1FD4  0822               	movf	(frexp@value^(0+128)+2),w
  9178  1FD5  397F               	andlw	127
  9179  1FD6  00A4               	movwf	??_frexp^(0+128)
  9180  1FD7  01A5               	clrf	(??_frexp^(0+128)+1)
  9181  1FD8  35A4               	lslf	??_frexp^(0+128),f
  9182  1FD9  0DA5               	rlf	(??_frexp^(0+128)+1),f
  9183  1FDA  0823               	movf	frexp@eptr^(0+128),w
  9184  1FDB  0086               	movwf	6
  9185  1FDC  3001               	movlw	1	; select bank2/3
  9186  1FDD  0087               	movwf	7
  9187  1FDE  0824               	movf	??_frexp^(0+128),w
  9188  1FDF  3FC0               	movwi [0]fsr1
  9189  1FE0  0825               	movf	(??_frexp+1)^(0+128),w
  9190  1FE1  3FC1               	movwi [1]fsr1
  9191  1FE2  0D21               	rlf	(frexp@value^(0+128)+1),w
  9192  1FE3  0D21               	rlf	(frexp@value^(0+128)+1),w
  9193  1FE4  3901               	andlw	1
  9194  1FE5  00A4               	movwf	??_frexp^(0+128)
  9195  1FE6  01A5               	clrf	(??_frexp^(0+128)+1)
  9196  1FE7  0823               	movf	frexp@eptr^(0+128),w
  9197  1FE8  0086               	movwf	6
  9198  1FE9  3001               	movlw	1	; select bank2/3
  9199  1FEA  0087               	movwf	7
  9200  1FEB  0824               	movf	??_frexp^(0+128),w
  9201  1FEC  0481               	iorwf	1,f
  9202  1FED  3141               	addfsr 1,1
  9203  1FEE  0825               	movf	(??_frexp+1)^(0+128),w
  9204  1FEF  0481               	iorwf	1,f
  9205  1FF0  0823               	movf	frexp@eptr^(0+128),w
  9206  1FF1  0086               	movwf	6
  9207  1FF2  3001               	movlw	1	; select bank2/3
  9208  1FF3  0087               	movwf	7
  9209  1FF4  3082               	movlw	130
  9210  1FF5  0781               	addwf	1,f
  9211  1FF6  3141               	addfsr 1,1
  9212  1FF7  30FF               	movlw	255
  9213  1FF8  3D81               	addwfc	1,f
  9214  1FF9  317F               	addfsr 1,-1
  9215  1FFA  0822               	movf	(frexp@value^(0+128)+2),w
  9216  1FFB  3980               	andlw	-128
  9217  1FFC  383F               	iorlw	63
  9218  1FFD  00A2               	movwf	(frexp@value^(0+128)+2)
  9219  1FFE  13A1               	bcf	(frexp@value^(0+128)+1),7
  9220  1FFF  0008               	return
  9221  2000                     __end_of_frexp:	
  9222                           ;	Return value of _frexp is never used
  9223                           
  9224                           
  9225                           	psect	text19
  9226  1761                     __ptext19:	
  9227 ;; *************** function ___fttol *****************
  9228 ;; Defined at:
  9229 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  f1              3   71[BANK1 ] float 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  lval            4    1[BANK2 ] unsigned long 
  9234 ;;  exp1            1    5[BANK2 ] unsigned char 
  9235 ;;  sign1           1    0[BANK2 ] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;                  4   71[BANK1 ] long 
  9238 ;; Registers used:
  9239 ;;		wreg, status,2, status,0
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9245 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9246 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9247 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9248 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9249 ;;Total ram usage:       14 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    3
  9252 ;; This function calls:
  9253 ;;		Nothing
  9254 ;; This function is called by:
  9255 ;;		_main
  9256 ;;		_set_subdivision
  9257 ;;		_trunc
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function ___fttol
  9263  1761                     ___fttol:	
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9267  1761  0021               	movlb	1	; select bank1
  9268  1762  0867               	movf	___fttol@f1^(0+128),w
  9269  1763  00EB               	movwf	??___fttol^(0+128)
  9270  1764  0868               	movf	(___fttol@f1+1)^(0+128),w
  9271  1765  00EC               	movwf	(??___fttol^(0+128)+1)
  9272  1766  0869               	movf	(___fttol@f1+2)^(0+128),w
  9273  1767  00ED               	movwf	(??___fttol^(0+128)+2)
  9274  1768  1003               	clrc
  9275  1769  0D6C               	rlf	(??___fttol^(0+128)+1),w
  9276  176A  0D6D               	rlf	(??___fttol^(0+128)+2),w
  9277  176B  00EE               	movwf	(??___fttol+3)^(0+128)
  9278  176C  086E               	movf	(??___fttol+3)^(0+128),w
  9279  176D  0022               	movlb	2	; select bank2
  9280  176E  00A5               	movwf	___fttol@exp1^(0+256)
  9281  176F  0825               	movf	___fttol@exp1^(0+256),w
  9282  1770  1D03               	btfss	3,2
  9283  1771  2F7C               	goto	l5260
  9284  1772  3000               	movlw	0
  9285  1773  0021               	movlb	1	; select bank1
  9286  1774  00EA               	movwf	(?___fttol+3)^(0+128)
  9287  1775  3000               	movlw	0
  9288  1776  00E9               	movwf	(?___fttol+2)^(0+128)
  9289  1777  3000               	movlw	0
  9290  1778  00E8               	movwf	(?___fttol+1)^(0+128)
  9291  1779  3000               	movlw	0
  9292  177A  00E7               	movwf	?___fttol^(0+128)
  9293  177B  0008               	return
  9294  177C                     l5260:	
  9295  177C  0021               	movlb	1	; select bank1
  9296  177D  0867               	movf	___fttol@f1^(0+128),w
  9297  177E  00EB               	movwf	??___fttol^(0+128)
  9298  177F  0868               	movf	(___fttol@f1+1)^(0+128),w
  9299  1780  00EC               	movwf	(??___fttol^(0+128)+1)
  9300  1781  0869               	movf	(___fttol@f1+2)^(0+128),w
  9301  1782  00ED               	movwf	(??___fttol^(0+128)+2)
  9302  1783  3017               	movlw	23
  9303  1784                     u5345:	
  9304  1784  36ED               	lsrf	(??___fttol^(0+128)+2),f
  9305  1785  0CEC               	rrf	(??___fttol^(0+128)+1),f
  9306  1786  0CEB               	rrf	??___fttol^(0+128),f
  9307  1787  0B89               	decfsz	9,f
  9308  1788  2F84               	goto	u5345
  9309  1789  086B               	movf	??___fttol^(0+128),w
  9310  178A  00EE               	movwf	(??___fttol+3)^(0+128)
  9311  178B  086E               	movf	(??___fttol+3)^(0+128),w
  9312  178C  0022               	movlb	2	; select bank2
  9313  178D  00A0               	movwf	___fttol@sign1^(0+256)
  9314  178E  0021               	movlb	1	; select bank1
  9315  178F  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  9316  1790  30FF               	movlw	255
  9317  1791  05E7               	andwf	___fttol@f1^(0+128),f
  9318  1792  30FF               	movlw	255
  9319  1793  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  9320  1794  3000               	movlw	0
  9321  1795  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  9322  1796  0867               	movf	___fttol@f1^(0+128),w
  9323  1797  0022               	movlb	2	; select bank2
  9324  1798  00A1               	movwf	___fttol@lval^(0+256)
  9325  1799  0021               	movlb	1	; select bank1
  9326  179A  0868               	movf	(___fttol@f1+1)^(0+128),w
  9327  179B  0022               	movlb	2	; select bank2
  9328  179C  00A2               	movwf	(___fttol@lval^(0+256)+1)
  9329  179D  0021               	movlb	1	; select bank1
  9330  179E  0869               	movf	(___fttol@f1+2)^(0+128),w
  9331  179F  0022               	movlb	2	; select bank2
  9332  17A0  00A3               	movwf	(___fttol@lval^(0+256)+2)
  9333  17A1  01A4               	clrf	(___fttol@lval^(0+256)+3)
  9334  17A2  308E               	movlw	142
  9335  17A3  02A5               	subwf	___fttol@exp1^(0+256),f
  9336  17A4  1FA5               	btfss	___fttol@exp1^(0+256),7
  9337  17A5  2FC6               	goto	l5280
  9338  17A6  0825               	movf	___fttol@exp1^(0+256),w
  9339  17A7  3A80               	xorlw	128
  9340  17A8  3E8F               	addlw	143
  9341  17A9  1803               	skipnc
  9342  17AA  2FB5               	goto	l5278
  9343  17AB  3000               	movlw	0
  9344  17AC  0021               	movlb	1	; select bank1
  9345  17AD  00EA               	movwf	(?___fttol+3)^(0+128)
  9346  17AE  3000               	movlw	0
  9347  17AF  00E9               	movwf	(?___fttol+2)^(0+128)
  9348  17B0  3000               	movlw	0
  9349  17B1  00E8               	movwf	(?___fttol+1)^(0+128)
  9350  17B2  3000               	movlw	0
  9351  17B3  00E7               	movwf	?___fttol^(0+128)
  9352  17B4  0008               	return
  9353  17B5                     l5278:	
  9354  17B5  3001               	movlw	1
  9355  17B6                     u5375:	
  9356  17B6  0022               	movlb	2	; select bank2
  9357  17B7  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  9358  17B8  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  9359  17B9  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  9360  17BA  0CA1               	rrf	___fttol@lval^(0+256),f
  9361  17BB  0B89               	decfsz	9,f
  9362  17BC  2FB6               	goto	u5375
  9363  17BD  3001               	movlw	1
  9364  17BE  0021               	movlb	1	; select bank1
  9365  17BF  00EB               	movwf	??___fttol^(0+128)
  9366  17C0  086B               	movf	??___fttol^(0+128),w
  9367  17C1  0022               	movlb	2	; select bank2
  9368  17C2  07A5               	addwf	___fttol@exp1^(0+256),f
  9369  17C3  1903               	btfsc	3,2
  9370  17C4  2FE2               	goto	l5288
  9371  17C5  2FB5               	goto	l5278
  9372  17C6                     l5280:	
  9373  17C6  3018               	movlw	24
  9374  17C7  0225               	subwf	___fttol@exp1^(0+256),w
  9375  17C8  1C03               	skipc
  9376  17C9  2FDE               	goto	l1683
  9377  17CA  3000               	movlw	0
  9378  17CB  0021               	movlb	1	; select bank1
  9379  17CC  00EA               	movwf	(?___fttol+3)^(0+128)
  9380  17CD  3000               	movlw	0
  9381  17CE  00E9               	movwf	(?___fttol+2)^(0+128)
  9382  17CF  3000               	movlw	0
  9383  17D0  00E8               	movwf	(?___fttol+1)^(0+128)
  9384  17D1  3000               	movlw	0
  9385  17D2  00E7               	movwf	?___fttol^(0+128)
  9386  17D3  0008               	return
  9387  17D4                     l5286:	
  9388  17D4  3001               	movlw	1
  9389  17D5                     u5405:	
  9390  17D5  0022               	movlb	2	; select bank2
  9391  17D6  35A1               	lslf	___fttol@lval^(0+256),f
  9392  17D7  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  9393  17D8  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  9394  17D9  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  9395  17DA  0B89               	decfsz	9,f
  9396  17DB  2FD5               	goto	u5405
  9397  17DC  3001               	movlw	1
  9398  17DD  02A5               	subwf	___fttol@exp1^(0+256),f
  9399  17DE                     l1683:	
  9400  17DE  0022               	movlb	2	; select bank2
  9401  17DF  0825               	movf	___fttol@exp1^(0+256),w
  9402  17E0  1D03               	btfss	3,2
  9403  17E1  2FD4               	goto	l5286
  9404  17E2                     l5288:	
  9405  17E2  0820               	movf	___fttol@sign1^(0+256),w
  9406  17E3  1903               	btfsc	3,2
  9407  17E4  2FF0               	goto	l5292
  9408  17E5  09A1               	comf	___fttol@lval^(0+256),f
  9409  17E6  09A2               	comf	(___fttol@lval+1)^(0+256),f
  9410  17E7  09A3               	comf	(___fttol@lval+2)^(0+256),f
  9411  17E8  09A4               	comf	(___fttol@lval+3)^(0+256),f
  9412  17E9  0AA1               	incf	___fttol@lval^(0+256),f
  9413  17EA  1903               	skipnz
  9414  17EB  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  9415  17EC  1903               	skipnz
  9416  17ED  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  9417  17EE  1903               	skipnz
  9418  17EF  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  9419  17F0                     l5292:	
  9420  17F0  0824               	movf	(___fttol@lval+3)^(0+256),w
  9421  17F1  0021               	movlb	1	; select bank1
  9422  17F2  00EA               	movwf	(?___fttol+3)^(0+128)
  9423  17F3  0022               	movlb	2	; select bank2
  9424  17F4  0823               	movf	(___fttol@lval+2)^(0+256),w
  9425  17F5  0021               	movlb	1	; select bank1
  9426  17F6  00E9               	movwf	(?___fttol+2)^(0+128)
  9427  17F7  0022               	movlb	2	; select bank2
  9428  17F8  0822               	movf	(___fttol@lval+1)^(0+256),w
  9429  17F9  0021               	movlb	1	; select bank1
  9430  17FA  00E8               	movwf	(?___fttol+1)^(0+128)
  9431  17FB  0022               	movlb	2	; select bank2
  9432  17FC  0821               	movf	___fttol@lval^(0+256),w
  9433  17FD  0021               	movlb	1	; select bank1
  9434  17FE  00E7               	movwf	?___fttol^(0+128)
  9435  17FF  0008               	return
  9436  1800                     __end_of___fttol:	
  9437                           
  9438                           	psect	text20
  9439  12F6                     __ptext20:	
  9440 ;; *************** function ___altoft *****************
  9441 ;; Defined at:
  9442 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;  c               4    6[BANK2 ] long 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  sign            1   13[BANK2 ] unsigned char 
  9447 ;;  exp             1   12[BANK2 ] unsigned char 
  9448 ;; Return value:  Size  Location     Type
  9449 ;;                  3    6[BANK2 ] float 
  9450 ;; Registers used:
  9451 ;;		wreg, status,2, status,0, pclath, cstack
  9452 ;; Tracked objects:
  9453 ;;		On entry : 0/0
  9454 ;;		On exit  : 0/0
  9455 ;;		Unchanged: 0/0
  9456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9457 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9458 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9459 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9460 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9461 ;;Total ram usage:        8 bytes
  9462 ;; Hardware stack levels used:    1
  9463 ;; Hardware stack levels required when called:    4
  9464 ;; This function calls:
  9465 ;;		___ftpack
  9466 ;; This function is called by:
  9467 ;;		_trunc
  9468 ;; This function uses a non-reentrant model
  9469 ;;
  9470                           
  9471                           
  9472                           ;psect for function ___altoft
  9473  12F6                     ___altoft:	
  9474                           
  9475                           ;incstack = 0
  9476                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  9477  12F6  0022               	movlb	2	; select bank2
  9478  12F7  01AD               	clrf	___altoft@sign^(0+256)
  9479  12F8  308E               	movlw	142
  9480  12F9  00AA               	movwf	??___altoft^(0+256)
  9481  12FA  082A               	movf	??___altoft^(0+256),w
  9482  12FB  00AC               	movwf	___altoft@exp^(0+256)
  9483  12FC  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  9484  12FD  2B0B               	goto	l5248
  9485  12FE  09A6               	comf	___altoft@c^(0+256),f
  9486  12FF  09A7               	comf	(___altoft@c+1)^(0+256),f
  9487  1300  09A8               	comf	(___altoft@c+2)^(0+256),f
  9488  1301  09A9               	comf	(___altoft@c+3)^(0+256),f
  9489  1302  0AA6               	incf	___altoft@c^(0+256),f
  9490  1303  1903               	skipnz
  9491  1304  0AA7               	incf	(___altoft@c+1)^(0+256),f
  9492  1305  1903               	skipnz
  9493  1306  0AA8               	incf	(___altoft@c+2)^(0+256),f
  9494  1307  1903               	skipnz
  9495  1308  0AA9               	incf	(___altoft@c+3)^(0+256),f
  9496  1309  01AD               	clrf	___altoft@sign^(0+256)
  9497  130A  0AAD               	incf	___altoft@sign^(0+256),f
  9498  130B                     l5248:	
  9499  130B  30FF               	movlw	255
  9500  130C  0529               	andwf	(___altoft@c+3)^(0+256),w
  9501  130D  1903               	btfsc	3,2
  9502  130E  2B1B               	goto	l5250
  9503  130F  3001               	movlw	1
  9504  1310                     u5315:	
  9505  1310  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  9506  1311  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  9507  1312  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  9508  1313  0CA6               	rrf	___altoft@c^(0+256),f
  9509  1314  0B89               	decfsz	9,f
  9510  1315  2B10               	goto	u5315
  9511  1316  3001               	movlw	1
  9512  1317  00AA               	movwf	??___altoft^(0+256)
  9513  1318  082A               	movf	??___altoft^(0+256),w
  9514  1319  07AC               	addwf	___altoft@exp^(0+256),f
  9515  131A  2B0B               	goto	l5248
  9516  131B                     l5250:	
  9517  131B  0826               	movf	___altoft@c^(0+256),w
  9518  131C  0021               	movlb	1	; select bank1
  9519  131D  00A0               	movwf	___ftpack@arg^(0+128)
  9520  131E  0022               	movlb	2	; select bank2
  9521  131F  0827               	movf	(___altoft@c+1)^(0+256),w
  9522  1320  0021               	movlb	1	; select bank1
  9523  1321  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9524  1322  0022               	movlb	2	; select bank2
  9525  1323  0828               	movf	(___altoft@c+2)^(0+256),w
  9526  1324  0021               	movlb	1	; select bank1
  9527  1325  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9528  1326  0022               	movlb	2	; select bank2
  9529  1327  082C               	movf	___altoft@exp^(0+256),w
  9530  1328  00AA               	movwf	??___altoft^(0+256)
  9531  1329  082A               	movf	??___altoft^(0+256),w
  9532  132A  0021               	movlb	1	; select bank1
  9533  132B  00A3               	movwf	___ftpack@exp^(0+128)
  9534  132C  0022               	movlb	2	; select bank2
  9535  132D  082D               	movf	___altoft@sign^(0+256),w
  9536  132E  00AB               	movwf	(??___altoft+1)^(0+256)
  9537  132F  082B               	movf	(??___altoft+1)^(0+256),w
  9538  1330  0021               	movlb	1	; select bank1
  9539  1331  00A4               	movwf	___ftpack@sign^(0+128)
  9540  1332  3194  2488         	fcall	___ftpack
  9541  1334  0021               	movlb	1	; select bank1
  9542  1335  0820               	movf	?___ftpack^(0+128),w
  9543  1336  0022               	movlb	2	; select bank2
  9544  1337  00A6               	movwf	?___altoft^(0+256)
  9545  1338  0021               	movlb	1	; select bank1
  9546  1339  0821               	movf	(?___ftpack+1)^(0+128),w
  9547  133A  0022               	movlb	2	; select bank2
  9548  133B  00A7               	movwf	(?___altoft+1)^(0+256)
  9549  133C  0021               	movlb	1	; select bank1
  9550  133D  0822               	movf	(?___ftpack+2)^(0+128),w
  9551  133E  0022               	movlb	2	; select bank2
  9552  133F  00A8               	movwf	(?___altoft+2)^(0+256)
  9553  1340  0008               	return
  9554  1341                     __end_of___altoft:	
  9555                           
  9556                           	psect	text21
  9557  1E60                     __ptext21:	
  9558 ;; *************** function ___awtoft *****************
  9559 ;; Defined at:
  9560 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9561 ;; Parameters:    Size  Location     Type
  9562 ;;  c               2    8[BANK1 ] int 
  9563 ;; Auto vars:     Size  Location     Type
  9564 ;;  sign            1   13[BANK1 ] unsigned char 
  9565 ;; Return value:  Size  Location     Type
  9566 ;;                  3    8[BANK1 ] float 
  9567 ;; Registers used:
  9568 ;;		wreg, status,2, status,0, pclath, cstack
  9569 ;; Tracked objects:
  9570 ;;		On entry : 0/0
  9571 ;;		On exit  : 0/0
  9572 ;;		Unchanged: 0/0
  9573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9574 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9575 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9576 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9577 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9578 ;;Total ram usage:        6 bytes
  9579 ;; Hardware stack levels used:    1
  9580 ;; Hardware stack levels required when called:    4
  9581 ;; This function calls:
  9582 ;;		___ftpack
  9583 ;; This function is called by:
  9584 ;;		_main
  9585 ;;		_set_subdivision
  9586 ;; This function uses a non-reentrant model
  9587 ;;
  9588                           
  9589                           
  9590                           ;psect for function ___awtoft
  9591  1E60                     ___awtoft:	
  9592                           
  9593                           ;incstack = 0
  9594                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9595  1E60  0021               	movlb	1	; select bank1
  9596  1E61  01AD               	clrf	___awtoft@sign^(0+128)
  9597  1E62  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  9598  1E63  2E6B               	goto	l5538
  9599  1E64  09A8               	comf	___awtoft@c^(0+128),f
  9600  1E65  09A9               	comf	(___awtoft@c+1)^(0+128),f
  9601  1E66  0AA8               	incf	___awtoft@c^(0+128),f
  9602  1E67  1903               	skipnz
  9603  1E68  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  9604  1E69  01AD               	clrf	___awtoft@sign^(0+128)
  9605  1E6A  0AAD               	incf	___awtoft@sign^(0+128),f
  9606  1E6B                     l5538:	
  9607  1E6B  0828               	movf	___awtoft@c^(0+128),w
  9608  1E6C  00A0               	movwf	___ftpack@arg^(0+128)
  9609  1E6D  0829               	movf	(___awtoft@c+1)^(0+128),w
  9610  1E6E  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9611  1E6F  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  9612  1E70  308E               	movlw	142
  9613  1E71  00AB               	movwf	??___awtoft^(0+128)
  9614  1E72  082B               	movf	??___awtoft^(0+128),w
  9615  1E73  00A3               	movwf	___ftpack@exp^(0+128)
  9616  1E74  082D               	movf	___awtoft@sign^(0+128),w
  9617  1E75  00AC               	movwf	(??___awtoft+1)^(0+128)
  9618  1E76  082C               	movf	(??___awtoft+1)^(0+128),w
  9619  1E77  00A4               	movwf	___ftpack@sign^(0+128)
  9620  1E78  3194  2488         	fcall	___ftpack
  9621  1E7A  0021               	movlb	1	; select bank1
  9622  1E7B  0820               	movf	?___ftpack^(0+128),w
  9623  1E7C  00A8               	movwf	?___awtoft^(0+128)
  9624  1E7D  0821               	movf	(?___ftpack+1)^(0+128),w
  9625  1E7E  00A9               	movwf	(?___awtoft+1)^(0+128)
  9626  1E7F  0822               	movf	(?___ftpack+2)^(0+128),w
  9627  1E80  00AA               	movwf	(?___awtoft+2)^(0+128)
  9628  1E81  0008               	return
  9629  1E82                     __end_of___awtoft:	
  9630                           
  9631                           	psect	text22
  9632  1341                     __ptext22:	
  9633 ;; *************** function _read_top_tactile *****************
  9634 ;; Defined at:
  9635 ;;		line 47 in file "tactiles.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;		None
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  1    wreg      void 
  9642 ;; Registers used:
  9643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9651 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9652 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9653 ;;Total ram usage:        1 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    5
  9656 ;; This function calls:
  9657 ;;		_set_leds_top
  9658 ;;		_wait_ms
  9659 ;; This function is called by:
  9660 ;;		_main
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function _read_top_tactile
  9666  1341                     _read_top_tactile:	
  9667                           
  9668                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9669                           
  9670                           ;incstack = 0
  9671                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9672  1341  0020               	movlb	0	; select bank0
  9673  1342  1A8F               	btfsc	15,5	;volatile
  9674  1343  2B4B               	goto	l5794
  9675                           
  9676                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9677  1344  0022               	movlb	2	; select bank2
  9678  1345  0861               	movf	_topTactile_pressed^(0+256),w
  9679  1346  1903               	btfsc	3,2
  9680  1347  2B56               	goto	l865
  9681                           
  9682                           ;tactiles.c: 58: topTactile_pressed--;
  9683  1348  3001               	movlw	1
  9684  1349  02E1               	subwf	_topTactile_pressed^(0+256),f
  9685                           
  9686                           ;tactiles.c: 59: }
  9687                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9688  134A  2B56               	goto	l865
  9689  134B                     l5794:	
  9690  134B  3019               	movlw	25
  9691  134C  0022               	movlb	2	; select bank2
  9692  134D  0261               	subwf	_topTactile_pressed^(0+256),w
  9693  134E  1803               	skipnc
  9694  134F  2B56               	goto	l865
  9695                           
  9696                           ;tactiles.c: 61: topTactile_pressed++;
  9697  1350  3001               	movlw	1
  9698  1351  0021               	movlb	1	; select bank1
  9699  1352  00B2               	movwf	??_read_top_tactile^(0+128)
  9700  1353  0832               	movf	??_read_top_tactile^(0+128),w
  9701  1354  0022               	movlb	2	; select bank2
  9702  1355  07E1               	addwf	_topTactile_pressed^(0+256),f
  9703  1356                     l865:	
  9704                           
  9705                           ;tactiles.c: 62: }
  9706                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9707  1356  0861               	movf	_topTactile_pressed^(0+256),w
  9708  1357  1D03               	btfss	3,2
  9709  1358  0008               	return
  9710                           
  9711                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9712  1359  0020               	movlb	0	; select bank0
  9713  135A  0864               	movf	_top_push_state,w
  9714  135B  3E01               	addlw	1
  9715  135C  00E4               	movwf	_top_push_state
  9716  135D  3000               	movlw	0
  9717  135E  3D65               	addwfc	_top_push_state+1,w
  9718  135F  00E5               	movwf	_top_push_state+1
  9719                           
  9720                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9721  1360  0865               	movf	_top_push_state+1,w
  9722  1361  3A80               	xorlw	128
  9723  1362  0021               	movlb	1	; select bank1
  9724  1363  00B2               	movwf	??_read_top_tactile^(0+128)
  9725  1364  3080               	movlw	128
  9726  1365  0232               	subwf	??_read_top_tactile^(0+128),w
  9727  1366  1D03               	skipz
  9728  1367  2B6B               	goto	u6305
  9729  1368  3007               	movlw	7
  9730  1369  0020               	movlb	0	; select bank0
  9731  136A  0264               	subwf	_top_push_state,w
  9732  136B                     u6305:	
  9733  136B  1C03               	skipc
  9734  136C  2B72               	goto	l5804
  9735                           
  9736                           ;tactiles.c: 70: top_push_state = 1;
  9737  136D  3001               	movlw	1
  9738  136E  0020               	movlb	0	; select bank0
  9739  136F  00E4               	movwf	_top_push_state
  9740  1370  3000               	movlw	0
  9741  1371  00E5               	movwf	_top_push_state+1
  9742  1372                     l5804:	
  9743                           
  9744                           ;tactiles.c: 71: }
  9745                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9746  1372  0020               	movlb	0	; select bank0
  9747  1373  0865               	movf	_top_push_state+1,w
  9748  1374  0021               	movlb	1	; select bank1
  9749  1375  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9750  1376  0020               	movlb	0	; select bank0
  9751  1377  0864               	movf	_top_push_state,w
  9752  1378  0021               	movlb	1	; select bank1
  9753  1379  00A0               	movwf	set_leds_top@x^(0+128)
  9754  137A  3001               	movlw	1
  9755  137B  00A2               	movwf	set_leds_top@ledState^(0+128)
  9756  137C  3000               	movlw	0
  9757  137D  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9758  137E  3194  2434  3193   	fcall	_set_leds_top
  9759                           
  9760                           ;tactiles.c: 73: delay_time_changed = 1;
  9761  1381  3001               	movlw	1
  9762  1382  0023               	movlb	3	; select bank3
  9763  1383  00E2               	movwf	_delay_time_changed^(0+384)
  9764  1384  3000               	movlw	0
  9765  1385  00E3               	movwf	(_delay_time_changed^(0+384)+1)
  9766  1386                     l869:	
  9767                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9768                           
  9769  1386  0020               	movlb	0	; select bank0
  9770  1387  1E8F               	btfss	15,5	;volatile
  9771  1388  2B86               	goto	l869
  9772                           
  9773                           ;tactiles.c: 77: }
  9774                           ;tactiles.c: 78: wait_ms(20);
  9775  1389  3014               	movlw	20
  9776  138A  0021               	movlb	1	; select bank1
  9777  138B  00AC               	movwf	wait_ms@timeSec^(0+128)
  9778  138C  3000               	movlw	0
  9779  138D  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9780  138E  319F  2762         	fcall	_wait_ms
  9781  1390  0008               	return
  9782  1391                     __end_of_read_top_tactile:	
  9783                           
  9784                           	psect	text23
  9785  121D                     __ptext23:	
  9786 ;; *************** function _read_bottom_tactile *****************
  9787 ;; Defined at:
  9788 ;;		line 17 in file "tactiles.c"
  9789 ;; Parameters:    Size  Location     Type
  9790 ;;		None
  9791 ;; Auto vars:     Size  Location     Type
  9792 ;;		None
  9793 ;; Return value:  Size  Location     Type
  9794 ;;                  1    wreg      void 
  9795 ;; Registers used:
  9796 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9797 ;; Tracked objects:
  9798 ;;		On entry : 0/0
  9799 ;;		On exit  : 0/0
  9800 ;;		Unchanged: 0/0
  9801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9804 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9805 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9806 ;;Total ram usage:        1 bytes
  9807 ;; Hardware stack levels used:    1
  9808 ;; Hardware stack levels required when called:    5
  9809 ;; This function calls:
  9810 ;;		_set_leds_bottom
  9811 ;;		_wait_ms
  9812 ;; This function is called by:
  9813 ;;		_main
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _read_bottom_tactile
  9819  121D                     _read_bottom_tactile:	
  9820                           
  9821                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9822                           
  9823                           ;incstack = 0
  9824                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9825  121D  0020               	movlb	0	; select bank0
  9826  121E  1B0F               	btfsc	15,6	;volatile
  9827  121F  2A27               	goto	l5774
  9828                           
  9829                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9830  1220  0022               	movlb	2	; select bank2
  9831  1221  085B               	movf	_bottomTactile_pressed^(0+256),w
  9832  1222  1903               	btfsc	3,2
  9833  1223  2A32               	goto	l853
  9834                           
  9835                           ;tactiles.c: 27: bottomTactile_pressed--;
  9836  1224  3001               	movlw	1
  9837  1225  02DB               	subwf	_bottomTactile_pressed^(0+256),f
  9838                           
  9839                           ;tactiles.c: 28: }
  9840                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9841  1226  2A32               	goto	l853
  9842  1227                     l5774:	
  9843  1227  3019               	movlw	25
  9844  1228  0022               	movlb	2	; select bank2
  9845  1229  025B               	subwf	_bottomTactile_pressed^(0+256),w
  9846  122A  1803               	skipnc
  9847  122B  2A32               	goto	l853
  9848                           
  9849                           ;tactiles.c: 30: bottomTactile_pressed++;
  9850  122C  3001               	movlw	1
  9851  122D  0021               	movlb	1	; select bank1
  9852  122E  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9853  122F  0832               	movf	??_read_bottom_tactile^(0+128),w
  9854  1230  0022               	movlb	2	; select bank2
  9855  1231  07DB               	addwf	_bottomTactile_pressed^(0+256),f
  9856  1232                     l853:	
  9857                           
  9858                           ;tactiles.c: 31: }
  9859                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9860  1232  085B               	movf	_bottomTactile_pressed^(0+256),w
  9861  1233  1D03               	btfss	3,2
  9862  1234  0008               	return
  9863                           
  9864                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9865  1235  0020               	movlb	0	; select bank0
  9866  1236  0860               	movf	_bottom_push_state,w
  9867  1237  3E01               	addlw	1
  9868  1238  00E0               	movwf	_bottom_push_state
  9869  1239  3000               	movlw	0
  9870  123A  3D61               	addwfc	_bottom_push_state+1,w
  9871  123B  00E1               	movwf	_bottom_push_state+1
  9872                           
  9873                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9874  123C  0861               	movf	_bottom_push_state+1,w
  9875  123D  3A80               	xorlw	128
  9876  123E  0021               	movlb	1	; select bank1
  9877  123F  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9878  1240  3080               	movlw	128
  9879  1241  0232               	subwf	??_read_bottom_tactile^(0+128),w
  9880  1242  1D03               	skipz
  9881  1243  2A47               	goto	u6245
  9882  1244  3007               	movlw	7
  9883  1245  0020               	movlb	0	; select bank0
  9884  1246  0260               	subwf	_bottom_push_state,w
  9885  1247                     u6245:	
  9886  1247  1C03               	skipc
  9887  1248  2A4E               	goto	l5784
  9888                           
  9889                           ;tactiles.c: 37: bottom_push_state = 1;
  9890  1249  3001               	movlw	1
  9891  124A  0020               	movlb	0	; select bank0
  9892  124B  00E0               	movwf	_bottom_push_state
  9893  124C  3000               	movlw	0
  9894  124D  00E1               	movwf	_bottom_push_state+1
  9895  124E                     l5784:	
  9896                           
  9897                           ;tactiles.c: 38: }
  9898                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9899  124E  0020               	movlb	0	; select bank0
  9900  124F  0861               	movf	_bottom_push_state+1,w
  9901  1250  0021               	movlb	1	; select bank1
  9902  1251  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9903  1252  0020               	movlb	0	; select bank0
  9904  1253  0860               	movf	_bottom_push_state,w
  9905  1254  0021               	movlb	1	; select bank1
  9906  1255  00A0               	movwf	set_leds_bottom@x^(0+128)
  9907  1256  3190  2028  3192   	fcall	_set_leds_bottom
  9908  1259                     l857:	
  9909                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9910                           
  9911  1259  0020               	movlb	0	; select bank0
  9912  125A  1F0F               	btfss	15,6	;volatile
  9913  125B  2A59               	goto	l857
  9914                           
  9915                           ;tactiles.c: 42: }
  9916                           ;tactiles.c: 43: wait_ms(20);
  9917  125C  3014               	movlw	20
  9918  125D  0021               	movlb	1	; select bank1
  9919  125E  00AC               	movwf	wait_ms@timeSec^(0+128)
  9920  125F  3000               	movlw	0
  9921  1260  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9922  1261  319F  2762         	fcall	_wait_ms
  9923  1263  0008               	return
  9924  1264                     __end_of_read_bottom_tactile:	
  9925                           
  9926                           	psect	text24
  9927  16D6                     __ptext24:	
  9928 ;; *************** function _map *****************
  9929 ;; Defined at:
  9930 ;;		line 177 in file "user.c"
  9931 ;; Parameters:    Size  Location     Type
  9932 ;;  x               3   53[BANK1 ] float 
  9933 ;;  in_min          3   56[BANK1 ] float 
  9934 ;;  in_max          3   59[BANK1 ] float 
  9935 ;;  out_min         3   62[BANK1 ] float 
  9936 ;;  out_max         3   65[BANK1 ] float 
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  3   53[BANK1 ] float 
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, status,0, pclath, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9948 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9949 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9951 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9952 ;;Total ram usage:       18 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    5
  9955 ;; This function calls:
  9956 ;;		___ftadd
  9957 ;;		___ftdiv
  9958 ;;		___ftmul
  9959 ;;		___ftneg
  9960 ;; This function is called by:
  9961 ;;		_main
  9962 ;; This function uses a non-reentrant model
  9963 ;;
  9964                           
  9965                           
  9966                           ;psect for function _map
  9967  16D6                     _map:	
  9968                           
  9969                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9970                           
  9971                           ;incstack = 0
  9972                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9973  16D6  0021               	movlb	1	; select bank1
  9974  16D7  085B               	movf	map@in_max^(0+128),w
  9975  16D8  00A8               	movwf	___ftadd@f1^(0+128)
  9976  16D9  085C               	movf	(map@in_max+1)^(0+128),w
  9977  16DA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9978  16DB  085D               	movf	(map@in_max+2)^(0+128),w
  9979  16DC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9980  16DD  0858               	movf	map@in_min^(0+128),w
  9981  16DE  00A0               	movwf	___ftneg@f1^(0+128)
  9982  16DF  0859               	movf	(map@in_min+1)^(0+128),w
  9983  16E0  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9984  16E1  085A               	movf	(map@in_min+2)^(0+128),w
  9985  16E2  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9986  16E3  319D  2559  3196   	fcall	___ftneg
  9987  16E6  0021               	movlb	1	; select bank1
  9988  16E7  0820               	movf	?___ftneg^(0+128),w
  9989  16E8  00AB               	movwf	___ftadd@f2^(0+128)
  9990  16E9  0821               	movf	(?___ftneg+1)^(0+128),w
  9991  16EA  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9992  16EB  0822               	movf	(?___ftneg+2)^(0+128),w
  9993  16EC  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9994  16ED  318B  231E  3196   	fcall	___ftadd
  9995  16F0  0021               	movlb	1	; select bank1
  9996  16F1  0828               	movf	?___ftadd^(0+128),w
  9997  16F2  00C5               	movwf	___ftdiv@f2^(0+128)
  9998  16F3  0829               	movf	(?___ftadd+1)^(0+128),w
  9999  16F4  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
 10000  16F5  082A               	movf	(?___ftadd+2)^(0+128),w
 10001  16F6  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
 10002  16F7  0861               	movf	map@out_max^(0+128),w
 10003  16F8  00A8               	movwf	___ftadd@f1^(0+128)
 10004  16F9  0862               	movf	(map@out_max+1)^(0+128),w
 10005  16FA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10006  16FB  0863               	movf	(map@out_max+2)^(0+128),w
 10007  16FC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10008  16FD  085E               	movf	map@out_min^(0+128),w
 10009  16FE  00A0               	movwf	___ftneg@f1^(0+128)
 10010  16FF  085F               	movf	(map@out_min+1)^(0+128),w
 10011  1700  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10012  1701  0860               	movf	(map@out_min+2)^(0+128),w
 10013  1702  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10014  1703  319D  2559  3196   	fcall	___ftneg
 10015  1706  0021               	movlb	1	; select bank1
 10016  1707  0820               	movf	?___ftneg^(0+128),w
 10017  1708  00AB               	movwf	___ftadd@f2^(0+128)
 10018  1709  0821               	movf	(?___ftneg+1)^(0+128),w
 10019  170A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10020  170B  0822               	movf	(?___ftneg+2)^(0+128),w
 10021  170C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10022  170D  318B  231E  3196   	fcall	___ftadd
 10023  1710  0021               	movlb	1	; select bank1
 10024  1711  0828               	movf	?___ftadd^(0+128),w
 10025  1712  00B5               	movwf	___ftmul@f1^(0+128)
 10026  1713  0829               	movf	(?___ftadd+1)^(0+128),w
 10027  1714  00B6               	movwf	(___ftmul@f1+1)^(0+128)
 10028  1715  082A               	movf	(?___ftadd+2)^(0+128),w
 10029  1716  00B7               	movwf	(___ftmul@f1+2)^(0+128)
 10030  1717  0855               	movf	map@x^(0+128),w
 10031  1718  00A8               	movwf	___ftadd@f1^(0+128)
 10032  1719  0856               	movf	(map@x+1)^(0+128),w
 10033  171A  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10034  171B  0857               	movf	(map@x+2)^(0+128),w
 10035  171C  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10036  171D  0858               	movf	map@in_min^(0+128),w
 10037  171E  00A0               	movwf	___ftneg@f1^(0+128)
 10038  171F  0859               	movf	(map@in_min+1)^(0+128),w
 10039  1720  00A1               	movwf	(___ftneg@f1+1)^(0+128)
 10040  1721  085A               	movf	(map@in_min+2)^(0+128),w
 10041  1722  00A2               	movwf	(___ftneg@f1+2)^(0+128)
 10042  1723  319D  2559  3196   	fcall	___ftneg
 10043  1726  0021               	movlb	1	; select bank1
 10044  1727  0820               	movf	?___ftneg^(0+128),w
 10045  1728  00AB               	movwf	___ftadd@f2^(0+128)
 10046  1729  0821               	movf	(?___ftneg+1)^(0+128),w
 10047  172A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10048  172B  0822               	movf	(?___ftneg+2)^(0+128),w
 10049  172C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10050  172D  318B  231E  3196   	fcall	___ftadd
 10051  1730  0021               	movlb	1	; select bank1
 10052  1731  0828               	movf	?___ftadd^(0+128),w
 10053  1732  00B8               	movwf	___ftmul@f2^(0+128)
 10054  1733  0829               	movf	(?___ftadd+1)^(0+128),w
 10055  1734  00B9               	movwf	(___ftmul@f2+1)^(0+128)
 10056  1735  082A               	movf	(?___ftadd+2)^(0+128),w
 10057  1736  00BA               	movwf	(___ftmul@f2+2)^(0+128)
 10058  1737  3188  20C5  3196   	fcall	___ftmul
 10059  173A  0021               	movlb	1	; select bank1
 10060  173B  0835               	movf	?___ftmul^(0+128),w
 10061  173C  00C8               	movwf	___ftdiv@f1^(0+128)
 10062  173D  0836               	movf	(?___ftmul+1)^(0+128),w
 10063  173E  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
 10064  173F  0837               	movf	(?___ftmul+2)^(0+128),w
 10065  1740  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
 10066  1741  3188  201C  3196   	fcall	___ftdiv
 10067  1744  0021               	movlb	1	; select bank1
 10068  1745  0845               	movf	?___ftdiv^(0+128),w
 10069  1746  00E4               	movwf	_map$2292^(0+128)
 10070  1747  0846               	movf	(?___ftdiv+1)^(0+128),w
 10071  1748  00E5               	movwf	(_map$2292+1)^(0+128)
 10072  1749  0847               	movf	(?___ftdiv+2)^(0+128),w
 10073  174A  00E6               	movwf	(_map$2292+2)^(0+128)
 10074                           
 10075                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10076  174B  085E               	movf	map@out_min^(0+128),w
 10077  174C  00A8               	movwf	___ftadd@f1^(0+128)
 10078  174D  085F               	movf	(map@out_min+1)^(0+128),w
 10079  174E  00A9               	movwf	(___ftadd@f1+1)^(0+128)
 10080  174F  0860               	movf	(map@out_min+2)^(0+128),w
 10081  1750  00AA               	movwf	(___ftadd@f1+2)^(0+128)
 10082  1751  0864               	movf	_map$2292^(0+128),w
 10083  1752  00AB               	movwf	___ftadd@f2^(0+128)
 10084  1753  0865               	movf	(_map$2292+1)^(0+128),w
 10085  1754  00AC               	movwf	(___ftadd@f2+1)^(0+128)
 10086  1755  0866               	movf	(_map$2292+2)^(0+128),w
 10087  1756  00AD               	movwf	(___ftadd@f2+2)^(0+128)
 10088  1757  318B  231E         	fcall	___ftadd
 10089  1759  0021               	movlb	1	; select bank1
 10090  175A  0828               	movf	?___ftadd^(0+128),w
 10091  175B  00D5               	movwf	?_map^(0+128)
 10092  175C  0829               	movf	(?___ftadd+1)^(0+128),w
 10093  175D  00D6               	movwf	(?_map+1)^(0+128)
 10094  175E  082A               	movf	(?___ftadd+2)^(0+128),w
 10095  175F  00D7               	movwf	(?_map+2)^(0+128)
 10096  1760  0008               	return
 10097  1761                     __end_of_map:	
 10098                           
 10099                           	psect	text25
 10100  1D59                     __ptext25:	
 10101 ;; *************** function ___ftneg *****************
 10102 ;; Defined at:
 10103 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10104 ;; Parameters:    Size  Location     Type
 10105 ;;  f1              3    0[BANK1 ] float 
 10106 ;; Auto vars:     Size  Location     Type
 10107 ;;		None
 10108 ;; Return value:  Size  Location     Type
 10109 ;;                  3    0[BANK1 ] float 
 10110 ;; Registers used:
 10111 ;;		wreg
 10112 ;; Tracked objects:
 10113 ;;		On entry : 0/0
 10114 ;;		On exit  : 0/0
 10115 ;;		Unchanged: 0/0
 10116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10117 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10120 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10121 ;;Total ram usage:        3 bytes
 10122 ;; Hardware stack levels used:    1
 10123 ;; Hardware stack levels required when called:    3
 10124 ;; This function calls:
 10125 ;;		Nothing
 10126 ;; This function is called by:
 10127 ;;		_map
 10128 ;;		_scalePotValue
 10129 ;; This function uses a non-reentrant model
 10130 ;;
 10131                           
 10132                           
 10133                           ;psect for function ___ftneg
 10134  1D59                     ___ftneg:	
 10135                           
 10136                           ;incstack = 0
 10137                           ; Regs used in ___ftneg: [wreg]
 10138  1D59  0021               	movlb	1	; select bank1
 10139  1D5A  0822               	movf	(___ftneg@f1+2)^(0+128),w
 10140  1D5B  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
 10141  1D5C  0420               	iorwf	___ftneg@f1^(0+128),w
 10142  1D5D  1903               	skipnz
 10143  1D5E  0008               	return
 10144  1D5F  3080               	movlw	128
 10145  1D60  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
 10146  1D61  0008               	return
 10147  1D62                     __end_of___ftneg:	
 10148                           
 10149                           	psect	text26
 10150  08C5                     __ptext26:	
 10151 ;; *************** function ___ftmul *****************
 10152 ;; Defined at:
 10153 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10154 ;; Parameters:    Size  Location     Type
 10155 ;;  f1              3   21[BANK1 ] float 
 10156 ;;  f2              3   24[BANK1 ] float 
 10157 ;; Auto vars:     Size  Location     Type
 10158 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
 10159 ;;  sign            1   36[BANK1 ] unsigned char 
 10160 ;;  cntr            1   35[BANK1 ] unsigned char 
 10161 ;;  exp             1   31[BANK1 ] unsigned char 
 10162 ;; Return value:  Size  Location     Type
 10163 ;;                  3   21[BANK1 ] float 
 10164 ;; Registers used:
 10165 ;;		wreg, status,2, status,0, pclath, cstack
 10166 ;; Tracked objects:
 10167 ;;		On entry : 0/0
 10168 ;;		On exit  : 0/0
 10169 ;;		Unchanged: 0/0
 10170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10171 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10172 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10173 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10174 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10175 ;;Total ram usage:       16 bytes
 10176 ;; Hardware stack levels used:    1
 10177 ;; Hardware stack levels required when called:    4
 10178 ;; This function calls:
 10179 ;;		___ftpack
 10180 ;; This function is called by:
 10181 ;;		_set_subdivision
 10182 ;;		_map
 10183 ;;		_scalePotValue
 10184 ;; This function uses a non-reentrant model
 10185 ;;
 10186                           
 10187                           
 10188                           ;psect for function ___ftmul
 10189  08C5                     ___ftmul:	
 10190                           
 10191                           ;incstack = 0
 10192                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10193  08C5  0021               	movlb	1	; select bank1
 10194  08C6  0835               	movf	___ftmul@f1^(0+128),w
 10195  08C7  00BB               	movwf	??___ftmul^(0+128)
 10196  08C8  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10197  08C9  00BC               	movwf	(??___ftmul^(0+128)+1)
 10198  08CA  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10199  08CB  00BD               	movwf	(??___ftmul^(0+128)+2)
 10200  08CC  1003               	clrc
 10201  08CD  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10202  08CE  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10203  08CF  00BE               	movwf	(??___ftmul+3)^(0+128)
 10204  08D0  083E               	movf	(??___ftmul+3)^(0+128),w
 10205  08D1  00BF               	movwf	___ftmul@exp^(0+128)
 10206  08D2  083F               	movf	___ftmul@exp^(0+128),w
 10207  08D3  1D03               	btfss	3,2
 10208  08D4  28DC               	goto	l5660
 10209  08D5  3000               	movlw	0
 10210  08D6  00B5               	movwf	?___ftmul^(0+128)
 10211  08D7  3000               	movlw	0
 10212  08D8  00B6               	movwf	(?___ftmul+1)^(0+128)
 10213  08D9  3000               	movlw	0
 10214  08DA  00B7               	movwf	(?___ftmul+2)^(0+128)
 10215  08DB  0008               	return
 10216  08DC                     l5660:	
 10217  08DC  0838               	movf	___ftmul@f2^(0+128),w
 10218  08DD  00BB               	movwf	??___ftmul^(0+128)
 10219  08DE  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10220  08DF  00BC               	movwf	(??___ftmul^(0+128)+1)
 10221  08E0  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10222  08E1  00BD               	movwf	(??___ftmul^(0+128)+2)
 10223  08E2  1003               	clrc
 10224  08E3  0D3C               	rlf	(??___ftmul^(0+128)+1),w
 10225  08E4  0D3D               	rlf	(??___ftmul^(0+128)+2),w
 10226  08E5  00BE               	movwf	(??___ftmul+3)^(0+128)
 10227  08E6  083E               	movf	(??___ftmul+3)^(0+128),w
 10228  08E7  00C4               	movwf	___ftmul@sign^(0+128)
 10229  08E8  0844               	movf	___ftmul@sign^(0+128),w
 10230  08E9  1D03               	btfss	3,2
 10231  08EA  28F2               	goto	l5666
 10232  08EB  3000               	movlw	0
 10233  08EC  00B5               	movwf	?___ftmul^(0+128)
 10234  08ED  3000               	movlw	0
 10235  08EE  00B6               	movwf	(?___ftmul+1)^(0+128)
 10236  08EF  3000               	movlw	0
 10237  08F0  00B7               	movwf	(?___ftmul+2)^(0+128)
 10238  08F1  0008               	return
 10239  08F2                     l5666:	
 10240  08F2  0844               	movf	___ftmul@sign^(0+128),w
 10241  08F3  3E7B               	addlw	123
 10242  08F4  00BB               	movwf	??___ftmul^(0+128)
 10243  08F5  083B               	movf	??___ftmul^(0+128),w
 10244  08F6  07BF               	addwf	___ftmul@exp^(0+128),f
 10245  08F7  0835               	movf	___ftmul@f1^(0+128),w
 10246  08F8  00BB               	movwf	??___ftmul^(0+128)
 10247  08F9  0836               	movf	(___ftmul@f1+1)^(0+128),w
 10248  08FA  00BC               	movwf	(??___ftmul^(0+128)+1)
 10249  08FB  0837               	movf	(___ftmul@f1+2)^(0+128),w
 10250  08FC  00BD               	movwf	(??___ftmul^(0+128)+2)
 10251  08FD  3010               	movlw	16
 10252  08FE                     u6025:	
 10253  08FE  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10254  08FF  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10255  0900  0CBB               	rrf	??___ftmul^(0+128),f
 10256  0901  0B89               	decfsz	9,f
 10257  0902  28FE               	goto	u6025
 10258  0903  083B               	movf	??___ftmul^(0+128),w
 10259  0904  00BE               	movwf	(??___ftmul+3)^(0+128)
 10260  0905  083E               	movf	(??___ftmul+3)^(0+128),w
 10261  0906  00C4               	movwf	___ftmul@sign^(0+128)
 10262  0907  0838               	movf	___ftmul@f2^(0+128),w
 10263  0908  00BB               	movwf	??___ftmul^(0+128)
 10264  0909  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10265  090A  00BC               	movwf	(??___ftmul^(0+128)+1)
 10266  090B  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10267  090C  00BD               	movwf	(??___ftmul^(0+128)+2)
 10268  090D  3010               	movlw	16
 10269  090E                     u6035:	
 10270  090E  36BD               	lsrf	(??___ftmul^(0+128)+2),f
 10271  090F  0CBC               	rrf	(??___ftmul^(0+128)+1),f
 10272  0910  0CBB               	rrf	??___ftmul^(0+128),f
 10273  0911  0B89               	decfsz	9,f
 10274  0912  290E               	goto	u6035
 10275  0913  083B               	movf	??___ftmul^(0+128),w
 10276  0914  00BE               	movwf	(??___ftmul+3)^(0+128)
 10277  0915  083E               	movf	(??___ftmul+3)^(0+128),w
 10278  0916  06C4               	xorwf	___ftmul@sign^(0+128),f
 10279  0917  3080               	movlw	128
 10280  0918  00BB               	movwf	??___ftmul^(0+128)
 10281  0919  083B               	movf	??___ftmul^(0+128),w
 10282  091A  05C4               	andwf	___ftmul@sign^(0+128),f
 10283  091B  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
 10284  091C  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
 10285  091D  30FF               	movlw	255
 10286  091E  05B8               	andwf	___ftmul@f2^(0+128),f
 10287  091F  30FF               	movlw	255
 10288  0920  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
 10289  0921  3000               	movlw	0
 10290  0922  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
 10291  0923  3000               	movlw	0
 10292  0924  00C0               	movwf	___ftmul@f3_as_product^(0+128)
 10293  0925  3000               	movlw	0
 10294  0926  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
 10295  0927  3000               	movlw	0
 10296  0928  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
 10297  0929  3007               	movlw	7
 10298  092A  00BB               	movwf	??___ftmul^(0+128)
 10299  092B  083B               	movf	??___ftmul^(0+128),w
 10300  092C  00C3               	movwf	___ftmul@cntr^(0+128)
 10301  092D                     l5678:	
 10302  092D  1C35               	btfss	___ftmul@f1^(0+128),0
 10303  092E  2935               	goto	l5682
 10304  092F  0838               	movf	___ftmul@f2^(0+128),w
 10305  0930  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10306  0931  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10307  0932  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10308  0933  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10309  0934  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10310  0935                     l5682:	
 10311  0935  3001               	movlw	1
 10312  0936                     u6055:	
 10313  0936  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10314  0937  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10315  0938  0CB5               	rrf	___ftmul@f1^(0+128),f
 10316  0939  0B89               	decfsz	9,f
 10317  093A  2936               	goto	u6055
 10318  093B  3001               	movlw	1
 10319  093C                     u6065:	
 10320  093C  35B8               	lslf	___ftmul@f2^(0+128),f
 10321  093D  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
 10322  093E  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
 10323  093F  0B89               	decfsz	9,f
 10324  0940  293C               	goto	u6065
 10325  0941  3001               	movlw	1
 10326  0942  02C3               	subwf	___ftmul@cntr^(0+128),f
 10327  0943  1D03               	btfss	3,2
 10328  0944  292D               	goto	l5678
 10329  0945  3009               	movlw	9
 10330  0946  00BB               	movwf	??___ftmul^(0+128)
 10331  0947  083B               	movf	??___ftmul^(0+128),w
 10332  0948  00C3               	movwf	___ftmul@cntr^(0+128)
 10333  0949                     l5690:	
 10334  0949  1C35               	btfss	___ftmul@f1^(0+128),0
 10335  094A  2951               	goto	l5694
 10336  094B  0838               	movf	___ftmul@f2^(0+128),w
 10337  094C  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
 10338  094D  0839               	movf	(___ftmul@f2+1)^(0+128),w
 10339  094E  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
 10340  094F  083A               	movf	(___ftmul@f2+2)^(0+128),w
 10341  0950  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
 10342  0951                     l5694:	
 10343  0951  3001               	movlw	1
 10344  0952                     u6095:	
 10345  0952  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
 10346  0953  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
 10347  0954  0CB5               	rrf	___ftmul@f1^(0+128),f
 10348  0955  0B89               	decfsz	9,f
 10349  0956  2952               	goto	u6095
 10350  0957  3001               	movlw	1
 10351  0958                     u6105:	
 10352  0958  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
 10353  0959  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
 10354  095A  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
 10355  095B  0B89               	decfsz	9,f
 10356  095C  2958               	goto	u6105
 10357  095D  3001               	movlw	1
 10358  095E  02C3               	subwf	___ftmul@cntr^(0+128),f
 10359  095F  1D03               	btfss	3,2
 10360  0960  2949               	goto	l5690
 10361  0961  0840               	movf	___ftmul@f3_as_product^(0+128),w
 10362  0962  00A0               	movwf	___ftpack@arg^(0+128)
 10363  0963  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
 10364  0964  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10365  0965  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
 10366  0966  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10367  0967  083F               	movf	___ftmul@exp^(0+128),w
 10368  0968  00BB               	movwf	??___ftmul^(0+128)
 10369  0969  083B               	movf	??___ftmul^(0+128),w
 10370  096A  00A3               	movwf	___ftpack@exp^(0+128)
 10371  096B  0844               	movf	___ftmul@sign^(0+128),w
 10372  096C  00BC               	movwf	(??___ftmul+1)^(0+128)
 10373  096D  083C               	movf	(??___ftmul+1)^(0+128),w
 10374  096E  00A4               	movwf	___ftpack@sign^(0+128)
 10375  096F  3194  2488         	fcall	___ftpack
 10376  0971  0021               	movlb	1	; select bank1
 10377  0972  0820               	movf	?___ftpack^(0+128),w
 10378  0973  00B5               	movwf	?___ftmul^(0+128)
 10379  0974  0821               	movf	(?___ftpack+1)^(0+128),w
 10380  0975  00B6               	movwf	(?___ftmul+1)^(0+128)
 10381  0976  0822               	movf	(?___ftpack+2)^(0+128),w
 10382  0977  00B7               	movwf	(?___ftmul+2)^(0+128)
 10383  0978  0008               	return
 10384  0979                     __end_of___ftmul:	
 10385                           
 10386                           	psect	text27
 10387  081C                     __ptext27:	
 10388 ;; *************** function ___ftdiv *****************
 10389 ;; Defined at:
 10390 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;  f2              3   37[BANK1 ] float 
 10393 ;;  f1              3   40[BANK1 ] float 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;  f3              3   48[BANK1 ] float 
 10396 ;;  sign            1   52[BANK1 ] unsigned char 
 10397 ;;  exp             1   51[BANK1 ] unsigned char 
 10398 ;;  cntr            1   47[BANK1 ] unsigned char 
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  3   37[BANK1 ] float 
 10401 ;; Registers used:
 10402 ;;		wreg, status,2, status,0, pclath, cstack
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10408 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10409 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10410 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10411 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10412 ;;Total ram usage:       16 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; Hardware stack levels required when called:    4
 10415 ;; This function calls:
 10416 ;;		___ftpack
 10417 ;; This function is called by:
 10418 ;;		_map
 10419 ;;		_scalePotValue
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           
 10424                           ;psect for function ___ftdiv
 10425  081C                     ___ftdiv:	
 10426                           
 10427                           ;incstack = 0
 10428                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10429  081C  0021               	movlb	1	; select bank1
 10430  081D  0848               	movf	___ftdiv@f1^(0+128),w
 10431  081E  00CB               	movwf	??___ftdiv^(0+128)
 10432  081F  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10433  0820  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10434  0821  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10435  0822  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10436  0823  1003               	clrc
 10437  0824  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10438  0825  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10439  0826  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10440  0827  084E               	movf	(??___ftdiv+3)^(0+128),w
 10441  0828  00D3               	movwf	___ftdiv@exp^(0+128)
 10442  0829  0853               	movf	___ftdiv@exp^(0+128),w
 10443  082A  1D03               	btfss	3,2
 10444  082B  2833               	goto	l5618
 10445  082C  3000               	movlw	0
 10446  082D  00C5               	movwf	?___ftdiv^(0+128)
 10447  082E  3000               	movlw	0
 10448  082F  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10449  0830  3000               	movlw	0
 10450  0831  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10451  0832  0008               	return
 10452  0833                     l5618:	
 10453  0833  0845               	movf	___ftdiv@f2^(0+128),w
 10454  0834  00CB               	movwf	??___ftdiv^(0+128)
 10455  0835  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10456  0836  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10457  0837  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10458  0838  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10459  0839  1003               	clrc
 10460  083A  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
 10461  083B  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
 10462  083C  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10463  083D  084E               	movf	(??___ftdiv+3)^(0+128),w
 10464  083E  00D4               	movwf	___ftdiv@sign^(0+128)
 10465  083F  0854               	movf	___ftdiv@sign^(0+128),w
 10466  0840  1D03               	btfss	3,2
 10467  0841  2849               	goto	l5624
 10468  0842  3000               	movlw	0
 10469  0843  00C5               	movwf	?___ftdiv^(0+128)
 10470  0844  3000               	movlw	0
 10471  0845  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10472  0846  3000               	movlw	0
 10473  0847  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10474  0848  0008               	return
 10475  0849                     l5624:	
 10476  0849  3000               	movlw	0
 10477  084A  00D0               	movwf	___ftdiv@f3^(0+128)
 10478  084B  3000               	movlw	0
 10479  084C  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
 10480  084D  3000               	movlw	0
 10481  084E  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
 10482  084F  3089               	movlw	137
 10483  0850  0754               	addwf	___ftdiv@sign^(0+128),w
 10484  0851  00CB               	movwf	??___ftdiv^(0+128)
 10485  0852  084B               	movf	??___ftdiv^(0+128),w
 10486  0853  02D3               	subwf	___ftdiv@exp^(0+128),f
 10487  0854  0848               	movf	___ftdiv@f1^(0+128),w
 10488  0855  00CB               	movwf	??___ftdiv^(0+128)
 10489  0856  0849               	movf	(___ftdiv@f1+1)^(0+128),w
 10490  0857  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10491  0858  084A               	movf	(___ftdiv@f1+2)^(0+128),w
 10492  0859  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10493  085A  3010               	movlw	16
 10494  085B                     u5945:	
 10495  085B  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10496  085C  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10497  085D  0CCB               	rrf	??___ftdiv^(0+128),f
 10498  085E  0B89               	decfsz	9,f
 10499  085F  285B               	goto	u5945
 10500  0860  084B               	movf	??___ftdiv^(0+128),w
 10501  0861  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10502  0862  084E               	movf	(??___ftdiv+3)^(0+128),w
 10503  0863  00D4               	movwf	___ftdiv@sign^(0+128)
 10504  0864  0845               	movf	___ftdiv@f2^(0+128),w
 10505  0865  00CB               	movwf	??___ftdiv^(0+128)
 10506  0866  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10507  0867  00CC               	movwf	(??___ftdiv^(0+128)+1)
 10508  0868  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10509  0869  00CD               	movwf	(??___ftdiv^(0+128)+2)
 10510  086A  3010               	movlw	16
 10511  086B                     u5955:	
 10512  086B  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
 10513  086C  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
 10514  086D  0CCB               	rrf	??___ftdiv^(0+128),f
 10515  086E  0B89               	decfsz	9,f
 10516  086F  286B               	goto	u5955
 10517  0870  084B               	movf	??___ftdiv^(0+128),w
 10518  0871  00CE               	movwf	(??___ftdiv+3)^(0+128)
 10519  0872  084E               	movf	(??___ftdiv+3)^(0+128),w
 10520  0873  06D4               	xorwf	___ftdiv@sign^(0+128),f
 10521  0874  3080               	movlw	128
 10522  0875  00CB               	movwf	??___ftdiv^(0+128)
 10523  0876  084B               	movf	??___ftdiv^(0+128),w
 10524  0877  05D4               	andwf	___ftdiv@sign^(0+128),f
 10525  0878  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
 10526  0879  30FF               	movlw	255
 10527  087A  05C8               	andwf	___ftdiv@f1^(0+128),f
 10528  087B  30FF               	movlw	255
 10529  087C  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
 10530  087D  3000               	movlw	0
 10531  087E  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
 10532  087F  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
 10533  0880  30FF               	movlw	255
 10534  0881  05C5               	andwf	___ftdiv@f2^(0+128),f
 10535  0882  30FF               	movlw	255
 10536  0883  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
 10537  0884  3000               	movlw	0
 10538  0885  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
 10539  0886  3018               	movlw	24
 10540  0887  00CB               	movwf	??___ftdiv^(0+128)
 10541  0888  084B               	movf	??___ftdiv^(0+128),w
 10542  0889  00CF               	movwf	___ftdiv@cntr^(0+128)
 10543  088A                     l5638:	
 10544  088A  3001               	movlw	1
 10545  088B                     u5965:	
 10546  088B  35D0               	lslf	___ftdiv@f3^(0+128),f
 10547  088C  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
 10548  088D  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
 10549  088E  0B89               	decfsz	9,f
 10550  088F  288B               	goto	u5965
 10551  0890  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10552  0891  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
 10553  0892  1D03               	skipz
 10554  0893  289A               	goto	u5975
 10555  0894  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10556  0895  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
 10557  0896  1D03               	skipz
 10558  0897  289A               	goto	u5975
 10559  0898  0845               	movf	___ftdiv@f2^(0+128),w
 10560  0899  0248               	subwf	___ftdiv@f1^(0+128),w
 10561  089A                     u5975:	
 10562  089A  1C03               	skipc
 10563  089B  28A3               	goto	l5646
 10564  089C  0845               	movf	___ftdiv@f2^(0+128),w
 10565  089D  02C8               	subwf	___ftdiv@f1^(0+128),f
 10566  089E  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10567  089F  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
 10568  08A0  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10569  08A1  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
 10570  08A2  1450               	bsf	___ftdiv@f3^(0+128),0
 10571  08A3                     l5646:	
 10572  08A3  3001               	movlw	1
 10573  08A4                     u5985:	
 10574  08A4  35C8               	lslf	___ftdiv@f1^(0+128),f
 10575  08A5  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
 10576  08A6  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
 10577  08A7  0B89               	decfsz	9,f
 10578  08A8  28A4               	goto	u5985
 10579  08A9  3001               	movlw	1
 10580  08AA  02CF               	subwf	___ftdiv@cntr^(0+128),f
 10581  08AB  1D03               	btfss	3,2
 10582  08AC  288A               	goto	l5638
 10583  08AD  0850               	movf	___ftdiv@f3^(0+128),w
 10584  08AE  00A0               	movwf	___ftpack@arg^(0+128)
 10585  08AF  0851               	movf	(___ftdiv@f3+1)^(0+128),w
 10586  08B0  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10587  08B1  0852               	movf	(___ftdiv@f3+2)^(0+128),w
 10588  08B2  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10589  08B3  0853               	movf	___ftdiv@exp^(0+128),w
 10590  08B4  00CB               	movwf	??___ftdiv^(0+128)
 10591  08B5  084B               	movf	??___ftdiv^(0+128),w
 10592  08B6  00A3               	movwf	___ftpack@exp^(0+128)
 10593  08B7  0854               	movf	___ftdiv@sign^(0+128),w
 10594  08B8  00CC               	movwf	(??___ftdiv+1)^(0+128)
 10595  08B9  084C               	movf	(??___ftdiv+1)^(0+128),w
 10596  08BA  00A4               	movwf	___ftpack@sign^(0+128)
 10597  08BB  3194  2488         	fcall	___ftpack
 10598  08BD  0021               	movlb	1	; select bank1
 10599  08BE  0820               	movf	?___ftpack^(0+128),w
 10600  08BF  00C5               	movwf	?___ftdiv^(0+128)
 10601  08C0  0821               	movf	(?___ftpack+1)^(0+128),w
 10602  08C1  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10603  08C2  0822               	movf	(?___ftpack+2)^(0+128),w
 10604  08C3  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10605  08C4  0008               	return
 10606  08C5                     __end_of___ftdiv:	
 10607                           
 10608                           	psect	text28
 10609  0B1E                     __ptext28:	
 10610 ;; *************** function ___ftadd *****************
 10611 ;; Defined at:
 10612 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10613 ;; Parameters:    Size  Location     Type
 10614 ;;  f1              3    8[BANK1 ] float 
 10615 ;;  f2              3   11[BANK1 ] float 
 10616 ;; Auto vars:     Size  Location     Type
 10617 ;;  exp1            1   20[BANK1 ] unsigned char 
 10618 ;;  exp2            1   19[BANK1 ] unsigned char 
 10619 ;;  sign            1   18[BANK1 ] unsigned char 
 10620 ;; Return value:  Size  Location     Type
 10621 ;;                  3    8[BANK1 ] float 
 10622 ;; Registers used:
 10623 ;;		wreg, status,2, status,0, pclath, cstack
 10624 ;; Tracked objects:
 10625 ;;		On entry : 0/0
 10626 ;;		On exit  : 0/0
 10627 ;;		Unchanged: 0/0
 10628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10629 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10630 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10631 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10632 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10633 ;;Total ram usage:       13 bytes
 10634 ;; Hardware stack levels used:    1
 10635 ;; Hardware stack levels required when called:    4
 10636 ;; This function calls:
 10637 ;;		___ftpack
 10638 ;; This function is called by:
 10639 ;;		_map
 10640 ;;		_scalePotValue
 10641 ;; This function uses a non-reentrant model
 10642 ;;
 10643                           
 10644                           
 10645                           ;psect for function ___ftadd
 10646  0B1E                     ___ftadd:	
 10647                           
 10648                           ;incstack = 0
 10649                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10650  0B1E  0021               	movlb	1	; select bank1
 10651  0B1F  0828               	movf	___ftadd@f1^(0+128),w
 10652  0B20  00AE               	movwf	??___ftadd^(0+128)
 10653  0B21  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10654  0B22  00AF               	movwf	(??___ftadd^(0+128)+1)
 10655  0B23  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10656  0B24  00B0               	movwf	(??___ftadd^(0+128)+2)
 10657  0B25  1003               	clrc
 10658  0B26  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10659  0B27  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10660  0B28  00B1               	movwf	(??___ftadd+3)^(0+128)
 10661  0B29  0831               	movf	(??___ftadd+3)^(0+128),w
 10662  0B2A  00B4               	movwf	___ftadd@exp1^(0+128)
 10663  0B2B  082B               	movf	___ftadd@f2^(0+128),w
 10664  0B2C  00AE               	movwf	??___ftadd^(0+128)
 10665  0B2D  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10666  0B2E  00AF               	movwf	(??___ftadd^(0+128)+1)
 10667  0B2F  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10668  0B30  00B0               	movwf	(??___ftadd^(0+128)+2)
 10669  0B31  1003               	clrc
 10670  0B32  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10671  0B33  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10672  0B34  00B1               	movwf	(??___ftadd+3)^(0+128)
 10673  0B35  0831               	movf	(??___ftadd+3)^(0+128),w
 10674  0B36  00B3               	movwf	___ftadd@exp2^(0+128)
 10675  0B37  0834               	movf	___ftadd@exp1^(0+128),w
 10676  0B38  1903               	btfsc	3,2
 10677  0B39  2B46               	goto	l5548
 10678  0B3A  0833               	movf	___ftadd@exp2^(0+128),w
 10679  0B3B  0234               	subwf	___ftadd@exp1^(0+128),w
 10680  0B3C  1803               	skipnc
 10681  0B3D  2B4D               	goto	l5552
 10682  0B3E  0334               	decf	___ftadd@exp1^(0+128),w
 10683  0B3F  3AFF               	xorlw	255
 10684  0B40  0733               	addwf	___ftadd@exp2^(0+128),w
 10685  0B41  00AE               	movwf	??___ftadd^(0+128)
 10686  0B42  3019               	movlw	25
 10687  0B43  022E               	subwf	??___ftadd^(0+128),w
 10688  0B44  1C03               	skipc
 10689  0B45  2B4D               	goto	l5552
 10690  0B46                     l5548:	
 10691  0B46  082B               	movf	___ftadd@f2^(0+128),w
 10692  0B47  00A8               	movwf	?___ftadd^(0+128)
 10693  0B48  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10694  0B49  00A9               	movwf	(?___ftadd+1)^(0+128)
 10695  0B4A  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10696  0B4B  00AA               	movwf	(?___ftadd+2)^(0+128)
 10697  0B4C  0008               	return
 10698  0B4D                     l5552:	
 10699  0B4D  0833               	movf	___ftadd@exp2^(0+128),w
 10700  0B4E  1903               	btfsc	3,2
 10701  0B4F  0008               	return
 10702  0B50  0834               	movf	___ftadd@exp1^(0+128),w
 10703  0B51  0233               	subwf	___ftadd@exp2^(0+128),w
 10704  0B52  1803               	skipnc
 10705  0B53  2B5C               	goto	l5558
 10706  0B54  0333               	decf	___ftadd@exp2^(0+128),w
 10707  0B55  3AFF               	xorlw	255
 10708  0B56  0734               	addwf	___ftadd@exp1^(0+128),w
 10709  0B57  00AE               	movwf	??___ftadd^(0+128)
 10710  0B58  3019               	movlw	25
 10711  0B59  022E               	subwf	??___ftadd^(0+128),w
 10712  0B5A  1803               	btfsc	3,0
 10713  0B5B  0008               	return
 10714  0B5C                     l5558:	
 10715  0B5C  3006               	movlw	6
 10716  0B5D  00AE               	movwf	??___ftadd^(0+128)
 10717  0B5E  082E               	movf	??___ftadd^(0+128),w
 10718  0B5F  00B2               	movwf	___ftadd@sign^(0+128)
 10719  0B60  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10720  0B61  17B2               	bsf	___ftadd@sign^(0+128),7
 10721  0B62  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10722  0B63  1732               	bsf	___ftadd@sign^(0+128),6
 10723  0B64  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10724  0B65  30FF               	movlw	255
 10725  0B66  05A8               	andwf	___ftadd@f1^(0+128),f
 10726  0B67  30FF               	movlw	255
 10727  0B68  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10728  0B69  3000               	movlw	0
 10729  0B6A  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10730  0B6B  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10731  0B6C  30FF               	movlw	255
 10732  0B6D  05AB               	andwf	___ftadd@f2^(0+128),f
 10733  0B6E  30FF               	movlw	255
 10734  0B6F  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10735  0B70  3000               	movlw	0
 10736  0B71  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10737  0B72  0833               	movf	___ftadd@exp2^(0+128),w
 10738  0B73  0234               	subwf	___ftadd@exp1^(0+128),w
 10739  0B74  1803               	skipnc
 10740  0B75  2B98               	goto	l5580
 10741  0B76                     l5570:	
 10742  0B76  3001               	movlw	1
 10743  0B77                     u5785:	
 10744  0B77  35AB               	lslf	___ftadd@f2^(0+128),f
 10745  0B78  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 10746  0B79  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 10747  0B7A  0B89               	decfsz	9,f
 10748  0B7B  2B77               	goto	u5785
 10749  0B7C  3001               	movlw	1
 10750  0B7D  02B3               	subwf	___ftadd@exp2^(0+128),f
 10751  0B7E  0833               	movf	___ftadd@exp2^(0+128),w
 10752  0B7F  0634               	xorwf	___ftadd@exp1^(0+128),w
 10753  0B80  1903               	skipnz
 10754  0B81  2B93               	goto	l5578
 10755  0B82  3001               	movlw	1
 10756  0B83  02B2               	subwf	___ftadd@sign^(0+128),f
 10757  0B84  0832               	movf	___ftadd@sign^(0+128),w
 10758  0B85  3907               	andlw	7
 10759  0B86  1903               	btfsc	3,2
 10760  0B87  2B93               	goto	l5578
 10761  0B88  2B76               	goto	l5570
 10762  0B89                     l5576:	
 10763  0B89  3001               	movlw	1
 10764  0B8A                     u5815:	
 10765  0B8A  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 10766  0B8B  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 10767  0B8C  0CA8               	rrf	___ftadd@f1^(0+128),f
 10768  0B8D  0B89               	decfsz	9,f
 10769  0B8E  2B8A               	goto	u5815
 10770  0B8F  3001               	movlw	1
 10771  0B90  00AE               	movwf	??___ftadd^(0+128)
 10772  0B91  082E               	movf	??___ftadd^(0+128),w
 10773  0B92  07B4               	addwf	___ftadd@exp1^(0+128),f
 10774  0B93                     l5578:	
 10775  0B93  0834               	movf	___ftadd@exp1^(0+128),w
 10776  0B94  0633               	xorwf	___ftadd@exp2^(0+128),w
 10777  0B95  1903               	btfsc	3,2
 10778  0B96  2BBD               	goto	l1623
 10779  0B97  2B89               	goto	l5576
 10780  0B98                     l5580:	
 10781  0B98  0834               	movf	___ftadd@exp1^(0+128),w
 10782  0B99  0233               	subwf	___ftadd@exp2^(0+128),w
 10783  0B9A  1803               	skipnc
 10784  0B9B  2BBD               	goto	l1623
 10785  0B9C                     l5582:	
 10786  0B9C  3001               	movlw	1
 10787  0B9D                     u5845:	
 10788  0B9D  35A8               	lslf	___ftadd@f1^(0+128),f
 10789  0B9E  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 10790  0B9F  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 10791  0BA0  0B89               	decfsz	9,f
 10792  0BA1  2B9D               	goto	u5845
 10793  0BA2  3001               	movlw	1
 10794  0BA3  02B4               	subwf	___ftadd@exp1^(0+128),f
 10795  0BA4  0833               	movf	___ftadd@exp2^(0+128),w
 10796  0BA5  0634               	xorwf	___ftadd@exp1^(0+128),w
 10797  0BA6  1903               	skipnz
 10798  0BA7  2BB9               	goto	l5590
 10799  0BA8  3001               	movlw	1
 10800  0BA9  02B2               	subwf	___ftadd@sign^(0+128),f
 10801  0BAA  0832               	movf	___ftadd@sign^(0+128),w
 10802  0BAB  3907               	andlw	7
 10803  0BAC  1903               	btfsc	3,2
 10804  0BAD  2BB9               	goto	l5590
 10805  0BAE  2B9C               	goto	l5582
 10806  0BAF                     l5588:	
 10807  0BAF  3001               	movlw	1
 10808  0BB0                     u5875:	
 10809  0BB0  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 10810  0BB1  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 10811  0BB2  0CAB               	rrf	___ftadd@f2^(0+128),f
 10812  0BB3  0B89               	decfsz	9,f
 10813  0BB4  2BB0               	goto	u5875
 10814  0BB5  3001               	movlw	1
 10815  0BB6  00AE               	movwf	??___ftadd^(0+128)
 10816  0BB7  082E               	movf	??___ftadd^(0+128),w
 10817  0BB8  07B3               	addwf	___ftadd@exp2^(0+128),f
 10818  0BB9                     l5590:	
 10819  0BB9  0834               	movf	___ftadd@exp1^(0+128),w
 10820  0BBA  0633               	xorwf	___ftadd@exp2^(0+128),w
 10821  0BBB  1D03               	skipz
 10822  0BBC  2BAF               	goto	l5588
 10823  0BBD                     l1623:	
 10824  0BBD  1FB2               	btfss	___ftadd@sign^(0+128),7
 10825  0BBE  2BCF               	goto	l5594
 10826  0BBF  30FF               	movlw	255
 10827  0BC0  06A8               	xorwf	___ftadd@f1^(0+128),f
 10828  0BC1  30FF               	movlw	255
 10829  0BC2  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 10830  0BC3  30FF               	movlw	255
 10831  0BC4  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 10832  0BC5  3001               	movlw	1
 10833  0BC6  07A8               	addwf	___ftadd@f1^(0+128),f
 10834  0BC7  3000               	movlw	0
 10835  0BC8  1803               	skipnc
 10836  0BC9  3001               	movlw	1
 10837  0BCA  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 10838  0BCB  3000               	movlw	0
 10839  0BCC  1803               	skipnc
 10840  0BCD  3001               	movlw	1
 10841  0BCE  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 10842  0BCF                     l5594:	
 10843  0BCF  1F32               	btfss	___ftadd@sign^(0+128),6
 10844  0BD0  2BE1               	goto	l5598
 10845  0BD1  30FF               	movlw	255
 10846  0BD2  06AB               	xorwf	___ftadd@f2^(0+128),f
 10847  0BD3  30FF               	movlw	255
 10848  0BD4  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10849  0BD5  30FF               	movlw	255
 10850  0BD6  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10851  0BD7  3001               	movlw	1
 10852  0BD8  07AB               	addwf	___ftadd@f2^(0+128),f
 10853  0BD9  3000               	movlw	0
 10854  0BDA  1803               	skipnc
 10855  0BDB  3001               	movlw	1
 10856  0BDC  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10857  0BDD  3000               	movlw	0
 10858  0BDE  1803               	skipnc
 10859  0BDF  3001               	movlw	1
 10860  0BE0  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10861  0BE1                     l5598:	
 10862  0BE1  01B2               	clrf	___ftadd@sign^(0+128)
 10863  0BE2  0828               	movf	___ftadd@f1^(0+128),w
 10864  0BE3  07AB               	addwf	___ftadd@f2^(0+128),f
 10865  0BE4  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10866  0BE5  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 10867  0BE6  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10868  0BE7  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 10869  0BE8  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 10870  0BE9  2BFC               	goto	l5608
 10871  0BEA  30FF               	movlw	255
 10872  0BEB  06AB               	xorwf	___ftadd@f2^(0+128),f
 10873  0BEC  30FF               	movlw	255
 10874  0BED  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10875  0BEE  30FF               	movlw	255
 10876  0BEF  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10877  0BF0  3001               	movlw	1
 10878  0BF1  07AB               	addwf	___ftadd@f2^(0+128),f
 10879  0BF2  3000               	movlw	0
 10880  0BF3  1803               	skipnc
 10881  0BF4  3001               	movlw	1
 10882  0BF5  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10883  0BF6  3000               	movlw	0
 10884  0BF7  1803               	skipnc
 10885  0BF8  3001               	movlw	1
 10886  0BF9  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10887  0BFA  01B2               	clrf	___ftadd@sign^(0+128)
 10888  0BFB  0AB2               	incf	___ftadd@sign^(0+128),f
 10889  0BFC                     l5608:	
 10890  0BFC  082B               	movf	___ftadd@f2^(0+128),w
 10891  0BFD  00A0               	movwf	___ftpack@arg^(0+128)
 10892  0BFE  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10893  0BFF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10894  0C00  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10895  0C01  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10896  0C02  0834               	movf	___ftadd@exp1^(0+128),w
 10897  0C03  00AE               	movwf	??___ftadd^(0+128)
 10898  0C04  082E               	movf	??___ftadd^(0+128),w
 10899  0C05  00A3               	movwf	___ftpack@exp^(0+128)
 10900  0C06  0832               	movf	___ftadd@sign^(0+128),w
 10901  0C07  00AF               	movwf	(??___ftadd+1)^(0+128)
 10902  0C08  082F               	movf	(??___ftadd+1)^(0+128),w
 10903  0C09  00A4               	movwf	___ftpack@sign^(0+128)
 10904  0C0A  3194  2488         	fcall	___ftpack
 10905  0C0C  0021               	movlb	1	; select bank1
 10906  0C0D  0820               	movf	?___ftpack^(0+128),w
 10907  0C0E  00A8               	movwf	?___ftadd^(0+128)
 10908  0C0F  0821               	movf	(?___ftpack+1)^(0+128),w
 10909  0C10  00A9               	movwf	(?___ftadd+1)^(0+128)
 10910  0C11  0822               	movf	(?___ftpack+2)^(0+128),w
 10911  0C12  00AA               	movwf	(?___ftadd+2)^(0+128)
 10912  0C13  0008               	return
 10913  0C14                     __end_of___ftadd:	
 10914                           
 10915                           	psect	text29
 10916  1488                     __ptext29:	
 10917 ;; *************** function ___ftpack *****************
 10918 ;; Defined at:
 10919 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  arg             3    0[BANK1 ] unsigned um
 10922 ;;  exp             1    3[BANK1 ] unsigned char 
 10923 ;;  sign            1    4[BANK1 ] unsigned char 
 10924 ;; Auto vars:     Size  Location     Type
 10925 ;;		None
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  3    0[BANK1 ] float 
 10928 ;; Registers used:
 10929 ;;		wreg, status,2, status,0
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10935 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10937 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10938 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10939 ;;Total ram usage:        8 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; Hardware stack levels required when called:    3
 10942 ;; This function calls:
 10943 ;;		Nothing
 10944 ;; This function is called by:
 10945 ;;		___altoft
 10946 ;;		___awtoft
 10947 ;;		___ftadd
 10948 ;;		___ftdiv
 10949 ;;		___ftmul
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           
 10954                           ;psect for function ___ftpack
 10955  1488                     ___ftpack:	
 10956                           
 10957                           ;incstack = 0
 10958                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10959  1488  0021               	movlb	1	; select bank1
 10960  1489  0823               	movf	___ftpack@exp^(0+128),w
 10961  148A  1903               	btfsc	3,2
 10962  148B  2C91               	goto	l5166
 10963  148C  0822               	movf	(___ftpack@arg+2)^(0+128),w
 10964  148D  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 10965  148E  0420               	iorwf	___ftpack@arg^(0+128),w
 10966  148F  1D03               	skipz
 10967  1490  2CA2               	goto	l5172
 10968  1491                     l5166:	
 10969  1491  3000               	movlw	0
 10970  1492  00A0               	movwf	?___ftpack^(0+128)
 10971  1493  3000               	movlw	0
 10972  1494  00A1               	movwf	(?___ftpack+1)^(0+128)
 10973  1495  3000               	movlw	0
 10974  1496  00A2               	movwf	(?___ftpack+2)^(0+128)
 10975  1497  0008               	return
 10976  1498                     l5170:	
 10977  1498  3001               	movlw	1
 10978  1499  00A5               	movwf	??___ftpack^(0+128)
 10979  149A  0825               	movf	??___ftpack^(0+128),w
 10980  149B  07A3               	addwf	___ftpack@exp^(0+128),f
 10981  149C  3001               	movlw	1
 10982  149D                     u5195:	
 10983  149D  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10984  149E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10985  149F  0CA0               	rrf	___ftpack@arg^(0+128),f
 10986  14A0  0B89               	decfsz	9,f
 10987  14A1  2C9D               	goto	u5195
 10988  14A2                     l5172:	
 10989  14A2  30FE               	movlw	254
 10990  14A3  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10991  14A4  1903               	btfsc	3,2
 10992  14A5  2CBB               	goto	l1592
 10993  14A6  2C98               	goto	l5170
 10994  14A7                     l5174:	
 10995  14A7  3001               	movlw	1
 10996  14A8  00A5               	movwf	??___ftpack^(0+128)
 10997  14A9  0825               	movf	??___ftpack^(0+128),w
 10998  14AA  07A3               	addwf	___ftpack@exp^(0+128),f
 10999  14AB  3001               	movlw	1
 11000  14AC  07A0               	addwf	___ftpack@arg^(0+128),f
 11001  14AD  3000               	movlw	0
 11002  14AE  1803               	skipnc
 11003  14AF  3001               	movlw	1
 11004  14B0  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 11005  14B1  3000               	movlw	0
 11006  14B2  1803               	skipnc
 11007  14B3  3001               	movlw	1
 11008  14B4  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 11009  14B5  3001               	movlw	1
 11010  14B6                     u5215:	
 11011  14B6  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11012  14B7  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11013  14B8  0CA0               	rrf	___ftpack@arg^(0+128),f
 11014  14B9  0B89               	decfsz	9,f
 11015  14BA  2CB6               	goto	u5215
 11016  14BB                     l1592:	
 11017  14BB  30FF               	movlw	255
 11018  14BC  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11019  14BD  1903               	btfsc	3,2
 11020  14BE  2CC8               	goto	l5182
 11021  14BF  2CA7               	goto	l5174
 11022  14C0                     l5180:	
 11023  14C0  3001               	movlw	1
 11024  14C1  02A3               	subwf	___ftpack@exp^(0+128),f
 11025  14C2  3001               	movlw	1
 11026  14C3                     u5235:	
 11027  14C3  35A0               	lslf	___ftpack@arg^(0+128),f
 11028  14C4  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 11029  14C5  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 11030  14C6  0B89               	decfsz	9,f
 11031  14C7  2CC3               	goto	u5235
 11032  14C8                     l5182:	
 11033  14C8  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 11034  14C9  2CCE               	goto	l1599
 11035  14CA  3002               	movlw	2
 11036  14CB  0223               	subwf	___ftpack@exp^(0+128),w
 11037  14CC  1803               	skipnc
 11038  14CD  2CC0               	goto	l5180
 11039  14CE                     l1599:	
 11040  14CE  1823               	btfsc	___ftpack@exp^(0+128),0
 11041  14CF  2CD6               	goto	l1600
 11042  14D0  30FF               	movlw	255
 11043  14D1  05A0               	andwf	___ftpack@arg^(0+128),f
 11044  14D2  307F               	movlw	127
 11045  14D3  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 11046  14D4  30FF               	movlw	255
 11047  14D5  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 11048  14D6                     l1600:	
 11049  14D6  1003               	clrc
 11050  14D7  0CA3               	rrf	___ftpack@exp^(0+128),f
 11051  14D8  0823               	movf	___ftpack@exp^(0+128),w
 11052  14D9  00A5               	movwf	??___ftpack^(0+128)
 11053  14DA  01A6               	clrf	(??___ftpack^(0+128)+1)
 11054  14DB  01A7               	clrf	(??___ftpack^(0+128)+2)
 11055  14DC  3010               	movlw	16
 11056  14DD                     u5275:	
 11057  14DD  35A5               	lslf	??___ftpack^(0+128),f
 11058  14DE  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 11059  14DF  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 11060  14E0  0B89               	decfsz	9,f
 11061  14E1  2CDD               	goto	u5275
 11062  14E2  0825               	movf	??___ftpack^(0+128),w
 11063  14E3  04A0               	iorwf	___ftpack@arg^(0+128),f
 11064  14E4  0826               	movf	(??___ftpack+1)^(0+128),w
 11065  14E5  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 11066  14E6  0827               	movf	(??___ftpack+2)^(0+128),w
 11067  14E7  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 11068  14E8  0824               	movf	___ftpack@sign^(0+128),w
 11069  14E9  1903               	btfsc	3,2
 11070  14EA  0008               	return
 11071  14EB  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 11072  14EC  0008               	return
 11073  14ED                     __end_of___ftpack:	
 11074                           
 11075                           	psect	text30
 11076  1DA6                     __ptext30:	
 11077 ;; *************** function _initSwitchBypass *****************
 11078 ;; Defined at:
 11079 ;;		line 29 in file "SwitchBypass.c"
 11080 ;; Parameters:    Size  Location     Type
 11081 ;;		None
 11082 ;; Auto vars:     Size  Location     Type
 11083 ;;  initState       2   22[BANK1 ] int 
 11084 ;; Return value:  Size  Location     Type
 11085 ;;                  1    wreg      void 
 11086 ;; Registers used:
 11087 ;;		wreg, status,2, status,0, pclath, cstack
 11088 ;; Tracked objects:
 11089 ;;		On entry : 0/0
 11090 ;;		On exit  : 0/0
 11091 ;;		Unchanged: 0/0
 11092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11094 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11096 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11097 ;;Total ram usage:        2 bytes
 11098 ;; Hardware stack levels used:    1
 11099 ;; Hardware stack levels required when called:    6
 11100 ;; This function calls:
 11101 ;;		_getSwitchBypassState
 11102 ;;		_setSwitchBypassState
 11103 ;; This function is called by:
 11104 ;;		_main
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           
 11109                           ;psect for function _initSwitchBypass
 11110  1DA6                     _initSwitchBypass:	
 11111                           
 11112                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 11113                           
 11114                           ;incstack = 0
 11115                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 11116  1DA6  3187  27FB  319D   	fcall	_getSwitchBypassState
 11117  1DA9  0021               	movlb	1	; select bank1
 11118  1DAA  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 11119  1DAB  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 11120  1DAC  0820               	movf	?_getSwitchBypassState^(0+128),w
 11121  1DAD  00B6               	movwf	initSwitchBypass@initState^(0+128)
 11122                           
 11123                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 11124  1DAE  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 11125  1DAF  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 11126  1DB0  0836               	movf	initSwitchBypass@initState^(0+128),w
 11127  1DB1  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 11128  1DB2  3192  22AC         	fcall	_setSwitchBypassState
 11129  1DB4  0008               	return
 11130  1DB5                     __end_of_initSwitchBypass:	
 11131                           
 11132                           	psect	text31
 11133  12AC                     __ptext31:	
 11134 ;; *************** function _setSwitchBypassState *****************
 11135 ;; Defined at:
 11136 ;;		line 134 in file "SwitchBypass.c"
 11137 ;; Parameters:    Size  Location     Type
 11138 ;;  f_state         2   18[BANK1 ] int 
 11139 ;; Auto vars:     Size  Location     Type
 11140 ;;		None
 11141 ;; Return value:  Size  Location     Type
 11142 ;;                  1    wreg      void 
 11143 ;; Registers used:
 11144 ;;		wreg, status,2, status,0, pclath, cstack
 11145 ;; Tracked objects:
 11146 ;;		On entry : 0/0
 11147 ;;		On exit  : 0/0
 11148 ;;		Unchanged: 0/0
 11149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11150 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11152 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11153 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11154 ;;Total ram usage:        4 bytes
 11155 ;; Hardware stack levels used:    1
 11156 ;; Hardware stack levels required when called:    5
 11157 ;; This function calls:
 11158 ;;		_updateSwitchBypassState
 11159 ;;		_wait_ms
 11160 ;; This function is called by:
 11161 ;;		_initSwitchBypass
 11162 ;;		_updateSwitchBypass
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           
 11167                           ;psect for function _setSwitchBypassState
 11168  12AC                     _setSwitchBypassState:	
 11169                           
 11170                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 11171                           
 11172                           ;incstack = 0
 11173                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 11174  12AC  0020               	movlb	0	; select bank0
 11175  12AD  0869               	movf	_switchBypass_state,w
 11176  12AE  0021               	movlb	1	; select bank1
 11177  12AF  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11178  12B0  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11179  12B1  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 11180  12B2  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 11181  12B3  1D03               	skipz
 11182  12B4  2AB7               	goto	u5515
 11183  12B5  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11184  12B6  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 11185  12B7                     u5515:	
 11186  12B7  1903               	btfsc	3,2
 11187  12B8  0008               	return
 11188                           
 11189                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 11190  12B9  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11191  12BA  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11192  12BB  0834               	movf	??_setSwitchBypassState^(0+128),w
 11193  12BC  0020               	movlb	0	; select bank0
 11194  12BD  00E9               	movwf	_switchBypass_state
 11195                           
 11196                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 11197  12BE  0021               	movlb	1	; select bank1
 11198  12BF  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11199  12C0  0022               	movlb	2	; select bank2
 11200  12C1  1C03               	skipc
 11201  12C2  110D               	bcf	13,2	;volatile
 11202  12C3  1803               	skipnc
 11203  12C4  150D               	bsf	13,2	;volatile
 11204                           
 11205                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 11206  12C5  118D               	bcf	13,3	;volatile
 11207                           
 11208                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 11209  12C6  0021               	movlb	1	; select bank1
 11210  12C7  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 11211  12C8  0027               	movlb	7	; select bank7
 11212  12C9  1C03               	skipc
 11213  12CA  110D               	bcf	13,2	;volatile
 11214  12CB  1803               	skipnc
 11215  12CC  150D               	bsf	13,2	;volatile
 11216                           
 11217                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 11218  12CD  0021               	movlb	1	; select bank1
 11219  12CE  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 11220  12CF  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 11221  12D0  1D03               	btfss	3,2
 11222  12D1  2AD5               	goto	u5520
 11223  12D2  0027               	movlb	7	; select bank7
 11224  12D3  148D               	bsf	13,1	;volatile
 11225  12D4  2AD7               	goto	l5444
 11226  12D5                     u5520:	
 11227  12D5  0027               	movlb	7	; select bank7
 11228  12D6  108D               	bcf	13,1	;volatile
 11229  12D7                     l5444:	
 11230                           
 11231                           ;SwitchBypass.c: 142: wait_ms(20);
 11232  12D7  3014               	movlw	20
 11233  12D8  0021               	movlb	1	; select bank1
 11234  12D9  00AC               	movwf	wait_ms@timeSec^(0+128)
 11235  12DA  3000               	movlw	0
 11236  12DB  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11237  12DC  319F  2762  3192   	fcall	_wait_ms
 11238                           
 11239                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11240  12DF  0027               	movlb	7	; select bank7
 11241  12E0  110D               	bcf	13,2	;volatile
 11242                           
 11243                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11244  12E1  108D               	bcf	13,1	;volatile
 11245                           
 11246                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11247  12E2  0020               	movlb	0	; select bank0
 11248  12E3  0869               	movf	_switchBypass_state,w
 11249  12E4  0021               	movlb	1	; select bank1
 11250  12E5  00B4               	movwf	??_setSwitchBypassState^(0+128)
 11251  12E6  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 11252  12E7  0834               	movf	??_setSwitchBypassState^(0+128),w
 11253  12E8  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 11254  12E9  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 11255  12EA  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 11256  12EB  3180  2003  3192   	fcall	_updateSwitchBypassState
 11257                           
 11258                           ;SwitchBypass.c: 148: wait_ms(20);
 11259  12EE  3014               	movlw	20
 11260  12EF  0021               	movlb	1	; select bank1
 11261  12F0  00AC               	movwf	wait_ms@timeSec^(0+128)
 11262  12F1  3000               	movlw	0
 11263  12F2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 11264  12F3  319F  2762         	fcall	_wait_ms
 11265  12F5  0008               	return
 11266  12F6                     __end_of_setSwitchBypassState:	
 11267                           
 11268                           	psect	text32
 11269  1F62                     __ptext32:	
 11270 ;; *************** function _wait_ms *****************
 11271 ;; Defined at:
 11272 ;;		line 23 in file "system.c"
 11273 ;; Parameters:    Size  Location     Type
 11274 ;;  timeSec         2   12[BANK1 ] unsigned int 
 11275 ;; Auto vars:     Size  Location     Type
 11276 ;;  timemsl         4   14[BANK1 ] long 
 11277 ;; Return value:  Size  Location     Type
 11278 ;;                  1    wreg      void 
 11279 ;; Registers used:
 11280 ;;		wreg, status,2, status,0, pclath, cstack
 11281 ;; Tracked objects:
 11282 ;;		On entry : 0/0
 11283 ;;		On exit  : 0/0
 11284 ;;		Unchanged: 0/0
 11285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11286 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11287 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11289 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11290 ;;Total ram usage:        6 bytes
 11291 ;; Hardware stack levels used:    1
 11292 ;; Hardware stack levels required when called:    4
 11293 ;; This function calls:
 11294 ;;		___lmul
 11295 ;; This function is called by:
 11296 ;;		_star_tactiles
 11297 ;;		_solidring_tactiles
 11298 ;;		_read_bottom_tactile
 11299 ;;		_read_top_tactile
 11300 ;;		_setSwitchBypassState
 11301 ;;		_setDoublePressState
 11302 ;;		_initExpModeState
 11303 ;;		_showError_Alternating
 11304 ;;		_show_error
 11305 ;;		_show_cancel
 11306 ;;		_ring_tactiles
 11307 ;; This function uses a non-reentrant model
 11308 ;;
 11309                           
 11310                           
 11311                           ;psect for function _wait_ms
 11312  1F62                     _wait_ms:	
 11313                           
 11314                           ;system.c: 25: long timemsl = 0;
 11315                           
 11316                           ;incstack = 0
 11317                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11318  1F62  3000               	movlw	0
 11319  1F63  0021               	movlb	1	; select bank1
 11320  1F64  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11321  1F65  3000               	movlw	0
 11322  1F66  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11323  1F67  3000               	movlw	0
 11324  1F68  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11325  1F69  3000               	movlw	0
 11326  1F6A  00AE               	movwf	wait_ms@timemsl^(0+128)
 11327                           
 11328                           ;system.c: 26: timemsl = timeSec * 1000l;
 11329  1F6B  082C               	movf	wait_ms@timeSec^(0+128),w
 11330  1F6C  00A0               	movwf	___lmul@multiplier^(0+128)
 11331  1F6D  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 11332  1F6E  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 11333  1F6F  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 11334  1F70  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 11335  1F71  3000               	movlw	0
 11336  1F72  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 11337  1F73  3000               	movlw	0
 11338  1F74  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 11339  1F75  3003               	movlw	3
 11340  1F76  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 11341  1F77  30E8               	movlw	232
 11342  1F78  00A4               	movwf	___lmul@multiplicand^(0+128)
 11343  1F79  319F  2732  319F   	fcall	___lmul
 11344  1F7C  0021               	movlb	1	; select bank1
 11345  1F7D  0823               	movf	(?___lmul+3)^(0+128),w
 11346  1F7E  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 11347  1F7F  0822               	movf	(?___lmul+2)^(0+128),w
 11348  1F80  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 11349  1F81  0821               	movf	(?___lmul+1)^(0+128),w
 11350  1F82  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 11351  1F83  0820               	movf	?___lmul^(0+128),w
 11352  1F84  00AE               	movwf	wait_ms@timemsl^(0+128)
 11353  1F85                     l349:	
 11354                           ;system.c: 27: for( ; timemsl; timemsl--);
 11355                           
 11356  1F85  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 11357  1F86  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 11358  1F87  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 11359  1F88  042E               	iorwf	wait_ms@timemsl^(0+128),w
 11360  1F89  1903               	btfsc	3,2
 11361  1F8A  0008               	return
 11362  1F8B  30FF               	movlw	255
 11363  1F8C  07AE               	addwf	wait_ms@timemsl^(0+128),f
 11364  1F8D  30FF               	movlw	255
 11365  1F8E  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 11366  1F8F  30FF               	movlw	255
 11367  1F90  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 11368  1F91  30FF               	movlw	255
 11369  1F92  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 11370  1F93  2F85               	goto	l349
 11371  1F94                     __end_of_wait_ms:	
 11372                           
 11373                           	psect	text33
 11374  1F32                     __ptext33:	
 11375 ;; *************** function ___lmul *****************
 11376 ;; Defined at:
 11377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  multiplier      4    0[BANK1 ] unsigned long 
 11380 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  product         4    8[BANK1 ] unsigned long 
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  4    0[BANK1 ] unsigned long 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11392 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11393 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11395 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11396 ;;Total ram usage:       12 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; Hardware stack levels required when called:    3
 11399 ;; This function calls:
 11400 ;;		Nothing
 11401 ;; This function is called by:
 11402 ;;		_wait_ms
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           
 11407                           ;psect for function ___lmul
 11408  1F32                     ___lmul:	
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11412  1F32  3000               	movlw	0
 11413  1F33  0021               	movlb	1	; select bank1
 11414  1F34  00AB               	movwf	(___lmul@product+3)^(0+128)
 11415  1F35  3000               	movlw	0
 11416  1F36  00AA               	movwf	(___lmul@product+2)^(0+128)
 11417  1F37  3000               	movlw	0
 11418  1F38  00A9               	movwf	(___lmul@product+1)^(0+128)
 11419  1F39  3000               	movlw	0
 11420  1F3A  00A8               	movwf	___lmul@product^(0+128)
 11421  1F3B                     l5150:	
 11422  1F3B  1C20               	btfss	___lmul@multiplier^(0+128),0
 11423  1F3C  2F45               	goto	l5154
 11424  1F3D  0824               	movf	___lmul@multiplicand^(0+128),w
 11425  1F3E  07A8               	addwf	___lmul@product^(0+128),f
 11426  1F3F  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 11427  1F40  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 11428  1F41  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 11429  1F42  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 11430  1F43  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 11431  1F44  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 11432  1F45                     l5154:	
 11433  1F45  3001               	movlw	1
 11434  1F46                     u5145:	
 11435  1F46  35A4               	lslf	___lmul@multiplicand^(0+128),f
 11436  1F47  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 11437  1F48  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 11438  1F49  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 11439  1F4A  0B89               	decfsz	9,f
 11440  1F4B  2F46               	goto	u5145
 11441  1F4C  3001               	movlw	1
 11442  1F4D                     u5155:	
 11443  1F4D  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 11444  1F4E  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 11445  1F4F  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 11446  1F50  0CA0               	rrf	___lmul@multiplier^(0+128),f
 11447  1F51  0B89               	decfsz	9,f
 11448  1F52  2F4D               	goto	u5155
 11449  1F53  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 11450  1F54  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 11451  1F55  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 11452  1F56  0420               	iorwf	___lmul@multiplier^(0+128),w
 11453  1F57  1D03               	skipz
 11454  1F58  2F3B               	goto	l5150
 11455  1F59  082B               	movf	(___lmul@product+3)^(0+128),w
 11456  1F5A  00A3               	movwf	(?___lmul+3)^(0+128)
 11457  1F5B  082A               	movf	(___lmul@product+2)^(0+128),w
 11458  1F5C  00A2               	movwf	(?___lmul+2)^(0+128)
 11459  1F5D  0829               	movf	(___lmul@product+1)^(0+128),w
 11460  1F5E  00A1               	movwf	(?___lmul+1)^(0+128)
 11461  1F5F  0828               	movf	___lmul@product^(0+128),w
 11462  1F60  00A0               	movwf	?___lmul^(0+128)
 11463  1F61  0008               	return
 11464  1F62                     __end_of___lmul:	
 11465                           
 11466                           	psect	text34
 11467  0003                     __ptext34:	
 11468 ;; *************** function _updateSwitchBypassState *****************
 11469 ;; Defined at:
 11470 ;;		line 96 in file "state_manager.c"
 11471 ;; Parameters:    Size  Location     Type
 11472 ;;  state           2    0[BANK1 ] int 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  1    wreg      void 
 11477 ;; Registers used:
 11478 ;;		None
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11484 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11487 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11488 ;;Total ram usage:        2 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    3
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		_setSwitchBypassState
 11495 ;; This function uses a non-reentrant model
 11496 ;;
 11497                           
 11498                           
 11499                           ;psect for function _updateSwitchBypassState
 11500  0003                     _updateSwitchBypassState:	
 11501                           
 11502                           ;incstack = 0
 11503                           ; Regs used in _updateSwitchBypassState: []
 11504  0003  0008               	return
 11505  0004                     __end_of_updateSwitchBypassState:	
 11506                           
 11507                           	psect	text35
 11508  07FB                     __ptext35:	
 11509 ;; *************** function _getSwitchBypassState *****************
 11510 ;; Defined at:
 11511 ;;		line 103 in file "state_manager.c"
 11512 ;; Parameters:    Size  Location     Type
 11513 ;;		None
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;		None
 11516 ;; Return value:  Size  Location     Type
 11517 ;;                  2    0[BANK1 ] int 
 11518 ;; Registers used:
 11519 ;;		status,2
 11520 ;; Tracked objects:
 11521 ;;		On entry : 0/0
 11522 ;;		On exit  : 0/0
 11523 ;;		Unchanged: 0/0
 11524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11525 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11528 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11529 ;;Total ram usage:        2 bytes
 11530 ;; Hardware stack levels used:    1
 11531 ;; Hardware stack levels required when called:    3
 11532 ;; This function calls:
 11533 ;;		Nothing
 11534 ;; This function is called by:
 11535 ;;		_initSwitchBypass
 11536 ;; This function uses a non-reentrant model
 11537 ;;
 11538                           
 11539                           
 11540                           ;psect for function _getSwitchBypassState
 11541  07FB                     _getSwitchBypassState:	
 11542                           
 11543                           ;state_manager.c: 108: return 0;
 11544                           
 11545                           ;incstack = 0
 11546                           ; Regs used in _getSwitchBypassState: [status,2]
 11547  07FB  0021               	movlb	1	; select bank1
 11548  07FC  01A0               	clrf	?_getSwitchBypassState^(0+128)
 11549  07FD  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 11550  07FE  0008               	return
 11551  07FF                     __end_of_getSwitchBypassState:	
 11552                           
 11553                           	psect	text36
 11554  1DC7                     __ptext36:	
 11555 ;; *************** function _adc_convert *****************
 11556 ;; Defined at:
 11557 ;;		line 122 in file "user.c"
 11558 ;; Parameters:    Size  Location     Type
 11559 ;;  channel         1    wreg     unsigned char 
 11560 ;; Auto vars:     Size  Location     Type
 11561 ;;  channel         1    3[BANK1 ] unsigned char 
 11562 ;; Return value:  Size  Location     Type
 11563 ;;                  2    0[BANK1 ] unsigned int 
 11564 ;; Registers used:
 11565 ;;		wreg, status,2, status,0
 11566 ;; Tracked objects:
 11567 ;;		On entry : 0/0
 11568 ;;		On exit  : 0/0
 11569 ;;		Unchanged: 0/0
 11570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11571 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11572 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11573 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11574 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11575 ;;Total ram usage:        4 bytes
 11576 ;; Hardware stack levels used:    1
 11577 ;; Hardware stack levels required when called:    3
 11578 ;; This function calls:
 11579 ;;		Nothing
 11580 ;; This function is called by:
 11581 ;;		_main
 11582 ;; This function uses a non-reentrant model
 11583 ;;
 11584                           
 11585                           
 11586                           ;psect for function _adc_convert
 11587  1DC7                     _adc_convert:	
 11588                           
 11589                           ;incstack = 0
 11590                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11591                           ;adc_convert@channel stored from wreg
 11592  1DC7  0021               	movlb	1	; select bank1
 11593  1DC8  00A3               	movwf	adc_convert@channel^(0+128)
 11594                           
 11595                           ;user.c: 123: ADCON0bits.CHS = channel;
 11596  1DC9  0823               	movf	adc_convert@channel^(0+128),w
 11597  1DCA  00A2               	movwf	??_adc_convert^(0+128)
 11598  1DCB  0DA2               	rlf	??_adc_convert^(0+128),f
 11599  1DCC  0DA2               	rlf	??_adc_convert^(0+128),f
 11600  1DCD  081D               	movf	29,w	;volatile
 11601  1DCE  0622               	xorwf	??_adc_convert^(0+128),w
 11602  1DCF  3983               	andlw	-125
 11603  1DD0  0622               	xorwf	??_adc_convert^(0+128),w
 11604  1DD1  009D               	movwf	29	;volatile
 11605                           
 11606                           ;user.c: 124: ADCON0bits.GO = 0b1;
 11607  1DD2  149D               	bsf	29,1	;volatile
 11608  1DD3                     l535:	
 11609                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 11610                           
 11611  1DD3  189D               	btfsc	29,1	;volatile
 11612  1DD4  2DD3               	goto	l535
 11613                           
 11614                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 11615  1DD5  081C               	movf	28,w	;volatile
 11616  1DD6  00A1               	movwf	(?_adc_convert+1)^(0+128)
 11617  1DD7  081B               	movf	27,w	;volatile
 11618  1DD8  00A0               	movwf	?_adc_convert^(0+128)
 11619  1DD9  0008               	return
 11620  1DDA                     __end_of_adc_convert:	
 11621                           
 11622                           	psect	text37
 11623  155C                     __ptext37:	
 11624 ;; *************** function _ReadSavedSettings *****************
 11625 ;; Defined at:
 11626 ;;		line 199 in file "user.c"
 11627 ;; Parameters:    Size  Location     Type
 11628 ;;		None
 11629 ;; Auto vars:     Size  Location     Type
 11630 ;;		None
 11631 ;; Return value:  Size  Location     Type
 11632 ;;                  1    wreg      void 
 11633 ;; Registers used:
 11634 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11635 ;; Tracked objects:
 11636 ;;		On entry : 0/0
 11637 ;;		On exit  : 0/0
 11638 ;;		Unchanged: 0/0
 11639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11642 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11643 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11644 ;;Total ram usage:        1 bytes
 11645 ;; Hardware stack levels used:    1
 11646 ;; Hardware stack levels required when called:    4
 11647 ;; This function calls:
 11648 ;;		_FLASH_ReadWord
 11649 ;;		_set_leds_bottom
 11650 ;;		_set_leds_top
 11651 ;; This function is called by:
 11652 ;;		_main
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function _ReadSavedSettings
 11658  155C                     _ReadSavedSettings:	
 11659                           
 11660                           ;user.c: 201: top_push_state = FLASH_ReadWord(0x1F81);
 11661                           
 11662                           ;incstack = 0
 11663                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11664  155C  3081               	movlw	129
 11665  155D  0021               	movlb	1	; select bank1
 11666  155E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11667  155F  301F               	movlw	31
 11668  1560  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11669  1561  319E  2640  3195   	fcall	_FLASH_ReadWord
 11670  1564  0021               	movlb	1	; select bank1
 11671  1565  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11672  1566  0020               	movlb	0	; select bank0
 11673  1567  00E5               	movwf	_top_push_state+1
 11674  1568  0021               	movlb	1	; select bank1
 11675  1569  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11676  156A  0020               	movlb	0	; select bank0
 11677  156B  00E4               	movwf	_top_push_state
 11678                           
 11679                           ;user.c: 202: bottom_push_state = FLASH_ReadWord(0x1F82);
 11680  156C  3082               	movlw	130
 11681  156D  0021               	movlb	1	; select bank1
 11682  156E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11683  156F  301F               	movlw	31
 11684  1570  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11685  1571  319E  2640  3195   	fcall	_FLASH_ReadWord
 11686  1574  0021               	movlb	1	; select bank1
 11687  1575  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11688  1576  0020               	movlb	0	; select bank0
 11689  1577  00E1               	movwf	_bottom_push_state+1
 11690  1578  0021               	movlb	1	; select bank1
 11691  1579  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11692  157A  0020               	movlb	0	; select bank0
 11693  157B  00E0               	movwf	_bottom_push_state
 11694                           
 11695                           ;user.c: 204: if (top_push_state > 6) {
 11696  157C  0865               	movf	_top_push_state+1,w
 11697  157D  3A80               	xorlw	128
 11698  157E  0021               	movlb	1	; select bank1
 11699  157F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11700  1580  3080               	movlw	128
 11701  1581  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11702  1582  1D03               	skipz
 11703  1583  2D87               	goto	u6165
 11704  1584  3007               	movlw	7
 11705  1585  0020               	movlb	0	; select bank0
 11706  1586  0264               	subwf	_top_push_state,w
 11707  1587                     u6165:	
 11708  1587  1C03               	skipc
 11709  1588  2D8E               	goto	l564
 11710                           
 11711                           ;user.c: 206: top_push_state = 6;
 11712  1589  3006               	movlw	6
 11713  158A  0020               	movlb	0	; select bank0
 11714  158B  00E4               	movwf	_top_push_state
 11715  158C  3000               	movlw	0
 11716  158D  00E5               	movwf	_top_push_state+1
 11717  158E                     l564:	
 11718                           
 11719                           ;user.c: 207: }
 11720                           ;user.c: 208: if (bottom_push_state > 6) {
 11721  158E  0020               	movlb	0	; select bank0
 11722  158F  0861               	movf	_bottom_push_state+1,w
 11723  1590  3A80               	xorlw	128
 11724  1591  0021               	movlb	1	; select bank1
 11725  1592  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11726  1593  3080               	movlw	128
 11727  1594  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11728  1595  1D03               	skipz
 11729  1596  2D9A               	goto	u6175
 11730  1597  3007               	movlw	7
 11731  1598  0020               	movlb	0	; select bank0
 11732  1599  0260               	subwf	_bottom_push_state,w
 11733  159A                     u6175:	
 11734  159A  1C03               	skipc
 11735  159B  2DA1               	goto	l5748
 11736                           
 11737                           ;user.c: 210: bottom_push_state = 6;
 11738  159C  3006               	movlw	6
 11739  159D  0020               	movlb	0	; select bank0
 11740  159E  00E0               	movwf	_bottom_push_state
 11741  159F  3000               	movlw	0
 11742  15A0  00E1               	movwf	_bottom_push_state+1
 11743  15A1                     l5748:	
 11744                           
 11745                           ;user.c: 211: }
 11746                           ;user.c: 214: LATGbits.LATG1 = !switchBypass_state;
 11747  15A1  0020               	movlb	0	; select bank0
 11748  15A2  0869               	movf	_switchBypass_state,w
 11749  15A3  1D03               	btfss	3,2
 11750  15A4  2DA8               	goto	u6180
 11751  15A5  0027               	movlb	7	; select bank7
 11752  15A6  148D               	bsf	13,1	;volatile
 11753  15A7  2DAA               	goto	l5750
 11754  15A8                     u6180:	
 11755  15A8  0027               	movlb	7	; select bank7
 11756  15A9  108D               	bcf	13,1	;volatile
 11757  15AA                     l5750:	
 11758                           
 11759                           ;user.c: 215: LATGbits.LATG2 = switchBypass_state;
 11760  15AA  0020               	movlb	0	; select bank0
 11761  15AB  0C69               	rrf	_switchBypass_state,w
 11762  15AC  0027               	movlb	7	; select bank7
 11763  15AD  1C03               	skipc
 11764  15AE  110D               	bcf	13,2	;volatile
 11765  15AF  1803               	skipnc
 11766  15B0  150D               	bsf	13,2	;volatile
 11767                           
 11768                           ;user.c: 216: LATBbits.LATB2 = 0;
 11769  15B1  0022               	movlb	2	; select bank2
 11770  15B2  110D               	bcf	13,2	;volatile
 11771                           
 11772                           ;user.c: 217: LATBbits.LATB3 = 0;
 11773  15B3  118D               	bcf	13,3	;volatile
 11774                           
 11775                           ;user.c: 219: LATBbits.LATB4 = 0;
 11776  15B4  120D               	bcf	13,4	;volatile
 11777                           
 11778                           ;user.c: 220: LATBbits.LATB5 = 0;
 11779  15B5  128D               	bcf	13,5	;volatile
 11780                           
 11781                           ;user.c: 222: LATBbits.LATB1 = 0;
 11782  15B6  108D               	bcf	13,1	;volatile
 11783                           
 11784                           ;user.c: 223: LATBbits.LATB0 = 0;
 11785  15B7  100D               	bcf	13,0	;volatile
 11786                           
 11787                           ;user.c: 226: set_leds_top(top_push_state, 1);
 11788  15B8  0020               	movlb	0	; select bank0
 11789  15B9  0865               	movf	_top_push_state+1,w
 11790  15BA  0021               	movlb	1	; select bank1
 11791  15BB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 11792  15BC  0020               	movlb	0	; select bank0
 11793  15BD  0864               	movf	_top_push_state,w
 11794  15BE  0021               	movlb	1	; select bank1
 11795  15BF  00A0               	movwf	set_leds_top@x^(0+128)
 11796  15C0  3001               	movlw	1
 11797  15C1  00A2               	movwf	set_leds_top@ledState^(0+128)
 11798  15C2  3000               	movlw	0
 11799  15C3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 11800  15C4  3194  2434  3195   	fcall	_set_leds_top
 11801                           
 11802                           ;user.c: 227: set_leds_bottom(bottom_push_state);
 11803  15C7  0020               	movlb	0	; select bank0
 11804  15C8  0861               	movf	_bottom_push_state+1,w
 11805  15C9  0021               	movlb	1	; select bank1
 11806  15CA  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 11807  15CB  0020               	movlb	0	; select bank0
 11808  15CC  0860               	movf	_bottom_push_state,w
 11809  15CD  0021               	movlb	1	; select bank1
 11810  15CE  00A0               	movwf	set_leds_bottom@x^(0+128)
 11811  15CF  3190  2028         	fcall	_set_leds_bottom
 11812  15D1  0008               	return
 11813  15D2                     __end_of_ReadSavedSettings:	
 11814                           
 11815                           	psect	text38
 11816  1434                     __ptext38:	
 11817 ;; *************** function _set_leds_top *****************
 11818 ;; Defined at:
 11819 ;;		line 16 in file "LEDs.c"
 11820 ;; Parameters:    Size  Location     Type
 11821 ;;  x               2    0[BANK1 ] int 
 11822 ;;  ledState        2    2[BANK1 ] int 
 11823 ;; Auto vars:     Size  Location     Type
 11824 ;;		None
 11825 ;; Return value:  Size  Location     Type
 11826 ;;                  1    wreg      void 
 11827 ;; Registers used:
 11828 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11829 ;; Tracked objects:
 11830 ;;		On entry : 0/0
 11831 ;;		On exit  : 0/0
 11832 ;;		Unchanged: 0/0
 11833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11834 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11837 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11838 ;;Total ram usage:        4 bytes
 11839 ;; Hardware stack levels used:    1
 11840 ;; Hardware stack levels required when called:    3
 11841 ;; This function calls:
 11842 ;;		Nothing
 11843 ;; This function is called by:
 11844 ;;		_ReadSavedSettings
 11845 ;;		_star_tactiles
 11846 ;;		_solidring_tactiles
 11847 ;;		_read_top_tactile
 11848 ;;		_ring_tactiles
 11849 ;; This function uses a non-reentrant model
 11850 ;;
 11851                           
 11852                           
 11853                           ;psect for function _set_leds_top
 11854  1434                     _set_leds_top:	
 11855                           
 11856                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11857                           
 11858                           ;incstack = 0
 11859                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11860  1434  0027               	movlb	7	; select bank7
 11861  1435  100C               	bcf	12,0	;volatile
 11862                           
 11863                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11864  1436  108C               	bcf	12,1	;volatile
 11865                           
 11866                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11867  1437  110C               	bcf	12,2	;volatile
 11868                           
 11869                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11870  1438  118C               	bcf	12,3	;volatile
 11871                           
 11872                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11873  1439  120C               	bcf	12,4	;volatile
 11874                           
 11875                           ;LEDs.c: 22: switch (x) {
 11876  143A  2C6A               	goto	l5208
 11877  143B                     l5196:	
 11878                           ;LEDs.c: 23: case 1:
 11879                           
 11880                           
 11881                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11882  143B  0021               	movlb	1	; select bank1
 11883  143C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11884  143D  0027               	movlb	7	; select bank7
 11885  143E  1C03               	skipc
 11886  143F  100C               	bcf	12,0	;volatile
 11887  1440  1803               	skipnc
 11888  1441  140C               	bsf	12,0	;volatile
 11889                           
 11890                           ;LEDs.c: 25: break;
 11891  1442  0008               	return
 11892  1443                     l5198:	
 11893                           ;LEDs.c: 26: case 2:
 11894                           
 11895                           
 11896                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11897  1443  0021               	movlb	1	; select bank1
 11898  1444  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11899  1445  0027               	movlb	7	; select bank7
 11900  1446  1C03               	skipc
 11901  1447  108C               	bcf	12,1	;volatile
 11902  1448  1803               	skipnc
 11903  1449  148C               	bsf	12,1	;volatile
 11904                           
 11905                           ;LEDs.c: 28: break;
 11906  144A  0008               	return
 11907  144B                     l5200:	
 11908                           ;LEDs.c: 29: case 3:
 11909                           
 11910                           
 11911                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11912  144B  0021               	movlb	1	; select bank1
 11913  144C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11914  144D  0027               	movlb	7	; select bank7
 11915  144E  1C03               	skipc
 11916  144F  110C               	bcf	12,2	;volatile
 11917  1450  1803               	skipnc
 11918  1451  150C               	bsf	12,2	;volatile
 11919                           
 11920                           ;LEDs.c: 31: break;
 11921  1452  0008               	return
 11922  1453                     l5202:	
 11923                           ;LEDs.c: 32: case 4:
 11924                           
 11925                           
 11926                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11927  1453  0021               	movlb	1	; select bank1
 11928  1454  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11929  1455  0027               	movlb	7	; select bank7
 11930  1456  1C03               	skipc
 11931  1457  118C               	bcf	12,3	;volatile
 11932  1458  1803               	skipnc
 11933  1459  158C               	bsf	12,3	;volatile
 11934                           
 11935                           ;LEDs.c: 34: break;
 11936  145A  0008               	return
 11937  145B                     l5204:	
 11938                           ;LEDs.c: 35: case 5:
 11939                           
 11940                           
 11941                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11942  145B  0021               	movlb	1	; select bank1
 11943  145C  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11944  145D  0027               	movlb	7	; select bank7
 11945  145E  1C03               	skipc
 11946  145F  120C               	bcf	12,4	;volatile
 11947  1460  1803               	skipnc
 11948  1461  160C               	bsf	12,4	;volatile
 11949                           
 11950                           ;LEDs.c: 39: break;
 11951                           
 11952                           ;LEDs.c: 38: case 6:
 11953                           
 11954                           ;LEDs.c: 37: break;
 11955  1462  0008               	return
 11956  1463                     l707:	
 11957                           ;LEDs.c: 40: case 100:
 11958                           
 11959                           
 11960                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11961  1463  0027               	movlb	7	; select bank7
 11962  1464  140C               	bsf	12,0	;volatile
 11963                           
 11964                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11965  1465  148C               	bsf	12,1	;volatile
 11966                           
 11967                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11968  1466  150C               	bsf	12,2	;volatile
 11969                           
 11970                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11971  1467  158C               	bsf	12,3	;volatile
 11972                           
 11973                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11974  1468  160C               	bsf	12,4	;volatile
 11975                           
 11976                           ;LEDs.c: 47: }
 11977                           
 11978                           ;LEDs.c: 46: break;
 11979  1469  0008               	return
 11980  146A                     l5208:	
 11981                           
 11982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11983                           ; Switch size 1, requested type "space"
 11984                           ; Number of cases is 1, Range of values is 0 to 0
 11985                           ; switch strategies available:
 11986                           ; Name         Instructions Cycles
 11987                           ; simple_byte            4     3 (average)
 11988                           ; direct_byte            8     6 (fixed)
 11989                           ; jumptable            260     6 (fixed)
 11990                           ;	Chosen strategy is simple_byte
 11991  146A  0021               	movlb	1	; select bank1
 11992  146B  0821               	movf	(set_leds_top@x+1)^(0+128),w
 11993  146C  3A00               	xorlw	0	; case 0
 11994  146D  1903               	skipnz
 11995  146E  2C70               	goto	l6500
 11996  146F  2C87               	goto	l708
 11997  1470                     l6500:	
 11998                           
 11999                           ; Switch size 1, requested type "space"
 12000                           ; Number of cases is 7, Range of values is 1 to 100
 12001                           ; switch strategies available:
 12002                           ; Name         Instructions Cycles
 12003                           ; simple_byte           22    12 (average)
 12004                           ; direct_byte          209     9 (fixed)
 12005                           ; jumptable            263     9 (fixed)
 12006                           ;	Chosen strategy is simple_byte
 12007  1470  0820               	movf	set_leds_top@x^(0+128),w
 12008  1471  3A01               	xorlw	1	; case 1
 12009  1472  1903               	skipnz
 12010  1473  2C3B               	goto	l5196
 12011  1474  3A03               	xorlw	3	; case 2
 12012  1475  1903               	skipnz
 12013  1476  2C43               	goto	l5198
 12014  1477  3A01               	xorlw	1	; case 3
 12015  1478  1903               	skipnz
 12016  1479  2C4B               	goto	l5200
 12017  147A  3A07               	xorlw	7	; case 4
 12018  147B  1903               	skipnz
 12019  147C  2C53               	goto	l5202
 12020  147D  3A01               	xorlw	1	; case 5
 12021  147E  1903               	skipnz
 12022  147F  2C5B               	goto	l5204
 12023  1480  3A03               	xorlw	3	; case 6
 12024  1481  1903               	skipnz
 12025  1482  2C87               	goto	l708
 12026  1483  3A62               	xorlw	98	; case 100
 12027  1484  1903               	skipnz
 12028  1485  2C63               	goto	l707
 12029  1486  2C87               	goto	l708
 12030  1487                     l708:	
 12031  1487  0008               	return
 12032  1488                     __end_of_set_leds_top:	
 12033                           
 12034                           	psect	text39
 12035  1028                     __ptext39:	
 12036 ;; *************** function _set_leds_bottom *****************
 12037 ;; Defined at:
 12038 ;;		line 51 in file "LEDs.c"
 12039 ;; Parameters:    Size  Location     Type
 12040 ;;  x               2    0[BANK1 ] int 
 12041 ;; Auto vars:     Size  Location     Type
 12042 ;;		None
 12043 ;; Return value:  Size  Location     Type
 12044 ;;                  1    wreg      void 
 12045 ;; Registers used:
 12046 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12047 ;; Tracked objects:
 12048 ;;		On entry : 0/0
 12049 ;;		On exit  : 0/0
 12050 ;;		Unchanged: 0/0
 12051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12052 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12055 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12056 ;;Total ram usage:        2 bytes
 12057 ;; Hardware stack levels used:    1
 12058 ;; Hardware stack levels required when called:    3
 12059 ;; This function calls:
 12060 ;;		Nothing
 12061 ;; This function is called by:
 12062 ;;		_ReadSavedSettings
 12063 ;;		_star_tactiles
 12064 ;;		_solidring_tactiles
 12065 ;;		_read_bottom_tactile
 12066 ;;		_ring_tactiles
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           
 12071                           ;psect for function _set_leds_bottom
 12072  1028                     _set_leds_bottom:	
 12073                           
 12074                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12075                           
 12076                           ;incstack = 0
 12077                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12078  1028  0022               	movlb	2	; select bank2
 12079  1029  100F               	bcf	15,0	;volatile
 12080                           
 12081                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12082  102A  108F               	bcf	15,1	;volatile
 12083                           
 12084                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12085  102B  110F               	bcf	15,2	;volatile
 12086                           
 12087                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12088  102C  118F               	bcf	15,3	;volatile
 12089                           
 12090                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12091  102D  120F               	bcf	15,4	;volatile
 12092                           
 12093                           ;LEDs.c: 57: switch (x) {
 12094  102E  2845               	goto	l5232
 12095  102F                     l712:	
 12096                           ;LEDs.c: 58: case 1:
 12097                           
 12098                           
 12099                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12100  102F  0022               	movlb	2	; select bank2
 12101  1030  140F               	bsf	15,0	;volatile
 12102                           
 12103                           ;LEDs.c: 60: break;
 12104  1031  0008               	return
 12105  1032                     l714:	
 12106                           ;LEDs.c: 61: case 2:
 12107                           
 12108                           
 12109                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12110  1032  0022               	movlb	2	; select bank2
 12111  1033  148F               	bsf	15,1	;volatile
 12112                           
 12113                           ;LEDs.c: 63: break;
 12114  1034  0008               	return
 12115  1035                     l715:	
 12116                           ;LEDs.c: 64: case 3:
 12117                           
 12118                           
 12119                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12120  1035  0022               	movlb	2	; select bank2
 12121  1036  150F               	bsf	15,2	;volatile
 12122                           
 12123                           ;LEDs.c: 66: break;
 12124  1037  0008               	return
 12125  1038                     l716:	
 12126                           ;LEDs.c: 67: case 4:
 12127                           
 12128                           
 12129                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12130  1038  0022               	movlb	2	; select bank2
 12131  1039  158F               	bsf	15,3	;volatile
 12132                           
 12133                           ;LEDs.c: 69: break;
 12134  103A  0008               	return
 12135  103B                     l717:	
 12136                           ;LEDs.c: 70: case 5:
 12137                           
 12138                           
 12139                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12140  103B  0022               	movlb	2	; select bank2
 12141  103C  160F               	bsf	15,4	;volatile
 12142                           
 12143                           ;LEDs.c: 74: break;
 12144                           
 12145                           ;LEDs.c: 73: case 6:
 12146                           
 12147                           ;LEDs.c: 72: break;
 12148  103D  0008               	return
 12149  103E                     l719:	
 12150                           ;LEDs.c: 75: case 100:
 12151                           
 12152                           
 12153                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12154  103E  0022               	movlb	2	; select bank2
 12155  103F  140F               	bsf	15,0	;volatile
 12156                           
 12157                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12158  1040  148F               	bsf	15,1	;volatile
 12159                           
 12160                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12161  1041  150F               	bsf	15,2	;volatile
 12162                           
 12163                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12164  1042  158F               	bsf	15,3	;volatile
 12165                           
 12166                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12167  1043  160F               	bsf	15,4	;volatile
 12168                           
 12169                           ;LEDs.c: 82: }
 12170                           
 12171                           ;LEDs.c: 81: break;
 12172  1044  0008               	return
 12173  1045                     l5232:	
 12174                           
 12175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12176                           ; Switch size 1, requested type "space"
 12177                           ; Number of cases is 1, Range of values is 0 to 0
 12178                           ; switch strategies available:
 12179                           ; Name         Instructions Cycles
 12180                           ; simple_byte            4     3 (average)
 12181                           ; direct_byte            8     6 (fixed)
 12182                           ; jumptable            260     6 (fixed)
 12183                           ;	Chosen strategy is simple_byte
 12184  1045  0021               	movlb	1	; select bank1
 12185  1046  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 12186  1047  3A00               	xorlw	0	; case 0
 12187  1048  1903               	skipnz
 12188  1049  284B               	goto	l6502
 12189  104A  2862               	goto	l720
 12190  104B                     l6502:	
 12191                           
 12192                           ; Switch size 1, requested type "space"
 12193                           ; Number of cases is 7, Range of values is 1 to 100
 12194                           ; switch strategies available:
 12195                           ; Name         Instructions Cycles
 12196                           ; simple_byte           22    12 (average)
 12197                           ; direct_byte          209     9 (fixed)
 12198                           ; jumptable            263     9 (fixed)
 12199                           ;	Chosen strategy is simple_byte
 12200  104B  0820               	movf	set_leds_bottom@x^(0+128),w
 12201  104C  3A01               	xorlw	1	; case 1
 12202  104D  1903               	skipnz
 12203  104E  282F               	goto	l712
 12204  104F  3A03               	xorlw	3	; case 2
 12205  1050  1903               	skipnz
 12206  1051  2832               	goto	l714
 12207  1052  3A01               	xorlw	1	; case 3
 12208  1053  1903               	skipnz
 12209  1054  2835               	goto	l715
 12210  1055  3A07               	xorlw	7	; case 4
 12211  1056  1903               	skipnz
 12212  1057  2838               	goto	l716
 12213  1058  3A01               	xorlw	1	; case 5
 12214  1059  1903               	skipnz
 12215  105A  283B               	goto	l717
 12216  105B  3A03               	xorlw	3	; case 6
 12217  105C  1903               	skipnz
 12218  105D  2862               	goto	l720
 12219  105E  3A62               	xorlw	98	; case 100
 12220  105F  1903               	skipnz
 12221  1060  283E               	goto	l719
 12222  1061  2862               	goto	l720
 12223  1062                     l720:	
 12224  1062  0008               	return
 12225  1063                     __end_of_set_leds_bottom:	
 12226                           
 12227                           	psect	text40
 12228  1E40                     __ptext40:	
 12229 ;; *************** function _FLASH_ReadWord *****************
 12230 ;; Defined at:
 12231 ;;		line 58 in file "memory.c"
 12232 ;; Parameters:    Size  Location     Type
 12233 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 12234 ;; Auto vars:     Size  Location     Type
 12235 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 12236 ;; Return value:  Size  Location     Type
 12237 ;;                  2    0[BANK1 ] unsigned int 
 12238 ;; Registers used:
 12239 ;;		wreg, status,2, status,0
 12240 ;; Tracked objects:
 12241 ;;		On entry : 0/0
 12242 ;;		On exit  : 0/0
 12243 ;;		Unchanged: 0/0
 12244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12245 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12246 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12248 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12249 ;;Total ram usage:        3 bytes
 12250 ;; Hardware stack levels used:    1
 12251 ;; Hardware stack levels required when called:    3
 12252 ;; This function calls:
 12253 ;;		Nothing
 12254 ;; This function is called by:
 12255 ;;		_ReadSavedSettings
 12256 ;;		_FLASH_WriteWord
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           
 12261                           ;psect for function _FLASH_ReadWord
 12262  1E40                     _FLASH_ReadWord:	
 12263                           
 12264                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12265                           
 12266                           ;incstack = 0
 12267                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12268  1E40  3000               	movlw	0
 12269  1E41  1B8B               	btfsc	11,7	;volatile
 12270  1E42  3001               	movlw	1
 12271  1E43  0021               	movlb	1	; select bank1
 12272  1E44  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 12273                           
 12274                           ;memory.c: 61: INTCONbits.GIE = 0;
 12275  1E45  138B               	bcf	11,7	;volatile
 12276                           
 12277                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12278  1E46  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 12279  1E47  0023               	movlb	3	; select bank3
 12280  1E48  0091               	movwf	17	;volatile
 12281                           
 12282                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12283  1E49  0021               	movlb	1	; select bank1
 12284  1E4A  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 12285  1E4B  0023               	movlb	3	; select bank3
 12286  1E4C  0092               	movwf	18	;volatile
 12287                           
 12288                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12289  1E4D  1315               	bcf	21,6	;volatile
 12290                           
 12291                           ;memory.c: 66: PMCON1bits.RD = 1;
 12292  1E4E  1415               	bsf	21,0	;volatile
 12293                           
 12294                           ;memory.c: 67: __nop();
 12295  1E4F  0000               	nop
 12296                           
 12297                           ;memory.c: 68: __nop();
 12298  1E50  0000               	nop
 12299                           
 12300                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12301  1E51  0021               	movlb	1	; select bank1
 12302  1E52  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 12303  1E53  1C03               	skipc
 12304  1E54  138B               	bcf	11,7	;volatile
 12305  1E55  1803               	skipnc
 12306  1E56  178B               	bsf	11,7	;volatile
 12307                           
 12308                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12309  1E57  0023               	movlb	3	; select bank3
 12310  1E58  0814               	movf	20,w	;volatile
 12311  1E59  0021               	movlb	1	; select bank1
 12312  1E5A  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 12313  1E5B  0023               	movlb	3	; select bank3
 12314  1E5C  0813               	movf	19,w	;volatile
 12315  1E5D  0021               	movlb	1	; select bank1
 12316  1E5E  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 12317  1E5F  0008               	return
 12318  1E60                     __end_of_FLASH_ReadWord:	
 12319                           
 12320                           	psect	text41
 12321  1E82                     __ptext41:	
 12322 ;; *************** function _InitializeTaps *****************
 12323 ;; Defined at:
 12324 ;;		line 193 in file "user.c"
 12325 ;; Parameters:    Size  Location     Type
 12326 ;;		None
 12327 ;; Auto vars:     Size  Location     Type
 12328 ;;  itap            2    1[BANK1 ] int 
 12329 ;; Return value:  Size  Location     Type
 12330 ;;                  1    wreg      void 
 12331 ;; Registers used:
 12332 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12333 ;; Tracked objects:
 12334 ;;		On entry : 0/0
 12335 ;;		On exit  : 0/0
 12336 ;;		Unchanged: 0/0
 12337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12339 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12340 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12341 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12342 ;;Total ram usage:        3 bytes
 12343 ;; Hardware stack levels used:    1
 12344 ;; Hardware stack levels required when called:    3
 12345 ;; This function calls:
 12346 ;;		Nothing
 12347 ;; This function is called by:
 12348 ;;		_main
 12349 ;; This function uses a non-reentrant model
 12350 ;;
 12351                           
 12352                           
 12353                           ;psect for function _InitializeTaps
 12354  1E82                     _InitializeTaps:	
 12355                           
 12356                           ;user.c: 194: for (int itap = 0; itap < 12; itap++) {
 12357                           
 12358                           ;incstack = 0
 12359                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12360  1E82  0021               	movlb	1	; select bank1
 12361  1E83  01A1               	clrf	InitializeTaps@itap^(0+128)
 12362  1E84  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 12363  1E85                     L13:	
 12364  1E85  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 12365  1E86  3A80               	xorlw	128
 12366  1E87  00A0               	movwf	??_InitializeTaps^(0+128)
 12367  1E88  3080               	movlw	128
 12368  1E89  0220               	subwf	??_InitializeTaps^(0+128),w
 12369  1E8A  1D03               	skipz
 12370  1E8B  2E8E               	goto	u6135
 12371  1E8C  300C               	movlw	12
 12372  1E8D  0221               	subwf	InitializeTaps@itap^(0+128),w
 12373  1E8E                     u6135:	
 12374  1E8E  1803               	btfsc	3,0
 12375  1E8F  0008               	return
 12376                           
 12377                           ;user.c: 195: tap[itap] = 0;
 12378  1E90  0021               	movlb	1	; select bank1
 12379  1E91  0821               	movf	InitializeTaps@itap^(0+128),w
 12380  1E92  00A0               	movwf	??_InitializeTaps^(0+128)
 12381  1E93  3001               	movlw	1
 12382  1E94                     u6145:	
 12383  1E94  35A0               	lslf	??_InitializeTaps^(0+128),f
 12384  1E95  3EFF               	addlw	-1
 12385  1E96  1D03               	skipz
 12386  1E97  2E94               	goto	u6145
 12387  1E98  3520               	lslf	??_InitializeTaps^(0+128),w
 12388  1E99  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 12389  1E9A  0086               	movwf	6
 12390  1E9B  3002               	movlw	2	; select bank5/6
 12391  1E9C  0087               	movwf	7
 12392  1E9D  3000               	movlw	0
 12393  1E9E  3FC0               	movwi [0]fsr1
 12394  1E9F  3000               	movlw	0
 12395  1EA0  3FC1               	movwi [1]fsr1
 12396  1EA1  3FC2               	movwi [2]fsr1
 12397  1EA2  3FC3               	movwi [3]fsr1
 12398  1EA3  3001               	movlw	1
 12399  1EA4  07A1               	addwf	InitializeTaps@itap^(0+128),f
 12400  1EA5  3000               	movlw	0
 12401  1EA6  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 12402  1EA7  2E85               	goto	L13
 12403  1EA8                     __end_of_InitializeTaps:	
 12404                           
 12405                           	psect	text42
 12406  1F02                     __ptext42:	
 12407 ;; *************** function _InitApp *****************
 12408 ;; Defined at:
 12409 ;;		line 23 in file "user.c"
 12410 ;; Parameters:    Size  Location     Type
 12411 ;;		None
 12412 ;; Auto vars:     Size  Location     Type
 12413 ;;		None
 12414 ;; Return value:  Size  Location     Type
 12415 ;;                  1    wreg      void 
 12416 ;; Registers used:
 12417 ;;		wreg, status,2, status,0, pclath, cstack
 12418 ;; Tracked objects:
 12419 ;;		On entry : 0/0
 12420 ;;		On exit  : 0/0
 12421 ;;		Unchanged: 0/0
 12422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12427 ;;Total ram usage:        0 bytes
 12428 ;; Hardware stack levels used:    1
 12429 ;; Hardware stack levels required when called:    5
 12430 ;; This function calls:
 12431 ;;		_init_adc
 12432 ;;		_init_pwm
 12433 ;; This function is called by:
 12434 ;;		_main
 12435 ;; This function uses a non-reentrant model
 12436 ;;
 12437                           
 12438                           
 12439                           ;psect for function _InitApp
 12440  1F02                     _InitApp:	
 12441                           
 12442                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12443                           
 12444                           ;incstack = 0
 12445                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12446  1F02  0021               	movlb	1	; select bank1
 12447  1F03  100D               	bcf	13,0	;volatile
 12448                           
 12449                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12450  1F04  108D               	bcf	13,1	;volatile
 12451                           
 12452                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12453  1F05  110D               	bcf	13,2	;volatile
 12454                           
 12455                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12456  1F06  118D               	bcf	13,3	;volatile
 12457                           
 12458                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12459  1F07  120D               	bcf	13,4	;volatile
 12460                           
 12461                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12462  1F08  128D               	bcf	13,5	;volatile
 12463                           
 12464                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12465  1F09  140E               	bsf	14,0	;volatile
 12466                           
 12467                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12468  1F0A  120E               	bcf	14,4	;volatile
 12469                           
 12470                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12471  1F0B  128E               	bcf	14,5	;volatile
 12472                           
 12473                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12474  1F0C  100F               	bcf	15,0	;volatile
 12475                           
 12476                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12477  1F0D  108F               	bcf	15,1	;volatile
 12478                           
 12479                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12480  1F0E  110F               	bcf	15,2	;volatile
 12481                           
 12482                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12483  1F0F  118F               	bcf	15,3	;volatile
 12484                           
 12485                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12486  1F10  120F               	bcf	15,4	;volatile
 12487                           
 12488                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12489  1F11  168F               	bsf	15,5	;volatile
 12490                           
 12491                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12492  1F12  170F               	bsf	15,6	;volatile
 12493                           
 12494                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12495  1F13  178F               	bsf	15,7	;volatile
 12496                           
 12497                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12498  1F14  1410               	bsf	16,0	;volatile
 12499                           
 12500                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12501  1F15  1490               	bsf	16,1	;volatile
 12502                           
 12503                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12504  1F16  0023               	movlb	3	; select bank3
 12505  1F17  1010               	bcf	16,0	;volatile
 12506                           
 12507                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12508  1F18  1090               	bcf	16,1	;volatile
 12509                           
 12510                           ;user.c: 53: PORTEbits.RE0 = 0;
 12511  1F19  0020               	movlb	0	; select bank0
 12512  1F1A  1010               	bcf	16,0	;volatile
 12513                           
 12514                           ;user.c: 54: PORTEbits.RE1 = 0;
 12515  1F1B  1090               	bcf	16,1	;volatile
 12516                           
 12517                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12518  1F1C  0026               	movlb	6	; select bank6
 12519  1F1D  100C               	bcf	12,0	;volatile
 12520                           
 12521                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12522  1F1E  108C               	bcf	12,1	;volatile
 12523                           
 12524                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12525  1F1F  110C               	bcf	12,2	;volatile
 12526                           
 12527                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12528  1F20  118C               	bcf	12,3	;volatile
 12529                           
 12530                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12531  1F21  120C               	bcf	12,4	;volatile
 12532                           
 12533                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12534  1F22  128C               	bcf	12,5	;volatile
 12535                           
 12536                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12537  1F23  170C               	bsf	12,6	;volatile
 12538                           
 12539                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12540  1F24  0028               	movlb	8	; select bank8
 12541  1F25  130C               	bcf	12,6	;volatile
 12542                           
 12543                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12544  1F26  0026               	movlb	6	; select bank6
 12545  1F27  108D               	bcf	13,1	;volatile
 12546                           
 12547                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12548  1F28  110D               	bcf	13,2	;volatile
 12549                           
 12550                           ;user.c: 68: init_adc();
 12551  1F29  319D  2562  319F   	fcall	_init_adc
 12552                           
 12553                           ;user.c: 69: init_pwm();
 12554  1F2C  3191  219B         	fcall	_init_pwm
 12555                           
 12556                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12557  1F2E  178B               	bsf	11,7	;volatile
 12558                           
 12559                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12560  1F2F  168B               	bsf	11,5	;volatile
 12561                           
 12562                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12563  1F30  110B               	bcf	11,2	;volatile
 12564  1F31  0008               	return
 12565  1F32                     __end_of_InitApp:	
 12566                           
 12567                           	psect	text43
 12568  119B                     __ptext43:	
 12569 ;; *************** function _init_pwm *****************
 12570 ;; Defined at:
 12571 ;;		line 129 in file "user.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;		None
 12574 ;; Auto vars:     Size  Location     Type
 12575 ;;		None
 12576 ;; Return value:  Size  Location     Type
 12577 ;;                  1    wreg      void 
 12578 ;; Registers used:
 12579 ;;		wreg, status,2, status,0, pclath, cstack
 12580 ;; Tracked objects:
 12581 ;;		On entry : 0/0
 12582 ;;		On exit  : 0/0
 12583 ;;		Unchanged: 0/0
 12584 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12585 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12586 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12588 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12589 ;;Total ram usage:        0 bytes
 12590 ;; Hardware stack levels used:    1
 12591 ;; Hardware stack levels required when called:    4
 12592 ;; This function calls:
 12593 ;;		_init_timer0
 12594 ;;		_init_timer2
 12595 ;; This function is called by:
 12596 ;;		_InitApp
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           
 12601                           ;psect for function _init_pwm
 12602  119B                     _init_pwm:	
 12603                           
 12604                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 12605                           
 12606                           ;incstack = 0
 12607                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12608  119B  0022               	movlb	2	; select bank2
 12609  119C  101D               	bcf	29,0	;volatile
 12610                           
 12611                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 12612  119D  0021               	movlb	1	; select bank1
 12613  119E  110E               	bcf	14,2	;volatile
 12614                           
 12615                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 12616  119F  108E               	bcf	14,1	;volatile
 12617                           
 12618                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 12619  11A0  0026               	movlb	6	; select bank6
 12620  11A1  100D               	bcf	13,0	;volatile
 12621                           
 12622                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 12623  11A2  118D               	bcf	13,3	;volatile
 12624                           
 12625                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 12626  11A3  120D               	bcf	13,4	;volatile
 12627                           
 12628                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 12629  11A4  0021               	movlb	1	; select bank1
 12630  11A5  1310               	bcf	16,6	;volatile
 12631                           
 12632                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 12633  11A6  1290               	bcf	16,5	;volatile
 12634                           
 12635                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 12636  11A7  1210               	bcf	16,4	;volatile
 12637                           
 12638                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 12639  11A8  1190               	bcf	16,3	;volatile
 12640                           
 12641                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 12642  11A9  1110               	bcf	16,2	;volatile
 12643                           
 12644                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 12645  11AA  300F               	movlw	15
 12646  11AB  0025               	movlb	5	; select bank5
 12647  11AC  0493               	iorwf	19,f	;volatile
 12648                           
 12649                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 12650  11AD  300F               	movlw	15
 12651  11AE  049A               	iorwf	26,f	;volatile
 12652                           
 12653                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 12654  11AF  300F               	movlw	15
 12655  11B0  0026               	movlb	6	; select bank6
 12656  11B1  0493               	iorwf	19,f	;volatile
 12657                           
 12658                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 12659  11B2  300F               	movlw	15
 12660  11B3  049A               	iorwf	26,f	;volatile
 12661                           
 12662                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 12663  11B4  300F               	movlw	15
 12664  11B5  049E               	iorwf	30,f	;volatile
 12665                           
 12666                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 12667  11B6  300F               	movlw	15
 12668  11B7  002C               	movlb	12	; select bank12
 12669  11B8  0493               	iorwf	19,f	;volatile
 12670                           
 12671                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 12672  11B9  300F               	movlw	15
 12673  11BA  0496               	iorwf	22,f	;volatile
 12674                           
 12675                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 12676  11BB  300F               	movlw	15
 12677  11BC  0499               	iorwf	25,f	;volatile
 12678                           
 12679                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 12680  11BD  300F               	movlw	15
 12681  11BE  049C               	iorwf	28,f	;volatile
 12682                           
 12683                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 12684  11BF  300F               	movlw	15
 12685  11C0  049F               	iorwf	31,f	;volatile
 12686                           
 12687                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 12688  11C1  0025               	movlb	5	; select bank5
 12689  11C2  019D               	clrf	29	;volatile
 12690                           
 12691                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 12692  11C3  019E               	clrf	30	;volatile
 12693                           
 12694                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 12695  11C4  019F               	clrf	31	;volatile
 12696                           
 12697                           ;user.c: 154: CCPR1 = 50;
 12698  11C5  3000               	movlw	0
 12699  11C6  0092               	movwf	18	;volatile
 12700  11C7  3032               	movlw	50
 12701  11C8  0091               	movwf	17	;volatile
 12702                           
 12703                           ;user.c: 155: CCPR2 = 100;
 12704  11C9  3000               	movlw	0
 12705  11CA  0099               	movwf	25	;volatile
 12706  11CB  3064               	movlw	100
 12707  11CC  0098               	movwf	24	;volatile
 12708                           
 12709                           ;user.c: 156: CCPR3 = 150;
 12710  11CD  3000               	movlw	0
 12711  11CE  0026               	movlb	6	; select bank6
 12712  11CF  0092               	movwf	18	;volatile
 12713  11D0  3096               	movlw	150
 12714  11D1  0091               	movwf	17	;volatile
 12715                           
 12716                           ;user.c: 157: CCPR4 = 200;
 12717  11D2  3000               	movlw	0
 12718  11D3  0099               	movwf	25	;volatile
 12719  11D4  30C8               	movlw	200
 12720  11D5  0098               	movwf	24	;volatile
 12721                           
 12722                           ;user.c: 158: init_timer2();
 12723  11D6  319D  2550  3191   	fcall	_init_timer2
 12724                           
 12725                           ;user.c: 159: init_timer0();
 12726  11D9  319D  2549         	fcall	_init_timer0
 12727  11DB  0008               	return
 12728  11DC                     __end_of_init_pwm:	
 12729                           
 12730                           	psect	text44
 12731  1D50                     __ptext44:	
 12732 ;; *************** function _init_timer2 *****************
 12733 ;; Defined at:
 12734 ;;		line 162 in file "user.c"
 12735 ;; Parameters:    Size  Location     Type
 12736 ;;		None
 12737 ;; Auto vars:     Size  Location     Type
 12738 ;;		None
 12739 ;; Return value:  Size  Location     Type
 12740 ;;                  1    wreg      void 
 12741 ;; Registers used:
 12742 ;;		wreg, status,2, status,0
 12743 ;; Tracked objects:
 12744 ;;		On entry : 0/0
 12745 ;;		On exit  : 0/0
 12746 ;;		Unchanged: 0/0
 12747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12752 ;;Total ram usage:        0 bytes
 12753 ;; Hardware stack levels used:    1
 12754 ;; Hardware stack levels required when called:    3
 12755 ;; This function calls:
 12756 ;;		Nothing
 12757 ;; This function is called by:
 12758 ;;		_init_pwm
 12759 ;; This function uses a non-reentrant model
 12760 ;;
 12761                           
 12762                           
 12763                           ;psect for function _init_timer2
 12764  1D50                     _init_timer2:	
 12765                           
 12766                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 12767                           
 12768                           ;incstack = 0
 12769                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12770  1D50  3087               	movlw	-121
 12771  1D51  0020               	movlb	0	; select bank0
 12772  1D52  059C               	andwf	28,f	;volatile
 12773                           
 12774                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 12775  1D53  30FC               	movlw	-4
 12776  1D54  059C               	andwf	28,f	;volatile
 12777                           
 12778                           ;user.c: 165: PR2 = 0xFF;
 12779  1D55  30FF               	movlw	255
 12780  1D56  009B               	movwf	27	;volatile
 12781                           
 12782                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 12783  1D57  151C               	bsf	28,2	;volatile
 12784  1D58  0008               	return
 12785  1D59                     __end_of_init_timer2:	
 12786                           
 12787                           	psect	text45
 12788  1D49                     __ptext45:	
 12789 ;; *************** function _init_timer0 *****************
 12790 ;; Defined at:
 12791 ;;		line 169 in file "user.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;		None
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;		None
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      void 
 12798 ;; Registers used:
 12799 ;;		None
 12800 ;; Tracked objects:
 12801 ;;		On entry : 0/0
 12802 ;;		On exit  : 0/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12809 ;;Total ram usage:        0 bytes
 12810 ;; Hardware stack levels used:    1
 12811 ;; Hardware stack levels required when called:    3
 12812 ;; This function calls:
 12813 ;;		Nothing
 12814 ;; This function is called by:
 12815 ;;		_init_pwm
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           
 12820                           ;psect for function _init_timer0
 12821  1D49                     _init_timer0:	
 12822                           
 12823                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 12824                           
 12825                           ;incstack = 0
 12826                           ; Regs used in _init_timer0: []
 12827  1D49  0021               	movlb	1	; select bank1
 12828  1D4A  1295               	bcf	21,5	;volatile
 12829                           
 12830                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 12831  1D4B  1195               	bcf	21,3	;volatile
 12832                           
 12833                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 12834  1D4C  1015               	bcf	21,0	;volatile
 12835                           
 12836                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 12837  1D4D  1495               	bsf	21,1	;volatile
 12838                           
 12839                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 12840  1D4E  1115               	bcf	21,2	;volatile
 12841  1D4F  0008               	return
 12842  1D50                     __end_of_init_timer0:	
 12843                           
 12844                           	psect	text46
 12845  1D62                     __ptext46:	
 12846 ;; *************** function _init_adc *****************
 12847 ;; Defined at:
 12848 ;;		line 115 in file "user.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;		None
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;		None
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, status,2, status,0
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12866 ;;Total ram usage:        0 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    3
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_InitApp
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           
 12877                           ;psect for function _init_adc
 12878  1D62                     _init_adc:	
 12879                           
 12880                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 12881                           
 12882                           ;incstack = 0
 12883                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12884  1D62  0021               	movlb	1	; select bank1
 12885  1D63  179E               	bsf	30,7	;volatile
 12886                           
 12887                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 12888  1D64  081E               	movf	30,w	;volatile
 12889  1D65  398F               	andlw	-113
 12890  1D66  3860               	iorlw	96
 12891  1D67  009E               	movwf	30	;volatile
 12892                           
 12893                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 12894  1D68  30FC               	movlw	-4
 12895  1D69  059E               	andwf	30,f	;volatile
 12896                           
 12897                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 12898  1D6A  141D               	bsf	29,0	;volatile
 12899  1D6B  0008               	return
 12900  1D6C                     __end_of_init_adc:	
 12901                           
 12902                           	psect	text47
 12903  1D45                     __ptext47:	
 12904 ;; *************** function _ConfigureOscillator *****************
 12905 ;; Defined at:
 12906 ;;		line 18 in file "system.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;		None
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;		None
 12911 ;; Return value:  Size  Location     Type
 12912 ;;                  1    wreg      void 
 12913 ;; Registers used:
 12914 ;;		wreg, status,2, status,0
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12924 ;;Total ram usage:        0 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    3
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_main
 12931 ;; This function uses a non-reentrant model
 12932 ;;
 12933                           
 12934                           
 12935                           ;psect for function _ConfigureOscillator
 12936  1D45                     _ConfigureOscillator:	
 12937                           
 12938                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12939                           
 12940                           ;incstack = 0
 12941                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12942  1D45  30FC               	movlw	-4
 12943  1D46  0021               	movlb	1	; select bank1
 12944  1D47  0599               	andwf	25,f	;volatile
 12945  1D48  0008               	return
 12946  1D49                     __end_of_ConfigureOscillator:	
 12947                           
 12948                           	psect	intentry
 12949  0004                     __pintentry:	
 12950 ;; *************** function _isr *****************
 12951 ;; Defined at:
 12952 ;;		line 25 in file "interrupts.c"
 12953 ;; Parameters:    Size  Location     Type
 12954 ;;		None
 12955 ;; Auto vars:     Size  Location     Type
 12956 ;;  tmpSubDelay     2   35[BANK0 ] int 
 12957 ;; Return value:  Size  Location     Type
 12958 ;;                  1    wreg      void 
 12959 ;; Registers used:
 12960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12961 ;; Tracked objects:
 12962 ;;		On entry : 0/0
 12963 ;;		On exit  : 0/0
 12964 ;;		Unchanged: 0/0
 12965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12968 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12969 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12970 ;;Total ram usage:       11 bytes
 12971 ;; Hardware stack levels used:    1
 12972 ;; Hardware stack levels required when called:    2
 12973 ;; This function calls:
 12974 ;;		___awdiv
 12975 ;;		_modulation
 12976 ;;		i1_set_leds_top
 12977 ;; This function is called by:
 12978 ;;		Interrupt level 1
 12979 ;; This function uses a non-reentrant model
 12980 ;;
 12981                           
 12982  0004                     _isr:	
 12983                           
 12984                           ;incstack = 0
 12985                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12986  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12987  0005  3180               	pagesel	$
 12988  0006  0020               	movlb	0	; select bank0
 12989  0007  087F               	movf	127,w
 12990  0008  00C2               	movwf	??_isr+8
 12991                           
 12992                           ;interrupts.c: 26: int tmpSubDelay;
 12993                           ;interrupts.c: 28: extern volatile long timer;
 12994                           ;interrupts.c: 29: extern volatile long sub_timer;
 12995                           ;interrupts.c: 30: extern volatile long tap_timer;
 12996                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 12997                           ;interrupts.c: 32: extern int mod_delay_time;
 12998                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 12999                           ;interrupts.c: 36: extern int top_push_state;
 13000                           ;interrupts.c: 37: extern uint8_t feedback_start;
 13001                           ;interrupts.c: 38: extern volatile long mod_timer;
 13002                           ;interrupts.c: 39: extern volatile long delay_time;
 13003  0009  1D0B               	btfss	11,2	;volatile
 13004  000A  2919               	goto	i1l119
 13005                           
 13006                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 13007  000B  085D               	movf	_delay_time+1,w	;volatile
 13008  000C  00C4               	movwf	isr@tmpSubDelay+1
 13009  000D  085C               	movf	_delay_time,w	;volatile
 13010  000E  00C3               	movwf	isr@tmpSubDelay
 13011                           
 13012                           ;interrupts.c: 42: timer = timer + 1;
 13013  000F  3001               	movlw	1
 13014  0010  00BA               	movwf	??_isr
 13015  0011  3000               	movlw	0
 13016  0012  00BB               	movwf	??_isr+1
 13017  0013  3000               	movlw	0
 13018  0014  00BC               	movwf	??_isr+2
 13019  0015  3000               	movlw	0
 13020  0016  00BD               	movwf	??_isr+3
 13021  0017  084D               	movf	_timer,w	;volatile
 13022  0018  07BA               	addwf	??_isr,f
 13023  0019  084E               	movf	_timer+1,w	;volatile
 13024  001A  3DBB               	addwfc	??_isr+1,f
 13025  001B  084F               	movf	_timer+2,w	;volatile
 13026  001C  3DBC               	addwfc	??_isr+2,f
 13027  001D  0850               	movf	_timer+3,w	;volatile
 13028  001E  3DBD               	addwfc	??_isr+3,f
 13029  001F  083D               	movf	??_isr+3,w
 13030  0020  00D0               	movwf	_timer+3	;volatile
 13031  0021  083C               	movf	??_isr+2,w
 13032  0022  00CF               	movwf	_timer+2	;volatile
 13033  0023  083B               	movf	??_isr+1,w
 13034  0024  00CE               	movwf	_timer+1	;volatile
 13035  0025  083A               	movf	??_isr,w
 13036  0026  00CD               	movwf	_timer	;volatile
 13037                           
 13038                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 13039  0027  3001               	movlw	1
 13040  0028  00BA               	movwf	??_isr
 13041  0029  3000               	movlw	0
 13042  002A  00BB               	movwf	??_isr+1
 13043  002B  3000               	movlw	0
 13044  002C  00BC               	movwf	??_isr+2
 13045  002D  3000               	movlw	0
 13046  002E  00BD               	movwf	??_isr+3
 13047  002F  0845               	movf	_sub_timer,w	;volatile
 13048  0030  07BA               	addwf	??_isr,f
 13049  0031  0846               	movf	_sub_timer+1,w	;volatile
 13050  0032  3DBB               	addwfc	??_isr+1,f
 13051  0033  0847               	movf	_sub_timer+2,w	;volatile
 13052  0034  3DBC               	addwfc	??_isr+2,f
 13053  0035  0848               	movf	_sub_timer+3,w	;volatile
 13054  0036  3DBD               	addwfc	??_isr+3,f
 13055  0037  083D               	movf	??_isr+3,w
 13056  0038  00C8               	movwf	_sub_timer+3	;volatile
 13057  0039  083C               	movf	??_isr+2,w
 13058  003A  00C7               	movwf	_sub_timer+2	;volatile
 13059  003B  083B               	movf	??_isr+1,w
 13060  003C  00C6               	movwf	_sub_timer+1	;volatile
 13061  003D  083A               	movf	??_isr,w
 13062  003E  00C5               	movwf	_sub_timer	;volatile
 13063                           
 13064                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 13065  003F  3001               	movlw	1
 13066  0040  00BA               	movwf	??_isr
 13067  0041  3000               	movlw	0
 13068  0042  00BB               	movwf	??_isr+1
 13069  0043  3000               	movlw	0
 13070  0044  00BC               	movwf	??_isr+2
 13071  0045  3000               	movlw	0
 13072  0046  00BD               	movwf	??_isr+3
 13073  0047  0849               	movf	_tap_timer,w	;volatile
 13074  0048  07BA               	addwf	??_isr,f
 13075  0049  084A               	movf	_tap_timer+1,w	;volatile
 13076  004A  3DBB               	addwfc	??_isr+1,f
 13077  004B  084B               	movf	_tap_timer+2,w	;volatile
 13078  004C  3DBC               	addwfc	??_isr+2,f
 13079  004D  084C               	movf	_tap_timer+3,w	;volatile
 13080  004E  3DBD               	addwfc	??_isr+3,f
 13081  004F  083D               	movf	??_isr+3,w
 13082  0050  00CC               	movwf	_tap_timer+3	;volatile
 13083  0051  083C               	movf	??_isr+2,w
 13084  0052  00CB               	movwf	_tap_timer+2	;volatile
 13085  0053  083B               	movf	??_isr+1,w
 13086  0054  00CA               	movwf	_tap_timer+1	;volatile
 13087  0055  083A               	movf	??_isr,w
 13088  0056  00C9               	movwf	_tap_timer	;volatile
 13089                           
 13090                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 13091  0057  3001               	movlw	1
 13092  0058  00BA               	movwf	??_isr
 13093  0059  3000               	movlw	0
 13094  005A  00BB               	movwf	??_isr+1
 13095  005B  3000               	movlw	0
 13096  005C  00BC               	movwf	??_isr+2
 13097  005D  3000               	movlw	0
 13098  005E  00BD               	movwf	??_isr+3
 13099  005F  0023               	movlb	3	; select bank3
 13100  0060  0838               	movf	_mod_timer^(0+384),w	;volatile
 13101  0061  0020               	movlb	0	; select bank0
 13102  0062  07BA               	addwf	??_isr,f
 13103  0063  0023               	movlb	3	; select bank3
 13104  0064  0839               	movf	(_mod_timer+1)^(0+384),w	;volatile
 13105  0065  0020               	movlb	0	; select bank0
 13106  0066  3DBB               	addwfc	??_isr+1,f
 13107  0067  0023               	movlb	3	; select bank3
 13108  0068  083A               	movf	(_mod_timer+2)^(0+384),w	;volatile
 13109  0069  0020               	movlb	0	; select bank0
 13110  006A  3DBC               	addwfc	??_isr+2,f
 13111  006B  0023               	movlb	3	; select bank3
 13112  006C  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13113  006D  0020               	movlb	0	; select bank0
 13114  006E  3DBD               	addwfc	??_isr+3,f
 13115  006F  083D               	movf	??_isr+3,w
 13116  0070  0023               	movlb	3	; select bank3
 13117  0071  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13118  0072  0020               	movlb	0	; select bank0
 13119  0073  083C               	movf	??_isr+2,w
 13120  0074  0023               	movlb	3	; select bank3
 13121  0075  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13122  0076  0020               	movlb	0	; select bank0
 13123  0077  083B               	movf	??_isr+1,w
 13124  0078  0023               	movlb	3	; select bank3
 13125  0079  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13126  007A  0020               	movlb	0	; select bank0
 13127  007B  083A               	movf	??_isr,w
 13128  007C  0023               	movlb	3	; select bank3
 13129  007D  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13130                           
 13131                           ;interrupts.c: 46: test_timer++;
 13132  007E  3001               	movlw	1
 13133  007F  0024               	movlb	4	; select bank4
 13134  0080  07CE               	addwf	_test_timer^(0+512),f	;volatile
 13135  0081  3000               	movlw	0
 13136  0082  3DCF               	addwfc	(_test_timer+1)^(0+512),f	;volatile
 13137  0083  3000               	movlw	0
 13138  0084  3DD0               	addwfc	(_test_timer+2)^(0+512),f	;volatile
 13139  0085  3000               	movlw	0
 13140  0086  3DD1               	addwfc	(_test_timer+3)^(0+512),f	;volatile
 13141                           
 13142                           ;interrupts.c: 47: if (feedback_start == 1) {
 13143  0087  0020               	movlb	0	; select bank0
 13144  0088  0354               	decf	_feedback_start,w
 13145  0089  1D03               	btfss	3,2
 13146  008A  28A2               	goto	i1l4624
 13147                           
 13148                           ;interrupts.c: 48: feedback_timer++;
 13149  008B  3001               	movlw	1
 13150  008C  0022               	movlb	2	; select bank2
 13151  008D  07D3               	addwf	_feedback_timer^(0+256),f	;volatile
 13152  008E  3000               	movlw	0
 13153  008F  3DD4               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13154                           
 13155                           ;interrupts.c: 49: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13156  0090  0854               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13157  0091  0020               	movlb	0	; select bank0
 13158  0092  0263               	subwf	_long_press_limit+1,w
 13159  0093  1D03               	skipz
 13160  0094  2899               	goto	u458_25
 13161  0095  0022               	movlb	2	; select bank2
 13162  0096  0853               	movf	_feedback_timer^(0+256),w	;volatile
 13163  0097  0020               	movlb	0	; select bank0
 13164  0098  0262               	subwf	_long_press_limit,w
 13165  0099                     u458_25:	
 13166  0099  1803               	skipnc
 13167  009A  28A2               	goto	i1l4624
 13168  009B  0863               	movf	_long_press_limit+1,w
 13169  009C  0022               	movlb	2	; select bank2
 13170  009D  00D4               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13171  009E  0020               	movlb	0	; select bank0
 13172  009F  0862               	movf	_long_press_limit,w
 13173  00A0  0022               	movlb	2	; select bank2
 13174  00A1  00D3               	movwf	_feedback_timer^(0+256)	;volatile
 13175  00A2                     i1l4624:	
 13176                           
 13177                           ;interrupts.c: 50: }
 13178                           ;interrupts.c: 51: if (longTap_start == 1) {
 13179  00A2  0020               	movlb	0	; select bank0
 13180  00A3  0355               	decf	_longTap_start,w
 13181  00A4  1D03               	btfss	3,2
 13182  00A5  28BD               	goto	i1l4630
 13183                           
 13184                           ;interrupts.c: 52: longTap_timer++;
 13185  00A6  3001               	movlw	1
 13186  00A7  0022               	movlb	2	; select bank2
 13187  00A8  07D7               	addwf	_longTap_timer^(0+256),f	;volatile
 13188  00A9  3000               	movlw	0
 13189  00AA  3DD8               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13190                           
 13191                           ;interrupts.c: 53: if (longTap_timer > long_press_limit) {
 13192  00AB  0858               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13193  00AC  0020               	movlb	0	; select bank0
 13194  00AD  0263               	subwf	_long_press_limit+1,w
 13195  00AE  1D03               	skipz
 13196  00AF  28B4               	goto	u460_25
 13197  00B0  0022               	movlb	2	; select bank2
 13198  00B1  0857               	movf	_longTap_timer^(0+256),w	;volatile
 13199  00B2  0020               	movlb	0	; select bank0
 13200  00B3  0262               	subwf	_long_press_limit,w
 13201  00B4                     u460_25:	
 13202  00B4  1803               	skipnc
 13203  00B5  28BD               	goto	i1l4630
 13204                           
 13205                           ;interrupts.c: 54: longTap_timer = long_press_limit;
 13206  00B6  0863               	movf	_long_press_limit+1,w
 13207  00B7  0022               	movlb	2	; select bank2
 13208  00B8  00D8               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13209  00B9  0020               	movlb	0	; select bank0
 13210  00BA  0862               	movf	_long_press_limit,w
 13211  00BB  0022               	movlb	2	; select bank2
 13212  00BC  00D7               	movwf	_longTap_timer^(0+256)	;volatile
 13213  00BD                     i1l4630:	
 13214                           
 13215                           ;interrupts.c: 55: }
 13216                           ;interrupts.c: 56: }
 13217                           ;interrupts.c: 57: INTCONbits.TMR0IF = 0;
 13218  00BD  110B               	bcf	11,2	;volatile
 13219                           
 13220                           ;interrupts.c: 59: if (adjust_sub_delay == 1) {
 13221  00BE  0023               	movlb	3	; select bank3
 13222  00BF  0340               	decf	_adjust_sub_delay^(0+384),w
 13223  00C0  0441               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 13224  00C1  1D03               	btfss	3,2
 13225  00C2  2919               	goto	i1l119
 13226                           
 13227                           ;interrupts.c: 60: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13228  00C3  0020               	movlb	0	; select bank0
 13229  00C4  0848               	movf	_sub_timer+3,w	;volatile
 13230  00C5  3A80               	xorlw	128
 13231  00C6  00BA               	movwf	??_isr
 13232  00C7  085F               	movf	_delay_time+3,w	;volatile
 13233  00C8  3A80               	xorlw	128
 13234  00C9  023A               	subwf	??_isr,w
 13235  00CA  1D03               	skipz
 13236  00CB  28D6               	goto	u462_23
 13237  00CC  085E               	movf	_delay_time+2,w	;volatile
 13238  00CD  0247               	subwf	_sub_timer+2,w	;volatile
 13239  00CE  1D03               	skipz
 13240  00CF  28D6               	goto	u462_23
 13241  00D0  085D               	movf	_delay_time+1,w	;volatile
 13242  00D1  0246               	subwf	_sub_timer+1,w	;volatile
 13243  00D2  1D03               	skipz
 13244  00D3  28D6               	goto	u462_23
 13245  00D4  085C               	movf	_delay_time,w	;volatile
 13246  00D5  0245               	subwf	_sub_timer,w	;volatile
 13247  00D6                     u462_23:	
 13248  00D6  1C03               	skipc
 13249  00D7  2919               	goto	i1l119
 13250  00D8  0858               	movf	_baseline_delay_time,w	;volatile
 13251  00D9  00BA               	movwf	??_isr
 13252  00DA  0859               	movf	_baseline_delay_time+1,w	;volatile
 13253  00DB  00BB               	movwf	??_isr+1
 13254  00DC  085A               	movf	_baseline_delay_time+2,w	;volatile
 13255  00DD  00BC               	movwf	??_isr+2
 13256  00DE  085B               	movf	_baseline_delay_time+3,w	;volatile
 13257  00DF  00BD               	movwf	??_isr+3
 13258  00E0  094D               	comf	_timer,w	;volatile
 13259  00E1  00BE               	movwf	??_isr+4
 13260  00E2  094E               	comf	_timer+1,w	;volatile
 13261  00E3  00BF               	movwf	??_isr+5
 13262  00E4  094F               	comf	_timer+2,w	;volatile
 13263  00E5  00C0               	movwf	??_isr+6
 13264  00E6  0950               	comf	_timer+3,w	;volatile
 13265  00E7  00C1               	movwf	??_isr+7
 13266  00E8  0ABE               	incf	??_isr+4,f
 13267  00E9  1903               	skipnz
 13268  00EA  0ABF               	incf	??_isr+5,f
 13269  00EB  1903               	skipnz
 13270  00EC  0AC0               	incf	??_isr+6,f
 13271  00ED  1903               	skipnz
 13272  00EE  0AC1               	incf	??_isr+7,f
 13273  00EF  083E               	movf	??_isr+4,w
 13274  00F0  07BA               	addwf	??_isr,f
 13275  00F1  083F               	movf	??_isr+5,w
 13276  00F2  3DBB               	addwfc	??_isr+1,f
 13277  00F3  0840               	movf	??_isr+6,w
 13278  00F4  3DBC               	addwfc	??_isr+2,f
 13279  00F5  0841               	movf	??_isr+7,w
 13280  00F6  3DBD               	addwfc	??_isr+3,f
 13281  00F7  1BBD               	btfsc	??_isr+3,7
 13282  00F8  2906               	goto	i1l4638
 13283  00F9  083D               	movf	??_isr+3,w
 13284  00FA  1D03               	btfss	3,2
 13285  00FB  2919               	goto	i1l119
 13286  00FC  083C               	movf	??_isr+2,w
 13287  00FD  1D03               	btfss	3,2
 13288  00FE  2919               	goto	i1l119
 13289  00FF  083B               	movf	??_isr+1,w
 13290  0100  1D03               	btfss	3,2
 13291  0101  2919               	goto	i1l119
 13292  0102  3004               	movlw	4
 13293  0103  023A               	subwf	??_isr,w
 13294  0104  1803               	btfsc	3,0
 13295  0105  2919               	goto	i1l119
 13296  0106                     i1l4638:	
 13297                           
 13298                           ;interrupts.c: 61: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13299  0106  094D               	comf	_timer,w	;volatile
 13300  0107  00BA               	movwf	??_isr
 13301  0108  094E               	comf	_timer+1,w	;volatile
 13302  0109  00BB               	movwf	??_isr+1
 13303  010A  0ABA               	incf	??_isr,f
 13304  010B  1903               	skipnz
 13305  010C  0ABB               	incf	??_isr+1,f
 13306  010D  0858               	movf	_baseline_delay_time,w	;volatile
 13307  010E  073A               	addwf	??_isr,w
 13308  010F  00BC               	movwf	??_isr+2
 13309  0110  0859               	movf	_baseline_delay_time+1,w	;volatile
 13310  0111  3D3B               	addwfc	??_isr+1,w
 13311  0112  00BD               	movwf	??_isr+3
 13312  0113  0845               	movf	_sub_timer,w	;volatile
 13313  0114  073C               	addwf	??_isr+2,w
 13314  0115  00C3               	movwf	isr@tmpSubDelay
 13315  0116  0846               	movf	_sub_timer+1,w	;volatile
 13316  0117  3D3D               	addwfc	??_isr+3,w
 13317  0118  00C4               	movwf	isr@tmpSubDelay+1
 13318  0119                     i1l119:	
 13319                           
 13320                           ;interrupts.c: 62: }
 13321                           ;interrupts.c: 63: }
 13322                           ;interrupts.c: 64: }
 13323                           ;interrupts.c: 77: if (longTap_state < 1 && doubleTap_state < 1) {
 13324  0119  0020               	movlb	0	; select bank0
 13325  011A  0867               	movf	_longTap_state,w	;volatile
 13326  011B  1D03               	btfss	3,2
 13327  011C  2976               	goto	i1l4662
 13328  011D  0853               	movf	_doubleTap_state,w	;volatile
 13329  011E  1D03               	btfss	3,2
 13330  011F  2976               	goto	i1l4662
 13331                           
 13332                           ;interrupts.c: 80: if (timer >= baseline_delay_time) {
 13333  0120  0850               	movf	_timer+3,w	;volatile
 13334  0121  3A80               	xorlw	128
 13335  0122  00BA               	movwf	??_isr
 13336  0123  085B               	movf	_baseline_delay_time+3,w	;volatile
 13337  0124  3A80               	xorlw	128
 13338  0125  023A               	subwf	??_isr,w
 13339  0126  1D03               	skipz
 13340  0127  2932               	goto	u466_23
 13341  0128  085A               	movf	_baseline_delay_time+2,w	;volatile
 13342  0129  024F               	subwf	_timer+2,w	;volatile
 13343  012A  1D03               	skipz
 13344  012B  2932               	goto	u466_23
 13345  012C  0859               	movf	_baseline_delay_time+1,w	;volatile
 13346  012D  024E               	subwf	_timer+1,w	;volatile
 13347  012E  1D03               	skipz
 13348  012F  2932               	goto	u466_23
 13349  0130  0858               	movf	_baseline_delay_time,w	;volatile
 13350  0131  024D               	subwf	_timer,w	;volatile
 13351  0132                     u466_23:	
 13352  0132  1C03               	skipc
 13353  0133  2964               	goto	i1l4658
 13354                           
 13355                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 13356  0134  0022               	movlb	2	; select bank2
 13357  0135  160D               	bsf	13,4	;volatile
 13358                           
 13359                           ;interrupts.c: 85: timer = 0;
 13360  0136  3000               	movlw	0
 13361  0137  0020               	movlb	0	; select bank0
 13362  0138  00D0               	movwf	_timer+3	;volatile
 13363  0139  3000               	movlw	0
 13364  013A  00CF               	movwf	_timer+2	;volatile
 13365  013B  3000               	movlw	0
 13366  013C  00CE               	movwf	_timer+1	;volatile
 13367  013D  3000               	movlw	0
 13368  013E  00CD               	movwf	_timer	;volatile
 13369                           
 13370                           ;interrupts.c: 86: if (reset_sub_delay == 1) {
 13371  013F  0023               	movlb	3	; select bank3
 13372  0140  035A               	decf	_reset_sub_delay^(0+384),w
 13373  0141  045B               	iorwf	(_reset_sub_delay+1)^(0+384),w
 13374  0142  1D03               	btfss	3,2
 13375  0143  2964               	goto	i1l4658
 13376                           
 13377                           ;interrupts.c: 88: CCPR1 = delay_counter;
 13378  0144  0022               	movlb	2	; select bank2
 13379  0145  0852               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13380  0146  0025               	movlb	5	; select bank5
 13381  0147  0092               	movwf	18	;volatile
 13382  0148  0022               	movlb	2	; select bank2
 13383  0149  0851               	movf	_delay_counter^(0+256),w	;volatile
 13384  014A  0025               	movlb	5	; select bank5
 13385  014B  0091               	movwf	17	;volatile
 13386                           
 13387                           ;interrupts.c: 91: mod_counter = 0;
 13388  014C  0020               	movlb	0	; select bank0
 13389  014D  01D1               	clrf	_mod_counter
 13390  014E  01D2               	clrf	_mod_counter+1
 13391                           
 13392                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 13393  014F  0023               	movlb	3	; select bank3
 13394  0150  0864               	movf	_mod_delay_time^(0+384),w
 13395  0151  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13396  0152  0865               	movf	(_mod_delay_time+1)^(0+384),w
 13397  0153  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13398  0154  0D89               	rlf	9,f
 13399  0155  3B89               	subwfb	9,f
 13400  0156  0989               	comf	9,f
 13401  0157  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13402  0158  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13403                           
 13404                           ;interrupts.c: 94: reset_sub_delay = 0;
 13405  0159  01DA               	clrf	_reset_sub_delay^(0+384)
 13406  015A  01DB               	clrf	(_reset_sub_delay+1)^(0+384)
 13407                           
 13408                           ;interrupts.c: 95: sub_timer = delay_time;
 13409  015B  0020               	movlb	0	; select bank0
 13410  015C  085F               	movf	_delay_time+3,w	;volatile
 13411  015D  00C8               	movwf	_sub_timer+3	;volatile
 13412  015E  085E               	movf	_delay_time+2,w	;volatile
 13413  015F  00C7               	movwf	_sub_timer+2	;volatile
 13414  0160  085D               	movf	_delay_time+1,w	;volatile
 13415  0161  00C6               	movwf	_sub_timer+1	;volatile
 13416  0162  085C               	movf	_delay_time,w	;volatile
 13417  0163  00C5               	movwf	_sub_timer	;volatile
 13418  0164                     i1l4658:	
 13419                           
 13420                           ;interrupts.c: 96: }
 13421                           ;interrupts.c: 97: }
 13422                           ;interrupts.c: 99: if (timer >= 30) {
 13423  0164  0020               	movlb	0	; select bank0
 13424  0165  1BD0               	btfsc	_timer+3,7	;volatile
 13425  0166  2976               	goto	i1l4662
 13426  0167  0850               	movf	_timer+3,w	;volatile
 13427  0168  1D03               	btfss	3,2
 13428  0169  2974               	goto	i1l4660
 13429  016A  084F               	movf	_timer+2,w	;volatile
 13430  016B  1D03               	btfss	3,2
 13431  016C  2974               	goto	i1l4660
 13432  016D  084E               	movf	_timer+1,w	;volatile
 13433  016E  1D03               	btfss	3,2
 13434  016F  2974               	goto	i1l4660
 13435  0170  301E               	movlw	30
 13436  0171  024D               	subwf	_timer,w	;volatile
 13437  0172  1C03               	btfss	3,0
 13438  0173  2976               	goto	i1l4662
 13439  0174                     i1l4660:	
 13440                           
 13441                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 13442  0174  0022               	movlb	2	; select bank2
 13443  0175  120D               	bcf	13,4	;volatile
 13444  0176                     i1l4662:	
 13445                           
 13446                           ;interrupts.c: 103: }
 13447                           ;interrupts.c: 104: }
 13448                           ;interrupts.c: 107: if (sub_timer >= tmpSubDelay) {
 13449  0176  0020               	movlb	0	; select bank0
 13450  0177  0843               	movf	isr@tmpSubDelay,w
 13451  0178  00BA               	movwf	??_isr
 13452  0179  0844               	movf	isr@tmpSubDelay+1,w
 13453  017A  00BB               	movwf	??_isr+1
 13454  017B  3000               	movlw	0
 13455  017C  1BBB               	btfsc	??_isr+1,7
 13456  017D  30FF               	movlw	255
 13457  017E  00BC               	movwf	??_isr+2
 13458  017F  00BD               	movwf	??_isr+3
 13459  0180  0848               	movf	_sub_timer+3,w	;volatile
 13460  0181  3A80               	xorlw	128
 13461  0182  00BE               	movwf	??_isr+4
 13462  0183  083D               	movf	??_isr+3,w
 13463  0184  3A80               	xorlw	128
 13464  0185  023E               	subwf	??_isr+4,w
 13465  0186  1D03               	skipz
 13466  0187  2992               	goto	u469_23
 13467  0188  083C               	movf	??_isr+2,w
 13468  0189  0247               	subwf	_sub_timer+2,w	;volatile
 13469  018A  1D03               	skipz
 13470  018B  2992               	goto	u469_23
 13471  018C  083B               	movf	??_isr+1,w
 13472  018D  0246               	subwf	_sub_timer+1,w	;volatile
 13473  018E  1D03               	skipz
 13474  018F  2992               	goto	u469_23
 13475  0190  083A               	movf	??_isr,w
 13476  0191  0245               	subwf	_sub_timer,w	;volatile
 13477  0192                     u469_23:	
 13478  0192  1C03               	skipc
 13479  0193  29AF               	goto	i1l4672
 13480                           
 13481                           ;interrupts.c: 108: if (suspend_blink == 0) {
 13482  0194  0856               	movf	_suspend_blink,w	;volatile
 13483  0195  1D03               	btfss	3,2
 13484  0196  29A2               	goto	i1l4668
 13485                           
 13486                           ;interrupts.c: 109: set_leds_top(top_push_state, 1);
 13487  0197  0865               	movf	_top_push_state+1,w
 13488  0198  00F1               	movwf	i1set_leds_top@x+1
 13489  0199  0864               	movf	_top_push_state,w
 13490  019A  00F0               	movwf	i1set_leds_top@x
 13491  019B  3001               	movlw	1
 13492  019C  00F2               	movwf	i1set_leds_top@ledState
 13493  019D  3000               	movlw	0
 13494  019E  00F3               	movwf	i1set_leds_top@ledState+1
 13495  019F  3192  2264  3180   	fcall	i1_set_leds_top
 13496  01A2                     i1l4668:	
 13497                           
 13498                           ;interrupts.c: 110: }
 13499                           ;interrupts.c: 111: tmpSubDelay = delay_time;
 13500  01A2  0020               	movlb	0	; select bank0
 13501  01A3  085D               	movf	_delay_time+1,w	;volatile
 13502  01A4  00C4               	movwf	isr@tmpSubDelay+1
 13503  01A5  085C               	movf	_delay_time,w	;volatile
 13504  01A6  00C3               	movwf	isr@tmpSubDelay
 13505                           
 13506                           ;interrupts.c: 112: sub_timer = 0;
 13507  01A7  3000               	movlw	0
 13508  01A8  00C8               	movwf	_sub_timer+3	;volatile
 13509  01A9  3000               	movlw	0
 13510  01AA  00C7               	movwf	_sub_timer+2	;volatile
 13511  01AB  3000               	movlw	0
 13512  01AC  00C6               	movwf	_sub_timer+1	;volatile
 13513  01AD  3000               	movlw	0
 13514  01AE  00C5               	movwf	_sub_timer	;volatile
 13515  01AF                     i1l4672:	
 13516                           
 13517                           ;interrupts.c: 113: }
 13518                           ;interrupts.c: 115: if (sub_timer >= 20) {
 13519  01AF  1BC8               	btfsc	_sub_timer+3,7	;volatile
 13520  01B0  29CB               	goto	i1l4678
 13521  01B1  0848               	movf	_sub_timer+3,w	;volatile
 13522  01B2  1D03               	btfss	3,2
 13523  01B3  29BE               	goto	i1l4674
 13524  01B4  0847               	movf	_sub_timer+2,w	;volatile
 13525  01B5  1D03               	btfss	3,2
 13526  01B6  29BE               	goto	i1l4674
 13527  01B7  0846               	movf	_sub_timer+1,w	;volatile
 13528  01B8  1D03               	btfss	3,2
 13529  01B9  29BE               	goto	i1l4674
 13530  01BA  3014               	movlw	20
 13531  01BB  0245               	subwf	_sub_timer,w	;volatile
 13532  01BC  1C03               	btfss	3,0
 13533  01BD  29CB               	goto	i1l4678
 13534  01BE                     i1l4674:	
 13535                           
 13536                           ;interrupts.c: 116: if (suspend_blink == 0) {
 13537  01BE  0856               	movf	_suspend_blink,w	;volatile
 13538  01BF  1D03               	btfss	3,2
 13539  01C0  29CB               	goto	i1l4678
 13540                           
 13541                           ;interrupts.c: 117: set_leds_top(top_push_state, 0);
 13542  01C1  0865               	movf	_top_push_state+1,w
 13543  01C2  00F1               	movwf	i1set_leds_top@x+1
 13544  01C3  0864               	movf	_top_push_state,w
 13545  01C4  00F0               	movwf	i1set_leds_top@x
 13546  01C5  3000               	movlw	0
 13547  01C6  00F2               	movwf	i1set_leds_top@ledState
 13548  01C7  00F3               	movwf	i1set_leds_top@ledState+1
 13549  01C8  3192  2264  3180   	fcall	i1_set_leds_top
 13550  01CB                     i1l4678:	
 13551                           
 13552                           ;interrupts.c: 118: }
 13553                           ;interrupts.c: 119: }
 13554                           ;interrupts.c: 133: if (mod_timer >= mod_delay_time) {
 13555  01CB  0023               	movlb	3	; select bank3
 13556  01CC  0864               	movf	_mod_delay_time^(0+384),w
 13557  01CD  0020               	movlb	0	; select bank0
 13558  01CE  00BA               	movwf	??_isr
 13559  01CF  0023               	movlb	3	; select bank3
 13560  01D0  0865               	movf	(_mod_delay_time+1)^(0+384),w
 13561  01D1  0020               	movlb	0	; select bank0
 13562  01D2  00BB               	movwf	??_isr+1
 13563  01D3  3000               	movlw	0
 13564  01D4  1BBB               	btfsc	??_isr+1,7
 13565  01D5  30FF               	movlw	255
 13566  01D6  00BC               	movwf	??_isr+2
 13567  01D7  00BD               	movwf	??_isr+3
 13568  01D8  0023               	movlb	3	; select bank3
 13569  01D9  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13570  01DA  3A80               	xorlw	128
 13571  01DB  0020               	movlb	0	; select bank0
 13572  01DC  00BE               	movwf	??_isr+4
 13573  01DD  083D               	movf	??_isr+3,w
 13574  01DE  3A80               	xorlw	128
 13575  01DF  023E               	subwf	??_isr+4,w
 13576  01E0  0023               	movlb	3	; select bank3
 13577  01E1  1D03               	skipz
 13578  01E2  29F3               	goto	u473_23
 13579  01E3  0020               	movlb	0	; select bank0
 13580  01E4  083C               	movf	??_isr+2,w
 13581  01E5  0023               	movlb	3	; select bank3
 13582  01E6  023A               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 13583  01E7  1D03               	skipz
 13584  01E8  29F3               	goto	u473_23
 13585  01E9  0020               	movlb	0	; select bank0
 13586  01EA  083B               	movf	??_isr+1,w
 13587  01EB  0023               	movlb	3	; select bank3
 13588  01EC  0239               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 13589  01ED  1D03               	skipz
 13590  01EE  29F3               	goto	u473_23
 13591  01EF  0020               	movlb	0	; select bank0
 13592  01F0  083A               	movf	??_isr,w
 13593  01F1  0023               	movlb	3	; select bank3
 13594  01F2  0238               	subwf	_mod_timer^(0+384),w	;volatile
 13595  01F3                     u473_23:	
 13596  01F3  1C03               	skipc
 13597  01F4  2AA5               	goto	i1l4722
 13598                           
 13599                           ;interrupts.c: 134: mod_timer = 0;
 13600  01F5  3000               	movlw	0
 13601  01F6  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13602  01F7  3000               	movlw	0
 13603  01F8  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13604  01F9  3000               	movlw	0
 13605  01FA  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13606  01FB  3000               	movlw	0
 13607  01FC  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13608                           
 13609                           ;interrupts.c: 137: if (mod_counter >= 60) {
 13610  01FD  0020               	movlb	0	; select bank0
 13611  01FE  0852               	movf	_mod_counter+1,w
 13612  01FF  3A80               	xorlw	128
 13613  0200  00BA               	movwf	??_isr
 13614  0201  3080               	movlw	128
 13615  0202  023A               	subwf	??_isr,w
 13616  0203  1D03               	skipz
 13617  0204  2A07               	goto	u474_25
 13618  0205  303C               	movlw	60
 13619  0206  0251               	subwf	_mod_counter,w
 13620  0207                     u474_25:	
 13621  0207  1C03               	skipc
 13622  0208  2A4B               	goto	i1l4714
 13623                           
 13624                           ;interrupts.c: 138: mod_counter = 0;
 13625  0209  0020               	movlb	0	; select bank0
 13626  020A  01D1               	clrf	_mod_counter
 13627  020B  01D2               	clrf	_mod_counter+1
 13628                           
 13629                           ;interrupts.c: 139: }
 13630                           ;interrupts.c: 151: switch (bottom_push_state) {
 13631  020C  2A4B               	goto	i1l4714
 13632  020D                     i1l4684:	
 13633                           ;interrupts.c: 152: case 1:
 13634                           
 13635                           
 13636                           ;interrupts.c: 153: mod_value = (int)mod1[mod_counter];
 13637  020D  0851               	movf	_mod_counter,w
 13638  020E  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13639  020F  2A12               	goto	L15
 13640  0210                     i1l4688:	
 13641                           ;interrupts.c: 156: case 2:
 13642                           
 13643                           ;interrupts.c: 155: break;
 13644                           
 13645                           ;interrupts.c: 154: PORTCbits.RC4 = 0;
 13646                           
 13647                           
 13648                           ;interrupts.c: 157: mod_value = (int)mod2[mod_counter];
 13649  0210  0851               	movf	_mod_counter,w
 13650  0211  3EA0               	addlw	(low (_mod2| (0+768)))& (0+255)
 13651  0212                     L15:	
 13652  0212  0086               	movwf	6
 13653  0213  3003               	movlw	3	; select bank7/8
 13654  0214  2A19               	goto	L16
 13655  0215                     i1l4692:	
 13656                           ;interrupts.c: 160: case 3:
 13657                           
 13658                           ;interrupts.c: 159: break;
 13659                           
 13660                           ;interrupts.c: 158: PORTCbits.RC4 = 0;
 13661                           
 13662                           
 13663                           ;interrupts.c: 161: mod_value = (int)mod3[mod_counter];
 13664  0215  0851               	movf	_mod_counter,w
 13665  0216  3E20               	addlw	(low (_mod3| (0+1024)))& (0+255)
 13666  0217  0086               	movwf	6
 13667  0218  3004               	movlw	4	; select bank8/9
 13668  0219                     L16:	
 13669  0219  0087               	movwf	7
 13670  021A  0801               	movf	1,w
 13671  021B  0023               	movlb	3	; select bank3
 13672  021C  00D8               	movwf	_mod_value^(0+384)
 13673  021D  01D9               	clrf	(_mod_value+1)^(0+384)
 13674  021E  1BD8               	btfsc	_mod_value^(0+384),7
 13675  021F  03D9               	decf	(_mod_value+1)^(0+384),f
 13676  0220  2A48               	goto	i1l4710
 13677  0221                     i1l4696:	
 13678                           ;interrupts.c: 164: case 4:
 13679                           
 13680                           ;interrupts.c: 163: break;
 13681                           
 13682                           ;interrupts.c: 162: PORTCbits.RC4 = 0;
 13683                           
 13684                           
 13685                           ;interrupts.c: 165: if (mod_counter <31) {
 13686  0221  0852               	movf	_mod_counter+1,w
 13687  0222  3A80               	xorlw	128
 13688  0223  00BA               	movwf	??_isr
 13689  0224  3080               	movlw	128
 13690  0225  023A               	subwf	??_isr,w
 13691  0226  1D03               	skipz
 13692  0227  2A2A               	goto	u475_25
 13693  0228  301F               	movlw	31
 13694  0229  0251               	subwf	_mod_counter,w
 13695  022A                     u475_25:	
 13696  022A  1803               	skipnc
 13697  022B  2A31               	goto	i1l4700
 13698                           
 13699                           ;interrupts.c: 166: mod_value = 100;
 13700  022C  3064               	movlw	100
 13701  022D  0023               	movlb	3	; select bank3
 13702  022E  00D8               	movwf	_mod_value^(0+384)
 13703  022F  3000               	movlw	0
 13704  0230  2A35               	goto	L14
 13705  0231                     i1l4700:	
 13706                           ;interrupts.c: 167: } else {
 13707                           
 13708                           
 13709                           ;interrupts.c: 168: mod_value = -100;
 13710  0231  309C               	movlw	156
 13711  0232  0023               	movlb	3	; select bank3
 13712  0233  00D8               	movwf	_mod_value^(0+384)
 13713  0234  30FF               	movlw	255
 13714  0235                     L14:	
 13715  0235  00D9               	movwf	(_mod_value^(0+384)+1)
 13716  0236  2A48               	goto	i1l4710
 13717  0237                     i1l4704:	
 13718                           ;interrupts.c: 172: case 5:
 13719                           
 13720                           ;interrupts.c: 171: break;
 13721                           
 13722                           ;interrupts.c: 169: }
 13723                           ;interrupts.c: 170: PORTCbits.RC4 = 0;
 13724                           
 13725                           
 13726                           ;interrupts.c: 173: mod_value = (int)mod1[mod_counter];
 13727  0237  0851               	movf	_mod_counter,w
 13728  0238  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13729  0239  0086               	movwf	6
 13730  023A  3003               	movlw	3	; select bank6/7
 13731  023B  0087               	movwf	7
 13732  023C  0801               	movf	1,w
 13733  023D  0023               	movlb	3	; select bank3
 13734  023E  00D8               	movwf	_mod_value^(0+384)
 13735  023F  01D9               	clrf	(_mod_value+1)^(0+384)
 13736  0240  1BD8               	btfsc	_mod_value^(0+384),7
 13737  0241  03D9               	decf	(_mod_value+1)^(0+384),f
 13738                           
 13739                           ;interrupts.c: 175: PORTCbits.RC4 = 1;
 13740  0242  0020               	movlb	0	; select bank0
 13741  0243  160E               	bsf	14,4	;volatile
 13742                           
 13743                           ;interrupts.c: 177: break;
 13744  0244  2A62               	goto	i1l4716
 13745  0245                     i1l4708:	
 13746                           ;interrupts.c: 178: default:
 13747                           
 13748                           
 13749                           ;interrupts.c: 179: mod_value = 0;
 13750  0245  0023               	movlb	3	; select bank3
 13751  0246  01D8               	clrf	_mod_value^(0+384)
 13752  0247  01D9               	clrf	(_mod_value+1)^(0+384)
 13753  0248                     i1l4710:	
 13754                           
 13755                           ;interrupts.c: 180: PORTCbits.RC4 = 0;
 13756  0248  0020               	movlb	0	; select bank0
 13757  0249  120E               	bcf	14,4	;volatile
 13758                           
 13759                           ;interrupts.c: 182: }
 13760                           
 13761                           ;interrupts.c: 181: break;
 13762  024A  2A62               	goto	i1l4716
 13763  024B                     i1l4714:	
 13764                           
 13765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13766                           ; Switch size 1, requested type "space"
 13767                           ; Number of cases is 1, Range of values is 0 to 0
 13768                           ; switch strategies available:
 13769                           ; Name         Instructions Cycles
 13770                           ; simple_byte            4     3 (average)
 13771                           ; direct_byte            8     6 (fixed)
 13772                           ; jumptable            260     6 (fixed)
 13773                           ;	Chosen strategy is simple_byte
 13774  024B  0020               	movlb	0	; select bank0
 13775  024C  0861               	movf	_bottom_push_state+1,w
 13776  024D  3A00               	xorlw	0	; case 0
 13777  024E  1903               	skipnz
 13778  024F  2A51               	goto	i1l6504
 13779  0250  2A45               	goto	i1l4708
 13780  0251                     i1l6504:	
 13781                           
 13782                           ; Switch size 1, requested type "space"
 13783                           ; Number of cases is 5, Range of values is 1 to 5
 13784                           ; switch strategies available:
 13785                           ; Name         Instructions Cycles
 13786                           ; simple_byte           16     9 (average)
 13787                           ; direct_byte           19     9 (fixed)
 13788                           ; jumptable            263     9 (fixed)
 13789                           ;	Chosen strategy is simple_byte
 13790  0251  0860               	movf	_bottom_push_state,w
 13791  0252  3A01               	xorlw	1	; case 1
 13792  0253  1903               	skipnz
 13793  0254  2A0D               	goto	i1l4684
 13794  0255  3A03               	xorlw	3	; case 2
 13795  0256  1903               	skipnz
 13796  0257  2A10               	goto	i1l4688
 13797  0258  3A01               	xorlw	1	; case 3
 13798  0259  1903               	skipnz
 13799  025A  2A15               	goto	i1l4692
 13800  025B  3A07               	xorlw	7	; case 4
 13801  025C  1903               	skipnz
 13802  025D  2A21               	goto	i1l4696
 13803  025E  3A01               	xorlw	1	; case 5
 13804  025F  1903               	skipnz
 13805  0260  2A37               	goto	i1l4704
 13806  0261  2A45               	goto	i1l4708
 13807  0262                     i1l4716:	
 13808                           
 13809                           ;interrupts.c: 198: mod_value = modulation(mod_value, adjusted_pot_value);
 13810  0262  0023               	movlb	3	; select bank3
 13811  0263  0858               	movf	_mod_value^(0+384),w
 13812  0264  0020               	movlb	0	; select bank0
 13813  0265  00AE               	movwf	modulation@x
 13814  0266  0023               	movlb	3	; select bank3
 13815  0267  0859               	movf	(_mod_value+1)^(0+384),w
 13816  0268  0020               	movlb	0	; select bank0
 13817  0269  00AF               	movwf	modulation@x+1
 13818  026A  0D89               	rlf	9,f
 13819  026B  3B89               	subwfb	9,f
 13820  026C  0989               	comf	9,f
 13821  026D  00B0               	movwf	modulation@x+2
 13822  026E  00B1               	movwf	modulation@x+3
 13823  026F  0023               	movlb	3	; select bank3
 13824  0270  0842               	movf	_adjusted_pot_value^(0+384),w
 13825  0271  0020               	movlb	0	; select bank0
 13826  0272  00B2               	movwf	modulation@y
 13827  0273  0023               	movlb	3	; select bank3
 13828  0274  0843               	movf	(_adjusted_pot_value+1)^(0+384),w
 13829  0275  0020               	movlb	0	; select bank0
 13830  0276  00B3               	movwf	modulation@y+1
 13831  0277  0D89               	rlf	9,f
 13832  0278  3B89               	subwfb	9,f
 13833  0279  0989               	comf	9,f
 13834  027A  00B4               	movwf	modulation@y+2
 13835  027B  00B5               	movwf	modulation@y+3
 13836  027C  3191  215A  3180   	fcall	_modulation
 13837  027F  0020               	movlb	0	; select bank0
 13838  0280  082F               	movf	?_modulation+1,w
 13839  0281  0023               	movlb	3	; select bank3
 13840  0282  00D9               	movwf	(_mod_value+1)^(0+384)
 13841  0283  0020               	movlb	0	; select bank0
 13842  0284  082E               	movf	?_modulation,w
 13843  0285  0023               	movlb	3	; select bank3
 13844  0286  00D8               	movwf	_mod_value^(0+384)
 13845                           
 13846                           ;interrupts.c: 199: CCPR9 = mod_value / 2;
 13847  0287  3002               	movlw	2
 13848  0288  00F0               	movwf	___awdiv@divisor
 13849  0289  3000               	movlw	0
 13850  028A  00F1               	movwf	___awdiv@divisor+1
 13851  028B  0859               	movf	(_mod_value+1)^(0+384),w
 13852  028C  00F3               	movwf	___awdiv@dividend+1
 13853  028D  0858               	movf	_mod_value^(0+384),w
 13854  028E  00F2               	movwf	___awdiv@dividend
 13855  028F  3193  2391  3180   	fcall	___awdiv
 13856  0292  0871               	movf	?___awdiv+1,w
 13857  0293  002C               	movlb	12	; select bank12
 13858  0294  009B               	movwf	27	;volatile
 13859  0295  0870               	movf	?___awdiv,w
 13860  0296  009A               	movwf	26	;volatile
 13861                           
 13862                           ;interrupts.c: 200: mod_timer = 0;
 13863  0297  3000               	movlw	0
 13864  0298  0023               	movlb	3	; select bank3
 13865  0299  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13866  029A  3000               	movlw	0
 13867  029B  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13868  029C  3000               	movlw	0
 13869  029D  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13870  029E  3000               	movlw	0
 13871  029F  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13872                           
 13873                           ;interrupts.c: 201: mod_counter++;
 13874  02A0  3001               	movlw	1
 13875  02A1  0020               	movlb	0	; select bank0
 13876  02A2  07D1               	addwf	_mod_counter,f
 13877  02A3  3000               	movlw	0
 13878  02A4  3DD2               	addwfc	_mod_counter+1,f
 13879  02A5                     i1l4722:	
 13880                           
 13881                           ;interrupts.c: 215: }
 13882                           ;interrupts.c: 240: if (preset_programmning_on == 1) {
 13883  02A5  0022               	movlb	2	; select bank2
 13884  02A6  035F               	decf	_preset_programmning_on^(0+256),w
 13885  02A7  1D03               	btfss	3,2
 13886  02A8  2AD8               	goto	i1l4734
 13887                           
 13888                           ;interrupts.c: 241: preset_blink++;
 13889  02A9  3001               	movlw	1
 13890  02AA  0020               	movlb	0	; select bank0
 13891  02AB  00BA               	movwf	??_isr
 13892  02AC  083A               	movf	??_isr,w
 13893  02AD  0022               	movlb	2	; select bank2
 13894  02AE  07DE               	addwf	_preset_blink^(0+256),f
 13895                           
 13896                           ;interrupts.c: 243: if (preset_blink >= blink_delay) {
 13897  02AF  0023               	movlb	3	; select bank3
 13898  02B0  0861               	movf	(_blink_delay+1)^(0+384),w
 13899  02B1  3A80               	xorlw	128
 13900  02B2  3C80               	sublw	128
 13901  02B3  1D03               	skipz
 13902  02B4  2AB8               	goto	u477_25
 13903  02B5  0860               	movf	_blink_delay^(0+384),w
 13904  02B6  0022               	movlb	2	; select bank2
 13905  02B7  025E               	subwf	_preset_blink^(0+256),w
 13906  02B8                     u477_25:	
 13907  02B8  1C03               	skipc
 13908  02B9  2AD6               	goto	i1l147
 13909                           
 13910                           ;interrupts.c: 244: LATBbits.LATB1 = 1;
 13911  02BA  0022               	movlb	2	; select bank2
 13912  02BB  148D               	bsf	13,1	;volatile
 13913                           
 13914                           ;interrupts.c: 245: if (preset_blink > blink_delay*2) {
 13915  02BC  0023               	movlb	3	; select bank3
 13916  02BD  0861               	movf	(_blink_delay+1)^(0+384),w
 13917  02BE  0020               	movlb	0	; select bank0
 13918  02BF  00BB               	movwf	??_isr+1
 13919  02C0  0023               	movlb	3	; select bank3
 13920  02C1  0860               	movf	_blink_delay^(0+384),w
 13921  02C2  0020               	movlb	0	; select bank0
 13922  02C3  00BA               	movwf	??_isr
 13923  02C4  35BA               	lslf	??_isr,f
 13924  02C5  0DBB               	rlf	??_isr+1,f
 13925  02C6  083B               	movf	??_isr+1,w
 13926  02C7  3A80               	xorlw	128
 13927  02C8  00BC               	movwf	??_isr+2
 13928  02C9  3080               	movlw	128
 13929  02CA  023C               	subwf	??_isr+2,w
 13930  02CB  1D03               	skipz
 13931  02CC  2AD1               	goto	u478_25
 13932  02CD  0022               	movlb	2	; select bank2
 13933  02CE  085E               	movf	_preset_blink^(0+256),w
 13934  02CF  0020               	movlb	0	; select bank0
 13935  02D0  023A               	subwf	??_isr,w
 13936  02D1                     u478_25:	
 13937  02D1  1803               	skipnc
 13938  02D2  2ADD               	goto	i1l152
 13939                           
 13940                           ;interrupts.c: 246: preset_blink = 0;
 13941  02D3  0022               	movlb	2	; select bank2
 13942  02D4  01DE               	clrf	_preset_blink^(0+256)
 13943                           
 13944                           ;interrupts.c: 247: }
 13945                           ;interrupts.c: 249: } else {
 13946  02D5  2ADD               	goto	i1l152
 13947  02D6                     i1l147:	
 13948                           
 13949                           ;interrupts.c: 250: LATBbits.LATB1 = 0;
 13950  02D6  0022               	movlb	2	; select bank2
 13951  02D7  2ADC               	goto	i1l4738
 13952  02D8                     i1l4734:	
 13953                           ;interrupts.c: 251: }
 13954                           ;interrupts.c: 253: } else {
 13955                           
 13956                           
 13957                           ;interrupts.c: 254: if (preset_blink > 0) {
 13958  02D8  085E               	movf	_preset_blink^(0+256),w
 13959  02D9  1903               	btfsc	3,2
 13960  02DA  2ADD               	goto	i1l152
 13961                           
 13962                           ;interrupts.c: 255: preset_blink = 0;
 13963  02DB  01DE               	clrf	_preset_blink^(0+256)
 13964  02DC                     i1l4738:	
 13965                           
 13966                           ;interrupts.c: 256: LATBbits.LATB1 = 0;
 13967  02DC  108D               	bcf	13,1	;volatile
 13968  02DD                     i1l152:	
 13969  02DD  0020               	movlb	0	; select bank0
 13970  02DE  0842               	movf	??_isr+8,w
 13971  02DF  00FF               	movwf	127
 13972  02E0  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13973  02E1  0009               	retfie
 13974  02E2                     __end_of_isr:	
 13975                           
 13976                           	psect	text49
 13977  1264                     __ptext49:	
 13978 ;; *************** function i1_set_leds_top *****************
 13979 ;; Defined at:
 13980 ;;		line 16 in file "LEDs.c"
 13981 ;; Parameters:    Size  Location     Type
 13982 ;;  x               2    0[COMMON] int 
 13983 ;;  ledState        2    2[COMMON] int 
 13984 ;; Auto vars:     Size  Location     Type
 13985 ;;		None
 13986 ;; Return value:  Size  Location     Type
 13987 ;;                  1    wreg      void 
 13988 ;; Registers used:
 13989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13990 ;; Tracked objects:
 13991 ;;		On entry : 0/0
 13992 ;;		On exit  : 0/0
 13993 ;;		Unchanged: 0/0
 13994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13995 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13998 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13999 ;;Total ram usage:        4 bytes
 14000 ;; Hardware stack levels used:    1
 14001 ;; This function calls:
 14002 ;;		Nothing
 14003 ;; This function is called by:
 14004 ;;		_isr
 14005 ;; This function uses a non-reentrant model
 14006 ;;
 14007                           
 14008                           
 14009                           ;psect for function i1_set_leds_top
 14010  1264                     i1_set_leds_top:	
 14011                           
 14012                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 14016  1264  0027               	movlb	7	; select bank7
 14017  1265  100C               	bcf	12,0	;volatile
 14018                           
 14019                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 14020  1266  108C               	bcf	12,1	;volatile
 14021                           
 14022                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 14023  1267  110C               	bcf	12,2	;volatile
 14024                           
 14025                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 14026  1268  118C               	bcf	12,3	;volatile
 14027                           
 14028                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 14029  1269  120C               	bcf	12,4	;volatile
 14030                           
 14031                           ;LEDs.c: 22: switch (x) {
 14032  126A  2A8F               	goto	i1l4608
 14033  126B                     i1l4596:	
 14034                           ;LEDs.c: 23: case 1:
 14035                           
 14036                           
 14037                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 14038  126B  0C72               	rrf	i1set_leds_top@ledState,w
 14039  126C  1C03               	skipc
 14040  126D  100C               	bcf	12,0	;volatile
 14041  126E  1803               	skipnc
 14042  126F  140C               	bsf	12,0	;volatile
 14043                           
 14044                           ;LEDs.c: 25: break;
 14045  1270  0008               	return
 14046  1271                     i1l4598:	
 14047                           ;LEDs.c: 26: case 2:
 14048                           
 14049                           
 14050                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 14051  1271  0C72               	rrf	i1set_leds_top@ledState,w
 14052  1272  1C03               	skipc
 14053  1273  108C               	bcf	12,1	;volatile
 14054  1274  1803               	skipnc
 14055  1275  148C               	bsf	12,1	;volatile
 14056                           
 14057                           ;LEDs.c: 28: break;
 14058  1276  0008               	return
 14059  1277                     i1l4600:	
 14060                           ;LEDs.c: 29: case 3:
 14061                           
 14062                           
 14063                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 14064  1277  0C72               	rrf	i1set_leds_top@ledState,w
 14065  1278  1C03               	skipc
 14066  1279  110C               	bcf	12,2	;volatile
 14067  127A  1803               	skipnc
 14068  127B  150C               	bsf	12,2	;volatile
 14069                           
 14070                           ;LEDs.c: 31: break;
 14071  127C  0008               	return
 14072  127D                     i1l4602:	
 14073                           ;LEDs.c: 32: case 4:
 14074                           
 14075                           
 14076                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 14077  127D  0C72               	rrf	i1set_leds_top@ledState,w
 14078  127E  1C03               	skipc
 14079  127F  118C               	bcf	12,3	;volatile
 14080  1280  1803               	skipnc
 14081  1281  158C               	bsf	12,3	;volatile
 14082                           
 14083                           ;LEDs.c: 34: break;
 14084  1282  0008               	return
 14085  1283                     i1l4604:	
 14086                           ;LEDs.c: 35: case 5:
 14087                           
 14088                           
 14089                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14090  1283  0C72               	rrf	i1set_leds_top@ledState,w
 14091  1284  1C03               	skipc
 14092  1285  120C               	bcf	12,4	;volatile
 14093  1286  1803               	skipnc
 14094  1287  160C               	bsf	12,4	;volatile
 14095                           
 14096                           ;LEDs.c: 39: break;
 14097                           
 14098                           ;LEDs.c: 38: case 6:
 14099                           
 14100                           ;LEDs.c: 37: break;
 14101  1288  0008               	return
 14102  1289                     i1l707:	
 14103                           ;LEDs.c: 40: case 100:
 14104                           
 14105                           
 14106                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14107  1289  140C               	bsf	12,0	;volatile
 14108                           
 14109                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14110  128A  148C               	bsf	12,1	;volatile
 14111                           
 14112                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14113  128B  150C               	bsf	12,2	;volatile
 14114                           
 14115                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14116  128C  158C               	bsf	12,3	;volatile
 14117                           
 14118                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14119  128D  160C               	bsf	12,4	;volatile
 14120                           
 14121                           ;LEDs.c: 47: }
 14122                           
 14123                           ;LEDs.c: 46: break;
 14124  128E  0008               	return
 14125  128F                     i1l4608:	
 14126                           
 14127                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14128                           ; Switch size 1, requested type "space"
 14129                           ; Number of cases is 1, Range of values is 0 to 0
 14130                           ; switch strategies available:
 14131                           ; Name         Instructions Cycles
 14132                           ; simple_byte            4     3 (average)
 14133                           ; direct_byte            8     6 (fixed)
 14134                           ; jumptable            260     6 (fixed)
 14135                           ;	Chosen strategy is simple_byte
 14136  128F  0871               	movf	i1set_leds_top@x+1,w
 14137  1290  3A00               	xorlw	0	; case 0
 14138  1291  1903               	skipnz
 14139  1292  2A94               	goto	i1l6506
 14140  1293  2AAB               	goto	i1l708
 14141  1294                     i1l6506:	
 14142                           
 14143                           ; Switch size 1, requested type "space"
 14144                           ; Number of cases is 7, Range of values is 1 to 100
 14145                           ; switch strategies available:
 14146                           ; Name         Instructions Cycles
 14147                           ; simple_byte           22    12 (average)
 14148                           ; direct_byte          209     9 (fixed)
 14149                           ; jumptable            263     9 (fixed)
 14150                           ;	Chosen strategy is simple_byte
 14151  1294  0870               	movf	i1set_leds_top@x,w
 14152  1295  3A01               	xorlw	1	; case 1
 14153  1296  1903               	skipnz
 14154  1297  2A6B               	goto	i1l4596
 14155  1298  3A03               	xorlw	3	; case 2
 14156  1299  1903               	skipnz
 14157  129A  2A71               	goto	i1l4598
 14158  129B  3A01               	xorlw	1	; case 3
 14159  129C  1903               	skipnz
 14160  129D  2A77               	goto	i1l4600
 14161  129E  3A07               	xorlw	7	; case 4
 14162  129F  1903               	skipnz
 14163  12A0  2A7D               	goto	i1l4602
 14164  12A1  3A01               	xorlw	1	; case 5
 14165  12A2  1903               	skipnz
 14166  12A3  2A83               	goto	i1l4604
 14167  12A4  3A03               	xorlw	3	; case 6
 14168  12A5  1903               	skipnz
 14169  12A6  2AAB               	goto	i1l708
 14170  12A7  3A62               	xorlw	98	; case 100
 14171  12A8  1903               	skipnz
 14172  12A9  2A89               	goto	i1l707
 14173  12AA  2AAB               	goto	i1l708
 14174  12AB                     i1l708:	
 14175  12AB  0008               	return
 14176  12AC                     __end_ofi1_set_leds_top:	
 14177                           
 14178                           	psect	text50
 14179  115A                     __ptext50:	
 14180 ;; *************** function _modulation *****************
 14181 ;; Defined at:
 14182 ;;		line 187 in file "user.c"
 14183 ;; Parameters:    Size  Location     Type
 14184 ;;  x               4   14[BANK0 ] long 
 14185 ;;  y               4   18[BANK0 ] long 
 14186 ;; Auto vars:     Size  Location     Type
 14187 ;;		None
 14188 ;; Return value:  Size  Location     Type
 14189 ;;                  4   14[BANK0 ] long 
 14190 ;; Registers used:
 14191 ;;		wreg, status,2, status,0, pclath, cstack
 14192 ;; Tracked objects:
 14193 ;;		On entry : 0/0
 14194 ;;		On exit  : 0/0
 14195 ;;		Unchanged: 0/0
 14196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14197 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14199 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14200 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14201 ;;Total ram usage:       12 bytes
 14202 ;; Hardware stack levels used:    1
 14203 ;; Hardware stack levels required when called:    1
 14204 ;; This function calls:
 14205 ;;		i1___aldiv
 14206 ;;		i1___lmul
 14207 ;; This function is called by:
 14208 ;;		_isr
 14209 ;; This function uses a non-reentrant model
 14210 ;;
 14211                           
 14212                           
 14213                           ;psect for function _modulation
 14214  115A                     _modulation:	
 14215                           
 14216                           ;user.c: 190: return (127500 + (y * x)) / 1000;
 14217                           
 14218                           ;incstack = 0
 14219                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 14220  115A  3000               	movlw	0
 14221  115B  0020               	movlb	0	; select bank0
 14222  115C  00A3               	movwf	i1___aldiv@divisor+3
 14223  115D  3000               	movlw	0
 14224  115E  00A2               	movwf	i1___aldiv@divisor+2
 14225  115F  3003               	movlw	3
 14226  1160  00A1               	movwf	i1___aldiv@divisor+1
 14227  1161  30E8               	movlw	232
 14228  1162  00A0               	movwf	i1___aldiv@divisor
 14229  1163  300C               	movlw	12
 14230  1164  00B6               	movwf	??_modulation
 14231  1165  30F2               	movlw	242
 14232  1166  00B7               	movwf	??_modulation+1
 14233  1167  3001               	movlw	1
 14234  1168  00B8               	movwf	??_modulation+2
 14235  1169  3000               	movlw	0
 14236  116A  00B9               	movwf	??_modulation+3
 14237  116B  0835               	movf	modulation@y+3,w
 14238  116C  00F3               	movwf	i1___lmul@multiplier+3
 14239  116D  0834               	movf	modulation@y+2,w
 14240  116E  00F2               	movwf	i1___lmul@multiplier+2
 14241  116F  0833               	movf	modulation@y+1,w
 14242  1170  00F1               	movwf	i1___lmul@multiplier+1
 14243  1171  0832               	movf	modulation@y,w
 14244  1172  00F0               	movwf	i1___lmul@multiplier
 14245  1173  0831               	movf	modulation@x+3,w
 14246  1174  00F7               	movwf	i1___lmul@multiplicand+3
 14247  1175  0830               	movf	modulation@x+2,w
 14248  1176  00F6               	movwf	i1___lmul@multiplicand+2
 14249  1177  082F               	movf	modulation@x+1,w
 14250  1178  00F5               	movwf	i1___lmul@multiplicand+1
 14251  1179  082E               	movf	modulation@x,w
 14252  117A  00F4               	movwf	i1___lmul@multiplicand
 14253  117B  319E  26D3  3191   	fcall	i1___lmul
 14254  117E  0870               	movf	?i1___lmul,w
 14255  117F  0020               	movlb	0	; select bank0
 14256  1180  07B6               	addwf	??_modulation,f
 14257  1181  0871               	movf	?i1___lmul+1,w
 14258  1182  3DB7               	addwfc	??_modulation+1,f
 14259  1183  0872               	movf	?i1___lmul+2,w
 14260  1184  3DB8               	addwfc	??_modulation+2,f
 14261  1185  0873               	movf	?i1___lmul+3,w
 14262  1186  3DB9               	addwfc	??_modulation+3,f
 14263  1187  0839               	movf	??_modulation+3,w
 14264  1188  00A7               	movwf	i1___aldiv@dividend+3
 14265  1189  0838               	movf	??_modulation+2,w
 14266  118A  00A6               	movwf	i1___aldiv@dividend+2
 14267  118B  0837               	movf	??_modulation+1,w
 14268  118C  00A5               	movwf	i1___aldiv@dividend+1
 14269  118D  0836               	movf	??_modulation,w
 14270  118E  00A4               	movwf	i1___aldiv@dividend
 14271  118F  3195  25D2         	fcall	i1___aldiv
 14272  1191  0020               	movlb	0	; select bank0
 14273  1192  0823               	movf	?i1___aldiv+3,w
 14274  1193  00B1               	movwf	?_modulation+3
 14275  1194  0822               	movf	?i1___aldiv+2,w
 14276  1195  00B0               	movwf	?_modulation+2
 14277  1196  0821               	movf	?i1___aldiv+1,w
 14278  1197  00AF               	movwf	?_modulation+1
 14279  1198  0820               	movf	?i1___aldiv,w
 14280  1199  00AE               	movwf	?_modulation
 14281  119A  0008               	return
 14282  119B                     __end_of_modulation:	
 14283                           
 14284                           	psect	text51
 14285  1ED3                     __ptext51:	
 14286 ;; *************** function i1___lmul *****************
 14287 ;; Defined at:
 14288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  multiplier      4    0[COMMON] unsigned long 
 14291 ;;  multiplicand    4    4[COMMON] unsigned long 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  __lmul          4    8[COMMON] unsigned long 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  4    0[COMMON] unsigned long 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2, status,0
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14303 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14304 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14306 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14307 ;;Total ram usage:       12 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		_modulation
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           
 14317                           ;psect for function i1___lmul
 14318  1ED3                     i1___lmul:	
 14319                           
 14320                           ;incstack = 0
 14321                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 14322  1ED3  3000               	movlw	0
 14323  1ED4  00FB               	movwf	i1___lmul@product+3
 14324  1ED5  3000               	movlw	0
 14325  1ED6  00FA               	movwf	i1___lmul@product+2
 14326  1ED7  3000               	movlw	0
 14327  1ED8  00F9               	movwf	i1___lmul@product+1
 14328  1ED9  3000               	movlw	0
 14329  1EDA  00F8               	movwf	i1___lmul@product
 14330  1EDB                     i1l4102:	
 14331  1EDB  1C70               	btfss	i1___lmul@multiplier,0
 14332  1EDC  2EE5               	goto	i1l4106
 14333  1EDD  0874               	movf	i1___lmul@multiplicand,w
 14334  1EDE  07F8               	addwf	i1___lmul@product,f
 14335  1EDF  0875               	movf	i1___lmul@multiplicand+1,w
 14336  1EE0  3DF9               	addwfc	i1___lmul@product+1,f
 14337  1EE1  0876               	movf	i1___lmul@multiplicand+2,w
 14338  1EE2  3DFA               	addwfc	i1___lmul@product+2,f
 14339  1EE3  0877               	movf	i1___lmul@multiplicand+3,w
 14340  1EE4  3DFB               	addwfc	i1___lmul@product+3,f
 14341  1EE5                     i1l4106:	
 14342  1EE5  3001               	movlw	1
 14343  1EE6                     u360_25:	
 14344  1EE6  35F4               	lslf	i1___lmul@multiplicand,f
 14345  1EE7  0DF5               	rlf	i1___lmul@multiplicand+1,f
 14346  1EE8  0DF6               	rlf	i1___lmul@multiplicand+2,f
 14347  1EE9  0DF7               	rlf	i1___lmul@multiplicand+3,f
 14348  1EEA  0B89               	decfsz	9,f
 14349  1EEB  2EE6               	goto	u360_25
 14350  1EEC  3001               	movlw	1
 14351  1EED                     u361_25:	
 14352  1EED  36F3               	lsrf	i1___lmul@multiplier+3,f
 14353  1EEE  0CF2               	rrf	i1___lmul@multiplier+2,f
 14354  1EEF  0CF1               	rrf	i1___lmul@multiplier+1,f
 14355  1EF0  0CF0               	rrf	i1___lmul@multiplier,f
 14356  1EF1  0B89               	decfsz	9,f
 14357  1EF2  2EED               	goto	u361_25
 14358  1EF3  0873               	movf	i1___lmul@multiplier+3,w
 14359  1EF4  0472               	iorwf	i1___lmul@multiplier+2,w
 14360  1EF5  0471               	iorwf	i1___lmul@multiplier+1,w
 14361  1EF6  0470               	iorwf	i1___lmul@multiplier,w
 14362  1EF7  1D03               	skipz
 14363  1EF8  2EDB               	goto	i1l4102
 14364  1EF9  087B               	movf	i1___lmul@product+3,w
 14365  1EFA  00F3               	movwf	?i1___lmul+3
 14366  1EFB  087A               	movf	i1___lmul@product+2,w
 14367  1EFC  00F2               	movwf	?i1___lmul+2
 14368  1EFD  0879               	movf	i1___lmul@product+1,w
 14369  1EFE  00F1               	movwf	?i1___lmul+1
 14370  1EFF  0878               	movf	i1___lmul@product,w
 14371  1F00  00F0               	movwf	?i1___lmul
 14372  1F01  0008               	return
 14373  1F02                     __end_ofi1___lmul:	
 14374                           
 14375                           	psect	text52
 14376  15D2                     __ptext52:	
 14377 ;; *************** function i1___aldiv *****************
 14378 ;; Defined at:
 14379 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  divisor         4    0[BANK0 ] long 
 14382 ;;  dividend        4    4[BANK0 ] long 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  __aldiv         4   10[BANK0 ] long 
 14385 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 14386 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 14387 ;; Return value:  Size  Location     Type
 14388 ;;                  4    0[BANK0 ] long 
 14389 ;; Registers used:
 14390 ;;		wreg, status,2, status,0
 14391 ;; Tracked objects:
 14392 ;;		On entry : 0/0
 14393 ;;		On exit  : 0/0
 14394 ;;		Unchanged: 0/0
 14395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14396 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14397 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14398 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14399 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14400 ;;Total ram usage:       15 bytes
 14401 ;; Hardware stack levels used:    1
 14402 ;; This function calls:
 14403 ;;		Nothing
 14404 ;; This function is called by:
 14405 ;;		_modulation
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           
 14410                           ;psect for function i1___aldiv
 14411  15D2                     i1___aldiv:	
 14412                           
 14413                           ;incstack = 0
 14414                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 14415  15D2  0020               	movlb	0	; select bank0
 14416  15D3  01A9               	clrf	i1___aldiv@sign
 14417  15D4  1FA3               	btfss	i1___aldiv@divisor+3,7
 14418  15D5  2DE3               	goto	i1l1486
 14419  15D6  09A0               	comf	i1___aldiv@divisor,f
 14420  15D7  09A1               	comf	i1___aldiv@divisor+1,f
 14421  15D8  09A2               	comf	i1___aldiv@divisor+2,f
 14422  15D9  09A3               	comf	i1___aldiv@divisor+3,f
 14423  15DA  0AA0               	incf	i1___aldiv@divisor,f
 14424  15DB  1903               	skipnz
 14425  15DC  0AA1               	incf	i1___aldiv@divisor+1,f
 14426  15DD  1903               	skipnz
 14427  15DE  0AA2               	incf	i1___aldiv@divisor+2,f
 14428  15DF  1903               	skipnz
 14429  15E0  0AA3               	incf	i1___aldiv@divisor+3,f
 14430  15E1  01A9               	clrf	i1___aldiv@sign
 14431  15E2  0AA9               	incf	i1___aldiv@sign,f
 14432  15E3                     i1l1486:	
 14433  15E3  1FA7               	btfss	i1___aldiv@dividend+3,7
 14434  15E4  2DF4               	goto	i1l4124
 14435  15E5  09A4               	comf	i1___aldiv@dividend,f
 14436  15E6  09A5               	comf	i1___aldiv@dividend+1,f
 14437  15E7  09A6               	comf	i1___aldiv@dividend+2,f
 14438  15E8  09A7               	comf	i1___aldiv@dividend+3,f
 14439  15E9  0AA4               	incf	i1___aldiv@dividend,f
 14440  15EA  1903               	skipnz
 14441  15EB  0AA5               	incf	i1___aldiv@dividend+1,f
 14442  15EC  1903               	skipnz
 14443  15ED  0AA6               	incf	i1___aldiv@dividend+2,f
 14444  15EE  1903               	skipnz
 14445  15EF  0AA7               	incf	i1___aldiv@dividend+3,f
 14446  15F0  3001               	movlw	1
 14447  15F1  00FC               	movwf	??i1___aldiv
 14448  15F2  087C               	movf	??i1___aldiv,w
 14449  15F3  06A9               	xorwf	i1___aldiv@sign,f
 14450  15F4                     i1l4124:	
 14451  15F4  3000               	movlw	0
 14452  15F5  00AD               	movwf	i1___aldiv@quotient+3
 14453  15F6  3000               	movlw	0
 14454  15F7  00AC               	movwf	i1___aldiv@quotient+2
 14455  15F8  3000               	movlw	0
 14456  15F9  00AB               	movwf	i1___aldiv@quotient+1
 14457  15FA  3000               	movlw	0
 14458  15FB  00AA               	movwf	i1___aldiv@quotient
 14459  15FC  0823               	movf	i1___aldiv@divisor+3,w
 14460  15FD  0422               	iorwf	i1___aldiv@divisor+2,w
 14461  15FE  0421               	iorwf	i1___aldiv@divisor+1,w
 14462  15FF  0420               	iorwf	i1___aldiv@divisor,w
 14463  1600  1903               	skipnz
 14464  1601  2E3D               	goto	i1l4146
 14465  1602  01A8               	clrf	i1___aldiv@counter
 14466  1603  0AA8               	incf	i1___aldiv@counter,f
 14467  1604                     i1l4132:	
 14468  1604  1BA3               	btfsc	i1___aldiv@divisor+3,7
 14469  1605  2E12               	goto	i1l4134
 14470  1606  3001               	movlw	1
 14471  1607                     u366_25:	
 14472  1607  35A0               	lslf	i1___aldiv@divisor,f
 14473  1608  0DA1               	rlf	i1___aldiv@divisor+1,f
 14474  1609  0DA2               	rlf	i1___aldiv@divisor+2,f
 14475  160A  0DA3               	rlf	i1___aldiv@divisor+3,f
 14476  160B  0B89               	decfsz	9,f
 14477  160C  2E07               	goto	u366_25
 14478  160D  3001               	movlw	1
 14479  160E  00FC               	movwf	??i1___aldiv
 14480  160F  087C               	movf	??i1___aldiv,w
 14481  1610  07A8               	addwf	i1___aldiv@counter,f
 14482  1611  2E04               	goto	i1l4132
 14483  1612                     i1l4134:	
 14484  1612  3001               	movlw	1
 14485  1613                     u368_25:	
 14486  1613  35AA               	lslf	i1___aldiv@quotient,f
 14487  1614  0DAB               	rlf	i1___aldiv@quotient+1,f
 14488  1615  0DAC               	rlf	i1___aldiv@quotient+2,f
 14489  1616  0DAD               	rlf	i1___aldiv@quotient+3,f
 14490  1617  0B89               	decfsz	9,f
 14491  1618  2E13               	goto	u368_25
 14492  1619  0823               	movf	i1___aldiv@divisor+3,w
 14493  161A  0227               	subwf	i1___aldiv@dividend+3,w
 14494  161B  1D03               	skipz
 14495  161C  2E27               	goto	u369_25
 14496  161D  0822               	movf	i1___aldiv@divisor+2,w
 14497  161E  0226               	subwf	i1___aldiv@dividend+2,w
 14498  161F  1D03               	skipz
 14499  1620  2E27               	goto	u369_25
 14500  1621  0821               	movf	i1___aldiv@divisor+1,w
 14501  1622  0225               	subwf	i1___aldiv@dividend+1,w
 14502  1623  1D03               	skipz
 14503  1624  2E27               	goto	u369_25
 14504  1625  0820               	movf	i1___aldiv@divisor,w
 14505  1626  0224               	subwf	i1___aldiv@dividend,w
 14506  1627                     u369_25:	
 14507  1627  1C03               	skipc
 14508  1628  2E32               	goto	i1l4142
 14509  1629  0820               	movf	i1___aldiv@divisor,w
 14510  162A  02A4               	subwf	i1___aldiv@dividend,f
 14511  162B  0821               	movf	i1___aldiv@divisor+1,w
 14512  162C  3BA5               	subwfb	i1___aldiv@dividend+1,f
 14513  162D  0822               	movf	i1___aldiv@divisor+2,w
 14514  162E  3BA6               	subwfb	i1___aldiv@dividend+2,f
 14515  162F  0823               	movf	i1___aldiv@divisor+3,w
 14516  1630  3BA7               	subwfb	i1___aldiv@dividend+3,f
 14517  1631  142A               	bsf	i1___aldiv@quotient,0
 14518  1632                     i1l4142:	
 14519  1632  3001               	movlw	1
 14520  1633                     u370_25:	
 14521  1633  36A3               	lsrf	i1___aldiv@divisor+3,f
 14522  1634  0CA2               	rrf	i1___aldiv@divisor+2,f
 14523  1635  0CA1               	rrf	i1___aldiv@divisor+1,f
 14524  1636  0CA0               	rrf	i1___aldiv@divisor,f
 14525  1637  0B89               	decfsz	9,f
 14526  1638  2E33               	goto	u370_25
 14527  1639  3001               	movlw	1
 14528  163A  02A8               	subwf	i1___aldiv@counter,f
 14529  163B  1D03               	btfss	3,2
 14530  163C  2E12               	goto	i1l4134
 14531  163D                     i1l4146:	
 14532  163D  0829               	movf	i1___aldiv@sign,w
 14533  163E  1903               	btfsc	3,2
 14534  163F  2E4B               	goto	i1l4150
 14535  1640  09AA               	comf	i1___aldiv@quotient,f
 14536  1641  09AB               	comf	i1___aldiv@quotient+1,f
 14537  1642  09AC               	comf	i1___aldiv@quotient+2,f
 14538  1643  09AD               	comf	i1___aldiv@quotient+3,f
 14539  1644  0AAA               	incf	i1___aldiv@quotient,f
 14540  1645  1903               	skipnz
 14541  1646  0AAB               	incf	i1___aldiv@quotient+1,f
 14542  1647  1903               	skipnz
 14543  1648  0AAC               	incf	i1___aldiv@quotient+2,f
 14544  1649  1903               	skipnz
 14545  164A  0AAD               	incf	i1___aldiv@quotient+3,f
 14546  164B                     i1l4150:	
 14547  164B  082D               	movf	i1___aldiv@quotient+3,w
 14548  164C  00A3               	movwf	?i1___aldiv+3
 14549  164D  082C               	movf	i1___aldiv@quotient+2,w
 14550  164E  00A2               	movwf	?i1___aldiv+2
 14551  164F  082B               	movf	i1___aldiv@quotient+1,w
 14552  1650  00A1               	movwf	?i1___aldiv+1
 14553  1651  082A               	movf	i1___aldiv@quotient,w
 14554  1652  00A0               	movwf	?i1___aldiv
 14555  1653  0008               	return
 14556  1654                     __end_ofi1___aldiv:	
 14557                           
 14558                           	psect	text53
 14559  1391                     __ptext53:	
 14560 ;; *************** function ___awdiv *****************
 14561 ;; Defined at:
 14562 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;  divisor         2    0[COMMON] int 
 14565 ;;  dividend        2    2[COMMON] int 
 14566 ;; Auto vars:     Size  Location     Type
 14567 ;;  quotient        2    7[COMMON] int 
 14568 ;;  sign            1    6[COMMON] unsigned char 
 14569 ;;  counter         1    5[COMMON] unsigned char 
 14570 ;; Return value:  Size  Location     Type
 14571 ;;                  2    0[COMMON] int 
 14572 ;; Registers used:
 14573 ;;		wreg, status,2, status,0
 14574 ;; Tracked objects:
 14575 ;;		On entry : 0/0
 14576 ;;		On exit  : 0/0
 14577 ;;		Unchanged: 0/0
 14578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14579 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14580 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14581 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14582 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14583 ;;Total ram usage:        9 bytes
 14584 ;; Hardware stack levels used:    1
 14585 ;; This function calls:
 14586 ;;		Nothing
 14587 ;; This function is called by:
 14588 ;;		_isr
 14589 ;; This function uses a non-reentrant model
 14590 ;;
 14591                           
 14592                           
 14593                           ;psect for function ___awdiv
 14594  1391                     ___awdiv:	
 14595                           
 14596                           ;incstack = 0
 14597                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14598  1391  01F6               	clrf	___awdiv@sign
 14599  1392  1FF1               	btfss	___awdiv@divisor+1,7
 14600  1393  2B9B               	goto	i1l4558
 14601  1394  09F0               	comf	___awdiv@divisor,f
 14602  1395  09F1               	comf	___awdiv@divisor+1,f
 14603  1396  0AF0               	incf	___awdiv@divisor,f
 14604  1397  1903               	skipnz
 14605  1398  0AF1               	incf	___awdiv@divisor+1,f
 14606  1399  01F6               	clrf	___awdiv@sign
 14607  139A  0AF6               	incf	___awdiv@sign,f
 14608  139B                     i1l4558:	
 14609  139B  1FF3               	btfss	___awdiv@dividend+1,7
 14610  139C  2BA6               	goto	i1l4564
 14611  139D  09F2               	comf	___awdiv@dividend,f
 14612  139E  09F3               	comf	___awdiv@dividend+1,f
 14613  139F  0AF2               	incf	___awdiv@dividend,f
 14614  13A0  1903               	skipnz
 14615  13A1  0AF3               	incf	___awdiv@dividend+1,f
 14616  13A2  3001               	movlw	1
 14617  13A3  00F4               	movwf	??___awdiv
 14618  13A4  0874               	movf	??___awdiv,w
 14619  13A5  06F6               	xorwf	___awdiv@sign,f
 14620  13A6                     i1l4564:	
 14621  13A6  01F7               	clrf	___awdiv@quotient
 14622  13A7  01F8               	clrf	___awdiv@quotient+1
 14623  13A8  0870               	movf	___awdiv@divisor,w
 14624  13A9  0471               	iorwf	___awdiv@divisor+1,w
 14625  13AA  1903               	btfsc	3,2
 14626  13AB  2BD5               	goto	i1l4586
 14627  13AC  01F5               	clrf	___awdiv@counter
 14628  13AD  0AF5               	incf	___awdiv@counter,f
 14629  13AE                     i1l4574:	
 14630  13AE  1BF1               	btfsc	___awdiv@divisor+1,7
 14631  13AF  2BBA               	goto	i1l4576
 14632  13B0  3001               	movlw	1
 14633  13B1                     u449_25:	
 14634  13B1  35F0               	lslf	___awdiv@divisor,f
 14635  13B2  0DF1               	rlf	___awdiv@divisor+1,f
 14636  13B3  0B89               	decfsz	9,f
 14637  13B4  2BB1               	goto	u449_25
 14638  13B5  3001               	movlw	1
 14639  13B6  00F4               	movwf	??___awdiv
 14640  13B7  0874               	movf	??___awdiv,w
 14641  13B8  07F5               	addwf	___awdiv@counter,f
 14642  13B9  2BAE               	goto	i1l4574
 14643  13BA                     i1l4576:	
 14644  13BA  3001               	movlw	1
 14645  13BB                     u451_25:	
 14646  13BB  35F7               	lslf	___awdiv@quotient,f
 14647  13BC  0DF8               	rlf	___awdiv@quotient+1,f
 14648  13BD  0B89               	decfsz	9,f
 14649  13BE  2BBB               	goto	u451_25
 14650  13BF  0871               	movf	___awdiv@divisor+1,w
 14651  13C0  0273               	subwf	___awdiv@dividend+1,w
 14652  13C1  1D03               	skipz
 14653  13C2  2BC5               	goto	u452_25
 14654  13C3  0870               	movf	___awdiv@divisor,w
 14655  13C4  0272               	subwf	___awdiv@dividend,w
 14656  13C5                     u452_25:	
 14657  13C5  1C03               	skipc
 14658  13C6  2BCC               	goto	i1l4582
 14659  13C7  0870               	movf	___awdiv@divisor,w
 14660  13C8  02F2               	subwf	___awdiv@dividend,f
 14661  13C9  0871               	movf	___awdiv@divisor+1,w
 14662  13CA  3BF3               	subwfb	___awdiv@dividend+1,f
 14663  13CB  1477               	bsf	___awdiv@quotient,0
 14664  13CC                     i1l4582:	
 14665  13CC  3001               	movlw	1
 14666  13CD                     u453_25:	
 14667  13CD  36F1               	lsrf	___awdiv@divisor+1,f
 14668  13CE  0CF0               	rrf	___awdiv@divisor,f
 14669  13CF  0B89               	decfsz	9,f
 14670  13D0  2BCD               	goto	u453_25
 14671  13D1  3001               	movlw	1
 14672  13D2  02F5               	subwf	___awdiv@counter,f
 14673  13D3  1D03               	btfss	3,2
 14674  13D4  2BBA               	goto	i1l4576
 14675  13D5                     i1l4586:	
 14676  13D5  0876               	movf	___awdiv@sign,w
 14677  13D6  1903               	btfsc	3,2
 14678  13D7  2BDD               	goto	i1l4590
 14679  13D8  09F7               	comf	___awdiv@quotient,f
 14680  13D9  09F8               	comf	___awdiv@quotient+1,f
 14681  13DA  0AF7               	incf	___awdiv@quotient,f
 14682  13DB  1903               	skipnz
 14683  13DC  0AF8               	incf	___awdiv@quotient+1,f
 14684  13DD                     i1l4590:	
 14685  13DD  0878               	movf	___awdiv@quotient+1,w
 14686  13DE  00F1               	movwf	?___awdiv+1
 14687  13DF  0877               	movf	___awdiv@quotient,w
 14688  13E0  00F0               	movwf	?___awdiv
 14689  13E1  0008               	return
 14690  13E2                     __end_of___awdiv:	
 14691  007E                     btemp	set	126	;btemp
 14692  007E                     int$flags	set	126
 14693  007E                     wtemp	set	126
 14694  007E                     wtemp0	set	126
 14695  0080                     wtemp1	set	128
 14696  0082                     wtemp2	set	130
 14697  0084                     wtemp3	set	132
 14698  0086                     wtemp4	set	134
 14699  0088                     wtemp5	set	136
 14700  007F                     wtemp6	set	127
 14701  007E                     ttemp	set	126
 14702  007E                     ttemp0	set	126
 14703  0081                     ttemp1	set	129
 14704  0084                     ttemp2	set	132
 14705  0087                     ttemp3	set	135
 14706  007F                     ttemp4	set	127
 14707  007E                     ltemp	set	126
 14708  007E                     ltemp0	set	126
 14709  0082                     ltemp1	set	130
 14710  0086                     ltemp2	set	134
 14711  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        786
    BSS         212
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     49      79
    BANK3            80      0      77
    BANK4            80      6      50
    BANK5            80      0      44
    BANK6            80      0      61
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _initExpModeState->_wait_ms
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->_trunc
    _trunc->___fttol
    ___fttol->_map
    ___altoft->___fttol
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->_trunc
    _trunc->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   60408
                                             34 BANK2     15    15      0
                                              0 BANK4      6     6      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
          _update_expressSwitchState
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _update_expressSwitchState                            0     0      0    1831
                   _initExpModeState
                  _initTapeModeState
 ---------------------------------------------------------------------------------
 (2) _initTapeModeState                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initExpModeState                                     0     0      0    1831
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3385
                                             22 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4835
                                             22 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2217
                                             18 BANK1      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    8022
                                             25 BANK1      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4124
                                             18 BANK1      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3898
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   12771
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4565
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     987
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3350
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3263
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2401
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14504
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             37 BANK1     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2405
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2371
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1831
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_expressSwitchState
     _initExpModeState
       _wait_ms
         ___lmul
     _initTapeModeState
   _update_mode

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     31      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      6      32      13       62.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     299      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3D      18       76.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     299      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Jan 04 10:04:28 2017

                       _update_mode 11DC                        ___altoft@exp 012C  
        __size_of_initTapeModeState 0003                         __CFG_CP$OFF 0000  
                     ___altoft@sign 012D                        ___awdiv@sign 0076  
                _topTactile_pressed 0161          setDoublePressState@f_state 00B2  
                   _updateSwitchTap 0C14                        ___ftadd@exp1 00B4  
                      ___ftadd@exp2 00B3                        ___ftadd@sign 00B2  
                               l310 03DB                                 l349 1F85  
                               l535 1DD3                                 l720 1062  
                               l712 102F                                 l528 0A2D  
                               l714 1032                                 l715 1035  
                               l707 1463                __size_of_adc_convert 0013  
                               l716 1038                                 l708 1487  
                               l564 158E                                 l717 103B  
                               l719 103E                                 l853 1232  
                               l857 1259                                 l865 1356  
                               l881 1204                                 l882 1207  
                               l883 1215                                 l869 1386  
                               l879 1202                                 _PR2 001B  
      solidring_tactiles@ring_delay 00B4                                 _map 16D6  
                               _isr 0004                                 _tap 02A0  
                      __CFG_BORV$LO 0000                                 wreg 0009  
                      __CFG_IESO$ON 0000                        __CFG_FOSC$HS 0000  
               set_subdivision@tmpX 0140             __end_of_set_leds_bottom 1063  
                      __CFG_LVP$OFF 0000                      i1___aldiv@sign 0029  
                      ___ftdiv@cntr 00CF                        ___ftdiv@sign 00D4  
                              _B25k 0220                                l1222 0C29  
                              l1236 0CE0                                l1600 14D6  
                              l1096 0AB9                                l1623 0BBD  
                              l1486 1665                                l5200 144B  
                              l1592 14BB                                l5202 1453  
                              l6010 0CC0                                l1683 17DE  
                              l5204 145B                                l5150 1F3B  
                              l5302 1FD4                                l6006 0CA9  
                              l1599 14CE                                l5232 1045  
                              l5208 146A                                l6040 0D9E  
                              l6008 0CB1                                l5154 1F45  
                              l5170 1498                                l5250 131B  
                              l6034 0D2E                                l6026 0D22  
                              l6018 0CD8                                l5180 14C0  
                              l5172 14A2                                l5260 177C  
                              l5500 1676                                l6036 0D78  
                              l6220 071F                                l6212 069D  
                              l5182 14C8                                l5174 14A7  
                              l5166 1491                                l5510 1694  
                              ?_map 00D5                                l5248 130B  
                              l5280 17C6                                l6080 098C  
                              l6048 0DDE                                l6240 07F2  
                              l6224 0767                                l6216 06E5  
                              l6208 0663                                l6144 03DF  
                              l6128 03B2                                l6082 0990  
                              l6090 09A1                                l5522 16BF  
                              l6242 079E                                l6146 03E2  
                              l6500 1470                                l5196 143B  
                              l5444 12D7                                l5292 17F0  
                              l5348 13FF                                l6084 0996  
                              l6092 09BA                                l5508 1686  
                              l6244 07F8                                l6172 04AB  
                              l6502 104B                                l5198 1443  
                              l5286 17D4                                l5278 17B5  
                              l6086 099A                                l6078 0988  
                              l5526 16CD                                l5518 16B4  
                              l6190 0593                                l6166 045C  
                              l5608 0BFC                                l5552 0B4D  
                              l5624 0849                                l5288 17E2  
                              l5472 1FB0                                l6184 0553  
                              l6176 04E5                                l5570 0B76  
                              l5618 0833                                l5538 1E6B  
                              l5580 0B98                                l5548 0B46  
                              l5660 08DC                                l5804 1372  
                              l5900 0A8C                                l5750 15AA  
                              l5590 0BB9                                l5582 0B9C  
                              l5558 0B5C                                l5646 08A3  
                              l5638 088A                                l5398 1522  
                              l5902 0A94                                l6198 05F3  
                              l5576 0B89                                l5920 0ABD  
                              l5594 0BCF                                l5578 0B93  
                              l5690 0949                                l5682 0935  
                              l5666 08F2                                l5930 0AE0  
                              l5914 0AAC                                l5818 1DED  
                              l5834 120A                                l5748 15A1  
                              l5588 0BAF                                l5932 0AE6  
                              l5940 0AF9                                l5836 1219  
                              ?_isr 0070                                l5598 0BE1  
                              l5694 0951                                l5678 092D  
                              l5774 1227                                l5926 0AD8  
                              l5784 124E                                l5880 0A5C  
                              l5794 134B                                l6498 09A6  
                              l5970 0C3A                                l5876 0A49  
                              l5964 0C1F                                l5888 0A6A  
                              l5992 0C82                                l5984 0C5B  
                              l5986 0C78                                u5215 14B6  
                              u5145 1F46                                u6105 0958  
                              u6025 08FE                                u5155 1F4D  
                              u5235 14C3                                u6035 090E  
                              u5315 1310                                u5405 17D5  
                              u7005 0700                                u6135 1E8E  
                              u6055 0936                                u7015 071D  
                              u5520 12D5                                u6145 1E94  
                              u6065 093C                                u6305 136B  
                              u5345 1784                                u5515 12B7  
                              u5275 14DD                                u5195 149D  
                              u7043 07EA                                u7035 07D2  
                              u6180 15A8                                u6165 1587  
                              u6245 1247                                u6405 0A55  
                              u6175 159A                                u6095 0952  
                              u5375 17B6                                u5615 1689  
                              u5545 1E14                                u5555 1F9F  
                              u6435 0A74                                u5635 1695  
                              u6355 11EF                                u6525 0AC9  
                              u5645 16A9                                u5815 0B8A  
                              u5495 152F                                u5655 16B5  
                              u5575 080D                                u6395 0A42  
                              u5845 0B9D                                u6805 0D60  
                              u6655 0C64                                u5785 0B77  
                              u5945 085B                                u6825 0D7D  
                              u6905 0441                                u5875 0BB0  
                              u5955 086B                                u6915 045A  
                              u5965 088B                                u6765 0CF1  
                              u6685 0C8C                                u6925 04C6  
                              u5975 089A                                u6855 0A26  
                              u6775 0D07                                u6935 04E3  
                              u5985 08A4                                u6785 0D37  
                              u6795 0D4C                                u6955 0574  
                              u6875 03D1                                u6965 0591  
                              u6985 067E                                u6995 069B  
                     _star_tactiles 14ED                        __CFG_WRT$OFF 0000  
                     __CFG_FCMEN$ON 0000                                _iCnt 01DE  
                              _mod1 0320                                _mod2 03A0  
                              _mod3 0420                                _main 0397  
                      ___ftpack@arg 00A0                        ___ftpack@exp 00A3  
                              fsr0h 0005                                fsr1h 0007  
                              fsr0l 0004                                indf0 0000  
                              indf1 0001                                fsr1l 0006  
                              map@x 00D5                                btemp 007E  
                     __CFG_BOREN$ON 0000                                ltemp 007E  
          __end_of_setFeedbackState 1E23                                start 02E2  
                              ttemp 007E                                wtemp 007E  
      __end_of_getSwitchBypassState 07FF        updateSwitchTap@tapCntDivisor 00BC  
      __end_of_setSwitchBypassState 12F6                     ?i1_set_leds_top 0070  
                     __CFG_MCLRE$ON 0000                        ___ftmul@cntr 00C3  
                      ___ftmul@sign 00C4                     __end_of_InitApp 1F32  
                 ??_restoreLEDState 00A0                        ___fttol@exp1 0125  
                             ??_map 00E4                        ___fttol@lval 0121  
                             ??_isr 003A                     _switchBypass_up 01E6  
         __size_of_initSwitchBypass 000F                     __end_of___aldiv 16D6  
                             ?_main 0070                     __end_of___awdiv 13E2  
                   __end_of___ftadd 0C14                               _CCPR1 0291  
                             _CCPR2 0298                               _CCPR3 0311  
                             _CCPR4 0318                               _CCPR5 031C  
                             _CCPR9 061A                       __CFG_WDTE$OFF 0000  
                   __end_of___ftdiv 08C5                     __end_of___ftneg 1D62  
                   __end_of___ftmul 0979                     ___awdiv@divisor 0070  
                   __end_of___fttol 1800                               i1l119 0119  
                             i1l152 02DD                               i1l147 02D6  
                             i1l707 1289                               i1l708 12AB  
                   ___awdiv@counter 0075                 _ConfigureOscillator 1D45  
                      ?_init_timer0 0070                        ?_init_timer2 0070  
               ___lmul@multiplicand 00A4                     _switchTap_state 016E  
                 ??_setLongTapState 00A2                       ___awtoft@sign 00AD  
                             _frexp 1FC6                               _myBuf 04A0  
                             _errno 01CE                       ___ftpack@sign 00A4  
                             _timer 004D                      ?_star_tactiles 0070  
                             main@i 0248                               _trunc 13E2  
                  __end_ofi1___lmul 1F02                               ltemp0 007E  
                             ltemp1 0082                               ltemp2 0086  
                             ltemp3 0080                     __end_of_wait_ms 1F94  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
       __end_of_read_bottom_tactile 1264                  __size_ofi1___aldiv 0082  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F               set_subdivision@scalar 013D  
              ?_ConfigureOscillator 0070                  _getCurrentLEDState 1DF0  
                _updateSwitchBypass 0A33             __end_of_updateSwitchTap 0DF8  
                   __initialization 02E4             _updateSwitchBypassState 0003  
                      __end_of_main 07FB             __size_of_InitializeTaps 0026  
               i1___lmul@multiplier 0070                 ?_getCurrentLEDState 0070  
               ?_updateSwitchBypass 0070                      __CFG_LPBOR$OFF 0000  
                   _set_subdivision 0979                              ??_main 0142  
                     ___fttol@sign1 0120             __size_of_FLASH_ReadWord 0020  
        __end_of_solidring_tactiles 115A                      _feedback_timer 0153  
                    _feedback_state 0066                      _feedback_start 0054  
                  ?_set_leds_bottom 00A0                              ?_frexp 00A0  
                  __end_of___altoft 1341                              _ADRESH 009C  
                            _ADRESL 009B                    ___awdiv@dividend 0072  
               _baseline_delay_time 0058                ??_getCurrentLEDState 00A0  
                  __end_of___awtoft 1E82                    __end_of___ftpack 14ED  
              ??_updateSwitchBypass 00B6                              ?_trunc 012E  
                            i1l4102 1EDB                              i1l4106 1EE5  
                            i1l4132 1604                              i1l4124 15F4  
                            i1l4150 164B                              i1l4142 1632  
                            i1l4134 1612                              i1l1486 15E3  
                            i1l4146 163D                              i1l4600 1277  
                            i1l4602 127D                              i1l4604 1283  
                            i1l4700 0231                              i1l4710 0248  
                            i1l4630 00BD                              i1l4608 128F  
                            i1l4704 0237                              i1l4624 00A2  
                            i1l4714 024B                              i1l4722 02A5  
                            i1l4564 13A6                              i1l4708 0245  
                            i1l4716 0262                              i1l4660 0174  
                            i1l4590 13DD                              i1l4582 13CC  
                            i1l4574 13AE                              i1l4558 139B  
                            i1l4734 02D8                              i1l4662 0176  
                            i1l4638 0106                              i1l4576 13BA  
                            i1l6504 0251                              i1l4672 01AF  
                            i1l4586 13D5                              i1l6506 1294  
                            i1l4738 02DC                              i1l4674 01BE  
                            i1l4658 0164                              i1l4596 126B  
                            i1l4692 0215                              i1l4684 020D  
                            i1l4668 01A2                              i1l4598 1271  
                            i1l4678 01CB                              i1l4696 0221  
                            i1l4688 0210                              _PMADRH 0192  
                            u360_25 1EE6                              _PMADRL 0191  
                            u361_25 1EED                              _PMDATH 0194  
                            u370_25 1633                              _PMDATL 0193  
                            u451_25 13BB                              _PMCON2 0196  
                            u452_25 13C5                              u460_25 00B4  
                            u453_25 13CD                              u462_23 00D6  
                            u366_25 1607                              u368_25 1613  
                            u473_23 01F3                              u449_25 13B1  
                            u369_25 1627                              u466_23 0132  
                            u474_25 0207                              u458_25 0099  
                            u475_25 022A                              u469_23 0192  
                            u477_25 02B8                              u478_25 02D1  
                    _debounce_count 01C6                      _debounce_mode1 01C8  
                    _debounce_mode2 01CA                           ??_InitApp 00A0  
             ??_ConfigureOscillator 00A0            __end_of_read_top_tactile 1391  
                    __CFG_PWRTE$OFF 0000                              ___lmul 1F32  
                         ??___aldiv 00A8                           ??___awdiv 0074  
                         ??___ftadd 00AE                      __CFG_STVREN$ON 0000  
                         ??___ftdiv 00CB                           ??___ftneg 00A3  
                         ??___ftmul 00BB                           ??___fttol 00EB  
                  __end_of_init_adc 1D6C                    __end_of_init_pwm 11DC  
         __size_of_showBootSequence 002B                    ___awdiv@quotient 0077  
                 __end_ofi1___aldiv 1654               ___ftmul@f3_as_product 00C0  
                      __pdataBIGRAM 23E8             FLASH_ReadWord@flashAddr 00A0  
                      __pdataCOMMON 007D                _getSwitchBypassState 07FB  
                         ??_wait_ms 00AE                _setSwitchBypassState 12AC  
                   ??_star_tactiles 00B2                              trunc@i 0131  
                            trunc@x 012E              setLongTapState@f_state 00A0  
           __end_of__initialization 0393                          ___altoft@c 0126  
                 ?_initExpModeState 0070                          ___ftadd@f1 00A8  
                        ___ftadd@f2 00AB                   _bypass_turning_on 015C  
                        ___ftdiv@f1 00C8                          ___ftdiv@f2 00C5  
                        ___ftdiv@f3 00D0                      _top_push_state 0064  
                ??_initExpModeState 00B2           ??_updateSwitchBypassState 00A2  
                        ___ftneg@f1 00A0                 _switchBypass_toggle 01DC  
                        ___awtoft@c 00A8             __end_of_set_subdivision 0A33  
                        ___ftmul@f1 00B5                          ___ftmul@f2 00B8  
                        ___fttol@f1 00E7                    ?_updateSwitchTap 0070  
                      ?_update_mode 0070                      __pcstackCOMMON 0070  
                      __pidataBANK0 1DB5                        __pidataBANK2 1D99  
                      __pidataBANK3 1D76                        __pidataBANK4 1000  
                      __pidataBANK6 10DD                        __pidataBANK7 10A0  
                      __pidataBANK8 1063                       __end_of_frexp 2000  
                     __end_of_trunc 1434                    _initSwitchBypass 1DA6  
                         ?i1___lmul 0070                     _doubleTap_state 0053  
        ?_update_expressSwitchState 0070                      _OPTION_REGbits 0095  
             ?_getSwitchBypassState 00A0               ?_setSwitchBypassState 00B2  
                           ??_frexp 00A4                __size_of_init_timer0 0007  
              __size_of_init_timer2 0009                   i1___aldiv@divisor 0020  
                 i1___aldiv@counter 0028                             ??_trunc 00EF  
                        __pbssBANK0 0045                          __pbssBANK2 0151  
                        __pbssBANK3 01A0                          __pbssBANK4 024E  
                        __pbssBANK5 02A0                          __pbssBANK9 04A0  
                  ??i1_set_leds_top 0074                     _restoreLEDState 1E23  
                   __CFG_VCAPEN$OFF 0000                          _delayArray 23E8  
                 ?_setFeedbackState 00A0                          _delay_time 005C  
                  _long_press_limit 0062        __size_of_setDoublePressState 0032  
                        _delayfound 01CC                          __pmaintext 0397  
                ??_setFeedbackState 00A2                      _InitializeTaps 1E82  
                           ?___lmul 00A0                          __pintentry 0004  
                        _blink_rate 007D                       ??_adc_convert 00A2  
                         ?___altoft 0126                      ___lmul@product 00A8  
                   _setLongTapState 0802                           ?___awtoft 00A8  
                         ?___ftpack 00A0                          ??i1___lmul 0078  
                    _FLASH_ReadWord 1E40     __end_of_updateSwitchBypassState 0004  
                       modulation@x 002E                         modulation@y 0032  
                   _debounce_bypass 01C4                       _suspend_blink 0056  
                         ?_init_adc 0070                           ?_init_pwm 0070  
                           _InitApp 1F02              __end_of_InitializeTaps 1EA8  
                     ?_set_leds_top 00A0                          _knob1_prev 0162  
                        _knob2_prev 0164                          _knob3_prev 0166  
                        _knob4_prev 0168                          _knob5_prev 016A  
                  ?_set_subdivision 0136                             ___aldiv 1654  
                           ___awdiv 1391                     __size_of___lmul 0030  
                           ___ftadd 0B1E                             ___ftdiv 081C  
                           ___ftneg 1D59                          _knob_1_pos 0155  
                        _knob_2_pos 01D0                             ___ftmul 08C5  
                        _knob_3_pos 01D2                             ___fttol 1761  
                        _knob_4_pos 01D4                          _knob_5_pos 01D6  
                 _switchTap_pressed 0057                          ??___altoft 012A  
                  _showBootSequence 1EA8              __end_of_FLASH_ReadWord 1E60  
                        ??___awtoft 00AB                          ??___ftpack 00A5  
                InitializeTaps@itap 00A1                             __ptext1 11DC  
                           __ptext2 1DDA                             __ptext3 1D42  
                           __ptext4 1D6C                             __ptext5 0C14  
                           __ptext6 0802                             __ptext7 1654  
                           __ptext8 0A33                             __ptext9 1E09  
            ??_getSwitchBypassState 00A2                           _T2CONbits 001C  
                  _adjust_sub_delay 01C0                        __size_of_map 008B  
                      __size_of_isr 02DE              ??_setSwitchBypassState 00B4  
               __end_of_adc_convert 1DDA                    ___aldiv@dividend 00A4  
                           _wait_ms 1F62             __end_of_restoreLEDState 1E40  
                           clrloop0 1D8E                end_of_initialization 0393  
                        _modulation 115A                             init_ram 1D81  
                        ??_init_adc 00A0                             initloop 1D82  
                        ??_init_pwm 00A0        updateSwitchBypassState@state 00A0  
                _solidring_tactiles 111A                       _longTap_timer 0157  
                     _longTap_state 0067                       _longTap_start 0055  
                    ??_set_leds_top 00A4                   ?_read_top_tactile 0070  
                   ?_InitializeTaps 0070             __end_of_setLongTapState 081C  
            i1set_leds_top@ledState 0072                  ??_read_top_tactile 00B2  
                  ___aldiv@quotient 00AB        __size_of_read_bottom_tactile 0047  
               ?_solidring_tactiles 0070           FLASH_ReadWord@GIEBitValue 00A2  
              __size_of_update_mode 0041                     ?_FLASH_ReadWord 00A0  
                         _PORTAbits 000C                           _PORTCbits 000E  
                         _PORTDbits 000F                           _PORTEbits 0010  
              star_tactiles@reverse 00B4                          _test_timer 024E  
                         _TRISBbits 008D                           _TRISCbits 008E  
                         _TRISDbits 008F                           _TRISEbits 0090  
                         _TRISFbits 030C                           _TRISGbits 030D  
                         i1___aldiv 15D2             setFeedbackState@f_state 00A0  
              ??_solidring_tactiles 00B2         __end_of_ConfigureOscillator 1D49  
       __size_of_getCurrentLEDState 0019                          map@out_max 00E1  
                        map@out_min 00DE         __size_of_updateSwitchBypass 00EB  
          __end_of_initSwitchBypass 1DB5                         _CCP1CONbits 0293  
                       ___ftdiv@exp 00D3            __size_of_set_leds_bottom 003B  
                       _CCP2CONbits 029A                _switchBypass_pressed 0159  
                       _CCP3CONbits 0313                         _CCP4CONbits 031A  
                       _CCP5CONbits 031E                         _CCP6CONbits 0613  
                       _CCP7CONbits 0616                         ___ftmul@exp 00BF  
                adc_convert@channel 00A3                         _CCP8CONbits 0619  
                       _CCP9CONbits 061C                set_leds_top@ledState 00A2  
                    __end_of___lmul 1F62                       __pidataBIGRAM 0DF8  
                       _adc_convert 1DC7                       __pidataCOMMON 07FF  
         __size_of_initExpModeState 000A                      _switchTap_down 0160  
       ??_update_expressSwitchState 00B2               i1___lmul@multiplicand 0074  
                 __size_ofi1___lmul 002F                 start_initialization 02E4  
             _bottomTactile_pressed 015B                 _setDoublePressState 1F94  
                        ?i1___aldiv 0020                         __end_of_map 1761  
                       __end_of_isr 02E2                    ?_restoreLEDState 0070  
             __end_of_star_tactiles 155C                  _adjusted_pot_value 01C2  
                       ?_modulation 002E                          frexp@value 00A0  
              ?_setDoublePressState 00B2                    ?_setLongTapState 00A0  
                          ??___lmul 00A8                         __pdataBANK0 0058  
                       __pdataBANK2 0162                         __pdataBANK3 01E0  
                       __pdataBANK4 0220                         __pdataBANK6 0320  
                       __pdataBANK7 03A0                         __pdataBANK8 0420  
                i1___aldiv@dividend 0024                       _tap_iteration 01E8  
          __size_of_updateSwitchTap 01E4                   __size_of___altoft 004B  
         __size_of_setFeedbackState 001A                   __size_of___awtoft 0022  
                 __size_of___ftpack 0065                       ??_init_timer0 00A0  
                     ??_init_timer2 00A0                __end_of_set_leds_top 1488  
                         ___latbits 0003                  _switchBypass_state 0069  
                     __pcstackBANK0 0020                       __pcstackBANK1 00A0  
                     __pcstackBANK2 0120                       __pcstackBANK4 0248  
                    _expSwitchState 016D                       _delay_counter 0151  
                  i1___lmul@product 0078            __end_of_showBootSequence 1ED3  
          ?_updateSwitchBypassState 00A0                  i1___aldiv@quotient 002A  
                    isr@tmpSubDelay 0043           _update_expressSwitchState 1DDA  
                          ?_InitApp 0070                           __pnvBANK3 01EB  
             ??_setDoublePressState 00B4                   __size_of_init_adc 000A  
                 __size_of_init_pwm 0041                            ?___aldiv 00A0  
                 ??_set_leds_bottom 00A2                  _currentBypassState 016C  
                          ?___awdiv 0070                            ?___ftadd 00A8  
                          ?___ftdiv 00C5                            ?___ftneg 00A0  
                          ?___ftmul 00B5                            ?___fttol 00E7  
                       _blink_delay 01E0                 __size_of_modulation 0041  
                       _blink_state 01EA                          _B25kLength 01EB  
                          _CCPTMRS0 029D                            _CCPTMRS1 029E  
                          _CCPTMRS2 029F                         ??i1___aldiv 007C  
                          ?_wait_ms 00AC                 _read_bottom_tactile 121D  
                    __size_of_frexp 003A                      __size_of_trunc 0052  
               __end_of_init_timer0 1D50                 __end_of_init_timer2 1D59  
                         _mod_value 01D8                           _mod_timer 01B8  
                  ??_InitializeTaps 00A0                     ___aldiv@divisor 00A0  
                   ___aldiv@counter 00A9                            _LATBbits 010D  
                          _LATDbits 010F                            _LATFbits 038C  
                          _LATGbits 038D                      _mod_delay_time 01E4  
                         clear_ram0 1D8D                           _tap_timer 0049  
                         _tap_total 01BC                       set_leds_top@x 00A0  
                  ??_FLASH_ReadWord 00A2                ?_read_bottom_tactile 0070  
           __size_ofi1_set_leds_top 0048                    _initExpModeState 1D6C  
         initSwitchBypass@initState 00B6                           map@in_max 00DB  
                         map@in_min 00D8                           _sub_timer 0045  
                        _ADCON0bits 009D                            i1___lmul 1ED3  
                        _ADCON1bits 009E                           main@i_383 024A  
                         main@i_384 024C            __size_of_set_subdivision 00BA  
                  set_subdivision@x 0136                    set_subdivision@y 0138  
         __size_of_read_top_tactile 0050       __size_of_getSwitchBypassState 0004  
     __size_of_setSwitchBypassState 004A                   ??_updateSwitchTap 00B6  
                 ___lmul@multiplier 00A0                   _ReadSavedSettings 155C  
                 ?_initSwitchBypass 0070                      wait_ms@timeSec 00AC  
                ?_ReadSavedSettings 0070                      wait_ms@timemsl 00AE  
                         frexp@eptr 00A3         setSwitchBypassState@f_state 00B2  
                ??_initSwitchBypass 00B6                    __size_of_InitApp 0030  
                       _mode1_state 01DF                       ??_update_mode 00A0  
                       _mode2_state 015D               ??_read_bottom_tactile 00B2  
               updateSwitchTap@iCnt 00BE                 ??_ReadSavedSettings 00A4  
                        _APFCONbits 011D                   star_tactiles@iLed 00B5  
                  __size_of___aldiv 0082                    __size_of___awdiv 0051  
                  __size_of___ftadd 00F6                    __size_of___ftdiv 00A9  
                      ?_adc_convert 00A0                    __size_of___ftneg 0009  
                          ___altoft 12F6                    __size_of___ftmul 00B4  
                  __size_of___fttol 009F                            ___awtoft 1E60  
             __size_of_set_leds_top 0054                            ___ftpack 1488  
                 _initTapeModeState 1D42                            _map$2292 00E4  
            _preset_programmning_on 015F              star_tactiles@iLed_1453 00B7  
                        _ANSELEbits 0190                          _ANSELFbits 040C  
                  set_leds_bottom@x 00A0                    _setFeedbackState 1E09  
                ?_initTapeModeState 0070                         _init_timer0 1D49  
                       _init_timer2 1D50                  _delay_time_changed 01E2  
        __end_of_getCurrentLEDState 1E09          __end_of_updateSwitchBypass 0B1E  
                          __ptext10 1F94                            __ptext11 1EA8  
                          __ptext20 12F6                            __ptext12 14ED  
                          __ptext21 1E60                            __ptext13 111A  
                          __ptext30 1DA6                            __ptext22 1341  
                          __ptext14 1E23                            __ptext31 12AC  
                          __ptext23 121D                            __ptext15 1DF0  
                          __ptext40 1E40                            __ptext32 1F62  
                          __ptext24 16D6                            __ptext16 0979  
                          __ptext41 1E82                            __ptext33 1F32  
                          __ptext25 1D59                            __ptext17 13E2  
                          __ptext50 115A                            __ptext42 1F02  
                          __ptext34 0003                            __ptext26 08C5  
                          __ptext18 1FC6                            __ptext51 1ED3  
                          __ptext43 119B                            __ptext35 07FB  
                          __ptext27 081C                            __ptext19 1761  
                          __ptext52 15D2                            __ptext44 1D50  
                          __ptext36 1DC7                            __ptext28 0B1E  
                          __ptext53 1391                            __ptext45 1D49  
                          __ptext37 155C                            __ptext29 1488  
                          __ptext46 1D62                            __ptext38 1434  
                          __ptext47 1D45                            __ptext39 1028  
                          __ptext49 1264           __end_of_ReadSavedSettings 15D2  
                  __size_of_wait_ms 0032         __size_of_solidring_tactiles 0040  
                          _ledState 01B4                 ??_initTapeModeState 00A0  
                      ??_modulation 0036                         _mod_counter 0051  
                        trunc@expon 0134                            _init_adc 1D62  
                     __size_of_main 0464                            _init_pwm 119B  
      __size_of_ConfigureOscillator 0004                        _set_leds_top 1434  
                          _num_taps 0068                            int$flags 007E  
         __end_of_initTapeModeState 1D45  __size_of_update_expressSwitchState 0016  
                   i1set_leds_top@x 0070                 __end_of_update_mode 121D  
                __end_of_modulation 119B                          _INTCONbits 000B  
                       _tap_history 01A0                   ??_set_subdivision 013A  
                          intlevel1 0000                     _set_leds_bottom 1028  
                        _PMCON1bits 0195                   ?_showBootSequence 0070  
                 __CFG_CLKOUTEN$OFF 0000            __size_of_restoreLEDState 001D  
                ??_showBootSequence 00B9                     _reset_sub_delay 01DA  
                        _OSCCONbits 0099                        _preset_blink 015E  
                    i1_set_leds_top 1264    __size_of_updateSwitchBypassState 0001  
            __size_of_star_tactiles 006F   __end_of_update_expressSwitchState 1DF0  
          __size_of_setLongTapState 001A                    _read_top_tactile 1341  
                      ___aldiv@sign 00AA          __size_of_ReadSavedSettings 0076  
       __end_of_setDoublePressState 1FC6                        _CCP10CONbits 061F  
                 _bottom_push_state 0060            __end_of_initExpModeState 1D76  
            __end_ofi1_set_leds_top 12AC  
