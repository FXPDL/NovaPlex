

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 28 23:13:58 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	idataBANK6,global,class=CODE,delta=2
    11                           	psect	idataBANK7,global,class=CODE,delta=2
    12                           	psect	idataBANK8,global,class=CODE,delta=2
    13                           	psect	idataBANK10,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	intentry,global,class=CODE,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	dabs	1,0x920,80
    86                           	dabs	1,0x8C6,42
    87                           	dabs	1,0x8A0,38
    88                           	dabs	1,0x820,80
    89                           	dabs	1,0x7A0,80
    90                           	dabs	1,0x720,80
    91                           	dabs	1,0x6A0,80
    92                           	dabs	1,0x620,80
    93                           	dabs	1,0x5A0,80
    94                           	dabs	1,0x56E,2
    95                           	dabs	1,0x236E,0,_delayArray
    96                           	dabs	1,0x2576,0,_mod5
    97                           	dabs	1,0x7E,2
    98  0000                     	;# 
    99  0001                     	;# 
   100  0002                     	;# 
   101  0003                     	;# 
   102  0004                     	;# 
   103  0005                     	;# 
   104  0006                     	;# 
   105  0007                     	;# 
   106  0008                     	;# 
   107  0009                     	;# 
   108  000A                     	;# 
   109  000B                     	;# 
   110  000C                     	;# 
   111  000D                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0016                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001C                     	;# 
   128  008C                     	;# 
   129  008D                     	;# 
   130  008E                     	;# 
   131  008F                     	;# 
   132  0090                     	;# 
   133  0091                     	;# 
   134  0092                     	;# 
   135  0093                     	;# 
   136  0094                     	;# 
   137  0095                     	;# 
   138  0096                     	;# 
   139  0097                     	;# 
   140  0099                     	;# 
   141  009A                     	;# 
   142  009B                     	;# 
   143  009B                     	;# 
   144  009C                     	;# 
   145  009D                     	;# 
   146  009E                     	;# 
   147  010C                     	;# 
   148  010D                     	;# 
   149  010E                     	;# 
   150  010F                     	;# 
   151  0110                     	;# 
   152  0116                     	;# 
   153  0117                     	;# 
   154  011D                     	;# 
   155  018C                     	;# 
   156  018D                     	;# 
   157  018F                     	;# 
   158  0190                     	;# 
   159  0191                     	;# 
   160  0191                     	;# 
   161  0192                     	;# 
   162  0193                     	;# 
   163  0193                     	;# 
   164  0194                     	;# 
   165  0195                     	;# 
   166  0196                     	;# 
   167  0197                     	;# 
   168  0199                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  019A                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019C                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019D                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019E                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019F                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  020D                     	;# 
   192  020F                     	;# 
   193  0210                     	;# 
   194  0211                     	;# 
   195  0211                     	;# 
   196  0212                     	;# 
   197  0212                     	;# 
   198  0213                     	;# 
   199  0213                     	;# 
   200  0214                     	;# 
   201  0214                     	;# 
   202  0215                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0216                     	;# 
   206  0216                     	;# 
   207  0217                     	;# 
   208  0217                     	;# 
   209  0219                     	;# 
   210  021A                     	;# 
   211  021B                     	;# 
   212  021C                     	;# 
   213  021D                     	;# 
   214  021E                     	;# 
   215  021F                     	;# 
   216  028C                     	;# 
   217  028D                     	;# 
   218  0291                     	;# 
   219  0291                     	;# 
   220  0292                     	;# 
   221  0293                     	;# 
   222  0298                     	;# 
   223  0298                     	;# 
   224  0299                     	;# 
   225  029A                     	;# 
   226  029D                     	;# 
   227  029E                     	;# 
   228  029F                     	;# 
   229  030C                     	;# 
   230  030D                     	;# 
   231  0311                     	;# 
   232  0311                     	;# 
   233  0312                     	;# 
   234  0313                     	;# 
   235  0318                     	;# 
   236  0318                     	;# 
   237  0319                     	;# 
   238  031A                     	;# 
   239  031C                     	;# 
   240  031C                     	;# 
   241  031D                     	;# 
   242  031E                     	;# 
   243  038C                     	;# 
   244  038D                     	;# 
   245  0394                     	;# 
   246  0395                     	;# 
   247  0396                     	;# 
   248  040C                     	;# 
   249  040D                     	;# 
   250  0411                     	;# 
   251  0411                     	;# 
   252  0412                     	;# 
   253  0413                     	;# 
   254  0414                     	;# 
   255  0415                     	;# 
   256  0416                     	;# 
   257  0417                     	;# 
   258  0418                     	;# 
   259  0418                     	;# 
   260  0419                     	;# 
   261  041A                     	;# 
   262  041B                     	;# 
   263  041C                     	;# 
   264  041D                     	;# 
   265  041E                     	;# 
   266  048D                     	;# 
   267  0491                     	;# 
   268  0491                     	;# 
   269  0492                     	;# 
   270  0492                     	;# 
   271  0493                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0494                     	;# 
   275  0494                     	;# 
   276  0495                     	;# 
   277  0495                     	;# 
   278  0496                     	;# 
   279  0496                     	;# 
   280  0497                     	;# 
   281  0497                     	;# 
   282  0595                     	;# 
   283  0596                     	;# 
   284  0597                     	;# 
   285  059C                     	;# 
   286  059D                     	;# 
   287  059E                     	;# 
   288  0611                     	;# 
   289  0611                     	;# 
   290  0612                     	;# 
   291  0613                     	;# 
   292  0614                     	;# 
   293  0614                     	;# 
   294  0615                     	;# 
   295  0616                     	;# 
   296  0617                     	;# 
   297  0617                     	;# 
   298  0618                     	;# 
   299  0619                     	;# 
   300  061A                     	;# 
   301  061A                     	;# 
   302  061B                     	;# 
   303  061C                     	;# 
   304  061D                     	;# 
   305  061D                     	;# 
   306  061E                     	;# 
   307  061F                     	;# 
   308  0FE4                     	;# 
   309  0FE5                     	;# 
   310  0FE6                     	;# 
   311  0FE7                     	;# 
   312  0FE8                     	;# 
   313  0FE9                     	;# 
   314  0FEA                     	;# 
   315  0FEB                     	;# 
   316  0FED                     	;# 
   317  0FEE                     	;# 
   318  0FEF                     	;# 
   319  0000                     	;# 
   320  0001                     	;# 
   321  0002                     	;# 
   322  0003                     	;# 
   323  0004                     	;# 
   324  0005                     	;# 
   325  0006                     	;# 
   326  0007                     	;# 
   327  0008                     	;# 
   328  0009                     	;# 
   329  000A                     	;# 
   330  000B                     	;# 
   331  000C                     	;# 
   332  000D                     	;# 
   333  000E                     	;# 
   334  000F                     	;# 
   335  0010                     	;# 
   336  0011                     	;# 
   337  0012                     	;# 
   338  0013                     	;# 
   339  0014                     	;# 
   340  0015                     	;# 
   341  0016                     	;# 
   342  0016                     	;# 
   343  0017                     	;# 
   344  0018                     	;# 
   345  0019                     	;# 
   346  001A                     	;# 
   347  001B                     	;# 
   348  001C                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0094                     	;# 
   358  0095                     	;# 
   359  0096                     	;# 
   360  0097                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009B                     	;# 
   365  009C                     	;# 
   366  009D                     	;# 
   367  009E                     	;# 
   368  010C                     	;# 
   369  010D                     	;# 
   370  010E                     	;# 
   371  010F                     	;# 
   372  0110                     	;# 
   373  0116                     	;# 
   374  0117                     	;# 
   375  011D                     	;# 
   376  018C                     	;# 
   377  018D                     	;# 
   378  018F                     	;# 
   379  0190                     	;# 
   380  0191                     	;# 
   381  0191                     	;# 
   382  0192                     	;# 
   383  0193                     	;# 
   384  0193                     	;# 
   385  0194                     	;# 
   386  0195                     	;# 
   387  0196                     	;# 
   388  0197                     	;# 
   389  0199                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  019A                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019C                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019D                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019E                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019F                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  020D                     	;# 
   413  020F                     	;# 
   414  0210                     	;# 
   415  0211                     	;# 
   416  0211                     	;# 
   417  0212                     	;# 
   418  0212                     	;# 
   419  0213                     	;# 
   420  0213                     	;# 
   421  0214                     	;# 
   422  0214                     	;# 
   423  0215                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0216                     	;# 
   427  0216                     	;# 
   428  0217                     	;# 
   429  0217                     	;# 
   430  0219                     	;# 
   431  021A                     	;# 
   432  021B                     	;# 
   433  021C                     	;# 
   434  021D                     	;# 
   435  021E                     	;# 
   436  021F                     	;# 
   437  028C                     	;# 
   438  028D                     	;# 
   439  0291                     	;# 
   440  0291                     	;# 
   441  0292                     	;# 
   442  0293                     	;# 
   443  0298                     	;# 
   444  0298                     	;# 
   445  0299                     	;# 
   446  029A                     	;# 
   447  029D                     	;# 
   448  029E                     	;# 
   449  029F                     	;# 
   450  030C                     	;# 
   451  030D                     	;# 
   452  0311                     	;# 
   453  0311                     	;# 
   454  0312                     	;# 
   455  0313                     	;# 
   456  0318                     	;# 
   457  0318                     	;# 
   458  0319                     	;# 
   459  031A                     	;# 
   460  031C                     	;# 
   461  031C                     	;# 
   462  031D                     	;# 
   463  031E                     	;# 
   464  038C                     	;# 
   465  038D                     	;# 
   466  0394                     	;# 
   467  0395                     	;# 
   468  0396                     	;# 
   469  040C                     	;# 
   470  040D                     	;# 
   471  0411                     	;# 
   472  0411                     	;# 
   473  0412                     	;# 
   474  0413                     	;# 
   475  0414                     	;# 
   476  0415                     	;# 
   477  0416                     	;# 
   478  0417                     	;# 
   479  0418                     	;# 
   480  0418                     	;# 
   481  0419                     	;# 
   482  041A                     	;# 
   483  041B                     	;# 
   484  041C                     	;# 
   485  041D                     	;# 
   486  041E                     	;# 
   487  048D                     	;# 
   488  0491                     	;# 
   489  0491                     	;# 
   490  0492                     	;# 
   491  0492                     	;# 
   492  0493                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0494                     	;# 
   496  0494                     	;# 
   497  0495                     	;# 
   498  0495                     	;# 
   499  0496                     	;# 
   500  0496                     	;# 
   501  0497                     	;# 
   502  0497                     	;# 
   503  0595                     	;# 
   504  0596                     	;# 
   505  0597                     	;# 
   506  059C                     	;# 
   507  059D                     	;# 
   508  059E                     	;# 
   509  0611                     	;# 
   510  0611                     	;# 
   511  0612                     	;# 
   512  0613                     	;# 
   513  0614                     	;# 
   514  0614                     	;# 
   515  0615                     	;# 
   516  0616                     	;# 
   517  0617                     	;# 
   518  0617                     	;# 
   519  0618                     	;# 
   520  0619                     	;# 
   521  061A                     	;# 
   522  061A                     	;# 
   523  061B                     	;# 
   524  061C                     	;# 
   525  061D                     	;# 
   526  061D                     	;# 
   527  061E                     	;# 
   528  061F                     	;# 
   529  0FE4                     	;# 
   530  0FE5                     	;# 
   531  0FE6                     	;# 
   532  0FE7                     	;# 
   533  0FE8                     	;# 
   534  0FE9                     	;# 
   535  0FEA                     	;# 
   536  0FEB                     	;# 
   537  0FED                     	;# 
   538  0FEE                     	;# 
   539  0FEF                     	;# 
   540  0000                     	;# 
   541  0001                     	;# 
   542  0002                     	;# 
   543  0003                     	;# 
   544  0004                     	;# 
   545  0005                     	;# 
   546  0006                     	;# 
   547  0007                     	;# 
   548  0008                     	;# 
   549  0009                     	;# 
   550  000A                     	;# 
   551  000B                     	;# 
   552  000C                     	;# 
   553  000D                     	;# 
   554  000E                     	;# 
   555  000F                     	;# 
   556  0010                     	;# 
   557  0011                     	;# 
   558  0012                     	;# 
   559  0013                     	;# 
   560  0014                     	;# 
   561  0015                     	;# 
   562  0016                     	;# 
   563  0016                     	;# 
   564  0017                     	;# 
   565  0018                     	;# 
   566  0019                     	;# 
   567  001A                     	;# 
   568  001B                     	;# 
   569  001C                     	;# 
   570  008C                     	;# 
   571  008D                     	;# 
   572  008E                     	;# 
   573  008F                     	;# 
   574  0090                     	;# 
   575  0091                     	;# 
   576  0092                     	;# 
   577  0093                     	;# 
   578  0094                     	;# 
   579  0095                     	;# 
   580  0096                     	;# 
   581  0097                     	;# 
   582  0099                     	;# 
   583  009A                     	;# 
   584  009B                     	;# 
   585  009B                     	;# 
   586  009C                     	;# 
   587  009D                     	;# 
   588  009E                     	;# 
   589  010C                     	;# 
   590  010D                     	;# 
   591  010E                     	;# 
   592  010F                     	;# 
   593  0110                     	;# 
   594  0116                     	;# 
   595  0117                     	;# 
   596  011D                     	;# 
   597  018C                     	;# 
   598  018D                     	;# 
   599  018F                     	;# 
   600  0190                     	;# 
   601  0191                     	;# 
   602  0191                     	;# 
   603  0192                     	;# 
   604  0193                     	;# 
   605  0193                     	;# 
   606  0194                     	;# 
   607  0195                     	;# 
   608  0196                     	;# 
   609  0197                     	;# 
   610  0199                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  019A                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019C                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019D                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019E                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019F                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  020D                     	;# 
   634  020F                     	;# 
   635  0210                     	;# 
   636  0211                     	;# 
   637  0211                     	;# 
   638  0212                     	;# 
   639  0212                     	;# 
   640  0213                     	;# 
   641  0213                     	;# 
   642  0214                     	;# 
   643  0214                     	;# 
   644  0215                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0216                     	;# 
   648  0216                     	;# 
   649  0217                     	;# 
   650  0217                     	;# 
   651  0219                     	;# 
   652  021A                     	;# 
   653  021B                     	;# 
   654  021C                     	;# 
   655  021D                     	;# 
   656  021E                     	;# 
   657  021F                     	;# 
   658  028C                     	;# 
   659  028D                     	;# 
   660  0291                     	;# 
   661  0291                     	;# 
   662  0292                     	;# 
   663  0293                     	;# 
   664  0298                     	;# 
   665  0298                     	;# 
   666  0299                     	;# 
   667  029A                     	;# 
   668  029D                     	;# 
   669  029E                     	;# 
   670  029F                     	;# 
   671  030C                     	;# 
   672  030D                     	;# 
   673  0311                     	;# 
   674  0311                     	;# 
   675  0312                     	;# 
   676  0313                     	;# 
   677  0318                     	;# 
   678  0318                     	;# 
   679  0319                     	;# 
   680  031A                     	;# 
   681  031C                     	;# 
   682  031C                     	;# 
   683  031D                     	;# 
   684  031E                     	;# 
   685  038C                     	;# 
   686  038D                     	;# 
   687  0394                     	;# 
   688  0395                     	;# 
   689  0396                     	;# 
   690  040C                     	;# 
   691  040D                     	;# 
   692  0411                     	;# 
   693  0411                     	;# 
   694  0412                     	;# 
   695  0413                     	;# 
   696  0414                     	;# 
   697  0415                     	;# 
   698  0416                     	;# 
   699  0417                     	;# 
   700  0418                     	;# 
   701  0418                     	;# 
   702  0419                     	;# 
   703  041A                     	;# 
   704  041B                     	;# 
   705  041C                     	;# 
   706  041D                     	;# 
   707  041E                     	;# 
   708  048D                     	;# 
   709  0491                     	;# 
   710  0491                     	;# 
   711  0492                     	;# 
   712  0492                     	;# 
   713  0493                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0494                     	;# 
   717  0494                     	;# 
   718  0495                     	;# 
   719  0495                     	;# 
   720  0496                     	;# 
   721  0496                     	;# 
   722  0497                     	;# 
   723  0497                     	;# 
   724  0595                     	;# 
   725  0596                     	;# 
   726  0597                     	;# 
   727  059C                     	;# 
   728  059D                     	;# 
   729  059E                     	;# 
   730  0611                     	;# 
   731  0611                     	;# 
   732  0612                     	;# 
   733  0613                     	;# 
   734  0614                     	;# 
   735  0614                     	;# 
   736  0615                     	;# 
   737  0616                     	;# 
   738  0617                     	;# 
   739  0617                     	;# 
   740  0618                     	;# 
   741  0619                     	;# 
   742  061A                     	;# 
   743  061A                     	;# 
   744  061B                     	;# 
   745  061C                     	;# 
   746  061D                     	;# 
   747  061D                     	;# 
   748  061E                     	;# 
   749  061F                     	;# 
   750  0FE4                     	;# 
   751  0FE5                     	;# 
   752  0FE6                     	;# 
   753  0FE7                     	;# 
   754  0FE8                     	;# 
   755  0FE9                     	;# 
   756  0FEA                     	;# 
   757  0FEB                     	;# 
   758  0FED                     	;# 
   759  0FEE                     	;# 
   760  0FEF                     	;# 
   761  0000                     	;# 
   762  0001                     	;# 
   763  0002                     	;# 
   764  0003                     	;# 
   765  0004                     	;# 
   766  0005                     	;# 
   767  0006                     	;# 
   768  0007                     	;# 
   769  0008                     	;# 
   770  0009                     	;# 
   771  000A                     	;# 
   772  000B                     	;# 
   773  000C                     	;# 
   774  000D                     	;# 
   775  000E                     	;# 
   776  000F                     	;# 
   777  0010                     	;# 
   778  0011                     	;# 
   779  0012                     	;# 
   780  0013                     	;# 
   781  0014                     	;# 
   782  0015                     	;# 
   783  0016                     	;# 
   784  0016                     	;# 
   785  0017                     	;# 
   786  0018                     	;# 
   787  0019                     	;# 
   788  001A                     	;# 
   789  001B                     	;# 
   790  001C                     	;# 
   791  008C                     	;# 
   792  008D                     	;# 
   793  008E                     	;# 
   794  008F                     	;# 
   795  0090                     	;# 
   796  0091                     	;# 
   797  0092                     	;# 
   798  0093                     	;# 
   799  0094                     	;# 
   800  0095                     	;# 
   801  0096                     	;# 
   802  0097                     	;# 
   803  0099                     	;# 
   804  009A                     	;# 
   805  009B                     	;# 
   806  009B                     	;# 
   807  009C                     	;# 
   808  009D                     	;# 
   809  009E                     	;# 
   810  010C                     	;# 
   811  010D                     	;# 
   812  010E                     	;# 
   813  010F                     	;# 
   814  0110                     	;# 
   815  0116                     	;# 
   816  0117                     	;# 
   817  011D                     	;# 
   818  018C                     	;# 
   819  018D                     	;# 
   820  018F                     	;# 
   821  0190                     	;# 
   822  0191                     	;# 
   823  0191                     	;# 
   824  0192                     	;# 
   825  0193                     	;# 
   826  0193                     	;# 
   827  0194                     	;# 
   828  0195                     	;# 
   829  0196                     	;# 
   830  0197                     	;# 
   831  0199                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  019A                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019C                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019D                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019E                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019F                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  020D                     	;# 
   855  020F                     	;# 
   856  0210                     	;# 
   857  0211                     	;# 
   858  0211                     	;# 
   859  0212                     	;# 
   860  0212                     	;# 
   861  0213                     	;# 
   862  0213                     	;# 
   863  0214                     	;# 
   864  0214                     	;# 
   865  0215                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0216                     	;# 
   869  0216                     	;# 
   870  0217                     	;# 
   871  0217                     	;# 
   872  0219                     	;# 
   873  021A                     	;# 
   874  021B                     	;# 
   875  021C                     	;# 
   876  021D                     	;# 
   877  021E                     	;# 
   878  021F                     	;# 
   879  028C                     	;# 
   880  028D                     	;# 
   881  0291                     	;# 
   882  0291                     	;# 
   883  0292                     	;# 
   884  0293                     	;# 
   885  0298                     	;# 
   886  0298                     	;# 
   887  0299                     	;# 
   888  029A                     	;# 
   889  029D                     	;# 
   890  029E                     	;# 
   891  029F                     	;# 
   892  030C                     	;# 
   893  030D                     	;# 
   894  0311                     	;# 
   895  0311                     	;# 
   896  0312                     	;# 
   897  0313                     	;# 
   898  0318                     	;# 
   899  0318                     	;# 
   900  0319                     	;# 
   901  031A                     	;# 
   902  031C                     	;# 
   903  031C                     	;# 
   904  031D                     	;# 
   905  031E                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  040C                     	;# 
   912  040D                     	;# 
   913  0411                     	;# 
   914  0411                     	;# 
   915  0412                     	;# 
   916  0413                     	;# 
   917  0414                     	;# 
   918  0415                     	;# 
   919  0416                     	;# 
   920  0417                     	;# 
   921  0418                     	;# 
   922  0418                     	;# 
   923  0419                     	;# 
   924  041A                     	;# 
   925  041B                     	;# 
   926  041C                     	;# 
   927  041D                     	;# 
   928  041E                     	;# 
   929  048D                     	;# 
   930  0491                     	;# 
   931  0491                     	;# 
   932  0492                     	;# 
   933  0492                     	;# 
   934  0493                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0494                     	;# 
   938  0494                     	;# 
   939  0495                     	;# 
   940  0495                     	;# 
   941  0496                     	;# 
   942  0496                     	;# 
   943  0497                     	;# 
   944  0497                     	;# 
   945  0595                     	;# 
   946  0596                     	;# 
   947  0597                     	;# 
   948  059C                     	;# 
   949  059D                     	;# 
   950  059E                     	;# 
   951  0611                     	;# 
   952  0611                     	;# 
   953  0612                     	;# 
   954  0613                     	;# 
   955  0614                     	;# 
   956  0614                     	;# 
   957  0615                     	;# 
   958  0616                     	;# 
   959  0617                     	;# 
   960  0617                     	;# 
   961  0618                     	;# 
   962  0619                     	;# 
   963  061A                     	;# 
   964  061A                     	;# 
   965  061B                     	;# 
   966  061C                     	;# 
   967  061D                     	;# 
   968  061D                     	;# 
   969  061E                     	;# 
   970  061F                     	;# 
   971  0FE4                     	;# 
   972  0FE5                     	;# 
   973  0FE6                     	;# 
   974  0FE7                     	;# 
   975  0FE8                     	;# 
   976  0FE9                     	;# 
   977  0FEA                     	;# 
   978  0FEB                     	;# 
   979  0FED                     	;# 
   980  0FEE                     	;# 
   981  0FEF                     	;# 
   982  0000                     	;# 
   983  0001                     	;# 
   984  0002                     	;# 
   985  0003                     	;# 
   986  0004                     	;# 
   987  0005                     	;# 
   988  0006                     	;# 
   989  0007                     	;# 
   990  0008                     	;# 
   991  0009                     	;# 
   992  000A                     	;# 
   993  000B                     	;# 
   994  000C                     	;# 
   995  000D                     	;# 
   996  000E                     	;# 
   997  000F                     	;# 
   998  0010                     	;# 
   999  0011                     	;# 
  1000  0012                     	;# 
  1001  0013                     	;# 
  1002  0014                     	;# 
  1003  0015                     	;# 
  1004  0016                     	;# 
  1005  0016                     	;# 
  1006  0017                     	;# 
  1007  0018                     	;# 
  1008  0019                     	;# 
  1009  001A                     	;# 
  1010  001B                     	;# 
  1011  001C                     	;# 
  1012  008C                     	;# 
  1013  008D                     	;# 
  1014  008E                     	;# 
  1015  008F                     	;# 
  1016  0090                     	;# 
  1017  0091                     	;# 
  1018  0092                     	;# 
  1019  0093                     	;# 
  1020  0094                     	;# 
  1021  0095                     	;# 
  1022  0096                     	;# 
  1023  0097                     	;# 
  1024  0099                     	;# 
  1025  009A                     	;# 
  1026  009B                     	;# 
  1027  009B                     	;# 
  1028  009C                     	;# 
  1029  009D                     	;# 
  1030  009E                     	;# 
  1031  010C                     	;# 
  1032  010D                     	;# 
  1033  010E                     	;# 
  1034  010F                     	;# 
  1035  0110                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  011D                     	;# 
  1039  018C                     	;# 
  1040  018D                     	;# 
  1041  018F                     	;# 
  1042  0190                     	;# 
  1043  0191                     	;# 
  1044  0191                     	;# 
  1045  0192                     	;# 
  1046  0193                     	;# 
  1047  0193                     	;# 
  1048  0194                     	;# 
  1049  0195                     	;# 
  1050  0196                     	;# 
  1051  0197                     	;# 
  1052  0199                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  019A                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019C                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019D                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019E                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019F                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  020D                     	;# 
  1076  020F                     	;# 
  1077  0210                     	;# 
  1078  0211                     	;# 
  1079  0211                     	;# 
  1080  0212                     	;# 
  1081  0212                     	;# 
  1082  0213                     	;# 
  1083  0213                     	;# 
  1084  0214                     	;# 
  1085  0214                     	;# 
  1086  0215                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0216                     	;# 
  1090  0216                     	;# 
  1091  0217                     	;# 
  1092  0217                     	;# 
  1093  0219                     	;# 
  1094  021A                     	;# 
  1095  021B                     	;# 
  1096  021C                     	;# 
  1097  021D                     	;# 
  1098  021E                     	;# 
  1099  021F                     	;# 
  1100  028C                     	;# 
  1101  028D                     	;# 
  1102  0291                     	;# 
  1103  0291                     	;# 
  1104  0292                     	;# 
  1105  0293                     	;# 
  1106  0298                     	;# 
  1107  0298                     	;# 
  1108  0299                     	;# 
  1109  029A                     	;# 
  1110  029D                     	;# 
  1111  029E                     	;# 
  1112  029F                     	;# 
  1113  030C                     	;# 
  1114  030D                     	;# 
  1115  0311                     	;# 
  1116  0311                     	;# 
  1117  0312                     	;# 
  1118  0313                     	;# 
  1119  0318                     	;# 
  1120  0318                     	;# 
  1121  0319                     	;# 
  1122  031A                     	;# 
  1123  031C                     	;# 
  1124  031C                     	;# 
  1125  031D                     	;# 
  1126  031E                     	;# 
  1127  038C                     	;# 
  1128  038D                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  040C                     	;# 
  1133  040D                     	;# 
  1134  0411                     	;# 
  1135  0411                     	;# 
  1136  0412                     	;# 
  1137  0413                     	;# 
  1138  0414                     	;# 
  1139  0415                     	;# 
  1140  0416                     	;# 
  1141  0417                     	;# 
  1142  0418                     	;# 
  1143  0418                     	;# 
  1144  0419                     	;# 
  1145  041A                     	;# 
  1146  041B                     	;# 
  1147  041C                     	;# 
  1148  041D                     	;# 
  1149  041E                     	;# 
  1150  048D                     	;# 
  1151  0491                     	;# 
  1152  0491                     	;# 
  1153  0492                     	;# 
  1154  0492                     	;# 
  1155  0493                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0494                     	;# 
  1159  0494                     	;# 
  1160  0495                     	;# 
  1161  0495                     	;# 
  1162  0496                     	;# 
  1163  0496                     	;# 
  1164  0497                     	;# 
  1165  0497                     	;# 
  1166  0595                     	;# 
  1167  0596                     	;# 
  1168  0597                     	;# 
  1169  059C                     	;# 
  1170  059D                     	;# 
  1171  059E                     	;# 
  1172  0611                     	;# 
  1173  0611                     	;# 
  1174  0612                     	;# 
  1175  0613                     	;# 
  1176  0614                     	;# 
  1177  0614                     	;# 
  1178  0615                     	;# 
  1179  0616                     	;# 
  1180  0617                     	;# 
  1181  0617                     	;# 
  1182  0618                     	;# 
  1183  0619                     	;# 
  1184  061A                     	;# 
  1185  061A                     	;# 
  1186  061B                     	;# 
  1187  061C                     	;# 
  1188  061D                     	;# 
  1189  061D                     	;# 
  1190  061E                     	;# 
  1191  061F                     	;# 
  1192  0FE4                     	;# 
  1193  0FE5                     	;# 
  1194  0FE6                     	;# 
  1195  0FE7                     	;# 
  1196  0FE8                     	;# 
  1197  0FE9                     	;# 
  1198  0FEA                     	;# 
  1199  0FEB                     	;# 
  1200  0FED                     	;# 
  1201  0FEE                     	;# 
  1202  0FEF                     	;# 
  1203  0000                     	;# 
  1204  0001                     	;# 
  1205  0002                     	;# 
  1206  0003                     	;# 
  1207  0004                     	;# 
  1208  0005                     	;# 
  1209  0006                     	;# 
  1210  0007                     	;# 
  1211  0008                     	;# 
  1212  0009                     	;# 
  1213  000A                     	;# 
  1214  000B                     	;# 
  1215  000C                     	;# 
  1216  000D                     	;# 
  1217  000E                     	;# 
  1218  000F                     	;# 
  1219  0010                     	;# 
  1220  0011                     	;# 
  1221  0012                     	;# 
  1222  0013                     	;# 
  1223  0014                     	;# 
  1224  0015                     	;# 
  1225  0016                     	;# 
  1226  0016                     	;# 
  1227  0017                     	;# 
  1228  0018                     	;# 
  1229  0019                     	;# 
  1230  001A                     	;# 
  1231  001B                     	;# 
  1232  001C                     	;# 
  1233  008C                     	;# 
  1234  008D                     	;# 
  1235  008E                     	;# 
  1236  008F                     	;# 
  1237  0090                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0099                     	;# 
  1246  009A                     	;# 
  1247  009B                     	;# 
  1248  009B                     	;# 
  1249  009C                     	;# 
  1250  009D                     	;# 
  1251  009E                     	;# 
  1252  010C                     	;# 
  1253  010D                     	;# 
  1254  010E                     	;# 
  1255  010F                     	;# 
  1256  0110                     	;# 
  1257  0116                     	;# 
  1258  0117                     	;# 
  1259  011D                     	;# 
  1260  018C                     	;# 
  1261  018D                     	;# 
  1262  018F                     	;# 
  1263  0190                     	;# 
  1264  0191                     	;# 
  1265  0191                     	;# 
  1266  0192                     	;# 
  1267  0193                     	;# 
  1268  0193                     	;# 
  1269  0194                     	;# 
  1270  0195                     	;# 
  1271  0196                     	;# 
  1272  0197                     	;# 
  1273  0199                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  019A                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019C                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019D                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019E                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019F                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  020D                     	;# 
  1297  020F                     	;# 
  1298  0210                     	;# 
  1299  0211                     	;# 
  1300  0211                     	;# 
  1301  0212                     	;# 
  1302  0212                     	;# 
  1303  0213                     	;# 
  1304  0213                     	;# 
  1305  0214                     	;# 
  1306  0214                     	;# 
  1307  0215                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0216                     	;# 
  1311  0216                     	;# 
  1312  0217                     	;# 
  1313  0217                     	;# 
  1314  0219                     	;# 
  1315  021A                     	;# 
  1316  021B                     	;# 
  1317  021C                     	;# 
  1318  021D                     	;# 
  1319  021E                     	;# 
  1320  021F                     	;# 
  1321  028C                     	;# 
  1322  028D                     	;# 
  1323  0291                     	;# 
  1324  0291                     	;# 
  1325  0292                     	;# 
  1326  0293                     	;# 
  1327  0298                     	;# 
  1328  0298                     	;# 
  1329  0299                     	;# 
  1330  029A                     	;# 
  1331  029D                     	;# 
  1332  029E                     	;# 
  1333  029F                     	;# 
  1334  030C                     	;# 
  1335  030D                     	;# 
  1336  0311                     	;# 
  1337  0311                     	;# 
  1338  0312                     	;# 
  1339  0313                     	;# 
  1340  0318                     	;# 
  1341  0318                     	;# 
  1342  0319                     	;# 
  1343  031A                     	;# 
  1344  031C                     	;# 
  1345  031C                     	;# 
  1346  031D                     	;# 
  1347  031E                     	;# 
  1348  038C                     	;# 
  1349  038D                     	;# 
  1350  0394                     	;# 
  1351  0395                     	;# 
  1352  0396                     	;# 
  1353  040C                     	;# 
  1354  040D                     	;# 
  1355  0411                     	;# 
  1356  0411                     	;# 
  1357  0412                     	;# 
  1358  0413                     	;# 
  1359  0414                     	;# 
  1360  0415                     	;# 
  1361  0416                     	;# 
  1362  0417                     	;# 
  1363  0418                     	;# 
  1364  0418                     	;# 
  1365  0419                     	;# 
  1366  041A                     	;# 
  1367  041B                     	;# 
  1368  041C                     	;# 
  1369  041D                     	;# 
  1370  041E                     	;# 
  1371  048D                     	;# 
  1372  0491                     	;# 
  1373  0491                     	;# 
  1374  0492                     	;# 
  1375  0492                     	;# 
  1376  0493                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0494                     	;# 
  1380  0494                     	;# 
  1381  0495                     	;# 
  1382  0495                     	;# 
  1383  0496                     	;# 
  1384  0496                     	;# 
  1385  0497                     	;# 
  1386  0497                     	;# 
  1387  0595                     	;# 
  1388  0596                     	;# 
  1389  0597                     	;# 
  1390  059C                     	;# 
  1391  059D                     	;# 
  1392  059E                     	;# 
  1393  0611                     	;# 
  1394  0611                     	;# 
  1395  0612                     	;# 
  1396  0613                     	;# 
  1397  0614                     	;# 
  1398  0614                     	;# 
  1399  0615                     	;# 
  1400  0616                     	;# 
  1401  0617                     	;# 
  1402  0617                     	;# 
  1403  0618                     	;# 
  1404  0619                     	;# 
  1405  061A                     	;# 
  1406  061A                     	;# 
  1407  061B                     	;# 
  1408  061C                     	;# 
  1409  061D                     	;# 
  1410  061D                     	;# 
  1411  061E                     	;# 
  1412  061F                     	;# 
  1413  0FE4                     	;# 
  1414  0FE5                     	;# 
  1415  0FE6                     	;# 
  1416  0FE7                     	;# 
  1417  0FE8                     	;# 
  1418  0FE9                     	;# 
  1419  0FEA                     	;# 
  1420  0FEB                     	;# 
  1421  0FED                     	;# 
  1422  0FEE                     	;# 
  1423  0FEF                     	;# 
  1424  0000                     	;# 
  1425  0001                     	;# 
  1426  0002                     	;# 
  1427  0003                     	;# 
  1428  0004                     	;# 
  1429  0005                     	;# 
  1430  0006                     	;# 
  1431  0007                     	;# 
  1432  0008                     	;# 
  1433  0009                     	;# 
  1434  000A                     	;# 
  1435  000B                     	;# 
  1436  000C                     	;# 
  1437  000D                     	;# 
  1438  000E                     	;# 
  1439  000F                     	;# 
  1440  0010                     	;# 
  1441  0011                     	;# 
  1442  0012                     	;# 
  1443  0013                     	;# 
  1444  0014                     	;# 
  1445  0015                     	;# 
  1446  0016                     	;# 
  1447  0016                     	;# 
  1448  0017                     	;# 
  1449  0018                     	;# 
  1450  0019                     	;# 
  1451  001A                     	;# 
  1452  001B                     	;# 
  1453  001C                     	;# 
  1454  008C                     	;# 
  1455  008D                     	;# 
  1456  008E                     	;# 
  1457  008F                     	;# 
  1458  0090                     	;# 
  1459  0091                     	;# 
  1460  0092                     	;# 
  1461  0093                     	;# 
  1462  0094                     	;# 
  1463  0095                     	;# 
  1464  0096                     	;# 
  1465  0097                     	;# 
  1466  0099                     	;# 
  1467  009A                     	;# 
  1468  009B                     	;# 
  1469  009B                     	;# 
  1470  009C                     	;# 
  1471  009D                     	;# 
  1472  009E                     	;# 
  1473  010C                     	;# 
  1474  010D                     	;# 
  1475  010E                     	;# 
  1476  010F                     	;# 
  1477  0110                     	;# 
  1478  0116                     	;# 
  1479  0117                     	;# 
  1480  011D                     	;# 
  1481  018C                     	;# 
  1482  018D                     	;# 
  1483  018F                     	;# 
  1484  0190                     	;# 
  1485  0191                     	;# 
  1486  0191                     	;# 
  1487  0192                     	;# 
  1488  0193                     	;# 
  1489  0193                     	;# 
  1490  0194                     	;# 
  1491  0195                     	;# 
  1492  0196                     	;# 
  1493  0197                     	;# 
  1494  0199                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  019A                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019C                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019D                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019E                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019F                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  020D                     	;# 
  1518  020F                     	;# 
  1519  0210                     	;# 
  1520  0211                     	;# 
  1521  0211                     	;# 
  1522  0212                     	;# 
  1523  0212                     	;# 
  1524  0213                     	;# 
  1525  0213                     	;# 
  1526  0214                     	;# 
  1527  0214                     	;# 
  1528  0215                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0216                     	;# 
  1532  0216                     	;# 
  1533  0217                     	;# 
  1534  0217                     	;# 
  1535  0219                     	;# 
  1536  021A                     	;# 
  1537  021B                     	;# 
  1538  021C                     	;# 
  1539  021D                     	;# 
  1540  021E                     	;# 
  1541  021F                     	;# 
  1542  028C                     	;# 
  1543  028D                     	;# 
  1544  0291                     	;# 
  1545  0291                     	;# 
  1546  0292                     	;# 
  1547  0293                     	;# 
  1548  0298                     	;# 
  1549  0298                     	;# 
  1550  0299                     	;# 
  1551  029A                     	;# 
  1552  029D                     	;# 
  1553  029E                     	;# 
  1554  029F                     	;# 
  1555  030C                     	;# 
  1556  030D                     	;# 
  1557  0311                     	;# 
  1558  0311                     	;# 
  1559  0312                     	;# 
  1560  0313                     	;# 
  1561  0318                     	;# 
  1562  0318                     	;# 
  1563  0319                     	;# 
  1564  031A                     	;# 
  1565  031C                     	;# 
  1566  031C                     	;# 
  1567  031D                     	;# 
  1568  031E                     	;# 
  1569  038C                     	;# 
  1570  038D                     	;# 
  1571  0394                     	;# 
  1572  0395                     	;# 
  1573  0396                     	;# 
  1574  040C                     	;# 
  1575  040D                     	;# 
  1576  0411                     	;# 
  1577  0411                     	;# 
  1578  0412                     	;# 
  1579  0413                     	;# 
  1580  0414                     	;# 
  1581  0415                     	;# 
  1582  0416                     	;# 
  1583  0417                     	;# 
  1584  0418                     	;# 
  1585  0418                     	;# 
  1586  0419                     	;# 
  1587  041A                     	;# 
  1588  041B                     	;# 
  1589  041C                     	;# 
  1590  041D                     	;# 
  1591  041E                     	;# 
  1592  048D                     	;# 
  1593  0491                     	;# 
  1594  0491                     	;# 
  1595  0492                     	;# 
  1596  0492                     	;# 
  1597  0493                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0494                     	;# 
  1601  0494                     	;# 
  1602  0495                     	;# 
  1603  0495                     	;# 
  1604  0496                     	;# 
  1605  0496                     	;# 
  1606  0497                     	;# 
  1607  0497                     	;# 
  1608  0595                     	;# 
  1609  0596                     	;# 
  1610  0597                     	;# 
  1611  059C                     	;# 
  1612  059D                     	;# 
  1613  059E                     	;# 
  1614  0611                     	;# 
  1615  0611                     	;# 
  1616  0612                     	;# 
  1617  0613                     	;# 
  1618  0614                     	;# 
  1619  0614                     	;# 
  1620  0615                     	;# 
  1621  0616                     	;# 
  1622  0617                     	;# 
  1623  0617                     	;# 
  1624  0618                     	;# 
  1625  0619                     	;# 
  1626  061A                     	;# 
  1627  061A                     	;# 
  1628  061B                     	;# 
  1629  061C                     	;# 
  1630  061D                     	;# 
  1631  061D                     	;# 
  1632  061E                     	;# 
  1633  061F                     	;# 
  1634  0FE4                     	;# 
  1635  0FE5                     	;# 
  1636  0FE6                     	;# 
  1637  0FE7                     	;# 
  1638  0FE8                     	;# 
  1639  0FE9                     	;# 
  1640  0FEA                     	;# 
  1641  0FEB                     	;# 
  1642  0FED                     	;# 
  1643  0FEE                     	;# 
  1644  0FEF                     	;# 
  1645  0000                     	;# 
  1646  0001                     	;# 
  1647  0002                     	;# 
  1648  0003                     	;# 
  1649  0004                     	;# 
  1650  0005                     	;# 
  1651  0006                     	;# 
  1652  0007                     	;# 
  1653  0008                     	;# 
  1654  0009                     	;# 
  1655  000A                     	;# 
  1656  000B                     	;# 
  1657  000C                     	;# 
  1658  000D                     	;# 
  1659  000E                     	;# 
  1660  000F                     	;# 
  1661  0010                     	;# 
  1662  0011                     	;# 
  1663  0012                     	;# 
  1664  0013                     	;# 
  1665  0014                     	;# 
  1666  0015                     	;# 
  1667  0016                     	;# 
  1668  0016                     	;# 
  1669  0017                     	;# 
  1670  0018                     	;# 
  1671  0019                     	;# 
  1672  001A                     	;# 
  1673  001B                     	;# 
  1674  001C                     	;# 
  1675  008C                     	;# 
  1676  008D                     	;# 
  1677  008E                     	;# 
  1678  008F                     	;# 
  1679  0090                     	;# 
  1680  0091                     	;# 
  1681  0092                     	;# 
  1682  0093                     	;# 
  1683  0094                     	;# 
  1684  0095                     	;# 
  1685  0096                     	;# 
  1686  0097                     	;# 
  1687  0099                     	;# 
  1688  009A                     	;# 
  1689  009B                     	;# 
  1690  009B                     	;# 
  1691  009C                     	;# 
  1692  009D                     	;# 
  1693  009E                     	;# 
  1694  010C                     	;# 
  1695  010D                     	;# 
  1696  010E                     	;# 
  1697  010F                     	;# 
  1698  0110                     	;# 
  1699  0116                     	;# 
  1700  0117                     	;# 
  1701  011D                     	;# 
  1702  018C                     	;# 
  1703  018D                     	;# 
  1704  018F                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0193                     	;# 
  1710  0193                     	;# 
  1711  0194                     	;# 
  1712  0195                     	;# 
  1713  0196                     	;# 
  1714  0197                     	;# 
  1715  0199                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  019A                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019C                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019D                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019E                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019F                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  020D                     	;# 
  1739  020F                     	;# 
  1740  0210                     	;# 
  1741  0211                     	;# 
  1742  0211                     	;# 
  1743  0212                     	;# 
  1744  0212                     	;# 
  1745  0213                     	;# 
  1746  0213                     	;# 
  1747  0214                     	;# 
  1748  0214                     	;# 
  1749  0215                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0216                     	;# 
  1753  0216                     	;# 
  1754  0217                     	;# 
  1755  0217                     	;# 
  1756  0219                     	;# 
  1757  021A                     	;# 
  1758  021B                     	;# 
  1759  021C                     	;# 
  1760  021D                     	;# 
  1761  021E                     	;# 
  1762  021F                     	;# 
  1763  028C                     	;# 
  1764  028D                     	;# 
  1765  0291                     	;# 
  1766  0291                     	;# 
  1767  0292                     	;# 
  1768  0293                     	;# 
  1769  0298                     	;# 
  1770  0298                     	;# 
  1771  0299                     	;# 
  1772  029A                     	;# 
  1773  029D                     	;# 
  1774  029E                     	;# 
  1775  029F                     	;# 
  1776  030C                     	;# 
  1777  030D                     	;# 
  1778  0311                     	;# 
  1779  0311                     	;# 
  1780  0312                     	;# 
  1781  0313                     	;# 
  1782  0318                     	;# 
  1783  0318                     	;# 
  1784  0319                     	;# 
  1785  031A                     	;# 
  1786  031C                     	;# 
  1787  031C                     	;# 
  1788  031D                     	;# 
  1789  031E                     	;# 
  1790  038C                     	;# 
  1791  038D                     	;# 
  1792  0394                     	;# 
  1793  0395                     	;# 
  1794  0396                     	;# 
  1795  040C                     	;# 
  1796  040D                     	;# 
  1797  0411                     	;# 
  1798  0411                     	;# 
  1799  0412                     	;# 
  1800  0413                     	;# 
  1801  0414                     	;# 
  1802  0415                     	;# 
  1803  0416                     	;# 
  1804  0417                     	;# 
  1805  0418                     	;# 
  1806  0418                     	;# 
  1807  0419                     	;# 
  1808  041A                     	;# 
  1809  041B                     	;# 
  1810  041C                     	;# 
  1811  041D                     	;# 
  1812  041E                     	;# 
  1813  048D                     	;# 
  1814  0491                     	;# 
  1815  0491                     	;# 
  1816  0492                     	;# 
  1817  0492                     	;# 
  1818  0493                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0494                     	;# 
  1822  0494                     	;# 
  1823  0495                     	;# 
  1824  0495                     	;# 
  1825  0496                     	;# 
  1826  0496                     	;# 
  1827  0497                     	;# 
  1828  0497                     	;# 
  1829  0595                     	;# 
  1830  0596                     	;# 
  1831  0597                     	;# 
  1832  059C                     	;# 
  1833  059D                     	;# 
  1834  059E                     	;# 
  1835  0611                     	;# 
  1836  0611                     	;# 
  1837  0612                     	;# 
  1838  0613                     	;# 
  1839  0614                     	;# 
  1840  0614                     	;# 
  1841  0615                     	;# 
  1842  0616                     	;# 
  1843  0617                     	;# 
  1844  0617                     	;# 
  1845  0618                     	;# 
  1846  0619                     	;# 
  1847  061A                     	;# 
  1848  061A                     	;# 
  1849  061B                     	;# 
  1850  061C                     	;# 
  1851  061D                     	;# 
  1852  061D                     	;# 
  1853  061E                     	;# 
  1854  061F                     	;# 
  1855  0FE4                     	;# 
  1856  0FE5                     	;# 
  1857  0FE6                     	;# 
  1858  0FE7                     	;# 
  1859  0FE8                     	;# 
  1860  0FE9                     	;# 
  1861  0FEA                     	;# 
  1862  0FEB                     	;# 
  1863  0FED                     	;# 
  1864  0FEE                     	;# 
  1865  0FEF                     	;# 
  1866  0000                     	;# 
  1867  0001                     	;# 
  1868  0002                     	;# 
  1869  0003                     	;# 
  1870  0004                     	;# 
  1871  0005                     	;# 
  1872  0006                     	;# 
  1873  0007                     	;# 
  1874  0008                     	;# 
  1875  0009                     	;# 
  1876  000A                     	;# 
  1877  000B                     	;# 
  1878  000C                     	;# 
  1879  000D                     	;# 
  1880  000E                     	;# 
  1881  000F                     	;# 
  1882  0010                     	;# 
  1883  0011                     	;# 
  1884  0012                     	;# 
  1885  0013                     	;# 
  1886  0014                     	;# 
  1887  0015                     	;# 
  1888  0016                     	;# 
  1889  0016                     	;# 
  1890  0017                     	;# 
  1891  0018                     	;# 
  1892  0019                     	;# 
  1893  001A                     	;# 
  1894  001B                     	;# 
  1895  001C                     	;# 
  1896  008C                     	;# 
  1897  008D                     	;# 
  1898  008E                     	;# 
  1899  008F                     	;# 
  1900  0090                     	;# 
  1901  0091                     	;# 
  1902  0092                     	;# 
  1903  0093                     	;# 
  1904  0094                     	;# 
  1905  0095                     	;# 
  1906  0096                     	;# 
  1907  0097                     	;# 
  1908  0099                     	;# 
  1909  009A                     	;# 
  1910  009B                     	;# 
  1911  009B                     	;# 
  1912  009C                     	;# 
  1913  009D                     	;# 
  1914  009E                     	;# 
  1915  010C                     	;# 
  1916  010D                     	;# 
  1917  010E                     	;# 
  1918  010F                     	;# 
  1919  0110                     	;# 
  1920  0116                     	;# 
  1921  0117                     	;# 
  1922  011D                     	;# 
  1923  018C                     	;# 
  1924  018D                     	;# 
  1925  018F                     	;# 
  1926  0190                     	;# 
  1927  0191                     	;# 
  1928  0191                     	;# 
  1929  0192                     	;# 
  1930  0193                     	;# 
  1931  0193                     	;# 
  1932  0194                     	;# 
  1933  0195                     	;# 
  1934  0196                     	;# 
  1935  0197                     	;# 
  1936  0199                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  019A                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019C                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019D                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019E                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019F                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  020D                     	;# 
  1960  020F                     	;# 
  1961  0210                     	;# 
  1962  0211                     	;# 
  1963  0211                     	;# 
  1964  0212                     	;# 
  1965  0212                     	;# 
  1966  0213                     	;# 
  1967  0213                     	;# 
  1968  0214                     	;# 
  1969  0214                     	;# 
  1970  0215                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0216                     	;# 
  1974  0216                     	;# 
  1975  0217                     	;# 
  1976  0217                     	;# 
  1977  0219                     	;# 
  1978  021A                     	;# 
  1979  021B                     	;# 
  1980  021C                     	;# 
  1981  021D                     	;# 
  1982  021E                     	;# 
  1983  021F                     	;# 
  1984  028C                     	;# 
  1985  028D                     	;# 
  1986  0291                     	;# 
  1987  0291                     	;# 
  1988  0292                     	;# 
  1989  0293                     	;# 
  1990  0298                     	;# 
  1991  0298                     	;# 
  1992  0299                     	;# 
  1993  029A                     	;# 
  1994  029D                     	;# 
  1995  029E                     	;# 
  1996  029F                     	;# 
  1997  030C                     	;# 
  1998  030D                     	;# 
  1999  0311                     	;# 
  2000  0311                     	;# 
  2001  0312                     	;# 
  2002  0313                     	;# 
  2003  0318                     	;# 
  2004  0318                     	;# 
  2005  0319                     	;# 
  2006  031A                     	;# 
  2007  031C                     	;# 
  2008  031C                     	;# 
  2009  031D                     	;# 
  2010  031E                     	;# 
  2011  038C                     	;# 
  2012  038D                     	;# 
  2013  0394                     	;# 
  2014  0395                     	;# 
  2015  0396                     	;# 
  2016  040C                     	;# 
  2017  040D                     	;# 
  2018  0411                     	;# 
  2019  0411                     	;# 
  2020  0412                     	;# 
  2021  0413                     	;# 
  2022  0414                     	;# 
  2023  0415                     	;# 
  2024  0416                     	;# 
  2025  0417                     	;# 
  2026  0418                     	;# 
  2027  0418                     	;# 
  2028  0419                     	;# 
  2029  041A                     	;# 
  2030  041B                     	;# 
  2031  041C                     	;# 
  2032  041D                     	;# 
  2033  041E                     	;# 
  2034  048D                     	;# 
  2035  0491                     	;# 
  2036  0491                     	;# 
  2037  0492                     	;# 
  2038  0492                     	;# 
  2039  0493                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0494                     	;# 
  2043  0494                     	;# 
  2044  0495                     	;# 
  2045  0495                     	;# 
  2046  0496                     	;# 
  2047  0496                     	;# 
  2048  0497                     	;# 
  2049  0497                     	;# 
  2050  0595                     	;# 
  2051  0596                     	;# 
  2052  0597                     	;# 
  2053  059C                     	;# 
  2054  059D                     	;# 
  2055  059E                     	;# 
  2056  0611                     	;# 
  2057  0611                     	;# 
  2058  0612                     	;# 
  2059  0613                     	;# 
  2060  0614                     	;# 
  2061  0614                     	;# 
  2062  0615                     	;# 
  2063  0616                     	;# 
  2064  0617                     	;# 
  2065  0617                     	;# 
  2066  0618                     	;# 
  2067  0619                     	;# 
  2068  061A                     	;# 
  2069  061A                     	;# 
  2070  061B                     	;# 
  2071  061C                     	;# 
  2072  061D                     	;# 
  2073  061D                     	;# 
  2074  061E                     	;# 
  2075  061F                     	;# 
  2076  0FE4                     	;# 
  2077  0FE5                     	;# 
  2078  0FE6                     	;# 
  2079  0FE7                     	;# 
  2080  0FE8                     	;# 
  2081  0FE9                     	;# 
  2082  0FEA                     	;# 
  2083  0FEB                     	;# 
  2084  0FED                     	;# 
  2085  0FEE                     	;# 
  2086  0FEF                     	;# 
  2087  0000                     	;# 
  2088  0001                     	;# 
  2089  0002                     	;# 
  2090  0003                     	;# 
  2091  0004                     	;# 
  2092  0005                     	;# 
  2093  0006                     	;# 
  2094  0007                     	;# 
  2095  0008                     	;# 
  2096  0009                     	;# 
  2097  000A                     	;# 
  2098  000B                     	;# 
  2099  000C                     	;# 
  2100  000D                     	;# 
  2101  000E                     	;# 
  2102  000F                     	;# 
  2103  0010                     	;# 
  2104  0011                     	;# 
  2105  0012                     	;# 
  2106  0013                     	;# 
  2107  0014                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  008C                     	;# 
  2118  008D                     	;# 
  2119  008E                     	;# 
  2120  008F                     	;# 
  2121  0090                     	;# 
  2122  0091                     	;# 
  2123  0092                     	;# 
  2124  0093                     	;# 
  2125  0094                     	;# 
  2126  0095                     	;# 
  2127  0096                     	;# 
  2128  0097                     	;# 
  2129  0099                     	;# 
  2130  009A                     	;# 
  2131  009B                     	;# 
  2132  009B                     	;# 
  2133  009C                     	;# 
  2134  009D                     	;# 
  2135  009E                     	;# 
  2136  010C                     	;# 
  2137  010D                     	;# 
  2138  010E                     	;# 
  2139  010F                     	;# 
  2140  0110                     	;# 
  2141  0116                     	;# 
  2142  0117                     	;# 
  2143  011D                     	;# 
  2144  018C                     	;# 
  2145  018D                     	;# 
  2146  018F                     	;# 
  2147  0190                     	;# 
  2148  0191                     	;# 
  2149  0191                     	;# 
  2150  0192                     	;# 
  2151  0193                     	;# 
  2152  0193                     	;# 
  2153  0194                     	;# 
  2154  0195                     	;# 
  2155  0196                     	;# 
  2156  0197                     	;# 
  2157  0199                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  019A                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019C                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019D                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019E                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019F                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  020D                     	;# 
  2181  020F                     	;# 
  2182  0210                     	;# 
  2183  0211                     	;# 
  2184  0211                     	;# 
  2185  0212                     	;# 
  2186  0212                     	;# 
  2187  0213                     	;# 
  2188  0213                     	;# 
  2189  0214                     	;# 
  2190  0214                     	;# 
  2191  0215                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0216                     	;# 
  2195  0216                     	;# 
  2196  0217                     	;# 
  2197  0217                     	;# 
  2198  0219                     	;# 
  2199  021A                     	;# 
  2200  021B                     	;# 
  2201  021C                     	;# 
  2202  021D                     	;# 
  2203  021E                     	;# 
  2204  021F                     	;# 
  2205  028C                     	;# 
  2206  028D                     	;# 
  2207  0291                     	;# 
  2208  0291                     	;# 
  2209  0292                     	;# 
  2210  0293                     	;# 
  2211  0298                     	;# 
  2212  0298                     	;# 
  2213  0299                     	;# 
  2214  029A                     	;# 
  2215  029D                     	;# 
  2216  029E                     	;# 
  2217  029F                     	;# 
  2218  030C                     	;# 
  2219  030D                     	;# 
  2220  0311                     	;# 
  2221  0311                     	;# 
  2222  0312                     	;# 
  2223  0313                     	;# 
  2224  0318                     	;# 
  2225  0318                     	;# 
  2226  0319                     	;# 
  2227  031A                     	;# 
  2228  031C                     	;# 
  2229  031C                     	;# 
  2230  031D                     	;# 
  2231  031E                     	;# 
  2232  038C                     	;# 
  2233  038D                     	;# 
  2234  0394                     	;# 
  2235  0395                     	;# 
  2236  0396                     	;# 
  2237  040C                     	;# 
  2238  040D                     	;# 
  2239  0411                     	;# 
  2240  0411                     	;# 
  2241  0412                     	;# 
  2242  0413                     	;# 
  2243  0414                     	;# 
  2244  0415                     	;# 
  2245  0416                     	;# 
  2246  0417                     	;# 
  2247  0418                     	;# 
  2248  0418                     	;# 
  2249  0419                     	;# 
  2250  041A                     	;# 
  2251  041B                     	;# 
  2252  041C                     	;# 
  2253  041D                     	;# 
  2254  041E                     	;# 
  2255  048D                     	;# 
  2256  0491                     	;# 
  2257  0491                     	;# 
  2258  0492                     	;# 
  2259  0492                     	;# 
  2260  0493                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0494                     	;# 
  2264  0494                     	;# 
  2265  0495                     	;# 
  2266  0495                     	;# 
  2267  0496                     	;# 
  2268  0496                     	;# 
  2269  0497                     	;# 
  2270  0497                     	;# 
  2271  0595                     	;# 
  2272  0596                     	;# 
  2273  0597                     	;# 
  2274  059C                     	;# 
  2275  059D                     	;# 
  2276  059E                     	;# 
  2277  0611                     	;# 
  2278  0611                     	;# 
  2279  0612                     	;# 
  2280  0613                     	;# 
  2281  0614                     	;# 
  2282  0614                     	;# 
  2283  0615                     	;# 
  2284  0616                     	;# 
  2285  0617                     	;# 
  2286  0617                     	;# 
  2287  0618                     	;# 
  2288  0619                     	;# 
  2289  061A                     	;# 
  2290  061A                     	;# 
  2291  061B                     	;# 
  2292  061C                     	;# 
  2293  061D                     	;# 
  2294  061D                     	;# 
  2295  061E                     	;# 
  2296  061F                     	;# 
  2297  0FE4                     	;# 
  2298  0FE5                     	;# 
  2299  0FE6                     	;# 
  2300  0FE7                     	;# 
  2301  0FE8                     	;# 
  2302  0FE9                     	;# 
  2303  0FEA                     	;# 
  2304  0FEB                     	;# 
  2305  0FED                     	;# 
  2306  0FEE                     	;# 
  2307  0FEF                     	;# 
  2308  0000                     	;# 
  2309  0001                     	;# 
  2310  0002                     	;# 
  2311  0003                     	;# 
  2312  0004                     	;# 
  2313  0005                     	;# 
  2314  0006                     	;# 
  2315  0007                     	;# 
  2316  0008                     	;# 
  2317  0009                     	;# 
  2318  000A                     	;# 
  2319  000B                     	;# 
  2320  000C                     	;# 
  2321  000D                     	;# 
  2322  000E                     	;# 
  2323  000F                     	;# 
  2324  0010                     	;# 
  2325  0011                     	;# 
  2326  0012                     	;# 
  2327  0013                     	;# 
  2328  0014                     	;# 
  2329  0015                     	;# 
  2330  0016                     	;# 
  2331  0016                     	;# 
  2332  0017                     	;# 
  2333  0018                     	;# 
  2334  0019                     	;# 
  2335  001A                     	;# 
  2336  001B                     	;# 
  2337  001C                     	;# 
  2338  008C                     	;# 
  2339  008D                     	;# 
  2340  008E                     	;# 
  2341  008F                     	;# 
  2342  0090                     	;# 
  2343  0091                     	;# 
  2344  0092                     	;# 
  2345  0093                     	;# 
  2346  0094                     	;# 
  2347  0095                     	;# 
  2348  0096                     	;# 
  2349  0097                     	;# 
  2350  0099                     	;# 
  2351  009A                     	;# 
  2352  009B                     	;# 
  2353  009B                     	;# 
  2354  009C                     	;# 
  2355  009D                     	;# 
  2356  009E                     	;# 
  2357  010C                     	;# 
  2358  010D                     	;# 
  2359  010E                     	;# 
  2360  010F                     	;# 
  2361  0110                     	;# 
  2362  0116                     	;# 
  2363  0117                     	;# 
  2364  011D                     	;# 
  2365  018C                     	;# 
  2366  018D                     	;# 
  2367  018F                     	;# 
  2368  0190                     	;# 
  2369  0191                     	;# 
  2370  0191                     	;# 
  2371  0192                     	;# 
  2372  0193                     	;# 
  2373  0193                     	;# 
  2374  0194                     	;# 
  2375  0195                     	;# 
  2376  0196                     	;# 
  2377  0197                     	;# 
  2378  0199                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  019A                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019C                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019D                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019E                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019F                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  020D                     	;# 
  2402  020F                     	;# 
  2403  0210                     	;# 
  2404  0211                     	;# 
  2405  0211                     	;# 
  2406  0212                     	;# 
  2407  0212                     	;# 
  2408  0213                     	;# 
  2409  0213                     	;# 
  2410  0214                     	;# 
  2411  0214                     	;# 
  2412  0215                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0216                     	;# 
  2416  0216                     	;# 
  2417  0217                     	;# 
  2418  0217                     	;# 
  2419  0219                     	;# 
  2420  021A                     	;# 
  2421  021B                     	;# 
  2422  021C                     	;# 
  2423  021D                     	;# 
  2424  021E                     	;# 
  2425  021F                     	;# 
  2426  028C                     	;# 
  2427  028D                     	;# 
  2428  0291                     	;# 
  2429  0291                     	;# 
  2430  0292                     	;# 
  2431  0293                     	;# 
  2432  0298                     	;# 
  2433  0298                     	;# 
  2434  0299                     	;# 
  2435  029A                     	;# 
  2436  029D                     	;# 
  2437  029E                     	;# 
  2438  029F                     	;# 
  2439  030C                     	;# 
  2440  030D                     	;# 
  2441  0311                     	;# 
  2442  0311                     	;# 
  2443  0312                     	;# 
  2444  0313                     	;# 
  2445  0318                     	;# 
  2446  0318                     	;# 
  2447  0319                     	;# 
  2448  031A                     	;# 
  2449  031C                     	;# 
  2450  031C                     	;# 
  2451  031D                     	;# 
  2452  031E                     	;# 
  2453  038C                     	;# 
  2454  038D                     	;# 
  2455  0394                     	;# 
  2456  0395                     	;# 
  2457  0396                     	;# 
  2458  040C                     	;# 
  2459  040D                     	;# 
  2460  0411                     	;# 
  2461  0411                     	;# 
  2462  0412                     	;# 
  2463  0413                     	;# 
  2464  0414                     	;# 
  2465  0415                     	;# 
  2466  0416                     	;# 
  2467  0417                     	;# 
  2468  0418                     	;# 
  2469  0418                     	;# 
  2470  0419                     	;# 
  2471  041A                     	;# 
  2472  041B                     	;# 
  2473  041C                     	;# 
  2474  041D                     	;# 
  2475  041E                     	;# 
  2476  048D                     	;# 
  2477  0491                     	;# 
  2478  0491                     	;# 
  2479  0492                     	;# 
  2480  0492                     	;# 
  2481  0493                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0494                     	;# 
  2485  0494                     	;# 
  2486  0495                     	;# 
  2487  0495                     	;# 
  2488  0496                     	;# 
  2489  0496                     	;# 
  2490  0497                     	;# 
  2491  0497                     	;# 
  2492  0595                     	;# 
  2493  0596                     	;# 
  2494  0597                     	;# 
  2495  059C                     	;# 
  2496  059D                     	;# 
  2497  059E                     	;# 
  2498  0611                     	;# 
  2499  0611                     	;# 
  2500  0612                     	;# 
  2501  0613                     	;# 
  2502  0614                     	;# 
  2503  0614                     	;# 
  2504  0615                     	;# 
  2505  0616                     	;# 
  2506  0617                     	;# 
  2507  0617                     	;# 
  2508  0618                     	;# 
  2509  0619                     	;# 
  2510  061A                     	;# 
  2511  061A                     	;# 
  2512  061B                     	;# 
  2513  061C                     	;# 
  2514  061D                     	;# 
  2515  061D                     	;# 
  2516  061E                     	;# 
  2517  061F                     	;# 
  2518  0FE4                     	;# 
  2519  0FE5                     	;# 
  2520  0FE6                     	;# 
  2521  0FE7                     	;# 
  2522  0FE8                     	;# 
  2523  0FE9                     	;# 
  2524  0FEA                     	;# 
  2525  0FEB                     	;# 
  2526  0FED                     	;# 
  2527  0FEE                     	;# 
  2528  0FEF                     	;# 
  2529  0000                     	;# 
  2530  0001                     	;# 
  2531  0002                     	;# 
  2532  0003                     	;# 
  2533  0004                     	;# 
  2534  0005                     	;# 
  2535  0006                     	;# 
  2536  0007                     	;# 
  2537  0008                     	;# 
  2538  0009                     	;# 
  2539  000A                     	;# 
  2540  000B                     	;# 
  2541  000C                     	;# 
  2542  000D                     	;# 
  2543  000E                     	;# 
  2544  000F                     	;# 
  2545  0010                     	;# 
  2546  0011                     	;# 
  2547  0012                     	;# 
  2548  0013                     	;# 
  2549  0014                     	;# 
  2550  0015                     	;# 
  2551  0016                     	;# 
  2552  0016                     	;# 
  2553  0017                     	;# 
  2554  0018                     	;# 
  2555  0019                     	;# 
  2556  001A                     	;# 
  2557  001B                     	;# 
  2558  001C                     	;# 
  2559  008C                     	;# 
  2560  008D                     	;# 
  2561  008E                     	;# 
  2562  008F                     	;# 
  2563  0090                     	;# 
  2564  0091                     	;# 
  2565  0092                     	;# 
  2566  0093                     	;# 
  2567  0094                     	;# 
  2568  0095                     	;# 
  2569  0096                     	;# 
  2570  0097                     	;# 
  2571  0099                     	;# 
  2572  009A                     	;# 
  2573  009B                     	;# 
  2574  009B                     	;# 
  2575  009C                     	;# 
  2576  009D                     	;# 
  2577  009E                     	;# 
  2578  010C                     	;# 
  2579  010D                     	;# 
  2580  010E                     	;# 
  2581  010F                     	;# 
  2582  0110                     	;# 
  2583  0116                     	;# 
  2584  0117                     	;# 
  2585  011D                     	;# 
  2586  018C                     	;# 
  2587  018D                     	;# 
  2588  018F                     	;# 
  2589  0190                     	;# 
  2590  0191                     	;# 
  2591  0191                     	;# 
  2592  0192                     	;# 
  2593  0193                     	;# 
  2594  0193                     	;# 
  2595  0194                     	;# 
  2596  0195                     	;# 
  2597  0196                     	;# 
  2598  0197                     	;# 
  2599  0199                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  019A                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019C                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019D                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019E                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019F                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  020D                     	;# 
  2623  020F                     	;# 
  2624  0210                     	;# 
  2625  0211                     	;# 
  2626  0211                     	;# 
  2627  0212                     	;# 
  2628  0212                     	;# 
  2629  0213                     	;# 
  2630  0213                     	;# 
  2631  0214                     	;# 
  2632  0214                     	;# 
  2633  0215                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0216                     	;# 
  2637  0216                     	;# 
  2638  0217                     	;# 
  2639  0217                     	;# 
  2640  0219                     	;# 
  2641  021A                     	;# 
  2642  021B                     	;# 
  2643  021C                     	;# 
  2644  021D                     	;# 
  2645  021E                     	;# 
  2646  021F                     	;# 
  2647  028C                     	;# 
  2648  028D                     	;# 
  2649  0291                     	;# 
  2650  0291                     	;# 
  2651  0292                     	;# 
  2652  0293                     	;# 
  2653  0298                     	;# 
  2654  0298                     	;# 
  2655  0299                     	;# 
  2656  029A                     	;# 
  2657  029D                     	;# 
  2658  029E                     	;# 
  2659  029F                     	;# 
  2660  030C                     	;# 
  2661  030D                     	;# 
  2662  0311                     	;# 
  2663  0311                     	;# 
  2664  0312                     	;# 
  2665  0313                     	;# 
  2666  0318                     	;# 
  2667  0318                     	;# 
  2668  0319                     	;# 
  2669  031A                     	;# 
  2670  031C                     	;# 
  2671  031C                     	;# 
  2672  031D                     	;# 
  2673  031E                     	;# 
  2674  038C                     	;# 
  2675  038D                     	;# 
  2676  0394                     	;# 
  2677  0395                     	;# 
  2678  0396                     	;# 
  2679  040C                     	;# 
  2680  040D                     	;# 
  2681  0411                     	;# 
  2682  0411                     	;# 
  2683  0412                     	;# 
  2684  0413                     	;# 
  2685  0414                     	;# 
  2686  0415                     	;# 
  2687  0416                     	;# 
  2688  0417                     	;# 
  2689  0418                     	;# 
  2690  0418                     	;# 
  2691  0419                     	;# 
  2692  041A                     	;# 
  2693  041B                     	;# 
  2694  041C                     	;# 
  2695  041D                     	;# 
  2696  041E                     	;# 
  2697  048D                     	;# 
  2698  0491                     	;# 
  2699  0491                     	;# 
  2700  0492                     	;# 
  2701  0492                     	;# 
  2702  0493                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0494                     	;# 
  2706  0494                     	;# 
  2707  0495                     	;# 
  2708  0495                     	;# 
  2709  0496                     	;# 
  2710  0496                     	;# 
  2711  0497                     	;# 
  2712  0497                     	;# 
  2713  0595                     	;# 
  2714  0596                     	;# 
  2715  0597                     	;# 
  2716  059C                     	;# 
  2717  059D                     	;# 
  2718  059E                     	;# 
  2719  0611                     	;# 
  2720  0611                     	;# 
  2721  0612                     	;# 
  2722  0613                     	;# 
  2723  0614                     	;# 
  2724  0614                     	;# 
  2725  0615                     	;# 
  2726  0616                     	;# 
  2727  0617                     	;# 
  2728  0617                     	;# 
  2729  0618                     	;# 
  2730  0619                     	;# 
  2731  061A                     	;# 
  2732  061A                     	;# 
  2733  061B                     	;# 
  2734  061C                     	;# 
  2735  061D                     	;# 
  2736  061D                     	;# 
  2737  061E                     	;# 
  2738  061F                     	;# 
  2739  0FE4                     	;# 
  2740  0FE5                     	;# 
  2741  0FE6                     	;# 
  2742  0FE7                     	;# 
  2743  0FE8                     	;# 
  2744  0FE9                     	;# 
  2745  0FEA                     	;# 
  2746  0FEB                     	;# 
  2747  0FED                     	;# 
  2748  0FEE                     	;# 
  2749  0FEF                     	;_delayArray
  2750                           
  2751                           	psect	idataCOMMON
  2752  0003                     __pidataCOMMON:	
  2753                           
  2754                           ;initializer for _switchBypass_state
  2755  0003  34FF               	retlw	255
  2756                           
  2757                           	psect	idataBANK0
  2758  07FE                     __pidataBANK0:	
  2759                           
  2760                           ;initializer for _feedback_state
  2761  07FE  34FF               	retlw	255
  2762                           
  2763                           ;initializer for _longTap_state
  2764  07FF  34FF               	retlw	255
  2765                           
  2766                           	psect	idataBANK1
  2767  1E51                     __pidataBANK1:	
  2768                           
  2769                           ;initializer for _baseline_delay_time
  2770  1E51  34D0               	retlw	208
  2771  1E52  3407               	retlw	7
  2772  1E53  3400               	retlw	0
  2773  1E54  3400               	retlw	0
  2774                           
  2775                           ;initializer for _delay_time
  2776  1E55  34D0               	retlw	208
  2777  1E56  3407               	retlw	7
  2778  1E57  3400               	retlw	0
  2779  1E58  3400               	retlw	0
  2780                           
  2781                           ;initializer for _bottom_push_state
  2782  1E59  3406               	retlw	6
  2783  1E5A  3400               	retlw	0
  2784                           
  2785                           ;initializer for _knob1_prev
  2786  1E5B  34D0               	retlw	208
  2787  1E5C  3407               	retlw	7
  2788                           
  2789                           ;initializer for _knob2_prev
  2790  1E5D  34D0               	retlw	208
  2791  1E5E  3407               	retlw	7
  2792                           
  2793                           ;initializer for _knob3_prev
  2794  1E5F  34D0               	retlw	208
  2795  1E60  3407               	retlw	7
  2796                           
  2797                           ;initializer for _long_press_limit
  2798  1E61  34E8               	retlw	232
  2799  1E62  3403               	retlw	3
  2800                           
  2801                           ;initializer for _top_push_state
  2802  1E63  3406               	retlw	6
  2803  1E64  3400               	retlw	0
  2804                           
  2805                           ;initializer for _blink_rate
  2806  1E65  3414               	retlw	20
  2807                           
  2808                           ;initializer for _num_taps
  2809  1E66  3404               	retlw	4
  2810                           
  2811                           	psect	idataBANK2
  2812  1E18                     __pidataBANK2:	
  2813                           
  2814                           ;initializer for _blink_delay
  2815  1E18  3464               	retlw	100
  2816  1E19  3400               	retlw	0
  2817                           
  2818                           ;initializer for _delay_time_changed
  2819  1E1A  3401               	retlw	1
  2820  1E1B  3400               	retlw	0
  2821                           
  2822                           ;initializer for _knob4_prev
  2823  1E1C  34D0               	retlw	208
  2824  1E1D  3407               	retlw	7
  2825                           
  2826                           ;initializer for _knob5_prev
  2827  1E1E  34D0               	retlw	208
  2828  1E1F  3407               	retlw	7
  2829                           
  2830                           ;initializer for _mod_delay_time
  2831  1E20  34D0               	retlw	208
  2832  1E21  3407               	retlw	7
  2833                           
  2834                           ;initializer for _switchBypass_up
  2835  1E22  3401               	retlw	1
  2836  1E23  3400               	retlw	0
  2837                           
  2838                           ;initializer for _tap_iteration
  2839  1E24  3401               	retlw	1
  2840  1E25  3400               	retlw	0
  2841                           
  2842                           ;initializer for _blink_state
  2843  1E26  3401               	retlw	1
  2844                           
  2845                           ;initializer for _currentBypassState
  2846  1E27  34FF               	retlw	255
  2847                           
  2848                           ;initializer for _switchTap_state
  2849  1E28  34FF               	retlw	255
  2850                           
  2851                           	psect	idataBANK4
  2852  1113                     __pidataBANK4:	
  2853                           
  2854                           ;initializer for _mod2
  2855  1113  3400               	retlw	0
  2856  1114  3400               	retlw	0
  2857  1115  340D               	retlw	13
  2858  1116  3400               	retlw	0
  2859  1117  341B               	retlw	27
  2860  1118  3400               	retlw	0
  2861  1119  3428               	retlw	40
  2862  111A  3400               	retlw	0
  2863  111B  3435               	retlw	53
  2864  111C  3400               	retlw	0
  2865  111D  3443               	retlw	67
  2866  111E  3400               	retlw	0
  2867  111F  3450               	retlw	80
  2868  1120  3400               	retlw	0
  2869  1121  345D               	retlw	93
  2870  1122  3400               	retlw	0
  2871  1123  345D               	retlw	93
  2872  1124  3400               	retlw	0
  2873  1125  3450               	retlw	80
  2874  1126  3400               	retlw	0
  2875  1127  3443               	retlw	67
  2876  1128  3400               	retlw	0
  2877  1129  3435               	retlw	53
  2878  112A  3400               	retlw	0
  2879  112B  3428               	retlw	40
  2880  112C  3400               	retlw	0
  2881  112D  341B               	retlw	27
  2882  112E  3400               	retlw	0
  2883  112F  340D               	retlw	13
  2884  1130  3400               	retlw	0
  2885  1131  3400               	retlw	0
  2886  1132  3400               	retlw	0
  2887  1133  34F3               	retlw	243
  2888  1134  34FF               	retlw	255
  2889  1135  34E5               	retlw	229
  2890  1136  34FF               	retlw	255
  2891  1137  34D8               	retlw	216
  2892  1138  34FF               	retlw	255
  2893  1139  34CB               	retlw	203
  2894  113A  34FF               	retlw	255
  2895  113B  34BD               	retlw	189
  2896  113C  34FF               	retlw	255
  2897  113D  34B0               	retlw	176
  2898  113E  34FF               	retlw	255
  2899  113F  34A3               	retlw	163
  2900  1140  34FF               	retlw	255
  2901  1141  34A3               	retlw	163
  2902  1142  34FF               	retlw	255
  2903  1143  34B0               	retlw	176
  2904  1144  34FF               	retlw	255
  2905  1145  34BD               	retlw	189
  2906  1146  34FF               	retlw	255
  2907  1147  34CB               	retlw	203
  2908  1148  34FF               	retlw	255
  2909  1149  34D8               	retlw	216
  2910  114A  34FF               	retlw	255
  2911  114B  34E5               	retlw	229
  2912  114C  34FF               	retlw	255
  2913  114D  34F3               	retlw	243
  2914  114E  34FF               	retlw	255
  2915  114F  3400               	retlw	0
  2916  1150  3400               	retlw	0
  2917                           
  2918                           	psect	idataBANK5
  2919  10D5                     __pidataBANK5:	
  2920                           
  2921                           ;initializer for _mod3
  2922  10D5  3400               	retlw	0
  2923  10D6  3400               	retlw	0
  2924  10D7  3407               	retlw	7
  2925  10D8  3400               	retlw	0
  2926  10D9  340D               	retlw	13
  2927  10DA  3400               	retlw	0
  2928  10DB  3414               	retlw	20
  2929  10DC  3400               	retlw	0
  2930  10DD  341B               	retlw	27
  2931  10DE  3400               	retlw	0
  2932  10DF  3421               	retlw	33
  2933  10E0  3400               	retlw	0
  2934  10E1  3428               	retlw	40
  2935  10E2  3400               	retlw	0
  2936  10E3  342F               	retlw	47
  2937  10E4  3400               	retlw	0
  2938  10E5  3435               	retlw	53
  2939  10E6  3400               	retlw	0
  2940  10E7  343C               	retlw	60
  2941  10E8  3400               	retlw	0
  2942  10E9  3443               	retlw	67
  2943  10EA  3400               	retlw	0
  2944  10EB  3449               	retlw	73
  2945  10EC  3400               	retlw	0
  2946  10ED  3450               	retlw	80
  2947  10EE  3400               	retlw	0
  2948  10EF  3457               	retlw	87
  2949  10F0  3400               	retlw	0
  2950  10F1  345D               	retlw	93
  2951  10F2  3400               	retlw	0
  2952  10F3  349C               	retlw	156
  2953  10F4  34FF               	retlw	255
  2954  10F5  34A3               	retlw	163
  2955  10F6  34FF               	retlw	255
  2956  10F7  34A9               	retlw	169
  2957  10F8  34FF               	retlw	255
  2958  10F9  34B0               	retlw	176
  2959  10FA  34FF               	retlw	255
  2960  10FB  34B7               	retlw	183
  2961  10FC  34FF               	retlw	255
  2962  10FD  34BD               	retlw	189
  2963  10FE  34FF               	retlw	255
  2964  10FF  34C4               	retlw	196
  2965  1100  34FF               	retlw	255
  2966  1101  34CB               	retlw	203
  2967  1102  34FF               	retlw	255
  2968  1103  34D1               	retlw	209
  2969  1104  34FF               	retlw	255
  2970  1105  34D8               	retlw	216
  2971  1106  34FF               	retlw	255
  2972  1107  34DF               	retlw	223
  2973  1108  34FF               	retlw	255
  2974  1109  34E5               	retlw	229
  2975  110A  34FF               	retlw	255
  2976  110B  34EC               	retlw	236
  2977  110C  34FF               	retlw	255
  2978  110D  34F3               	retlw	243
  2979  110E  34FF               	retlw	255
  2980  110F  34F9               	retlw	249
  2981  1110  34FF               	retlw	255
  2982  1111  3400               	retlw	0
  2983  1112  3400               	retlw	0
  2984                           
  2985                           	psect	idataBANK6
  2986  1097                     __pidataBANK6:	
  2987                           
  2988                           ;initializer for _mod4
  2989  1097  3464               	retlw	100
  2990  1098  3400               	retlw	0
  2991  1099  3464               	retlw	100
  2992  109A  3400               	retlw	0
  2993  109B  3464               	retlw	100
  2994  109C  3400               	retlw	0
  2995  109D  3464               	retlw	100
  2996  109E  3400               	retlw	0
  2997  109F  3464               	retlw	100
  2998  10A0  3400               	retlw	0
  2999  10A1  3464               	retlw	100
  3000  10A2  3400               	retlw	0
  3001  10A3  3464               	retlw	100
  3002  10A4  3400               	retlw	0
  3003  10A5  3464               	retlw	100
  3004  10A6  3400               	retlw	0
  3005  10A7  3464               	retlw	100
  3006  10A8  3400               	retlw	0
  3007  10A9  3464               	retlw	100
  3008  10AA  3400               	retlw	0
  3009  10AB  3464               	retlw	100
  3010  10AC  3400               	retlw	0
  3011  10AD  3464               	retlw	100
  3012  10AE  3400               	retlw	0
  3013  10AF  3464               	retlw	100
  3014  10B0  3400               	retlw	0
  3015  10B1  3464               	retlw	100
  3016  10B2  3400               	retlw	0
  3017  10B3  3464               	retlw	100
  3018  10B4  3400               	retlw	0
  3019  10B5  349C               	retlw	156
  3020  10B6  34FF               	retlw	255
  3021  10B7  349C               	retlw	156
  3022  10B8  34FF               	retlw	255
  3023  10B9  349C               	retlw	156
  3024  10BA  34FF               	retlw	255
  3025  10BB  349C               	retlw	156
  3026  10BC  34FF               	retlw	255
  3027  10BD  349C               	retlw	156
  3028  10BE  34FF               	retlw	255
  3029  10BF  349C               	retlw	156
  3030  10C0  34FF               	retlw	255
  3031  10C1  349C               	retlw	156
  3032  10C2  34FF               	retlw	255
  3033  10C3  349C               	retlw	156
  3034  10C4  34FF               	retlw	255
  3035  10C5  349C               	retlw	156
  3036  10C6  34FF               	retlw	255
  3037  10C7  349C               	retlw	156
  3038  10C8  34FF               	retlw	255
  3039  10C9  349C               	retlw	156
  3040  10CA  34FF               	retlw	255
  3041  10CB  349C               	retlw	156
  3042  10CC  34FF               	retlw	255
  3043  10CD  349C               	retlw	156
  3044  10CE  34FF               	retlw	255
  3045  10CF  349C               	retlw	156
  3046  10D0  34FF               	retlw	255
  3047  10D1  349C               	retlw	156
  3048  10D2  34FF               	retlw	255
  3049  10D3  3464               	retlw	100
  3050  10D4  3400               	retlw	0
  3051                           
  3052                           	psect	idataBANK7
  3053  1386                     __pidataBANK7:	
  3054                           
  3055                           ;initializer for _B25k
  3056  1386  34FF               	retlw	255
  3057  1387  3400               	retlw	0
  3058  1388  34FF               	retlw	255
  3059  1389  3400               	retlw	0
  3060  138A  34FF               	retlw	255
  3061  138B  3400               	retlw	0
  3062  138C  34DF               	retlw	223
  3063  138D  3400               	retlw	0
  3064  138E  34AE               	retlw	174
  3065  138F  3400               	retlw	0
  3066  1390  348E               	retlw	142
  3067  1391  3400               	retlw	0
  3068  1392  3478               	retlw	120
  3069  1393  3400               	retlw	0
  3070  1394  3467               	retlw	103
  3071  1395  3400               	retlw	0
  3072  1396  345B               	retlw	91
  3073  1397  3400               	retlw	0
  3074  1398  3450               	retlw	80
  3075  1399  3400               	retlw	0
  3076  139A  3448               	retlw	72
  3077  139B  3400               	retlw	0
  3078  139C  3442               	retlw	66
  3079  139D  3400               	retlw	0
  3080  139E  343C               	retlw	60
  3081  139F  3400               	retlw	0
  3082  13A0  3437               	retlw	55
  3083  13A1  3400               	retlw	0
  3084  13A2  3433               	retlw	51
  3085  13A3  3400               	retlw	0
  3086  13A4  3430               	retlw	48
  3087  13A5  3400               	retlw	0
  3088  13A6  342D               	retlw	45
  3089  13A7  3400               	retlw	0
  3090  13A8  342A               	retlw	42
  3091  13A9  3400               	retlw	0
  3092  13AA  3427               	retlw	39
  3093  13AB  3400               	retlw	0
  3094  13AC  3425               	retlw	37
  3095  13AD  3400               	retlw	0
  3096  13AE  3423               	retlw	35
  3097  13AF  3400               	retlw	0
  3098  13B0  3421               	retlw	33
  3099  13B1  3400               	retlw	0
  3100  13B2  3420               	retlw	32
  3101  13B3  3400               	retlw	0
  3102  13B4  341E               	retlw	30
  3103  13B5  3400               	retlw	0
  3104  13B6  341D               	retlw	29
  3105  13B7  3400               	retlw	0
  3106  13B8  341C               	retlw	28
  3107  13B9  3400               	retlw	0
  3108  13BA  341B               	retlw	27
  3109  13BB  3400               	retlw	0
  3110  13BC  341A               	retlw	26
  3111  13BD  3400               	retlw	0
  3112  13BE  3419               	retlw	25
  3113  13BF  3400               	retlw	0
  3114  13C0  3418               	retlw	24
  3115  13C1  3400               	retlw	0
  3116  13C2  3417               	retlw	23
  3117  13C3  3400               	retlw	0
  3118  13C4  3416               	retlw	22
  3119  13C5  3400               	retlw	0
  3120  13C6  3415               	retlw	21
  3121  13C7  3400               	retlw	0
  3122  13C8  3415               	retlw	21
  3123  13C9  3400               	retlw	0
  3124  13CA  3414               	retlw	20
  3125  13CB  3400               	retlw	0
  3126  13CC  3413               	retlw	19
  3127  13CD  3400               	retlw	0
  3128  13CE  340F               	retlw	15
  3129  13CF  3400               	retlw	0
  3130  13D0  340B               	retlw	11
  3131  13D1  3400               	retlw	0
  3132  13D2  3407               	retlw	7
  3133  13D3  3400               	retlw	0
  3134  13D4  3407               	retlw	7
  3135  13D5  3400               	retlw	0
  3136                           
  3137                           	psect	idataBANK8
  3138  1336                     __pidataBANK8:	
  3139                           
  3140                           ;initializer for _iB25k
  3141  1336  3407               	retlw	7
  3142  1337  3400               	retlw	0
  3143  1338  3407               	retlw	7
  3144  1339  3400               	retlw	0
  3145  133A  340B               	retlw	11
  3146  133B  3400               	retlw	0
  3147  133C  340F               	retlw	15
  3148  133D  3400               	retlw	0
  3149  133E  3413               	retlw	19
  3150  133F  3400               	retlw	0
  3151  1340  3414               	retlw	20
  3152  1341  3400               	retlw	0
  3153  1342  3415               	retlw	21
  3154  1343  3400               	retlw	0
  3155  1344  3415               	retlw	21
  3156  1345  3400               	retlw	0
  3157  1346  3416               	retlw	22
  3158  1347  3400               	retlw	0
  3159  1348  3417               	retlw	23
  3160  1349  3400               	retlw	0
  3161  134A  3418               	retlw	24
  3162  134B  3400               	retlw	0
  3163  134C  3419               	retlw	25
  3164  134D  3400               	retlw	0
  3165  134E  341A               	retlw	26
  3166  134F  3400               	retlw	0
  3167  1350  341B               	retlw	27
  3168  1351  3400               	retlw	0
  3169  1352  341C               	retlw	28
  3170  1353  3400               	retlw	0
  3171  1354  341D               	retlw	29
  3172  1355  3400               	retlw	0
  3173  1356  341E               	retlw	30
  3174  1357  3400               	retlw	0
  3175  1358  3420               	retlw	32
  3176  1359  3400               	retlw	0
  3177  135A  3421               	retlw	33
  3178  135B  3400               	retlw	0
  3179  135C  3423               	retlw	35
  3180  135D  3400               	retlw	0
  3181  135E  3425               	retlw	37
  3182  135F  3400               	retlw	0
  3183  1360  3427               	retlw	39
  3184  1361  3400               	retlw	0
  3185  1362  342A               	retlw	42
  3186  1363  3400               	retlw	0
  3187  1364  342D               	retlw	45
  3188  1365  3400               	retlw	0
  3189  1366  3430               	retlw	48
  3190  1367  3400               	retlw	0
  3191  1368  3433               	retlw	51
  3192  1369  3400               	retlw	0
  3193  136A  3437               	retlw	55
  3194  136B  3400               	retlw	0
  3195  136C  343C               	retlw	60
  3196  136D  3400               	retlw	0
  3197  136E  3442               	retlw	66
  3198  136F  3400               	retlw	0
  3199  1370  3448               	retlw	72
  3200  1371  3400               	retlw	0
  3201  1372  3450               	retlw	80
  3202  1373  3400               	retlw	0
  3203  1374  345B               	retlw	91
  3204  1375  3400               	retlw	0
  3205  1376  3467               	retlw	103
  3206  1377  3400               	retlw	0
  3207  1378  3478               	retlw	120
  3208  1379  3400               	retlw	0
  3209  137A  348E               	retlw	142
  3210  137B  3400               	retlw	0
  3211  137C  34AE               	retlw	174
  3212  137D  3400               	retlw	0
  3213  137E  34DF               	retlw	223
  3214  137F  3400               	retlw	0
  3215  1380  34FF               	retlw	255
  3216  1381  3400               	retlw	0
  3217  1382  34FF               	retlw	255
  3218  1383  3400               	retlw	0
  3219  1384  34FF               	retlw	255
  3220  1385  3400               	retlw	0
  3221                           
  3222                           	psect	idataBANK10
  3223  1059                     __pidataBANK10:	
  3224                           
  3225                           ;initializer for _mod1
  3226  1059  3400               	retlw	0
  3227  105A  3400               	retlw	0
  3228  105B  3415               	retlw	21
  3229  105C  3400               	retlw	0
  3230  105D  3429               	retlw	41
  3231  105E  3400               	retlw	0
  3232  105F  343B               	retlw	59
  3233  1060  3400               	retlw	0
  3234  1061  344A               	retlw	74
  3235  1062  3400               	retlw	0
  3236  1063  3457               	retlw	87
  3237  1064  3400               	retlw	0
  3238  1065  345F               	retlw	95
  3239  1066  3400               	retlw	0
  3240  1067  3463               	retlw	99
  3241  1068  3400               	retlw	0
  3242  1069  3463               	retlw	99
  3243  106A  3400               	retlw	0
  3244  106B  345F               	retlw	95
  3245  106C  3400               	retlw	0
  3246  106D  3457               	retlw	87
  3247  106E  3400               	retlw	0
  3248  106F  344A               	retlw	74
  3249  1070  3400               	retlw	0
  3250  1071  343B               	retlw	59
  3251  1072  3400               	retlw	0
  3252  1073  3429               	retlw	41
  3253  1074  3400               	retlw	0
  3254  1075  3415               	retlw	21
  3255  1076  3400               	retlw	0
  3256  1077  3400               	retlw	0
  3257  1078  3400               	retlw	0
  3258  1079  34EB               	retlw	235
  3259  107A  34FF               	retlw	255
  3260  107B  34D7               	retlw	215
  3261  107C  34FF               	retlw	255
  3262  107D  34C5               	retlw	197
  3263  107E  34FF               	retlw	255
  3264  107F  34B6               	retlw	182
  3265  1080  34FF               	retlw	255
  3266  1081  34A9               	retlw	169
  3267  1082  34FF               	retlw	255
  3268  1083  34A1               	retlw	161
  3269  1084  34FF               	retlw	255
  3270  1085  349D               	retlw	157
  3271  1086  34FF               	retlw	255
  3272  1087  349D               	retlw	157
  3273  1088  34FF               	retlw	255
  3274  1089  34A1               	retlw	161
  3275  108A  34FF               	retlw	255
  3276  108B  34A9               	retlw	169
  3277  108C  34FF               	retlw	255
  3278  108D  34B6               	retlw	182
  3279  108E  34FF               	retlw	255
  3280  108F  34C5               	retlw	197
  3281  1090  34FF               	retlw	255
  3282  1091  34D7               	retlw	215
  3283  1092  34FF               	retlw	255
  3284  1093  34EB               	retlw	235
  3285  1094  34FF               	retlw	255
  3286  1095  3400               	retlw	0
  3287  1096  3400               	retlw	0
  3288                           
  3289                           	psect	idataBIGRAM
  3290  0D7E                     __pidataBIGRAM:	
  3291                           
  3292                           ;initializer for _delayArray
  3293  0D7E  3422               	retlw	34
  3294  0D7F  3408               	retlw	8
  3295  0D80  34FC               	retlw	252
  3296  0D81  3407               	retlw	7
  3297  0D82  34D8               	retlw	216
  3298  0D83  3407               	retlw	7
  3299  0D84  34B5               	retlw	181
  3300  0D85  3407               	retlw	7
  3301  0D86  3493               	retlw	147
  3302  0D87  3407               	retlw	7
  3303  0D88  3472               	retlw	114
  3304  0D89  3407               	retlw	7
  3305  0D8A  3452               	retlw	82
  3306  0D8B  3407               	retlw	7
  3307  0D8C  3434               	retlw	52
  3308  0D8D  3407               	retlw	7
  3309  0D8E  3416               	retlw	22
  3310  0D8F  3407               	retlw	7
  3311  0D90  34F9               	retlw	249
  3312  0D91  3406               	retlw	6
  3313  0D92  34DD               	retlw	221
  3314  0D93  3406               	retlw	6
  3315  0D94  34C2               	retlw	194
  3316  0D95  3406               	retlw	6
  3317  0D96  34A8               	retlw	168
  3318  0D97  3406               	retlw	6
  3319  0D98  348F               	retlw	143
  3320  0D99  3406               	retlw	6
  3321  0D9A  3476               	retlw	118
  3322  0D9B  3406               	retlw	6
  3323  0D9C  345E               	retlw	94
  3324  0D9D  3406               	retlw	6
  3325  0D9E  3447               	retlw	71
  3326  0D9F  3406               	retlw	6
  3327  0DA0  3430               	retlw	48
  3328  0DA1  3406               	retlw	6
  3329  0DA2  341A               	retlw	26
  3330  0DA3  3406               	retlw	6
  3331  0DA4  3405               	retlw	5
  3332  0DA5  3406               	retlw	6
  3333  0DA6  34F0               	retlw	240
  3334  0DA7  3405               	retlw	5
  3335  0DA8  34DC               	retlw	220
  3336  0DA9  3405               	retlw	5
  3337  0DAA  34C8               	retlw	200
  3338  0DAB  3405               	retlw	5
  3339  0DAC  34B5               	retlw	181
  3340  0DAD  3405               	retlw	5
  3341  0DAE  34A3               	retlw	163
  3342  0DAF  3405               	retlw	5
  3343  0DB0  3490               	retlw	144
  3344  0DB1  3405               	retlw	5
  3345  0DB2  347F               	retlw	127
  3346  0DB3  3405               	retlw	5
  3347  0DB4  346D               	retlw	109
  3348  0DB5  3405               	retlw	5
  3349  0DB6  345C               	retlw	92
  3350  0DB7  3405               	retlw	5
  3351  0DB8  344C               	retlw	76
  3352  0DB9  3405               	retlw	5
  3353  0DBA  343C               	retlw	60
  3354  0DBB  3405               	retlw	5
  3355  0DBC  342C               	retlw	44
  3356  0DBD  3405               	retlw	5
  3357  0DBE  341D               	retlw	29
  3358  0DBF  3405               	retlw	5
  3359  0DC0  340E               	retlw	14
  3360  0DC1  3405               	retlw	5
  3361  0DC2  34FF               	retlw	255
  3362  0DC3  3404               	retlw	4
  3363  0DC4  34F1               	retlw	241
  3364  0DC5  3404               	retlw	4
  3365  0DC6  34E2               	retlw	226
  3366  0DC7  3404               	retlw	4
  3367  0DC8  34D5               	retlw	213
  3368  0DC9  3404               	retlw	4
  3369  0DCA  34C7               	retlw	199
  3370  0DCB  3404               	retlw	4
  3371  0DCC  34BA               	retlw	186
  3372  0DCD  3404               	retlw	4
  3373  0DCE  34AD               	retlw	173
  3374  0DCF  3404               	retlw	4
  3375  0DD0  34A1               	retlw	161
  3376  0DD1  3404               	retlw	4
  3377  0DD2  3494               	retlw	148
  3378  0DD3  3404               	retlw	4
  3379  0DD4  3488               	retlw	136
  3380  0DD5  3404               	retlw	4
  3381  0DD6  347D               	retlw	125
  3382  0DD7  3404               	retlw	4
  3383  0DD8  3471               	retlw	113
  3384  0DD9  3404               	retlw	4
  3385  0DDA  3466               	retlw	102
  3386  0DDB  3404               	retlw	4
  3387  0DDC  345A               	retlw	90
  3388  0DDD  3404               	retlw	4
  3389  0DDE  3450               	retlw	80
  3390  0DDF  3404               	retlw	4
  3391  0DE0  3445               	retlw	69
  3392  0DE1  3404               	retlw	4
  3393  0DE2  343A               	retlw	58
  3394  0DE3  3404               	retlw	4
  3395  0DE4  3430               	retlw	48
  3396  0DE5  3404               	retlw	4
  3397  0DE6  3426               	retlw	38
  3398  0DE7  3404               	retlw	4
  3399  0DE8  341C               	retlw	28
  3400  0DE9  3404               	retlw	4
  3401  0DEA  3412               	retlw	18
  3402  0DEB  3404               	retlw	4
  3403  0DEC  3409               	retlw	9
  3404  0DED  3404               	retlw	4
  3405  0DEE  34FF               	retlw	255
  3406  0DEF  3403               	retlw	3
  3407  0DF0  34F6               	retlw	246
  3408  0DF1  3403               	retlw	3
  3409  0DF2  34ED               	retlw	237
  3410  0DF3  3403               	retlw	3
  3411  0DF4  34E4               	retlw	228
  3412  0DF5  3403               	retlw	3
  3413  0DF6  34DC               	retlw	220
  3414  0DF7  3403               	retlw	3
  3415  0DF8  34D3               	retlw	211
  3416  0DF9  3403               	retlw	3
  3417  0DFA  34CB               	retlw	203
  3418  0DFB  3403               	retlw	3
  3419  0DFC  34C2               	retlw	194
  3420  0DFD  3403               	retlw	3
  3421  0DFE  34BA               	retlw	186
  3422  0DFF  3403               	retlw	3
  3423  0E00  34B2               	retlw	178
  3424  0E01  3403               	retlw	3
  3425  0E02  34AA               	retlw	170
  3426  0E03  3403               	retlw	3
  3427  0E04  34A2               	retlw	162
  3428  0E05  3403               	retlw	3
  3429  0E06  349B               	retlw	155
  3430  0E07  3403               	retlw	3
  3431  0E08  3493               	retlw	147
  3432  0E09  3403               	retlw	3
  3433  0E0A  348C               	retlw	140
  3434  0E0B  3403               	retlw	3
  3435  0E0C  3485               	retlw	133
  3436  0E0D  3403               	retlw	3
  3437  0E0E  347E               	retlw	126
  3438  0E0F  3403               	retlw	3
  3439  0E10  3477               	retlw	119
  3440  0E11  3403               	retlw	3
  3441  0E12  3470               	retlw	112
  3442  0E13  3403               	retlw	3
  3443  0E14  3469               	retlw	105
  3444  0E15  3403               	retlw	3
  3445  0E16  3462               	retlw	98
  3446  0E17  3403               	retlw	3
  3447  0E18  345C               	retlw	92
  3448  0E19  3403               	retlw	3
  3449  0E1A  3455               	retlw	85
  3450  0E1B  3403               	retlw	3
  3451  0E1C  344F               	retlw	79
  3452  0E1D  3403               	retlw	3
  3453  0E1E  3448               	retlw	72
  3454  0E1F  3403               	retlw	3
  3455  0E20  3442               	retlw	66
  3456  0E21  3403               	retlw	3
  3457  0E22  343C               	retlw	60
  3458  0E23  3403               	retlw	3
  3459  0E24  3436               	retlw	54
  3460  0E25  3403               	retlw	3
  3461  0E26  3430               	retlw	48
  3462  0E27  3403               	retlw	3
  3463  0E28  342A               	retlw	42
  3464  0E29  3403               	retlw	3
  3465  0E2A  3424               	retlw	36
  3466  0E2B  3403               	retlw	3
  3467  0E2C  341F               	retlw	31
  3468  0E2D  3403               	retlw	3
  3469  0E2E  3419               	retlw	25
  3470  0E2F  3403               	retlw	3
  3471  0E30  3413               	retlw	19
  3472  0E31  3403               	retlw	3
  3473  0E32  340E               	retlw	14
  3474  0E33  3403               	retlw	3
  3475  0E34  3409               	retlw	9
  3476  0E35  3403               	retlw	3
  3477  0E36  3403               	retlw	3
  3478  0E37  3403               	retlw	3
  3479  0E38  34FE               	retlw	254
  3480  0E39  3402               	retlw	2
  3481  0E3A  34F9               	retlw	249
  3482  0E3B  3402               	retlw	2
  3483  0E3C  34F4               	retlw	244
  3484  0E3D  3402               	retlw	2
  3485  0E3E  34EF               	retlw	239
  3486  0E3F  3402               	retlw	2
  3487  0E40  34EA               	retlw	234
  3488  0E41  3402               	retlw	2
  3489  0E42  34E5               	retlw	229
  3490  0E43  3402               	retlw	2
  3491  0E44  34E0               	retlw	224
  3492  0E45  3402               	retlw	2
  3493  0E46  34DB               	retlw	219
  3494  0E47  3402               	retlw	2
  3495  0E48  34D7               	retlw	215
  3496  0E49  3402               	retlw	2
  3497  0E4A  34D2               	retlw	210
  3498  0E4B  3402               	retlw	2
  3499  0E4C  34CD               	retlw	205
  3500  0E4D  3402               	retlw	2
  3501  0E4E  34C9               	retlw	201
  3502  0E4F  3402               	retlw	2
  3503  0E50  34C4               	retlw	196
  3504  0E51  3402               	retlw	2
  3505  0E52  34C0               	retlw	192
  3506  0E53  3402               	retlw	2
  3507  0E54  34BC               	retlw	188
  3508  0E55  3402               	retlw	2
  3509  0E56  34B7               	retlw	183
  3510  0E57  3402               	retlw	2
  3511  0E58  34B3               	retlw	179
  3512  0E59  3402               	retlw	2
  3513  0E5A  34AF               	retlw	175
  3514  0E5B  3402               	retlw	2
  3515  0E5C  34AB               	retlw	171
  3516  0E5D  3402               	retlw	2
  3517  0E5E  34A6               	retlw	166
  3518  0E5F  3402               	retlw	2
  3519  0E60  34A2               	retlw	162
  3520  0E61  3402               	retlw	2
  3521  0E62  349E               	retlw	158
  3522  0E63  3402               	retlw	2
  3523  0E64  349A               	retlw	154
  3524  0E65  3402               	retlw	2
  3525  0E66  3497               	retlw	151
  3526  0E67  3402               	retlw	2
  3527  0E68  3493               	retlw	147
  3528  0E69  3402               	retlw	2
  3529  0E6A  348F               	retlw	143
  3530  0E6B  3402               	retlw	2
  3531  0E6C  348B               	retlw	139
  3532  0E6D  3402               	retlw	2
  3533  0E6E  3487               	retlw	135
  3534  0E6F  3402               	retlw	2
  3535  0E70  3484               	retlw	132
  3536  0E71  3402               	retlw	2
  3537  0E72  3480               	retlw	128
  3538  0E73  3402               	retlw	2
  3539  0E74  347C               	retlw	124
  3540  0E75  3402               	retlw	2
  3541  0E76  3479               	retlw	121
  3542  0E77  3402               	retlw	2
  3543  0E78  3475               	retlw	117
  3544  0E79  3402               	retlw	2
  3545  0E7A  3472               	retlw	114
  3546  0E7B  3402               	retlw	2
  3547  0E7C  346E               	retlw	110
  3548  0E7D  3402               	retlw	2
  3549  0E7E  346B               	retlw	107
  3550  0E7F  3402               	retlw	2
  3551  0E80  3467               	retlw	103
  3552  0E81  3402               	retlw	2
  3553  0E82  3464               	retlw	100
  3554  0E83  3402               	retlw	2
  3555  0E84  3461               	retlw	97
  3556  0E85  3402               	retlw	2
  3557  0E86  345E               	retlw	94
  3558  0E87  3402               	retlw	2
  3559  0E88  345A               	retlw	90
  3560  0E89  3402               	retlw	2
  3561  0E8A  3457               	retlw	87
  3562  0E8B  3402               	retlw	2
  3563  0E8C  3454               	retlw	84
  3564  0E8D  3402               	retlw	2
  3565  0E8E  3451               	retlw	81
  3566  0E8F  3402               	retlw	2
  3567  0E90  344E               	retlw	78
  3568  0E91  3402               	retlw	2
  3569  0E92  344B               	retlw	75
  3570  0E93  3402               	retlw	2
  3571  0E94  3448               	retlw	72
  3572  0E95  3402               	retlw	2
  3573  0E96  3445               	retlw	69
  3574  0E97  3402               	retlw	2
  3575  0E98  3442               	retlw	66
  3576  0E99  3402               	retlw	2
  3577  0E9A  343F               	retlw	63
  3578  0E9B  3402               	retlw	2
  3579  0E9C  343C               	retlw	60
  3580  0E9D  3402               	retlw	2
  3581  0E9E  3439               	retlw	57
  3582  0E9F  3402               	retlw	2
  3583  0EA0  3436               	retlw	54
  3584  0EA1  3402               	retlw	2
  3585  0EA2  3433               	retlw	51
  3586  0EA3  3402               	retlw	2
  3587  0EA4  3430               	retlw	48
  3588  0EA5  3402               	retlw	2
  3589  0EA6  342E               	retlw	46
  3590  0EA7  3402               	retlw	2
  3591  0EA8  342B               	retlw	43
  3592  0EA9  3402               	retlw	2
  3593  0EAA  3428               	retlw	40
  3594  0EAB  3402               	retlw	2
  3595  0EAC  3425               	retlw	37
  3596  0EAD  3402               	retlw	2
  3597  0EAE  3423               	retlw	35
  3598  0EAF  3402               	retlw	2
  3599  0EB0  3420               	retlw	32
  3600  0EB1  3402               	retlw	2
  3601  0EB2  341E               	retlw	30
  3602  0EB3  3402               	retlw	2
  3603  0EB4  341B               	retlw	27
  3604  0EB5  3402               	retlw	2
  3605  0EB6  3418               	retlw	24
  3606  0EB7  3402               	retlw	2
  3607  0EB8  3416               	retlw	22
  3608  0EB9  3402               	retlw	2
  3609  0EBA  3413               	retlw	19
  3610  0EBB  3402               	retlw	2
  3611  0EBC  3411               	retlw	17
  3612  0EBD  3402               	retlw	2
  3613  0EBE  340E               	retlw	14
  3614  0EBF  3402               	retlw	2
  3615  0EC0  340C               	retlw	12
  3616  0EC1  3402               	retlw	2
  3617  0EC2  340A               	retlw	10
  3618  0EC3  3402               	retlw	2
  3619  0EC4  3407               	retlw	7
  3620  0EC5  3402               	retlw	2
  3621  0EC6  3405               	retlw	5
  3622  0EC7  3402               	retlw	2
  3623  0EC8  3402               	retlw	2
  3624  0EC9  3402               	retlw	2
  3625  0ECA  3400               	retlw	0
  3626  0ECB  3402               	retlw	2
  3627  0ECC  34FE               	retlw	254
  3628  0ECD  3401               	retlw	1
  3629  0ECE  34FB               	retlw	251
  3630  0ECF  3401               	retlw	1
  3631  0ED0  34F9               	retlw	249
  3632  0ED1  3401               	retlw	1
  3633  0ED2  34F7               	retlw	247
  3634  0ED3  3401               	retlw	1
  3635  0ED4  34F5               	retlw	245
  3636  0ED5  3401               	retlw	1
  3637  0ED6  34F2               	retlw	242
  3638  0ED7  3401               	retlw	1
  3639  0ED8  34F0               	retlw	240
  3640  0ED9  3401               	retlw	1
  3641  0EDA  34EE               	retlw	238
  3642  0EDB  3401               	retlw	1
  3643  0EDC  34EC               	retlw	236
  3644  0EDD  3401               	retlw	1
  3645  0EDE  34EA               	retlw	234
  3646  0EDF  3401               	retlw	1
  3647  0EE0  34E8               	retlw	232
  3648  0EE1  3401               	retlw	1
  3649  0EE2  34E6               	retlw	230
  3650  0EE3  3401               	retlw	1
  3651  0EE4  34E3               	retlw	227
  3652  0EE5  3401               	retlw	1
  3653  0EE6  34E1               	retlw	225
  3654  0EE7  3401               	retlw	1
  3655  0EE8  34DF               	retlw	223
  3656  0EE9  3401               	retlw	1
  3657  0EEA  34DD               	retlw	221
  3658  0EEB  3401               	retlw	1
  3659  0EEC  34DB               	retlw	219
  3660  0EED  3401               	retlw	1
  3661  0EEE  34D9               	retlw	217
  3662  0EEF  3401               	retlw	1
  3663  0EF0  34D7               	retlw	215
  3664  0EF1  3401               	retlw	1
  3665  0EF2  34D5               	retlw	213
  3666  0EF3  3401               	retlw	1
  3667  0EF4  34D3               	retlw	211
  3668  0EF5  3401               	retlw	1
  3669  0EF6  34D2               	retlw	210
  3670  0EF7  3401               	retlw	1
  3671  0EF8  34D0               	retlw	208
  3672  0EF9  3401               	retlw	1
  3673  0EFA  34CE               	retlw	206
  3674  0EFB  3401               	retlw	1
  3675  0EFC  34CC               	retlw	204
  3676  0EFD  3401               	retlw	1
  3677  0EFE  34CA               	retlw	202
  3678  0EFF  3401               	retlw	1
  3679  0F00  34C8               	retlw	200
  3680  0F01  3401               	retlw	1
  3681  0F02  34C6               	retlw	198
  3682  0F03  3401               	retlw	1
  3683  0F04  34C4               	retlw	196
  3684  0F05  3401               	retlw	1
  3685  0F06  34C3               	retlw	195
  3686  0F07  3401               	retlw	1
  3687  0F08  34C1               	retlw	193
  3688  0F09  3401               	retlw	1
  3689  0F0A  34BF               	retlw	191
  3690  0F0B  3401               	retlw	1
  3691  0F0C  34BD               	retlw	189
  3692  0F0D  3401               	retlw	1
  3693  0F0E  34BC               	retlw	188
  3694  0F0F  3401               	retlw	1
  3695  0F10  34BA               	retlw	186
  3696  0F11  3401               	retlw	1
  3697  0F12  34B8               	retlw	184
  3698  0F13  3401               	retlw	1
  3699  0F14  34B6               	retlw	182
  3700  0F15  3401               	retlw	1
  3701  0F16  34B5               	retlw	181
  3702  0F17  3401               	retlw	1
  3703  0F18  34B3               	retlw	179
  3704  0F19  3401               	retlw	1
  3705  0F1A  34B1               	retlw	177
  3706  0F1B  3401               	retlw	1
  3707  0F1C  34B0               	retlw	176
  3708  0F1D  3401               	retlw	1
  3709  0F1E  34AE               	retlw	174
  3710  0F1F  3401               	retlw	1
  3711  0F20  34AC               	retlw	172
  3712  0F21  3401               	retlw	1
  3713  0F22  34AB               	retlw	171
  3714  0F23  3401               	retlw	1
  3715  0F24  34A9               	retlw	169
  3716  0F25  3401               	retlw	1
  3717  0F26  34A8               	retlw	168
  3718  0F27  3401               	retlw	1
  3719  0F28  34A6               	retlw	166
  3720  0F29  3401               	retlw	1
  3721  0F2A  34A4               	retlw	164
  3722  0F2B  3401               	retlw	1
  3723  0F2C  34A3               	retlw	163
  3724  0F2D  3401               	retlw	1
  3725  0F2E  34A1               	retlw	161
  3726  0F2F  3401               	retlw	1
  3727  0F30  34A0               	retlw	160
  3728  0F31  3401               	retlw	1
  3729  0F32  349E               	retlw	158
  3730  0F33  3401               	retlw	1
  3731  0F34  349D               	retlw	157
  3732  0F35  3401               	retlw	1
  3733  0F36  349B               	retlw	155
  3734  0F37  3401               	retlw	1
  3735  0F38  349A               	retlw	154
  3736  0F39  3401               	retlw	1
  3737  0F3A  3498               	retlw	152
  3738  0F3B  3401               	retlw	1
  3739  0F3C  3497               	retlw	151
  3740  0F3D  3401               	retlw	1
  3741  0F3E  3495               	retlw	149
  3742  0F3F  3401               	retlw	1
  3743  0F40  3494               	retlw	148
  3744  0F41  3401               	retlw	1
  3745  0F42  3492               	retlw	146
  3746  0F43  3401               	retlw	1
  3747  0F44  3491               	retlw	145
  3748  0F45  3401               	retlw	1
  3749  0F46  3490               	retlw	144
  3750  0F47  3401               	retlw	1
  3751  0F48  348E               	retlw	142
  3752  0F49  3401               	retlw	1
  3753  0F4A  348D               	retlw	141
  3754  0F4B  3401               	retlw	1
  3755  0F4C  348B               	retlw	139
  3756  0F4D  3401               	retlw	1
  3757  0F4E  348A               	retlw	138
  3758  0F4F  3401               	retlw	1
  3759  0F50  3489               	retlw	137
  3760  0F51  3401               	retlw	1
  3761  0F52  3487               	retlw	135
  3762  0F53  3401               	retlw	1
  3763  0F54  3486               	retlw	134
  3764  0F55  3401               	retlw	1
  3765  0F56  3485               	retlw	133
  3766  0F57  3401               	retlw	1
  3767  0F58  3483               	retlw	131
  3768  0F59  3401               	retlw	1
  3769  0F5A  3482               	retlw	130
  3770  0F5B  3401               	retlw	1
  3771  0F5C  3481               	retlw	129
  3772  0F5D  3401               	retlw	1
  3773  0F5E  347F               	retlw	127
  3774  0F5F  3401               	retlw	1
  3775  0F60  347E               	retlw	126
  3776  0F61  3401               	retlw	1
  3777  0F62  347D               	retlw	125
  3778  0F63  3401               	retlw	1
  3779  0F64  347B               	retlw	123
  3780  0F65  3401               	retlw	1
  3781  0F66  347A               	retlw	122
  3782  0F67  3401               	retlw	1
  3783  0F68  3479               	retlw	121
  3784  0F69  3401               	retlw	1
  3785  0F6A  3478               	retlw	120
  3786  0F6B  3401               	retlw	1
  3787  0F6C  3476               	retlw	118
  3788  0F6D  3401               	retlw	1
  3789  0F6E  3475               	retlw	117
  3790  0F6F  3401               	retlw	1
  3791  0F70  3474               	retlw	116
  3792  0F71  3401               	retlw	1
  3793  0F72  3473               	retlw	115
  3794  0F73  3401               	retlw	1
  3795  0F74  3471               	retlw	113
  3796  0F75  3401               	retlw	1
  3797  0F76  3470               	retlw	112
  3798  0F77  3401               	retlw	1
  3799  0F78  346F               	retlw	111
  3800  0F79  3401               	retlw	1
  3801  0F7A  346E               	retlw	110
  3802  0F7B  3401               	retlw	1
  3803  0F7C  3400               	retlw	0
  3804  0F7D  3400               	retlw	0
  3805  0F7E  3400               	retlw	0
  3806  0F7F  3400               	retlw	0
  3807  0F80  3400               	retlw	0
  3808  0F81  3400               	retlw	0
  3809  0F82  3400               	retlw	0
  3810  0F83  3400               	retlw	0
  3811  0F84  3400               	retlw	0
  3812  0F85  3400               	retlw	0
  3813                           
  3814                           ;initializer for _mod5
  3815  0F86  3400               	retlw	0
  3816  0F87  3400               	retlw	0
  3817  0F88  340A               	retlw	10
  3818  0F89  3400               	retlw	0
  3819  0F8A  3414               	retlw	20
  3820  0F8B  3400               	retlw	0
  3821  0F8C  341E               	retlw	30
  3822  0F8D  3400               	retlw	0
  3823  0F8E  3428               	retlw	40
  3824  0F8F  3400               	retlw	0
  3825  0F90  3432               	retlw	50
  3826  0F91  3400               	retlw	0
  3827  0F92  343A               	retlw	58
  3828  0F93  3400               	retlw	0
  3829  0F94  3442               	retlw	66
  3830  0F95  3400               	retlw	0
  3831  0F96  344A               	retlw	74
  3832  0F97  3400               	retlw	0
  3833  0F98  3450               	retlw	80
  3834  0F99  3400               	retlw	0
  3835  0F9A  3456               	retlw	86
  3836  0F9B  3400               	retlw	0
  3837  0F9C  345B               	retlw	91
  3838  0F9D  3400               	retlw	0
  3839  0F9E  345F               	retlw	95
  3840  0F9F  3400               	retlw	0
  3841  0FA0  3461               	retlw	97
  3842  0FA1  3400               	retlw	0
  3843  0FA2  3463               	retlw	99
  3844  0FA3  3400               	retlw	0
  3845  0FA4  3464               	retlw	100
  3846  0FA5  3400               	retlw	0
  3847  0FA6  3463               	retlw	99
  3848  0FA7  3400               	retlw	0
  3849  0FA8  3461               	retlw	97
  3850  0FA9  3400               	retlw	0
  3851  0FAA  345F               	retlw	95
  3852  0FAB  3400               	retlw	0
  3853  0FAC  345B               	retlw	91
  3854  0FAD  3400               	retlw	0
  3855  0FAE  3456               	retlw	86
  3856  0FAF  3400               	retlw	0
  3857  0FB0  3450               	retlw	80
  3858  0FB1  3400               	retlw	0
  3859  0FB2  344A               	retlw	74
  3860  0FB3  3400               	retlw	0
  3861  0FB4  3442               	retlw	66
  3862  0FB5  3400               	retlw	0
  3863  0FB6  343A               	retlw	58
  3864  0FB7  3400               	retlw	0
  3865  0FB8  3432               	retlw	50
  3866  0FB9  3400               	retlw	0
  3867  0FBA  3428               	retlw	40
  3868  0FBB  3400               	retlw	0
  3869  0FBC  341E               	retlw	30
  3870  0FBD  3400               	retlw	0
  3871  0FBE  3414               	retlw	20
  3872  0FBF  3400               	retlw	0
  3873  0FC0  340A               	retlw	10
  3874  0FC1  3400               	retlw	0
  3875  0FC2  3400               	retlw	0
  3876  0FC3  3400               	retlw	0
  3877  0FC4  34F6               	retlw	246
  3878  0FC5  34FF               	retlw	255
  3879  0FC6  34EC               	retlw	236
  3880  0FC7  34FF               	retlw	255
  3881  0FC8  34E2               	retlw	226
  3882  0FC9  34FF               	retlw	255
  3883  0FCA  34D8               	retlw	216
  3884  0FCB  34FF               	retlw	255
  3885  0FCC  34CE               	retlw	206
  3886  0FCD  34FF               	retlw	255
  3887  0FCE  34C6               	retlw	198
  3888  0FCF  34FF               	retlw	255
  3889  0FD0  34BE               	retlw	190
  3890  0FD1  34FF               	retlw	255
  3891  0FD2  34B6               	retlw	182
  3892  0FD3  34FF               	retlw	255
  3893  0FD4  34B0               	retlw	176
  3894  0FD5  34FF               	retlw	255
  3895  0FD6  34AA               	retlw	170
  3896  0FD7  34FF               	retlw	255
  3897  0FD8  34A5               	retlw	165
  3898  0FD9  34FF               	retlw	255
  3899  0FDA  34A1               	retlw	161
  3900  0FDB  34FF               	retlw	255
  3901  0FDC  349F               	retlw	159
  3902  0FDD  34FF               	retlw	255
  3903  0FDE  349D               	retlw	157
  3904  0FDF  34FF               	retlw	255
  3905  0FE0  349C               	retlw	156
  3906  0FE1  34FF               	retlw	255
  3907  0FE2  349D               	retlw	157
  3908  0FE3  34FF               	retlw	255
  3909  0FE4  349F               	retlw	159
  3910  0FE5  34FF               	retlw	255
  3911  0FE6  34A1               	retlw	161
  3912  0FE7  34FF               	retlw	255
  3913  0FE8  34A5               	retlw	165
  3914  0FE9  34FF               	retlw	255
  3915  0FEA  34AA               	retlw	170
  3916  0FEB  34FF               	retlw	255
  3917  0FEC  34B0               	retlw	176
  3918  0FED  34FF               	retlw	255
  3919  0FEE  34B6               	retlw	182
  3920  0FEF  34FF               	retlw	255
  3921  0FF0  34BE               	retlw	190
  3922  0FF1  34FF               	retlw	255
  3923  0FF2  34C6               	retlw	198
  3924  0FF3  34FF               	retlw	255
  3925  0FF4  34CE               	retlw	206
  3926  0FF5  34FF               	retlw	255
  3927  0FF6  34D8               	retlw	216
  3928  0FF7  34FF               	retlw	255
  3929  0FF8  34E2               	retlw	226
  3930  0FF9  34FF               	retlw	255
  3931  0FFA  34EC               	retlw	236
  3932  0FFB  34FF               	retlw	255
  3933  0FFC  34F6               	retlw	246
  3934  0FFD  34FF               	retlw	255
  3935  0FFE  3400               	retlw	0
  3936  0FFF  3400               	retlw	0
  3937  000B                     _INTCONbits	set	11
  3938  000E                     _PORTCbits	set	14
  3939  000F                     _PORTDbits	set	15
  3940  0010                     _PORTEbits	set	16
  3941  001B                     _PR2	set	27
  3942  001C                     _T2CONbits	set	28
  3943  009D                     _ADCON0bits	set	157
  3944  009E                     _ADCON1bits	set	158
  3945  009C                     _ADRESH	set	156
  3946  009B                     _ADRESL	set	155
  3947  0095                     _OPTION_REGbits	set	149
  3948  0099                     _OSCCONbits	set	153
  3949  008D                     _TRISBbits	set	141
  3950  008E                     _TRISCbits	set	142
  3951  008F                     _TRISDbits	set	143
  3952  0090                     _TRISEbits	set	144
  3953  011D                     _APFCONbits	set	285
  3954  010D                     _LATBbits	set	269
  3955  010F                     _LATDbits	set	271
  3956  0190                     _ANSELEbits	set	400
  3957  0192                     _PMADRH	set	402
  3958  0191                     _PMADRL	set	401
  3959  0195                     _PMCON1bits	set	405
  3960  0196                     _PMCON2	set	406
  3961  0194                     _PMDATH	set	404
  3962  0193                     _PMDATL	set	403
  3963  0291                     _CCPR1	set	657
  3964  0298                     _CCPR2	set	664
  3965  0293                     _CCP1CONbits	set	659
  3966  029A                     _CCP2CONbits	set	666
  3967  029D                     _CCPTMRS0	set	669
  3968  029E                     _CCPTMRS1	set	670
  3969  029F                     _CCPTMRS2	set	671
  3970  0311                     _CCPR3	set	785
  3971  0318                     _CCPR4	set	792
  3972  031C                     _CCPR5	set	796
  3973  0313                     _CCP3CONbits	set	787
  3974  031A                     _CCP4CONbits	set	794
  3975  031E                     _CCP5CONbits	set	798
  3976  030C                     _TRISFbits	set	780
  3977  030D                     _TRISGbits	set	781
  3978  038C                     _LATFbits	set	908
  3979  038D                     _LATGbits	set	909
  3980  040C                     _ANSELFbits	set	1036
  3981  061A                     _CCPR9	set	1562
  3982  061F                     _CCP10CONbits	set	1567
  3983  0613                     _CCP6CONbits	set	1555
  3984  0616                     _CCP7CONbits	set	1558
  3985  0619                     _CCP8CONbits	set	1561
  3986  061C                     _CCP9CONbits	set	1564
  3987                           
  3988                           ; #config settings
  3989  0000                     
  3990                           	psect	cinit
  3991  01F2                     start_initialization:	
  3992  01F2                     __initialization:		;BIGRAM
  3993                           
  3994                           ; Clear objects allocated to BANK0
  3995  01F2  01EB               	clrf	__pbssBANK0& (0+127)
  3996                           
  3997                           ; Clear objects allocated to BANK1
  3998  01F3  30DF               	movlw	low __pbssBANK1
  3999  01F4  0084               	movwf	4
  4000  01F5  3000               	movlw	high __pbssBANK1
  4001  01F6  0085               	movwf	5
  4002  01F7  3011               	movlw	17
  4003  01F8  00FE               	movwf	btemp
  4004  01F9  3000               	movlw	0
  4005  01FA  00FF               	movwf	btemp+1
  4006  01FB  319D  25FD  3181   	fcall	clear_ram0
  4007                           
  4008                           ; Clear objects allocated to BANK2
  4009  01FE  3020               	movlw	low __pbssBANK2
  4010  01FF  0084               	movwf	4
  4011  0200  3001               	movlw	high __pbssBANK2
  4012  0201  0085               	movwf	5
  4013  0202  303C               	movlw	60
  4014  0203  00FE               	movwf	btemp
  4015  0204  3000               	movlw	0
  4016  0205  00FF               	movwf	btemp+1
  4017  0206  319D  25FD  3181   	fcall	clear_ram0
  4018                           
  4019                           ; Clear objects allocated to BANK3
  4020  0209  30A0               	movlw	low __pbssBANK3
  4021  020A  0084               	movwf	4
  4022  020B  3001               	movlw	high __pbssBANK3
  4023  020C  0085               	movwf	5
  4024  020D  3048               	movlw	72
  4025  020E  00FE               	movwf	btemp
  4026  020F  3000               	movlw	0
  4027  0210  00FF               	movwf	btemp+1
  4028  0211  319D  25FD  3181   	fcall	clear_ram0
  4029                           
  4030                           ; Clear objects allocated to BANK9
  4031  0214  30A0               	movlw	low __pbssBANK9
  4032  0215  0084               	movwf	4
  4033  0216  3004               	movlw	high __pbssBANK9
  4034  0217  0085               	movwf	5
  4035  0218  3040               	movlw	64
  4036  0219  00FE               	movwf	btemp
  4037  021A  3000               	movlw	0
  4038  021B  00FF               	movwf	btemp+1
  4039  021C  319D  25FD  3181   	fcall	clear_ram0
  4040                           
  4041                           ; Initialize objects allocated to BIGRAM
  4042  021F  307E               	movlw	low __pidataBIGRAM
  4043  0220  0084               	movwf	4
  4044  0221  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  4045  0222  0085               	movwf	5
  4046  0223  306E               	movlw	low (0+9070)
  4047  0224  0086               	movwf	6
  4048  0225  3023               	movlw	high (0+9070)
  4049  0226  0087               	movwf	7
  4050  0227  3002               	movlw	2
  4051  0228  00FF               	movwf	btemp+1
  4052  0229  3082               	movlw	130
  4053  022A  319D  25F1  3181   	fcall	init_ram
  4054                           
  4055                           ; Initialize objects allocated to COMMON
  4056  022D  3180  2003  3181   	fcall	__pidataCOMMON	;fetch initializer
  4057  0230  00FD               	movwf	__pdataCOMMON& (0+127)
  4058                           
  4059                           ; Initialize objects allocated to BANK0
  4060  0231  3187  27FE  3181   	fcall	__pidataBANK0	;fetch initializer
  4061  0234  00E9               	movwf	__pdataBANK0& (0+127)
  4062  0235  3187  27FF  3181   	fcall	__pidataBANK0+1	;fetch initializer
  4063  0238  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  4064                           
  4065                           ; Initialize objects allocated to BANK1
  4066  0239  3051               	movlw	low __pidataBANK1
  4067  023A  0084               	movwf	4
  4068  023B  309E               	movlw	(high __pidataBANK1)| (0+128)
  4069  023C  0085               	movwf	5
  4070  023D  30C9               	movlw	low __pdataBANK1
  4071  023E  0086               	movwf	6
  4072  023F  3000               	movlw	high __pdataBANK1
  4073  0240  0087               	movwf	7
  4074  0241  3000               	movlw	0
  4075  0242  00FF               	movwf	btemp+1
  4076  0243  3016               	movlw	22
  4077  0244  319D  25F1  3181   	fcall	init_ram
  4078                           
  4079                           ; Initialize objects allocated to BANK2
  4080  0247  3018               	movlw	low __pidataBANK2
  4081  0248  0084               	movwf	4
  4082  0249  309E               	movlw	(high __pidataBANK2)| (0+128)
  4083  024A  0085               	movwf	5
  4084  024B  305C               	movlw	low __pdataBANK2
  4085  024C  0086               	movwf	6
  4086  024D  3001               	movlw	high __pdataBANK2
  4087  024E  0087               	movwf	7
  4088  024F  3000               	movlw	0
  4089  0250  00FF               	movwf	btemp+1
  4090  0251  3011               	movlw	17
  4091  0252  319D  25F1  3181   	fcall	init_ram
  4092                           
  4093                           ; Initialize objects allocated to BANK4
  4094  0255  3013               	movlw	low __pidataBANK4
  4095  0256  0084               	movwf	4
  4096  0257  3091               	movlw	(high __pidataBANK4)| (0+128)
  4097  0258  0085               	movwf	5
  4098  0259  3020               	movlw	low __pdataBANK4
  4099  025A  0086               	movwf	6
  4100  025B  3002               	movlw	high __pdataBANK4
  4101  025C  0087               	movwf	7
  4102  025D  3000               	movlw	0
  4103  025E  00FF               	movwf	btemp+1
  4104  025F  303E               	movlw	62
  4105  0260  319D  25F1  3181   	fcall	init_ram
  4106                           
  4107                           ; Initialize objects allocated to BANK5
  4108  0263  30D5               	movlw	low __pidataBANK5
  4109  0264  0084               	movwf	4
  4110  0265  3090               	movlw	(high __pidataBANK5)| (0+128)
  4111  0266  0085               	movwf	5
  4112  0267  30A0               	movlw	low __pdataBANK5
  4113  0268  0086               	movwf	6
  4114  0269  3002               	movlw	high __pdataBANK5
  4115  026A  0087               	movwf	7
  4116  026B  3000               	movlw	0
  4117  026C  00FF               	movwf	btemp+1
  4118  026D  303E               	movlw	62
  4119  026E  319D  25F1  3181   	fcall	init_ram
  4120                           
  4121                           ; Initialize objects allocated to BANK6
  4122  0271  3097               	movlw	low __pidataBANK6
  4123  0272  0084               	movwf	4
  4124  0273  3090               	movlw	(high __pidataBANK6)| (0+128)
  4125  0274  0085               	movwf	5
  4126  0275  3020               	movlw	low __pdataBANK6
  4127  0276  0086               	movwf	6
  4128  0277  3003               	movlw	high __pdataBANK6
  4129  0278  0087               	movwf	7
  4130  0279  3000               	movlw	0
  4131  027A  00FF               	movwf	btemp+1
  4132  027B  303E               	movlw	62
  4133  027C  319D  25F1  3181   	fcall	init_ram
  4134                           
  4135                           ; Initialize objects allocated to BANK7
  4136  027F  3086               	movlw	low __pidataBANK7
  4137  0280  0084               	movwf	4
  4138  0281  3093               	movlw	(high __pidataBANK7)| (0+128)
  4139  0282  0085               	movwf	5
  4140  0283  30A0               	movlw	low __pdataBANK7
  4141  0284  0086               	movwf	6
  4142  0285  3003               	movlw	high __pdataBANK7
  4143  0286  0087               	movwf	7
  4144  0287  3000               	movlw	0
  4145  0288  00FF               	movwf	btemp+1
  4146  0289  3050               	movlw	80
  4147  028A  319D  25F1  3181   	fcall	init_ram
  4148                           
  4149                           ; Initialize objects allocated to BANK8
  4150  028D  3036               	movlw	low __pidataBANK8
  4151  028E  0084               	movwf	4
  4152  028F  3093               	movlw	(high __pidataBANK8)| (0+128)
  4153  0290  0085               	movwf	5
  4154  0291  3020               	movlw	low __pdataBANK8
  4155  0292  0086               	movwf	6
  4156  0293  3004               	movlw	high __pdataBANK8
  4157  0294  0087               	movwf	7
  4158  0295  3000               	movlw	0
  4159  0296  00FF               	movwf	btemp+1
  4160  0297  3050               	movlw	80
  4161  0298  319D  25F1  3181   	fcall	init_ram
  4162                           
  4163                           ; Initialize objects allocated to BANK10
  4164  029B  3059               	movlw	low __pidataBANK10
  4165  029C  0084               	movwf	4
  4166  029D  3090               	movlw	(high __pidataBANK10)| (0+128)
  4167  029E  0085               	movwf	5
  4168  029F  3020               	movlw	low __pdataBANK10
  4169  02A0  0086               	movwf	6
  4170  02A1  3005               	movlw	high __pdataBANK10
  4171  02A2  0087               	movwf	7
  4172  02A3  3000               	movlw	0
  4173  02A4  00FF               	movwf	btemp+1
  4174  02A5  303E               	movlw	62
  4175  02A6  319D  25F1         	fcall	init_ram
  4176  02A8                     end_of_initialization:	
  4177                           ;End of C runtime variable initialization code
  4178                           
  4179  02A8                     __end_of__initialization:	
  4180  02A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4181  02A9  0020               	movlb	0
  4182  02AA  3182  2AAC         	ljmp	_main	;jump to C main() function
  4183                           
  4184                           	psect	dataCOMMON
  4185  007D                     __pdataCOMMON:	
  4186  007D                     _switchBypass_state:	
  4187  007D                     	ds	1
  4188                           
  4189                           	psect	bssBANK0
  4190  006B                     __pbssBANK0:	
  4191  006B                     _doubleTap_state:	
  4192  006B                     	ds	1
  4193                           
  4194                           	psect	dataBANK0
  4195  0069                     __pdataBANK0:	
  4196  0069                     _feedback_state:	
  4197  0069                     	ds	1
  4198  006A                     _longTap_state:	
  4199  006A                     	ds	1
  4200                           
  4201                           	psect	bssBANK1
  4202  00DF                     __pbssBANK1:	
  4203  00DF                     _sub_timer:	
  4204  00DF                     	ds	4
  4205  00E3                     _tap_timer:	
  4206  00E3                     	ds	4
  4207  00E7                     _timer:	
  4208  00E7                     	ds	4
  4209  00EB                     _mod_counter:	
  4210  00EB                     	ds	2
  4211  00ED                     _feedback_start:	
  4212  00ED                     	ds	1
  4213  00EE                     _suspend_blink:	
  4214  00EE                     	ds	1
  4215  00EF                     _switchTap_pressed:	
  4216  00EF                     	ds	1
  4217                           
  4218                           	psect	dataBANK1
  4219  00C9                     __pdataBANK1:	
  4220  00C9                     _baseline_delay_time:	
  4221  00C9                     	ds	4
  4222  00CD                     _delay_time:	
  4223  00CD                     	ds	4
  4224  00D1                     _bottom_push_state:	
  4225  00D1                     	ds	2
  4226  00D3                     _knob1_prev:	
  4227  00D3                     	ds	2
  4228  00D5                     _knob2_prev:	
  4229  00D5                     	ds	2
  4230  00D7                     _knob3_prev:	
  4231  00D7                     	ds	2
  4232  00D9                     _long_press_limit:	
  4233  00D9                     	ds	2
  4234  00DB                     _top_push_state:	
  4235  00DB                     	ds	2
  4236  00DD                     _blink_rate:	
  4237  00DD                     	ds	1
  4238  00DE                     _num_taps:	
  4239  00DE                     	ds	1
  4240                           
  4241                           	psect	bssBANK2
  4242  0120                     __pbssBANK2:	
  4243  0120                     _ledState:	
  4244  0120                     	ds	4
  4245  0124                     _mod_timer:	
  4246  0124                     	ds	4
  4247  0128                     _SPI_Value:	
  4248  0128                     	ds	2
  4249  012A                     _adjust_sub_delay:	
  4250  012A                     	ds	2
  4251  012C                     _adjusted_pot_value:	
  4252  012C                     	ds	2
  4253  012E                     _debounce_bypass:	
  4254  012E                     	ds	2
  4255  0130                     _debounce_count:	
  4256  0130                     	ds	2
  4257  0132                     _debounce_mode1:	
  4258  0132                     	ds	2
  4259  0134                     _debounce_mode2:	
  4260  0134                     	ds	2
  4261  0136                     _delay_counter:	
  4262  0136                     	ds	2
  4263  0138                     _delayfound:	
  4264  0138                     	ds	2
  4265  013A                     _feedback_timer:	
  4266  013A                     	ds	2
  4267  013C                     _knob_1_pos:	
  4268  013C                     	ds	2
  4269  013E                     _knob_2_pos:	
  4270  013E                     	ds	2
  4271  0140                     _knob_3_pos:	
  4272  0140                     	ds	2
  4273  0142                     _knob_4_pos:	
  4274  0142                     	ds	2
  4275  0144                     _knob_5_pos:	
  4276  0144                     	ds	2
  4277  0146                     _longTap_timer:	
  4278  0146                     	ds	2
  4279  0148                     _mod_delay_time_bak:	
  4280  0148                     	ds	2
  4281  014A                     _mod_value:	
  4282  014A                     	ds	2
  4283  014C                     _reset_sub_delay:	
  4284  014C                     	ds	2
  4285  014E                     _switchBypass_pressed:	
  4286  014E                     	ds	2
  4287  0150                     _switchBypass_toggle:	
  4288  0150                     	ds	2
  4289  0152                     _bottomTactile_pressed:	
  4290  0152                     	ds	1
  4291  0153                     _bypass_turning_on:	
  4292  0153                     	ds	1
  4293  0154                     _iCnt:	
  4294  0154                     	ds	1
  4295  0155                     _longTap_start:	
  4296  0155                     	ds	1
  4297  0156                     _mode1_state:	
  4298  0156                     	ds	1
  4299  0157                     _mode2_state:	
  4300  0157                     	ds	1
  4301  0158                     _preset_blink:	
  4302  0158                     	ds	1
  4303  0159                     _preset_programmning_on:	
  4304  0159                     	ds	1
  4305  015A                     _switchTap_down:	
  4306  015A                     	ds	1
  4307  015B                     _topTactile_pressed:	
  4308  015B                     	ds	1
  4309                           
  4310                           	psect	dataBANK2
  4311  015C                     __pdataBANK2:	
  4312  015C                     _blink_delay:	
  4313  015C                     	ds	2
  4314  015E                     _delay_time_changed:	
  4315  015E                     	ds	2
  4316  0160                     _knob4_prev:	
  4317  0160                     	ds	2
  4318  0162                     _knob5_prev:	
  4319  0162                     	ds	2
  4320  0164                     _mod_delay_time:	
  4321  0164                     	ds	2
  4322  0166                     _switchBypass_up:	
  4323  0166                     	ds	2
  4324  0168                     _tap_iteration:	
  4325  0168                     	ds	2
  4326  016A                     _blink_state:	
  4327  016A                     	ds	1
  4328  016B                     _currentBypassState:	
  4329  016B                     	ds	1
  4330  016C                     _switchTap_state:	
  4331  016C                     	ds	1
  4332                           
  4333                           	psect	bssBANK3
  4334  01A0                     __pbssBANK3:	
  4335  01A0                     _tap:	
  4336  01A0                     	ds	44
  4337  01CC                     _tap_history:	
  4338  01CC                     	ds	20
  4339  01E0                     _tap_total:	
  4340  01E0                     	ds	4
  4341  01E4                     _test_timer:	
  4342  01E4                     	ds	4
  4343                           
  4344                           	psect	dataBANK4
  4345  0220                     __pdataBANK4:	
  4346  0220                     _mod2:	
  4347  0220                     	ds	62
  4348                           
  4349                           	psect	dataBANK5
  4350  02A0                     __pdataBANK5:	
  4351  02A0                     _mod3:	
  4352  02A0                     	ds	62
  4353                           
  4354                           	psect	dataBANK6
  4355  0320                     __pdataBANK6:	
  4356  0320                     _mod4:	
  4357  0320                     	ds	62
  4358                           
  4359                           	psect	dataBANK7
  4360  03A0                     __pdataBANK7:	
  4361  03A0                     _B25k:	
  4362  03A0                     	ds	80
  4363                           
  4364                           	psect	dataBANK8
  4365  0420                     __pdataBANK8:	
  4366  0420                     _iB25k:	
  4367  0420                     	ds	80
  4368                           
  4369                           	psect	bssBANK9
  4370  04A0                     __pbssBANK9:	
  4371  04A0                     _myBuf:	
  4372  04A0                     	ds	64
  4373                           
  4374                           	psect	dataBANK10
  4375  0520                     __pdataBANK10:	
  4376  0520                     _mod1:	
  4377  0520                     	ds	62
  4378                           
  4379                           	psect	clrtext
  4380  1DFD                     clear_ram0:	
  4381                           ;	Called with FSR0 containing the base address, and
  4382                           ;	btemp/btemp+1 has the size to clear
  4383                           
  4384  1DFD  0064               	clrwdt	;clear the watchdog before getting into this loop
  4385  1DFE                     clrloop0:	
  4386  1DFE  0180               	clrf	0	;clear RAM location pointed to by FSR
  4387  1DFF  3101               	addfsr 0,1
  4388  1E00  3001               	movlw	1
  4389  1E01  02FE               	subwf	126,f
  4390  1E02  3000               	movlw	0
  4391  1E03  3BFF               	subwfb	127,f
  4392  1E04  087F               	movf	127,w
  4393  1E05  047E               	iorwf	126,w
  4394  1E06  1903               	btfsc	3,2
  4395  1E07  3400               	retlw	0	;all done for this memory range, return
  4396  1E08  2DFE               	goto	clrloop0	;have we reached the end yet?
  4397                           
  4398                           	psect	inittext
  4399  1DF1                     init_ram:	
  4400  1DF1  00FE               	movwf	126
  4401  1DF2                     initloop:	
  4402  1DF2  0012               	moviw fsr0++
  4403  1DF3  001E               	movwi fsr1++
  4404  1DF4  3001               	movlw	1
  4405  1DF5  02FE               	subwf	126,f
  4406  1DF6  3000               	movlw	0
  4407  1DF7  3BFF               	subwfb	127,f
  4408  1DF8  087F               	movf	127,w
  4409  1DF9  047E               	iorwf	126,w
  4410  1DFA  1903               	btfsc	3,2
  4411  1DFB  3400               	retlw	0
  4412  1DFC  2DF2               	goto	initloop
  4413                           
  4414                           	psect	cstackBANK3
  4415  01E8                     __pcstackBANK3:	
  4416  01E8                     main@i:	
  4417                           
  4418                           ; 2 bytes @ 0x0
  4419  01E8                     	ds	2
  4420  01EA                     main@i_379:	
  4421                           
  4422                           ; 2 bytes @ 0x2
  4423  01EA                     	ds	2
  4424                           
  4425                           	psect	cstackBANK1
  4426  00A0                     __pcstackBANK1:	
  4427  00A0                     ?___fttol:	
  4428  00A0                     ___fttol@f1:	
  4429                           ; 4 bytes @ 0x0
  4430                           
  4431                           
  4432                           ; 3 bytes @ 0x0
  4433  00A0                     	ds	4
  4434  00A4                     ??___fttol:	
  4435                           
  4436                           ; 1 bytes @ 0x4
  4437  00A4                     	ds	4
  4438  00A8                     ___fttol@sign1:	
  4439                           
  4440                           ; 1 bytes @ 0x8
  4441  00A8                     	ds	1
  4442  00A9                     ___fttol@lval:	
  4443                           
  4444                           ; 4 bytes @ 0x9
  4445  00A9                     	ds	4
  4446  00AD                     ___fttol@exp1:	
  4447                           
  4448                           ; 1 bytes @ 0xD
  4449  00AD                     	ds	1
  4450  00AE                     ?_set_subdivision:	
  4451  00AE                     set_subdivision@x:	
  4452                           ; 2 bytes @ 0xE
  4453                           
  4454                           
  4455                           ; 2 bytes @ 0xE
  4456  00AE                     	ds	2
  4457  00B0                     set_subdivision@y:	
  4458                           
  4459                           ; 2 bytes @ 0x10
  4460  00B0                     	ds	2
  4461  00B2                     ??_set_subdivision:	
  4462                           
  4463                           ; 1 bytes @ 0x12
  4464  00B2                     	ds	3
  4465  00B5                     set_subdivision@tmpX:	
  4466                           
  4467                           ; 2 bytes @ 0x15
  4468  00B5                     	ds	2
  4469  00B7                     set_subdivision@scalar:	
  4470                           
  4471                           ; 3 bytes @ 0x17
  4472  00B7                     	ds	3
  4473  00BA                     ??_main:	
  4474                           
  4475                           ; 1 bytes @ 0x1A
  4476  00BA                     	ds	15
  4477                           
  4478                           	psect	cstackCOMMON
  4479  0070                     __pcstackCOMMON:	
  4480  0070                     ?_ConfigureOscillator:	
  4481  0070                     ?_InitApp:	
  4482                           ; 1 bytes @ 0x0
  4483                           
  4484  0070                     ?_InitializeTaps:	
  4485                           ; 1 bytes @ 0x0
  4486                           
  4487  0070                     ?_initSwitchBypass:	
  4488                           ; 1 bytes @ 0x0
  4489                           
  4490  0070                     ?_ReadSavedSettings:	
  4491                           ; 1 bytes @ 0x0
  4492                           
  4493  0070                     ?_read_bottom_tactile:	
  4494                           ; 1 bytes @ 0x0
  4495                           
  4496  0070                     ?_read_top_tactile:	
  4497                           ; 1 bytes @ 0x0
  4498                           
  4499  0070                     ?_update_mode:	
  4500                           ; 1 bytes @ 0x0
  4501                           
  4502  0070                     ?_showBootSequence:	
  4503                           ; 1 bytes @ 0x0
  4504                           
  4505  0070                     ?_updateSwitchBypass:	
  4506                           ; 1 bytes @ 0x0
  4507                           
  4508  0070                     ?_updateSwitchTap:	
  4509                           ; 1 bytes @ 0x0
  4510                           
  4511  0070                     ?_init_adc:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514  0070                     ?_init_pwm:	
  4515                           ; 1 bytes @ 0x0
  4516                           
  4517  0070                     ?_init_timer2:	
  4518                           ; 1 bytes @ 0x0
  4519                           
  4520  0070                     ?_init_timer0:	
  4521                           ; 1 bytes @ 0x0
  4522                           
  4523  0070                     ?_getCurrentLEDState:	
  4524                           ; 1 bytes @ 0x0
  4525                           
  4526  0070                     ?_star_tactiles:	
  4527                           ; 1 bytes @ 0x0
  4528                           
  4529  0070                     ?_solidring_tactiles:	
  4530                           ; 1 bytes @ 0x0
  4531                           
  4532  0070                     ?_restoreLEDState:	
  4533                           ; 1 bytes @ 0x0
  4534                           
  4535  0070                     ?_isr:	
  4536                           ; 1 bytes @ 0x0
  4537                           
  4538  0070                     ?_main:	
  4539                           ; 1 bytes @ 0x0
  4540                           
  4541  0070                     ?i1_set_leds_top:	
  4542                           ; 1 bytes @ 0x0
  4543                           
  4544  0070                     i1set_leds_top@x:	
  4545                           ; 1 bytes @ 0x0
  4546                           
  4547                           
  4548                           ; 2 bytes @ 0x0
  4549  0070                     	ds	2
  4550  0072                     i1set_leds_top@ledState:	
  4551                           
  4552                           ; 2 bytes @ 0x2
  4553  0072                     	ds	2
  4554  0074                     ??_isr:	
  4555  0074                     ??i1_set_leds_top:	
  4556                           ; 1 bytes @ 0x4
  4557                           
  4558                           
  4559                           ; 1 bytes @ 0x4
  4560  0074                     	ds	9
  4561                           
  4562                           	psect	cstackBANK0
  4563  0020                     __pcstackBANK0:	
  4564  0020                     isr@tmpSubDelay:	
  4565                           
  4566                           ; 2 bytes @ 0x0
  4567  0020                     	ds	2
  4568  0022                     ?_set_leds_top:	
  4569  0022                     ??_ConfigureOscillator:	
  4570                           ; 1 bytes @ 0x2
  4571                           
  4572  0022                     ??_InitApp:	
  4573                           ; 1 bytes @ 0x2
  4574                           
  4575  0022                     ??_InitializeTaps:	
  4576                           ; 1 bytes @ 0x2
  4577                           
  4578  0022                     ??_update_mode:	
  4579                           ; 1 bytes @ 0x2
  4580                           
  4581  0022                     ??_init_adc:	
  4582                           ; 1 bytes @ 0x2
  4583                           
  4584  0022                     ??_init_pwm:	
  4585                           ; 1 bytes @ 0x2
  4586                           
  4587  0022                     ??_init_timer2:	
  4588                           ; 1 bytes @ 0x2
  4589                           
  4590  0022                     ??_init_timer0:	
  4591                           ; 1 bytes @ 0x2
  4592                           
  4593  0022                     ?_set_leds_bottom:	
  4594                           ; 1 bytes @ 0x2
  4595                           
  4596  0022                     ??_getCurrentLEDState:	
  4597                           ; 1 bytes @ 0x2
  4598                           
  4599  0022                     ??_restoreLEDState:	
  4600                           ; 1 bytes @ 0x2
  4601                           
  4602  0022                     ?_setFeedbackState:	
  4603                           ; 1 bytes @ 0x2
  4604                           
  4605  0022                     ?_setLongTapState:	
  4606                           ; 1 bytes @ 0x2
  4607                           
  4608  0022                     ?_updateSwitchBypassState:	
  4609                           ; 1 bytes @ 0x2
  4610                           
  4611  0022                     ?_adc_convert:	
  4612                           ; 1 bytes @ 0x2
  4613                           
  4614  0022                     ?_FLASH_ReadWord:	
  4615                           ; 2 bytes @ 0x2
  4616                           
  4617  0022                     ?_getSwitchBypassState:	
  4618                           ; 2 bytes @ 0x2
  4619                           
  4620  0022                     ?___awdiv:	
  4621                           ; 2 bytes @ 0x2
  4622                           
  4623  0022                     ?___ftpack:	
  4624                           ; 2 bytes @ 0x2
  4625                           
  4626  0022                     ?___ftneg:	
  4627                           ; 3 bytes @ 0x2
  4628                           
  4629  0022                     ?___lmul:	
  4630                           ; 3 bytes @ 0x2
  4631                           
  4632  0022                     FLASH_ReadWord@flashAddr:	
  4633                           ; 4 bytes @ 0x2
  4634                           
  4635  0022                     set_leds_top@x:	
  4636                           ; 2 bytes @ 0x2
  4637                           
  4638  0022                     set_leds_bottom@x:	
  4639                           ; 2 bytes @ 0x2
  4640                           
  4641  0022                     updateSwitchBypassState@state:	
  4642                           ; 2 bytes @ 0x2
  4643                           
  4644  0022                     setFeedbackState@f_state:	
  4645                           ; 2 bytes @ 0x2
  4646                           
  4647  0022                     setLongTapState@f_state:	
  4648                           ; 2 bytes @ 0x2
  4649                           
  4650  0022                     ___awdiv@divisor:	
  4651                           ; 2 bytes @ 0x2
  4652                           
  4653  0022                     ___ftpack@arg:	
  4654                           ; 2 bytes @ 0x2
  4655                           
  4656  0022                     ___ftneg@f1:	
  4657                           ; 3 bytes @ 0x2
  4658                           
  4659  0022                     ___lmul@multiplier:	
  4660                           ; 3 bytes @ 0x2
  4661                           
  4662                           
  4663                           ; 4 bytes @ 0x2
  4664  0022                     	ds	1
  4665  0023                     InitializeTaps@itap:	
  4666                           
  4667                           ; 2 bytes @ 0x3
  4668  0023                     	ds	1
  4669  0024                     ??_adc_convert:	
  4670  0024                     ??_FLASH_ReadWord:	
  4671                           ; 1 bytes @ 0x4
  4672                           
  4673  0024                     ??_set_leds_bottom:	
  4674                           ; 1 bytes @ 0x4
  4675                           
  4676  0024                     ??_setFeedbackState:	
  4677                           ; 1 bytes @ 0x4
  4678                           
  4679  0024                     ??_setLongTapState:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  0024                     ??_updateSwitchBypassState:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685  0024                     ??_getSwitchBypassState:	
  4686                           ; 1 bytes @ 0x4
  4687                           
  4688  0024                     FLASH_ReadWord@GIEBitValue:	
  4689                           ; 1 bytes @ 0x4
  4690                           
  4691  0024                     set_leds_top@ledState:	
  4692                           ; 1 bytes @ 0x4
  4693                           
  4694  0024                     ___awdiv@dividend:	
  4695                           ; 2 bytes @ 0x4
  4696                           
  4697                           
  4698                           ; 2 bytes @ 0x4
  4699  0024                     	ds	1
  4700  0025                     ??___ftneg:	
  4701  0025                     adc_convert@channel:	
  4702                           ; 1 bytes @ 0x5
  4703                           
  4704  0025                     ___ftpack@exp:	
  4705                           ; 1 bytes @ 0x5
  4706                           
  4707                           
  4708                           ; 1 bytes @ 0x5
  4709  0025                     	ds	1
  4710  0026                     ??_set_leds_top:	
  4711  0026                     ??_ReadSavedSettings:	
  4712                           ; 1 bytes @ 0x6
  4713                           
  4714  0026                     ??___awdiv:	
  4715                           ; 1 bytes @ 0x6
  4716                           
  4717  0026                     ___ftpack@sign:	
  4718                           ; 1 bytes @ 0x6
  4719                           
  4720  0026                     ___lmul@multiplicand:	
  4721                           ; 1 bytes @ 0x6
  4722                           
  4723                           
  4724                           ; 4 bytes @ 0x6
  4725  0026                     	ds	1
  4726  0027                     ??___ftpack:	
  4727  0027                     ___awdiv@counter:	
  4728                           ; 1 bytes @ 0x7
  4729                           
  4730                           
  4731                           ; 1 bytes @ 0x7
  4732  0027                     	ds	1
  4733  0028                     ___awdiv@sign:	
  4734                           
  4735                           ; 1 bytes @ 0x8
  4736  0028                     	ds	1
  4737  0029                     ___awdiv@quotient:	
  4738                           
  4739                           ; 2 bytes @ 0x9
  4740  0029                     	ds	1
  4741  002A                     ??___lmul:	
  4742  002A                     ?___altoft:	
  4743                           ; 1 bytes @ 0xA
  4744                           
  4745  002A                     ?___awtoft:	
  4746                           ; 3 bytes @ 0xA
  4747                           
  4748  002A                     ?___ftadd:	
  4749                           ; 3 bytes @ 0xA
  4750                           
  4751  002A                     ___awtoft@c:	
  4752                           ; 3 bytes @ 0xA
  4753                           
  4754  002A                     ___ftadd@f1:	
  4755                           ; 2 bytes @ 0xA
  4756                           
  4757  002A                     ___lmul@product:	
  4758                           ; 3 bytes @ 0xA
  4759                           
  4760  002A                     ___altoft@c:	
  4761                           ; 4 bytes @ 0xA
  4762                           
  4763                           
  4764                           ; 4 bytes @ 0xA
  4765  002A                     	ds	3
  4766  002D                     ??___awtoft:	
  4767  002D                     ___ftadd@f2:	
  4768                           ; 1 bytes @ 0xD
  4769                           
  4770                           
  4771                           ; 3 bytes @ 0xD
  4772  002D                     	ds	1
  4773  002E                     ?_wait_ms:	
  4774  002E                     ??___altoft:	
  4775                           ; 1 bytes @ 0xE
  4776                           
  4777  002E                     ?___aldiv:	
  4778                           ; 1 bytes @ 0xE
  4779                           
  4780  002E                     wait_ms@timeSec:	
  4781                           ; 4 bytes @ 0xE
  4782                           
  4783  002E                     ___aldiv@divisor:	
  4784                           ; 2 bytes @ 0xE
  4785                           
  4786                           
  4787                           ; 4 bytes @ 0xE
  4788  002E                     	ds	1
  4789  002F                     ___awtoft@sign:	
  4790                           
  4791                           ; 1 bytes @ 0xF
  4792  002F                     	ds	1
  4793  0030                     ??_wait_ms:	
  4794  0030                     ??___ftadd:	
  4795                           ; 1 bytes @ 0x10
  4796                           
  4797  0030                     ___altoft@exp:	
  4798                           ; 1 bytes @ 0x10
  4799                           
  4800  0030                     wait_ms@timemsl:	
  4801                           ; 1 bytes @ 0x10
  4802                           
  4803                           
  4804                           ; 4 bytes @ 0x10
  4805  0030                     	ds	1
  4806  0031                     ___altoft@sign:	
  4807                           
  4808                           ; 1 bytes @ 0x11
  4809  0031                     	ds	1
  4810  0032                     ___aldiv@dividend:	
  4811                           
  4812                           ; 4 bytes @ 0x12
  4813  0032                     	ds	2
  4814  0034                     ??_read_bottom_tactile:	
  4815  0034                     ??_read_top_tactile:	
  4816                           ; 1 bytes @ 0x14
  4817                           
  4818  0034                     ??_star_tactiles:	
  4819                           ; 1 bytes @ 0x14
  4820                           
  4821  0034                     ??_solidring_tactiles:	
  4822                           ; 1 bytes @ 0x14
  4823                           
  4824  0034                     ?_setSwitchBypassState:	
  4825                           ; 1 bytes @ 0x14
  4826                           
  4827  0034                     ?_setDoublePressState:	
  4828                           ; 1 bytes @ 0x14
  4829                           
  4830  0034                     ___ftadd@sign:	
  4831                           ; 1 bytes @ 0x14
  4832                           
  4833  0034                     setSwitchBypassState@f_state:	
  4834                           ; 1 bytes @ 0x14
  4835                           
  4836  0034                     setDoublePressState@f_state:	
  4837                           ; 2 bytes @ 0x14
  4838                           
  4839                           
  4840                           ; 2 bytes @ 0x14
  4841  0034                     	ds	1
  4842  0035                     ___ftadd@exp2:	
  4843                           
  4844                           ; 1 bytes @ 0x15
  4845  0035                     	ds	1
  4846  0036                     ??_setSwitchBypassState:	
  4847  0036                     ??_setDoublePressState:	
  4848                           ; 1 bytes @ 0x16
  4849                           
  4850  0036                     ??___aldiv:	
  4851                           ; 1 bytes @ 0x16
  4852                           
  4853  0036                     star_tactiles@reverse:	
  4854                           ; 1 bytes @ 0x16
  4855                           
  4856  0036                     solidring_tactiles@ring_delay:	
  4857                           ; 1 bytes @ 0x16
  4858                           
  4859  0036                     ___ftadd@exp1:	
  4860                           ; 1 bytes @ 0x16
  4861                           
  4862                           
  4863                           ; 1 bytes @ 0x16
  4864  0036                     	ds	1
  4865  0037                     ?___ftmul:	
  4866  0037                     ___aldiv@counter:	
  4867                           ; 3 bytes @ 0x17
  4868                           
  4869  0037                     star_tactiles@iLed:	
  4870                           ; 1 bytes @ 0x17
  4871                           
  4872  0037                     ___ftmul@f1:	
  4873                           ; 2 bytes @ 0x17
  4874                           
  4875                           
  4876                           ; 3 bytes @ 0x17
  4877  0037                     	ds	1
  4878  0038                     ??_initSwitchBypass:	
  4879  0038                     ??_updateSwitchBypass:	
  4880                           ; 1 bytes @ 0x18
  4881                           
  4882  0038                     ___aldiv@sign:	
  4883                           ; 1 bytes @ 0x18
  4884                           
  4885  0038                     initSwitchBypass@initState:	
  4886                           ; 1 bytes @ 0x18
  4887                           
  4888                           
  4889                           ; 2 bytes @ 0x18
  4890  0038                     	ds	1
  4891  0039                     star_tactiles@iLed_1441:	
  4892  0039                     ___aldiv@quotient:	
  4893                           ; 2 bytes @ 0x19
  4894                           
  4895                           
  4896                           ; 4 bytes @ 0x19
  4897  0039                     	ds	1
  4898  003A                     ___ftmul@f2:	
  4899                           
  4900                           ; 3 bytes @ 0x1A
  4901  003A                     	ds	1
  4902  003B                     ??_showBootSequence:	
  4903                           
  4904                           ; 1 bytes @ 0x1B
  4905  003B                     	ds	2
  4906  003D                     ??_updateSwitchTap:	
  4907  003D                     ??___ftmul:	
  4908                           ; 1 bytes @ 0x1D
  4909                           
  4910  003D                     ?_modulation:	
  4911                           ; 1 bytes @ 0x1D
  4912                           
  4913  003D                     modulation@x:	
  4914                           ; 4 bytes @ 0x1D
  4915                           
  4916                           
  4917                           ; 4 bytes @ 0x1D
  4918  003D                     	ds	4
  4919  0041                     ___ftmul@exp:	
  4920  0041                     modulation@y:	
  4921                           ; 1 bytes @ 0x21
  4922                           
  4923                           
  4924                           ; 4 bytes @ 0x21
  4925  0041                     	ds	1
  4926  0042                     ___ftmul@f3_as_product:	
  4927                           
  4928                           ; 3 bytes @ 0x22
  4929  0042                     	ds	1
  4930  0043                     updateSwitchTap@tapCntDivisor:	
  4931                           
  4932                           ; 2 bytes @ 0x23
  4933  0043                     	ds	2
  4934  0045                     ??_modulation:	
  4935  0045                     updateSwitchTap@iCnt:	
  4936                           ; 1 bytes @ 0x25
  4937                           
  4938  0045                     ___ftmul@cntr:	
  4939                           ; 1 bytes @ 0x25
  4940                           
  4941                           
  4942                           ; 1 bytes @ 0x25
  4943  0045                     	ds	1
  4944  0046                     ___ftmul@sign:	
  4945                           
  4946                           ; 1 bytes @ 0x26
  4947  0046                     	ds	1
  4948  0047                     ?___ftdiv:	
  4949  0047                     ___ftdiv@f2:	
  4950                           ; 3 bytes @ 0x27
  4951                           
  4952                           
  4953                           ; 3 bytes @ 0x27
  4954  0047                     	ds	3
  4955  004A                     ___ftdiv@f1:	
  4956                           
  4957                           ; 3 bytes @ 0x2A
  4958  004A                     	ds	3
  4959  004D                     ??___ftdiv:	
  4960                           
  4961                           ; 1 bytes @ 0x2D
  4962  004D                     	ds	4
  4963  0051                     ___ftdiv@cntr:	
  4964                           
  4965                           ; 1 bytes @ 0x31
  4966  0051                     	ds	1
  4967  0052                     ___ftdiv@f3:	
  4968                           
  4969                           ; 3 bytes @ 0x32
  4970  0052                     	ds	3
  4971  0055                     ___ftdiv@exp:	
  4972                           
  4973                           ; 1 bytes @ 0x35
  4974  0055                     	ds	1
  4975  0056                     ___ftdiv@sign:	
  4976                           
  4977                           ; 1 bytes @ 0x36
  4978  0056                     	ds	1
  4979  0057                     ?_map:	
  4980  0057                     map@x:	
  4981                           ; 3 bytes @ 0x37
  4982                           
  4983                           
  4984                           ; 3 bytes @ 0x37
  4985  0057                     	ds	3
  4986  005A                     map@in_min:	
  4987                           
  4988                           ; 3 bytes @ 0x3A
  4989  005A                     	ds	3
  4990  005D                     map@in_max:	
  4991                           
  4992                           ; 3 bytes @ 0x3D
  4993  005D                     	ds	3
  4994  0060                     map@out_min:	
  4995                           
  4996                           ; 3 bytes @ 0x40
  4997  0060                     	ds	3
  4998  0063                     map@out_max:	
  4999                           
  5000                           ; 3 bytes @ 0x43
  5001  0063                     	ds	3
  5002  0066                     ??_map:	
  5003  0066                     _map$2160:	
  5004                           ; 1 bytes @ 0x46
  5005                           
  5006                           
  5007                           ; 3 bytes @ 0x46
  5008  0066                     	ds	3
  5009                           
  5010                           	psect	maintext
  5011  02AC                     __pmaintext:	
  5012 ;;
  5013 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5014 ;;
  5015 ;; *************** function _main *****************
  5016 ;; Defined at:
  5017 ;;		line 83 in file "main.c"
  5018 ;; Parameters:    Size  Location     Type
  5019 ;;		None
  5020 ;; Auto vars:     Size  Location     Type
  5021 ;;  i               2    2[BANK3 ] int 
  5022 ;;  i               2    0[BANK3 ] int 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  1    wreg      void 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : B1F/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5033 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5034 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5035 ;;      Totals:         0       0      15       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5036 ;;Total ram usage:       19 bytes
  5037 ;; Hardware stack levels required when called:    6
  5038 ;; This function calls:
  5039 ;;		_ConfigureOscillator
  5040 ;;		_InitApp
  5041 ;;		_InitializeTaps
  5042 ;;		_ReadSavedSettings
  5043 ;;		___altoft
  5044 ;;		___awdiv
  5045 ;;		___awtoft
  5046 ;;		___ftdiv
  5047 ;;		___fttol
  5048 ;;		_adc_convert
  5049 ;;		_initSwitchBypass
  5050 ;;		_map
  5051 ;;		_modulation
  5052 ;;		_read_bottom_tactile
  5053 ;;		_read_top_tactile
  5054 ;;		_set_subdivision
  5055 ;;		_showBootSequence
  5056 ;;		_updateSwitchBypass
  5057 ;;		_updateSwitchTap
  5058 ;;		_update_mode
  5059 ;; This function is called by:
  5060 ;;		Startup code after reset
  5061 ;; This function uses a non-reentrant model
  5062 ;;
  5063                           
  5064                           
  5065                           ;psect for function _main
  5066  02AC                     _main:	
  5067                           
  5068                           ;main.c: 85: ConfigureOscillator();
  5069                           
  5070                           ;incstack = 0
  5071                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5072  02AC  319D  25C6  3182   	fcall	_ConfigureOscillator
  5073                           
  5074                           ;main.c: 86: InitApp();
  5075  02AF  319F  2733  3182   	fcall	_InitApp
  5076                           
  5077                           ;main.c: 88: PORTEbits.RE0 = 1;
  5078  02B2  0020               	movlb	0	; select bank0
  5079  02B3  1410               	bsf	16,0	;volatile
  5080                           
  5081                           ;main.c: 89: PORTEbits.RE1 = 1;
  5082  02B4  1490               	bsf	16,1	;volatile
  5083                           
  5084                           ;main.c: 90: PORTDbits.RD6 = 1;
  5085  02B5  170F               	bsf	15,6	;volatile
  5086                           
  5087                           ;main.c: 91: PORTDbits.RD5 = 1;
  5088  02B6  168F               	bsf	15,5	;volatile
  5089                           
  5090                           ;main.c: 92: PORTCbits.RC0 = 1;
  5091  02B7  140E               	bsf	14,0	;volatile
  5092                           
  5093                           ;main.c: 93: PORTDbits.RD7 = 1;
  5094  02B8  178F               	bsf	15,7	;volatile
  5095                           
  5096                           ;main.c: 95: InitializeTaps();
  5097  02B9  319E  26B5  3182   	fcall	_InitializeTaps
  5098                           
  5099                           ;main.c: 96: initSwitchBypass();
  5100  02BC  319E  2609  3182   	fcall	_initSwitchBypass
  5101                           
  5102                           ;main.c: 99: ReadSavedSettings();
  5103  02BF  3195  2550  3182   	fcall	_ReadSavedSettings
  5104  02C2                     l5736:	
  5105                           ;main.c: 101: while (1) {
  5106                           
  5107                           
  5108                           ;main.c: 102: read_bottom_tactile();
  5109  02C2  3192  2259  3182   	fcall	_read_bottom_tactile
  5110                           
  5111                           ;main.c: 103: read_top_tactile();
  5112  02C5  3192  22E7  3182   	fcall	_read_top_tactile
  5113                           
  5114                           ;main.c: 106: update_mode();
  5115  02C8  3188  2001  3182   	fcall	_update_mode
  5116                           
  5117                           ;main.c: 108: if (PORTDbits.RD7 == 0) {
  5118  02CB  0020               	movlb	0	; select bank0
  5119  02CC  1B8F               	btfsc	15,7	;volatile
  5120  02CD  2AEC               	goto	l5750
  5121                           
  5122                           ;main.c: 109: debounce_mode1++;
  5123  02CE  3001               	movlw	1
  5124  02CF  0022               	movlb	2	; select bank2
  5125  02D0  07B2               	addwf	_debounce_mode1^(0+256),f
  5126  02D1  3000               	movlw	0
  5127  02D2  3DB3               	addwfc	(_debounce_mode1+1)^(0+256),f
  5128                           
  5129                           ;main.c: 110: if (debounce_mode1 > 25) {
  5130  02D3  0833               	movf	(_debounce_mode1+1)^(0+256),w
  5131  02D4  3A80               	xorlw	128
  5132  02D5  0021               	movlb	1	; select bank1
  5133  02D6  00BA               	movwf	??_main^(0+128)
  5134  02D7  3080               	movlw	128
  5135  02D8  023A               	subwf	??_main^(0+128),w
  5136  02D9  1D03               	skipz
  5137  02DA  2ADE               	goto	u6495
  5138  02DB  301A               	movlw	26
  5139  02DC  0022               	movlb	2	; select bank2
  5140  02DD  0232               	subwf	_debounce_mode1^(0+256),w
  5141  02DE                     u6495:	
  5142  02DE  1C03               	skipc
  5143  02DF  2AEF               	goto	l5752
  5144                           
  5145                           ;main.c: 111: debounce_mode1 = 25;
  5146  02E0  3019               	movlw	25
  5147  02E1  0022               	movlb	2	; select bank2
  5148  02E2  00B2               	movwf	_debounce_mode1^(0+256)
  5149  02E3  3000               	movlw	0
  5150  02E4  00B3               	movwf	(_debounce_mode1^(0+256)+1)
  5151                           
  5152                           ;main.c: 115: showBootSequence();
  5153  02E5  319E  26DB  3182   	fcall	_showBootSequence
  5154  02E8                     l296:	
  5155                           ;main.c: 118: while (PORTDbits.RD7 == 0) {
  5156                           
  5157  02E8  0020               	movlb	0	; select bank0
  5158  02E9  1B8F               	btfsc	15,7	;volatile
  5159  02EA  2AEF               	goto	l5752
  5160  02EB  2AE8               	goto	l296
  5161  02EC                     l5750:	
  5162                           ;main.c: 119: }
  5163                           ;main.c: 120: }
  5164                           ;main.c: 121: } else {
  5165                           
  5166                           
  5167                           ;main.c: 122: debounce_mode1 = 0;
  5168  02EC  0022               	movlb	2	; select bank2
  5169  02ED  01B2               	clrf	_debounce_mode1^(0+256)
  5170  02EE  01B3               	clrf	(_debounce_mode1+1)^(0+256)
  5171  02EF                     l5752:	
  5172                           
  5173                           ;main.c: 123: }
  5174                           ;main.c: 125: updateSwitchBypass();
  5175  02EF  3189  21BE  3182   	fcall	_updateSwitchBypass
  5176                           
  5177                           ;main.c: 126: updateSwitchTap();
  5178  02F2  318B  2396  3182   	fcall	_updateSwitchTap
  5179                           
  5180                           ;main.c: 220: knob_1_pos = adc_convert(0);
  5181  02F5  3000               	movlw	0
  5182  02F6  3190  2003  3182   	fcall	_adc_convert
  5183  02F9  0020               	movlb	0	; select bank0
  5184  02FA  0823               	movf	?_adc_convert+1,w
  5185  02FB  0022               	movlb	2	; select bank2
  5186  02FC  00BD               	movwf	(_knob_1_pos+1)^(0+256)
  5187  02FD  0020               	movlb	0	; select bank0
  5188  02FE  0822               	movf	?_adc_convert,w
  5189  02FF  0022               	movlb	2	; select bank2
  5190  0300  00BC               	movwf	_knob_1_pos^(0+256)
  5191                           
  5192                           ;main.c: 221: knob_2_pos = adc_convert(1);
  5193  0301  3001               	movlw	1
  5194  0302  3190  2003  3182   	fcall	_adc_convert
  5195  0305  0020               	movlb	0	; select bank0
  5196  0306  0823               	movf	?_adc_convert+1,w
  5197  0307  0022               	movlb	2	; select bank2
  5198  0308  00BF               	movwf	(_knob_2_pos+1)^(0+256)
  5199  0309  0020               	movlb	0	; select bank0
  5200  030A  0822               	movf	?_adc_convert,w
  5201  030B  0022               	movlb	2	; select bank2
  5202  030C  00BE               	movwf	_knob_2_pos^(0+256)
  5203                           
  5204                           ;main.c: 222: knob_3_pos = adc_convert(2);
  5205  030D  3002               	movlw	2
  5206  030E  3190  2003  3182   	fcall	_adc_convert
  5207  0311  0020               	movlb	0	; select bank0
  5208  0312  0823               	movf	?_adc_convert+1,w
  5209  0313  0022               	movlb	2	; select bank2
  5210  0314  00C1               	movwf	(_knob_3_pos+1)^(0+256)
  5211  0315  0020               	movlb	0	; select bank0
  5212  0316  0822               	movf	?_adc_convert,w
  5213  0317  0022               	movlb	2	; select bank2
  5214  0318  00C0               	movwf	_knob_3_pos^(0+256)
  5215                           
  5216                           ;main.c: 223: knob_4_pos = adc_convert(3);
  5217  0319  3003               	movlw	3
  5218  031A  3190  2003  3182   	fcall	_adc_convert
  5219  031D  0020               	movlb	0	; select bank0
  5220  031E  0823               	movf	?_adc_convert+1,w
  5221  031F  0022               	movlb	2	; select bank2
  5222  0320  00C3               	movwf	(_knob_4_pos+1)^(0+256)
  5223  0321  0020               	movlb	0	; select bank0
  5224  0322  0822               	movf	?_adc_convert,w
  5225  0323  0022               	movlb	2	; select bank2
  5226  0324  00C2               	movwf	_knob_4_pos^(0+256)
  5227                           
  5228                           ;main.c: 224: knob_5_pos = adc_convert(4);
  5229  0325  3004               	movlw	4
  5230  0326  3190  2003  3182   	fcall	_adc_convert
  5231  0329  0020               	movlb	0	; select bank0
  5232  032A  0823               	movf	?_adc_convert+1,w
  5233  032B  0022               	movlb	2	; select bank2
  5234  032C  00C5               	movwf	(_knob_5_pos+1)^(0+256)
  5235  032D  0020               	movlb	0	; select bank0
  5236  032E  0822               	movf	?_adc_convert,w
  5237  032F  0022               	movlb	2	; select bank2
  5238  0330  00C4               	movwf	_knob_5_pos^(0+256)
  5239                           
  5240                           ;main.c: 251: LATBbits.LATB1 = 0;
  5241  0331  108D               	bcf	13,1	;volatile
  5242                           
  5243                           ;main.c: 252: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5244  0332  0021               	movlb	1	; select bank1
  5245  0333  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5246  0334  00BA               	movwf	??_main^(0+128)
  5247  0335  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5248  0336  00BB               	movwf	(??_main^(0+128)+1)
  5249  0337  0ABA               	incf	??_main^(0+128),f
  5250  0338  1903               	skipnz
  5251  0339  0ABB               	incf	(??_main^(0+128)+1),f
  5252  033A  0022               	movlb	2	; select bank2
  5253  033B  083C               	movf	_knob_1_pos^(0+256),w
  5254  033C  0021               	movlb	1	; select bank1
  5255  033D  073A               	addwf	??_main^(0+128),w
  5256  033E  00BC               	movwf	(??_main+2)^(0+128)
  5257  033F  0022               	movlb	2	; select bank2
  5258  0340  083D               	movf	(_knob_1_pos+1)^(0+256),w
  5259  0341  0021               	movlb	1	; select bank1
  5260  0342  3D3B               	addwfc	(??_main+1)^(0+128),w
  5261  0343  00BD               	movwf	(??_main+3)^(0+128)
  5262  0344  083D               	movf	(??_main+3)^(0+128),w
  5263  0345  3A80               	xorlw	128
  5264  0346  00BE               	movwf	(??_main+4)^(0+128)
  5265  0347  3080               	movlw	128
  5266  0348  023E               	subwf	(??_main+4)^(0+128),w
  5267  0349  1D03               	skipz
  5268  034A  2B4D               	goto	u6515
  5269  034B  3004               	movlw	4
  5270  034C  023C               	subwf	(??_main+2)^(0+128),w
  5271  034D                     u6515:	
  5272  034D  1803               	skipnc
  5273  034E  2B6C               	goto	l5772
  5274  034F  0021               	movlb	1	; select bank1
  5275  0350  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5276  0351  00BA               	movwf	??_main^(0+128)
  5277  0352  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5278  0353  00BB               	movwf	(??_main^(0+128)+1)
  5279  0354  0ABA               	incf	??_main^(0+128),f
  5280  0355  1903               	skipnz
  5281  0356  0ABB               	incf	(??_main^(0+128)+1),f
  5282  0357  0022               	movlb	2	; select bank2
  5283  0358  083C               	movf	_knob_1_pos^(0+256),w
  5284  0359  0021               	movlb	1	; select bank1
  5285  035A  073A               	addwf	??_main^(0+128),w
  5286  035B  00BC               	movwf	(??_main+2)^(0+128)
  5287  035C  0022               	movlb	2	; select bank2
  5288  035D  083D               	movf	(_knob_1_pos+1)^(0+256),w
  5289  035E  0021               	movlb	1	; select bank1
  5290  035F  3D3B               	addwfc	(??_main+1)^(0+128),w
  5291  0360  00BD               	movwf	(??_main+3)^(0+128)
  5292  0361  083D               	movf	(??_main+3)^(0+128),w
  5293  0362  3A80               	xorlw	128
  5294  0363  00BE               	movwf	(??_main+4)^(0+128)
  5295  0364  307F               	movlw	127
  5296  0365  023E               	subwf	(??_main+4)^(0+128),w
  5297  0366  1D03               	skipz
  5298  0367  2B6A               	goto	u6525
  5299  0368  30FD               	movlw	253
  5300  0369  023C               	subwf	(??_main+2)^(0+128),w
  5301  036A                     u6525:	
  5302  036A  1803               	skipnc
  5303  036B  2BC0               	goto	l5780
  5304  036C                     l5772:	
  5305                           
  5306                           ;main.c: 253: knob1_prev = knob_1_pos;
  5307  036C  0022               	movlb	2	; select bank2
  5308  036D  083D               	movf	(_knob_1_pos+1)^(0+256),w
  5309  036E  0021               	movlb	1	; select bank1
  5310  036F  00D4               	movwf	(_knob1_prev+1)^(0+128)	;volatile
  5311  0370  0022               	movlb	2	; select bank2
  5312  0371  083C               	movf	_knob_1_pos^(0+256),w
  5313  0372  0021               	movlb	1	; select bank1
  5314  0373  00D3               	movwf	_knob1_prev^(0+128)	;volatile
  5315                           
  5316                           ;main.c: 254: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5317  0374  3000               	movlw	0
  5318  0375  0020               	movlb	0	; select bank0
  5319  0376  00E3               	movwf	map@out_max
  5320  0377  3048               	movlw	72
  5321  0378  00E4               	movwf	map@out_max+1
  5322  0379  3043               	movlw	67
  5323  037A  00E5               	movwf	map@out_max+2
  5324  037B  3080               	movlw	128
  5325  037C  00E0               	movwf	map@out_min
  5326  037D  3092               	movlw	146
  5327  037E  00E1               	movwf	map@out_min+1
  5328  037F  3044               	movlw	68
  5329  0380  00E2               	movwf	map@out_min+2
  5330  0381  30C0               	movlw	192
  5331  0382  00DD               	movwf	map@in_max
  5332  0383  307F               	movlw	127
  5333  0384  00DE               	movwf	map@in_max+1
  5334  0385  3044               	movlw	68
  5335  0386  00DF               	movwf	map@in_max+2
  5336  0387  3000               	movlw	0
  5337  0388  00DA               	movwf	map@in_min
  5338  0389  3000               	movlw	0
  5339  038A  00DB               	movwf	map@in_min+1
  5340  038B  3000               	movlw	0
  5341  038C  00DC               	movwf	map@in_min+2
  5342  038D  0021               	movlb	1	; select bank1
  5343  038E  0854               	movf	(_knob1_prev+1)^(0+128),w	;volatile
  5344  038F  0020               	movlb	0	; select bank0
  5345  0390  00AB               	movwf	___awtoft@c+1
  5346  0391  0021               	movlb	1	; select bank1
  5347  0392  0853               	movf	_knob1_prev^(0+128),w	;volatile
  5348  0393  0020               	movlb	0	; select bank0
  5349  0394  00AA               	movwf	___awtoft@c
  5350  0395  3187  27DC  3182   	fcall	___awtoft
  5351  0398  0020               	movlb	0	; select bank0
  5352  0399  082A               	movf	?___awtoft,w
  5353  039A  00D7               	movwf	map@x
  5354  039B  082B               	movf	?___awtoft+1,w
  5355  039C  00D8               	movwf	map@x+1
  5356  039D  082C               	movf	?___awtoft+2,w
  5357  039E  00D9               	movwf	map@x+2
  5358  039F  3196  26CC  3182   	fcall	_map
  5359  03A2  0020               	movlb	0	; select bank0
  5360  03A3  0857               	movf	?_map,w
  5361  03A4  0021               	movlb	1	; select bank1
  5362  03A5  00A0               	movwf	___fttol@f1^(0+128)
  5363  03A6  0020               	movlb	0	; select bank0
  5364  03A7  0858               	movf	?_map+1,w
  5365  03A8  0021               	movlb	1	; select bank1
  5366  03A9  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5367  03AA  0020               	movlb	0	; select bank0
  5368  03AB  0859               	movf	?_map+2,w
  5369  03AC  0021               	movlb	1	; select bank1
  5370  03AD  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5371  03AE  3196  2645  3182   	fcall	___fttol
  5372  03B1  0021               	movlb	1	; select bank1
  5373  03B2  0823               	movf	(?___fttol+3)^(0+128),w
  5374  03B3  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5375  03B4  0822               	movf	(?___fttol+2)^(0+128),w
  5376  03B5  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5377  03B6  0821               	movf	(?___fttol+1)^(0+128),w
  5378  03B7  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5379  03B8  0820               	movf	?___fttol^(0+128),w
  5380  03B9  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  5381                           
  5382                           ;main.c: 255: delay_time_changed = 1;
  5383  03BA  3001               	movlw	1
  5384  03BB  0022               	movlb	2	; select bank2
  5385  03BC  00DE               	movwf	_delay_time_changed^(0+256)
  5386  03BD  3000               	movlw	0
  5387  03BE  00DF               	movwf	(_delay_time_changed^(0+256)+1)
  5388                           
  5389                           ;main.c: 256: LATBbits.LATB1 = 1;
  5390  03BF  148D               	bsf	13,1	;volatile
  5391  03C0                     l5780:	
  5392                           
  5393                           ;main.c: 257: }
  5394                           ;main.c: 267: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5395  03C0  0021               	movlb	1	; select bank1
  5396  03C1  0955               	comf	_knob2_prev^(0+128),w	;volatile
  5397  03C2  00BA               	movwf	??_main^(0+128)
  5398  03C3  0956               	comf	(_knob2_prev+1)^(0+128),w	;volatile
  5399  03C4  00BB               	movwf	(??_main^(0+128)+1)
  5400  03C5  0ABA               	incf	??_main^(0+128),f
  5401  03C6  1903               	skipnz
  5402  03C7  0ABB               	incf	(??_main^(0+128)+1),f
  5403  03C8  0022               	movlb	2	; select bank2
  5404  03C9  083E               	movf	_knob_2_pos^(0+256),w
  5405  03CA  0021               	movlb	1	; select bank1
  5406  03CB  073A               	addwf	??_main^(0+128),w
  5407  03CC  00BC               	movwf	(??_main+2)^(0+128)
  5408  03CD  0022               	movlb	2	; select bank2
  5409  03CE  083F               	movf	(_knob_2_pos+1)^(0+256),w
  5410  03CF  0021               	movlb	1	; select bank1
  5411  03D0  3D3B               	addwfc	(??_main+1)^(0+128),w
  5412  03D1  00BD               	movwf	(??_main+3)^(0+128)
  5413  03D2  083D               	movf	(??_main+3)^(0+128),w
  5414  03D3  3A80               	xorlw	128
  5415  03D4  00BE               	movwf	(??_main+4)^(0+128)
  5416  03D5  3080               	movlw	128
  5417  03D6  023E               	subwf	(??_main+4)^(0+128),w
  5418  03D7  1D03               	skipz
  5419  03D8  2BDB               	goto	u6535
  5420  03D9  3004               	movlw	4
  5421  03DA  023C               	subwf	(??_main+2)^(0+128),w
  5422  03DB                     u6535:	
  5423  03DB  1803               	skipnc
  5424  03DC  2BFA               	goto	l5784
  5425  03DD  0021               	movlb	1	; select bank1
  5426  03DE  0955               	comf	_knob2_prev^(0+128),w	;volatile
  5427  03DF  00BA               	movwf	??_main^(0+128)
  5428  03E0  0956               	comf	(_knob2_prev+1)^(0+128),w	;volatile
  5429  03E1  00BB               	movwf	(??_main^(0+128)+1)
  5430  03E2  0ABA               	incf	??_main^(0+128),f
  5431  03E3  1903               	skipnz
  5432  03E4  0ABB               	incf	(??_main^(0+128)+1),f
  5433  03E5  0022               	movlb	2	; select bank2
  5434  03E6  083E               	movf	_knob_2_pos^(0+256),w
  5435  03E7  0021               	movlb	1	; select bank1
  5436  03E8  073A               	addwf	??_main^(0+128),w
  5437  03E9  00BC               	movwf	(??_main+2)^(0+128)
  5438  03EA  0022               	movlb	2	; select bank2
  5439  03EB  083F               	movf	(_knob_2_pos+1)^(0+256),w
  5440  03EC  0021               	movlb	1	; select bank1
  5441  03ED  3D3B               	addwfc	(??_main+1)^(0+128),w
  5442  03EE  00BD               	movwf	(??_main+3)^(0+128)
  5443  03EF  083D               	movf	(??_main+3)^(0+128),w
  5444  03F0  3A80               	xorlw	128
  5445  03F1  00BE               	movwf	(??_main+4)^(0+128)
  5446  03F2  307F               	movlw	127
  5447  03F3  023E               	subwf	(??_main+4)^(0+128),w
  5448  03F4  1D03               	skipz
  5449  03F5  2BF8               	goto	u6545
  5450  03F6  30FD               	movlw	253
  5451  03F7  023C               	subwf	(??_main+2)^(0+128),w
  5452  03F8                     u6545:	
  5453  03F8  1803               	skipnc
  5454  03F9  2C5C               	goto	l5792
  5455  03FA                     l5784:	
  5456                           
  5457                           ;main.c: 268: knob2_prev = knob_2_pos;
  5458  03FA  0022               	movlb	2	; select bank2
  5459  03FB  083F               	movf	(_knob_2_pos+1)^(0+256),w
  5460  03FC  0021               	movlb	1	; select bank1
  5461  03FD  00D6               	movwf	(_knob2_prev+1)^(0+128)	;volatile
  5462  03FE  0022               	movlb	2	; select bank2
  5463  03FF  083E               	movf	_knob_2_pos^(0+256),w
  5464  0400  0021               	movlb	1	; select bank1
  5465  0401  00D5               	movwf	_knob2_prev^(0+128)	;volatile
  5466                           
  5467                           ;main.c: 269: int i = map(knob2_prev, 0, 1023, 0, 39);
  5468  0402  3000               	movlw	0
  5469  0403  0020               	movlb	0	; select bank0
  5470  0404  00E3               	movwf	map@out_max
  5471  0405  301C               	movlw	28
  5472  0406  00E4               	movwf	map@out_max+1
  5473  0407  3042               	movlw	66
  5474  0408  00E5               	movwf	map@out_max+2
  5475  0409  3000               	movlw	0
  5476  040A  00E0               	movwf	map@out_min
  5477  040B  3000               	movlw	0
  5478  040C  00E1               	movwf	map@out_min+1
  5479  040D  3000               	movlw	0
  5480  040E  00E2               	movwf	map@out_min+2
  5481  040F  30C0               	movlw	192
  5482  0410  00DD               	movwf	map@in_max
  5483  0411  307F               	movlw	127
  5484  0412  00DE               	movwf	map@in_max+1
  5485  0413  3044               	movlw	68
  5486  0414  00DF               	movwf	map@in_max+2
  5487  0415  3000               	movlw	0
  5488  0416  00DA               	movwf	map@in_min
  5489  0417  3000               	movlw	0
  5490  0418  00DB               	movwf	map@in_min+1
  5491  0419  3000               	movlw	0
  5492  041A  00DC               	movwf	map@in_min+2
  5493  041B  0021               	movlb	1	; select bank1
  5494  041C  0856               	movf	(_knob2_prev+1)^(0+128),w	;volatile
  5495  041D  0020               	movlb	0	; select bank0
  5496  041E  00AB               	movwf	___awtoft@c+1
  5497  041F  0021               	movlb	1	; select bank1
  5498  0420  0855               	movf	_knob2_prev^(0+128),w	;volatile
  5499  0421  0020               	movlb	0	; select bank0
  5500  0422  00AA               	movwf	___awtoft@c
  5501  0423  3187  27DC  3182   	fcall	___awtoft
  5502  0426  0020               	movlb	0	; select bank0
  5503  0427  082A               	movf	?___awtoft,w
  5504  0428  00D7               	movwf	map@x
  5505  0429  082B               	movf	?___awtoft+1,w
  5506  042A  00D8               	movwf	map@x+1
  5507  042B  082C               	movf	?___awtoft+2,w
  5508  042C  00D9               	movwf	map@x+2
  5509  042D  3196  26CC  3182   	fcall	_map
  5510  0430  0020               	movlb	0	; select bank0
  5511  0431  0857               	movf	?_map,w
  5512  0432  0021               	movlb	1	; select bank1
  5513  0433  00A0               	movwf	___fttol@f1^(0+128)
  5514  0434  0020               	movlb	0	; select bank0
  5515  0435  0858               	movf	?_map+1,w
  5516  0436  0021               	movlb	1	; select bank1
  5517  0437  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5518  0438  0020               	movlb	0	; select bank0
  5519  0439  0859               	movf	?_map+2,w
  5520  043A  0021               	movlb	1	; select bank1
  5521  043B  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5522  043C  3196  2645  3182   	fcall	___fttol
  5523  043F  0021               	movlb	1	; select bank1
  5524  0440  0821               	movf	(?___fttol^(0+128)+1),w
  5525  0441  0023               	movlb	3	; select bank3
  5526  0442  00E9               	movwf	(main@i+1)^(0+384)
  5527  0443  0021               	movlb	1	; select bank1
  5528  0444  0820               	movf	?___fttol^(0+128),w
  5529  0445  0023               	movlb	3	; select bank3
  5530  0446  00E8               	movwf	main@i^(0+384)
  5531                           
  5532                           ;main.c: 270: CCPR2 = iB25k[i];
  5533  0447  3568               	lslf	main@i^(0+384),w
  5534  0448  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5535  0449  0086               	movwf	6
  5536  044A  3004               	movlw	4	; select bank8/9
  5537  044B  0087               	movwf	7
  5538  044C  3F40               	moviw [0]fsr1
  5539  044D  0025               	movlb	5	; select bank5
  5540  044E  0098               	movwf	24	;volatile
  5541  044F  3F41               	moviw [1]fsr1
  5542  0450  0099               	movwf	25	;volatile
  5543                           
  5544                           ;main.c: 271: CCPR3 = B25k[i];
  5545  0451  0023               	movlb	3	; select bank3
  5546  0452  3568               	lslf	main@i^(0+384),w
  5547  0453  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5548  0454  0086               	movwf	6
  5549  0455  3003               	movlw	3	; select bank7/8
  5550  0456  0087               	movwf	7
  5551  0457  3F40               	moviw [0]fsr1
  5552  0458  0026               	movlb	6	; select bank6
  5553  0459  0091               	movwf	17	;volatile
  5554  045A  3F41               	moviw [1]fsr1
  5555  045B  0092               	movwf	18	;volatile
  5556  045C                     l5792:	
  5557                           
  5558                           ;main.c: 272: }
  5559                           ;main.c: 282: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5560  045C  0021               	movlb	1	; select bank1
  5561  045D  0957               	comf	_knob3_prev^(0+128),w	;volatile
  5562  045E  00BA               	movwf	??_main^(0+128)
  5563  045F  0958               	comf	(_knob3_prev+1)^(0+128),w	;volatile
  5564  0460  00BB               	movwf	(??_main^(0+128)+1)
  5565  0461  0ABA               	incf	??_main^(0+128),f
  5566  0462  1903               	skipnz
  5567  0463  0ABB               	incf	(??_main^(0+128)+1),f
  5568  0464  0022               	movlb	2	; select bank2
  5569  0465  0840               	movf	_knob_3_pos^(0+256),w
  5570  0466  0021               	movlb	1	; select bank1
  5571  0467  073A               	addwf	??_main^(0+128),w
  5572  0468  00BC               	movwf	(??_main+2)^(0+128)
  5573  0469  0022               	movlb	2	; select bank2
  5574  046A  0841               	movf	(_knob_3_pos+1)^(0+256),w
  5575  046B  0021               	movlb	1	; select bank1
  5576  046C  3D3B               	addwfc	(??_main+1)^(0+128),w
  5577  046D  00BD               	movwf	(??_main+3)^(0+128)
  5578  046E  083D               	movf	(??_main+3)^(0+128),w
  5579  046F  3A80               	xorlw	128
  5580  0470  00BE               	movwf	(??_main+4)^(0+128)
  5581  0471  3080               	movlw	128
  5582  0472  023E               	subwf	(??_main+4)^(0+128),w
  5583  0473  1D03               	skipz
  5584  0474  2C77               	goto	u6555
  5585  0475  3004               	movlw	4
  5586  0476  023C               	subwf	(??_main+2)^(0+128),w
  5587  0477                     u6555:	
  5588  0477  1803               	skipnc
  5589  0478  2C96               	goto	l5796
  5590  0479  0021               	movlb	1	; select bank1
  5591  047A  0957               	comf	_knob3_prev^(0+128),w	;volatile
  5592  047B  00BA               	movwf	??_main^(0+128)
  5593  047C  0958               	comf	(_knob3_prev+1)^(0+128),w	;volatile
  5594  047D  00BB               	movwf	(??_main^(0+128)+1)
  5595  047E  0ABA               	incf	??_main^(0+128),f
  5596  047F  1903               	skipnz
  5597  0480  0ABB               	incf	(??_main^(0+128)+1),f
  5598  0481  0022               	movlb	2	; select bank2
  5599  0482  0840               	movf	_knob_3_pos^(0+256),w
  5600  0483  0021               	movlb	1	; select bank1
  5601  0484  073A               	addwf	??_main^(0+128),w
  5602  0485  00BC               	movwf	(??_main+2)^(0+128)
  5603  0486  0022               	movlb	2	; select bank2
  5604  0487  0841               	movf	(_knob_3_pos+1)^(0+256),w
  5605  0488  0021               	movlb	1	; select bank1
  5606  0489  3D3B               	addwfc	(??_main+1)^(0+128),w
  5607  048A  00BD               	movwf	(??_main+3)^(0+128)
  5608  048B  083D               	movf	(??_main+3)^(0+128),w
  5609  048C  3A80               	xorlw	128
  5610  048D  00BE               	movwf	(??_main+4)^(0+128)
  5611  048E  307F               	movlw	127
  5612  048F  023E               	subwf	(??_main+4)^(0+128),w
  5613  0490  1D03               	skipz
  5614  0491  2C94               	goto	u6565
  5615  0492  30FD               	movlw	253
  5616  0493  023C               	subwf	(??_main+2)^(0+128),w
  5617  0494                     u6565:	
  5618  0494  1803               	skipnc
  5619  0495  2CF8               	goto	l5804
  5620  0496                     l5796:	
  5621                           
  5622                           ;main.c: 283: knob3_prev = knob_3_pos;
  5623  0496  0022               	movlb	2	; select bank2
  5624  0497  0841               	movf	(_knob_3_pos+1)^(0+256),w
  5625  0498  0021               	movlb	1	; select bank1
  5626  0499  00D8               	movwf	(_knob3_prev+1)^(0+128)	;volatile
  5627  049A  0022               	movlb	2	; select bank2
  5628  049B  0840               	movf	_knob_3_pos^(0+256),w
  5629  049C  0021               	movlb	1	; select bank1
  5630  049D  00D7               	movwf	_knob3_prev^(0+128)	;volatile
  5631                           
  5632                           ;main.c: 284: int i = map(knob3_prev, 0, 1023, 16, 0);
  5633  049E  3000               	movlw	0
  5634  049F  0020               	movlb	0	; select bank0
  5635  04A0  00E3               	movwf	map@out_max
  5636  04A1  3000               	movlw	0
  5637  04A2  00E4               	movwf	map@out_max+1
  5638  04A3  3000               	movlw	0
  5639  04A4  00E5               	movwf	map@out_max+2
  5640  04A5  3000               	movlw	0
  5641  04A6  00E0               	movwf	map@out_min
  5642  04A7  3080               	movlw	128
  5643  04A8  00E1               	movwf	map@out_min+1
  5644  04A9  3041               	movlw	65
  5645  04AA  00E2               	movwf	map@out_min+2
  5646  04AB  30C0               	movlw	192
  5647  04AC  00DD               	movwf	map@in_max
  5648  04AD  307F               	movlw	127
  5649  04AE  00DE               	movwf	map@in_max+1
  5650  04AF  3044               	movlw	68
  5651  04B0  00DF               	movwf	map@in_max+2
  5652  04B1  3000               	movlw	0
  5653  04B2  00DA               	movwf	map@in_min
  5654  04B3  3000               	movlw	0
  5655  04B4  00DB               	movwf	map@in_min+1
  5656  04B5  3000               	movlw	0
  5657  04B6  00DC               	movwf	map@in_min+2
  5658  04B7  0021               	movlb	1	; select bank1
  5659  04B8  0858               	movf	(_knob3_prev+1)^(0+128),w	;volatile
  5660  04B9  0020               	movlb	0	; select bank0
  5661  04BA  00AB               	movwf	___awtoft@c+1
  5662  04BB  0021               	movlb	1	; select bank1
  5663  04BC  0857               	movf	_knob3_prev^(0+128),w	;volatile
  5664  04BD  0020               	movlb	0	; select bank0
  5665  04BE  00AA               	movwf	___awtoft@c
  5666  04BF  3187  27DC  3182   	fcall	___awtoft
  5667  04C2  0020               	movlb	0	; select bank0
  5668  04C3  082A               	movf	?___awtoft,w
  5669  04C4  00D7               	movwf	map@x
  5670  04C5  082B               	movf	?___awtoft+1,w
  5671  04C6  00D8               	movwf	map@x+1
  5672  04C7  082C               	movf	?___awtoft+2,w
  5673  04C8  00D9               	movwf	map@x+2
  5674  04C9  3196  26CC  3182   	fcall	_map
  5675  04CC  0020               	movlb	0	; select bank0
  5676  04CD  0857               	movf	?_map,w
  5677  04CE  0021               	movlb	1	; select bank1
  5678  04CF  00A0               	movwf	___fttol@f1^(0+128)
  5679  04D0  0020               	movlb	0	; select bank0
  5680  04D1  0858               	movf	?_map+1,w
  5681  04D2  0021               	movlb	1	; select bank1
  5682  04D3  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5683  04D4  0020               	movlb	0	; select bank0
  5684  04D5  0859               	movf	?_map+2,w
  5685  04D6  0021               	movlb	1	; select bank1
  5686  04D7  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5687  04D8  3196  2645  3182   	fcall	___fttol
  5688  04DB  0021               	movlb	1	; select bank1
  5689  04DC  0821               	movf	(?___fttol^(0+128)+1),w
  5690  04DD  0023               	movlb	3	; select bank3
  5691  04DE  00EB               	movwf	(main@i_379+1)^(0+384)
  5692  04DF  0021               	movlb	1	; select bank1
  5693  04E0  0820               	movf	?___fttol^(0+128),w
  5694  04E1  0023               	movlb	3	; select bank3
  5695  04E2  00EA               	movwf	main@i_379^(0+384)
  5696                           
  5697                           ;main.c: 285: CCPR4 = iB25k[i];
  5698  04E3  356A               	lslf	main@i_379^(0+384),w
  5699  04E4  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5700  04E5  0086               	movwf	6
  5701  04E6  3004               	movlw	4	; select bank8/9
  5702  04E7  0087               	movwf	7
  5703  04E8  3F40               	moviw [0]fsr1
  5704  04E9  0026               	movlb	6	; select bank6
  5705  04EA  0098               	movwf	24	;volatile
  5706  04EB  3F41               	moviw [1]fsr1
  5707  04EC  0099               	movwf	25	;volatile
  5708                           
  5709                           ;main.c: 286: CCPR5 = B25k[i];
  5710  04ED  0023               	movlb	3	; select bank3
  5711  04EE  356A               	lslf	main@i_379^(0+384),w
  5712  04EF  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5713  04F0  0086               	movwf	6
  5714  04F1  3003               	movlw	3	; select bank7/8
  5715  04F2  0087               	movwf	7
  5716  04F3  3F40               	moviw [0]fsr1
  5717  04F4  0026               	movlb	6	; select bank6
  5718  04F5  009C               	movwf	28	;volatile
  5719  04F6  3F41               	moviw [1]fsr1
  5720  04F7  009D               	movwf	29	;volatile
  5721  04F8                     l5804:	
  5722                           
  5723                           ;main.c: 287: }
  5724                           ;main.c: 297: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5725  04F8  0022               	movlb	2	; select bank2
  5726  04F9  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5727  04FA  0021               	movlb	1	; select bank1
  5728  04FB  00BA               	movwf	??_main^(0+128)
  5729  04FC  0022               	movlb	2	; select bank2
  5730  04FD  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5731  04FE  0021               	movlb	1	; select bank1
  5732  04FF  00BB               	movwf	(??_main^(0+128)+1)
  5733  0500  0ABA               	incf	??_main^(0+128),f
  5734  0501  1903               	skipnz
  5735  0502  0ABB               	incf	(??_main^(0+128)+1),f
  5736  0503  0022               	movlb	2	; select bank2
  5737  0504  0842               	movf	_knob_4_pos^(0+256),w
  5738  0505  0021               	movlb	1	; select bank1
  5739  0506  073A               	addwf	??_main^(0+128),w
  5740  0507  00BC               	movwf	(??_main+2)^(0+128)
  5741  0508  0022               	movlb	2	; select bank2
  5742  0509  0843               	movf	(_knob_4_pos+1)^(0+256),w
  5743  050A  0021               	movlb	1	; select bank1
  5744  050B  3D3B               	addwfc	(??_main+1)^(0+128),w
  5745  050C  00BD               	movwf	(??_main+3)^(0+128)
  5746  050D  083D               	movf	(??_main+3)^(0+128),w
  5747  050E  3A80               	xorlw	128
  5748  050F  00BE               	movwf	(??_main+4)^(0+128)
  5749  0510  3080               	movlw	128
  5750  0511  023E               	subwf	(??_main+4)^(0+128),w
  5751  0512  1D03               	skipz
  5752  0513  2D16               	goto	u6575
  5753  0514  3004               	movlw	4
  5754  0515  023C               	subwf	(??_main+2)^(0+128),w
  5755  0516                     u6575:	
  5756  0516  1803               	skipnc
  5757  0517  2D38               	goto	l5808
  5758  0518  0022               	movlb	2	; select bank2
  5759  0519  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5760  051A  0021               	movlb	1	; select bank1
  5761  051B  00BA               	movwf	??_main^(0+128)
  5762  051C  0022               	movlb	2	; select bank2
  5763  051D  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5764  051E  0021               	movlb	1	; select bank1
  5765  051F  00BB               	movwf	(??_main^(0+128)+1)
  5766  0520  0ABA               	incf	??_main^(0+128),f
  5767  0521  1903               	skipnz
  5768  0522  0ABB               	incf	(??_main^(0+128)+1),f
  5769  0523  0022               	movlb	2	; select bank2
  5770  0524  0842               	movf	_knob_4_pos^(0+256),w
  5771  0525  0021               	movlb	1	; select bank1
  5772  0526  073A               	addwf	??_main^(0+128),w
  5773  0527  00BC               	movwf	(??_main+2)^(0+128)
  5774  0528  0022               	movlb	2	; select bank2
  5775  0529  0843               	movf	(_knob_4_pos+1)^(0+256),w
  5776  052A  0021               	movlb	1	; select bank1
  5777  052B  3D3B               	addwfc	(??_main+1)^(0+128),w
  5778  052C  00BD               	movwf	(??_main+3)^(0+128)
  5779  052D  083D               	movf	(??_main+3)^(0+128),w
  5780  052E  3A80               	xorlw	128
  5781  052F  00BE               	movwf	(??_main+4)^(0+128)
  5782  0530  307F               	movlw	127
  5783  0531  023E               	subwf	(??_main+4)^(0+128),w
  5784  0532  1D03               	skipz
  5785  0533  2D36               	goto	u6585
  5786  0534  30FD               	movlw	253
  5787  0535  023C               	subwf	(??_main+2)^(0+128),w
  5788  0536                     u6585:	
  5789  0536  1803               	skipnc
  5790  0537  2D82               	goto	l5812
  5791  0538                     l5808:	
  5792                           
  5793                           ;main.c: 298: knob4_prev = knob_4_pos;
  5794  0538  0022               	movlb	2	; select bank2
  5795  0539  0843               	movf	(_knob_4_pos+1)^(0+256),w
  5796  053A  00E1               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5797  053B  0842               	movf	_knob_4_pos^(0+256),w
  5798  053C  00E0               	movwf	_knob4_prev^(0+256)	;volatile
  5799                           
  5800                           ;main.c: 299: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5801  053D  3000               	movlw	0
  5802  053E  0020               	movlb	0	; select bank0
  5803  053F  00E3               	movwf	map@out_max
  5804  0540  307A               	movlw	122
  5805  0541  00E4               	movwf	map@out_max+1
  5806  0542  3044               	movlw	68
  5807  0543  00E5               	movwf	map@out_max+2
  5808  0544  3000               	movlw	0
  5809  0545  00E0               	movwf	map@out_min
  5810  0546  3070               	movlw	112
  5811  0547  00E1               	movwf	map@out_min+1
  5812  0548  3042               	movlw	66
  5813  0549  00E2               	movwf	map@out_min+2
  5814  054A  30C0               	movlw	192
  5815  054B  00DD               	movwf	map@in_max
  5816  054C  307F               	movlw	127
  5817  054D  00DE               	movwf	map@in_max+1
  5818  054E  3044               	movlw	68
  5819  054F  00DF               	movwf	map@in_max+2
  5820  0550  3000               	movlw	0
  5821  0551  00DA               	movwf	map@in_min
  5822  0552  3000               	movlw	0
  5823  0553  00DB               	movwf	map@in_min+1
  5824  0554  3000               	movlw	0
  5825  0555  00DC               	movwf	map@in_min+2
  5826  0556  0022               	movlb	2	; select bank2
  5827  0557  0861               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5828  0558  0020               	movlb	0	; select bank0
  5829  0559  00AB               	movwf	___awtoft@c+1
  5830  055A  0022               	movlb	2	; select bank2
  5831  055B  0860               	movf	_knob4_prev^(0+256),w	;volatile
  5832  055C  0020               	movlb	0	; select bank0
  5833  055D  00AA               	movwf	___awtoft@c
  5834  055E  3187  27DC  3182   	fcall	___awtoft
  5835  0561  0020               	movlb	0	; select bank0
  5836  0562  082A               	movf	?___awtoft,w
  5837  0563  00D7               	movwf	map@x
  5838  0564  082B               	movf	?___awtoft+1,w
  5839  0565  00D8               	movwf	map@x+1
  5840  0566  082C               	movf	?___awtoft+2,w
  5841  0567  00D9               	movwf	map@x+2
  5842  0568  3196  26CC  3182   	fcall	_map
  5843  056B  0020               	movlb	0	; select bank0
  5844  056C  0857               	movf	?_map,w
  5845  056D  0021               	movlb	1	; select bank1
  5846  056E  00A0               	movwf	___fttol@f1^(0+128)
  5847  056F  0020               	movlb	0	; select bank0
  5848  0570  0858               	movf	?_map+1,w
  5849  0571  0021               	movlb	1	; select bank1
  5850  0572  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5851  0573  0020               	movlb	0	; select bank0
  5852  0574  0859               	movf	?_map+2,w
  5853  0575  0021               	movlb	1	; select bank1
  5854  0576  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5855  0577  3196  2645  3182   	fcall	___fttol
  5856  057A  0021               	movlb	1	; select bank1
  5857  057B  0821               	movf	(?___fttol^(0+128)+1),w
  5858  057C  0022               	movlb	2	; select bank2
  5859  057D  00E5               	movwf	(_mod_delay_time+1)^(0+256)
  5860  057E  0021               	movlb	1	; select bank1
  5861  057F  0820               	movf	?___fttol^(0+128),w
  5862  0580  0022               	movlb	2	; select bank2
  5863  0581  00E4               	movwf	_mod_delay_time^(0+256)
  5864  0582                     l5812:	
  5865                           
  5866                           ;main.c: 300: }
  5867                           ;main.c: 308: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5868  0582  0022               	movlb	2	; select bank2
  5869  0583  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5870  0584  0021               	movlb	1	; select bank1
  5871  0585  00BA               	movwf	??_main^(0+128)
  5872  0586  0022               	movlb	2	; select bank2
  5873  0587  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5874  0588  0021               	movlb	1	; select bank1
  5875  0589  00BB               	movwf	(??_main^(0+128)+1)
  5876  058A  0ABA               	incf	??_main^(0+128),f
  5877  058B  1903               	skipnz
  5878  058C  0ABB               	incf	(??_main^(0+128)+1),f
  5879  058D  0022               	movlb	2	; select bank2
  5880  058E  0844               	movf	_knob_5_pos^(0+256),w
  5881  058F  0021               	movlb	1	; select bank1
  5882  0590  073A               	addwf	??_main^(0+128),w
  5883  0591  00BC               	movwf	(??_main+2)^(0+128)
  5884  0592  0022               	movlb	2	; select bank2
  5885  0593  0845               	movf	(_knob_5_pos+1)^(0+256),w
  5886  0594  0021               	movlb	1	; select bank1
  5887  0595  3D3B               	addwfc	(??_main+1)^(0+128),w
  5888  0596  00BD               	movwf	(??_main+3)^(0+128)
  5889  0597  083D               	movf	(??_main+3)^(0+128),w
  5890  0598  3A80               	xorlw	128
  5891  0599  00BE               	movwf	(??_main+4)^(0+128)
  5892  059A  3080               	movlw	128
  5893  059B  023E               	subwf	(??_main+4)^(0+128),w
  5894  059C  1D03               	skipz
  5895  059D  2DA0               	goto	u6595
  5896  059E  3004               	movlw	4
  5897  059F  023C               	subwf	(??_main+2)^(0+128),w
  5898  05A0                     u6595:	
  5899  05A0  1803               	skipnc
  5900  05A1  2DC2               	goto	l5816
  5901  05A2  0022               	movlb	2	; select bank2
  5902  05A3  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5903  05A4  0021               	movlb	1	; select bank1
  5904  05A5  00BA               	movwf	??_main^(0+128)
  5905  05A6  0022               	movlb	2	; select bank2
  5906  05A7  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5907  05A8  0021               	movlb	1	; select bank1
  5908  05A9  00BB               	movwf	(??_main^(0+128)+1)
  5909  05AA  0ABA               	incf	??_main^(0+128),f
  5910  05AB  1903               	skipnz
  5911  05AC  0ABB               	incf	(??_main^(0+128)+1),f
  5912  05AD  0022               	movlb	2	; select bank2
  5913  05AE  0844               	movf	_knob_5_pos^(0+256),w
  5914  05AF  0021               	movlb	1	; select bank1
  5915  05B0  073A               	addwf	??_main^(0+128),w
  5916  05B1  00BC               	movwf	(??_main+2)^(0+128)
  5917  05B2  0022               	movlb	2	; select bank2
  5918  05B3  0845               	movf	(_knob_5_pos+1)^(0+256),w
  5919  05B4  0021               	movlb	1	; select bank1
  5920  05B5  3D3B               	addwfc	(??_main+1)^(0+128),w
  5921  05B6  00BD               	movwf	(??_main+3)^(0+128)
  5922  05B7  083D               	movf	(??_main+3)^(0+128),w
  5923  05B8  3A80               	xorlw	128
  5924  05B9  00BE               	movwf	(??_main+4)^(0+128)
  5925  05BA  307F               	movlw	127
  5926  05BB  023E               	subwf	(??_main+4)^(0+128),w
  5927  05BC  1D03               	skipz
  5928  05BD  2DC0               	goto	u6605
  5929  05BE  30FD               	movlw	253
  5930  05BF  023C               	subwf	(??_main+2)^(0+128),w
  5931  05C0                     u6605:	
  5932  05C0  1803               	skipnc
  5933  05C1  2DC7               	goto	l5818
  5934  05C2                     l5816:	
  5935                           
  5936                           ;main.c: 309: knob5_prev = knob_5_pos;
  5937  05C2  0022               	movlb	2	; select bank2
  5938  05C3  0845               	movf	(_knob_5_pos+1)^(0+256),w
  5939  05C4  00E3               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5940  05C5  0844               	movf	_knob_5_pos^(0+256),w
  5941  05C6  00E2               	movwf	_knob5_prev^(0+256)	;volatile
  5942  05C7                     l5818:	
  5943                           
  5944                           ;main.c: 311: }
  5945                           ;main.c: 325: LATBbits.LATB0 = 0;
  5946  05C7  0022               	movlb	2	; select bank2
  5947  05C8  100D               	bcf	13,0	;volatile
  5948                           
  5949                           ;main.c: 326: if (mod_timer >= mod_delay_time) {
  5950  05C9  0864               	movf	_mod_delay_time^(0+256),w
  5951  05CA  0021               	movlb	1	; select bank1
  5952  05CB  00BA               	movwf	??_main^(0+128)
  5953  05CC  0022               	movlb	2	; select bank2
  5954  05CD  0865               	movf	(_mod_delay_time+1)^(0+256),w
  5955  05CE  0021               	movlb	1	; select bank1
  5956  05CF  00BB               	movwf	(??_main^(0+128)+1)
  5957  05D0  3000               	movlw	0
  5958  05D1  1BBB               	btfsc	(??_main^(0+128)+1),7
  5959  05D2  30FF               	movlw	255
  5960  05D3  00BC               	movwf	(??_main^(0+128)+2)
  5961  05D4  00BD               	movwf	(??_main^(0+128)+3)
  5962  05D5  0022               	movlb	2	; select bank2
  5963  05D6  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  5964  05D7  3A80               	xorlw	128
  5965  05D8  0021               	movlb	1	; select bank1
  5966  05D9  00BE               	movwf	(??_main+4)^(0+128)
  5967  05DA  083D               	movf	(??_main+3)^(0+128),w
  5968  05DB  3A80               	xorlw	128
  5969  05DC  023E               	subwf	(??_main+4)^(0+128),w
  5970  05DD  0022               	movlb	2	; select bank2
  5971  05DE  1D03               	skipz
  5972  05DF  2DF0               	goto	u6613
  5973  05E0  0021               	movlb	1	; select bank1
  5974  05E1  083C               	movf	(??_main+2)^(0+128),w
  5975  05E2  0022               	movlb	2	; select bank2
  5976  05E3  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  5977  05E4  1D03               	skipz
  5978  05E5  2DF0               	goto	u6613
  5979  05E6  0021               	movlb	1	; select bank1
  5980  05E7  083B               	movf	(??_main+1)^(0+128),w
  5981  05E8  0022               	movlb	2	; select bank2
  5982  05E9  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  5983  05EA  1D03               	skipz
  5984  05EB  2DF0               	goto	u6613
  5985  05EC  0021               	movlb	1	; select bank1
  5986  05ED  083A               	movf	??_main^(0+128),w
  5987  05EE  0022               	movlb	2	; select bank2
  5988  05EF  0224               	subwf	_mod_timer^(0+256),w	;volatile
  5989  05F0                     u6613:	
  5990  05F0  1C03               	skipc
  5991  05F1  2F21               	goto	l5872
  5992                           
  5993                           ;main.c: 327: LATBbits.LATB0 = 1;
  5994  05F2  140D               	bsf	13,0	;volatile
  5995                           
  5996                           ;main.c: 328: mod_counter = mod_counter + 1;
  5997  05F3  0021               	movlb	1	; select bank1
  5998  05F4  086B               	movf	_mod_counter^(0+128),w
  5999  05F5  3E01               	addlw	1
  6000  05F6  00EB               	movwf	_mod_counter^(0+128)
  6001  05F7  3000               	movlw	0
  6002  05F8  3D6C               	addwfc	(_mod_counter+1)^(0+128),w
  6003  05F9  00EC               	movwf	(_mod_counter+1)^(0+128)
  6004                           
  6005                           ;main.c: 329: mod_timer = 0;
  6006  05FA  3000               	movlw	0
  6007  05FB  0022               	movlb	2	; select bank2
  6008  05FC  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6009  05FD  3000               	movlw	0
  6010  05FE  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6011  05FF  3000               	movlw	0
  6012  0600  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6013  0601  3000               	movlw	0
  6014  0602  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6015                           
  6016                           ;main.c: 331: if (bottom_push_state == 1 || bottom_push_state == 5) {
  6017  0603  0021               	movlb	1	; select bank1
  6018  0604  0351               	decf	_bottom_push_state^(0+128),w
  6019  0605  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6020  0606  1903               	btfsc	3,2
  6021  0607  2E0D               	goto	l5830
  6022  0608  3005               	movlw	5
  6023  0609  0651               	xorwf	_bottom_push_state^(0+128),w
  6024  060A  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6025  060B  1D03               	btfss	3,2
  6026  060C  2E16               	goto	l5834
  6027  060D                     l5830:	
  6028                           
  6029                           ;main.c: 332: if (mod_counter >= 61) {
  6030  060D  086C               	movf	(_mod_counter+1)^(0+128),w
  6031  060E  3A80               	xorlw	128
  6032  060F  00BA               	movwf	??_main^(0+128)
  6033  0610  3080               	movlw	128
  6034  0611  023A               	subwf	??_main^(0+128),w
  6035  0612  1D03               	skipz
  6036  0613  2E1F               	goto	u6655
  6037  0614  303D               	movlw	61
  6038  0615  2E1E               	goto	L1
  6039  0616                     l5834:	
  6040                           ;main.c: 334: }
  6041                           ;main.c: 335: } else {
  6042                           
  6043                           ;main.c: 333: mod_counter = 0;
  6044                           
  6045                           
  6046                           ;main.c: 336: if (mod_counter >= 31) {
  6047  0616  086C               	movf	(_mod_counter+1)^(0+128),w
  6048  0617  3A80               	xorlw	128
  6049  0618  00BA               	movwf	??_main^(0+128)
  6050  0619  3080               	movlw	128
  6051  061A  023A               	subwf	??_main^(0+128),w
  6052  061B  1D03               	skipz
  6053  061C  2E1F               	goto	u6655
  6054  061D  301F               	movlw	31
  6055  061E                     L1:	
  6056  061E  026B               	subwf	_mod_counter^(0+128),w
  6057  061F                     u6655:	
  6058  061F  1C03               	skipc
  6059  0620  2E24               	goto	l5838
  6060                           
  6061                           ;main.c: 337: mod_counter = 0;
  6062  0621  0021               	movlb	1	; select bank1
  6063  0622  01EB               	clrf	_mod_counter^(0+128)
  6064  0623  01EC               	clrf	(_mod_counter+1)^(0+128)
  6065  0624                     l5838:	
  6066                           
  6067                           ;main.c: 338: }
  6068                           ;main.c: 339: }
  6069                           ;main.c: 343: adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  6070  0624  3000               	movlw	0
  6071  0625  0020               	movlb	0	; select bank0
  6072  0626  00E3               	movwf	map@out_max
  6073  0627  3000               	movlw	0
  6074  0628  00E4               	movwf	map@out_max+1
  6075  0629  3000               	movlw	0
  6076  062A  00E5               	movwf	map@out_max+2
  6077  062B  3060               	movlw	96
  6078  062C  00E0               	movwf	map@out_min
  6079  062D  309F               	movlw	159
  6080  062E  00E1               	movwf	map@out_min+1
  6081  062F  3044               	movlw	68
  6082  0630  00E2               	movwf	map@out_min+2
  6083  0631  30C0               	movlw	192
  6084  0632  00DD               	movwf	map@in_max
  6085  0633  307F               	movlw	127
  6086  0634  00DE               	movwf	map@in_max+1
  6087  0635  3044               	movlw	68
  6088  0636  00DF               	movwf	map@in_max+2
  6089  0637  3000               	movlw	0
  6090  0638  00DA               	movwf	map@in_min
  6091  0639  3000               	movlw	0
  6092  063A  00DB               	movwf	map@in_min+1
  6093  063B  3000               	movlw	0
  6094  063C  00DC               	movwf	map@in_min+2
  6095  063D  0022               	movlb	2	; select bank2
  6096  063E  0863               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6097  063F  0020               	movlb	0	; select bank0
  6098  0640  00AB               	movwf	___awtoft@c+1
  6099  0641  0022               	movlb	2	; select bank2
  6100  0642  0862               	movf	_knob5_prev^(0+256),w	;volatile
  6101  0643  0020               	movlb	0	; select bank0
  6102  0644  00AA               	movwf	___awtoft@c
  6103  0645  3187  27DC  3182   	fcall	___awtoft
  6104  0648  0020               	movlb	0	; select bank0
  6105  0649  082A               	movf	?___awtoft,w
  6106  064A  00D7               	movwf	map@x
  6107  064B  082B               	movf	?___awtoft+1,w
  6108  064C  00D8               	movwf	map@x+1
  6109  064D  082C               	movf	?___awtoft+2,w
  6110  064E  00D9               	movwf	map@x+2
  6111  064F  3196  26CC  3182   	fcall	_map
  6112  0652  0020               	movlb	0	; select bank0
  6113  0653  0857               	movf	?_map,w
  6114  0654  0021               	movlb	1	; select bank1
  6115  0655  00A0               	movwf	___fttol@f1^(0+128)
  6116  0656  0020               	movlb	0	; select bank0
  6117  0657  0858               	movf	?_map+1,w
  6118  0658  0021               	movlb	1	; select bank1
  6119  0659  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6120  065A  0020               	movlb	0	; select bank0
  6121  065B  0859               	movf	?_map+2,w
  6122  065C  0021               	movlb	1	; select bank1
  6123  065D  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6124  065E  3196  2645  3182   	fcall	___fttol
  6125  0661  0021               	movlb	1	; select bank1
  6126  0662  0821               	movf	(?___fttol^(0+128)+1),w
  6127  0663  0022               	movlb	2	; select bank2
  6128  0664  00AD               	movwf	(_adjusted_pot_value+1)^(0+256)
  6129  0665  0021               	movlb	1	; select bank1
  6130  0666  0820               	movf	?___fttol^(0+128),w
  6131  0667  0022               	movlb	2	; select bank2
  6132  0668  00AC               	movwf	_adjusted_pot_value^(0+256)
  6133                           
  6134                           ;main.c: 344: switch (bottom_push_state) {
  6135  0669  2EC1               	goto	l5866
  6136  066A                     l5840:	
  6137                           ;main.c: 345: case 1:
  6138                           
  6139                           
  6140                           ;main.c: 346: mod_value = mod5[mod_counter];
  6141  066A  0021               	movlb	1	; select bank1
  6142  066B  086C               	movf	(_mod_counter+1)^(0+128),w
  6143  066C  00BB               	movwf	(??_main^(0+128)+1)
  6144  066D  086B               	movf	_mod_counter^(0+128),w
  6145  066E  00BA               	movwf	??_main^(0+128)
  6146  066F  35BA               	lslf	??_main^(0+128),f
  6147  0670  0DBB               	rlf	(??_main^(0+128)+1),f
  6148  0671  3076               	movlw	118
  6149  0672  00BC               	movwf	(??_main+2)^(0+128)
  6150  0673  3025               	movlw	37
  6151  0674  00BD               	movwf	((??_main+2)^(0+128)+1)
  6152  0675  083A               	movf	??_main^(0+128),w
  6153  0676  073C               	addwf	(??_main+2)^(0+128),w
  6154  0677  0086               	movwf	6
  6155  0678  083B               	movf	(??_main+1)^(0+128),w
  6156  0679  3D3D               	addwfc	(??_main+3)^(0+128),w
  6157  067A  0087               	movwf	7
  6158  067B  3F40               	moviw [0]fsr1
  6159  067C  0022               	movlb	2	; select bank2
  6160  067D  00CA               	movwf	_mod_value^(0+256)
  6161  067E  3F41               	moviw [1]fsr1
  6162  067F  2EA0               	goto	L4
  6163  0680                     l5844:	
  6164                           ;main.c: 349: case 2:
  6165                           
  6166                           ;main.c: 348: break;
  6167                           
  6168                           ;main.c: 347: PORTCbits.RC4 = 0;
  6169                           
  6170                           
  6171                           ;main.c: 350: mod_value = mod2[mod_counter];
  6172  0680  0021               	movlb	1	; select bank1
  6173  0681  356B               	lslf	_mod_counter^(0+128),w
  6174  0682  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  6175  0683  0086               	movwf	6
  6176  0684  3002               	movlw	2	; select bank4/5
  6177  0685  0087               	movwf	7
  6178  0686  3F40               	moviw [0]fsr1
  6179  0687  0022               	movlb	2	; select bank2
  6180  0688  00CA               	movwf	_mod_value^(0+256)
  6181  0689  3F41               	moviw [1]fsr1
  6182  068A  2EA0               	goto	L4
  6183  068B                     l5848:	
  6184                           ;main.c: 353: case 3:
  6185                           
  6186                           ;main.c: 352: break;
  6187                           
  6188                           ;main.c: 351: PORTCbits.RC4 = 0;
  6189                           
  6190                           
  6191                           ;main.c: 354: mod_value = mod3[mod_counter];
  6192  068B  0021               	movlb	1	; select bank1
  6193  068C  356B               	lslf	_mod_counter^(0+128),w
  6194  068D  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  6195  068E  0086               	movwf	6
  6196  068F  3002               	movlw	2	; select bank5/6
  6197  0690  0087               	movwf	7
  6198  0691  3F40               	moviw [0]fsr1
  6199  0692  0022               	movlb	2	; select bank2
  6200  0693  00CA               	movwf	_mod_value^(0+256)
  6201  0694  3F41               	moviw [1]fsr1
  6202  0695  2EA0               	goto	L4
  6203  0696                     l5852:	
  6204                           ;main.c: 357: case 4:
  6205                           
  6206                           ;main.c: 356: break;
  6207                           
  6208                           ;main.c: 355: PORTCbits.RC4 = 0;
  6209                           
  6210                           
  6211                           ;main.c: 358: mod_value = mod4[mod_counter];
  6212  0696  0021               	movlb	1	; select bank1
  6213  0697  356B               	lslf	_mod_counter^(0+128),w
  6214  0698  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  6215  0699  0086               	movwf	6
  6216  069A  3003               	movlw	3	; select bank6/7
  6217  069B  0087               	movwf	7
  6218  069C  3F40               	moviw [0]fsr1
  6219  069D  0022               	movlb	2	; select bank2
  6220  069E  00CA               	movwf	_mod_value^(0+256)
  6221  069F  3F41               	moviw [1]fsr1
  6222  06A0                     L4:	
  6223  06A0  00CB               	movwf	(_mod_value+1)^(0+256)
  6224  06A1  2EBE               	goto	l5862
  6225  06A2                     l5856:	
  6226                           ;main.c: 361: case 5:
  6227                           
  6228                           ;main.c: 360: break;
  6229                           
  6230                           ;main.c: 359: PORTCbits.RC4 = 0;
  6231                           
  6232                           
  6233                           ;main.c: 362: mod_value = mod5[mod_counter];
  6234  06A2  0021               	movlb	1	; select bank1
  6235  06A3  086C               	movf	(_mod_counter+1)^(0+128),w
  6236  06A4  00BB               	movwf	(??_main^(0+128)+1)
  6237  06A5  086B               	movf	_mod_counter^(0+128),w
  6238  06A6  00BA               	movwf	??_main^(0+128)
  6239  06A7  35BA               	lslf	??_main^(0+128),f
  6240  06A8  0DBB               	rlf	(??_main^(0+128)+1),f
  6241  06A9  3076               	movlw	118
  6242  06AA  00BC               	movwf	(??_main+2)^(0+128)
  6243  06AB  3025               	movlw	37
  6244  06AC  00BD               	movwf	((??_main+2)^(0+128)+1)
  6245  06AD  083A               	movf	??_main^(0+128),w
  6246  06AE  073C               	addwf	(??_main+2)^(0+128),w
  6247  06AF  0086               	movwf	6
  6248  06B0  083B               	movf	(??_main+1)^(0+128),w
  6249  06B1  3D3D               	addwfc	(??_main+3)^(0+128),w
  6250  06B2  0087               	movwf	7
  6251  06B3  3F40               	moviw [0]fsr1
  6252  06B4  0022               	movlb	2	; select bank2
  6253  06B5  00CA               	movwf	_mod_value^(0+256)
  6254  06B6  3F41               	moviw [1]fsr1
  6255  06B7  00CB               	movwf	(_mod_value+1)^(0+256)
  6256                           
  6257                           ;main.c: 364: PORTCbits.RC4 = 1;
  6258  06B8  0020               	movlb	0	; select bank0
  6259  06B9  160E               	bsf	14,4	;volatile
  6260                           
  6261                           ;main.c: 365: break;
  6262  06BA  2EDB               	goto	l5868
  6263  06BB                     l5860:	
  6264                           ;main.c: 366: case 6:
  6265                           
  6266                           
  6267                           ;main.c: 367: mod_value = 0;
  6268  06BB  0022               	movlb	2	; select bank2
  6269  06BC  01CA               	clrf	_mod_value^(0+256)
  6270  06BD  01CB               	clrf	(_mod_value+1)^(0+256)
  6271  06BE                     l5862:	
  6272                           
  6273                           ;main.c: 368: PORTCbits.RC4 = 0;
  6274  06BE  0020               	movlb	0	; select bank0
  6275  06BF  120E               	bcf	14,4	;volatile
  6276                           
  6277                           ;main.c: 370: }
  6278                           
  6279                           ;main.c: 369: break;
  6280  06C0  2EDB               	goto	l5868
  6281  06C1                     l5866:	
  6282                           
  6283                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6284                           ; Switch size 1, requested type "space"
  6285                           ; Number of cases is 1, Range of values is 0 to 0
  6286                           ; switch strategies available:
  6287                           ; Name         Instructions Cycles
  6288                           ; simple_byte            4     3 (average)
  6289                           ; direct_byte            8     6 (fixed)
  6290                           ; jumptable            260     6 (fixed)
  6291                           ;	Chosen strategy is simple_byte
  6292  06C1  0021               	movlb	1	; select bank1
  6293  06C2  0852               	movf	(_bottom_push_state+1)^(0+128),w
  6294  06C3  3A00               	xorlw	0	; case 0
  6295  06C4  1903               	skipnz
  6296  06C5  2EC7               	goto	l6142
  6297  06C6  2EDB               	goto	l5868
  6298  06C7                     l6142:	
  6299                           
  6300                           ; Switch size 1, requested type "space"
  6301                           ; Number of cases is 6, Range of values is 1 to 6
  6302                           ; switch strategies available:
  6303                           ; Name         Instructions Cycles
  6304                           ; simple_byte           19    10 (average)
  6305                           ; direct_byte           21     9 (fixed)
  6306                           ; jumptable            263     9 (fixed)
  6307                           ;	Chosen strategy is simple_byte
  6308  06C7  0851               	movf	_bottom_push_state^(0+128),w
  6309  06C8  3A01               	xorlw	1	; case 1
  6310  06C9  1903               	skipnz
  6311  06CA  2E6A               	goto	l5840
  6312  06CB  3A03               	xorlw	3	; case 2
  6313  06CC  1903               	skipnz
  6314  06CD  2E80               	goto	l5844
  6315  06CE  3A01               	xorlw	1	; case 3
  6316  06CF  1903               	skipnz
  6317  06D0  2E8B               	goto	l5848
  6318  06D1  3A07               	xorlw	7	; case 4
  6319  06D2  1903               	skipnz
  6320  06D3  2E96               	goto	l5852
  6321  06D4  3A01               	xorlw	1	; case 5
  6322  06D5  1903               	skipnz
  6323  06D6  2EA2               	goto	l5856
  6324  06D7  3A03               	xorlw	3	; case 6
  6325  06D8  1903               	skipnz
  6326  06D9  2EBB               	goto	l5860
  6327  06DA  2EDB               	goto	l5868
  6328  06DB                     l5868:	
  6329                           
  6330                           ;main.c: 377: mod_value = modulation(mod_value, adjusted_pot_value);
  6331  06DB  0022               	movlb	2	; select bank2
  6332  06DC  084A               	movf	_mod_value^(0+256),w
  6333  06DD  0020               	movlb	0	; select bank0
  6334  06DE  00BD               	movwf	modulation@x
  6335  06DF  0022               	movlb	2	; select bank2
  6336  06E0  084B               	movf	(_mod_value+1)^(0+256),w
  6337  06E1  0020               	movlb	0	; select bank0
  6338  06E2  00BE               	movwf	modulation@x+1
  6339  06E3  0D89               	rlf	9,f
  6340  06E4  3B89               	subwfb	9,f
  6341  06E5  0989               	comf	9,f
  6342  06E6  00BF               	movwf	modulation@x+2
  6343  06E7  00C0               	movwf	modulation@x+3
  6344  06E8  0022               	movlb	2	; select bank2
  6345  06E9  082C               	movf	_adjusted_pot_value^(0+256),w
  6346  06EA  0020               	movlb	0	; select bank0
  6347  06EB  00C1               	movwf	modulation@y
  6348  06EC  0022               	movlb	2	; select bank2
  6349  06ED  082D               	movf	(_adjusted_pot_value+1)^(0+256),w
  6350  06EE  0020               	movlb	0	; select bank0
  6351  06EF  00C2               	movwf	modulation@y+1
  6352  06F0  0D89               	rlf	9,f
  6353  06F1  3B89               	subwfb	9,f
  6354  06F2  0989               	comf	9,f
  6355  06F3  00C3               	movwf	modulation@y+2
  6356  06F4  00C4               	movwf	modulation@y+3
  6357  06F5  3191  21D2  3182   	fcall	_modulation
  6358  06F8  0020               	movlb	0	; select bank0
  6359  06F9  083E               	movf	?_modulation+1,w
  6360  06FA  0022               	movlb	2	; select bank2
  6361  06FB  00CB               	movwf	(_mod_value+1)^(0+256)
  6362  06FC  0020               	movlb	0	; select bank0
  6363  06FD  083D               	movf	?_modulation,w
  6364  06FE  0022               	movlb	2	; select bank2
  6365  06FF  00CA               	movwf	_mod_value^(0+256)
  6366                           
  6367                           ;main.c: 378: CCPR9 = mod_value / 2;
  6368  0700  3002               	movlw	2
  6369  0701  0020               	movlb	0	; select bank0
  6370  0702  00A2               	movwf	___awdiv@divisor
  6371  0703  3000               	movlw	0
  6372  0704  00A3               	movwf	___awdiv@divisor+1
  6373  0705  0022               	movlb	2	; select bank2
  6374  0706  084B               	movf	(_mod_value+1)^(0+256),w
  6375  0707  0020               	movlb	0	; select bank0
  6376  0708  00A5               	movwf	___awdiv@dividend+1
  6377  0709  0022               	movlb	2	; select bank2
  6378  070A  084A               	movf	_mod_value^(0+256),w
  6379  070B  0020               	movlb	0	; select bank0
  6380  070C  00A4               	movwf	___awdiv@dividend
  6381  070D  3193  23D6  3182   	fcall	___awdiv
  6382  0710  0020               	movlb	0	; select bank0
  6383  0711  0823               	movf	?___awdiv+1,w
  6384  0712  002C               	movlb	12	; select bank12
  6385  0713  009B               	movwf	27	;volatile
  6386  0714  0020               	movlb	0	; select bank0
  6387  0715  0822               	movf	?___awdiv,w
  6388  0716  002C               	movlb	12	; select bank12
  6389  0717  009A               	movwf	26	;volatile
  6390                           
  6391                           ;main.c: 379: mod_timer = 0;
  6392  0718  3000               	movlw	0
  6393  0719  0022               	movlb	2	; select bank2
  6394  071A  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6395  071B  3000               	movlw	0
  6396  071C  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6397  071D  3000               	movlw	0
  6398  071E  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6399  071F  3000               	movlw	0
  6400  0720  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6401  0721                     l5872:	
  6402                           
  6403                           ;main.c: 394: }
  6404                           ;main.c: 401: if (delay_time_changed == 1) {
  6405  0721  035E               	decf	_delay_time_changed^(0+256),w
  6406  0722  045F               	iorwf	(_delay_time_changed+1)^(0+256),w
  6407  0723  1D03               	btfss	3,2
  6408  0724  2AC2               	goto	l5736
  6409                           
  6410                           ;main.c: 402: delay_time = baseline_delay_time;
  6411  0725  0021               	movlb	1	; select bank1
  6412  0726  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6413  0727  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6414  0728  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6415  0729  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6416  072A  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6417  072B  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6418  072C  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6419  072D  00CD               	movwf	_delay_time^(0+128)	;volatile
  6420                           
  6421                           ;main.c: 403: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6422  072E  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6423  072F  00AF               	movwf	(set_subdivision@x+1)^(0+128)
  6424  0730  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6425  0731  00AE               	movwf	set_subdivision@x^(0+128)
  6426  0732  085C               	movf	(_top_push_state+1)^(0+128),w
  6427  0733  00B1               	movwf	(set_subdivision@y+1)^(0+128)
  6428  0734  085B               	movf	_top_push_state^(0+128),w
  6429  0735  00B0               	movwf	set_subdivision@y^(0+128)
  6430  0736  3188  20F6  3182   	fcall	_set_subdivision
  6431  0739  0021               	movlb	1	; select bank1
  6432  073A  082E               	movf	?_set_subdivision^(0+128),w
  6433  073B  00CD               	movwf	_delay_time^(0+128)	;volatile
  6434  073C  082F               	movf	(?_set_subdivision+1)^(0+128),w
  6435  073D  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6436  073E  0D89               	rlf	9,f
  6437  073F  3B89               	subwfb	9,f
  6438  0740  0989               	comf	9,f
  6439  0741  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6440  0742  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6441                           
  6442                           ;main.c: 404: reset_sub_delay = 1;
  6443  0743  3001               	movlw	1
  6444  0744  0022               	movlb	2	; select bank2
  6445  0745  00CC               	movwf	_reset_sub_delay^(0+256)
  6446  0746  3000               	movlw	0
  6447  0747  00CD               	movwf	(_reset_sub_delay^(0+256)+1)
  6448                           
  6449                           ;main.c: 405: delayfound = 0;
  6450  0748  01B8               	clrf	_delayfound^(0+256)
  6451  0749  01B9               	clrf	(_delayfound+1)^(0+256)
  6452                           
  6453                           ;main.c: 406: delay_counter = 0;
  6454  074A  01B6               	clrf	_delay_counter^(0+256)	;volatile
  6455  074B  01B7               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6456  074C                     l5890:	
  6457                           ;main.c: 408: while (delayfound == 0) {
  6458                           
  6459  074C  0838               	movf	_delayfound^(0+256),w
  6460  074D  0439               	iorwf	(_delayfound+1)^(0+256),w
  6461  074E  1D03               	btfss	3,2
  6462  074F  2F9F               	goto	l5892
  6463                           
  6464                           ;main.c: 409: if (delayArray[delay_counter] <= delay_time * 2) {
  6465  0750  0837               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6466  0751  0021               	movlb	1	; select bank1
  6467  0752  00BB               	movwf	(??_main^(0+128)+1)
  6468  0753  0022               	movlb	2	; select bank2
  6469  0754  0836               	movf	_delay_counter^(0+256),w	;volatile
  6470  0755  0021               	movlb	1	; select bank1
  6471  0756  00BA               	movwf	??_main^(0+128)
  6472  0757  35BA               	lslf	??_main^(0+128),f
  6473  0758  0DBB               	rlf	(??_main^(0+128)+1),f
  6474  0759  306E               	movlw	110
  6475  075A  00BC               	movwf	(??_main+2)^(0+128)
  6476  075B  3023               	movlw	35
  6477  075C  00BD               	movwf	((??_main+2)^(0+128)+1)
  6478  075D  083A               	movf	??_main^(0+128),w
  6479  075E  073C               	addwf	(??_main+2)^(0+128),w
  6480  075F  0086               	movwf	6
  6481  0760  083B               	movf	(??_main+1)^(0+128),w
  6482  0761  3D3D               	addwfc	(??_main+3)^(0+128),w
  6483  0762  0087               	movwf	7
  6484  0763  3F40               	moviw [0]fsr1
  6485  0764  00BE               	movwf	(??_main+4)^(0+128)
  6486  0765  3F41               	moviw [1]fsr1
  6487  0766  00BF               	movwf	((??_main+4)^(0+128)+1)
  6488  0767  083E               	movf	(??_main+4)^(0+128),w
  6489  0768  00C0               	movwf	(??_main+6)^(0+128)
  6490  0769  083F               	movf	(??_main+5)^(0+128),w
  6491  076A  00C1               	movwf	((??_main+6)^(0+128)+1)
  6492  076B  3000               	movlw	0
  6493  076C  1BC1               	btfsc	((??_main+6)^(0+128)+1),7
  6494  076D  30FF               	movlw	255
  6495  076E  00C2               	movwf	((??_main+6)^(0+128)+2)
  6496  076F  00C3               	movwf	((??_main+6)^(0+128)+3)
  6497  0770  084D               	movf	_delay_time^(0+128),w	;volatile
  6498  0771  00C4               	movwf	(??_main+10)^(0+128)
  6499  0772  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6500  0773  00C5               	movwf	((??_main+10)^(0+128)+1)
  6501  0774  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6502  0775  00C6               	movwf	((??_main+10)^(0+128)+2)
  6503  0776  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6504  0777  00C7               	movwf	((??_main+10)^(0+128)+3)
  6505  0778  3001               	movlw	1
  6506  0779                     u6675:	
  6507  0779  35C4               	lslf	(??_main+10)^(0+128),f
  6508  077A  0DC5               	rlf	((??_main+10)^(0+128)+1),f
  6509  077B  0DC6               	rlf	((??_main+10)^(0+128)+2),f
  6510  077C  0DC7               	rlf	((??_main+10)^(0+128)+3),f
  6511  077D  0B89               	decfsz	9,f
  6512  077E  2F79               	goto	u6675
  6513  077F  0847               	movf	(??_main+13)^(0+128),w
  6514  0780  3A80               	xorlw	128
  6515  0781  00C8               	movwf	(??_main+14)^(0+128)
  6516  0782  0843               	movf	(??_main+9)^(0+128),w
  6517  0783  3A80               	xorlw	128
  6518  0784  0248               	subwf	(??_main+14)^(0+128),w
  6519  0785  1D03               	skipz
  6520  0786  2F91               	goto	u6683
  6521  0787  0842               	movf	(??_main+8)^(0+128),w
  6522  0788  0246               	subwf	(??_main+12)^(0+128),w
  6523  0789  1D03               	skipz
  6524  078A  2F91               	goto	u6683
  6525  078B  0841               	movf	(??_main+7)^(0+128),w
  6526  078C  0245               	subwf	(??_main+11)^(0+128),w
  6527  078D  1D03               	skipz
  6528  078E  2F91               	goto	u6683
  6529  078F  0840               	movf	(??_main+6)^(0+128),w
  6530  0790  0244               	subwf	(??_main+10)^(0+128),w
  6531  0791                     u6683:	
  6532  0791  1C03               	skipc
  6533  0792  2F99               	goto	l5888
  6534                           
  6535                           ;main.c: 410: delayfound = 1;
  6536  0793  3001               	movlw	1
  6537  0794  0022               	movlb	2	; select bank2
  6538  0795  00B8               	movwf	_delayfound^(0+256)
  6539  0796  3000               	movlw	0
  6540  0797  00B9               	movwf	(_delayfound^(0+256)+1)
  6541                           
  6542                           ;main.c: 414: } else {
  6543  0798  2F4C               	goto	l5890
  6544  0799                     l5888:	
  6545                           
  6546                           ;main.c: 415: delay_counter++;
  6547  0799  3001               	movlw	1
  6548  079A  0022               	movlb	2	; select bank2
  6549  079B  07B6               	addwf	_delay_counter^(0+256),f	;volatile
  6550  079C  3000               	movlw	0
  6551  079D  3DB7               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6552  079E  2F4C               	goto	l5890
  6553  079F                     l5892:	
  6554                           
  6555                           ;main.c: 417: }
  6556                           ;main.c: 418: }
  6557                           ;main.c: 434: mod_delay_time = delay_time / 7.5;
  6558  079F  0021               	movlb	1	; select bank1
  6559  07A0  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6560  07A1  0020               	movlb	0	; select bank0
  6561  07A2  00AD               	movwf	___altoft@c+3
  6562  07A3  0021               	movlb	1	; select bank1
  6563  07A4  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6564  07A5  0020               	movlb	0	; select bank0
  6565  07A6  00AC               	movwf	___altoft@c+2
  6566  07A7  0021               	movlb	1	; select bank1
  6567  07A8  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6568  07A9  0020               	movlb	0	; select bank0
  6569  07AA  00AB               	movwf	___altoft@c+1
  6570  07AB  0021               	movlb	1	; select bank1
  6571  07AC  084D               	movf	_delay_time^(0+128),w	;volatile
  6572  07AD  0020               	movlb	0	; select bank0
  6573  07AE  00AA               	movwf	___altoft@c
  6574  07AF  3190  201C  3182   	fcall	___altoft
  6575  07B2  0020               	movlb	0	; select bank0
  6576  07B3  082A               	movf	?___altoft,w
  6577  07B4  00CA               	movwf	___ftdiv@f1
  6578  07B5  082B               	movf	?___altoft+1,w
  6579  07B6  00CB               	movwf	___ftdiv@f1+1
  6580  07B7  082C               	movf	?___altoft+2,w
  6581  07B8  00CC               	movwf	___ftdiv@f1+2
  6582  07B9  3000               	movlw	0
  6583  07BA  00C7               	movwf	___ftdiv@f2
  6584  07BB  30F0               	movlw	240
  6585  07BC  00C8               	movwf	___ftdiv@f2+1
  6586  07BD  3040               	movlw	64
  6587  07BE  00C9               	movwf	___ftdiv@f2+2
  6588  07BF  3197  2757  3182   	fcall	___ftdiv
  6589  07C2  0020               	movlb	0	; select bank0
  6590  07C3  0847               	movf	?___ftdiv,w
  6591  07C4  0021               	movlb	1	; select bank1
  6592  07C5  00A0               	movwf	___fttol@f1^(0+128)
  6593  07C6  0020               	movlb	0	; select bank0
  6594  07C7  0848               	movf	?___ftdiv+1,w
  6595  07C8  0021               	movlb	1	; select bank1
  6596  07C9  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6597  07CA  0020               	movlb	0	; select bank0
  6598  07CB  0849               	movf	?___ftdiv+2,w
  6599  07CC  0021               	movlb	1	; select bank1
  6600  07CD  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6601  07CE  3196  2645  3182   	fcall	___fttol
  6602  07D1  0021               	movlb	1	; select bank1
  6603  07D2  0821               	movf	(?___fttol^(0+128)+1),w
  6604  07D3  0022               	movlb	2	; select bank2
  6605  07D4  00E5               	movwf	(_mod_delay_time+1)^(0+256)
  6606  07D5  0021               	movlb	1	; select bank1
  6607  07D6  0820               	movf	?___fttol^(0+128),w
  6608  07D7  0022               	movlb	2	; select bank2
  6609  07D8  00E4               	movwf	_mod_delay_time^(0+256)
  6610                           
  6611                           ;main.c: 436: delay_time_changed = 0;
  6612  07D9  01DE               	clrf	_delay_time_changed^(0+256)
  6613  07DA  01DF               	clrf	(_delay_time_changed+1)^(0+256)
  6614  07DB  2AC2               	goto	l5736
  6615  07DC                     __end_of_main:	
  6616                           
  6617                           	psect	text1
  6618  0801                     __ptext1:	
  6619 ;; *************** function _update_mode *****************
  6620 ;; Defined at:
  6621 ;;		line 82 in file "tactiles.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;		None
  6624 ;; Auto vars:     Size  Location     Type
  6625 ;;		None
  6626 ;; Return value:  Size  Location     Type
  6627 ;;                  1    wreg      void 
  6628 ;; Registers used:
  6629 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6630 ;; Tracked objects:
  6631 ;;		On entry : 0/0
  6632 ;;		On exit  : 0/0
  6633 ;;		Unchanged: 0/0
  6634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6638 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6639 ;;Total ram usage:        1 bytes
  6640 ;; Hardware stack levels used:    1
  6641 ;; Hardware stack levels required when called:    2
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_main
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           
  6650                           ;psect for function _update_mode
  6651  0801                     _update_mode:	
  6652                           
  6653                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6654                           
  6655                           ;incstack = 0
  6656                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6657  0801  0020               	movlb	0	; select bank0
  6658  0802  180E               	btfsc	14,0	;volatile
  6659  0803  283E               	goto	l5386
  6660                           
  6661                           ;tactiles.c: 88: debounce_mode2++;
  6662  0804  3001               	movlw	1
  6663  0805  0022               	movlb	2	; select bank2
  6664  0806  07B4               	addwf	_debounce_mode2^(0+256),f
  6665  0807  3000               	movlw	0
  6666  0808  3DB5               	addwfc	(_debounce_mode2+1)^(0+256),f
  6667                           
  6668                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6669  0809  0835               	movf	(_debounce_mode2+1)^(0+256),w
  6670  080A  3A80               	xorlw	128
  6671  080B  0020               	movlb	0	; select bank0
  6672  080C  00A2               	movwf	??_update_mode
  6673  080D  3080               	movlw	128
  6674  080E  0222               	subwf	??_update_mode,w
  6675  080F  1D03               	skipz
  6676  0810  2814               	goto	u5855
  6677  0811  301A               	movlw	26
  6678  0812  0022               	movlb	2	; select bank2
  6679  0813  0234               	subwf	_debounce_mode2^(0+256),w
  6680  0814                     u5855:	
  6681  0814  1C03               	skipc
  6682  0815  0008               	return
  6683                           
  6684                           ;tactiles.c: 90: debounce_mode2 = 25;
  6685  0816  3019               	movlw	25
  6686  0817  0022               	movlb	2	; select bank2
  6687  0818  00B4               	movwf	_debounce_mode2^(0+256)
  6688  0819  3000               	movlw	0
  6689  081A  00B5               	movwf	(_debounce_mode2^(0+256)+1)
  6690                           
  6691                           ;tactiles.c: 91: mode2_state++;
  6692  081B  3001               	movlw	1
  6693  081C  0020               	movlb	0	; select bank0
  6694  081D  00A2               	movwf	??_update_mode
  6695  081E  0822               	movf	??_update_mode,w
  6696  081F  0022               	movlb	2	; select bank2
  6697  0820  07D7               	addwf	_mode2_state^(0+256),f
  6698                           
  6699                           ;tactiles.c: 92: if (mode2_state > 2) {
  6700  0821  3003               	movlw	3
  6701  0822  0257               	subwf	_mode2_state^(0+256),w
  6702  0823  1C03               	skipc
  6703  0824  282F               	goto	l5384
  6704                           
  6705                           ;tactiles.c: 93: mode2_state = 0;
  6706  0825  01D7               	clrf	_mode2_state^(0+256)
  6707                           
  6708                           ;tactiles.c: 94: }
  6709                           ;tactiles.c: 95: switch(mode2_state) {
  6710  0826  282F               	goto	l5384
  6711  0827                     l868:	
  6712                           ;tactiles.c: 96: case 0:
  6713                           
  6714                           
  6715                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6716  0827  108D               	bcf	13,1	;volatile
  6717  0828  282D               	goto	L5
  6718  0829                     l870:	
  6719                           ;tactiles.c: 100: case 1:
  6720                           
  6721                           ;tactiles.c: 99: break;
  6722                           
  6723                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6724                           
  6725                           
  6726                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6727  0829  108D               	bcf	13,1	;volatile
  6728                           
  6729                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6730  082A  140D               	bsf	13,0	;volatile
  6731                           
  6732                           ;tactiles.c: 103: break;
  6733  082B  283A               	goto	l872
  6734  082C                     l871:	
  6735                           ;tactiles.c: 104: case 2:
  6736                           
  6737                           
  6738                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6739  082C  148D               	bsf	13,1	;volatile
  6740  082D                     L5:	
  6741                           
  6742                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6743  082D  100D               	bcf	13,0	;volatile
  6744                           
  6745                           ;tactiles.c: 108: }
  6746                           
  6747                           ;tactiles.c: 107: break;
  6748  082E  283A               	goto	l872
  6749  082F                     l5384:	
  6750  082F  0857               	movf	_mode2_state^(0+256),w
  6751                           
  6752                           ; Switch size 1, requested type "space"
  6753                           ; Number of cases is 3, Range of values is 0 to 2
  6754                           ; switch strategies available:
  6755                           ; Name         Instructions Cycles
  6756                           ; simple_byte           10     6 (average)
  6757                           ; direct_byte           12     6 (fixed)
  6758                           ; jumptable            260     6 (fixed)
  6759                           ;	Chosen strategy is simple_byte
  6760  0830  3A00               	xorlw	0	; case 0
  6761  0831  1903               	skipnz
  6762  0832  2827               	goto	l868
  6763  0833  3A01               	xorlw	1	; case 1
  6764  0834  1903               	skipnz
  6765  0835  2829               	goto	l870
  6766  0836  3A03               	xorlw	3	; case 2
  6767  0837  1903               	skipnz
  6768  0838  282C               	goto	l871
  6769  0839  283A               	goto	l872
  6770  083A                     l872:	
  6771                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6772                           
  6773  083A  0020               	movlb	0	; select bank0
  6774  083B  180E               	btfsc	14,0	;volatile
  6775  083C  0008               	return
  6776  083D  283A               	goto	l872
  6777  083E                     l5386:	
  6778                           ;tactiles.c: 110: }
  6779                           ;tactiles.c: 111: }
  6780                           ;tactiles.c: 112: } else {
  6781                           
  6782                           
  6783                           ;tactiles.c: 113: debounce_mode2 = 0;
  6784  083E  0022               	movlb	2	; select bank2
  6785  083F  01B4               	clrf	_debounce_mode2^(0+256)
  6786  0840  01B5               	clrf	(_debounce_mode2+1)^(0+256)
  6787  0841  0008               	return
  6788  0842                     __end_of_update_mode:	
  6789                           
  6790                           	psect	text2
  6791  0B96                     __ptext2:	
  6792 ;; *************** function _updateSwitchTap *****************
  6793 ;; Defined at:
  6794 ;;		line 48 in file "SwitchTap.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;		None
  6797 ;; Auto vars:     Size  Location     Type
  6798 ;;  tapCntDiviso    2   35[BANK0 ] int 
  6799 ;;  iCnt            1   37[BANK0 ] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      void 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6810 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6811 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6812 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6813 ;;Total ram usage:        9 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:    5
  6816 ;; This function calls:
  6817 ;;		___aldiv
  6818 ;;		_setDoublePressState
  6819 ;;		_setLongTapState
  6820 ;; This function is called by:
  6821 ;;		_main
  6822 ;; This function uses a non-reentrant model
  6823 ;;
  6824                           
  6825                           
  6826                           ;psect for function _updateSwitchTap
  6827  0B96                     _updateSwitchTap:	
  6828                           
  6829                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6830                           
  6831                           ;incstack = 0
  6832                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6833  0B96  0020               	movlb	0	; select bank0
  6834  0B97  01C5               	clrf	updateSwitchTap@iCnt
  6835                           
  6836                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6837  0B98  1810               	btfsc	16,0	;volatile
  6838  0B99  2BA1               	goto	l5514
  6839                           
  6840                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6841  0B9A  0021               	movlb	1	; select bank1
  6842  0B9B  086F               	movf	_switchTap_pressed^(0+128),w
  6843  0B9C  1903               	btfsc	3,2
  6844  0B9D  2BAC               	goto	l1207
  6845                           
  6846                           ;SwitchTap.c: 59: switchTap_pressed--;
  6847  0B9E  3001               	movlw	1
  6848  0B9F  02EF               	subwf	_switchTap_pressed^(0+128),f
  6849                           
  6850                           ;SwitchTap.c: 60: }
  6851                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6852  0BA0  2BAC               	goto	l1207
  6853  0BA1                     l5514:	
  6854  0BA1  3019               	movlw	25
  6855  0BA2  0021               	movlb	1	; select bank1
  6856  0BA3  026F               	subwf	_switchTap_pressed^(0+128),w
  6857  0BA4  1803               	skipnc
  6858  0BA5  2BAC               	goto	l1207
  6859                           
  6860                           ;SwitchTap.c: 62: switchTap_pressed++;
  6861  0BA6  3001               	movlw	1
  6862  0BA7  0020               	movlb	0	; select bank0
  6863  0BA8  00BD               	movwf	??_updateSwitchTap
  6864  0BA9  083D               	movf	??_updateSwitchTap,w
  6865  0BAA  0021               	movlb	1	; select bank1
  6866  0BAB  07EF               	addwf	_switchTap_pressed^(0+128),f
  6867  0BAC                     l1207:	
  6868                           
  6869                           ;SwitchTap.c: 63: }
  6870                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6871  0BAC  086F               	movf	_switchTap_pressed^(0+128),w
  6872  0BAD  1D03               	btfss	3,2
  6873  0BAE  2D65               	goto	l5598
  6874                           
  6875                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6876  0BAF  1BE6               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  6877  0BB0  2C36               	goto	l5558
  6878  0BB1  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  6879  0BB2  1D03               	btfss	3,2
  6880  0BB3  2BBD               	goto	l5520
  6881  0BB4  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  6882  0BB5  1D03               	btfss	3,2
  6883  0BB6  2BBD               	goto	l5520
  6884  0BB7  301B               	movlw	27
  6885  0BB8  0263               	subwf	_tap_timer^(0+128),w	;volatile
  6886  0BB9  3006               	movlw	6
  6887  0BBA  3B64               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  6888  0BBB  1C03               	btfss	3,0
  6889  0BBC  2C36               	goto	l5558
  6890  0BBD                     l5520:	
  6891                           
  6892                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6893  0BBD  0022               	movlb	2	; select bank2
  6894  0BBE  035A               	decf	_switchTap_down^(0+256),w
  6895  0BBF  1903               	btfsc	3,2
  6896  0BC0  2BFE               	goto	l5538
  6897                           
  6898                           ;SwitchTap.c: 78: switchTap_down = 1;
  6899  0BC1  01DA               	clrf	_switchTap_down^(0+256)
  6900  0BC2  0ADA               	incf	_switchTap_down^(0+256),f
  6901                           
  6902                           ;SwitchTap.c: 79: tap_timer = 0;
  6903  0BC3  3000               	movlw	0
  6904  0BC4  0021               	movlb	1	; select bank1
  6905  0BC5  00E6               	movwf	(_tap_timer+3)^(0+128)	;volatile
  6906  0BC6  3000               	movlw	0
  6907  0BC7  00E5               	movwf	(_tap_timer+2)^(0+128)	;volatile
  6908  0BC8  3000               	movlw	0
  6909  0BC9  00E4               	movwf	(_tap_timer+1)^(0+128)	;volatile
  6910  0BCA  3000               	movlw	0
  6911  0BCB  00E3               	movwf	_tap_timer^(0+128)	;volatile
  6912                           
  6913                           ;SwitchTap.c: 80: tap_iteration = 1;
  6914  0BCC  3001               	movlw	1
  6915  0BCD  0022               	movlb	2	; select bank2
  6916  0BCE  00E8               	movwf	_tap_iteration^(0+256)
  6917  0BCF  3000               	movlw	0
  6918  0BD0  00E9               	movwf	(_tap_iteration^(0+256)+1)
  6919                           
  6920                           ;SwitchTap.c: 81: tap_total = 0;
  6921  0BD1  3000               	movlw	0
  6922  0BD2  0023               	movlb	3	; select bank3
  6923  0BD3  00E3               	movwf	(_tap_total+3)^(0+384)
  6924  0BD4  3000               	movlw	0
  6925  0BD5  00E2               	movwf	(_tap_total+2)^(0+384)
  6926  0BD6  3000               	movlw	0
  6927  0BD7  00E1               	movwf	(_tap_total+1)^(0+384)
  6928  0BD8  3000               	movlw	0
  6929  0BD9  00E0               	movwf	_tap_total^(0+384)
  6930                           
  6931                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6932  0BDA  0022               	movlb	2	; select bank2
  6933  0BDB  01DE               	clrf	_delay_time_changed^(0+256)
  6934  0BDC  01DF               	clrf	(_delay_time_changed+1)^(0+256)
  6935                           
  6936                           ;SwitchTap.c: 83: LATDbits.LATD0 = 0;
  6937  0BDD  100F               	bcf	15,0	;volatile
  6938                           
  6939                           ;SwitchTap.c: 85: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6940  0BDE  0020               	movlb	0	; select bank0
  6941  0BDF  01C5               	clrf	updateSwitchTap@iCnt
  6942  0BE0  0AC5               	incf	updateSwitchTap@iCnt,f
  6943  0BE1                     l5536:	
  6944  0BE1  0845               	movf	updateSwitchTap@iCnt,w
  6945  0BE2  0021               	movlb	1	; select bank1
  6946  0BE3  025E               	subwf	_num_taps^(0+128),w
  6947  0BE4  1C03               	btfss	3,0
  6948  0BE5  2BFE               	goto	l5538
  6949                           
  6950                           ;SwitchTap.c: 86: tap_history[iCnt] = 0;
  6951  0BE6  0020               	movlb	0	; select bank0
  6952  0BE7  0845               	movf	updateSwitchTap@iCnt,w
  6953  0BE8  00BD               	movwf	??_updateSwitchTap
  6954  0BE9  3001               	movlw	1
  6955  0BEA                     u6155:	
  6956  0BEA  35BD               	lslf	??_updateSwitchTap,f
  6957  0BEB  3EFF               	addlw	-1
  6958  0BEC  1D03               	skipz
  6959  0BED  2BEA               	goto	u6155
  6960  0BEE  353D               	lslf	??_updateSwitchTap,w
  6961  0BEF  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6962  0BF0  0086               	movwf	6
  6963  0BF1  3001               	movlw	1	; select bank3/4
  6964  0BF2  0087               	movwf	7
  6965  0BF3  3000               	movlw	0
  6966  0BF4  3FC0               	movwi [0]fsr1
  6967  0BF5  3000               	movlw	0
  6968  0BF6  3FC1               	movwi [1]fsr1
  6969  0BF7  3FC2               	movwi [2]fsr1
  6970  0BF8  3FC3               	movwi [3]fsr1
  6971  0BF9  3001               	movlw	1
  6972  0BFA  00BD               	movwf	??_updateSwitchTap
  6973  0BFB  083D               	movf	??_updateSwitchTap,w
  6974  0BFC  07C5               	addwf	updateSwitchTap@iCnt,f
  6975  0BFD  2BE1               	goto	l5536
  6976  0BFE                     l5538:	
  6977                           
  6978                           ;SwitchTap.c: 87: }
  6979                           ;SwitchTap.c: 88: }
  6980                           ;SwitchTap.c: 91: if (longTap_start == 0) {
  6981  0BFE  0022               	movlb	2	; select bank2
  6982  0BFF  0855               	movf	_longTap_start^(0+256),w
  6983  0C00  1D03               	btfss	3,2
  6984  0C01  2C09               	goto	l5544
  6985                           
  6986                           ;SwitchTap.c: 92: longTap_start = 1;
  6987  0C02  01D5               	clrf	_longTap_start^(0+256)
  6988  0C03  0AD5               	incf	_longTap_start^(0+256),f
  6989                           
  6990                           ;SwitchTap.c: 93: longTap_state = 0;
  6991  0C04  0020               	movlb	0	; select bank0
  6992  0C05  01EA               	clrf	_longTap_state	;volatile
  6993                           
  6994                           ;SwitchTap.c: 94: longTap_timer = 0;
  6995  0C06  0022               	movlb	2	; select bank2
  6996  0C07  01C6               	clrf	_longTap_timer^(0+256)	;volatile
  6997  0C08  01C7               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6998  0C09                     l5544:	
  6999                           
  7000                           ;SwitchTap.c: 95: }
  7001                           ;SwitchTap.c: 99: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  7002  0C09  0021               	movlb	1	; select bank1
  7003  0C0A  085A               	movf	(_long_press_limit+1)^(0+128),w
  7004  0C0B  0022               	movlb	2	; select bank2
  7005  0C0C  0247               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  7006  0C0D  1D03               	skipz
  7007  0C0E  2C13               	goto	u6185
  7008  0C0F  0021               	movlb	1	; select bank1
  7009  0C10  0859               	movf	_long_press_limit^(0+128),w
  7010  0C11  0022               	movlb	2	; select bank2
  7011  0C12  0246               	subwf	_longTap_timer^(0+256),w	;volatile
  7012  0C13                     u6185:	
  7013  0C13  1C03               	skipc
  7014  0C14  0008               	return
  7015  0C15  0020               	movlb	0	; select bank0
  7016  0C16  086A               	movf	_longTap_state,w	;volatile
  7017  0C17  1D03               	btfss	3,2
  7018  0C18  0008               	return
  7019                           
  7020                           ;SwitchTap.c: 101: longTap_timer = long_press_limit;
  7021  0C19  0021               	movlb	1	; select bank1
  7022  0C1A  085A               	movf	(_long_press_limit+1)^(0+128),w
  7023  0C1B  0022               	movlb	2	; select bank2
  7024  0C1C  00C7               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  7025  0C1D  0021               	movlb	1	; select bank1
  7026  0C1E  0859               	movf	_long_press_limit^(0+128),w
  7027  0C1F  0022               	movlb	2	; select bank2
  7028  0C20  00C6               	movwf	_longTap_timer^(0+256)	;volatile
  7029                           
  7030                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7031  0C21  120D               	bcf	13,4	;volatile
  7032                           
  7033                           ;SwitchTap.c: 104: if (feedback_start != 1) {
  7034  0C22  0021               	movlb	1	; select bank1
  7035  0C23  036D               	decf	_feedback_start^(0+128),w
  7036  0C24  1903               	btfsc	3,2
  7037  0C25  2C2E               	goto	l5556
  7038                           
  7039                           ;SwitchTap.c: 105: setLongTapState(1);
  7040  0C26  3001               	movlw	1
  7041  0C27  0020               	movlb	0	; select bank0
  7042  0C28  00A2               	movwf	setLongTapState@f_state
  7043  0C29  3000               	movlw	0
  7044  0C2A  00A3               	movwf	setLongTapState@f_state+1
  7045  0C2B  319E  267E         	fcall	_setLongTapState
  7046                           
  7047                           ;SwitchTap.c: 106: } else {
  7048  0C2D  0008               	return
  7049  0C2E                     l5556:	
  7050                           
  7051                           ;SwitchTap.c: 107: setDoublePressState(1);
  7052  0C2E  3001               	movlw	1
  7053  0C2F  0020               	movlb	0	; select bank0
  7054  0C30  00B4               	movwf	setDoublePressState@f_state
  7055  0C31  3000               	movlw	0
  7056  0C32  00B5               	movwf	setDoublePressState@f_state+1
  7057  0C33  319F  2706         	fcall	_setDoublePressState
  7058                           
  7059                           ;SwitchTap.c: 108: }
  7060                           ;SwitchTap.c: 109: }
  7061                           ;SwitchTap.c: 111: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7062  0C35  0008               	return
  7063  0C36                     l5558:	
  7064  0C36  0021               	movlb	1	; select bank1
  7065  0C37  1BE6               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7066  0C38  2C45               	goto	l5560
  7067  0C39  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7068  0C3A  1D03               	btfss	3,2
  7069  0C3B  0008               	return
  7070  0C3C  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7071  0C3D  1D03               	btfss	3,2
  7072  0C3E  0008               	return
  7073  0C3F  301B               	movlw	27
  7074  0C40  0263               	subwf	_tap_timer^(0+128),w	;volatile
  7075  0C41  3006               	movlw	6
  7076  0C42  3B64               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7077  0C43  1803               	btfsc	3,0
  7078  0C44  0008               	return
  7079  0C45                     l5560:	
  7080  0C45  0020               	movlb	0	; select bank0
  7081  0C46  086A               	movf	_longTap_state,w	;volatile
  7082  0C47  1D03               	btfss	3,2
  7083  0C48  0008               	return
  7084  0C49  0022               	movlb	2	; select bank2
  7085  0C4A  035A               	decf	_switchTap_down^(0+256),w
  7086  0C4B  1903               	btfsc	3,2
  7087  0C4C  0008               	return
  7088                           
  7089                           ;SwitchTap.c: 113: switchTap_down = 1;
  7090  0C4D  01DA               	clrf	_switchTap_down^(0+256)
  7091  0C4E  0ADA               	incf	_switchTap_down^(0+256),f
  7092                           
  7093                           ;SwitchTap.c: 114: if (tap_timer >= 1172) {
  7094  0C4F  0021               	movlb	1	; select bank1
  7095  0C50  1BE6               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7096  0C51  2C66               	goto	l1221
  7097  0C52  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7098  0C53  1D03               	btfss	3,2
  7099  0C54  2C5E               	goto	l5568
  7100  0C55  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7101  0C56  1D03               	btfss	3,2
  7102  0C57  2C5E               	goto	l5568
  7103  0C58  3094               	movlw	148
  7104  0C59  0263               	subwf	_tap_timer^(0+128),w	;volatile
  7105  0C5A  3004               	movlw	4
  7106  0C5B  3B64               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7107  0C5C  1C03               	btfss	3,0
  7108  0C5D  2C66               	goto	l1221
  7109  0C5E                     l5568:	
  7110                           
  7111                           ;SwitchTap.c: 115: tap_timer = 1172;
  7112  0C5E  3000               	movlw	0
  7113  0C5F  00E6               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7114  0C60  3000               	movlw	0
  7115  0C61  00E5               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7116  0C62  3004               	movlw	4
  7117  0C63  00E4               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7118  0C64  3094               	movlw	148
  7119  0C65  00E3               	movwf	_tap_timer^(0+128)	;volatile
  7120  0C66                     l1221:	
  7121                           
  7122                           ;SwitchTap.c: 116: }
  7123                           ;SwitchTap.c: 118: int tapCntDivisor = num_taps;
  7124  0C66  085E               	movf	_num_taps^(0+128),w
  7125  0C67  0020               	movlb	0	; select bank0
  7126  0C68  00BD               	movwf	??_updateSwitchTap
  7127  0C69  01BE               	clrf	??_updateSwitchTap+1
  7128  0C6A  083D               	movf	??_updateSwitchTap,w
  7129  0C6B  00C3               	movwf	updateSwitchTap@tapCntDivisor
  7130  0C6C  083E               	movf	??_updateSwitchTap+1,w
  7131  0C6D  00C4               	movwf	updateSwitchTap@tapCntDivisor+1
  7132                           
  7133                           ;SwitchTap.c: 119: if (tap_iteration <= num_taps) {
  7134  0C6E  0022               	movlb	2	; select bank2
  7135  0C6F  0869               	movf	(_tap_iteration+1)^(0+256),w
  7136  0C70  3A80               	xorlw	128
  7137  0C71  3C80               	sublw	128
  7138  0C72  1D03               	skipz
  7139  0C73  2C77               	goto	u6255
  7140  0C74  0868               	movf	_tap_iteration^(0+256),w
  7141  0C75  0021               	movlb	1	; select bank1
  7142  0C76  025E               	subwf	_num_taps^(0+128),w
  7143  0C77                     u6255:	
  7144  0C77  1C03               	skipc
  7145  0C78  2CA9               	goto	l5576
  7146                           
  7147                           ;SwitchTap.c: 120: tap_total += tap_timer;
  7148  0C79  0021               	movlb	1	; select bank1
  7149  0C7A  0863               	movf	_tap_timer^(0+128),w	;volatile
  7150  0C7B  0023               	movlb	3	; select bank3
  7151  0C7C  07E0               	addwf	_tap_total^(0+384),f
  7152  0C7D  0021               	movlb	1	; select bank1
  7153  0C7E  0864               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7154  0C7F  0023               	movlb	3	; select bank3
  7155  0C80  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7156  0C81  0021               	movlb	1	; select bank1
  7157  0C82  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7158  0C83  0023               	movlb	3	; select bank3
  7159  0C84  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7160  0C85  0021               	movlb	1	; select bank1
  7161  0C86  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7162  0C87  0023               	movlb	3	; select bank3
  7163  0C88  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7164                           
  7165                           ;SwitchTap.c: 121: tap_history[tap_iteration] = tap_timer;
  7166  0C89  0022               	movlb	2	; select bank2
  7167  0C8A  0868               	movf	_tap_iteration^(0+256),w
  7168  0C8B  0020               	movlb	0	; select bank0
  7169  0C8C  00BD               	movwf	??_updateSwitchTap
  7170  0C8D  3001               	movlw	1
  7171  0C8E                     u6265:	
  7172  0C8E  35BD               	lslf	??_updateSwitchTap,f
  7173  0C8F  3EFF               	addlw	-1
  7174  0C90  1D03               	skipz
  7175  0C91  2C8E               	goto	u6265
  7176  0C92  353D               	lslf	??_updateSwitchTap,w
  7177  0C93  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7178  0C94  0086               	movwf	6
  7179  0C95  3001               	movlw	1	; select bank3/4
  7180  0C96  0087               	movwf	7
  7181  0C97  0021               	movlb	1	; select bank1
  7182  0C98  0863               	movf	_tap_timer^(0+128),w	;volatile
  7183  0C99  3FC0               	movwi [0]fsr1
  7184  0C9A  0864               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7185  0C9B  3FC1               	movwi [1]fsr1
  7186  0C9C  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7187  0C9D  3FC2               	movwi [2]fsr1
  7188  0C9E  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7189  0C9F  3FC3               	movwi [3]fsr1
  7190                           
  7191                           ;SwitchTap.c: 122: tapCntDivisor = tap_iteration;
  7192  0CA0  0022               	movlb	2	; select bank2
  7193  0CA1  0869               	movf	(_tap_iteration+1)^(0+256),w
  7194  0CA2  0020               	movlb	0	; select bank0
  7195  0CA3  00C4               	movwf	updateSwitchTap@tapCntDivisor+1
  7196  0CA4  0022               	movlb	2	; select bank2
  7197  0CA5  0868               	movf	_tap_iteration^(0+256),w
  7198  0CA6  0020               	movlb	0	; select bank0
  7199  0CA7  00C3               	movwf	updateSwitchTap@tapCntDivisor
  7200                           
  7201                           ;SwitchTap.c: 123: } else {
  7202  0CA8  2D25               	goto	l5590
  7203  0CA9                     l5576:	
  7204                           
  7205                           ;SwitchTap.c: 124: tap_total = 0;
  7206  0CA9  3000               	movlw	0
  7207  0CAA  0023               	movlb	3	; select bank3
  7208  0CAB  00E3               	movwf	(_tap_total+3)^(0+384)
  7209  0CAC  3000               	movlw	0
  7210  0CAD  00E2               	movwf	(_tap_total+2)^(0+384)
  7211  0CAE  3000               	movlw	0
  7212  0CAF  00E1               	movwf	(_tap_total+1)^(0+384)
  7213  0CB0  3000               	movlw	0
  7214  0CB1  00E0               	movwf	_tap_total^(0+384)
  7215                           
  7216                           ;SwitchTap.c: 125: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7217  0CB2  0020               	movlb	0	; select bank0
  7218  0CB3  01C5               	clrf	updateSwitchTap@iCnt
  7219  0CB4  0AC5               	incf	updateSwitchTap@iCnt,f
  7220  0CB5                     l5584:	
  7221  0CB5  0021               	movlb	1	; select bank1
  7222  0CB6  085E               	movf	_num_taps^(0+128),w
  7223  0CB7  0020               	movlb	0	; select bank0
  7224  0CB8  0245               	subwf	updateSwitchTap@iCnt,w
  7225  0CB9  1803               	btfsc	3,0
  7226  0CBA  2CFF               	goto	l5586
  7227                           
  7228                           ;SwitchTap.c: 126: tap_history[iCnt] = tap_history[iCnt + 1];
  7229  0CBB  0845               	movf	updateSwitchTap@iCnt,w
  7230  0CBC  00BD               	movwf	??_updateSwitchTap
  7231  0CBD  3001               	movlw	1
  7232  0CBE                     u6275:	
  7233  0CBE  35BD               	lslf	??_updateSwitchTap,f
  7234  0CBF  3EFF               	addlw	-1
  7235  0CC0  1D03               	skipz
  7236  0CC1  2CBE               	goto	u6275
  7237  0CC2  353D               	lslf	??_updateSwitchTap,w
  7238  0CC3  3E04               	addlw	4
  7239  0CC4  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7240  0CC5  0086               	movwf	6
  7241  0CC6  3001               	movlw	1	; select bank3/4
  7242  0CC7  0087               	movwf	7
  7243  0CC8  3F40               	moviw [0]fsr1
  7244  0CC9  00BE               	movwf	??_updateSwitchTap+1
  7245  0CCA  3F41               	moviw [1]fsr1
  7246  0CCB  00BF               	movwf	??_updateSwitchTap+2
  7247  0CCC  3F42               	moviw [2]fsr1
  7248  0CCD  00C0               	movwf	??_updateSwitchTap+3
  7249  0CCE  3F43               	moviw [3]fsr1
  7250  0CCF  00C1               	movwf	??_updateSwitchTap+4
  7251  0CD0  0845               	movf	updateSwitchTap@iCnt,w
  7252  0CD1  00C2               	movwf	??_updateSwitchTap+5
  7253  0CD2  3001               	movlw	1
  7254  0CD3                     u6285:	
  7255  0CD3  35C2               	lslf	??_updateSwitchTap+5,f
  7256  0CD4  3EFF               	addlw	-1
  7257  0CD5  1D03               	skipz
  7258  0CD6  2CD3               	goto	u6285
  7259  0CD7  3542               	lslf	??_updateSwitchTap+5,w
  7260  0CD8  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7261  0CD9  0086               	movwf	6
  7262  0CDA  3001               	movlw	1	; select bank3/4
  7263  0CDB  0087               	movwf	7
  7264  0CDC  083E               	movf	??_updateSwitchTap+1,w
  7265  0CDD  3FC0               	movwi [0]fsr1
  7266  0CDE  083F               	movf	??_updateSwitchTap+2,w
  7267  0CDF  3FC1               	movwi [1]fsr1
  7268  0CE0  0840               	movf	??_updateSwitchTap+3,w
  7269  0CE1  3FC2               	movwi [2]fsr1
  7270  0CE2  0841               	movf	??_updateSwitchTap+4,w
  7271  0CE3  3FC3               	movwi [3]fsr1
  7272                           
  7273                           ;SwitchTap.c: 127: tap_total += tap_history[iCnt];
  7274  0CE4  0845               	movf	updateSwitchTap@iCnt,w
  7275  0CE5  00BD               	movwf	??_updateSwitchTap
  7276  0CE6  3001               	movlw	1
  7277  0CE7                     u6295:	
  7278  0CE7  35BD               	lslf	??_updateSwitchTap,f
  7279  0CE8  3EFF               	addlw	-1
  7280  0CE9  1D03               	skipz
  7281  0CEA  2CE7               	goto	u6295
  7282  0CEB  353D               	lslf	??_updateSwitchTap,w
  7283  0CEC  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7284  0CED  0086               	movwf	6
  7285  0CEE  3001               	movlw	1	; select bank3/4
  7286  0CEF  0087               	movwf	7
  7287  0CF0  3F40               	moviw [0]fsr1
  7288  0CF1  0023               	movlb	3	; select bank3
  7289  0CF2  07E0               	addwf	_tap_total^(0+384),f
  7290  0CF3  3F41               	moviw [1]fsr1
  7291  0CF4  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7292  0CF5  3F42               	moviw [2]fsr1
  7293  0CF6  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7294  0CF7  3F43               	moviw [3]fsr1
  7295  0CF8  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7296  0CF9  3001               	movlw	1
  7297  0CFA  0020               	movlb	0	; select bank0
  7298  0CFB  00BD               	movwf	??_updateSwitchTap
  7299  0CFC  083D               	movf	??_updateSwitchTap,w
  7300  0CFD  07C5               	addwf	updateSwitchTap@iCnt,f
  7301  0CFE  2CB5               	goto	l5584
  7302  0CFF                     l5586:	
  7303                           
  7304                           ;SwitchTap.c: 128: }
  7305                           ;SwitchTap.c: 129: tap_history[num_taps] = tap_timer;
  7306  0CFF  0021               	movlb	1	; select bank1
  7307  0D00  085E               	movf	_num_taps^(0+128),w
  7308  0D01  0020               	movlb	0	; select bank0
  7309  0D02  00BD               	movwf	??_updateSwitchTap
  7310  0D03  3001               	movlw	1
  7311  0D04                     u6315:	
  7312  0D04  35BD               	lslf	??_updateSwitchTap,f
  7313  0D05  3EFF               	addlw	-1
  7314  0D06  1D03               	skipz
  7315  0D07  2D04               	goto	u6315
  7316  0D08  353D               	lslf	??_updateSwitchTap,w
  7317  0D09  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7318  0D0A  0086               	movwf	6
  7319  0D0B  3001               	movlw	1	; select bank3/4
  7320  0D0C  0087               	movwf	7
  7321  0D0D  0021               	movlb	1	; select bank1
  7322  0D0E  0863               	movf	_tap_timer^(0+128),w	;volatile
  7323  0D0F  3FC0               	movwi [0]fsr1
  7324  0D10  0864               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7325  0D11  3FC1               	movwi [1]fsr1
  7326  0D12  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7327  0D13  3FC2               	movwi [2]fsr1
  7328  0D14  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7329  0D15  3FC3               	movwi [3]fsr1
  7330                           
  7331                           ;SwitchTap.c: 130: tap_total += tap_timer;
  7332  0D16  0863               	movf	_tap_timer^(0+128),w	;volatile
  7333  0D17  0023               	movlb	3	; select bank3
  7334  0D18  07E0               	addwf	_tap_total^(0+384),f
  7335  0D19  0021               	movlb	1	; select bank1
  7336  0D1A  0864               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7337  0D1B  0023               	movlb	3	; select bank3
  7338  0D1C  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7339  0D1D  0021               	movlb	1	; select bank1
  7340  0D1E  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7341  0D1F  0023               	movlb	3	; select bank3
  7342  0D20  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7343  0D21  0021               	movlb	1	; select bank1
  7344  0D22  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7345  0D23  0023               	movlb	3	; select bank3
  7346  0D24  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7347  0D25                     l5590:	
  7348                           
  7349                           ;SwitchTap.c: 131: }
  7350                           ;SwitchTap.c: 133: baseline_delay_time = tap_total / tapCntDivisor;
  7351  0D25  0020               	movlb	0	; select bank0
  7352  0D26  0843               	movf	updateSwitchTap@tapCntDivisor,w
  7353  0D27  00AE               	movwf	___aldiv@divisor
  7354  0D28  0844               	movf	updateSwitchTap@tapCntDivisor+1,w
  7355  0D29  00AF               	movwf	___aldiv@divisor+1
  7356  0D2A  0D89               	rlf	9,f
  7357  0D2B  3B89               	subwfb	9,f
  7358  0D2C  0989               	comf	9,f
  7359  0D2D  00B0               	movwf	___aldiv@divisor+2
  7360  0D2E  00B1               	movwf	___aldiv@divisor+3
  7361  0D2F  0023               	movlb	3	; select bank3
  7362  0D30  0863               	movf	(_tap_total+3)^(0+384),w
  7363  0D31  0020               	movlb	0	; select bank0
  7364  0D32  00B5               	movwf	___aldiv@dividend+3
  7365  0D33  0023               	movlb	3	; select bank3
  7366  0D34  0862               	movf	(_tap_total+2)^(0+384),w
  7367  0D35  0020               	movlb	0	; select bank0
  7368  0D36  00B4               	movwf	___aldiv@dividend+2
  7369  0D37  0023               	movlb	3	; select bank3
  7370  0D38  0861               	movf	(_tap_total+1)^(0+384),w
  7371  0D39  0020               	movlb	0	; select bank0
  7372  0D3A  00B3               	movwf	___aldiv@dividend+1
  7373  0D3B  0023               	movlb	3	; select bank3
  7374  0D3C  0860               	movf	_tap_total^(0+384),w
  7375  0D3D  0020               	movlb	0	; select bank0
  7376  0D3E  00B2               	movwf	___aldiv@dividend
  7377  0D3F  3195  25C3         	fcall	___aldiv
  7378  0D41  0020               	movlb	0	; select bank0
  7379  0D42  0831               	movf	?___aldiv+3,w
  7380  0D43  0021               	movlb	1	; select bank1
  7381  0D44  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7382  0D45  0020               	movlb	0	; select bank0
  7383  0D46  0830               	movf	?___aldiv+2,w
  7384  0D47  0021               	movlb	1	; select bank1
  7385  0D48  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7386  0D49  0020               	movlb	0	; select bank0
  7387  0D4A  082F               	movf	?___aldiv+1,w
  7388  0D4B  0021               	movlb	1	; select bank1
  7389  0D4C  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7390  0D4D  0020               	movlb	0	; select bank0
  7391  0D4E  082E               	movf	?___aldiv,w
  7392  0D4F  0021               	movlb	1	; select bank1
  7393  0D50  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  7394                           
  7395                           ;SwitchTap.c: 134: delay_time_changed = 1;
  7396  0D51  3001               	movlw	1
  7397  0D52  0022               	movlb	2	; select bank2
  7398  0D53  00DE               	movwf	_delay_time_changed^(0+256)
  7399  0D54  3000               	movlw	0
  7400  0D55  00DF               	movwf	(_delay_time_changed^(0+256)+1)
  7401                           
  7402                           ;SwitchTap.c: 135: tap_timer = 0;
  7403  0D56  3000               	movlw	0
  7404  0D57  0021               	movlb	1	; select bank1
  7405  0D58  00E6               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7406  0D59  3000               	movlw	0
  7407  0D5A  00E5               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7408  0D5B  3000               	movlw	0
  7409  0D5C  00E4               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7410  0D5D  3000               	movlw	0
  7411  0D5E  00E3               	movwf	_tap_timer^(0+128)	;volatile
  7412                           
  7413                           ;SwitchTap.c: 137: tap_iteration++;
  7414  0D5F  3001               	movlw	1
  7415  0D60  0022               	movlb	2	; select bank2
  7416  0D61  07E8               	addwf	_tap_iteration^(0+256),f
  7417  0D62  3000               	movlw	0
  7418  0D63  3DE9               	addwfc	(_tap_iteration+1)^(0+256),f
  7419                           
  7420                           ;SwitchTap.c: 138: }
  7421                           ;SwitchTap.c: 140: } else if (switchTap_pressed >= 25) {
  7422  0D64  0008               	return
  7423  0D65                     l5598:	
  7424  0D65  3019               	movlw	25
  7425  0D66  0021               	movlb	1	; select bank1
  7426  0D67  026F               	subwf	_switchTap_pressed^(0+128),w
  7427  0D68  1C03               	skipc
  7428  0D69  0008               	return
  7429                           
  7430                           ;SwitchTap.c: 141: switchTap_down = 0;
  7431  0D6A  0022               	movlb	2	; select bank2
  7432  0D6B  01DA               	clrf	_switchTap_down^(0+256)
  7433                           
  7434                           ;SwitchTap.c: 142: switchTap_state = 0;
  7435  0D6C  01EC               	clrf	_switchTap_state^(0+256)
  7436                           
  7437                           ;SwitchTap.c: 148: setLongTapState(0);
  7438  0D6D  3000               	movlw	0
  7439  0D6E  0020               	movlb	0	; select bank0
  7440  0D6F  00A2               	movwf	setLongTapState@f_state
  7441  0D70  00A3               	movwf	setLongTapState@f_state+1
  7442  0D71  319E  267E         	fcall	_setLongTapState
  7443                           
  7444                           ;SwitchTap.c: 150: longTap_timer = 0;
  7445  0D73  0022               	movlb	2	; select bank2
  7446  0D74  01C6               	clrf	_longTap_timer^(0+256)	;volatile
  7447  0D75  01C7               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7448                           
  7449                           ;SwitchTap.c: 151: longTap_start = 0;
  7450  0D76  01D5               	clrf	_longTap_start^(0+256)
  7451                           
  7452                           ;SwitchTap.c: 153: switchTap_pressed = 25;
  7453  0D77  3019               	movlw	25
  7454  0D78  0020               	movlb	0	; select bank0
  7455  0D79  00BD               	movwf	??_updateSwitchTap
  7456  0D7A  083D               	movf	??_updateSwitchTap,w
  7457  0D7B  0021               	movlb	1	; select bank1
  7458  0D7C  00EF               	movwf	_switchTap_pressed^(0+128)
  7459  0D7D  0008               	return
  7460  0D7E                     __end_of_updateSwitchTap:	
  7461                           
  7462                           	psect	text3
  7463  1E7E                     __ptext3:	
  7464 ;; *************** function _setLongTapState *****************
  7465 ;; Defined at:
  7466 ;;		line 168 in file "SwitchTap.c"
  7467 ;; Parameters:    Size  Location     Type
  7468 ;;  f_state         2    2[BANK0 ] int 
  7469 ;; Auto vars:     Size  Location     Type
  7470 ;;		None
  7471 ;; Return value:  Size  Location     Type
  7472 ;;                  1    wreg      void 
  7473 ;; Registers used:
  7474 ;;		wreg, status,0
  7475 ;; Tracked objects:
  7476 ;;		On entry : 0/0
  7477 ;;		On exit  : 0/0
  7478 ;;		Unchanged: 0/0
  7479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7480 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7482 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7483 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7484 ;;Total ram usage:        4 bytes
  7485 ;; Hardware stack levels used:    1
  7486 ;; Hardware stack levels required when called:    2
  7487 ;; This function calls:
  7488 ;;		Nothing
  7489 ;; This function is called by:
  7490 ;;		_updateSwitchTap
  7491 ;; This function uses a non-reentrant model
  7492 ;;
  7493                           
  7494                           
  7495                           ;psect for function _setLongTapState
  7496  1E7E                     _setLongTapState:	
  7497                           
  7498                           ;SwitchTap.c: 169: if (longTap_state == f_state) {return;}
  7499                           
  7500                           ;incstack = 0
  7501                           ; Regs used in _setLongTapState: [wreg+status,0]
  7502  1E7E  0020               	movlb	0	; select bank0
  7503  1E7F  086A               	movf	_longTap_state,w	;volatile
  7504  1E80  00A4               	movwf	??_setLongTapState
  7505  1E81  01A5               	clrf	??_setLongTapState+1
  7506  1E82  0823               	movf	setLongTapState@f_state+1,w
  7507  1E83  0625               	xorwf	??_setLongTapState+1,w
  7508  1E84  1D03               	skipz
  7509  1E85  2E88               	goto	u4995
  7510  1E86  0822               	movf	setLongTapState@f_state,w
  7511  1E87  0624               	xorwf	??_setLongTapState,w
  7512  1E88                     u4995:	
  7513  1E88  1903               	btfsc	3,2
  7514  1E89  0008               	return
  7515                           
  7516                           ;SwitchTap.c: 170: longTap_state = f_state;
  7517  1E8A  0822               	movf	setLongTapState@f_state,w
  7518  1E8B  00A4               	movwf	??_setLongTapState
  7519  1E8C  0824               	movf	??_setLongTapState,w
  7520  1E8D  00EA               	movwf	_longTap_state	;volatile
  7521                           
  7522                           ;SwitchTap.c: 171: LATBbits.LATB5 = f_state;
  7523  1E8E  0C22               	rrf	setLongTapState@f_state,w
  7524  1E8F  0022               	movlb	2	; select bank2
  7525  1E90  1C03               	skipc
  7526  1E91  128D               	bcf	13,5	;volatile
  7527  1E92  1803               	skipnc
  7528  1E93  168D               	bsf	13,5	;volatile
  7529  1E94  0008               	return
  7530  1E95                     __end_of_setLongTapState:	
  7531                           
  7532                           	psect	text4
  7533  09BE                     __ptext4:	
  7534 ;; *************** function _updateSwitchBypass *****************
  7535 ;; Defined at:
  7536 ;;		line 34 in file "SwitchBypass.c"
  7537 ;; Parameters:    Size  Location     Type
  7538 ;;		None
  7539 ;; Auto vars:     Size  Location     Type
  7540 ;;		None
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  1    wreg      void 
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0, pclath, cstack
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7552 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7553 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7554 ;;Total ram usage:        2 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:    5
  7557 ;; This function calls:
  7558 ;;		_setDoublePressState
  7559 ;;		_setFeedbackState
  7560 ;;		_setSwitchBypassState
  7561 ;; This function is called by:
  7562 ;;		_main
  7563 ;; This function uses a non-reentrant model
  7564 ;;
  7565                           
  7566                           
  7567                           ;psect for function _updateSwitchBypass
  7568  09BE                     _updateSwitchBypass:	
  7569                           
  7570                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7571                           
  7572                           ;incstack = 0
  7573                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7574  09BE  0020               	movlb	0	; select bank0
  7575  09BF  1890               	btfsc	16,1	;volatile
  7576  09C0  29D4               	goto	l5426
  7577                           
  7578                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7579  09C1  0022               	movlb	2	; select bank2
  7580  09C2  084F               	movf	(_switchBypass_pressed+1)^(0+256),w
  7581  09C3  3A80               	xorlw	128
  7582  09C4  0020               	movlb	0	; select bank0
  7583  09C5  00B8               	movwf	??_updateSwitchBypass
  7584  09C6  3080               	movlw	128
  7585  09C7  0238               	subwf	??_updateSwitchBypass,w
  7586  09C8  1D03               	skipz
  7587  09C9  29CD               	goto	u5895
  7588  09CA  3001               	movlw	1
  7589  09CB  0022               	movlb	2	; select bank2
  7590  09CC  024E               	subwf	_switchBypass_pressed^(0+256),w
  7591  09CD                     u5895:	
  7592  09CD  1C03               	skipc
  7593  09CE  29E7               	goto	l5430
  7594                           
  7595                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7596  09CF  30FF               	movlw	255
  7597  09D0  0022               	movlb	2	; select bank2
  7598  09D1  07CE               	addwf	_switchBypass_pressed^(0+256),f
  7599  09D2  30FF               	movlw	255
  7600  09D3  29E6               	goto	L6
  7601  09D4                     l5426:	
  7602                           ;SwitchBypass.c: 44: }
  7603                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7604                           
  7605  09D4  0022               	movlb	2	; select bank2
  7606  09D5  084F               	movf	(_switchBypass_pressed+1)^(0+256),w
  7607  09D6  3A80               	xorlw	128
  7608  09D7  0020               	movlb	0	; select bank0
  7609  09D8  00B8               	movwf	??_updateSwitchBypass
  7610  09D9  3080               	movlw	128
  7611  09DA  0238               	subwf	??_updateSwitchBypass,w
  7612  09DB  1D03               	skipz
  7613  09DC  29E0               	goto	u5905
  7614  09DD  3019               	movlw	25
  7615  09DE  0022               	movlb	2	; select bank2
  7616  09DF  024E               	subwf	_switchBypass_pressed^(0+256),w
  7617  09E0                     u5905:	
  7618  09E0  1803               	skipnc
  7619  09E1  29E7               	goto	l5430
  7620                           
  7621                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7622  09E2  3001               	movlw	1
  7623  09E3  0022               	movlb	2	; select bank2
  7624  09E4  07CE               	addwf	_switchBypass_pressed^(0+256),f
  7625  09E5  3000               	movlw	0
  7626  09E6                     L6:	
  7627  09E6  3DCF               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7628  09E7                     l5430:	
  7629                           
  7630                           ;SwitchBypass.c: 47: }
  7631                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7632  09E7  0022               	movlb	2	; select bank2
  7633  09E8  084E               	movf	_switchBypass_pressed^(0+256),w
  7634  09E9  044F               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7635  09EA  1D03               	btfss	3,2
  7636  09EB  2A45               	goto	l5470
  7637                           
  7638                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7639  09EC  0021               	movlb	1	; select bank1
  7640  09ED  086D               	movf	_feedback_start^(0+128),w
  7641  09EE  1D03               	btfss	3,2
  7642  09EF  29F5               	goto	l5438
  7643                           
  7644                           ;SwitchBypass.c: 57: feedback_start = 1;
  7645  09F0  01ED               	clrf	_feedback_start^(0+128)
  7646  09F1  0AED               	incf	_feedback_start^(0+128),f
  7647                           
  7648                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7649  09F2  0022               	movlb	2	; select bank2
  7650  09F3  01BA               	clrf	_feedback_timer^(0+256)	;volatile
  7651  09F4  01BB               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7652  09F5                     l5438:	
  7653                           
  7654                           ;SwitchBypass.c: 59: }
  7655                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7656  09F5  0021               	movlb	1	; select bank1
  7657  09F6  085A               	movf	(_long_press_limit+1)^(0+128),w
  7658  09F7  0022               	movlb	2	; select bank2
  7659  09F8  023B               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7660  09F9  1D03               	skipz
  7661  09FA  29FF               	goto	u5935
  7662  09FB  0021               	movlb	1	; select bank1
  7663  09FC  0859               	movf	_long_press_limit^(0+128),w
  7664  09FD  0022               	movlb	2	; select bank2
  7665  09FE  023A               	subwf	_feedback_timer^(0+256),w	;volatile
  7666  09FF                     u5935:	
  7667  09FF  1C03               	skipc
  7668  0A00  2A1E               	goto	l5452
  7669  0A01  0020               	movlb	0	; select bank0
  7670  0A02  0869               	movf	_feedback_state,w	;volatile
  7671  0A03  1D03               	btfss	3,2
  7672  0A04  2A1E               	goto	l5452
  7673  0A05  086B               	movf	_doubleTap_state,w	;volatile
  7674  0A06  1D03               	btfss	3,2
  7675  0A07  2A1E               	goto	l5452
  7676                           
  7677                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7678  0A08  0022               	movlb	2	; select bank2
  7679  0A09  110D               	bcf	13,2	;volatile
  7680                           
  7681                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7682  0A0A  0355               	decf	_longTap_start^(0+256),w
  7683  0A0B  1903               	btfsc	3,2
  7684  0A0C  2A16               	goto	l5450
  7685                           
  7686                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7687  0A0D  3001               	movlw	1
  7688  0A0E  0020               	movlb	0	; select bank0
  7689  0A0F  00A2               	movwf	setFeedbackState@f_state
  7690  0A10  3000               	movlw	0
  7691  0A11  00A3               	movwf	setFeedbackState@f_state+1
  7692  0A12  319E  2667  3189   	fcall	_setFeedbackState
  7693                           
  7694                           ;SwitchBypass.c: 67: } else {
  7695  0A15  2A1E               	goto	l5452
  7696  0A16                     l5450:	
  7697                           
  7698                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7699  0A16  3001               	movlw	1
  7700  0A17  0020               	movlb	0	; select bank0
  7701  0A18  00B4               	movwf	setDoublePressState@f_state
  7702  0A19  3000               	movlw	0
  7703  0A1A  00B5               	movwf	setDoublePressState@f_state+1
  7704  0A1B  319F  2706  3189   	fcall	_setDoublePressState
  7705  0A1E                     l5452:	
  7706                           
  7707                           ;SwitchBypass.c: 69: }
  7708                           ;SwitchBypass.c: 70: }
  7709                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7710  0A1E  0020               	movlb	0	; select bank0
  7711  0A1F  086B               	movf	_doubleTap_state,w	;volatile
  7712  0A20  1D03               	btfss	3,2
  7713  0A21  2A41               	goto	l1081
  7714  0A22  0869               	movf	_feedback_state,w	;volatile
  7715  0A23  1D03               	btfss	3,2
  7716  0A24  2A41               	goto	l1081
  7717                           
  7718                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7719  0A25  037D               	decf	_switchBypass_state,w
  7720  0A26  1D03               	btfss	3,2
  7721  0A27  2A34               	goto	l5464
  7722                           
  7723                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7724  0A28  0022               	movlb	2	; select bank2
  7725  0A29  0366               	decf	_switchBypass_up^(0+256),w
  7726  0A2A  0467               	iorwf	(_switchBypass_up+1)^(0+256),w
  7727  0A2B  1D03               	btfss	3,2
  7728  0A2C  2A41               	goto	l1081
  7729                           
  7730                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7731  0A2D  01EB               	clrf	_currentBypassState^(0+256)
  7732  0A2E  0AEB               	incf	_currentBypassState^(0+256),f
  7733                           
  7734                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7735  0A2F  3001               	movlw	1
  7736  0A30  00D0               	movwf	_switchBypass_toggle^(0+256)
  7737  0A31  3000               	movlw	0
  7738  0A32  00D1               	movwf	(_switchBypass_toggle^(0+256)+1)
  7739                           
  7740                           ;SwitchBypass.c: 78: }
  7741                           ;SwitchBypass.c: 93: } else {
  7742  0A33  2A41               	goto	l1081
  7743  0A34                     l5464:	
  7744                           
  7745                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7746  0A34  0022               	movlb	2	; select bank2
  7747  0A35  0353               	decf	_bypass_turning_on^(0+256),w
  7748  0A36  1903               	btfsc	3,2
  7749  0A37  2A41               	goto	l1081
  7750                           
  7751                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7752  0A38  01EB               	clrf	_currentBypassState^(0+256)
  7753                           
  7754                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7755  0A39  01D3               	clrf	_bypass_turning_on^(0+256)
  7756  0A3A  0AD3               	incf	_bypass_turning_on^(0+256),f
  7757                           
  7758                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7759  0A3B  01D0               	clrf	_switchBypass_toggle^(0+256)
  7760  0A3C  01D1               	clrf	(_switchBypass_toggle+1)^(0+256)
  7761                           
  7762                           ;SwitchBypass.c: 101: feedback_state = 0;
  7763  0A3D  0020               	movlb	0	; select bank0
  7764  0A3E  01E9               	clrf	_feedback_state	;volatile
  7765                           
  7766                           ;SwitchBypass.c: 102: feedback_start = 0;
  7767  0A3F  0021               	movlb	1	; select bank1
  7768  0A40  01ED               	clrf	_feedback_start^(0+128)
  7769  0A41                     l1081:	
  7770                           
  7771                           ;SwitchBypass.c: 103: }
  7772                           ;SwitchBypass.c: 104: }
  7773                           ;SwitchBypass.c: 106: }
  7774                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7775  0A41  0022               	movlb	2	; select bank2
  7776  0A42  01E6               	clrf	_switchBypass_up^(0+256)
  7777  0A43  01E7               	clrf	(_switchBypass_up+1)^(0+256)
  7778                           
  7779                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7780  0A44  0008               	return
  7781  0A45                     l5470:	
  7782  0A45  084F               	movf	(_switchBypass_pressed+1)^(0+256),w
  7783  0A46  3A80               	xorlw	128
  7784  0A47  0020               	movlb	0	; select bank0
  7785  0A48  00B8               	movwf	??_updateSwitchBypass
  7786  0A49  3080               	movlw	128
  7787  0A4A  0238               	subwf	??_updateSwitchBypass,w
  7788  0A4B  1D03               	skipz
  7789  0A4C  2A50               	goto	u6025
  7790  0A4D  3019               	movlw	25
  7791  0A4E  0022               	movlb	2	; select bank2
  7792  0A4F  024E               	subwf	_switchBypass_pressed^(0+256),w
  7793  0A50                     u6025:	
  7794  0A50  1C03               	skipc
  7795  0A51  0008               	return
  7796                           
  7797                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7798  0A52  0020               	movlb	0	; select bank0
  7799  0A53  036B               	decf	_doubleTap_state,w	;volatile
  7800  0A54  1D03               	btfss	3,2
  7801  0A55  2A5F               	goto	l5476
  7802                           
  7803                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7804  0A56  0022               	movlb	2	; select bank2
  7805  0A57  086B               	movf	_currentBypassState^(0+256),w
  7806  0A58  0020               	movlb	0	; select bank0
  7807  0A59  00B8               	movwf	??_updateSwitchBypass
  7808  0A5A  01B9               	clrf	??_updateSwitchBypass+1
  7809  0A5B  0838               	movf	??_updateSwitchBypass,w
  7810  0A5C  00B4               	movwf	setSwitchBypassState@f_state
  7811  0A5D  0839               	movf	??_updateSwitchBypass+1,w
  7812  0A5E  2A7A               	goto	L7
  7813  0A5F                     l5476:	
  7814                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7815                           
  7816  0A5F  0022               	movlb	2	; select bank2
  7817  0A60  0353               	decf	_bypass_turning_on^(0+256),w
  7818  0A61  1903               	btfsc	3,2
  7819  0A62  2A67               	goto	l5480
  7820  0A63  0020               	movlb	0	; select bank0
  7821  0A64  0369               	decf	_feedback_state,w	;volatile
  7822  0A65  1D03               	btfss	3,2
  7823  0A66  2A6C               	goto	l5482
  7824  0A67                     l5480:	
  7825                           
  7826                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7827  0A67  3001               	movlw	1
  7828  0A68  0020               	movlb	0	; select bank0
  7829  0A69  00B4               	movwf	setSwitchBypassState@f_state
  7830  0A6A  3000               	movlw	0
  7831  0A6B  2A7A               	goto	L7
  7832  0A6C                     l5482:	
  7833                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7834                           
  7835  0A6C  0022               	movlb	2	; select bank2
  7836  0A6D  0350               	decf	_switchBypass_toggle^(0+256),w
  7837  0A6E  0451               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  7838  0A6F  1D03               	btfss	3,2
  7839  0A70  2A7E               	goto	l5490
  7840  0A71  0020               	movlb	0	; select bank0
  7841  0A72  0869               	movf	_feedback_state,w	;volatile
  7842  0A73  1D03               	btfss	3,2
  7843  0A74  2A7E               	goto	l5490
  7844  0A75  086B               	movf	_doubleTap_state,w	;volatile
  7845  0A76  1D03               	btfss	3,2
  7846  0A77  2A7E               	goto	l5490
  7847                           
  7848                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7849  0A78  3000               	movlw	0
  7850  0A79  00B4               	movwf	setSwitchBypassState@f_state
  7851  0A7A                     L7:	
  7852  0A7A  00B5               	movwf	setSwitchBypassState@f_state+1
  7853  0A7B  3192  2213  3189   	fcall	_setSwitchBypassState
  7854  0A7E                     l5490:	
  7855                           
  7856                           ;SwitchBypass.c: 115: }
  7857                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7858  0A7E  0C7D               	rrf	_switchBypass_state,w
  7859  0A7F  0022               	movlb	2	; select bank2
  7860  0A80  1C03               	skipc
  7861  0A81  110D               	bcf	13,2	;volatile
  7862  0A82  1803               	skipnc
  7863  0A83  150D               	bsf	13,2	;volatile
  7864                           
  7865                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7866  0A84  3000               	movlw	0
  7867  0A85  0020               	movlb	0	; select bank0
  7868  0A86  00A2               	movwf	setFeedbackState@f_state
  7869  0A87  00A3               	movwf	setFeedbackState@f_state+1
  7870  0A88  319E  2667  3189   	fcall	_setFeedbackState
  7871                           
  7872                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7873  0A8B  3000               	movlw	0
  7874  0A8C  0020               	movlb	0	; select bank0
  7875  0A8D  00B4               	movwf	setDoublePressState@f_state
  7876  0A8E  00B5               	movwf	setDoublePressState@f_state+1
  7877  0A8F  319F  2706         	fcall	_setDoublePressState
  7878                           
  7879                           ;SwitchBypass.c: 122: feedback_start = 0;
  7880  0A91  0021               	movlb	1	; select bank1
  7881  0A92  01ED               	clrf	_feedback_start^(0+128)
  7882                           
  7883                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7884  0A93  0022               	movlb	2	; select bank2
  7885  0A94  01D3               	clrf	_bypass_turning_on^(0+256)
  7886                           
  7887                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7888  0A95  01D0               	clrf	_switchBypass_toggle^(0+256)
  7889  0A96  01D1               	clrf	(_switchBypass_toggle+1)^(0+256)
  7890                           
  7891                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7892  0A97  3001               	movlw	1
  7893  0A98  00E6               	movwf	_switchBypass_up^(0+256)
  7894  0A99  3000               	movlw	0
  7895  0A9A  00E7               	movwf	(_switchBypass_up^(0+256)+1)
  7896                           
  7897                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7898  0A9B  3019               	movlw	25
  7899  0A9C  00CE               	movwf	_switchBypass_pressed^(0+256)
  7900  0A9D  3000               	movlw	0
  7901  0A9E  00CF               	movwf	(_switchBypass_pressed^(0+256)+1)
  7902  0A9F  0008               	return
  7903  0AA0                     __end_of_updateSwitchBypass:	
  7904                           
  7905                           	psect	text5
  7906  1E67                     __ptext5:	
  7907 ;; *************** function _setFeedbackState *****************
  7908 ;; Defined at:
  7909 ;;		line 151 in file "SwitchBypass.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  f_state         2    2[BANK0 ] int 
  7912 ;; Auto vars:     Size  Location     Type
  7913 ;;		None
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  1    wreg      void 
  7916 ;; Registers used:
  7917 ;;		wreg, status,0
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7923 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7925 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7926 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7927 ;;Total ram usage:        4 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    2
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_updateSwitchBypass
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           
  7938                           ;psect for function _setFeedbackState
  7939  1E67                     _setFeedbackState:	
  7940                           
  7941                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7942                           
  7943                           ;incstack = 0
  7944                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7945  1E67  0020               	movlb	0	; select bank0
  7946  1E68  0869               	movf	_feedback_state,w	;volatile
  7947  1E69  00A4               	movwf	??_setFeedbackState
  7948  1E6A  01A5               	clrf	??_setFeedbackState+1
  7949  1E6B  0823               	movf	setFeedbackState@f_state+1,w
  7950  1E6C  0625               	xorwf	??_setFeedbackState+1,w
  7951  1E6D  1D03               	skipz
  7952  1E6E  2E71               	goto	u4965
  7953  1E6F  0822               	movf	setFeedbackState@f_state,w
  7954  1E70  0624               	xorwf	??_setFeedbackState,w
  7955  1E71                     u4965:	
  7956  1E71  1903               	btfsc	3,2
  7957  1E72  0008               	return
  7958                           
  7959                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7960  1E73  0822               	movf	setFeedbackState@f_state,w
  7961  1E74  00A4               	movwf	??_setFeedbackState
  7962  1E75  0824               	movf	??_setFeedbackState,w
  7963  1E76  00E9               	movwf	_feedback_state	;volatile
  7964                           
  7965                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7966  1E77  0C22               	rrf	setFeedbackState@f_state,w
  7967  1E78  0022               	movlb	2	; select bank2
  7968  1E79  1C03               	skipc
  7969  1E7A  118D               	bcf	13,3	;volatile
  7970  1E7B  1803               	skipnc
  7971  1E7C  158D               	bsf	13,3	;volatile
  7972  1E7D  0008               	return
  7973  1E7E                     __end_of_setFeedbackState:	
  7974                           
  7975                           	psect	text6
  7976  1F06                     __ptext6:	
  7977 ;; *************** function _setDoublePressState *****************
  7978 ;; Defined at:
  7979 ;;		line 20 in file "preset_programming.c"
  7980 ;; Parameters:    Size  Location     Type
  7981 ;;  f_state         2   20[BANK0 ] int 
  7982 ;; Auto vars:     Size  Location     Type
  7983 ;;		None
  7984 ;; Return value:  Size  Location     Type
  7985 ;;                  1    wreg      void 
  7986 ;; Registers used:
  7987 ;;		wreg, status,2, status,0, pclath, cstack
  7988 ;; Tracked objects:
  7989 ;;		On entry : 0/0
  7990 ;;		On exit  : 0/0
  7991 ;;		Unchanged: 0/0
  7992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7993 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7996 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7997 ;;Total ram usage:        4 bytes
  7998 ;; Hardware stack levels used:    1
  7999 ;; Hardware stack levels required when called:    4
  8000 ;; This function calls:
  8001 ;;		_wait_ms
  8002 ;; This function is called by:
  8003 ;;		_updateSwitchBypass
  8004 ;;		_updateSwitchTap
  8005 ;; This function uses a non-reentrant model
  8006 ;;
  8007                           
  8008                           
  8009                           ;psect for function _setDoublePressState
  8010  1F06                     _setDoublePressState:	
  8011                           
  8012                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  8013                           
  8014                           ;incstack = 0
  8015                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  8016  1F06  0020               	movlb	0	; select bank0
  8017  1F07  086B               	movf	_doubleTap_state,w	;volatile
  8018  1F08  00B6               	movwf	??_setDoublePressState
  8019  1F09  01B7               	clrf	??_setDoublePressState+1
  8020  1F0A  0835               	movf	setDoublePressState@f_state+1,w
  8021  1F0B  0637               	xorwf	??_setDoublePressState+1,w
  8022  1F0C  1D03               	skipz
  8023  1F0D  2F10               	goto	u4975
  8024  1F0E  0834               	movf	setDoublePressState@f_state,w
  8025  1F0F  0636               	xorwf	??_setDoublePressState,w
  8026  1F10                     u4975:	
  8027  1F10  1903               	btfsc	3,2
  8028  1F11  0008               	return
  8029                           
  8030                           ;preset_programming.c: 22: doubleTap_state = f_state;
  8031  1F12  0834               	movf	setDoublePressState@f_state,w
  8032  1F13  00B6               	movwf	??_setDoublePressState
  8033  1F14  0836               	movf	??_setDoublePressState,w
  8034  1F15  00EB               	movwf	_doubleTap_state	;volatile
  8035                           
  8036                           ;preset_programming.c: 23: if (f_state == 1) {
  8037  1F16  0334               	decf	setDoublePressState@f_state,w
  8038  1F17  0435               	iorwf	setDoublePressState@f_state+1,w
  8039  1F18  1D03               	btfss	3,2
  8040  1F19  2F1D               	goto	l4996
  8041                           
  8042                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  8043  1F1A  0022               	movlb	2	; select bank2
  8044  1F1B  120D               	bcf	13,4	;volatile
  8045                           
  8046                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  8047  1F1C  110D               	bcf	13,2	;volatile
  8048  1F1D                     l4996:	
  8049                           
  8050                           ;preset_programming.c: 26: }
  8051                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  8052  1F1D  0020               	movlb	0	; select bank0
  8053  1F1E  0C34               	rrf	setDoublePressState@f_state,w
  8054  1F1F  0022               	movlb	2	; select bank2
  8055  1F20  1C03               	skipc
  8056  1F21  108D               	bcf	13,1	;volatile
  8057  1F22  1803               	skipnc
  8058  1F23  148D               	bsf	13,1	;volatile
  8059                           
  8060                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  8061  1F24  0020               	movlb	0	; select bank0
  8062  1F25  0C34               	rrf	setDoublePressState@f_state,w
  8063  1F26  0022               	movlb	2	; select bank2
  8064  1F27  1C03               	skipc
  8065  1F28  100D               	bcf	13,0	;volatile
  8066  1F29  1803               	skipnc
  8067  1F2A  140D               	bsf	13,0	;volatile
  8068                           
  8069                           ;preset_programming.c: 31: wait_ms(20);
  8070  1F2B  3014               	movlw	20
  8071  1F2C  0020               	movlb	0	; select bank0
  8072  1F2D  00AE               	movwf	wait_ms@timeSec
  8073  1F2E  3000               	movlw	0
  8074  1F2F  00AF               	movwf	wait_ms@timeSec+1
  8075  1F30  319F  2793         	fcall	_wait_ms
  8076  1F32  0008               	return
  8077  1F33                     __end_of_setDoublePressState:	
  8078                           
  8079                           	psect	text7
  8080  1EDB                     __ptext7:	
  8081 ;; *************** function _showBootSequence *****************
  8082 ;; Defined at:
  8083 ;;		line 86 in file "LEDs.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;		None
  8086 ;; Auto vars:     Size  Location     Type
  8087 ;;		None
  8088 ;; Return value:  Size  Location     Type
  8089 ;;                  1    wreg      void 
  8090 ;; Registers used:
  8091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8098 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8100 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8101 ;;Total ram usage:        1 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:    5
  8104 ;; This function calls:
  8105 ;;		_getCurrentLEDState
  8106 ;;		_restoreLEDState
  8107 ;;		_solidring_tactiles
  8108 ;;		_star_tactiles
  8109 ;; This function is called by:
  8110 ;;		_main
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function _showBootSequence
  8116  1EDB                     _showBootSequence:	
  8117                           
  8118                           ;LEDs.c: 87: getCurrentLEDState();
  8119                           
  8120                           ;incstack = 0
  8121                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8122  1EDB  319E  2629  319E   	fcall	_getCurrentLEDState
  8123                           
  8124                           ;LEDs.c: 88: suspend_blink = 1;
  8125  1EDE  3001               	movlw	1
  8126  1EDF  0020               	movlb	0	; select bank0
  8127  1EE0  00BB               	movwf	??_showBootSequence
  8128  1EE1  083B               	movf	??_showBootSequence,w
  8129  1EE2  0021               	movlb	1	; select bank1
  8130  1EE3  00EE               	movwf	_suspend_blink^(0+128)	;volatile
  8131                           
  8132                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8133  1EE4  0022               	movlb	2	; select bank2
  8134  1EE5  120D               	bcf	13,4	;volatile
  8135                           
  8136                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8137  1EE6  110D               	bcf	13,2	;volatile
  8138                           
  8139                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8140  1EE7  128D               	bcf	13,5	;volatile
  8141                           
  8142                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8143  1EE8  118D               	bcf	13,3	;volatile
  8144                           
  8145                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8146  1EE9  100D               	bcf	13,0	;volatile
  8147                           
  8148                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8149  1EEA  108D               	bcf	13,1	;volatile
  8150                           
  8151                           ;LEDs.c: 113: star_tactiles(0);
  8152  1EEB  3000               	movlw	0
  8153  1EEC  3194  24E1  319E   	fcall	_star_tactiles
  8154                           
  8155                           ;LEDs.c: 114: star_tactiles(0);
  8156  1EEF  3000               	movlw	0
  8157  1EF0  3194  24E1  319E   	fcall	_star_tactiles
  8158                           
  8159                           ;LEDs.c: 115: star_tactiles(1);
  8160  1EF3  3001               	movlw	1
  8161  1EF4  3194  24E1  319E   	fcall	_star_tactiles
  8162                           
  8163                           ;LEDs.c: 116: star_tactiles(1);
  8164  1EF7  3001               	movlw	1
  8165  1EF8  3194  24E1  319E   	fcall	_star_tactiles
  8166                           
  8167                           ;LEDs.c: 118: solidring_tactiles();
  8168  1EFB  3191  2151  319E   	fcall	_solidring_tactiles
  8169                           
  8170                           ;LEDs.c: 119: solidring_tactiles();
  8171  1EFE  3191  2151  319E   	fcall	_solidring_tactiles
  8172                           
  8173                           ;LEDs.c: 122: suspend_blink = 0;
  8174  1F01  0021               	movlb	1	; select bank1
  8175  1F02  01EE               	clrf	_suspend_blink^(0+128)	;volatile
  8176                           
  8177                           ;LEDs.c: 123: restoreLEDState();
  8178  1F03  319E  263B         	fcall	_restoreLEDState
  8179  1F05  0008               	return
  8180  1F06                     __end_of_showBootSequence:	
  8181                           
  8182                           	psect	text8
  8183  14E1                     __ptext8:	
  8184 ;; *************** function _star_tactiles *****************
  8185 ;; Defined at:
  8186 ;;		line 194 in file "LEDs.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;  reverse         1    wreg     unsigned char 
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;  reverse         1   22[BANK0 ] unsigned char 
  8191 ;;  iLed            2   25[BANK0 ] int 
  8192 ;;  iLed            2   23[BANK0 ] int 
  8193 ;; Return value:  Size  Location     Type
  8194 ;;                  1    wreg      void 
  8195 ;; Registers used:
  8196 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8197 ;; Tracked objects:
  8198 ;;		On entry : 0/0
  8199 ;;		On exit  : 0/0
  8200 ;;		Unchanged: 0/0
  8201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8203 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8204 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8205 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8206 ;;Total ram usage:        7 bytes
  8207 ;; Hardware stack levels used:    1
  8208 ;; Hardware stack levels required when called:    4
  8209 ;; This function calls:
  8210 ;;		_set_leds_bottom
  8211 ;;		_set_leds_top
  8212 ;;		_wait_ms
  8213 ;; This function is called by:
  8214 ;;		_showBootSequence
  8215 ;; This function uses a non-reentrant model
  8216 ;;
  8217                           
  8218                           
  8219                           ;psect for function _star_tactiles
  8220  14E1                     _star_tactiles:	
  8221                           
  8222                           ;incstack = 0
  8223                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8224                           ;star_tactiles@reverse stored from wreg
  8225  14E1  0020               	movlb	0	; select bank0
  8226  14E2  00B6               	movwf	star_tactiles@reverse
  8227                           
  8228                           ;LEDs.c: 195: if (reverse == 1) {
  8229  14E3  0336               	decf	star_tactiles@reverse,w
  8230  14E4  1D03               	btfss	3,2
  8231  14E5  2D16               	goto	l4922
  8232                           
  8233                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8234  14E6  3005               	movlw	5
  8235  14E7  00B7               	movwf	star_tactiles@iLed
  8236  14E8  3000               	movlw	0
  8237  14E9  00B8               	movwf	star_tactiles@iLed+1
  8238  14EA                     L8:	
  8239  14EA  1BB8               	btfsc	star_tactiles@iLed+1,7
  8240  14EB  0008               	return
  8241                           
  8242                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8243  14EC  0838               	movf	star_tactiles@iLed+1,w
  8244  14ED  00A3               	movwf	set_leds_top@x+1
  8245  14EE  0837               	movf	star_tactiles@iLed,w
  8246  14EF  00A2               	movwf	set_leds_top@x
  8247  14F0  3001               	movlw	1
  8248  14F1  00A4               	movwf	set_leds_top@ledState
  8249  14F2  3000               	movlw	0
  8250  14F3  00A5               	movwf	set_leds_top@ledState+1
  8251  14F4  3194  2428  3194   	fcall	_set_leds_top
  8252                           
  8253                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8254  14F7  0020               	movlb	0	; select bank0
  8255  14F8  0937               	comf	star_tactiles@iLed,w
  8256  14F9  00B4               	movwf	??_star_tactiles
  8257  14FA  0938               	comf	star_tactiles@iLed+1,w
  8258  14FB  00B5               	movwf	??_star_tactiles+1
  8259  14FC  0AB4               	incf	??_star_tactiles,f
  8260  14FD  1903               	skipnz
  8261  14FE  0AB5               	incf	??_star_tactiles+1,f
  8262  14FF  0834               	movf	??_star_tactiles,w
  8263  1500  3E06               	addlw	6
  8264  1501  00A2               	movwf	set_leds_bottom@x
  8265  1502  3000               	movlw	0
  8266  1503  3D35               	addwfc	??_star_tactiles+1,w
  8267  1504  00A3               	movwf	set_leds_bottom@x+1
  8268  1505  319F  27C5  3194   	fcall	_set_leds_bottom
  8269                           
  8270                           ;LEDs.c: 199: wait_ms(5);
  8271  1508  3005               	movlw	5
  8272  1509  0020               	movlb	0	; select bank0
  8273  150A  00AE               	movwf	wait_ms@timeSec
  8274  150B  3000               	movlw	0
  8275  150C  00AF               	movwf	wait_ms@timeSec+1
  8276  150D  319F  2793  3194   	fcall	_wait_ms
  8277  1510  30FF               	movlw	255
  8278  1511  0020               	movlb	0	; select bank0
  8279  1512  07B7               	addwf	star_tactiles@iLed,f
  8280  1513  30FF               	movlw	255
  8281  1514  3DB8               	addwfc	star_tactiles@iLed+1,f
  8282  1515  2CEA               	goto	L8
  8283  1516                     l4922:	
  8284                           ;LEDs.c: 200: }
  8285                           ;LEDs.c: 201: } else {
  8286                           
  8287                           
  8288                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8289  1516  3001               	movlw	1
  8290  1517  00B9               	movwf	star_tactiles@iLed_1441
  8291  1518  3000               	movlw	0
  8292  1519  00BA               	movwf	star_tactiles@iLed_1441+1
  8293  151A                     L9:	
  8294  151A  083A               	movf	star_tactiles@iLed_1441+1,w
  8295  151B  3A80               	xorlw	128
  8296  151C  00B4               	movwf	??_star_tactiles
  8297  151D  3080               	movlw	128
  8298  151E  0234               	subwf	??_star_tactiles,w
  8299  151F  1D03               	skipz
  8300  1520  2D23               	goto	u4915
  8301  1521  3007               	movlw	7
  8302  1522  0239               	subwf	star_tactiles@iLed_1441,w
  8303  1523                     u4915:	
  8304  1523  1803               	btfsc	3,0
  8305  1524  0008               	return
  8306                           
  8307                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8308  1525  0020               	movlb	0	; select bank0
  8309  1526  083A               	movf	star_tactiles@iLed_1441+1,w
  8310  1527  00A3               	movwf	set_leds_top@x+1
  8311  1528  0839               	movf	star_tactiles@iLed_1441,w
  8312  1529  00A2               	movwf	set_leds_top@x
  8313  152A  3001               	movlw	1
  8314  152B  00A4               	movwf	set_leds_top@ledState
  8315  152C  3000               	movlw	0
  8316  152D  00A5               	movwf	set_leds_top@ledState+1
  8317  152E  3194  2428  3194   	fcall	_set_leds_top
  8318                           
  8319                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8320  1531  0020               	movlb	0	; select bank0
  8321  1532  0939               	comf	star_tactiles@iLed_1441,w
  8322  1533  00B4               	movwf	??_star_tactiles
  8323  1534  093A               	comf	star_tactiles@iLed_1441+1,w
  8324  1535  00B5               	movwf	??_star_tactiles+1
  8325  1536  0AB4               	incf	??_star_tactiles,f
  8326  1537  1903               	skipnz
  8327  1538  0AB5               	incf	??_star_tactiles+1,f
  8328  1539  0834               	movf	??_star_tactiles,w
  8329  153A  3E06               	addlw	6
  8330  153B  00A2               	movwf	set_leds_bottom@x
  8331  153C  3000               	movlw	0
  8332  153D  3D35               	addwfc	??_star_tactiles+1,w
  8333  153E  00A3               	movwf	set_leds_bottom@x+1
  8334  153F  319F  27C5  3194   	fcall	_set_leds_bottom
  8335                           
  8336                           ;LEDs.c: 205: wait_ms(5);
  8337  1542  3005               	movlw	5
  8338  1543  0020               	movlb	0	; select bank0
  8339  1544  00AE               	movwf	wait_ms@timeSec
  8340  1545  3000               	movlw	0
  8341  1546  00AF               	movwf	wait_ms@timeSec+1
  8342  1547  319F  2793  3194   	fcall	_wait_ms
  8343  154A  3001               	movlw	1
  8344  154B  0020               	movlb	0	; select bank0
  8345  154C  07B9               	addwf	star_tactiles@iLed_1441,f
  8346  154D  3000               	movlw	0
  8347  154E  3DBA               	addwfc	star_tactiles@iLed_1441+1,f
  8348  154F  2D1A               	goto	L9
  8349  1550                     __end_of_star_tactiles:	
  8350                           
  8351                           	psect	text9
  8352  1151                     __ptext9:	
  8353 ;; *************** function _solidring_tactiles *****************
  8354 ;; Defined at:
  8355 ;;		line 223 in file "LEDs.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;  ring_delay      1   22[BANK0 ] unsigned char 
  8360 ;; Return value:  Size  Location     Type
  8361 ;;                  1    wreg      void 
  8362 ;; Registers used:
  8363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8371 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8372 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8373 ;;Total ram usage:        3 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:    4
  8376 ;; This function calls:
  8377 ;;		_set_leds_bottom
  8378 ;;		_set_leds_top
  8379 ;;		_wait_ms
  8380 ;; This function is called by:
  8381 ;;		_showBootSequence
  8382 ;;		_showSave
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           
  8387                           ;psect for function _solidring_tactiles
  8388  1151                     _solidring_tactiles:	
  8389                           
  8390                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8394  1151  301E               	movlw	30
  8395  1152  0020               	movlb	0	; select bank0
  8396  1153  00B4               	movwf	??_solidring_tactiles
  8397  1154  0834               	movf	??_solidring_tactiles,w
  8398  1155  00B6               	movwf	solidring_tactiles@ring_delay
  8399                           
  8400                           ;LEDs.c: 225: set_leds_top(100, 1);
  8401  1156  3064               	movlw	100
  8402  1157  00A2               	movwf	set_leds_top@x
  8403  1158  3000               	movlw	0
  8404  1159  00A3               	movwf	set_leds_top@x+1
  8405  115A  3001               	movlw	1
  8406  115B  00A4               	movwf	set_leds_top@ledState
  8407  115C  3000               	movlw	0
  8408  115D  00A5               	movwf	set_leds_top@ledState+1
  8409  115E  3194  2428  3191   	fcall	_set_leds_top
  8410                           
  8411                           ;LEDs.c: 226: set_leds_bottom(100);
  8412  1161  3064               	movlw	100
  8413  1162  0020               	movlb	0	; select bank0
  8414  1163  00A2               	movwf	set_leds_bottom@x
  8415  1164  3000               	movlw	0
  8416  1165  00A3               	movwf	set_leds_bottom@x+1
  8417  1166  319F  27C5  3191   	fcall	_set_leds_bottom
  8418                           
  8419                           ;LEDs.c: 227: wait_ms(ring_delay);
  8420  1169  0020               	movlb	0	; select bank0
  8421  116A  0836               	movf	solidring_tactiles@ring_delay,w
  8422  116B  00B4               	movwf	??_solidring_tactiles
  8423  116C  01B5               	clrf	??_solidring_tactiles+1
  8424  116D  0834               	movf	??_solidring_tactiles,w
  8425  116E  00AE               	movwf	wait_ms@timeSec
  8426  116F  0835               	movf	??_solidring_tactiles+1,w
  8427  1170  00AF               	movwf	wait_ms@timeSec+1
  8428  1171  319F  2793  3191   	fcall	_wait_ms
  8429                           
  8430                           ;LEDs.c: 229: set_leds_top(0, 1);
  8431  1174  3000               	movlw	0
  8432  1175  0020               	movlb	0	; select bank0
  8433  1176  00A2               	movwf	set_leds_top@x
  8434  1177  00A3               	movwf	set_leds_top@x+1
  8435  1178  3001               	movlw	1
  8436  1179  00A4               	movwf	set_leds_top@ledState
  8437  117A  3000               	movlw	0
  8438  117B  00A5               	movwf	set_leds_top@ledState+1
  8439  117C  3194  2428  3191   	fcall	_set_leds_top
  8440                           
  8441                           ;LEDs.c: 230: set_leds_bottom(0);
  8442  117F  3000               	movlw	0
  8443  1180  0020               	movlb	0	; select bank0
  8444  1181  00A2               	movwf	set_leds_bottom@x
  8445  1182  00A3               	movwf	set_leds_bottom@x+1
  8446  1183  319F  27C5  3191   	fcall	_set_leds_bottom
  8447                           
  8448                           ;LEDs.c: 231: wait_ms(ring_delay);
  8449  1186  0020               	movlb	0	; select bank0
  8450  1187  0836               	movf	solidring_tactiles@ring_delay,w
  8451  1188  00B4               	movwf	??_solidring_tactiles
  8452  1189  01B5               	clrf	??_solidring_tactiles+1
  8453  118A  0834               	movf	??_solidring_tactiles,w
  8454  118B  00AE               	movwf	wait_ms@timeSec
  8455  118C  0835               	movf	??_solidring_tactiles+1,w
  8456  118D  00AF               	movwf	wait_ms@timeSec+1
  8457  118E  319F  2793         	fcall	_wait_ms
  8458  1190  0008               	return
  8459  1191                     __end_of_solidring_tactiles:	
  8460                           
  8461                           	psect	text10
  8462  1E3B                     __ptext10:	
  8463 ;; *************** function _restoreLEDState *****************
  8464 ;; Defined at:
  8465 ;;		line 89 in file "state_manager.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;		None
  8468 ;; Auto vars:     Size  Location     Type
  8469 ;;		None
  8470 ;; Return value:  Size  Location     Type
  8471 ;;                  1    wreg      void 
  8472 ;; Registers used:
  8473 ;;		wreg, status,0
  8474 ;; Tracked objects:
  8475 ;;		On entry : 0/0
  8476 ;;		On exit  : 0/0
  8477 ;;		Unchanged: 0/0
  8478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8483 ;;Total ram usage:        0 bytes
  8484 ;; Hardware stack levels used:    1
  8485 ;; Hardware stack levels required when called:    2
  8486 ;; This function calls:
  8487 ;;		Nothing
  8488 ;; This function is called by:
  8489 ;;		_showBootSequence
  8490 ;;		_showError_Alternating
  8491 ;;		_show_error
  8492 ;;		_show_cancel
  8493 ;; This function uses a non-reentrant model
  8494 ;;
  8495                           
  8496                           
  8497                           ;psect for function _restoreLEDState
  8498  1E3B                     _restoreLEDState:	
  8499                           
  8500                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8501                           
  8502                           ;incstack = 0
  8503                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8504  1E3B  0022               	movlb	2	; select bank2
  8505  1E3C  0C20               	rrf	_ledState^(0+256),w
  8506  1E3D  1C03               	skipc
  8507  1E3E  120D               	bcf	13,4	;volatile
  8508  1E3F  1803               	skipnc
  8509  1E40  160D               	bsf	13,4	;volatile
  8510                           
  8511                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8512  1E41  0C22               	rrf	(_ledState^(0+256)+2),w
  8513  1E42  1C03               	skipc
  8514  1E43  110D               	bcf	13,2	;volatile
  8515  1E44  1803               	skipnc
  8516  1E45  150D               	bsf	13,2	;volatile
  8517                           
  8518                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8519  1E46  0C21               	rrf	(_ledState^(0+256)+1),w
  8520  1E47  1C03               	skipc
  8521  1E48  128D               	bcf	13,5	;volatile
  8522  1E49  1803               	skipnc
  8523  1E4A  168D               	bsf	13,5	;volatile
  8524                           
  8525                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8526  1E4B  0C23               	rrf	(_ledState^(0+256)+3),w
  8527  1E4C  1C03               	skipc
  8528  1E4D  118D               	bcf	13,3	;volatile
  8529  1E4E  1803               	skipnc
  8530  1E4F  158D               	bsf	13,3	;volatile
  8531  1E50  0008               	return
  8532  1E51                     __end_of_restoreLEDState:	
  8533                           
  8534                           	psect	text11
  8535  1E29                     __ptext11:	
  8536 ;; *************** function _getCurrentLEDState *****************
  8537 ;; Defined at:
  8538 ;;		line 83 in file "state_manager.c"
  8539 ;; Parameters:    Size  Location     Type
  8540 ;;		None
  8541 ;; Auto vars:     Size  Location     Type
  8542 ;;		None
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  1    wreg      void 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8552 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8555 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8556 ;;Total ram usage:        0 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    2
  8559 ;; This function calls:
  8560 ;;		Nothing
  8561 ;; This function is called by:
  8562 ;;		_showBootSequence
  8563 ;;		_showError_Alternating
  8564 ;;		_show_error
  8565 ;;		_show_cancel
  8566 ;; This function uses a non-reentrant model
  8567 ;;
  8568                           
  8569                           
  8570                           ;psect for function _getCurrentLEDState
  8571  1E29                     _getCurrentLEDState:	
  8572                           
  8573                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8574                           
  8575                           ;incstack = 0
  8576                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8577  1E29  3000               	movlw	0
  8578  1E2A  0022               	movlb	2	; select bank2
  8579  1E2B  1A0D               	btfsc	13,4	;volatile
  8580  1E2C  3001               	movlw	1
  8581  1E2D  00A0               	movwf	_ledState^(0+256)
  8582                           
  8583                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8584  1E2E  3000               	movlw	0
  8585  1E2F  190D               	btfsc	13,2	;volatile
  8586  1E30  3001               	movlw	1
  8587  1E31  00A2               	movwf	(_ledState^(0+256)+2)
  8588                           
  8589                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8590  1E32  3000               	movlw	0
  8591  1E33  1A8D               	btfsc	13,5	;volatile
  8592  1E34  3001               	movlw	1
  8593  1E35  00A1               	movwf	(_ledState^(0+256)+1)
  8594                           
  8595                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8596  1E36  3000               	movlw	0
  8597  1E37  198D               	btfsc	13,3	;volatile
  8598  1E38  3001               	movlw	1
  8599  1E39  00A3               	movwf	(_ledState^(0+256)+3)
  8600  1E3A  0008               	return
  8601  1E3B                     __end_of_getCurrentLEDState:	
  8602                           
  8603                           	psect	text12
  8604  08F6                     __ptext12:	
  8605 ;; *************** function _set_subdivision *****************
  8606 ;; Defined at:
  8607 ;;		line 77 in file "user.c"
  8608 ;; Parameters:    Size  Location     Type
  8609 ;;  x               2   14[BANK1 ] int 
  8610 ;;  y               2   16[BANK1 ] int 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  scalar          3   23[BANK1 ] float 
  8613 ;;  tmpX            2   21[BANK1 ] int 
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  2   14[BANK1 ] int 
  8616 ;; Registers used:
  8617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8623 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8624 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8625 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8626 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8627 ;;Total ram usage:       12 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    4
  8630 ;; This function calls:
  8631 ;;		___awtoft
  8632 ;;		___ftdiv
  8633 ;;		___ftmul
  8634 ;;		___fttol
  8635 ;; This function is called by:
  8636 ;;		_main
  8637 ;; This function uses a non-reentrant model
  8638 ;;
  8639                           
  8640                           
  8641                           ;psect for function _set_subdivision
  8642  08F6                     _set_subdivision:	
  8643                           
  8644                           ;user.c: 78: adjust_sub_delay = 0;
  8645                           
  8646                           ;incstack = 0
  8647                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8648  08F6  0022               	movlb	2	; select bank2
  8649  08F7  01AA               	clrf	_adjust_sub_delay^(0+256)
  8650  08F8  01AB               	clrf	(_adjust_sub_delay+1)^(0+256)
  8651                           
  8652                           ;user.c: 79: int tmpX = x;
  8653  08F9  0021               	movlb	1	; select bank1
  8654  08FA  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8655  08FB  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8656  08FC  082E               	movf	set_subdivision@x^(0+128),w
  8657  08FD  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8658                           
  8659                           ;user.c: 80: float scalar = 1.0;
  8660  08FE  3000               	movlw	0
  8661  08FF  00B7               	movwf	set_subdivision@scalar^(0+128)
  8662  0900  3080               	movlw	128
  8663  0901  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8664  0902  303F               	movlw	63
  8665  0903  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8666                           
  8667                           ;user.c: 83: switch (y) {
  8668  0904  291E               	goto	l5644
  8669  0905                     l5632:	
  8670                           ;user.c: 84: case 1:
  8671                           
  8672                           
  8673                           ;user.c: 85: scalar = 0.75;
  8674  0905  3000               	movlw	0
  8675  0906  00B7               	movwf	set_subdivision@scalar^(0+128)
  8676  0907  3040               	movlw	64
  8677  0908  2910               	goto	L11
  8678  0909                     l5634:	
  8679                           ;user.c: 87: case 2:
  8680                           
  8681                           ;user.c: 86: break;
  8682                           
  8683                           
  8684                           ;user.c: 88: scalar = 0.6666;
  8685  0909  30A6               	movlw	166
  8686  090A  00B7               	movwf	set_subdivision@scalar^(0+128)
  8687  090B  302A               	movlw	42
  8688  090C  2910               	goto	L11
  8689  090D                     l5636:	
  8690                           ;user.c: 90: case 3:
  8691                           
  8692                           ;user.c: 89: break;
  8693                           
  8694                           
  8695                           ;user.c: 91: scalar = .5;
  8696  090D  3000               	movlw	0
  8697  090E  00B7               	movwf	set_subdivision@scalar^(0+128)
  8698  090F  3000               	movlw	0
  8699  0910                     L11:	
  8700  0910  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8701  0911  303F               	movlw	63
  8702  0912  291C               	goto	L13
  8703  0913                     l5638:	
  8704                           ;user.c: 93: case 4:
  8705                           
  8706                           ;user.c: 92: break;
  8707                           
  8708                           
  8709                           ;user.c: 94: scalar = 0.3333;
  8710  0913  30A6               	movlw	166
  8711  0914  00B7               	movwf	set_subdivision@scalar^(0+128)
  8712  0915  30AA               	movlw	170
  8713  0916  291A               	goto	L14
  8714  0917                     l5640:	
  8715                           ;user.c: 96: case 5:
  8716                           
  8717                           ;user.c: 95: break;
  8718                           
  8719                           
  8720                           ;user.c: 97: scalar = 0.25;
  8721  0917  3000               	movlw	0
  8722  0918  00B7               	movwf	set_subdivision@scalar^(0+128)
  8723  0919  3080               	movlw	128
  8724  091A                     L14:	
  8725  091A  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8726  091B  303E               	movlw	62
  8727  091C                     L13:	
  8728  091C  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8729                           
  8730                           ;user.c: 102: }
  8731                           
  8732                           ;user.c: 101: break;
  8733                           
  8734                           ;user.c: 99: case 6:
  8735                           
  8736                           ;user.c: 98: break;
  8737  091D  2937               	goto	l5646
  8738  091E                     l5644:	
  8739                           
  8740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8741                           ; Switch size 1, requested type "space"
  8742                           ; Number of cases is 1, Range of values is 0 to 0
  8743                           ; switch strategies available:
  8744                           ; Name         Instructions Cycles
  8745                           ; simple_byte            4     3 (average)
  8746                           ; direct_byte            8     6 (fixed)
  8747                           ; jumptable            260     6 (fixed)
  8748                           ;	Chosen strategy is simple_byte
  8749  091E  0831               	movf	(set_subdivision@y+1)^(0+128),w
  8750  091F  3A00               	xorlw	0	; case 0
  8751  0920  1903               	skipnz
  8752  0921  2923               	goto	l6144
  8753  0922  2937               	goto	l5646
  8754  0923                     l6144:	
  8755                           
  8756                           ; Switch size 1, requested type "space"
  8757                           ; Number of cases is 6, Range of values is 1 to 6
  8758                           ; switch strategies available:
  8759                           ; Name         Instructions Cycles
  8760                           ; simple_byte           19    10 (average)
  8761                           ; direct_byte           21     9 (fixed)
  8762                           ; jumptable            263     9 (fixed)
  8763                           ;	Chosen strategy is simple_byte
  8764  0923  0830               	movf	set_subdivision@y^(0+128),w
  8765  0924  3A01               	xorlw	1	; case 1
  8766  0925  1903               	skipnz
  8767  0926  2905               	goto	l5632
  8768  0927  3A03               	xorlw	3	; case 2
  8769  0928  1903               	skipnz
  8770  0929  2909               	goto	l5634
  8771  092A  3A01               	xorlw	1	; case 3
  8772  092B  1903               	skipnz
  8773  092C  290D               	goto	l5636
  8774  092D  3A07               	xorlw	7	; case 4
  8775  092E  1903               	skipnz
  8776  092F  2913               	goto	l5638
  8777  0930  3A01               	xorlw	1	; case 5
  8778  0931  1903               	skipnz
  8779  0932  2917               	goto	l5640
  8780  0933  3A03               	xorlw	3	; case 6
  8781  0934  1903               	skipnz
  8782  0935  2937               	goto	l5646
  8783  0936  2937               	goto	l5646
  8784  0937                     l5646:	
  8785                           
  8786                           ;user.c: 104: tmpX = tmpX * scalar;
  8787  0937  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8788  0938  0020               	movlb	0	; select bank0
  8789  0939  00AB               	movwf	___awtoft@c+1
  8790  093A  0021               	movlb	1	; select bank1
  8791  093B  0835               	movf	set_subdivision@tmpX^(0+128),w
  8792  093C  0020               	movlb	0	; select bank0
  8793  093D  00AA               	movwf	___awtoft@c
  8794  093E  3187  27DC  3188   	fcall	___awtoft
  8795  0941  0020               	movlb	0	; select bank0
  8796  0942  082A               	movf	?___awtoft,w
  8797  0943  00BA               	movwf	___ftmul@f2
  8798  0944  082B               	movf	?___awtoft+1,w
  8799  0945  00BB               	movwf	___ftmul@f2+1
  8800  0946  082C               	movf	?___awtoft+2,w
  8801  0947  00BC               	movwf	___ftmul@f2+2
  8802  0948  0021               	movlb	1	; select bank1
  8803  0949  0837               	movf	set_subdivision@scalar^(0+128),w
  8804  094A  0020               	movlb	0	; select bank0
  8805  094B  00B7               	movwf	___ftmul@f1
  8806  094C  0021               	movlb	1	; select bank1
  8807  094D  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  8808  094E  0020               	movlb	0	; select bank0
  8809  094F  00B8               	movwf	___ftmul@f1+1
  8810  0950  0021               	movlb	1	; select bank1
  8811  0951  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  8812  0952  0020               	movlb	0	; select bank0
  8813  0953  00B9               	movwf	___ftmul@f1+2
  8814  0954  3188  2042  3188   	fcall	___ftmul
  8815  0957  0020               	movlb	0	; select bank0
  8816  0958  0837               	movf	?___ftmul,w
  8817  0959  0021               	movlb	1	; select bank1
  8818  095A  00A0               	movwf	___fttol@f1^(0+128)
  8819  095B  0020               	movlb	0	; select bank0
  8820  095C  0838               	movf	?___ftmul+1,w
  8821  095D  0021               	movlb	1	; select bank1
  8822  095E  00A1               	movwf	(___fttol@f1+1)^(0+128)
  8823  095F  0020               	movlb	0	; select bank0
  8824  0960  0839               	movf	?___ftmul+2,w
  8825  0961  0021               	movlb	1	; select bank1
  8826  0962  00A2               	movwf	(___fttol@f1+2)^(0+128)
  8827  0963  3196  2645  3188   	fcall	___fttol
  8828  0966  0021               	movlb	1	; select bank1
  8829  0967  0821               	movf	(?___fttol^(0+128)+1),w
  8830  0968  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8831  0969  0820               	movf	?___fttol^(0+128),w
  8832  096A  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8833                           
  8834                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  8835  096B  0837               	movf	set_subdivision@scalar^(0+128),w
  8836  096C  0020               	movlb	0	; select bank0
  8837  096D  00C7               	movwf	___ftdiv@f2
  8838  096E  0021               	movlb	1	; select bank1
  8839  096F  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  8840  0970  0020               	movlb	0	; select bank0
  8841  0971  00C8               	movwf	___ftdiv@f2+1
  8842  0972  0021               	movlb	1	; select bank1
  8843  0973  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  8844  0974  0020               	movlb	0	; select bank0
  8845  0975  00C9               	movwf	___ftdiv@f2+2
  8846  0976  0021               	movlb	1	; select bank1
  8847  0977  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8848  0978  0020               	movlb	0	; select bank0
  8849  0979  00AB               	movwf	___awtoft@c+1
  8850  097A  0021               	movlb	1	; select bank1
  8851  097B  0835               	movf	set_subdivision@tmpX^(0+128),w
  8852  097C  0020               	movlb	0	; select bank0
  8853  097D  00AA               	movwf	___awtoft@c
  8854  097E  3187  27DC  3188   	fcall	___awtoft
  8855  0981  0020               	movlb	0	; select bank0
  8856  0982  082A               	movf	?___awtoft,w
  8857  0983  00CA               	movwf	___ftdiv@f1
  8858  0984  082B               	movf	?___awtoft+1,w
  8859  0985  00CB               	movwf	___ftdiv@f1+1
  8860  0986  082C               	movf	?___awtoft+2,w
  8861  0987  00CC               	movwf	___ftdiv@f1+2
  8862  0988  3197  2757  3188   	fcall	___ftdiv
  8863  098B  0020               	movlb	0	; select bank0
  8864  098C  0847               	movf	?___ftdiv,w
  8865  098D  0021               	movlb	1	; select bank1
  8866  098E  00B2               	movwf	??_set_subdivision^(0+128)
  8867  098F  0020               	movlb	0	; select bank0
  8868  0990  0848               	movf	?___ftdiv+1,w
  8869  0991  0021               	movlb	1	; select bank1
  8870  0992  00B3               	movwf	(??_set_subdivision^(0+128)+1)
  8871  0993  0020               	movlb	0	; select bank0
  8872  0994  0849               	movf	?___ftdiv+2,w
  8873  0995  0021               	movlb	1	; select bank1
  8874  0996  00B4               	movwf	(??_set_subdivision^(0+128)+2)
  8875  0997  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8876  0998  0020               	movlb	0	; select bank0
  8877  0999  00AB               	movwf	___awtoft@c+1
  8878  099A  0021               	movlb	1	; select bank1
  8879  099B  082E               	movf	set_subdivision@x^(0+128),w
  8880  099C  0020               	movlb	0	; select bank0
  8881  099D  00AA               	movwf	___awtoft@c
  8882  099E  3187  27DC  3188   	fcall	___awtoft
  8883  09A1  0020               	movlb	0	; select bank0
  8884  09A2  082C               	movf	?___awtoft+2,w
  8885  09A3  0021               	movlb	1	; select bank1
  8886  09A4  0634               	xorwf	(??_set_subdivision+2)^(0+128),w
  8887  09A5  1D03               	skipz
  8888  09A6  29B1               	goto	u6345
  8889  09A7  0020               	movlb	0	; select bank0
  8890  09A8  082B               	movf	?___awtoft+1,w
  8891  09A9  0021               	movlb	1	; select bank1
  8892  09AA  0633               	xorwf	(??_set_subdivision+1)^(0+128),w
  8893  09AB  1D03               	skipz
  8894  09AC  29B1               	goto	u6345
  8895  09AD  0020               	movlb	0	; select bank0
  8896  09AE  082A               	movf	?___awtoft,w
  8897  09AF  0021               	movlb	1	; select bank1
  8898  09B0  0632               	xorwf	??_set_subdivision^(0+128),w
  8899  09B1                     u6345:	
  8900  09B1  1903               	skipnz
  8901  09B2  29B8               	goto	l521
  8902  09B3  3001               	movlw	1
  8903  09B4  0022               	movlb	2	; select bank2
  8904  09B5  00AA               	movwf	_adjust_sub_delay^(0+256)
  8905  09B6  3000               	movlw	0
  8906  09B7  00AB               	movwf	(_adjust_sub_delay^(0+256)+1)
  8907  09B8                     l521:	
  8908                           
  8909                           ;user.c: 106: return tmpX;
  8910  09B8  0021               	movlb	1	; select bank1
  8911  09B9  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8912  09BA  00AF               	movwf	(?_set_subdivision+1)^(0+128)
  8913  09BB  0835               	movf	set_subdivision@tmpX^(0+128),w
  8914  09BC  00AE               	movwf	?_set_subdivision^(0+128)
  8915  09BD  0008               	return
  8916  09BE                     __end_of_set_subdivision:	
  8917                           
  8918                           	psect	text13
  8919  1645                     __ptext13:	
  8920 ;; *************** function ___fttol *****************
  8921 ;; Defined at:
  8922 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  f1              3    0[BANK1 ] float 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  lval            4    9[BANK1 ] unsigned long 
  8927 ;;  exp1            1   13[BANK1 ] unsigned char 
  8928 ;;  sign1           1    8[BANK1 ] unsigned char 
  8929 ;; Return value:  Size  Location     Type
  8930 ;;                  4    0[BANK1 ] long 
  8931 ;; Registers used:
  8932 ;;		wreg, status,2, status,0
  8933 ;; Tracked objects:
  8934 ;;		On entry : 0/0
  8935 ;;		On exit  : 0/0
  8936 ;;		Unchanged: 0/0
  8937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8938 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8939 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8940 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8941 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8942 ;;Total ram usage:       14 bytes
  8943 ;; Hardware stack levels used:    1
  8944 ;; Hardware stack levels required when called:    2
  8945 ;; This function calls:
  8946 ;;		Nothing
  8947 ;; This function is called by:
  8948 ;;		_main
  8949 ;;		_set_subdivision
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function ___fttol
  8955  1645                     ___fttol:	
  8956                           
  8957                           ;incstack = 0
  8958                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8959  1645  0021               	movlb	1	; select bank1
  8960  1646  0820               	movf	___fttol@f1^(0+128),w
  8961  1647  00A4               	movwf	??___fttol^(0+128)
  8962  1648  0821               	movf	(___fttol@f1+1)^(0+128),w
  8963  1649  00A5               	movwf	(??___fttol^(0+128)+1)
  8964  164A  0822               	movf	(___fttol@f1+2)^(0+128),w
  8965  164B  00A6               	movwf	(??___fttol^(0+128)+2)
  8966  164C  1003               	clrc
  8967  164D  0D25               	rlf	(??___fttol^(0+128)+1),w
  8968  164E  0D26               	rlf	(??___fttol^(0+128)+2),w
  8969  164F  00A7               	movwf	(??___fttol+3)^(0+128)
  8970  1650  0827               	movf	(??___fttol+3)^(0+128),w
  8971  1651  00AD               	movwf	___fttol@exp1^(0+128)
  8972  1652  082D               	movf	___fttol@exp1^(0+128),w
  8973  1653  1D03               	btfss	3,2
  8974  1654  2E5E               	goto	l5236
  8975  1655  3000               	movlw	0
  8976  1656  00A3               	movwf	(?___fttol+3)^(0+128)
  8977  1657  3000               	movlw	0
  8978  1658  00A2               	movwf	(?___fttol+2)^(0+128)
  8979  1659  3000               	movlw	0
  8980  165A  00A1               	movwf	(?___fttol+1)^(0+128)
  8981  165B  3000               	movlw	0
  8982  165C  00A0               	movwf	?___fttol^(0+128)
  8983  165D  0008               	return
  8984  165E                     l5236:	
  8985  165E  0820               	movf	___fttol@f1^(0+128),w
  8986  165F  00A4               	movwf	??___fttol^(0+128)
  8987  1660  0821               	movf	(___fttol@f1+1)^(0+128),w
  8988  1661  00A5               	movwf	(??___fttol^(0+128)+1)
  8989  1662  0822               	movf	(___fttol@f1+2)^(0+128),w
  8990  1663  00A6               	movwf	(??___fttol^(0+128)+2)
  8991  1664  3017               	movlw	23
  8992  1665                     u5565:	
  8993  1665  36A6               	lsrf	(??___fttol^(0+128)+2),f
  8994  1666  0CA5               	rrf	(??___fttol^(0+128)+1),f
  8995  1667  0CA4               	rrf	??___fttol^(0+128),f
  8996  1668  0B89               	decfsz	9,f
  8997  1669  2E65               	goto	u5565
  8998  166A  0824               	movf	??___fttol^(0+128),w
  8999  166B  00A7               	movwf	(??___fttol+3)^(0+128)
  9000  166C  0827               	movf	(??___fttol+3)^(0+128),w
  9001  166D  00A8               	movwf	___fttol@sign1^(0+128)
  9002  166E  17A1               	bsf	(___fttol@f1^(0+128)+1),7
  9003  166F  30FF               	movlw	255
  9004  1670  05A0               	andwf	___fttol@f1^(0+128),f
  9005  1671  30FF               	movlw	255
  9006  1672  05A1               	andwf	(___fttol@f1+1)^(0+128),f
  9007  1673  3000               	movlw	0
  9008  1674  05A2               	andwf	(___fttol@f1+2)^(0+128),f
  9009  1675  0820               	movf	___fttol@f1^(0+128),w
  9010  1676  00A9               	movwf	___fttol@lval^(0+128)
  9011  1677  0821               	movf	(___fttol@f1+1)^(0+128),w
  9012  1678  00AA               	movwf	(___fttol@lval^(0+128)+1)
  9013  1679  0822               	movf	(___fttol@f1+2)^(0+128),w
  9014  167A  00AB               	movwf	(___fttol@lval^(0+128)+2)
  9015  167B  01AC               	clrf	(___fttol@lval^(0+128)+3)
  9016  167C  308E               	movlw	142
  9017  167D  02AD               	subwf	___fttol@exp1^(0+128),f
  9018  167E  1FAD               	btfss	___fttol@exp1^(0+128),7
  9019  167F  2E9C               	goto	l5256
  9020  1680  082D               	movf	___fttol@exp1^(0+128),w
  9021  1681  3A80               	xorlw	128
  9022  1682  3E8F               	addlw	143
  9023  1683  1803               	skipnc
  9024  1684  2E8E               	goto	l5254
  9025  1685  3000               	movlw	0
  9026  1686  00A3               	movwf	(?___fttol+3)^(0+128)
  9027  1687  3000               	movlw	0
  9028  1688  00A2               	movwf	(?___fttol+2)^(0+128)
  9029  1689  3000               	movlw	0
  9030  168A  00A1               	movwf	(?___fttol+1)^(0+128)
  9031  168B  3000               	movlw	0
  9032  168C  00A0               	movwf	?___fttol^(0+128)
  9033  168D  0008               	return
  9034  168E                     l5254:	
  9035  168E  3001               	movlw	1
  9036  168F                     u5595:	
  9037  168F  36AC               	lsrf	(___fttol@lval+3)^(0+128),f
  9038  1690  0CAB               	rrf	(___fttol@lval+2)^(0+128),f
  9039  1691  0CAA               	rrf	(___fttol@lval+1)^(0+128),f
  9040  1692  0CA9               	rrf	___fttol@lval^(0+128),f
  9041  1693  0B89               	decfsz	9,f
  9042  1694  2E8F               	goto	u5595
  9043  1695  3001               	movlw	1
  9044  1696  00A4               	movwf	??___fttol^(0+128)
  9045  1697  0824               	movf	??___fttol^(0+128),w
  9046  1698  07AD               	addwf	___fttol@exp1^(0+128),f
  9047  1699  1903               	btfsc	3,2
  9048  169A  2EB5               	goto	l5264
  9049  169B  2E8E               	goto	l5254
  9050  169C                     l5256:	
  9051  169C  3018               	movlw	24
  9052  169D  022D               	subwf	___fttol@exp1^(0+128),w
  9053  169E  1C03               	skipc
  9054  169F  2EB2               	goto	l1572
  9055  16A0  3000               	movlw	0
  9056  16A1  00A3               	movwf	(?___fttol+3)^(0+128)
  9057  16A2  3000               	movlw	0
  9058  16A3  00A2               	movwf	(?___fttol+2)^(0+128)
  9059  16A4  3000               	movlw	0
  9060  16A5  00A1               	movwf	(?___fttol+1)^(0+128)
  9061  16A6  3000               	movlw	0
  9062  16A7  00A0               	movwf	?___fttol^(0+128)
  9063  16A8  0008               	return
  9064  16A9                     l5262:	
  9065  16A9  3001               	movlw	1
  9066  16AA                     u5625:	
  9067  16AA  35A9               	lslf	___fttol@lval^(0+128),f
  9068  16AB  0DAA               	rlf	(___fttol@lval+1)^(0+128),f
  9069  16AC  0DAB               	rlf	(___fttol@lval+2)^(0+128),f
  9070  16AD  0DAC               	rlf	(___fttol@lval+3)^(0+128),f
  9071  16AE  0B89               	decfsz	9,f
  9072  16AF  2EAA               	goto	u5625
  9073  16B0  3001               	movlw	1
  9074  16B1  02AD               	subwf	___fttol@exp1^(0+128),f
  9075  16B2                     l1572:	
  9076  16B2  082D               	movf	___fttol@exp1^(0+128),w
  9077  16B3  1D03               	btfss	3,2
  9078  16B4  2EA9               	goto	l5262
  9079  16B5                     l5264:	
  9080  16B5  0828               	movf	___fttol@sign1^(0+128),w
  9081  16B6  1903               	btfsc	3,2
  9082  16B7  2EC3               	goto	l5268
  9083  16B8  09A9               	comf	___fttol@lval^(0+128),f
  9084  16B9  09AA               	comf	(___fttol@lval+1)^(0+128),f
  9085  16BA  09AB               	comf	(___fttol@lval+2)^(0+128),f
  9086  16BB  09AC               	comf	(___fttol@lval+3)^(0+128),f
  9087  16BC  0AA9               	incf	___fttol@lval^(0+128),f
  9088  16BD  1903               	skipnz
  9089  16BE  0AAA               	incf	(___fttol@lval+1)^(0+128),f
  9090  16BF  1903               	skipnz
  9091  16C0  0AAB               	incf	(___fttol@lval+2)^(0+128),f
  9092  16C1  1903               	skipnz
  9093  16C2  0AAC               	incf	(___fttol@lval+3)^(0+128),f
  9094  16C3                     l5268:	
  9095  16C3  082C               	movf	(___fttol@lval+3)^(0+128),w
  9096  16C4  00A3               	movwf	(?___fttol+3)^(0+128)
  9097  16C5  082B               	movf	(___fttol@lval+2)^(0+128),w
  9098  16C6  00A2               	movwf	(?___fttol+2)^(0+128)
  9099  16C7  082A               	movf	(___fttol@lval+1)^(0+128),w
  9100  16C8  00A1               	movwf	(?___fttol+1)^(0+128)
  9101  16C9  0829               	movf	___fttol@lval^(0+128),w
  9102  16CA  00A0               	movwf	?___fttol^(0+128)
  9103  16CB  0008               	return
  9104  16CC                     __end_of___fttol:	
  9105                           
  9106                           	psect	text14
  9107  07DC                     __ptext14:	
  9108 ;; *************** function ___awtoft *****************
  9109 ;; Defined at:
  9110 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  c               2   10[BANK0 ] int 
  9113 ;; Auto vars:     Size  Location     Type
  9114 ;;  sign            1   15[BANK0 ] unsigned char 
  9115 ;; Return value:  Size  Location     Type
  9116 ;;                  3   10[BANK0 ] float 
  9117 ;; Registers used:
  9118 ;;		wreg, status,2, status,0, pclath, cstack
  9119 ;; Tracked objects:
  9120 ;;		On entry : 0/0
  9121 ;;		On exit  : 0/0
  9122 ;;		Unchanged: 0/0
  9123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9124 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9125 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9126 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9127 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9128 ;;Total ram usage:        6 bytes
  9129 ;; Hardware stack levels used:    1
  9130 ;; Hardware stack levels required when called:    3
  9131 ;; This function calls:
  9132 ;;		___ftpack
  9133 ;; This function is called by:
  9134 ;;		_main
  9135 ;;		_set_subdivision
  9136 ;; This function uses a non-reentrant model
  9137 ;;
  9138                           
  9139                           
  9140                           ;psect for function ___awtoft
  9141  07DC                     ___awtoft:	
  9142                           
  9143                           ;incstack = 0
  9144                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9145  07DC  0020               	movlb	0	; select bank0
  9146  07DD  01AF               	clrf	___awtoft@sign
  9147  07DE  1FAB               	btfss	___awtoft@c+1,7
  9148  07DF  2FE7               	goto	l5056
  9149  07E0  09AA               	comf	___awtoft@c,f
  9150  07E1  09AB               	comf	___awtoft@c+1,f
  9151  07E2  0AAA               	incf	___awtoft@c,f
  9152  07E3  1903               	skipnz
  9153  07E4  0AAB               	incf	___awtoft@c+1,f
  9154  07E5  01AF               	clrf	___awtoft@sign
  9155  07E6  0AAF               	incf	___awtoft@sign,f
  9156  07E7                     l5056:	
  9157  07E7  082A               	movf	___awtoft@c,w
  9158  07E8  00A2               	movwf	___ftpack@arg
  9159  07E9  082B               	movf	___awtoft@c+1,w
  9160  07EA  00A3               	movwf	___ftpack@arg+1
  9161  07EB  01A4               	clrf	___ftpack@arg+2
  9162  07EC  308E               	movlw	142
  9163  07ED  00AD               	movwf	??___awtoft
  9164  07EE  082D               	movf	??___awtoft,w
  9165  07EF  00A5               	movwf	___ftpack@exp
  9166  07F0  082F               	movf	___awtoft@sign,w
  9167  07F1  00AE               	movwf	??___awtoft+1
  9168  07F2  082E               	movf	??___awtoft+1,w
  9169  07F3  00A6               	movwf	___ftpack@sign
  9170  07F4  3194  247C         	fcall	___ftpack
  9171  07F6  0020               	movlb	0	; select bank0
  9172  07F7  0822               	movf	?___ftpack,w
  9173  07F8  00AA               	movwf	?___awtoft
  9174  07F9  0823               	movf	?___ftpack+1,w
  9175  07FA  00AB               	movwf	?___awtoft+1
  9176  07FB  0824               	movf	?___ftpack+2,w
  9177  07FC  00AC               	movwf	?___awtoft+2
  9178  07FD  0008               	return
  9179  07FE                     __end_of___awtoft:	
  9180                           
  9181                           	psect	text15
  9182  12E7                     __ptext15:	
  9183 ;; *************** function _read_top_tactile *****************
  9184 ;; Defined at:
  9185 ;;		line 47 in file "tactiles.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;		None
  9188 ;; Auto vars:     Size  Location     Type
  9189 ;;		None
  9190 ;; Return value:  Size  Location     Type
  9191 ;;                  1    wreg      void 
  9192 ;; Registers used:
  9193 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9194 ;; Tracked objects:
  9195 ;;		On entry : 0/0
  9196 ;;		On exit  : 0/0
  9197 ;;		Unchanged: 0/0
  9198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9201 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9202 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9203 ;;Total ram usage:        1 bytes
  9204 ;; Hardware stack levels used:    1
  9205 ;; Hardware stack levels required when called:    4
  9206 ;; This function calls:
  9207 ;;		_set_leds_top
  9208 ;;		_wait_ms
  9209 ;; This function is called by:
  9210 ;;		_main
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214                           
  9215                           ;psect for function _read_top_tactile
  9216  12E7                     _read_top_tactile:	
  9217                           
  9218                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9219                           
  9220                           ;incstack = 0
  9221                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9222  12E7  0020               	movlb	0	; select bank0
  9223  12E8  1A8F               	btfsc	15,5	;volatile
  9224  12E9  2AF1               	goto	l5354
  9225                           
  9226                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9227  12EA  0022               	movlb	2	; select bank2
  9228  12EB  085B               	movf	_topTactile_pressed^(0+256),w
  9229  12EC  1903               	btfsc	3,2
  9230  12ED  2AFC               	goto	l854
  9231                           
  9232                           ;tactiles.c: 58: topTactile_pressed--;
  9233  12EE  3001               	movlw	1
  9234  12EF  02DB               	subwf	_topTactile_pressed^(0+256),f
  9235                           
  9236                           ;tactiles.c: 59: }
  9237                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9238  12F0  2AFC               	goto	l854
  9239  12F1                     l5354:	
  9240  12F1  3019               	movlw	25
  9241  12F2  0022               	movlb	2	; select bank2
  9242  12F3  025B               	subwf	_topTactile_pressed^(0+256),w
  9243  12F4  1803               	skipnc
  9244  12F5  2AFC               	goto	l854
  9245                           
  9246                           ;tactiles.c: 61: topTactile_pressed++;
  9247  12F6  3001               	movlw	1
  9248  12F7  0020               	movlb	0	; select bank0
  9249  12F8  00B4               	movwf	??_read_top_tactile
  9250  12F9  0834               	movf	??_read_top_tactile,w
  9251  12FA  0022               	movlb	2	; select bank2
  9252  12FB  07DB               	addwf	_topTactile_pressed^(0+256),f
  9253  12FC                     l854:	
  9254                           
  9255                           ;tactiles.c: 62: }
  9256                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9257  12FC  085B               	movf	_topTactile_pressed^(0+256),w
  9258  12FD  1D03               	btfss	3,2
  9259  12FE  0008               	return
  9260                           
  9261                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9262  12FF  0021               	movlb	1	; select bank1
  9263  1300  085B               	movf	_top_push_state^(0+128),w
  9264  1301  3E01               	addlw	1
  9265  1302  00DB               	movwf	_top_push_state^(0+128)
  9266  1303  3000               	movlw	0
  9267  1304  3D5C               	addwfc	(_top_push_state+1)^(0+128),w
  9268  1305  00DC               	movwf	(_top_push_state+1)^(0+128)
  9269                           
  9270                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9271  1306  085C               	movf	(_top_push_state+1)^(0+128),w
  9272  1307  3A80               	xorlw	128
  9273  1308  0020               	movlb	0	; select bank0
  9274  1309  00B4               	movwf	??_read_top_tactile
  9275  130A  3080               	movlw	128
  9276  130B  0234               	subwf	??_read_top_tactile,w
  9277  130C  1D03               	skipz
  9278  130D  2B11               	goto	u5825
  9279  130E  3007               	movlw	7
  9280  130F  0021               	movlb	1	; select bank1
  9281  1310  025B               	subwf	_top_push_state^(0+128),w
  9282  1311                     u5825:	
  9283  1311  1C03               	skipc
  9284  1312  2B18               	goto	l5364
  9285                           
  9286                           ;tactiles.c: 70: top_push_state = 1;
  9287  1313  3001               	movlw	1
  9288  1314  0021               	movlb	1	; select bank1
  9289  1315  00DB               	movwf	_top_push_state^(0+128)
  9290  1316  3000               	movlw	0
  9291  1317  00DC               	movwf	(_top_push_state^(0+128)+1)
  9292  1318                     l5364:	
  9293                           
  9294                           ;tactiles.c: 71: }
  9295                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9296  1318  0021               	movlb	1	; select bank1
  9297  1319  085C               	movf	(_top_push_state+1)^(0+128),w
  9298  131A  0020               	movlb	0	; select bank0
  9299  131B  00A3               	movwf	set_leds_top@x+1
  9300  131C  0021               	movlb	1	; select bank1
  9301  131D  085B               	movf	_top_push_state^(0+128),w
  9302  131E  0020               	movlb	0	; select bank0
  9303  131F  00A2               	movwf	set_leds_top@x
  9304  1320  3001               	movlw	1
  9305  1321  00A4               	movwf	set_leds_top@ledState
  9306  1322  3000               	movlw	0
  9307  1323  00A5               	movwf	set_leds_top@ledState+1
  9308  1324  3194  2428  3192   	fcall	_set_leds_top
  9309                           
  9310                           ;tactiles.c: 73: delay_time_changed = 1;
  9311  1327  3001               	movlw	1
  9312  1328  0022               	movlb	2	; select bank2
  9313  1329  00DE               	movwf	_delay_time_changed^(0+256)
  9314  132A  3000               	movlw	0
  9315  132B  00DF               	movwf	(_delay_time_changed^(0+256)+1)
  9316  132C                     l858:	
  9317                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9318                           
  9319  132C  0020               	movlb	0	; select bank0
  9320  132D  1E8F               	btfss	15,5	;volatile
  9321  132E  2B2C               	goto	l858
  9322                           
  9323                           ;tactiles.c: 77: }
  9324                           ;tactiles.c: 78: wait_ms(20);
  9325  132F  3014               	movlw	20
  9326  1330  00AE               	movwf	wait_ms@timeSec
  9327  1331  3000               	movlw	0
  9328  1332  00AF               	movwf	wait_ms@timeSec+1
  9329  1333  319F  2793         	fcall	_wait_ms
  9330  1335  0008               	return
  9331  1336                     __end_of_read_top_tactile:	
  9332                           
  9333                           	psect	text16
  9334  1259                     __ptext16:	
  9335 ;; *************** function _read_bottom_tactile *****************
  9336 ;; Defined at:
  9337 ;;		line 17 in file "tactiles.c"
  9338 ;; Parameters:    Size  Location     Type
  9339 ;;		None
  9340 ;; Auto vars:     Size  Location     Type
  9341 ;;		None
  9342 ;; Return value:  Size  Location     Type
  9343 ;;                  1    wreg      void 
  9344 ;; Registers used:
  9345 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9346 ;; Tracked objects:
  9347 ;;		On entry : 0/0
  9348 ;;		On exit  : 0/0
  9349 ;;		Unchanged: 0/0
  9350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9355 ;;Total ram usage:        1 bytes
  9356 ;; Hardware stack levels used:    1
  9357 ;; Hardware stack levels required when called:    4
  9358 ;; This function calls:
  9359 ;;		_set_leds_bottom
  9360 ;;		_wait_ms
  9361 ;; This function is called by:
  9362 ;;		_main
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _read_bottom_tactile
  9368  1259                     _read_bottom_tactile:	
  9369                           
  9370                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9371                           
  9372                           ;incstack = 0
  9373                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9374  1259  0020               	movlb	0	; select bank0
  9375  125A  1B0F               	btfsc	15,6	;volatile
  9376  125B  2A63               	goto	l5334
  9377                           
  9378                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9379  125C  0022               	movlb	2	; select bank2
  9380  125D  0852               	movf	_bottomTactile_pressed^(0+256),w
  9381  125E  1903               	btfsc	3,2
  9382  125F  2A6E               	goto	l842
  9383                           
  9384                           ;tactiles.c: 27: bottomTactile_pressed--;
  9385  1260  3001               	movlw	1
  9386  1261  02D2               	subwf	_bottomTactile_pressed^(0+256),f
  9387                           
  9388                           ;tactiles.c: 28: }
  9389                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9390  1262  2A6E               	goto	l842
  9391  1263                     l5334:	
  9392  1263  3019               	movlw	25
  9393  1264  0022               	movlb	2	; select bank2
  9394  1265  0252               	subwf	_bottomTactile_pressed^(0+256),w
  9395  1266  1803               	skipnc
  9396  1267  2A6E               	goto	l842
  9397                           
  9398                           ;tactiles.c: 30: bottomTactile_pressed++;
  9399  1268  3001               	movlw	1
  9400  1269  0020               	movlb	0	; select bank0
  9401  126A  00B4               	movwf	??_read_bottom_tactile
  9402  126B  0834               	movf	??_read_bottom_tactile,w
  9403  126C  0022               	movlb	2	; select bank2
  9404  126D  07D2               	addwf	_bottomTactile_pressed^(0+256),f
  9405  126E                     l842:	
  9406                           
  9407                           ;tactiles.c: 31: }
  9408                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9409  126E  0852               	movf	_bottomTactile_pressed^(0+256),w
  9410  126F  1D03               	btfss	3,2
  9411  1270  0008               	return
  9412                           
  9413                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9414  1271  0021               	movlb	1	; select bank1
  9415  1272  0851               	movf	_bottom_push_state^(0+128),w
  9416  1273  3E01               	addlw	1
  9417  1274  00D1               	movwf	_bottom_push_state^(0+128)
  9418  1275  3000               	movlw	0
  9419  1276  3D52               	addwfc	(_bottom_push_state+1)^(0+128),w
  9420  1277  00D2               	movwf	(_bottom_push_state+1)^(0+128)
  9421                           
  9422                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9423  1278  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9424  1279  3A80               	xorlw	128
  9425  127A  0020               	movlb	0	; select bank0
  9426  127B  00B4               	movwf	??_read_bottom_tactile
  9427  127C  3080               	movlw	128
  9428  127D  0234               	subwf	??_read_bottom_tactile,w
  9429  127E  1D03               	skipz
  9430  127F  2A83               	goto	u5765
  9431  1280  3007               	movlw	7
  9432  1281  0021               	movlb	1	; select bank1
  9433  1282  0251               	subwf	_bottom_push_state^(0+128),w
  9434  1283                     u5765:	
  9435  1283  1C03               	skipc
  9436  1284  2A8A               	goto	l5344
  9437                           
  9438                           ;tactiles.c: 37: bottom_push_state = 1;
  9439  1285  3001               	movlw	1
  9440  1286  0021               	movlb	1	; select bank1
  9441  1287  00D1               	movwf	_bottom_push_state^(0+128)
  9442  1288  3000               	movlw	0
  9443  1289  00D2               	movwf	(_bottom_push_state^(0+128)+1)
  9444  128A                     l5344:	
  9445                           
  9446                           ;tactiles.c: 38: }
  9447                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9448  128A  0021               	movlb	1	; select bank1
  9449  128B  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9450  128C  0020               	movlb	0	; select bank0
  9451  128D  00A3               	movwf	set_leds_bottom@x+1
  9452  128E  0021               	movlb	1	; select bank1
  9453  128F  0851               	movf	_bottom_push_state^(0+128),w
  9454  1290  0020               	movlb	0	; select bank0
  9455  1291  00A2               	movwf	set_leds_bottom@x
  9456  1292  319F  27C5  3192   	fcall	_set_leds_bottom
  9457  1295                     l846:	
  9458                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9459                           
  9460  1295  0020               	movlb	0	; select bank0
  9461  1296  1F0F               	btfss	15,6	;volatile
  9462  1297  2A95               	goto	l846
  9463                           
  9464                           ;tactiles.c: 42: }
  9465                           ;tactiles.c: 43: wait_ms(20);
  9466  1298  3014               	movlw	20
  9467  1299  00AE               	movwf	wait_ms@timeSec
  9468  129A  3000               	movlw	0
  9469  129B  00AF               	movwf	wait_ms@timeSec+1
  9470  129C  319F  2793         	fcall	_wait_ms
  9471  129E  0008               	return
  9472  129F                     __end_of_read_bottom_tactile:	
  9473                           
  9474                           	psect	text17
  9475  11D2                     __ptext17:	
  9476 ;; *************** function _modulation *****************
  9477 ;; Defined at:
  9478 ;;		line 181 in file "user.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  x               4   29[BANK0 ] long 
  9481 ;;  y               4   33[BANK0 ] long 
  9482 ;; Auto vars:     Size  Location     Type
  9483 ;;		None
  9484 ;; Return value:  Size  Location     Type
  9485 ;;                  4   29[BANK0 ] long 
  9486 ;; Registers used:
  9487 ;;		wreg, status,2, status,0, pclath, cstack
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9493 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9495 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9496 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9497 ;;Total ram usage:       12 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    3
  9500 ;; This function calls:
  9501 ;;		___aldiv
  9502 ;;		___lmul
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _modulation
  9510  11D2                     _modulation:	
  9511                           
  9512                           ;user.c: 184: return (127500 + (y * x)) / 1000;
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9516  11D2  3000               	movlw	0
  9517  11D3  0020               	movlb	0	; select bank0
  9518  11D4  00B1               	movwf	___aldiv@divisor+3
  9519  11D5  3000               	movlw	0
  9520  11D6  00B0               	movwf	___aldiv@divisor+2
  9521  11D7  3003               	movlw	3
  9522  11D8  00AF               	movwf	___aldiv@divisor+1
  9523  11D9  30E8               	movlw	232
  9524  11DA  00AE               	movwf	___aldiv@divisor
  9525  11DB  300C               	movlw	12
  9526  11DC  00C5               	movwf	??_modulation
  9527  11DD  30F2               	movlw	242
  9528  11DE  00C6               	movwf	??_modulation+1
  9529  11DF  3001               	movlw	1
  9530  11E0  00C7               	movwf	??_modulation+2
  9531  11E1  3000               	movlw	0
  9532  11E2  00C8               	movwf	??_modulation+3
  9533  11E3  0844               	movf	modulation@y+3,w
  9534  11E4  00A5               	movwf	___lmul@multiplier+3
  9535  11E5  0843               	movf	modulation@y+2,w
  9536  11E6  00A4               	movwf	___lmul@multiplier+2
  9537  11E7  0842               	movf	modulation@y+1,w
  9538  11E8  00A3               	movwf	___lmul@multiplier+1
  9539  11E9  0841               	movf	modulation@y,w
  9540  11EA  00A2               	movwf	___lmul@multiplier
  9541  11EB  0840               	movf	modulation@x+3,w
  9542  11EC  00A9               	movwf	___lmul@multiplicand+3
  9543  11ED  083F               	movf	modulation@x+2,w
  9544  11EE  00A8               	movwf	___lmul@multiplicand+2
  9545  11EF  083E               	movf	modulation@x+1,w
  9546  11F0  00A7               	movwf	___lmul@multiplicand+1
  9547  11F1  083D               	movf	modulation@x,w
  9548  11F2  00A6               	movwf	___lmul@multiplicand
  9549  11F3  319F  2763  3191   	fcall	___lmul
  9550  11F6  0020               	movlb	0	; select bank0
  9551  11F7  0822               	movf	?___lmul,w
  9552  11F8  07C5               	addwf	??_modulation,f
  9553  11F9  0823               	movf	?___lmul+1,w
  9554  11FA  3DC6               	addwfc	??_modulation+1,f
  9555  11FB  0824               	movf	?___lmul+2,w
  9556  11FC  3DC7               	addwfc	??_modulation+2,f
  9557  11FD  0825               	movf	?___lmul+3,w
  9558  11FE  3DC8               	addwfc	??_modulation+3,f
  9559  11FF  0848               	movf	??_modulation+3,w
  9560  1200  00B5               	movwf	___aldiv@dividend+3
  9561  1201  0847               	movf	??_modulation+2,w
  9562  1202  00B4               	movwf	___aldiv@dividend+2
  9563  1203  0846               	movf	??_modulation+1,w
  9564  1204  00B3               	movwf	___aldiv@dividend+1
  9565  1205  0845               	movf	??_modulation,w
  9566  1206  00B2               	movwf	___aldiv@dividend
  9567  1207  3195  25C3         	fcall	___aldiv
  9568  1209  0020               	movlb	0	; select bank0
  9569  120A  0831               	movf	?___aldiv+3,w
  9570  120B  00C0               	movwf	?_modulation+3
  9571  120C  0830               	movf	?___aldiv+2,w
  9572  120D  00BF               	movwf	?_modulation+2
  9573  120E  082F               	movf	?___aldiv+1,w
  9574  120F  00BE               	movwf	?_modulation+1
  9575  1210  082E               	movf	?___aldiv,w
  9576  1211  00BD               	movwf	?_modulation
  9577  1212  0008               	return
  9578  1213                     __end_of_modulation:	
  9579                           
  9580                           	psect	text18
  9581  15C3                     __ptext18:	
  9582 ;; *************** function ___aldiv *****************
  9583 ;; Defined at:
  9584 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9585 ;; Parameters:    Size  Location     Type
  9586 ;;  divisor         4   14[BANK0 ] long 
  9587 ;;  dividend        4   18[BANK0 ] long 
  9588 ;; Auto vars:     Size  Location     Type
  9589 ;;  quotient        4   25[BANK0 ] long 
  9590 ;;  sign            1   24[BANK0 ] unsigned char 
  9591 ;;  counter         1   23[BANK0 ] unsigned char 
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  4   14[BANK0 ] long 
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, status,0
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9601 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9602 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9604 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9605 ;;Total ram usage:       15 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    2
  9608 ;; This function calls:
  9609 ;;		Nothing
  9610 ;; This function is called by:
  9611 ;;		_modulation
  9612 ;;		_updateSwitchTap
  9613 ;; This function uses a non-reentrant model
  9614 ;;
  9615                           
  9616                           
  9617                           ;psect for function ___aldiv
  9618  15C3                     ___aldiv:	
  9619                           
  9620                           ;incstack = 0
  9621                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9622  15C3  0020               	movlb	0	; select bank0
  9623  15C4  01B8               	clrf	___aldiv@sign
  9624  15C5  1FB1               	btfss	___aldiv@divisor+3,7
  9625  15C6  2DD4               	goto	l1375
  9626  15C7  09AE               	comf	___aldiv@divisor,f
  9627  15C8  09AF               	comf	___aldiv@divisor+1,f
  9628  15C9  09B0               	comf	___aldiv@divisor+2,f
  9629  15CA  09B1               	comf	___aldiv@divisor+3,f
  9630  15CB  0AAE               	incf	___aldiv@divisor,f
  9631  15CC  1903               	skipnz
  9632  15CD  0AAF               	incf	___aldiv@divisor+1,f
  9633  15CE  1903               	skipnz
  9634  15CF  0AB0               	incf	___aldiv@divisor+2,f
  9635  15D0  1903               	skipnz
  9636  15D1  0AB1               	incf	___aldiv@divisor+3,f
  9637  15D2  01B8               	clrf	___aldiv@sign
  9638  15D3  0AB8               	incf	___aldiv@sign,f
  9639  15D4                     l1375:	
  9640  15D4  1FB5               	btfss	___aldiv@dividend+3,7
  9641  15D5  2DE5               	goto	l5018
  9642  15D6  09B2               	comf	___aldiv@dividend,f
  9643  15D7  09B3               	comf	___aldiv@dividend+1,f
  9644  15D8  09B4               	comf	___aldiv@dividend+2,f
  9645  15D9  09B5               	comf	___aldiv@dividend+3,f
  9646  15DA  0AB2               	incf	___aldiv@dividend,f
  9647  15DB  1903               	skipnz
  9648  15DC  0AB3               	incf	___aldiv@dividend+1,f
  9649  15DD  1903               	skipnz
  9650  15DE  0AB4               	incf	___aldiv@dividend+2,f
  9651  15DF  1903               	skipnz
  9652  15E0  0AB5               	incf	___aldiv@dividend+3,f
  9653  15E1  3001               	movlw	1
  9654  15E2  00B6               	movwf	??___aldiv
  9655  15E3  0836               	movf	??___aldiv,w
  9656  15E4  06B8               	xorwf	___aldiv@sign,f
  9657  15E5                     l5018:	
  9658  15E5  3000               	movlw	0
  9659  15E6  00BC               	movwf	___aldiv@quotient+3
  9660  15E7  3000               	movlw	0
  9661  15E8  00BB               	movwf	___aldiv@quotient+2
  9662  15E9  3000               	movlw	0
  9663  15EA  00BA               	movwf	___aldiv@quotient+1
  9664  15EB  3000               	movlw	0
  9665  15EC  00B9               	movwf	___aldiv@quotient
  9666  15ED  0831               	movf	___aldiv@divisor+3,w
  9667  15EE  0430               	iorwf	___aldiv@divisor+2,w
  9668  15EF  042F               	iorwf	___aldiv@divisor+1,w
  9669  15F0  042E               	iorwf	___aldiv@divisor,w
  9670  15F1  1903               	skipnz
  9671  15F2  2E2E               	goto	l5040
  9672  15F3  01B7               	clrf	___aldiv@counter
  9673  15F4  0AB7               	incf	___aldiv@counter,f
  9674  15F5                     l5026:	
  9675  15F5  1BB1               	btfsc	___aldiv@divisor+3,7
  9676  15F6  2E03               	goto	l5028
  9677  15F7  3001               	movlw	1
  9678  15F8                     u5035:	
  9679  15F8  35AE               	lslf	___aldiv@divisor,f
  9680  15F9  0DAF               	rlf	___aldiv@divisor+1,f
  9681  15FA  0DB0               	rlf	___aldiv@divisor+2,f
  9682  15FB  0DB1               	rlf	___aldiv@divisor+3,f
  9683  15FC  0B89               	decfsz	9,f
  9684  15FD  2DF8               	goto	u5035
  9685  15FE  3001               	movlw	1
  9686  15FF  00B6               	movwf	??___aldiv
  9687  1600  0836               	movf	??___aldiv,w
  9688  1601  07B7               	addwf	___aldiv@counter,f
  9689  1602  2DF5               	goto	l5026
  9690  1603                     l5028:	
  9691  1603  3001               	movlw	1
  9692  1604                     u5055:	
  9693  1604  35B9               	lslf	___aldiv@quotient,f
  9694  1605  0DBA               	rlf	___aldiv@quotient+1,f
  9695  1606  0DBB               	rlf	___aldiv@quotient+2,f
  9696  1607  0DBC               	rlf	___aldiv@quotient+3,f
  9697  1608  0B89               	decfsz	9,f
  9698  1609  2E04               	goto	u5055
  9699  160A  0831               	movf	___aldiv@divisor+3,w
  9700  160B  0235               	subwf	___aldiv@dividend+3,w
  9701  160C  1D03               	skipz
  9702  160D  2E18               	goto	u5065
  9703  160E  0830               	movf	___aldiv@divisor+2,w
  9704  160F  0234               	subwf	___aldiv@dividend+2,w
  9705  1610  1D03               	skipz
  9706  1611  2E18               	goto	u5065
  9707  1612  082F               	movf	___aldiv@divisor+1,w
  9708  1613  0233               	subwf	___aldiv@dividend+1,w
  9709  1614  1D03               	skipz
  9710  1615  2E18               	goto	u5065
  9711  1616  082E               	movf	___aldiv@divisor,w
  9712  1617  0232               	subwf	___aldiv@dividend,w
  9713  1618                     u5065:	
  9714  1618  1C03               	skipc
  9715  1619  2E23               	goto	l5036
  9716  161A  082E               	movf	___aldiv@divisor,w
  9717  161B  02B2               	subwf	___aldiv@dividend,f
  9718  161C  082F               	movf	___aldiv@divisor+1,w
  9719  161D  3BB3               	subwfb	___aldiv@dividend+1,f
  9720  161E  0830               	movf	___aldiv@divisor+2,w
  9721  161F  3BB4               	subwfb	___aldiv@dividend+2,f
  9722  1620  0831               	movf	___aldiv@divisor+3,w
  9723  1621  3BB5               	subwfb	___aldiv@dividend+3,f
  9724  1622  1439               	bsf	___aldiv@quotient,0
  9725  1623                     l5036:	
  9726  1623  3001               	movlw	1
  9727  1624                     u5075:	
  9728  1624  36B1               	lsrf	___aldiv@divisor+3,f
  9729  1625  0CB0               	rrf	___aldiv@divisor+2,f
  9730  1626  0CAF               	rrf	___aldiv@divisor+1,f
  9731  1627  0CAE               	rrf	___aldiv@divisor,f
  9732  1628  0B89               	decfsz	9,f
  9733  1629  2E24               	goto	u5075
  9734  162A  3001               	movlw	1
  9735  162B  02B7               	subwf	___aldiv@counter,f
  9736  162C  1D03               	btfss	3,2
  9737  162D  2E03               	goto	l5028
  9738  162E                     l5040:	
  9739  162E  0838               	movf	___aldiv@sign,w
  9740  162F  1903               	btfsc	3,2
  9741  1630  2E3C               	goto	l5044
  9742  1631  09B9               	comf	___aldiv@quotient,f
  9743  1632  09BA               	comf	___aldiv@quotient+1,f
  9744  1633  09BB               	comf	___aldiv@quotient+2,f
  9745  1634  09BC               	comf	___aldiv@quotient+3,f
  9746  1635  0AB9               	incf	___aldiv@quotient,f
  9747  1636  1903               	skipnz
  9748  1637  0ABA               	incf	___aldiv@quotient+1,f
  9749  1638  1903               	skipnz
  9750  1639  0ABB               	incf	___aldiv@quotient+2,f
  9751  163A  1903               	skipnz
  9752  163B  0ABC               	incf	___aldiv@quotient+3,f
  9753  163C                     l5044:	
  9754  163C  083C               	movf	___aldiv@quotient+3,w
  9755  163D  00B1               	movwf	?___aldiv+3
  9756  163E  083B               	movf	___aldiv@quotient+2,w
  9757  163F  00B0               	movwf	?___aldiv+2
  9758  1640  083A               	movf	___aldiv@quotient+1,w
  9759  1641  00AF               	movwf	?___aldiv+1
  9760  1642  0839               	movf	___aldiv@quotient,w
  9761  1643  00AE               	movwf	?___aldiv
  9762  1644  0008               	return
  9763  1645                     __end_of___aldiv:	
  9764                           
  9765                           	psect	text19
  9766  16CC                     __ptext19:	
  9767 ;; *************** function _map *****************
  9768 ;; Defined at:
  9769 ;;		line 171 in file "user.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  x               3   55[BANK0 ] float 
  9772 ;;  in_min          3   58[BANK0 ] float 
  9773 ;;  in_max          3   61[BANK0 ] float 
  9774 ;;  out_min         3   64[BANK0 ] float 
  9775 ;;  out_max         3   67[BANK0 ] float 
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;		None
  9778 ;; Return value:  Size  Location     Type
  9779 ;;                  3   55[BANK0 ] float 
  9780 ;; Registers used:
  9781 ;;		wreg, status,2, status,0, pclath, cstack
  9782 ;; Tracked objects:
  9783 ;;		On entry : 0/0
  9784 ;;		On exit  : 0/0
  9785 ;;		Unchanged: 0/0
  9786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9787 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9788 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9790 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9791 ;;Total ram usage:       18 bytes
  9792 ;; Hardware stack levels used:    1
  9793 ;; Hardware stack levels required when called:    4
  9794 ;; This function calls:
  9795 ;;		___ftadd
  9796 ;;		___ftdiv
  9797 ;;		___ftmul
  9798 ;;		___ftneg
  9799 ;; This function is called by:
  9800 ;;		_main
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           
  9805                           ;psect for function _map
  9806  16CC                     _map:	
  9807                           
  9808                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9809                           
  9810                           ;incstack = 0
  9811                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9812  16CC  0020               	movlb	0	; select bank0
  9813  16CD  085D               	movf	map@in_max,w
  9814  16CE  00AA               	movwf	___ftadd@f1
  9815  16CF  085E               	movf	map@in_max+1,w
  9816  16D0  00AB               	movwf	___ftadd@f1+1
  9817  16D1  085F               	movf	map@in_max+2,w
  9818  16D2  00AC               	movwf	___ftadd@f1+2
  9819  16D3  085A               	movf	map@in_min,w
  9820  16D4  00A2               	movwf	___ftneg@f1
  9821  16D5  085B               	movf	map@in_min+1,w
  9822  16D6  00A3               	movwf	___ftneg@f1+1
  9823  16D7  085C               	movf	map@in_min+2,w
  9824  16D8  00A4               	movwf	___ftneg@f1+2
  9825  16D9  319D  25DE  3196   	fcall	___ftneg
  9826  16DC  0020               	movlb	0	; select bank0
  9827  16DD  0822               	movf	?___ftneg,w
  9828  16DE  00AD               	movwf	___ftadd@f2
  9829  16DF  0823               	movf	?___ftneg+1,w
  9830  16E0  00AE               	movwf	___ftadd@f2+1
  9831  16E1  0824               	movf	?___ftneg+2,w
  9832  16E2  00AF               	movwf	___ftadd@f2+2
  9833  16E3  318A  22A0  3196   	fcall	___ftadd
  9834  16E6  0020               	movlb	0	; select bank0
  9835  16E7  082A               	movf	?___ftadd,w
  9836  16E8  00C7               	movwf	___ftdiv@f2
  9837  16E9  082B               	movf	?___ftadd+1,w
  9838  16EA  00C8               	movwf	___ftdiv@f2+1
  9839  16EB  082C               	movf	?___ftadd+2,w
  9840  16EC  00C9               	movwf	___ftdiv@f2+2
  9841  16ED  0863               	movf	map@out_max,w
  9842  16EE  00AA               	movwf	___ftadd@f1
  9843  16EF  0864               	movf	map@out_max+1,w
  9844  16F0  00AB               	movwf	___ftadd@f1+1
  9845  16F1  0865               	movf	map@out_max+2,w
  9846  16F2  00AC               	movwf	___ftadd@f1+2
  9847  16F3  0860               	movf	map@out_min,w
  9848  16F4  00A2               	movwf	___ftneg@f1
  9849  16F5  0861               	movf	map@out_min+1,w
  9850  16F6  00A3               	movwf	___ftneg@f1+1
  9851  16F7  0862               	movf	map@out_min+2,w
  9852  16F8  00A4               	movwf	___ftneg@f1+2
  9853  16F9  319D  25DE  3196   	fcall	___ftneg
  9854  16FC  0020               	movlb	0	; select bank0
  9855  16FD  0822               	movf	?___ftneg,w
  9856  16FE  00AD               	movwf	___ftadd@f2
  9857  16FF  0823               	movf	?___ftneg+1,w
  9858  1700  00AE               	movwf	___ftadd@f2+1
  9859  1701  0824               	movf	?___ftneg+2,w
  9860  1702  00AF               	movwf	___ftadd@f2+2
  9861  1703  318A  22A0  3196   	fcall	___ftadd
  9862  1706  0020               	movlb	0	; select bank0
  9863  1707  082A               	movf	?___ftadd,w
  9864  1708  00B7               	movwf	___ftmul@f1
  9865  1709  082B               	movf	?___ftadd+1,w
  9866  170A  00B8               	movwf	___ftmul@f1+1
  9867  170B  082C               	movf	?___ftadd+2,w
  9868  170C  00B9               	movwf	___ftmul@f1+2
  9869  170D  0857               	movf	map@x,w
  9870  170E  00AA               	movwf	___ftadd@f1
  9871  170F  0858               	movf	map@x+1,w
  9872  1710  00AB               	movwf	___ftadd@f1+1
  9873  1711  0859               	movf	map@x+2,w
  9874  1712  00AC               	movwf	___ftadd@f1+2
  9875  1713  085A               	movf	map@in_min,w
  9876  1714  00A2               	movwf	___ftneg@f1
  9877  1715  085B               	movf	map@in_min+1,w
  9878  1716  00A3               	movwf	___ftneg@f1+1
  9879  1717  085C               	movf	map@in_min+2,w
  9880  1718  00A4               	movwf	___ftneg@f1+2
  9881  1719  319D  25DE  3196   	fcall	___ftneg
  9882  171C  0020               	movlb	0	; select bank0
  9883  171D  0822               	movf	?___ftneg,w
  9884  171E  00AD               	movwf	___ftadd@f2
  9885  171F  0823               	movf	?___ftneg+1,w
  9886  1720  00AE               	movwf	___ftadd@f2+1
  9887  1721  0824               	movf	?___ftneg+2,w
  9888  1722  00AF               	movwf	___ftadd@f2+2
  9889  1723  318A  22A0  3196   	fcall	___ftadd
  9890  1726  0020               	movlb	0	; select bank0
  9891  1727  082A               	movf	?___ftadd,w
  9892  1728  00BA               	movwf	___ftmul@f2
  9893  1729  082B               	movf	?___ftadd+1,w
  9894  172A  00BB               	movwf	___ftmul@f2+1
  9895  172B  082C               	movf	?___ftadd+2,w
  9896  172C  00BC               	movwf	___ftmul@f2+2
  9897  172D  3188  2042  3196   	fcall	___ftmul
  9898  1730  0020               	movlb	0	; select bank0
  9899  1731  0837               	movf	?___ftmul,w
  9900  1732  00CA               	movwf	___ftdiv@f1
  9901  1733  0838               	movf	?___ftmul+1,w
  9902  1734  00CB               	movwf	___ftdiv@f1+1
  9903  1735  0839               	movf	?___ftmul+2,w
  9904  1736  00CC               	movwf	___ftdiv@f1+2
  9905  1737  3197  2757  3196   	fcall	___ftdiv
  9906  173A  0020               	movlb	0	; select bank0
  9907  173B  0847               	movf	?___ftdiv,w
  9908  173C  00E6               	movwf	_map$2160
  9909  173D  0848               	movf	?___ftdiv+1,w
  9910  173E  00E7               	movwf	_map$2160+1
  9911  173F  0849               	movf	?___ftdiv+2,w
  9912  1740  00E8               	movwf	_map$2160+2
  9913                           
  9914                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9915  1741  0860               	movf	map@out_min,w
  9916  1742  00AA               	movwf	___ftadd@f1
  9917  1743  0861               	movf	map@out_min+1,w
  9918  1744  00AB               	movwf	___ftadd@f1+1
  9919  1745  0862               	movf	map@out_min+2,w
  9920  1746  00AC               	movwf	___ftadd@f1+2
  9921  1747  0866               	movf	_map$2160,w
  9922  1748  00AD               	movwf	___ftadd@f2
  9923  1749  0867               	movf	_map$2160+1,w
  9924  174A  00AE               	movwf	___ftadd@f2+1
  9925  174B  0868               	movf	_map$2160+2,w
  9926  174C  00AF               	movwf	___ftadd@f2+2
  9927  174D  318A  22A0         	fcall	___ftadd
  9928  174F  0020               	movlb	0	; select bank0
  9929  1750  082A               	movf	?___ftadd,w
  9930  1751  00D7               	movwf	?_map
  9931  1752  082B               	movf	?___ftadd+1,w
  9932  1753  00D8               	movwf	?_map+1
  9933  1754  082C               	movf	?___ftadd+2,w
  9934  1755  00D9               	movwf	?_map+2
  9935  1756  0008               	return
  9936  1757                     __end_of_map:	
  9937                           
  9938                           	psect	text20
  9939  1DDE                     __ptext20:	
  9940 ;; *************** function ___ftneg *****************
  9941 ;; Defined at:
  9942 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9943 ;; Parameters:    Size  Location     Type
  9944 ;;  f1              3    2[BANK0 ] float 
  9945 ;; Auto vars:     Size  Location     Type
  9946 ;;		None
  9947 ;; Return value:  Size  Location     Type
  9948 ;;                  3    2[BANK0 ] float 
  9949 ;; Registers used:
  9950 ;;		wreg
  9951 ;; Tracked objects:
  9952 ;;		On entry : 0/0
  9953 ;;		On exit  : 0/0
  9954 ;;		Unchanged: 0/0
  9955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9956 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9959 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9960 ;;Total ram usage:        3 bytes
  9961 ;; Hardware stack levels used:    1
  9962 ;; Hardware stack levels required when called:    2
  9963 ;; This function calls:
  9964 ;;		Nothing
  9965 ;; This function is called by:
  9966 ;;		_map
  9967 ;;		_scalePotValue
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function ___ftneg
  9973  1DDE                     ___ftneg:	
  9974                           
  9975                           ;incstack = 0
  9976                           ; Regs used in ___ftneg: [wreg]
  9977  1DDE  0020               	movlb	0	; select bank0
  9978  1DDF  0824               	movf	___ftneg@f1+2,w
  9979  1DE0  0423               	iorwf	___ftneg@f1+1,w
  9980  1DE1  0422               	iorwf	___ftneg@f1,w
  9981  1DE2  1903               	skipnz
  9982  1DE3  0008               	return
  9983  1DE4  3080               	movlw	128
  9984  1DE5  06A4               	xorwf	___ftneg@f1+2,f
  9985  1DE6  0008               	return
  9986  1DE7                     __end_of___ftneg:	
  9987                           
  9988                           	psect	text21
  9989  0842                     __ptext21:	
  9990 ;; *************** function ___ftmul *****************
  9991 ;; Defined at:
  9992 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9993 ;; Parameters:    Size  Location     Type
  9994 ;;  f1              3   23[BANK0 ] float 
  9995 ;;  f2              3   26[BANK0 ] float 
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
  9998 ;;  sign            1   38[BANK0 ] unsigned char 
  9999 ;;  cntr            1   37[BANK0 ] unsigned char 
 10000 ;;  exp             1   33[BANK0 ] unsigned char 
 10001 ;; Return value:  Size  Location     Type
 10002 ;;                  3   23[BANK0 ] float 
 10003 ;; Registers used:
 10004 ;;		wreg, status,2, status,0, pclath, cstack
 10005 ;; Tracked objects:
 10006 ;;		On entry : 0/0
 10007 ;;		On exit  : 0/0
 10008 ;;		Unchanged: 0/0
 10009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10010 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10012 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10013 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10014 ;;Total ram usage:       16 bytes
 10015 ;; Hardware stack levels used:    1
 10016 ;; Hardware stack levels required when called:    3
 10017 ;; This function calls:
 10018 ;;		___ftpack
 10019 ;; This function is called by:
 10020 ;;		_set_subdivision
 10021 ;;		_map
 10022 ;;		_scalePotValue
 10023 ;; This function uses a non-reentrant model
 10024 ;;
 10025                           
 10026                           
 10027                           ;psect for function ___ftmul
 10028  0842                     ___ftmul:	
 10029                           
 10030                           ;incstack = 0
 10031                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10032  0842  0020               	movlb	0	; select bank0
 10033  0843  0837               	movf	___ftmul@f1,w
 10034  0844  00BD               	movwf	??___ftmul
 10035  0845  0838               	movf	___ftmul@f1+1,w
 10036  0846  00BE               	movwf	??___ftmul+1
 10037  0847  0839               	movf	___ftmul@f1+2,w
 10038  0848  00BF               	movwf	??___ftmul+2
 10039  0849  1003               	clrc
 10040  084A  0D3E               	rlf	??___ftmul+1,w
 10041  084B  0D3F               	rlf	??___ftmul+2,w
 10042  084C  00C0               	movwf	??___ftmul+3
 10043  084D  0840               	movf	??___ftmul+3,w
 10044  084E  00C1               	movwf	___ftmul@exp
 10045  084F  0841               	movf	___ftmul@exp,w
 10046  0850  1D03               	btfss	3,2
 10047  0851  2859               	goto	l5178
 10048  0852  3000               	movlw	0
 10049  0853  00B7               	movwf	?___ftmul
 10050  0854  3000               	movlw	0
 10051  0855  00B8               	movwf	?___ftmul+1
 10052  0856  3000               	movlw	0
 10053  0857  00B9               	movwf	?___ftmul+2
 10054  0858  0008               	return
 10055  0859                     l5178:	
 10056  0859  083A               	movf	___ftmul@f2,w
 10057  085A  00BD               	movwf	??___ftmul
 10058  085B  083B               	movf	___ftmul@f2+1,w
 10059  085C  00BE               	movwf	??___ftmul+1
 10060  085D  083C               	movf	___ftmul@f2+2,w
 10061  085E  00BF               	movwf	??___ftmul+2
 10062  085F  1003               	clrc
 10063  0860  0D3E               	rlf	??___ftmul+1,w
 10064  0861  0D3F               	rlf	??___ftmul+2,w
 10065  0862  00C0               	movwf	??___ftmul+3
 10066  0863  0840               	movf	??___ftmul+3,w
 10067  0864  00C6               	movwf	___ftmul@sign
 10068  0865  0846               	movf	___ftmul@sign,w
 10069  0866  1D03               	btfss	3,2
 10070  0867  286F               	goto	l5184
 10071  0868  3000               	movlw	0
 10072  0869  00B7               	movwf	?___ftmul
 10073  086A  3000               	movlw	0
 10074  086B  00B8               	movwf	?___ftmul+1
 10075  086C  3000               	movlw	0
 10076  086D  00B9               	movwf	?___ftmul+2
 10077  086E  0008               	return
 10078  086F                     l5184:	
 10079  086F  0846               	movf	___ftmul@sign,w
 10080  0870  3E7B               	addlw	123
 10081  0871  00BD               	movwf	??___ftmul
 10082  0872  083D               	movf	??___ftmul,w
 10083  0873  07C1               	addwf	___ftmul@exp,f
 10084  0874  0837               	movf	___ftmul@f1,w
 10085  0875  00BD               	movwf	??___ftmul
 10086  0876  0838               	movf	___ftmul@f1+1,w
 10087  0877  00BE               	movwf	??___ftmul+1
 10088  0878  0839               	movf	___ftmul@f1+2,w
 10089  0879  00BF               	movwf	??___ftmul+2
 10090  087A  3010               	movlw	16
 10091  087B                     u5445:	
 10092  087B  36BF               	lsrf	??___ftmul+2,f
 10093  087C  0CBE               	rrf	??___ftmul+1,f
 10094  087D  0CBD               	rrf	??___ftmul,f
 10095  087E  0B89               	decfsz	9,f
 10096  087F  287B               	goto	u5445
 10097  0880  083D               	movf	??___ftmul,w
 10098  0881  00C0               	movwf	??___ftmul+3
 10099  0882  0840               	movf	??___ftmul+3,w
 10100  0883  00C6               	movwf	___ftmul@sign
 10101  0884  083A               	movf	___ftmul@f2,w
 10102  0885  00BD               	movwf	??___ftmul
 10103  0886  083B               	movf	___ftmul@f2+1,w
 10104  0887  00BE               	movwf	??___ftmul+1
 10105  0888  083C               	movf	___ftmul@f2+2,w
 10106  0889  00BF               	movwf	??___ftmul+2
 10107  088A  3010               	movlw	16
 10108  088B                     u5455:	
 10109  088B  36BF               	lsrf	??___ftmul+2,f
 10110  088C  0CBE               	rrf	??___ftmul+1,f
 10111  088D  0CBD               	rrf	??___ftmul,f
 10112  088E  0B89               	decfsz	9,f
 10113  088F  288B               	goto	u5455
 10114  0890  083D               	movf	??___ftmul,w
 10115  0891  00C0               	movwf	??___ftmul+3
 10116  0892  0840               	movf	??___ftmul+3,w
 10117  0893  06C6               	xorwf	___ftmul@sign,f
 10118  0894  3080               	movlw	128
 10119  0895  00BD               	movwf	??___ftmul
 10120  0896  083D               	movf	??___ftmul,w
 10121  0897  05C6               	andwf	___ftmul@sign,f
 10122  0898  17B8               	bsf	___ftmul@f1+1,7
 10123  0899  17BB               	bsf	___ftmul@f2+1,7
 10124  089A  30FF               	movlw	255
 10125  089B  05BA               	andwf	___ftmul@f2,f
 10126  089C  30FF               	movlw	255
 10127  089D  05BB               	andwf	___ftmul@f2+1,f
 10128  089E  3000               	movlw	0
 10129  089F  05BC               	andwf	___ftmul@f2+2,f
 10130  08A0  3000               	movlw	0
 10131  08A1  00C2               	movwf	___ftmul@f3_as_product
 10132  08A2  3000               	movlw	0
 10133  08A3  00C3               	movwf	___ftmul@f3_as_product+1
 10134  08A4  3000               	movlw	0
 10135  08A5  00C4               	movwf	___ftmul@f3_as_product+2
 10136  08A6  3007               	movlw	7
 10137  08A7  00BD               	movwf	??___ftmul
 10138  08A8  083D               	movf	??___ftmul,w
 10139  08A9  00C5               	movwf	___ftmul@cntr
 10140  08AA                     l5196:	
 10141  08AA  1C37               	btfss	___ftmul@f1,0
 10142  08AB  28B2               	goto	l5200
 10143  08AC  083A               	movf	___ftmul@f2,w
 10144  08AD  07C2               	addwf	___ftmul@f3_as_product,f
 10145  08AE  083B               	movf	___ftmul@f2+1,w
 10146  08AF  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10147  08B0  083C               	movf	___ftmul@f2+2,w
 10148  08B1  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10149  08B2                     l5200:	
 10150  08B2  3001               	movlw	1
 10151  08B3                     u5475:	
 10152  08B3  36B9               	lsrf	___ftmul@f1+2,f
 10153  08B4  0CB8               	rrf	___ftmul@f1+1,f
 10154  08B5  0CB7               	rrf	___ftmul@f1,f
 10155  08B6  0B89               	decfsz	9,f
 10156  08B7  28B3               	goto	u5475
 10157  08B8  3001               	movlw	1
 10158  08B9                     u5485:	
 10159  08B9  35BA               	lslf	___ftmul@f2,f
 10160  08BA  0DBB               	rlf	___ftmul@f2+1,f
 10161  08BB  0DBC               	rlf	___ftmul@f2+2,f
 10162  08BC  0B89               	decfsz	9,f
 10163  08BD  28B9               	goto	u5485
 10164  08BE  3001               	movlw	1
 10165  08BF  02C5               	subwf	___ftmul@cntr,f
 10166  08C0  1D03               	btfss	3,2
 10167  08C1  28AA               	goto	l5196
 10168  08C2  3009               	movlw	9
 10169  08C3  00BD               	movwf	??___ftmul
 10170  08C4  083D               	movf	??___ftmul,w
 10171  08C5  00C5               	movwf	___ftmul@cntr
 10172  08C6                     l5208:	
 10173  08C6  1C37               	btfss	___ftmul@f1,0
 10174  08C7  28CE               	goto	l5212
 10175  08C8  083A               	movf	___ftmul@f2,w
 10176  08C9  07C2               	addwf	___ftmul@f3_as_product,f
 10177  08CA  083B               	movf	___ftmul@f2+1,w
 10178  08CB  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10179  08CC  083C               	movf	___ftmul@f2+2,w
 10180  08CD  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10181  08CE                     l5212:	
 10182  08CE  3001               	movlw	1
 10183  08CF                     u5515:	
 10184  08CF  36B9               	lsrf	___ftmul@f1+2,f
 10185  08D0  0CB8               	rrf	___ftmul@f1+1,f
 10186  08D1  0CB7               	rrf	___ftmul@f1,f
 10187  08D2  0B89               	decfsz	9,f
 10188  08D3  28CF               	goto	u5515
 10189  08D4  3001               	movlw	1
 10190  08D5                     u5525:	
 10191  08D5  36C4               	lsrf	___ftmul@f3_as_product+2,f
 10192  08D6  0CC3               	rrf	___ftmul@f3_as_product+1,f
 10193  08D7  0CC2               	rrf	___ftmul@f3_as_product,f
 10194  08D8  0B89               	decfsz	9,f
 10195  08D9  28D5               	goto	u5525
 10196  08DA  3001               	movlw	1
 10197  08DB  02C5               	subwf	___ftmul@cntr,f
 10198  08DC  1D03               	btfss	3,2
 10199  08DD  28C6               	goto	l5208
 10200  08DE  0842               	movf	___ftmul@f3_as_product,w
 10201  08DF  00A2               	movwf	___ftpack@arg
 10202  08E0  0843               	movf	___ftmul@f3_as_product+1,w
 10203  08E1  00A3               	movwf	___ftpack@arg+1
 10204  08E2  0844               	movf	___ftmul@f3_as_product+2,w
 10205  08E3  00A4               	movwf	___ftpack@arg+2
 10206  08E4  0841               	movf	___ftmul@exp,w
 10207  08E5  00BD               	movwf	??___ftmul
 10208  08E6  083D               	movf	??___ftmul,w
 10209  08E7  00A5               	movwf	___ftpack@exp
 10210  08E8  0846               	movf	___ftmul@sign,w
 10211  08E9  00BE               	movwf	??___ftmul+1
 10212  08EA  083E               	movf	??___ftmul+1,w
 10213  08EB  00A6               	movwf	___ftpack@sign
 10214  08EC  3194  247C         	fcall	___ftpack
 10215  08EE  0020               	movlb	0	; select bank0
 10216  08EF  0822               	movf	?___ftpack,w
 10217  08F0  00B7               	movwf	?___ftmul
 10218  08F1  0823               	movf	?___ftpack+1,w
 10219  08F2  00B8               	movwf	?___ftmul+1
 10220  08F3  0824               	movf	?___ftpack+2,w
 10221  08F4  00B9               	movwf	?___ftmul+2
 10222  08F5  0008               	return
 10223  08F6                     __end_of___ftmul:	
 10224                           
 10225                           	psect	text22
 10226  1757                     __ptext22:	
 10227 ;; *************** function ___ftdiv *****************
 10228 ;; Defined at:
 10229 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10230 ;; Parameters:    Size  Location     Type
 10231 ;;  f2              3   39[BANK0 ] float 
 10232 ;;  f1              3   42[BANK0 ] float 
 10233 ;; Auto vars:     Size  Location     Type
 10234 ;;  f3              3   50[BANK0 ] float 
 10235 ;;  sign            1   54[BANK0 ] unsigned char 
 10236 ;;  exp             1   53[BANK0 ] unsigned char 
 10237 ;;  cntr            1   49[BANK0 ] unsigned char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  3   39[BANK0 ] float 
 10240 ;; Registers used:
 10241 ;;		wreg, status,2, status,0, pclath, cstack
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10247 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10248 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10249 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10250 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10251 ;;Total ram usage:       16 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    3
 10254 ;; This function calls:
 10255 ;;		___ftpack
 10256 ;; This function is called by:
 10257 ;;		_main
 10258 ;;		_set_subdivision
 10259 ;;		_map
 10260 ;;		_scalePotValue
 10261 ;; This function uses a non-reentrant model
 10262 ;;
 10263                           
 10264                           
 10265                           ;psect for function ___ftdiv
 10266  1757                     ___ftdiv:	
 10267                           
 10268                           ;incstack = 0
 10269                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10270  1757  0020               	movlb	0	; select bank0
 10271  1758  084A               	movf	___ftdiv@f1,w
 10272  1759  00CD               	movwf	??___ftdiv
 10273  175A  084B               	movf	___ftdiv@f1+1,w
 10274  175B  00CE               	movwf	??___ftdiv+1
 10275  175C  084C               	movf	___ftdiv@f1+2,w
 10276  175D  00CF               	movwf	??___ftdiv+2
 10277  175E  1003               	clrc
 10278  175F  0D4E               	rlf	??___ftdiv+1,w
 10279  1760  0D4F               	rlf	??___ftdiv+2,w
 10280  1761  00D0               	movwf	??___ftdiv+3
 10281  1762  0850               	movf	??___ftdiv+3,w
 10282  1763  00D5               	movwf	___ftdiv@exp
 10283  1764  0855               	movf	___ftdiv@exp,w
 10284  1765  1D03               	btfss	3,2
 10285  1766  2F6E               	goto	l5136
 10286  1767  3000               	movlw	0
 10287  1768  00C7               	movwf	?___ftdiv
 10288  1769  3000               	movlw	0
 10289  176A  00C8               	movwf	?___ftdiv+1
 10290  176B  3000               	movlw	0
 10291  176C  00C9               	movwf	?___ftdiv+2
 10292  176D  0008               	return
 10293  176E                     l5136:	
 10294  176E  0847               	movf	___ftdiv@f2,w
 10295  176F  00CD               	movwf	??___ftdiv
 10296  1770  0848               	movf	___ftdiv@f2+1,w
 10297  1771  00CE               	movwf	??___ftdiv+1
 10298  1772  0849               	movf	___ftdiv@f2+2,w
 10299  1773  00CF               	movwf	??___ftdiv+2
 10300  1774  1003               	clrc
 10301  1775  0D4E               	rlf	??___ftdiv+1,w
 10302  1776  0D4F               	rlf	??___ftdiv+2,w
 10303  1777  00D0               	movwf	??___ftdiv+3
 10304  1778  0850               	movf	??___ftdiv+3,w
 10305  1779  00D6               	movwf	___ftdiv@sign
 10306  177A  0856               	movf	___ftdiv@sign,w
 10307  177B  1D03               	btfss	3,2
 10308  177C  2F84               	goto	l5142
 10309  177D  3000               	movlw	0
 10310  177E  00C7               	movwf	?___ftdiv
 10311  177F  3000               	movlw	0
 10312  1780  00C8               	movwf	?___ftdiv+1
 10313  1781  3000               	movlw	0
 10314  1782  00C9               	movwf	?___ftdiv+2
 10315  1783  0008               	return
 10316  1784                     l5142:	
 10317  1784  3000               	movlw	0
 10318  1785  00D2               	movwf	___ftdiv@f3
 10319  1786  3000               	movlw	0
 10320  1787  00D3               	movwf	___ftdiv@f3+1
 10321  1788  3000               	movlw	0
 10322  1789  00D4               	movwf	___ftdiv@f3+2
 10323  178A  3089               	movlw	137
 10324  178B  0756               	addwf	___ftdiv@sign,w
 10325  178C  00CD               	movwf	??___ftdiv
 10326  178D  084D               	movf	??___ftdiv,w
 10327  178E  02D5               	subwf	___ftdiv@exp,f
 10328  178F  084A               	movf	___ftdiv@f1,w
 10329  1790  00CD               	movwf	??___ftdiv
 10330  1791  084B               	movf	___ftdiv@f1+1,w
 10331  1792  00CE               	movwf	??___ftdiv+1
 10332  1793  084C               	movf	___ftdiv@f1+2,w
 10333  1794  00CF               	movwf	??___ftdiv+2
 10334  1795  3010               	movlw	16
 10335  1796                     u5365:	
 10336  1796  36CF               	lsrf	??___ftdiv+2,f
 10337  1797  0CCE               	rrf	??___ftdiv+1,f
 10338  1798  0CCD               	rrf	??___ftdiv,f
 10339  1799  0B89               	decfsz	9,f
 10340  179A  2F96               	goto	u5365
 10341  179B  084D               	movf	??___ftdiv,w
 10342  179C  00D0               	movwf	??___ftdiv+3
 10343  179D  0850               	movf	??___ftdiv+3,w
 10344  179E  00D6               	movwf	___ftdiv@sign
 10345  179F  0847               	movf	___ftdiv@f2,w
 10346  17A0  00CD               	movwf	??___ftdiv
 10347  17A1  0848               	movf	___ftdiv@f2+1,w
 10348  17A2  00CE               	movwf	??___ftdiv+1
 10349  17A3  0849               	movf	___ftdiv@f2+2,w
 10350  17A4  00CF               	movwf	??___ftdiv+2
 10351  17A5  3010               	movlw	16
 10352  17A6                     u5375:	
 10353  17A6  36CF               	lsrf	??___ftdiv+2,f
 10354  17A7  0CCE               	rrf	??___ftdiv+1,f
 10355  17A8  0CCD               	rrf	??___ftdiv,f
 10356  17A9  0B89               	decfsz	9,f
 10357  17AA  2FA6               	goto	u5375
 10358  17AB  084D               	movf	??___ftdiv,w
 10359  17AC  00D0               	movwf	??___ftdiv+3
 10360  17AD  0850               	movf	??___ftdiv+3,w
 10361  17AE  06D6               	xorwf	___ftdiv@sign,f
 10362  17AF  3080               	movlw	128
 10363  17B0  00CD               	movwf	??___ftdiv
 10364  17B1  084D               	movf	??___ftdiv,w
 10365  17B2  05D6               	andwf	___ftdiv@sign,f
 10366  17B3  17CB               	bsf	___ftdiv@f1+1,7
 10367  17B4  30FF               	movlw	255
 10368  17B5  05CA               	andwf	___ftdiv@f1,f
 10369  17B6  30FF               	movlw	255
 10370  17B7  05CB               	andwf	___ftdiv@f1+1,f
 10371  17B8  3000               	movlw	0
 10372  17B9  05CC               	andwf	___ftdiv@f1+2,f
 10373  17BA  17C8               	bsf	___ftdiv@f2+1,7
 10374  17BB  30FF               	movlw	255
 10375  17BC  05C7               	andwf	___ftdiv@f2,f
 10376  17BD  30FF               	movlw	255
 10377  17BE  05C8               	andwf	___ftdiv@f2+1,f
 10378  17BF  3000               	movlw	0
 10379  17C0  05C9               	andwf	___ftdiv@f2+2,f
 10380  17C1  3018               	movlw	24
 10381  17C2  00CD               	movwf	??___ftdiv
 10382  17C3  084D               	movf	??___ftdiv,w
 10383  17C4  00D1               	movwf	___ftdiv@cntr
 10384  17C5                     l5156:	
 10385  17C5  3001               	movlw	1
 10386  17C6                     u5385:	
 10387  17C6  35D2               	lslf	___ftdiv@f3,f
 10388  17C7  0DD3               	rlf	___ftdiv@f3+1,f
 10389  17C8  0DD4               	rlf	___ftdiv@f3+2,f
 10390  17C9  0B89               	decfsz	9,f
 10391  17CA  2FC6               	goto	u5385
 10392  17CB  0849               	movf	___ftdiv@f2+2,w
 10393  17CC  024C               	subwf	___ftdiv@f1+2,w
 10394  17CD  1D03               	skipz
 10395  17CE  2FD5               	goto	u5395
 10396  17CF  0848               	movf	___ftdiv@f2+1,w
 10397  17D0  024B               	subwf	___ftdiv@f1+1,w
 10398  17D1  1D03               	skipz
 10399  17D2  2FD5               	goto	u5395
 10400  17D3  0847               	movf	___ftdiv@f2,w
 10401  17D4  024A               	subwf	___ftdiv@f1,w
 10402  17D5                     u5395:	
 10403  17D5  1C03               	skipc
 10404  17D6  2FDE               	goto	l5164
 10405  17D7  0847               	movf	___ftdiv@f2,w
 10406  17D8  02CA               	subwf	___ftdiv@f1,f
 10407  17D9  0848               	movf	___ftdiv@f2+1,w
 10408  17DA  3BCB               	subwfb	___ftdiv@f1+1,f
 10409  17DB  0849               	movf	___ftdiv@f2+2,w
 10410  17DC  3BCC               	subwfb	___ftdiv@f1+2,f
 10411  17DD  1452               	bsf	___ftdiv@f3,0
 10412  17DE                     l5164:	
 10413  17DE  3001               	movlw	1
 10414  17DF                     u5405:	
 10415  17DF  35CA               	lslf	___ftdiv@f1,f
 10416  17E0  0DCB               	rlf	___ftdiv@f1+1,f
 10417  17E1  0DCC               	rlf	___ftdiv@f1+2,f
 10418  17E2  0B89               	decfsz	9,f
 10419  17E3  2FDF               	goto	u5405
 10420  17E4  3001               	movlw	1
 10421  17E5  02D1               	subwf	___ftdiv@cntr,f
 10422  17E6  1D03               	btfss	3,2
 10423  17E7  2FC5               	goto	l5156
 10424  17E8  0852               	movf	___ftdiv@f3,w
 10425  17E9  00A2               	movwf	___ftpack@arg
 10426  17EA  0853               	movf	___ftdiv@f3+1,w
 10427  17EB  00A3               	movwf	___ftpack@arg+1
 10428  17EC  0854               	movf	___ftdiv@f3+2,w
 10429  17ED  00A4               	movwf	___ftpack@arg+2
 10430  17EE  0855               	movf	___ftdiv@exp,w
 10431  17EF  00CD               	movwf	??___ftdiv
 10432  17F0  084D               	movf	??___ftdiv,w
 10433  17F1  00A5               	movwf	___ftpack@exp
 10434  17F2  0856               	movf	___ftdiv@sign,w
 10435  17F3  00CE               	movwf	??___ftdiv+1
 10436  17F4  084E               	movf	??___ftdiv+1,w
 10437  17F5  00A6               	movwf	___ftpack@sign
 10438  17F6  3194  247C         	fcall	___ftpack
 10439  17F8  0020               	movlb	0	; select bank0
 10440  17F9  0822               	movf	?___ftpack,w
 10441  17FA  00C7               	movwf	?___ftdiv
 10442  17FB  0823               	movf	?___ftpack+1,w
 10443  17FC  00C8               	movwf	?___ftdiv+1
 10444  17FD  0824               	movf	?___ftpack+2,w
 10445  17FE  00C9               	movwf	?___ftdiv+2
 10446  17FF  0008               	return
 10447  1800                     __end_of___ftdiv:	
 10448                           
 10449                           	psect	text23
 10450  0AA0                     __ptext23:	
 10451 ;; *************** function ___ftadd *****************
 10452 ;; Defined at:
 10453 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10454 ;; Parameters:    Size  Location     Type
 10455 ;;  f1              3   10[BANK0 ] float 
 10456 ;;  f2              3   13[BANK0 ] float 
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;  exp1            1   22[BANK0 ] unsigned char 
 10459 ;;  exp2            1   21[BANK0 ] unsigned char 
 10460 ;;  sign            1   20[BANK0 ] unsigned char 
 10461 ;; Return value:  Size  Location     Type
 10462 ;;                  3   10[BANK0 ] float 
 10463 ;; Registers used:
 10464 ;;		wreg, status,2, status,0, pclath, cstack
 10465 ;; Tracked objects:
 10466 ;;		On entry : 0/0
 10467 ;;		On exit  : 0/0
 10468 ;;		Unchanged: 0/0
 10469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10470 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10471 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10472 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10473 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10474 ;;Total ram usage:       13 bytes
 10475 ;; Hardware stack levels used:    1
 10476 ;; Hardware stack levels required when called:    3
 10477 ;; This function calls:
 10478 ;;		___ftpack
 10479 ;; This function is called by:
 10480 ;;		_map
 10481 ;;		_scalePotValue
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function ___ftadd
 10487  0AA0                     ___ftadd:	
 10488                           
 10489                           ;incstack = 0
 10490                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10491  0AA0  0020               	movlb	0	; select bank0
 10492  0AA1  082A               	movf	___ftadd@f1,w
 10493  0AA2  00B0               	movwf	??___ftadd
 10494  0AA3  082B               	movf	___ftadd@f1+1,w
 10495  0AA4  00B1               	movwf	??___ftadd+1
 10496  0AA5  082C               	movf	___ftadd@f1+2,w
 10497  0AA6  00B2               	movwf	??___ftadd+2
 10498  0AA7  1003               	clrc
 10499  0AA8  0D31               	rlf	??___ftadd+1,w
 10500  0AA9  0D32               	rlf	??___ftadd+2,w
 10501  0AAA  00B3               	movwf	??___ftadd+3
 10502  0AAB  0833               	movf	??___ftadd+3,w
 10503  0AAC  00B6               	movwf	___ftadd@exp1
 10504  0AAD  082D               	movf	___ftadd@f2,w
 10505  0AAE  00B0               	movwf	??___ftadd
 10506  0AAF  082E               	movf	___ftadd@f2+1,w
 10507  0AB0  00B1               	movwf	??___ftadd+1
 10508  0AB1  082F               	movf	___ftadd@f2+2,w
 10509  0AB2  00B2               	movwf	??___ftadd+2
 10510  0AB3  1003               	clrc
 10511  0AB4  0D31               	rlf	??___ftadd+1,w
 10512  0AB5  0D32               	rlf	??___ftadd+2,w
 10513  0AB6  00B3               	movwf	??___ftadd+3
 10514  0AB7  0833               	movf	??___ftadd+3,w
 10515  0AB8  00B5               	movwf	___ftadd@exp2
 10516  0AB9  0836               	movf	___ftadd@exp1,w
 10517  0ABA  1903               	btfsc	3,2
 10518  0ABB  2AC8               	goto	l5066
 10519  0ABC  0835               	movf	___ftadd@exp2,w
 10520  0ABD  0236               	subwf	___ftadd@exp1,w
 10521  0ABE  1803               	skipnc
 10522  0ABF  2ACF               	goto	l5070
 10523  0AC0  0336               	decf	___ftadd@exp1,w
 10524  0AC1  3AFF               	xorlw	255
 10525  0AC2  0735               	addwf	___ftadd@exp2,w
 10526  0AC3  00B0               	movwf	??___ftadd
 10527  0AC4  3019               	movlw	25
 10528  0AC5  0230               	subwf	??___ftadd,w
 10529  0AC6  1C03               	skipc
 10530  0AC7  2ACF               	goto	l5070
 10531  0AC8                     l5066:	
 10532  0AC8  082D               	movf	___ftadd@f2,w
 10533  0AC9  00AA               	movwf	?___ftadd
 10534  0ACA  082E               	movf	___ftadd@f2+1,w
 10535  0ACB  00AB               	movwf	?___ftadd+1
 10536  0ACC  082F               	movf	___ftadd@f2+2,w
 10537  0ACD  00AC               	movwf	?___ftadd+2
 10538  0ACE  0008               	return
 10539  0ACF                     l5070:	
 10540  0ACF  0835               	movf	___ftadd@exp2,w
 10541  0AD0  1903               	btfsc	3,2
 10542  0AD1  0008               	return
 10543  0AD2  0836               	movf	___ftadd@exp1,w
 10544  0AD3  0235               	subwf	___ftadd@exp2,w
 10545  0AD4  1803               	skipnc
 10546  0AD5  2ADE               	goto	l5076
 10547  0AD6  0335               	decf	___ftadd@exp2,w
 10548  0AD7  3AFF               	xorlw	255
 10549  0AD8  0736               	addwf	___ftadd@exp1,w
 10550  0AD9  00B0               	movwf	??___ftadd
 10551  0ADA  3019               	movlw	25
 10552  0ADB  0230               	subwf	??___ftadd,w
 10553  0ADC  1803               	btfsc	3,0
 10554  0ADD  0008               	return
 10555  0ADE                     l5076:	
 10556  0ADE  3006               	movlw	6
 10557  0ADF  00B0               	movwf	??___ftadd
 10558  0AE0  0830               	movf	??___ftadd,w
 10559  0AE1  00B4               	movwf	___ftadd@sign
 10560  0AE2  1BAC               	btfsc	___ftadd@f1+2,7
 10561  0AE3  17B4               	bsf	___ftadd@sign,7
 10562  0AE4  1BAF               	btfsc	___ftadd@f2+2,7
 10563  0AE5  1734               	bsf	___ftadd@sign,6
 10564  0AE6  17AB               	bsf	___ftadd@f1+1,7
 10565  0AE7  30FF               	movlw	255
 10566  0AE8  05AA               	andwf	___ftadd@f1,f
 10567  0AE9  30FF               	movlw	255
 10568  0AEA  05AB               	andwf	___ftadd@f1+1,f
 10569  0AEB  3000               	movlw	0
 10570  0AEC  05AC               	andwf	___ftadd@f1+2,f
 10571  0AED  17AE               	bsf	___ftadd@f2+1,7
 10572  0AEE  30FF               	movlw	255
 10573  0AEF  05AD               	andwf	___ftadd@f2,f
 10574  0AF0  30FF               	movlw	255
 10575  0AF1  05AE               	andwf	___ftadd@f2+1,f
 10576  0AF2  3000               	movlw	0
 10577  0AF3  05AF               	andwf	___ftadd@f2+2,f
 10578  0AF4  0835               	movf	___ftadd@exp2,w
 10579  0AF5  0236               	subwf	___ftadd@exp1,w
 10580  0AF6  1803               	skipnc
 10581  0AF7  2B1A               	goto	l5098
 10582  0AF8                     l5088:	
 10583  0AF8  3001               	movlw	1
 10584  0AF9                     u5205:	
 10585  0AF9  35AD               	lslf	___ftadd@f2,f
 10586  0AFA  0DAE               	rlf	___ftadd@f2+1,f
 10587  0AFB  0DAF               	rlf	___ftadd@f2+2,f
 10588  0AFC  0B89               	decfsz	9,f
 10589  0AFD  2AF9               	goto	u5205
 10590  0AFE  3001               	movlw	1
 10591  0AFF  02B5               	subwf	___ftadd@exp2,f
 10592  0B00  0835               	movf	___ftadd@exp2,w
 10593  0B01  0636               	xorwf	___ftadd@exp1,w
 10594  0B02  1903               	skipnz
 10595  0B03  2B15               	goto	l5096
 10596  0B04  3001               	movlw	1
 10597  0B05  02B4               	subwf	___ftadd@sign,f
 10598  0B06  0834               	movf	___ftadd@sign,w
 10599  0B07  3907               	andlw	7
 10600  0B08  1903               	btfsc	3,2
 10601  0B09  2B15               	goto	l5096
 10602  0B0A  2AF8               	goto	l5088
 10603  0B0B                     l5094:	
 10604  0B0B  3001               	movlw	1
 10605  0B0C                     u5235:	
 10606  0B0C  36AC               	lsrf	___ftadd@f1+2,f
 10607  0B0D  0CAB               	rrf	___ftadd@f1+1,f
 10608  0B0E  0CAA               	rrf	___ftadd@f1,f
 10609  0B0F  0B89               	decfsz	9,f
 10610  0B10  2B0C               	goto	u5235
 10611  0B11  3001               	movlw	1
 10612  0B12  00B0               	movwf	??___ftadd
 10613  0B13  0830               	movf	??___ftadd,w
 10614  0B14  07B6               	addwf	___ftadd@exp1,f
 10615  0B15                     l5096:	
 10616  0B15  0836               	movf	___ftadd@exp1,w
 10617  0B16  0635               	xorwf	___ftadd@exp2,w
 10618  0B17  1903               	btfsc	3,2
 10619  0B18  2B3F               	goto	l1512
 10620  0B19  2B0B               	goto	l5094
 10621  0B1A                     l5098:	
 10622  0B1A  0836               	movf	___ftadd@exp1,w
 10623  0B1B  0235               	subwf	___ftadd@exp2,w
 10624  0B1C  1803               	skipnc
 10625  0B1D  2B3F               	goto	l1512
 10626  0B1E                     l5100:	
 10627  0B1E  3001               	movlw	1
 10628  0B1F                     u5265:	
 10629  0B1F  35AA               	lslf	___ftadd@f1,f
 10630  0B20  0DAB               	rlf	___ftadd@f1+1,f
 10631  0B21  0DAC               	rlf	___ftadd@f1+2,f
 10632  0B22  0B89               	decfsz	9,f
 10633  0B23  2B1F               	goto	u5265
 10634  0B24  3001               	movlw	1
 10635  0B25  02B6               	subwf	___ftadd@exp1,f
 10636  0B26  0835               	movf	___ftadd@exp2,w
 10637  0B27  0636               	xorwf	___ftadd@exp1,w
 10638  0B28  1903               	skipnz
 10639  0B29  2B3B               	goto	l5108
 10640  0B2A  3001               	movlw	1
 10641  0B2B  02B4               	subwf	___ftadd@sign,f
 10642  0B2C  0834               	movf	___ftadd@sign,w
 10643  0B2D  3907               	andlw	7
 10644  0B2E  1903               	btfsc	3,2
 10645  0B2F  2B3B               	goto	l5108
 10646  0B30  2B1E               	goto	l5100
 10647  0B31                     l5106:	
 10648  0B31  3001               	movlw	1
 10649  0B32                     u5295:	
 10650  0B32  36AF               	lsrf	___ftadd@f2+2,f
 10651  0B33  0CAE               	rrf	___ftadd@f2+1,f
 10652  0B34  0CAD               	rrf	___ftadd@f2,f
 10653  0B35  0B89               	decfsz	9,f
 10654  0B36  2B32               	goto	u5295
 10655  0B37  3001               	movlw	1
 10656  0B38  00B0               	movwf	??___ftadd
 10657  0B39  0830               	movf	??___ftadd,w
 10658  0B3A  07B5               	addwf	___ftadd@exp2,f
 10659  0B3B                     l5108:	
 10660  0B3B  0836               	movf	___ftadd@exp1,w
 10661  0B3C  0635               	xorwf	___ftadd@exp2,w
 10662  0B3D  1D03               	skipz
 10663  0B3E  2B31               	goto	l5106
 10664  0B3F                     l1512:	
 10665  0B3F  1FB4               	btfss	___ftadd@sign,7
 10666  0B40  2B51               	goto	l5112
 10667  0B41  30FF               	movlw	255
 10668  0B42  06AA               	xorwf	___ftadd@f1,f
 10669  0B43  30FF               	movlw	255
 10670  0B44  06AB               	xorwf	___ftadd@f1+1,f
 10671  0B45  30FF               	movlw	255
 10672  0B46  06AC               	xorwf	___ftadd@f1+2,f
 10673  0B47  3001               	movlw	1
 10674  0B48  07AA               	addwf	___ftadd@f1,f
 10675  0B49  3000               	movlw	0
 10676  0B4A  1803               	skipnc
 10677  0B4B  3001               	movlw	1
 10678  0B4C  07AB               	addwf	___ftadd@f1+1,f
 10679  0B4D  3000               	movlw	0
 10680  0B4E  1803               	skipnc
 10681  0B4F  3001               	movlw	1
 10682  0B50  07AC               	addwf	___ftadd@f1+2,f
 10683  0B51                     l5112:	
 10684  0B51  1F34               	btfss	___ftadd@sign,6
 10685  0B52  2B63               	goto	l5116
 10686  0B53  30FF               	movlw	255
 10687  0B54  06AD               	xorwf	___ftadd@f2,f
 10688  0B55  30FF               	movlw	255
 10689  0B56  06AE               	xorwf	___ftadd@f2+1,f
 10690  0B57  30FF               	movlw	255
 10691  0B58  06AF               	xorwf	___ftadd@f2+2,f
 10692  0B59  3001               	movlw	1
 10693  0B5A  07AD               	addwf	___ftadd@f2,f
 10694  0B5B  3000               	movlw	0
 10695  0B5C  1803               	skipnc
 10696  0B5D  3001               	movlw	1
 10697  0B5E  07AE               	addwf	___ftadd@f2+1,f
 10698  0B5F  3000               	movlw	0
 10699  0B60  1803               	skipnc
 10700  0B61  3001               	movlw	1
 10701  0B62  07AF               	addwf	___ftadd@f2+2,f
 10702  0B63                     l5116:	
 10703  0B63  01B4               	clrf	___ftadd@sign
 10704  0B64  082A               	movf	___ftadd@f1,w
 10705  0B65  07AD               	addwf	___ftadd@f2,f
 10706  0B66  082B               	movf	___ftadd@f1+1,w
 10707  0B67  3DAE               	addwfc	___ftadd@f2+1,f
 10708  0B68  082C               	movf	___ftadd@f1+2,w
 10709  0B69  3DAF               	addwfc	___ftadd@f2+2,f
 10710  0B6A  1FAF               	btfss	___ftadd@f2+2,7
 10711  0B6B  2B7E               	goto	l5126
 10712  0B6C  30FF               	movlw	255
 10713  0B6D  06AD               	xorwf	___ftadd@f2,f
 10714  0B6E  30FF               	movlw	255
 10715  0B6F  06AE               	xorwf	___ftadd@f2+1,f
 10716  0B70  30FF               	movlw	255
 10717  0B71  06AF               	xorwf	___ftadd@f2+2,f
 10718  0B72  3001               	movlw	1
 10719  0B73  07AD               	addwf	___ftadd@f2,f
 10720  0B74  3000               	movlw	0
 10721  0B75  1803               	skipnc
 10722  0B76  3001               	movlw	1
 10723  0B77  07AE               	addwf	___ftadd@f2+1,f
 10724  0B78  3000               	movlw	0
 10725  0B79  1803               	skipnc
 10726  0B7A  3001               	movlw	1
 10727  0B7B  07AF               	addwf	___ftadd@f2+2,f
 10728  0B7C  01B4               	clrf	___ftadd@sign
 10729  0B7D  0AB4               	incf	___ftadd@sign,f
 10730  0B7E                     l5126:	
 10731  0B7E  082D               	movf	___ftadd@f2,w
 10732  0B7F  00A2               	movwf	___ftpack@arg
 10733  0B80  082E               	movf	___ftadd@f2+1,w
 10734  0B81  00A3               	movwf	___ftpack@arg+1
 10735  0B82  082F               	movf	___ftadd@f2+2,w
 10736  0B83  00A4               	movwf	___ftpack@arg+2
 10737  0B84  0836               	movf	___ftadd@exp1,w
 10738  0B85  00B0               	movwf	??___ftadd
 10739  0B86  0830               	movf	??___ftadd,w
 10740  0B87  00A5               	movwf	___ftpack@exp
 10741  0B88  0834               	movf	___ftadd@sign,w
 10742  0B89  00B1               	movwf	??___ftadd+1
 10743  0B8A  0831               	movf	??___ftadd+1,w
 10744  0B8B  00A6               	movwf	___ftpack@sign
 10745  0B8C  3194  247C         	fcall	___ftpack
 10746  0B8E  0020               	movlb	0	; select bank0
 10747  0B8F  0822               	movf	?___ftpack,w
 10748  0B90  00AA               	movwf	?___ftadd
 10749  0B91  0823               	movf	?___ftpack+1,w
 10750  0B92  00AB               	movwf	?___ftadd+1
 10751  0B93  0824               	movf	?___ftpack+2,w
 10752  0B94  00AC               	movwf	?___ftadd+2
 10753  0B95  0008               	return
 10754  0B96                     __end_of___ftadd:	
 10755                           
 10756                           	psect	text24
 10757  1E09                     __ptext24:	
 10758 ;; *************** function _initSwitchBypass *****************
 10759 ;; Defined at:
 10760 ;;		line 29 in file "SwitchBypass.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;		None
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;  initState       2   24[BANK0 ] int 
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		wreg, status,2, status,0, pclath, cstack
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10778 ;;Total ram usage:        2 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    5
 10781 ;; This function calls:
 10782 ;;		_getSwitchBypassState
 10783 ;;		_setSwitchBypassState
 10784 ;; This function is called by:
 10785 ;;		_main
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _initSwitchBypass
 10791  1E09                     _initSwitchBypass:	
 10792                           
 10793                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10797  1E09  319D  25CA  319E   	fcall	_getSwitchBypassState
 10798  1E0C  0020               	movlb	0	; select bank0
 10799  1E0D  0823               	movf	?_getSwitchBypassState+1,w
 10800  1E0E  00B9               	movwf	initSwitchBypass@initState+1
 10801  1E0F  0822               	movf	?_getSwitchBypassState,w
 10802  1E10  00B8               	movwf	initSwitchBypass@initState
 10803                           
 10804                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10805  1E11  0839               	movf	initSwitchBypass@initState+1,w
 10806  1E12  00B5               	movwf	setSwitchBypassState@f_state+1
 10807  1E13  0838               	movf	initSwitchBypass@initState,w
 10808  1E14  00B4               	movwf	setSwitchBypassState@f_state
 10809  1E15  3192  2213         	fcall	_setSwitchBypassState
 10810  1E17  0008               	return
 10811  1E18                     __end_of_initSwitchBypass:	
 10812                           
 10813                           	psect	text25
 10814  1213                     __ptext25:	
 10815 ;; *************** function _setSwitchBypassState *****************
 10816 ;; Defined at:
 10817 ;;		line 134 in file "SwitchBypass.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;  f_state         2   20[BANK0 ] int 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;		None
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  1    wreg      void 
 10824 ;; Registers used:
 10825 ;;		wreg, status,2, status,0, pclath, cstack
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10833 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10834 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10835 ;;Total ram usage:        4 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; Hardware stack levels required when called:    4
 10838 ;; This function calls:
 10839 ;;		_updateSwitchBypassState
 10840 ;;		_wait_ms
 10841 ;; This function is called by:
 10842 ;;		_initSwitchBypass
 10843 ;;		_updateSwitchBypass
 10844 ;; This function uses a non-reentrant model
 10845 ;;
 10846                           
 10847                           
 10848                           ;psect for function _setSwitchBypassState
 10849  1213                     _setSwitchBypassState:	
 10850                           
 10851                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10852                           
 10853                           ;incstack = 0
 10854                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10855  1213  087D               	movf	_switchBypass_state,w
 10856  1214  0020               	movlb	0	; select bank0
 10857  1215  00B6               	movwf	??_setSwitchBypassState
 10858  1216  01B7               	clrf	??_setSwitchBypassState+1
 10859  1217  0835               	movf	setSwitchBypassState@f_state+1,w
 10860  1218  0637               	xorwf	??_setSwitchBypassState+1,w
 10861  1219  1D03               	skipz
 10862  121A  2A1D               	goto	u4935
 10863  121B  0834               	movf	setSwitchBypassState@f_state,w
 10864  121C  0636               	xorwf	??_setSwitchBypassState,w
 10865  121D                     u4935:	
 10866  121D  1903               	btfsc	3,2
 10867  121E  0008               	return
 10868                           
 10869                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10870  121F  0834               	movf	setSwitchBypassState@f_state,w
 10871  1220  00B6               	movwf	??_setSwitchBypassState
 10872  1221  0836               	movf	??_setSwitchBypassState,w
 10873  1222  00FD               	movwf	_switchBypass_state
 10874                           
 10875                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10876  1223  0C34               	rrf	setSwitchBypassState@f_state,w
 10877  1224  0022               	movlb	2	; select bank2
 10878  1225  1C03               	skipc
 10879  1226  110D               	bcf	13,2	;volatile
 10880  1227  1803               	skipnc
 10881  1228  150D               	bsf	13,2	;volatile
 10882                           
 10883                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10884  1229  118D               	bcf	13,3	;volatile
 10885                           
 10886                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10887  122A  0020               	movlb	0	; select bank0
 10888  122B  0C34               	rrf	setSwitchBypassState@f_state,w
 10889  122C  0027               	movlb	7	; select bank7
 10890  122D  1C03               	skipc
 10891  122E  110D               	bcf	13,2	;volatile
 10892  122F  1803               	skipnc
 10893  1230  150D               	bsf	13,2	;volatile
 10894                           
 10895                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10896  1231  0020               	movlb	0	; select bank0
 10897  1232  0834               	movf	setSwitchBypassState@f_state,w
 10898  1233  0435               	iorwf	setSwitchBypassState@f_state+1,w
 10899  1234  1D03               	btfss	3,2
 10900  1235  2A39               	goto	u4940
 10901  1236  0027               	movlb	7	; select bank7
 10902  1237  148D               	bsf	13,1	;volatile
 10903  1238  2A3B               	goto	l4968
 10904  1239                     u4940:	
 10905  1239  0027               	movlb	7	; select bank7
 10906  123A  108D               	bcf	13,1	;volatile
 10907  123B                     l4968:	
 10908                           
 10909                           ;SwitchBypass.c: 142: wait_ms(20);
 10910  123B  3014               	movlw	20
 10911  123C  0020               	movlb	0	; select bank0
 10912  123D  00AE               	movwf	wait_ms@timeSec
 10913  123E  3000               	movlw	0
 10914  123F  00AF               	movwf	wait_ms@timeSec+1
 10915  1240  319F  2793  3192   	fcall	_wait_ms
 10916                           
 10917                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10918  1243  0027               	movlb	7	; select bank7
 10919  1244  110D               	bcf	13,2	;volatile
 10920                           
 10921                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10922  1245  108D               	bcf	13,1	;volatile
 10923                           
 10924                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10925  1246  087D               	movf	_switchBypass_state,w
 10926  1247  0020               	movlb	0	; select bank0
 10927  1248  00B6               	movwf	??_setSwitchBypassState
 10928  1249  01B7               	clrf	??_setSwitchBypassState+1
 10929  124A  0836               	movf	??_setSwitchBypassState,w
 10930  124B  00A2               	movwf	updateSwitchBypassState@state
 10931  124C  0837               	movf	??_setSwitchBypassState+1,w
 10932  124D  00A3               	movwf	updateSwitchBypassState@state+1
 10933  124E  3180  2002  3192   	fcall	_updateSwitchBypassState
 10934                           
 10935                           ;SwitchBypass.c: 148: wait_ms(20);
 10936  1251  3014               	movlw	20
 10937  1252  0020               	movlb	0	; select bank0
 10938  1253  00AE               	movwf	wait_ms@timeSec
 10939  1254  3000               	movlw	0
 10940  1255  00AF               	movwf	wait_ms@timeSec+1
 10941  1256  319F  2793         	fcall	_wait_ms
 10942  1258  0008               	return
 10943  1259                     __end_of_setSwitchBypassState:	
 10944                           
 10945                           	psect	text26
 10946  1F93                     __ptext26:	
 10947 ;; *************** function _wait_ms *****************
 10948 ;; Defined at:
 10949 ;;		line 23 in file "system.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  timeSec         2   14[BANK0 ] unsigned int 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;  timemsl         4   16[BANK0 ] long 
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		wreg, status,2, status,0, pclath, cstack
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10963 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10964 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10966 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10967 ;;Total ram usage:        6 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    3
 10970 ;; This function calls:
 10971 ;;		___lmul
 10972 ;; This function is called by:
 10973 ;;		_star_tactiles
 10974 ;;		_solidring_tactiles
 10975 ;;		_read_bottom_tactile
 10976 ;;		_read_top_tactile
 10977 ;;		_setSwitchBypassState
 10978 ;;		_setDoublePressState
 10979 ;;		_showError_Alternating
 10980 ;;		_show_error
 10981 ;;		_show_cancel
 10982 ;;		_ring_tactiles
 10983 ;; This function uses a non-reentrant model
 10984 ;;
 10985                           
 10986                           
 10987                           ;psect for function _wait_ms
 10988  1F93                     _wait_ms:	
 10989                           
 10990                           ;system.c: 25: long timemsl = 0;
 10991                           
 10992                           ;incstack = 0
 10993                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10994  1F93  3000               	movlw	0
 10995  1F94  0020               	movlb	0	; select bank0
 10996  1F95  00B3               	movwf	wait_ms@timemsl+3
 10997  1F96  3000               	movlw	0
 10998  1F97  00B2               	movwf	wait_ms@timemsl+2
 10999  1F98  3000               	movlw	0
 11000  1F99  00B1               	movwf	wait_ms@timemsl+1
 11001  1F9A  3000               	movlw	0
 11002  1F9B  00B0               	movwf	wait_ms@timemsl
 11003                           
 11004                           ;system.c: 26: timemsl = timeSec * 1000l;
 11005  1F9C  082E               	movf	wait_ms@timeSec,w
 11006  1F9D  00A2               	movwf	___lmul@multiplier
 11007  1F9E  082F               	movf	wait_ms@timeSec+1,w
 11008  1F9F  00A3               	movwf	___lmul@multiplier+1
 11009  1FA0  01A4               	clrf	___lmul@multiplier+2
 11010  1FA1  01A5               	clrf	___lmul@multiplier+3
 11011  1FA2  3000               	movlw	0
 11012  1FA3  00A9               	movwf	___lmul@multiplicand+3
 11013  1FA4  3000               	movlw	0
 11014  1FA5  00A8               	movwf	___lmul@multiplicand+2
 11015  1FA6  3003               	movlw	3
 11016  1FA7  00A7               	movwf	___lmul@multiplicand+1
 11017  1FA8  30E8               	movlw	232
 11018  1FA9  00A6               	movwf	___lmul@multiplicand
 11019  1FAA  319F  2763  319F   	fcall	___lmul
 11020  1FAD  0020               	movlb	0	; select bank0
 11021  1FAE  0825               	movf	?___lmul+3,w
 11022  1FAF  00B3               	movwf	wait_ms@timemsl+3
 11023  1FB0  0824               	movf	?___lmul+2,w
 11024  1FB1  00B2               	movwf	wait_ms@timemsl+2
 11025  1FB2  0823               	movf	?___lmul+1,w
 11026  1FB3  00B1               	movwf	wait_ms@timemsl+1
 11027  1FB4  0822               	movf	?___lmul,w
 11028  1FB5  00B0               	movwf	wait_ms@timemsl
 11029  1FB6                     l346:	
 11030                           ;system.c: 27: for( ; timemsl; timemsl--);
 11031                           
 11032  1FB6  0833               	movf	wait_ms@timemsl+3,w
 11033  1FB7  0432               	iorwf	wait_ms@timemsl+2,w
 11034  1FB8  0431               	iorwf	wait_ms@timemsl+1,w
 11035  1FB9  0430               	iorwf	wait_ms@timemsl,w
 11036  1FBA  1903               	btfsc	3,2
 11037  1FBB  0008               	return
 11038  1FBC  30FF               	movlw	255
 11039  1FBD  07B0               	addwf	wait_ms@timemsl,f
 11040  1FBE  30FF               	movlw	255
 11041  1FBF  3DB1               	addwfc	wait_ms@timemsl+1,f
 11042  1FC0  30FF               	movlw	255
 11043  1FC1  3DB2               	addwfc	wait_ms@timemsl+2,f
 11044  1FC2  30FF               	movlw	255
 11045  1FC3  3DB3               	addwfc	wait_ms@timemsl+3,f
 11046  1FC4  2FB6               	goto	l346
 11047  1FC5                     __end_of_wait_ms:	
 11048                           
 11049                           	psect	text27
 11050  1F63                     __ptext27:	
 11051 ;; *************** function ___lmul *****************
 11052 ;; Defined at:
 11053 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11054 ;; Parameters:    Size  Location     Type
 11055 ;;  multiplier      4    2[BANK0 ] unsigned long 
 11056 ;;  multiplicand    4    6[BANK0 ] unsigned long 
 11057 ;; Auto vars:     Size  Location     Type
 11058 ;;  product         4   10[BANK0 ] unsigned long 
 11059 ;; Return value:  Size  Location     Type
 11060 ;;                  4    2[BANK0 ] unsigned long 
 11061 ;; Registers used:
 11062 ;;		wreg, status,2, status,0
 11063 ;; Tracked objects:
 11064 ;;		On entry : 0/0
 11065 ;;		On exit  : 0/0
 11066 ;;		Unchanged: 0/0
 11067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11068 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11069 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11071 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11072 ;;Total ram usage:       12 bytes
 11073 ;; Hardware stack levels used:    1
 11074 ;; Hardware stack levels required when called:    2
 11075 ;; This function calls:
 11076 ;;		Nothing
 11077 ;; This function is called by:
 11078 ;;		_wait_ms
 11079 ;;		_modulation
 11080 ;; This function uses a non-reentrant model
 11081 ;;
 11082                           
 11083                           
 11084                           ;psect for function ___lmul
 11085  1F63                     ___lmul:	
 11086                           
 11087                           ;incstack = 0
 11088                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11089  1F63  3000               	movlw	0
 11090  1F64  0020               	movlb	0	; select bank0
 11091  1F65  00AD               	movwf	___lmul@product+3
 11092  1F66  3000               	movlw	0
 11093  1F67  00AC               	movwf	___lmul@product+2
 11094  1F68  3000               	movlw	0
 11095  1F69  00AB               	movwf	___lmul@product+1
 11096  1F6A  3000               	movlw	0
 11097  1F6B  00AA               	movwf	___lmul@product
 11098  1F6C                     l4766:	
 11099  1F6C  1C22               	btfss	___lmul@multiplier,0
 11100  1F6D  2F76               	goto	l4770
 11101  1F6E  0826               	movf	___lmul@multiplicand,w
 11102  1F6F  07AA               	addwf	___lmul@product,f
 11103  1F70  0827               	movf	___lmul@multiplicand+1,w
 11104  1F71  3DAB               	addwfc	___lmul@product+1,f
 11105  1F72  0828               	movf	___lmul@multiplicand+2,w
 11106  1F73  3DAC               	addwfc	___lmul@product+2,f
 11107  1F74  0829               	movf	___lmul@multiplicand+3,w
 11108  1F75  3DAD               	addwfc	___lmul@product+3,f
 11109  1F76                     l4770:	
 11110  1F76  3001               	movlw	1
 11111  1F77                     u4725:	
 11112  1F77  35A6               	lslf	___lmul@multiplicand,f
 11113  1F78  0DA7               	rlf	___lmul@multiplicand+1,f
 11114  1F79  0DA8               	rlf	___lmul@multiplicand+2,f
 11115  1F7A  0DA9               	rlf	___lmul@multiplicand+3,f
 11116  1F7B  0B89               	decfsz	9,f
 11117  1F7C  2F77               	goto	u4725
 11118  1F7D  3001               	movlw	1
 11119  1F7E                     u4735:	
 11120  1F7E  36A5               	lsrf	___lmul@multiplier+3,f
 11121  1F7F  0CA4               	rrf	___lmul@multiplier+2,f
 11122  1F80  0CA3               	rrf	___lmul@multiplier+1,f
 11123  1F81  0CA2               	rrf	___lmul@multiplier,f
 11124  1F82  0B89               	decfsz	9,f
 11125  1F83  2F7E               	goto	u4735
 11126  1F84  0825               	movf	___lmul@multiplier+3,w
 11127  1F85  0424               	iorwf	___lmul@multiplier+2,w
 11128  1F86  0423               	iorwf	___lmul@multiplier+1,w
 11129  1F87  0422               	iorwf	___lmul@multiplier,w
 11130  1F88  1D03               	skipz
 11131  1F89  2F6C               	goto	l4766
 11132  1F8A  082D               	movf	___lmul@product+3,w
 11133  1F8B  00A5               	movwf	?___lmul+3
 11134  1F8C  082C               	movf	___lmul@product+2,w
 11135  1F8D  00A4               	movwf	?___lmul+2
 11136  1F8E  082B               	movf	___lmul@product+1,w
 11137  1F8F  00A3               	movwf	?___lmul+1
 11138  1F90  082A               	movf	___lmul@product,w
 11139  1F91  00A2               	movwf	?___lmul
 11140  1F92  0008               	return
 11141  1F93                     __end_of___lmul:	
 11142                           
 11143                           	psect	text28
 11144  0002                     __ptext28:	
 11145 ;; *************** function _updateSwitchBypassState *****************
 11146 ;; Defined at:
 11147 ;;		line 96 in file "state_manager.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;  state           2    2[BANK0 ] int 
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		None
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11161 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11164 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11165 ;;Total ram usage:        2 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; Hardware stack levels required when called:    2
 11168 ;; This function calls:
 11169 ;;		Nothing
 11170 ;; This function is called by:
 11171 ;;		_setSwitchBypassState
 11172 ;; This function uses a non-reentrant model
 11173 ;;
 11174                           
 11175                           
 11176                           ;psect for function _updateSwitchBypassState
 11177  0002                     _updateSwitchBypassState:	
 11178                           
 11179                           ;incstack = 0
 11180                           ; Regs used in _updateSwitchBypassState: []
 11181  0002  0008               	return
 11182  0003                     __end_of_updateSwitchBypassState:	
 11183                           
 11184                           	psect	text29
 11185  1DCA                     __ptext29:	
 11186 ;; *************** function _getSwitchBypassState *****************
 11187 ;; Defined at:
 11188 ;;		line 103 in file "state_manager.c"
 11189 ;; Parameters:    Size  Location     Type
 11190 ;;		None
 11191 ;; Auto vars:     Size  Location     Type
 11192 ;;		None
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  2    2[BANK0 ] int 
 11195 ;; Registers used:
 11196 ;;		status,2
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11202 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11205 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11206 ;;Total ram usage:        2 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    2
 11209 ;; This function calls:
 11210 ;;		Nothing
 11211 ;; This function is called by:
 11212 ;;		_initSwitchBypass
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           
 11217                           ;psect for function _getSwitchBypassState
 11218  1DCA                     _getSwitchBypassState:	
 11219                           
 11220                           ;state_manager.c: 108: return 0;
 11221                           
 11222                           ;incstack = 0
 11223                           ; Regs used in _getSwitchBypassState: [status,2]
 11224  1DCA  0020               	movlb	0	; select bank0
 11225  1DCB  01A2               	clrf	?_getSwitchBypassState
 11226  1DCC  01A3               	clrf	?_getSwitchBypassState+1
 11227  1DCD  0008               	return
 11228  1DCE                     __end_of_getSwitchBypassState:	
 11229                           
 11230                           	psect	text30
 11231  1003                     __ptext30:	
 11232 ;; *************** function _adc_convert *****************
 11233 ;; Defined at:
 11234 ;;		line 116 in file "user.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;  channel         1    wreg     unsigned char 
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;  channel         1    5[BANK0 ] unsigned char 
 11239 ;; Return value:  Size  Location     Type
 11240 ;;                  2    2[BANK0 ] unsigned int 
 11241 ;; Registers used:
 11242 ;;		wreg, status,2, status,0
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11248 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11251 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11252 ;;Total ram usage:        4 bytes
 11253 ;; Hardware stack levels used:    1
 11254 ;; Hardware stack levels required when called:    2
 11255 ;; This function calls:
 11256 ;;		Nothing
 11257 ;; This function is called by:
 11258 ;;		_main
 11259 ;; This function uses a non-reentrant model
 11260 ;;
 11261                           
 11262                           
 11263                           ;psect for function _adc_convert
 11264  1003                     _adc_convert:	
 11265                           
 11266                           ;incstack = 0
 11267                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11268                           ;adc_convert@channel stored from wreg
 11269  1003  0020               	movlb	0	; select bank0
 11270  1004  00A5               	movwf	adc_convert@channel
 11271                           
 11272                           ;user.c: 117: ADCON0bits.CHS = channel;
 11273  1005  0825               	movf	adc_convert@channel,w
 11274  1006  00A4               	movwf	??_adc_convert
 11275  1007  0DA4               	rlf	??_adc_convert,f
 11276  1008  0DA4               	rlf	??_adc_convert,f
 11277  1009  0021               	movlb	1	; select bank1
 11278  100A  081D               	movf	29,w	;volatile
 11279  100B  0020               	movlb	0	; select bank0
 11280  100C  0624               	xorwf	??_adc_convert,w
 11281  100D  3983               	andlw	-125
 11282  100E  0624               	xorwf	??_adc_convert,w
 11283  100F  0021               	movlb	1	; select bank1
 11284  1010  009D               	movwf	29	;volatile
 11285                           
 11286                           ;user.c: 118: ADCON0bits.GO = 0b1;
 11287  1011  149D               	bsf	29,1	;volatile
 11288  1012                     l528:	
 11289                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 11290                           
 11291  1012  189D               	btfsc	29,1	;volatile
 11292  1013  2812               	goto	l528
 11293                           
 11294                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 11295  1014  081C               	movf	28,w	;volatile
 11296  1015  0020               	movlb	0	; select bank0
 11297  1016  00A3               	movwf	?_adc_convert+1
 11298  1017  0021               	movlb	1	; select bank1
 11299  1018  081B               	movf	27,w	;volatile
 11300  1019  0020               	movlb	0	; select bank0
 11301  101A  00A2               	movwf	?_adc_convert
 11302  101B  0008               	return
 11303  101C                     __end_of_adc_convert:	
 11304                           
 11305                           	psect	text31
 11306  13D6                     __ptext31:	
 11307 ;; *************** function ___awdiv *****************
 11308 ;; Defined at:
 11309 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11310 ;; Parameters:    Size  Location     Type
 11311 ;;  divisor         2    2[BANK0 ] int 
 11312 ;;  dividend        2    4[BANK0 ] int 
 11313 ;; Auto vars:     Size  Location     Type
 11314 ;;  quotient        2    9[BANK0 ] int 
 11315 ;;  sign            1    8[BANK0 ] unsigned char 
 11316 ;;  counter         1    7[BANK0 ] unsigned char 
 11317 ;; Return value:  Size  Location     Type
 11318 ;;                  2    2[BANK0 ] int 
 11319 ;; Registers used:
 11320 ;;		wreg, status,2, status,0
 11321 ;; Tracked objects:
 11322 ;;		On entry : 0/0
 11323 ;;		On exit  : 0/0
 11324 ;;		Unchanged: 0/0
 11325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11326 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11327 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11329 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11330 ;;Total ram usage:        9 bytes
 11331 ;; Hardware stack levels used:    1
 11332 ;; Hardware stack levels required when called:    2
 11333 ;; This function calls:
 11334 ;;		Nothing
 11335 ;; This function is called by:
 11336 ;;		_main
 11337 ;; This function uses a non-reentrant model
 11338 ;;
 11339                           
 11340                           
 11341                           ;psect for function ___awdiv
 11342  13D6                     ___awdiv:	
 11343                           
 11344                           ;incstack = 0
 11345                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11346  13D6  0020               	movlb	0	; select bank0
 11347  13D7  01A8               	clrf	___awdiv@sign
 11348  13D8  1FA3               	btfss	___awdiv@divisor+1,7
 11349  13D9  2BE1               	goto	l5680
 11350  13DA  09A2               	comf	___awdiv@divisor,f
 11351  13DB  09A3               	comf	___awdiv@divisor+1,f
 11352  13DC  0AA2               	incf	___awdiv@divisor,f
 11353  13DD  1903               	skipnz
 11354  13DE  0AA3               	incf	___awdiv@divisor+1,f
 11355  13DF  01A8               	clrf	___awdiv@sign
 11356  13E0  0AA8               	incf	___awdiv@sign,f
 11357  13E1                     l5680:	
 11358  13E1  1FA5               	btfss	___awdiv@dividend+1,7
 11359  13E2  2BEC               	goto	l5686
 11360  13E3  09A4               	comf	___awdiv@dividend,f
 11361  13E4  09A5               	comf	___awdiv@dividend+1,f
 11362  13E5  0AA4               	incf	___awdiv@dividend,f
 11363  13E6  1903               	skipnz
 11364  13E7  0AA5               	incf	___awdiv@dividend+1,f
 11365  13E8  3001               	movlw	1
 11366  13E9  00A6               	movwf	??___awdiv
 11367  13EA  0826               	movf	??___awdiv,w
 11368  13EB  06A8               	xorwf	___awdiv@sign,f
 11369  13EC                     l5686:	
 11370  13EC  01A9               	clrf	___awdiv@quotient
 11371  13ED  01AA               	clrf	___awdiv@quotient+1
 11372  13EE  0822               	movf	___awdiv@divisor,w
 11373  13EF  0423               	iorwf	___awdiv@divisor+1,w
 11374  13F0  1903               	btfsc	3,2
 11375  13F1  2C1B               	goto	l5708
 11376  13F2  01A7               	clrf	___awdiv@counter
 11377  13F3  0AA7               	incf	___awdiv@counter,f
 11378  13F4                     l5696:	
 11379  13F4  1BA3               	btfsc	___awdiv@divisor+1,7
 11380  13F5  2C00               	goto	l5698
 11381  13F6  3001               	movlw	1
 11382  13F7                     u6415:	
 11383  13F7  35A2               	lslf	___awdiv@divisor,f
 11384  13F8  0DA3               	rlf	___awdiv@divisor+1,f
 11385  13F9  0B89               	decfsz	9,f
 11386  13FA  2BF7               	goto	u6415
 11387  13FB  3001               	movlw	1
 11388  13FC  00A6               	movwf	??___awdiv
 11389  13FD  0826               	movf	??___awdiv,w
 11390  13FE  07A7               	addwf	___awdiv@counter,f
 11391  13FF  2BF4               	goto	l5696
 11392  1400                     l5698:	
 11393  1400  3001               	movlw	1
 11394  1401                     u6435:	
 11395  1401  35A9               	lslf	___awdiv@quotient,f
 11396  1402  0DAA               	rlf	___awdiv@quotient+1,f
 11397  1403  0B89               	decfsz	9,f
 11398  1404  2C01               	goto	u6435
 11399  1405  0823               	movf	___awdiv@divisor+1,w
 11400  1406  0225               	subwf	___awdiv@dividend+1,w
 11401  1407  1D03               	skipz
 11402  1408  2C0B               	goto	u6445
 11403  1409  0822               	movf	___awdiv@divisor,w
 11404  140A  0224               	subwf	___awdiv@dividend,w
 11405  140B                     u6445:	
 11406  140B  1C03               	skipc
 11407  140C  2C12               	goto	l5704
 11408  140D  0822               	movf	___awdiv@divisor,w
 11409  140E  02A4               	subwf	___awdiv@dividend,f
 11410  140F  0823               	movf	___awdiv@divisor+1,w
 11411  1410  3BA5               	subwfb	___awdiv@dividend+1,f
 11412  1411  1429               	bsf	___awdiv@quotient,0
 11413  1412                     l5704:	
 11414  1412  3001               	movlw	1
 11415  1413                     u6455:	
 11416  1413  36A3               	lsrf	___awdiv@divisor+1,f
 11417  1414  0CA2               	rrf	___awdiv@divisor,f
 11418  1415  0B89               	decfsz	9,f
 11419  1416  2C13               	goto	u6455
 11420  1417  3001               	movlw	1
 11421  1418  02A7               	subwf	___awdiv@counter,f
 11422  1419  1D03               	btfss	3,2
 11423  141A  2C00               	goto	l5698
 11424  141B                     l5708:	
 11425  141B  0828               	movf	___awdiv@sign,w
 11426  141C  1903               	btfsc	3,2
 11427  141D  2C23               	goto	l5712
 11428  141E  09A9               	comf	___awdiv@quotient,f
 11429  141F  09AA               	comf	___awdiv@quotient+1,f
 11430  1420  0AA9               	incf	___awdiv@quotient,f
 11431  1421  1903               	skipnz
 11432  1422  0AAA               	incf	___awdiv@quotient+1,f
 11433  1423                     l5712:	
 11434  1423  082A               	movf	___awdiv@quotient+1,w
 11435  1424  00A3               	movwf	?___awdiv+1
 11436  1425  0829               	movf	___awdiv@quotient,w
 11437  1426  00A2               	movwf	?___awdiv
 11438  1427  0008               	return
 11439  1428                     __end_of___awdiv:	
 11440                           
 11441                           	psect	text32
 11442  101C                     __ptext32:	
 11443 ;; *************** function ___altoft *****************
 11444 ;; Defined at:
 11445 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;  c               4   10[BANK0 ] long 
 11448 ;; Auto vars:     Size  Location     Type
 11449 ;;  sign            1   17[BANK0 ] unsigned char 
 11450 ;;  exp             1   16[BANK0 ] unsigned char 
 11451 ;; Return value:  Size  Location     Type
 11452 ;;                  3   10[BANK0 ] float 
 11453 ;; Registers used:
 11454 ;;		wreg, status,2, status,0, pclath, cstack
 11455 ;; Tracked objects:
 11456 ;;		On entry : 0/0
 11457 ;;		On exit  : 0/0
 11458 ;;		Unchanged: 0/0
 11459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11460 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11461 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11462 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11463 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11464 ;;Total ram usage:        8 bytes
 11465 ;; Hardware stack levels used:    1
 11466 ;; Hardware stack levels required when called:    3
 11467 ;; This function calls:
 11468 ;;		___ftpack
 11469 ;; This function is called by:
 11470 ;;		_main
 11471 ;; This function uses a non-reentrant model
 11472 ;;
 11473                           
 11474                           
 11475                           ;psect for function ___altoft
 11476  101C                     ___altoft:	
 11477                           
 11478                           ;incstack = 0
 11479                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11480  101C  0020               	movlb	0	; select bank0
 11481  101D  01B1               	clrf	___altoft@sign
 11482  101E  308E               	movlw	142
 11483  101F  00AE               	movwf	??___altoft
 11484  1020  082E               	movf	??___altoft,w
 11485  1021  00B0               	movwf	___altoft@exp
 11486  1022  1FAD               	btfss	___altoft@c+3,7
 11487  1023  2831               	goto	l5666
 11488  1024  09AA               	comf	___altoft@c,f
 11489  1025  09AB               	comf	___altoft@c+1,f
 11490  1026  09AC               	comf	___altoft@c+2,f
 11491  1027  09AD               	comf	___altoft@c+3,f
 11492  1028  0AAA               	incf	___altoft@c,f
 11493  1029  1903               	skipnz
 11494  102A  0AAB               	incf	___altoft@c+1,f
 11495  102B  1903               	skipnz
 11496  102C  0AAC               	incf	___altoft@c+2,f
 11497  102D  1903               	skipnz
 11498  102E  0AAD               	incf	___altoft@c+3,f
 11499  102F  01B1               	clrf	___altoft@sign
 11500  1030  0AB1               	incf	___altoft@sign,f
 11501  1031                     l5666:	
 11502  1031  30FF               	movlw	255
 11503  1032  052D               	andwf	___altoft@c+3,w
 11504  1033  1903               	btfsc	3,2
 11505  1034  2841               	goto	l5668
 11506  1035  3001               	movlw	1
 11507  1036                     u6365:	
 11508  1036  36AD               	lsrf	___altoft@c+3,f
 11509  1037  0CAC               	rrf	___altoft@c+2,f
 11510  1038  0CAB               	rrf	___altoft@c+1,f
 11511  1039  0CAA               	rrf	___altoft@c,f
 11512  103A  0B89               	decfsz	9,f
 11513  103B  2836               	goto	u6365
 11514  103C  3001               	movlw	1
 11515  103D  00AE               	movwf	??___altoft
 11516  103E  082E               	movf	??___altoft,w
 11517  103F  07B0               	addwf	___altoft@exp,f
 11518  1040  2831               	goto	l5666
 11519  1041                     l5668:	
 11520  1041  082A               	movf	___altoft@c,w
 11521  1042  00A2               	movwf	___ftpack@arg
 11522  1043  082B               	movf	___altoft@c+1,w
 11523  1044  00A3               	movwf	___ftpack@arg+1
 11524  1045  082C               	movf	___altoft@c+2,w
 11525  1046  00A4               	movwf	___ftpack@arg+2
 11526  1047  0830               	movf	___altoft@exp,w
 11527  1048  00AE               	movwf	??___altoft
 11528  1049  082E               	movf	??___altoft,w
 11529  104A  00A5               	movwf	___ftpack@exp
 11530  104B  0831               	movf	___altoft@sign,w
 11531  104C  00AF               	movwf	??___altoft+1
 11532  104D  082F               	movf	??___altoft+1,w
 11533  104E  00A6               	movwf	___ftpack@sign
 11534  104F  3194  247C         	fcall	___ftpack
 11535  1051  0020               	movlb	0	; select bank0
 11536  1052  0822               	movf	?___ftpack,w
 11537  1053  00AA               	movwf	?___altoft
 11538  1054  0823               	movf	?___ftpack+1,w
 11539  1055  00AB               	movwf	?___altoft+1
 11540  1056  0824               	movf	?___ftpack+2,w
 11541  1057  00AC               	movwf	?___altoft+2
 11542  1058  0008               	return
 11543  1059                     __end_of___altoft:	
 11544                           
 11545                           	psect	text33
 11546  147C                     __ptext33:	
 11547 ;; *************** function ___ftpack *****************
 11548 ;; Defined at:
 11549 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11550 ;; Parameters:    Size  Location     Type
 11551 ;;  arg             3    2[BANK0 ] unsigned um
 11552 ;;  exp             1    5[BANK0 ] unsigned char 
 11553 ;;  sign            1    6[BANK0 ] unsigned char 
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;		None
 11556 ;; Return value:  Size  Location     Type
 11557 ;;                  3    2[BANK0 ] float 
 11558 ;; Registers used:
 11559 ;;		wreg, status,2, status,0
 11560 ;; Tracked objects:
 11561 ;;		On entry : 0/0
 11562 ;;		On exit  : 0/0
 11563 ;;		Unchanged: 0/0
 11564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11565 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11567 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11568 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11569 ;;Total ram usage:        8 bytes
 11570 ;; Hardware stack levels used:    1
 11571 ;; Hardware stack levels required when called:    2
 11572 ;; This function calls:
 11573 ;;		Nothing
 11574 ;; This function is called by:
 11575 ;;		___altoft
 11576 ;;		___awtoft
 11577 ;;		___ftadd
 11578 ;;		___ftdiv
 11579 ;;		___ftmul
 11580 ;; This function uses a non-reentrant model
 11581 ;;
 11582                           
 11583                           
 11584                           ;psect for function ___ftpack
 11585  147C                     ___ftpack:	
 11586                           
 11587                           ;incstack = 0
 11588                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11589  147C  0020               	movlb	0	; select bank0
 11590  147D  0825               	movf	___ftpack@exp,w
 11591  147E  1903               	btfsc	3,2
 11592  147F  2C85               	goto	l4826
 11593  1480  0824               	movf	___ftpack@arg+2,w
 11594  1481  0423               	iorwf	___ftpack@arg+1,w
 11595  1482  0422               	iorwf	___ftpack@arg,w
 11596  1483  1D03               	skipz
 11597  1484  2C96               	goto	l4832
 11598  1485                     l4826:	
 11599  1485  3000               	movlw	0
 11600  1486  00A2               	movwf	?___ftpack
 11601  1487  3000               	movlw	0
 11602  1488  00A3               	movwf	?___ftpack+1
 11603  1489  3000               	movlw	0
 11604  148A  00A4               	movwf	?___ftpack+2
 11605  148B  0008               	return
 11606  148C                     l4830:	
 11607  148C  3001               	movlw	1
 11608  148D  00A7               	movwf	??___ftpack
 11609  148E  0827               	movf	??___ftpack,w
 11610  148F  07A5               	addwf	___ftpack@exp,f
 11611  1490  3001               	movlw	1
 11612  1491                     u4785:	
 11613  1491  36A4               	lsrf	___ftpack@arg+2,f
 11614  1492  0CA3               	rrf	___ftpack@arg+1,f
 11615  1493  0CA2               	rrf	___ftpack@arg,f
 11616  1494  0B89               	decfsz	9,f
 11617  1495  2C91               	goto	u4785
 11618  1496                     l4832:	
 11619  1496  30FE               	movlw	254
 11620  1497  0524               	andwf	___ftpack@arg+2,w
 11621  1498  1903               	btfsc	3,2
 11622  1499  2CAF               	goto	l1481
 11623  149A  2C8C               	goto	l4830
 11624  149B                     l4834:	
 11625  149B  3001               	movlw	1
 11626  149C  00A7               	movwf	??___ftpack
 11627  149D  0827               	movf	??___ftpack,w
 11628  149E  07A5               	addwf	___ftpack@exp,f
 11629  149F  3001               	movlw	1
 11630  14A0  07A2               	addwf	___ftpack@arg,f
 11631  14A1  3000               	movlw	0
 11632  14A2  1803               	skipnc
 11633  14A3  3001               	movlw	1
 11634  14A4  07A3               	addwf	___ftpack@arg+1,f
 11635  14A5  3000               	movlw	0
 11636  14A6  1803               	skipnc
 11637  14A7  3001               	movlw	1
 11638  14A8  07A4               	addwf	___ftpack@arg+2,f
 11639  14A9  3001               	movlw	1
 11640  14AA                     u4805:	
 11641  14AA  36A4               	lsrf	___ftpack@arg+2,f
 11642  14AB  0CA3               	rrf	___ftpack@arg+1,f
 11643  14AC  0CA2               	rrf	___ftpack@arg,f
 11644  14AD  0B89               	decfsz	9,f
 11645  14AE  2CAA               	goto	u4805
 11646  14AF                     l1481:	
 11647  14AF  30FF               	movlw	255
 11648  14B0  0524               	andwf	___ftpack@arg+2,w
 11649  14B1  1903               	btfsc	3,2
 11650  14B2  2CBC               	goto	l4842
 11651  14B3  2C9B               	goto	l4834
 11652  14B4                     l4840:	
 11653  14B4  3001               	movlw	1
 11654  14B5  02A5               	subwf	___ftpack@exp,f
 11655  14B6  3001               	movlw	1
 11656  14B7                     u4825:	
 11657  14B7  35A2               	lslf	___ftpack@arg,f
 11658  14B8  0DA3               	rlf	___ftpack@arg+1,f
 11659  14B9  0DA4               	rlf	___ftpack@arg+2,f
 11660  14BA  0B89               	decfsz	9,f
 11661  14BB  2CB7               	goto	u4825
 11662  14BC                     l4842:	
 11663  14BC  1BA3               	btfsc	___ftpack@arg+1,7
 11664  14BD  2CC2               	goto	l1488
 11665  14BE  3002               	movlw	2
 11666  14BF  0225               	subwf	___ftpack@exp,w
 11667  14C0  1803               	skipnc
 11668  14C1  2CB4               	goto	l4840
 11669  14C2                     l1488:	
 11670  14C2  1825               	btfsc	___ftpack@exp,0
 11671  14C3  2CCA               	goto	l1489
 11672  14C4  30FF               	movlw	255
 11673  14C5  05A2               	andwf	___ftpack@arg,f
 11674  14C6  307F               	movlw	127
 11675  14C7  05A3               	andwf	___ftpack@arg+1,f
 11676  14C8  30FF               	movlw	255
 11677  14C9  05A4               	andwf	___ftpack@arg+2,f
 11678  14CA                     l1489:	
 11679  14CA  1003               	clrc
 11680  14CB  0CA5               	rrf	___ftpack@exp,f
 11681  14CC  0825               	movf	___ftpack@exp,w
 11682  14CD  00A7               	movwf	??___ftpack
 11683  14CE  01A8               	clrf	??___ftpack+1
 11684  14CF  01A9               	clrf	??___ftpack+2
 11685  14D0  3010               	movlw	16
 11686  14D1                     u4865:	
 11687  14D1  35A7               	lslf	??___ftpack,f
 11688  14D2  0DA8               	rlf	??___ftpack+1,f
 11689  14D3  0DA9               	rlf	??___ftpack+2,f
 11690  14D4  0B89               	decfsz	9,f
 11691  14D5  2CD1               	goto	u4865
 11692  14D6  0827               	movf	??___ftpack,w
 11693  14D7  04A2               	iorwf	___ftpack@arg,f
 11694  14D8  0828               	movf	??___ftpack+1,w
 11695  14D9  04A3               	iorwf	___ftpack@arg+1,f
 11696  14DA  0829               	movf	??___ftpack+2,w
 11697  14DB  04A4               	iorwf	___ftpack@arg+2,f
 11698  14DC  0826               	movf	___ftpack@sign,w
 11699  14DD  1903               	btfsc	3,2
 11700  14DE  0008               	return
 11701  14DF  17A4               	bsf	___ftpack@arg+2,7
 11702  14E0  0008               	return
 11703  14E1                     __end_of___ftpack:	
 11704                           
 11705                           	psect	text34
 11706  1550                     __ptext34:	
 11707 ;; *************** function _ReadSavedSettings *****************
 11708 ;; Defined at:
 11709 ;;		line 193 in file "user.c"
 11710 ;; Parameters:    Size  Location     Type
 11711 ;;		None
 11712 ;; Auto vars:     Size  Location     Type
 11713 ;;		None
 11714 ;; Return value:  Size  Location     Type
 11715 ;;                  1    wreg      void 
 11716 ;; Registers used:
 11717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11726 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11727 ;;Total ram usage:        1 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    3
 11730 ;; This function calls:
 11731 ;;		_FLASH_ReadWord
 11732 ;;		_set_leds_bottom
 11733 ;;		_set_leds_top
 11734 ;; This function is called by:
 11735 ;;		_main
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function _ReadSavedSettings
 11741  1550                     _ReadSavedSettings:	
 11742                           
 11743                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11744                           
 11745                           ;incstack = 0
 11746                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11747  1550  3081               	movlw	129
 11748  1551  0020               	movlb	0	; select bank0
 11749  1552  00A2               	movwf	FLASH_ReadWord@flashAddr
 11750  1553  301F               	movlw	31
 11751  1554  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11752  1555  319E  2695  3195   	fcall	_FLASH_ReadWord
 11753  1558  0020               	movlb	0	; select bank0
 11754  1559  0823               	movf	?_FLASH_ReadWord+1,w
 11755  155A  0021               	movlb	1	; select bank1
 11756  155B  00DC               	movwf	(_top_push_state+1)^(0+128)
 11757  155C  0020               	movlb	0	; select bank0
 11758  155D  0822               	movf	?_FLASH_ReadWord,w
 11759  155E  0021               	movlb	1	; select bank1
 11760  155F  00DB               	movwf	_top_push_state^(0+128)
 11761                           
 11762                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 11763  1560  3082               	movlw	130
 11764  1561  0020               	movlb	0	; select bank0
 11765  1562  00A2               	movwf	FLASH_ReadWord@flashAddr
 11766  1563  301F               	movlw	31
 11767  1564  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11768  1565  319E  2695  3195   	fcall	_FLASH_ReadWord
 11769  1568  0020               	movlb	0	; select bank0
 11770  1569  0823               	movf	?_FLASH_ReadWord+1,w
 11771  156A  0021               	movlb	1	; select bank1
 11772  156B  00D2               	movwf	(_bottom_push_state+1)^(0+128)
 11773  156C  0020               	movlb	0	; select bank0
 11774  156D  0822               	movf	?_FLASH_ReadWord,w
 11775  156E  0021               	movlb	1	; select bank1
 11776  156F  00D1               	movwf	_bottom_push_state^(0+128)
 11777                           
 11778                           ;user.c: 198: if (top_push_state > 6) {
 11779  1570  085C               	movf	(_top_push_state+1)^(0+128),w
 11780  1571  3A80               	xorlw	128
 11781  1572  0020               	movlb	0	; select bank0
 11782  1573  00A6               	movwf	??_ReadSavedSettings
 11783  1574  3080               	movlw	128
 11784  1575  0226               	subwf	??_ReadSavedSettings,w
 11785  1576  1D03               	skipz
 11786  1577  2D7B               	goto	u5685
 11787  1578  3007               	movlw	7
 11788  1579  0021               	movlb	1	; select bank1
 11789  157A  025B               	subwf	_top_push_state^(0+128),w
 11790  157B                     u5685:	
 11791  157B  1C03               	skipc
 11792  157C  2D82               	goto	l557
 11793                           
 11794                           ;user.c: 200: top_push_state = 6;
 11795  157D  3006               	movlw	6
 11796  157E  0021               	movlb	1	; select bank1
 11797  157F  00DB               	movwf	_top_push_state^(0+128)
 11798  1580  3000               	movlw	0
 11799  1581  00DC               	movwf	(_top_push_state^(0+128)+1)
 11800  1582                     l557:	
 11801                           
 11802                           ;user.c: 201: }
 11803                           ;user.c: 202: if (bottom_push_state > 6) {
 11804  1582  0021               	movlb	1	; select bank1
 11805  1583  0852               	movf	(_bottom_push_state+1)^(0+128),w
 11806  1584  3A80               	xorlw	128
 11807  1585  0020               	movlb	0	; select bank0
 11808  1586  00A6               	movwf	??_ReadSavedSettings
 11809  1587  3080               	movlw	128
 11810  1588  0226               	subwf	??_ReadSavedSettings,w
 11811  1589  1D03               	skipz
 11812  158A  2D8E               	goto	u5695
 11813  158B  3007               	movlw	7
 11814  158C  0021               	movlb	1	; select bank1
 11815  158D  0251               	subwf	_bottom_push_state^(0+128),w
 11816  158E                     u5695:	
 11817  158E  1C03               	skipc
 11818  158F  2D95               	goto	l5308
 11819                           
 11820                           ;user.c: 204: bottom_push_state = 6;
 11821  1590  3006               	movlw	6
 11822  1591  0021               	movlb	1	; select bank1
 11823  1592  00D1               	movwf	_bottom_push_state^(0+128)
 11824  1593  3000               	movlw	0
 11825  1594  00D2               	movwf	(_bottom_push_state^(0+128)+1)
 11826  1595                     l5308:	
 11827                           
 11828                           ;user.c: 205: }
 11829                           ;user.c: 208: LATGbits.LATG1 = !switchBypass_state;
 11830  1595  087D               	movf	_switchBypass_state,w
 11831  1596  1D03               	btfss	3,2
 11832  1597  2D9B               	goto	u5700
 11833  1598  0027               	movlb	7	; select bank7
 11834  1599  148D               	bsf	13,1	;volatile
 11835  159A  2D9D               	goto	l5310
 11836  159B                     u5700:	
 11837  159B  0027               	movlb	7	; select bank7
 11838  159C  108D               	bcf	13,1	;volatile
 11839  159D                     l5310:	
 11840                           
 11841                           ;user.c: 209: LATGbits.LATG2 = switchBypass_state;
 11842  159D  0C7D               	rrf	_switchBypass_state,w
 11843  159E  1C03               	skipc
 11844  159F  110D               	bcf	13,2	;volatile
 11845  15A0  1803               	skipnc
 11846  15A1  150D               	bsf	13,2	;volatile
 11847                           
 11848                           ;user.c: 210: LATBbits.LATB2 = 0;
 11849  15A2  0022               	movlb	2	; select bank2
 11850  15A3  110D               	bcf	13,2	;volatile
 11851                           
 11852                           ;user.c: 211: LATBbits.LATB3 = 0;
 11853  15A4  118D               	bcf	13,3	;volatile
 11854                           
 11855                           ;user.c: 213: LATBbits.LATB4 = 0;
 11856  15A5  120D               	bcf	13,4	;volatile
 11857                           
 11858                           ;user.c: 214: LATBbits.LATB5 = 0;
 11859  15A6  128D               	bcf	13,5	;volatile
 11860                           
 11861                           ;user.c: 216: LATBbits.LATB1 = 0;
 11862  15A7  108D               	bcf	13,1	;volatile
 11863                           
 11864                           ;user.c: 217: LATBbits.LATB0 = 0;
 11865  15A8  100D               	bcf	13,0	;volatile
 11866                           
 11867                           ;user.c: 220: set_leds_top(top_push_state, 1);
 11868  15A9  0021               	movlb	1	; select bank1
 11869  15AA  085C               	movf	(_top_push_state+1)^(0+128),w
 11870  15AB  0020               	movlb	0	; select bank0
 11871  15AC  00A3               	movwf	set_leds_top@x+1
 11872  15AD  0021               	movlb	1	; select bank1
 11873  15AE  085B               	movf	_top_push_state^(0+128),w
 11874  15AF  0020               	movlb	0	; select bank0
 11875  15B0  00A2               	movwf	set_leds_top@x
 11876  15B1  3001               	movlw	1
 11877  15B2  00A4               	movwf	set_leds_top@ledState
 11878  15B3  3000               	movlw	0
 11879  15B4  00A5               	movwf	set_leds_top@ledState+1
 11880  15B5  3194  2428  3195   	fcall	_set_leds_top
 11881                           
 11882                           ;user.c: 221: set_leds_bottom(bottom_push_state);
 11883  15B8  0021               	movlb	1	; select bank1
 11884  15B9  0852               	movf	(_bottom_push_state+1)^(0+128),w
 11885  15BA  0020               	movlb	0	; select bank0
 11886  15BB  00A3               	movwf	set_leds_bottom@x+1
 11887  15BC  0021               	movlb	1	; select bank1
 11888  15BD  0851               	movf	_bottom_push_state^(0+128),w
 11889  15BE  0020               	movlb	0	; select bank0
 11890  15BF  00A2               	movwf	set_leds_bottom@x
 11891  15C0  319F  27C5         	fcall	_set_leds_bottom
 11892  15C2  0008               	return
 11893  15C3                     __end_of_ReadSavedSettings:	
 11894                           
 11895                           	psect	text35
 11896  1428                     __ptext35:	
 11897 ;; *************** function _set_leds_top *****************
 11898 ;; Defined at:
 11899 ;;		line 16 in file "LEDs.c"
 11900 ;; Parameters:    Size  Location     Type
 11901 ;;  x               2    2[BANK0 ] int 
 11902 ;;  ledState        2    4[BANK0 ] int 
 11903 ;; Auto vars:     Size  Location     Type
 11904 ;;		None
 11905 ;; Return value:  Size  Location     Type
 11906 ;;                  1    wreg      void 
 11907 ;; Registers used:
 11908 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11909 ;; Tracked objects:
 11910 ;;		On entry : 0/0
 11911 ;;		On exit  : 0/0
 11912 ;;		Unchanged: 0/0
 11913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11914 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11917 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11918 ;;Total ram usage:        4 bytes
 11919 ;; Hardware stack levels used:    1
 11920 ;; Hardware stack levels required when called:    2
 11921 ;; This function calls:
 11922 ;;		Nothing
 11923 ;; This function is called by:
 11924 ;;		_ReadSavedSettings
 11925 ;;		_star_tactiles
 11926 ;;		_solidring_tactiles
 11927 ;;		_read_top_tactile
 11928 ;;		_ring_tactiles
 11929 ;; This function uses a non-reentrant model
 11930 ;;
 11931                           
 11932                           
 11933                           ;psect for function _set_leds_top
 11934  1428                     _set_leds_top:	
 11935                           
 11936                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11937                           
 11938                           ;incstack = 0
 11939                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11940  1428  0027               	movlb	7	; select bank7
 11941  1429  100C               	bcf	12,0	;volatile
 11942                           
 11943                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11944  142A  108C               	bcf	12,1	;volatile
 11945                           
 11946                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11947  142B  110C               	bcf	12,2	;volatile
 11948                           
 11949                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11950  142C  118C               	bcf	12,3	;volatile
 11951                           
 11952                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11953  142D  120C               	bcf	12,4	;volatile
 11954                           
 11955                           ;LEDs.c: 22: switch (x) {
 11956  142E  2C5E               	goto	l4792
 11957  142F                     l4780:	
 11958                           ;LEDs.c: 23: case 1:
 11959                           
 11960                           
 11961                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11962  142F  0020               	movlb	0	; select bank0
 11963  1430  0C24               	rrf	set_leds_top@ledState,w
 11964  1431  0027               	movlb	7	; select bank7
 11965  1432  1C03               	skipc
 11966  1433  100C               	bcf	12,0	;volatile
 11967  1434  1803               	skipnc
 11968  1435  140C               	bsf	12,0	;volatile
 11969                           
 11970                           ;LEDs.c: 25: break;
 11971  1436  0008               	return
 11972  1437                     l4782:	
 11973                           ;LEDs.c: 26: case 2:
 11974                           
 11975                           
 11976                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11977  1437  0020               	movlb	0	; select bank0
 11978  1438  0C24               	rrf	set_leds_top@ledState,w
 11979  1439  0027               	movlb	7	; select bank7
 11980  143A  1C03               	skipc
 11981  143B  108C               	bcf	12,1	;volatile
 11982  143C  1803               	skipnc
 11983  143D  148C               	bsf	12,1	;volatile
 11984                           
 11985                           ;LEDs.c: 28: break;
 11986  143E  0008               	return
 11987  143F                     l4784:	
 11988                           ;LEDs.c: 29: case 3:
 11989                           
 11990                           
 11991                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11992  143F  0020               	movlb	0	; select bank0
 11993  1440  0C24               	rrf	set_leds_top@ledState,w
 11994  1441  0027               	movlb	7	; select bank7
 11995  1442  1C03               	skipc
 11996  1443  110C               	bcf	12,2	;volatile
 11997  1444  1803               	skipnc
 11998  1445  150C               	bsf	12,2	;volatile
 11999                           
 12000                           ;LEDs.c: 31: break;
 12001  1446  0008               	return
 12002  1447                     l4786:	
 12003                           ;LEDs.c: 32: case 4:
 12004                           
 12005                           
 12006                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12007  1447  0020               	movlb	0	; select bank0
 12008  1448  0C24               	rrf	set_leds_top@ledState,w
 12009  1449  0027               	movlb	7	; select bank7
 12010  144A  1C03               	skipc
 12011  144B  118C               	bcf	12,3	;volatile
 12012  144C  1803               	skipnc
 12013  144D  158C               	bsf	12,3	;volatile
 12014                           
 12015                           ;LEDs.c: 34: break;
 12016  144E  0008               	return
 12017  144F                     l4788:	
 12018                           ;LEDs.c: 35: case 5:
 12019                           
 12020                           
 12021                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12022  144F  0020               	movlb	0	; select bank0
 12023  1450  0C24               	rrf	set_leds_top@ledState,w
 12024  1451  0027               	movlb	7	; select bank7
 12025  1452  1C03               	skipc
 12026  1453  120C               	bcf	12,4	;volatile
 12027  1454  1803               	skipnc
 12028  1455  160C               	bsf	12,4	;volatile
 12029                           
 12030                           ;LEDs.c: 39: break;
 12031                           
 12032                           ;LEDs.c: 38: case 6:
 12033                           
 12034                           ;LEDs.c: 37: break;
 12035  1456  0008               	return
 12036  1457                     l698:	
 12037                           ;LEDs.c: 40: case 100:
 12038                           
 12039                           
 12040                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12041  1457  0027               	movlb	7	; select bank7
 12042  1458  140C               	bsf	12,0	;volatile
 12043                           
 12044                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12045  1459  148C               	bsf	12,1	;volatile
 12046                           
 12047                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12048  145A  150C               	bsf	12,2	;volatile
 12049                           
 12050                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12051  145B  158C               	bsf	12,3	;volatile
 12052                           
 12053                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12054  145C  160C               	bsf	12,4	;volatile
 12055                           
 12056                           ;LEDs.c: 47: }
 12057                           
 12058                           ;LEDs.c: 46: break;
 12059  145D  0008               	return
 12060  145E                     l4792:	
 12061                           
 12062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12063                           ; Switch size 1, requested type "space"
 12064                           ; Number of cases is 1, Range of values is 0 to 0
 12065                           ; switch strategies available:
 12066                           ; Name         Instructions Cycles
 12067                           ; simple_byte            4     3 (average)
 12068                           ; direct_byte            8     6 (fixed)
 12069                           ; jumptable            260     6 (fixed)
 12070                           ;	Chosen strategy is simple_byte
 12071  145E  0020               	movlb	0	; select bank0
 12072  145F  0823               	movf	set_leds_top@x+1,w
 12073  1460  3A00               	xorlw	0	; case 0
 12074  1461  1903               	skipnz
 12075  1462  2C64               	goto	l6146
 12076  1463  2C7B               	goto	l699
 12077  1464                     l6146:	
 12078                           
 12079                           ; Switch size 1, requested type "space"
 12080                           ; Number of cases is 7, Range of values is 1 to 100
 12081                           ; switch strategies available:
 12082                           ; Name         Instructions Cycles
 12083                           ; simple_byte           22    12 (average)
 12084                           ; direct_byte          209     9 (fixed)
 12085                           ; jumptable            263     9 (fixed)
 12086                           ;	Chosen strategy is simple_byte
 12087  1464  0822               	movf	set_leds_top@x,w
 12088  1465  3A01               	xorlw	1	; case 1
 12089  1466  1903               	skipnz
 12090  1467  2C2F               	goto	l4780
 12091  1468  3A03               	xorlw	3	; case 2
 12092  1469  1903               	skipnz
 12093  146A  2C37               	goto	l4782
 12094  146B  3A01               	xorlw	1	; case 3
 12095  146C  1903               	skipnz
 12096  146D  2C3F               	goto	l4784
 12097  146E  3A07               	xorlw	7	; case 4
 12098  146F  1903               	skipnz
 12099  1470  2C47               	goto	l4786
 12100  1471  3A01               	xorlw	1	; case 5
 12101  1472  1903               	skipnz
 12102  1473  2C4F               	goto	l4788
 12103  1474  3A03               	xorlw	3	; case 6
 12104  1475  1903               	skipnz
 12105  1476  2C7B               	goto	l699
 12106  1477  3A62               	xorlw	98	; case 100
 12107  1478  1903               	skipnz
 12108  1479  2C57               	goto	l698
 12109  147A  2C7B               	goto	l699
 12110  147B                     l699:	
 12111  147B  0008               	return
 12112  147C                     __end_of_set_leds_top:	
 12113                           
 12114                           	psect	text36
 12115  1FC5                     __ptext36:	
 12116 ;; *************** function _set_leds_bottom *****************
 12117 ;; Defined at:
 12118 ;;		line 51 in file "LEDs.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;  x               2    2[BANK0 ] int 
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;		None
 12123 ;; Return value:  Size  Location     Type
 12124 ;;                  1    wreg      void 
 12125 ;; Registers used:
 12126 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12127 ;; Tracked objects:
 12128 ;;		On entry : 0/0
 12129 ;;		On exit  : 0/0
 12130 ;;		Unchanged: 0/0
 12131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12132 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12135 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12136 ;;Total ram usage:        2 bytes
 12137 ;; Hardware stack levels used:    1
 12138 ;; Hardware stack levels required when called:    2
 12139 ;; This function calls:
 12140 ;;		Nothing
 12141 ;; This function is called by:
 12142 ;;		_ReadSavedSettings
 12143 ;;		_star_tactiles
 12144 ;;		_solidring_tactiles
 12145 ;;		_read_bottom_tactile
 12146 ;;		_ring_tactiles
 12147 ;; This function uses a non-reentrant model
 12148 ;;
 12149                           
 12150                           
 12151                           ;psect for function _set_leds_bottom
 12152  1FC5                     _set_leds_bottom:	
 12153                           
 12154                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12155                           
 12156                           ;incstack = 0
 12157                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12158  1FC5  0022               	movlb	2	; select bank2
 12159  1FC6  100F               	bcf	15,0	;volatile
 12160                           
 12161                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12162  1FC7  108F               	bcf	15,1	;volatile
 12163                           
 12164                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12165  1FC8  110F               	bcf	15,2	;volatile
 12166                           
 12167                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12168  1FC9  118F               	bcf	15,3	;volatile
 12169                           
 12170                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12171  1FCA  120F               	bcf	15,4	;volatile
 12172                           
 12173                           ;LEDs.c: 57: switch (x) {
 12174  1FCB  2FE2               	goto	l4816
 12175  1FCC                     l703:	
 12176                           ;LEDs.c: 58: case 1:
 12177                           
 12178                           
 12179                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12180  1FCC  0022               	movlb	2	; select bank2
 12181  1FCD  140F               	bsf	15,0	;volatile
 12182                           
 12183                           ;LEDs.c: 60: break;
 12184  1FCE  0008               	return
 12185  1FCF                     l705:	
 12186                           ;LEDs.c: 61: case 2:
 12187                           
 12188                           
 12189                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12190  1FCF  0022               	movlb	2	; select bank2
 12191  1FD0  148F               	bsf	15,1	;volatile
 12192                           
 12193                           ;LEDs.c: 63: break;
 12194  1FD1  0008               	return
 12195  1FD2                     l706:	
 12196                           ;LEDs.c: 64: case 3:
 12197                           
 12198                           
 12199                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12200  1FD2  0022               	movlb	2	; select bank2
 12201  1FD3  150F               	bsf	15,2	;volatile
 12202                           
 12203                           ;LEDs.c: 66: break;
 12204  1FD4  0008               	return
 12205  1FD5                     l707:	
 12206                           ;LEDs.c: 67: case 4:
 12207                           
 12208                           
 12209                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12210  1FD5  0022               	movlb	2	; select bank2
 12211  1FD6  158F               	bsf	15,3	;volatile
 12212                           
 12213                           ;LEDs.c: 69: break;
 12214  1FD7  0008               	return
 12215  1FD8                     l708:	
 12216                           ;LEDs.c: 70: case 5:
 12217                           
 12218                           
 12219                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12220  1FD8  0022               	movlb	2	; select bank2
 12221  1FD9  160F               	bsf	15,4	;volatile
 12222                           
 12223                           ;LEDs.c: 74: break;
 12224                           
 12225                           ;LEDs.c: 73: case 6:
 12226                           
 12227                           ;LEDs.c: 72: break;
 12228  1FDA  0008               	return
 12229  1FDB                     l710:	
 12230                           ;LEDs.c: 75: case 100:
 12231                           
 12232                           
 12233                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12234  1FDB  0022               	movlb	2	; select bank2
 12235  1FDC  140F               	bsf	15,0	;volatile
 12236                           
 12237                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12238  1FDD  148F               	bsf	15,1	;volatile
 12239                           
 12240                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12241  1FDE  150F               	bsf	15,2	;volatile
 12242                           
 12243                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12244  1FDF  158F               	bsf	15,3	;volatile
 12245                           
 12246                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12247  1FE0  160F               	bsf	15,4	;volatile
 12248                           
 12249                           ;LEDs.c: 82: }
 12250                           
 12251                           ;LEDs.c: 81: break;
 12252  1FE1  0008               	return
 12253  1FE2                     l4816:	
 12254                           
 12255                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12256                           ; Switch size 1, requested type "space"
 12257                           ; Number of cases is 1, Range of values is 0 to 0
 12258                           ; switch strategies available:
 12259                           ; Name         Instructions Cycles
 12260                           ; simple_byte            4     3 (average)
 12261                           ; direct_byte            8     6 (fixed)
 12262                           ; jumptable            260     6 (fixed)
 12263                           ;	Chosen strategy is simple_byte
 12264  1FE2  0020               	movlb	0	; select bank0
 12265  1FE3  0823               	movf	set_leds_bottom@x+1,w
 12266  1FE4  3A00               	xorlw	0	; case 0
 12267  1FE5  1903               	skipnz
 12268  1FE6  2FE8               	goto	l6148
 12269  1FE7  2FFF               	goto	l711
 12270  1FE8                     l6148:	
 12271                           
 12272                           ; Switch size 1, requested type "space"
 12273                           ; Number of cases is 7, Range of values is 1 to 100
 12274                           ; switch strategies available:
 12275                           ; Name         Instructions Cycles
 12276                           ; simple_byte           22    12 (average)
 12277                           ; direct_byte          209     9 (fixed)
 12278                           ; jumptable            263     9 (fixed)
 12279                           ;	Chosen strategy is simple_byte
 12280  1FE8  0822               	movf	set_leds_bottom@x,w
 12281  1FE9  3A01               	xorlw	1	; case 1
 12282  1FEA  1903               	skipnz
 12283  1FEB  2FCC               	goto	l703
 12284  1FEC  3A03               	xorlw	3	; case 2
 12285  1FED  1903               	skipnz
 12286  1FEE  2FCF               	goto	l705
 12287  1FEF  3A01               	xorlw	1	; case 3
 12288  1FF0  1903               	skipnz
 12289  1FF1  2FD2               	goto	l706
 12290  1FF2  3A07               	xorlw	7	; case 4
 12291  1FF3  1903               	skipnz
 12292  1FF4  2FD5               	goto	l707
 12293  1FF5  3A01               	xorlw	1	; case 5
 12294  1FF6  1903               	skipnz
 12295  1FF7  2FD8               	goto	l708
 12296  1FF8  3A03               	xorlw	3	; case 6
 12297  1FF9  1903               	skipnz
 12298  1FFA  2FFF               	goto	l711
 12299  1FFB  3A62               	xorlw	98	; case 100
 12300  1FFC  1903               	skipnz
 12301  1FFD  2FDB               	goto	l710
 12302  1FFE  2FFF               	goto	l711
 12303  1FFF                     l711:	
 12304  1FFF  0008               	return
 12305  2000                     __end_of_set_leds_bottom:	
 12306                           
 12307                           	psect	text37
 12308  1E95                     __ptext37:	
 12309 ;; *************** function _FLASH_ReadWord *****************
 12310 ;; Defined at:
 12311 ;;		line 58 in file "memory.c"
 12312 ;; Parameters:    Size  Location     Type
 12313 ;;  flashAddr       2    2[BANK0 ] unsigned int 
 12314 ;; Auto vars:     Size  Location     Type
 12315 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 12316 ;; Return value:  Size  Location     Type
 12317 ;;                  2    2[BANK0 ] unsigned int 
 12318 ;; Registers used:
 12319 ;;		wreg, status,2, status,0
 12320 ;; Tracked objects:
 12321 ;;		On entry : 0/0
 12322 ;;		On exit  : 0/0
 12323 ;;		Unchanged: 0/0
 12324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12325 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12328 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12329 ;;Total ram usage:        3 bytes
 12330 ;; Hardware stack levels used:    1
 12331 ;; Hardware stack levels required when called:    2
 12332 ;; This function calls:
 12333 ;;		Nothing
 12334 ;; This function is called by:
 12335 ;;		_ReadSavedSettings
 12336 ;;		_FLASH_WriteWord
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           
 12341                           ;psect for function _FLASH_ReadWord
 12342  1E95                     _FLASH_ReadWord:	
 12343                           
 12344                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12345                           
 12346                           ;incstack = 0
 12347                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12348  1E95  3000               	movlw	0
 12349  1E96  1B8B               	btfsc	11,7	;volatile
 12350  1E97  3001               	movlw	1
 12351  1E98  0020               	movlb	0	; select bank0
 12352  1E99  00A4               	movwf	FLASH_ReadWord@GIEBitValue
 12353                           
 12354                           ;memory.c: 61: INTCONbits.GIE = 0;
 12355  1E9A  138B               	bcf	11,7	;volatile
 12356                           
 12357                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12358  1E9B  0822               	movf	FLASH_ReadWord@flashAddr,w
 12359  1E9C  0023               	movlb	3	; select bank3
 12360  1E9D  0091               	movwf	17	;volatile
 12361                           
 12362                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12363  1E9E  0020               	movlb	0	; select bank0
 12364  1E9F  0823               	movf	FLASH_ReadWord@flashAddr+1,w
 12365  1EA0  0023               	movlb	3	; select bank3
 12366  1EA1  0092               	movwf	18	;volatile
 12367                           
 12368                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12369  1EA2  1315               	bcf	21,6	;volatile
 12370                           
 12371                           ;memory.c: 66: PMCON1bits.RD = 1;
 12372  1EA3  1415               	bsf	21,0	;volatile
 12373                           
 12374                           ;memory.c: 67: __nop();
 12375  1EA4  0000               	nop
 12376                           
 12377                           ;memory.c: 68: __nop();
 12378  1EA5  0000               	nop
 12379                           
 12380                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12381  1EA6  0020               	movlb	0	; select bank0
 12382  1EA7  0C24               	rrf	FLASH_ReadWord@GIEBitValue,w
 12383  1EA8  1C03               	skipc
 12384  1EA9  138B               	bcf	11,7	;volatile
 12385  1EAA  1803               	skipnc
 12386  1EAB  178B               	bsf	11,7	;volatile
 12387                           
 12388                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12389  1EAC  0023               	movlb	3	; select bank3
 12390  1EAD  0814               	movf	20,w	;volatile
 12391  1EAE  0020               	movlb	0	; select bank0
 12392  1EAF  00A3               	movwf	?_FLASH_ReadWord+1
 12393  1EB0  0023               	movlb	3	; select bank3
 12394  1EB1  0813               	movf	19,w	;volatile
 12395  1EB2  0020               	movlb	0	; select bank0
 12396  1EB3  00A2               	movwf	?_FLASH_ReadWord
 12397  1EB4  0008               	return
 12398  1EB5                     __end_of_FLASH_ReadWord:	
 12399                           
 12400                           	psect	text38
 12401  1EB5                     __ptext38:	
 12402 ;; *************** function _InitializeTaps *****************
 12403 ;; Defined at:
 12404 ;;		line 187 in file "user.c"
 12405 ;; Parameters:    Size  Location     Type
 12406 ;;		None
 12407 ;; Auto vars:     Size  Location     Type
 12408 ;;  itap            2    3[BANK0 ] int 
 12409 ;; Return value:  Size  Location     Type
 12410 ;;                  1    wreg      void 
 12411 ;; Registers used:
 12412 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12413 ;; Tracked objects:
 12414 ;;		On entry : 0/0
 12415 ;;		On exit  : 0/0
 12416 ;;		Unchanged: 0/0
 12417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12421 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12422 ;;Total ram usage:        3 bytes
 12423 ;; Hardware stack levels used:    1
 12424 ;; Hardware stack levels required when called:    2
 12425 ;; This function calls:
 12426 ;;		Nothing
 12427 ;; This function is called by:
 12428 ;;		_main
 12429 ;; This function uses a non-reentrant model
 12430 ;;
 12431                           
 12432                           
 12433                           ;psect for function _InitializeTaps
 12434  1EB5                     _InitializeTaps:	
 12435                           
 12436                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 12437                           
 12438                           ;incstack = 0
 12439                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12440  1EB5  0020               	movlb	0	; select bank0
 12441  1EB6  01A3               	clrf	InitializeTaps@itap
 12442  1EB7  01A4               	clrf	InitializeTaps@itap+1
 12443  1EB8                     L15:	
 12444  1EB8  0824               	movf	InitializeTaps@itap+1,w
 12445  1EB9  3A80               	xorlw	128
 12446  1EBA  00A2               	movwf	??_InitializeTaps
 12447  1EBB  3080               	movlw	128
 12448  1EBC  0222               	subwf	??_InitializeTaps,w
 12449  1EBD  1D03               	skipz
 12450  1EBE  2EC1               	goto	u5655
 12451  1EBF  300C               	movlw	12
 12452  1EC0  0223               	subwf	InitializeTaps@itap,w
 12453  1EC1                     u5655:	
 12454  1EC1  1803               	btfsc	3,0
 12455  1EC2  0008               	return
 12456                           
 12457                           ;user.c: 189: tap[itap] = 0;
 12458  1EC3  0020               	movlb	0	; select bank0
 12459  1EC4  0823               	movf	InitializeTaps@itap,w
 12460  1EC5  00A2               	movwf	??_InitializeTaps
 12461  1EC6  3001               	movlw	1
 12462  1EC7                     u5665:	
 12463  1EC7  35A2               	lslf	??_InitializeTaps,f
 12464  1EC8  3EFF               	addlw	-1
 12465  1EC9  1D03               	skipz
 12466  1ECA  2EC7               	goto	u5665
 12467  1ECB  3522               	lslf	??_InitializeTaps,w
 12468  1ECC  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12469  1ECD  0086               	movwf	6
 12470  1ECE  3001               	movlw	1	; select bank3/4
 12471  1ECF  0087               	movwf	7
 12472  1ED0  3000               	movlw	0
 12473  1ED1  3FC0               	movwi [0]fsr1
 12474  1ED2  3000               	movlw	0
 12475  1ED3  3FC1               	movwi [1]fsr1
 12476  1ED4  3FC2               	movwi [2]fsr1
 12477  1ED5  3FC3               	movwi [3]fsr1
 12478  1ED6  3001               	movlw	1
 12479  1ED7  07A3               	addwf	InitializeTaps@itap,f
 12480  1ED8  3000               	movlw	0
 12481  1ED9  3DA4               	addwfc	InitializeTaps@itap+1,f
 12482  1EDA  2EB8               	goto	L15
 12483  1EDB                     __end_of_InitializeTaps:	
 12484                           
 12485                           	psect	text39
 12486  1F33                     __ptext39:	
 12487 ;; *************** function _InitApp *****************
 12488 ;; Defined at:
 12489 ;;		line 23 in file "user.c"
 12490 ;; Parameters:    Size  Location     Type
 12491 ;;		None
 12492 ;; Auto vars:     Size  Location     Type
 12493 ;;		None
 12494 ;; Return value:  Size  Location     Type
 12495 ;;                  1    wreg      void 
 12496 ;; Registers used:
 12497 ;;		wreg, status,2, status,0, pclath, cstack
 12498 ;; Tracked objects:
 12499 ;;		On entry : 0/0
 12500 ;;		On exit  : 0/0
 12501 ;;		Unchanged: 0/0
 12502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12506 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12507 ;;Total ram usage:        0 bytes
 12508 ;; Hardware stack levels used:    1
 12509 ;; Hardware stack levels required when called:    4
 12510 ;; This function calls:
 12511 ;;		_init_adc
 12512 ;;		_init_pwm
 12513 ;; This function is called by:
 12514 ;;		_main
 12515 ;; This function uses a non-reentrant model
 12516 ;;
 12517                           
 12518                           
 12519                           ;psect for function _InitApp
 12520  1F33                     _InitApp:	
 12521                           
 12522                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12523                           
 12524                           ;incstack = 0
 12525                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12526  1F33  0021               	movlb	1	; select bank1
 12527  1F34  100D               	bcf	13,0	;volatile
 12528                           
 12529                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12530  1F35  108D               	bcf	13,1	;volatile
 12531                           
 12532                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12533  1F36  110D               	bcf	13,2	;volatile
 12534                           
 12535                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12536  1F37  118D               	bcf	13,3	;volatile
 12537                           
 12538                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12539  1F38  120D               	bcf	13,4	;volatile
 12540                           
 12541                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12542  1F39  128D               	bcf	13,5	;volatile
 12543                           
 12544                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12545  1F3A  140E               	bsf	14,0	;volatile
 12546                           
 12547                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12548  1F3B  120E               	bcf	14,4	;volatile
 12549                           
 12550                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12551  1F3C  128E               	bcf	14,5	;volatile
 12552                           
 12553                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12554  1F3D  100F               	bcf	15,0	;volatile
 12555                           
 12556                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12557  1F3E  108F               	bcf	15,1	;volatile
 12558                           
 12559                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12560  1F3F  110F               	bcf	15,2	;volatile
 12561                           
 12562                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12563  1F40  118F               	bcf	15,3	;volatile
 12564                           
 12565                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12566  1F41  120F               	bcf	15,4	;volatile
 12567                           
 12568                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12569  1F42  168F               	bsf	15,5	;volatile
 12570                           
 12571                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12572  1F43  170F               	bsf	15,6	;volatile
 12573                           
 12574                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12575  1F44  178F               	bsf	15,7	;volatile
 12576                           
 12577                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12578  1F45  1410               	bsf	16,0	;volatile
 12579                           
 12580                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12581  1F46  1490               	bsf	16,1	;volatile
 12582                           
 12583                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12584  1F47  0023               	movlb	3	; select bank3
 12585  1F48  1010               	bcf	16,0	;volatile
 12586                           
 12587                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12588  1F49  1090               	bcf	16,1	;volatile
 12589                           
 12590                           ;user.c: 53: PORTEbits.RE0 = 0;
 12591  1F4A  0020               	movlb	0	; select bank0
 12592  1F4B  1010               	bcf	16,0	;volatile
 12593                           
 12594                           ;user.c: 54: PORTEbits.RE1 = 0;
 12595  1F4C  1090               	bcf	16,1	;volatile
 12596                           
 12597                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12598  1F4D  0026               	movlb	6	; select bank6
 12599  1F4E  100C               	bcf	12,0	;volatile
 12600                           
 12601                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12602  1F4F  108C               	bcf	12,1	;volatile
 12603                           
 12604                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12605  1F50  110C               	bcf	12,2	;volatile
 12606                           
 12607                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12608  1F51  118C               	bcf	12,3	;volatile
 12609                           
 12610                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12611  1F52  120C               	bcf	12,4	;volatile
 12612                           
 12613                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12614  1F53  128C               	bcf	12,5	;volatile
 12615                           
 12616                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12617  1F54  170C               	bsf	12,6	;volatile
 12618                           
 12619                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12620  1F55  0028               	movlb	8	; select bank8
 12621  1F56  130C               	bcf	12,6	;volatile
 12622                           
 12623                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12624  1F57  0026               	movlb	6	; select bank6
 12625  1F58  108D               	bcf	13,1	;volatile
 12626                           
 12627                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12628  1F59  110D               	bcf	13,2	;volatile
 12629                           
 12630                           ;user.c: 68: init_adc();
 12631  1F5A  319D  25E7  319F   	fcall	_init_adc
 12632                           
 12633                           ;user.c: 69: init_pwm();
 12634  1F5D  3191  2191         	fcall	_init_pwm
 12635                           
 12636                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12637  1F5F  178B               	bsf	11,7	;volatile
 12638                           
 12639                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12640  1F60  168B               	bsf	11,5	;volatile
 12641                           
 12642                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12643  1F61  110B               	bcf	11,2	;volatile
 12644  1F62  0008               	return
 12645  1F63                     __end_of_InitApp:	
 12646                           
 12647                           	psect	text40
 12648  1191                     __ptext40:	
 12649 ;; *************** function _init_pwm *****************
 12650 ;; Defined at:
 12651 ;;		line 123 in file "user.c"
 12652 ;; Parameters:    Size  Location     Type
 12653 ;;		None
 12654 ;; Auto vars:     Size  Location     Type
 12655 ;;		None
 12656 ;; Return value:  Size  Location     Type
 12657 ;;                  1    wreg      void 
 12658 ;; Registers used:
 12659 ;;		wreg, status,2, status,0, pclath, cstack
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12669 ;;Total ram usage:        0 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    3
 12672 ;; This function calls:
 12673 ;;		_init_timer0
 12674 ;;		_init_timer2
 12675 ;; This function is called by:
 12676 ;;		_InitApp
 12677 ;; This function uses a non-reentrant model
 12678 ;;
 12679                           
 12680                           
 12681                           ;psect for function _init_pwm
 12682  1191                     _init_pwm:	
 12683                           
 12684                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12685                           
 12686                           ;incstack = 0
 12687                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12688  1191  0022               	movlb	2	; select bank2
 12689  1192  101D               	bcf	29,0	;volatile
 12690                           
 12691                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12692  1193  0021               	movlb	1	; select bank1
 12693  1194  110E               	bcf	14,2	;volatile
 12694                           
 12695                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12696  1195  108E               	bcf	14,1	;volatile
 12697                           
 12698                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12699  1196  0026               	movlb	6	; select bank6
 12700  1197  100D               	bcf	13,0	;volatile
 12701                           
 12702                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12703  1198  118D               	bcf	13,3	;volatile
 12704                           
 12705                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12706  1199  120D               	bcf	13,4	;volatile
 12707                           
 12708                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12709  119A  0021               	movlb	1	; select bank1
 12710  119B  1310               	bcf	16,6	;volatile
 12711                           
 12712                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12713  119C  1290               	bcf	16,5	;volatile
 12714                           
 12715                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12716  119D  1210               	bcf	16,4	;volatile
 12717                           
 12718                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12719  119E  1190               	bcf	16,3	;volatile
 12720                           
 12721                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12722  119F  1110               	bcf	16,2	;volatile
 12723                           
 12724                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12725  11A0  300F               	movlw	15
 12726  11A1  0025               	movlb	5	; select bank5
 12727  11A2  0493               	iorwf	19,f	;volatile
 12728                           
 12729                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12730  11A3  300F               	movlw	15
 12731  11A4  049A               	iorwf	26,f	;volatile
 12732                           
 12733                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12734  11A5  300F               	movlw	15
 12735  11A6  0026               	movlb	6	; select bank6
 12736  11A7  0493               	iorwf	19,f	;volatile
 12737                           
 12738                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12739  11A8  300F               	movlw	15
 12740  11A9  049A               	iorwf	26,f	;volatile
 12741                           
 12742                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12743  11AA  300F               	movlw	15
 12744  11AB  049E               	iorwf	30,f	;volatile
 12745                           
 12746                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12747  11AC  300F               	movlw	15
 12748  11AD  002C               	movlb	12	; select bank12
 12749  11AE  0493               	iorwf	19,f	;volatile
 12750                           
 12751                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12752  11AF  300F               	movlw	15
 12753  11B0  0496               	iorwf	22,f	;volatile
 12754                           
 12755                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12756  11B1  300F               	movlw	15
 12757  11B2  0499               	iorwf	25,f	;volatile
 12758                           
 12759                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12760  11B3  300F               	movlw	15
 12761  11B4  049C               	iorwf	28,f	;volatile
 12762                           
 12763                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12764  11B5  300F               	movlw	15
 12765  11B6  049F               	iorwf	31,f	;volatile
 12766                           
 12767                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12768  11B7  0025               	movlb	5	; select bank5
 12769  11B8  019D               	clrf	29	;volatile
 12770                           
 12771                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12772  11B9  019E               	clrf	30	;volatile
 12773                           
 12774                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12775  11BA  019F               	clrf	31	;volatile
 12776                           
 12777                           ;user.c: 148: CCPR1 = 50;
 12778  11BB  3000               	movlw	0
 12779  11BC  0092               	movwf	18	;volatile
 12780  11BD  3032               	movlw	50
 12781  11BE  0091               	movwf	17	;volatile
 12782                           
 12783                           ;user.c: 149: CCPR2 = 100;
 12784  11BF  3000               	movlw	0
 12785  11C0  0099               	movwf	25	;volatile
 12786  11C1  3064               	movlw	100
 12787  11C2  0098               	movwf	24	;volatile
 12788                           
 12789                           ;user.c: 150: CCPR3 = 150;
 12790  11C3  3000               	movlw	0
 12791  11C4  0026               	movlb	6	; select bank6
 12792  11C5  0092               	movwf	18	;volatile
 12793  11C6  3096               	movlw	150
 12794  11C7  0091               	movwf	17	;volatile
 12795                           
 12796                           ;user.c: 151: CCPR4 = 200;
 12797  11C8  3000               	movlw	0
 12798  11C9  0099               	movwf	25	;volatile
 12799  11CA  30C8               	movlw	200
 12800  11CB  0098               	movwf	24	;volatile
 12801                           
 12802                           ;user.c: 152: init_timer2();
 12803  11CC  319D  25D5  3191   	fcall	_init_timer2
 12804                           
 12805                           ;user.c: 153: init_timer0();
 12806  11CF  319D  25CE         	fcall	_init_timer0
 12807  11D1  0008               	return
 12808  11D2                     __end_of_init_pwm:	
 12809                           
 12810                           	psect	text41
 12811  1DD5                     __ptext41:	
 12812 ;; *************** function _init_timer2 *****************
 12813 ;; Defined at:
 12814 ;;		line 156 in file "user.c"
 12815 ;; Parameters:    Size  Location     Type
 12816 ;;		None
 12817 ;; Auto vars:     Size  Location     Type
 12818 ;;		None
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  1    wreg      void 
 12821 ;; Registers used:
 12822 ;;		wreg, status,2, status,0
 12823 ;; Tracked objects:
 12824 ;;		On entry : 0/0
 12825 ;;		On exit  : 0/0
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12832 ;;Total ram usage:        0 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    2
 12835 ;; This function calls:
 12836 ;;		Nothing
 12837 ;; This function is called by:
 12838 ;;		_init_pwm
 12839 ;; This function uses a non-reentrant model
 12840 ;;
 12841                           
 12842                           
 12843                           ;psect for function _init_timer2
 12844  1DD5                     _init_timer2:	
 12845                           
 12846                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 12847                           
 12848                           ;incstack = 0
 12849                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12850  1DD5  3087               	movlw	-121
 12851  1DD6  0020               	movlb	0	; select bank0
 12852  1DD7  059C               	andwf	28,f	;volatile
 12853                           
 12854                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 12855  1DD8  30FC               	movlw	-4
 12856  1DD9  059C               	andwf	28,f	;volatile
 12857                           
 12858                           ;user.c: 159: PR2 = 0xFF;
 12859  1DDA  30FF               	movlw	255
 12860  1DDB  009B               	movwf	27	;volatile
 12861                           
 12862                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 12863  1DDC  151C               	bsf	28,2	;volatile
 12864  1DDD  0008               	return
 12865  1DDE                     __end_of_init_timer2:	
 12866                           
 12867                           	psect	text42
 12868  1DCE                     __ptext42:	
 12869 ;; *************** function _init_timer0 *****************
 12870 ;; Defined at:
 12871 ;;		line 163 in file "user.c"
 12872 ;; Parameters:    Size  Location     Type
 12873 ;;		None
 12874 ;; Auto vars:     Size  Location     Type
 12875 ;;		None
 12876 ;; Return value:  Size  Location     Type
 12877 ;;                  1    wreg      void 
 12878 ;; Registers used:
 12879 ;;		None
 12880 ;; Tracked objects:
 12881 ;;		On entry : 0/0
 12882 ;;		On exit  : 0/0
 12883 ;;		Unchanged: 0/0
 12884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12887 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12888 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12889 ;;Total ram usage:        0 bytes
 12890 ;; Hardware stack levels used:    1
 12891 ;; Hardware stack levels required when called:    2
 12892 ;; This function calls:
 12893 ;;		Nothing
 12894 ;; This function is called by:
 12895 ;;		_init_pwm
 12896 ;; This function uses a non-reentrant model
 12897 ;;
 12898                           
 12899                           
 12900                           ;psect for function _init_timer0
 12901  1DCE                     _init_timer0:	
 12902                           
 12903                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 12904                           
 12905                           ;incstack = 0
 12906                           ; Regs used in _init_timer0: []
 12907  1DCE  0021               	movlb	1	; select bank1
 12908  1DCF  1295               	bcf	21,5	;volatile
 12909                           
 12910                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 12911  1DD0  1195               	bcf	21,3	;volatile
 12912                           
 12913                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 12914  1DD1  1015               	bcf	21,0	;volatile
 12915                           
 12916                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 12917  1DD2  1495               	bsf	21,1	;volatile
 12918                           
 12919                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 12920  1DD3  1115               	bcf	21,2	;volatile
 12921  1DD4  0008               	return
 12922  1DD5                     __end_of_init_timer0:	
 12923                           
 12924                           	psect	text43
 12925  1DE7                     __ptext43:	
 12926 ;; *************** function _init_adc *****************
 12927 ;; Defined at:
 12928 ;;		line 109 in file "user.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;		None
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;		None
 12933 ;; Return value:  Size  Location     Type
 12934 ;;                  1    wreg      void 
 12935 ;; Registers used:
 12936 ;;		wreg, status,2, status,0
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12946 ;;Total ram usage:        0 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    2
 12949 ;; This function calls:
 12950 ;;		Nothing
 12951 ;; This function is called by:
 12952 ;;		_InitApp
 12953 ;; This function uses a non-reentrant model
 12954 ;;
 12955                           
 12956                           
 12957                           ;psect for function _init_adc
 12958  1DE7                     _init_adc:	
 12959                           
 12960                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 12961                           
 12962                           ;incstack = 0
 12963                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12964  1DE7  0021               	movlb	1	; select bank1
 12965  1DE8  179E               	bsf	30,7	;volatile
 12966                           
 12967                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 12968  1DE9  081E               	movf	30,w	;volatile
 12969  1DEA  398F               	andlw	-113
 12970  1DEB  3860               	iorlw	96
 12971  1DEC  009E               	movwf	30	;volatile
 12972                           
 12973                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 12974  1DED  30FC               	movlw	-4
 12975  1DEE  059E               	andwf	30,f	;volatile
 12976                           
 12977                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 12978  1DEF  141D               	bsf	29,0	;volatile
 12979  1DF0  0008               	return
 12980  1DF1                     __end_of_init_adc:	
 12981                           
 12982                           	psect	text44
 12983  1DC6                     __ptext44:	
 12984 ;; *************** function _ConfigureOscillator *****************
 12985 ;; Defined at:
 12986 ;;		line 18 in file "system.c"
 12987 ;; Parameters:    Size  Location     Type
 12988 ;;		None
 12989 ;; Auto vars:     Size  Location     Type
 12990 ;;		None
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg, status,2, status,0
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13004 ;;Total ram usage:        0 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    2
 13007 ;; This function calls:
 13008 ;;		Nothing
 13009 ;; This function is called by:
 13010 ;;		_main
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           
 13015                           ;psect for function _ConfigureOscillator
 13016  1DC6                     _ConfigureOscillator:	
 13017                           
 13018                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13019                           
 13020                           ;incstack = 0
 13021                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13022  1DC6  30FC               	movlw	-4
 13023  1DC7  0021               	movlb	1	; select bank1
 13024  1DC8  0599               	andwf	25,f	;volatile
 13025  1DC9  0008               	return
 13026  1DCA                     __end_of_ConfigureOscillator:	
 13027                           
 13028                           	psect	intentry
 13029  0004                     __pintentry:	
 13030 ;; *************** function _isr *****************
 13031 ;; Defined at:
 13032 ;;		line 23 in file "interrupts.c"
 13033 ;; Parameters:    Size  Location     Type
 13034 ;;		None
 13035 ;; Auto vars:     Size  Location     Type
 13036 ;;  tmpSubDelay     2    0[BANK0 ] int 
 13037 ;; Return value:  Size  Location     Type
 13038 ;;                  1    wreg      void 
 13039 ;; Registers used:
 13040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13041 ;; Tracked objects:
 13042 ;;		On entry : 0/0
 13043 ;;		On exit  : 0/0
 13044 ;;		Unchanged: 0/0
 13045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13047 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13048 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13049 ;;      Totals:         9       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13050 ;;Total ram usage:       11 bytes
 13051 ;; Hardware stack levels used:    1
 13052 ;; Hardware stack levels required when called:    1
 13053 ;; This function calls:
 13054 ;;		i1_set_leds_top
 13055 ;; This function is called by:
 13056 ;;		Interrupt level 1
 13057 ;; This function uses a non-reentrant model
 13058 ;;
 13059                           
 13060  0004                     _isr:	
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13064  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13065  0005  3180               	pagesel	$
 13066  0006  0020               	movlb	0	; select bank0
 13067  0007  087F               	movf	127,w
 13068  0008  00FC               	movwf	??_isr+8
 13069                           
 13070                           ;interrupts.c: 24: int tmpSubDelay;
 13071                           ;interrupts.c: 25: extern volatile long timer;
 13072                           ;interrupts.c: 26: extern volatile long sub_timer;
 13073                           ;interrupts.c: 27: extern volatile long tap_timer;
 13074                           ;interrupts.c: 29: extern volatile long baseline_delay_time;
 13075                           ;interrupts.c: 31: extern int top_push_state;
 13076                           ;interrupts.c: 32: extern uint8_t feedback_start;
 13077                           ;interrupts.c: 33: extern volatile long mod_timer;
 13078                           ;interrupts.c: 34: extern volatile long delay_time;
 13079                           ;interrupts.c: 35: if (INTCONbits.TMR0IF == 1) {
 13080  0009  1D0B               	btfss	11,2	;volatile
 13081  000A  2912               	goto	i1l97
 13082                           
 13083                           ;interrupts.c: 36: tmpSubDelay = delay_time;
 13084  000B  0021               	movlb	1	; select bank1
 13085  000C  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13086  000D  0020               	movlb	0	; select bank0
 13087  000E  00A1               	movwf	isr@tmpSubDelay+1
 13088  000F  0021               	movlb	1	; select bank1
 13089  0010  084D               	movf	_delay_time^(0+128),w	;volatile
 13090  0011  0020               	movlb	0	; select bank0
 13091  0012  00A0               	movwf	isr@tmpSubDelay
 13092                           
 13093                           ;interrupts.c: 37: timer = timer + 1;
 13094  0013  3001               	movlw	1
 13095  0014  00F4               	movwf	??_isr
 13096  0015  3000               	movlw	0
 13097  0016  00F5               	movwf	??_isr+1
 13098  0017  3000               	movlw	0
 13099  0018  00F6               	movwf	??_isr+2
 13100  0019  3000               	movlw	0
 13101  001A  00F7               	movwf	??_isr+3
 13102  001B  0021               	movlb	1	; select bank1
 13103  001C  0867               	movf	_timer^(0+128),w	;volatile
 13104  001D  07F4               	addwf	??_isr,f
 13105  001E  0868               	movf	(_timer+1)^(0+128),w	;volatile
 13106  001F  3DF5               	addwfc	??_isr+1,f
 13107  0020  0869               	movf	(_timer+2)^(0+128),w	;volatile
 13108  0021  3DF6               	addwfc	??_isr+2,f
 13109  0022  086A               	movf	(_timer+3)^(0+128),w	;volatile
 13110  0023  3DF7               	addwfc	??_isr+3,f
 13111  0024  0877               	movf	??_isr+3,w
 13112  0025  00EA               	movwf	(_timer+3)^(0+128)	;volatile
 13113  0026  0876               	movf	??_isr+2,w
 13114  0027  00E9               	movwf	(_timer+2)^(0+128)	;volatile
 13115  0028  0875               	movf	??_isr+1,w
 13116  0029  00E8               	movwf	(_timer+1)^(0+128)	;volatile
 13117  002A  0874               	movf	??_isr,w
 13118  002B  00E7               	movwf	_timer^(0+128)	;volatile
 13119                           
 13120                           ;interrupts.c: 38: sub_timer = sub_timer + 1;
 13121  002C  3001               	movlw	1
 13122  002D  00F4               	movwf	??_isr
 13123  002E  3000               	movlw	0
 13124  002F  00F5               	movwf	??_isr+1
 13125  0030  3000               	movlw	0
 13126  0031  00F6               	movwf	??_isr+2
 13127  0032  3000               	movlw	0
 13128  0033  00F7               	movwf	??_isr+3
 13129  0034  085F               	movf	_sub_timer^(0+128),w	;volatile
 13130  0035  07F4               	addwf	??_isr,f
 13131  0036  0860               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13132  0037  3DF5               	addwfc	??_isr+1,f
 13133  0038  0861               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13134  0039  3DF6               	addwfc	??_isr+2,f
 13135  003A  0862               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13136  003B  3DF7               	addwfc	??_isr+3,f
 13137  003C  0877               	movf	??_isr+3,w
 13138  003D  00E2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13139  003E  0876               	movf	??_isr+2,w
 13140  003F  00E1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13141  0040  0875               	movf	??_isr+1,w
 13142  0041  00E0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13143  0042  0874               	movf	??_isr,w
 13144  0043  00DF               	movwf	_sub_timer^(0+128)	;volatile
 13145                           
 13146                           ;interrupts.c: 39: tap_timer = tap_timer + 1;
 13147  0044  3001               	movlw	1
 13148  0045  00F4               	movwf	??_isr
 13149  0046  3000               	movlw	0
 13150  0047  00F5               	movwf	??_isr+1
 13151  0048  3000               	movlw	0
 13152  0049  00F6               	movwf	??_isr+2
 13153  004A  3000               	movlw	0
 13154  004B  00F7               	movwf	??_isr+3
 13155  004C  0863               	movf	_tap_timer^(0+128),w	;volatile
 13156  004D  07F4               	addwf	??_isr,f
 13157  004E  0864               	movf	(_tap_timer+1)^(0+128),w	;volatile
 13158  004F  3DF5               	addwfc	??_isr+1,f
 13159  0050  0865               	movf	(_tap_timer+2)^(0+128),w	;volatile
 13160  0051  3DF6               	addwfc	??_isr+2,f
 13161  0052  0866               	movf	(_tap_timer+3)^(0+128),w	;volatile
 13162  0053  3DF7               	addwfc	??_isr+3,f
 13163  0054  0877               	movf	??_isr+3,w
 13164  0055  00E6               	movwf	(_tap_timer+3)^(0+128)	;volatile
 13165  0056  0876               	movf	??_isr+2,w
 13166  0057  00E5               	movwf	(_tap_timer+2)^(0+128)	;volatile
 13167  0058  0875               	movf	??_isr+1,w
 13168  0059  00E4               	movwf	(_tap_timer+1)^(0+128)	;volatile
 13169  005A  0874               	movf	??_isr,w
 13170  005B  00E3               	movwf	_tap_timer^(0+128)	;volatile
 13171                           
 13172                           ;interrupts.c: 40: mod_timer = mod_timer + 1;
 13173  005C  3001               	movlw	1
 13174  005D  00F4               	movwf	??_isr
 13175  005E  3000               	movlw	0
 13176  005F  00F5               	movwf	??_isr+1
 13177  0060  3000               	movlw	0
 13178  0061  00F6               	movwf	??_isr+2
 13179  0062  3000               	movlw	0
 13180  0063  00F7               	movwf	??_isr+3
 13181  0064  0022               	movlb	2	; select bank2
 13182  0065  0824               	movf	_mod_timer^(0+256),w	;volatile
 13183  0066  07F4               	addwf	??_isr,f
 13184  0067  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 13185  0068  3DF5               	addwfc	??_isr+1,f
 13186  0069  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 13187  006A  3DF6               	addwfc	??_isr+2,f
 13188  006B  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13189  006C  3DF7               	addwfc	??_isr+3,f
 13190  006D  0877               	movf	??_isr+3,w
 13191  006E  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13192  006F  0876               	movf	??_isr+2,w
 13193  0070  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13194  0071  0875               	movf	??_isr+1,w
 13195  0072  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13196  0073  0874               	movf	??_isr,w
 13197  0074  00A4               	movwf	_mod_timer^(0+256)	;volatile
 13198                           
 13199                           ;interrupts.c: 41: test_timer++;
 13200  0075  3001               	movlw	1
 13201  0076  0023               	movlb	3	; select bank3
 13202  0077  07E4               	addwf	_test_timer^(0+384),f	;volatile
 13203  0078  3000               	movlw	0
 13204  0079  3DE5               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13205  007A  3000               	movlw	0
 13206  007B  3DE6               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13207  007C  3000               	movlw	0
 13208  007D  3DE7               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13209                           
 13210                           ;interrupts.c: 42: if (feedback_start == 1) {
 13211  007E  0021               	movlb	1	; select bank1
 13212  007F  036D               	decf	_feedback_start^(0+128),w
 13213  0080  1D03               	btfss	3,2
 13214  0081  2899               	goto	i1l4260
 13215                           
 13216                           ;interrupts.c: 43: feedback_timer++;
 13217  0082  3001               	movlw	1
 13218  0083  0022               	movlb	2	; select bank2
 13219  0084  07BA               	addwf	_feedback_timer^(0+256),f	;volatile
 13220  0085  3000               	movlw	0
 13221  0086  3DBB               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13222                           
 13223                           ;interrupts.c: 44: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13224  0087  083B               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13225  0088  0021               	movlb	1	; select bank1
 13226  0089  025A               	subwf	(_long_press_limit+1)^(0+128),w
 13227  008A  1D03               	skipz
 13228  008B  2890               	goto	u417_25
 13229  008C  0022               	movlb	2	; select bank2
 13230  008D  083A               	movf	_feedback_timer^(0+256),w	;volatile
 13231  008E  0021               	movlb	1	; select bank1
 13232  008F  0259               	subwf	_long_press_limit^(0+128),w
 13233  0090                     u417_25:	
 13234  0090  1803               	skipnc
 13235  0091  2899               	goto	i1l4260
 13236  0092  085A               	movf	(_long_press_limit+1)^(0+128),w
 13237  0093  0022               	movlb	2	; select bank2
 13238  0094  00BB               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13239  0095  0021               	movlb	1	; select bank1
 13240  0096  0859               	movf	_long_press_limit^(0+128),w
 13241  0097  0022               	movlb	2	; select bank2
 13242  0098  00BA               	movwf	_feedback_timer^(0+256)	;volatile
 13243  0099                     i1l4260:	
 13244                           
 13245                           ;interrupts.c: 45: }
 13246                           ;interrupts.c: 46: if (longTap_start == 1) {
 13247  0099  0022               	movlb	2	; select bank2
 13248  009A  0355               	decf	_longTap_start^(0+256),w
 13249  009B  1D03               	btfss	3,2
 13250  009C  28B3               	goto	i1l4266
 13251                           
 13252                           ;interrupts.c: 47: longTap_timer++;
 13253  009D  3001               	movlw	1
 13254  009E  07C6               	addwf	_longTap_timer^(0+256),f	;volatile
 13255  009F  3000               	movlw	0
 13256  00A0  3DC7               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13257                           
 13258                           ;interrupts.c: 48: if (longTap_timer > long_press_limit) {
 13259  00A1  0847               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13260  00A2  0021               	movlb	1	; select bank1
 13261  00A3  025A               	subwf	(_long_press_limit+1)^(0+128),w
 13262  00A4  1D03               	skipz
 13263  00A5  28AA               	goto	u419_25
 13264  00A6  0022               	movlb	2	; select bank2
 13265  00A7  0846               	movf	_longTap_timer^(0+256),w	;volatile
 13266  00A8  0021               	movlb	1	; select bank1
 13267  00A9  0259               	subwf	_long_press_limit^(0+128),w
 13268  00AA                     u419_25:	
 13269  00AA  1803               	skipnc
 13270  00AB  28B3               	goto	i1l4266
 13271                           
 13272                           ;interrupts.c: 49: longTap_timer = long_press_limit;
 13273  00AC  085A               	movf	(_long_press_limit+1)^(0+128),w
 13274  00AD  0022               	movlb	2	; select bank2
 13275  00AE  00C7               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13276  00AF  0021               	movlb	1	; select bank1
 13277  00B0  0859               	movf	_long_press_limit^(0+128),w
 13278  00B1  0022               	movlb	2	; select bank2
 13279  00B2  00C6               	movwf	_longTap_timer^(0+256)	;volatile
 13280  00B3                     i1l4266:	
 13281                           
 13282                           ;interrupts.c: 50: }
 13283                           ;interrupts.c: 51: }
 13284                           ;interrupts.c: 52: INTCONbits.TMR0IF = 0;
 13285  00B3  110B               	bcf	11,2	;volatile
 13286                           
 13287                           ;interrupts.c: 54: if (adjust_sub_delay == 1) {
 13288  00B4  0022               	movlb	2	; select bank2
 13289  00B5  032A               	decf	_adjust_sub_delay^(0+256),w
 13290  00B6  042B               	iorwf	(_adjust_sub_delay+1)^(0+256),w
 13291  00B7  1D03               	btfss	3,2
 13292  00B8  2912               	goto	i1l97
 13293                           
 13294                           ;interrupts.c: 55: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13295  00B9  0021               	movlb	1	; select bank1
 13296  00BA  0862               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13297  00BB  3A80               	xorlw	128
 13298  00BC  00F4               	movwf	??_isr
 13299  00BD  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13300  00BE  3A80               	xorlw	128
 13301  00BF  0274               	subwf	??_isr,w
 13302  00C0  1D03               	skipz
 13303  00C1  28CC               	goto	u421_23
 13304  00C2  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13305  00C3  0261               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13306  00C4  1D03               	skipz
 13307  00C5  28CC               	goto	u421_23
 13308  00C6  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13309  00C7  0260               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13310  00C8  1D03               	skipz
 13311  00C9  28CC               	goto	u421_23
 13312  00CA  084D               	movf	_delay_time^(0+128),w	;volatile
 13313  00CB  025F               	subwf	_sub_timer^(0+128),w	;volatile
 13314  00CC                     u421_23:	
 13315  00CC  1C03               	skipc
 13316  00CD  2912               	goto	i1l97
 13317  00CE  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13318  00CF  00F4               	movwf	??_isr
 13319  00D0  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13320  00D1  00F5               	movwf	??_isr+1
 13321  00D2  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13322  00D3  00F6               	movwf	??_isr+2
 13323  00D4  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13324  00D5  00F7               	movwf	??_isr+3
 13325  00D6  0967               	comf	_timer^(0+128),w	;volatile
 13326  00D7  00F8               	movwf	??_isr+4
 13327  00D8  0968               	comf	(_timer+1)^(0+128),w	;volatile
 13328  00D9  00F9               	movwf	??_isr+5
 13329  00DA  0969               	comf	(_timer+2)^(0+128),w	;volatile
 13330  00DB  00FA               	movwf	??_isr+6
 13331  00DC  096A               	comf	(_timer+3)^(0+128),w	;volatile
 13332  00DD  00FB               	movwf	??_isr+7
 13333  00DE  0AF8               	incf	??_isr+4,f
 13334  00DF  1903               	skipnz
 13335  00E0  0AF9               	incf	??_isr+5,f
 13336  00E1  1903               	skipnz
 13337  00E2  0AFA               	incf	??_isr+6,f
 13338  00E3  1903               	skipnz
 13339  00E4  0AFB               	incf	??_isr+7,f
 13340  00E5  0878               	movf	??_isr+4,w
 13341  00E6  07F4               	addwf	??_isr,f
 13342  00E7  0879               	movf	??_isr+5,w
 13343  00E8  3DF5               	addwfc	??_isr+1,f
 13344  00E9  087A               	movf	??_isr+6,w
 13345  00EA  3DF6               	addwfc	??_isr+2,f
 13346  00EB  087B               	movf	??_isr+7,w
 13347  00EC  3DF7               	addwfc	??_isr+3,f
 13348  00ED  1BF7               	btfsc	??_isr+3,7
 13349  00EE  28FC               	goto	i1l4274
 13350  00EF  0877               	movf	??_isr+3,w
 13351  00F0  1D03               	btfss	3,2
 13352  00F1  2912               	goto	i1l97
 13353  00F2  0876               	movf	??_isr+2,w
 13354  00F3  1D03               	btfss	3,2
 13355  00F4  2912               	goto	i1l97
 13356  00F5  0875               	movf	??_isr+1,w
 13357  00F6  1D03               	btfss	3,2
 13358  00F7  2912               	goto	i1l97
 13359  00F8  3004               	movlw	4
 13360  00F9  0274               	subwf	??_isr,w
 13361  00FA  1803               	btfsc	3,0
 13362  00FB  2912               	goto	i1l97
 13363  00FC                     i1l4274:	
 13364                           
 13365                           ;interrupts.c: 56: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13366  00FC  0967               	comf	_timer^(0+128),w	;volatile
 13367  00FD  00F4               	movwf	??_isr
 13368  00FE  0968               	comf	(_timer+1)^(0+128),w	;volatile
 13369  00FF  00F5               	movwf	??_isr+1
 13370  0100  0AF4               	incf	??_isr,f
 13371  0101  1903               	skipnz
 13372  0102  0AF5               	incf	??_isr+1,f
 13373  0103  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13374  0104  0774               	addwf	??_isr,w
 13375  0105  00F6               	movwf	??_isr+2
 13376  0106  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13377  0107  3D75               	addwfc	??_isr+1,w
 13378  0108  00F7               	movwf	??_isr+3
 13379  0109  085F               	movf	_sub_timer^(0+128),w	;volatile
 13380  010A  0776               	addwf	??_isr+2,w
 13381  010B  0020               	movlb	0	; select bank0
 13382  010C  00A0               	movwf	isr@tmpSubDelay
 13383  010D  0021               	movlb	1	; select bank1
 13384  010E  0860               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13385  010F  3D77               	addwfc	??_isr+3,w
 13386  0110  0020               	movlb	0	; select bank0
 13387  0111  00A1               	movwf	isr@tmpSubDelay+1
 13388  0112                     i1l97:	
 13389                           
 13390                           ;interrupts.c: 57: }
 13391                           ;interrupts.c: 58: }
 13392                           ;interrupts.c: 59: }
 13393                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1) {
 13394  0112  0020               	movlb	0	; select bank0
 13395  0113  086A               	movf	_longTap_state,w	;volatile
 13396  0114  1D03               	btfss	3,2
 13397  0115  2963               	goto	i1l4296
 13398  0116  086B               	movf	_doubleTap_state,w	;volatile
 13399  0117  1D03               	btfss	3,2
 13400  0118  2963               	goto	i1l4296
 13401                           
 13402                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 13403  0119  0021               	movlb	1	; select bank1
 13404  011A  086A               	movf	(_timer+3)^(0+128),w	;volatile
 13405  011B  3A80               	xorlw	128
 13406  011C  00F4               	movwf	??_isr
 13407  011D  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13408  011E  3A80               	xorlw	128
 13409  011F  0274               	subwf	??_isr,w
 13410  0120  1D03               	skipz
 13411  0121  292C               	goto	u425_23
 13412  0122  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13413  0123  0269               	subwf	(_timer+2)^(0+128),w	;volatile
 13414  0124  1D03               	skipz
 13415  0125  292C               	goto	u425_23
 13416  0126  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13417  0127  0268               	subwf	(_timer+1)^(0+128),w	;volatile
 13418  0128  1D03               	skipz
 13419  0129  292C               	goto	u425_23
 13420  012A  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13421  012B  0267               	subwf	_timer^(0+128),w	;volatile
 13422  012C                     u425_23:	
 13423  012C  1C03               	skipc
 13424  012D  2951               	goto	i1l4292
 13425                           
 13426                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 13427  012E  0022               	movlb	2	; select bank2
 13428  012F  160D               	bsf	13,4	;volatile
 13429                           
 13430                           ;interrupts.c: 80: timer = 0;
 13431  0130  3000               	movlw	0
 13432  0131  0021               	movlb	1	; select bank1
 13433  0132  00EA               	movwf	(_timer+3)^(0+128)	;volatile
 13434  0133  3000               	movlw	0
 13435  0134  00E9               	movwf	(_timer+2)^(0+128)	;volatile
 13436  0135  3000               	movlw	0
 13437  0136  00E8               	movwf	(_timer+1)^(0+128)	;volatile
 13438  0137  3000               	movlw	0
 13439  0138  00E7               	movwf	_timer^(0+128)	;volatile
 13440                           
 13441                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 13442  0139  0022               	movlb	2	; select bank2
 13443  013A  034C               	decf	_reset_sub_delay^(0+256),w
 13444  013B  044D               	iorwf	(_reset_sub_delay+1)^(0+256),w
 13445  013C  1D03               	btfss	3,2
 13446  013D  2951               	goto	i1l4292
 13447                           
 13448                           ;interrupts.c: 82: CCPR1 = delay_counter;
 13449  013E  0837               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13450  013F  0025               	movlb	5	; select bank5
 13451  0140  0092               	movwf	18	;volatile
 13452  0141  0022               	movlb	2	; select bank2
 13453  0142  0836               	movf	_delay_counter^(0+256),w	;volatile
 13454  0143  0025               	movlb	5	; select bank5
 13455  0144  0091               	movwf	17	;volatile
 13456                           
 13457                           ;interrupts.c: 83: reset_sub_delay = 0;
 13458  0145  0022               	movlb	2	; select bank2
 13459  0146  01CC               	clrf	_reset_sub_delay^(0+256)
 13460  0147  01CD               	clrf	(_reset_sub_delay+1)^(0+256)
 13461                           
 13462                           ;interrupts.c: 84: sub_timer = delay_time;
 13463  0148  0021               	movlb	1	; select bank1
 13464  0149  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13465  014A  00E2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13466  014B  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13467  014C  00E1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13468  014D  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13469  014E  00E0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13470  014F  084D               	movf	_delay_time^(0+128),w	;volatile
 13471  0150  00DF               	movwf	_sub_timer^(0+128)	;volatile
 13472  0151                     i1l4292:	
 13473                           
 13474                           ;interrupts.c: 85: }
 13475                           ;interrupts.c: 86: }
 13476                           ;interrupts.c: 88: if (timer >= 30) {
 13477  0151  0021               	movlb	1	; select bank1
 13478  0152  1BEA               	btfsc	(_timer+3)^(0+128),7	;volatile
 13479  0153  2963               	goto	i1l4296
 13480  0154  086A               	movf	(_timer+3)^(0+128),w	;volatile
 13481  0155  1D03               	btfss	3,2
 13482  0156  2961               	goto	i1l4294
 13483  0157  0869               	movf	(_timer+2)^(0+128),w	;volatile
 13484  0158  1D03               	btfss	3,2
 13485  0159  2961               	goto	i1l4294
 13486  015A  0868               	movf	(_timer+1)^(0+128),w	;volatile
 13487  015B  1D03               	btfss	3,2
 13488  015C  2961               	goto	i1l4294
 13489  015D  301E               	movlw	30
 13490  015E  0267               	subwf	_timer^(0+128),w	;volatile
 13491  015F  1C03               	btfss	3,0
 13492  0160  2963               	goto	i1l4296
 13493  0161                     i1l4294:	
 13494                           
 13495                           ;interrupts.c: 90: LATBbits.LATB4 = 0;
 13496  0161  0022               	movlb	2	; select bank2
 13497  0162  120D               	bcf	13,4	;volatile
 13498  0163                     i1l4296:	
 13499                           
 13500                           ;interrupts.c: 92: }
 13501                           ;interrupts.c: 93: }
 13502                           ;interrupts.c: 96: if (sub_timer >= tmpSubDelay) {
 13503  0163  0020               	movlb	0	; select bank0
 13504  0164  0820               	movf	isr@tmpSubDelay,w
 13505  0165  00F4               	movwf	??_isr
 13506  0166  0821               	movf	isr@tmpSubDelay+1,w
 13507  0167  00F5               	movwf	??_isr+1
 13508  0168  3000               	movlw	0
 13509  0169  1BF5               	btfsc	??_isr+1,7
 13510  016A  30FF               	movlw	255
 13511  016B  00F6               	movwf	??_isr+2
 13512  016C  00F7               	movwf	??_isr+3
 13513  016D  0021               	movlb	1	; select bank1
 13514  016E  0862               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13515  016F  3A80               	xorlw	128
 13516  0170  00F8               	movwf	??_isr+4
 13517  0171  0877               	movf	??_isr+3,w
 13518  0172  3A80               	xorlw	128
 13519  0173  0278               	subwf	??_isr+4,w
 13520  0174  1D03               	skipz
 13521  0175  2980               	goto	u428_23
 13522  0176  0876               	movf	??_isr+2,w
 13523  0177  0261               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13524  0178  1D03               	skipz
 13525  0179  2980               	goto	u428_23
 13526  017A  0875               	movf	??_isr+1,w
 13527  017B  0260               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13528  017C  1D03               	skipz
 13529  017D  2980               	goto	u428_23
 13530  017E  0874               	movf	??_isr,w
 13531  017F  025F               	subwf	_sub_timer^(0+128),w	;volatile
 13532  0180                     u428_23:	
 13533  0180  1C03               	skipc
 13534  0181  29A1               	goto	i1l4306
 13535                           
 13536                           ;interrupts.c: 97: if (suspend_blink == 0) {
 13537  0182  086E               	movf	_suspend_blink^(0+128),w	;volatile
 13538  0183  1D03               	btfss	3,2
 13539  0184  2990               	goto	i1l4302
 13540                           
 13541                           ;interrupts.c: 98: set_leds_top(top_push_state, 1);
 13542  0185  085C               	movf	(_top_push_state+1)^(0+128),w
 13543  0186  00F1               	movwf	i1set_leds_top@x+1
 13544  0187  085B               	movf	_top_push_state^(0+128),w
 13545  0188  00F0               	movwf	i1set_leds_top@x
 13546  0189  3001               	movlw	1
 13547  018A  00F2               	movwf	i1set_leds_top@ledState
 13548  018B  3000               	movlw	0
 13549  018C  00F3               	movwf	i1set_leds_top@ledState+1
 13550  018D  3192  229F  3180   	fcall	i1_set_leds_top
 13551  0190                     i1l4302:	
 13552                           
 13553                           ;interrupts.c: 99: }
 13554                           ;interrupts.c: 100: tmpSubDelay = delay_time;
 13555  0190  0021               	movlb	1	; select bank1
 13556  0191  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13557  0192  0020               	movlb	0	; select bank0
 13558  0193  00A1               	movwf	isr@tmpSubDelay+1
 13559  0194  0021               	movlb	1	; select bank1
 13560  0195  084D               	movf	_delay_time^(0+128),w	;volatile
 13561  0196  0020               	movlb	0	; select bank0
 13562  0197  00A0               	movwf	isr@tmpSubDelay
 13563                           
 13564                           ;interrupts.c: 101: sub_timer = 0;
 13565  0198  3000               	movlw	0
 13566  0199  0021               	movlb	1	; select bank1
 13567  019A  00E2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13568  019B  3000               	movlw	0
 13569  019C  00E1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13570  019D  3000               	movlw	0
 13571  019E  00E0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13572  019F  3000               	movlw	0
 13573  01A0  00DF               	movwf	_sub_timer^(0+128)	;volatile
 13574  01A1                     i1l4306:	
 13575                           
 13576                           ;interrupts.c: 102: }
 13577                           ;interrupts.c: 104: if (sub_timer >= 20) {
 13578  01A1  1BE2               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 13579  01A2  29BD               	goto	i1l4312
 13580  01A3  0862               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13581  01A4  1D03               	btfss	3,2
 13582  01A5  29B0               	goto	i1l4308
 13583  01A6  0861               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13584  01A7  1D03               	btfss	3,2
 13585  01A8  29B0               	goto	i1l4308
 13586  01A9  0860               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13587  01AA  1D03               	btfss	3,2
 13588  01AB  29B0               	goto	i1l4308
 13589  01AC  3014               	movlw	20
 13590  01AD  025F               	subwf	_sub_timer^(0+128),w	;volatile
 13591  01AE  1C03               	btfss	3,0
 13592  01AF  29BD               	goto	i1l4312
 13593  01B0                     i1l4308:	
 13594                           
 13595                           ;interrupts.c: 105: if (suspend_blink == 0) {
 13596  01B0  086E               	movf	_suspend_blink^(0+128),w	;volatile
 13597  01B1  1D03               	btfss	3,2
 13598  01B2  29BD               	goto	i1l4312
 13599                           
 13600                           ;interrupts.c: 106: set_leds_top(top_push_state, 0);
 13601  01B3  085C               	movf	(_top_push_state+1)^(0+128),w
 13602  01B4  00F1               	movwf	i1set_leds_top@x+1
 13603  01B5  085B               	movf	_top_push_state^(0+128),w
 13604  01B6  00F0               	movwf	i1set_leds_top@x
 13605  01B7  3000               	movlw	0
 13606  01B8  00F2               	movwf	i1set_leds_top@ledState
 13607  01B9  00F3               	movwf	i1set_leds_top@ledState+1
 13608  01BA  3192  229F  3180   	fcall	i1_set_leds_top
 13609  01BD                     i1l4312:	
 13610                           
 13611                           ;interrupts.c: 107: }
 13612                           ;interrupts.c: 108: }
 13613                           ;interrupts.c: 111: if (preset_programmning_on == 1) {
 13614  01BD  0022               	movlb	2	; select bank2
 13615  01BE  0359               	decf	_preset_programmning_on^(0+256),w
 13616  01BF  1D03               	btfss	3,2
 13617  01C0  29E6               	goto	i1l4324
 13618                           
 13619                           ;interrupts.c: 112: preset_blink++;
 13620  01C1  3001               	movlw	1
 13621  01C2  00F4               	movwf	??_isr
 13622  01C3  0874               	movf	??_isr,w
 13623  01C4  07D8               	addwf	_preset_blink^(0+256),f
 13624                           
 13625                           ;interrupts.c: 114: if (preset_blink >= blink_delay) {
 13626  01C5  085D               	movf	(_blink_delay+1)^(0+256),w
 13627  01C6  3A80               	xorlw	128
 13628  01C7  3C80               	sublw	128
 13629  01C8  1D03               	skipz
 13630  01C9  29CC               	goto	u433_25
 13631  01CA  085C               	movf	_blink_delay^(0+256),w
 13632  01CB  0258               	subwf	_preset_blink^(0+256),w
 13633  01CC                     u433_25:	
 13634  01CC  1C03               	skipc
 13635  01CD  29E4               	goto	i1l113
 13636                           
 13637                           ;interrupts.c: 115: LATBbits.LATB1 = 1;
 13638  01CE  0022               	movlb	2	; select bank2
 13639  01CF  148D               	bsf	13,1	;volatile
 13640                           
 13641                           ;interrupts.c: 116: if (preset_blink > blink_delay*2) {
 13642  01D0  085D               	movf	(_blink_delay+1)^(0+256),w
 13643  01D1  00F5               	movwf	??_isr+1
 13644  01D2  085C               	movf	_blink_delay^(0+256),w
 13645  01D3  00F4               	movwf	??_isr
 13646  01D4  35F4               	lslf	??_isr,f
 13647  01D5  0DF5               	rlf	??_isr+1,f
 13648  01D6  0875               	movf	??_isr+1,w
 13649  01D7  3A80               	xorlw	128
 13650  01D8  00F6               	movwf	??_isr+2
 13651  01D9  3080               	movlw	128
 13652  01DA  0276               	subwf	??_isr+2,w
 13653  01DB  1D03               	skipz
 13654  01DC  29DF               	goto	u434_25
 13655  01DD  0858               	movf	_preset_blink^(0+256),w
 13656  01DE  0274               	subwf	??_isr,w
 13657  01DF                     u434_25:	
 13658  01DF  1803               	skipnc
 13659  01E0  29EB               	goto	i1l118
 13660                           
 13661                           ;interrupts.c: 117: preset_blink = 0;
 13662  01E1  0022               	movlb	2	; select bank2
 13663  01E2  01D8               	clrf	_preset_blink^(0+256)
 13664                           
 13665                           ;interrupts.c: 118: }
 13666                           ;interrupts.c: 120: } else {
 13667  01E3  29EB               	goto	i1l118
 13668  01E4                     i1l113:	
 13669                           
 13670                           ;interrupts.c: 121: LATBbits.LATB1 = 0;
 13671  01E4  0022               	movlb	2	; select bank2
 13672  01E5  29EA               	goto	i1l4328
 13673  01E6                     i1l4324:	
 13674                           ;interrupts.c: 122: }
 13675                           ;interrupts.c: 124: } else {
 13676                           
 13677                           
 13678                           ;interrupts.c: 125: if (preset_blink > 0) {
 13679  01E6  0858               	movf	_preset_blink^(0+256),w
 13680  01E7  1903               	btfsc	3,2
 13681  01E8  29EB               	goto	i1l118
 13682                           
 13683                           ;interrupts.c: 126: preset_blink = 0;
 13684  01E9  01D8               	clrf	_preset_blink^(0+256)
 13685  01EA                     i1l4328:	
 13686                           
 13687                           ;interrupts.c: 127: LATBbits.LATB1 = 0;
 13688  01EA  108D               	bcf	13,1	;volatile
 13689  01EB                     i1l118:	
 13690  01EB  087C               	movf	??_isr+8,w
 13691  01EC  0020               	movlb	0	; select bank0
 13692  01ED  00FF               	movwf	127
 13693  01EE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13694  01EF  0009               	retfie
 13695  01F0                     __end_of_isr:	
 13696                           
 13697                           	psect	text46
 13698  129F                     __ptext46:	
 13699 ;; *************** function i1_set_leds_top *****************
 13700 ;; Defined at:
 13701 ;;		line 16 in file "LEDs.c"
 13702 ;; Parameters:    Size  Location     Type
 13703 ;;  x               2    0[COMMON] int 
 13704 ;;  ledState        2    2[COMMON] int 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;		None
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      void 
 13709 ;; Registers used:
 13710 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13716 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13719 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13720 ;;Total ram usage:        4 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; This function calls:
 13723 ;;		Nothing
 13724 ;; This function is called by:
 13725 ;;		_isr
 13726 ;; This function uses a non-reentrant model
 13727 ;;
 13728                           
 13729                           
 13730                           ;psect for function i1_set_leds_top
 13731  129F                     i1_set_leds_top:	
 13732                           
 13733                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13734                           
 13735                           ;incstack = 0
 13736                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13737  129F  0027               	movlb	7	; select bank7
 13738  12A0  100C               	bcf	12,0	;volatile
 13739                           
 13740                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13741  12A1  108C               	bcf	12,1	;volatile
 13742                           
 13743                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13744  12A2  110C               	bcf	12,2	;volatile
 13745                           
 13746                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13747  12A3  118C               	bcf	12,3	;volatile
 13748                           
 13749                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13750  12A4  120C               	bcf	12,4	;volatile
 13751                           
 13752                           ;LEDs.c: 22: switch (x) {
 13753  12A5  2ACA               	goto	i1l4244
 13754  12A6                     i1l4232:	
 13755                           ;LEDs.c: 23: case 1:
 13756                           
 13757                           
 13758                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13759  12A6  0C72               	rrf	i1set_leds_top@ledState,w
 13760  12A7  1C03               	skipc
 13761  12A8  100C               	bcf	12,0	;volatile
 13762  12A9  1803               	skipnc
 13763  12AA  140C               	bsf	12,0	;volatile
 13764                           
 13765                           ;LEDs.c: 25: break;
 13766  12AB  0008               	return
 13767  12AC                     i1l4234:	
 13768                           ;LEDs.c: 26: case 2:
 13769                           
 13770                           
 13771                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13772  12AC  0C72               	rrf	i1set_leds_top@ledState,w
 13773  12AD  1C03               	skipc
 13774  12AE  108C               	bcf	12,1	;volatile
 13775  12AF  1803               	skipnc
 13776  12B0  148C               	bsf	12,1	;volatile
 13777                           
 13778                           ;LEDs.c: 28: break;
 13779  12B1  0008               	return
 13780  12B2                     i1l4236:	
 13781                           ;LEDs.c: 29: case 3:
 13782                           
 13783                           
 13784                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13785  12B2  0C72               	rrf	i1set_leds_top@ledState,w
 13786  12B3  1C03               	skipc
 13787  12B4  110C               	bcf	12,2	;volatile
 13788  12B5  1803               	skipnc
 13789  12B6  150C               	bsf	12,2	;volatile
 13790                           
 13791                           ;LEDs.c: 31: break;
 13792  12B7  0008               	return
 13793  12B8                     i1l4238:	
 13794                           ;LEDs.c: 32: case 4:
 13795                           
 13796                           
 13797                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13798  12B8  0C72               	rrf	i1set_leds_top@ledState,w
 13799  12B9  1C03               	skipc
 13800  12BA  118C               	bcf	12,3	;volatile
 13801  12BB  1803               	skipnc
 13802  12BC  158C               	bsf	12,3	;volatile
 13803                           
 13804                           ;LEDs.c: 34: break;
 13805  12BD  0008               	return
 13806  12BE                     i1l4240:	
 13807                           ;LEDs.c: 35: case 5:
 13808                           
 13809                           
 13810                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13811  12BE  0C72               	rrf	i1set_leds_top@ledState,w
 13812  12BF  1C03               	skipc
 13813  12C0  120C               	bcf	12,4	;volatile
 13814  12C1  1803               	skipnc
 13815  12C2  160C               	bsf	12,4	;volatile
 13816                           
 13817                           ;LEDs.c: 39: break;
 13818                           
 13819                           ;LEDs.c: 38: case 6:
 13820                           
 13821                           ;LEDs.c: 37: break;
 13822  12C3  0008               	return
 13823  12C4                     i1l698:	
 13824                           ;LEDs.c: 40: case 100:
 13825                           
 13826                           
 13827                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13828  12C4  140C               	bsf	12,0	;volatile
 13829                           
 13830                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13831  12C5  148C               	bsf	12,1	;volatile
 13832                           
 13833                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13834  12C6  150C               	bsf	12,2	;volatile
 13835                           
 13836                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13837  12C7  158C               	bsf	12,3	;volatile
 13838                           
 13839                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13840  12C8  160C               	bsf	12,4	;volatile
 13841                           
 13842                           ;LEDs.c: 47: }
 13843                           
 13844                           ;LEDs.c: 46: break;
 13845  12C9  0008               	return
 13846  12CA                     i1l4244:	
 13847                           
 13848                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13849                           ; Switch size 1, requested type "space"
 13850                           ; Number of cases is 1, Range of values is 0 to 0
 13851                           ; switch strategies available:
 13852                           ; Name         Instructions Cycles
 13853                           ; simple_byte            4     3 (average)
 13854                           ; direct_byte            8     6 (fixed)
 13855                           ; jumptable            260     6 (fixed)
 13856                           ;	Chosen strategy is simple_byte
 13857  12CA  0871               	movf	i1set_leds_top@x+1,w
 13858  12CB  3A00               	xorlw	0	; case 0
 13859  12CC  1903               	skipnz
 13860  12CD  2ACF               	goto	i1l6150
 13861  12CE  2AE6               	goto	i1l699
 13862  12CF                     i1l6150:	
 13863                           
 13864                           ; Switch size 1, requested type "space"
 13865                           ; Number of cases is 7, Range of values is 1 to 100
 13866                           ; switch strategies available:
 13867                           ; Name         Instructions Cycles
 13868                           ; simple_byte           22    12 (average)
 13869                           ; direct_byte          209     9 (fixed)
 13870                           ; jumptable            263     9 (fixed)
 13871                           ;	Chosen strategy is simple_byte
 13872  12CF  0870               	movf	i1set_leds_top@x,w
 13873  12D0  3A01               	xorlw	1	; case 1
 13874  12D1  1903               	skipnz
 13875  12D2  2AA6               	goto	i1l4232
 13876  12D3  3A03               	xorlw	3	; case 2
 13877  12D4  1903               	skipnz
 13878  12D5  2AAC               	goto	i1l4234
 13879  12D6  3A01               	xorlw	1	; case 3
 13880  12D7  1903               	skipnz
 13881  12D8  2AB2               	goto	i1l4236
 13882  12D9  3A07               	xorlw	7	; case 4
 13883  12DA  1903               	skipnz
 13884  12DB  2AB8               	goto	i1l4238
 13885  12DC  3A01               	xorlw	1	; case 5
 13886  12DD  1903               	skipnz
 13887  12DE  2ABE               	goto	i1l4240
 13888  12DF  3A03               	xorlw	3	; case 6
 13889  12E0  1903               	skipnz
 13890  12E1  2AE6               	goto	i1l699
 13891  12E2  3A62               	xorlw	98	; case 100
 13892  12E3  1903               	skipnz
 13893  12E4  2AC4               	goto	i1l698
 13894  12E5  2AE6               	goto	i1l699
 13895  12E6                     i1l699:	
 13896  12E6  0008               	return
 13897  12E7                     __end_ofi1_set_leds_top:	
 13898  007E                     btemp	set	126	;btemp
 13899  007E                     int$flags	set	126
 13900  007E                     wtemp	set	126
 13901  007E                     wtemp0	set	126
 13902  0080                     wtemp1	set	128
 13903  0082                     wtemp2	set	130
 13904  0084                     wtemp3	set	132
 13905  0086                     wtemp4	set	134
 13906  0088                     wtemp5	set	136
 13907  007F                     wtemp6	set	127
 13908  007E                     ttemp	set	126
 13909  007E                     ttemp0	set	126
 13910  0081                     ttemp1	set	129
 13911  0084                     ttemp2	set	132
 13912  0087                     ttemp3	set	135
 13913  007F                     ttemp4	set	127
 13914  007E                     ltemp	set	126
 13915  007E                     ltemp0	set	126
 13916  0082                     ltemp1	set	130
 13917  0086                     ltemp2	set	134
 13918  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1092
    BSS         214
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     73      76
    BANK1            80     41      80
    BANK2            80      0      77
    BANK3            80      4      76
    BANK4            80      0      62
    BANK5            80      0      62
    BANK6            80      0      62
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0      64
    BANK10           78      0      62
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->_map
    _updateSwitchTap->___aldiv
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___lmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   65487
                                             26 BANK1     15    15      0
                                              0 BANK3      4     4      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3448
                                             29 BANK0      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4821
                                             24 BANK0      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2210
                                             20 BANK0      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    8008
                                             27 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4117
                                             20 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3891
                                             20 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11643
                                             14 BANK1     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                              0 BANK1     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                             10 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3256
                                             20 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2394
                                             20 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     4      8    1413
                                             29 BANK0     12     4      8
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                             14 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14370
                                             55 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              2 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             23 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3560
                                             39 BANK0     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                             10 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2398
                                             24 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2364
                                             20 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1824
                                             14 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     444
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     599
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2805
                                             10 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              2 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              6 BANK0      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0     261
                                              4 COMMON     9     9      0
                                              0 BANK0      2     2      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___lmul (ARG)
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4C      11       95.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3E      13       77.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3E      15       77.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     31B      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      50      20      100.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      3E      26       79.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     31B      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 28 23:13:58 2016

                     _update_mode 0801                      ___altoft@exp 0030                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0031                      ___awdiv@sign 0028                _topTactile_pressed 015B  
      setDoublePressState@f_state 0034                   _updateSwitchTap 0B96                      ___ftadd@exp1 0036  
                    ___ftadd@exp2 0035                      ___ftadd@sign 0034                               l521 09B8  
                             l346 1FB6                               l710 1FDB                               l711 1FFF  
                             l703 1FCC                               l528 1012                               l296 02E8  
                             l705 1FCF                               l706 1FD2                               l707 1FD5  
            __size_of_adc_convert 0019                               l708 1FD8                               l557 1582  
                             l842 126E                               l846 1295                               l854 12FC  
                             l870 0829                               l871 082C                               l872 083A  
                             l698 1457                               l858 132C                               l699 147B  
                             l868 0827                               _PR2 001B      solidring_tactiles@ring_delay 0036  
                             _map 16CC                               _isr 0004                               _tap 01A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 00B5           __end_of_set_leds_bottom 2000  
                    __CFG_LVP$OFF 0000                      ___ftdiv@cntr 0051                      ___ftdiv@sign 0056  
                            _B25k 03A0                              l1221 0C66                              l1207 0BAC  
                            l1081 0A41                              l1512 0B3F                              l1375 15D4  
                            l1481 14AF                              l5100 0B1E                              l1572 16B2  
                            l1488 14C2                              l5112 0B51                              l5200 08B2  
                            l5040 162E                              l1489 14CA                              l5106 0B31  
                            l5026 15F5                              l5018 15E5                              l5116 0B63  
                            l5108 0B3B                              l5212 08CE                              l5044 163C  
                            l5036 1623                              l5028 1603                              l5310 159D  
                            l5126 0B7E                              l5070 0ACF                              l5142 1784  
                            l5136 176E                              l5208 08C6                              l5056 07E7  
                            l5066 0AC8                              l5308 1595                              l5076 0ADE  
                            l5164 17DE                              l5156 17C5                              l5236 165E  
                            l5094 0B0B                              l5334 1263                              l5262 16A9  
                            l5254 168E                              l5430 09E7                              l6142 06C7  
                            ?_map 0057                              l5096 0B15                              l5088 0AF8  
                            l5184 086F                              l5344 128A                              l5264 16B5  
                            l5256 169C                              l6144 0923                              l5520 0BBD  
                            l6146 1464                              l5098 0B1A                              l5178 0859  
                            l5354 12F1                              l5450 0A16                              l5426 09D4  
                            l5514 0BA1                              l6148 1FE8                              l5196 08AA  
                            l5364 1318                              l5268 16C3                              l5452 0A1E  
                            l4830 148C                              l5438 09F5                              l5470 0A45  
                            l4816 1FE2                              l4840 14B4                              l4832 1496  
                            l5712 1423                              l5704 1412                              l5640 0917  
                            l5632 0905                              l5480 0A67                              l5464 0A34  
                            l5560 0C45                              l5544 0C09                              l5536 0BE1  
                            l5384 082F                              l4842 14BC                              l4834 149B  
                            l4826 1485                              l4770 1F76                              l5634 0909  
                            l4922 1516                              l5482 0A6C                              l5490 0A7E  
                            l5538 0BFE                              l5386 083E                              l4780 142F  
                            l5708 141B                              l5636 090D                              l5644 091E  
                            l5476 0A5F                              l5556 0C2E                              l5812 0582  
                            l5804 04F8                              l4782 1437                              l4766 1F6C  
                            l5638 0913                              l5646 0937                              l5590 0D25  
                            l5558 0C36                              l5830 060D                              l5750 02EC  
                            l4784 143F                              l4792 145E                              l5680 13E1  
                            l5584 0CB5                              l5576 0CA9                              l5568 0C5E  
                            l5840 066A                              l5816 05C2                              l5808 0538  
                            l5752 02EF                              l5736 02C2                              l4786 1447  
                            l5666 1031                              l5586 0CFF                              l5834 0616  
                            l5818 05C7                              l4788 144F                              l5668 1041  
                            l5860 06BB                              l5852 0696                              l5844 0680  
                            l5780 03C0                              l5772 036C                              ?_isr 0070  
                            l5686 13EC                              l5598 0D65                              l5862 06BE  
                            l5838 0624                              l5696 13F4                              l4968 123B  
                            l5856 06A2                              l5848 068B                              l5872 0721  
                            l5792 045C                              l5784 03FA                              l5698 1400  
                            l5890 074C                              l5866 06C1                              l4996 1F1D  
                            l5892 079F                              l5868 06DB                              l5796 0496  
                            l5888 0799                              u5035 15F8                              u5205 0AF9  
                            u5055 1604                              u5065 1618                              u6025 0A50  
                            u5235 0B0C                              u5075 1624                              u5405 17DF  
                            u5265 0B1F                              u5515 08CF                              u6315 0D04  
                            u6155 0BEA                              u5700 159B                              u4805 14AA  
                            u4725 1F77                              u5365 1796                              u5525 08D5  
                            u5445 087B                              u6415 13F7                              u4735 1F7E  
                            u5295 0B32                              u5375 17A6                              u5455 088B  
                            u6255 0C77                              u4825 14B7                              u5385 17C6  
                            u5625 16AA                              u6345 09B1                              u6265 0C8E  
                            u6185 0C13                              u6435 1401                              u5395 17D5  
                            u5475 08B3                              u4915 1523                              u6275 0CBE  
                            u6515 034D                              u4940 1239                              u6365 1036  
                            u6445 140B                              u5485 08B9                              u5565 1665  
                            u6285 0CD3                              u6613 05F0                              u6605 05C0  
                            u6525 036A                              u5655 1EC1                              u6455 1413  
                            u4935 121D                              u6295 0CE7                              u6535 03DB  
                            i1l97 0112                              u5665 1EC7                              u4865 14D1  
                            u4785 1491                              u5825 1311                              u5905 09E0  
                            u6545 03F8                              u5595 168F                              u6555 0477  
                            u5685 157B                              u5765 1283                              u4965 1E71  
                            u6565 0494                              u5695 158E                              u4975 1F10  
                            u5935 09FF                              u5855 0814                              u6655 061F  
                            u6575 0516                              u6495 02DE                              u6585 0536  
                            u4995 1E88                              u6683 0791                              u6675 0779  
                            u6595 05A0                              u5895 09CD                     _star_tactiles 14E1  
                    __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000                              _iCnt 0154  
                            _mod1 0520                              _mod2 0220                              _mod3 02A0  
                            _mod4 0320                              _mod5 2576                              _main 02AC  
                    ___ftpack@arg 0022                      ___ftpack@exp 0025                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            fsr1l 0006                              map@x 0057                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E          __end_of_setFeedbackState 1E7E  
                            start 01F0                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 1DCE      updateSwitchTap@tapCntDivisor 0043      __end_of_setSwitchBypassState 1259  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0045  
                    ___ftmul@sign 0046                   __end_of_InitApp 1F63                 ??_restoreLEDState 0022  
                    ___fttol@exp1 00AD                             ??_map 0066                      ___fttol@lval 00A9  
                           ??_isr 0074                   _switchBypass_up 0166         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 1645                             ?_main 0070                   __end_of___awdiv 1428  
                 __end_of___ftadd 0B96                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1800  
                 __end_of___ftneg 1DE7                   __end_of___ftmul 08F6                   ___awdiv@divisor 0022  
                 __end_of___fttol 16CC                             i1l113 01E4                             i1l118 01EB  
                           i1l698 12C4                             i1l699 12E6                   ___awdiv@counter 0027  
                           _iB25k 0420               _ConfigureOscillator 1DC6                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 0026                   _switchTap_state 016C  
               ??_setLongTapState 0024                     ___awtoft@sign 002F                             _myBuf 04A0  
                   ___ftpack@sign 0026                             _timer 00E7                    ?_star_tactiles 0070  
                           main@i 01E8                             ltemp0 007E                             ltemp1 0082  
                           ltemp2 0086                             ltemp3 0080                   __end_of_wait_ms 1FC5  
                           ttemp0 007E                             ttemp1 0081                             ttemp2 0084  
                           ttemp3 0087                             ttemp4 007F                             status 0003  
     __end_of_read_bottom_tactile 129F                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 00B7  
            ?_ConfigureOscillator 0070                _getCurrentLEDState 1E29                _updateSwitchBypass 09BE  
         __end_of_updateSwitchTap 0D7E                   __initialization 01F2           _updateSwitchBypassState 0002  
                    __end_of_main 07DC           __size_of_InitializeTaps 0026               ?_getCurrentLEDState 0070  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000                   _set_subdivision 08F6  
                          ??_main 00BA                     ___fttol@sign1 00A8           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 1191                    _feedback_timer 013A                    _feedback_state 0069  
                  _feedback_start 00ED                  ?_set_leds_bottom 0022                  __end_of___altoft 1059  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0024  
             _baseline_delay_time 00C9              ??_getCurrentLEDState 0022                  __end_of___awtoft 07FE  
                __end_of___ftpack 14E1              ??_updateSwitchBypass 0038                            i1l4302 0190  
                          i1l4240 12BE                            i1l4232 12A6                            i1l4312 01BD  
                          i1l4234 12AC                            i1l4306 01A1                            i1l4236 12B2  
                          i1l4244 12CA                            i1l4324 01E6                            i1l4308 01B0  
                          i1l4260 0099                            i1l4238 12B8                            i1l4328 01EA  
                          i1l4274 00FC                            i1l4266 00B3                            i1l4292 0151  
                          i1l6150 12CF                            i1l4294 0161                            i1l4296 0163  
                          u421_23 00CC                            _PMADRH 0192                            _PMADRL 0191  
                          u425_23 012C                            u433_25 01CC                            u417_25 0090  
                          _PMDATH 0194                            u434_25 01DF                            _PMDATL 0193  
                          u419_25 00AA                            _PMCON2 0196                            u428_23 0180  
                  _debounce_count 0130                    _debounce_mode1 0132                    _debounce_mode2 0134  
                       ??_InitApp 0022             ??_ConfigureOscillator 0022          __end_of_read_top_tactile 1336  
                  __CFG_PWRTE$OFF 0000                            ___lmul 1F63                         ??___aldiv 0036  
                       ??___awdiv 0026                         ??___ftadd 0030                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 004D                         ??___ftneg 0025                         ??___ftmul 003D  
                       ??___fttol 00A4                  __end_of_init_adc 1DF1                  __end_of_init_pwm 11D2  
       __size_of_showBootSequence 002B                  ___awdiv@quotient 0029                      __pdataBANK10 0520  
           ___ftmul@f3_as_product 0042                      __pdataBIGRAM 236E           FLASH_ReadWord@flashAddr 0022  
                    __pdataCOMMON 007D              _getSwitchBypassState 1DCA                         ??_wait_ms 0030  
            _setSwitchBypassState 1213                   ??_star_tactiles 0034            setLongTapState@f_state 0022  
         __end_of__initialization 02A8                        ___altoft@c 002A                        ___ftadd@f1 002A  
                      ___ftadd@f2 002D                 _bypass_turning_on 0153                        ___ftdiv@f1 004A  
                      ___ftdiv@f2 0047                        ___ftdiv@f3 0052                    _top_push_state 00DB  
       ??_updateSwitchBypassState 0024                        ___ftneg@f1 0022               _switchBypass_toggle 0150  
                      ___awtoft@c 002A           __end_of_set_subdivision 09BE                        ___ftmul@f1 0037  
                      ___ftmul@f2 003A                        ___fttol@f1 00A0                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 07FE  
                    __pidataBANK1 1E51                      __pidataBANK2 1E18                      __pidataBANK4 1113  
                    __pidataBANK5 10D5                      __pidataBANK6 1097                      __pidataBANK7 1386  
                    __pidataBANK8 1336                  _initSwitchBypass 1E09                   _doubleTap_state 006B  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 0022             ?_setSwitchBypassState 0034  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                        __pbssBANK0 006B  
                      __pbssBANK1 00DF                        __pbssBANK2 0120                        __pbssBANK3 01A0  
                      __pbssBANK9 04A0                  ??i1_set_leds_top 0074                   _restoreLEDState 1E3B  
                 __CFG_VCAPEN$OFF 0000                        _delayArray 236E                 ?_setFeedbackState 0022  
                      _delay_time 00CD                  _long_press_limit 00D9      __size_of_setDoublePressState 002D  
                      _delayfound 0138                        __pmaintext 02AC                ??_setFeedbackState 0024  
                  _InitializeTaps 1EB5                           ?___lmul 0022                        __pintentry 0004  
                      _blink_rate 00DD                     ??_adc_convert 0024                         ?___altoft 002A  
                  ___lmul@product 002A                   _setLongTapState 1E7E                         ?___awtoft 002A  
                       ?___ftpack 0022                    _FLASH_ReadWord 1E95   __end_of_updateSwitchBypassState 0003  
                     modulation@x 003D                       modulation@y 0041                   _debounce_bypass 012E  
                   _suspend_blink 00EE                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1F33            __end_of_InitializeTaps 1EDB                     ?_set_leds_top 0022  
                      _knob1_prev 00D3                        _knob2_prev 00D5                        _knob3_prev 00D7  
                      _knob4_prev 0160                        _knob5_prev 0162                  ?_set_subdivision 00AE  
                         ___aldiv 15C3                           ___awdiv 13D6                   __size_of___lmul 0030  
                         ___ftadd 0AA0                           ___ftdiv 1757                           ___ftneg 1DDE  
                      _knob_1_pos 013C                        _knob_2_pos 013E                           ___ftmul 0842  
                      _knob_3_pos 0140                           ___fttol 1645                        _knob_4_pos 0142  
                      _knob_5_pos 0144                 _switchTap_pressed 00EF                        ??___altoft 002E  
                _showBootSequence 1EDB            __end_of_FLASH_ReadWord 1EB5                        ??___awtoft 002D  
                      ??___ftpack 0027                InitializeTaps@itap 0023                           __ptext1 0801  
                         __ptext2 0B96                           __ptext3 1E7E                           __ptext4 09BE  
                         __ptext5 1E67                           __ptext6 1F06                           __ptext7 1EDB  
                         __ptext8 14E1                           __ptext9 1151            ??_getSwitchBypassState 0024  
                       _T2CONbits 001C                  _adjust_sub_delay 012A                      __size_of_map 008B  
                    __size_of_isr 01EC            ??_setSwitchBypassState 0036               __end_of_adc_convert 101C  
                ___aldiv@dividend 0032                           _wait_ms 1F93           __end_of_restoreLEDState 1E51  
                         clrloop0 1DFE              end_of_initialization 02A8                        _modulation 11D2  
                         init_ram 1DF1                        ??_init_adc 0022                           initloop 1DF2  
                      ??_init_pwm 0022      updateSwitchBypassState@state 0022                _solidring_tactiles 1151  
                   _longTap_timer 0146                     _longTap_state 006A                     _longTap_start 0155  
                  ??_set_leds_top 0026                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1E95            i1set_leds_top@ledState 0072                ??_read_top_tactile 0034  
                ___aldiv@quotient 0039      __size_of_read_bottom_tactile 0046               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 0024              __size_of_update_mode 0041                   ?_FLASH_ReadWord 0022  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
            star_tactiles@reverse 0036                        _test_timer 01E4                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         _SPI_Value 0128  
         setFeedbackState@f_state 0022              ??_solidring_tactiles 0034       __end_of_ConfigureOscillator 1DCA  
     __size_of_getCurrentLEDState 0012                        map@out_max 0063                        map@out_min 0060  
     __size_of_updateSwitchBypass 00E2          __end_of_initSwitchBypass 1E18                       _CCP1CONbits 0293  
                     ___ftdiv@exp 0055          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 014E                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 0041                adc_convert@channel 0025                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 0024                     __pidataBANK10 1059  
                  __end_of___lmul 1F93                     __pidataBIGRAM 0D7E                       _adc_convert 1003  
                   __pidataCOMMON 0003                    _switchTap_down 015A               start_initialization 01F2  
           _bottomTactile_pressed 0152               _setDoublePressState 1F06                       __end_of_map 1757  
                     __end_of_isr 01F0                  ?_restoreLEDState 0070                _mod_delay_time_bak 0148  
           __end_of_star_tactiles 1550                _adjusted_pot_value 012C                       ?_modulation 003D  
            ?_setDoublePressState 0034                  ?_setLongTapState 0022                          ??___lmul 002A  
                     __pdataBANK0 0069                       __pdataBANK1 00C9                       __pdataBANK2 015C  
                     __pdataBANK4 0220                       __pdataBANK5 02A0                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                     _tap_iteration 0168  
        __size_of_updateSwitchTap 01E8                 __size_of___altoft 003D         __size_of_setFeedbackState 0017  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                     ??_init_timer0 0022  
                   ??_init_timer2 0022              __end_of_set_leds_top 147C                         ___latbits 0003  
              _switchBypass_state 007D                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   __pcstackBANK3 01E8                     _delay_counter 0136          __end_of_showBootSequence 1F06  
        ?_updateSwitchBypassState 0022                    isr@tmpSubDelay 0020                          ?_InitApp 0070  
           ??_setDoublePressState 0036                 __size_of_init_adc 000A                 __size_of_init_pwm 0041  
                        ?___aldiv 002E                 ??_set_leds_bottom 0024                _currentBypassState 016B  
                        ?___awdiv 0022                          ?___ftadd 002A                          ?___ftdiv 0047  
                        ?___ftneg 0022                          ?___ftmul 0037                          ?___fttol 00A0  
                     _blink_delay 015C               __size_of_modulation 0041                       _blink_state 016A  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                        ?_wait_ms 002E               _read_bottom_tactile 1259               __end_of_init_timer0 1DD5  
             __end_of_init_timer2 1DDE                         _mod_value 014A                         _mod_timer 0124  
                ??_InitializeTaps 0022                   ___aldiv@divisor 002E                   ___aldiv@counter 0037  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 0164                         clear_ram0 1DFD  
                       _tap_timer 00E3                         _tap_total 01E0                     set_leds_top@x 0022  
                ??_FLASH_ReadWord 0024              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 0038                         map@in_max 005D                         map@in_min 005A  
                       _sub_timer 00DF                        _ADCON0bits 009D                        _ADCON1bits 009E  
                       main@i_379 01EA          __size_of_set_subdivision 00C8                  set_subdivision@x 00AE  
                set_subdivision@y 00B0         __size_of_read_top_tactile 004F     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 0046                 ??_updateSwitchTap 003D                 ___lmul@multiplier 0022  
               _ReadSavedSettings 1550                 ?_initSwitchBypass 0070                    wait_ms@timeSec 002E  
              ?_ReadSavedSettings 0070                    wait_ms@timemsl 0030       setSwitchBypassState@f_state 0034  
              ??_initSwitchBypass 0038                  __size_of_InitApp 0030                       _mode1_state 0156  
                   ??_update_mode 0022                       _mode2_state 0157             ??_read_bottom_tactile 0034  
             updateSwitchTap@iCnt 0045               ??_ReadSavedSettings 0026                        _APFCONbits 011D  
               star_tactiles@iLed 0037                  __size_of___aldiv 0082                  __size_of___awdiv 0052  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 0022  
                __size_of___ftneg 0009                          ___altoft 101C                  __size_of___ftmul 00B4  
                __size_of___fttol 0087                          ___awtoft 07DC             __size_of_set_leds_top 0054  
                        ___ftpack 147C                          _map$2160 0066            _preset_programmning_on 0159  
          star_tactiles@iLed_1441 0039                        _ANSELEbits 0190                        _ANSELFbits 040C  
                set_leds_bottom@x 0022                  _setFeedbackState 1E67                       _init_timer0 1DCE  
                     _init_timer2 1DD5                _delay_time_changed 015E        __end_of_getCurrentLEDState 1E3B  
      __end_of_updateSwitchBypass 0AA0                          __ptext10 1E3B                          __ptext11 1E29  
                        __ptext20 1DDE                          __ptext12 08F6                          __ptext21 0842  
                        __ptext13 1645                          __ptext30 1003                          __ptext22 1757  
                        __ptext14 07DC                          __ptext31 13D6                          __ptext23 0AA0  
                        __ptext15 12E7                          __ptext40 1191                          __ptext32 101C  
                        __ptext24 1E09                          __ptext16 1259                          __ptext41 1DD5  
                        __ptext33 147C                          __ptext25 1213                          __ptext17 11D2  
                        __ptext42 1DCE                          __ptext34 1550                          __ptext26 1F93  
                        __ptext18 15C3                          __ptext43 1DE7                          __ptext35 1428  
                        __ptext27 1F63                          __ptext19 16CC                          __ptext44 1DC6  
                        __ptext36 1FC5                          __ptext28 0002                          __ptext37 1E95  
                        __ptext29 1DCA                          __ptext46 129F                          __ptext38 1EB5  
                        __ptext39 1F33         __end_of_ReadSavedSettings 15C3                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 0120                      ??_modulation 0045  
                     _mod_counter 00EB                          _init_adc 1DE7                     __size_of_main 0530  
                        _init_pwm 1191      __size_of_ConfigureOscillator 0004                      _set_leds_top 1428  
                        _num_taps 00DE                          int$flags 007E                   i1set_leds_top@x 0070  
             __end_of_update_mode 0842                __end_of_modulation 1213                        _INTCONbits 000B  
                     _tap_history 01CC                 ??_set_subdivision 00B2                          intlevel1 0000  
                 _set_leds_bottom 1FC5                        _PMCON1bits 0195                 ?_showBootSequence 0070  
               __CFG_CLKOUTEN$OFF 0000          __size_of_restoreLEDState 0016                ??_showBootSequence 003B  
                 _reset_sub_delay 014C                        _OSCCONbits 0099                      _preset_blink 0158  
                  i1_set_leds_top 129F  __size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F  
        __size_of_setLongTapState 0017                  _read_top_tactile 12E7                      ___aldiv@sign 0038  
      __size_of_ReadSavedSettings 0073       __end_of_setDoublePressState 1F33                      _CCP10CONbits 061F  
               _bottom_push_state 00D1            __end_ofi1_set_leds_top 12E7  
