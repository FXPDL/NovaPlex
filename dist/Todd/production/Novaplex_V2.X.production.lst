

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Jan 02 09:33:57 2017

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    25                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    26                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    27                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    28                           	psect	clrtext,global,class=CODE,delta=2
    29                           	psect	inittext,global,class=CODE,delta=2
    30                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x920,80
    87                           	dabs	1,0x8A0,80
    88                           	dabs	1,0x820,80
    89                           	dabs	1,0x7A0,80
    90                           	dabs	1,0x720,80
    91                           	dabs	1,0x6A0,80
    92                           	dabs	1,0x648,40
    93                           	dabs	1,0x23E8,0,_delayArray
    94                           	dabs	1,0x7E,2
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0110                     	;# 
   149  0116                     	;# 
   150  0117                     	;# 
   151  011D                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  018F                     	;# 
   155  0190                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0194                     	;# 
   162  0195                     	;# 
   163  0196                     	;# 
   164  0197                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  020D                     	;# 
   189  020F                     	;# 
   190  0210                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0216                     	;# 
   203  0216                     	;# 
   204  0217                     	;# 
   205  0217                     	;# 
   206  0219                     	;# 
   207  021A                     	;# 
   208  021B                     	;# 
   209  021C                     	;# 
   210  021D                     	;# 
   211  021E                     	;# 
   212  021F                     	;# 
   213  028C                     	;# 
   214  028D                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029F                     	;# 
   226  030C                     	;# 
   227  030D                     	;# 
   228  0311                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0318                     	;# 
   233  0318                     	;# 
   234  0319                     	;# 
   235  031A                     	;# 
   236  031C                     	;# 
   237  031C                     	;# 
   238  031D                     	;# 
   239  031E                     	;# 
   240  038C                     	;# 
   241  038D                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  040C                     	;# 
   246  040D                     	;# 
   247  0411                     	;# 
   248  0411                     	;# 
   249  0412                     	;# 
   250  0413                     	;# 
   251  0414                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  0418                     	;# 
   256  0418                     	;# 
   257  0419                     	;# 
   258  041A                     	;# 
   259  041B                     	;# 
   260  041C                     	;# 
   261  041D                     	;# 
   262  041E                     	;# 
   263  048D                     	;# 
   264  0491                     	;# 
   265  0491                     	;# 
   266  0492                     	;# 
   267  0492                     	;# 
   268  0493                     	;# 
   269  0493                     	;# 
   270  0493                     	;# 
   271  0494                     	;# 
   272  0494                     	;# 
   273  0495                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  0496                     	;# 
   277  0497                     	;# 
   278  0497                     	;# 
   279  0595                     	;# 
   280  0596                     	;# 
   281  0597                     	;# 
   282  059C                     	;# 
   283  059D                     	;# 
   284  059E                     	;# 
   285  0611                     	;# 
   286  0611                     	;# 
   287  0612                     	;# 
   288  0613                     	;# 
   289  0614                     	;# 
   290  0614                     	;# 
   291  0615                     	;# 
   292  0616                     	;# 
   293  0617                     	;# 
   294  0617                     	;# 
   295  0618                     	;# 
   296  0619                     	;# 
   297  061A                     	;# 
   298  061A                     	;# 
   299  061B                     	;# 
   300  061C                     	;# 
   301  061D                     	;# 
   302  061D                     	;# 
   303  061E                     	;# 
   304  061F                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0110                     	;# 
   370  0116                     	;# 
   371  0117                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  018F                     	;# 
   376  0190                     	;# 
   377  0191                     	;# 
   378  0191                     	;# 
   379  0192                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0197                     	;# 
   386  0199                     	;# 
   387  0199                     	;# 
   388  0199                     	;# 
   389  019A                     	;# 
   390  019A                     	;# 
   391  019A                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019C                     	;# 
   398  019C                     	;# 
   399  019C                     	;# 
   400  019D                     	;# 
   401  019D                     	;# 
   402  019D                     	;# 
   403  019E                     	;# 
   404  019E                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  020D                     	;# 
   410  020F                     	;# 
   411  0210                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0219                     	;# 
   428  021A                     	;# 
   429  021B                     	;# 
   430  021C                     	;# 
   431  021D                     	;# 
   432  021E                     	;# 
   433  021F                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  0291                     	;# 
   437  0291                     	;# 
   438  0292                     	;# 
   439  0293                     	;# 
   440  0298                     	;# 
   441  0298                     	;# 
   442  0299                     	;# 
   443  029A                     	;# 
   444  029D                     	;# 
   445  029E                     	;# 
   446  029F                     	;# 
   447  030C                     	;# 
   448  030D                     	;# 
   449  0311                     	;# 
   450  0311                     	;# 
   451  0312                     	;# 
   452  0313                     	;# 
   453  0318                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  040C                     	;# 
   467  040D                     	;# 
   468  0411                     	;# 
   469  0411                     	;# 
   470  0412                     	;# 
   471  0413                     	;# 
   472  0414                     	;# 
   473  0415                     	;# 
   474  0416                     	;# 
   475  0417                     	;# 
   476  0418                     	;# 
   477  0418                     	;# 
   478  0419                     	;# 
   479  041A                     	;# 
   480  041B                     	;# 
   481  041C                     	;# 
   482  041D                     	;# 
   483  041E                     	;# 
   484  048D                     	;# 
   485  0491                     	;# 
   486  0491                     	;# 
   487  0492                     	;# 
   488  0492                     	;# 
   489  0493                     	;# 
   490  0493                     	;# 
   491  0493                     	;# 
   492  0494                     	;# 
   493  0494                     	;# 
   494  0495                     	;# 
   495  0495                     	;# 
   496  0496                     	;# 
   497  0496                     	;# 
   498  0497                     	;# 
   499  0497                     	;# 
   500  0595                     	;# 
   501  0596                     	;# 
   502  0597                     	;# 
   503  059C                     	;# 
   504  059D                     	;# 
   505  059E                     	;# 
   506  0611                     	;# 
   507  0611                     	;# 
   508  0612                     	;# 
   509  0613                     	;# 
   510  0614                     	;# 
   511  0614                     	;# 
   512  0615                     	;# 
   513  0616                     	;# 
   514  0617                     	;# 
   515  0617                     	;# 
   516  0618                     	;# 
   517  0619                     	;# 
   518  061A                     	;# 
   519  061A                     	;# 
   520  061B                     	;# 
   521  061C                     	;# 
   522  061D                     	;# 
   523  061D                     	;# 
   524  061E                     	;# 
   525  061F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  000F                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0013                     	;# 
   557  0014                     	;# 
   558  0015                     	;# 
   559  0016                     	;# 
   560  0016                     	;# 
   561  0017                     	;# 
   562  0018                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001C                     	;# 
   567  008C                     	;# 
   568  008D                     	;# 
   569  008E                     	;# 
   570  008F                     	;# 
   571  0090                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0095                     	;# 
   577  0096                     	;# 
   578  0097                     	;# 
   579  0099                     	;# 
   580  009A                     	;# 
   581  009B                     	;# 
   582  009B                     	;# 
   583  009C                     	;# 
   584  009D                     	;# 
   585  009E                     	;# 
   586  010C                     	;# 
   587  010D                     	;# 
   588  010E                     	;# 
   589  010F                     	;# 
   590  0110                     	;# 
   591  0116                     	;# 
   592  0117                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596  018F                     	;# 
   597  0190                     	;# 
   598  0191                     	;# 
   599  0191                     	;# 
   600  0192                     	;# 
   601  0193                     	;# 
   602  0193                     	;# 
   603  0194                     	;# 
   604  0195                     	;# 
   605  0196                     	;# 
   606  0197                     	;# 
   607  0199                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019B                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019C                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019D                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  020D                     	;# 
   631  020F                     	;# 
   632  0210                     	;# 
   633  0211                     	;# 
   634  0211                     	;# 
   635  0212                     	;# 
   636  0212                     	;# 
   637  0213                     	;# 
   638  0213                     	;# 
   639  0214                     	;# 
   640  0214                     	;# 
   641  0215                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0216                     	;# 
   645  0216                     	;# 
   646  0217                     	;# 
   647  0217                     	;# 
   648  0219                     	;# 
   649  021A                     	;# 
   650  021B                     	;# 
   651  021C                     	;# 
   652  021D                     	;# 
   653  021E                     	;# 
   654  021F                     	;# 
   655  028C                     	;# 
   656  028D                     	;# 
   657  0291                     	;# 
   658  0291                     	;# 
   659  0292                     	;# 
   660  0293                     	;# 
   661  0298                     	;# 
   662  0298                     	;# 
   663  0299                     	;# 
   664  029A                     	;# 
   665  029D                     	;# 
   666  029E                     	;# 
   667  029F                     	;# 
   668  030C                     	;# 
   669  030D                     	;# 
   670  0311                     	;# 
   671  0311                     	;# 
   672  0312                     	;# 
   673  0313                     	;# 
   674  0318                     	;# 
   675  0318                     	;# 
   676  0319                     	;# 
   677  031A                     	;# 
   678  031C                     	;# 
   679  031C                     	;# 
   680  031D                     	;# 
   681  031E                     	;# 
   682  038C                     	;# 
   683  038D                     	;# 
   684  0394                     	;# 
   685  0395                     	;# 
   686  0396                     	;# 
   687  040C                     	;# 
   688  040D                     	;# 
   689  0411                     	;# 
   690  0411                     	;# 
   691  0412                     	;# 
   692  0413                     	;# 
   693  0414                     	;# 
   694  0415                     	;# 
   695  0416                     	;# 
   696  0417                     	;# 
   697  0418                     	;# 
   698  0418                     	;# 
   699  0419                     	;# 
   700  041A                     	;# 
   701  041B                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  048D                     	;# 
   706  0491                     	;# 
   707  0491                     	;# 
   708  0492                     	;# 
   709  0492                     	;# 
   710  0493                     	;# 
   711  0493                     	;# 
   712  0493                     	;# 
   713  0494                     	;# 
   714  0494                     	;# 
   715  0495                     	;# 
   716  0495                     	;# 
   717  0496                     	;# 
   718  0496                     	;# 
   719  0497                     	;# 
   720  0497                     	;# 
   721  0595                     	;# 
   722  0596                     	;# 
   723  0597                     	;# 
   724  059C                     	;# 
   725  059D                     	;# 
   726  059E                     	;# 
   727  0611                     	;# 
   728  0611                     	;# 
   729  0612                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0614                     	;# 
   733  0615                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0617                     	;# 
   737  0618                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061A                     	;# 
   741  061B                     	;# 
   742  061C                     	;# 
   743  061D                     	;# 
   744  061D                     	;# 
   745  061E                     	;# 
   746  061F                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  000F                     	;# 
   774  0010                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0014                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  008F                     	;# 
   792  0090                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0094                     	;# 
   797  0095                     	;# 
   798  0096                     	;# 
   799  0097                     	;# 
   800  0099                     	;# 
   801  009A                     	;# 
   802  009B                     	;# 
   803  009B                     	;# 
   804  009C                     	;# 
   805  009D                     	;# 
   806  009E                     	;# 
   807  010C                     	;# 
   808  010D                     	;# 
   809  010E                     	;# 
   810  010F                     	;# 
   811  0110                     	;# 
   812  0116                     	;# 
   813  0117                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018D                     	;# 
   817  018F                     	;# 
   818  0190                     	;# 
   819  0191                     	;# 
   820  0191                     	;# 
   821  0192                     	;# 
   822  0193                     	;# 
   823  0193                     	;# 
   824  0194                     	;# 
   825  0195                     	;# 
   826  0196                     	;# 
   827  0197                     	;# 
   828  0199                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  019A                     	;# 
   832  019A                     	;# 
   833  019A                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019C                     	;# 
   840  019C                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019D                     	;# 
   844  019D                     	;# 
   845  019E                     	;# 
   846  019E                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  020D                     	;# 
   852  020F                     	;# 
   853  0210                     	;# 
   854  0211                     	;# 
   855  0211                     	;# 
   856  0212                     	;# 
   857  0212                     	;# 
   858  0213                     	;# 
   859  0213                     	;# 
   860  0214                     	;# 
   861  0214                     	;# 
   862  0215                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0216                     	;# 
   866  0216                     	;# 
   867  0217                     	;# 
   868  0217                     	;# 
   869  0219                     	;# 
   870  021A                     	;# 
   871  021B                     	;# 
   872  021C                     	;# 
   873  021D                     	;# 
   874  021E                     	;# 
   875  021F                     	;# 
   876  028C                     	;# 
   877  028D                     	;# 
   878  0291                     	;# 
   879  0291                     	;# 
   880  0292                     	;# 
   881  0293                     	;# 
   882  0298                     	;# 
   883  0298                     	;# 
   884  0299                     	;# 
   885  029A                     	;# 
   886  029D                     	;# 
   887  029E                     	;# 
   888  029F                     	;# 
   889  030C                     	;# 
   890  030D                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0318                     	;# 
   896  0318                     	;# 
   897  0319                     	;# 
   898  031A                     	;# 
   899  031C                     	;# 
   900  031C                     	;# 
   901  031D                     	;# 
   902  031E                     	;# 
   903  038C                     	;# 
   904  038D                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  040C                     	;# 
   909  040D                     	;# 
   910  0411                     	;# 
   911  0411                     	;# 
   912  0412                     	;# 
   913  0413                     	;# 
   914  0414                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  0418                     	;# 
   919  0418                     	;# 
   920  0419                     	;# 
   921  041A                     	;# 
   922  041B                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  048D                     	;# 
   927  0491                     	;# 
   928  0491                     	;# 
   929  0492                     	;# 
   930  0492                     	;# 
   931  0493                     	;# 
   932  0493                     	;# 
   933  0493                     	;# 
   934  0494                     	;# 
   935  0494                     	;# 
   936  0495                     	;# 
   937  0495                     	;# 
   938  0496                     	;# 
   939  0496                     	;# 
   940  0497                     	;# 
   941  0497                     	;# 
   942  0595                     	;# 
   943  0596                     	;# 
   944  0597                     	;# 
   945  059C                     	;# 
   946  059D                     	;# 
   947  059E                     	;# 
   948  0611                     	;# 
   949  0611                     	;# 
   950  0612                     	;# 
   951  0613                     	;# 
   952  0614                     	;# 
   953  0614                     	;# 
   954  0615                     	;# 
   955  0616                     	;# 
   956  0617                     	;# 
   957  0617                     	;# 
   958  0618                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061A                     	;# 
   962  061B                     	;# 
   963  061C                     	;# 
   964  061D                     	;# 
   965  061D                     	;# 
   966  061E                     	;# 
   967  061F                     	;# 
   968  0FE4                     	;# 
   969  0FE5                     	;# 
   970  0FE6                     	;# 
   971  0FE7                     	;# 
   972  0FE8                     	;# 
   973  0FE9                     	;# 
   974  0FEA                     	;# 
   975  0FEB                     	;# 
   976  0FED                     	;# 
   977  0FEE                     	;# 
   978  0FEF                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0008                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  000F                     	;# 
   995  0010                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0014                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  008F                     	;# 
  1013  0090                     	;# 
  1014  0091                     	;# 
  1015  0092                     	;# 
  1016  0093                     	;# 
  1017  0094                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0099                     	;# 
  1022  009A                     	;# 
  1023  009B                     	;# 
  1024  009B                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010E                     	;# 
  1031  010F                     	;# 
  1032  0110                     	;# 
  1033  0116                     	;# 
  1034  0117                     	;# 
  1035  011D                     	;# 
  1036  018C                     	;# 
  1037  018D                     	;# 
  1038  018F                     	;# 
  1039  0190                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0194                     	;# 
  1046  0195                     	;# 
  1047  0196                     	;# 
  1048  0197                     	;# 
  1049  0199                     	;# 
  1050  0199                     	;# 
  1051  0199                     	;# 
  1052  019A                     	;# 
  1053  019A                     	;# 
  1054  019A                     	;# 
  1055  019B                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019C                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019D                     	;# 
  1064  019D                     	;# 
  1065  019D                     	;# 
  1066  019E                     	;# 
  1067  019E                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  020D                     	;# 
  1073  020F                     	;# 
  1074  0210                     	;# 
  1075  0211                     	;# 
  1076  0211                     	;# 
  1077  0212                     	;# 
  1078  0212                     	;# 
  1079  0213                     	;# 
  1080  0213                     	;# 
  1081  0214                     	;# 
  1082  0214                     	;# 
  1083  0215                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0216                     	;# 
  1087  0216                     	;# 
  1088  0217                     	;# 
  1089  0217                     	;# 
  1090  0219                     	;# 
  1091  021A                     	;# 
  1092  021B                     	;# 
  1093  021C                     	;# 
  1094  021D                     	;# 
  1095  021E                     	;# 
  1096  021F                     	;# 
  1097  028C                     	;# 
  1098  028D                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0298                     	;# 
  1104  0298                     	;# 
  1105  0299                     	;# 
  1106  029A                     	;# 
  1107  029D                     	;# 
  1108  029E                     	;# 
  1109  029F                     	;# 
  1110  030C                     	;# 
  1111  030D                     	;# 
  1112  0311                     	;# 
  1113  0311                     	;# 
  1114  0312                     	;# 
  1115  0313                     	;# 
  1116  0318                     	;# 
  1117  0318                     	;# 
  1118  0319                     	;# 
  1119  031A                     	;# 
  1120  031C                     	;# 
  1121  031C                     	;# 
  1122  031D                     	;# 
  1123  031E                     	;# 
  1124  038C                     	;# 
  1125  038D                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  040C                     	;# 
  1130  040D                     	;# 
  1131  0411                     	;# 
  1132  0411                     	;# 
  1133  0412                     	;# 
  1134  0413                     	;# 
  1135  0414                     	;# 
  1136  0415                     	;# 
  1137  0416                     	;# 
  1138  0417                     	;# 
  1139  0418                     	;# 
  1140  0418                     	;# 
  1141  0419                     	;# 
  1142  041A                     	;# 
  1143  041B                     	;# 
  1144  041C                     	;# 
  1145  041D                     	;# 
  1146  041E                     	;# 
  1147  048D                     	;# 
  1148  0491                     	;# 
  1149  0491                     	;# 
  1150  0492                     	;# 
  1151  0492                     	;# 
  1152  0493                     	;# 
  1153  0493                     	;# 
  1154  0493                     	;# 
  1155  0494                     	;# 
  1156  0494                     	;# 
  1157  0495                     	;# 
  1158  0495                     	;# 
  1159  0496                     	;# 
  1160  0496                     	;# 
  1161  0497                     	;# 
  1162  0497                     	;# 
  1163  0595                     	;# 
  1164  0596                     	;# 
  1165  0597                     	;# 
  1166  059C                     	;# 
  1167  059D                     	;# 
  1168  059E                     	;# 
  1169  0611                     	;# 
  1170  0611                     	;# 
  1171  0612                     	;# 
  1172  0613                     	;# 
  1173  0614                     	;# 
  1174  0614                     	;# 
  1175  0615                     	;# 
  1176  0616                     	;# 
  1177  0617                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061D                     	;# 
  1186  061D                     	;# 
  1187  061E                     	;# 
  1188  061F                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  000E                     	;# 
  1215  000F                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0014                     	;# 
  1221  0015                     	;# 
  1222  0016                     	;# 
  1223  0016                     	;# 
  1224  0017                     	;# 
  1225  0018                     	;# 
  1226  0019                     	;# 
  1227  001A                     	;# 
  1228  001B                     	;# 
  1229  001C                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  008E                     	;# 
  1233  008F                     	;# 
  1234  0090                     	;# 
  1235  0091                     	;# 
  1236  0092                     	;# 
  1237  0093                     	;# 
  1238  0094                     	;# 
  1239  0095                     	;# 
  1240  0096                     	;# 
  1241  0097                     	;# 
  1242  0099                     	;# 
  1243  009A                     	;# 
  1244  009B                     	;# 
  1245  009B                     	;# 
  1246  009C                     	;# 
  1247  009D                     	;# 
  1248  009E                     	;# 
  1249  010C                     	;# 
  1250  010D                     	;# 
  1251  010E                     	;# 
  1252  010F                     	;# 
  1253  0110                     	;# 
  1254  0116                     	;# 
  1255  0117                     	;# 
  1256  011D                     	;# 
  1257  018C                     	;# 
  1258  018D                     	;# 
  1259  018F                     	;# 
  1260  0190                     	;# 
  1261  0191                     	;# 
  1262  0191                     	;# 
  1263  0192                     	;# 
  1264  0193                     	;# 
  1265  0193                     	;# 
  1266  0194                     	;# 
  1267  0195                     	;# 
  1268  0196                     	;# 
  1269  0197                     	;# 
  1270  0199                     	;# 
  1271  0199                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019A                     	;# 
  1275  019A                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019C                     	;# 
  1282  019C                     	;# 
  1283  019C                     	;# 
  1284  019D                     	;# 
  1285  019D                     	;# 
  1286  019D                     	;# 
  1287  019E                     	;# 
  1288  019E                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  020D                     	;# 
  1294  020F                     	;# 
  1295  0210                     	;# 
  1296  0211                     	;# 
  1297  0211                     	;# 
  1298  0212                     	;# 
  1299  0212                     	;# 
  1300  0213                     	;# 
  1301  0213                     	;# 
  1302  0214                     	;# 
  1303  0214                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0216                     	;# 
  1308  0216                     	;# 
  1309  0217                     	;# 
  1310  0217                     	;# 
  1311  0219                     	;# 
  1312  021A                     	;# 
  1313  021B                     	;# 
  1314  021C                     	;# 
  1315  021D                     	;# 
  1316  021E                     	;# 
  1317  021F                     	;# 
  1318  028C                     	;# 
  1319  028D                     	;# 
  1320  0291                     	;# 
  1321  0291                     	;# 
  1322  0292                     	;# 
  1323  0293                     	;# 
  1324  0298                     	;# 
  1325  0298                     	;# 
  1326  0299                     	;# 
  1327  029A                     	;# 
  1328  029D                     	;# 
  1329  029E                     	;# 
  1330  029F                     	;# 
  1331  030C                     	;# 
  1332  030D                     	;# 
  1333  0311                     	;# 
  1334  0311                     	;# 
  1335  0312                     	;# 
  1336  0313                     	;# 
  1337  0318                     	;# 
  1338  0318                     	;# 
  1339  0319                     	;# 
  1340  031A                     	;# 
  1341  031C                     	;# 
  1342  031C                     	;# 
  1343  031D                     	;# 
  1344  031E                     	;# 
  1345  038C                     	;# 
  1346  038D                     	;# 
  1347  0394                     	;# 
  1348  0395                     	;# 
  1349  0396                     	;# 
  1350  040C                     	;# 
  1351  040D                     	;# 
  1352  0411                     	;# 
  1353  0411                     	;# 
  1354  0412                     	;# 
  1355  0413                     	;# 
  1356  0414                     	;# 
  1357  0415                     	;# 
  1358  0416                     	;# 
  1359  0417                     	;# 
  1360  0418                     	;# 
  1361  0418                     	;# 
  1362  0419                     	;# 
  1363  041A                     	;# 
  1364  041B                     	;# 
  1365  041C                     	;# 
  1366  041D                     	;# 
  1367  041E                     	;# 
  1368  048D                     	;# 
  1369  0491                     	;# 
  1370  0491                     	;# 
  1371  0492                     	;# 
  1372  0492                     	;# 
  1373  0493                     	;# 
  1374  0493                     	;# 
  1375  0493                     	;# 
  1376  0494                     	;# 
  1377  0494                     	;# 
  1378  0495                     	;# 
  1379  0495                     	;# 
  1380  0496                     	;# 
  1381  0496                     	;# 
  1382  0497                     	;# 
  1383  0497                     	;# 
  1384  0595                     	;# 
  1385  0596                     	;# 
  1386  0597                     	;# 
  1387  059C                     	;# 
  1388  059D                     	;# 
  1389  059E                     	;# 
  1390  0611                     	;# 
  1391  0611                     	;# 
  1392  0612                     	;# 
  1393  0613                     	;# 
  1394  0614                     	;# 
  1395  0614                     	;# 
  1396  0615                     	;# 
  1397  0616                     	;# 
  1398  0617                     	;# 
  1399  0617                     	;# 
  1400  0618                     	;# 
  1401  0619                     	;# 
  1402  061A                     	;# 
  1403  061A                     	;# 
  1404  061B                     	;# 
  1405  061C                     	;# 
  1406  061D                     	;# 
  1407  061D                     	;# 
  1408  061E                     	;# 
  1409  061F                     	;# 
  1410  0FE4                     	;# 
  1411  0FE5                     	;# 
  1412  0FE6                     	;# 
  1413  0FE7                     	;# 
  1414  0FE8                     	;# 
  1415  0FE9                     	;# 
  1416  0FEA                     	;# 
  1417  0FEB                     	;# 
  1418  0FED                     	;# 
  1419  0FEE                     	;# 
  1420  0FEF                     	;# 
  1421  0000                     	;# 
  1422  0001                     	;# 
  1423  0002                     	;# 
  1424  0003                     	;# 
  1425  0004                     	;# 
  1426  0005                     	;# 
  1427  0006                     	;# 
  1428  0007                     	;# 
  1429  0008                     	;# 
  1430  0009                     	;# 
  1431  000A                     	;# 
  1432  000B                     	;# 
  1433  000C                     	;# 
  1434  000D                     	;# 
  1435  000E                     	;# 
  1436  000F                     	;# 
  1437  0010                     	;# 
  1438  0011                     	;# 
  1439  0012                     	;# 
  1440  0013                     	;# 
  1441  0014                     	;# 
  1442  0015                     	;# 
  1443  0016                     	;# 
  1444  0016                     	;# 
  1445  0017                     	;# 
  1446  0018                     	;# 
  1447  0019                     	;# 
  1448  001A                     	;# 
  1449  001B                     	;# 
  1450  001C                     	;# 
  1451  008C                     	;# 
  1452  008D                     	;# 
  1453  008E                     	;# 
  1454  008F                     	;# 
  1455  0090                     	;# 
  1456  0091                     	;# 
  1457  0092                     	;# 
  1458  0093                     	;# 
  1459  0094                     	;# 
  1460  0095                     	;# 
  1461  0096                     	;# 
  1462  0097                     	;# 
  1463  0099                     	;# 
  1464  009A                     	;# 
  1465  009B                     	;# 
  1466  009B                     	;# 
  1467  009C                     	;# 
  1468  009D                     	;# 
  1469  009E                     	;# 
  1470  010C                     	;# 
  1471  010D                     	;# 
  1472  010E                     	;# 
  1473  010F                     	;# 
  1474  0110                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  011D                     	;# 
  1478  018C                     	;# 
  1479  018D                     	;# 
  1480  018F                     	;# 
  1481  0190                     	;# 
  1482  0191                     	;# 
  1483  0191                     	;# 
  1484  0192                     	;# 
  1485  0193                     	;# 
  1486  0193                     	;# 
  1487  0194                     	;# 
  1488  0195                     	;# 
  1489  0196                     	;# 
  1490  0197                     	;# 
  1491  0199                     	;# 
  1492  0199                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019A                     	;# 
  1496  019A                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019C                     	;# 
  1503  019C                     	;# 
  1504  019C                     	;# 
  1505  019D                     	;# 
  1506  019D                     	;# 
  1507  019D                     	;# 
  1508  019E                     	;# 
  1509  019E                     	;# 
  1510  019E                     	;# 
  1511  019F                     	;# 
  1512  019F                     	;# 
  1513  019F                     	;# 
  1514  020D                     	;# 
  1515  020F                     	;# 
  1516  0210                     	;# 
  1517  0211                     	;# 
  1518  0211                     	;# 
  1519  0212                     	;# 
  1520  0212                     	;# 
  1521  0213                     	;# 
  1522  0213                     	;# 
  1523  0214                     	;# 
  1524  0214                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0216                     	;# 
  1529  0216                     	;# 
  1530  0217                     	;# 
  1531  0217                     	;# 
  1532  0219                     	;# 
  1533  021A                     	;# 
  1534  021B                     	;# 
  1535  021C                     	;# 
  1536  021D                     	;# 
  1537  021E                     	;# 
  1538  021F                     	;# 
  1539  028C                     	;# 
  1540  028D                     	;# 
  1541  0291                     	;# 
  1542  0291                     	;# 
  1543  0292                     	;# 
  1544  0293                     	;# 
  1545  0298                     	;# 
  1546  0298                     	;# 
  1547  0299                     	;# 
  1548  029A                     	;# 
  1549  029D                     	;# 
  1550  029E                     	;# 
  1551  029F                     	;# 
  1552  030C                     	;# 
  1553  030D                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  031C                     	;# 
  1563  031C                     	;# 
  1564  031D                     	;# 
  1565  031E                     	;# 
  1566  038C                     	;# 
  1567  038D                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  040C                     	;# 
  1572  040D                     	;# 
  1573  0411                     	;# 
  1574  0411                     	;# 
  1575  0412                     	;# 
  1576  0413                     	;# 
  1577  0414                     	;# 
  1578  0415                     	;# 
  1579  0416                     	;# 
  1580  0417                     	;# 
  1581  0418                     	;# 
  1582  0418                     	;# 
  1583  0419                     	;# 
  1584  041A                     	;# 
  1585  041B                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  048D                     	;# 
  1590  0491                     	;# 
  1591  0491                     	;# 
  1592  0492                     	;# 
  1593  0492                     	;# 
  1594  0493                     	;# 
  1595  0493                     	;# 
  1596  0493                     	;# 
  1597  0494                     	;# 
  1598  0494                     	;# 
  1599  0495                     	;# 
  1600  0495                     	;# 
  1601  0496                     	;# 
  1602  0496                     	;# 
  1603  0497                     	;# 
  1604  0497                     	;# 
  1605  0595                     	;# 
  1606  0596                     	;# 
  1607  0597                     	;# 
  1608  059C                     	;# 
  1609  059D                     	;# 
  1610  059E                     	;# 
  1611  0611                     	;# 
  1612  0611                     	;# 
  1613  0612                     	;# 
  1614  0613                     	;# 
  1615  0614                     	;# 
  1616  0614                     	;# 
  1617  0615                     	;# 
  1618  0616                     	;# 
  1619  0617                     	;# 
  1620  0617                     	;# 
  1621  0618                     	;# 
  1622  0619                     	;# 
  1623  061A                     	;# 
  1624  061A                     	;# 
  1625  061B                     	;# 
  1626  061C                     	;# 
  1627  061D                     	;# 
  1628  061D                     	;# 
  1629  061E                     	;# 
  1630  061F                     	;# 
  1631  0FE4                     	;# 
  1632  0FE5                     	;# 
  1633  0FE6                     	;# 
  1634  0FE7                     	;# 
  1635  0FE8                     	;# 
  1636  0FE9                     	;# 
  1637  0FEA                     	;# 
  1638  0FEB                     	;# 
  1639  0FED                     	;# 
  1640  0FEE                     	;# 
  1641  0FEF                     	;# 
  1642  0000                     	;# 
  1643  0001                     	;# 
  1644  0002                     	;# 
  1645  0003                     	;# 
  1646  0004                     	;# 
  1647  0005                     	;# 
  1648  0006                     	;# 
  1649  0007                     	;# 
  1650  0008                     	;# 
  1651  0009                     	;# 
  1652  000A                     	;# 
  1653  000B                     	;# 
  1654  000C                     	;# 
  1655  000D                     	;# 
  1656  000E                     	;# 
  1657  000F                     	;# 
  1658  0010                     	;# 
  1659  0011                     	;# 
  1660  0012                     	;# 
  1661  0013                     	;# 
  1662  0014                     	;# 
  1663  0015                     	;# 
  1664  0016                     	;# 
  1665  0016                     	;# 
  1666  0017                     	;# 
  1667  0018                     	;# 
  1668  0019                     	;# 
  1669  001A                     	;# 
  1670  001B                     	;# 
  1671  001C                     	;# 
  1672  008C                     	;# 
  1673  008D                     	;# 
  1674  008E                     	;# 
  1675  008F                     	;# 
  1676  0090                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0093                     	;# 
  1680  0094                     	;# 
  1681  0095                     	;# 
  1682  0096                     	;# 
  1683  0097                     	;# 
  1684  0099                     	;# 
  1685  009A                     	;# 
  1686  009B                     	;# 
  1687  009B                     	;# 
  1688  009C                     	;# 
  1689  009D                     	;# 
  1690  009E                     	;# 
  1691  010C                     	;# 
  1692  010D                     	;# 
  1693  010E                     	;# 
  1694  010F                     	;# 
  1695  0110                     	;# 
  1696  0116                     	;# 
  1697  0117                     	;# 
  1698  011D                     	;# 
  1699  018C                     	;# 
  1700  018D                     	;# 
  1701  018F                     	;# 
  1702  0190                     	;# 
  1703  0191                     	;# 
  1704  0191                     	;# 
  1705  0192                     	;# 
  1706  0193                     	;# 
  1707  0193                     	;# 
  1708  0194                     	;# 
  1709  0195                     	;# 
  1710  0196                     	;# 
  1711  0197                     	;# 
  1712  0199                     	;# 
  1713  0199                     	;# 
  1714  0199                     	;# 
  1715  019A                     	;# 
  1716  019A                     	;# 
  1717  019A                     	;# 
  1718  019B                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019C                     	;# 
  1724  019C                     	;# 
  1725  019C                     	;# 
  1726  019D                     	;# 
  1727  019D                     	;# 
  1728  019D                     	;# 
  1729  019E                     	;# 
  1730  019E                     	;# 
  1731  019E                     	;# 
  1732  019F                     	;# 
  1733  019F                     	;# 
  1734  019F                     	;# 
  1735  020D                     	;# 
  1736  020F                     	;# 
  1737  0210                     	;# 
  1738  0211                     	;# 
  1739  0211                     	;# 
  1740  0212                     	;# 
  1741  0212                     	;# 
  1742  0213                     	;# 
  1743  0213                     	;# 
  1744  0214                     	;# 
  1745  0214                     	;# 
  1746  0215                     	;# 
  1747  0215                     	;# 
  1748  0215                     	;# 
  1749  0216                     	;# 
  1750  0216                     	;# 
  1751  0217                     	;# 
  1752  0217                     	;# 
  1753  0219                     	;# 
  1754  021A                     	;# 
  1755  021B                     	;# 
  1756  021C                     	;# 
  1757  021D                     	;# 
  1758  021E                     	;# 
  1759  021F                     	;# 
  1760  028C                     	;# 
  1761  028D                     	;# 
  1762  0291                     	;# 
  1763  0291                     	;# 
  1764  0292                     	;# 
  1765  0293                     	;# 
  1766  0298                     	;# 
  1767  0298                     	;# 
  1768  0299                     	;# 
  1769  029A                     	;# 
  1770  029D                     	;# 
  1771  029E                     	;# 
  1772  029F                     	;# 
  1773  030C                     	;# 
  1774  030D                     	;# 
  1775  0311                     	;# 
  1776  0311                     	;# 
  1777  0312                     	;# 
  1778  0313                     	;# 
  1779  0318                     	;# 
  1780  0318                     	;# 
  1781  0319                     	;# 
  1782  031A                     	;# 
  1783  031C                     	;# 
  1784  031C                     	;# 
  1785  031D                     	;# 
  1786  031E                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  040C                     	;# 
  1793  040D                     	;# 
  1794  0411                     	;# 
  1795  0411                     	;# 
  1796  0412                     	;# 
  1797  0413                     	;# 
  1798  0414                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041B                     	;# 
  1807  041C                     	;# 
  1808  041D                     	;# 
  1809  041E                     	;# 
  1810  048D                     	;# 
  1811  0491                     	;# 
  1812  0491                     	;# 
  1813  0492                     	;# 
  1814  0492                     	;# 
  1815  0493                     	;# 
  1816  0493                     	;# 
  1817  0493                     	;# 
  1818  0494                     	;# 
  1819  0494                     	;# 
  1820  0495                     	;# 
  1821  0495                     	;# 
  1822  0496                     	;# 
  1823  0496                     	;# 
  1824  0497                     	;# 
  1825  0497                     	;# 
  1826  0595                     	;# 
  1827  0596                     	;# 
  1828  0597                     	;# 
  1829  059C                     	;# 
  1830  059D                     	;# 
  1831  059E                     	;# 
  1832  0611                     	;# 
  1833  0611                     	;# 
  1834  0612                     	;# 
  1835  0613                     	;# 
  1836  0614                     	;# 
  1837  0614                     	;# 
  1838  0615                     	;# 
  1839  0616                     	;# 
  1840  0617                     	;# 
  1841  0617                     	;# 
  1842  0618                     	;# 
  1843  0619                     	;# 
  1844  061A                     	;# 
  1845  061A                     	;# 
  1846  061B                     	;# 
  1847  061C                     	;# 
  1848  061D                     	;# 
  1849  061D                     	;# 
  1850  061E                     	;# 
  1851  061F                     	;# 
  1852  0FE4                     	;# 
  1853  0FE5                     	;# 
  1854  0FE6                     	;# 
  1855  0FE7                     	;# 
  1856  0FE8                     	;# 
  1857  0FE9                     	;# 
  1858  0FEA                     	;# 
  1859  0FEB                     	;# 
  1860  0FED                     	;# 
  1861  0FEE                     	;# 
  1862  0FEF                     	;# 
  1863  0000                     	;# 
  1864  0001                     	;# 
  1865  0002                     	;# 
  1866  0003                     	;# 
  1867  0004                     	;# 
  1868  0005                     	;# 
  1869  0006                     	;# 
  1870  0007                     	;# 
  1871  0008                     	;# 
  1872  0009                     	;# 
  1873  000A                     	;# 
  1874  000B                     	;# 
  1875  000C                     	;# 
  1876  000D                     	;# 
  1877  000E                     	;# 
  1878  000F                     	;# 
  1879  0010                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0013                     	;# 
  1883  0014                     	;# 
  1884  0015                     	;# 
  1885  0016                     	;# 
  1886  0016                     	;# 
  1887  0017                     	;# 
  1888  0018                     	;# 
  1889  0019                     	;# 
  1890  001A                     	;# 
  1891  001B                     	;# 
  1892  001C                     	;# 
  1893  008C                     	;# 
  1894  008D                     	;# 
  1895  008E                     	;# 
  1896  008F                     	;# 
  1897  0090                     	;# 
  1898  0091                     	;# 
  1899  0092                     	;# 
  1900  0093                     	;# 
  1901  0094                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0097                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  010F                     	;# 
  1916  0110                     	;# 
  1917  0116                     	;# 
  1918  0117                     	;# 
  1919  011D                     	;# 
  1920  018C                     	;# 
  1921  018D                     	;# 
  1922  018F                     	;# 
  1923  0190                     	;# 
  1924  0191                     	;# 
  1925  0191                     	;# 
  1926  0192                     	;# 
  1927  0193                     	;# 
  1928  0193                     	;# 
  1929  0194                     	;# 
  1930  0195                     	;# 
  1931  0196                     	;# 
  1932  0197                     	;# 
  1933  0199                     	;# 
  1934  0199                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019A                     	;# 
  1938  019A                     	;# 
  1939  019B                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019C                     	;# 
  1945  019C                     	;# 
  1946  019C                     	;# 
  1947  019D                     	;# 
  1948  019D                     	;# 
  1949  019D                     	;# 
  1950  019E                     	;# 
  1951  019E                     	;# 
  1952  019E                     	;# 
  1953  019F                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  020D                     	;# 
  1957  020F                     	;# 
  1958  0210                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0219                     	;# 
  1975  021A                     	;# 
  1976  021B                     	;# 
  1977  021C                     	;# 
  1978  021D                     	;# 
  1979  021E                     	;# 
  1980  021F                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  0291                     	;# 
  1984  0291                     	;# 
  1985  0292                     	;# 
  1986  0293                     	;# 
  1987  0298                     	;# 
  1988  0298                     	;# 
  1989  0299                     	;# 
  1990  029A                     	;# 
  1991  029D                     	;# 
  1992  029E                     	;# 
  1993  029F                     	;# 
  1994  030C                     	;# 
  1995  030D                     	;# 
  1996  0311                     	;# 
  1997  0311                     	;# 
  1998  0312                     	;# 
  1999  0313                     	;# 
  2000  0318                     	;# 
  2001  0318                     	;# 
  2002  0319                     	;# 
  2003  031A                     	;# 
  2004  031C                     	;# 
  2005  031C                     	;# 
  2006  031D                     	;# 
  2007  031E                     	;# 
  2008  038C                     	;# 
  2009  038D                     	;# 
  2010  0394                     	;# 
  2011  0395                     	;# 
  2012  0396                     	;# 
  2013  040C                     	;# 
  2014  040D                     	;# 
  2015  0411                     	;# 
  2016  0411                     	;# 
  2017  0412                     	;# 
  2018  0413                     	;# 
  2019  0414                     	;# 
  2020  0415                     	;# 
  2021  0416                     	;# 
  2022  0417                     	;# 
  2023  0418                     	;# 
  2024  0418                     	;# 
  2025  0419                     	;# 
  2026  041A                     	;# 
  2027  041B                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  048D                     	;# 
  2032  0491                     	;# 
  2033  0491                     	;# 
  2034  0492                     	;# 
  2035  0492                     	;# 
  2036  0493                     	;# 
  2037  0493                     	;# 
  2038  0493                     	;# 
  2039  0494                     	;# 
  2040  0494                     	;# 
  2041  0495                     	;# 
  2042  0495                     	;# 
  2043  0496                     	;# 
  2044  0496                     	;# 
  2045  0497                     	;# 
  2046  0497                     	;# 
  2047  0595                     	;# 
  2048  0596                     	;# 
  2049  0597                     	;# 
  2050  059C                     	;# 
  2051  059D                     	;# 
  2052  059E                     	;# 
  2053  0611                     	;# 
  2054  0611                     	;# 
  2055  0612                     	;# 
  2056  0613                     	;# 
  2057  0614                     	;# 
  2058  0614                     	;# 
  2059  0615                     	;# 
  2060  0616                     	;# 
  2061  0617                     	;# 
  2062  0617                     	;# 
  2063  0618                     	;# 
  2064  0619                     	;# 
  2065  061A                     	;# 
  2066  061A                     	;# 
  2067  061B                     	;# 
  2068  061C                     	;# 
  2069  061D                     	;# 
  2070  061D                     	;# 
  2071  061E                     	;# 
  2072  061F                     	;# 
  2073  0FE4                     	;# 
  2074  0FE5                     	;# 
  2075  0FE6                     	;# 
  2076  0FE7                     	;# 
  2077  0FE8                     	;# 
  2078  0FE9                     	;# 
  2079  0FEA                     	;# 
  2080  0FEB                     	;# 
  2081  0FED                     	;# 
  2082  0FEE                     	;# 
  2083  0FEF                     	;# 
  2084  0000                     	;# 
  2085  0001                     	;# 
  2086  0002                     	;# 
  2087  0003                     	;# 
  2088  0004                     	;# 
  2089  0005                     	;# 
  2090  0006                     	;# 
  2091  0007                     	;# 
  2092  0008                     	;# 
  2093  0009                     	;# 
  2094  000A                     	;# 
  2095  000B                     	;# 
  2096  000C                     	;# 
  2097  000D                     	;# 
  2098  000E                     	;# 
  2099  000F                     	;# 
  2100  0010                     	;# 
  2101  0011                     	;# 
  2102  0012                     	;# 
  2103  0013                     	;# 
  2104  0014                     	;# 
  2105  0015                     	;# 
  2106  0016                     	;# 
  2107  0016                     	;# 
  2108  0017                     	;# 
  2109  0018                     	;# 
  2110  0019                     	;# 
  2111  001A                     	;# 
  2112  001B                     	;# 
  2113  001C                     	;# 
  2114  008C                     	;# 
  2115  008D                     	;# 
  2116  008E                     	;# 
  2117  008F                     	;# 
  2118  0090                     	;# 
  2119  0091                     	;# 
  2120  0092                     	;# 
  2121  0093                     	;# 
  2122  0094                     	;# 
  2123  0095                     	;# 
  2124  0096                     	;# 
  2125  0097                     	;# 
  2126  0099                     	;# 
  2127  009A                     	;# 
  2128  009B                     	;# 
  2129  009B                     	;# 
  2130  009C                     	;# 
  2131  009D                     	;# 
  2132  009E                     	;# 
  2133  010C                     	;# 
  2134  010D                     	;# 
  2135  010E                     	;# 
  2136  010F                     	;# 
  2137  0110                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  011D                     	;# 
  2141  018C                     	;# 
  2142  018D                     	;# 
  2143  018F                     	;# 
  2144  0190                     	;# 
  2145  0191                     	;# 
  2146  0191                     	;# 
  2147  0192                     	;# 
  2148  0193                     	;# 
  2149  0193                     	;# 
  2150  0194                     	;# 
  2151  0195                     	;# 
  2152  0196                     	;# 
  2153  0197                     	;# 
  2154  0199                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  019A                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019C                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019D                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019E                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019F                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  020D                     	;# 
  2178  020F                     	;# 
  2179  0210                     	;# 
  2180  0211                     	;# 
  2181  0211                     	;# 
  2182  0212                     	;# 
  2183  0212                     	;# 
  2184  0213                     	;# 
  2185  0213                     	;# 
  2186  0214                     	;# 
  2187  0214                     	;# 
  2188  0215                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0216                     	;# 
  2192  0216                     	;# 
  2193  0217                     	;# 
  2194  0217                     	;# 
  2195  0219                     	;# 
  2196  021A                     	;# 
  2197  021B                     	;# 
  2198  021C                     	;# 
  2199  021D                     	;# 
  2200  021E                     	;# 
  2201  021F                     	;# 
  2202  028C                     	;# 
  2203  028D                     	;# 
  2204  0291                     	;# 
  2205  0291                     	;# 
  2206  0292                     	;# 
  2207  0293                     	;# 
  2208  0298                     	;# 
  2209  0298                     	;# 
  2210  0299                     	;# 
  2211  029A                     	;# 
  2212  029D                     	;# 
  2213  029E                     	;# 
  2214  029F                     	;# 
  2215  030C                     	;# 
  2216  030D                     	;# 
  2217  0311                     	;# 
  2218  0311                     	;# 
  2219  0312                     	;# 
  2220  0313                     	;# 
  2221  0318                     	;# 
  2222  0318                     	;# 
  2223  0319                     	;# 
  2224  031A                     	;# 
  2225  031C                     	;# 
  2226  031C                     	;# 
  2227  031D                     	;# 
  2228  031E                     	;# 
  2229  038C                     	;# 
  2230  038D                     	;# 
  2231  0394                     	;# 
  2232  0395                     	;# 
  2233  0396                     	;# 
  2234  040C                     	;# 
  2235  040D                     	;# 
  2236  0411                     	;# 
  2237  0411                     	;# 
  2238  0412                     	;# 
  2239  0413                     	;# 
  2240  0414                     	;# 
  2241  0415                     	;# 
  2242  0416                     	;# 
  2243  0417                     	;# 
  2244  0418                     	;# 
  2245  0418                     	;# 
  2246  0419                     	;# 
  2247  041A                     	;# 
  2248  041B                     	;# 
  2249  041C                     	;# 
  2250  041D                     	;# 
  2251  041E                     	;# 
  2252  048D                     	;# 
  2253  0491                     	;# 
  2254  0491                     	;# 
  2255  0492                     	;# 
  2256  0492                     	;# 
  2257  0493                     	;# 
  2258  0493                     	;# 
  2259  0493                     	;# 
  2260  0494                     	;# 
  2261  0494                     	;# 
  2262  0495                     	;# 
  2263  0495                     	;# 
  2264  0496                     	;# 
  2265  0496                     	;# 
  2266  0497                     	;# 
  2267  0497                     	;# 
  2268  0595                     	;# 
  2269  0596                     	;# 
  2270  0597                     	;# 
  2271  059C                     	;# 
  2272  059D                     	;# 
  2273  059E                     	;# 
  2274  0611                     	;# 
  2275  0611                     	;# 
  2276  0612                     	;# 
  2277  0613                     	;# 
  2278  0614                     	;# 
  2279  0614                     	;# 
  2280  0615                     	;# 
  2281  0616                     	;# 
  2282  0617                     	;# 
  2283  0617                     	;# 
  2284  0618                     	;# 
  2285  0619                     	;# 
  2286  061A                     	;# 
  2287  061A                     	;# 
  2288  061B                     	;# 
  2289  061C                     	;# 
  2290  061D                     	;# 
  2291  061D                     	;# 
  2292  061E                     	;# 
  2293  061F                     	;# 
  2294  0FE4                     	;# 
  2295  0FE5                     	;# 
  2296  0FE6                     	;# 
  2297  0FE7                     	;# 
  2298  0FE8                     	;# 
  2299  0FE9                     	;# 
  2300  0FEA                     	;# 
  2301  0FEB                     	;# 
  2302  0FED                     	;# 
  2303  0FEE                     	;# 
  2304  0FEF                     	;# 
  2305  0000                     	;# 
  2306  0001                     	;# 
  2307  0002                     	;# 
  2308  0003                     	;# 
  2309  0004                     	;# 
  2310  0005                     	;# 
  2311  0006                     	;# 
  2312  0007                     	;# 
  2313  0008                     	;# 
  2314  0009                     	;# 
  2315  000A                     	;# 
  2316  000B                     	;# 
  2317  000C                     	;# 
  2318  000D                     	;# 
  2319  000E                     	;# 
  2320  000F                     	;# 
  2321  0010                     	;# 
  2322  0011                     	;# 
  2323  0012                     	;# 
  2324  0013                     	;# 
  2325  0014                     	;# 
  2326  0015                     	;# 
  2327  0016                     	;# 
  2328  0016                     	;# 
  2329  0017                     	;# 
  2330  0018                     	;# 
  2331  0019                     	;# 
  2332  001A                     	;# 
  2333  001B                     	;# 
  2334  001C                     	;# 
  2335  008C                     	;# 
  2336  008D                     	;# 
  2337  008E                     	;# 
  2338  008F                     	;# 
  2339  0090                     	;# 
  2340  0091                     	;# 
  2341  0092                     	;# 
  2342  0093                     	;# 
  2343  0094                     	;# 
  2344  0095                     	;# 
  2345  0096                     	;# 
  2346  0097                     	;# 
  2347  0099                     	;# 
  2348  009A                     	;# 
  2349  009B                     	;# 
  2350  009B                     	;# 
  2351  009C                     	;# 
  2352  009D                     	;# 
  2353  009E                     	;# 
  2354  010C                     	;# 
  2355  010D                     	;# 
  2356  010E                     	;# 
  2357  010F                     	;# 
  2358  0110                     	;# 
  2359  0116                     	;# 
  2360  0117                     	;# 
  2361  011D                     	;# 
  2362  018C                     	;# 
  2363  018D                     	;# 
  2364  018F                     	;# 
  2365  0190                     	;# 
  2366  0191                     	;# 
  2367  0191                     	;# 
  2368  0192                     	;# 
  2369  0193                     	;# 
  2370  0193                     	;# 
  2371  0194                     	;# 
  2372  0195                     	;# 
  2373  0196                     	;# 
  2374  0197                     	;# 
  2375  0199                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  019A                     	;# 
  2379  019A                     	;# 
  2380  019A                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019C                     	;# 
  2387  019C                     	;# 
  2388  019C                     	;# 
  2389  019D                     	;# 
  2390  019D                     	;# 
  2391  019D                     	;# 
  2392  019E                     	;# 
  2393  019E                     	;# 
  2394  019E                     	;# 
  2395  019F                     	;# 
  2396  019F                     	;# 
  2397  019F                     	;# 
  2398  020D                     	;# 
  2399  020F                     	;# 
  2400  0210                     	;# 
  2401  0211                     	;# 
  2402  0211                     	;# 
  2403  0212                     	;# 
  2404  0212                     	;# 
  2405  0213                     	;# 
  2406  0213                     	;# 
  2407  0214                     	;# 
  2408  0214                     	;# 
  2409  0215                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0216                     	;# 
  2413  0216                     	;# 
  2414  0217                     	;# 
  2415  0217                     	;# 
  2416  0219                     	;# 
  2417  021A                     	;# 
  2418  021B                     	;# 
  2419  021C                     	;# 
  2420  021D                     	;# 
  2421  021E                     	;# 
  2422  021F                     	;# 
  2423  028C                     	;# 
  2424  028D                     	;# 
  2425  0291                     	;# 
  2426  0291                     	;# 
  2427  0292                     	;# 
  2428  0293                     	;# 
  2429  0298                     	;# 
  2430  0298                     	;# 
  2431  0299                     	;# 
  2432  029A                     	;# 
  2433  029D                     	;# 
  2434  029E                     	;# 
  2435  029F                     	;# 
  2436  030C                     	;# 
  2437  030D                     	;# 
  2438  0311                     	;# 
  2439  0311                     	;# 
  2440  0312                     	;# 
  2441  0313                     	;# 
  2442  0318                     	;# 
  2443  0318                     	;# 
  2444  0319                     	;# 
  2445  031A                     	;# 
  2446  031C                     	;# 
  2447  031C                     	;# 
  2448  031D                     	;# 
  2449  031E                     	;# 
  2450  038C                     	;# 
  2451  038D                     	;# 
  2452  0394                     	;# 
  2453  0395                     	;# 
  2454  0396                     	;# 
  2455  040C                     	;# 
  2456  040D                     	;# 
  2457  0411                     	;# 
  2458  0411                     	;# 
  2459  0412                     	;# 
  2460  0413                     	;# 
  2461  0414                     	;# 
  2462  0415                     	;# 
  2463  0416                     	;# 
  2464  0417                     	;# 
  2465  0418                     	;# 
  2466  0418                     	;# 
  2467  0419                     	;# 
  2468  041A                     	;# 
  2469  041B                     	;# 
  2470  041C                     	;# 
  2471  041D                     	;# 
  2472  041E                     	;# 
  2473  048D                     	;# 
  2474  0491                     	;# 
  2475  0491                     	;# 
  2476  0492                     	;# 
  2477  0492                     	;# 
  2478  0493                     	;# 
  2479  0493                     	;# 
  2480  0493                     	;# 
  2481  0494                     	;# 
  2482  0494                     	;# 
  2483  0495                     	;# 
  2484  0495                     	;# 
  2485  0496                     	;# 
  2486  0496                     	;# 
  2487  0497                     	;# 
  2488  0497                     	;# 
  2489  0595                     	;# 
  2490  0596                     	;# 
  2491  0597                     	;# 
  2492  059C                     	;# 
  2493  059D                     	;# 
  2494  059E                     	;# 
  2495  0611                     	;# 
  2496  0611                     	;# 
  2497  0612                     	;# 
  2498  0613                     	;# 
  2499  0614                     	;# 
  2500  0614                     	;# 
  2501  0615                     	;# 
  2502  0616                     	;# 
  2503  0617                     	;# 
  2504  0617                     	;# 
  2505  0618                     	;# 
  2506  0619                     	;# 
  2507  061A                     	;# 
  2508  061A                     	;# 
  2509  061B                     	;# 
  2510  061C                     	;# 
  2511  061D                     	;# 
  2512  061D                     	;# 
  2513  061E                     	;# 
  2514  061F                     	;# 
  2515  0FE4                     	;# 
  2516  0FE5                     	;# 
  2517  0FE6                     	;# 
  2518  0FE7                     	;# 
  2519  0FE8                     	;# 
  2520  0FE9                     	;# 
  2521  0FEA                     	;# 
  2522  0FEB                     	;# 
  2523  0FED                     	;# 
  2524  0FEE                     	;# 
  2525  0FEF                     	;# 
  2526  0000                     	;# 
  2527  0001                     	;# 
  2528  0002                     	;# 
  2529  0003                     	;# 
  2530  0004                     	;# 
  2531  0005                     	;# 
  2532  0006                     	;# 
  2533  0007                     	;# 
  2534  0008                     	;# 
  2535  0009                     	;# 
  2536  000A                     	;# 
  2537  000B                     	;# 
  2538  000C                     	;# 
  2539  000D                     	;# 
  2540  000E                     	;# 
  2541  000F                     	;# 
  2542  0010                     	;# 
  2543  0011                     	;# 
  2544  0012                     	;# 
  2545  0013                     	;# 
  2546  0014                     	;# 
  2547  0015                     	;# 
  2548  0016                     	;# 
  2549  0016                     	;# 
  2550  0017                     	;# 
  2551  0018                     	;# 
  2552  0019                     	;# 
  2553  001A                     	;# 
  2554  001B                     	;# 
  2555  001C                     	;# 
  2556  008C                     	;# 
  2557  008D                     	;# 
  2558  008E                     	;# 
  2559  008F                     	;# 
  2560  0090                     	;# 
  2561  0091                     	;# 
  2562  0092                     	;# 
  2563  0093                     	;# 
  2564  0094                     	;# 
  2565  0095                     	;# 
  2566  0096                     	;# 
  2567  0097                     	;# 
  2568  0099                     	;# 
  2569  009A                     	;# 
  2570  009B                     	;# 
  2571  009B                     	;# 
  2572  009C                     	;# 
  2573  009D                     	;# 
  2574  009E                     	;# 
  2575  010C                     	;# 
  2576  010D                     	;# 
  2577  010E                     	;# 
  2578  010F                     	;# 
  2579  0110                     	;# 
  2580  0116                     	;# 
  2581  0117                     	;# 
  2582  011D                     	;# 
  2583  018C                     	;# 
  2584  018D                     	;# 
  2585  018F                     	;# 
  2586  0190                     	;# 
  2587  0191                     	;# 
  2588  0191                     	;# 
  2589  0192                     	;# 
  2590  0193                     	;# 
  2591  0193                     	;# 
  2592  0194                     	;# 
  2593  0195                     	;# 
  2594  0196                     	;# 
  2595  0197                     	;# 
  2596  0199                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  019A                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019B                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019C                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019D                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019E                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019F                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  020D                     	;# 
  2620  020F                     	;# 
  2621  0210                     	;# 
  2622  0211                     	;# 
  2623  0211                     	;# 
  2624  0212                     	;# 
  2625  0212                     	;# 
  2626  0213                     	;# 
  2627  0213                     	;# 
  2628  0214                     	;# 
  2629  0214                     	;# 
  2630  0215                     	;# 
  2631  0215                     	;# 
  2632  0215                     	;# 
  2633  0216                     	;# 
  2634  0216                     	;# 
  2635  0217                     	;# 
  2636  0217                     	;# 
  2637  0219                     	;# 
  2638  021A                     	;# 
  2639  021B                     	;# 
  2640  021C                     	;# 
  2641  021D                     	;# 
  2642  021E                     	;# 
  2643  021F                     	;# 
  2644  028C                     	;# 
  2645  028D                     	;# 
  2646  0291                     	;# 
  2647  0291                     	;# 
  2648  0292                     	;# 
  2649  0293                     	;# 
  2650  0298                     	;# 
  2651  0298                     	;# 
  2652  0299                     	;# 
  2653  029A                     	;# 
  2654  029D                     	;# 
  2655  029E                     	;# 
  2656  029F                     	;# 
  2657  030C                     	;# 
  2658  030D                     	;# 
  2659  0311                     	;# 
  2660  0311                     	;# 
  2661  0312                     	;# 
  2662  0313                     	;# 
  2663  0318                     	;# 
  2664  0318                     	;# 
  2665  0319                     	;# 
  2666  031A                     	;# 
  2667  031C                     	;# 
  2668  031C                     	;# 
  2669  031D                     	;# 
  2670  031E                     	;# 
  2671  038C                     	;# 
  2672  038D                     	;# 
  2673  0394                     	;# 
  2674  0395                     	;# 
  2675  0396                     	;# 
  2676  040C                     	;# 
  2677  040D                     	;# 
  2678  0411                     	;# 
  2679  0411                     	;# 
  2680  0412                     	;# 
  2681  0413                     	;# 
  2682  0414                     	;# 
  2683  0415                     	;# 
  2684  0416                     	;# 
  2685  0417                     	;# 
  2686  0418                     	;# 
  2687  0418                     	;# 
  2688  0419                     	;# 
  2689  041A                     	;# 
  2690  041B                     	;# 
  2691  041C                     	;# 
  2692  041D                     	;# 
  2693  041E                     	;# 
  2694  048D                     	;# 
  2695  0491                     	;# 
  2696  0491                     	;# 
  2697  0492                     	;# 
  2698  0492                     	;# 
  2699  0493                     	;# 
  2700  0493                     	;# 
  2701  0493                     	;# 
  2702  0494                     	;# 
  2703  0494                     	;# 
  2704  0495                     	;# 
  2705  0495                     	;# 
  2706  0496                     	;# 
  2707  0496                     	;# 
  2708  0497                     	;# 
  2709  0497                     	;# 
  2710  0595                     	;# 
  2711  0596                     	;# 
  2712  0597                     	;# 
  2713  059C                     	;# 
  2714  059D                     	;# 
  2715  059E                     	;# 
  2716  0611                     	;# 
  2717  0611                     	;# 
  2718  0612                     	;# 
  2719  0613                     	;# 
  2720  0614                     	;# 
  2721  0614                     	;# 
  2722  0615                     	;# 
  2723  0616                     	;# 
  2724  0617                     	;# 
  2725  0617                     	;# 
  2726  0618                     	;# 
  2727  0619                     	;# 
  2728  061A                     	;# 
  2729  061A                     	;# 
  2730  061B                     	;# 
  2731  061C                     	;# 
  2732  061D                     	;# 
  2733  061D                     	;# 
  2734  061E                     	;# 
  2735  061F                     	;# 
  2736  0FE4                     	;# 
  2737  0FE5                     	;# 
  2738  0FE6                     	;# 
  2739  0FE7                     	;# 
  2740  0FE8                     	;# 
  2741  0FE9                     	;# 
  2742  0FEA                     	;# 
  2743  0FEB                     	;# 
  2744  0FED                     	;# 
  2745  0FEE                     	;# 
  2746  0FEF                     	;_delayArray
  2747                           
  2748                           	psect	idataCOMMON
  2749  07FE                     __pidataCOMMON:	
  2750                           
  2751                           ;initializer for _blink_rate
  2752  07FE  3414               	retlw	20
  2753                           
  2754                           	psect	idataBANK0
  2755  1E0F                     __pidataBANK0:	
  2756                           
  2757                           ;initializer for _baseline_delay_time
  2758  1E0F  34D0               	retlw	208
  2759  1E10  3407               	retlw	7
  2760  1E11  3400               	retlw	0
  2761  1E12  3400               	retlw	0
  2762                           
  2763                           ;initializer for _delay_time
  2764  1E13  34D0               	retlw	208
  2765  1E14  3407               	retlw	7
  2766  1E15  3400               	retlw	0
  2767  1E16  3400               	retlw	0
  2768                           
  2769                           ;initializer for _bottom_push_state
  2770  1E17  3406               	retlw	6
  2771  1E18  3400               	retlw	0
  2772                           
  2773                           ;initializer for _long_press_limit
  2774  1E19  34E8               	retlw	232
  2775  1E1A  3403               	retlw	3
  2776                           
  2777                           ;initializer for _top_push_state
  2778  1E1B  3406               	retlw	6
  2779  1E1C  3400               	retlw	0
  2780                           
  2781                           ;initializer for _feedback_state
  2782  1E1D  34FF               	retlw	255
  2783                           
  2784                           ;initializer for _longTap_state
  2785  1E1E  34FF               	retlw	255
  2786                           
  2787                           ;initializer for _num_taps
  2788  1E1F  3404               	retlw	4
  2789                           
  2790                           ;initializer for _switchBypass_state
  2791  1E20  34FF               	retlw	255
  2792                           
  2793                           	psect	idataBANK2
  2794  1001                     __pidataBANK2:	
  2795                           
  2796                           ;initializer for _knob1_prev
  2797  1001  34D0               	retlw	208
  2798  1002  3407               	retlw	7
  2799                           
  2800                           ;initializer for _knob2_prev
  2801  1003  34D0               	retlw	208
  2802  1004  3407               	retlw	7
  2803                           
  2804                           ;initializer for _knob3_prev
  2805  1005  34D0               	retlw	208
  2806  1006  3407               	retlw	7
  2807                           
  2808                           ;initializer for _knob4_prev
  2809  1007  34D0               	retlw	208
  2810  1008  3407               	retlw	7
  2811                           
  2812                           ;initializer for _knob5_prev
  2813  1009  34D0               	retlw	208
  2814  100A  3407               	retlw	7
  2815                           
  2816                           ;initializer for _currentBypassState
  2817  100B  34FF               	retlw	255
  2818                           
  2819                           ;initializer for _switchTap_state
  2820  100C  34FF               	retlw	255
  2821                           
  2822                           	psect	idataBANK3
  2823  1DDD                     __pidataBANK3:	
  2824                           
  2825                           ;initializer for _blink_delay
  2826  1DDD  3464               	retlw	100
  2827  1DDE  3400               	retlw	0
  2828                           
  2829                           ;initializer for _delay_time_changed
  2830  1DDF  3401               	retlw	1
  2831  1DE0  3400               	retlw	0
  2832                           
  2833                           ;initializer for _mod_delay_time
  2834  1DE1  34D0               	retlw	208
  2835  1DE2  3407               	retlw	7
  2836                           
  2837                           ;initializer for _switchBypass_up
  2838  1DE3  3401               	retlw	1
  2839  1DE4  3400               	retlw	0
  2840                           
  2841                           ;initializer for _tap_iteration
  2842  1DE5  3401               	retlw	1
  2843  1DE6  3400               	retlw	0
  2844                           
  2845                           ;initializer for _blink_state
  2846  1DE7  3401               	retlw	1
  2847                           
  2848                           	psect	idataBANK4
  2849  1EEC                     __pidataBANK4:	
  2850                           
  2851                           ;initializer for _B25k
  2852  1EEC  34FF               	retlw	255
  2853  1EED  34FF               	retlw	255
  2854  1EEE  34FF               	retlw	255
  2855  1EEF  34DF               	retlw	223
  2856  1EF0  34AE               	retlw	174
  2857  1EF1  348E               	retlw	142
  2858  1EF2  3478               	retlw	120
  2859  1EF3  3467               	retlw	103
  2860  1EF4  345B               	retlw	91
  2861  1EF5  3450               	retlw	80
  2862  1EF6  3448               	retlw	72
  2863  1EF7  3442               	retlw	66
  2864  1EF8  343C               	retlw	60
  2865  1EF9  3437               	retlw	55
  2866  1EFA  3433               	retlw	51
  2867  1EFB  3430               	retlw	48
  2868  1EFC  342D               	retlw	45
  2869  1EFD  342A               	retlw	42
  2870  1EFE  3427               	retlw	39
  2871  1EFF  3425               	retlw	37
  2872  1F00  3423               	retlw	35
  2873  1F01  3421               	retlw	33
  2874  1F02  3420               	retlw	32
  2875  1F03  341E               	retlw	30
  2876  1F04  341D               	retlw	29
  2877  1F05  341C               	retlw	28
  2878  1F06  341B               	retlw	27
  2879  1F07  341A               	retlw	26
  2880  1F08  3419               	retlw	25
  2881  1F09  3418               	retlw	24
  2882  1F0A  3417               	retlw	23
  2883  1F0B  3416               	retlw	22
  2884  1F0C  3415               	retlw	21
  2885  1F0D  3415               	retlw	21
  2886  1F0E  3414               	retlw	20
  2887  1F0F  3413               	retlw	19
  2888  1F10  340F               	retlw	15
  2889  1F11  340B               	retlw	11
  2890  1F12  3407               	retlw	7
  2891  1F13  3407               	retlw	7
  2892                           
  2893                           	psect	idataBANK6
  2894  1131                     __pidataBANK6:	
  2895                           
  2896                           ;initializer for _mod1
  2897  1131  3400               	retlw	0
  2898  1132  340A               	retlw	10
  2899  1133  3414               	retlw	20
  2900  1134  341E               	retlw	30
  2901  1135  3428               	retlw	40
  2902  1136  3432               	retlw	50
  2903  1137  343A               	retlw	58
  2904  1138  3442               	retlw	66
  2905  1139  344A               	retlw	74
  2906  113A  3450               	retlw	80
  2907  113B  3456               	retlw	86
  2908  113C  345B               	retlw	91
  2909  113D  345F               	retlw	95
  2910  113E  3461               	retlw	97
  2911  113F  3463               	retlw	99
  2912  1140  3464               	retlw	100
  2913  1141  3463               	retlw	99
  2914  1142  3461               	retlw	97
  2915  1143  345F               	retlw	95
  2916  1144  345B               	retlw	91
  2917  1145  3456               	retlw	86
  2918  1146  3450               	retlw	80
  2919  1147  344A               	retlw	74
  2920  1148  3442               	retlw	66
  2921  1149  343A               	retlw	58
  2922  114A  3432               	retlw	50
  2923  114B  3428               	retlw	40
  2924  114C  341E               	retlw	30
  2925  114D  3414               	retlw	20
  2926  114E  340A               	retlw	10
  2927  114F  3400               	retlw	0
  2928  1150  34F6               	retlw	-10
  2929  1151  34EC               	retlw	-20
  2930  1152  34E2               	retlw	-30
  2931  1153  34D8               	retlw	-40
  2932  1154  34CE               	retlw	-50
  2933  1155  34C6               	retlw	-58
  2934  1156  34BE               	retlw	-66
  2935  1157  34B6               	retlw	-74
  2936  1158  34B0               	retlw	-80
  2937  1159  34AA               	retlw	-86
  2938  115A  34A5               	retlw	-91
  2939  115B  34A1               	retlw	-95
  2940  115C  349F               	retlw	-97
  2941  115D  349D               	retlw	-99
  2942  115E  349C               	retlw	-100
  2943  115F  349D               	retlw	-99
  2944  1160  349F               	retlw	-97
  2945  1161  34A1               	retlw	-95
  2946  1162  34A5               	retlw	-91
  2947  1163  34AA               	retlw	-86
  2948  1164  34B0               	retlw	-80
  2949  1165  34B6               	retlw	-74
  2950  1166  34BE               	retlw	-66
  2951  1167  34C6               	retlw	-58
  2952  1168  34CE               	retlw	-50
  2953  1169  34D8               	retlw	-40
  2954  116A  34E2               	retlw	-30
  2955  116B  34EC               	retlw	-20
  2956  116C  34F6               	retlw	-10
  2957  116D  3400               	retlw	0
  2958                           
  2959                           	psect	idataBANK7
  2960  10F4                     __pidataBANK7:	
  2961                           
  2962                           ;initializer for _mod2
  2963  10F4  3400               	retlw	0
  2964  10F5  3407               	retlw	7
  2965  10F6  340D               	retlw	13
  2966  10F7  3414               	retlw	20
  2967  10F8  341B               	retlw	27
  2968  10F9  3421               	retlw	33
  2969  10FA  3428               	retlw	40
  2970  10FB  342F               	retlw	47
  2971  10FC  3435               	retlw	53
  2972  10FD  343C               	retlw	60
  2973  10FE  3443               	retlw	67
  2974  10FF  3449               	retlw	73
  2975  1100  3450               	retlw	80
  2976  1101  3457               	retlw	87
  2977  1102  345D               	retlw	93
  2978  1103  3464               	retlw	100
  2979  1104  345D               	retlw	93
  2980  1105  3457               	retlw	87
  2981  1106  3450               	retlw	80
  2982  1107  3449               	retlw	73
  2983  1108  3443               	retlw	67
  2984  1109  343C               	retlw	60
  2985  110A  3435               	retlw	53
  2986  110B  342F               	retlw	47
  2987  110C  3428               	retlw	40
  2988  110D  3421               	retlw	33
  2989  110E  341B               	retlw	27
  2990  110F  3414               	retlw	20
  2991  1110  340D               	retlw	13
  2992  1111  3407               	retlw	7
  2993  1112  3400               	retlw	0
  2994  1113  34F9               	retlw	-7
  2995  1114  34F3               	retlw	-13
  2996  1115  34EC               	retlw	-20
  2997  1116  34E5               	retlw	-27
  2998  1117  34DF               	retlw	-33
  2999  1118  34D8               	retlw	-40
  3000  1119  34D1               	retlw	-47
  3001  111A  34CB               	retlw	-53
  3002  111B  34C4               	retlw	-60
  3003  111C  34BD               	retlw	-67
  3004  111D  34B7               	retlw	-73
  3005  111E  34B0               	retlw	-80
  3006  111F  34A9               	retlw	-87
  3007  1120  34A3               	retlw	-93
  3008  1121  349C               	retlw	-100
  3009  1122  34A3               	retlw	-93
  3010  1123  34A9               	retlw	-87
  3011  1124  34B0               	retlw	-80
  3012  1125  34B7               	retlw	-73
  3013  1126  34BD               	retlw	-67
  3014  1127  34C4               	retlw	-60
  3015  1128  34CB               	retlw	-53
  3016  1129  34D1               	retlw	-47
  3017  112A  34D8               	retlw	-40
  3018  112B  34DF               	retlw	-33
  3019  112C  34E5               	retlw	-27
  3020  112D  34EC               	retlw	-20
  3021  112E  34F3               	retlw	-13
  3022  112F  34F9               	retlw	-7
  3023  1130  3400               	retlw	0
  3024                           
  3025                           	psect	idataBANK8
  3026  10B7                     __pidataBANK8:	
  3027                           
  3028                           ;initializer for _mod3
  3029  10B7  3400               	retlw	0
  3030  10B8  3403               	retlw	3
  3031  10B9  3407               	retlw	7
  3032  10BA  340A               	retlw	10
  3033  10BB  340D               	retlw	13
  3034  10BC  3411               	retlw	17
  3035  10BD  3414               	retlw	20
  3036  10BE  3417               	retlw	23
  3037  10BF  341B               	retlw	27
  3038  10C0  341E               	retlw	30
  3039  10C1  3421               	retlw	33
  3040  10C2  3425               	retlw	37
  3041  10C3  3428               	retlw	40
  3042  10C4  342B               	retlw	43
  3043  10C5  342F               	retlw	47
  3044  10C6  3432               	retlw	50
  3045  10C7  3435               	retlw	53
  3046  10C8  3439               	retlw	57
  3047  10C9  343C               	retlw	60
  3048  10CA  343F               	retlw	63
  3049  10CB  3443               	retlw	67
  3050  10CC  3446               	retlw	70
  3051  10CD  3449               	retlw	73
  3052  10CE  344D               	retlw	77
  3053  10CF  3450               	retlw	80
  3054  10D0  3453               	retlw	83
  3055  10D1  3457               	retlw	87
  3056  10D2  345A               	retlw	90
  3057  10D3  345D               	retlw	93
  3058  10D4  3461               	retlw	97
  3059  10D5  3464               	retlw	100
  3060  10D6  349F               	retlw	-97
  3061  10D7  34A3               	retlw	-93
  3062  10D8  34A6               	retlw	-90
  3063  10D9  34A9               	retlw	-87
  3064  10DA  34AD               	retlw	-83
  3065  10DB  34B0               	retlw	-80
  3066  10DC  34B3               	retlw	-77
  3067  10DD  34B7               	retlw	-73
  3068  10DE  34BA               	retlw	-70
  3069  10DF  34BD               	retlw	-67
  3070  10E0  34C1               	retlw	-63
  3071  10E1  34C4               	retlw	-60
  3072  10E2  34C7               	retlw	-57
  3073  10E3  34CB               	retlw	-53
  3074  10E4  34CE               	retlw	-50
  3075  10E5  34D1               	retlw	-47
  3076  10E6  34D5               	retlw	-43
  3077  10E7  34D8               	retlw	-40
  3078  10E8  34DB               	retlw	-37
  3079  10E9  34DF               	retlw	-33
  3080  10EA  34E2               	retlw	-30
  3081  10EB  34E5               	retlw	-27
  3082  10EC  34E9               	retlw	-23
  3083  10ED  34EC               	retlw	-20
  3084  10EE  34EF               	retlw	-17
  3085  10EF  34F3               	retlw	-13
  3086  10F0  34F6               	retlw	-10
  3087  10F1  34F9               	retlw	-7
  3088  10F2  34FD               	retlw	-3
  3089  10F3  3400               	retlw	0
  3090                           
  3091                           	psect	idataBIGRAM
  3092  0DF8                     __pidataBIGRAM:	
  3093                           
  3094                           ;initializer for _delayArray
  3095  0DF8  3422               	retlw	34
  3096  0DF9  3408               	retlw	8
  3097  0DFA  34FC               	retlw	252
  3098  0DFB  3407               	retlw	7
  3099  0DFC  34D8               	retlw	216
  3100  0DFD  3407               	retlw	7
  3101  0DFE  34B5               	retlw	181
  3102  0DFF  3407               	retlw	7
  3103  0E00  3493               	retlw	147
  3104  0E01  3407               	retlw	7
  3105  0E02  3472               	retlw	114
  3106  0E03  3407               	retlw	7
  3107  0E04  3452               	retlw	82
  3108  0E05  3407               	retlw	7
  3109  0E06  3434               	retlw	52
  3110  0E07  3407               	retlw	7
  3111  0E08  3416               	retlw	22
  3112  0E09  3407               	retlw	7
  3113  0E0A  34F9               	retlw	249
  3114  0E0B  3406               	retlw	6
  3115  0E0C  34DD               	retlw	221
  3116  0E0D  3406               	retlw	6
  3117  0E0E  34C2               	retlw	194
  3118  0E0F  3406               	retlw	6
  3119  0E10  34A8               	retlw	168
  3120  0E11  3406               	retlw	6
  3121  0E12  348F               	retlw	143
  3122  0E13  3406               	retlw	6
  3123  0E14  3476               	retlw	118
  3124  0E15  3406               	retlw	6
  3125  0E16  345E               	retlw	94
  3126  0E17  3406               	retlw	6
  3127  0E18  3447               	retlw	71
  3128  0E19  3406               	retlw	6
  3129  0E1A  3430               	retlw	48
  3130  0E1B  3406               	retlw	6
  3131  0E1C  341A               	retlw	26
  3132  0E1D  3406               	retlw	6
  3133  0E1E  3405               	retlw	5
  3134  0E1F  3406               	retlw	6
  3135  0E20  34F0               	retlw	240
  3136  0E21  3405               	retlw	5
  3137  0E22  34DC               	retlw	220
  3138  0E23  3405               	retlw	5
  3139  0E24  34C8               	retlw	200
  3140  0E25  3405               	retlw	5
  3141  0E26  34B5               	retlw	181
  3142  0E27  3405               	retlw	5
  3143  0E28  34A3               	retlw	163
  3144  0E29  3405               	retlw	5
  3145  0E2A  3490               	retlw	144
  3146  0E2B  3405               	retlw	5
  3147  0E2C  347F               	retlw	127
  3148  0E2D  3405               	retlw	5
  3149  0E2E  346D               	retlw	109
  3150  0E2F  3405               	retlw	5
  3151  0E30  345C               	retlw	92
  3152  0E31  3405               	retlw	5
  3153  0E32  344C               	retlw	76
  3154  0E33  3405               	retlw	5
  3155  0E34  343C               	retlw	60
  3156  0E35  3405               	retlw	5
  3157  0E36  342C               	retlw	44
  3158  0E37  3405               	retlw	5
  3159  0E38  341D               	retlw	29
  3160  0E39  3405               	retlw	5
  3161  0E3A  340E               	retlw	14
  3162  0E3B  3405               	retlw	5
  3163  0E3C  34FF               	retlw	255
  3164  0E3D  3404               	retlw	4
  3165  0E3E  34F1               	retlw	241
  3166  0E3F  3404               	retlw	4
  3167  0E40  34E2               	retlw	226
  3168  0E41  3404               	retlw	4
  3169  0E42  34D5               	retlw	213
  3170  0E43  3404               	retlw	4
  3171  0E44  34C7               	retlw	199
  3172  0E45  3404               	retlw	4
  3173  0E46  34BA               	retlw	186
  3174  0E47  3404               	retlw	4
  3175  0E48  34AD               	retlw	173
  3176  0E49  3404               	retlw	4
  3177  0E4A  34A1               	retlw	161
  3178  0E4B  3404               	retlw	4
  3179  0E4C  3494               	retlw	148
  3180  0E4D  3404               	retlw	4
  3181  0E4E  3488               	retlw	136
  3182  0E4F  3404               	retlw	4
  3183  0E50  347D               	retlw	125
  3184  0E51  3404               	retlw	4
  3185  0E52  3471               	retlw	113
  3186  0E53  3404               	retlw	4
  3187  0E54  3466               	retlw	102
  3188  0E55  3404               	retlw	4
  3189  0E56  345A               	retlw	90
  3190  0E57  3404               	retlw	4
  3191  0E58  3450               	retlw	80
  3192  0E59  3404               	retlw	4
  3193  0E5A  3445               	retlw	69
  3194  0E5B  3404               	retlw	4
  3195  0E5C  343A               	retlw	58
  3196  0E5D  3404               	retlw	4
  3197  0E5E  3430               	retlw	48
  3198  0E5F  3404               	retlw	4
  3199  0E60  3426               	retlw	38
  3200  0E61  3404               	retlw	4
  3201  0E62  341C               	retlw	28
  3202  0E63  3404               	retlw	4
  3203  0E64  3412               	retlw	18
  3204  0E65  3404               	retlw	4
  3205  0E66  3409               	retlw	9
  3206  0E67  3404               	retlw	4
  3207  0E68  34FF               	retlw	255
  3208  0E69  3403               	retlw	3
  3209  0E6A  34F6               	retlw	246
  3210  0E6B  3403               	retlw	3
  3211  0E6C  34ED               	retlw	237
  3212  0E6D  3403               	retlw	3
  3213  0E6E  34E4               	retlw	228
  3214  0E6F  3403               	retlw	3
  3215  0E70  34DC               	retlw	220
  3216  0E71  3403               	retlw	3
  3217  0E72  34D3               	retlw	211
  3218  0E73  3403               	retlw	3
  3219  0E74  34CB               	retlw	203
  3220  0E75  3403               	retlw	3
  3221  0E76  34C2               	retlw	194
  3222  0E77  3403               	retlw	3
  3223  0E78  34BA               	retlw	186
  3224  0E79  3403               	retlw	3
  3225  0E7A  34B2               	retlw	178
  3226  0E7B  3403               	retlw	3
  3227  0E7C  34AA               	retlw	170
  3228  0E7D  3403               	retlw	3
  3229  0E7E  34A2               	retlw	162
  3230  0E7F  3403               	retlw	3
  3231  0E80  349B               	retlw	155
  3232  0E81  3403               	retlw	3
  3233  0E82  3493               	retlw	147
  3234  0E83  3403               	retlw	3
  3235  0E84  348C               	retlw	140
  3236  0E85  3403               	retlw	3
  3237  0E86  3485               	retlw	133
  3238  0E87  3403               	retlw	3
  3239  0E88  347E               	retlw	126
  3240  0E89  3403               	retlw	3
  3241  0E8A  3477               	retlw	119
  3242  0E8B  3403               	retlw	3
  3243  0E8C  3470               	retlw	112
  3244  0E8D  3403               	retlw	3
  3245  0E8E  3469               	retlw	105
  3246  0E8F  3403               	retlw	3
  3247  0E90  3462               	retlw	98
  3248  0E91  3403               	retlw	3
  3249  0E92  345C               	retlw	92
  3250  0E93  3403               	retlw	3
  3251  0E94  3455               	retlw	85
  3252  0E95  3403               	retlw	3
  3253  0E96  344F               	retlw	79
  3254  0E97  3403               	retlw	3
  3255  0E98  3448               	retlw	72
  3256  0E99  3403               	retlw	3
  3257  0E9A  3442               	retlw	66
  3258  0E9B  3403               	retlw	3
  3259  0E9C  343C               	retlw	60
  3260  0E9D  3403               	retlw	3
  3261  0E9E  3436               	retlw	54
  3262  0E9F  3403               	retlw	3
  3263  0EA0  3430               	retlw	48
  3264  0EA1  3403               	retlw	3
  3265  0EA2  342A               	retlw	42
  3266  0EA3  3403               	retlw	3
  3267  0EA4  3424               	retlw	36
  3268  0EA5  3403               	retlw	3
  3269  0EA6  341F               	retlw	31
  3270  0EA7  3403               	retlw	3
  3271  0EA8  3419               	retlw	25
  3272  0EA9  3403               	retlw	3
  3273  0EAA  3413               	retlw	19
  3274  0EAB  3403               	retlw	3
  3275  0EAC  340E               	retlw	14
  3276  0EAD  3403               	retlw	3
  3277  0EAE  3409               	retlw	9
  3278  0EAF  3403               	retlw	3
  3279  0EB0  3403               	retlw	3
  3280  0EB1  3403               	retlw	3
  3281  0EB2  34FE               	retlw	254
  3282  0EB3  3402               	retlw	2
  3283  0EB4  34F9               	retlw	249
  3284  0EB5  3402               	retlw	2
  3285  0EB6  34F4               	retlw	244
  3286  0EB7  3402               	retlw	2
  3287  0EB8  34EF               	retlw	239
  3288  0EB9  3402               	retlw	2
  3289  0EBA  34EA               	retlw	234
  3290  0EBB  3402               	retlw	2
  3291  0EBC  34E5               	retlw	229
  3292  0EBD  3402               	retlw	2
  3293  0EBE  34E0               	retlw	224
  3294  0EBF  3402               	retlw	2
  3295  0EC0  34DB               	retlw	219
  3296  0EC1  3402               	retlw	2
  3297  0EC2  34D7               	retlw	215
  3298  0EC3  3402               	retlw	2
  3299  0EC4  34D2               	retlw	210
  3300  0EC5  3402               	retlw	2
  3301  0EC6  34CD               	retlw	205
  3302  0EC7  3402               	retlw	2
  3303  0EC8  34C9               	retlw	201
  3304  0EC9  3402               	retlw	2
  3305  0ECA  34C4               	retlw	196
  3306  0ECB  3402               	retlw	2
  3307  0ECC  34C0               	retlw	192
  3308  0ECD  3402               	retlw	2
  3309  0ECE  34BC               	retlw	188
  3310  0ECF  3402               	retlw	2
  3311  0ED0  34B7               	retlw	183
  3312  0ED1  3402               	retlw	2
  3313  0ED2  34B3               	retlw	179
  3314  0ED3  3402               	retlw	2
  3315  0ED4  34AF               	retlw	175
  3316  0ED5  3402               	retlw	2
  3317  0ED6  34AB               	retlw	171
  3318  0ED7  3402               	retlw	2
  3319  0ED8  34A6               	retlw	166
  3320  0ED9  3402               	retlw	2
  3321  0EDA  34A2               	retlw	162
  3322  0EDB  3402               	retlw	2
  3323  0EDC  349E               	retlw	158
  3324  0EDD  3402               	retlw	2
  3325  0EDE  349A               	retlw	154
  3326  0EDF  3402               	retlw	2
  3327  0EE0  3497               	retlw	151
  3328  0EE1  3402               	retlw	2
  3329  0EE2  3493               	retlw	147
  3330  0EE3  3402               	retlw	2
  3331  0EE4  348F               	retlw	143
  3332  0EE5  3402               	retlw	2
  3333  0EE6  348B               	retlw	139
  3334  0EE7  3402               	retlw	2
  3335  0EE8  3487               	retlw	135
  3336  0EE9  3402               	retlw	2
  3337  0EEA  3484               	retlw	132
  3338  0EEB  3402               	retlw	2
  3339  0EEC  3480               	retlw	128
  3340  0EED  3402               	retlw	2
  3341  0EEE  347C               	retlw	124
  3342  0EEF  3402               	retlw	2
  3343  0EF0  3479               	retlw	121
  3344  0EF1  3402               	retlw	2
  3345  0EF2  3475               	retlw	117
  3346  0EF3  3402               	retlw	2
  3347  0EF4  3472               	retlw	114
  3348  0EF5  3402               	retlw	2
  3349  0EF6  346E               	retlw	110
  3350  0EF7  3402               	retlw	2
  3351  0EF8  346B               	retlw	107
  3352  0EF9  3402               	retlw	2
  3353  0EFA  3467               	retlw	103
  3354  0EFB  3402               	retlw	2
  3355  0EFC  3464               	retlw	100
  3356  0EFD  3402               	retlw	2
  3357  0EFE  3461               	retlw	97
  3358  0EFF  3402               	retlw	2
  3359  0F00  345E               	retlw	94
  3360  0F01  3402               	retlw	2
  3361  0F02  345A               	retlw	90
  3362  0F03  3402               	retlw	2
  3363  0F04  3457               	retlw	87
  3364  0F05  3402               	retlw	2
  3365  0F06  3454               	retlw	84
  3366  0F07  3402               	retlw	2
  3367  0F08  3451               	retlw	81
  3368  0F09  3402               	retlw	2
  3369  0F0A  344E               	retlw	78
  3370  0F0B  3402               	retlw	2
  3371  0F0C  344B               	retlw	75
  3372  0F0D  3402               	retlw	2
  3373  0F0E  3448               	retlw	72
  3374  0F0F  3402               	retlw	2
  3375  0F10  3445               	retlw	69
  3376  0F11  3402               	retlw	2
  3377  0F12  3442               	retlw	66
  3378  0F13  3402               	retlw	2
  3379  0F14  343F               	retlw	63
  3380  0F15  3402               	retlw	2
  3381  0F16  343C               	retlw	60
  3382  0F17  3402               	retlw	2
  3383  0F18  3439               	retlw	57
  3384  0F19  3402               	retlw	2
  3385  0F1A  3436               	retlw	54
  3386  0F1B  3402               	retlw	2
  3387  0F1C  3433               	retlw	51
  3388  0F1D  3402               	retlw	2
  3389  0F1E  3430               	retlw	48
  3390  0F1F  3402               	retlw	2
  3391  0F20  342E               	retlw	46
  3392  0F21  3402               	retlw	2
  3393  0F22  342B               	retlw	43
  3394  0F23  3402               	retlw	2
  3395  0F24  3428               	retlw	40
  3396  0F25  3402               	retlw	2
  3397  0F26  3425               	retlw	37
  3398  0F27  3402               	retlw	2
  3399  0F28  3423               	retlw	35
  3400  0F29  3402               	retlw	2
  3401  0F2A  3420               	retlw	32
  3402  0F2B  3402               	retlw	2
  3403  0F2C  341E               	retlw	30
  3404  0F2D  3402               	retlw	2
  3405  0F2E  341B               	retlw	27
  3406  0F2F  3402               	retlw	2
  3407  0F30  3418               	retlw	24
  3408  0F31  3402               	retlw	2
  3409  0F32  3416               	retlw	22
  3410  0F33  3402               	retlw	2
  3411  0F34  3413               	retlw	19
  3412  0F35  3402               	retlw	2
  3413  0F36  3411               	retlw	17
  3414  0F37  3402               	retlw	2
  3415  0F38  340E               	retlw	14
  3416  0F39  3402               	retlw	2
  3417  0F3A  340C               	retlw	12
  3418  0F3B  3402               	retlw	2
  3419  0F3C  340A               	retlw	10
  3420  0F3D  3402               	retlw	2
  3421  0F3E  3407               	retlw	7
  3422  0F3F  3402               	retlw	2
  3423  0F40  3405               	retlw	5
  3424  0F41  3402               	retlw	2
  3425  0F42  3402               	retlw	2
  3426  0F43  3402               	retlw	2
  3427  0F44  3400               	retlw	0
  3428  0F45  3402               	retlw	2
  3429  0F46  34FE               	retlw	254
  3430  0F47  3401               	retlw	1
  3431  0F48  34FB               	retlw	251
  3432  0F49  3401               	retlw	1
  3433  0F4A  34F9               	retlw	249
  3434  0F4B  3401               	retlw	1
  3435  0F4C  34F7               	retlw	247
  3436  0F4D  3401               	retlw	1
  3437  0F4E  34F5               	retlw	245
  3438  0F4F  3401               	retlw	1
  3439  0F50  34F2               	retlw	242
  3440  0F51  3401               	retlw	1
  3441  0F52  34F0               	retlw	240
  3442  0F53  3401               	retlw	1
  3443  0F54  34EE               	retlw	238
  3444  0F55  3401               	retlw	1
  3445  0F56  34EC               	retlw	236
  3446  0F57  3401               	retlw	1
  3447  0F58  34EA               	retlw	234
  3448  0F59  3401               	retlw	1
  3449  0F5A  34E8               	retlw	232
  3450  0F5B  3401               	retlw	1
  3451  0F5C  34E6               	retlw	230
  3452  0F5D  3401               	retlw	1
  3453  0F5E  34E3               	retlw	227
  3454  0F5F  3401               	retlw	1
  3455  0F60  34E1               	retlw	225
  3456  0F61  3401               	retlw	1
  3457  0F62  34DF               	retlw	223
  3458  0F63  3401               	retlw	1
  3459  0F64  34DD               	retlw	221
  3460  0F65  3401               	retlw	1
  3461  0F66  34DB               	retlw	219
  3462  0F67  3401               	retlw	1
  3463  0F68  34D9               	retlw	217
  3464  0F69  3401               	retlw	1
  3465  0F6A  34D7               	retlw	215
  3466  0F6B  3401               	retlw	1
  3467  0F6C  34D5               	retlw	213
  3468  0F6D  3401               	retlw	1
  3469  0F6E  34D3               	retlw	211
  3470  0F6F  3401               	retlw	1
  3471  0F70  34D2               	retlw	210
  3472  0F71  3401               	retlw	1
  3473  0F72  34D0               	retlw	208
  3474  0F73  3401               	retlw	1
  3475  0F74  34CE               	retlw	206
  3476  0F75  3401               	retlw	1
  3477  0F76  34CC               	retlw	204
  3478  0F77  3401               	retlw	1
  3479  0F78  34CA               	retlw	202
  3480  0F79  3401               	retlw	1
  3481  0F7A  34C8               	retlw	200
  3482  0F7B  3401               	retlw	1
  3483  0F7C  34C6               	retlw	198
  3484  0F7D  3401               	retlw	1
  3485  0F7E  34C4               	retlw	196
  3486  0F7F  3401               	retlw	1
  3487  0F80  34C3               	retlw	195
  3488  0F81  3401               	retlw	1
  3489  0F82  34C1               	retlw	193
  3490  0F83  3401               	retlw	1
  3491  0F84  34BF               	retlw	191
  3492  0F85  3401               	retlw	1
  3493  0F86  34BD               	retlw	189
  3494  0F87  3401               	retlw	1
  3495  0F88  34BC               	retlw	188
  3496  0F89  3401               	retlw	1
  3497  0F8A  34BA               	retlw	186
  3498  0F8B  3401               	retlw	1
  3499  0F8C  34B8               	retlw	184
  3500  0F8D  3401               	retlw	1
  3501  0F8E  34B6               	retlw	182
  3502  0F8F  3401               	retlw	1
  3503  0F90  34B5               	retlw	181
  3504  0F91  3401               	retlw	1
  3505  0F92  34B3               	retlw	179
  3506  0F93  3401               	retlw	1
  3507  0F94  34B1               	retlw	177
  3508  0F95  3401               	retlw	1
  3509  0F96  34B0               	retlw	176
  3510  0F97  3401               	retlw	1
  3511  0F98  34AE               	retlw	174
  3512  0F99  3401               	retlw	1
  3513  0F9A  34AC               	retlw	172
  3514  0F9B  3401               	retlw	1
  3515  0F9C  34AB               	retlw	171
  3516  0F9D  3401               	retlw	1
  3517  0F9E  34A9               	retlw	169
  3518  0F9F  3401               	retlw	1
  3519  0FA0  34A8               	retlw	168
  3520  0FA1  3401               	retlw	1
  3521  0FA2  34A6               	retlw	166
  3522  0FA3  3401               	retlw	1
  3523  0FA4  34A4               	retlw	164
  3524  0FA5  3401               	retlw	1
  3525  0FA6  34A3               	retlw	163
  3526  0FA7  3401               	retlw	1
  3527  0FA8  34A1               	retlw	161
  3528  0FA9  3401               	retlw	1
  3529  0FAA  34A0               	retlw	160
  3530  0FAB  3401               	retlw	1
  3531  0FAC  349E               	retlw	158
  3532  0FAD  3401               	retlw	1
  3533  0FAE  349D               	retlw	157
  3534  0FAF  3401               	retlw	1
  3535  0FB0  349B               	retlw	155
  3536  0FB1  3401               	retlw	1
  3537  0FB2  349A               	retlw	154
  3538  0FB3  3401               	retlw	1
  3539  0FB4  3498               	retlw	152
  3540  0FB5  3401               	retlw	1
  3541  0FB6  3497               	retlw	151
  3542  0FB7  3401               	retlw	1
  3543  0FB8  3495               	retlw	149
  3544  0FB9  3401               	retlw	1
  3545  0FBA  3494               	retlw	148
  3546  0FBB  3401               	retlw	1
  3547  0FBC  3492               	retlw	146
  3548  0FBD  3401               	retlw	1
  3549  0FBE  3491               	retlw	145
  3550  0FBF  3401               	retlw	1
  3551  0FC0  3490               	retlw	144
  3552  0FC1  3401               	retlw	1
  3553  0FC2  348E               	retlw	142
  3554  0FC3  3401               	retlw	1
  3555  0FC4  348D               	retlw	141
  3556  0FC5  3401               	retlw	1
  3557  0FC6  348B               	retlw	139
  3558  0FC7  3401               	retlw	1
  3559  0FC8  348A               	retlw	138
  3560  0FC9  3401               	retlw	1
  3561  0FCA  3489               	retlw	137
  3562  0FCB  3401               	retlw	1
  3563  0FCC  3487               	retlw	135
  3564  0FCD  3401               	retlw	1
  3565  0FCE  3486               	retlw	134
  3566  0FCF  3401               	retlw	1
  3567  0FD0  3485               	retlw	133
  3568  0FD1  3401               	retlw	1
  3569  0FD2  3483               	retlw	131
  3570  0FD3  3401               	retlw	1
  3571  0FD4  3482               	retlw	130
  3572  0FD5  3401               	retlw	1
  3573  0FD6  3481               	retlw	129
  3574  0FD7  3401               	retlw	1
  3575  0FD8  347F               	retlw	127
  3576  0FD9  3401               	retlw	1
  3577  0FDA  347E               	retlw	126
  3578  0FDB  3401               	retlw	1
  3579  0FDC  347D               	retlw	125
  3580  0FDD  3401               	retlw	1
  3581  0FDE  347B               	retlw	123
  3582  0FDF  3401               	retlw	1
  3583  0FE0  347A               	retlw	122
  3584  0FE1  3401               	retlw	1
  3585  0FE2  3479               	retlw	121
  3586  0FE3  3401               	retlw	1
  3587  0FE4  3478               	retlw	120
  3588  0FE5  3401               	retlw	1
  3589  0FE6  3476               	retlw	118
  3590  0FE7  3401               	retlw	1
  3591  0FE8  3475               	retlw	117
  3592  0FE9  3401               	retlw	1
  3593  0FEA  3474               	retlw	116
  3594  0FEB  3401               	retlw	1
  3595  0FEC  3473               	retlw	115
  3596  0FED  3401               	retlw	1
  3597  0FEE  3471               	retlw	113
  3598  0FEF  3401               	retlw	1
  3599  0FF0  3470               	retlw	112
  3600  0FF1  3401               	retlw	1
  3601  0FF2  346F               	retlw	111
  3602  0FF3  3401               	retlw	1
  3603  0FF4  346E               	retlw	110
  3604  0FF5  3401               	retlw	1
  3605  0FF6  3400               	retlw	0
  3606  0FF7  3400               	retlw	0
  3607  0FF8  3400               	retlw	0
  3608  0FF9  3400               	retlw	0
  3609  0FFA  3400               	retlw	0
  3610  0FFB  3400               	retlw	0
  3611  0FFC  3400               	retlw	0
  3612  0FFD  3400               	retlw	0
  3613  0FFE  3400               	retlw	0
  3614  0FFF  3400               	retlw	0
  3615                           
  3616                           	psect	nvBANK3
  3617  01EC                     __pnvBANK3:	
  3618  01EC                     _B25kLength:	
  3619  01EC                     	ds	2
  3620  000B                     _INTCONbits	set	11
  3621  000E                     _PORTCbits	set	14
  3622  000F                     _PORTDbits	set	15
  3623  0010                     _PORTEbits	set	16
  3624  001B                     _PR2	set	27
  3625  001C                     _T2CONbits	set	28
  3626  009D                     _ADCON0bits	set	157
  3627  009E                     _ADCON1bits	set	158
  3628  009C                     _ADRESH	set	156
  3629  009B                     _ADRESL	set	155
  3630  0095                     _OPTION_REGbits	set	149
  3631  0099                     _OSCCONbits	set	153
  3632  008D                     _TRISBbits	set	141
  3633  008E                     _TRISCbits	set	142
  3634  008F                     _TRISDbits	set	143
  3635  0090                     _TRISEbits	set	144
  3636  011D                     _APFCONbits	set	285
  3637  010D                     _LATBbits	set	269
  3638  010F                     _LATDbits	set	271
  3639  0190                     _ANSELEbits	set	400
  3640  0192                     _PMADRH	set	402
  3641  0191                     _PMADRL	set	401
  3642  0195                     _PMCON1bits	set	405
  3643  0196                     _PMCON2	set	406
  3644  0194                     _PMDATH	set	404
  3645  0193                     _PMDATL	set	403
  3646  0291                     _CCPR1	set	657
  3647  0298                     _CCPR2	set	664
  3648  0293                     _CCP1CONbits	set	659
  3649  029A                     _CCP2CONbits	set	666
  3650  029D                     _CCPTMRS0	set	669
  3651  029E                     _CCPTMRS1	set	670
  3652  029F                     _CCPTMRS2	set	671
  3653  0311                     _CCPR3	set	785
  3654  0318                     _CCPR4	set	792
  3655  031C                     _CCPR5	set	796
  3656  0313                     _CCP3CONbits	set	787
  3657  031A                     _CCP4CONbits	set	794
  3658  031E                     _CCP5CONbits	set	798
  3659  030C                     _TRISFbits	set	780
  3660  030D                     _TRISGbits	set	781
  3661  038C                     _LATFbits	set	908
  3662  038D                     _LATGbits	set	909
  3663  040C                     _ANSELFbits	set	1036
  3664  061A                     _CCPR9	set	1562
  3665  061F                     _CCP10CONbits	set	1567
  3666  0613                     _CCP6CONbits	set	1555
  3667  0616                     _CCP7CONbits	set	1558
  3668  0619                     _CCP8CONbits	set	1561
  3669  061C                     _CCP9CONbits	set	1564
  3670                           
  3671                           ; #config settings
  3672  0000                     
  3673                           	psect	cinit
  3674  02E3                     start_initialization:	
  3675  02E3                     __initialization:		;BIGRAM
  3676                           
  3677                           ; Clear objects allocated to BANK0
  3678  02E3  3045               	movlw	low __pbssBANK0
  3679  02E4  0084               	movwf	4
  3680  02E5  3000               	movlw	high __pbssBANK0
  3681  02E6  0085               	movwf	5
  3682  02E7  3013               	movlw	19
  3683  02E8  00FE               	movwf	btemp
  3684  02E9  3000               	movlw	0
  3685  02EA  00FF               	movwf	btemp+1
  3686  02EB  319D  25F4  3182   	fcall	clear_ram0
  3687                           
  3688                           ; Clear objects allocated to BANK2
  3689  02EE  3046               	movlw	low __pbssBANK2
  3690  02EF  0084               	movwf	4
  3691  02F0  3001               	movlw	high __pbssBANK2
  3692  02F1  0085               	movwf	5
  3693  02F2  3014               	movlw	20
  3694  02F3  00FE               	movwf	btemp
  3695  02F4  3000               	movlw	0
  3696  02F5  00FF               	movwf	btemp+1
  3697  02F6  319D  25F4  3182   	fcall	clear_ram0
  3698                           
  3699                           ; Clear objects allocated to BANK3
  3700  02F9  30A0               	movlw	low __pbssBANK3
  3701  02FA  0084               	movwf	4
  3702  02FB  3001               	movlw	high __pbssBANK3
  3703  02FC  0085               	movwf	5
  3704  02FD  3041               	movlw	65
  3705  02FE  00FE               	movwf	btemp
  3706  02FF  3000               	movlw	0
  3707  0300  00FF               	movwf	btemp+1
  3708  0301  319D  25F4  3182   	fcall	clear_ram0
  3709                           
  3710                           ; Clear objects allocated to BANK5
  3711  0304  30A0               	movlw	low __pbssBANK5
  3712  0305  0084               	movwf	4
  3713  0306  3002               	movlw	high __pbssBANK5
  3714  0307  0085               	movwf	5
  3715  0308  302C               	movlw	44
  3716  0309  00FE               	movwf	btemp
  3717  030A  3000               	movlw	0
  3718  030B  00FF               	movwf	btemp+1
  3719  030C  319D  25F4  3182   	fcall	clear_ram0
  3720                           
  3721                           ; Clear objects allocated to BANK9
  3722  030F  30A0               	movlw	low __pbssBANK9
  3723  0310  0084               	movwf	4
  3724  0311  3004               	movlw	high __pbssBANK9
  3725  0312  0085               	movwf	5
  3726  0313  3040               	movlw	64
  3727  0314  00FE               	movwf	btemp
  3728  0315  3000               	movlw	0
  3729  0316  00FF               	movwf	btemp+1
  3730  0317  319D  25F4  3182   	fcall	clear_ram0
  3731                           
  3732                           ; Initialize objects allocated to BIGRAM
  3733  031A  30F8               	movlw	low __pidataBIGRAM
  3734  031B  0084               	movwf	4
  3735  031C  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3736  031D  0085               	movwf	5
  3737  031E  30E8               	movlw	low (0+9192)
  3738  031F  0086               	movwf	6
  3739  0320  3023               	movlw	high (0+9192)
  3740  0321  0087               	movwf	7
  3741  0322  3002               	movlw	2
  3742  0323  00FF               	movwf	btemp+1
  3743  0324  3008               	movlw	8
  3744  0325  319D  25E8  3182   	fcall	init_ram
  3745                           
  3746                           ; Initialize objects allocated to COMMON
  3747  0328  3187  27FE  3182   	fcall	__pidataCOMMON	;fetch initializer
  3748  032B  00FD               	movwf	__pdataCOMMON& (0+127)
  3749                           
  3750                           ; Initialize objects allocated to BANK0
  3751  032C  300F               	movlw	low __pidataBANK0
  3752  032D  0084               	movwf	4
  3753  032E  309E               	movlw	(high __pidataBANK0)| (0+128)
  3754  032F  0085               	movwf	5
  3755  0330  3058               	movlw	low __pdataBANK0
  3756  0331  0086               	movwf	6
  3757  0332  3000               	movlw	high __pdataBANK0
  3758  0333  0087               	movwf	7
  3759  0334  3000               	movlw	0
  3760  0335  00FF               	movwf	btemp+1
  3761  0336  3012               	movlw	18
  3762  0337  319D  25E8  3182   	fcall	init_ram
  3763                           
  3764                           ; Initialize objects allocated to BANK2
  3765  033A  3001               	movlw	low __pidataBANK2
  3766  033B  0084               	movwf	4
  3767  033C  3090               	movlw	(high __pidataBANK2)| (0+128)
  3768  033D  0085               	movwf	5
  3769  033E  305A               	movlw	low __pdataBANK2
  3770  033F  0086               	movwf	6
  3771  0340  3001               	movlw	high __pdataBANK2
  3772  0341  0087               	movwf	7
  3773  0342  3000               	movlw	0
  3774  0343  00FF               	movwf	btemp+1
  3775  0344  300C               	movlw	12
  3776  0345  319D  25E8  3182   	fcall	init_ram
  3777                           
  3778                           ; Initialize objects allocated to BANK3
  3779  0348  30DD               	movlw	low __pidataBANK3
  3780  0349  0084               	movwf	4
  3781  034A  309D               	movlw	(high __pidataBANK3)| (0+128)
  3782  034B  0085               	movwf	5
  3783  034C  30E1               	movlw	low __pdataBANK3
  3784  034D  0086               	movwf	6
  3785  034E  3001               	movlw	high __pdataBANK3
  3786  034F  0087               	movwf	7
  3787  0350  3000               	movlw	0
  3788  0351  00FF               	movwf	btemp+1
  3789  0352  300B               	movlw	11
  3790  0353  319D  25E8  3182   	fcall	init_ram
  3791                           
  3792                           ; Initialize objects allocated to BANK4
  3793  0356  30EC               	movlw	low __pidataBANK4
  3794  0357  0084               	movwf	4
  3795  0358  309E               	movlw	(high __pidataBANK4)| (0+128)
  3796  0359  0085               	movwf	5
  3797  035A  3020               	movlw	low __pdataBANK4
  3798  035B  0086               	movwf	6
  3799  035C  3002               	movlw	high __pdataBANK4
  3800  035D  0087               	movwf	7
  3801  035E  3000               	movlw	0
  3802  035F  00FF               	movwf	btemp+1
  3803  0360  3028               	movlw	40
  3804  0361  319D  25E8  3182   	fcall	init_ram
  3805                           
  3806                           ; Initialize objects allocated to BANK6
  3807  0364  3031               	movlw	low __pidataBANK6
  3808  0365  0084               	movwf	4
  3809  0366  3091               	movlw	(high __pidataBANK6)| (0+128)
  3810  0367  0085               	movwf	5
  3811  0368  3020               	movlw	low __pdataBANK6
  3812  0369  0086               	movwf	6
  3813  036A  3003               	movlw	high __pdataBANK6
  3814  036B  0087               	movwf	7
  3815  036C  3000               	movlw	0
  3816  036D  00FF               	movwf	btemp+1
  3817  036E  303D               	movlw	61
  3818  036F  319D  25E8  3182   	fcall	init_ram
  3819                           
  3820                           ; Initialize objects allocated to BANK7
  3821  0372  30F4               	movlw	low __pidataBANK7
  3822  0373  0084               	movwf	4
  3823  0374  3090               	movlw	(high __pidataBANK7)| (0+128)
  3824  0375  0085               	movwf	5
  3825  0376  30A0               	movlw	low __pdataBANK7
  3826  0377  0086               	movwf	6
  3827  0378  3003               	movlw	high __pdataBANK7
  3828  0379  0087               	movwf	7
  3829  037A  3000               	movlw	0
  3830  037B  00FF               	movwf	btemp+1
  3831  037C  303D               	movlw	61
  3832  037D  319D  25E8  3182   	fcall	init_ram
  3833                           
  3834                           ; Initialize objects allocated to BANK8
  3835  0380  30B7               	movlw	low __pidataBANK8
  3836  0381  0084               	movwf	4
  3837  0382  3090               	movlw	(high __pidataBANK8)| (0+128)
  3838  0383  0085               	movwf	5
  3839  0384  3020               	movlw	low __pdataBANK8
  3840  0385  0086               	movwf	6
  3841  0386  3004               	movlw	high __pdataBANK8
  3842  0387  0087               	movwf	7
  3843  0388  3000               	movlw	0
  3844  0389  00FF               	movwf	btemp+1
  3845  038A  303D               	movlw	61
  3846  038B  319D  25E8         	fcall	init_ram
  3847  038D                     end_of_initialization:	
  3848                           ;End of C runtime variable initialization code
  3849                           
  3850  038D                     __end_of__initialization:	
  3851  038D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3852  038E  0020               	movlb	0
  3853  038F  3183  2B91         	ljmp	_main	;jump to C main() function
  3854                           
  3855                           	psect	dataCOMMON
  3856  007D                     __pdataCOMMON:	
  3857  007D                     _blink_rate:	
  3858  007D                     	ds	1
  3859                           
  3860                           	psect	bssBANK0
  3861  0045                     __pbssBANK0:	
  3862  0045                     _sub_timer:	
  3863  0045                     	ds	4
  3864  0049                     _tap_timer:	
  3865  0049                     	ds	4
  3866  004D                     _timer:	
  3867  004D                     	ds	4
  3868  0051                     _mod_counter:	
  3869  0051                     	ds	2
  3870  0053                     _doubleTap_state:	
  3871  0053                     	ds	1
  3872  0054                     _feedback_start:	
  3873  0054                     	ds	1
  3874  0055                     _longTap_start:	
  3875  0055                     	ds	1
  3876  0056                     _suspend_blink:	
  3877  0056                     	ds	1
  3878  0057                     _switchTap_pressed:	
  3879  0057                     	ds	1
  3880                           
  3881                           	psect	dataBANK0
  3882  0058                     __pdataBANK0:	
  3883  0058                     _baseline_delay_time:	
  3884  0058                     	ds	4
  3885  005C                     _delay_time:	
  3886  005C                     	ds	4
  3887  0060                     _bottom_push_state:	
  3888  0060                     	ds	2
  3889  0062                     _long_press_limit:	
  3890  0062                     	ds	2
  3891  0064                     _top_push_state:	
  3892  0064                     	ds	2
  3893  0066                     _feedback_state:	
  3894  0066                     	ds	1
  3895  0067                     _longTap_state:	
  3896  0067                     	ds	1
  3897  0068                     _num_taps:	
  3898  0068                     	ds	1
  3899  0069                     _switchBypass_state:	
  3900  0069                     	ds	1
  3901                           
  3902                           	psect	bssBANK2
  3903  0146                     __pbssBANK2:	
  3904  0146                     _delay_counter:	
  3905  0146                     	ds	2
  3906  0148                     _feedback_timer:	
  3907  0148                     	ds	2
  3908  014A                     _knob_1_pos:	
  3909  014A                     	ds	2
  3910  014C                     _knob_2_pos:	
  3911  014C                     	ds	2
  3912  014E                     _longTap_timer:	
  3913  014E                     	ds	2
  3914  0150                     _switchBypass_pressed:	
  3915  0150                     	ds	2
  3916  0152                     _bottomTactile_pressed:	
  3917  0152                     	ds	1
  3918  0153                     _bypass_turning_on:	
  3919  0153                     	ds	1
  3920  0154                     _mode1_state:	
  3921  0154                     	ds	1
  3922  0155                     _mode2_state:	
  3923  0155                     	ds	1
  3924  0156                     _preset_blink:	
  3925  0156                     	ds	1
  3926  0157                     _preset_programmning_on:	
  3927  0157                     	ds	1
  3928  0158                     _switchTap_down:	
  3929  0158                     	ds	1
  3930  0159                     _topTactile_pressed:	
  3931  0159                     	ds	1
  3932                           
  3933                           	psect	dataBANK2
  3934  015A                     __pdataBANK2:	
  3935  015A                     _knob1_prev:	
  3936  015A                     	ds	2
  3937  015C                     _knob2_prev:	
  3938  015C                     	ds	2
  3939  015E                     _knob3_prev:	
  3940  015E                     	ds	2
  3941  0160                     _knob4_prev:	
  3942  0160                     	ds	2
  3943  0162                     _knob5_prev:	
  3944  0162                     	ds	2
  3945  0164                     _currentBypassState:	
  3946  0164                     	ds	1
  3947  0165                     _switchTap_state:	
  3948  0165                     	ds	1
  3949                           
  3950                           	psect	bssBANK3
  3951  01A0                     __pbssBANK3:	
  3952  01A0                     _tap_history:	
  3953  01A0                     	ds	20
  3954  01B4                     _ledState:	
  3955  01B4                     	ds	4
  3956  01B8                     _mod_timer:	
  3957  01B8                     	ds	4
  3958  01BC                     _tap_total:	
  3959  01BC                     	ds	4
  3960  01C0                     _test_timer:	
  3961  01C0                     	ds	4
  3962  01C4                     _adjust_sub_delay:	
  3963  01C4                     	ds	2
  3964  01C6                     _adjusted_pot_value:	
  3965  01C6                     	ds	2
  3966  01C8                     _debounce_bypass:	
  3967  01C8                     	ds	2
  3968  01CA                     _debounce_count:	
  3969  01CA                     	ds	2
  3970  01CC                     _debounce_mode1:	
  3971  01CC                     	ds	2
  3972  01CE                     _debounce_mode2:	
  3973  01CE                     	ds	2
  3974  01D0                     _delayfound:	
  3975  01D0                     	ds	2
  3976  01D2                     _errno:	
  3977  01D2                     	ds	2
  3978  01D4                     _knob_3_pos:	
  3979  01D4                     	ds	2
  3980  01D6                     _knob_4_pos:	
  3981  01D6                     	ds	2
  3982  01D8                     _knob_5_pos:	
  3983  01D8                     	ds	2
  3984  01DA                     _mod_value:	
  3985  01DA                     	ds	2
  3986  01DC                     _reset_sub_delay:	
  3987  01DC                     	ds	2
  3988  01DE                     _switchBypass_toggle:	
  3989  01DE                     	ds	2
  3990  01E0                     _iCnt:	
  3991  01E0                     	ds	1
  3992                           
  3993                           	psect	dataBANK3
  3994  01E1                     __pdataBANK3:	
  3995  01E1                     _blink_delay:	
  3996  01E1                     	ds	2
  3997  01E3                     _delay_time_changed:	
  3998  01E3                     	ds	2
  3999  01E5                     _mod_delay_time:	
  4000  01E5                     	ds	2
  4001  01E7                     _switchBypass_up:	
  4002  01E7                     	ds	2
  4003  01E9                     _tap_iteration:	
  4004  01E9                     	ds	2
  4005  01EB                     _blink_state:	
  4006  01EB                     	ds	1
  4007                           
  4008                           	psect	dataBANK4
  4009  0220                     __pdataBANK4:	
  4010  0220                     _B25k:	
  4011  0220                     	ds	40
  4012                           
  4013                           	psect	bssBANK5
  4014  02A0                     __pbssBANK5:	
  4015  02A0                     _tap:	
  4016  02A0                     	ds	44
  4017                           
  4018                           	psect	dataBANK6
  4019  0320                     __pdataBANK6:	
  4020  0320                     _mod1:	
  4021  0320                     	ds	61
  4022                           
  4023                           	psect	dataBANK7
  4024  03A0                     __pdataBANK7:	
  4025  03A0                     _mod2:	
  4026  03A0                     	ds	61
  4027                           
  4028                           	psect	dataBANK8
  4029  0420                     __pdataBANK8:	
  4030  0420                     _mod3:	
  4031  0420                     	ds	61
  4032                           
  4033                           	psect	bssBANK9
  4034  04A0                     __pbssBANK9:	
  4035  04A0                     _myBuf:	
  4036  04A0                     	ds	64
  4037                           
  4038                           	psect	clrtext
  4039  1DF4                     clear_ram0:	
  4040                           ;	Called with FSR0 containing the base address, and
  4041                           ;	btemp/btemp+1 has the size to clear
  4042                           
  4043  1DF4  0064               	clrwdt	;clear the watchdog before getting into this loop
  4044  1DF5                     clrloop0:	
  4045  1DF5  0180               	clrf	0	;clear RAM location pointed to by FSR
  4046  1DF6  3101               	addfsr 0,1
  4047  1DF7  3001               	movlw	1
  4048  1DF8  02FE               	subwf	126,f
  4049  1DF9  3000               	movlw	0
  4050  1DFA  3BFF               	subwfb	127,f
  4051  1DFB  087F               	movf	127,w
  4052  1DFC  047E               	iorwf	126,w
  4053  1DFD  1903               	btfsc	3,2
  4054  1DFE  3400               	retlw	0	;all done for this memory range, return
  4055  1DFF  2DF5               	goto	clrloop0	;have we reached the end yet?
  4056                           
  4057                           	psect	inittext
  4058  1DE8                     init_ram:	
  4059  1DE8  00FE               	movwf	126
  4060  1DE9                     initloop:	
  4061  1DE9  0012               	moviw fsr0++
  4062  1DEA  001E               	movwi fsr1++
  4063  1DEB  3001               	movlw	1
  4064  1DEC  02FE               	subwf	126,f
  4065  1DED  3000               	movlw	0
  4066  1DEE  3BFF               	subwfb	127,f
  4067  1DEF  087F               	movf	127,w
  4068  1DF0  047E               	iorwf	126,w
  4069  1DF1  1903               	btfsc	3,2
  4070  1DF2  3400               	retlw	0
  4071  1DF3  2DE9               	goto	initloop
  4072                           
  4073                           	psect	cstackBANK4
  4074  0248                     __pcstackBANK4:	
  4075  0248                     ??_main:	
  4076                           
  4077                           ; 1 bytes @ 0x0
  4078  0248                     	ds	15
  4079                           
  4080                           	psect	cstackBANK2
  4081  0120                     __pcstackBANK2:	
  4082  0120                     ___fttol@sign1:	
  4083                           
  4084                           ; 1 bytes @ 0x0
  4085  0120                     	ds	1
  4086  0121                     ___fttol@lval:	
  4087                           
  4088                           ; 4 bytes @ 0x1
  4089  0121                     	ds	4
  4090  0125                     ___fttol@exp1:	
  4091                           
  4092                           ; 1 bytes @ 0x5
  4093  0125                     	ds	1
  4094  0126                     ?___altoft:	
  4095  0126                     ___altoft@c:	
  4096                           ; 3 bytes @ 0x6
  4097                           
  4098                           
  4099                           ; 4 bytes @ 0x6
  4100  0126                     	ds	4
  4101  012A                     ??___altoft:	
  4102                           
  4103                           ; 1 bytes @ 0xA
  4104  012A                     	ds	2
  4105  012C                     ___altoft@exp:	
  4106                           
  4107                           ; 1 bytes @ 0xC
  4108  012C                     	ds	1
  4109  012D                     ___altoft@sign:	
  4110                           
  4111                           ; 1 bytes @ 0xD
  4112  012D                     	ds	1
  4113  012E                     ?_trunc:	
  4114  012E                     trunc@x:	
  4115                           ; 3 bytes @ 0xE
  4116                           
  4117                           
  4118                           ; 3 bytes @ 0xE
  4119  012E                     	ds	3
  4120  0131                     trunc@i:	
  4121                           
  4122                           ; 3 bytes @ 0x11
  4123  0131                     	ds	3
  4124  0134                     trunc@expon:	
  4125                           
  4126                           ; 2 bytes @ 0x14
  4127  0134                     	ds	2
  4128  0136                     ?_set_subdivision:	
  4129  0136                     set_subdivision@x:	
  4130                           ; 2 bytes @ 0x16
  4131                           
  4132                           
  4133                           ; 2 bytes @ 0x16
  4134  0136                     	ds	2
  4135  0138                     set_subdivision@y:	
  4136                           
  4137                           ; 2 bytes @ 0x18
  4138  0138                     	ds	2
  4139  013A                     ??_set_subdivision:	
  4140                           
  4141                           ; 1 bytes @ 0x1A
  4142  013A                     	ds	3
  4143  013D                     set_subdivision@scalar:	
  4144                           
  4145                           ; 3 bytes @ 0x1D
  4146  013D                     	ds	3
  4147  0140                     set_subdivision@tmpX:	
  4148                           
  4149                           ; 2 bytes @ 0x20
  4150  0140                     	ds	2
  4151  0142                     main@i:	
  4152                           
  4153                           ; 2 bytes @ 0x22
  4154  0142                     	ds	2
  4155  0144                     main@i_377:	
  4156                           
  4157                           ; 2 bytes @ 0x24
  4158  0144                     	ds	2
  4159                           
  4160                           	psect	cstackBANK1
  4161  00A0                     __pcstackBANK1:	
  4162  00A0                     ?_set_leds_top:	
  4163  00A0                     ??_ConfigureOscillator:	
  4164                           ; 1 bytes @ 0x0
  4165                           
  4166  00A0                     ??_InitApp:	
  4167                           ; 1 bytes @ 0x0
  4168                           
  4169  00A0                     ??_InitializeTaps:	
  4170                           ; 1 bytes @ 0x0
  4171                           
  4172  00A0                     ??_update_mode:	
  4173                           ; 1 bytes @ 0x0
  4174                           
  4175  00A0                     ??_init_adc:	
  4176                           ; 1 bytes @ 0x0
  4177                           
  4178  00A0                     ??_init_pwm:	
  4179                           ; 1 bytes @ 0x0
  4180                           
  4181  00A0                     ??_init_timer2:	
  4182                           ; 1 bytes @ 0x0
  4183                           
  4184  00A0                     ??_init_timer0:	
  4185                           ; 1 bytes @ 0x0
  4186                           
  4187  00A0                     ?_set_leds_bottom:	
  4188                           ; 1 bytes @ 0x0
  4189                           
  4190  00A0                     ??_getCurrentLEDState:	
  4191                           ; 1 bytes @ 0x0
  4192                           
  4193  00A0                     ??_restoreLEDState:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  00A0                     ?_setFeedbackState:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  00A0                     ?_setLongTapState:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  00A0                     ?_updateSwitchBypassState:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  00A0                     ?_adc_convert:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  00A0                     ?_FLASH_ReadWord:	
  4209                           ; 2 bytes @ 0x0
  4210                           
  4211  00A0                     ?_getSwitchBypassState:	
  4212                           ; 2 bytes @ 0x0
  4213                           
  4214  00A0                     ?___ftpack:	
  4215                           ; 2 bytes @ 0x0
  4216                           
  4217  00A0                     ?_frexp:	
  4218                           ; 3 bytes @ 0x0
  4219                           
  4220  00A0                     ?___ftneg:	
  4221                           ; 3 bytes @ 0x0
  4222                           
  4223  00A0                     ?___lmul:	
  4224                           ; 3 bytes @ 0x0
  4225                           
  4226  00A0                     ?___aldiv:	
  4227                           ; 4 bytes @ 0x0
  4228                           
  4229  00A0                     FLASH_ReadWord@flashAddr:	
  4230                           ; 4 bytes @ 0x0
  4231                           
  4232  00A0                     set_leds_top@x:	
  4233                           ; 2 bytes @ 0x0
  4234                           
  4235  00A0                     set_leds_bottom@x:	
  4236                           ; 2 bytes @ 0x0
  4237                           
  4238  00A0                     updateSwitchBypassState@state:	
  4239                           ; 2 bytes @ 0x0
  4240                           
  4241  00A0                     setFeedbackState@f_state:	
  4242                           ; 2 bytes @ 0x0
  4243                           
  4244  00A0                     setLongTapState@f_state:	
  4245                           ; 2 bytes @ 0x0
  4246                           
  4247  00A0                     ___ftpack@arg:	
  4248                           ; 2 bytes @ 0x0
  4249                           
  4250  00A0                     ___ftneg@f1:	
  4251                           ; 3 bytes @ 0x0
  4252                           
  4253  00A0                     frexp@value:	
  4254                           ; 3 bytes @ 0x0
  4255                           
  4256  00A0                     ___lmul@multiplier:	
  4257                           ; 3 bytes @ 0x0
  4258                           
  4259  00A0                     ___aldiv@divisor:	
  4260                           ; 4 bytes @ 0x0
  4261                           
  4262                           
  4263                           ; 4 bytes @ 0x0
  4264  00A0                     	ds	1
  4265  00A1                     InitializeTaps@itap:	
  4266                           
  4267                           ; 2 bytes @ 0x1
  4268  00A1                     	ds	1
  4269  00A2                     ??_adc_convert:	
  4270  00A2                     ??_FLASH_ReadWord:	
  4271                           ; 1 bytes @ 0x2
  4272                           
  4273  00A2                     ??_set_leds_bottom:	
  4274                           ; 1 bytes @ 0x2
  4275                           
  4276  00A2                     ??_setFeedbackState:	
  4277                           ; 1 bytes @ 0x2
  4278                           
  4279  00A2                     ??_setLongTapState:	
  4280                           ; 1 bytes @ 0x2
  4281                           
  4282  00A2                     ??_updateSwitchBypassState:	
  4283                           ; 1 bytes @ 0x2
  4284                           
  4285  00A2                     ??_getSwitchBypassState:	
  4286                           ; 1 bytes @ 0x2
  4287                           
  4288  00A2                     FLASH_ReadWord@GIEBitValue:	
  4289                           ; 1 bytes @ 0x2
  4290                           
  4291  00A2                     set_leds_top@ledState:	
  4292                           ; 1 bytes @ 0x2
  4293                           
  4294                           
  4295                           ; 2 bytes @ 0x2
  4296  00A2                     	ds	1
  4297  00A3                     ??___ftneg:	
  4298  00A3                     adc_convert@channel:	
  4299                           ; 1 bytes @ 0x3
  4300                           
  4301  00A3                     ___ftpack@exp:	
  4302                           ; 1 bytes @ 0x3
  4303                           
  4304  00A3                     frexp@eptr:	
  4305                           ; 1 bytes @ 0x3
  4306                           
  4307                           
  4308                           ; 1 bytes @ 0x3
  4309  00A3                     	ds	1
  4310  00A4                     ??_set_leds_top:	
  4311  00A4                     ??_ReadSavedSettings:	
  4312                           ; 1 bytes @ 0x4
  4313                           
  4314  00A4                     ??_frexp:	
  4315                           ; 1 bytes @ 0x4
  4316                           
  4317  00A4                     ___ftpack@sign:	
  4318                           ; 1 bytes @ 0x4
  4319                           
  4320  00A4                     ___lmul@multiplicand:	
  4321                           ; 1 bytes @ 0x4
  4322                           
  4323  00A4                     ___aldiv@dividend:	
  4324                           ; 4 bytes @ 0x4
  4325                           
  4326                           
  4327                           ; 4 bytes @ 0x4
  4328  00A4                     	ds	1
  4329  00A5                     ??___ftpack:	
  4330                           
  4331                           ; 1 bytes @ 0x5
  4332  00A5                     	ds	3
  4333  00A8                     ??___lmul:	
  4334  00A8                     ??___aldiv:	
  4335                           ; 1 bytes @ 0x8
  4336                           
  4337  00A8                     ?___awtoft:	
  4338                           ; 1 bytes @ 0x8
  4339                           
  4340  00A8                     ?___ftadd:	
  4341                           ; 3 bytes @ 0x8
  4342                           
  4343  00A8                     ___awtoft@c:	
  4344                           ; 3 bytes @ 0x8
  4345                           
  4346  00A8                     ___ftadd@f1:	
  4347                           ; 2 bytes @ 0x8
  4348                           
  4349  00A8                     ___lmul@product:	
  4350                           ; 3 bytes @ 0x8
  4351                           
  4352                           
  4353                           ; 4 bytes @ 0x8
  4354  00A8                     	ds	1
  4355  00A9                     ___aldiv@counter:	
  4356                           
  4357                           ; 1 bytes @ 0x9
  4358  00A9                     	ds	1
  4359  00AA                     ___aldiv@sign:	
  4360                           
  4361                           ; 1 bytes @ 0xA
  4362  00AA                     	ds	1
  4363  00AB                     ??___awtoft:	
  4364  00AB                     ___ftadd@f2:	
  4365                           ; 1 bytes @ 0xB
  4366                           
  4367  00AB                     ___aldiv@quotient:	
  4368                           ; 3 bytes @ 0xB
  4369                           
  4370                           
  4371                           ; 4 bytes @ 0xB
  4372  00AB                     	ds	1
  4373  00AC                     ?_wait_ms:	
  4374  00AC                     wait_ms@timeSec:	
  4375                           ; 1 bytes @ 0xC
  4376                           
  4377                           
  4378                           ; 2 bytes @ 0xC
  4379  00AC                     	ds	1
  4380  00AD                     ___awtoft@sign:	
  4381                           
  4382                           ; 1 bytes @ 0xD
  4383  00AD                     	ds	1
  4384  00AE                     ??_wait_ms:	
  4385  00AE                     ??___ftadd:	
  4386                           ; 1 bytes @ 0xE
  4387                           
  4388  00AE                     wait_ms@timemsl:	
  4389                           ; 1 bytes @ 0xE
  4390                           
  4391                           
  4392                           ; 4 bytes @ 0xE
  4393  00AE                     	ds	4
  4394  00B2                     ??_read_bottom_tactile:	
  4395  00B2                     ??_read_top_tactile:	
  4396                           ; 1 bytes @ 0x12
  4397                           
  4398  00B2                     ??_star_tactiles:	
  4399                           ; 1 bytes @ 0x12
  4400                           
  4401  00B2                     ??_solidring_tactiles:	
  4402                           ; 1 bytes @ 0x12
  4403                           
  4404  00B2                     ?_setSwitchBypassState:	
  4405                           ; 1 bytes @ 0x12
  4406                           
  4407  00B2                     ?_setDoublePressState:	
  4408                           ; 1 bytes @ 0x12
  4409                           
  4410  00B2                     ___ftadd@sign:	
  4411                           ; 1 bytes @ 0x12
  4412                           
  4413  00B2                     setSwitchBypassState@f_state:	
  4414                           ; 1 bytes @ 0x12
  4415                           
  4416  00B2                     setDoublePressState@f_state:	
  4417                           ; 2 bytes @ 0x12
  4418                           
  4419                           
  4420                           ; 2 bytes @ 0x12
  4421  00B2                     	ds	1
  4422  00B3                     ___ftadd@exp2:	
  4423                           
  4424                           ; 1 bytes @ 0x13
  4425  00B3                     	ds	1
  4426  00B4                     ??_setSwitchBypassState:	
  4427  00B4                     ??_setDoublePressState:	
  4428                           ; 1 bytes @ 0x14
  4429                           
  4430  00B4                     star_tactiles@reverse:	
  4431                           ; 1 bytes @ 0x14
  4432                           
  4433  00B4                     solidring_tactiles@ring_delay:	
  4434                           ; 1 bytes @ 0x14
  4435                           
  4436  00B4                     ___ftadd@exp1:	
  4437                           ; 1 bytes @ 0x14
  4438                           
  4439                           
  4440                           ; 1 bytes @ 0x14
  4441  00B4                     	ds	1
  4442  00B5                     ?___ftmul:	
  4443  00B5                     star_tactiles@iLed:	
  4444                           ; 3 bytes @ 0x15
  4445                           
  4446  00B5                     ___ftmul@f1:	
  4447                           ; 2 bytes @ 0x15
  4448                           
  4449                           
  4450                           ; 3 bytes @ 0x15
  4451  00B5                     	ds	1
  4452  00B6                     ??_initSwitchBypass:	
  4453  00B6                     ??_updateSwitchBypass:	
  4454                           ; 1 bytes @ 0x16
  4455                           
  4456  00B6                     ??_updateSwitchTap:	
  4457                           ; 1 bytes @ 0x16
  4458                           
  4459  00B6                     initSwitchBypass@initState:	
  4460                           ; 1 bytes @ 0x16
  4461                           
  4462                           
  4463                           ; 2 bytes @ 0x16
  4464  00B6                     	ds	1
  4465  00B7                     star_tactiles@iLed_1444:	
  4466                           
  4467                           ; 2 bytes @ 0x17
  4468  00B7                     	ds	1
  4469  00B8                     ___ftmul@f2:	
  4470                           
  4471                           ; 3 bytes @ 0x18
  4472  00B8                     	ds	1
  4473  00B9                     ??_showBootSequence:	
  4474                           
  4475                           ; 1 bytes @ 0x19
  4476  00B9                     	ds	2
  4477  00BB                     ??___ftmul:	
  4478                           
  4479                           ; 1 bytes @ 0x1B
  4480  00BB                     	ds	1
  4481  00BC                     updateSwitchTap@tapCntDivisor:	
  4482                           
  4483                           ; 2 bytes @ 0x1C
  4484  00BC                     	ds	2
  4485  00BE                     updateSwitchTap@iCnt:	
  4486                           
  4487                           ; 1 bytes @ 0x1E
  4488  00BE                     	ds	1
  4489  00BF                     ___ftmul@exp:	
  4490                           
  4491                           ; 1 bytes @ 0x1F
  4492  00BF                     	ds	1
  4493  00C0                     ___ftmul@f3_as_product:	
  4494                           
  4495                           ; 3 bytes @ 0x20
  4496  00C0                     	ds	3
  4497  00C3                     ___ftmul@cntr:	
  4498                           
  4499                           ; 1 bytes @ 0x23
  4500  00C3                     	ds	1
  4501  00C4                     ___ftmul@sign:	
  4502                           
  4503                           ; 1 bytes @ 0x24
  4504  00C4                     	ds	1
  4505  00C5                     ?___ftdiv:	
  4506  00C5                     ___ftdiv@f2:	
  4507                           ; 3 bytes @ 0x25
  4508                           
  4509                           
  4510                           ; 3 bytes @ 0x25
  4511  00C5                     	ds	3
  4512  00C8                     ___ftdiv@f1:	
  4513                           
  4514                           ; 3 bytes @ 0x28
  4515  00C8                     	ds	3
  4516  00CB                     ??___ftdiv:	
  4517                           
  4518                           ; 1 bytes @ 0x2B
  4519  00CB                     	ds	4
  4520  00CF                     ___ftdiv@cntr:	
  4521                           
  4522                           ; 1 bytes @ 0x2F
  4523  00CF                     	ds	1
  4524  00D0                     ___ftdiv@f3:	
  4525                           
  4526                           ; 3 bytes @ 0x30
  4527  00D0                     	ds	3
  4528  00D3                     ___ftdiv@exp:	
  4529                           
  4530                           ; 1 bytes @ 0x33
  4531  00D3                     	ds	1
  4532  00D4                     ___ftdiv@sign:	
  4533                           
  4534                           ; 1 bytes @ 0x34
  4535  00D4                     	ds	1
  4536  00D5                     ?_map:	
  4537  00D5                     map@x:	
  4538                           ; 3 bytes @ 0x35
  4539                           
  4540                           
  4541                           ; 3 bytes @ 0x35
  4542  00D5                     	ds	3
  4543  00D8                     map@in_min:	
  4544                           
  4545                           ; 3 bytes @ 0x38
  4546  00D8                     	ds	3
  4547  00DB                     map@in_max:	
  4548                           
  4549                           ; 3 bytes @ 0x3B
  4550  00DB                     	ds	3
  4551  00DE                     map@out_min:	
  4552                           
  4553                           ; 3 bytes @ 0x3E
  4554  00DE                     	ds	3
  4555  00E1                     map@out_max:	
  4556                           
  4557                           ; 3 bytes @ 0x41
  4558  00E1                     	ds	3
  4559  00E4                     ??_map:	
  4560  00E4                     _map$2189:	
  4561                           ; 1 bytes @ 0x44
  4562                           
  4563                           
  4564                           ; 3 bytes @ 0x44
  4565  00E4                     	ds	3
  4566  00E7                     ?___fttol:	
  4567  00E7                     ___fttol@f1:	
  4568                           ; 4 bytes @ 0x47
  4569                           
  4570                           
  4571                           ; 3 bytes @ 0x47
  4572  00E7                     	ds	4
  4573  00EB                     ??___fttol:	
  4574                           
  4575                           ; 1 bytes @ 0x4B
  4576  00EB                     	ds	4
  4577  00EF                     ??_trunc:	
  4578                           
  4579                           ; 1 bytes @ 0x4F
  4580  00EF                     	ds	1
  4581                           
  4582                           	psect	cstackCOMMON
  4583  0070                     __pcstackCOMMON:	
  4584  0070                     ?_ConfigureOscillator:	
  4585  0070                     ?_InitApp:	
  4586                           ; 1 bytes @ 0x0
  4587                           
  4588  0070                     ?_InitializeTaps:	
  4589                           ; 1 bytes @ 0x0
  4590                           
  4591  0070                     ?_initSwitchBypass:	
  4592                           ; 1 bytes @ 0x0
  4593                           
  4594  0070                     ?_ReadSavedSettings:	
  4595                           ; 1 bytes @ 0x0
  4596                           
  4597  0070                     ?_read_bottom_tactile:	
  4598                           ; 1 bytes @ 0x0
  4599                           
  4600  0070                     ?_read_top_tactile:	
  4601                           ; 1 bytes @ 0x0
  4602                           
  4603  0070                     ?_update_mode:	
  4604                           ; 1 bytes @ 0x0
  4605                           
  4606  0070                     ?_showBootSequence:	
  4607                           ; 1 bytes @ 0x0
  4608                           
  4609  0070                     ?_updateSwitchBypass:	
  4610                           ; 1 bytes @ 0x0
  4611                           
  4612  0070                     ?_updateSwitchTap:	
  4613                           ; 1 bytes @ 0x0
  4614                           
  4615  0070                     ?_init_adc:	
  4616                           ; 1 bytes @ 0x0
  4617                           
  4618  0070                     ?_init_pwm:	
  4619                           ; 1 bytes @ 0x0
  4620                           
  4621  0070                     ?_init_timer2:	
  4622                           ; 1 bytes @ 0x0
  4623                           
  4624  0070                     ?_init_timer0:	
  4625                           ; 1 bytes @ 0x0
  4626                           
  4627  0070                     ?_getCurrentLEDState:	
  4628                           ; 1 bytes @ 0x0
  4629                           
  4630  0070                     ?_star_tactiles:	
  4631                           ; 1 bytes @ 0x0
  4632                           
  4633  0070                     ?_solidring_tactiles:	
  4634                           ; 1 bytes @ 0x0
  4635                           
  4636  0070                     ?_restoreLEDState:	
  4637                           ; 1 bytes @ 0x0
  4638                           
  4639  0070                     ?_isr:	
  4640                           ; 1 bytes @ 0x0
  4641                           
  4642  0070                     ?_main:	
  4643                           ; 1 bytes @ 0x0
  4644                           
  4645  0070                     ?i1_set_leds_top:	
  4646                           ; 1 bytes @ 0x0
  4647                           
  4648  0070                     ?___awdiv:	
  4649                           ; 1 bytes @ 0x0
  4650                           
  4651  0070                     ?i1___lmul:	
  4652                           ; 2 bytes @ 0x0
  4653                           
  4654  0070                     ___awdiv@divisor:	
  4655                           ; 4 bytes @ 0x0
  4656                           
  4657  0070                     i1set_leds_top@x:	
  4658                           ; 2 bytes @ 0x0
  4659                           
  4660  0070                     i1___lmul@multiplier:	
  4661                           ; 2 bytes @ 0x0
  4662                           
  4663                           
  4664                           ; 4 bytes @ 0x0
  4665  0070                     	ds	2
  4666  0072                     ___awdiv@dividend:	
  4667  0072                     i1set_leds_top@ledState:	
  4668                           ; 2 bytes @ 0x2
  4669                           
  4670                           
  4671                           ; 2 bytes @ 0x2
  4672  0072                     	ds	2
  4673  0074                     ??___awdiv:	
  4674  0074                     ??i1_set_leds_top:	
  4675                           ; 1 bytes @ 0x4
  4676                           
  4677  0074                     i1___lmul@multiplicand:	
  4678                           ; 1 bytes @ 0x4
  4679                           
  4680                           
  4681                           ; 4 bytes @ 0x4
  4682  0074                     	ds	1
  4683  0075                     ___awdiv@counter:	
  4684                           
  4685                           ; 1 bytes @ 0x5
  4686  0075                     	ds	1
  4687  0076                     ___awdiv@sign:	
  4688                           
  4689                           ; 1 bytes @ 0x6
  4690  0076                     	ds	1
  4691  0077                     ___awdiv@quotient:	
  4692                           
  4693                           ; 2 bytes @ 0x7
  4694  0077                     	ds	1
  4695  0078                     ??i1___lmul:	
  4696  0078                     i1___lmul@product:	
  4697                           ; 1 bytes @ 0x8
  4698                           
  4699                           
  4700                           ; 4 bytes @ 0x8
  4701  0078                     	ds	4
  4702  007C                     ??i1___aldiv:	
  4703                           
  4704                           ; 1 bytes @ 0xC
  4705  007C                     	ds	1
  4706                           
  4707                           	psect	cstackBANK0
  4708  0020                     __pcstackBANK0:	
  4709  0020                     ?i1___aldiv:	
  4710  0020                     i1___aldiv@divisor:	
  4711                           ; 4 bytes @ 0x0
  4712                           
  4713                           
  4714                           ; 4 bytes @ 0x0
  4715  0020                     	ds	4
  4716  0024                     i1___aldiv@dividend:	
  4717                           
  4718                           ; 4 bytes @ 0x4
  4719  0024                     	ds	4
  4720  0028                     i1___aldiv@counter:	
  4721                           
  4722                           ; 1 bytes @ 0x8
  4723  0028                     	ds	1
  4724  0029                     i1___aldiv@sign:	
  4725                           
  4726                           ; 1 bytes @ 0x9
  4727  0029                     	ds	1
  4728  002A                     i1___aldiv@quotient:	
  4729                           
  4730                           ; 4 bytes @ 0xA
  4731  002A                     	ds	4
  4732  002E                     ?_modulation:	
  4733  002E                     modulation@x:	
  4734                           ; 4 bytes @ 0xE
  4735                           
  4736                           
  4737                           ; 4 bytes @ 0xE
  4738  002E                     	ds	4
  4739  0032                     modulation@y:	
  4740                           
  4741                           ; 4 bytes @ 0x12
  4742  0032                     	ds	4
  4743  0036                     ??_modulation:	
  4744                           
  4745                           ; 1 bytes @ 0x16
  4746  0036                     	ds	4
  4747  003A                     ??_isr:	
  4748                           
  4749                           ; 1 bytes @ 0x1A
  4750  003A                     	ds	9
  4751  0043                     isr@tmpSubDelay:	
  4752                           
  4753                           ; 2 bytes @ 0x23
  4754  0043                     	ds	2
  4755                           
  4756                           	psect	maintext
  4757  0391                     __pmaintext:	
  4758 ;;
  4759 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4760 ;;
  4761 ;; *************** function _main *****************
  4762 ;; Defined at:
  4763 ;;		line 83 in file "main.c"
  4764 ;; Parameters:    Size  Location     Type
  4765 ;;		None
  4766 ;; Auto vars:     Size  Location     Type
  4767 ;;  i               2   36[BANK2 ] int 
  4768 ;;  i               2   34[BANK2 ] int 
  4769 ;; Return value:  Size  Location     Type
  4770 ;;                  1    wreg      void 
  4771 ;; Registers used:
  4772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : B1F/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4779 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4781 ;;      Totals:         0       0       0       4       0      15       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4782 ;;Total ram usage:       19 bytes
  4783 ;; Hardware stack levels required when called:    7
  4784 ;; This function calls:
  4785 ;;		_ConfigureOscillator
  4786 ;;		_InitApp
  4787 ;;		_InitializeTaps
  4788 ;;		_ReadSavedSettings
  4789 ;;		___awtoft
  4790 ;;		___fttol
  4791 ;;		_adc_convert
  4792 ;;		_initSwitchBypass
  4793 ;;		_map
  4794 ;;		_read_bottom_tactile
  4795 ;;		_read_top_tactile
  4796 ;;		_set_subdivision
  4797 ;;		_showBootSequence
  4798 ;;		_updateSwitchBypass
  4799 ;;		_updateSwitchTap
  4800 ;;		_update_mode
  4801 ;; This function is called by:
  4802 ;;		Startup code after reset
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           
  4807                           ;psect for function _main
  4808  0391                     _main:	
  4809                           
  4810                           ;main.c: 84: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  4811                           
  4812                           ;incstack = 0
  4813                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4814  0391  3028               	movlw	40
  4815  0392  0023               	movlb	3	; select bank3
  4816  0393  00EC               	movwf	_B25kLength^(0+384)
  4817  0394  3000               	movlw	0
  4818  0395  00ED               	movwf	(_B25kLength^(0+384)+1)
  4819                           
  4820                           ;main.c: 86: ConfigureOscillator();
  4821  0396  319D  25B2  3183   	fcall	_ConfigureOscillator
  4822                           
  4823                           ;main.c: 87: InitApp();
  4824  0399  319F  276E  3183   	fcall	_InitApp
  4825                           
  4826                           ;main.c: 89: PORTEbits.RE0 = 1;
  4827  039C  0020               	movlb	0	; select bank0
  4828  039D  1410               	bsf	16,0	;volatile
  4829                           
  4830                           ;main.c: 90: PORTEbits.RE1 = 1;
  4831  039E  1490               	bsf	16,1	;volatile
  4832                           
  4833                           ;main.c: 91: PORTDbits.RD6 = 1;
  4834  039F  170F               	bsf	15,6	;volatile
  4835                           
  4836                           ;main.c: 92: PORTDbits.RD5 = 1;
  4837  03A0  168F               	bsf	15,5	;volatile
  4838                           
  4839                           ;main.c: 93: PORTCbits.RC0 = 1;
  4840  03A1  140E               	bsf	14,0	;volatile
  4841                           
  4842                           ;main.c: 94: PORTDbits.RD7 = 1;
  4843  03A2  178F               	bsf	15,7	;volatile
  4844                           
  4845                           ;main.c: 96: InitializeTaps();
  4846  03A3  319E  26C6  3183   	fcall	_InitializeTaps
  4847                           
  4848                           ;main.c: 97: initSwitchBypass();
  4849  03A6  319E  2600  3183   	fcall	_initSwitchBypass
  4850                           
  4851                           ;main.c: 100: ReadSavedSettings();
  4852  03A9  3195  255C  3183   	fcall	_ReadSavedSettings
  4853  03AC                     l5942:	
  4854                           ;main.c: 102: while (1) {
  4855                           
  4856                           
  4857                           ;main.c: 103: read_bottom_tactile();
  4858  03AC  3192  2271  3183   	fcall	_read_bottom_tactile
  4859                           
  4860                           ;main.c: 104: read_top_tactile();
  4861  03AF  3193  2395  3183   	fcall	_read_top_tactile
  4862                           
  4863                           ;main.c: 107: update_mode();
  4864  03B2  3192  2230  3183   	fcall	_update_mode
  4865                           
  4866                           ;main.c: 109: if (PORTDbits.RD7 == 0) {
  4867  03B5  0020               	movlb	0	; select bank0
  4868  03B6  1B8F               	btfsc	15,7	;volatile
  4869  03B7  2BD6               	goto	l5956
  4870                           
  4871                           ;main.c: 110: debounce_mode1++;
  4872  03B8  3001               	movlw	1
  4873  03B9  0023               	movlb	3	; select bank3
  4874  03BA  07CC               	addwf	_debounce_mode1^(0+384),f
  4875  03BB  3000               	movlw	0
  4876  03BC  3DCD               	addwfc	(_debounce_mode1+1)^(0+384),f
  4877                           
  4878                           ;main.c: 111: if (debounce_mode1 > 25) {
  4879  03BD  084D               	movf	(_debounce_mode1+1)^(0+384),w
  4880  03BE  3A80               	xorlw	128
  4881  03BF  0024               	movlb	4	; select bank4
  4882  03C0  00C8               	movwf	??_main^(0+512)
  4883  03C1  3080               	movlw	128
  4884  03C2  0248               	subwf	??_main^(0+512),w
  4885  03C3  1D03               	skipz
  4886  03C4  2BC8               	goto	u6755
  4887  03C5  301A               	movlw	26
  4888  03C6  0023               	movlb	3	; select bank3
  4889  03C7  024C               	subwf	_debounce_mode1^(0+384),w
  4890  03C8                     u6755:	
  4891  03C8  1C03               	skipc
  4892  03C9  2BD9               	goto	l5958
  4893                           
  4894                           ;main.c: 112: debounce_mode1 = 25;
  4895  03CA  3019               	movlw	25
  4896  03CB  0023               	movlb	3	; select bank3
  4897  03CC  00CC               	movwf	_debounce_mode1^(0+384)
  4898  03CD  3000               	movlw	0
  4899  03CE  00CD               	movwf	(_debounce_mode1^(0+384)+1)
  4900                           
  4901                           ;main.c: 116: showBootSequence();
  4902  03CF  319F  2714  3183   	fcall	_showBootSequence
  4903  03D2                     l304:	
  4904                           ;main.c: 119: while (PORTDbits.RD7 == 0) {
  4905                           
  4906  03D2  0020               	movlb	0	; select bank0
  4907  03D3  1B8F               	btfsc	15,7	;volatile
  4908  03D4  2BD9               	goto	l5958
  4909  03D5  2BD2               	goto	l304
  4910  03D6                     l5956:	
  4911                           ;main.c: 120: }
  4912                           ;main.c: 121: }
  4913                           ;main.c: 122: } else {
  4914                           
  4915                           
  4916                           ;main.c: 123: debounce_mode1 = 0;
  4917  03D6  0023               	movlb	3	; select bank3
  4918  03D7  01CC               	clrf	_debounce_mode1^(0+384)
  4919  03D8  01CD               	clrf	(_debounce_mode1+1)^(0+384)
  4920  03D9                     l5958:	
  4921                           
  4922                           ;main.c: 124: }
  4923                           ;main.c: 126: updateSwitchBypass();
  4924  03D9  318A  2233  3183   	fcall	_updateSwitchBypass
  4925                           
  4926                           ;main.c: 127: updateSwitchTap();
  4927  03DC  318C  2414  3183   	fcall	_updateSwitchTap
  4928                           
  4929                           ;main.c: 221: knob_1_pos = adc_convert(0);
  4930  03DF  3000               	movlw	0
  4931  03E0  319E  2621  3183   	fcall	_adc_convert
  4932  03E3  0021               	movlb	1	; select bank1
  4933  03E4  0821               	movf	(?_adc_convert+1)^(0+128),w
  4934  03E5  0022               	movlb	2	; select bank2
  4935  03E6  00CB               	movwf	(_knob_1_pos+1)^(0+256)
  4936  03E7  0021               	movlb	1	; select bank1
  4937  03E8  0820               	movf	?_adc_convert^(0+128),w
  4938  03E9  0022               	movlb	2	; select bank2
  4939  03EA  00CA               	movwf	_knob_1_pos^(0+256)
  4940                           
  4941                           ;main.c: 222: knob_2_pos = adc_convert(1);
  4942  03EB  3001               	movlw	1
  4943  03EC  319E  2621  3183   	fcall	_adc_convert
  4944  03EF  0021               	movlb	1	; select bank1
  4945  03F0  0821               	movf	(?_adc_convert+1)^(0+128),w
  4946  03F1  0022               	movlb	2	; select bank2
  4947  03F2  00CD               	movwf	(_knob_2_pos+1)^(0+256)
  4948  03F3  0021               	movlb	1	; select bank1
  4949  03F4  0820               	movf	?_adc_convert^(0+128),w
  4950  03F5  0022               	movlb	2	; select bank2
  4951  03F6  00CC               	movwf	_knob_2_pos^(0+256)
  4952                           
  4953                           ;main.c: 223: knob_3_pos = adc_convert(2);
  4954  03F7  3002               	movlw	2
  4955  03F8  319E  2621  3183   	fcall	_adc_convert
  4956  03FB  0021               	movlb	1	; select bank1
  4957  03FC  0821               	movf	(?_adc_convert+1)^(0+128),w
  4958  03FD  0023               	movlb	3	; select bank3
  4959  03FE  00D5               	movwf	(_knob_3_pos+1)^(0+384)
  4960  03FF  0021               	movlb	1	; select bank1
  4961  0400  0820               	movf	?_adc_convert^(0+128),w
  4962  0401  0023               	movlb	3	; select bank3
  4963  0402  00D4               	movwf	_knob_3_pos^(0+384)
  4964                           
  4965                           ;main.c: 224: knob_4_pos = adc_convert(3);
  4966  0403  3003               	movlw	3
  4967  0404  319E  2621  3183   	fcall	_adc_convert
  4968  0407  0021               	movlb	1	; select bank1
  4969  0408  0821               	movf	(?_adc_convert+1)^(0+128),w
  4970  0409  0023               	movlb	3	; select bank3
  4971  040A  00D7               	movwf	(_knob_4_pos+1)^(0+384)
  4972  040B  0021               	movlb	1	; select bank1
  4973  040C  0820               	movf	?_adc_convert^(0+128),w
  4974  040D  0023               	movlb	3	; select bank3
  4975  040E  00D6               	movwf	_knob_4_pos^(0+384)
  4976                           
  4977                           ;main.c: 225: knob_5_pos = adc_convert(4);
  4978  040F  3004               	movlw	4
  4979  0410  319E  2621  3183   	fcall	_adc_convert
  4980  0413  0021               	movlb	1	; select bank1
  4981  0414  0821               	movf	(?_adc_convert+1)^(0+128),w
  4982  0415  0023               	movlb	3	; select bank3
  4983  0416  00D9               	movwf	(_knob_5_pos+1)^(0+384)
  4984  0417  0021               	movlb	1	; select bank1
  4985  0418  0820               	movf	?_adc_convert^(0+128),w
  4986  0419  0023               	movlb	3	; select bank3
  4987  041A  00D8               	movwf	_knob_5_pos^(0+384)
  4988                           
  4989                           ;main.c: 253: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  4990  041B  0022               	movlb	2	; select bank2
  4991  041C  095A               	comf	_knob1_prev^(0+256),w	;volatile
  4992  041D  0024               	movlb	4	; select bank4
  4993  041E  00C8               	movwf	??_main^(0+512)
  4994  041F  0022               	movlb	2	; select bank2
  4995  0420  095B               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  4996  0421  0024               	movlb	4	; select bank4
  4997  0422  00C9               	movwf	(??_main^(0+512)+1)
  4998  0423  0AC8               	incf	??_main^(0+512),f
  4999  0424  1903               	skipnz
  5000  0425  0AC9               	incf	(??_main^(0+512)+1),f
  5001  0426  0022               	movlb	2	; select bank2
  5002  0427  084A               	movf	_knob_1_pos^(0+256),w
  5003  0428  0024               	movlb	4	; select bank4
  5004  0429  0748               	addwf	??_main^(0+512),w
  5005  042A  00CA               	movwf	(??_main+2)^(0+512)
  5006  042B  0022               	movlb	2	; select bank2
  5007  042C  084B               	movf	(_knob_1_pos+1)^(0+256),w
  5008  042D  0024               	movlb	4	; select bank4
  5009  042E  3D49               	addwfc	(??_main+1)^(0+512),w
  5010  042F  00CB               	movwf	(??_main+3)^(0+512)
  5011  0430  084B               	movf	(??_main+3)^(0+512),w
  5012  0431  3A80               	xorlw	128
  5013  0432  00CC               	movwf	(??_main+4)^(0+512)
  5014  0433  3080               	movlw	128
  5015  0434  024C               	subwf	(??_main+4)^(0+512),w
  5016  0435  1D03               	skipz
  5017  0436  2C39               	goto	u6775
  5018  0437  3004               	movlw	4
  5019  0438  024A               	subwf	(??_main+2)^(0+512),w
  5020  0439                     u6775:	
  5021  0439  1803               	skipnc
  5022  043A  2C5B               	goto	l5976
  5023  043B  0022               	movlb	2	; select bank2
  5024  043C  095A               	comf	_knob1_prev^(0+256),w	;volatile
  5025  043D  0024               	movlb	4	; select bank4
  5026  043E  00C8               	movwf	??_main^(0+512)
  5027  043F  0022               	movlb	2	; select bank2
  5028  0440  095B               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5029  0441  0024               	movlb	4	; select bank4
  5030  0442  00C9               	movwf	(??_main^(0+512)+1)
  5031  0443  0AC8               	incf	??_main^(0+512),f
  5032  0444  1903               	skipnz
  5033  0445  0AC9               	incf	(??_main^(0+512)+1),f
  5034  0446  0022               	movlb	2	; select bank2
  5035  0447  084A               	movf	_knob_1_pos^(0+256),w
  5036  0448  0024               	movlb	4	; select bank4
  5037  0449  0748               	addwf	??_main^(0+512),w
  5038  044A  00CA               	movwf	(??_main+2)^(0+512)
  5039  044B  0022               	movlb	2	; select bank2
  5040  044C  084B               	movf	(_knob_1_pos+1)^(0+256),w
  5041  044D  0024               	movlb	4	; select bank4
  5042  044E  3D49               	addwfc	(??_main+1)^(0+512),w
  5043  044F  00CB               	movwf	(??_main+3)^(0+512)
  5044  0450  084B               	movf	(??_main+3)^(0+512),w
  5045  0451  3A80               	xorlw	128
  5046  0452  00CC               	movwf	(??_main+4)^(0+512)
  5047  0453  307F               	movlw	127
  5048  0454  024C               	subwf	(??_main+4)^(0+512),w
  5049  0455  1D03               	skipz
  5050  0456  2C59               	goto	u6785
  5051  0457  30FD               	movlw	253
  5052  0458  024A               	subwf	(??_main+2)^(0+512),w
  5053  0459                     u6785:	
  5054  0459  1803               	skipnc
  5055  045A  2CAA               	goto	l5982
  5056  045B                     l5976:	
  5057                           
  5058                           ;main.c: 254: knob1_prev = knob_1_pos;
  5059  045B  0022               	movlb	2	; select bank2
  5060  045C  084B               	movf	(_knob_1_pos+1)^(0+256),w
  5061  045D  00DB               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5062  045E  084A               	movf	_knob_1_pos^(0+256),w
  5063  045F  00DA               	movwf	_knob1_prev^(0+256)	;volatile
  5064                           
  5065                           ;main.c: 255: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5066  0460  3000               	movlw	0
  5067  0461  0021               	movlb	1	; select bank1
  5068  0462  00E1               	movwf	map@out_max^(0+128)
  5069  0463  3048               	movlw	72
  5070  0464  00E2               	movwf	(map@out_max+1)^(0+128)
  5071  0465  3043               	movlw	67
  5072  0466  00E3               	movwf	(map@out_max+2)^(0+128)
  5073  0467  3080               	movlw	128
  5074  0468  00DE               	movwf	map@out_min^(0+128)
  5075  0469  3092               	movlw	146
  5076  046A  00DF               	movwf	(map@out_min+1)^(0+128)
  5077  046B  3044               	movlw	68
  5078  046C  00E0               	movwf	(map@out_min+2)^(0+128)
  5079  046D  30C0               	movlw	192
  5080  046E  00DB               	movwf	map@in_max^(0+128)
  5081  046F  307F               	movlw	127
  5082  0470  00DC               	movwf	(map@in_max+1)^(0+128)
  5083  0471  3044               	movlw	68
  5084  0472  00DD               	movwf	(map@in_max+2)^(0+128)
  5085  0473  3000               	movlw	0
  5086  0474  00D8               	movwf	map@in_min^(0+128)
  5087  0475  3000               	movlw	0
  5088  0476  00D9               	movwf	(map@in_min+1)^(0+128)
  5089  0477  3000               	movlw	0
  5090  0478  00DA               	movwf	(map@in_min+2)^(0+128)
  5091  0479  0022               	movlb	2	; select bank2
  5092  047A  085B               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5093  047B  0021               	movlb	1	; select bank1
  5094  047C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5095  047D  0022               	movlb	2	; select bank2
  5096  047E  085A               	movf	_knob1_prev^(0+256),w	;volatile
  5097  047F  0021               	movlb	1	; select bank1
  5098  0480  00A8               	movwf	___awtoft@c^(0+128)
  5099  0481  319E  26A4  3183   	fcall	___awtoft
  5100  0484  0021               	movlb	1	; select bank1
  5101  0485  0828               	movf	?___awtoft^(0+128),w
  5102  0486  00D5               	movwf	map@x^(0+128)
  5103  0487  0829               	movf	(?___awtoft+1)^(0+128),w
  5104  0488  00D6               	movwf	(map@x+1)^(0+128)
  5105  0489  082A               	movf	(?___awtoft+2)^(0+128),w
  5106  048A  00D7               	movwf	(map@x+2)^(0+128)
  5107  048B  3196  26D6  3183   	fcall	_map
  5108  048E  0021               	movlb	1	; select bank1
  5109  048F  0855               	movf	?_map^(0+128),w
  5110  0490  00E7               	movwf	___fttol@f1^(0+128)
  5111  0491  0856               	movf	(?_map+1)^(0+128),w
  5112  0492  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5113  0493  0857               	movf	(?_map+2)^(0+128),w
  5114  0494  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5115  0495  3197  2761  3183   	fcall	___fttol
  5116  0498  0021               	movlb	1	; select bank1
  5117  0499  0867               	movf	?___fttol^(0+128),w
  5118  049A  0020               	movlb	0	; select bank0
  5119  049B  00D8               	movwf	_baseline_delay_time	;volatile
  5120  049C  0021               	movlb	1	; select bank1
  5121  049D  0868               	movf	(?___fttol^(0+128)+1),w
  5122  049E  0020               	movlb	0	; select bank0
  5123  049F  00D9               	movwf	_baseline_delay_time+1	;volatile
  5124  04A0  0D89               	rlf	9,f
  5125  04A1  3B89               	subwfb	9,f
  5126  04A2  0989               	comf	9,f
  5127  04A3  00DA               	movwf	_baseline_delay_time+2	;volatile
  5128  04A4  00DB               	movwf	_baseline_delay_time+3	;volatile
  5129                           
  5130                           ;main.c: 256: delay_time_changed = 1;
  5131  04A5  3001               	movlw	1
  5132  04A6  0023               	movlb	3	; select bank3
  5133  04A7  00E3               	movwf	_delay_time_changed^(0+384)
  5134  04A8  3000               	movlw	0
  5135  04A9  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  5136  04AA                     l5982:	
  5137                           
  5138                           ;main.c: 258: }
  5139                           ;main.c: 268: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5140  04AA  0022               	movlb	2	; select bank2
  5141  04AB  095C               	comf	_knob2_prev^(0+256),w	;volatile
  5142  04AC  0024               	movlb	4	; select bank4
  5143  04AD  00C8               	movwf	??_main^(0+512)
  5144  04AE  0022               	movlb	2	; select bank2
  5145  04AF  095D               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5146  04B0  0024               	movlb	4	; select bank4
  5147  04B1  00C9               	movwf	(??_main^(0+512)+1)
  5148  04B2  0AC8               	incf	??_main^(0+512),f
  5149  04B3  1903               	skipnz
  5150  04B4  0AC9               	incf	(??_main^(0+512)+1),f
  5151  04B5  0022               	movlb	2	; select bank2
  5152  04B6  084C               	movf	_knob_2_pos^(0+256),w
  5153  04B7  0024               	movlb	4	; select bank4
  5154  04B8  0748               	addwf	??_main^(0+512),w
  5155  04B9  00CA               	movwf	(??_main+2)^(0+512)
  5156  04BA  0022               	movlb	2	; select bank2
  5157  04BB  084D               	movf	(_knob_2_pos+1)^(0+256),w
  5158  04BC  0024               	movlb	4	; select bank4
  5159  04BD  3D49               	addwfc	(??_main+1)^(0+512),w
  5160  04BE  00CB               	movwf	(??_main+3)^(0+512)
  5161  04BF  084B               	movf	(??_main+3)^(0+512),w
  5162  04C0  3A80               	xorlw	128
  5163  04C1  00CC               	movwf	(??_main+4)^(0+512)
  5164  04C2  3080               	movlw	128
  5165  04C3  024C               	subwf	(??_main+4)^(0+512),w
  5166  04C4  1D03               	skipz
  5167  04C5  2CC8               	goto	u6795
  5168  04C6  3004               	movlw	4
  5169  04C7  024A               	subwf	(??_main+2)^(0+512),w
  5170  04C8                     u6795:	
  5171  04C8  1803               	skipnc
  5172  04C9  2CEA               	goto	l5986
  5173  04CA  0022               	movlb	2	; select bank2
  5174  04CB  095C               	comf	_knob2_prev^(0+256),w	;volatile
  5175  04CC  0024               	movlb	4	; select bank4
  5176  04CD  00C8               	movwf	??_main^(0+512)
  5177  04CE  0022               	movlb	2	; select bank2
  5178  04CF  095D               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5179  04D0  0024               	movlb	4	; select bank4
  5180  04D1  00C9               	movwf	(??_main^(0+512)+1)
  5181  04D2  0AC8               	incf	??_main^(0+512),f
  5182  04D3  1903               	skipnz
  5183  04D4  0AC9               	incf	(??_main^(0+512)+1),f
  5184  04D5  0022               	movlb	2	; select bank2
  5185  04D6  084C               	movf	_knob_2_pos^(0+256),w
  5186  04D7  0024               	movlb	4	; select bank4
  5187  04D8  0748               	addwf	??_main^(0+512),w
  5188  04D9  00CA               	movwf	(??_main+2)^(0+512)
  5189  04DA  0022               	movlb	2	; select bank2
  5190  04DB  084D               	movf	(_knob_2_pos+1)^(0+256),w
  5191  04DC  0024               	movlb	4	; select bank4
  5192  04DD  3D49               	addwfc	(??_main+1)^(0+512),w
  5193  04DE  00CB               	movwf	(??_main+3)^(0+512)
  5194  04DF  084B               	movf	(??_main+3)^(0+512),w
  5195  04E0  3A80               	xorlw	128
  5196  04E1  00CC               	movwf	(??_main+4)^(0+512)
  5197  04E2  307F               	movlw	127
  5198  04E3  024C               	subwf	(??_main+4)^(0+512),w
  5199  04E4  1D03               	skipz
  5200  04E5  2CE8               	goto	u6805
  5201  04E6  30FD               	movlw	253
  5202  04E7  024A               	subwf	(??_main+2)^(0+512),w
  5203  04E8                     u6805:	
  5204  04E8  1803               	skipnc
  5205  04E9  2D55               	goto	l5994
  5206  04EA                     l5986:	
  5207                           
  5208                           ;main.c: 269: knob2_prev = knob_2_pos;
  5209  04EA  0022               	movlb	2	; select bank2
  5210  04EB  084D               	movf	(_knob_2_pos+1)^(0+256),w
  5211  04EC  00DD               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5212  04ED  084C               	movf	_knob_2_pos^(0+256),w
  5213  04EE  00DC               	movwf	_knob2_prev^(0+256)	;volatile
  5214                           
  5215                           ;main.c: 270: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5216  04EF  3000               	movlw	0
  5217  04F0  0021               	movlb	1	; select bank1
  5218  04F1  00E1               	movwf	map@out_max^(0+128)
  5219  04F2  301C               	movlw	28
  5220  04F3  00E2               	movwf	(map@out_max+1)^(0+128)
  5221  04F4  3042               	movlw	66
  5222  04F5  00E3               	movwf	(map@out_max+2)^(0+128)
  5223  04F6  3000               	movlw	0
  5224  04F7  00DE               	movwf	map@out_min^(0+128)
  5225  04F8  3000               	movlw	0
  5226  04F9  00DF               	movwf	(map@out_min+1)^(0+128)
  5227  04FA  3000               	movlw	0
  5228  04FB  00E0               	movwf	(map@out_min+2)^(0+128)
  5229  04FC  30C0               	movlw	192
  5230  04FD  00DB               	movwf	map@in_max^(0+128)
  5231  04FE  307F               	movlw	127
  5232  04FF  00DC               	movwf	(map@in_max+1)^(0+128)
  5233  0500  3044               	movlw	68
  5234  0501  00DD               	movwf	(map@in_max+2)^(0+128)
  5235  0502  3000               	movlw	0
  5236  0503  00D8               	movwf	map@in_min^(0+128)
  5237  0504  3000               	movlw	0
  5238  0505  00D9               	movwf	(map@in_min+1)^(0+128)
  5239  0506  3000               	movlw	0
  5240  0507  00DA               	movwf	(map@in_min+2)^(0+128)
  5241  0508  0022               	movlb	2	; select bank2
  5242  0509  085D               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5243  050A  0021               	movlb	1	; select bank1
  5244  050B  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5245  050C  0022               	movlb	2	; select bank2
  5246  050D  085C               	movf	_knob2_prev^(0+256),w	;volatile
  5247  050E  0021               	movlb	1	; select bank1
  5248  050F  00A8               	movwf	___awtoft@c^(0+128)
  5249  0510  319E  26A4  3183   	fcall	___awtoft
  5250  0513  0021               	movlb	1	; select bank1
  5251  0514  0828               	movf	?___awtoft^(0+128),w
  5252  0515  00D5               	movwf	map@x^(0+128)
  5253  0516  0829               	movf	(?___awtoft+1)^(0+128),w
  5254  0517  00D6               	movwf	(map@x+1)^(0+128)
  5255  0518  082A               	movf	(?___awtoft+2)^(0+128),w
  5256  0519  00D7               	movwf	(map@x+2)^(0+128)
  5257  051A  3196  26D6  3183   	fcall	_map
  5258  051D  0021               	movlb	1	; select bank1
  5259  051E  0855               	movf	?_map^(0+128),w
  5260  051F  00E7               	movwf	___fttol@f1^(0+128)
  5261  0520  0856               	movf	(?_map+1)^(0+128),w
  5262  0521  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5263  0522  0857               	movf	(?_map+2)^(0+128),w
  5264  0523  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5265  0524  3197  2761  3183   	fcall	___fttol
  5266  0527  0021               	movlb	1	; select bank1
  5267  0528  0868               	movf	(?___fttol^(0+128)+1),w
  5268  0529  0022               	movlb	2	; select bank2
  5269  052A  00C3               	movwf	(main@i+1)^(0+256)
  5270  052B  0021               	movlb	1	; select bank1
  5271  052C  0867               	movf	?___fttol^(0+128),w
  5272  052D  0022               	movlb	2	; select bank2
  5273  052E  00C2               	movwf	main@i^(0+256)
  5274                           
  5275                           ;main.c: 271: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5276  052F  0842               	movf	main@i^(0+256),w
  5277  0530  3E01               	addlw	1
  5278  0531  3AFF               	xorlw	255
  5279  0532  3E01               	addlw	1
  5280  0533  0023               	movlb	3	; select bank3
  5281  0534  076C               	addwf	_B25kLength^(0+384),w
  5282  0535  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5283  0536  0086               	movwf	6
  5284  0537  3002               	movlw	2	; select bank4/5
  5285  0538  0087               	movwf	7
  5286  0539  0801               	movf	1,w
  5287  053A  0024               	movlb	4	; select bank4
  5288  053B  00C8               	movwf	??_main^(0+512)
  5289  053C  01C9               	clrf	(??_main^(0+512)+1)
  5290  053D  0848               	movf	??_main^(0+512),w
  5291  053E  0025               	movlb	5	; select bank5
  5292  053F  0098               	movwf	24	;volatile
  5293  0540  0024               	movlb	4	; select bank4
  5294  0541  0849               	movf	(??_main+1)^(0+512),w
  5295  0542  0025               	movlb	5	; select bank5
  5296  0543  0099               	movwf	25	;volatile
  5297                           
  5298                           ;main.c: 272: CCPR3 = (int)B25k[i];
  5299  0544  0022               	movlb	2	; select bank2
  5300  0545  0842               	movf	main@i^(0+256),w
  5301  0546  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5302  0547  0086               	movwf	6
  5303  0548  3002               	movlw	2	; select bank4/5
  5304  0549  0087               	movwf	7
  5305  054A  0801               	movf	1,w
  5306  054B  0024               	movlb	4	; select bank4
  5307  054C  00C8               	movwf	??_main^(0+512)
  5308  054D  01C9               	clrf	(??_main^(0+512)+1)
  5309  054E  0848               	movf	??_main^(0+512),w
  5310  054F  0026               	movlb	6	; select bank6
  5311  0550  0091               	movwf	17	;volatile
  5312  0551  0024               	movlb	4	; select bank4
  5313  0552  0849               	movf	(??_main+1)^(0+512),w
  5314  0553  0026               	movlb	6	; select bank6
  5315  0554  0092               	movwf	18	;volatile
  5316  0555                     l5994:	
  5317                           
  5318                           ;main.c: 273: }
  5319                           ;main.c: 283: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5320  0555  0022               	movlb	2	; select bank2
  5321  0556  095E               	comf	_knob3_prev^(0+256),w	;volatile
  5322  0557  0024               	movlb	4	; select bank4
  5323  0558  00C8               	movwf	??_main^(0+512)
  5324  0559  0022               	movlb	2	; select bank2
  5325  055A  095F               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5326  055B  0024               	movlb	4	; select bank4
  5327  055C  00C9               	movwf	(??_main^(0+512)+1)
  5328  055D  0AC8               	incf	??_main^(0+512),f
  5329  055E  1903               	skipnz
  5330  055F  0AC9               	incf	(??_main^(0+512)+1),f
  5331  0560  0023               	movlb	3	; select bank3
  5332  0561  0854               	movf	_knob_3_pos^(0+384),w
  5333  0562  0024               	movlb	4	; select bank4
  5334  0563  0748               	addwf	??_main^(0+512),w
  5335  0564  00CA               	movwf	(??_main+2)^(0+512)
  5336  0565  0023               	movlb	3	; select bank3
  5337  0566  0855               	movf	(_knob_3_pos+1)^(0+384),w
  5338  0567  0024               	movlb	4	; select bank4
  5339  0568  3D49               	addwfc	(??_main+1)^(0+512),w
  5340  0569  00CB               	movwf	(??_main+3)^(0+512)
  5341  056A  084B               	movf	(??_main+3)^(0+512),w
  5342  056B  3A80               	xorlw	128
  5343  056C  00CC               	movwf	(??_main+4)^(0+512)
  5344  056D  3080               	movlw	128
  5345  056E  024C               	subwf	(??_main+4)^(0+512),w
  5346  056F  1D03               	skipz
  5347  0570  2D73               	goto	u6815
  5348  0571  3004               	movlw	4
  5349  0572  024A               	subwf	(??_main+2)^(0+512),w
  5350  0573                     u6815:	
  5351  0573  1803               	skipnc
  5352  0574  2D95               	goto	l5998
  5353  0575  0022               	movlb	2	; select bank2
  5354  0576  095E               	comf	_knob3_prev^(0+256),w	;volatile
  5355  0577  0024               	movlb	4	; select bank4
  5356  0578  00C8               	movwf	??_main^(0+512)
  5357  0579  0022               	movlb	2	; select bank2
  5358  057A  095F               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5359  057B  0024               	movlb	4	; select bank4
  5360  057C  00C9               	movwf	(??_main^(0+512)+1)
  5361  057D  0AC8               	incf	??_main^(0+512),f
  5362  057E  1903               	skipnz
  5363  057F  0AC9               	incf	(??_main^(0+512)+1),f
  5364  0580  0023               	movlb	3	; select bank3
  5365  0581  0854               	movf	_knob_3_pos^(0+384),w
  5366  0582  0024               	movlb	4	; select bank4
  5367  0583  0748               	addwf	??_main^(0+512),w
  5368  0584  00CA               	movwf	(??_main+2)^(0+512)
  5369  0585  0023               	movlb	3	; select bank3
  5370  0586  0855               	movf	(_knob_3_pos+1)^(0+384),w
  5371  0587  0024               	movlb	4	; select bank4
  5372  0588  3D49               	addwfc	(??_main+1)^(0+512),w
  5373  0589  00CB               	movwf	(??_main+3)^(0+512)
  5374  058A  084B               	movf	(??_main+3)^(0+512),w
  5375  058B  3A80               	xorlw	128
  5376  058C  00CC               	movwf	(??_main+4)^(0+512)
  5377  058D  307F               	movlw	127
  5378  058E  024C               	subwf	(??_main+4)^(0+512),w
  5379  058F  1D03               	skipz
  5380  0590  2D93               	goto	u6825
  5381  0591  30FD               	movlw	253
  5382  0592  024A               	subwf	(??_main+2)^(0+512),w
  5383  0593                     u6825:	
  5384  0593  1803               	skipnc
  5385  0594  2E03               	goto	l6006
  5386  0595                     l5998:	
  5387                           
  5388                           ;main.c: 284: knob3_prev = knob_3_pos;
  5389  0595  0023               	movlb	3	; select bank3
  5390  0596  0855               	movf	(_knob_3_pos+1)^(0+384),w
  5391  0597  0022               	movlb	2	; select bank2
  5392  0598  00DF               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5393  0599  0023               	movlb	3	; select bank3
  5394  059A  0854               	movf	_knob_3_pos^(0+384),w
  5395  059B  0022               	movlb	2	; select bank2
  5396  059C  00DE               	movwf	_knob3_prev^(0+256)	;volatile
  5397                           
  5398                           ;main.c: 285: int i = (int)map(knob3_prev, 0, 1023, 16, 0);
  5399  059D  3000               	movlw	0
  5400  059E  0021               	movlb	1	; select bank1
  5401  059F  00E1               	movwf	map@out_max^(0+128)
  5402  05A0  3000               	movlw	0
  5403  05A1  00E2               	movwf	(map@out_max+1)^(0+128)
  5404  05A2  3000               	movlw	0
  5405  05A3  00E3               	movwf	(map@out_max+2)^(0+128)
  5406  05A4  3000               	movlw	0
  5407  05A5  00DE               	movwf	map@out_min^(0+128)
  5408  05A6  3080               	movlw	128
  5409  05A7  00DF               	movwf	(map@out_min+1)^(0+128)
  5410  05A8  3041               	movlw	65
  5411  05A9  00E0               	movwf	(map@out_min+2)^(0+128)
  5412  05AA  30C0               	movlw	192
  5413  05AB  00DB               	movwf	map@in_max^(0+128)
  5414  05AC  307F               	movlw	127
  5415  05AD  00DC               	movwf	(map@in_max+1)^(0+128)
  5416  05AE  3044               	movlw	68
  5417  05AF  00DD               	movwf	(map@in_max+2)^(0+128)
  5418  05B0  3000               	movlw	0
  5419  05B1  00D8               	movwf	map@in_min^(0+128)
  5420  05B2  3000               	movlw	0
  5421  05B3  00D9               	movwf	(map@in_min+1)^(0+128)
  5422  05B4  3000               	movlw	0
  5423  05B5  00DA               	movwf	(map@in_min+2)^(0+128)
  5424  05B6  0022               	movlb	2	; select bank2
  5425  05B7  085F               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5426  05B8  0021               	movlb	1	; select bank1
  5427  05B9  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5428  05BA  0022               	movlb	2	; select bank2
  5429  05BB  085E               	movf	_knob3_prev^(0+256),w	;volatile
  5430  05BC  0021               	movlb	1	; select bank1
  5431  05BD  00A8               	movwf	___awtoft@c^(0+128)
  5432  05BE  319E  26A4  3183   	fcall	___awtoft
  5433  05C1  0021               	movlb	1	; select bank1
  5434  05C2  0828               	movf	?___awtoft^(0+128),w
  5435  05C3  00D5               	movwf	map@x^(0+128)
  5436  05C4  0829               	movf	(?___awtoft+1)^(0+128),w
  5437  05C5  00D6               	movwf	(map@x+1)^(0+128)
  5438  05C6  082A               	movf	(?___awtoft+2)^(0+128),w
  5439  05C7  00D7               	movwf	(map@x+2)^(0+128)
  5440  05C8  3196  26D6  3183   	fcall	_map
  5441  05CB  0021               	movlb	1	; select bank1
  5442  05CC  0855               	movf	?_map^(0+128),w
  5443  05CD  00E7               	movwf	___fttol@f1^(0+128)
  5444  05CE  0856               	movf	(?_map+1)^(0+128),w
  5445  05CF  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5446  05D0  0857               	movf	(?_map+2)^(0+128),w
  5447  05D1  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5448  05D2  3197  2761  3183   	fcall	___fttol
  5449  05D5  0021               	movlb	1	; select bank1
  5450  05D6  0868               	movf	(?___fttol^(0+128)+1),w
  5451  05D7  0022               	movlb	2	; select bank2
  5452  05D8  00C5               	movwf	(main@i_377+1)^(0+256)
  5453  05D9  0021               	movlb	1	; select bank1
  5454  05DA  0867               	movf	?___fttol^(0+128),w
  5455  05DB  0022               	movlb	2	; select bank2
  5456  05DC  00C4               	movwf	main@i_377^(0+256)
  5457                           
  5458                           ;main.c: 286: CCPR4 = (int)B25k[B25kLength - 1 - i];
  5459  05DD  0844               	movf	main@i_377^(0+256),w
  5460  05DE  3E01               	addlw	1
  5461  05DF  3AFF               	xorlw	255
  5462  05E0  3E01               	addlw	1
  5463  05E1  0023               	movlb	3	; select bank3
  5464  05E2  076C               	addwf	_B25kLength^(0+384),w
  5465  05E3  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5466  05E4  0086               	movwf	6
  5467  05E5  3002               	movlw	2	; select bank4/5
  5468  05E6  0087               	movwf	7
  5469  05E7  0801               	movf	1,w
  5470  05E8  0024               	movlb	4	; select bank4
  5471  05E9  00C8               	movwf	??_main^(0+512)
  5472  05EA  01C9               	clrf	(??_main^(0+512)+1)
  5473  05EB  0848               	movf	??_main^(0+512),w
  5474  05EC  0026               	movlb	6	; select bank6
  5475  05ED  0098               	movwf	24	;volatile
  5476  05EE  0024               	movlb	4	; select bank4
  5477  05EF  0849               	movf	(??_main+1)^(0+512),w
  5478  05F0  0026               	movlb	6	; select bank6
  5479  05F1  0099               	movwf	25	;volatile
  5480                           
  5481                           ;main.c: 287: CCPR5 = (int)B25k[i];
  5482  05F2  0022               	movlb	2	; select bank2
  5483  05F3  0844               	movf	main@i_377^(0+256),w
  5484  05F4  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5485  05F5  0086               	movwf	6
  5486  05F6  3002               	movlw	2	; select bank4/5
  5487  05F7  0087               	movwf	7
  5488  05F8  0801               	movf	1,w
  5489  05F9  0024               	movlb	4	; select bank4
  5490  05FA  00C8               	movwf	??_main^(0+512)
  5491  05FB  01C9               	clrf	(??_main^(0+512)+1)
  5492  05FC  0848               	movf	??_main^(0+512),w
  5493  05FD  0026               	movlb	6	; select bank6
  5494  05FE  009C               	movwf	28	;volatile
  5495  05FF  0024               	movlb	4	; select bank4
  5496  0600  0849               	movf	(??_main+1)^(0+512),w
  5497  0601  0026               	movlb	6	; select bank6
  5498  0602  009D               	movwf	29	;volatile
  5499  0603                     l6006:	
  5500                           
  5501                           ;main.c: 288: }
  5502                           ;main.c: 298: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5503  0603  0022               	movlb	2	; select bank2
  5504  0604  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5505  0605  0024               	movlb	4	; select bank4
  5506  0606  00C8               	movwf	??_main^(0+512)
  5507  0607  0022               	movlb	2	; select bank2
  5508  0608  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5509  0609  0024               	movlb	4	; select bank4
  5510  060A  00C9               	movwf	(??_main^(0+512)+1)
  5511  060B  0AC8               	incf	??_main^(0+512),f
  5512  060C  1903               	skipnz
  5513  060D  0AC9               	incf	(??_main^(0+512)+1),f
  5514  060E  0023               	movlb	3	; select bank3
  5515  060F  0856               	movf	_knob_4_pos^(0+384),w
  5516  0610  0024               	movlb	4	; select bank4
  5517  0611  0748               	addwf	??_main^(0+512),w
  5518  0612  00CA               	movwf	(??_main+2)^(0+512)
  5519  0613  0023               	movlb	3	; select bank3
  5520  0614  0857               	movf	(_knob_4_pos+1)^(0+384),w
  5521  0615  0024               	movlb	4	; select bank4
  5522  0616  3D49               	addwfc	(??_main+1)^(0+512),w
  5523  0617  00CB               	movwf	(??_main+3)^(0+512)
  5524  0618  084B               	movf	(??_main+3)^(0+512),w
  5525  0619  3A80               	xorlw	128
  5526  061A  00CC               	movwf	(??_main+4)^(0+512)
  5527  061B  3080               	movlw	128
  5528  061C  024C               	subwf	(??_main+4)^(0+512),w
  5529  061D  1D03               	skipz
  5530  061E  2E21               	goto	u6835
  5531  061F  3004               	movlw	4
  5532  0620  024A               	subwf	(??_main+2)^(0+512),w
  5533  0621                     u6835:	
  5534  0621  1803               	skipnc
  5535  0622  2E43               	goto	l6010
  5536  0623  0022               	movlb	2	; select bank2
  5537  0624  0960               	comf	_knob4_prev^(0+256),w	;volatile
  5538  0625  0024               	movlb	4	; select bank4
  5539  0626  00C8               	movwf	??_main^(0+512)
  5540  0627  0022               	movlb	2	; select bank2
  5541  0628  0961               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5542  0629  0024               	movlb	4	; select bank4
  5543  062A  00C9               	movwf	(??_main^(0+512)+1)
  5544  062B  0AC8               	incf	??_main^(0+512),f
  5545  062C  1903               	skipnz
  5546  062D  0AC9               	incf	(??_main^(0+512)+1),f
  5547  062E  0023               	movlb	3	; select bank3
  5548  062F  0856               	movf	_knob_4_pos^(0+384),w
  5549  0630  0024               	movlb	4	; select bank4
  5550  0631  0748               	addwf	??_main^(0+512),w
  5551  0632  00CA               	movwf	(??_main+2)^(0+512)
  5552  0633  0023               	movlb	3	; select bank3
  5553  0634  0857               	movf	(_knob_4_pos+1)^(0+384),w
  5554  0635  0024               	movlb	4	; select bank4
  5555  0636  3D49               	addwfc	(??_main+1)^(0+512),w
  5556  0637  00CB               	movwf	(??_main+3)^(0+512)
  5557  0638  084B               	movf	(??_main+3)^(0+512),w
  5558  0639  3A80               	xorlw	128
  5559  063A  00CC               	movwf	(??_main+4)^(0+512)
  5560  063B  307F               	movlw	127
  5561  063C  024C               	subwf	(??_main+4)^(0+512),w
  5562  063D  1D03               	skipz
  5563  063E  2E41               	goto	u6845
  5564  063F  30FD               	movlw	253
  5565  0640  024A               	subwf	(??_main+2)^(0+512),w
  5566  0641                     u6845:	
  5567  0641  1803               	skipnc
  5568  0642  2E8B               	goto	l6014
  5569  0643                     l6010:	
  5570                           
  5571                           ;main.c: 299: knob4_prev = knob_4_pos;
  5572  0643  0023               	movlb	3	; select bank3
  5573  0644  0857               	movf	(_knob_4_pos+1)^(0+384),w
  5574  0645  0022               	movlb	2	; select bank2
  5575  0646  00E1               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5576  0647  0023               	movlb	3	; select bank3
  5577  0648  0856               	movf	_knob_4_pos^(0+384),w
  5578  0649  0022               	movlb	2	; select bank2
  5579  064A  00E0               	movwf	_knob4_prev^(0+256)	;volatile
  5580                           
  5581                           ;main.c: 301: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5582  064B  3000               	movlw	0
  5583  064C  0021               	movlb	1	; select bank1
  5584  064D  00E1               	movwf	map@out_max^(0+128)
  5585  064E  303C               	movlw	60
  5586  064F  00E2               	movwf	(map@out_max+1)^(0+128)
  5587  0650  3042               	movlw	66
  5588  0651  00E3               	movwf	(map@out_max+2)^(0+128)
  5589  0652  3000               	movlw	0
  5590  0653  00DE               	movwf	map@out_min^(0+128)
  5591  0654  3040               	movlw	64
  5592  0655  00DF               	movwf	(map@out_min+1)^(0+128)
  5593  0656  3040               	movlw	64
  5594  0657  00E0               	movwf	(map@out_min+2)^(0+128)
  5595  0658  30C0               	movlw	192
  5596  0659  00DB               	movwf	map@in_max^(0+128)
  5597  065A  307F               	movlw	127
  5598  065B  00DC               	movwf	(map@in_max+1)^(0+128)
  5599  065C  3044               	movlw	68
  5600  065D  00DD               	movwf	(map@in_max+2)^(0+128)
  5601  065E  3000               	movlw	0
  5602  065F  00D8               	movwf	map@in_min^(0+128)
  5603  0660  3000               	movlw	0
  5604  0661  00D9               	movwf	(map@in_min+1)^(0+128)
  5605  0662  3000               	movlw	0
  5606  0663  00DA               	movwf	(map@in_min+2)^(0+128)
  5607  0664  0022               	movlb	2	; select bank2
  5608  0665  0861               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5609  0666  0021               	movlb	1	; select bank1
  5610  0667  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5611  0668  0022               	movlb	2	; select bank2
  5612  0669  0860               	movf	_knob4_prev^(0+256),w	;volatile
  5613  066A  0021               	movlb	1	; select bank1
  5614  066B  00A8               	movwf	___awtoft@c^(0+128)
  5615  066C  319E  26A4  3183   	fcall	___awtoft
  5616  066F  0021               	movlb	1	; select bank1
  5617  0670  0828               	movf	?___awtoft^(0+128),w
  5618  0671  00D5               	movwf	map@x^(0+128)
  5619  0672  0829               	movf	(?___awtoft+1)^(0+128),w
  5620  0673  00D6               	movwf	(map@x+1)^(0+128)
  5621  0674  082A               	movf	(?___awtoft+2)^(0+128),w
  5622  0675  00D7               	movwf	(map@x+2)^(0+128)
  5623  0676  3196  26D6  3183   	fcall	_map
  5624  0679  0021               	movlb	1	; select bank1
  5625  067A  0855               	movf	?_map^(0+128),w
  5626  067B  00E7               	movwf	___fttol@f1^(0+128)
  5627  067C  0856               	movf	(?_map+1)^(0+128),w
  5628  067D  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5629  067E  0857               	movf	(?_map+2)^(0+128),w
  5630  067F  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5631  0680  3197  2761  3183   	fcall	___fttol
  5632  0683  0021               	movlb	1	; select bank1
  5633  0684  0868               	movf	(?___fttol^(0+128)+1),w
  5634  0685  0023               	movlb	3	; select bank3
  5635  0686  00E6               	movwf	(_mod_delay_time+1)^(0+384)
  5636  0687  0021               	movlb	1	; select bank1
  5637  0688  0867               	movf	?___fttol^(0+128),w
  5638  0689  0023               	movlb	3	; select bank3
  5639  068A  00E5               	movwf	_mod_delay_time^(0+384)
  5640  068B                     l6014:	
  5641                           
  5642                           ;main.c: 302: }
  5643                           ;main.c: 310: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5644  068B  0022               	movlb	2	; select bank2
  5645  068C  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5646  068D  0024               	movlb	4	; select bank4
  5647  068E  00C8               	movwf	??_main^(0+512)
  5648  068F  0022               	movlb	2	; select bank2
  5649  0690  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5650  0691  0024               	movlb	4	; select bank4
  5651  0692  00C9               	movwf	(??_main^(0+512)+1)
  5652  0693  0AC8               	incf	??_main^(0+512),f
  5653  0694  1903               	skipnz
  5654  0695  0AC9               	incf	(??_main^(0+512)+1),f
  5655  0696  0023               	movlb	3	; select bank3
  5656  0697  0858               	movf	_knob_5_pos^(0+384),w
  5657  0698  0024               	movlb	4	; select bank4
  5658  0699  0748               	addwf	??_main^(0+512),w
  5659  069A  00CA               	movwf	(??_main+2)^(0+512)
  5660  069B  0023               	movlb	3	; select bank3
  5661  069C  0859               	movf	(_knob_5_pos+1)^(0+384),w
  5662  069D  0024               	movlb	4	; select bank4
  5663  069E  3D49               	addwfc	(??_main+1)^(0+512),w
  5664  069F  00CB               	movwf	(??_main+3)^(0+512)
  5665  06A0  084B               	movf	(??_main+3)^(0+512),w
  5666  06A1  3A80               	xorlw	128
  5667  06A2  00CC               	movwf	(??_main+4)^(0+512)
  5668  06A3  3080               	movlw	128
  5669  06A4  024C               	subwf	(??_main+4)^(0+512),w
  5670  06A5  1D03               	skipz
  5671  06A6  2EA9               	goto	u6855
  5672  06A7  3004               	movlw	4
  5673  06A8  024A               	subwf	(??_main+2)^(0+512),w
  5674  06A9                     u6855:	
  5675  06A9  1803               	skipnc
  5676  06AA  2ECB               	goto	l6018
  5677  06AB  0022               	movlb	2	; select bank2
  5678  06AC  0962               	comf	_knob5_prev^(0+256),w	;volatile
  5679  06AD  0024               	movlb	4	; select bank4
  5680  06AE  00C8               	movwf	??_main^(0+512)
  5681  06AF  0022               	movlb	2	; select bank2
  5682  06B0  0963               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5683  06B1  0024               	movlb	4	; select bank4
  5684  06B2  00C9               	movwf	(??_main^(0+512)+1)
  5685  06B3  0AC8               	incf	??_main^(0+512),f
  5686  06B4  1903               	skipnz
  5687  06B5  0AC9               	incf	(??_main^(0+512)+1),f
  5688  06B6  0023               	movlb	3	; select bank3
  5689  06B7  0858               	movf	_knob_5_pos^(0+384),w
  5690  06B8  0024               	movlb	4	; select bank4
  5691  06B9  0748               	addwf	??_main^(0+512),w
  5692  06BA  00CA               	movwf	(??_main+2)^(0+512)
  5693  06BB  0023               	movlb	3	; select bank3
  5694  06BC  0859               	movf	(_knob_5_pos+1)^(0+384),w
  5695  06BD  0024               	movlb	4	; select bank4
  5696  06BE  3D49               	addwfc	(??_main+1)^(0+512),w
  5697  06BF  00CB               	movwf	(??_main+3)^(0+512)
  5698  06C0  084B               	movf	(??_main+3)^(0+512),w
  5699  06C1  3A80               	xorlw	128
  5700  06C2  00CC               	movwf	(??_main+4)^(0+512)
  5701  06C3  307F               	movlw	127
  5702  06C4  024C               	subwf	(??_main+4)^(0+512),w
  5703  06C5  1D03               	skipz
  5704  06C6  2EC9               	goto	u6865
  5705  06C7  30FD               	movlw	253
  5706  06C8  024A               	subwf	(??_main+2)^(0+512),w
  5707  06C9                     u6865:	
  5708  06C9  1803               	skipnc
  5709  06CA  2F13               	goto	l6022
  5710  06CB                     l6018:	
  5711                           
  5712                           ;main.c: 311: knob5_prev = knob_5_pos;
  5713  06CB  0023               	movlb	3	; select bank3
  5714  06CC  0859               	movf	(_knob_5_pos+1)^(0+384),w
  5715  06CD  0022               	movlb	2	; select bank2
  5716  06CE  00E3               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5717  06CF  0023               	movlb	3	; select bank3
  5718  06D0  0858               	movf	_knob_5_pos^(0+384),w
  5719  06D1  0022               	movlb	2	; select bank2
  5720  06D2  00E2               	movwf	_knob5_prev^(0+256)	;volatile
  5721                           
  5722                           ;main.c: 312: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  5723  06D3  3000               	movlw	0
  5724  06D4  0021               	movlb	1	; select bank1
  5725  06D5  00E1               	movwf	map@out_max^(0+128)
  5726  06D6  3000               	movlw	0
  5727  06D7  00E2               	movwf	(map@out_max+1)^(0+128)
  5728  06D8  3000               	movlw	0
  5729  06D9  00E3               	movwf	(map@out_max+2)^(0+128)
  5730  06DA  3060               	movlw	96
  5731  06DB  00DE               	movwf	map@out_min^(0+128)
  5732  06DC  309F               	movlw	159
  5733  06DD  00DF               	movwf	(map@out_min+1)^(0+128)
  5734  06DE  3044               	movlw	68
  5735  06DF  00E0               	movwf	(map@out_min+2)^(0+128)
  5736  06E0  30C0               	movlw	192
  5737  06E1  00DB               	movwf	map@in_max^(0+128)
  5738  06E2  307F               	movlw	127
  5739  06E3  00DC               	movwf	(map@in_max+1)^(0+128)
  5740  06E4  3044               	movlw	68
  5741  06E5  00DD               	movwf	(map@in_max+2)^(0+128)
  5742  06E6  3000               	movlw	0
  5743  06E7  00D8               	movwf	map@in_min^(0+128)
  5744  06E8  3000               	movlw	0
  5745  06E9  00D9               	movwf	(map@in_min+1)^(0+128)
  5746  06EA  3000               	movlw	0
  5747  06EB  00DA               	movwf	(map@in_min+2)^(0+128)
  5748  06EC  0022               	movlb	2	; select bank2
  5749  06ED  0863               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  5750  06EE  0021               	movlb	1	; select bank1
  5751  06EF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5752  06F0  0022               	movlb	2	; select bank2
  5753  06F1  0862               	movf	_knob5_prev^(0+256),w	;volatile
  5754  06F2  0021               	movlb	1	; select bank1
  5755  06F3  00A8               	movwf	___awtoft@c^(0+128)
  5756  06F4  319E  26A4  3183   	fcall	___awtoft
  5757  06F7  0021               	movlb	1	; select bank1
  5758  06F8  0828               	movf	?___awtoft^(0+128),w
  5759  06F9  00D5               	movwf	map@x^(0+128)
  5760  06FA  0829               	movf	(?___awtoft+1)^(0+128),w
  5761  06FB  00D6               	movwf	(map@x+1)^(0+128)
  5762  06FC  082A               	movf	(?___awtoft+2)^(0+128),w
  5763  06FD  00D7               	movwf	(map@x+2)^(0+128)
  5764  06FE  3196  26D6  3183   	fcall	_map
  5765  0701  0021               	movlb	1	; select bank1
  5766  0702  0855               	movf	?_map^(0+128),w
  5767  0703  00E7               	movwf	___fttol@f1^(0+128)
  5768  0704  0856               	movf	(?_map+1)^(0+128),w
  5769  0705  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5770  0706  0857               	movf	(?_map+2)^(0+128),w
  5771  0707  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5772  0708  3197  2761  3183   	fcall	___fttol
  5773  070B  0021               	movlb	1	; select bank1
  5774  070C  0868               	movf	(?___fttol^(0+128)+1),w
  5775  070D  0023               	movlb	3	; select bank3
  5776  070E  00C7               	movwf	(_adjusted_pot_value+1)^(0+384)
  5777  070F  0021               	movlb	1	; select bank1
  5778  0710  0867               	movf	?___fttol^(0+128),w
  5779  0711  0023               	movlb	3	; select bank3
  5780  0712  00C6               	movwf	_adjusted_pot_value^(0+384)
  5781  0713                     l6022:	
  5782                           
  5783                           ;main.c: 314: }
  5784                           ;main.c: 393: if (delay_time_changed == 1) {
  5785  0713  0023               	movlb	3	; select bank3
  5786  0714  0363               	decf	_delay_time_changed^(0+384),w
  5787  0715  0464               	iorwf	(_delay_time_changed+1)^(0+384),w
  5788  0716  1D03               	btfss	3,2
  5789  0717  2BAC               	goto	l5942
  5790                           
  5791                           ;main.c: 394: delay_time = baseline_delay_time;
  5792  0718  0020               	movlb	0	; select bank0
  5793  0719  085B               	movf	_baseline_delay_time+3,w	;volatile
  5794  071A  00DF               	movwf	_delay_time+3	;volatile
  5795  071B  085A               	movf	_baseline_delay_time+2,w	;volatile
  5796  071C  00DE               	movwf	_delay_time+2	;volatile
  5797  071D  0859               	movf	_baseline_delay_time+1,w	;volatile
  5798  071E  00DD               	movwf	_delay_time+1	;volatile
  5799  071F  0858               	movf	_baseline_delay_time,w	;volatile
  5800  0720  00DC               	movwf	_delay_time	;volatile
  5801                           
  5802                           ;main.c: 395: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  5803  0721  0859               	movf	_baseline_delay_time+1,w	;volatile
  5804  0722  0022               	movlb	2	; select bank2
  5805  0723  00B7               	movwf	(set_subdivision@x+1)^(0+256)
  5806  0724  0020               	movlb	0	; select bank0
  5807  0725  0858               	movf	_baseline_delay_time,w	;volatile
  5808  0726  0022               	movlb	2	; select bank2
  5809  0727  00B6               	movwf	set_subdivision@x^(0+256)
  5810  0728  0020               	movlb	0	; select bank0
  5811  0729  0865               	movf	_top_push_state+1,w
  5812  072A  0022               	movlb	2	; select bank2
  5813  072B  00B9               	movwf	(set_subdivision@y+1)^(0+256)
  5814  072C  0020               	movlb	0	; select bank0
  5815  072D  0864               	movf	_top_push_state,w
  5816  072E  0022               	movlb	2	; select bank2
  5817  072F  00B8               	movwf	set_subdivision@y^(0+256)
  5818  0730  3189  2179  3183   	fcall	_set_subdivision
  5819  0733  0022               	movlb	2	; select bank2
  5820  0734  0836               	movf	?_set_subdivision^(0+256),w
  5821  0735  0020               	movlb	0	; select bank0
  5822  0736  00DC               	movwf	_delay_time	;volatile
  5823  0737  0022               	movlb	2	; select bank2
  5824  0738  0837               	movf	(?_set_subdivision+1)^(0+256),w
  5825  0739  0020               	movlb	0	; select bank0
  5826  073A  00DD               	movwf	_delay_time+1	;volatile
  5827  073B  0D89               	rlf	9,f
  5828  073C  3B89               	subwfb	9,f
  5829  073D  0989               	comf	9,f
  5830  073E  00DE               	movwf	_delay_time+2	;volatile
  5831  073F  00DF               	movwf	_delay_time+3	;volatile
  5832                           
  5833                           ;main.c: 396: reset_sub_delay = 1;
  5834  0740  3001               	movlw	1
  5835  0741  0023               	movlb	3	; select bank3
  5836  0742  00DC               	movwf	_reset_sub_delay^(0+384)
  5837  0743  3000               	movlw	0
  5838  0744  00DD               	movwf	(_reset_sub_delay^(0+384)+1)
  5839                           
  5840                           ;main.c: 397: delayfound = 0;
  5841  0745  01D0               	clrf	_delayfound^(0+384)
  5842  0746  01D1               	clrf	(_delayfound+1)^(0+384)
  5843                           
  5844                           ;main.c: 398: delay_counter = 0;
  5845  0747  0022               	movlb	2	; select bank2
  5846  0748  01C6               	clrf	_delay_counter^(0+256)	;volatile
  5847  0749  01C7               	clrf	(_delay_counter+1)^(0+256)	;volatile
  5848  074A                     l6040:	
  5849                           ;main.c: 400: while (delayfound == 0) {
  5850                           
  5851  074A  0023               	movlb	3	; select bank3
  5852  074B  0850               	movf	_delayfound^(0+384),w
  5853  074C  0451               	iorwf	(_delayfound+1)^(0+384),w
  5854  074D  1D03               	btfss	3,2
  5855  074E  2FA7               	goto	l6042
  5856                           
  5857                           ;main.c: 401: if (delayArray[delay_counter] <= delay_time * 2) {
  5858  074F  0022               	movlb	2	; select bank2
  5859  0750  0847               	movf	(_delay_counter+1)^(0+256),w	;volatile
  5860  0751  0024               	movlb	4	; select bank4
  5861  0752  00C9               	movwf	(??_main^(0+512)+1)
  5862  0753  0022               	movlb	2	; select bank2
  5863  0754  0846               	movf	_delay_counter^(0+256),w	;volatile
  5864  0755  0024               	movlb	4	; select bank4
  5865  0756  00C8               	movwf	??_main^(0+512)
  5866  0757  35C8               	lslf	??_main^(0+512),f
  5867  0758  0DC9               	rlf	(??_main^(0+512)+1),f
  5868  0759  30E8               	movlw	232
  5869  075A  00CA               	movwf	(??_main+2)^(0+512)
  5870  075B  3023               	movlw	35
  5871  075C  00CB               	movwf	((??_main+2)^(0+512)+1)
  5872  075D  0848               	movf	??_main^(0+512),w
  5873  075E  074A               	addwf	(??_main+2)^(0+512),w
  5874  075F  0086               	movwf	6
  5875  0760  0849               	movf	(??_main+1)^(0+512),w
  5876  0761  3D4B               	addwfc	(??_main+3)^(0+512),w
  5877  0762  0087               	movwf	7
  5878  0763  3F40               	moviw [0]fsr1
  5879  0764  00CC               	movwf	(??_main+4)^(0+512)
  5880  0765  3F41               	moviw [1]fsr1
  5881  0766  00CD               	movwf	((??_main+4)^(0+512)+1)
  5882  0767  084C               	movf	(??_main+4)^(0+512),w
  5883  0768  00CE               	movwf	(??_main+6)^(0+512)
  5884  0769  084D               	movf	(??_main+5)^(0+512),w
  5885  076A  00CF               	movwf	((??_main+6)^(0+512)+1)
  5886  076B  3000               	movlw	0
  5887  076C  1BCF               	btfsc	((??_main+6)^(0+512)+1),7
  5888  076D  30FF               	movlw	255
  5889  076E  00D0               	movwf	((??_main+6)^(0+512)+2)
  5890  076F  00D1               	movwf	((??_main+6)^(0+512)+3)
  5891  0770  0020               	movlb	0	; select bank0
  5892  0771  085C               	movf	_delay_time,w	;volatile
  5893  0772  0024               	movlb	4	; select bank4
  5894  0773  00D2               	movwf	(??_main+10)^(0+512)
  5895  0774  0020               	movlb	0	; select bank0
  5896  0775  085D               	movf	_delay_time+1,w	;volatile
  5897  0776  0024               	movlb	4	; select bank4
  5898  0777  00D3               	movwf	((??_main+10)^(0+512)+1)
  5899  0778  0020               	movlb	0	; select bank0
  5900  0779  085E               	movf	_delay_time+2,w	;volatile
  5901  077A  0024               	movlb	4	; select bank4
  5902  077B  00D4               	movwf	((??_main+10)^(0+512)+2)
  5903  077C  0020               	movlb	0	; select bank0
  5904  077D  085F               	movf	_delay_time+3,w	;volatile
  5905  077E  0024               	movlb	4	; select bank4
  5906  077F  00D5               	movwf	((??_main+10)^(0+512)+3)
  5907  0780  3001               	movlw	1
  5908  0781                     u6885:	
  5909  0781  35D2               	lslf	(??_main+10)^(0+512),f
  5910  0782  0DD3               	rlf	((??_main+10)^(0+512)+1),f
  5911  0783  0DD4               	rlf	((??_main+10)^(0+512)+2),f
  5912  0784  0DD5               	rlf	((??_main+10)^(0+512)+3),f
  5913  0785  0B89               	decfsz	9,f
  5914  0786  2F81               	goto	u6885
  5915  0787  0855               	movf	(??_main+13)^(0+512),w
  5916  0788  3A80               	xorlw	128
  5917  0789  00D6               	movwf	(??_main+14)^(0+512)
  5918  078A  0851               	movf	(??_main+9)^(0+512),w
  5919  078B  3A80               	xorlw	128
  5920  078C  0256               	subwf	(??_main+14)^(0+512),w
  5921  078D  1D03               	skipz
  5922  078E  2F99               	goto	u6893
  5923  078F  0850               	movf	(??_main+8)^(0+512),w
  5924  0790  0254               	subwf	(??_main+12)^(0+512),w
  5925  0791  1D03               	skipz
  5926  0792  2F99               	goto	u6893
  5927  0793  084F               	movf	(??_main+7)^(0+512),w
  5928  0794  0253               	subwf	(??_main+11)^(0+512),w
  5929  0795  1D03               	skipz
  5930  0796  2F99               	goto	u6893
  5931  0797  084E               	movf	(??_main+6)^(0+512),w
  5932  0798  0252               	subwf	(??_main+10)^(0+512),w
  5933  0799                     u6893:	
  5934  0799  1C03               	skipc
  5935  079A  2FA1               	goto	l6038
  5936                           
  5937                           ;main.c: 402: delayfound = 1;
  5938  079B  3001               	movlw	1
  5939  079C  0023               	movlb	3	; select bank3
  5940  079D  00D0               	movwf	_delayfound^(0+384)
  5941  079E  3000               	movlw	0
  5942  079F  00D1               	movwf	(_delayfound^(0+384)+1)
  5943                           
  5944                           ;main.c: 406: } else {
  5945  07A0  2F4A               	goto	l6040
  5946  07A1                     l6038:	
  5947                           
  5948                           ;main.c: 407: delay_counter++;
  5949  07A1  3001               	movlw	1
  5950  07A2  0022               	movlb	2	; select bank2
  5951  07A3  07C6               	addwf	_delay_counter^(0+256),f	;volatile
  5952  07A4  3000               	movlw	0
  5953  07A5  3DC7               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  5954  07A6  2F4A               	goto	l6040
  5955  07A7                     l6042:	
  5956                           
  5957                           ;main.c: 409: }
  5958                           ;main.c: 410: }
  5959                           ;main.c: 429: delay_time_changed = 0;
  5960  07A7  01E3               	clrf	_delay_time_changed^(0+384)
  5961  07A8  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  5962  07A9  2BAC               	goto	l5942
  5963  07AA                     __end_of_main:	
  5964                           
  5965                           	psect	text1
  5966  1230                     __ptext1:	
  5967 ;; *************** function _update_mode *****************
  5968 ;; Defined at:
  5969 ;;		line 82 in file "tactiles.c"
  5970 ;; Parameters:    Size  Location     Type
  5971 ;;		None
  5972 ;; Auto vars:     Size  Location     Type
  5973 ;;		None
  5974 ;; Return value:  Size  Location     Type
  5975 ;;                  1    wreg      void 
  5976 ;; Registers used:
  5977 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5978 ;; Tracked objects:
  5979 ;;		On entry : 0/0
  5980 ;;		On exit  : 0/0
  5981 ;;		Unchanged: 0/0
  5982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5985 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5986 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5987 ;;Total ram usage:        1 bytes
  5988 ;; Hardware stack levels used:    1
  5989 ;; Hardware stack levels required when called:    3
  5990 ;; This function calls:
  5991 ;;		Nothing
  5992 ;; This function is called by:
  5993 ;;		_main
  5994 ;; This function uses a non-reentrant model
  5995 ;;
  5996                           
  5997                           
  5998                           ;psect for function _update_mode
  5999  1230                     _update_mode:	
  6000                           
  6001                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6002                           
  6003                           ;incstack = 0
  6004                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6005  1230  0020               	movlb	0	; select bank0
  6006  1231  180E               	btfsc	14,0	;volatile
  6007  1232  2A6D               	goto	l5650
  6008                           
  6009                           ;tactiles.c: 88: debounce_mode2++;
  6010  1233  3001               	movlw	1
  6011  1234  0023               	movlb	3	; select bank3
  6012  1235  07CE               	addwf	_debounce_mode2^(0+384),f
  6013  1236  3000               	movlw	0
  6014  1237  3DCF               	addwfc	(_debounce_mode2+1)^(0+384),f
  6015                           
  6016                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6017  1238  084F               	movf	(_debounce_mode2+1)^(0+384),w
  6018  1239  3A80               	xorlw	128
  6019  123A  0021               	movlb	1	; select bank1
  6020  123B  00A0               	movwf	??_update_mode^(0+128)
  6021  123C  3080               	movlw	128
  6022  123D  0220               	subwf	??_update_mode^(0+128),w
  6023  123E  1D03               	skipz
  6024  123F  2A43               	goto	u6235
  6025  1240  301A               	movlw	26
  6026  1241  0023               	movlb	3	; select bank3
  6027  1242  024E               	subwf	_debounce_mode2^(0+384),w
  6028  1243                     u6235:	
  6029  1243  1C03               	skipc
  6030  1244  0008               	return
  6031                           
  6032                           ;tactiles.c: 90: debounce_mode2 = 25;
  6033  1245  3019               	movlw	25
  6034  1246  0023               	movlb	3	; select bank3
  6035  1247  00CE               	movwf	_debounce_mode2^(0+384)
  6036  1248  3000               	movlw	0
  6037  1249  00CF               	movwf	(_debounce_mode2^(0+384)+1)
  6038                           
  6039                           ;tactiles.c: 91: mode2_state++;
  6040  124A  3001               	movlw	1
  6041  124B  0021               	movlb	1	; select bank1
  6042  124C  00A0               	movwf	??_update_mode^(0+128)
  6043  124D  0820               	movf	??_update_mode^(0+128),w
  6044  124E  0022               	movlb	2	; select bank2
  6045  124F  07D5               	addwf	_mode2_state^(0+256),f
  6046                           
  6047                           ;tactiles.c: 92: if (mode2_state > 2) {
  6048  1250  3003               	movlw	3
  6049  1251  0255               	subwf	_mode2_state^(0+256),w
  6050  1252  1C03               	skipc
  6051  1253  2A5E               	goto	l5648
  6052                           
  6053                           ;tactiles.c: 93: mode2_state = 0;
  6054  1254  01D5               	clrf	_mode2_state^(0+256)
  6055                           
  6056                           ;tactiles.c: 94: }
  6057                           ;tactiles.c: 95: switch(mode2_state) {
  6058  1255  2A5E               	goto	l5648
  6059  1256                     l863:	
  6060                           ;tactiles.c: 96: case 0:
  6061                           
  6062                           
  6063                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6064  1256  108D               	bcf	13,1	;volatile
  6065  1257  2A5C               	goto	L1
  6066  1258                     l865:	
  6067                           ;tactiles.c: 100: case 1:
  6068                           
  6069                           ;tactiles.c: 99: break;
  6070                           
  6071                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6072                           
  6073                           
  6074                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6075  1258  108D               	bcf	13,1	;volatile
  6076                           
  6077                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6078  1259  140D               	bsf	13,0	;volatile
  6079                           
  6080                           ;tactiles.c: 103: break;
  6081  125A  2A69               	goto	l867
  6082  125B                     l866:	
  6083                           ;tactiles.c: 104: case 2:
  6084                           
  6085                           
  6086                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6087  125B  148D               	bsf	13,1	;volatile
  6088  125C                     L1:	
  6089                           
  6090                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6091  125C  100D               	bcf	13,0	;volatile
  6092                           
  6093                           ;tactiles.c: 108: }
  6094                           
  6095                           ;tactiles.c: 107: break;
  6096  125D  2A69               	goto	l867
  6097  125E                     l5648:	
  6098  125E  0855               	movf	_mode2_state^(0+256),w
  6099                           
  6100                           ; Switch size 1, requested type "space"
  6101                           ; Number of cases is 3, Range of values is 0 to 2
  6102                           ; switch strategies available:
  6103                           ; Name         Instructions Cycles
  6104                           ; simple_byte           10     6 (average)
  6105                           ; direct_byte           12     6 (fixed)
  6106                           ; jumptable            260     6 (fixed)
  6107                           ;	Chosen strategy is simple_byte
  6108  125F  3A00               	xorlw	0	; case 0
  6109  1260  1903               	skipnz
  6110  1261  2A56               	goto	l863
  6111  1262  3A01               	xorlw	1	; case 1
  6112  1263  1903               	skipnz
  6113  1264  2A58               	goto	l865
  6114  1265  3A03               	xorlw	3	; case 2
  6115  1266  1903               	skipnz
  6116  1267  2A5B               	goto	l866
  6117  1268  2A69               	goto	l867
  6118  1269                     l867:	
  6119                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6120                           
  6121  1269  0020               	movlb	0	; select bank0
  6122  126A  180E               	btfsc	14,0	;volatile
  6123  126B  0008               	return
  6124  126C  2A69               	goto	l867
  6125  126D                     l5650:	
  6126                           ;tactiles.c: 110: }
  6127                           ;tactiles.c: 111: }
  6128                           ;tactiles.c: 112: } else {
  6129                           
  6130                           
  6131                           ;tactiles.c: 113: debounce_mode2 = 0;
  6132  126D  0023               	movlb	3	; select bank3
  6133  126E  01CE               	clrf	_debounce_mode2^(0+384)
  6134  126F  01CF               	clrf	(_debounce_mode2+1)^(0+384)
  6135  1270  0008               	return
  6136  1271                     __end_of_update_mode:	
  6137                           
  6138                           	psect	text2
  6139  0C14                     __ptext2:	
  6140 ;; *************** function _updateSwitchTap *****************
  6141 ;; Defined at:
  6142 ;;		line 48 in file "SwitchTap.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;		None
  6145 ;; Auto vars:     Size  Location     Type
  6146 ;;  tapCntDiviso    2   28[BANK1 ] int 
  6147 ;;  iCnt            1   30[BANK1 ] unsigned char 
  6148 ;; Return value:  Size  Location     Type
  6149 ;;                  1    wreg      void 
  6150 ;; Registers used:
  6151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6158 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6159 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6160 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6161 ;;Total ram usage:        9 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    6
  6164 ;; This function calls:
  6165 ;;		___aldiv
  6166 ;;		_setDoublePressState
  6167 ;;		_setLongTapState
  6168 ;; This function is called by:
  6169 ;;		_main
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           
  6174                           ;psect for function _updateSwitchTap
  6175  0C14                     _updateSwitchTap:	
  6176                           
  6177                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6178                           
  6179                           ;incstack = 0
  6180                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6181  0C14  0021               	movlb	1	; select bank1
  6182  0C15  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6183                           
  6184                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6185  0C16  0020               	movlb	0	; select bank0
  6186  0C17  1810               	btfsc	16,0	;volatile
  6187  0C18  2C1F               	goto	l5778
  6188                           
  6189                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6190  0C19  0857               	movf	_switchTap_pressed,w
  6191  0C1A  1903               	btfsc	3,2
  6192  0C1B  2C29               	goto	l1200
  6193                           
  6194                           ;SwitchTap.c: 59: switchTap_pressed--;
  6195  0C1C  3001               	movlw	1
  6196  0C1D  02D7               	subwf	_switchTap_pressed,f
  6197                           
  6198                           ;SwitchTap.c: 60: }
  6199                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6200  0C1E  2C29               	goto	l1200
  6201  0C1F                     l5778:	
  6202  0C1F  3019               	movlw	25
  6203  0C20  0257               	subwf	_switchTap_pressed,w
  6204  0C21  1803               	skipnc
  6205  0C22  2C29               	goto	l1200
  6206                           
  6207                           ;SwitchTap.c: 62: switchTap_pressed++;
  6208  0C23  3001               	movlw	1
  6209  0C24  0021               	movlb	1	; select bank1
  6210  0C25  00B6               	movwf	??_updateSwitchTap^(0+128)
  6211  0C26  0836               	movf	??_updateSwitchTap^(0+128),w
  6212  0C27  0020               	movlb	0	; select bank0
  6213  0C28  07D7               	addwf	_switchTap_pressed,f
  6214  0C29                     l1200:	
  6215                           
  6216                           ;SwitchTap.c: 63: }
  6217                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6218  0C29  0857               	movf	_switchTap_pressed,w
  6219  0C2A  1D03               	btfss	3,2
  6220  0C2B  2DDE               	goto	l5862
  6221                           
  6222                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6223  0C2C  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6224  0C2D  2CB1               	goto	l5822
  6225  0C2E  084C               	movf	_tap_timer+3,w	;volatile
  6226  0C2F  1D03               	btfss	3,2
  6227  0C30  2C3A               	goto	l5784
  6228  0C31  084B               	movf	_tap_timer+2,w	;volatile
  6229  0C32  1D03               	btfss	3,2
  6230  0C33  2C3A               	goto	l5784
  6231  0C34  301B               	movlw	27
  6232  0C35  0249               	subwf	_tap_timer,w	;volatile
  6233  0C36  3006               	movlw	6
  6234  0C37  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6235  0C38  1C03               	btfss	3,0
  6236  0C39  2CB1               	goto	l5822
  6237  0C3A                     l5784:	
  6238                           
  6239                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6240  0C3A  0022               	movlb	2	; select bank2
  6241  0C3B  0358               	decf	_switchTap_down^(0+256),w
  6242  0C3C  1903               	btfsc	3,2
  6243  0C3D  2C78               	goto	l5800
  6244                           
  6245                           ;SwitchTap.c: 78: switchTap_down = 1;
  6246  0C3E  01D8               	clrf	_switchTap_down^(0+256)
  6247  0C3F  0AD8               	incf	_switchTap_down^(0+256),f
  6248                           
  6249                           ;SwitchTap.c: 79: tap_timer = 0;
  6250  0C40  3000               	movlw	0
  6251  0C41  0020               	movlb	0	; select bank0
  6252  0C42  00CC               	movwf	_tap_timer+3	;volatile
  6253  0C43  3000               	movlw	0
  6254  0C44  00CB               	movwf	_tap_timer+2	;volatile
  6255  0C45  3000               	movlw	0
  6256  0C46  00CA               	movwf	_tap_timer+1	;volatile
  6257  0C47  3000               	movlw	0
  6258  0C48  00C9               	movwf	_tap_timer	;volatile
  6259                           
  6260                           ;SwitchTap.c: 80: tap_iteration = 1;
  6261  0C49  3001               	movlw	1
  6262  0C4A  0023               	movlb	3	; select bank3
  6263  0C4B  00E9               	movwf	_tap_iteration^(0+384)
  6264  0C4C  3000               	movlw	0
  6265  0C4D  00EA               	movwf	(_tap_iteration^(0+384)+1)
  6266                           
  6267                           ;SwitchTap.c: 81: tap_total = 0;
  6268  0C4E  3000               	movlw	0
  6269  0C4F  00BF               	movwf	(_tap_total+3)^(0+384)
  6270  0C50  3000               	movlw	0
  6271  0C51  00BE               	movwf	(_tap_total+2)^(0+384)
  6272  0C52  3000               	movlw	0
  6273  0C53  00BD               	movwf	(_tap_total+1)^(0+384)
  6274  0C54  3000               	movlw	0
  6275  0C55  00BC               	movwf	_tap_total^(0+384)
  6276                           
  6277                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6278  0C56  01E3               	clrf	_delay_time_changed^(0+384)
  6279  0C57  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  6280                           
  6281                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6282  0C58  0021               	movlb	1	; select bank1
  6283  0C59  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6284  0C5A  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6285  0C5B                     l5798:	
  6286  0C5B  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6287  0C5C  0020               	movlb	0	; select bank0
  6288  0C5D  0268               	subwf	_num_taps,w
  6289  0C5E  1C03               	btfss	3,0
  6290  0C5F  2C78               	goto	l5800
  6291                           
  6292                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6293  0C60  0021               	movlb	1	; select bank1
  6294  0C61  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6295  0C62  00B6               	movwf	??_updateSwitchTap^(0+128)
  6296  0C63  3001               	movlw	1
  6297  0C64                     u6535:	
  6298  0C64  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6299  0C65  3EFF               	addlw	-1
  6300  0C66  1D03               	skipz
  6301  0C67  2C64               	goto	u6535
  6302  0C68  3536               	lslf	??_updateSwitchTap^(0+128),w
  6303  0C69  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6304  0C6A  0086               	movwf	6
  6305  0C6B  3001               	movlw	1	; select bank3/4
  6306  0C6C  0087               	movwf	7
  6307  0C6D  3000               	movlw	0
  6308  0C6E  3FC0               	movwi [0]fsr1
  6309  0C6F  3000               	movlw	0
  6310  0C70  3FC1               	movwi [1]fsr1
  6311  0C71  3FC2               	movwi [2]fsr1
  6312  0C72  3FC3               	movwi [3]fsr1
  6313  0C73  3001               	movlw	1
  6314  0C74  00B6               	movwf	??_updateSwitchTap^(0+128)
  6315  0C75  0836               	movf	??_updateSwitchTap^(0+128),w
  6316  0C76  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6317  0C77  2C5B               	goto	l5798
  6318  0C78                     l5800:	
  6319                           
  6320                           ;SwitchTap.c: 86: }
  6321                           ;SwitchTap.c: 87: }
  6322                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6323  0C78  0020               	movlb	0	; select bank0
  6324  0C79  0855               	movf	_longTap_start,w
  6325  0C7A  1D03               	btfss	3,2
  6326  0C7B  2C82               	goto	l5806
  6327                           
  6328                           ;SwitchTap.c: 91: longTap_start = 1;
  6329  0C7C  01D5               	clrf	_longTap_start
  6330  0C7D  0AD5               	incf	_longTap_start,f
  6331                           
  6332                           ;SwitchTap.c: 92: longTap_state = 0;
  6333  0C7E  01E7               	clrf	_longTap_state	;volatile
  6334                           
  6335                           ;SwitchTap.c: 93: longTap_timer = 0;
  6336  0C7F  0022               	movlb	2	; select bank2
  6337  0C80  01CE               	clrf	_longTap_timer^(0+256)	;volatile
  6338  0C81  01CF               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6339  0C82                     l5806:	
  6340                           
  6341                           ;SwitchTap.c: 94: }
  6342                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0 && doubleT
      +                          ap_state == 0) {
  6343  0C82  0020               	movlb	0	; select bank0
  6344  0C83  0863               	movf	_long_press_limit+1,w
  6345  0C84  0022               	movlb	2	; select bank2
  6346  0C85  024F               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6347  0C86  1D03               	skipz
  6348  0C87  2C8C               	goto	u6565
  6349  0C88  0020               	movlb	0	; select bank0
  6350  0C89  0862               	movf	_long_press_limit,w
  6351  0C8A  0022               	movlb	2	; select bank2
  6352  0C8B  024E               	subwf	_longTap_timer^(0+256),w	;volatile
  6353  0C8C                     u6565:	
  6354  0C8C  1C03               	skipc
  6355  0C8D  0008               	return
  6356  0C8E  0020               	movlb	0	; select bank0
  6357  0C8F  0867               	movf	_longTap_state,w	;volatile
  6358  0C90  1D03               	btfss	3,2
  6359  0C91  0008               	return
  6360  0C92  0853               	movf	_doubleTap_state,w	;volatile
  6361  0C93  1D03               	btfss	3,2
  6362  0C94  0008               	return
  6363                           
  6364                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6365  0C95  0863               	movf	_long_press_limit+1,w
  6366  0C96  0022               	movlb	2	; select bank2
  6367  0C97  00CF               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6368  0C98  0020               	movlb	0	; select bank0
  6369  0C99  0862               	movf	_long_press_limit,w
  6370  0C9A  0022               	movlb	2	; select bank2
  6371  0C9B  00CE               	movwf	_longTap_timer^(0+256)	;volatile
  6372                           
  6373                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6374  0C9C  120D               	bcf	13,4	;volatile
  6375                           
  6376                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6377  0C9D  0020               	movlb	0	; select bank0
  6378  0C9E  0354               	decf	_feedback_start,w
  6379  0C9F  1903               	btfsc	3,2
  6380  0CA0  2CA9               	goto	l5820
  6381                           
  6382                           ;SwitchTap.c: 104: setLongTapState(1);
  6383  0CA1  3001               	movlw	1
  6384  0CA2  0021               	movlb	1	; select bank1
  6385  0CA3  00A0               	movwf	setLongTapState@f_state^(0+128)
  6386  0CA4  3000               	movlw	0
  6387  0CA5  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6388  0CA6  3188  2002         	fcall	_setLongTapState
  6389                           
  6390                           ;SwitchTap.c: 105: } else {
  6391  0CA8  0008               	return
  6392  0CA9                     l5820:	
  6393                           
  6394                           ;SwitchTap.c: 106: setDoublePressState(1);
  6395  0CA9  3001               	movlw	1
  6396  0CAA  0021               	movlb	1	; select bank1
  6397  0CAB  00B2               	movwf	setDoublePressState@f_state^(0+128)
  6398  0CAC  3000               	movlw	0
  6399  0CAD  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6400  0CAE  3190  200D         	fcall	_setDoublePressState
  6401                           
  6402                           ;SwitchTap.c: 107: }
  6403                           ;SwitchTap.c: 108: }
  6404                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6405  0CB0  0008               	return
  6406  0CB1                     l5822:	
  6407  0CB1  0020               	movlb	0	; select bank0
  6408  0CB2  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6409  0CB3  2CC0               	goto	l5824
  6410  0CB4  084C               	movf	_tap_timer+3,w	;volatile
  6411  0CB5  1D03               	btfss	3,2
  6412  0CB6  0008               	return
  6413  0CB7  084B               	movf	_tap_timer+2,w	;volatile
  6414  0CB8  1D03               	btfss	3,2
  6415  0CB9  0008               	return
  6416  0CBA  301B               	movlw	27
  6417  0CBB  0249               	subwf	_tap_timer,w	;volatile
  6418  0CBC  3006               	movlw	6
  6419  0CBD  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6420  0CBE  1803               	btfsc	3,0
  6421  0CBF  0008               	return
  6422  0CC0                     l5824:	
  6423  0CC0  0867               	movf	_longTap_state,w	;volatile
  6424  0CC1  1D03               	btfss	3,2
  6425  0CC2  0008               	return
  6426  0CC3  0022               	movlb	2	; select bank2
  6427  0CC4  0358               	decf	_switchTap_down^(0+256),w
  6428  0CC5  1903               	btfsc	3,2
  6429  0CC6  0008               	return
  6430                           
  6431                           ;SwitchTap.c: 112: switchTap_down = 1;
  6432  0CC7  01D8               	clrf	_switchTap_down^(0+256)
  6433  0CC8  0AD8               	incf	_switchTap_down^(0+256),f
  6434                           
  6435                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6436  0CC9  0020               	movlb	0	; select bank0
  6437  0CCA  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6438  0CCB  2CE0               	goto	l1214
  6439  0CCC  084C               	movf	_tap_timer+3,w	;volatile
  6440  0CCD  1D03               	btfss	3,2
  6441  0CCE  2CD8               	goto	l5832
  6442  0CCF  084B               	movf	_tap_timer+2,w	;volatile
  6443  0CD0  1D03               	btfss	3,2
  6444  0CD1  2CD8               	goto	l5832
  6445  0CD2  3094               	movlw	148
  6446  0CD3  0249               	subwf	_tap_timer,w	;volatile
  6447  0CD4  3004               	movlw	4
  6448  0CD5  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6449  0CD6  1C03               	btfss	3,0
  6450  0CD7  2CE0               	goto	l1214
  6451  0CD8                     l5832:	
  6452                           
  6453                           ;SwitchTap.c: 114: tap_timer = 1172;
  6454  0CD8  3000               	movlw	0
  6455  0CD9  00CC               	movwf	_tap_timer+3	;volatile
  6456  0CDA  3000               	movlw	0
  6457  0CDB  00CB               	movwf	_tap_timer+2	;volatile
  6458  0CDC  3004               	movlw	4
  6459  0CDD  00CA               	movwf	_tap_timer+1	;volatile
  6460  0CDE  3094               	movlw	148
  6461  0CDF  00C9               	movwf	_tap_timer	;volatile
  6462  0CE0                     l1214:	
  6463                           
  6464                           ;SwitchTap.c: 115: }
  6465                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6466  0CE0  0868               	movf	_num_taps,w
  6467  0CE1  0021               	movlb	1	; select bank1
  6468  0CE2  00B6               	movwf	??_updateSwitchTap^(0+128)
  6469  0CE3  01B7               	clrf	(??_updateSwitchTap^(0+128)+1)
  6470  0CE4  0836               	movf	??_updateSwitchTap^(0+128),w
  6471  0CE5  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6472  0CE6  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6473  0CE7  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6474                           
  6475                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6476  0CE8  0023               	movlb	3	; select bank3
  6477  0CE9  086A               	movf	(_tap_iteration+1)^(0+384),w
  6478  0CEA  3A80               	xorlw	128
  6479  0CEB  3C80               	sublw	128
  6480  0CEC  1D03               	skipz
  6481  0CED  2CF1               	goto	u6645
  6482  0CEE  0869               	movf	_tap_iteration^(0+384),w
  6483  0CEF  0020               	movlb	0	; select bank0
  6484  0CF0  0268               	subwf	_num_taps,w
  6485  0CF1                     u6645:	
  6486  0CF1  1C03               	skipc
  6487  0CF2  2D22               	goto	l5840
  6488                           
  6489                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6490  0CF3  0020               	movlb	0	; select bank0
  6491  0CF4  0849               	movf	_tap_timer,w	;volatile
  6492  0CF5  0023               	movlb	3	; select bank3
  6493  0CF6  07BC               	addwf	_tap_total^(0+384),f
  6494  0CF7  0020               	movlb	0	; select bank0
  6495  0CF8  084A               	movf	_tap_timer+1,w	;volatile
  6496  0CF9  0023               	movlb	3	; select bank3
  6497  0CFA  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6498  0CFB  0020               	movlb	0	; select bank0
  6499  0CFC  084B               	movf	_tap_timer+2,w	;volatile
  6500  0CFD  0023               	movlb	3	; select bank3
  6501  0CFE  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6502  0CFF  0020               	movlb	0	; select bank0
  6503  0D00  084C               	movf	_tap_timer+3,w	;volatile
  6504  0D01  0023               	movlb	3	; select bank3
  6505  0D02  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6506                           
  6507                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6508  0D03  0869               	movf	_tap_iteration^(0+384),w
  6509  0D04  0021               	movlb	1	; select bank1
  6510  0D05  00B6               	movwf	??_updateSwitchTap^(0+128)
  6511  0D06  3001               	movlw	1
  6512  0D07                     u6655:	
  6513  0D07  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6514  0D08  3EFF               	addlw	-1
  6515  0D09  1D03               	skipz
  6516  0D0A  2D07               	goto	u6655
  6517  0D0B  3536               	lslf	??_updateSwitchTap^(0+128),w
  6518  0D0C  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6519  0D0D  0086               	movwf	6
  6520  0D0E  3001               	movlw	1	; select bank3/4
  6521  0D0F  0087               	movwf	7
  6522  0D10  0020               	movlb	0	; select bank0
  6523  0D11  0849               	movf	_tap_timer,w	;volatile
  6524  0D12  3FC0               	movwi [0]fsr1
  6525  0D13  084A               	movf	_tap_timer+1,w	;volatile
  6526  0D14  3FC1               	movwi [1]fsr1
  6527  0D15  084B               	movf	_tap_timer+2,w	;volatile
  6528  0D16  3FC2               	movwi [2]fsr1
  6529  0D17  084C               	movf	_tap_timer+3,w	;volatile
  6530  0D18  3FC3               	movwi [3]fsr1
  6531                           
  6532                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6533  0D19  0023               	movlb	3	; select bank3
  6534  0D1A  086A               	movf	(_tap_iteration+1)^(0+384),w
  6535  0D1B  0021               	movlb	1	; select bank1
  6536  0D1C  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6537  0D1D  0023               	movlb	3	; select bank3
  6538  0D1E  0869               	movf	_tap_iteration^(0+384),w
  6539  0D1F  0021               	movlb	1	; select bank1
  6540  0D20  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6541                           
  6542                           ;SwitchTap.c: 122: } else {
  6543  0D21  2D9E               	goto	l5854
  6544  0D22                     l5840:	
  6545                           
  6546                           ;SwitchTap.c: 123: tap_total = 0;
  6547  0D22  3000               	movlw	0
  6548  0D23  0023               	movlb	3	; select bank3
  6549  0D24  00BF               	movwf	(_tap_total+3)^(0+384)
  6550  0D25  3000               	movlw	0
  6551  0D26  00BE               	movwf	(_tap_total+2)^(0+384)
  6552  0D27  3000               	movlw	0
  6553  0D28  00BD               	movwf	(_tap_total+1)^(0+384)
  6554  0D29  3000               	movlw	0
  6555  0D2A  00BC               	movwf	_tap_total^(0+384)
  6556                           
  6557                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6558  0D2B  0021               	movlb	1	; select bank1
  6559  0D2C  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6560  0D2D  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6561  0D2E                     l5848:	
  6562  0D2E  0020               	movlb	0	; select bank0
  6563  0D2F  0868               	movf	_num_taps,w
  6564  0D30  0021               	movlb	1	; select bank1
  6565  0D31  023E               	subwf	updateSwitchTap@iCnt^(0+128),w
  6566  0D32  1803               	btfsc	3,0
  6567  0D33  2D78               	goto	l5850
  6568                           
  6569                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6570  0D34  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6571  0D35  00B6               	movwf	??_updateSwitchTap^(0+128)
  6572  0D36  3001               	movlw	1
  6573  0D37                     u6665:	
  6574  0D37  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6575  0D38  3EFF               	addlw	-1
  6576  0D39  1D03               	skipz
  6577  0D3A  2D37               	goto	u6665
  6578  0D3B  3536               	lslf	??_updateSwitchTap^(0+128),w
  6579  0D3C  3E04               	addlw	4
  6580  0D3D  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6581  0D3E  0086               	movwf	6
  6582  0D3F  3001               	movlw	1	; select bank3/4
  6583  0D40  0087               	movwf	7
  6584  0D41  3F40               	moviw [0]fsr1
  6585  0D42  00B7               	movwf	(??_updateSwitchTap+1)^(0+128)
  6586  0D43  3F41               	moviw [1]fsr1
  6587  0D44  00B8               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6588  0D45  3F42               	moviw [2]fsr1
  6589  0D46  00B9               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  6590  0D47  3F43               	moviw [3]fsr1
  6591  0D48  00BA               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  6592  0D49  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6593  0D4A  00BB               	movwf	(??_updateSwitchTap+5)^(0+128)
  6594  0D4B  3001               	movlw	1
  6595  0D4C                     u6675:	
  6596  0D4C  35BB               	lslf	(??_updateSwitchTap+5)^(0+128),f
  6597  0D4D  3EFF               	addlw	-1
  6598  0D4E  1D03               	skipz
  6599  0D4F  2D4C               	goto	u6675
  6600  0D50  353B               	lslf	(??_updateSwitchTap+5)^(0+128),w
  6601  0D51  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6602  0D52  0086               	movwf	6
  6603  0D53  3001               	movlw	1	; select bank3/4
  6604  0D54  0087               	movwf	7
  6605  0D55  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6606  0D56  3FC0               	movwi [0]fsr1
  6607  0D57  0838               	movf	(??_updateSwitchTap+2)^(0+128),w
  6608  0D58  3FC1               	movwi [1]fsr1
  6609  0D59  0839               	movf	(??_updateSwitchTap+3)^(0+128),w
  6610  0D5A  3FC2               	movwi [2]fsr1
  6611  0D5B  083A               	movf	(??_updateSwitchTap+4)^(0+128),w
  6612  0D5C  3FC3               	movwi [3]fsr1
  6613                           
  6614                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  6615  0D5D  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6616  0D5E  00B6               	movwf	??_updateSwitchTap^(0+128)
  6617  0D5F  3001               	movlw	1
  6618  0D60                     u6685:	
  6619  0D60  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6620  0D61  3EFF               	addlw	-1
  6621  0D62  1D03               	skipz
  6622  0D63  2D60               	goto	u6685
  6623  0D64  3536               	lslf	??_updateSwitchTap^(0+128),w
  6624  0D65  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6625  0D66  0086               	movwf	6
  6626  0D67  3001               	movlw	1	; select bank3/4
  6627  0D68  0087               	movwf	7
  6628  0D69  3F40               	moviw [0]fsr1
  6629  0D6A  0023               	movlb	3	; select bank3
  6630  0D6B  07BC               	addwf	_tap_total^(0+384),f
  6631  0D6C  3F41               	moviw [1]fsr1
  6632  0D6D  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6633  0D6E  3F42               	moviw [2]fsr1
  6634  0D6F  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6635  0D70  3F43               	moviw [3]fsr1
  6636  0D71  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6637  0D72  3001               	movlw	1
  6638  0D73  0021               	movlb	1	; select bank1
  6639  0D74  00B6               	movwf	??_updateSwitchTap^(0+128)
  6640  0D75  0836               	movf	??_updateSwitchTap^(0+128),w
  6641  0D76  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6642  0D77  2D2E               	goto	l5848
  6643  0D78                     l5850:	
  6644                           
  6645                           ;SwitchTap.c: 127: }
  6646                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  6647  0D78  0020               	movlb	0	; select bank0
  6648  0D79  0868               	movf	_num_taps,w
  6649  0D7A  0021               	movlb	1	; select bank1
  6650  0D7B  00B6               	movwf	??_updateSwitchTap^(0+128)
  6651  0D7C  3001               	movlw	1
  6652  0D7D                     u6705:	
  6653  0D7D  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6654  0D7E  3EFF               	addlw	-1
  6655  0D7F  1D03               	skipz
  6656  0D80  2D7D               	goto	u6705
  6657  0D81  3536               	lslf	??_updateSwitchTap^(0+128),w
  6658  0D82  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6659  0D83  0086               	movwf	6
  6660  0D84  3001               	movlw	1	; select bank3/4
  6661  0D85  0087               	movwf	7
  6662  0D86  0020               	movlb	0	; select bank0
  6663  0D87  0849               	movf	_tap_timer,w	;volatile
  6664  0D88  3FC0               	movwi [0]fsr1
  6665  0D89  084A               	movf	_tap_timer+1,w	;volatile
  6666  0D8A  3FC1               	movwi [1]fsr1
  6667  0D8B  084B               	movf	_tap_timer+2,w	;volatile
  6668  0D8C  3FC2               	movwi [2]fsr1
  6669  0D8D  084C               	movf	_tap_timer+3,w	;volatile
  6670  0D8E  3FC3               	movwi [3]fsr1
  6671                           
  6672                           ;SwitchTap.c: 129: tap_total += tap_timer;
  6673  0D8F  0849               	movf	_tap_timer,w	;volatile
  6674  0D90  0023               	movlb	3	; select bank3
  6675  0D91  07BC               	addwf	_tap_total^(0+384),f
  6676  0D92  0020               	movlb	0	; select bank0
  6677  0D93  084A               	movf	_tap_timer+1,w	;volatile
  6678  0D94  0023               	movlb	3	; select bank3
  6679  0D95  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6680  0D96  0020               	movlb	0	; select bank0
  6681  0D97  084B               	movf	_tap_timer+2,w	;volatile
  6682  0D98  0023               	movlb	3	; select bank3
  6683  0D99  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6684  0D9A  0020               	movlb	0	; select bank0
  6685  0D9B  084C               	movf	_tap_timer+3,w	;volatile
  6686  0D9C  0023               	movlb	3	; select bank3
  6687  0D9D  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6688  0D9E                     l5854:	
  6689                           
  6690                           ;SwitchTap.c: 130: }
  6691                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  6692  0D9E  0021               	movlb	1	; select bank1
  6693  0D9F  083C               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  6694  0DA0  00A0               	movwf	___aldiv@divisor^(0+128)
  6695  0DA1  083D               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  6696  0DA2  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  6697  0DA3  0D89               	rlf	9,f
  6698  0DA4  3B89               	subwfb	9,f
  6699  0DA5  0989               	comf	9,f
  6700  0DA6  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  6701  0DA7  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  6702  0DA8  0023               	movlb	3	; select bank3
  6703  0DA9  083F               	movf	(_tap_total+3)^(0+384),w
  6704  0DAA  0021               	movlb	1	; select bank1
  6705  0DAB  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6706  0DAC  0023               	movlb	3	; select bank3
  6707  0DAD  083E               	movf	(_tap_total+2)^(0+384),w
  6708  0DAE  0021               	movlb	1	; select bank1
  6709  0DAF  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6710  0DB0  0023               	movlb	3	; select bank3
  6711  0DB1  083D               	movf	(_tap_total+1)^(0+384),w
  6712  0DB2  0021               	movlb	1	; select bank1
  6713  0DB3  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6714  0DB4  0023               	movlb	3	; select bank3
  6715  0DB5  083C               	movf	_tap_total^(0+384),w
  6716  0DB6  0021               	movlb	1	; select bank1
  6717  0DB7  00A4               	movwf	___aldiv@dividend^(0+128)
  6718  0DB8  3196  2654         	fcall	___aldiv
  6719  0DBA  0021               	movlb	1	; select bank1
  6720  0DBB  0823               	movf	(?___aldiv+3)^(0+128),w
  6721  0DBC  0020               	movlb	0	; select bank0
  6722  0DBD  00DB               	movwf	_baseline_delay_time+3	;volatile
  6723  0DBE  0021               	movlb	1	; select bank1
  6724  0DBF  0822               	movf	(?___aldiv+2)^(0+128),w
  6725  0DC0  0020               	movlb	0	; select bank0
  6726  0DC1  00DA               	movwf	_baseline_delay_time+2	;volatile
  6727  0DC2  0021               	movlb	1	; select bank1
  6728  0DC3  0821               	movf	(?___aldiv+1)^(0+128),w
  6729  0DC4  0020               	movlb	0	; select bank0
  6730  0DC5  00D9               	movwf	_baseline_delay_time+1	;volatile
  6731  0DC6  0021               	movlb	1	; select bank1
  6732  0DC7  0820               	movf	?___aldiv^(0+128),w
  6733  0DC8  0020               	movlb	0	; select bank0
  6734  0DC9  00D8               	movwf	_baseline_delay_time	;volatile
  6735                           
  6736                           ;SwitchTap.c: 133: delay_time_changed = 1;
  6737  0DCA  3001               	movlw	1
  6738  0DCB  0023               	movlb	3	; select bank3
  6739  0DCC  00E3               	movwf	_delay_time_changed^(0+384)
  6740  0DCD  3000               	movlw	0
  6741  0DCE  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  6742                           
  6743                           ;SwitchTap.c: 134: tap_timer = 0;
  6744  0DCF  3000               	movlw	0
  6745  0DD0  0020               	movlb	0	; select bank0
  6746  0DD1  00CC               	movwf	_tap_timer+3	;volatile
  6747  0DD2  3000               	movlw	0
  6748  0DD3  00CB               	movwf	_tap_timer+2	;volatile
  6749  0DD4  3000               	movlw	0
  6750  0DD5  00CA               	movwf	_tap_timer+1	;volatile
  6751  0DD6  3000               	movlw	0
  6752  0DD7  00C9               	movwf	_tap_timer	;volatile
  6753                           
  6754                           ;SwitchTap.c: 136: tap_iteration++;
  6755  0DD8  3001               	movlw	1
  6756  0DD9  0023               	movlb	3	; select bank3
  6757  0DDA  07E9               	addwf	_tap_iteration^(0+384),f
  6758  0DDB  3000               	movlw	0
  6759  0DDC  3DEA               	addwfc	(_tap_iteration+1)^(0+384),f
  6760                           
  6761                           ;SwitchTap.c: 137: }
  6762                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  6763  0DDD  0008               	return
  6764  0DDE                     l5862:	
  6765  0DDE  3019               	movlw	25
  6766  0DDF  0020               	movlb	0	; select bank0
  6767  0DE0  0257               	subwf	_switchTap_pressed,w
  6768  0DE1  1C03               	skipc
  6769  0DE2  0008               	return
  6770                           
  6771                           ;SwitchTap.c: 140: switchTap_down = 0;
  6772  0DE3  0022               	movlb	2	; select bank2
  6773  0DE4  01D8               	clrf	_switchTap_down^(0+256)
  6774                           
  6775                           ;SwitchTap.c: 141: switchTap_state = 0;
  6776  0DE5  01E5               	clrf	_switchTap_state^(0+256)
  6777                           
  6778                           ;SwitchTap.c: 147: setLongTapState(0);
  6779  0DE6  3000               	movlw	0
  6780  0DE7  0021               	movlb	1	; select bank1
  6781  0DE8  00A0               	movwf	setLongTapState@f_state^(0+128)
  6782  0DE9  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  6783  0DEA  3188  2002         	fcall	_setLongTapState
  6784                           
  6785                           ;SwitchTap.c: 149: longTap_timer = 0;
  6786  0DEC  0022               	movlb	2	; select bank2
  6787  0DED  01CE               	clrf	_longTap_timer^(0+256)	;volatile
  6788  0DEE  01CF               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6789                           
  6790                           ;SwitchTap.c: 150: longTap_start = 0;
  6791  0DEF  0020               	movlb	0	; select bank0
  6792  0DF0  01D5               	clrf	_longTap_start
  6793                           
  6794                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  6795  0DF1  3019               	movlw	25
  6796  0DF2  0021               	movlb	1	; select bank1
  6797  0DF3  00B6               	movwf	??_updateSwitchTap^(0+128)
  6798  0DF4  0836               	movf	??_updateSwitchTap^(0+128),w
  6799  0DF5  0020               	movlb	0	; select bank0
  6800  0DF6  00D7               	movwf	_switchTap_pressed
  6801  0DF7  0008               	return
  6802  0DF8                     __end_of_updateSwitchTap:	
  6803                           
  6804                           	psect	text3
  6805  0802                     __ptext3:	
  6806 ;; *************** function _setLongTapState *****************
  6807 ;; Defined at:
  6808 ;;		line 167 in file "SwitchTap.c"
  6809 ;; Parameters:    Size  Location     Type
  6810 ;;  f_state         2    0[BANK1 ] int 
  6811 ;; Auto vars:     Size  Location     Type
  6812 ;;		None
  6813 ;; Return value:  Size  Location     Type
  6814 ;;                  1    wreg      void 
  6815 ;; Registers used:
  6816 ;;		wreg, status,0
  6817 ;; Tracked objects:
  6818 ;;		On entry : 0/0
  6819 ;;		On exit  : 0/0
  6820 ;;		Unchanged: 0/0
  6821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6822 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6824 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6825 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6826 ;;Total ram usage:        4 bytes
  6827 ;; Hardware stack levels used:    1
  6828 ;; Hardware stack levels required when called:    3
  6829 ;; This function calls:
  6830 ;;		Nothing
  6831 ;; This function is called by:
  6832 ;;		_updateSwitchTap
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836                           
  6837                           ;psect for function _setLongTapState
  6838  0802                     _setLongTapState:	
  6839                           
  6840                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  6841                           
  6842                           ;incstack = 0
  6843                           ; Regs used in _setLongTapState: [wreg+status,0]
  6844  0802  0020               	movlb	0	; select bank0
  6845  0803  0867               	movf	_longTap_state,w	;volatile
  6846  0804  0021               	movlb	1	; select bank1
  6847  0805  00A2               	movwf	??_setLongTapState^(0+128)
  6848  0806  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  6849  0807  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  6850  0808  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  6851  0809  1D03               	skipz
  6852  080A  280D               	goto	u5475
  6853  080B  0820               	movf	setLongTapState@f_state^(0+128),w
  6854  080C  0622               	xorwf	??_setLongTapState^(0+128),w
  6855  080D                     u5475:	
  6856  080D  1903               	btfsc	3,2
  6857  080E  0008               	return
  6858                           
  6859                           ;SwitchTap.c: 169: longTap_state = f_state;
  6860  080F  0820               	movf	setLongTapState@f_state^(0+128),w
  6861  0810  00A2               	movwf	??_setLongTapState^(0+128)
  6862  0811  0822               	movf	??_setLongTapState^(0+128),w
  6863  0812  0020               	movlb	0	; select bank0
  6864  0813  00E7               	movwf	_longTap_state	;volatile
  6865                           
  6866                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  6867  0814  0021               	movlb	1	; select bank1
  6868  0815  0C20               	rrf	setLongTapState@f_state^(0+128),w
  6869  0816  0022               	movlb	2	; select bank2
  6870  0817  1C03               	skipc
  6871  0818  128D               	bcf	13,5	;volatile
  6872  0819  1803               	skipnc
  6873  081A  168D               	bsf	13,5	;volatile
  6874  081B  0008               	return
  6875  081C                     __end_of_setLongTapState:	
  6876                           
  6877                           	psect	text4
  6878  1654                     __ptext4:	
  6879 ;; *************** function ___aldiv *****************
  6880 ;; Defined at:
  6881 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;  divisor         4    0[BANK1 ] long 
  6884 ;;  dividend        4    4[BANK1 ] long 
  6885 ;; Auto vars:     Size  Location     Type
  6886 ;;  quotient        4   11[BANK1 ] long 
  6887 ;;  sign            1   10[BANK1 ] unsigned char 
  6888 ;;  counter         1    9[BANK1 ] unsigned char 
  6889 ;; Return value:  Size  Location     Type
  6890 ;;                  4    0[BANK1 ] long 
  6891 ;; Registers used:
  6892 ;;		wreg, status,2, status,0
  6893 ;; Tracked objects:
  6894 ;;		On entry : 0/0
  6895 ;;		On exit  : 0/0
  6896 ;;		Unchanged: 0/0
  6897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6898 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6899 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6900 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6901 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6902 ;;Total ram usage:       15 bytes
  6903 ;; Hardware stack levels used:    1
  6904 ;; Hardware stack levels required when called:    3
  6905 ;; This function calls:
  6906 ;;		Nothing
  6907 ;; This function is called by:
  6908 ;;		_updateSwitchTap
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           
  6913                           ;psect for function ___aldiv
  6914  1654                     ___aldiv:	
  6915                           
  6916                           ;incstack = 0
  6917                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6918  1654  0021               	movlb	1	; select bank1
  6919  1655  01AA               	clrf	___aldiv@sign^(0+128)
  6920  1656  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  6921  1657  2E65               	goto	l1368
  6922  1658  09A0               	comf	___aldiv@divisor^(0+128),f
  6923  1659  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  6924  165A  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  6925  165B  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  6926  165C  0AA0               	incf	___aldiv@divisor^(0+128),f
  6927  165D  1903               	skipnz
  6928  165E  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  6929  165F  1903               	skipnz
  6930  1660  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  6931  1661  1903               	skipnz
  6932  1662  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  6933  1663  01AA               	clrf	___aldiv@sign^(0+128)
  6934  1664  0AAA               	incf	___aldiv@sign^(0+128),f
  6935  1665                     l1368:	
  6936  1665  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  6937  1666  2E76               	goto	l5324
  6938  1667  09A4               	comf	___aldiv@dividend^(0+128),f
  6939  1668  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  6940  1669  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  6941  166A  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  6942  166B  0AA4               	incf	___aldiv@dividend^(0+128),f
  6943  166C  1903               	skipnz
  6944  166D  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  6945  166E  1903               	skipnz
  6946  166F  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  6947  1670  1903               	skipnz
  6948  1671  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  6949  1672  3001               	movlw	1
  6950  1673  00A8               	movwf	??___aldiv^(0+128)
  6951  1674  0828               	movf	??___aldiv^(0+128),w
  6952  1675  06AA               	xorwf	___aldiv@sign^(0+128),f
  6953  1676                     l5324:	
  6954  1676  3000               	movlw	0
  6955  1677  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  6956  1678  3000               	movlw	0
  6957  1679  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  6958  167A  3000               	movlw	0
  6959  167B  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  6960  167C  3000               	movlw	0
  6961  167D  00AB               	movwf	___aldiv@quotient^(0+128)
  6962  167E  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  6963  167F  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  6964  1680  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  6965  1681  0420               	iorwf	___aldiv@divisor^(0+128),w
  6966  1682  1903               	skipnz
  6967  1683  2EBF               	goto	l5346
  6968  1684  01A9               	clrf	___aldiv@counter^(0+128)
  6969  1685  0AA9               	incf	___aldiv@counter^(0+128),f
  6970  1686                     l5332:	
  6971  1686  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  6972  1687  2E94               	goto	l5334
  6973  1688  3001               	movlw	1
  6974  1689                     u5515:	
  6975  1689  35A0               	lslf	___aldiv@divisor^(0+128),f
  6976  168A  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  6977  168B  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  6978  168C  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  6979  168D  0B89               	decfsz	9,f
  6980  168E  2E89               	goto	u5515
  6981  168F  3001               	movlw	1
  6982  1690  00A8               	movwf	??___aldiv^(0+128)
  6983  1691  0828               	movf	??___aldiv^(0+128),w
  6984  1692  07A9               	addwf	___aldiv@counter^(0+128),f
  6985  1693  2E86               	goto	l5332
  6986  1694                     l5334:	
  6987  1694  3001               	movlw	1
  6988  1695                     u5535:	
  6989  1695  35AB               	lslf	___aldiv@quotient^(0+128),f
  6990  1696  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  6991  1697  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  6992  1698  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  6993  1699  0B89               	decfsz	9,f
  6994  169A  2E95               	goto	u5535
  6995  169B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  6996  169C  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  6997  169D  1D03               	skipz
  6998  169E  2EA9               	goto	u5545
  6999  169F  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7000  16A0  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7001  16A1  1D03               	skipz
  7002  16A2  2EA9               	goto	u5545
  7003  16A3  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7004  16A4  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7005  16A5  1D03               	skipz
  7006  16A6  2EA9               	goto	u5545
  7007  16A7  0820               	movf	___aldiv@divisor^(0+128),w
  7008  16A8  0224               	subwf	___aldiv@dividend^(0+128),w
  7009  16A9                     u5545:	
  7010  16A9  1C03               	skipc
  7011  16AA  2EB4               	goto	l5342
  7012  16AB  0820               	movf	___aldiv@divisor^(0+128),w
  7013  16AC  02A4               	subwf	___aldiv@dividend^(0+128),f
  7014  16AD  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7015  16AE  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7016  16AF  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7017  16B0  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7018  16B1  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7019  16B2  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7020  16B3  142B               	bsf	___aldiv@quotient^(0+128),0
  7021  16B4                     l5342:	
  7022  16B4  3001               	movlw	1
  7023  16B5                     u5555:	
  7024  16B5  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7025  16B6  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7026  16B7  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7027  16B8  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7028  16B9  0B89               	decfsz	9,f
  7029  16BA  2EB5               	goto	u5555
  7030  16BB  3001               	movlw	1
  7031  16BC  02A9               	subwf	___aldiv@counter^(0+128),f
  7032  16BD  1D03               	btfss	3,2
  7033  16BE  2E94               	goto	l5334
  7034  16BF                     l5346:	
  7035  16BF  082A               	movf	___aldiv@sign^(0+128),w
  7036  16C0  1903               	btfsc	3,2
  7037  16C1  2ECD               	goto	l5350
  7038  16C2  09AB               	comf	___aldiv@quotient^(0+128),f
  7039  16C3  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7040  16C4  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7041  16C5  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7042  16C6  0AAB               	incf	___aldiv@quotient^(0+128),f
  7043  16C7  1903               	skipnz
  7044  16C8  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7045  16C9  1903               	skipnz
  7046  16CA  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7047  16CB  1903               	skipnz
  7048  16CC  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7049  16CD                     l5350:	
  7050  16CD  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7051  16CE  00A3               	movwf	(?___aldiv+3)^(0+128)
  7052  16CF  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7053  16D0  00A2               	movwf	(?___aldiv+2)^(0+128)
  7054  16D1  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7055  16D2  00A1               	movwf	(?___aldiv+1)^(0+128)
  7056  16D3  082B               	movf	___aldiv@quotient^(0+128),w
  7057  16D4  00A0               	movwf	?___aldiv^(0+128)
  7058  16D5  0008               	return
  7059  16D6                     __end_of___aldiv:	
  7060                           
  7061                           	psect	text5
  7062  0A33                     __ptext5:	
  7063 ;; *************** function _updateSwitchBypass *****************
  7064 ;; Defined at:
  7065 ;;		line 34 in file "SwitchBypass.c"
  7066 ;; Parameters:    Size  Location     Type
  7067 ;;		None
  7068 ;; Auto vars:     Size  Location     Type
  7069 ;;		None
  7070 ;; Return value:  Size  Location     Type
  7071 ;;                  1    wreg      void 
  7072 ;; Registers used:
  7073 ;;		wreg, status,2, status,0, pclath, cstack
  7074 ;; Tracked objects:
  7075 ;;		On entry : 0/0
  7076 ;;		On exit  : 0/0
  7077 ;;		Unchanged: 0/0
  7078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7081 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7082 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7083 ;;Total ram usage:        2 bytes
  7084 ;; Hardware stack levels used:    1
  7085 ;; Hardware stack levels required when called:    6
  7086 ;; This function calls:
  7087 ;;		_setDoublePressState
  7088 ;;		_setFeedbackState
  7089 ;;		_setSwitchBypassState
  7090 ;; This function is called by:
  7091 ;;		_main
  7092 ;; This function uses a non-reentrant model
  7093 ;;
  7094                           
  7095                           
  7096                           ;psect for function _updateSwitchBypass
  7097  0A33                     _updateSwitchBypass:	
  7098                           
  7099                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7100                           
  7101                           ;incstack = 0
  7102                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7103  0A33  0020               	movlb	0	; select bank0
  7104  0A34  1890               	btfsc	16,1	;volatile
  7105  0A35  2A49               	goto	l5690
  7106                           
  7107                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7108  0A36  0022               	movlb	2	; select bank2
  7109  0A37  0851               	movf	(_switchBypass_pressed+1)^(0+256),w
  7110  0A38  3A80               	xorlw	128
  7111  0A39  0021               	movlb	1	; select bank1
  7112  0A3A  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7113  0A3B  3080               	movlw	128
  7114  0A3C  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7115  0A3D  1D03               	skipz
  7116  0A3E  2A42               	goto	u6275
  7117  0A3F  3001               	movlw	1
  7118  0A40  0022               	movlb	2	; select bank2
  7119  0A41  0250               	subwf	_switchBypass_pressed^(0+256),w
  7120  0A42                     u6275:	
  7121  0A42  1C03               	skipc
  7122  0A43  2A5C               	goto	l5694
  7123                           
  7124                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7125  0A44  30FF               	movlw	255
  7126  0A45  0022               	movlb	2	; select bank2
  7127  0A46  07D0               	addwf	_switchBypass_pressed^(0+256),f
  7128  0A47  30FF               	movlw	255
  7129  0A48  2A5B               	goto	L2
  7130  0A49                     l5690:	
  7131                           ;SwitchBypass.c: 44: }
  7132                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7133                           
  7134  0A49  0022               	movlb	2	; select bank2
  7135  0A4A  0851               	movf	(_switchBypass_pressed+1)^(0+256),w
  7136  0A4B  3A80               	xorlw	128
  7137  0A4C  0021               	movlb	1	; select bank1
  7138  0A4D  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7139  0A4E  3080               	movlw	128
  7140  0A4F  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7141  0A50  1D03               	skipz
  7142  0A51  2A55               	goto	u6285
  7143  0A52  3019               	movlw	25
  7144  0A53  0022               	movlb	2	; select bank2
  7145  0A54  0250               	subwf	_switchBypass_pressed^(0+256),w
  7146  0A55                     u6285:	
  7147  0A55  1803               	skipnc
  7148  0A56  2A5C               	goto	l5694
  7149                           
  7150                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7151  0A57  3001               	movlw	1
  7152  0A58  0022               	movlb	2	; select bank2
  7153  0A59  07D0               	addwf	_switchBypass_pressed^(0+256),f
  7154  0A5A  3000               	movlw	0
  7155  0A5B                     L2:	
  7156  0A5B  3DD1               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7157  0A5C                     l5694:	
  7158                           
  7159                           ;SwitchBypass.c: 47: }
  7160                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7161  0A5C  0022               	movlb	2	; select bank2
  7162  0A5D  0850               	movf	_switchBypass_pressed^(0+256),w
  7163  0A5E  0451               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7164  0A5F  1D03               	btfss	3,2
  7165  0A60  2ABD               	goto	l5734
  7166                           
  7167                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7168  0A61  0020               	movlb	0	; select bank0
  7169  0A62  0854               	movf	_feedback_start,w
  7170  0A63  1D03               	btfss	3,2
  7171  0A64  2A6A               	goto	l5702
  7172                           
  7173                           ;SwitchBypass.c: 57: feedback_start = 1;
  7174  0A65  01D4               	clrf	_feedback_start
  7175  0A66  0AD4               	incf	_feedback_start,f
  7176                           
  7177                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7178  0A67  0022               	movlb	2	; select bank2
  7179  0A68  01C8               	clrf	_feedback_timer^(0+256)	;volatile
  7180  0A69  01C9               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7181  0A6A                     l5702:	
  7182                           
  7183                           ;SwitchBypass.c: 59: }
  7184                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7185  0A6A  0020               	movlb	0	; select bank0
  7186  0A6B  0863               	movf	_long_press_limit+1,w
  7187  0A6C  0022               	movlb	2	; select bank2
  7188  0A6D  0249               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7189  0A6E  1D03               	skipz
  7190  0A6F  2A74               	goto	u6315
  7191  0A70  0020               	movlb	0	; select bank0
  7192  0A71  0862               	movf	_long_press_limit,w
  7193  0A72  0022               	movlb	2	; select bank2
  7194  0A73  0248               	subwf	_feedback_timer^(0+256),w	;volatile
  7195  0A74                     u6315:	
  7196  0A74  1C03               	skipc
  7197  0A75  2A94               	goto	l5716
  7198  0A76  0020               	movlb	0	; select bank0
  7199  0A77  0866               	movf	_feedback_state,w	;volatile
  7200  0A78  1D03               	btfss	3,2
  7201  0A79  2A94               	goto	l5716
  7202  0A7A  0853               	movf	_doubleTap_state,w	;volatile
  7203  0A7B  1D03               	btfss	3,2
  7204  0A7C  2A94               	goto	l5716
  7205                           
  7206                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7207  0A7D  0022               	movlb	2	; select bank2
  7208  0A7E  110D               	bcf	13,2	;volatile
  7209                           
  7210                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7211  0A7F  0020               	movlb	0	; select bank0
  7212  0A80  0355               	decf	_longTap_start,w
  7213  0A81  1903               	btfsc	3,2
  7214  0A82  2A8C               	goto	l5714
  7215                           
  7216                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7217  0A83  3001               	movlw	1
  7218  0A84  0021               	movlb	1	; select bank1
  7219  0A85  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7220  0A86  3000               	movlw	0
  7221  0A87  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7222  0A88  319E  264D  318A   	fcall	_setFeedbackState
  7223                           
  7224                           ;SwitchBypass.c: 67: } else {
  7225  0A8B  2A94               	goto	l5716
  7226  0A8C                     l5714:	
  7227                           
  7228                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7229  0A8C  3001               	movlw	1
  7230  0A8D  0021               	movlb	1	; select bank1
  7231  0A8E  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7232  0A8F  3000               	movlw	0
  7233  0A90  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7234  0A91  3190  200D  318A   	fcall	_setDoublePressState
  7235  0A94                     l5716:	
  7236                           
  7237                           ;SwitchBypass.c: 69: }
  7238                           ;SwitchBypass.c: 70: }
  7239                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7240  0A94  0020               	movlb	0	; select bank0
  7241  0A95  0853               	movf	_doubleTap_state,w	;volatile
  7242  0A96  1D03               	btfss	3,2
  7243  0A97  2AB9               	goto	l1076
  7244  0A98  0866               	movf	_feedback_state,w	;volatile
  7245  0A99  1D03               	btfss	3,2
  7246  0A9A  2AB9               	goto	l1076
  7247                           
  7248                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7249  0A9B  0369               	decf	_switchBypass_state,w
  7250  0A9C  1D03               	btfss	3,2
  7251  0A9D  2AAC               	goto	l5728
  7252                           
  7253                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7254  0A9E  0023               	movlb	3	; select bank3
  7255  0A9F  0367               	decf	_switchBypass_up^(0+384),w
  7256  0AA0  0468               	iorwf	(_switchBypass_up+1)^(0+384),w
  7257  0AA1  1D03               	btfss	3,2
  7258  0AA2  2AB9               	goto	l1076
  7259                           
  7260                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7261  0AA3  0022               	movlb	2	; select bank2
  7262  0AA4  01E4               	clrf	_currentBypassState^(0+256)
  7263  0AA5  0AE4               	incf	_currentBypassState^(0+256),f
  7264                           
  7265                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7266  0AA6  3001               	movlw	1
  7267  0AA7  0023               	movlb	3	; select bank3
  7268  0AA8  00DE               	movwf	_switchBypass_toggle^(0+384)
  7269  0AA9  3000               	movlw	0
  7270  0AAA  00DF               	movwf	(_switchBypass_toggle^(0+384)+1)
  7271                           
  7272                           ;SwitchBypass.c: 78: }
  7273                           ;SwitchBypass.c: 93: } else {
  7274  0AAB  2AB9               	goto	l1076
  7275  0AAC                     l5728:	
  7276                           
  7277                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7278  0AAC  0022               	movlb	2	; select bank2
  7279  0AAD  0353               	decf	_bypass_turning_on^(0+256),w
  7280  0AAE  1903               	btfsc	3,2
  7281  0AAF  2AB9               	goto	l1076
  7282                           
  7283                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7284  0AB0  01E4               	clrf	_currentBypassState^(0+256)
  7285                           
  7286                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7287  0AB1  01D3               	clrf	_bypass_turning_on^(0+256)
  7288  0AB2  0AD3               	incf	_bypass_turning_on^(0+256),f
  7289                           
  7290                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7291  0AB3  0023               	movlb	3	; select bank3
  7292  0AB4  01DE               	clrf	_switchBypass_toggle^(0+384)
  7293  0AB5  01DF               	clrf	(_switchBypass_toggle+1)^(0+384)
  7294                           
  7295                           ;SwitchBypass.c: 101: feedback_state = 0;
  7296  0AB6  0020               	movlb	0	; select bank0
  7297  0AB7  01E6               	clrf	_feedback_state	;volatile
  7298                           
  7299                           ;SwitchBypass.c: 102: feedback_start = 0;
  7300  0AB8  01D4               	clrf	_feedback_start
  7301  0AB9                     l1076:	
  7302                           
  7303                           ;SwitchBypass.c: 103: }
  7304                           ;SwitchBypass.c: 104: }
  7305                           ;SwitchBypass.c: 106: }
  7306                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7307  0AB9  0023               	movlb	3	; select bank3
  7308  0ABA  01E7               	clrf	_switchBypass_up^(0+384)
  7309  0ABB  01E8               	clrf	(_switchBypass_up+1)^(0+384)
  7310                           
  7311                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7312  0ABC  0008               	return
  7313  0ABD                     l5734:	
  7314  0ABD  0022               	movlb	2	; select bank2
  7315  0ABE  0851               	movf	(_switchBypass_pressed+1)^(0+256),w
  7316  0ABF  3A80               	xorlw	128
  7317  0AC0  0021               	movlb	1	; select bank1
  7318  0AC1  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7319  0AC2  3080               	movlw	128
  7320  0AC3  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7321  0AC4  1D03               	skipz
  7322  0AC5  2AC9               	goto	u6405
  7323  0AC6  3019               	movlw	25
  7324  0AC7  0022               	movlb	2	; select bank2
  7325  0AC8  0250               	subwf	_switchBypass_pressed^(0+256),w
  7326  0AC9                     u6405:	
  7327  0AC9  1C03               	skipc
  7328  0ACA  0008               	return
  7329                           
  7330                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7331  0ACB  0020               	movlb	0	; select bank0
  7332  0ACC  0353               	decf	_doubleTap_state,w	;volatile
  7333  0ACD  1D03               	btfss	3,2
  7334  0ACE  2AD8               	goto	l5740
  7335                           
  7336                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7337  0ACF  0022               	movlb	2	; select bank2
  7338  0AD0  0864               	movf	_currentBypassState^(0+256),w
  7339  0AD1  0021               	movlb	1	; select bank1
  7340  0AD2  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7341  0AD3  01B7               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7342  0AD4  0836               	movf	??_updateSwitchBypass^(0+128),w
  7343  0AD5  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7344  0AD6  0837               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7345  0AD7  2AF5               	goto	L3
  7346  0AD8                     l5740:	
  7347                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7348                           
  7349  0AD8  0022               	movlb	2	; select bank2
  7350  0AD9  0353               	decf	_bypass_turning_on^(0+256),w
  7351  0ADA  1903               	btfsc	3,2
  7352  0ADB  2AE0               	goto	l5744
  7353  0ADC  0020               	movlb	0	; select bank0
  7354  0ADD  0366               	decf	_feedback_state,w	;volatile
  7355  0ADE  1D03               	btfss	3,2
  7356  0ADF  2AE6               	goto	l5746
  7357  0AE0                     l5744:	
  7358                           
  7359                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7360  0AE0  3001               	movlw	1
  7361  0AE1  0021               	movlb	1	; select bank1
  7362  0AE2  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7363  0AE3  3000               	movlw	0
  7364  0AE4  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7365  0AE5  2AF6               	goto	L4
  7366  0AE6                     l5746:	
  7367                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7368                           
  7369  0AE6  0023               	movlb	3	; select bank3
  7370  0AE7  035E               	decf	_switchBypass_toggle^(0+384),w
  7371  0AE8  045F               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7372  0AE9  1D03               	btfss	3,2
  7373  0AEA  2AF9               	goto	l5754
  7374  0AEB  0020               	movlb	0	; select bank0
  7375  0AEC  0866               	movf	_feedback_state,w	;volatile
  7376  0AED  1D03               	btfss	3,2
  7377  0AEE  2AF9               	goto	l5754
  7378  0AEF  0853               	movf	_doubleTap_state,w	;volatile
  7379  0AF0  1D03               	btfss	3,2
  7380  0AF1  2AF9               	goto	l5754
  7381                           
  7382                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7383  0AF2  3000               	movlw	0
  7384  0AF3  0021               	movlb	1	; select bank1
  7385  0AF4  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7386  0AF5                     L3:	
  7387  0AF5  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7388  0AF6                     L4:	
  7389  0AF6  3193  2300  318A   	fcall	_setSwitchBypassState
  7390  0AF9                     l5754:	
  7391                           
  7392                           ;SwitchBypass.c: 115: }
  7393                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7394  0AF9  0020               	movlb	0	; select bank0
  7395  0AFA  0C69               	rrf	_switchBypass_state,w
  7396  0AFB  0022               	movlb	2	; select bank2
  7397  0AFC  1C03               	skipc
  7398  0AFD  110D               	bcf	13,2	;volatile
  7399  0AFE  1803               	skipnc
  7400  0AFF  150D               	bsf	13,2	;volatile
  7401                           
  7402                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7403  0B00  3000               	movlw	0
  7404  0B01  0021               	movlb	1	; select bank1
  7405  0B02  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7406  0B03  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7407  0B04  319E  264D  318A   	fcall	_setFeedbackState
  7408                           
  7409                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7410  0B07  3000               	movlw	0
  7411  0B08  0021               	movlb	1	; select bank1
  7412  0B09  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7413  0B0A  00B3               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7414  0B0B  3190  200D         	fcall	_setDoublePressState
  7415                           
  7416                           ;SwitchBypass.c: 122: feedback_start = 0;
  7417  0B0D  0020               	movlb	0	; select bank0
  7418  0B0E  01D4               	clrf	_feedback_start
  7419                           
  7420                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7421  0B0F  0022               	movlb	2	; select bank2
  7422  0B10  01D3               	clrf	_bypass_turning_on^(0+256)
  7423                           
  7424                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7425  0B11  0023               	movlb	3	; select bank3
  7426  0B12  01DE               	clrf	_switchBypass_toggle^(0+384)
  7427  0B13  01DF               	clrf	(_switchBypass_toggle+1)^(0+384)
  7428                           
  7429                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7430  0B14  3001               	movlw	1
  7431  0B15  00E7               	movwf	_switchBypass_up^(0+384)
  7432  0B16  3000               	movlw	0
  7433  0B17  00E8               	movwf	(_switchBypass_up^(0+384)+1)
  7434                           
  7435                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7436  0B18  3019               	movlw	25
  7437  0B19  0022               	movlb	2	; select bank2
  7438  0B1A  00D0               	movwf	_switchBypass_pressed^(0+256)
  7439  0B1B  3000               	movlw	0
  7440  0B1C  00D1               	movwf	(_switchBypass_pressed^(0+256)+1)
  7441  0B1D  0008               	return
  7442  0B1E                     __end_of_updateSwitchBypass:	
  7443                           
  7444                           	psect	text6
  7445  1E4D                     __ptext6:	
  7446 ;; *************** function _setFeedbackState *****************
  7447 ;; Defined at:
  7448 ;;		line 151 in file "SwitchBypass.c"
  7449 ;; Parameters:    Size  Location     Type
  7450 ;;  f_state         2    0[BANK1 ] int 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;		None
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  1    wreg      void 
  7455 ;; Registers used:
  7456 ;;		wreg, status,0
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7462 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7464 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7465 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7466 ;;Total ram usage:        4 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; Hardware stack levels required when called:    3
  7469 ;; This function calls:
  7470 ;;		Nothing
  7471 ;; This function is called by:
  7472 ;;		_updateSwitchBypass
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function _setFeedbackState
  7478  1E4D                     _setFeedbackState:	
  7479                           
  7480                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7484  1E4D  0020               	movlb	0	; select bank0
  7485  1E4E  0866               	movf	_feedback_state,w	;volatile
  7486  1E4F  0021               	movlb	1	; select bank1
  7487  1E50  00A2               	movwf	??_setFeedbackState^(0+128)
  7488  1E51  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7489  1E52  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7490  1E53  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7491  1E54  1D03               	skipz
  7492  1E55  2E58               	goto	u5445
  7493  1E56  0820               	movf	setFeedbackState@f_state^(0+128),w
  7494  1E57  0622               	xorwf	??_setFeedbackState^(0+128),w
  7495  1E58                     u5445:	
  7496  1E58  1903               	btfsc	3,2
  7497  1E59  0008               	return
  7498                           
  7499                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7500  1E5A  0820               	movf	setFeedbackState@f_state^(0+128),w
  7501  1E5B  00A2               	movwf	??_setFeedbackState^(0+128)
  7502  1E5C  0822               	movf	??_setFeedbackState^(0+128),w
  7503  1E5D  0020               	movlb	0	; select bank0
  7504  1E5E  00E6               	movwf	_feedback_state	;volatile
  7505                           
  7506                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7507  1E5F  0021               	movlb	1	; select bank1
  7508  1E60  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7509  1E61  0022               	movlb	2	; select bank2
  7510  1E62  1C03               	skipc
  7511  1E63  118D               	bcf	13,3	;volatile
  7512  1E64  1803               	skipnc
  7513  1E65  158D               	bsf	13,3	;volatile
  7514  1E66  0008               	return
  7515  1E67                     __end_of_setFeedbackState:	
  7516                           
  7517                           	psect	text7
  7518  100D                     __ptext7:	
  7519 ;; *************** function _setDoublePressState *****************
  7520 ;; Defined at:
  7521 ;;		line 20 in file "preset_programming.c"
  7522 ;; Parameters:    Size  Location     Type
  7523 ;;  f_state         2   18[BANK1 ] int 
  7524 ;; Auto vars:     Size  Location     Type
  7525 ;;		None
  7526 ;; Return value:  Size  Location     Type
  7527 ;;                  1    wreg      void 
  7528 ;; Registers used:
  7529 ;;		wreg, status,2, status,0, pclath, cstack
  7530 ;; Tracked objects:
  7531 ;;		On entry : 0/0
  7532 ;;		On exit  : 0/0
  7533 ;;		Unchanged: 0/0
  7534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7535 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7537 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7538 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7539 ;;Total ram usage:        4 bytes
  7540 ;; Hardware stack levels used:    1
  7541 ;; Hardware stack levels required when called:    5
  7542 ;; This function calls:
  7543 ;;		_wait_ms
  7544 ;; This function is called by:
  7545 ;;		_updateSwitchBypass
  7546 ;;		_updateSwitchTap
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           
  7551                           ;psect for function _setDoublePressState
  7552  100D                     _setDoublePressState:	
  7553                           
  7554                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  7558  100D  0020               	movlb	0	; select bank0
  7559  100E  0853               	movf	_doubleTap_state,w	;volatile
  7560  100F  0021               	movlb	1	; select bank1
  7561  1010  00B4               	movwf	??_setDoublePressState^(0+128)
  7562  1011  01B5               	clrf	(??_setDoublePressState^(0+128)+1)
  7563  1012  0833               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7564  1013  0635               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7565  1014  1D03               	skipz
  7566  1015  2818               	goto	u5455
  7567  1016  0832               	movf	setDoublePressState@f_state^(0+128),w
  7568  1017  0634               	xorwf	??_setDoublePressState^(0+128),w
  7569  1018                     u5455:	
  7570  1018  1903               	btfsc	3,2
  7571  1019  0008               	return
  7572                           
  7573                           ;preset_programming.c: 22: doubleTap_state = f_state;
  7574  101A  0832               	movf	setDoublePressState@f_state^(0+128),w
  7575  101B  00B4               	movwf	??_setDoublePressState^(0+128)
  7576  101C  0834               	movf	??_setDoublePressState^(0+128),w
  7577  101D  0020               	movlb	0	; select bank0
  7578  101E  00D3               	movwf	_doubleTap_state	;volatile
  7579                           
  7580                           ;preset_programming.c: 23: if (f_state == 1) {
  7581  101F  0021               	movlb	1	; select bank1
  7582  1020  0332               	decf	setDoublePressState@f_state^(0+128),w
  7583  1021  0433               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7584  1022  1D03               	btfss	3,2
  7585  1023  282C               	goto	l5300
  7586                           
  7587                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  7588  1024  0022               	movlb	2	; select bank2
  7589  1025  120D               	bcf	13,4	;volatile
  7590                           
  7591                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  7592  1026  110D               	bcf	13,2	;volatile
  7593                           
  7594                           ;preset_programming.c: 26: LATBbits.LATB5 = 0;
  7595  1027  128D               	bcf	13,5	;volatile
  7596                           
  7597                           ;preset_programming.c: 27: LATBbits.LATB3 = 0;
  7598  1028  118D               	bcf	13,3	;volatile
  7599                           
  7600                           ;preset_programming.c: 28: longTap_state = 0;
  7601  1029  0020               	movlb	0	; select bank0
  7602  102A  01E7               	clrf	_longTap_state	;volatile
  7603                           
  7604                           ;preset_programming.c: 29: feedback_state = 0;
  7605  102B  01E6               	clrf	_feedback_state	;volatile
  7606  102C                     l5300:	
  7607                           
  7608                           ;preset_programming.c: 30: }
  7609                           ;preset_programming.c: 32: LATBbits.LATB1 = f_state;
  7610  102C  0021               	movlb	1	; select bank1
  7611  102D  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7612  102E  0022               	movlb	2	; select bank2
  7613  102F  1C03               	skipc
  7614  1030  108D               	bcf	13,1	;volatile
  7615  1031  1803               	skipnc
  7616  1032  148D               	bsf	13,1	;volatile
  7617                           
  7618                           ;preset_programming.c: 33: LATBbits.LATB0 = f_state;
  7619  1033  0021               	movlb	1	; select bank1
  7620  1034  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7621  1035  0022               	movlb	2	; select bank2
  7622  1036  1C03               	skipc
  7623  1037  100D               	bcf	13,0	;volatile
  7624  1038  1803               	skipnc
  7625  1039  140D               	bsf	13,0	;volatile
  7626                           
  7627                           ;preset_programming.c: 35: wait_ms(20);
  7628  103A  3014               	movlw	20
  7629  103B  0021               	movlb	1	; select bank1
  7630  103C  00AC               	movwf	wait_ms@timeSec^(0+128)
  7631  103D  3000               	movlw	0
  7632  103E  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7633  103F  319F  27CE         	fcall	_wait_ms
  7634  1041  0008               	return
  7635  1042                     __end_of_setDoublePressState:	
  7636                           
  7637                           	psect	text8
  7638  1F14                     __ptext8:	
  7639 ;; *************** function _showBootSequence *****************
  7640 ;; Defined at:
  7641 ;;		line 86 in file "LEDs.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;		None
  7644 ;; Auto vars:     Size  Location     Type
  7645 ;;		None
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      void 
  7648 ;; Registers used:
  7649 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : 0/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7656 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7657 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7658 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7659 ;;Total ram usage:        1 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    6
  7662 ;; This function calls:
  7663 ;;		_getCurrentLEDState
  7664 ;;		_restoreLEDState
  7665 ;;		_solidring_tactiles
  7666 ;;		_star_tactiles
  7667 ;; This function is called by:
  7668 ;;		_main
  7669 ;; This function uses a non-reentrant model
  7670 ;;
  7671                           
  7672                           
  7673                           ;psect for function _showBootSequence
  7674  1F14                     _showBootSequence:	
  7675                           
  7676                           ;LEDs.c: 87: getCurrentLEDState();
  7677                           
  7678                           ;incstack = 0
  7679                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7680  1F14  319E  2634  319F   	fcall	_getCurrentLEDState
  7681                           
  7682                           ;LEDs.c: 88: suspend_blink = 1;
  7683  1F17  3001               	movlw	1
  7684  1F18  0021               	movlb	1	; select bank1
  7685  1F19  00B9               	movwf	??_showBootSequence^(0+128)
  7686  1F1A  0839               	movf	??_showBootSequence^(0+128),w
  7687  1F1B  0020               	movlb	0	; select bank0
  7688  1F1C  00D6               	movwf	_suspend_blink	;volatile
  7689                           
  7690                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  7691  1F1D  0022               	movlb	2	; select bank2
  7692  1F1E  120D               	bcf	13,4	;volatile
  7693                           
  7694                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  7695  1F1F  110D               	bcf	13,2	;volatile
  7696                           
  7697                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  7698  1F20  128D               	bcf	13,5	;volatile
  7699                           
  7700                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  7701  1F21  118D               	bcf	13,3	;volatile
  7702                           
  7703                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  7704  1F22  100D               	bcf	13,0	;volatile
  7705                           
  7706                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  7707  1F23  108D               	bcf	13,1	;volatile
  7708                           
  7709                           ;LEDs.c: 113: star_tactiles(0);
  7710  1F24  3000               	movlw	0
  7711  1F25  3194  24ED  319F   	fcall	_star_tactiles
  7712                           
  7713                           ;LEDs.c: 114: star_tactiles(0);
  7714  1F28  3000               	movlw	0
  7715  1F29  3194  24ED  319F   	fcall	_star_tactiles
  7716                           
  7717                           ;LEDs.c: 115: star_tactiles(1);
  7718  1F2C  3001               	movlw	1
  7719  1F2D  3194  24ED  319F   	fcall	_star_tactiles
  7720                           
  7721                           ;LEDs.c: 116: star_tactiles(1);
  7722  1F30  3001               	movlw	1
  7723  1F31  3194  24ED  319F   	fcall	_star_tactiles
  7724                           
  7725                           ;LEDs.c: 118: solidring_tactiles();
  7726  1F34  3191  216E  319F   	fcall	_solidring_tactiles
  7727                           
  7728                           ;LEDs.c: 119: solidring_tactiles();
  7729  1F37  3191  216E  319F   	fcall	_solidring_tactiles
  7730                           
  7731                           ;LEDs.c: 122: suspend_blink = 0;
  7732  1F3A  0020               	movlb	0	; select bank0
  7733  1F3B  01D6               	clrf	_suspend_blink	;volatile
  7734                           
  7735                           ;LEDs.c: 123: restoreLEDState();
  7736  1F3C  319E  2667         	fcall	_restoreLEDState
  7737  1F3E  0008               	return
  7738  1F3F                     __end_of_showBootSequence:	
  7739                           
  7740                           	psect	text9
  7741  14ED                     __ptext9:	
  7742 ;; *************** function _star_tactiles *****************
  7743 ;; Defined at:
  7744 ;;		line 194 in file "LEDs.c"
  7745 ;; Parameters:    Size  Location     Type
  7746 ;;  reverse         1    wreg     unsigned char 
  7747 ;; Auto vars:     Size  Location     Type
  7748 ;;  reverse         1   20[BANK1 ] unsigned char 
  7749 ;;  iLed            2   23[BANK1 ] int 
  7750 ;;  iLed            2   21[BANK1 ] int 
  7751 ;; Return value:  Size  Location     Type
  7752 ;;                  1    wreg      void 
  7753 ;; Registers used:
  7754 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7755 ;; Tracked objects:
  7756 ;;		On entry : 0/0
  7757 ;;		On exit  : 0/0
  7758 ;;		Unchanged: 0/0
  7759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7761 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7762 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7763 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7764 ;;Total ram usage:        7 bytes
  7765 ;; Hardware stack levels used:    1
  7766 ;; Hardware stack levels required when called:    5
  7767 ;; This function calls:
  7768 ;;		_set_leds_bottom
  7769 ;;		_set_leds_top
  7770 ;;		_wait_ms
  7771 ;; This function is called by:
  7772 ;;		_showBootSequence
  7773 ;; This function uses a non-reentrant model
  7774 ;;
  7775                           
  7776                           
  7777                           ;psect for function _star_tactiles
  7778  14ED                     _star_tactiles:	
  7779                           
  7780                           ;incstack = 0
  7781                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7782                           ;star_tactiles@reverse stored from wreg
  7783  14ED  0021               	movlb	1	; select bank1
  7784  14EE  00B4               	movwf	star_tactiles@reverse^(0+128)
  7785                           
  7786                           ;LEDs.c: 195: if (reverse == 1) {
  7787  14EF  0334               	decf	star_tactiles@reverse^(0+128),w
  7788  14F0  1D03               	btfss	3,2
  7789  14F1  2D22               	goto	l5224
  7790                           
  7791                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  7792  14F2  3005               	movlw	5
  7793  14F3  00B5               	movwf	star_tactiles@iLed^(0+128)
  7794  14F4  3000               	movlw	0
  7795  14F5  00B6               	movwf	(star_tactiles@iLed^(0+128)+1)
  7796  14F6                     L5:	
  7797  14F6  1BB6               	btfsc	(star_tactiles@iLed+1)^(0+128),7
  7798  14F7  0008               	return
  7799                           
  7800                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  7801  14F8  0836               	movf	(star_tactiles@iLed+1)^(0+128),w
  7802  14F9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  7803  14FA  0835               	movf	star_tactiles@iLed^(0+128),w
  7804  14FB  00A0               	movwf	set_leds_top@x^(0+128)
  7805  14FC  3001               	movlw	1
  7806  14FD  00A2               	movwf	set_leds_top@ledState^(0+128)
  7807  14FE  3000               	movlw	0
  7808  14FF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  7809  1500  3187  27AA  3194   	fcall	_set_leds_top
  7810                           
  7811                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  7812  1503  0021               	movlb	1	; select bank1
  7813  1504  0935               	comf	star_tactiles@iLed^(0+128),w
  7814  1505  00B2               	movwf	??_star_tactiles^(0+128)
  7815  1506  0936               	comf	(star_tactiles@iLed+1)^(0+128),w
  7816  1507  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  7817  1508  0AB2               	incf	??_star_tactiles^(0+128),f
  7818  1509  1903               	skipnz
  7819  150A  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  7820  150B  0832               	movf	??_star_tactiles^(0+128),w
  7821  150C  3E06               	addlw	6
  7822  150D  00A0               	movwf	set_leds_bottom@x^(0+128)
  7823  150E  3000               	movlw	0
  7824  150F  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  7825  1510  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  7826  1511  3190  207C  3194   	fcall	_set_leds_bottom
  7827                           
  7828                           ;LEDs.c: 199: wait_ms(5);
  7829  1514  3005               	movlw	5
  7830  1515  0021               	movlb	1	; select bank1
  7831  1516  00AC               	movwf	wait_ms@timeSec^(0+128)
  7832  1517  3000               	movlw	0
  7833  1518  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7834  1519  319F  27CE  3194   	fcall	_wait_ms
  7835  151C  30FF               	movlw	255
  7836  151D  0021               	movlb	1	; select bank1
  7837  151E  07B5               	addwf	star_tactiles@iLed^(0+128),f
  7838  151F  30FF               	movlw	255
  7839  1520  3DB6               	addwfc	(star_tactiles@iLed+1)^(0+128),f
  7840  1521  2CF6               	goto	L5
  7841  1522                     l5224:	
  7842                           ;LEDs.c: 200: }
  7843                           ;LEDs.c: 201: } else {
  7844                           
  7845                           
  7846                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  7847  1522  3001               	movlw	1
  7848  1523  00B7               	movwf	star_tactiles@iLed_1444^(0+128)
  7849  1524  3000               	movlw	0
  7850  1525  00B8               	movwf	(star_tactiles@iLed_1444^(0+128)+1)
  7851  1526                     L6:	
  7852  1526  0838               	movf	(star_tactiles@iLed_1444+1)^(0+128),w
  7853  1527  3A80               	xorlw	128
  7854  1528  00B2               	movwf	??_star_tactiles^(0+128)
  7855  1529  3080               	movlw	128
  7856  152A  0232               	subwf	??_star_tactiles^(0+128),w
  7857  152B  1D03               	skipz
  7858  152C  2D2F               	goto	u5395
  7859  152D  3007               	movlw	7
  7860  152E  0237               	subwf	star_tactiles@iLed_1444^(0+128),w
  7861  152F                     u5395:	
  7862  152F  1803               	btfsc	3,0
  7863  1530  0008               	return
  7864                           
  7865                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  7866  1531  0021               	movlb	1	; select bank1
  7867  1532  0838               	movf	(star_tactiles@iLed_1444+1)^(0+128),w
  7868  1533  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  7869  1534  0837               	movf	star_tactiles@iLed_1444^(0+128),w
  7870  1535  00A0               	movwf	set_leds_top@x^(0+128)
  7871  1536  3001               	movlw	1
  7872  1537  00A2               	movwf	set_leds_top@ledState^(0+128)
  7873  1538  3000               	movlw	0
  7874  1539  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  7875  153A  3187  27AA  3194   	fcall	_set_leds_top
  7876                           
  7877                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  7878  153D  0021               	movlb	1	; select bank1
  7879  153E  0937               	comf	star_tactiles@iLed_1444^(0+128),w
  7880  153F  00B2               	movwf	??_star_tactiles^(0+128)
  7881  1540  0938               	comf	(star_tactiles@iLed_1444+1)^(0+128),w
  7882  1541  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  7883  1542  0AB2               	incf	??_star_tactiles^(0+128),f
  7884  1543  1903               	skipnz
  7885  1544  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  7886  1545  0832               	movf	??_star_tactiles^(0+128),w
  7887  1546  3E06               	addlw	6
  7888  1547  00A0               	movwf	set_leds_bottom@x^(0+128)
  7889  1548  3000               	movlw	0
  7890  1549  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  7891  154A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  7892  154B  3190  207C  3194   	fcall	_set_leds_bottom
  7893                           
  7894                           ;LEDs.c: 205: wait_ms(5);
  7895  154E  3005               	movlw	5
  7896  154F  0021               	movlb	1	; select bank1
  7897  1550  00AC               	movwf	wait_ms@timeSec^(0+128)
  7898  1551  3000               	movlw	0
  7899  1552  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7900  1553  319F  27CE  3194   	fcall	_wait_ms
  7901  1556  3001               	movlw	1
  7902  1557  0021               	movlb	1	; select bank1
  7903  1558  07B7               	addwf	star_tactiles@iLed_1444^(0+128),f
  7904  1559  3000               	movlw	0
  7905  155A  3DB8               	addwfc	(star_tactiles@iLed_1444+1)^(0+128),f
  7906  155B  2D26               	goto	L6
  7907  155C                     __end_of_star_tactiles:	
  7908                           
  7909                           	psect	text10
  7910  116E                     __ptext10:	
  7911 ;; *************** function _solidring_tactiles *****************
  7912 ;; Defined at:
  7913 ;;		line 223 in file "LEDs.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;		None
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  7918 ;; Return value:  Size  Location     Type
  7919 ;;                  1    wreg      void 
  7920 ;; Registers used:
  7921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7922 ;; Tracked objects:
  7923 ;;		On entry : 0/0
  7924 ;;		On exit  : 0/0
  7925 ;;		Unchanged: 0/0
  7926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7928 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7929 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7930 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7931 ;;Total ram usage:        3 bytes
  7932 ;; Hardware stack levels used:    1
  7933 ;; Hardware stack levels required when called:    5
  7934 ;; This function calls:
  7935 ;;		_set_leds_bottom
  7936 ;;		_set_leds_top
  7937 ;;		_wait_ms
  7938 ;; This function is called by:
  7939 ;;		_showBootSequence
  7940 ;;		_showSave
  7941 ;; This function uses a non-reentrant model
  7942 ;;
  7943                           
  7944                           
  7945                           ;psect for function _solidring_tactiles
  7946  116E                     _solidring_tactiles:	
  7947                           
  7948                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  7949                           
  7950                           ;incstack = 0
  7951                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7952  116E  301E               	movlw	30
  7953  116F  0021               	movlb	1	; select bank1
  7954  1170  00B2               	movwf	??_solidring_tactiles^(0+128)
  7955  1171  0832               	movf	??_solidring_tactiles^(0+128),w
  7956  1172  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  7957                           
  7958                           ;LEDs.c: 225: set_leds_top(100, 1);
  7959  1173  3064               	movlw	100
  7960  1174  00A0               	movwf	set_leds_top@x^(0+128)
  7961  1175  3000               	movlw	0
  7962  1176  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  7963  1177  3001               	movlw	1
  7964  1178  00A2               	movwf	set_leds_top@ledState^(0+128)
  7965  1179  3000               	movlw	0
  7966  117A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  7967  117B  3187  27AA  3191   	fcall	_set_leds_top
  7968                           
  7969                           ;LEDs.c: 226: set_leds_bottom(100);
  7970  117E  3064               	movlw	100
  7971  117F  0021               	movlb	1	; select bank1
  7972  1180  00A0               	movwf	set_leds_bottom@x^(0+128)
  7973  1181  3000               	movlw	0
  7974  1182  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  7975  1183  3190  207C  3191   	fcall	_set_leds_bottom
  7976                           
  7977                           ;LEDs.c: 227: wait_ms(ring_delay);
  7978  1186  0021               	movlb	1	; select bank1
  7979  1187  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  7980  1188  00B2               	movwf	??_solidring_tactiles^(0+128)
  7981  1189  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  7982  118A  0832               	movf	??_solidring_tactiles^(0+128),w
  7983  118B  00AC               	movwf	wait_ms@timeSec^(0+128)
  7984  118C  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  7985  118D  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  7986  118E  319F  27CE  3191   	fcall	_wait_ms
  7987                           
  7988                           ;LEDs.c: 229: set_leds_top(0, 1);
  7989  1191  3000               	movlw	0
  7990  1192  0021               	movlb	1	; select bank1
  7991  1193  00A0               	movwf	set_leds_top@x^(0+128)
  7992  1194  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  7993  1195  3001               	movlw	1
  7994  1196  00A2               	movwf	set_leds_top@ledState^(0+128)
  7995  1197  3000               	movlw	0
  7996  1198  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  7997  1199  3187  27AA  3191   	fcall	_set_leds_top
  7998                           
  7999                           ;LEDs.c: 230: set_leds_bottom(0);
  8000  119C  3000               	movlw	0
  8001  119D  0021               	movlb	1	; select bank1
  8002  119E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8003  119F  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8004  11A0  3190  207C  3191   	fcall	_set_leds_bottom
  8005                           
  8006                           ;LEDs.c: 231: wait_ms(ring_delay);
  8007  11A3  0021               	movlb	1	; select bank1
  8008  11A4  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8009  11A5  00B2               	movwf	??_solidring_tactiles^(0+128)
  8010  11A6  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8011  11A7  0832               	movf	??_solidring_tactiles^(0+128),w
  8012  11A8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8013  11A9  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8014  11AA  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8015  11AB  319F  27CE         	fcall	_wait_ms
  8016  11AD  0008               	return
  8017  11AE                     __end_of_solidring_tactiles:	
  8018                           
  8019                           	psect	text11
  8020  1E67                     __ptext11:	
  8021 ;; *************** function _restoreLEDState *****************
  8022 ;; Defined at:
  8023 ;;		line 89 in file "state_manager.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, status,0
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8041 ;;Total ram usage:        0 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    3
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_showBootSequence
  8048 ;;		_showError_Alternating
  8049 ;;		_show_error
  8050 ;;		_show_cancel
  8051 ;; This function uses a non-reentrant model
  8052 ;;
  8053                           
  8054                           
  8055                           ;psect for function _restoreLEDState
  8056  1E67                     _restoreLEDState:	
  8057                           
  8058                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8059                           
  8060                           ;incstack = 0
  8061                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8062  1E67  0023               	movlb	3	; select bank3
  8063  1E68  0C34               	rrf	_ledState^(0+384),w
  8064  1E69  0022               	movlb	2	; select bank2
  8065  1E6A  1C03               	skipc
  8066  1E6B  120D               	bcf	13,4	;volatile
  8067  1E6C  1803               	skipnc
  8068  1E6D  160D               	bsf	13,4	;volatile
  8069                           
  8070                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8071  1E6E  0023               	movlb	3	; select bank3
  8072  1E6F  0C36               	rrf	(_ledState^(0+384)+2),w
  8073  1E70  0022               	movlb	2	; select bank2
  8074  1E71  1C03               	skipc
  8075  1E72  110D               	bcf	13,2	;volatile
  8076  1E73  1803               	skipnc
  8077  1E74  150D               	bsf	13,2	;volatile
  8078                           
  8079                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8080  1E75  0023               	movlb	3	; select bank3
  8081  1E76  0C35               	rrf	(_ledState^(0+384)+1),w
  8082  1E77  0022               	movlb	2	; select bank2
  8083  1E78  1C03               	skipc
  8084  1E79  128D               	bcf	13,5	;volatile
  8085  1E7A  1803               	skipnc
  8086  1E7B  168D               	bsf	13,5	;volatile
  8087                           
  8088                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8089  1E7C  0023               	movlb	3	; select bank3
  8090  1E7D  0C37               	rrf	(_ledState^(0+384)+3),w
  8091  1E7E  0022               	movlb	2	; select bank2
  8092  1E7F  1C03               	skipc
  8093  1E80  118D               	bcf	13,3	;volatile
  8094  1E81  1803               	skipnc
  8095  1E82  158D               	bsf	13,3	;volatile
  8096  1E83  0008               	return
  8097  1E84                     __end_of_restoreLEDState:	
  8098                           
  8099                           	psect	text12
  8100  1E34                     __ptext12:	
  8101 ;; *************** function _getCurrentLEDState *****************
  8102 ;; Defined at:
  8103 ;;		line 83 in file "state_manager.c"
  8104 ;; Parameters:    Size  Location     Type
  8105 ;;		None
  8106 ;; Auto vars:     Size  Location     Type
  8107 ;;		None
  8108 ;; Return value:  Size  Location     Type
  8109 ;;                  1    wreg      void 
  8110 ;; Registers used:
  8111 ;;		wreg, status,2
  8112 ;; Tracked objects:
  8113 ;;		On entry : 0/0
  8114 ;;		On exit  : 0/0
  8115 ;;		Unchanged: 0/0
  8116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8120 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8121 ;;Total ram usage:        0 bytes
  8122 ;; Hardware stack levels used:    1
  8123 ;; Hardware stack levels required when called:    3
  8124 ;; This function calls:
  8125 ;;		Nothing
  8126 ;; This function is called by:
  8127 ;;		_showBootSequence
  8128 ;;		_showError_Alternating
  8129 ;;		_show_error
  8130 ;;		_show_cancel
  8131 ;; This function uses a non-reentrant model
  8132 ;;
  8133                           
  8134                           
  8135                           ;psect for function _getCurrentLEDState
  8136  1E34                     _getCurrentLEDState:	
  8137                           
  8138                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8139                           
  8140                           ;incstack = 0
  8141                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8142  1E34  3000               	movlw	0
  8143  1E35  0022               	movlb	2	; select bank2
  8144  1E36  1A0D               	btfsc	13,4	;volatile
  8145  1E37  3001               	movlw	1
  8146  1E38  0023               	movlb	3	; select bank3
  8147  1E39  00B4               	movwf	_ledState^(0+384)
  8148                           
  8149                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8150  1E3A  3000               	movlw	0
  8151  1E3B  0022               	movlb	2	; select bank2
  8152  1E3C  190D               	btfsc	13,2	;volatile
  8153  1E3D  3001               	movlw	1
  8154  1E3E  0023               	movlb	3	; select bank3
  8155  1E3F  00B6               	movwf	(_ledState^(0+384)+2)
  8156                           
  8157                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8158  1E40  3000               	movlw	0
  8159  1E41  0022               	movlb	2	; select bank2
  8160  1E42  1A8D               	btfsc	13,5	;volatile
  8161  1E43  3001               	movlw	1
  8162  1E44  0023               	movlb	3	; select bank3
  8163  1E45  00B5               	movwf	(_ledState^(0+384)+1)
  8164                           
  8165                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8166  1E46  3000               	movlw	0
  8167  1E47  0022               	movlb	2	; select bank2
  8168  1E48  198D               	btfsc	13,3	;volatile
  8169  1E49  3001               	movlw	1
  8170  1E4A  0023               	movlb	3	; select bank3
  8171  1E4B  00B7               	movwf	(_ledState^(0+384)+3)
  8172  1E4C  0008               	return
  8173  1E4D                     __end_of_getCurrentLEDState:	
  8174                           
  8175                           	psect	text13
  8176  0979                     __ptext13:	
  8177 ;; *************** function _set_subdivision *****************
  8178 ;; Defined at:
  8179 ;;		line 77 in file "user.c"
  8180 ;; Parameters:    Size  Location     Type
  8181 ;;  x               2   22[BANK2 ] int 
  8182 ;;  y               2   24[BANK2 ] int 
  8183 ;; Auto vars:     Size  Location     Type
  8184 ;;  scalar          3   29[BANK2 ] float 
  8185 ;;  tmpX            2   32[BANK2 ] int 
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  2   22[BANK2 ] int 
  8188 ;; Registers used:
  8189 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8195 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8196 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8197 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8198 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8199 ;;Total ram usage:       12 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    6
  8202 ;; This function calls:
  8203 ;;		___awtoft
  8204 ;;		___ftmul
  8205 ;;		___fttol
  8206 ;;		_trunc
  8207 ;; This function is called by:
  8208 ;;		_main
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _set_subdivision
  8214  0979                     _set_subdivision:	
  8215                           
  8216                           ;user.c: 81: adjust_sub_delay = 0;
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in _set_subdivision: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8220  0979  0023               	movlb	3	; select bank3
  8221  097A  01C4               	clrf	_adjust_sub_delay^(0+384)
  8222  097B  01C5               	clrf	(_adjust_sub_delay+1)^(0+384)
  8223                           
  8224                           ;user.c: 82: int tmpX = x;
  8225  097C  0022               	movlb	2	; select bank2
  8226  097D  0837               	movf	(set_subdivision@x+1)^(0+256),w
  8227  097E  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8228  097F  0836               	movf	set_subdivision@x^(0+256),w
  8229  0980  00C0               	movwf	set_subdivision@tmpX^(0+256)
  8230                           
  8231                           ;user.c: 83: float scalar = 1.0;
  8232  0981  3000               	movlw	0
  8233  0982  00BD               	movwf	set_subdivision@scalar^(0+256)
  8234  0983  3080               	movlw	128
  8235  0984  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8236  0985  303F               	movlw	63
  8237  0986  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  8238                           
  8239                           ;user.c: 85: switch (y) {
  8240  0987  29A1               	goto	l5904
  8241  0988                     l5892:	
  8242                           ;user.c: 86: case 1:
  8243                           
  8244                           
  8245                           ;user.c: 87: scalar = 0.75;
  8246  0988  3000               	movlw	0
  8247  0989  00BD               	movwf	set_subdivision@scalar^(0+256)
  8248  098A  3040               	movlw	64
  8249  098B  2993               	goto	L8
  8250  098C                     l5894:	
  8251                           ;user.c: 89: case 2:
  8252                           
  8253                           ;user.c: 88: break;
  8254                           
  8255                           
  8256                           ;user.c: 90: scalar = 0.6666;
  8257  098C  30A6               	movlw	166
  8258  098D  00BD               	movwf	set_subdivision@scalar^(0+256)
  8259  098E  302A               	movlw	42
  8260  098F  2993               	goto	L8
  8261  0990                     l5896:	
  8262                           ;user.c: 92: case 3:
  8263                           
  8264                           ;user.c: 91: break;
  8265                           
  8266                           
  8267                           ;user.c: 93: scalar = .5;
  8268  0990  3000               	movlw	0
  8269  0991  00BD               	movwf	set_subdivision@scalar^(0+256)
  8270  0992  3000               	movlw	0
  8271  0993                     L8:	
  8272  0993  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8273  0994  303F               	movlw	63
  8274  0995  299F               	goto	L10
  8275  0996                     l5898:	
  8276                           ;user.c: 95: case 4:
  8277                           
  8278                           ;user.c: 94: break;
  8279                           
  8280                           
  8281                           ;user.c: 96: scalar = 0.3333;
  8282  0996  30A6               	movlw	166
  8283  0997  00BD               	movwf	set_subdivision@scalar^(0+256)
  8284  0998  30AA               	movlw	170
  8285  0999  299D               	goto	L11
  8286  099A                     l5900:	
  8287                           ;user.c: 98: case 5:
  8288                           
  8289                           ;user.c: 97: break;
  8290                           
  8291                           
  8292                           ;user.c: 99: scalar = 0.25;
  8293  099A  3000               	movlw	0
  8294  099B  00BD               	movwf	set_subdivision@scalar^(0+256)
  8295  099C  3080               	movlw	128
  8296  099D                     L11:	
  8297  099D  00BE               	movwf	(set_subdivision@scalar+1)^(0+256)
  8298  099E  303E               	movlw	62
  8299  099F                     L10:	
  8300  099F  00BF               	movwf	(set_subdivision@scalar+2)^(0+256)
  8301                           
  8302                           ;user.c: 104: }
  8303                           
  8304                           ;user.c: 103: break;
  8305                           
  8306                           ;user.c: 101: case 6:
  8307                           
  8308                           ;user.c: 100: break;
  8309  09A0  29BA               	goto	l5906
  8310  09A1                     l5904:	
  8311                           
  8312                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8313                           ; Switch size 1, requested type "space"
  8314                           ; Number of cases is 1, Range of values is 0 to 0
  8315                           ; switch strategies available:
  8316                           ; Name         Instructions Cycles
  8317                           ; simple_byte            4     3 (average)
  8318                           ; direct_byte            8     6 (fixed)
  8319                           ; jumptable            260     6 (fixed)
  8320                           ;	Chosen strategy is simple_byte
  8321  09A1  0839               	movf	(set_subdivision@y+1)^(0+256),w
  8322  09A2  3A00               	xorlw	0	; case 0
  8323  09A3  1903               	skipnz
  8324  09A4  29A6               	goto	l6296
  8325  09A5  29BA               	goto	l5906
  8326  09A6                     l6296:	
  8327                           
  8328                           ; Switch size 1, requested type "space"
  8329                           ; Number of cases is 6, Range of values is 1 to 6
  8330                           ; switch strategies available:
  8331                           ; Name         Instructions Cycles
  8332                           ; simple_byte           19    10 (average)
  8333                           ; direct_byte           21     9 (fixed)
  8334                           ; jumptable            263     9 (fixed)
  8335                           ;	Chosen strategy is simple_byte
  8336  09A6  0838               	movf	set_subdivision@y^(0+256),w
  8337  09A7  3A01               	xorlw	1	; case 1
  8338  09A8  1903               	skipnz
  8339  09A9  2988               	goto	l5892
  8340  09AA  3A03               	xorlw	3	; case 2
  8341  09AB  1903               	skipnz
  8342  09AC  298C               	goto	l5894
  8343  09AD  3A01               	xorlw	1	; case 3
  8344  09AE  1903               	skipnz
  8345  09AF  2990               	goto	l5896
  8346  09B0  3A07               	xorlw	7	; case 4
  8347  09B1  1903               	skipnz
  8348  09B2  2996               	goto	l5898
  8349  09B3  3A01               	xorlw	1	; case 5
  8350  09B4  1903               	skipnz
  8351  09B5  299A               	goto	l5900
  8352  09B6  3A03               	xorlw	3	; case 6
  8353  09B7  1903               	skipnz
  8354  09B8  29BA               	goto	l5906
  8355  09B9  29BA               	goto	l5906
  8356  09BA                     l5906:	
  8357                           
  8358                           ;user.c: 106: tmpX = tmpX * scalar;
  8359  09BA  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8360  09BB  0021               	movlb	1	; select bank1
  8361  09BC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8362  09BD  0022               	movlb	2	; select bank2
  8363  09BE  0840               	movf	set_subdivision@tmpX^(0+256),w
  8364  09BF  0021               	movlb	1	; select bank1
  8365  09C0  00A8               	movwf	___awtoft@c^(0+128)
  8366  09C1  319E  26A4  3189   	fcall	___awtoft
  8367  09C4  0021               	movlb	1	; select bank1
  8368  09C5  0828               	movf	?___awtoft^(0+128),w
  8369  09C6  00B8               	movwf	___ftmul@f2^(0+128)
  8370  09C7  0829               	movf	(?___awtoft+1)^(0+128),w
  8371  09C8  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  8372  09C9  082A               	movf	(?___awtoft+2)^(0+128),w
  8373  09CA  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  8374  09CB  0022               	movlb	2	; select bank2
  8375  09CC  083D               	movf	set_subdivision@scalar^(0+256),w
  8376  09CD  0021               	movlb	1	; select bank1
  8377  09CE  00B5               	movwf	___ftmul@f1^(0+128)
  8378  09CF  0022               	movlb	2	; select bank2
  8379  09D0  083E               	movf	(set_subdivision@scalar+1)^(0+256),w
  8380  09D1  0021               	movlb	1	; select bank1
  8381  09D2  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  8382  09D3  0022               	movlb	2	; select bank2
  8383  09D4  083F               	movf	(set_subdivision@scalar+2)^(0+256),w
  8384  09D5  0021               	movlb	1	; select bank1
  8385  09D6  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  8386  09D7  3188  20C5  3189   	fcall	___ftmul
  8387  09DA  0021               	movlb	1	; select bank1
  8388  09DB  0835               	movf	?___ftmul^(0+128),w
  8389  09DC  00E7               	movwf	___fttol@f1^(0+128)
  8390  09DD  0836               	movf	(?___ftmul+1)^(0+128),w
  8391  09DE  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8392  09DF  0837               	movf	(?___ftmul+2)^(0+128),w
  8393  09E0  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8394  09E1  3197  2761  3189   	fcall	___fttol
  8395  09E4  0021               	movlb	1	; select bank1
  8396  09E5  0868               	movf	(?___fttol^(0+128)+1),w
  8397  09E6  0022               	movlb	2	; select bank2
  8398  09E7  00C1               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8399  09E8  0021               	movlb	1	; select bank1
  8400  09E9  0867               	movf	?___fttol^(0+128),w
  8401  09EA  0022               	movlb	2	; select bank2
  8402  09EB  00C0               	movwf	set_subdivision@tmpX^(0+256)
  8403                           
  8404                           ;user.c: 108: if (trunc(tmpX) != tmpX) {
  8405  09EC  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8406  09ED  0021               	movlb	1	; select bank1
  8407  09EE  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8408  09EF  0022               	movlb	2	; select bank2
  8409  09F0  0840               	movf	set_subdivision@tmpX^(0+256),w
  8410  09F1  0021               	movlb	1	; select bank1
  8411  09F2  00A8               	movwf	___awtoft@c^(0+128)
  8412  09F3  319E  26A4  3189   	fcall	___awtoft
  8413  09F6  0021               	movlb	1	; select bank1
  8414  09F7  0828               	movf	?___awtoft^(0+128),w
  8415  09F8  0022               	movlb	2	; select bank2
  8416  09F9  00AE               	movwf	trunc@x^(0+256)
  8417  09FA  0021               	movlb	1	; select bank1
  8418  09FB  0829               	movf	(?___awtoft+1)^(0+128),w
  8419  09FC  0022               	movlb	2	; select bank2
  8420  09FD  00AF               	movwf	(trunc@x+1)^(0+256)
  8421  09FE  0021               	movlb	1	; select bank1
  8422  09FF  082A               	movf	(?___awtoft+2)^(0+128),w
  8423  0A00  0022               	movlb	2	; select bank2
  8424  0A01  00B0               	movwf	(trunc@x+2)^(0+256)
  8425  0A02  3194  2436  3189   	fcall	_trunc
  8426  0A05  0022               	movlb	2	; select bank2
  8427  0A06  082E               	movf	?_trunc^(0+256),w
  8428  0A07  00BA               	movwf	??_set_subdivision^(0+256)
  8429  0A08  082F               	movf	(?_trunc+1)^(0+256),w
  8430  0A09  00BB               	movwf	(??_set_subdivision^(0+256)+1)
  8431  0A0A  0830               	movf	(?_trunc+2)^(0+256),w
  8432  0A0B  00BC               	movwf	(??_set_subdivision^(0+256)+2)
  8433  0A0C  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8434  0A0D  0021               	movlb	1	; select bank1
  8435  0A0E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8436  0A0F  0022               	movlb	2	; select bank2
  8437  0A10  0840               	movf	set_subdivision@tmpX^(0+256),w
  8438  0A11  0021               	movlb	1	; select bank1
  8439  0A12  00A8               	movwf	___awtoft@c^(0+128)
  8440  0A13  319E  26A4  3189   	fcall	___awtoft
  8441  0A16  0021               	movlb	1	; select bank1
  8442  0A17  082A               	movf	(?___awtoft+2)^(0+128),w
  8443  0A18  0022               	movlb	2	; select bank2
  8444  0A19  063C               	xorwf	(??_set_subdivision+2)^(0+256),w
  8445  0A1A  1D03               	skipz
  8446  0A1B  2A26               	goto	u6735
  8447  0A1C  0021               	movlb	1	; select bank1
  8448  0A1D  0829               	movf	(?___awtoft+1)^(0+128),w
  8449  0A1E  0022               	movlb	2	; select bank2
  8450  0A1F  063B               	xorwf	(??_set_subdivision+1)^(0+256),w
  8451  0A20  1D03               	skipz
  8452  0A21  2A26               	goto	u6735
  8453  0A22  0021               	movlb	1	; select bank1
  8454  0A23  0828               	movf	?___awtoft^(0+128),w
  8455  0A24  0022               	movlb	2	; select bank2
  8456  0A25  063A               	xorwf	??_set_subdivision^(0+256),w
  8457  0A26                     u6735:	
  8458  0A26  1903               	skipnz
  8459  0A27  2A2D               	goto	l516
  8460                           
  8461                           ;user.c: 109: adjust_sub_delay = 1;
  8462  0A28  3001               	movlw	1
  8463  0A29  0023               	movlb	3	; select bank3
  8464  0A2A  00C4               	movwf	_adjust_sub_delay^(0+384)
  8465  0A2B  3000               	movlw	0
  8466  0A2C  00C5               	movwf	(_adjust_sub_delay^(0+384)+1)
  8467  0A2D                     l516:	
  8468                           
  8469                           ;user.c: 110: }
  8470                           ;user.c: 112: return tmpX;
  8471  0A2D  0022               	movlb	2	; select bank2
  8472  0A2E  0841               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8473  0A2F  00B7               	movwf	(?_set_subdivision+1)^(0+256)
  8474  0A30  0840               	movf	set_subdivision@tmpX^(0+256),w
  8475  0A31  00B6               	movwf	?_set_subdivision^(0+256)
  8476  0A32  0008               	return
  8477  0A33                     __end_of_set_subdivision:	
  8478                           
  8479                           	psect	text14
  8480  1436                     __ptext14:	
  8481 ;; *************** function _trunc *****************
  8482 ;; Defined at:
  8483 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;  x               3   14[BANK2 ] int 
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  i               3   17[BANK2 ] int 
  8488 ;;  expon           2   20[BANK2 ] int 
  8489 ;; Return value:  Size  Location     Type
  8490 ;;                  3   14[BANK2 ] int 
  8491 ;; Registers used:
  8492 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8498 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8499 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8500 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8501 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8502 ;;Total ram usage:        9 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    5
  8505 ;; This function calls:
  8506 ;;		___altoft
  8507 ;;		___fttol
  8508 ;;		_frexp
  8509 ;; This function is called by:
  8510 ;;		_set_subdivision
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           
  8515                           ;psect for function _trunc
  8516  1436                     _trunc:	
  8517                           
  8518                           ;incstack = 0
  8519                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8520  1436  0022               	movlb	2	; select bank2
  8521  1437  082E               	movf	trunc@x^(0+256),w
  8522  1438  0021               	movlb	1	; select bank1
  8523  1439  00A0               	movwf	frexp@value^(0+128)
  8524  143A  0022               	movlb	2	; select bank2
  8525  143B  082F               	movf	(trunc@x+1)^(0+256),w
  8526  143C  0021               	movlb	1	; select bank1
  8527  143D  00A1               	movwf	(frexp@value+1)^(0+128)
  8528  143E  0022               	movlb	2	; select bank2
  8529  143F  0830               	movf	(trunc@x+2)^(0+256),w
  8530  1440  0021               	movlb	1	; select bank1
  8531  1441  00A2               	movwf	(frexp@value+2)^(0+128)
  8532  1442  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  8533  1443  00EF               	movwf	??_trunc^(0+128)
  8534  1444  086F               	movf	??_trunc^(0+128),w
  8535  1445  00A3               	movwf	frexp@eptr^(0+128)
  8536  1446  3190  2042  3194   	fcall	_frexp
  8537  1449  0022               	movlb	2	; select bank2
  8538  144A  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  8539  144B  2C53               	goto	l5174
  8540  144C  3000               	movlw	0
  8541  144D  00AE               	movwf	?_trunc^(0+256)
  8542  144E  3000               	movlw	0
  8543  144F  00AF               	movwf	(?_trunc+1)^(0+256)
  8544  1450  3000               	movlw	0
  8545  1451  00B0               	movwf	(?_trunc+2)^(0+256)
  8546  1452  0008               	return
  8547  1453                     l5174:	
  8548  1453  3000               	movlw	0
  8549  1454  0235               	subwf	(trunc@expon+1)^(0+256),w
  8550  1455  3015               	movlw	21
  8551  1456  1903               	skipnz
  8552  1457  0234               	subwf	trunc@expon^(0+256),w
  8553  1458  1803               	btfsc	3,0
  8554  1459  0008               	return
  8555  145A  082E               	movf	trunc@x^(0+256),w
  8556  145B  0021               	movlb	1	; select bank1
  8557  145C  00E7               	movwf	___fttol@f1^(0+128)
  8558  145D  0022               	movlb	2	; select bank2
  8559  145E  082F               	movf	(trunc@x+1)^(0+256),w
  8560  145F  0021               	movlb	1	; select bank1
  8561  1460  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8562  1461  0022               	movlb	2	; select bank2
  8563  1462  0830               	movf	(trunc@x+2)^(0+256),w
  8564  1463  0021               	movlb	1	; select bank1
  8565  1464  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8566  1465  3197  2761  3194   	fcall	___fttol
  8567  1468  0021               	movlb	1	; select bank1
  8568  1469  086A               	movf	(?___fttol+3)^(0+128),w
  8569  146A  0022               	movlb	2	; select bank2
  8570  146B  00A9               	movwf	(___altoft@c+3)^(0+256)
  8571  146C  0021               	movlb	1	; select bank1
  8572  146D  0869               	movf	(?___fttol+2)^(0+128),w
  8573  146E  0022               	movlb	2	; select bank2
  8574  146F  00A8               	movwf	(___altoft@c+2)^(0+256)
  8575  1470  0021               	movlb	1	; select bank1
  8576  1471  0868               	movf	(?___fttol+1)^(0+128),w
  8577  1472  0022               	movlb	2	; select bank2
  8578  1473  00A7               	movwf	(___altoft@c+1)^(0+256)
  8579  1474  0021               	movlb	1	; select bank1
  8580  1475  0867               	movf	?___fttol^(0+128),w
  8581  1476  0022               	movlb	2	; select bank2
  8582  1477  00A6               	movwf	___altoft@c^(0+256)
  8583  1478  3193  234A         	fcall	___altoft
  8584  147A  0022               	movlb	2	; select bank2
  8585  147B  0826               	movf	?___altoft^(0+256),w
  8586  147C  00B1               	movwf	trunc@i^(0+256)
  8587  147D  0827               	movf	(?___altoft+1)^(0+256),w
  8588  147E  00B2               	movwf	(trunc@i+1)^(0+256)
  8589  147F  0828               	movf	(?___altoft+2)^(0+256),w
  8590  1480  00B3               	movwf	(trunc@i+2)^(0+256)
  8591  1481  0831               	movf	trunc@i^(0+256),w
  8592  1482  00AE               	movwf	?_trunc^(0+256)
  8593  1483  0832               	movf	(trunc@i+1)^(0+256),w
  8594  1484  00AF               	movwf	(?_trunc+1)^(0+256)
  8595  1485  0833               	movf	(trunc@i+2)^(0+256),w
  8596  1486  00B0               	movwf	(?_trunc+2)^(0+256)
  8597  1487  0008               	return
  8598  1488                     __end_of_trunc:	
  8599                           
  8600                           	psect	text15
  8601  1042                     __ptext15:	
  8602 ;; *************** function _frexp *****************
  8603 ;; Defined at:
  8604 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  8605 ;; Parameters:    Size  Location     Type
  8606 ;;  value           3    0[BANK1 ] int 
  8607 ;;  eptr            1    3[BANK1 ] PTR int 
  8608 ;;		 -> trunc@expon(2), 
  8609 ;; Auto vars:     Size  Location     Type
  8610 ;;		None
  8611 ;; Return value:  Size  Location     Type
  8612 ;;                  3    0[BANK1 ] PTR int 
  8613 ;; Registers used:
  8614 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8615 ;; Tracked objects:
  8616 ;;		On entry : 0/0
  8617 ;;		On exit  : 0/0
  8618 ;;		Unchanged: 0/0
  8619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8620 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8622 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8623 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8624 ;;Total ram usage:        6 bytes
  8625 ;; Hardware stack levels used:    1
  8626 ;; Hardware stack levels required when called:    3
  8627 ;; This function calls:
  8628 ;;		Nothing
  8629 ;; This function is called by:
  8630 ;;		_trunc
  8631 ;; This function uses a non-reentrant model
  8632 ;;
  8633                           
  8634                           
  8635                           ;psect for function _frexp
  8636  1042                     _frexp:	
  8637                           
  8638                           ;incstack = 0
  8639                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8640  1042  0021               	movlb	1	; select bank1
  8641  1043  0822               	movf	(frexp@value+2)^(0+128),w
  8642  1044  0421               	iorwf	(frexp@value+1)^(0+128),w
  8643  1045  0420               	iorwf	frexp@value^(0+128),w
  8644  1046  1D03               	skipz
  8645  1047  2850               	goto	l5128
  8646  1048  0823               	movf	frexp@eptr^(0+128),w
  8647  1049  0086               	movwf	6
  8648  104A  3001               	movlw	1	; select bank2/3
  8649  104B  0087               	movwf	7
  8650  104C  3000               	movlw	0
  8651  104D  3FC0               	movwi [0]fsr1
  8652  104E  3FC1               	movwi [1]fsr1
  8653                           
  8654                           ;	Return value of _frexp is never used
  8655  104F  0008               	return
  8656  1050                     l5128:	
  8657  1050  0822               	movf	(frexp@value^(0+128)+2),w
  8658  1051  397F               	andlw	127
  8659  1052  00A4               	movwf	??_frexp^(0+128)
  8660  1053  01A5               	clrf	(??_frexp^(0+128)+1)
  8661  1054  35A4               	lslf	??_frexp^(0+128),f
  8662  1055  0DA5               	rlf	(??_frexp^(0+128)+1),f
  8663  1056  0823               	movf	frexp@eptr^(0+128),w
  8664  1057  0086               	movwf	6
  8665  1058  3001               	movlw	1	; select bank2/3
  8666  1059  0087               	movwf	7
  8667  105A  0824               	movf	??_frexp^(0+128),w
  8668  105B  3FC0               	movwi [0]fsr1
  8669  105C  0825               	movf	(??_frexp+1)^(0+128),w
  8670  105D  3FC1               	movwi [1]fsr1
  8671  105E  0D21               	rlf	(frexp@value^(0+128)+1),w
  8672  105F  0D21               	rlf	(frexp@value^(0+128)+1),w
  8673  1060  3901               	andlw	1
  8674  1061  00A4               	movwf	??_frexp^(0+128)
  8675  1062  01A5               	clrf	(??_frexp^(0+128)+1)
  8676  1063  0823               	movf	frexp@eptr^(0+128),w
  8677  1064  0086               	movwf	6
  8678  1065  3001               	movlw	1	; select bank2/3
  8679  1066  0087               	movwf	7
  8680  1067  0824               	movf	??_frexp^(0+128),w
  8681  1068  0481               	iorwf	1,f
  8682  1069  3141               	addfsr 1,1
  8683  106A  0825               	movf	(??_frexp+1)^(0+128),w
  8684  106B  0481               	iorwf	1,f
  8685  106C  0823               	movf	frexp@eptr^(0+128),w
  8686  106D  0086               	movwf	6
  8687  106E  3001               	movlw	1	; select bank2/3
  8688  106F  0087               	movwf	7
  8689  1070  3082               	movlw	130
  8690  1071  0781               	addwf	1,f
  8691  1072  3141               	addfsr 1,1
  8692  1073  30FF               	movlw	255
  8693  1074  3D81               	addwfc	1,f
  8694  1075  317F               	addfsr 1,-1
  8695  1076  0822               	movf	(frexp@value^(0+128)+2),w
  8696  1077  3980               	andlw	-128
  8697  1078  383F               	iorlw	63
  8698  1079  00A2               	movwf	(frexp@value^(0+128)+2)
  8699  107A  13A1               	bcf	(frexp@value^(0+128)+1),7
  8700  107B  0008               	return
  8701  107C                     __end_of_frexp:	
  8702                           ;	Return value of _frexp is never used
  8703                           
  8704                           
  8705                           	psect	text16
  8706  1761                     __ptext16:	
  8707 ;; *************** function ___fttol *****************
  8708 ;; Defined at:
  8709 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8710 ;; Parameters:    Size  Location     Type
  8711 ;;  f1              3   71[BANK1 ] float 
  8712 ;; Auto vars:     Size  Location     Type
  8713 ;;  lval            4    1[BANK2 ] unsigned long 
  8714 ;;  exp1            1    5[BANK2 ] unsigned char 
  8715 ;;  sign1           1    0[BANK2 ] unsigned char 
  8716 ;; Return value:  Size  Location     Type
  8717 ;;                  4   71[BANK1 ] long 
  8718 ;; Registers used:
  8719 ;;		wreg, status,2, status,0
  8720 ;; Tracked objects:
  8721 ;;		On entry : 0/0
  8722 ;;		On exit  : 0/0
  8723 ;;		Unchanged: 0/0
  8724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8725 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8726 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8727 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8728 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8729 ;;Total ram usage:       14 bytes
  8730 ;; Hardware stack levels used:    1
  8731 ;; Hardware stack levels required when called:    3
  8732 ;; This function calls:
  8733 ;;		Nothing
  8734 ;; This function is called by:
  8735 ;;		_main
  8736 ;;		_set_subdivision
  8737 ;;		_trunc
  8738 ;; This function uses a non-reentrant model
  8739 ;;
  8740                           
  8741                           
  8742                           ;psect for function ___fttol
  8743  1761                     ___fttol:	
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8747  1761  0021               	movlb	1	; select bank1
  8748  1762  0867               	movf	___fttol@f1^(0+128),w
  8749  1763  00EB               	movwf	??___fttol^(0+128)
  8750  1764  0868               	movf	(___fttol@f1+1)^(0+128),w
  8751  1765  00EC               	movwf	(??___fttol^(0+128)+1)
  8752  1766  0869               	movf	(___fttol@f1+2)^(0+128),w
  8753  1767  00ED               	movwf	(??___fttol^(0+128)+2)
  8754  1768  1003               	clrc
  8755  1769  0D6C               	rlf	(??___fttol^(0+128)+1),w
  8756  176A  0D6D               	rlf	(??___fttol^(0+128)+2),w
  8757  176B  00EE               	movwf	(??___fttol+3)^(0+128)
  8758  176C  086E               	movf	(??___fttol+3)^(0+128),w
  8759  176D  0022               	movlb	2	; select bank2
  8760  176E  00A5               	movwf	___fttol@exp1^(0+256)
  8761  176F  0825               	movf	___fttol@exp1^(0+256),w
  8762  1770  1D03               	btfss	3,2
  8763  1771  2F7C               	goto	l5086
  8764  1772  3000               	movlw	0
  8765  1773  0021               	movlb	1	; select bank1
  8766  1774  00EA               	movwf	(?___fttol+3)^(0+128)
  8767  1775  3000               	movlw	0
  8768  1776  00E9               	movwf	(?___fttol+2)^(0+128)
  8769  1777  3000               	movlw	0
  8770  1778  00E8               	movwf	(?___fttol+1)^(0+128)
  8771  1779  3000               	movlw	0
  8772  177A  00E7               	movwf	?___fttol^(0+128)
  8773  177B  0008               	return
  8774  177C                     l5086:	
  8775  177C  0021               	movlb	1	; select bank1
  8776  177D  0867               	movf	___fttol@f1^(0+128),w
  8777  177E  00EB               	movwf	??___fttol^(0+128)
  8778  177F  0868               	movf	(___fttol@f1+1)^(0+128),w
  8779  1780  00EC               	movwf	(??___fttol^(0+128)+1)
  8780  1781  0869               	movf	(___fttol@f1+2)^(0+128),w
  8781  1782  00ED               	movwf	(??___fttol^(0+128)+2)
  8782  1783  3017               	movlw	23
  8783  1784                     u5245:	
  8784  1784  36ED               	lsrf	(??___fttol^(0+128)+2),f
  8785  1785  0CEC               	rrf	(??___fttol^(0+128)+1),f
  8786  1786  0CEB               	rrf	??___fttol^(0+128),f
  8787  1787  0B89               	decfsz	9,f
  8788  1788  2F84               	goto	u5245
  8789  1789  086B               	movf	??___fttol^(0+128),w
  8790  178A  00EE               	movwf	(??___fttol+3)^(0+128)
  8791  178B  086E               	movf	(??___fttol+3)^(0+128),w
  8792  178C  0022               	movlb	2	; select bank2
  8793  178D  00A0               	movwf	___fttol@sign1^(0+256)
  8794  178E  0021               	movlb	1	; select bank1
  8795  178F  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  8796  1790  30FF               	movlw	255
  8797  1791  05E7               	andwf	___fttol@f1^(0+128),f
  8798  1792  30FF               	movlw	255
  8799  1793  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  8800  1794  3000               	movlw	0
  8801  1795  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  8802  1796  0867               	movf	___fttol@f1^(0+128),w
  8803  1797  0022               	movlb	2	; select bank2
  8804  1798  00A1               	movwf	___fttol@lval^(0+256)
  8805  1799  0021               	movlb	1	; select bank1
  8806  179A  0868               	movf	(___fttol@f1+1)^(0+128),w
  8807  179B  0022               	movlb	2	; select bank2
  8808  179C  00A2               	movwf	(___fttol@lval^(0+256)+1)
  8809  179D  0021               	movlb	1	; select bank1
  8810  179E  0869               	movf	(___fttol@f1+2)^(0+128),w
  8811  179F  0022               	movlb	2	; select bank2
  8812  17A0  00A3               	movwf	(___fttol@lval^(0+256)+2)
  8813  17A1  01A4               	clrf	(___fttol@lval^(0+256)+3)
  8814  17A2  308E               	movlw	142
  8815  17A3  02A5               	subwf	___fttol@exp1^(0+256),f
  8816  17A4  1FA5               	btfss	___fttol@exp1^(0+256),7
  8817  17A5  2FC6               	goto	l5106
  8818  17A6  0825               	movf	___fttol@exp1^(0+256),w
  8819  17A7  3A80               	xorlw	128
  8820  17A8  3E8F               	addlw	143
  8821  17A9  1803               	skipnc
  8822  17AA  2FB5               	goto	l5104
  8823  17AB  3000               	movlw	0
  8824  17AC  0021               	movlb	1	; select bank1
  8825  17AD  00EA               	movwf	(?___fttol+3)^(0+128)
  8826  17AE  3000               	movlw	0
  8827  17AF  00E9               	movwf	(?___fttol+2)^(0+128)
  8828  17B0  3000               	movlw	0
  8829  17B1  00E8               	movwf	(?___fttol+1)^(0+128)
  8830  17B2  3000               	movlw	0
  8831  17B3  00E7               	movwf	?___fttol^(0+128)
  8832  17B4  0008               	return
  8833  17B5                     l5104:	
  8834  17B5  3001               	movlw	1
  8835  17B6                     u5275:	
  8836  17B6  0022               	movlb	2	; select bank2
  8837  17B7  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  8838  17B8  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  8839  17B9  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  8840  17BA  0CA1               	rrf	___fttol@lval^(0+256),f
  8841  17BB  0B89               	decfsz	9,f
  8842  17BC  2FB6               	goto	u5275
  8843  17BD  3001               	movlw	1
  8844  17BE  0021               	movlb	1	; select bank1
  8845  17BF  00EB               	movwf	??___fttol^(0+128)
  8846  17C0  086B               	movf	??___fttol^(0+128),w
  8847  17C1  0022               	movlb	2	; select bank2
  8848  17C2  07A5               	addwf	___fttol@exp1^(0+256),f
  8849  17C3  1903               	btfsc	3,2
  8850  17C4  2FE2               	goto	l5114
  8851  17C5  2FB5               	goto	l5104
  8852  17C6                     l5106:	
  8853  17C6  3018               	movlw	24
  8854  17C7  0225               	subwf	___fttol@exp1^(0+256),w
  8855  17C8  1C03               	skipc
  8856  17C9  2FDE               	goto	l1565
  8857  17CA  3000               	movlw	0
  8858  17CB  0021               	movlb	1	; select bank1
  8859  17CC  00EA               	movwf	(?___fttol+3)^(0+128)
  8860  17CD  3000               	movlw	0
  8861  17CE  00E9               	movwf	(?___fttol+2)^(0+128)
  8862  17CF  3000               	movlw	0
  8863  17D0  00E8               	movwf	(?___fttol+1)^(0+128)
  8864  17D1  3000               	movlw	0
  8865  17D2  00E7               	movwf	?___fttol^(0+128)
  8866  17D3  0008               	return
  8867  17D4                     l5112:	
  8868  17D4  3001               	movlw	1
  8869  17D5                     u5305:	
  8870  17D5  0022               	movlb	2	; select bank2
  8871  17D6  35A1               	lslf	___fttol@lval^(0+256),f
  8872  17D7  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  8873  17D8  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  8874  17D9  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  8875  17DA  0B89               	decfsz	9,f
  8876  17DB  2FD5               	goto	u5305
  8877  17DC  3001               	movlw	1
  8878  17DD  02A5               	subwf	___fttol@exp1^(0+256),f
  8879  17DE                     l1565:	
  8880  17DE  0022               	movlb	2	; select bank2
  8881  17DF  0825               	movf	___fttol@exp1^(0+256),w
  8882  17E0  1D03               	btfss	3,2
  8883  17E1  2FD4               	goto	l5112
  8884  17E2                     l5114:	
  8885  17E2  0820               	movf	___fttol@sign1^(0+256),w
  8886  17E3  1903               	btfsc	3,2
  8887  17E4  2FF0               	goto	l5118
  8888  17E5  09A1               	comf	___fttol@lval^(0+256),f
  8889  17E6  09A2               	comf	(___fttol@lval+1)^(0+256),f
  8890  17E7  09A3               	comf	(___fttol@lval+2)^(0+256),f
  8891  17E8  09A4               	comf	(___fttol@lval+3)^(0+256),f
  8892  17E9  0AA1               	incf	___fttol@lval^(0+256),f
  8893  17EA  1903               	skipnz
  8894  17EB  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  8895  17EC  1903               	skipnz
  8896  17ED  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  8897  17EE  1903               	skipnz
  8898  17EF  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  8899  17F0                     l5118:	
  8900  17F0  0824               	movf	(___fttol@lval+3)^(0+256),w
  8901  17F1  0021               	movlb	1	; select bank1
  8902  17F2  00EA               	movwf	(?___fttol+3)^(0+128)
  8903  17F3  0022               	movlb	2	; select bank2
  8904  17F4  0823               	movf	(___fttol@lval+2)^(0+256),w
  8905  17F5  0021               	movlb	1	; select bank1
  8906  17F6  00E9               	movwf	(?___fttol+2)^(0+128)
  8907  17F7  0022               	movlb	2	; select bank2
  8908  17F8  0822               	movf	(___fttol@lval+1)^(0+256),w
  8909  17F9  0021               	movlb	1	; select bank1
  8910  17FA  00E8               	movwf	(?___fttol+1)^(0+128)
  8911  17FB  0022               	movlb	2	; select bank2
  8912  17FC  0821               	movf	___fttol@lval^(0+256),w
  8913  17FD  0021               	movlb	1	; select bank1
  8914  17FE  00E7               	movwf	?___fttol^(0+128)
  8915  17FF  0008               	return
  8916  1800                     __end_of___fttol:	
  8917                           
  8918                           	psect	text17
  8919  134A                     __ptext17:	
  8920 ;; *************** function ___altoft *****************
  8921 ;; Defined at:
  8922 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  8923 ;; Parameters:    Size  Location     Type
  8924 ;;  c               4    6[BANK2 ] long 
  8925 ;; Auto vars:     Size  Location     Type
  8926 ;;  sign            1   13[BANK2 ] unsigned char 
  8927 ;;  exp             1   12[BANK2 ] unsigned char 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  3    6[BANK2 ] float 
  8930 ;; Registers used:
  8931 ;;		wreg, status,2, status,0, pclath, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8937 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8938 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8939 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8940 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8941 ;;Total ram usage:        8 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    4
  8944 ;; This function calls:
  8945 ;;		___ftpack
  8946 ;; This function is called by:
  8947 ;;		_trunc
  8948 ;; This function uses a non-reentrant model
  8949 ;;
  8950                           
  8951                           
  8952                           ;psect for function ___altoft
  8953  134A                     ___altoft:	
  8954                           
  8955                           ;incstack = 0
  8956                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  8957  134A  0022               	movlb	2	; select bank2
  8958  134B  01AD               	clrf	___altoft@sign^(0+256)
  8959  134C  308E               	movlw	142
  8960  134D  00AA               	movwf	??___altoft^(0+256)
  8961  134E  082A               	movf	??___altoft^(0+256),w
  8962  134F  00AC               	movwf	___altoft@exp^(0+256)
  8963  1350  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  8964  1351  2B5F               	goto	l5074
  8965  1352  09A6               	comf	___altoft@c^(0+256),f
  8966  1353  09A7               	comf	(___altoft@c+1)^(0+256),f
  8967  1354  09A8               	comf	(___altoft@c+2)^(0+256),f
  8968  1355  09A9               	comf	(___altoft@c+3)^(0+256),f
  8969  1356  0AA6               	incf	___altoft@c^(0+256),f
  8970  1357  1903               	skipnz
  8971  1358  0AA7               	incf	(___altoft@c+1)^(0+256),f
  8972  1359  1903               	skipnz
  8973  135A  0AA8               	incf	(___altoft@c+2)^(0+256),f
  8974  135B  1903               	skipnz
  8975  135C  0AA9               	incf	(___altoft@c+3)^(0+256),f
  8976  135D  01AD               	clrf	___altoft@sign^(0+256)
  8977  135E  0AAD               	incf	___altoft@sign^(0+256),f
  8978  135F                     l5074:	
  8979  135F  30FF               	movlw	255
  8980  1360  0529               	andwf	(___altoft@c+3)^(0+256),w
  8981  1361  1903               	btfsc	3,2
  8982  1362  2B6F               	goto	l5076
  8983  1363  3001               	movlw	1
  8984  1364                     u5215:	
  8985  1364  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  8986  1365  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  8987  1366  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  8988  1367  0CA6               	rrf	___altoft@c^(0+256),f
  8989  1368  0B89               	decfsz	9,f
  8990  1369  2B64               	goto	u5215
  8991  136A  3001               	movlw	1
  8992  136B  00AA               	movwf	??___altoft^(0+256)
  8993  136C  082A               	movf	??___altoft^(0+256),w
  8994  136D  07AC               	addwf	___altoft@exp^(0+256),f
  8995  136E  2B5F               	goto	l5074
  8996  136F                     l5076:	
  8997  136F  0826               	movf	___altoft@c^(0+256),w
  8998  1370  0021               	movlb	1	; select bank1
  8999  1371  00A0               	movwf	___ftpack@arg^(0+128)
  9000  1372  0022               	movlb	2	; select bank2
  9001  1373  0827               	movf	(___altoft@c+1)^(0+256),w
  9002  1374  0021               	movlb	1	; select bank1
  9003  1375  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9004  1376  0022               	movlb	2	; select bank2
  9005  1377  0828               	movf	(___altoft@c+2)^(0+256),w
  9006  1378  0021               	movlb	1	; select bank1
  9007  1379  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9008  137A  0022               	movlb	2	; select bank2
  9009  137B  082C               	movf	___altoft@exp^(0+256),w
  9010  137C  00AA               	movwf	??___altoft^(0+256)
  9011  137D  082A               	movf	??___altoft^(0+256),w
  9012  137E  0021               	movlb	1	; select bank1
  9013  137F  00A3               	movwf	___ftpack@exp^(0+128)
  9014  1380  0022               	movlb	2	; select bank2
  9015  1381  082D               	movf	___altoft@sign^(0+256),w
  9016  1382  00AB               	movwf	(??___altoft+1)^(0+256)
  9017  1383  082B               	movf	(??___altoft+1)^(0+256),w
  9018  1384  0021               	movlb	1	; select bank1
  9019  1385  00A4               	movwf	___ftpack@sign^(0+128)
  9020  1386  3194  2488         	fcall	___ftpack
  9021  1388  0021               	movlb	1	; select bank1
  9022  1389  0820               	movf	?___ftpack^(0+128),w
  9023  138A  0022               	movlb	2	; select bank2
  9024  138B  00A6               	movwf	?___altoft^(0+256)
  9025  138C  0021               	movlb	1	; select bank1
  9026  138D  0821               	movf	(?___ftpack+1)^(0+128),w
  9027  138E  0022               	movlb	2	; select bank2
  9028  138F  00A7               	movwf	(?___altoft+1)^(0+256)
  9029  1390  0021               	movlb	1	; select bank1
  9030  1391  0822               	movf	(?___ftpack+2)^(0+128),w
  9031  1392  0022               	movlb	2	; select bank2
  9032  1393  00A8               	movwf	(?___altoft+2)^(0+256)
  9033  1394  0008               	return
  9034  1395                     __end_of___altoft:	
  9035                           
  9036                           	psect	text18
  9037  1EA4                     __ptext18:	
  9038 ;; *************** function ___awtoft *****************
  9039 ;; Defined at:
  9040 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9041 ;; Parameters:    Size  Location     Type
  9042 ;;  c               2    8[BANK1 ] int 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;  sign            1   13[BANK1 ] unsigned char 
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  3    8[BANK1 ] float 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9054 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9055 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9056 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9057 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9058 ;;Total ram usage:        6 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    4
  9061 ;; This function calls:
  9062 ;;		___ftpack
  9063 ;; This function is called by:
  9064 ;;		_main
  9065 ;;		_set_subdivision
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function ___awtoft
  9071  1EA4                     ___awtoft:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9075  1EA4  0021               	movlb	1	; select bank1
  9076  1EA5  01AD               	clrf	___awtoft@sign^(0+128)
  9077  1EA6  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  9078  1EA7  2EAF               	goto	l5362
  9079  1EA8  09A8               	comf	___awtoft@c^(0+128),f
  9080  1EA9  09A9               	comf	(___awtoft@c+1)^(0+128),f
  9081  1EAA  0AA8               	incf	___awtoft@c^(0+128),f
  9082  1EAB  1903               	skipnz
  9083  1EAC  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  9084  1EAD  01AD               	clrf	___awtoft@sign^(0+128)
  9085  1EAE  0AAD               	incf	___awtoft@sign^(0+128),f
  9086  1EAF                     l5362:	
  9087  1EAF  0828               	movf	___awtoft@c^(0+128),w
  9088  1EB0  00A0               	movwf	___ftpack@arg^(0+128)
  9089  1EB1  0829               	movf	(___awtoft@c+1)^(0+128),w
  9090  1EB2  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9091  1EB3  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  9092  1EB4  308E               	movlw	142
  9093  1EB5  00AB               	movwf	??___awtoft^(0+128)
  9094  1EB6  082B               	movf	??___awtoft^(0+128),w
  9095  1EB7  00A3               	movwf	___ftpack@exp^(0+128)
  9096  1EB8  082D               	movf	___awtoft@sign^(0+128),w
  9097  1EB9  00AC               	movwf	(??___awtoft+1)^(0+128)
  9098  1EBA  082C               	movf	(??___awtoft+1)^(0+128),w
  9099  1EBB  00A4               	movwf	___ftpack@sign^(0+128)
  9100  1EBC  3194  2488         	fcall	___ftpack
  9101  1EBE  0021               	movlb	1	; select bank1
  9102  1EBF  0820               	movf	?___ftpack^(0+128),w
  9103  1EC0  00A8               	movwf	?___awtoft^(0+128)
  9104  1EC1  0821               	movf	(?___ftpack+1)^(0+128),w
  9105  1EC2  00A9               	movwf	(?___awtoft+1)^(0+128)
  9106  1EC3  0822               	movf	(?___ftpack+2)^(0+128),w
  9107  1EC4  00AA               	movwf	(?___awtoft+2)^(0+128)
  9108  1EC5  0008               	return
  9109  1EC6                     __end_of___awtoft:	
  9110                           
  9111                           	psect	text19
  9112  1395                     __ptext19:	
  9113 ;; *************** function _read_top_tactile *****************
  9114 ;; Defined at:
  9115 ;;		line 47 in file "tactiles.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;		None
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;		None
  9120 ;; Return value:  Size  Location     Type
  9121 ;;                  1    wreg      void 
  9122 ;; Registers used:
  9123 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9124 ;; Tracked objects:
  9125 ;;		On entry : 0/0
  9126 ;;		On exit  : 0/0
  9127 ;;		Unchanged: 0/0
  9128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9131 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9132 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9133 ;;Total ram usage:        1 bytes
  9134 ;; Hardware stack levels used:    1
  9135 ;; Hardware stack levels required when called:    5
  9136 ;; This function calls:
  9137 ;;		_set_leds_top
  9138 ;;		_wait_ms
  9139 ;; This function is called by:
  9140 ;;		_main
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           
  9145                           ;psect for function _read_top_tactile
  9146  1395                     _read_top_tactile:	
  9147                           
  9148                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9149                           
  9150                           ;incstack = 0
  9151                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9152  1395  0020               	movlb	0	; select bank0
  9153  1396  1A8F               	btfsc	15,5	;volatile
  9154  1397  2B9F               	goto	l5618
  9155                           
  9156                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9157  1398  0022               	movlb	2	; select bank2
  9158  1399  0859               	movf	_topTactile_pressed^(0+256),w
  9159  139A  1903               	btfsc	3,2
  9160  139B  2BAA               	goto	l849
  9161                           
  9162                           ;tactiles.c: 58: topTactile_pressed--;
  9163  139C  3001               	movlw	1
  9164  139D  02D9               	subwf	_topTactile_pressed^(0+256),f
  9165                           
  9166                           ;tactiles.c: 59: }
  9167                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9168  139E  2BAA               	goto	l849
  9169  139F                     l5618:	
  9170  139F  3019               	movlw	25
  9171  13A0  0022               	movlb	2	; select bank2
  9172  13A1  0259               	subwf	_topTactile_pressed^(0+256),w
  9173  13A2  1803               	skipnc
  9174  13A3  2BAA               	goto	l849
  9175                           
  9176                           ;tactiles.c: 61: topTactile_pressed++;
  9177  13A4  3001               	movlw	1
  9178  13A5  0021               	movlb	1	; select bank1
  9179  13A6  00B2               	movwf	??_read_top_tactile^(0+128)
  9180  13A7  0832               	movf	??_read_top_tactile^(0+128),w
  9181  13A8  0022               	movlb	2	; select bank2
  9182  13A9  07D9               	addwf	_topTactile_pressed^(0+256),f
  9183  13AA                     l849:	
  9184                           
  9185                           ;tactiles.c: 62: }
  9186                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9187  13AA  0859               	movf	_topTactile_pressed^(0+256),w
  9188  13AB  1D03               	btfss	3,2
  9189  13AC  0008               	return
  9190                           
  9191                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9192  13AD  0020               	movlb	0	; select bank0
  9193  13AE  0864               	movf	_top_push_state,w
  9194  13AF  3E01               	addlw	1
  9195  13B0  00E4               	movwf	_top_push_state
  9196  13B1  3000               	movlw	0
  9197  13B2  3D65               	addwfc	_top_push_state+1,w
  9198  13B3  00E5               	movwf	_top_push_state+1
  9199                           
  9200                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9201  13B4  0865               	movf	_top_push_state+1,w
  9202  13B5  3A80               	xorlw	128
  9203  13B6  0021               	movlb	1	; select bank1
  9204  13B7  00B2               	movwf	??_read_top_tactile^(0+128)
  9205  13B8  3080               	movlw	128
  9206  13B9  0232               	subwf	??_read_top_tactile^(0+128),w
  9207  13BA  1D03               	skipz
  9208  13BB  2BBF               	goto	u6205
  9209  13BC  3007               	movlw	7
  9210  13BD  0020               	movlb	0	; select bank0
  9211  13BE  0264               	subwf	_top_push_state,w
  9212  13BF                     u6205:	
  9213  13BF  1C03               	skipc
  9214  13C0  2BC6               	goto	l5628
  9215                           
  9216                           ;tactiles.c: 70: top_push_state = 1;
  9217  13C1  3001               	movlw	1
  9218  13C2  0020               	movlb	0	; select bank0
  9219  13C3  00E4               	movwf	_top_push_state
  9220  13C4  3000               	movlw	0
  9221  13C5  00E5               	movwf	_top_push_state+1
  9222  13C6                     l5628:	
  9223                           
  9224                           ;tactiles.c: 71: }
  9225                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9226  13C6  0020               	movlb	0	; select bank0
  9227  13C7  0865               	movf	_top_push_state+1,w
  9228  13C8  0021               	movlb	1	; select bank1
  9229  13C9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9230  13CA  0020               	movlb	0	; select bank0
  9231  13CB  0864               	movf	_top_push_state,w
  9232  13CC  0021               	movlb	1	; select bank1
  9233  13CD  00A0               	movwf	set_leds_top@x^(0+128)
  9234  13CE  3001               	movlw	1
  9235  13CF  00A2               	movwf	set_leds_top@ledState^(0+128)
  9236  13D0  3000               	movlw	0
  9237  13D1  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9238  13D2  3187  27AA  3193   	fcall	_set_leds_top
  9239                           
  9240                           ;tactiles.c: 73: delay_time_changed = 1;
  9241  13D5  3001               	movlw	1
  9242  13D6  0023               	movlb	3	; select bank3
  9243  13D7  00E3               	movwf	_delay_time_changed^(0+384)
  9244  13D8  3000               	movlw	0
  9245  13D9  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  9246  13DA                     l853:	
  9247                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9248                           
  9249  13DA  0020               	movlb	0	; select bank0
  9250  13DB  1E8F               	btfss	15,5	;volatile
  9251  13DC  2BDA               	goto	l853
  9252                           
  9253                           ;tactiles.c: 77: }
  9254                           ;tactiles.c: 78: wait_ms(20);
  9255  13DD  3014               	movlw	20
  9256  13DE  0021               	movlb	1	; select bank1
  9257  13DF  00AC               	movwf	wait_ms@timeSec^(0+128)
  9258  13E0  3000               	movlw	0
  9259  13E1  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9260  13E2  319F  27CE         	fcall	_wait_ms
  9261  13E4  0008               	return
  9262  13E5                     __end_of_read_top_tactile:	
  9263                           
  9264                           	psect	text20
  9265  1271                     __ptext20:	
  9266 ;; *************** function _read_bottom_tactile *****************
  9267 ;; Defined at:
  9268 ;;		line 17 in file "tactiles.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;		None
  9271 ;; Auto vars:     Size  Location     Type
  9272 ;;		None
  9273 ;; Return value:  Size  Location     Type
  9274 ;;                  1    wreg      void 
  9275 ;; Registers used:
  9276 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9277 ;; Tracked objects:
  9278 ;;		On entry : 0/0
  9279 ;;		On exit  : 0/0
  9280 ;;		Unchanged: 0/0
  9281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9284 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9285 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9286 ;;Total ram usage:        1 bytes
  9287 ;; Hardware stack levels used:    1
  9288 ;; Hardware stack levels required when called:    5
  9289 ;; This function calls:
  9290 ;;		_set_leds_bottom
  9291 ;;		_wait_ms
  9292 ;; This function is called by:
  9293 ;;		_main
  9294 ;; This function uses a non-reentrant model
  9295 ;;
  9296                           
  9297                           
  9298                           ;psect for function _read_bottom_tactile
  9299  1271                     _read_bottom_tactile:	
  9300                           
  9301                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9302                           
  9303                           ;incstack = 0
  9304                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9305  1271  0020               	movlb	0	; select bank0
  9306  1272  1B0F               	btfsc	15,6	;volatile
  9307  1273  2A7B               	goto	l5598
  9308                           
  9309                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9310  1274  0022               	movlb	2	; select bank2
  9311  1275  0852               	movf	_bottomTactile_pressed^(0+256),w
  9312  1276  1903               	btfsc	3,2
  9313  1277  2A86               	goto	l837
  9314                           
  9315                           ;tactiles.c: 27: bottomTactile_pressed--;
  9316  1278  3001               	movlw	1
  9317  1279  02D2               	subwf	_bottomTactile_pressed^(0+256),f
  9318                           
  9319                           ;tactiles.c: 28: }
  9320                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9321  127A  2A86               	goto	l837
  9322  127B                     l5598:	
  9323  127B  3019               	movlw	25
  9324  127C  0022               	movlb	2	; select bank2
  9325  127D  0252               	subwf	_bottomTactile_pressed^(0+256),w
  9326  127E  1803               	skipnc
  9327  127F  2A86               	goto	l837
  9328                           
  9329                           ;tactiles.c: 30: bottomTactile_pressed++;
  9330  1280  3001               	movlw	1
  9331  1281  0021               	movlb	1	; select bank1
  9332  1282  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9333  1283  0832               	movf	??_read_bottom_tactile^(0+128),w
  9334  1284  0022               	movlb	2	; select bank2
  9335  1285  07D2               	addwf	_bottomTactile_pressed^(0+256),f
  9336  1286                     l837:	
  9337                           
  9338                           ;tactiles.c: 31: }
  9339                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9340  1286  0852               	movf	_bottomTactile_pressed^(0+256),w
  9341  1287  1D03               	btfss	3,2
  9342  1288  0008               	return
  9343                           
  9344                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9345  1289  0020               	movlb	0	; select bank0
  9346  128A  0860               	movf	_bottom_push_state,w
  9347  128B  3E01               	addlw	1
  9348  128C  00E0               	movwf	_bottom_push_state
  9349  128D  3000               	movlw	0
  9350  128E  3D61               	addwfc	_bottom_push_state+1,w
  9351  128F  00E1               	movwf	_bottom_push_state+1
  9352                           
  9353                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9354  1290  0861               	movf	_bottom_push_state+1,w
  9355  1291  3A80               	xorlw	128
  9356  1292  0021               	movlb	1	; select bank1
  9357  1293  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9358  1294  3080               	movlw	128
  9359  1295  0232               	subwf	??_read_bottom_tactile^(0+128),w
  9360  1296  1D03               	skipz
  9361  1297  2A9B               	goto	u6145
  9362  1298  3007               	movlw	7
  9363  1299  0020               	movlb	0	; select bank0
  9364  129A  0260               	subwf	_bottom_push_state,w
  9365  129B                     u6145:	
  9366  129B  1C03               	skipc
  9367  129C  2AA2               	goto	l5608
  9368                           
  9369                           ;tactiles.c: 37: bottom_push_state = 1;
  9370  129D  3001               	movlw	1
  9371  129E  0020               	movlb	0	; select bank0
  9372  129F  00E0               	movwf	_bottom_push_state
  9373  12A0  3000               	movlw	0
  9374  12A1  00E1               	movwf	_bottom_push_state+1
  9375  12A2                     l5608:	
  9376                           
  9377                           ;tactiles.c: 38: }
  9378                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9379  12A2  0020               	movlb	0	; select bank0
  9380  12A3  0861               	movf	_bottom_push_state+1,w
  9381  12A4  0021               	movlb	1	; select bank1
  9382  12A5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9383  12A6  0020               	movlb	0	; select bank0
  9384  12A7  0860               	movf	_bottom_push_state,w
  9385  12A8  0021               	movlb	1	; select bank1
  9386  12A9  00A0               	movwf	set_leds_bottom@x^(0+128)
  9387  12AA  3190  207C  3192   	fcall	_set_leds_bottom
  9388  12AD                     l841:	
  9389                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9390                           
  9391  12AD  0020               	movlb	0	; select bank0
  9392  12AE  1F0F               	btfss	15,6	;volatile
  9393  12AF  2AAD               	goto	l841
  9394                           
  9395                           ;tactiles.c: 42: }
  9396                           ;tactiles.c: 43: wait_ms(20);
  9397  12B0  3014               	movlw	20
  9398  12B1  0021               	movlb	1	; select bank1
  9399  12B2  00AC               	movwf	wait_ms@timeSec^(0+128)
  9400  12B3  3000               	movlw	0
  9401  12B4  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9402  12B5  319F  27CE         	fcall	_wait_ms
  9403  12B7  0008               	return
  9404  12B8                     __end_of_read_bottom_tactile:	
  9405                           
  9406                           	psect	text21
  9407  16D6                     __ptext21:	
  9408 ;; *************** function _map *****************
  9409 ;; Defined at:
  9410 ;;		line 177 in file "user.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;  x               3   53[BANK1 ] float 
  9413 ;;  in_min          3   56[BANK1 ] float 
  9414 ;;  in_max          3   59[BANK1 ] float 
  9415 ;;  out_min         3   62[BANK1 ] float 
  9416 ;;  out_max         3   65[BANK1 ] float 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;		None
  9419 ;; Return value:  Size  Location     Type
  9420 ;;                  3   53[BANK1 ] float 
  9421 ;; Registers used:
  9422 ;;		wreg, status,2, status,0, pclath, cstack
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9428 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9429 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9431 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9432 ;;Total ram usage:       18 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    5
  9435 ;; This function calls:
  9436 ;;		___ftadd
  9437 ;;		___ftdiv
  9438 ;;		___ftmul
  9439 ;;		___ftneg
  9440 ;; This function is called by:
  9441 ;;		_main
  9442 ;; This function uses a non-reentrant model
  9443 ;;
  9444                           
  9445                           
  9446                           ;psect for function _map
  9447  16D6                     _map:	
  9448                           
  9449                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9450                           
  9451                           ;incstack = 0
  9452                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9453  16D6  0021               	movlb	1	; select bank1
  9454  16D7  085B               	movf	map@in_max^(0+128),w
  9455  16D8  00A8               	movwf	___ftadd@f1^(0+128)
  9456  16D9  085C               	movf	(map@in_max+1)^(0+128),w
  9457  16DA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9458  16DB  085D               	movf	(map@in_max+2)^(0+128),w
  9459  16DC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9460  16DD  0858               	movf	map@in_min^(0+128),w
  9461  16DE  00A0               	movwf	___ftneg@f1^(0+128)
  9462  16DF  0859               	movf	(map@in_min+1)^(0+128),w
  9463  16E0  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9464  16E1  085A               	movf	(map@in_min+2)^(0+128),w
  9465  16E2  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9466  16E3  319D  25CA  3196   	fcall	___ftneg
  9467  16E6  0021               	movlb	1	; select bank1
  9468  16E7  0820               	movf	?___ftneg^(0+128),w
  9469  16E8  00AB               	movwf	___ftadd@f2^(0+128)
  9470  16E9  0821               	movf	(?___ftneg+1)^(0+128),w
  9471  16EA  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9472  16EB  0822               	movf	(?___ftneg+2)^(0+128),w
  9473  16EC  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9474  16ED  318B  231E  3196   	fcall	___ftadd
  9475  16F0  0021               	movlb	1	; select bank1
  9476  16F1  0828               	movf	?___ftadd^(0+128),w
  9477  16F2  00C5               	movwf	___ftdiv@f2^(0+128)
  9478  16F3  0829               	movf	(?___ftadd+1)^(0+128),w
  9479  16F4  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  9480  16F5  082A               	movf	(?___ftadd+2)^(0+128),w
  9481  16F6  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  9482  16F7  0861               	movf	map@out_max^(0+128),w
  9483  16F8  00A8               	movwf	___ftadd@f1^(0+128)
  9484  16F9  0862               	movf	(map@out_max+1)^(0+128),w
  9485  16FA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9486  16FB  0863               	movf	(map@out_max+2)^(0+128),w
  9487  16FC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9488  16FD  085E               	movf	map@out_min^(0+128),w
  9489  16FE  00A0               	movwf	___ftneg@f1^(0+128)
  9490  16FF  085F               	movf	(map@out_min+1)^(0+128),w
  9491  1700  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9492  1701  0860               	movf	(map@out_min+2)^(0+128),w
  9493  1702  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9494  1703  319D  25CA  3196   	fcall	___ftneg
  9495  1706  0021               	movlb	1	; select bank1
  9496  1707  0820               	movf	?___ftneg^(0+128),w
  9497  1708  00AB               	movwf	___ftadd@f2^(0+128)
  9498  1709  0821               	movf	(?___ftneg+1)^(0+128),w
  9499  170A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9500  170B  0822               	movf	(?___ftneg+2)^(0+128),w
  9501  170C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9502  170D  318B  231E  3196   	fcall	___ftadd
  9503  1710  0021               	movlb	1	; select bank1
  9504  1711  0828               	movf	?___ftadd^(0+128),w
  9505  1712  00B5               	movwf	___ftmul@f1^(0+128)
  9506  1713  0829               	movf	(?___ftadd+1)^(0+128),w
  9507  1714  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9508  1715  082A               	movf	(?___ftadd+2)^(0+128),w
  9509  1716  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9510  1717  0855               	movf	map@x^(0+128),w
  9511  1718  00A8               	movwf	___ftadd@f1^(0+128)
  9512  1719  0856               	movf	(map@x+1)^(0+128),w
  9513  171A  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9514  171B  0857               	movf	(map@x+2)^(0+128),w
  9515  171C  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9516  171D  0858               	movf	map@in_min^(0+128),w
  9517  171E  00A0               	movwf	___ftneg@f1^(0+128)
  9518  171F  0859               	movf	(map@in_min+1)^(0+128),w
  9519  1720  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9520  1721  085A               	movf	(map@in_min+2)^(0+128),w
  9521  1722  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9522  1723  319D  25CA  3196   	fcall	___ftneg
  9523  1726  0021               	movlb	1	; select bank1
  9524  1727  0820               	movf	?___ftneg^(0+128),w
  9525  1728  00AB               	movwf	___ftadd@f2^(0+128)
  9526  1729  0821               	movf	(?___ftneg+1)^(0+128),w
  9527  172A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9528  172B  0822               	movf	(?___ftneg+2)^(0+128),w
  9529  172C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9530  172D  318B  231E  3196   	fcall	___ftadd
  9531  1730  0021               	movlb	1	; select bank1
  9532  1731  0828               	movf	?___ftadd^(0+128),w
  9533  1732  00B8               	movwf	___ftmul@f2^(0+128)
  9534  1733  0829               	movf	(?___ftadd+1)^(0+128),w
  9535  1734  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9536  1735  082A               	movf	(?___ftadd+2)^(0+128),w
  9537  1736  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9538  1737  3188  20C5  3196   	fcall	___ftmul
  9539  173A  0021               	movlb	1	; select bank1
  9540  173B  0835               	movf	?___ftmul^(0+128),w
  9541  173C  00C8               	movwf	___ftdiv@f1^(0+128)
  9542  173D  0836               	movf	(?___ftmul+1)^(0+128),w
  9543  173E  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  9544  173F  0837               	movf	(?___ftmul+2)^(0+128),w
  9545  1740  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  9546  1741  3188  201C  3196   	fcall	___ftdiv
  9547  1744  0021               	movlb	1	; select bank1
  9548  1745  0845               	movf	?___ftdiv^(0+128),w
  9549  1746  00E4               	movwf	_map$2189^(0+128)
  9550  1747  0846               	movf	(?___ftdiv+1)^(0+128),w
  9551  1748  00E5               	movwf	(_map$2189+1)^(0+128)
  9552  1749  0847               	movf	(?___ftdiv+2)^(0+128),w
  9553  174A  00E6               	movwf	(_map$2189+2)^(0+128)
  9554                           
  9555                           ;user.c: 178: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9556  174B  085E               	movf	map@out_min^(0+128),w
  9557  174C  00A8               	movwf	___ftadd@f1^(0+128)
  9558  174D  085F               	movf	(map@out_min+1)^(0+128),w
  9559  174E  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9560  174F  0860               	movf	(map@out_min+2)^(0+128),w
  9561  1750  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9562  1751  0864               	movf	_map$2189^(0+128),w
  9563  1752  00AB               	movwf	___ftadd@f2^(0+128)
  9564  1753  0865               	movf	(_map$2189+1)^(0+128),w
  9565  1754  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9566  1755  0866               	movf	(_map$2189+2)^(0+128),w
  9567  1756  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9568  1757  318B  231E         	fcall	___ftadd
  9569  1759  0021               	movlb	1	; select bank1
  9570  175A  0828               	movf	?___ftadd^(0+128),w
  9571  175B  00D5               	movwf	?_map^(0+128)
  9572  175C  0829               	movf	(?___ftadd+1)^(0+128),w
  9573  175D  00D6               	movwf	(?_map+1)^(0+128)
  9574  175E  082A               	movf	(?___ftadd+2)^(0+128),w
  9575  175F  00D7               	movwf	(?_map+2)^(0+128)
  9576  1760  0008               	return
  9577  1761                     __end_of_map:	
  9578                           
  9579                           	psect	text22
  9580  1DCA                     __ptext22:	
  9581 ;; *************** function ___ftneg *****************
  9582 ;; Defined at:
  9583 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9584 ;; Parameters:    Size  Location     Type
  9585 ;;  f1              3    0[BANK1 ] float 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;		None
  9588 ;; Return value:  Size  Location     Type
  9589 ;;                  3    0[BANK1 ] float 
  9590 ;; Registers used:
  9591 ;;		wreg
  9592 ;; Tracked objects:
  9593 ;;		On entry : 0/0
  9594 ;;		On exit  : 0/0
  9595 ;;		Unchanged: 0/0
  9596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9597 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9600 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9601 ;;Total ram usage:        3 bytes
  9602 ;; Hardware stack levels used:    1
  9603 ;; Hardware stack levels required when called:    3
  9604 ;; This function calls:
  9605 ;;		Nothing
  9606 ;; This function is called by:
  9607 ;;		_map
  9608 ;;		_scalePotValue
  9609 ;; This function uses a non-reentrant model
  9610 ;;
  9611                           
  9612                           
  9613                           ;psect for function ___ftneg
  9614  1DCA                     ___ftneg:	
  9615                           
  9616                           ;incstack = 0
  9617                           ; Regs used in ___ftneg: [wreg]
  9618  1DCA  0021               	movlb	1	; select bank1
  9619  1DCB  0822               	movf	(___ftneg@f1+2)^(0+128),w
  9620  1DCC  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  9621  1DCD  0420               	iorwf	___ftneg@f1^(0+128),w
  9622  1DCE  1903               	skipnz
  9623  1DCF  0008               	return
  9624  1DD0  3080               	movlw	128
  9625  1DD1  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  9626  1DD2  0008               	return
  9627  1DD3                     __end_of___ftneg:	
  9628                           
  9629                           	psect	text23
  9630  08C5                     __ptext23:	
  9631 ;; *************** function ___ftmul *****************
  9632 ;; Defined at:
  9633 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9634 ;; Parameters:    Size  Location     Type
  9635 ;;  f1              3   21[BANK1 ] float 
  9636 ;;  f2              3   24[BANK1 ] float 
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
  9639 ;;  sign            1   36[BANK1 ] unsigned char 
  9640 ;;  cntr            1   35[BANK1 ] unsigned char 
  9641 ;;  exp             1   31[BANK1 ] unsigned char 
  9642 ;; Return value:  Size  Location     Type
  9643 ;;                  3   21[BANK1 ] float 
  9644 ;; Registers used:
  9645 ;;		wreg, status,2, status,0, pclath, cstack
  9646 ;; Tracked objects:
  9647 ;;		On entry : 0/0
  9648 ;;		On exit  : 0/0
  9649 ;;		Unchanged: 0/0
  9650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9651 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9652 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9653 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9654 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9655 ;;Total ram usage:       16 bytes
  9656 ;; Hardware stack levels used:    1
  9657 ;; Hardware stack levels required when called:    4
  9658 ;; This function calls:
  9659 ;;		___ftpack
  9660 ;; This function is called by:
  9661 ;;		_set_subdivision
  9662 ;;		_map
  9663 ;;		_scalePotValue
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function ___ftmul
  9669  08C5                     ___ftmul:	
  9670                           
  9671                           ;incstack = 0
  9672                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9673  08C5  0021               	movlb	1	; select bank1
  9674  08C6  0835               	movf	___ftmul@f1^(0+128),w
  9675  08C7  00BB               	movwf	??___ftmul^(0+128)
  9676  08C8  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9677  08C9  00BC               	movwf	(??___ftmul^(0+128)+1)
  9678  08CA  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9679  08CB  00BD               	movwf	(??___ftmul^(0+128)+2)
  9680  08CC  1003               	clrc
  9681  08CD  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9682  08CE  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9683  08CF  00BE               	movwf	(??___ftmul+3)^(0+128)
  9684  08D0  083E               	movf	(??___ftmul+3)^(0+128),w
  9685  08D1  00BF               	movwf	___ftmul@exp^(0+128)
  9686  08D2  083F               	movf	___ftmul@exp^(0+128),w
  9687  08D3  1D03               	btfss	3,2
  9688  08D4  28DC               	goto	l5484
  9689  08D5  3000               	movlw	0
  9690  08D6  00B5               	movwf	?___ftmul^(0+128)
  9691  08D7  3000               	movlw	0
  9692  08D8  00B6               	movwf	(?___ftmul+1)^(0+128)
  9693  08D9  3000               	movlw	0
  9694  08DA  00B7               	movwf	(?___ftmul+2)^(0+128)
  9695  08DB  0008               	return
  9696  08DC                     l5484:	
  9697  08DC  0838               	movf	___ftmul@f2^(0+128),w
  9698  08DD  00BB               	movwf	??___ftmul^(0+128)
  9699  08DE  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9700  08DF  00BC               	movwf	(??___ftmul^(0+128)+1)
  9701  08E0  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9702  08E1  00BD               	movwf	(??___ftmul^(0+128)+2)
  9703  08E2  1003               	clrc
  9704  08E3  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9705  08E4  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9706  08E5  00BE               	movwf	(??___ftmul+3)^(0+128)
  9707  08E6  083E               	movf	(??___ftmul+3)^(0+128),w
  9708  08E7  00C4               	movwf	___ftmul@sign^(0+128)
  9709  08E8  0844               	movf	___ftmul@sign^(0+128),w
  9710  08E9  1D03               	btfss	3,2
  9711  08EA  28F2               	goto	l5490
  9712  08EB  3000               	movlw	0
  9713  08EC  00B5               	movwf	?___ftmul^(0+128)
  9714  08ED  3000               	movlw	0
  9715  08EE  00B6               	movwf	(?___ftmul+1)^(0+128)
  9716  08EF  3000               	movlw	0
  9717  08F0  00B7               	movwf	(?___ftmul+2)^(0+128)
  9718  08F1  0008               	return
  9719  08F2                     l5490:	
  9720  08F2  0844               	movf	___ftmul@sign^(0+128),w
  9721  08F3  3E7B               	addlw	123
  9722  08F4  00BB               	movwf	??___ftmul^(0+128)
  9723  08F5  083B               	movf	??___ftmul^(0+128),w
  9724  08F6  07BF               	addwf	___ftmul@exp^(0+128),f
  9725  08F7  0835               	movf	___ftmul@f1^(0+128),w
  9726  08F8  00BB               	movwf	??___ftmul^(0+128)
  9727  08F9  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9728  08FA  00BC               	movwf	(??___ftmul^(0+128)+1)
  9729  08FB  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9730  08FC  00BD               	movwf	(??___ftmul^(0+128)+2)
  9731  08FD  3010               	movlw	16
  9732  08FE                     u5925:	
  9733  08FE  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9734  08FF  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9735  0900  0CBB               	rrf	??___ftmul^(0+128),f
  9736  0901  0B89               	decfsz	9,f
  9737  0902  28FE               	goto	u5925
  9738  0903  083B               	movf	??___ftmul^(0+128),w
  9739  0904  00BE               	movwf	(??___ftmul+3)^(0+128)
  9740  0905  083E               	movf	(??___ftmul+3)^(0+128),w
  9741  0906  00C4               	movwf	___ftmul@sign^(0+128)
  9742  0907  0838               	movf	___ftmul@f2^(0+128),w
  9743  0908  00BB               	movwf	??___ftmul^(0+128)
  9744  0909  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9745  090A  00BC               	movwf	(??___ftmul^(0+128)+1)
  9746  090B  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9747  090C  00BD               	movwf	(??___ftmul^(0+128)+2)
  9748  090D  3010               	movlw	16
  9749  090E                     u5935:	
  9750  090E  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9751  090F  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9752  0910  0CBB               	rrf	??___ftmul^(0+128),f
  9753  0911  0B89               	decfsz	9,f
  9754  0912  290E               	goto	u5935
  9755  0913  083B               	movf	??___ftmul^(0+128),w
  9756  0914  00BE               	movwf	(??___ftmul+3)^(0+128)
  9757  0915  083E               	movf	(??___ftmul+3)^(0+128),w
  9758  0916  06C4               	xorwf	___ftmul@sign^(0+128),f
  9759  0917  3080               	movlw	128
  9760  0918  00BB               	movwf	??___ftmul^(0+128)
  9761  0919  083B               	movf	??___ftmul^(0+128),w
  9762  091A  05C4               	andwf	___ftmul@sign^(0+128),f
  9763  091B  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
  9764  091C  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
  9765  091D  30FF               	movlw	255
  9766  091E  05B8               	andwf	___ftmul@f2^(0+128),f
  9767  091F  30FF               	movlw	255
  9768  0920  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
  9769  0921  3000               	movlw	0
  9770  0922  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
  9771  0923  3000               	movlw	0
  9772  0924  00C0               	movwf	___ftmul@f3_as_product^(0+128)
  9773  0925  3000               	movlw	0
  9774  0926  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  9775  0927  3000               	movlw	0
  9776  0928  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  9777  0929  3007               	movlw	7
  9778  092A  00BB               	movwf	??___ftmul^(0+128)
  9779  092B  083B               	movf	??___ftmul^(0+128),w
  9780  092C  00C3               	movwf	___ftmul@cntr^(0+128)
  9781  092D                     l5502:	
  9782  092D  1C35               	btfss	___ftmul@f1^(0+128),0
  9783  092E  2935               	goto	l5506
  9784  092F  0838               	movf	___ftmul@f2^(0+128),w
  9785  0930  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9786  0931  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9787  0932  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9788  0933  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9789  0934  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9790  0935                     l5506:	
  9791  0935  3001               	movlw	1
  9792  0936                     u5955:	
  9793  0936  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9794  0937  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9795  0938  0CB5               	rrf	___ftmul@f1^(0+128),f
  9796  0939  0B89               	decfsz	9,f
  9797  093A  2936               	goto	u5955
  9798  093B  3001               	movlw	1
  9799  093C                     u5965:	
  9800  093C  35B8               	lslf	___ftmul@f2^(0+128),f
  9801  093D  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
  9802  093E  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
  9803  093F  0B89               	decfsz	9,f
  9804  0940  293C               	goto	u5965
  9805  0941  3001               	movlw	1
  9806  0942  02C3               	subwf	___ftmul@cntr^(0+128),f
  9807  0943  1D03               	btfss	3,2
  9808  0944  292D               	goto	l5502
  9809  0945  3009               	movlw	9
  9810  0946  00BB               	movwf	??___ftmul^(0+128)
  9811  0947  083B               	movf	??___ftmul^(0+128),w
  9812  0948  00C3               	movwf	___ftmul@cntr^(0+128)
  9813  0949                     l5514:	
  9814  0949  1C35               	btfss	___ftmul@f1^(0+128),0
  9815  094A  2951               	goto	l5518
  9816  094B  0838               	movf	___ftmul@f2^(0+128),w
  9817  094C  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9818  094D  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9819  094E  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9820  094F  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9821  0950  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9822  0951                     l5518:	
  9823  0951  3001               	movlw	1
  9824  0952                     u5995:	
  9825  0952  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9826  0953  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9827  0954  0CB5               	rrf	___ftmul@f1^(0+128),f
  9828  0955  0B89               	decfsz	9,f
  9829  0956  2952               	goto	u5995
  9830  0957  3001               	movlw	1
  9831  0958                     u6005:	
  9832  0958  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  9833  0959  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  9834  095A  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
  9835  095B  0B89               	decfsz	9,f
  9836  095C  2958               	goto	u6005
  9837  095D  3001               	movlw	1
  9838  095E  02C3               	subwf	___ftmul@cntr^(0+128),f
  9839  095F  1D03               	btfss	3,2
  9840  0960  2949               	goto	l5514
  9841  0961  0840               	movf	___ftmul@f3_as_product^(0+128),w
  9842  0962  00A0               	movwf	___ftpack@arg^(0+128)
  9843  0963  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  9844  0964  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9845  0965  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  9846  0966  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9847  0967  083F               	movf	___ftmul@exp^(0+128),w
  9848  0968  00BB               	movwf	??___ftmul^(0+128)
  9849  0969  083B               	movf	??___ftmul^(0+128),w
  9850  096A  00A3               	movwf	___ftpack@exp^(0+128)
  9851  096B  0844               	movf	___ftmul@sign^(0+128),w
  9852  096C  00BC               	movwf	(??___ftmul+1)^(0+128)
  9853  096D  083C               	movf	(??___ftmul+1)^(0+128),w
  9854  096E  00A4               	movwf	___ftpack@sign^(0+128)
  9855  096F  3194  2488         	fcall	___ftpack
  9856  0971  0021               	movlb	1	; select bank1
  9857  0972  0820               	movf	?___ftpack^(0+128),w
  9858  0973  00B5               	movwf	?___ftmul^(0+128)
  9859  0974  0821               	movf	(?___ftpack+1)^(0+128),w
  9860  0975  00B6               	movwf	(?___ftmul+1)^(0+128)
  9861  0976  0822               	movf	(?___ftpack+2)^(0+128),w
  9862  0977  00B7               	movwf	(?___ftmul+2)^(0+128)
  9863  0978  0008               	return
  9864  0979                     __end_of___ftmul:	
  9865                           
  9866                           	psect	text24
  9867  081C                     __ptext24:	
  9868 ;; *************** function ___ftdiv *****************
  9869 ;; Defined at:
  9870 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;  f2              3   37[BANK1 ] float 
  9873 ;;  f1              3   40[BANK1 ] float 
  9874 ;; Auto vars:     Size  Location     Type
  9875 ;;  f3              3   48[BANK1 ] float 
  9876 ;;  sign            1   52[BANK1 ] unsigned char 
  9877 ;;  exp             1   51[BANK1 ] unsigned char 
  9878 ;;  cntr            1   47[BANK1 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;                  3   37[BANK1 ] float 
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0, pclath, cstack
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9888 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9889 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9890 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9891 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9892 ;;Total ram usage:       16 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    4
  9895 ;; This function calls:
  9896 ;;		___ftpack
  9897 ;; This function is called by:
  9898 ;;		_map
  9899 ;;		_scalePotValue
  9900 ;; This function uses a non-reentrant model
  9901 ;;
  9902                           
  9903                           
  9904                           ;psect for function ___ftdiv
  9905  081C                     ___ftdiv:	
  9906                           
  9907                           ;incstack = 0
  9908                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9909  081C  0021               	movlb	1	; select bank1
  9910  081D  0848               	movf	___ftdiv@f1^(0+128),w
  9911  081E  00CB               	movwf	??___ftdiv^(0+128)
  9912  081F  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9913  0820  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9914  0821  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9915  0822  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9916  0823  1003               	clrc
  9917  0824  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9918  0825  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9919  0826  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9920  0827  084E               	movf	(??___ftdiv+3)^(0+128),w
  9921  0828  00D3               	movwf	___ftdiv@exp^(0+128)
  9922  0829  0853               	movf	___ftdiv@exp^(0+128),w
  9923  082A  1D03               	btfss	3,2
  9924  082B  2833               	goto	l5442
  9925  082C  3000               	movlw	0
  9926  082D  00C5               	movwf	?___ftdiv^(0+128)
  9927  082E  3000               	movlw	0
  9928  082F  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9929  0830  3000               	movlw	0
  9930  0831  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9931  0832  0008               	return
  9932  0833                     l5442:	
  9933  0833  0845               	movf	___ftdiv@f2^(0+128),w
  9934  0834  00CB               	movwf	??___ftdiv^(0+128)
  9935  0835  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9936  0836  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9937  0837  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9938  0838  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9939  0839  1003               	clrc
  9940  083A  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9941  083B  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9942  083C  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9943  083D  084E               	movf	(??___ftdiv+3)^(0+128),w
  9944  083E  00D4               	movwf	___ftdiv@sign^(0+128)
  9945  083F  0854               	movf	___ftdiv@sign^(0+128),w
  9946  0840  1D03               	btfss	3,2
  9947  0841  2849               	goto	l5448
  9948  0842  3000               	movlw	0
  9949  0843  00C5               	movwf	?___ftdiv^(0+128)
  9950  0844  3000               	movlw	0
  9951  0845  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9952  0846  3000               	movlw	0
  9953  0847  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9954  0848  0008               	return
  9955  0849                     l5448:	
  9956  0849  3000               	movlw	0
  9957  084A  00D0               	movwf	___ftdiv@f3^(0+128)
  9958  084B  3000               	movlw	0
  9959  084C  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
  9960  084D  3000               	movlw	0
  9961  084E  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
  9962  084F  3089               	movlw	137
  9963  0850  0754               	addwf	___ftdiv@sign^(0+128),w
  9964  0851  00CB               	movwf	??___ftdiv^(0+128)
  9965  0852  084B               	movf	??___ftdiv^(0+128),w
  9966  0853  02D3               	subwf	___ftdiv@exp^(0+128),f
  9967  0854  0848               	movf	___ftdiv@f1^(0+128),w
  9968  0855  00CB               	movwf	??___ftdiv^(0+128)
  9969  0856  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9970  0857  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9971  0858  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9972  0859  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9973  085A  3010               	movlw	16
  9974  085B                     u5845:	
  9975  085B  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9976  085C  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9977  085D  0CCB               	rrf	??___ftdiv^(0+128),f
  9978  085E  0B89               	decfsz	9,f
  9979  085F  285B               	goto	u5845
  9980  0860  084B               	movf	??___ftdiv^(0+128),w
  9981  0861  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9982  0862  084E               	movf	(??___ftdiv+3)^(0+128),w
  9983  0863  00D4               	movwf	___ftdiv@sign^(0+128)
  9984  0864  0845               	movf	___ftdiv@f2^(0+128),w
  9985  0865  00CB               	movwf	??___ftdiv^(0+128)
  9986  0866  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9987  0867  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9988  0868  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9989  0869  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9990  086A  3010               	movlw	16
  9991  086B                     u5855:	
  9992  086B  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9993  086C  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9994  086D  0CCB               	rrf	??___ftdiv^(0+128),f
  9995  086E  0B89               	decfsz	9,f
  9996  086F  286B               	goto	u5855
  9997  0870  084B               	movf	??___ftdiv^(0+128),w
  9998  0871  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9999  0872  084E               	movf	(??___ftdiv+3)^(0+128),w
 10000  0873  06D4               	xorwf	___ftdiv@sign^(0+128),f
 10001  0874  3080               	movlw	128
 10002  0875  00CB               	movwf	??___ftdiv^(0+128)
 10003  0876  084B               	movf	??___ftdiv^(0+128),w
 10004  0877  05D4               	andwf	___ftdiv@sign^(0+128),f
 10005  0878  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
 10006  0879  30FF               	movlw	255
 10007  087A  05C8               	andwf	___ftdiv@f1^(0+128),f
 10008  087B  30FF               	movlw	255
 10009  087C  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
 10010  087D  3000               	movlw	0
 10011  087E  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
 10012  087F  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
 10013  0880  30FF               	movlw	255
 10014  0881  05C5               	andwf	___ftdiv@f2^(0+128),f
 10015  0882  30FF               	movlw	255
 10016  0883  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
 10017  0884  3000               	movlw	0
 10018  0885  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
 10019  0886  3018               	movlw	24
 10020  0887  00CB               	movwf	??___ftdiv^(0+128)
 10021  0888  084B               	movf	??___ftdiv^(0+128),w
 10022  0889  00CF               	movwf	___ftdiv@cntr^(0+128)
 10023  088A                     l5462:	
 10024  088A  3001               	movlw	1
 10025  088B                     u5865:	
 10026  088B  35D0               	lslf	___ftdiv@f3^(0+128),f
 10027  088C  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
 10028  088D  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
 10029  088E  0B89               	decfsz	9,f
 10030  088F  288B               	goto	u5865
 10031  0890  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10032  0891  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
 10033  0892  1D03               	skipz
 10034  0893  289A               	goto	u5875
 10035  0894  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10036  0895  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
 10037  0896  1D03               	skipz
 10038  0897  289A               	goto	u5875
 10039  0898  0845               	movf	___ftdiv@f2^(0+128),w
 10040  0899  0248               	subwf	___ftdiv@f1^(0+128),w
 10041  089A                     u5875:	
 10042  089A  1C03               	skipc
 10043  089B  28A3               	goto	l5470
 10044  089C  0845               	movf	___ftdiv@f2^(0+128),w
 10045  089D  02C8               	subwf	___ftdiv@f1^(0+128),f
 10046  089E  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10047  089F  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
 10048  08A0  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10049  08A1  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
 10050  08A2  1450               	bsf	___ftdiv@f3^(0+128),0
 10051  08A3                     l5470:	
 10052  08A3  3001               	movlw	1
 10053  08A4                     u5885:	
 10054  08A4  35C8               	lslf	___ftdiv@f1^(0+128),f
 10055  08A5  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
 10056  08A6  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
 10057  08A7  0B89               	decfsz	9,f
 10058  08A8  28A4               	goto	u5885
 10059  08A9  3001               	movlw	1
 10060  08AA  02CF               	subwf	___ftdiv@cntr^(0+128),f
 10061  08AB  1D03               	btfss	3,2
 10062  08AC  288A               	goto	l5462
 10063  08AD  0850               	movf	___ftdiv@f3^(0+128),w
 10064  08AE  00A0               	movwf	___ftpack@arg^(0+128)
 10065  08AF  0851               	movf	(___ftdiv@f3+1)^(0+128),w
 10066  08B0  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10067  08B1  0852               	movf	(___ftdiv@f3+2)^(0+128),w
 10068  08B2  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10069  08B3  0853               	movf	___ftdiv@exp^(0+128),w
 10070  08B4  00CB               	movwf	??___ftdiv^(0+128)
 10071  08B5  084B               	movf	??___ftdiv^(0+128),w
 10072  08B6  00A3               	movwf	___ftpack@exp^(0+128)
 10073  08B7  0854               	movf	___ftdiv@sign^(0+128),w
 10074  08B8  00CC               	movwf	(??___ftdiv+1)^(0+128)
 10075  08B9  084C               	movf	(??___ftdiv+1)^(0+128),w
 10076  08BA  00A4               	movwf	___ftpack@sign^(0+128)
 10077  08BB  3194  2488         	fcall	___ftpack
 10078  08BD  0021               	movlb	1	; select bank1
 10079  08BE  0820               	movf	?___ftpack^(0+128),w
 10080  08BF  00C5               	movwf	?___ftdiv^(0+128)
 10081  08C0  0821               	movf	(?___ftpack+1)^(0+128),w
 10082  08C1  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10083  08C2  0822               	movf	(?___ftpack+2)^(0+128),w
 10084  08C3  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10085  08C4  0008               	return
 10086  08C5                     __end_of___ftdiv:	
 10087                           
 10088                           	psect	text25
 10089  0B1E                     __ptext25:	
 10090 ;; *************** function ___ftadd *****************
 10091 ;; Defined at:
 10092 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10093 ;; Parameters:    Size  Location     Type
 10094 ;;  f1              3    8[BANK1 ] float 
 10095 ;;  f2              3   11[BANK1 ] float 
 10096 ;; Auto vars:     Size  Location     Type
 10097 ;;  exp1            1   20[BANK1 ] unsigned char 
 10098 ;;  exp2            1   19[BANK1 ] unsigned char 
 10099 ;;  sign            1   18[BANK1 ] unsigned char 
 10100 ;; Return value:  Size  Location     Type
 10101 ;;                  3    8[BANK1 ] float 
 10102 ;; Registers used:
 10103 ;;		wreg, status,2, status,0, pclath, cstack
 10104 ;; Tracked objects:
 10105 ;;		On entry : 0/0
 10106 ;;		On exit  : 0/0
 10107 ;;		Unchanged: 0/0
 10108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10109 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10110 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10111 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10112 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10113 ;;Total ram usage:       13 bytes
 10114 ;; Hardware stack levels used:    1
 10115 ;; Hardware stack levels required when called:    4
 10116 ;; This function calls:
 10117 ;;		___ftpack
 10118 ;; This function is called by:
 10119 ;;		_map
 10120 ;;		_scalePotValue
 10121 ;; This function uses a non-reentrant model
 10122 ;;
 10123                           
 10124                           
 10125                           ;psect for function ___ftadd
 10126  0B1E                     ___ftadd:	
 10127                           
 10128                           ;incstack = 0
 10129                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10130  0B1E  0021               	movlb	1	; select bank1
 10131  0B1F  0828               	movf	___ftadd@f1^(0+128),w
 10132  0B20  00AE               	movwf	??___ftadd^(0+128)
 10133  0B21  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10134  0B22  00AF               	movwf	(??___ftadd^(0+128)+1)
 10135  0B23  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10136  0B24  00B0               	movwf	(??___ftadd^(0+128)+2)
 10137  0B25  1003               	clrc
 10138  0B26  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10139  0B27  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10140  0B28  00B1               	movwf	(??___ftadd+3)^(0+128)
 10141  0B29  0831               	movf	(??___ftadd+3)^(0+128),w
 10142  0B2A  00B4               	movwf	___ftadd@exp1^(0+128)
 10143  0B2B  082B               	movf	___ftadd@f2^(0+128),w
 10144  0B2C  00AE               	movwf	??___ftadd^(0+128)
 10145  0B2D  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10146  0B2E  00AF               	movwf	(??___ftadd^(0+128)+1)
 10147  0B2F  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10148  0B30  00B0               	movwf	(??___ftadd^(0+128)+2)
 10149  0B31  1003               	clrc
 10150  0B32  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10151  0B33  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10152  0B34  00B1               	movwf	(??___ftadd+3)^(0+128)
 10153  0B35  0831               	movf	(??___ftadd+3)^(0+128),w
 10154  0B36  00B3               	movwf	___ftadd@exp2^(0+128)
 10155  0B37  0834               	movf	___ftadd@exp1^(0+128),w
 10156  0B38  1903               	btfsc	3,2
 10157  0B39  2B46               	goto	l5372
 10158  0B3A  0833               	movf	___ftadd@exp2^(0+128),w
 10159  0B3B  0234               	subwf	___ftadd@exp1^(0+128),w
 10160  0B3C  1803               	skipnc
 10161  0B3D  2B4D               	goto	l5376
 10162  0B3E  0334               	decf	___ftadd@exp1^(0+128),w
 10163  0B3F  3AFF               	xorlw	255
 10164  0B40  0733               	addwf	___ftadd@exp2^(0+128),w
 10165  0B41  00AE               	movwf	??___ftadd^(0+128)
 10166  0B42  3019               	movlw	25
 10167  0B43  022E               	subwf	??___ftadd^(0+128),w
 10168  0B44  1C03               	skipc
 10169  0B45  2B4D               	goto	l5376
 10170  0B46                     l5372:	
 10171  0B46  082B               	movf	___ftadd@f2^(0+128),w
 10172  0B47  00A8               	movwf	?___ftadd^(0+128)
 10173  0B48  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10174  0B49  00A9               	movwf	(?___ftadd+1)^(0+128)
 10175  0B4A  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10176  0B4B  00AA               	movwf	(?___ftadd+2)^(0+128)
 10177  0B4C  0008               	return
 10178  0B4D                     l5376:	
 10179  0B4D  0833               	movf	___ftadd@exp2^(0+128),w
 10180  0B4E  1903               	btfsc	3,2
 10181  0B4F  0008               	return
 10182  0B50  0834               	movf	___ftadd@exp1^(0+128),w
 10183  0B51  0233               	subwf	___ftadd@exp2^(0+128),w
 10184  0B52  1803               	skipnc
 10185  0B53  2B5C               	goto	l5382
 10186  0B54  0333               	decf	___ftadd@exp2^(0+128),w
 10187  0B55  3AFF               	xorlw	255
 10188  0B56  0734               	addwf	___ftadd@exp1^(0+128),w
 10189  0B57  00AE               	movwf	??___ftadd^(0+128)
 10190  0B58  3019               	movlw	25
 10191  0B59  022E               	subwf	??___ftadd^(0+128),w
 10192  0B5A  1803               	btfsc	3,0
 10193  0B5B  0008               	return
 10194  0B5C                     l5382:	
 10195  0B5C  3006               	movlw	6
 10196  0B5D  00AE               	movwf	??___ftadd^(0+128)
 10197  0B5E  082E               	movf	??___ftadd^(0+128),w
 10198  0B5F  00B2               	movwf	___ftadd@sign^(0+128)
 10199  0B60  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10200  0B61  17B2               	bsf	___ftadd@sign^(0+128),7
 10201  0B62  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10202  0B63  1732               	bsf	___ftadd@sign^(0+128),6
 10203  0B64  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10204  0B65  30FF               	movlw	255
 10205  0B66  05A8               	andwf	___ftadd@f1^(0+128),f
 10206  0B67  30FF               	movlw	255
 10207  0B68  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10208  0B69  3000               	movlw	0
 10209  0B6A  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10210  0B6B  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10211  0B6C  30FF               	movlw	255
 10212  0B6D  05AB               	andwf	___ftadd@f2^(0+128),f
 10213  0B6E  30FF               	movlw	255
 10214  0B6F  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10215  0B70  3000               	movlw	0
 10216  0B71  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10217  0B72  0833               	movf	___ftadd@exp2^(0+128),w
 10218  0B73  0234               	subwf	___ftadd@exp1^(0+128),w
 10219  0B74  1803               	skipnc
 10220  0B75  2B98               	goto	l5404
 10221  0B76                     l5394:	
 10222  0B76  3001               	movlw	1
 10223  0B77                     u5685:	
 10224  0B77  35AB               	lslf	___ftadd@f2^(0+128),f
 10225  0B78  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 10226  0B79  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 10227  0B7A  0B89               	decfsz	9,f
 10228  0B7B  2B77               	goto	u5685
 10229  0B7C  3001               	movlw	1
 10230  0B7D  02B3               	subwf	___ftadd@exp2^(0+128),f
 10231  0B7E  0833               	movf	___ftadd@exp2^(0+128),w
 10232  0B7F  0634               	xorwf	___ftadd@exp1^(0+128),w
 10233  0B80  1903               	skipnz
 10234  0B81  2B93               	goto	l5402
 10235  0B82  3001               	movlw	1
 10236  0B83  02B2               	subwf	___ftadd@sign^(0+128),f
 10237  0B84  0832               	movf	___ftadd@sign^(0+128),w
 10238  0B85  3907               	andlw	7
 10239  0B86  1903               	btfsc	3,2
 10240  0B87  2B93               	goto	l5402
 10241  0B88  2B76               	goto	l5394
 10242  0B89                     l5400:	
 10243  0B89  3001               	movlw	1
 10244  0B8A                     u5715:	
 10245  0B8A  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 10246  0B8B  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 10247  0B8C  0CA8               	rrf	___ftadd@f1^(0+128),f
 10248  0B8D  0B89               	decfsz	9,f
 10249  0B8E  2B8A               	goto	u5715
 10250  0B8F  3001               	movlw	1
 10251  0B90  00AE               	movwf	??___ftadd^(0+128)
 10252  0B91  082E               	movf	??___ftadd^(0+128),w
 10253  0B92  07B4               	addwf	___ftadd@exp1^(0+128),f
 10254  0B93                     l5402:	
 10255  0B93  0834               	movf	___ftadd@exp1^(0+128),w
 10256  0B94  0633               	xorwf	___ftadd@exp2^(0+128),w
 10257  0B95  1903               	btfsc	3,2
 10258  0B96  2BBD               	goto	l1505
 10259  0B97  2B89               	goto	l5400
 10260  0B98                     l5404:	
 10261  0B98  0834               	movf	___ftadd@exp1^(0+128),w
 10262  0B99  0233               	subwf	___ftadd@exp2^(0+128),w
 10263  0B9A  1803               	skipnc
 10264  0B9B  2BBD               	goto	l1505
 10265  0B9C                     l5406:	
 10266  0B9C  3001               	movlw	1
 10267  0B9D                     u5745:	
 10268  0B9D  35A8               	lslf	___ftadd@f1^(0+128),f
 10269  0B9E  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 10270  0B9F  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 10271  0BA0  0B89               	decfsz	9,f
 10272  0BA1  2B9D               	goto	u5745
 10273  0BA2  3001               	movlw	1
 10274  0BA3  02B4               	subwf	___ftadd@exp1^(0+128),f
 10275  0BA4  0833               	movf	___ftadd@exp2^(0+128),w
 10276  0BA5  0634               	xorwf	___ftadd@exp1^(0+128),w
 10277  0BA6  1903               	skipnz
 10278  0BA7  2BB9               	goto	l5414
 10279  0BA8  3001               	movlw	1
 10280  0BA9  02B2               	subwf	___ftadd@sign^(0+128),f
 10281  0BAA  0832               	movf	___ftadd@sign^(0+128),w
 10282  0BAB  3907               	andlw	7
 10283  0BAC  1903               	btfsc	3,2
 10284  0BAD  2BB9               	goto	l5414
 10285  0BAE  2B9C               	goto	l5406
 10286  0BAF                     l5412:	
 10287  0BAF  3001               	movlw	1
 10288  0BB0                     u5775:	
 10289  0BB0  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 10290  0BB1  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 10291  0BB2  0CAB               	rrf	___ftadd@f2^(0+128),f
 10292  0BB3  0B89               	decfsz	9,f
 10293  0BB4  2BB0               	goto	u5775
 10294  0BB5  3001               	movlw	1
 10295  0BB6  00AE               	movwf	??___ftadd^(0+128)
 10296  0BB7  082E               	movf	??___ftadd^(0+128),w
 10297  0BB8  07B3               	addwf	___ftadd@exp2^(0+128),f
 10298  0BB9                     l5414:	
 10299  0BB9  0834               	movf	___ftadd@exp1^(0+128),w
 10300  0BBA  0633               	xorwf	___ftadd@exp2^(0+128),w
 10301  0BBB  1D03               	skipz
 10302  0BBC  2BAF               	goto	l5412
 10303  0BBD                     l1505:	
 10304  0BBD  1FB2               	btfss	___ftadd@sign^(0+128),7
 10305  0BBE  2BCF               	goto	l5418
 10306  0BBF  30FF               	movlw	255
 10307  0BC0  06A8               	xorwf	___ftadd@f1^(0+128),f
 10308  0BC1  30FF               	movlw	255
 10309  0BC2  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 10310  0BC3  30FF               	movlw	255
 10311  0BC4  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 10312  0BC5  3001               	movlw	1
 10313  0BC6  07A8               	addwf	___ftadd@f1^(0+128),f
 10314  0BC7  3000               	movlw	0
 10315  0BC8  1803               	skipnc
 10316  0BC9  3001               	movlw	1
 10317  0BCA  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 10318  0BCB  3000               	movlw	0
 10319  0BCC  1803               	skipnc
 10320  0BCD  3001               	movlw	1
 10321  0BCE  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 10322  0BCF                     l5418:	
 10323  0BCF  1F32               	btfss	___ftadd@sign^(0+128),6
 10324  0BD0  2BE1               	goto	l5422
 10325  0BD1  30FF               	movlw	255
 10326  0BD2  06AB               	xorwf	___ftadd@f2^(0+128),f
 10327  0BD3  30FF               	movlw	255
 10328  0BD4  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10329  0BD5  30FF               	movlw	255
 10330  0BD6  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10331  0BD7  3001               	movlw	1
 10332  0BD8  07AB               	addwf	___ftadd@f2^(0+128),f
 10333  0BD9  3000               	movlw	0
 10334  0BDA  1803               	skipnc
 10335  0BDB  3001               	movlw	1
 10336  0BDC  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10337  0BDD  3000               	movlw	0
 10338  0BDE  1803               	skipnc
 10339  0BDF  3001               	movlw	1
 10340  0BE0  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10341  0BE1                     l5422:	
 10342  0BE1  01B2               	clrf	___ftadd@sign^(0+128)
 10343  0BE2  0828               	movf	___ftadd@f1^(0+128),w
 10344  0BE3  07AB               	addwf	___ftadd@f2^(0+128),f
 10345  0BE4  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10346  0BE5  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 10347  0BE6  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10348  0BE7  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 10349  0BE8  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 10350  0BE9  2BFC               	goto	l5432
 10351  0BEA  30FF               	movlw	255
 10352  0BEB  06AB               	xorwf	___ftadd@f2^(0+128),f
 10353  0BEC  30FF               	movlw	255
 10354  0BED  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10355  0BEE  30FF               	movlw	255
 10356  0BEF  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10357  0BF0  3001               	movlw	1
 10358  0BF1  07AB               	addwf	___ftadd@f2^(0+128),f
 10359  0BF2  3000               	movlw	0
 10360  0BF3  1803               	skipnc
 10361  0BF4  3001               	movlw	1
 10362  0BF5  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10363  0BF6  3000               	movlw	0
 10364  0BF7  1803               	skipnc
 10365  0BF8  3001               	movlw	1
 10366  0BF9  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10367  0BFA  01B2               	clrf	___ftadd@sign^(0+128)
 10368  0BFB  0AB2               	incf	___ftadd@sign^(0+128),f
 10369  0BFC                     l5432:	
 10370  0BFC  082B               	movf	___ftadd@f2^(0+128),w
 10371  0BFD  00A0               	movwf	___ftpack@arg^(0+128)
 10372  0BFE  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10373  0BFF  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10374  0C00  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10375  0C01  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10376  0C02  0834               	movf	___ftadd@exp1^(0+128),w
 10377  0C03  00AE               	movwf	??___ftadd^(0+128)
 10378  0C04  082E               	movf	??___ftadd^(0+128),w
 10379  0C05  00A3               	movwf	___ftpack@exp^(0+128)
 10380  0C06  0832               	movf	___ftadd@sign^(0+128),w
 10381  0C07  00AF               	movwf	(??___ftadd+1)^(0+128)
 10382  0C08  082F               	movf	(??___ftadd+1)^(0+128),w
 10383  0C09  00A4               	movwf	___ftpack@sign^(0+128)
 10384  0C0A  3194  2488         	fcall	___ftpack
 10385  0C0C  0021               	movlb	1	; select bank1
 10386  0C0D  0820               	movf	?___ftpack^(0+128),w
 10387  0C0E  00A8               	movwf	?___ftadd^(0+128)
 10388  0C0F  0821               	movf	(?___ftpack+1)^(0+128),w
 10389  0C10  00A9               	movwf	(?___ftadd+1)^(0+128)
 10390  0C11  0822               	movf	(?___ftpack+2)^(0+128),w
 10391  0C12  00AA               	movwf	(?___ftadd+2)^(0+128)
 10392  0C13  0008               	return
 10393  0C14                     __end_of___ftadd:	
 10394                           
 10395                           	psect	text26
 10396  1488                     __ptext26:	
 10397 ;; *************** function ___ftpack *****************
 10398 ;; Defined at:
 10399 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10400 ;; Parameters:    Size  Location     Type
 10401 ;;  arg             3    0[BANK1 ] unsigned um
 10402 ;;  exp             1    3[BANK1 ] unsigned char 
 10403 ;;  sign            1    4[BANK1 ] unsigned char 
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;		None
 10406 ;; Return value:  Size  Location     Type
 10407 ;;                  3    0[BANK1 ] float 
 10408 ;; Registers used:
 10409 ;;		wreg, status,2, status,0
 10410 ;; Tracked objects:
 10411 ;;		On entry : 0/0
 10412 ;;		On exit  : 0/0
 10413 ;;		Unchanged: 0/0
 10414 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10415 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10417 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10418 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10419 ;;Total ram usage:        8 bytes
 10420 ;; Hardware stack levels used:    1
 10421 ;; Hardware stack levels required when called:    3
 10422 ;; This function calls:
 10423 ;;		Nothing
 10424 ;; This function is called by:
 10425 ;;		___altoft
 10426 ;;		___awtoft
 10427 ;;		___ftadd
 10428 ;;		___ftdiv
 10429 ;;		___ftmul
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           
 10434                           ;psect for function ___ftpack
 10435  1488                     ___ftpack:	
 10436                           
 10437                           ;incstack = 0
 10438                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10439  1488  0021               	movlb	1	; select bank1
 10440  1489  0823               	movf	___ftpack@exp^(0+128),w
 10441  148A  1903               	btfsc	3,2
 10442  148B  2C91               	goto	l4992
 10443  148C  0822               	movf	(___ftpack@arg+2)^(0+128),w
 10444  148D  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 10445  148E  0420               	iorwf	___ftpack@arg^(0+128),w
 10446  148F  1D03               	skipz
 10447  1490  2CA2               	goto	l4998
 10448  1491                     l4992:	
 10449  1491  3000               	movlw	0
 10450  1492  00A0               	movwf	?___ftpack^(0+128)
 10451  1493  3000               	movlw	0
 10452  1494  00A1               	movwf	(?___ftpack+1)^(0+128)
 10453  1495  3000               	movlw	0
 10454  1496  00A2               	movwf	(?___ftpack+2)^(0+128)
 10455  1497  0008               	return
 10456  1498                     l4996:	
 10457  1498  3001               	movlw	1
 10458  1499  00A5               	movwf	??___ftpack^(0+128)
 10459  149A  0825               	movf	??___ftpack^(0+128),w
 10460  149B  07A3               	addwf	___ftpack@exp^(0+128),f
 10461  149C  3001               	movlw	1
 10462  149D                     u5095:	
 10463  149D  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10464  149E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10465  149F  0CA0               	rrf	___ftpack@arg^(0+128),f
 10466  14A0  0B89               	decfsz	9,f
 10467  14A1  2C9D               	goto	u5095
 10468  14A2                     l4998:	
 10469  14A2  30FE               	movlw	254
 10470  14A3  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10471  14A4  1903               	btfsc	3,2
 10472  14A5  2CBB               	goto	l1474
 10473  14A6  2C98               	goto	l4996
 10474  14A7                     l5000:	
 10475  14A7  3001               	movlw	1
 10476  14A8  00A5               	movwf	??___ftpack^(0+128)
 10477  14A9  0825               	movf	??___ftpack^(0+128),w
 10478  14AA  07A3               	addwf	___ftpack@exp^(0+128),f
 10479  14AB  3001               	movlw	1
 10480  14AC  07A0               	addwf	___ftpack@arg^(0+128),f
 10481  14AD  3000               	movlw	0
 10482  14AE  1803               	skipnc
 10483  14AF  3001               	movlw	1
 10484  14B0  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 10485  14B1  3000               	movlw	0
 10486  14B2  1803               	skipnc
 10487  14B3  3001               	movlw	1
 10488  14B4  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 10489  14B5  3001               	movlw	1
 10490  14B6                     u5115:	
 10491  14B6  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10492  14B7  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10493  14B8  0CA0               	rrf	___ftpack@arg^(0+128),f
 10494  14B9  0B89               	decfsz	9,f
 10495  14BA  2CB6               	goto	u5115
 10496  14BB                     l1474:	
 10497  14BB  30FF               	movlw	255
 10498  14BC  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10499  14BD  1903               	btfsc	3,2
 10500  14BE  2CC8               	goto	l5008
 10501  14BF  2CA7               	goto	l5000
 10502  14C0                     l5006:	
 10503  14C0  3001               	movlw	1
 10504  14C1  02A3               	subwf	___ftpack@exp^(0+128),f
 10505  14C2  3001               	movlw	1
 10506  14C3                     u5135:	
 10507  14C3  35A0               	lslf	___ftpack@arg^(0+128),f
 10508  14C4  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 10509  14C5  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 10510  14C6  0B89               	decfsz	9,f
 10511  14C7  2CC3               	goto	u5135
 10512  14C8                     l5008:	
 10513  14C8  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 10514  14C9  2CCE               	goto	l1481
 10515  14CA  3002               	movlw	2
 10516  14CB  0223               	subwf	___ftpack@exp^(0+128),w
 10517  14CC  1803               	skipnc
 10518  14CD  2CC0               	goto	l5006
 10519  14CE                     l1481:	
 10520  14CE  1823               	btfsc	___ftpack@exp^(0+128),0
 10521  14CF  2CD6               	goto	l1482
 10522  14D0  30FF               	movlw	255
 10523  14D1  05A0               	andwf	___ftpack@arg^(0+128),f
 10524  14D2  307F               	movlw	127
 10525  14D3  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 10526  14D4  30FF               	movlw	255
 10527  14D5  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 10528  14D6                     l1482:	
 10529  14D6  1003               	clrc
 10530  14D7  0CA3               	rrf	___ftpack@exp^(0+128),f
 10531  14D8  0823               	movf	___ftpack@exp^(0+128),w
 10532  14D9  00A5               	movwf	??___ftpack^(0+128)
 10533  14DA  01A6               	clrf	(??___ftpack^(0+128)+1)
 10534  14DB  01A7               	clrf	(??___ftpack^(0+128)+2)
 10535  14DC  3010               	movlw	16
 10536  14DD                     u5175:	
 10537  14DD  35A5               	lslf	??___ftpack^(0+128),f
 10538  14DE  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 10539  14DF  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 10540  14E0  0B89               	decfsz	9,f
 10541  14E1  2CDD               	goto	u5175
 10542  14E2  0825               	movf	??___ftpack^(0+128),w
 10543  14E3  04A0               	iorwf	___ftpack@arg^(0+128),f
 10544  14E4  0826               	movf	(??___ftpack+1)^(0+128),w
 10545  14E5  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 10546  14E6  0827               	movf	(??___ftpack+2)^(0+128),w
 10547  14E7  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 10548  14E8  0824               	movf	___ftpack@sign^(0+128),w
 10549  14E9  1903               	btfsc	3,2
 10550  14EA  0008               	return
 10551  14EB  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 10552  14EC  0008               	return
 10553  14ED                     __end_of___ftpack:	
 10554                           
 10555                           	psect	text27
 10556  1E00                     __ptext27:	
 10557 ;; *************** function _initSwitchBypass *****************
 10558 ;; Defined at:
 10559 ;;		line 29 in file "SwitchBypass.c"
 10560 ;; Parameters:    Size  Location     Type
 10561 ;;		None
 10562 ;; Auto vars:     Size  Location     Type
 10563 ;;  initState       2   22[BANK1 ] int 
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  1    wreg      void 
 10566 ;; Registers used:
 10567 ;;		wreg, status,2, status,0, pclath, cstack
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10574 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10576 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10577 ;;Total ram usage:        2 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    6
 10580 ;; This function calls:
 10581 ;;		_getSwitchBypassState
 10582 ;;		_setSwitchBypassState
 10583 ;; This function is called by:
 10584 ;;		_main
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           
 10589                           ;psect for function _initSwitchBypass
 10590  1E00                     _initSwitchBypass:	
 10591                           
 10592                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10593                           
 10594                           ;incstack = 0
 10595                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10596  1E00  319D  25B6  319E   	fcall	_getSwitchBypassState
 10597  1E03  0021               	movlb	1	; select bank1
 10598  1E04  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 10599  1E05  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 10600  1E06  0820               	movf	?_getSwitchBypassState^(0+128),w
 10601  1E07  00B6               	movwf	initSwitchBypass@initState^(0+128)
 10602                           
 10603                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10604  1E08  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 10605  1E09  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 10606  1E0A  0836               	movf	initSwitchBypass@initState^(0+128),w
 10607  1E0B  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 10608  1E0C  3193  2300         	fcall	_setSwitchBypassState
 10609  1E0E  0008               	return
 10610  1E0F                     __end_of_initSwitchBypass:	
 10611                           
 10612                           	psect	text28
 10613  1300                     __ptext28:	
 10614 ;; *************** function _setSwitchBypassState *****************
 10615 ;; Defined at:
 10616 ;;		line 134 in file "SwitchBypass.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  f_state         2   18[BANK1 ] int 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;		None
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  1    wreg      void 
 10623 ;; Registers used:
 10624 ;;		wreg, status,2, status,0, pclath, cstack
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10630 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10632 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10633 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10634 ;;Total ram usage:        4 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    5
 10637 ;; This function calls:
 10638 ;;		_updateSwitchBypassState
 10639 ;;		_wait_ms
 10640 ;; This function is called by:
 10641 ;;		_initSwitchBypass
 10642 ;;		_updateSwitchBypass
 10643 ;; This function uses a non-reentrant model
 10644 ;;
 10645                           
 10646                           
 10647                           ;psect for function _setSwitchBypassState
 10648  1300                     _setSwitchBypassState:	
 10649                           
 10650                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10651                           
 10652                           ;incstack = 0
 10653                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10654  1300  0020               	movlb	0	; select bank0
 10655  1301  0869               	movf	_switchBypass_state,w
 10656  1302  0021               	movlb	1	; select bank1
 10657  1303  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10658  1304  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10659  1305  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 10660  1306  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 10661  1307  1D03               	skipz
 10662  1308  2B0B               	goto	u5415
 10663  1309  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10664  130A  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 10665  130B                     u5415:	
 10666  130B  1903               	btfsc	3,2
 10667  130C  0008               	return
 10668                           
 10669                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10670  130D  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10671  130E  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10672  130F  0834               	movf	??_setSwitchBypassState^(0+128),w
 10673  1310  0020               	movlb	0	; select bank0
 10674  1311  00E9               	movwf	_switchBypass_state
 10675                           
 10676                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10677  1312  0021               	movlb	1	; select bank1
 10678  1313  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10679  1314  0022               	movlb	2	; select bank2
 10680  1315  1C03               	skipc
 10681  1316  110D               	bcf	13,2	;volatile
 10682  1317  1803               	skipnc
 10683  1318  150D               	bsf	13,2	;volatile
 10684                           
 10685                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10686  1319  118D               	bcf	13,3	;volatile
 10687                           
 10688                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10689  131A  0021               	movlb	1	; select bank1
 10690  131B  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10691  131C  0027               	movlb	7	; select bank7
 10692  131D  1C03               	skipc
 10693  131E  110D               	bcf	13,2	;volatile
 10694  131F  1803               	skipnc
 10695  1320  150D               	bsf	13,2	;volatile
 10696                           
 10697                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10698  1321  0021               	movlb	1	; select bank1
 10699  1322  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10700  1323  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 10701  1324  1D03               	btfss	3,2
 10702  1325  2B29               	goto	u5420
 10703  1326  0027               	movlb	7	; select bank7
 10704  1327  148D               	bsf	13,1	;volatile
 10705  1328  2B2B               	goto	l5270
 10706  1329                     u5420:	
 10707  1329  0027               	movlb	7	; select bank7
 10708  132A  108D               	bcf	13,1	;volatile
 10709  132B                     l5270:	
 10710                           
 10711                           ;SwitchBypass.c: 142: wait_ms(20);
 10712  132B  3014               	movlw	20
 10713  132C  0021               	movlb	1	; select bank1
 10714  132D  00AC               	movwf	wait_ms@timeSec^(0+128)
 10715  132E  3000               	movlw	0
 10716  132F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10717  1330  319F  27CE  3193   	fcall	_wait_ms
 10718                           
 10719                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10720  1333  0027               	movlb	7	; select bank7
 10721  1334  110D               	bcf	13,2	;volatile
 10722                           
 10723                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10724  1335  108D               	bcf	13,1	;volatile
 10725                           
 10726                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10727  1336  0020               	movlb	0	; select bank0
 10728  1337  0869               	movf	_switchBypass_state,w
 10729  1338  0021               	movlb	1	; select bank1
 10730  1339  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10731  133A  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10732  133B  0834               	movf	??_setSwitchBypassState^(0+128),w
 10733  133C  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 10734  133D  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 10735  133E  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 10736  133F  3187  27FF  3193   	fcall	_updateSwitchBypassState
 10737                           
 10738                           ;SwitchBypass.c: 148: wait_ms(20);
 10739  1342  3014               	movlw	20
 10740  1343  0021               	movlb	1	; select bank1
 10741  1344  00AC               	movwf	wait_ms@timeSec^(0+128)
 10742  1345  3000               	movlw	0
 10743  1346  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10744  1347  319F  27CE         	fcall	_wait_ms
 10745  1349  0008               	return
 10746  134A                     __end_of_setSwitchBypassState:	
 10747                           
 10748                           	psect	text29
 10749  1FCE                     __ptext29:	
 10750 ;; *************** function _wait_ms *****************
 10751 ;; Defined at:
 10752 ;;		line 23 in file "system.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;  timeSec         2   12[BANK1 ] unsigned int 
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;  timemsl         4   14[BANK1 ] long 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  1    wreg      void 
 10759 ;; Registers used:
 10760 ;;		wreg, status,2, status,0, pclath, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10766 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10767 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10769 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10770 ;;Total ram usage:        6 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    4
 10773 ;; This function calls:
 10774 ;;		___lmul
 10775 ;; This function is called by:
 10776 ;;		_star_tactiles
 10777 ;;		_solidring_tactiles
 10778 ;;		_read_bottom_tactile
 10779 ;;		_read_top_tactile
 10780 ;;		_setSwitchBypassState
 10781 ;;		_setDoublePressState
 10782 ;;		_showError_Alternating
 10783 ;;		_show_error
 10784 ;;		_show_cancel
 10785 ;;		_ring_tactiles
 10786 ;; This function uses a non-reentrant model
 10787 ;;
 10788                           
 10789                           
 10790                           ;psect for function _wait_ms
 10791  1FCE                     _wait_ms:	
 10792                           
 10793                           ;system.c: 25: long timemsl = 0;
 10794                           
 10795                           ;incstack = 0
 10796                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10797  1FCE  3000               	movlw	0
 10798  1FCF  0021               	movlb	1	; select bank1
 10799  1FD0  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10800  1FD1  3000               	movlw	0
 10801  1FD2  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10802  1FD3  3000               	movlw	0
 10803  1FD4  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10804  1FD5  3000               	movlw	0
 10805  1FD6  00AE               	movwf	wait_ms@timemsl^(0+128)
 10806                           
 10807                           ;system.c: 26: timemsl = timeSec * 1000l;
 10808  1FD7  082C               	movf	wait_ms@timeSec^(0+128),w
 10809  1FD8  00A0               	movwf	___lmul@multiplier^(0+128)
 10810  1FD9  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 10811  1FDA  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 10812  1FDB  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 10813  1FDC  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 10814  1FDD  3000               	movlw	0
 10815  1FDE  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 10816  1FDF  3000               	movlw	0
 10817  1FE0  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 10818  1FE1  3003               	movlw	3
 10819  1FE2  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 10820  1FE3  30E8               	movlw	232
 10821  1FE4  00A4               	movwf	___lmul@multiplicand^(0+128)
 10822  1FE5  319F  279E  319F   	fcall	___lmul
 10823  1FE8  0021               	movlb	1	; select bank1
 10824  1FE9  0823               	movf	(?___lmul+3)^(0+128),w
 10825  1FEA  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10826  1FEB  0822               	movf	(?___lmul+2)^(0+128),w
 10827  1FEC  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10828  1FED  0821               	movf	(?___lmul+1)^(0+128),w
 10829  1FEE  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10830  1FEF  0820               	movf	?___lmul^(0+128),w
 10831  1FF0  00AE               	movwf	wait_ms@timemsl^(0+128)
 10832  1FF1                     l339:	
 10833                           ;system.c: 27: for( ; timemsl; timemsl--);
 10834                           
 10835  1FF1  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 10836  1FF2  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 10837  1FF3  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 10838  1FF4  042E               	iorwf	wait_ms@timemsl^(0+128),w
 10839  1FF5  1903               	btfsc	3,2
 10840  1FF6  0008               	return
 10841  1FF7  30FF               	movlw	255
 10842  1FF8  07AE               	addwf	wait_ms@timemsl^(0+128),f
 10843  1FF9  30FF               	movlw	255
 10844  1FFA  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 10845  1FFB  30FF               	movlw	255
 10846  1FFC  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 10847  1FFD  30FF               	movlw	255
 10848  1FFE  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 10849  1FFF  2FF1               	goto	l339
 10850  2000                     __end_of_wait_ms:	
 10851                           
 10852                           	psect	text30
 10853  1F9E                     __ptext30:	
 10854 ;; *************** function ___lmul *****************
 10855 ;; Defined at:
 10856 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10857 ;; Parameters:    Size  Location     Type
 10858 ;;  multiplier      4    0[BANK1 ] unsigned long 
 10859 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 10860 ;; Auto vars:     Size  Location     Type
 10861 ;;  product         4    8[BANK1 ] unsigned long 
 10862 ;; Return value:  Size  Location     Type
 10863 ;;                  4    0[BANK1 ] unsigned long 
 10864 ;; Registers used:
 10865 ;;		wreg, status,2, status,0
 10866 ;; Tracked objects:
 10867 ;;		On entry : 0/0
 10868 ;;		On exit  : 0/0
 10869 ;;		Unchanged: 0/0
 10870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10871 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10872 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10874 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10875 ;;Total ram usage:       12 bytes
 10876 ;; Hardware stack levels used:    1
 10877 ;; Hardware stack levels required when called:    3
 10878 ;; This function calls:
 10879 ;;		Nothing
 10880 ;; This function is called by:
 10881 ;;		_wait_ms
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           
 10886                           ;psect for function ___lmul
 10887  1F9E                     ___lmul:	
 10888                           
 10889                           ;incstack = 0
 10890                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10891  1F9E  3000               	movlw	0
 10892  1F9F  0021               	movlb	1	; select bank1
 10893  1FA0  00AB               	movwf	(___lmul@product+3)^(0+128)
 10894  1FA1  3000               	movlw	0
 10895  1FA2  00AA               	movwf	(___lmul@product+2)^(0+128)
 10896  1FA3  3000               	movlw	0
 10897  1FA4  00A9               	movwf	(___lmul@product+1)^(0+128)
 10898  1FA5  3000               	movlw	0
 10899  1FA6  00A8               	movwf	___lmul@product^(0+128)
 10900  1FA7                     l4976:	
 10901  1FA7  1C20               	btfss	___lmul@multiplier^(0+128),0
 10902  1FA8  2FB1               	goto	l4980
 10903  1FA9  0824               	movf	___lmul@multiplicand^(0+128),w
 10904  1FAA  07A8               	addwf	___lmul@product^(0+128),f
 10905  1FAB  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 10906  1FAC  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 10907  1FAD  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 10908  1FAE  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 10909  1FAF  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 10910  1FB0  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 10911  1FB1                     l4980:	
 10912  1FB1  3001               	movlw	1
 10913  1FB2                     u5045:	
 10914  1FB2  35A4               	lslf	___lmul@multiplicand^(0+128),f
 10915  1FB3  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 10916  1FB4  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 10917  1FB5  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 10918  1FB6  0B89               	decfsz	9,f
 10919  1FB7  2FB2               	goto	u5045
 10920  1FB8  3001               	movlw	1
 10921  1FB9                     u5055:	
 10922  1FB9  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 10923  1FBA  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 10924  1FBB  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 10925  1FBC  0CA0               	rrf	___lmul@multiplier^(0+128),f
 10926  1FBD  0B89               	decfsz	9,f
 10927  1FBE  2FB9               	goto	u5055
 10928  1FBF  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 10929  1FC0  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 10930  1FC1  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 10931  1FC2  0420               	iorwf	___lmul@multiplier^(0+128),w
 10932  1FC3  1D03               	skipz
 10933  1FC4  2FA7               	goto	l4976
 10934  1FC5  082B               	movf	(___lmul@product+3)^(0+128),w
 10935  1FC6  00A3               	movwf	(?___lmul+3)^(0+128)
 10936  1FC7  082A               	movf	(___lmul@product+2)^(0+128),w
 10937  1FC8  00A2               	movwf	(?___lmul+2)^(0+128)
 10938  1FC9  0829               	movf	(___lmul@product+1)^(0+128),w
 10939  1FCA  00A1               	movwf	(?___lmul+1)^(0+128)
 10940  1FCB  0828               	movf	___lmul@product^(0+128),w
 10941  1FCC  00A0               	movwf	?___lmul^(0+128)
 10942  1FCD  0008               	return
 10943  1FCE                     __end_of___lmul:	
 10944                           
 10945                           	psect	text31
 10946  07FF                     __ptext31:	
 10947 ;; *************** function _updateSwitchBypassState *****************
 10948 ;; Defined at:
 10949 ;;		line 96 in file "state_manager.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  state           2    0[BANK1 ] int 
 10952 ;; Auto vars:     Size  Location     Type
 10953 ;;		None
 10954 ;; Return value:  Size  Location     Type
 10955 ;;                  1    wreg      void 
 10956 ;; Registers used:
 10957 ;;		None
 10958 ;; Tracked objects:
 10959 ;;		On entry : 0/0
 10960 ;;		On exit  : 0/0
 10961 ;;		Unchanged: 0/0
 10962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10963 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10966 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10967 ;;Total ram usage:        2 bytes
 10968 ;; Hardware stack levels used:    1
 10969 ;; Hardware stack levels required when called:    3
 10970 ;; This function calls:
 10971 ;;		Nothing
 10972 ;; This function is called by:
 10973 ;;		_setSwitchBypassState
 10974 ;; This function uses a non-reentrant model
 10975 ;;
 10976                           
 10977                           
 10978                           ;psect for function _updateSwitchBypassState
 10979  07FF                     _updateSwitchBypassState:	
 10980                           
 10981                           ;incstack = 0
 10982                           ; Regs used in _updateSwitchBypassState: []
 10983  07FF  0008               	return
 10984  0800                     __end_of_updateSwitchBypassState:	
 10985                           
 10986                           	psect	text32
 10987  1DB6                     __ptext32:	
 10988 ;; *************** function _getSwitchBypassState *****************
 10989 ;; Defined at:
 10990 ;;		line 103 in file "state_manager.c"
 10991 ;; Parameters:    Size  Location     Type
 10992 ;;		None
 10993 ;; Auto vars:     Size  Location     Type
 10994 ;;		None
 10995 ;; Return value:  Size  Location     Type
 10996 ;;                  2    0[BANK1 ] int 
 10997 ;; Registers used:
 10998 ;;		status,2
 10999 ;; Tracked objects:
 11000 ;;		On entry : 0/0
 11001 ;;		On exit  : 0/0
 11002 ;;		Unchanged: 0/0
 11003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11004 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11007 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11008 ;;Total ram usage:        2 bytes
 11009 ;; Hardware stack levels used:    1
 11010 ;; Hardware stack levels required when called:    3
 11011 ;; This function calls:
 11012 ;;		Nothing
 11013 ;; This function is called by:
 11014 ;;		_initSwitchBypass
 11015 ;; This function uses a non-reentrant model
 11016 ;;
 11017                           
 11018                           
 11019                           ;psect for function _getSwitchBypassState
 11020  1DB6                     _getSwitchBypassState:	
 11021                           
 11022                           ;state_manager.c: 108: return 0;
 11023                           
 11024                           ;incstack = 0
 11025                           ; Regs used in _getSwitchBypassState: [status,2]
 11026  1DB6  0021               	movlb	1	; select bank1
 11027  1DB7  01A0               	clrf	?_getSwitchBypassState^(0+128)
 11028  1DB8  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 11029  1DB9  0008               	return
 11030  1DBA                     __end_of_getSwitchBypassState:	
 11031                           
 11032                           	psect	text33
 11033  1E21                     __ptext33:	
 11034 ;; *************** function _adc_convert *****************
 11035 ;; Defined at:
 11036 ;;		line 122 in file "user.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;  channel         1    wreg     unsigned char 
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  channel         1    3[BANK1 ] unsigned char 
 11041 ;; Return value:  Size  Location     Type
 11042 ;;                  2    0[BANK1 ] unsigned int 
 11043 ;; Registers used:
 11044 ;;		wreg, status,2, status,0
 11045 ;; Tracked objects:
 11046 ;;		On entry : 0/0
 11047 ;;		On exit  : 0/0
 11048 ;;		Unchanged: 0/0
 11049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11050 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11051 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11052 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11053 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11054 ;;Total ram usage:        4 bytes
 11055 ;; Hardware stack levels used:    1
 11056 ;; Hardware stack levels required when called:    3
 11057 ;; This function calls:
 11058 ;;		Nothing
 11059 ;; This function is called by:
 11060 ;;		_main
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           
 11065                           ;psect for function _adc_convert
 11066  1E21                     _adc_convert:	
 11067                           
 11068                           ;incstack = 0
 11069                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11070                           ;adc_convert@channel stored from wreg
 11071  1E21  0021               	movlb	1	; select bank1
 11072  1E22  00A3               	movwf	adc_convert@channel^(0+128)
 11073                           
 11074                           ;user.c: 123: ADCON0bits.CHS = channel;
 11075  1E23  0823               	movf	adc_convert@channel^(0+128),w
 11076  1E24  00A2               	movwf	??_adc_convert^(0+128)
 11077  1E25  0DA2               	rlf	??_adc_convert^(0+128),f
 11078  1E26  0DA2               	rlf	??_adc_convert^(0+128),f
 11079  1E27  081D               	movf	29,w	;volatile
 11080  1E28  0622               	xorwf	??_adc_convert^(0+128),w
 11081  1E29  3983               	andlw	-125
 11082  1E2A  0622               	xorwf	??_adc_convert^(0+128),w
 11083  1E2B  009D               	movwf	29	;volatile
 11084                           
 11085                           ;user.c: 124: ADCON0bits.GO = 0b1;
 11086  1E2C  149D               	bsf	29,1	;volatile
 11087  1E2D                     l523:	
 11088                           ;user.c: 125: while (ADCON0bits.GO_nDONE);
 11089                           
 11090  1E2D  189D               	btfsc	29,1	;volatile
 11091  1E2E  2E2D               	goto	l523
 11092                           
 11093                           ;user.c: 126: return (ADRESH << 8) | ADRESL;
 11094  1E2F  081C               	movf	28,w	;volatile
 11095  1E30  00A1               	movwf	(?_adc_convert+1)^(0+128)
 11096  1E31  081B               	movf	27,w	;volatile
 11097  1E32  00A0               	movwf	?_adc_convert^(0+128)
 11098  1E33  0008               	return
 11099  1E34                     __end_of_adc_convert:	
 11100                           
 11101                           	psect	text34
 11102  155C                     __ptext34:	
 11103 ;; *************** function _ReadSavedSettings *****************
 11104 ;; Defined at:
 11105 ;;		line 199 in file "user.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;		None
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      void 
 11112 ;; Registers used:
 11113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 0/0
 11116 ;;		On exit  : 0/0
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11121 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11122 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11123 ;;Total ram usage:        1 bytes
 11124 ;; Hardware stack levels used:    1
 11125 ;; Hardware stack levels required when called:    4
 11126 ;; This function calls:
 11127 ;;		_FLASH_ReadWord
 11128 ;;		_set_leds_bottom
 11129 ;;		_set_leds_top
 11130 ;; This function is called by:
 11131 ;;		_main
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           
 11136                           ;psect for function _ReadSavedSettings
 11137  155C                     _ReadSavedSettings:	
 11138                           
 11139                           ;user.c: 201: top_push_state = FLASH_ReadWord(0x1F81);
 11140                           
 11141                           ;incstack = 0
 11142                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11143  155C  3081               	movlw	129
 11144  155D  0021               	movlb	1	; select bank1
 11145  155E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11146  155F  301F               	movlw	31
 11147  1560  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11148  1561  319E  2684  3195   	fcall	_FLASH_ReadWord
 11149  1564  0021               	movlb	1	; select bank1
 11150  1565  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11151  1566  0020               	movlb	0	; select bank0
 11152  1567  00E5               	movwf	_top_push_state+1
 11153  1568  0021               	movlb	1	; select bank1
 11154  1569  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11155  156A  0020               	movlb	0	; select bank0
 11156  156B  00E4               	movwf	_top_push_state
 11157                           
 11158                           ;user.c: 202: bottom_push_state = FLASH_ReadWord(0x1F82);
 11159  156C  3082               	movlw	130
 11160  156D  0021               	movlb	1	; select bank1
 11161  156E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11162  156F  301F               	movlw	31
 11163  1570  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11164  1571  319E  2684  3195   	fcall	_FLASH_ReadWord
 11165  1574  0021               	movlb	1	; select bank1
 11166  1575  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11167  1576  0020               	movlb	0	; select bank0
 11168  1577  00E1               	movwf	_bottom_push_state+1
 11169  1578  0021               	movlb	1	; select bank1
 11170  1579  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11171  157A  0020               	movlb	0	; select bank0
 11172  157B  00E0               	movwf	_bottom_push_state
 11173                           
 11174                           ;user.c: 204: if (top_push_state > 6) {
 11175  157C  0865               	movf	_top_push_state+1,w
 11176  157D  3A80               	xorlw	128
 11177  157E  0021               	movlb	1	; select bank1
 11178  157F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11179  1580  3080               	movlw	128
 11180  1581  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11181  1582  1D03               	skipz
 11182  1583  2D87               	goto	u6065
 11183  1584  3007               	movlw	7
 11184  1585  0020               	movlb	0	; select bank0
 11185  1586  0264               	subwf	_top_push_state,w
 11186  1587                     u6065:	
 11187  1587  1C03               	skipc
 11188  1588  2D8E               	goto	l552
 11189                           
 11190                           ;user.c: 206: top_push_state = 6;
 11191  1589  3006               	movlw	6
 11192  158A  0020               	movlb	0	; select bank0
 11193  158B  00E4               	movwf	_top_push_state
 11194  158C  3000               	movlw	0
 11195  158D  00E5               	movwf	_top_push_state+1
 11196  158E                     l552:	
 11197                           
 11198                           ;user.c: 207: }
 11199                           ;user.c: 208: if (bottom_push_state > 6) {
 11200  158E  0020               	movlb	0	; select bank0
 11201  158F  0861               	movf	_bottom_push_state+1,w
 11202  1590  3A80               	xorlw	128
 11203  1591  0021               	movlb	1	; select bank1
 11204  1592  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11205  1593  3080               	movlw	128
 11206  1594  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11207  1595  1D03               	skipz
 11208  1596  2D9A               	goto	u6075
 11209  1597  3007               	movlw	7
 11210  1598  0020               	movlb	0	; select bank0
 11211  1599  0260               	subwf	_bottom_push_state,w
 11212  159A                     u6075:	
 11213  159A  1C03               	skipc
 11214  159B  2DA1               	goto	l5572
 11215                           
 11216                           ;user.c: 210: bottom_push_state = 6;
 11217  159C  3006               	movlw	6
 11218  159D  0020               	movlb	0	; select bank0
 11219  159E  00E0               	movwf	_bottom_push_state
 11220  159F  3000               	movlw	0
 11221  15A0  00E1               	movwf	_bottom_push_state+1
 11222  15A1                     l5572:	
 11223                           
 11224                           ;user.c: 211: }
 11225                           ;user.c: 214: LATGbits.LATG1 = !switchBypass_state;
 11226  15A1  0020               	movlb	0	; select bank0
 11227  15A2  0869               	movf	_switchBypass_state,w
 11228  15A3  1D03               	btfss	3,2
 11229  15A4  2DA8               	goto	u6080
 11230  15A5  0027               	movlb	7	; select bank7
 11231  15A6  148D               	bsf	13,1	;volatile
 11232  15A7  2DAA               	goto	l5574
 11233  15A8                     u6080:	
 11234  15A8  0027               	movlb	7	; select bank7
 11235  15A9  108D               	bcf	13,1	;volatile
 11236  15AA                     l5574:	
 11237                           
 11238                           ;user.c: 215: LATGbits.LATG2 = switchBypass_state;
 11239  15AA  0020               	movlb	0	; select bank0
 11240  15AB  0C69               	rrf	_switchBypass_state,w
 11241  15AC  0027               	movlb	7	; select bank7
 11242  15AD  1C03               	skipc
 11243  15AE  110D               	bcf	13,2	;volatile
 11244  15AF  1803               	skipnc
 11245  15B0  150D               	bsf	13,2	;volatile
 11246                           
 11247                           ;user.c: 216: LATBbits.LATB2 = 0;
 11248  15B1  0022               	movlb	2	; select bank2
 11249  15B2  110D               	bcf	13,2	;volatile
 11250                           
 11251                           ;user.c: 217: LATBbits.LATB3 = 0;
 11252  15B3  118D               	bcf	13,3	;volatile
 11253                           
 11254                           ;user.c: 219: LATBbits.LATB4 = 0;
 11255  15B4  120D               	bcf	13,4	;volatile
 11256                           
 11257                           ;user.c: 220: LATBbits.LATB5 = 0;
 11258  15B5  128D               	bcf	13,5	;volatile
 11259                           
 11260                           ;user.c: 222: LATBbits.LATB1 = 0;
 11261  15B6  108D               	bcf	13,1	;volatile
 11262                           
 11263                           ;user.c: 223: LATBbits.LATB0 = 0;
 11264  15B7  100D               	bcf	13,0	;volatile
 11265                           
 11266                           ;user.c: 226: set_leds_top(top_push_state, 1);
 11267  15B8  0020               	movlb	0	; select bank0
 11268  15B9  0865               	movf	_top_push_state+1,w
 11269  15BA  0021               	movlb	1	; select bank1
 11270  15BB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 11271  15BC  0020               	movlb	0	; select bank0
 11272  15BD  0864               	movf	_top_push_state,w
 11273  15BE  0021               	movlb	1	; select bank1
 11274  15BF  00A0               	movwf	set_leds_top@x^(0+128)
 11275  15C0  3001               	movlw	1
 11276  15C1  00A2               	movwf	set_leds_top@ledState^(0+128)
 11277  15C2  3000               	movlw	0
 11278  15C3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 11279  15C4  3187  27AA  3195   	fcall	_set_leds_top
 11280                           
 11281                           ;user.c: 227: set_leds_bottom(bottom_push_state);
 11282  15C7  0020               	movlb	0	; select bank0
 11283  15C8  0861               	movf	_bottom_push_state+1,w
 11284  15C9  0021               	movlb	1	; select bank1
 11285  15CA  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 11286  15CB  0020               	movlb	0	; select bank0
 11287  15CC  0860               	movf	_bottom_push_state,w
 11288  15CD  0021               	movlb	1	; select bank1
 11289  15CE  00A0               	movwf	set_leds_bottom@x^(0+128)
 11290  15CF  3190  207C         	fcall	_set_leds_bottom
 11291  15D1  0008               	return
 11292  15D2                     __end_of_ReadSavedSettings:	
 11293                           
 11294                           	psect	text35
 11295  07AA                     __ptext35:	
 11296 ;; *************** function _set_leds_top *****************
 11297 ;; Defined at:
 11298 ;;		line 16 in file "LEDs.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;  x               2    0[BANK1 ] int 
 11301 ;;  ledState        2    2[BANK1 ] int 
 11302 ;; Auto vars:     Size  Location     Type
 11303 ;;		None
 11304 ;; Return value:  Size  Location     Type
 11305 ;;                  1    wreg      void 
 11306 ;; Registers used:
 11307 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11308 ;; Tracked objects:
 11309 ;;		On entry : 0/0
 11310 ;;		On exit  : 0/0
 11311 ;;		Unchanged: 0/0
 11312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11313 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11316 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11317 ;;Total ram usage:        4 bytes
 11318 ;; Hardware stack levels used:    1
 11319 ;; Hardware stack levels required when called:    3
 11320 ;; This function calls:
 11321 ;;		Nothing
 11322 ;; This function is called by:
 11323 ;;		_ReadSavedSettings
 11324 ;;		_star_tactiles
 11325 ;;		_solidring_tactiles
 11326 ;;		_read_top_tactile
 11327 ;;		_ring_tactiles
 11328 ;; This function uses a non-reentrant model
 11329 ;;
 11330                           
 11331                           
 11332                           ;psect for function _set_leds_top
 11333  07AA                     _set_leds_top:	
 11334                           
 11335                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11336                           
 11337                           ;incstack = 0
 11338                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11339  07AA  0027               	movlb	7	; select bank7
 11340  07AB  100C               	bcf	12,0	;volatile
 11341                           
 11342                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11343  07AC  108C               	bcf	12,1	;volatile
 11344                           
 11345                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11346  07AD  110C               	bcf	12,2	;volatile
 11347                           
 11348                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11349  07AE  118C               	bcf	12,3	;volatile
 11350                           
 11351                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11352  07AF  120C               	bcf	12,4	;volatile
 11353                           
 11354                           ;LEDs.c: 22: switch (x) {
 11355  07B0  2FE0               	goto	l5034
 11356  07B1                     l5022:	
 11357                           ;LEDs.c: 23: case 1:
 11358                           
 11359                           
 11360                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11361  07B1  0021               	movlb	1	; select bank1
 11362  07B2  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11363  07B3  0027               	movlb	7	; select bank7
 11364  07B4  1C03               	skipc
 11365  07B5  100C               	bcf	12,0	;volatile
 11366  07B6  1803               	skipnc
 11367  07B7  140C               	bsf	12,0	;volatile
 11368                           
 11369                           ;LEDs.c: 25: break;
 11370  07B8  0008               	return
 11371  07B9                     l5024:	
 11372                           ;LEDs.c: 26: case 2:
 11373                           
 11374                           
 11375                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11376  07B9  0021               	movlb	1	; select bank1
 11377  07BA  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11378  07BB  0027               	movlb	7	; select bank7
 11379  07BC  1C03               	skipc
 11380  07BD  108C               	bcf	12,1	;volatile
 11381  07BE  1803               	skipnc
 11382  07BF  148C               	bsf	12,1	;volatile
 11383                           
 11384                           ;LEDs.c: 28: break;
 11385  07C0  0008               	return
 11386  07C1                     l5026:	
 11387                           ;LEDs.c: 29: case 3:
 11388                           
 11389                           
 11390                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11391  07C1  0021               	movlb	1	; select bank1
 11392  07C2  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11393  07C3  0027               	movlb	7	; select bank7
 11394  07C4  1C03               	skipc
 11395  07C5  110C               	bcf	12,2	;volatile
 11396  07C6  1803               	skipnc
 11397  07C7  150C               	bsf	12,2	;volatile
 11398                           
 11399                           ;LEDs.c: 31: break;
 11400  07C8  0008               	return
 11401  07C9                     l5028:	
 11402                           ;LEDs.c: 32: case 4:
 11403                           
 11404                           
 11405                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11406  07C9  0021               	movlb	1	; select bank1
 11407  07CA  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11408  07CB  0027               	movlb	7	; select bank7
 11409  07CC  1C03               	skipc
 11410  07CD  118C               	bcf	12,3	;volatile
 11411  07CE  1803               	skipnc
 11412  07CF  158C               	bsf	12,3	;volatile
 11413                           
 11414                           ;LEDs.c: 34: break;
 11415  07D0  0008               	return
 11416  07D1                     l5030:	
 11417                           ;LEDs.c: 35: case 5:
 11418                           
 11419                           
 11420                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11421  07D1  0021               	movlb	1	; select bank1
 11422  07D2  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11423  07D3  0027               	movlb	7	; select bank7
 11424  07D4  1C03               	skipc
 11425  07D5  120C               	bcf	12,4	;volatile
 11426  07D6  1803               	skipnc
 11427  07D7  160C               	bsf	12,4	;volatile
 11428                           
 11429                           ;LEDs.c: 39: break;
 11430                           
 11431                           ;LEDs.c: 38: case 6:
 11432                           
 11433                           ;LEDs.c: 37: break;
 11434  07D8  0008               	return
 11435  07D9                     l693:	
 11436                           ;LEDs.c: 40: case 100:
 11437                           
 11438                           
 11439                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11440  07D9  0027               	movlb	7	; select bank7
 11441  07DA  140C               	bsf	12,0	;volatile
 11442                           
 11443                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11444  07DB  148C               	bsf	12,1	;volatile
 11445                           
 11446                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11447  07DC  150C               	bsf	12,2	;volatile
 11448                           
 11449                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11450  07DD  158C               	bsf	12,3	;volatile
 11451                           
 11452                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11453  07DE  160C               	bsf	12,4	;volatile
 11454                           
 11455                           ;LEDs.c: 47: }
 11456                           
 11457                           ;LEDs.c: 46: break;
 11458  07DF  0008               	return
 11459  07E0                     l5034:	
 11460                           
 11461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11462                           ; Switch size 1, requested type "space"
 11463                           ; Number of cases is 1, Range of values is 0 to 0
 11464                           ; switch strategies available:
 11465                           ; Name         Instructions Cycles
 11466                           ; simple_byte            4     3 (average)
 11467                           ; direct_byte            8     6 (fixed)
 11468                           ; jumptable            260     6 (fixed)
 11469                           ;	Chosen strategy is simple_byte
 11470  07E0  0021               	movlb	1	; select bank1
 11471  07E1  0821               	movf	(set_leds_top@x+1)^(0+128),w
 11472  07E2  3A00               	xorlw	0	; case 0
 11473  07E3  1903               	skipnz
 11474  07E4  2FE6               	goto	l6298
 11475  07E5  2FFD               	goto	l694
 11476  07E6                     l6298:	
 11477                           
 11478                           ; Switch size 1, requested type "space"
 11479                           ; Number of cases is 7, Range of values is 1 to 100
 11480                           ; switch strategies available:
 11481                           ; Name         Instructions Cycles
 11482                           ; simple_byte           22    12 (average)
 11483                           ; direct_byte          209     9 (fixed)
 11484                           ; jumptable            263     9 (fixed)
 11485                           ;	Chosen strategy is simple_byte
 11486  07E6  0820               	movf	set_leds_top@x^(0+128),w
 11487  07E7  3A01               	xorlw	1	; case 1
 11488  07E8  1903               	skipnz
 11489  07E9  2FB1               	goto	l5022
 11490  07EA  3A03               	xorlw	3	; case 2
 11491  07EB  1903               	skipnz
 11492  07EC  2FB9               	goto	l5024
 11493  07ED  3A01               	xorlw	1	; case 3
 11494  07EE  1903               	skipnz
 11495  07EF  2FC1               	goto	l5026
 11496  07F0  3A07               	xorlw	7	; case 4
 11497  07F1  1903               	skipnz
 11498  07F2  2FC9               	goto	l5028
 11499  07F3  3A01               	xorlw	1	; case 5
 11500  07F4  1903               	skipnz
 11501  07F5  2FD1               	goto	l5030
 11502  07F6  3A03               	xorlw	3	; case 6
 11503  07F7  1903               	skipnz
 11504  07F8  2FFD               	goto	l694
 11505  07F9  3A62               	xorlw	98	; case 100
 11506  07FA  1903               	skipnz
 11507  07FB  2FD9               	goto	l693
 11508  07FC  2FFD               	goto	l694
 11509  07FD                     l694:	
 11510  07FD  0008               	return
 11511  07FE                     __end_of_set_leds_top:	
 11512                           
 11513                           	psect	text36
 11514  107C                     __ptext36:	
 11515 ;; *************** function _set_leds_bottom *****************
 11516 ;; Defined at:
 11517 ;;		line 51 in file "LEDs.c"
 11518 ;; Parameters:    Size  Location     Type
 11519 ;;  x               2    0[BANK1 ] int 
 11520 ;; Auto vars:     Size  Location     Type
 11521 ;;		None
 11522 ;; Return value:  Size  Location     Type
 11523 ;;                  1    wreg      void 
 11524 ;; Registers used:
 11525 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11526 ;; Tracked objects:
 11527 ;;		On entry : 0/0
 11528 ;;		On exit  : 0/0
 11529 ;;		Unchanged: 0/0
 11530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11531 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11534 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11535 ;;Total ram usage:        2 bytes
 11536 ;; Hardware stack levels used:    1
 11537 ;; Hardware stack levels required when called:    3
 11538 ;; This function calls:
 11539 ;;		Nothing
 11540 ;; This function is called by:
 11541 ;;		_ReadSavedSettings
 11542 ;;		_star_tactiles
 11543 ;;		_solidring_tactiles
 11544 ;;		_read_bottom_tactile
 11545 ;;		_ring_tactiles
 11546 ;; This function uses a non-reentrant model
 11547 ;;
 11548                           
 11549                           
 11550                           ;psect for function _set_leds_bottom
 11551  107C                     _set_leds_bottom:	
 11552                           
 11553                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11554                           
 11555                           ;incstack = 0
 11556                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11557  107C  0022               	movlb	2	; select bank2
 11558  107D  100F               	bcf	15,0	;volatile
 11559                           
 11560                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11561  107E  108F               	bcf	15,1	;volatile
 11562                           
 11563                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11564  107F  110F               	bcf	15,2	;volatile
 11565                           
 11566                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11567  1080  118F               	bcf	15,3	;volatile
 11568                           
 11569                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11570  1081  120F               	bcf	15,4	;volatile
 11571                           
 11572                           ;LEDs.c: 57: switch (x) {
 11573  1082  2899               	goto	l5058
 11574  1083                     l698:	
 11575                           ;LEDs.c: 58: case 1:
 11576                           
 11577                           
 11578                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11579  1083  0022               	movlb	2	; select bank2
 11580  1084  140F               	bsf	15,0	;volatile
 11581                           
 11582                           ;LEDs.c: 60: break;
 11583  1085  0008               	return
 11584  1086                     l700:	
 11585                           ;LEDs.c: 61: case 2:
 11586                           
 11587                           
 11588                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11589  1086  0022               	movlb	2	; select bank2
 11590  1087  148F               	bsf	15,1	;volatile
 11591                           
 11592                           ;LEDs.c: 63: break;
 11593  1088  0008               	return
 11594  1089                     l701:	
 11595                           ;LEDs.c: 64: case 3:
 11596                           
 11597                           
 11598                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11599  1089  0022               	movlb	2	; select bank2
 11600  108A  150F               	bsf	15,2	;volatile
 11601                           
 11602                           ;LEDs.c: 66: break;
 11603  108B  0008               	return
 11604  108C                     l702:	
 11605                           ;LEDs.c: 67: case 4:
 11606                           
 11607                           
 11608                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11609  108C  0022               	movlb	2	; select bank2
 11610  108D  158F               	bsf	15,3	;volatile
 11611                           
 11612                           ;LEDs.c: 69: break;
 11613  108E  0008               	return
 11614  108F                     l703:	
 11615                           ;LEDs.c: 70: case 5:
 11616                           
 11617                           
 11618                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11619  108F  0022               	movlb	2	; select bank2
 11620  1090  160F               	bsf	15,4	;volatile
 11621                           
 11622                           ;LEDs.c: 74: break;
 11623                           
 11624                           ;LEDs.c: 73: case 6:
 11625                           
 11626                           ;LEDs.c: 72: break;
 11627  1091  0008               	return
 11628  1092                     l705:	
 11629                           ;LEDs.c: 75: case 100:
 11630                           
 11631                           
 11632                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11633  1092  0022               	movlb	2	; select bank2
 11634  1093  140F               	bsf	15,0	;volatile
 11635                           
 11636                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11637  1094  148F               	bsf	15,1	;volatile
 11638                           
 11639                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11640  1095  150F               	bsf	15,2	;volatile
 11641                           
 11642                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11643  1096  158F               	bsf	15,3	;volatile
 11644                           
 11645                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11646  1097  160F               	bsf	15,4	;volatile
 11647                           
 11648                           ;LEDs.c: 82: }
 11649                           
 11650                           ;LEDs.c: 81: break;
 11651  1098  0008               	return
 11652  1099                     l5058:	
 11653                           
 11654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11655                           ; Switch size 1, requested type "space"
 11656                           ; Number of cases is 1, Range of values is 0 to 0
 11657                           ; switch strategies available:
 11658                           ; Name         Instructions Cycles
 11659                           ; simple_byte            4     3 (average)
 11660                           ; direct_byte            8     6 (fixed)
 11661                           ; jumptable            260     6 (fixed)
 11662                           ;	Chosen strategy is simple_byte
 11663  1099  0021               	movlb	1	; select bank1
 11664  109A  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 11665  109B  3A00               	xorlw	0	; case 0
 11666  109C  1903               	skipnz
 11667  109D  289F               	goto	l6300
 11668  109E  28B6               	goto	l706
 11669  109F                     l6300:	
 11670                           
 11671                           ; Switch size 1, requested type "space"
 11672                           ; Number of cases is 7, Range of values is 1 to 100
 11673                           ; switch strategies available:
 11674                           ; Name         Instructions Cycles
 11675                           ; simple_byte           22    12 (average)
 11676                           ; direct_byte          209     9 (fixed)
 11677                           ; jumptable            263     9 (fixed)
 11678                           ;	Chosen strategy is simple_byte
 11679  109F  0820               	movf	set_leds_bottom@x^(0+128),w
 11680  10A0  3A01               	xorlw	1	; case 1
 11681  10A1  1903               	skipnz
 11682  10A2  2883               	goto	l698
 11683  10A3  3A03               	xorlw	3	; case 2
 11684  10A4  1903               	skipnz
 11685  10A5  2886               	goto	l700
 11686  10A6  3A01               	xorlw	1	; case 3
 11687  10A7  1903               	skipnz
 11688  10A8  2889               	goto	l701
 11689  10A9  3A07               	xorlw	7	; case 4
 11690  10AA  1903               	skipnz
 11691  10AB  288C               	goto	l702
 11692  10AC  3A01               	xorlw	1	; case 5
 11693  10AD  1903               	skipnz
 11694  10AE  288F               	goto	l703
 11695  10AF  3A03               	xorlw	3	; case 6
 11696  10B0  1903               	skipnz
 11697  10B1  28B6               	goto	l706
 11698  10B2  3A62               	xorlw	98	; case 100
 11699  10B3  1903               	skipnz
 11700  10B4  2892               	goto	l705
 11701  10B5  28B6               	goto	l706
 11702  10B6                     l706:	
 11703  10B6  0008               	return
 11704  10B7                     __end_of_set_leds_bottom:	
 11705                           
 11706                           	psect	text37
 11707  1E84                     __ptext37:	
 11708 ;; *************** function _FLASH_ReadWord *****************
 11709 ;; Defined at:
 11710 ;;		line 58 in file "memory.c"
 11711 ;; Parameters:    Size  Location     Type
 11712 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 11713 ;; Auto vars:     Size  Location     Type
 11714 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 11715 ;; Return value:  Size  Location     Type
 11716 ;;                  2    0[BANK1 ] unsigned int 
 11717 ;; Registers used:
 11718 ;;		wreg, status,2, status,0
 11719 ;; Tracked objects:
 11720 ;;		On entry : 0/0
 11721 ;;		On exit  : 0/0
 11722 ;;		Unchanged: 0/0
 11723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11724 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11725 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11727 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11728 ;;Total ram usage:        3 bytes
 11729 ;; Hardware stack levels used:    1
 11730 ;; Hardware stack levels required when called:    3
 11731 ;; This function calls:
 11732 ;;		Nothing
 11733 ;; This function is called by:
 11734 ;;		_ReadSavedSettings
 11735 ;;		_FLASH_WriteWord
 11736 ;; This function uses a non-reentrant model
 11737 ;;
 11738                           
 11739                           
 11740                           ;psect for function _FLASH_ReadWord
 11741  1E84                     _FLASH_ReadWord:	
 11742                           
 11743                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11744                           
 11745                           ;incstack = 0
 11746                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11747  1E84  3000               	movlw	0
 11748  1E85  1B8B               	btfsc	11,7	;volatile
 11749  1E86  3001               	movlw	1
 11750  1E87  0021               	movlb	1	; select bank1
 11751  1E88  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 11752                           
 11753                           ;memory.c: 61: INTCONbits.GIE = 0;
 11754  1E89  138B               	bcf	11,7	;volatile
 11755                           
 11756                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11757  1E8A  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 11758  1E8B  0023               	movlb	3	; select bank3
 11759  1E8C  0091               	movwf	17	;volatile
 11760                           
 11761                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11762  1E8D  0021               	movlb	1	; select bank1
 11763  1E8E  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 11764  1E8F  0023               	movlb	3	; select bank3
 11765  1E90  0092               	movwf	18	;volatile
 11766                           
 11767                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11768  1E91  1315               	bcf	21,6	;volatile
 11769                           
 11770                           ;memory.c: 66: PMCON1bits.RD = 1;
 11771  1E92  1415               	bsf	21,0	;volatile
 11772                           
 11773                           ;memory.c: 67: __nop();
 11774  1E93  0000               	nop
 11775                           
 11776                           ;memory.c: 68: __nop();
 11777  1E94  0000               	nop
 11778                           
 11779                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11780  1E95  0021               	movlb	1	; select bank1
 11781  1E96  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 11782  1E97  1C03               	skipc
 11783  1E98  138B               	bcf	11,7	;volatile
 11784  1E99  1803               	skipnc
 11785  1E9A  178B               	bsf	11,7	;volatile
 11786                           
 11787                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11788  1E9B  0023               	movlb	3	; select bank3
 11789  1E9C  0814               	movf	20,w	;volatile
 11790  1E9D  0021               	movlb	1	; select bank1
 11791  1E9E  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 11792  1E9F  0023               	movlb	3	; select bank3
 11793  1EA0  0813               	movf	19,w	;volatile
 11794  1EA1  0021               	movlb	1	; select bank1
 11795  1EA2  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 11796  1EA3  0008               	return
 11797  1EA4                     __end_of_FLASH_ReadWord:	
 11798                           
 11799                           	psect	text38
 11800  1EC6                     __ptext38:	
 11801 ;; *************** function _InitializeTaps *****************
 11802 ;; Defined at:
 11803 ;;		line 193 in file "user.c"
 11804 ;; Parameters:    Size  Location     Type
 11805 ;;		None
 11806 ;; Auto vars:     Size  Location     Type
 11807 ;;  itap            2    1[BANK1 ] int 
 11808 ;; Return value:  Size  Location     Type
 11809 ;;                  1    wreg      void 
 11810 ;; Registers used:
 11811 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11812 ;; Tracked objects:
 11813 ;;		On entry : 0/0
 11814 ;;		On exit  : 0/0
 11815 ;;		Unchanged: 0/0
 11816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11818 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11819 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11820 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11821 ;;Total ram usage:        3 bytes
 11822 ;; Hardware stack levels used:    1
 11823 ;; Hardware stack levels required when called:    3
 11824 ;; This function calls:
 11825 ;;		Nothing
 11826 ;; This function is called by:
 11827 ;;		_main
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           
 11832                           ;psect for function _InitializeTaps
 11833  1EC6                     _InitializeTaps:	
 11834                           
 11835                           ;user.c: 194: for (int itap = 0; itap < 12; itap++) {
 11836                           
 11837                           ;incstack = 0
 11838                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11839  1EC6  0021               	movlb	1	; select bank1
 11840  1EC7  01A1               	clrf	InitializeTaps@itap^(0+128)
 11841  1EC8  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 11842  1EC9                     L12:	
 11843  1EC9  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 11844  1ECA  3A80               	xorlw	128
 11845  1ECB  00A0               	movwf	??_InitializeTaps^(0+128)
 11846  1ECC  3080               	movlw	128
 11847  1ECD  0220               	subwf	??_InitializeTaps^(0+128),w
 11848  1ECE  1D03               	skipz
 11849  1ECF  2ED2               	goto	u6035
 11850  1ED0  300C               	movlw	12
 11851  1ED1  0221               	subwf	InitializeTaps@itap^(0+128),w
 11852  1ED2                     u6035:	
 11853  1ED2  1803               	btfsc	3,0
 11854  1ED3  0008               	return
 11855                           
 11856                           ;user.c: 195: tap[itap] = 0;
 11857  1ED4  0021               	movlb	1	; select bank1
 11858  1ED5  0821               	movf	InitializeTaps@itap^(0+128),w
 11859  1ED6  00A0               	movwf	??_InitializeTaps^(0+128)
 11860  1ED7  3001               	movlw	1
 11861  1ED8                     u6045:	
 11862  1ED8  35A0               	lslf	??_InitializeTaps^(0+128),f
 11863  1ED9  3EFF               	addlw	-1
 11864  1EDA  1D03               	skipz
 11865  1EDB  2ED8               	goto	u6045
 11866  1EDC  3520               	lslf	??_InitializeTaps^(0+128),w
 11867  1EDD  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 11868  1EDE  0086               	movwf	6
 11869  1EDF  3002               	movlw	2	; select bank5/6
 11870  1EE0  0087               	movwf	7
 11871  1EE1  3000               	movlw	0
 11872  1EE2  3FC0               	movwi [0]fsr1
 11873  1EE3  3000               	movlw	0
 11874  1EE4  3FC1               	movwi [1]fsr1
 11875  1EE5  3FC2               	movwi [2]fsr1
 11876  1EE6  3FC3               	movwi [3]fsr1
 11877  1EE7  3001               	movlw	1
 11878  1EE8  07A1               	addwf	InitializeTaps@itap^(0+128),f
 11879  1EE9  3000               	movlw	0
 11880  1EEA  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 11881  1EEB  2EC9               	goto	L12
 11882  1EEC                     __end_of_InitializeTaps:	
 11883                           
 11884                           	psect	text39
 11885  1F6E                     __ptext39:	
 11886 ;; *************** function _InitApp *****************
 11887 ;; Defined at:
 11888 ;;		line 23 in file "user.c"
 11889 ;; Parameters:    Size  Location     Type
 11890 ;;		None
 11891 ;; Auto vars:     Size  Location     Type
 11892 ;;		None
 11893 ;; Return value:  Size  Location     Type
 11894 ;;                  1    wreg      void 
 11895 ;; Registers used:
 11896 ;;		wreg, status,2, status,0, pclath, cstack
 11897 ;; Tracked objects:
 11898 ;;		On entry : 0/0
 11899 ;;		On exit  : 0/0
 11900 ;;		Unchanged: 0/0
 11901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11906 ;;Total ram usage:        0 bytes
 11907 ;; Hardware stack levels used:    1
 11908 ;; Hardware stack levels required when called:    5
 11909 ;; This function calls:
 11910 ;;		_init_adc
 11911 ;;		_init_pwm
 11912 ;; This function is called by:
 11913 ;;		_main
 11914 ;; This function uses a non-reentrant model
 11915 ;;
 11916                           
 11917                           
 11918                           ;psect for function _InitApp
 11919  1F6E                     _InitApp:	
 11920                           
 11921                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 11922                           
 11923                           ;incstack = 0
 11924                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 11925  1F6E  0021               	movlb	1	; select bank1
 11926  1F6F  100D               	bcf	13,0	;volatile
 11927                           
 11928                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 11929  1F70  108D               	bcf	13,1	;volatile
 11930                           
 11931                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 11932  1F71  110D               	bcf	13,2	;volatile
 11933                           
 11934                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 11935  1F72  118D               	bcf	13,3	;volatile
 11936                           
 11937                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 11938  1F73  120D               	bcf	13,4	;volatile
 11939                           
 11940                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 11941  1F74  128D               	bcf	13,5	;volatile
 11942                           
 11943                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 11944  1F75  140E               	bsf	14,0	;volatile
 11945                           
 11946                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 11947  1F76  120E               	bcf	14,4	;volatile
 11948                           
 11949                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 11950  1F77  128E               	bcf	14,5	;volatile
 11951                           
 11952                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 11953  1F78  100F               	bcf	15,0	;volatile
 11954                           
 11955                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 11956  1F79  108F               	bcf	15,1	;volatile
 11957                           
 11958                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 11959  1F7A  110F               	bcf	15,2	;volatile
 11960                           
 11961                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 11962  1F7B  118F               	bcf	15,3	;volatile
 11963                           
 11964                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 11965  1F7C  120F               	bcf	15,4	;volatile
 11966                           
 11967                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 11968  1F7D  168F               	bsf	15,5	;volatile
 11969                           
 11970                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 11971  1F7E  170F               	bsf	15,6	;volatile
 11972                           
 11973                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 11974  1F7F  178F               	bsf	15,7	;volatile
 11975                           
 11976                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 11977  1F80  1410               	bsf	16,0	;volatile
 11978                           
 11979                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 11980  1F81  1490               	bsf	16,1	;volatile
 11981                           
 11982                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 11983  1F82  0023               	movlb	3	; select bank3
 11984  1F83  1010               	bcf	16,0	;volatile
 11985                           
 11986                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 11987  1F84  1090               	bcf	16,1	;volatile
 11988                           
 11989                           ;user.c: 53: PORTEbits.RE0 = 0;
 11990  1F85  0020               	movlb	0	; select bank0
 11991  1F86  1010               	bcf	16,0	;volatile
 11992                           
 11993                           ;user.c: 54: PORTEbits.RE1 = 0;
 11994  1F87  1090               	bcf	16,1	;volatile
 11995                           
 11996                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 11997  1F88  0026               	movlb	6	; select bank6
 11998  1F89  100C               	bcf	12,0	;volatile
 11999                           
 12000                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12001  1F8A  108C               	bcf	12,1	;volatile
 12002                           
 12003                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12004  1F8B  110C               	bcf	12,2	;volatile
 12005                           
 12006                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12007  1F8C  118C               	bcf	12,3	;volatile
 12008                           
 12009                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12010  1F8D  120C               	bcf	12,4	;volatile
 12011                           
 12012                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12013  1F8E  128C               	bcf	12,5	;volatile
 12014                           
 12015                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12016  1F8F  170C               	bsf	12,6	;volatile
 12017                           
 12018                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12019  1F90  0028               	movlb	8	; select bank8
 12020  1F91  130C               	bcf	12,6	;volatile
 12021                           
 12022                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12023  1F92  0026               	movlb	6	; select bank6
 12024  1F93  108D               	bcf	13,1	;volatile
 12025                           
 12026                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12027  1F94  110D               	bcf	13,2	;volatile
 12028                           
 12029                           ;user.c: 68: init_adc();
 12030  1F95  319D  25D3  319F   	fcall	_init_adc
 12031                           
 12032                           ;user.c: 69: init_pwm();
 12033  1F98  3191  21EF         	fcall	_init_pwm
 12034                           
 12035                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12036  1F9A  178B               	bsf	11,7	;volatile
 12037                           
 12038                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12039  1F9B  168B               	bsf	11,5	;volatile
 12040                           
 12041                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12042  1F9C  110B               	bcf	11,2	;volatile
 12043  1F9D  0008               	return
 12044  1F9E                     __end_of_InitApp:	
 12045                           
 12046                           	psect	text40
 12047  11EF                     __ptext40:	
 12048 ;; *************** function _init_pwm *****************
 12049 ;; Defined at:
 12050 ;;		line 129 in file "user.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;		None
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  1    wreg      void 
 12057 ;; Registers used:
 12058 ;;		wreg, status,2, status,0, pclath, cstack
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12068 ;;Total ram usage:        0 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; Hardware stack levels required when called:    4
 12071 ;; This function calls:
 12072 ;;		_init_timer0
 12073 ;;		_init_timer2
 12074 ;; This function is called by:
 12075 ;;		_InitApp
 12076 ;; This function uses a non-reentrant model
 12077 ;;
 12078                           
 12079                           
 12080                           ;psect for function _init_pwm
 12081  11EF                     _init_pwm:	
 12082                           
 12083                           ;user.c: 130: APFCONbits.CCP2SEL = 0;
 12084                           
 12085                           ;incstack = 0
 12086                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12087  11EF  0022               	movlb	2	; select bank2
 12088  11F0  101D               	bcf	29,0	;volatile
 12089                           
 12090                           ;user.c: 131: TRISCbits.TRISC2 = 0;
 12091  11F1  0021               	movlb	1	; select bank1
 12092  11F2  110E               	bcf	14,2	;volatile
 12093                           
 12094                           ;user.c: 132: TRISCbits.TRISC1 = 0;
 12095  11F3  108E               	bcf	14,1	;volatile
 12096                           
 12097                           ;user.c: 133: TRISGbits.TRISG0 = 0;
 12098  11F4  0026               	movlb	6	; select bank6
 12099  11F5  100D               	bcf	13,0	;volatile
 12100                           
 12101                           ;user.c: 134: TRISGbits.TRISG3 = 0;
 12102  11F6  118D               	bcf	13,3	;volatile
 12103                           
 12104                           ;user.c: 135: TRISGbits.TRISG4 = 0;
 12105  11F7  120D               	bcf	13,4	;volatile
 12106                           
 12107                           ;user.c: 136: TRISEbits.TRISE6 = 0;
 12108  11F8  0021               	movlb	1	; select bank1
 12109  11F9  1310               	bcf	16,6	;volatile
 12110                           
 12111                           ;user.c: 137: TRISEbits.TRISE5 = 0;
 12112  11FA  1290               	bcf	16,5	;volatile
 12113                           
 12114                           ;user.c: 138: TRISEbits.TRISE4 = 0;
 12115  11FB  1210               	bcf	16,4	;volatile
 12116                           
 12117                           ;user.c: 139: TRISEbits.TRISE3 = 0;
 12118  11FC  1190               	bcf	16,3	;volatile
 12119                           
 12120                           ;user.c: 140: TRISEbits.TRISE2 = 0;
 12121  11FD  1110               	bcf	16,2	;volatile
 12122                           
 12123                           ;user.c: 141: CCP1CONbits.CCP1M = 0b1111;
 12124  11FE  300F               	movlw	15
 12125  11FF  0025               	movlb	5	; select bank5
 12126  1200  0493               	iorwf	19,f	;volatile
 12127                           
 12128                           ;user.c: 142: CCP2CONbits.CCP2M = 0b1111;
 12129  1201  300F               	movlw	15
 12130  1202  049A               	iorwf	26,f	;volatile
 12131                           
 12132                           ;user.c: 143: CCP3CONbits.CCP3M = 0b1111;
 12133  1203  300F               	movlw	15
 12134  1204  0026               	movlb	6	; select bank6
 12135  1205  0493               	iorwf	19,f	;volatile
 12136                           
 12137                           ;user.c: 144: CCP4CONbits.CCP4M = 0b1111;
 12138  1206  300F               	movlw	15
 12139  1207  049A               	iorwf	26,f	;volatile
 12140                           
 12141                           ;user.c: 145: CCP5CONbits.CCP5M = 0b1111;
 12142  1208  300F               	movlw	15
 12143  1209  049E               	iorwf	30,f	;volatile
 12144                           
 12145                           ;user.c: 146: CCP6CONbits.CCP6M = 0b1111;
 12146  120A  300F               	movlw	15
 12147  120B  002C               	movlb	12	; select bank12
 12148  120C  0493               	iorwf	19,f	;volatile
 12149                           
 12150                           ;user.c: 147: CCP7CONbits.CCP7M = 0b1111;
 12151  120D  300F               	movlw	15
 12152  120E  0496               	iorwf	22,f	;volatile
 12153                           
 12154                           ;user.c: 148: CCP8CONbits.CCP8M = 0b1111;
 12155  120F  300F               	movlw	15
 12156  1210  0499               	iorwf	25,f	;volatile
 12157                           
 12158                           ;user.c: 149: CCP9CONbits.CCP9M = 0b1111;
 12159  1211  300F               	movlw	15
 12160  1212  049C               	iorwf	28,f	;volatile
 12161                           
 12162                           ;user.c: 150: CCP10CONbits.CCP10M = 0b1111;
 12163  1213  300F               	movlw	15
 12164  1214  049F               	iorwf	31,f	;volatile
 12165                           
 12166                           ;user.c: 151: CCPTMRS0 = 0b00000000;
 12167  1215  0025               	movlb	5	; select bank5
 12168  1216  019D               	clrf	29	;volatile
 12169                           
 12170                           ;user.c: 152: CCPTMRS1 = 0b00000000;
 12171  1217  019E               	clrf	30	;volatile
 12172                           
 12173                           ;user.c: 153: CCPTMRS2 = 0b00000000;
 12174  1218  019F               	clrf	31	;volatile
 12175                           
 12176                           ;user.c: 154: CCPR1 = 50;
 12177  1219  3000               	movlw	0
 12178  121A  0092               	movwf	18	;volatile
 12179  121B  3032               	movlw	50
 12180  121C  0091               	movwf	17	;volatile
 12181                           
 12182                           ;user.c: 155: CCPR2 = 100;
 12183  121D  3000               	movlw	0
 12184  121E  0099               	movwf	25	;volatile
 12185  121F  3064               	movlw	100
 12186  1220  0098               	movwf	24	;volatile
 12187                           
 12188                           ;user.c: 156: CCPR3 = 150;
 12189  1221  3000               	movlw	0
 12190  1222  0026               	movlb	6	; select bank6
 12191  1223  0092               	movwf	18	;volatile
 12192  1224  3096               	movlw	150
 12193  1225  0091               	movwf	17	;volatile
 12194                           
 12195                           ;user.c: 157: CCPR4 = 200;
 12196  1226  3000               	movlw	0
 12197  1227  0099               	movwf	25	;volatile
 12198  1228  30C8               	movlw	200
 12199  1229  0098               	movwf	24	;volatile
 12200                           
 12201                           ;user.c: 158: init_timer2();
 12202  122A  319D  25C1  3191   	fcall	_init_timer2
 12203                           
 12204                           ;user.c: 159: init_timer0();
 12205  122D  319D  25BA         	fcall	_init_timer0
 12206  122F  0008               	return
 12207  1230                     __end_of_init_pwm:	
 12208                           
 12209                           	psect	text41
 12210  1DC1                     __ptext41:	
 12211 ;; *************** function _init_timer2 *****************
 12212 ;; Defined at:
 12213 ;;		line 162 in file "user.c"
 12214 ;; Parameters:    Size  Location     Type
 12215 ;;		None
 12216 ;; Auto vars:     Size  Location     Type
 12217 ;;		None
 12218 ;; Return value:  Size  Location     Type
 12219 ;;                  1    wreg      void 
 12220 ;; Registers used:
 12221 ;;		wreg, status,2, status,0
 12222 ;; Tracked objects:
 12223 ;;		On entry : 0/0
 12224 ;;		On exit  : 0/0
 12225 ;;		Unchanged: 0/0
 12226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12230 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12231 ;;Total ram usage:        0 bytes
 12232 ;; Hardware stack levels used:    1
 12233 ;; Hardware stack levels required when called:    3
 12234 ;; This function calls:
 12235 ;;		Nothing
 12236 ;; This function is called by:
 12237 ;;		_init_pwm
 12238 ;; This function uses a non-reentrant model
 12239 ;;
 12240                           
 12241                           
 12242                           ;psect for function _init_timer2
 12243  1DC1                     _init_timer2:	
 12244                           
 12245                           ;user.c: 163: T2CONbits.T2OUTPS = 0b0000;
 12246                           
 12247                           ;incstack = 0
 12248                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12249  1DC1  3087               	movlw	-121
 12250  1DC2  0020               	movlb	0	; select bank0
 12251  1DC3  059C               	andwf	28,f	;volatile
 12252                           
 12253                           ;user.c: 164: T2CONbits.T2CKPS = 0b00;
 12254  1DC4  30FC               	movlw	-4
 12255  1DC5  059C               	andwf	28,f	;volatile
 12256                           
 12257                           ;user.c: 165: PR2 = 0xFF;
 12258  1DC6  30FF               	movlw	255
 12259  1DC7  009B               	movwf	27	;volatile
 12260                           
 12261                           ;user.c: 166: T2CONbits.TMR2ON = 1;
 12262  1DC8  151C               	bsf	28,2	;volatile
 12263  1DC9  0008               	return
 12264  1DCA                     __end_of_init_timer2:	
 12265                           
 12266                           	psect	text42
 12267  1DBA                     __ptext42:	
 12268 ;; *************** function _init_timer0 *****************
 12269 ;; Defined at:
 12270 ;;		line 169 in file "user.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;		None
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;		None
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		None
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12288 ;;Total ram usage:        0 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    3
 12291 ;; This function calls:
 12292 ;;		Nothing
 12293 ;; This function is called by:
 12294 ;;		_init_pwm
 12295 ;; This function uses a non-reentrant model
 12296 ;;
 12297                           
 12298                           
 12299                           ;psect for function _init_timer0
 12300  1DBA                     _init_timer0:	
 12301                           
 12302                           ;user.c: 170: OPTION_REGbits.TMR0CS = 0b0;
 12303                           
 12304                           ;incstack = 0
 12305                           ; Regs used in _init_timer0: []
 12306  1DBA  0021               	movlb	1	; select bank1
 12307  1DBB  1295               	bcf	21,5	;volatile
 12308                           
 12309                           ;user.c: 171: OPTION_REGbits.PSA = 0b0;
 12310  1DBC  1195               	bcf	21,3	;volatile
 12311                           
 12312                           ;user.c: 172: OPTION_REGbits.PS0 = 0b0;
 12313  1DBD  1015               	bcf	21,0	;volatile
 12314                           
 12315                           ;user.c: 173: OPTION_REGbits.PS1 = 0b1;
 12316  1DBE  1495               	bsf	21,1	;volatile
 12317                           
 12318                           ;user.c: 174: OPTION_REGbits.PS2 = 0b0;
 12319  1DBF  1115               	bcf	21,2	;volatile
 12320  1DC0  0008               	return
 12321  1DC1                     __end_of_init_timer0:	
 12322                           
 12323                           	psect	text43
 12324  1DD3                     __ptext43:	
 12325 ;; *************** function _init_adc *****************
 12326 ;; Defined at:
 12327 ;;		line 115 in file "user.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      void 
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0
 12336 ;; Tracked objects:
 12337 ;;		On entry : 0/0
 12338 ;;		On exit  : 0/0
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12345 ;;Total ram usage:        0 bytes
 12346 ;; Hardware stack levels used:    1
 12347 ;; Hardware stack levels required when called:    3
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_InitApp
 12352 ;; This function uses a non-reentrant model
 12353 ;;
 12354                           
 12355                           
 12356                           ;psect for function _init_adc
 12357  1DD3                     _init_adc:	
 12358                           
 12359                           ;user.c: 116: ADCON1bits.ADFM = 0b1;
 12360                           
 12361                           ;incstack = 0
 12362                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12363  1DD3  0021               	movlb	1	; select bank1
 12364  1DD4  179E               	bsf	30,7	;volatile
 12365                           
 12366                           ;user.c: 117: ADCON1bits.ADCS = 0b110;
 12367  1DD5  081E               	movf	30,w	;volatile
 12368  1DD6  398F               	andlw	-113
 12369  1DD7  3860               	iorlw	96
 12370  1DD8  009E               	movwf	30	;volatile
 12371                           
 12372                           ;user.c: 118: ADCON1bits.ADPREF = 0b00;
 12373  1DD9  30FC               	movlw	-4
 12374  1DDA  059E               	andwf	30,f	;volatile
 12375                           
 12376                           ;user.c: 119: ADCON0bits.ADON = 0b1;
 12377  1DDB  141D               	bsf	29,0	;volatile
 12378  1DDC  0008               	return
 12379  1DDD                     __end_of_init_adc:	
 12380                           
 12381                           	psect	text44
 12382  1DB2                     __ptext44:	
 12383 ;; *************** function _ConfigureOscillator *****************
 12384 ;; Defined at:
 12385 ;;		line 18 in file "system.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      void 
 12392 ;; Registers used:
 12393 ;;		wreg, status,2, status,0
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12403 ;;Total ram usage:        0 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    3
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_main
 12410 ;; This function uses a non-reentrant model
 12411 ;;
 12412                           
 12413                           
 12414                           ;psect for function _ConfigureOscillator
 12415  1DB2                     _ConfigureOscillator:	
 12416                           
 12417                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12418                           
 12419                           ;incstack = 0
 12420                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12421  1DB2  30FC               	movlw	-4
 12422  1DB3  0021               	movlb	1	; select bank1
 12423  1DB4  0599               	andwf	25,f	;volatile
 12424  1DB5  0008               	return
 12425  1DB6                     __end_of_ConfigureOscillator:	
 12426                           
 12427                           	psect	intentry
 12428  0004                     __pintentry:	
 12429 ;; *************** function _isr *****************
 12430 ;; Defined at:
 12431 ;;		line 25 in file "interrupts.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;		None
 12434 ;; Auto vars:     Size  Location     Type
 12435 ;;  tmpSubDelay     2   35[BANK0 ] int 
 12436 ;; Return value:  Size  Location     Type
 12437 ;;                  1    wreg      void 
 12438 ;; Registers used:
 12439 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12440 ;; Tracked objects:
 12441 ;;		On entry : 0/0
 12442 ;;		On exit  : 0/0
 12443 ;;		Unchanged: 0/0
 12444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12446 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12447 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12448 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12449 ;;Total ram usage:       11 bytes
 12450 ;; Hardware stack levels used:    1
 12451 ;; Hardware stack levels required when called:    2
 12452 ;; This function calls:
 12453 ;;		___awdiv
 12454 ;;		_modulation
 12455 ;;		i1_set_leds_top
 12456 ;; This function is called by:
 12457 ;;		Interrupt level 1
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461  0004                     _isr:	
 12462                           
 12463                           ;incstack = 0
 12464                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12465  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12466  0005  3180               	pagesel	$
 12467  0006  0020               	movlb	0	; select bank0
 12468  0007  087F               	movf	127,w
 12469  0008  00C2               	movwf	??_isr+8
 12470                           
 12471                           ;interrupts.c: 26: int tmpSubDelay;
 12472                           ;interrupts.c: 28: extern volatile long timer;
 12473                           ;interrupts.c: 29: extern volatile long sub_timer;
 12474                           ;interrupts.c: 30: extern volatile long tap_timer;
 12475                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 12476                           ;interrupts.c: 32: extern int mod_delay_time;
 12477                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 12478                           ;interrupts.c: 36: extern int top_push_state;
 12479                           ;interrupts.c: 37: extern uint8_t feedback_start;
 12480                           ;interrupts.c: 38: extern volatile long mod_timer;
 12481                           ;interrupts.c: 39: extern volatile long delay_time;
 12482  0009  1D0B               	btfss	11,2	;volatile
 12483  000A  2918               	goto	i1l117
 12484                           
 12485                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 12486  000B  085D               	movf	_delay_time+1,w	;volatile
 12487  000C  00C4               	movwf	isr@tmpSubDelay+1
 12488  000D  085C               	movf	_delay_time,w	;volatile
 12489  000E  00C3               	movwf	isr@tmpSubDelay
 12490                           
 12491                           ;interrupts.c: 42: timer = timer + 1;
 12492  000F  3001               	movlw	1
 12493  0010  00BA               	movwf	??_isr
 12494  0011  3000               	movlw	0
 12495  0012  00BB               	movwf	??_isr+1
 12496  0013  3000               	movlw	0
 12497  0014  00BC               	movwf	??_isr+2
 12498  0015  3000               	movlw	0
 12499  0016  00BD               	movwf	??_isr+3
 12500  0017  084D               	movf	_timer,w	;volatile
 12501  0018  07BA               	addwf	??_isr,f
 12502  0019  084E               	movf	_timer+1,w	;volatile
 12503  001A  3DBB               	addwfc	??_isr+1,f
 12504  001B  084F               	movf	_timer+2,w	;volatile
 12505  001C  3DBC               	addwfc	??_isr+2,f
 12506  001D  0850               	movf	_timer+3,w	;volatile
 12507  001E  3DBD               	addwfc	??_isr+3,f
 12508  001F  083D               	movf	??_isr+3,w
 12509  0020  00D0               	movwf	_timer+3	;volatile
 12510  0021  083C               	movf	??_isr+2,w
 12511  0022  00CF               	movwf	_timer+2	;volatile
 12512  0023  083B               	movf	??_isr+1,w
 12513  0024  00CE               	movwf	_timer+1	;volatile
 12514  0025  083A               	movf	??_isr,w
 12515  0026  00CD               	movwf	_timer	;volatile
 12516                           
 12517                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 12518  0027  3001               	movlw	1
 12519  0028  00BA               	movwf	??_isr
 12520  0029  3000               	movlw	0
 12521  002A  00BB               	movwf	??_isr+1
 12522  002B  3000               	movlw	0
 12523  002C  00BC               	movwf	??_isr+2
 12524  002D  3000               	movlw	0
 12525  002E  00BD               	movwf	??_isr+3
 12526  002F  0845               	movf	_sub_timer,w	;volatile
 12527  0030  07BA               	addwf	??_isr,f
 12528  0031  0846               	movf	_sub_timer+1,w	;volatile
 12529  0032  3DBB               	addwfc	??_isr+1,f
 12530  0033  0847               	movf	_sub_timer+2,w	;volatile
 12531  0034  3DBC               	addwfc	??_isr+2,f
 12532  0035  0848               	movf	_sub_timer+3,w	;volatile
 12533  0036  3DBD               	addwfc	??_isr+3,f
 12534  0037  083D               	movf	??_isr+3,w
 12535  0038  00C8               	movwf	_sub_timer+3	;volatile
 12536  0039  083C               	movf	??_isr+2,w
 12537  003A  00C7               	movwf	_sub_timer+2	;volatile
 12538  003B  083B               	movf	??_isr+1,w
 12539  003C  00C6               	movwf	_sub_timer+1	;volatile
 12540  003D  083A               	movf	??_isr,w
 12541  003E  00C5               	movwf	_sub_timer	;volatile
 12542                           
 12543                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 12544  003F  3001               	movlw	1
 12545  0040  00BA               	movwf	??_isr
 12546  0041  3000               	movlw	0
 12547  0042  00BB               	movwf	??_isr+1
 12548  0043  3000               	movlw	0
 12549  0044  00BC               	movwf	??_isr+2
 12550  0045  3000               	movlw	0
 12551  0046  00BD               	movwf	??_isr+3
 12552  0047  0849               	movf	_tap_timer,w	;volatile
 12553  0048  07BA               	addwf	??_isr,f
 12554  0049  084A               	movf	_tap_timer+1,w	;volatile
 12555  004A  3DBB               	addwfc	??_isr+1,f
 12556  004B  084B               	movf	_tap_timer+2,w	;volatile
 12557  004C  3DBC               	addwfc	??_isr+2,f
 12558  004D  084C               	movf	_tap_timer+3,w	;volatile
 12559  004E  3DBD               	addwfc	??_isr+3,f
 12560  004F  083D               	movf	??_isr+3,w
 12561  0050  00CC               	movwf	_tap_timer+3	;volatile
 12562  0051  083C               	movf	??_isr+2,w
 12563  0052  00CB               	movwf	_tap_timer+2	;volatile
 12564  0053  083B               	movf	??_isr+1,w
 12565  0054  00CA               	movwf	_tap_timer+1	;volatile
 12566  0055  083A               	movf	??_isr,w
 12567  0056  00C9               	movwf	_tap_timer	;volatile
 12568                           
 12569                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 12570  0057  3001               	movlw	1
 12571  0058  00BA               	movwf	??_isr
 12572  0059  3000               	movlw	0
 12573  005A  00BB               	movwf	??_isr+1
 12574  005B  3000               	movlw	0
 12575  005C  00BC               	movwf	??_isr+2
 12576  005D  3000               	movlw	0
 12577  005E  00BD               	movwf	??_isr+3
 12578  005F  0023               	movlb	3	; select bank3
 12579  0060  0838               	movf	_mod_timer^(0+384),w	;volatile
 12580  0061  0020               	movlb	0	; select bank0
 12581  0062  07BA               	addwf	??_isr,f
 12582  0063  0023               	movlb	3	; select bank3
 12583  0064  0839               	movf	(_mod_timer+1)^(0+384),w	;volatile
 12584  0065  0020               	movlb	0	; select bank0
 12585  0066  3DBB               	addwfc	??_isr+1,f
 12586  0067  0023               	movlb	3	; select bank3
 12587  0068  083A               	movf	(_mod_timer+2)^(0+384),w	;volatile
 12588  0069  0020               	movlb	0	; select bank0
 12589  006A  3DBC               	addwfc	??_isr+2,f
 12590  006B  0023               	movlb	3	; select bank3
 12591  006C  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 12592  006D  0020               	movlb	0	; select bank0
 12593  006E  3DBD               	addwfc	??_isr+3,f
 12594  006F  083D               	movf	??_isr+3,w
 12595  0070  0023               	movlb	3	; select bank3
 12596  0071  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 12597  0072  0020               	movlb	0	; select bank0
 12598  0073  083C               	movf	??_isr+2,w
 12599  0074  0023               	movlb	3	; select bank3
 12600  0075  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 12601  0076  0020               	movlb	0	; select bank0
 12602  0077  083B               	movf	??_isr+1,w
 12603  0078  0023               	movlb	3	; select bank3
 12604  0079  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 12605  007A  0020               	movlb	0	; select bank0
 12606  007B  083A               	movf	??_isr,w
 12607  007C  0023               	movlb	3	; select bank3
 12608  007D  00B8               	movwf	_mod_timer^(0+384)	;volatile
 12609                           
 12610                           ;interrupts.c: 46: test_timer++;
 12611  007E  3001               	movlw	1
 12612  007F  07C0               	addwf	_test_timer^(0+384),f	;volatile
 12613  0080  3000               	movlw	0
 12614  0081  3DC1               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 12615  0082  3000               	movlw	0
 12616  0083  3DC2               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 12617  0084  3000               	movlw	0
 12618  0085  3DC3               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 12619                           
 12620                           ;interrupts.c: 47: if (feedback_start == 1) {
 12621  0086  0020               	movlb	0	; select bank0
 12622  0087  0354               	decf	_feedback_start,w
 12623  0088  1D03               	btfss	3,2
 12624  0089  28A1               	goto	i1l4466
 12625                           
 12626                           ;interrupts.c: 48: feedback_timer++;
 12627  008A  3001               	movlw	1
 12628  008B  0022               	movlb	2	; select bank2
 12629  008C  07C8               	addwf	_feedback_timer^(0+256),f	;volatile
 12630  008D  3000               	movlw	0
 12631  008E  3DC9               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 12632                           
 12633                           ;interrupts.c: 49: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 12634  008F  0849               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 12635  0090  0020               	movlb	0	; select bank0
 12636  0091  0263               	subwf	_long_press_limit+1,w
 12637  0092  1D03               	skipz
 12638  0093  2898               	goto	u451_25
 12639  0094  0022               	movlb	2	; select bank2
 12640  0095  0848               	movf	_feedback_timer^(0+256),w	;volatile
 12641  0096  0020               	movlb	0	; select bank0
 12642  0097  0262               	subwf	_long_press_limit,w
 12643  0098                     u451_25:	
 12644  0098  1803               	skipnc
 12645  0099  28A1               	goto	i1l4466
 12646  009A  0863               	movf	_long_press_limit+1,w
 12647  009B  0022               	movlb	2	; select bank2
 12648  009C  00C9               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 12649  009D  0020               	movlb	0	; select bank0
 12650  009E  0862               	movf	_long_press_limit,w
 12651  009F  0022               	movlb	2	; select bank2
 12652  00A0  00C8               	movwf	_feedback_timer^(0+256)	;volatile
 12653  00A1                     i1l4466:	
 12654                           
 12655                           ;interrupts.c: 50: }
 12656                           ;interrupts.c: 51: if (longTap_start == 1) {
 12657  00A1  0020               	movlb	0	; select bank0
 12658  00A2  0355               	decf	_longTap_start,w
 12659  00A3  1D03               	btfss	3,2
 12660  00A4  28BC               	goto	i1l4472
 12661                           
 12662                           ;interrupts.c: 52: longTap_timer++;
 12663  00A5  3001               	movlw	1
 12664  00A6  0022               	movlb	2	; select bank2
 12665  00A7  07CE               	addwf	_longTap_timer^(0+256),f	;volatile
 12666  00A8  3000               	movlw	0
 12667  00A9  3DCF               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 12668                           
 12669                           ;interrupts.c: 53: if (longTap_timer > long_press_limit) {
 12670  00AA  084F               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 12671  00AB  0020               	movlb	0	; select bank0
 12672  00AC  0263               	subwf	_long_press_limit+1,w
 12673  00AD  1D03               	skipz
 12674  00AE  28B3               	goto	u453_25
 12675  00AF  0022               	movlb	2	; select bank2
 12676  00B0  084E               	movf	_longTap_timer^(0+256),w	;volatile
 12677  00B1  0020               	movlb	0	; select bank0
 12678  00B2  0262               	subwf	_long_press_limit,w
 12679  00B3                     u453_25:	
 12680  00B3  1803               	skipnc
 12681  00B4  28BC               	goto	i1l4472
 12682                           
 12683                           ;interrupts.c: 54: longTap_timer = long_press_limit;
 12684  00B5  0863               	movf	_long_press_limit+1,w
 12685  00B6  0022               	movlb	2	; select bank2
 12686  00B7  00CF               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 12687  00B8  0020               	movlb	0	; select bank0
 12688  00B9  0862               	movf	_long_press_limit,w
 12689  00BA  0022               	movlb	2	; select bank2
 12690  00BB  00CE               	movwf	_longTap_timer^(0+256)	;volatile
 12691  00BC                     i1l4472:	
 12692                           
 12693                           ;interrupts.c: 55: }
 12694                           ;interrupts.c: 56: }
 12695                           ;interrupts.c: 57: INTCONbits.TMR0IF = 0;
 12696  00BC  110B               	bcf	11,2	;volatile
 12697                           
 12698                           ;interrupts.c: 59: if (adjust_sub_delay == 1) {
 12699  00BD  0023               	movlb	3	; select bank3
 12700  00BE  0344               	decf	_adjust_sub_delay^(0+384),w
 12701  00BF  0445               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 12702  00C0  1D03               	btfss	3,2
 12703  00C1  2918               	goto	i1l117
 12704                           
 12705                           ;interrupts.c: 60: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 12706  00C2  0020               	movlb	0	; select bank0
 12707  00C3  0848               	movf	_sub_timer+3,w	;volatile
 12708  00C4  3A80               	xorlw	128
 12709  00C5  00BA               	movwf	??_isr
 12710  00C6  085F               	movf	_delay_time+3,w	;volatile
 12711  00C7  3A80               	xorlw	128
 12712  00C8  023A               	subwf	??_isr,w
 12713  00C9  1D03               	skipz
 12714  00CA  28D5               	goto	u455_23
 12715  00CB  085E               	movf	_delay_time+2,w	;volatile
 12716  00CC  0247               	subwf	_sub_timer+2,w	;volatile
 12717  00CD  1D03               	skipz
 12718  00CE  28D5               	goto	u455_23
 12719  00CF  085D               	movf	_delay_time+1,w	;volatile
 12720  00D0  0246               	subwf	_sub_timer+1,w	;volatile
 12721  00D1  1D03               	skipz
 12722  00D2  28D5               	goto	u455_23
 12723  00D3  085C               	movf	_delay_time,w	;volatile
 12724  00D4  0245               	subwf	_sub_timer,w	;volatile
 12725  00D5                     u455_23:	
 12726  00D5  1C03               	skipc
 12727  00D6  2918               	goto	i1l117
 12728  00D7  0858               	movf	_baseline_delay_time,w	;volatile
 12729  00D8  00BA               	movwf	??_isr
 12730  00D9  0859               	movf	_baseline_delay_time+1,w	;volatile
 12731  00DA  00BB               	movwf	??_isr+1
 12732  00DB  085A               	movf	_baseline_delay_time+2,w	;volatile
 12733  00DC  00BC               	movwf	??_isr+2
 12734  00DD  085B               	movf	_baseline_delay_time+3,w	;volatile
 12735  00DE  00BD               	movwf	??_isr+3
 12736  00DF  094D               	comf	_timer,w	;volatile
 12737  00E0  00BE               	movwf	??_isr+4
 12738  00E1  094E               	comf	_timer+1,w	;volatile
 12739  00E2  00BF               	movwf	??_isr+5
 12740  00E3  094F               	comf	_timer+2,w	;volatile
 12741  00E4  00C0               	movwf	??_isr+6
 12742  00E5  0950               	comf	_timer+3,w	;volatile
 12743  00E6  00C1               	movwf	??_isr+7
 12744  00E7  0ABE               	incf	??_isr+4,f
 12745  00E8  1903               	skipnz
 12746  00E9  0ABF               	incf	??_isr+5,f
 12747  00EA  1903               	skipnz
 12748  00EB  0AC0               	incf	??_isr+6,f
 12749  00EC  1903               	skipnz
 12750  00ED  0AC1               	incf	??_isr+7,f
 12751  00EE  083E               	movf	??_isr+4,w
 12752  00EF  07BA               	addwf	??_isr,f
 12753  00F0  083F               	movf	??_isr+5,w
 12754  00F1  3DBB               	addwfc	??_isr+1,f
 12755  00F2  0840               	movf	??_isr+6,w
 12756  00F3  3DBC               	addwfc	??_isr+2,f
 12757  00F4  0841               	movf	??_isr+7,w
 12758  00F5  3DBD               	addwfc	??_isr+3,f
 12759  00F6  1BBD               	btfsc	??_isr+3,7
 12760  00F7  2905               	goto	i1l4480
 12761  00F8  083D               	movf	??_isr+3,w
 12762  00F9  1D03               	btfss	3,2
 12763  00FA  2918               	goto	i1l117
 12764  00FB  083C               	movf	??_isr+2,w
 12765  00FC  1D03               	btfss	3,2
 12766  00FD  2918               	goto	i1l117
 12767  00FE  083B               	movf	??_isr+1,w
 12768  00FF  1D03               	btfss	3,2
 12769  0100  2918               	goto	i1l117
 12770  0101  3004               	movlw	4
 12771  0102  023A               	subwf	??_isr,w
 12772  0103  1803               	btfsc	3,0
 12773  0104  2918               	goto	i1l117
 12774  0105                     i1l4480:	
 12775                           
 12776                           ;interrupts.c: 61: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 12777  0105  094D               	comf	_timer,w	;volatile
 12778  0106  00BA               	movwf	??_isr
 12779  0107  094E               	comf	_timer+1,w	;volatile
 12780  0108  00BB               	movwf	??_isr+1
 12781  0109  0ABA               	incf	??_isr,f
 12782  010A  1903               	skipnz
 12783  010B  0ABB               	incf	??_isr+1,f
 12784  010C  0858               	movf	_baseline_delay_time,w	;volatile
 12785  010D  073A               	addwf	??_isr,w
 12786  010E  00BC               	movwf	??_isr+2
 12787  010F  0859               	movf	_baseline_delay_time+1,w	;volatile
 12788  0110  3D3B               	addwfc	??_isr+1,w
 12789  0111  00BD               	movwf	??_isr+3
 12790  0112  0845               	movf	_sub_timer,w	;volatile
 12791  0113  073C               	addwf	??_isr+2,w
 12792  0114  00C3               	movwf	isr@tmpSubDelay
 12793  0115  0846               	movf	_sub_timer+1,w	;volatile
 12794  0116  3D3D               	addwfc	??_isr+3,w
 12795  0117  00C4               	movwf	isr@tmpSubDelay+1
 12796  0118                     i1l117:	
 12797                           
 12798                           ;interrupts.c: 62: }
 12799                           ;interrupts.c: 63: }
 12800                           ;interrupts.c: 64: }
 12801                           ;interrupts.c: 77: if (longTap_state < 1 && doubleTap_state < 1) {
 12802  0118  0020               	movlb	0	; select bank0
 12803  0119  0867               	movf	_longTap_state,w	;volatile
 12804  011A  1D03               	btfss	3,2
 12805  011B  2975               	goto	i1l4504
 12806  011C  0853               	movf	_doubleTap_state,w	;volatile
 12807  011D  1D03               	btfss	3,2
 12808  011E  2975               	goto	i1l4504
 12809                           
 12810                           ;interrupts.c: 80: if (timer >= baseline_delay_time) {
 12811  011F  0850               	movf	_timer+3,w	;volatile
 12812  0120  3A80               	xorlw	128
 12813  0121  00BA               	movwf	??_isr
 12814  0122  085B               	movf	_baseline_delay_time+3,w	;volatile
 12815  0123  3A80               	xorlw	128
 12816  0124  023A               	subwf	??_isr,w
 12817  0125  1D03               	skipz
 12818  0126  2931               	goto	u459_23
 12819  0127  085A               	movf	_baseline_delay_time+2,w	;volatile
 12820  0128  024F               	subwf	_timer+2,w	;volatile
 12821  0129  1D03               	skipz
 12822  012A  2931               	goto	u459_23
 12823  012B  0859               	movf	_baseline_delay_time+1,w	;volatile
 12824  012C  024E               	subwf	_timer+1,w	;volatile
 12825  012D  1D03               	skipz
 12826  012E  2931               	goto	u459_23
 12827  012F  0858               	movf	_baseline_delay_time,w	;volatile
 12828  0130  024D               	subwf	_timer,w	;volatile
 12829  0131                     u459_23:	
 12830  0131  1C03               	skipc
 12831  0132  2963               	goto	i1l4500
 12832                           
 12833                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 12834  0133  0022               	movlb	2	; select bank2
 12835  0134  160D               	bsf	13,4	;volatile
 12836                           
 12837                           ;interrupts.c: 85: timer = 0;
 12838  0135  3000               	movlw	0
 12839  0136  0020               	movlb	0	; select bank0
 12840  0137  00D0               	movwf	_timer+3	;volatile
 12841  0138  3000               	movlw	0
 12842  0139  00CF               	movwf	_timer+2	;volatile
 12843  013A  3000               	movlw	0
 12844  013B  00CE               	movwf	_timer+1	;volatile
 12845  013C  3000               	movlw	0
 12846  013D  00CD               	movwf	_timer	;volatile
 12847                           
 12848                           ;interrupts.c: 86: if (reset_sub_delay == 1) {
 12849  013E  0023               	movlb	3	; select bank3
 12850  013F  035C               	decf	_reset_sub_delay^(0+384),w
 12851  0140  045D               	iorwf	(_reset_sub_delay+1)^(0+384),w
 12852  0141  1D03               	btfss	3,2
 12853  0142  2963               	goto	i1l4500
 12854                           
 12855                           ;interrupts.c: 88: CCPR1 = delay_counter;
 12856  0143  0022               	movlb	2	; select bank2
 12857  0144  0847               	movf	(_delay_counter+1)^(0+256),w	;volatile
 12858  0145  0025               	movlb	5	; select bank5
 12859  0146  0092               	movwf	18	;volatile
 12860  0147  0022               	movlb	2	; select bank2
 12861  0148  0846               	movf	_delay_counter^(0+256),w	;volatile
 12862  0149  0025               	movlb	5	; select bank5
 12863  014A  0091               	movwf	17	;volatile
 12864                           
 12865                           ;interrupts.c: 91: mod_counter = 0;
 12866  014B  0020               	movlb	0	; select bank0
 12867  014C  01D1               	clrf	_mod_counter
 12868  014D  01D2               	clrf	_mod_counter+1
 12869                           
 12870                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 12871  014E  0023               	movlb	3	; select bank3
 12872  014F  0865               	movf	_mod_delay_time^(0+384),w
 12873  0150  00B8               	movwf	_mod_timer^(0+384)	;volatile
 12874  0151  0866               	movf	(_mod_delay_time+1)^(0+384),w
 12875  0152  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 12876  0153  0D89               	rlf	9,f
 12877  0154  3B89               	subwfb	9,f
 12878  0155  0989               	comf	9,f
 12879  0156  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 12880  0157  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 12881                           
 12882                           ;interrupts.c: 94: reset_sub_delay = 0;
 12883  0158  01DC               	clrf	_reset_sub_delay^(0+384)
 12884  0159  01DD               	clrf	(_reset_sub_delay+1)^(0+384)
 12885                           
 12886                           ;interrupts.c: 95: sub_timer = delay_time;
 12887  015A  0020               	movlb	0	; select bank0
 12888  015B  085F               	movf	_delay_time+3,w	;volatile
 12889  015C  00C8               	movwf	_sub_timer+3	;volatile
 12890  015D  085E               	movf	_delay_time+2,w	;volatile
 12891  015E  00C7               	movwf	_sub_timer+2	;volatile
 12892  015F  085D               	movf	_delay_time+1,w	;volatile
 12893  0160  00C6               	movwf	_sub_timer+1	;volatile
 12894  0161  085C               	movf	_delay_time,w	;volatile
 12895  0162  00C5               	movwf	_sub_timer	;volatile
 12896  0163                     i1l4500:	
 12897                           
 12898                           ;interrupts.c: 96: }
 12899                           ;interrupts.c: 97: }
 12900                           ;interrupts.c: 99: if (timer >= 30) {
 12901  0163  0020               	movlb	0	; select bank0
 12902  0164  1BD0               	btfsc	_timer+3,7	;volatile
 12903  0165  2975               	goto	i1l4504
 12904  0166  0850               	movf	_timer+3,w	;volatile
 12905  0167  1D03               	btfss	3,2
 12906  0168  2973               	goto	i1l4502
 12907  0169  084F               	movf	_timer+2,w	;volatile
 12908  016A  1D03               	btfss	3,2
 12909  016B  2973               	goto	i1l4502
 12910  016C  084E               	movf	_timer+1,w	;volatile
 12911  016D  1D03               	btfss	3,2
 12912  016E  2973               	goto	i1l4502
 12913  016F  301E               	movlw	30
 12914  0170  024D               	subwf	_timer,w	;volatile
 12915  0171  1C03               	btfss	3,0
 12916  0172  2975               	goto	i1l4504
 12917  0173                     i1l4502:	
 12918                           
 12919                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 12920  0173  0022               	movlb	2	; select bank2
 12921  0174  120D               	bcf	13,4	;volatile
 12922  0175                     i1l4504:	
 12923                           
 12924                           ;interrupts.c: 103: }
 12925                           ;interrupts.c: 104: }
 12926                           ;interrupts.c: 107: if (sub_timer >= tmpSubDelay) {
 12927  0175  0020               	movlb	0	; select bank0
 12928  0176  0843               	movf	isr@tmpSubDelay,w
 12929  0177  00BA               	movwf	??_isr
 12930  0178  0844               	movf	isr@tmpSubDelay+1,w
 12931  0179  00BB               	movwf	??_isr+1
 12932  017A  3000               	movlw	0
 12933  017B  1BBB               	btfsc	??_isr+1,7
 12934  017C  30FF               	movlw	255
 12935  017D  00BC               	movwf	??_isr+2
 12936  017E  00BD               	movwf	??_isr+3
 12937  017F  0848               	movf	_sub_timer+3,w	;volatile
 12938  0180  3A80               	xorlw	128
 12939  0181  00BE               	movwf	??_isr+4
 12940  0182  083D               	movf	??_isr+3,w
 12941  0183  3A80               	xorlw	128
 12942  0184  023E               	subwf	??_isr+4,w
 12943  0185  1D03               	skipz
 12944  0186  2991               	goto	u462_23
 12945  0187  083C               	movf	??_isr+2,w
 12946  0188  0247               	subwf	_sub_timer+2,w	;volatile
 12947  0189  1D03               	skipz
 12948  018A  2991               	goto	u462_23
 12949  018B  083B               	movf	??_isr+1,w
 12950  018C  0246               	subwf	_sub_timer+1,w	;volatile
 12951  018D  1D03               	skipz
 12952  018E  2991               	goto	u462_23
 12953  018F  083A               	movf	??_isr,w
 12954  0190  0245               	subwf	_sub_timer,w	;volatile
 12955  0191                     u462_23:	
 12956  0191  1C03               	skipc
 12957  0192  29AE               	goto	i1l4514
 12958                           
 12959                           ;interrupts.c: 108: if (suspend_blink == 0) {
 12960  0193  0856               	movf	_suspend_blink,w	;volatile
 12961  0194  1D03               	btfss	3,2
 12962  0195  29A1               	goto	i1l4510
 12963                           
 12964                           ;interrupts.c: 109: set_leds_top(top_push_state, 1);
 12965  0196  0865               	movf	_top_push_state+1,w
 12966  0197  00F1               	movwf	i1set_leds_top@x+1
 12967  0198  0864               	movf	_top_push_state,w
 12968  0199  00F0               	movwf	i1set_leds_top@x
 12969  019A  3001               	movlw	1
 12970  019B  00F2               	movwf	i1set_leds_top@ledState
 12971  019C  3000               	movlw	0
 12972  019D  00F3               	movwf	i1set_leds_top@ledState+1
 12973  019E  3192  22B8  3180   	fcall	i1_set_leds_top
 12974  01A1                     i1l4510:	
 12975                           
 12976                           ;interrupts.c: 110: }
 12977                           ;interrupts.c: 111: tmpSubDelay = delay_time;
 12978  01A1  0020               	movlb	0	; select bank0
 12979  01A2  085D               	movf	_delay_time+1,w	;volatile
 12980  01A3  00C4               	movwf	isr@tmpSubDelay+1
 12981  01A4  085C               	movf	_delay_time,w	;volatile
 12982  01A5  00C3               	movwf	isr@tmpSubDelay
 12983                           
 12984                           ;interrupts.c: 112: sub_timer = 0;
 12985  01A6  3000               	movlw	0
 12986  01A7  00C8               	movwf	_sub_timer+3	;volatile
 12987  01A8  3000               	movlw	0
 12988  01A9  00C7               	movwf	_sub_timer+2	;volatile
 12989  01AA  3000               	movlw	0
 12990  01AB  00C6               	movwf	_sub_timer+1	;volatile
 12991  01AC  3000               	movlw	0
 12992  01AD  00C5               	movwf	_sub_timer	;volatile
 12993  01AE                     i1l4514:	
 12994                           
 12995                           ;interrupts.c: 113: }
 12996                           ;interrupts.c: 115: if (sub_timer >= 20) {
 12997  01AE  1BC8               	btfsc	_sub_timer+3,7	;volatile
 12998  01AF  29CA               	goto	i1l4520
 12999  01B0  0848               	movf	_sub_timer+3,w	;volatile
 13000  01B1  1D03               	btfss	3,2
 13001  01B2  29BD               	goto	i1l4516
 13002  01B3  0847               	movf	_sub_timer+2,w	;volatile
 13003  01B4  1D03               	btfss	3,2
 13004  01B5  29BD               	goto	i1l4516
 13005  01B6  0846               	movf	_sub_timer+1,w	;volatile
 13006  01B7  1D03               	btfss	3,2
 13007  01B8  29BD               	goto	i1l4516
 13008  01B9  3014               	movlw	20
 13009  01BA  0245               	subwf	_sub_timer,w	;volatile
 13010  01BB  1C03               	btfss	3,0
 13011  01BC  29CA               	goto	i1l4520
 13012  01BD                     i1l4516:	
 13013                           
 13014                           ;interrupts.c: 116: if (suspend_blink == 0) {
 13015  01BD  0856               	movf	_suspend_blink,w	;volatile
 13016  01BE  1D03               	btfss	3,2
 13017  01BF  29CA               	goto	i1l4520
 13018                           
 13019                           ;interrupts.c: 117: set_leds_top(top_push_state, 0);
 13020  01C0  0865               	movf	_top_push_state+1,w
 13021  01C1  00F1               	movwf	i1set_leds_top@x+1
 13022  01C2  0864               	movf	_top_push_state,w
 13023  01C3  00F0               	movwf	i1set_leds_top@x
 13024  01C4  3000               	movlw	0
 13025  01C5  00F2               	movwf	i1set_leds_top@ledState
 13026  01C6  00F3               	movwf	i1set_leds_top@ledState+1
 13027  01C7  3192  22B8  3180   	fcall	i1_set_leds_top
 13028  01CA                     i1l4520:	
 13029                           
 13030                           ;interrupts.c: 118: }
 13031                           ;interrupts.c: 119: }
 13032                           ;interrupts.c: 131: if (mod_timer >= mod_delay_time) {
 13033  01CA  0023               	movlb	3	; select bank3
 13034  01CB  0865               	movf	_mod_delay_time^(0+384),w
 13035  01CC  0020               	movlb	0	; select bank0
 13036  01CD  00BA               	movwf	??_isr
 13037  01CE  0023               	movlb	3	; select bank3
 13038  01CF  0866               	movf	(_mod_delay_time+1)^(0+384),w
 13039  01D0  0020               	movlb	0	; select bank0
 13040  01D1  00BB               	movwf	??_isr+1
 13041  01D2  3000               	movlw	0
 13042  01D3  1BBB               	btfsc	??_isr+1,7
 13043  01D4  30FF               	movlw	255
 13044  01D5  00BC               	movwf	??_isr+2
 13045  01D6  00BD               	movwf	??_isr+3
 13046  01D7  0023               	movlb	3	; select bank3
 13047  01D8  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13048  01D9  3A80               	xorlw	128
 13049  01DA  0020               	movlb	0	; select bank0
 13050  01DB  00BE               	movwf	??_isr+4
 13051  01DC  083D               	movf	??_isr+3,w
 13052  01DD  3A80               	xorlw	128
 13053  01DE  023E               	subwf	??_isr+4,w
 13054  01DF  0023               	movlb	3	; select bank3
 13055  01E0  1D03               	skipz
 13056  01E1  29F2               	goto	u466_23
 13057  01E2  0020               	movlb	0	; select bank0
 13058  01E3  083C               	movf	??_isr+2,w
 13059  01E4  0023               	movlb	3	; select bank3
 13060  01E5  023A               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 13061  01E6  1D03               	skipz
 13062  01E7  29F2               	goto	u466_23
 13063  01E8  0020               	movlb	0	; select bank0
 13064  01E9  083B               	movf	??_isr+1,w
 13065  01EA  0023               	movlb	3	; select bank3
 13066  01EB  0239               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 13067  01EC  1D03               	skipz
 13068  01ED  29F2               	goto	u466_23
 13069  01EE  0020               	movlb	0	; select bank0
 13070  01EF  083A               	movf	??_isr,w
 13071  01F0  0023               	movlb	3	; select bank3
 13072  01F1  0238               	subwf	_mod_timer^(0+384),w	;volatile
 13073  01F2                     u466_23:	
 13074  01F2  1C03               	skipc
 13075  01F3  2AA4               	goto	i1l4564
 13076                           
 13077                           ;interrupts.c: 132: mod_timer = 0;
 13078  01F4  3000               	movlw	0
 13079  01F5  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13080  01F6  3000               	movlw	0
 13081  01F7  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13082  01F8  3000               	movlw	0
 13083  01F9  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13084  01FA  3000               	movlw	0
 13085  01FB  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13086                           
 13087                           ;interrupts.c: 135: if (mod_counter >= 60) {
 13088  01FC  0020               	movlb	0	; select bank0
 13089  01FD  0852               	movf	_mod_counter+1,w
 13090  01FE  3A80               	xorlw	128
 13091  01FF  00BA               	movwf	??_isr
 13092  0200  3080               	movlw	128
 13093  0201  023A               	subwf	??_isr,w
 13094  0202  1D03               	skipz
 13095  0203  2A06               	goto	u467_25
 13096  0204  303C               	movlw	60
 13097  0205  0251               	subwf	_mod_counter,w
 13098  0206                     u467_25:	
 13099  0206  1C03               	skipc
 13100  0207  2A4A               	goto	i1l4556
 13101                           
 13102                           ;interrupts.c: 136: mod_counter = 0;
 13103  0208  0020               	movlb	0	; select bank0
 13104  0209  01D1               	clrf	_mod_counter
 13105  020A  01D2               	clrf	_mod_counter+1
 13106                           
 13107                           ;interrupts.c: 137: }
 13108                           ;interrupts.c: 149: switch (bottom_push_state) {
 13109  020B  2A4A               	goto	i1l4556
 13110  020C                     i1l4526:	
 13111                           ;interrupts.c: 150: case 1:
 13112                           
 13113                           
 13114                           ;interrupts.c: 151: mod_value = (int)mod1[mod_counter];
 13115  020C  0851               	movf	_mod_counter,w
 13116  020D  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13117  020E  2A11               	goto	L14
 13118  020F                     i1l4530:	
 13119                           ;interrupts.c: 154: case 2:
 13120                           
 13121                           ;interrupts.c: 153: break;
 13122                           
 13123                           ;interrupts.c: 152: PORTCbits.RC4 = 0;
 13124                           
 13125                           
 13126                           ;interrupts.c: 155: mod_value = (int)mod2[mod_counter];
 13127  020F  0851               	movf	_mod_counter,w
 13128  0210  3EA0               	addlw	(low (_mod2| (0+768)))& (0+255)
 13129  0211                     L14:	
 13130  0211  0086               	movwf	6
 13131  0212  3003               	movlw	3	; select bank7/8
 13132  0213  2A18               	goto	L15
 13133  0214                     i1l4534:	
 13134                           ;interrupts.c: 158: case 3:
 13135                           
 13136                           ;interrupts.c: 157: break;
 13137                           
 13138                           ;interrupts.c: 156: PORTCbits.RC4 = 0;
 13139                           
 13140                           
 13141                           ;interrupts.c: 159: mod_value = (int)mod3[mod_counter];
 13142  0214  0851               	movf	_mod_counter,w
 13143  0215  3E20               	addlw	(low (_mod3| (0+1024)))& (0+255)
 13144  0216  0086               	movwf	6
 13145  0217  3004               	movlw	4	; select bank8/9
 13146  0218                     L15:	
 13147  0218  0087               	movwf	7
 13148  0219  0801               	movf	1,w
 13149  021A  0023               	movlb	3	; select bank3
 13150  021B  00DA               	movwf	_mod_value^(0+384)
 13151  021C  01DB               	clrf	(_mod_value+1)^(0+384)
 13152  021D  1BDA               	btfsc	_mod_value^(0+384),7
 13153  021E  03DB               	decf	(_mod_value+1)^(0+384),f
 13154  021F  2A47               	goto	i1l4552
 13155  0220                     i1l4538:	
 13156                           ;interrupts.c: 162: case 4:
 13157                           
 13158                           ;interrupts.c: 161: break;
 13159                           
 13160                           ;interrupts.c: 160: PORTCbits.RC4 = 0;
 13161                           
 13162                           
 13163                           ;interrupts.c: 163: if (mod_counter <31) {
 13164  0220  0852               	movf	_mod_counter+1,w
 13165  0221  3A80               	xorlw	128
 13166  0222  00BA               	movwf	??_isr
 13167  0223  3080               	movlw	128
 13168  0224  023A               	subwf	??_isr,w
 13169  0225  1D03               	skipz
 13170  0226  2A29               	goto	u468_25
 13171  0227  301F               	movlw	31
 13172  0228  0251               	subwf	_mod_counter,w
 13173  0229                     u468_25:	
 13174  0229  1803               	skipnc
 13175  022A  2A30               	goto	i1l4542
 13176                           
 13177                           ;interrupts.c: 164: mod_value = 100;
 13178  022B  3064               	movlw	100
 13179  022C  0023               	movlb	3	; select bank3
 13180  022D  00DA               	movwf	_mod_value^(0+384)
 13181  022E  3000               	movlw	0
 13182  022F  2A34               	goto	L13
 13183  0230                     i1l4542:	
 13184                           ;interrupts.c: 165: } else {
 13185                           
 13186                           
 13187                           ;interrupts.c: 166: mod_value = -100;
 13188  0230  309C               	movlw	156
 13189  0231  0023               	movlb	3	; select bank3
 13190  0232  00DA               	movwf	_mod_value^(0+384)
 13191  0233  30FF               	movlw	255
 13192  0234                     L13:	
 13193  0234  00DB               	movwf	(_mod_value^(0+384)+1)
 13194  0235  2A47               	goto	i1l4552
 13195  0236                     i1l4546:	
 13196                           ;interrupts.c: 170: case 5:
 13197                           
 13198                           ;interrupts.c: 169: break;
 13199                           
 13200                           ;interrupts.c: 167: }
 13201                           ;interrupts.c: 168: PORTCbits.RC4 = 0;
 13202                           
 13203                           
 13204                           ;interrupts.c: 171: mod_value = (int)mod1[mod_counter];
 13205  0236  0851               	movf	_mod_counter,w
 13206  0237  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13207  0238  0086               	movwf	6
 13208  0239  3003               	movlw	3	; select bank6/7
 13209  023A  0087               	movwf	7
 13210  023B  0801               	movf	1,w
 13211  023C  0023               	movlb	3	; select bank3
 13212  023D  00DA               	movwf	_mod_value^(0+384)
 13213  023E  01DB               	clrf	(_mod_value+1)^(0+384)
 13214  023F  1BDA               	btfsc	_mod_value^(0+384),7
 13215  0240  03DB               	decf	(_mod_value+1)^(0+384),f
 13216                           
 13217                           ;interrupts.c: 173: PORTCbits.RC4 = 1;
 13218  0241  0020               	movlb	0	; select bank0
 13219  0242  160E               	bsf	14,4	;volatile
 13220                           
 13221                           ;interrupts.c: 175: break;
 13222  0243  2A61               	goto	i1l4558
 13223  0244                     i1l4550:	
 13224                           ;interrupts.c: 176: default:
 13225                           
 13226                           
 13227                           ;interrupts.c: 177: mod_value = 0;
 13228  0244  0023               	movlb	3	; select bank3
 13229  0245  01DA               	clrf	_mod_value^(0+384)
 13230  0246  01DB               	clrf	(_mod_value+1)^(0+384)
 13231  0247                     i1l4552:	
 13232                           
 13233                           ;interrupts.c: 178: PORTCbits.RC4 = 0;
 13234  0247  0020               	movlb	0	; select bank0
 13235  0248  120E               	bcf	14,4	;volatile
 13236                           
 13237                           ;interrupts.c: 180: }
 13238                           
 13239                           ;interrupts.c: 179: break;
 13240  0249  2A61               	goto	i1l4558
 13241  024A                     i1l4556:	
 13242                           
 13243                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13244                           ; Switch size 1, requested type "space"
 13245                           ; Number of cases is 1, Range of values is 0 to 0
 13246                           ; switch strategies available:
 13247                           ; Name         Instructions Cycles
 13248                           ; simple_byte            4     3 (average)
 13249                           ; direct_byte            8     6 (fixed)
 13250                           ; jumptable            260     6 (fixed)
 13251                           ;	Chosen strategy is simple_byte
 13252  024A  0020               	movlb	0	; select bank0
 13253  024B  0861               	movf	_bottom_push_state+1,w
 13254  024C  3A00               	xorlw	0	; case 0
 13255  024D  1903               	skipnz
 13256  024E  2A50               	goto	i1l6302
 13257  024F  2A44               	goto	i1l4550
 13258  0250                     i1l6302:	
 13259                           
 13260                           ; Switch size 1, requested type "space"
 13261                           ; Number of cases is 5, Range of values is 1 to 5
 13262                           ; switch strategies available:
 13263                           ; Name         Instructions Cycles
 13264                           ; simple_byte           16     9 (average)
 13265                           ; direct_byte           19     9 (fixed)
 13266                           ; jumptable            263     9 (fixed)
 13267                           ;	Chosen strategy is simple_byte
 13268  0250  0860               	movf	_bottom_push_state,w
 13269  0251  3A01               	xorlw	1	; case 1
 13270  0252  1903               	skipnz
 13271  0253  2A0C               	goto	i1l4526
 13272  0254  3A03               	xorlw	3	; case 2
 13273  0255  1903               	skipnz
 13274  0256  2A0F               	goto	i1l4530
 13275  0257  3A01               	xorlw	1	; case 3
 13276  0258  1903               	skipnz
 13277  0259  2A14               	goto	i1l4534
 13278  025A  3A07               	xorlw	7	; case 4
 13279  025B  1903               	skipnz
 13280  025C  2A20               	goto	i1l4538
 13281  025D  3A01               	xorlw	1	; case 5
 13282  025E  1903               	skipnz
 13283  025F  2A36               	goto	i1l4546
 13284  0260  2A44               	goto	i1l4550
 13285  0261                     i1l4558:	
 13286                           
 13287                           ;interrupts.c: 196: mod_value = modulation(mod_value, adjusted_pot_value);
 13288  0261  0023               	movlb	3	; select bank3
 13289  0262  085A               	movf	_mod_value^(0+384),w
 13290  0263  0020               	movlb	0	; select bank0
 13291  0264  00AE               	movwf	modulation@x
 13292  0265  0023               	movlb	3	; select bank3
 13293  0266  085B               	movf	(_mod_value+1)^(0+384),w
 13294  0267  0020               	movlb	0	; select bank0
 13295  0268  00AF               	movwf	modulation@x+1
 13296  0269  0D89               	rlf	9,f
 13297  026A  3B89               	subwfb	9,f
 13298  026B  0989               	comf	9,f
 13299  026C  00B0               	movwf	modulation@x+2
 13300  026D  00B1               	movwf	modulation@x+3
 13301  026E  0023               	movlb	3	; select bank3
 13302  026F  0846               	movf	_adjusted_pot_value^(0+384),w
 13303  0270  0020               	movlb	0	; select bank0
 13304  0271  00B2               	movwf	modulation@y
 13305  0272  0023               	movlb	3	; select bank3
 13306  0273  0847               	movf	(_adjusted_pot_value+1)^(0+384),w
 13307  0274  0020               	movlb	0	; select bank0
 13308  0275  00B3               	movwf	modulation@y+1
 13309  0276  0D89               	rlf	9,f
 13310  0277  3B89               	subwfb	9,f
 13311  0278  0989               	comf	9,f
 13312  0279  00B4               	movwf	modulation@y+2
 13313  027A  00B5               	movwf	modulation@y+3
 13314  027B  3191  21AE  3180   	fcall	_modulation
 13315  027E  0020               	movlb	0	; select bank0
 13316  027F  082F               	movf	?_modulation+1,w
 13317  0280  0023               	movlb	3	; select bank3
 13318  0281  00DB               	movwf	(_mod_value+1)^(0+384)
 13319  0282  0020               	movlb	0	; select bank0
 13320  0283  082E               	movf	?_modulation,w
 13321  0284  0023               	movlb	3	; select bank3
 13322  0285  00DA               	movwf	_mod_value^(0+384)
 13323                           
 13324                           ;interrupts.c: 197: CCPR9 = mod_value / 2;
 13325  0286  3002               	movlw	2
 13326  0287  00F0               	movwf	___awdiv@divisor
 13327  0288  3000               	movlw	0
 13328  0289  00F1               	movwf	___awdiv@divisor+1
 13329  028A  085B               	movf	(_mod_value+1)^(0+384),w
 13330  028B  00F3               	movwf	___awdiv@dividend+1
 13331  028C  085A               	movf	_mod_value^(0+384),w
 13332  028D  00F2               	movwf	___awdiv@dividend
 13333  028E  3193  23E5  3180   	fcall	___awdiv
 13334  0291  0871               	movf	?___awdiv+1,w
 13335  0292  002C               	movlb	12	; select bank12
 13336  0293  009B               	movwf	27	;volatile
 13337  0294  0870               	movf	?___awdiv,w
 13338  0295  009A               	movwf	26	;volatile
 13339                           
 13340                           ;interrupts.c: 198: mod_timer = 0;
 13341  0296  3000               	movlw	0
 13342  0297  0023               	movlb	3	; select bank3
 13343  0298  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13344  0299  3000               	movlw	0
 13345  029A  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13346  029B  3000               	movlw	0
 13347  029C  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13348  029D  3000               	movlw	0
 13349  029E  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13350                           
 13351                           ;interrupts.c: 199: mod_counter++;
 13352  029F  3001               	movlw	1
 13353  02A0  0020               	movlb	0	; select bank0
 13354  02A1  07D1               	addwf	_mod_counter,f
 13355  02A2  3000               	movlw	0
 13356  02A3  3DD2               	addwfc	_mod_counter+1,f
 13357  02A4                     i1l4564:	
 13358                           
 13359                           ;interrupts.c: 213: }
 13360                           ;interrupts.c: 238: if (preset_programmning_on == 1) {
 13361  02A4  0022               	movlb	2	; select bank2
 13362  02A5  0357               	decf	_preset_programmning_on^(0+256),w
 13363  02A6  1D03               	btfss	3,2
 13364  02A7  2AD7               	goto	i1l4576
 13365                           
 13366                           ;interrupts.c: 239: preset_blink++;
 13367  02A8  3001               	movlw	1
 13368  02A9  0020               	movlb	0	; select bank0
 13369  02AA  00BA               	movwf	??_isr
 13370  02AB  083A               	movf	??_isr,w
 13371  02AC  0022               	movlb	2	; select bank2
 13372  02AD  07D6               	addwf	_preset_blink^(0+256),f
 13373                           
 13374                           ;interrupts.c: 241: if (preset_blink >= blink_delay) {
 13375  02AE  0023               	movlb	3	; select bank3
 13376  02AF  0862               	movf	(_blink_delay+1)^(0+384),w
 13377  02B0  3A80               	xorlw	128
 13378  02B1  3C80               	sublw	128
 13379  02B2  1D03               	skipz
 13380  02B3  2AB7               	goto	u470_25
 13381  02B4  0861               	movf	_blink_delay^(0+384),w
 13382  02B5  0022               	movlb	2	; select bank2
 13383  02B6  0256               	subwf	_preset_blink^(0+256),w
 13384  02B7                     u470_25:	
 13385  02B7  1C03               	skipc
 13386  02B8  2AD5               	goto	i1l145
 13387                           
 13388                           ;interrupts.c: 242: LATBbits.LATB1 = 1;
 13389  02B9  0022               	movlb	2	; select bank2
 13390  02BA  148D               	bsf	13,1	;volatile
 13391                           
 13392                           ;interrupts.c: 243: if (preset_blink > blink_delay*2) {
 13393  02BB  0023               	movlb	3	; select bank3
 13394  02BC  0862               	movf	(_blink_delay+1)^(0+384),w
 13395  02BD  0020               	movlb	0	; select bank0
 13396  02BE  00BB               	movwf	??_isr+1
 13397  02BF  0023               	movlb	3	; select bank3
 13398  02C0  0861               	movf	_blink_delay^(0+384),w
 13399  02C1  0020               	movlb	0	; select bank0
 13400  02C2  00BA               	movwf	??_isr
 13401  02C3  35BA               	lslf	??_isr,f
 13402  02C4  0DBB               	rlf	??_isr+1,f
 13403  02C5  083B               	movf	??_isr+1,w
 13404  02C6  3A80               	xorlw	128
 13405  02C7  00BC               	movwf	??_isr+2
 13406  02C8  3080               	movlw	128
 13407  02C9  023C               	subwf	??_isr+2,w
 13408  02CA  1D03               	skipz
 13409  02CB  2AD0               	goto	u471_25
 13410  02CC  0022               	movlb	2	; select bank2
 13411  02CD  0856               	movf	_preset_blink^(0+256),w
 13412  02CE  0020               	movlb	0	; select bank0
 13413  02CF  023A               	subwf	??_isr,w
 13414  02D0                     u471_25:	
 13415  02D0  1803               	skipnc
 13416  02D1  2ADC               	goto	i1l150
 13417                           
 13418                           ;interrupts.c: 244: preset_blink = 0;
 13419  02D2  0022               	movlb	2	; select bank2
 13420  02D3  01D6               	clrf	_preset_blink^(0+256)
 13421                           
 13422                           ;interrupts.c: 245: }
 13423                           ;interrupts.c: 247: } else {
 13424  02D4  2ADC               	goto	i1l150
 13425  02D5                     i1l145:	
 13426                           
 13427                           ;interrupts.c: 248: LATBbits.LATB1 = 0;
 13428  02D5  0022               	movlb	2	; select bank2
 13429  02D6  2ADB               	goto	i1l4580
 13430  02D7                     i1l4576:	
 13431                           ;interrupts.c: 249: }
 13432                           ;interrupts.c: 251: } else {
 13433                           
 13434                           
 13435                           ;interrupts.c: 252: if (preset_blink > 0) {
 13436  02D7  0856               	movf	_preset_blink^(0+256),w
 13437  02D8  1903               	btfsc	3,2
 13438  02D9  2ADC               	goto	i1l150
 13439                           
 13440                           ;interrupts.c: 253: preset_blink = 0;
 13441  02DA  01D6               	clrf	_preset_blink^(0+256)
 13442  02DB                     i1l4580:	
 13443                           
 13444                           ;interrupts.c: 254: LATBbits.LATB1 = 0;
 13445  02DB  108D               	bcf	13,1	;volatile
 13446  02DC                     i1l150:	
 13447  02DC  0020               	movlb	0	; select bank0
 13448  02DD  0842               	movf	??_isr+8,w
 13449  02DE  00FF               	movwf	127
 13450  02DF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13451  02E0  0009               	retfie
 13452  02E1                     __end_of_isr:	
 13453                           
 13454                           	psect	text46
 13455  12B8                     __ptext46:	
 13456 ;; *************** function i1_set_leds_top *****************
 13457 ;; Defined at:
 13458 ;;		line 16 in file "LEDs.c"
 13459 ;; Parameters:    Size  Location     Type
 13460 ;;  x               2    0[COMMON] int 
 13461 ;;  ledState        2    2[COMMON] int 
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;		None
 13464 ;; Return value:  Size  Location     Type
 13465 ;;                  1    wreg      void 
 13466 ;; Registers used:
 13467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13473 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13476 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13477 ;;Total ram usage:        4 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; This function calls:
 13480 ;;		Nothing
 13481 ;; This function is called by:
 13482 ;;		_isr
 13483 ;; This function uses a non-reentrant model
 13484 ;;
 13485                           
 13486                           
 13487                           ;psect for function i1_set_leds_top
 13488  12B8                     i1_set_leds_top:	
 13489                           
 13490                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13491                           
 13492                           ;incstack = 0
 13493                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13494  12B8  0027               	movlb	7	; select bank7
 13495  12B9  100C               	bcf	12,0	;volatile
 13496                           
 13497                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13498  12BA  108C               	bcf	12,1	;volatile
 13499                           
 13500                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13501  12BB  110C               	bcf	12,2	;volatile
 13502                           
 13503                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13504  12BC  118C               	bcf	12,3	;volatile
 13505                           
 13506                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13507  12BD  120C               	bcf	12,4	;volatile
 13508                           
 13509                           ;LEDs.c: 22: switch (x) {
 13510  12BE  2AE3               	goto	i1l4450
 13511  12BF                     i1l4438:	
 13512                           ;LEDs.c: 23: case 1:
 13513                           
 13514                           
 13515                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13516  12BF  0C72               	rrf	i1set_leds_top@ledState,w
 13517  12C0  1C03               	skipc
 13518  12C1  100C               	bcf	12,0	;volatile
 13519  12C2  1803               	skipnc
 13520  12C3  140C               	bsf	12,0	;volatile
 13521                           
 13522                           ;LEDs.c: 25: break;
 13523  12C4  0008               	return
 13524  12C5                     i1l4440:	
 13525                           ;LEDs.c: 26: case 2:
 13526                           
 13527                           
 13528                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13529  12C5  0C72               	rrf	i1set_leds_top@ledState,w
 13530  12C6  1C03               	skipc
 13531  12C7  108C               	bcf	12,1	;volatile
 13532  12C8  1803               	skipnc
 13533  12C9  148C               	bsf	12,1	;volatile
 13534                           
 13535                           ;LEDs.c: 28: break;
 13536  12CA  0008               	return
 13537  12CB                     i1l4442:	
 13538                           ;LEDs.c: 29: case 3:
 13539                           
 13540                           
 13541                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13542  12CB  0C72               	rrf	i1set_leds_top@ledState,w
 13543  12CC  1C03               	skipc
 13544  12CD  110C               	bcf	12,2	;volatile
 13545  12CE  1803               	skipnc
 13546  12CF  150C               	bsf	12,2	;volatile
 13547                           
 13548                           ;LEDs.c: 31: break;
 13549  12D0  0008               	return
 13550  12D1                     i1l4444:	
 13551                           ;LEDs.c: 32: case 4:
 13552                           
 13553                           
 13554                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13555  12D1  0C72               	rrf	i1set_leds_top@ledState,w
 13556  12D2  1C03               	skipc
 13557  12D3  118C               	bcf	12,3	;volatile
 13558  12D4  1803               	skipnc
 13559  12D5  158C               	bsf	12,3	;volatile
 13560                           
 13561                           ;LEDs.c: 34: break;
 13562  12D6  0008               	return
 13563  12D7                     i1l4446:	
 13564                           ;LEDs.c: 35: case 5:
 13565                           
 13566                           
 13567                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13568  12D7  0C72               	rrf	i1set_leds_top@ledState,w
 13569  12D8  1C03               	skipc
 13570  12D9  120C               	bcf	12,4	;volatile
 13571  12DA  1803               	skipnc
 13572  12DB  160C               	bsf	12,4	;volatile
 13573                           
 13574                           ;LEDs.c: 39: break;
 13575                           
 13576                           ;LEDs.c: 38: case 6:
 13577                           
 13578                           ;LEDs.c: 37: break;
 13579  12DC  0008               	return
 13580  12DD                     i1l693:	
 13581                           ;LEDs.c: 40: case 100:
 13582                           
 13583                           
 13584                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13585  12DD  140C               	bsf	12,0	;volatile
 13586                           
 13587                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13588  12DE  148C               	bsf	12,1	;volatile
 13589                           
 13590                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13591  12DF  150C               	bsf	12,2	;volatile
 13592                           
 13593                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13594  12E0  158C               	bsf	12,3	;volatile
 13595                           
 13596                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13597  12E1  160C               	bsf	12,4	;volatile
 13598                           
 13599                           ;LEDs.c: 47: }
 13600                           
 13601                           ;LEDs.c: 46: break;
 13602  12E2  0008               	return
 13603  12E3                     i1l4450:	
 13604                           
 13605                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13606                           ; Switch size 1, requested type "space"
 13607                           ; Number of cases is 1, Range of values is 0 to 0
 13608                           ; switch strategies available:
 13609                           ; Name         Instructions Cycles
 13610                           ; simple_byte            4     3 (average)
 13611                           ; direct_byte            8     6 (fixed)
 13612                           ; jumptable            260     6 (fixed)
 13613                           ;	Chosen strategy is simple_byte
 13614  12E3  0871               	movf	i1set_leds_top@x+1,w
 13615  12E4  3A00               	xorlw	0	; case 0
 13616  12E5  1903               	skipnz
 13617  12E6  2AE8               	goto	i1l6304
 13618  12E7  2AFF               	goto	i1l694
 13619  12E8                     i1l6304:	
 13620                           
 13621                           ; Switch size 1, requested type "space"
 13622                           ; Number of cases is 7, Range of values is 1 to 100
 13623                           ; switch strategies available:
 13624                           ; Name         Instructions Cycles
 13625                           ; simple_byte           22    12 (average)
 13626                           ; direct_byte          209     9 (fixed)
 13627                           ; jumptable            263     9 (fixed)
 13628                           ;	Chosen strategy is simple_byte
 13629  12E8  0870               	movf	i1set_leds_top@x,w
 13630  12E9  3A01               	xorlw	1	; case 1
 13631  12EA  1903               	skipnz
 13632  12EB  2ABF               	goto	i1l4438
 13633  12EC  3A03               	xorlw	3	; case 2
 13634  12ED  1903               	skipnz
 13635  12EE  2AC5               	goto	i1l4440
 13636  12EF  3A01               	xorlw	1	; case 3
 13637  12F0  1903               	skipnz
 13638  12F1  2ACB               	goto	i1l4442
 13639  12F2  3A07               	xorlw	7	; case 4
 13640  12F3  1903               	skipnz
 13641  12F4  2AD1               	goto	i1l4444
 13642  12F5  3A01               	xorlw	1	; case 5
 13643  12F6  1903               	skipnz
 13644  12F7  2AD7               	goto	i1l4446
 13645  12F8  3A03               	xorlw	3	; case 6
 13646  12F9  1903               	skipnz
 13647  12FA  2AFF               	goto	i1l694
 13648  12FB  3A62               	xorlw	98	; case 100
 13649  12FC  1903               	skipnz
 13650  12FD  2ADD               	goto	i1l693
 13651  12FE  2AFF               	goto	i1l694
 13652  12FF                     i1l694:	
 13653  12FF  0008               	return
 13654  1300                     __end_ofi1_set_leds_top:	
 13655                           
 13656                           	psect	text47
 13657  11AE                     __ptext47:	
 13658 ;; *************** function _modulation *****************
 13659 ;; Defined at:
 13660 ;;		line 187 in file "user.c"
 13661 ;; Parameters:    Size  Location     Type
 13662 ;;  x               4   14[BANK0 ] long 
 13663 ;;  y               4   18[BANK0 ] long 
 13664 ;; Auto vars:     Size  Location     Type
 13665 ;;		None
 13666 ;; Return value:  Size  Location     Type
 13667 ;;                  4   14[BANK0 ] long 
 13668 ;; Registers used:
 13669 ;;		wreg, status,2, status,0, pclath, cstack
 13670 ;; Tracked objects:
 13671 ;;		On entry : 0/0
 13672 ;;		On exit  : 0/0
 13673 ;;		Unchanged: 0/0
 13674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13675 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13677 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13678 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13679 ;;Total ram usage:       12 bytes
 13680 ;; Hardware stack levels used:    1
 13681 ;; Hardware stack levels required when called:    1
 13682 ;; This function calls:
 13683 ;;		i1___aldiv
 13684 ;;		i1___lmul
 13685 ;; This function is called by:
 13686 ;;		_isr
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function _modulation
 13692  11AE                     _modulation:	
 13693                           
 13694                           ;user.c: 190: return (127500 + (y * x)) / 1000;
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 13698  11AE  3000               	movlw	0
 13699  11AF  0020               	movlb	0	; select bank0
 13700  11B0  00A3               	movwf	i1___aldiv@divisor+3
 13701  11B1  3000               	movlw	0
 13702  11B2  00A2               	movwf	i1___aldiv@divisor+2
 13703  11B3  3003               	movlw	3
 13704  11B4  00A1               	movwf	i1___aldiv@divisor+1
 13705  11B5  30E8               	movlw	232
 13706  11B6  00A0               	movwf	i1___aldiv@divisor
 13707  11B7  300C               	movlw	12
 13708  11B8  00B6               	movwf	??_modulation
 13709  11B9  30F2               	movlw	242
 13710  11BA  00B7               	movwf	??_modulation+1
 13711  11BB  3001               	movlw	1
 13712  11BC  00B8               	movwf	??_modulation+2
 13713  11BD  3000               	movlw	0
 13714  11BE  00B9               	movwf	??_modulation+3
 13715  11BF  0835               	movf	modulation@y+3,w
 13716  11C0  00F3               	movwf	i1___lmul@multiplier+3
 13717  11C1  0834               	movf	modulation@y+2,w
 13718  11C2  00F2               	movwf	i1___lmul@multiplier+2
 13719  11C3  0833               	movf	modulation@y+1,w
 13720  11C4  00F1               	movwf	i1___lmul@multiplier+1
 13721  11C5  0832               	movf	modulation@y,w
 13722  11C6  00F0               	movwf	i1___lmul@multiplier
 13723  11C7  0831               	movf	modulation@x+3,w
 13724  11C8  00F7               	movwf	i1___lmul@multiplicand+3
 13725  11C9  0830               	movf	modulation@x+2,w
 13726  11CA  00F6               	movwf	i1___lmul@multiplicand+2
 13727  11CB  082F               	movf	modulation@x+1,w
 13728  11CC  00F5               	movwf	i1___lmul@multiplicand+1
 13729  11CD  082E               	movf	modulation@x,w
 13730  11CE  00F4               	movwf	i1___lmul@multiplicand
 13731  11CF  319F  273F  3191   	fcall	i1___lmul
 13732  11D2  0870               	movf	?i1___lmul,w
 13733  11D3  0020               	movlb	0	; select bank0
 13734  11D4  07B6               	addwf	??_modulation,f
 13735  11D5  0871               	movf	?i1___lmul+1,w
 13736  11D6  3DB7               	addwfc	??_modulation+1,f
 13737  11D7  0872               	movf	?i1___lmul+2,w
 13738  11D8  3DB8               	addwfc	??_modulation+2,f
 13739  11D9  0873               	movf	?i1___lmul+3,w
 13740  11DA  3DB9               	addwfc	??_modulation+3,f
 13741  11DB  0839               	movf	??_modulation+3,w
 13742  11DC  00A7               	movwf	i1___aldiv@dividend+3
 13743  11DD  0838               	movf	??_modulation+2,w
 13744  11DE  00A6               	movwf	i1___aldiv@dividend+2
 13745  11DF  0837               	movf	??_modulation+1,w
 13746  11E0  00A5               	movwf	i1___aldiv@dividend+1
 13747  11E1  0836               	movf	??_modulation,w
 13748  11E2  00A4               	movwf	i1___aldiv@dividend
 13749  11E3  3195  25D2         	fcall	i1___aldiv
 13750  11E5  0020               	movlb	0	; select bank0
 13751  11E6  0823               	movf	?i1___aldiv+3,w
 13752  11E7  00B1               	movwf	?_modulation+3
 13753  11E8  0822               	movf	?i1___aldiv+2,w
 13754  11E9  00B0               	movwf	?_modulation+2
 13755  11EA  0821               	movf	?i1___aldiv+1,w
 13756  11EB  00AF               	movwf	?_modulation+1
 13757  11EC  0820               	movf	?i1___aldiv,w
 13758  11ED  00AE               	movwf	?_modulation
 13759  11EE  0008               	return
 13760  11EF                     __end_of_modulation:	
 13761                           
 13762                           	psect	text48
 13763  1F3F                     __ptext48:	
 13764 ;; *************** function i1___lmul *****************
 13765 ;; Defined at:
 13766 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13767 ;; Parameters:    Size  Location     Type
 13768 ;;  multiplier      4    0[COMMON] unsigned long 
 13769 ;;  multiplicand    4    4[COMMON] unsigned long 
 13770 ;; Auto vars:     Size  Location     Type
 13771 ;;  __lmul          4    8[COMMON] unsigned long 
 13772 ;; Return value:  Size  Location     Type
 13773 ;;                  4    0[COMMON] unsigned long 
 13774 ;; Registers used:
 13775 ;;		wreg, status,2, status,0
 13776 ;; Tracked objects:
 13777 ;;		On entry : 0/0
 13778 ;;		On exit  : 0/0
 13779 ;;		Unchanged: 0/0
 13780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13781 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13782 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13784 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13785 ;;Total ram usage:       12 bytes
 13786 ;; Hardware stack levels used:    1
 13787 ;; This function calls:
 13788 ;;		Nothing
 13789 ;; This function is called by:
 13790 ;;		_modulation
 13791 ;; This function uses a non-reentrant model
 13792 ;;
 13793                           
 13794                           
 13795                           ;psect for function i1___lmul
 13796  1F3F                     i1___lmul:	
 13797                           
 13798                           ;incstack = 0
 13799                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 13800  1F3F  3000               	movlw	0
 13801  1F40  00FB               	movwf	i1___lmul@product+3
 13802  1F41  3000               	movlw	0
 13803  1F42  00FA               	movwf	i1___lmul@product+2
 13804  1F43  3000               	movlw	0
 13805  1F44  00F9               	movwf	i1___lmul@product+1
 13806  1F45  3000               	movlw	0
 13807  1F46  00F8               	movwf	i1___lmul@product
 13808  1F47                     i1l3954:	
 13809  1F47  1C70               	btfss	i1___lmul@multiplier,0
 13810  1F48  2F51               	goto	i1l3958
 13811  1F49  0874               	movf	i1___lmul@multiplicand,w
 13812  1F4A  07F8               	addwf	i1___lmul@product,f
 13813  1F4B  0875               	movf	i1___lmul@multiplicand+1,w
 13814  1F4C  3DF9               	addwfc	i1___lmul@product+1,f
 13815  1F4D  0876               	movf	i1___lmul@multiplicand+2,w
 13816  1F4E  3DFA               	addwfc	i1___lmul@product+2,f
 13817  1F4F  0877               	movf	i1___lmul@multiplicand+3,w
 13818  1F50  3DFB               	addwfc	i1___lmul@product+3,f
 13819  1F51                     i1l3958:	
 13820  1F51  3001               	movlw	1
 13821  1F52                     u355_25:	
 13822  1F52  35F4               	lslf	i1___lmul@multiplicand,f
 13823  1F53  0DF5               	rlf	i1___lmul@multiplicand+1,f
 13824  1F54  0DF6               	rlf	i1___lmul@multiplicand+2,f
 13825  1F55  0DF7               	rlf	i1___lmul@multiplicand+3,f
 13826  1F56  0B89               	decfsz	9,f
 13827  1F57  2F52               	goto	u355_25
 13828  1F58  3001               	movlw	1
 13829  1F59                     u356_25:	
 13830  1F59  36F3               	lsrf	i1___lmul@multiplier+3,f
 13831  1F5A  0CF2               	rrf	i1___lmul@multiplier+2,f
 13832  1F5B  0CF1               	rrf	i1___lmul@multiplier+1,f
 13833  1F5C  0CF0               	rrf	i1___lmul@multiplier,f
 13834  1F5D  0B89               	decfsz	9,f
 13835  1F5E  2F59               	goto	u356_25
 13836  1F5F  0873               	movf	i1___lmul@multiplier+3,w
 13837  1F60  0472               	iorwf	i1___lmul@multiplier+2,w
 13838  1F61  0471               	iorwf	i1___lmul@multiplier+1,w
 13839  1F62  0470               	iorwf	i1___lmul@multiplier,w
 13840  1F63  1D03               	skipz
 13841  1F64  2F47               	goto	i1l3954
 13842  1F65  087B               	movf	i1___lmul@product+3,w
 13843  1F66  00F3               	movwf	?i1___lmul+3
 13844  1F67  087A               	movf	i1___lmul@product+2,w
 13845  1F68  00F2               	movwf	?i1___lmul+2
 13846  1F69  0879               	movf	i1___lmul@product+1,w
 13847  1F6A  00F1               	movwf	?i1___lmul+1
 13848  1F6B  0878               	movf	i1___lmul@product,w
 13849  1F6C  00F0               	movwf	?i1___lmul
 13850  1F6D  0008               	return
 13851  1F6E                     __end_ofi1___lmul:	
 13852                           
 13853                           	psect	text49
 13854  15D2                     __ptext49:	
 13855 ;; *************** function i1___aldiv *****************
 13856 ;; Defined at:
 13857 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 13858 ;; Parameters:    Size  Location     Type
 13859 ;;  divisor         4    0[BANK0 ] long 
 13860 ;;  dividend        4    4[BANK0 ] long 
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;  __aldiv         4   10[BANK0 ] long 
 13863 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 13864 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 13865 ;; Return value:  Size  Location     Type
 13866 ;;                  4    0[BANK0 ] long 
 13867 ;; Registers used:
 13868 ;;		wreg, status,2, status,0
 13869 ;; Tracked objects:
 13870 ;;		On entry : 0/0
 13871 ;;		On exit  : 0/0
 13872 ;;		Unchanged: 0/0
 13873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13874 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13875 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13877 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13878 ;;Total ram usage:       15 bytes
 13879 ;; Hardware stack levels used:    1
 13880 ;; This function calls:
 13881 ;;		Nothing
 13882 ;; This function is called by:
 13883 ;;		_modulation
 13884 ;; This function uses a non-reentrant model
 13885 ;;
 13886                           
 13887                           
 13888                           ;psect for function i1___aldiv
 13889  15D2                     i1___aldiv:	
 13890                           
 13891                           ;incstack = 0
 13892                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 13893  15D2  0020               	movlb	0	; select bank0
 13894  15D3  01A9               	clrf	i1___aldiv@sign
 13895  15D4  1FA3               	btfss	i1___aldiv@divisor+3,7
 13896  15D5  2DE3               	goto	i1l1368
 13897  15D6  09A0               	comf	i1___aldiv@divisor,f
 13898  15D7  09A1               	comf	i1___aldiv@divisor+1,f
 13899  15D8  09A2               	comf	i1___aldiv@divisor+2,f
 13900  15D9  09A3               	comf	i1___aldiv@divisor+3,f
 13901  15DA  0AA0               	incf	i1___aldiv@divisor,f
 13902  15DB  1903               	skipnz
 13903  15DC  0AA1               	incf	i1___aldiv@divisor+1,f
 13904  15DD  1903               	skipnz
 13905  15DE  0AA2               	incf	i1___aldiv@divisor+2,f
 13906  15DF  1903               	skipnz
 13907  15E0  0AA3               	incf	i1___aldiv@divisor+3,f
 13908  15E1  01A9               	clrf	i1___aldiv@sign
 13909  15E2  0AA9               	incf	i1___aldiv@sign,f
 13910  15E3                     i1l1368:	
 13911  15E3  1FA7               	btfss	i1___aldiv@dividend+3,7
 13912  15E4  2DF4               	goto	i1l3976
 13913  15E5  09A4               	comf	i1___aldiv@dividend,f
 13914  15E6  09A5               	comf	i1___aldiv@dividend+1,f
 13915  15E7  09A6               	comf	i1___aldiv@dividend+2,f
 13916  15E8  09A7               	comf	i1___aldiv@dividend+3,f
 13917  15E9  0AA4               	incf	i1___aldiv@dividend,f
 13918  15EA  1903               	skipnz
 13919  15EB  0AA5               	incf	i1___aldiv@dividend+1,f
 13920  15EC  1903               	skipnz
 13921  15ED  0AA6               	incf	i1___aldiv@dividend+2,f
 13922  15EE  1903               	skipnz
 13923  15EF  0AA7               	incf	i1___aldiv@dividend+3,f
 13924  15F0  3001               	movlw	1
 13925  15F1  00FC               	movwf	??i1___aldiv
 13926  15F2  087C               	movf	??i1___aldiv,w
 13927  15F3  06A9               	xorwf	i1___aldiv@sign,f
 13928  15F4                     i1l3976:	
 13929  15F4  3000               	movlw	0
 13930  15F5  00AD               	movwf	i1___aldiv@quotient+3
 13931  15F6  3000               	movlw	0
 13932  15F7  00AC               	movwf	i1___aldiv@quotient+2
 13933  15F8  3000               	movlw	0
 13934  15F9  00AB               	movwf	i1___aldiv@quotient+1
 13935  15FA  3000               	movlw	0
 13936  15FB  00AA               	movwf	i1___aldiv@quotient
 13937  15FC  0823               	movf	i1___aldiv@divisor+3,w
 13938  15FD  0422               	iorwf	i1___aldiv@divisor+2,w
 13939  15FE  0421               	iorwf	i1___aldiv@divisor+1,w
 13940  15FF  0420               	iorwf	i1___aldiv@divisor,w
 13941  1600  1903               	skipnz
 13942  1601  2E3D               	goto	i1l3998
 13943  1602  01A8               	clrf	i1___aldiv@counter
 13944  1603  0AA8               	incf	i1___aldiv@counter,f
 13945  1604                     i1l3984:	
 13946  1604  1BA3               	btfsc	i1___aldiv@divisor+3,7
 13947  1605  2E12               	goto	i1l3986
 13948  1606  3001               	movlw	1
 13949  1607                     u361_25:	
 13950  1607  35A0               	lslf	i1___aldiv@divisor,f
 13951  1608  0DA1               	rlf	i1___aldiv@divisor+1,f
 13952  1609  0DA2               	rlf	i1___aldiv@divisor+2,f
 13953  160A  0DA3               	rlf	i1___aldiv@divisor+3,f
 13954  160B  0B89               	decfsz	9,f
 13955  160C  2E07               	goto	u361_25
 13956  160D  3001               	movlw	1
 13957  160E  00FC               	movwf	??i1___aldiv
 13958  160F  087C               	movf	??i1___aldiv,w
 13959  1610  07A8               	addwf	i1___aldiv@counter,f
 13960  1611  2E04               	goto	i1l3984
 13961  1612                     i1l3986:	
 13962  1612  3001               	movlw	1
 13963  1613                     u363_25:	
 13964  1613  35AA               	lslf	i1___aldiv@quotient,f
 13965  1614  0DAB               	rlf	i1___aldiv@quotient+1,f
 13966  1615  0DAC               	rlf	i1___aldiv@quotient+2,f
 13967  1616  0DAD               	rlf	i1___aldiv@quotient+3,f
 13968  1617  0B89               	decfsz	9,f
 13969  1618  2E13               	goto	u363_25
 13970  1619  0823               	movf	i1___aldiv@divisor+3,w
 13971  161A  0227               	subwf	i1___aldiv@dividend+3,w
 13972  161B  1D03               	skipz
 13973  161C  2E27               	goto	u364_25
 13974  161D  0822               	movf	i1___aldiv@divisor+2,w
 13975  161E  0226               	subwf	i1___aldiv@dividend+2,w
 13976  161F  1D03               	skipz
 13977  1620  2E27               	goto	u364_25
 13978  1621  0821               	movf	i1___aldiv@divisor+1,w
 13979  1622  0225               	subwf	i1___aldiv@dividend+1,w
 13980  1623  1D03               	skipz
 13981  1624  2E27               	goto	u364_25
 13982  1625  0820               	movf	i1___aldiv@divisor,w
 13983  1626  0224               	subwf	i1___aldiv@dividend,w
 13984  1627                     u364_25:	
 13985  1627  1C03               	skipc
 13986  1628  2E32               	goto	i1l3994
 13987  1629  0820               	movf	i1___aldiv@divisor,w
 13988  162A  02A4               	subwf	i1___aldiv@dividend,f
 13989  162B  0821               	movf	i1___aldiv@divisor+1,w
 13990  162C  3BA5               	subwfb	i1___aldiv@dividend+1,f
 13991  162D  0822               	movf	i1___aldiv@divisor+2,w
 13992  162E  3BA6               	subwfb	i1___aldiv@dividend+2,f
 13993  162F  0823               	movf	i1___aldiv@divisor+3,w
 13994  1630  3BA7               	subwfb	i1___aldiv@dividend+3,f
 13995  1631  142A               	bsf	i1___aldiv@quotient,0
 13996  1632                     i1l3994:	
 13997  1632  3001               	movlw	1
 13998  1633                     u365_25:	
 13999  1633  36A3               	lsrf	i1___aldiv@divisor+3,f
 14000  1634  0CA2               	rrf	i1___aldiv@divisor+2,f
 14001  1635  0CA1               	rrf	i1___aldiv@divisor+1,f
 14002  1636  0CA0               	rrf	i1___aldiv@divisor,f
 14003  1637  0B89               	decfsz	9,f
 14004  1638  2E33               	goto	u365_25
 14005  1639  3001               	movlw	1
 14006  163A  02A8               	subwf	i1___aldiv@counter,f
 14007  163B  1D03               	btfss	3,2
 14008  163C  2E12               	goto	i1l3986
 14009  163D                     i1l3998:	
 14010  163D  0829               	movf	i1___aldiv@sign,w
 14011  163E  1903               	btfsc	3,2
 14012  163F  2E4B               	goto	i1l4002
 14013  1640  09AA               	comf	i1___aldiv@quotient,f
 14014  1641  09AB               	comf	i1___aldiv@quotient+1,f
 14015  1642  09AC               	comf	i1___aldiv@quotient+2,f
 14016  1643  09AD               	comf	i1___aldiv@quotient+3,f
 14017  1644  0AAA               	incf	i1___aldiv@quotient,f
 14018  1645  1903               	skipnz
 14019  1646  0AAB               	incf	i1___aldiv@quotient+1,f
 14020  1647  1903               	skipnz
 14021  1648  0AAC               	incf	i1___aldiv@quotient+2,f
 14022  1649  1903               	skipnz
 14023  164A  0AAD               	incf	i1___aldiv@quotient+3,f
 14024  164B                     i1l4002:	
 14025  164B  082D               	movf	i1___aldiv@quotient+3,w
 14026  164C  00A3               	movwf	?i1___aldiv+3
 14027  164D  082C               	movf	i1___aldiv@quotient+2,w
 14028  164E  00A2               	movwf	?i1___aldiv+2
 14029  164F  082B               	movf	i1___aldiv@quotient+1,w
 14030  1650  00A1               	movwf	?i1___aldiv+1
 14031  1651  082A               	movf	i1___aldiv@quotient,w
 14032  1652  00A0               	movwf	?i1___aldiv
 14033  1653  0008               	return
 14034  1654                     __end_ofi1___aldiv:	
 14035                           
 14036                           	psect	text50
 14037  13E5                     __ptext50:	
 14038 ;; *************** function ___awdiv *****************
 14039 ;; Defined at:
 14040 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14041 ;; Parameters:    Size  Location     Type
 14042 ;;  divisor         2    0[COMMON] int 
 14043 ;;  dividend        2    2[COMMON] int 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  quotient        2    7[COMMON] int 
 14046 ;;  sign            1    6[COMMON] unsigned char 
 14047 ;;  counter         1    5[COMMON] unsigned char 
 14048 ;; Return value:  Size  Location     Type
 14049 ;;                  2    0[COMMON] int 
 14050 ;; Registers used:
 14051 ;;		wreg, status,2, status,0
 14052 ;; Tracked objects:
 14053 ;;		On entry : 0/0
 14054 ;;		On exit  : 0/0
 14055 ;;		Unchanged: 0/0
 14056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14057 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14058 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14059 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14060 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14061 ;;Total ram usage:        9 bytes
 14062 ;; Hardware stack levels used:    1
 14063 ;; This function calls:
 14064 ;;		Nothing
 14065 ;; This function is called by:
 14066 ;;		_isr
 14067 ;; This function uses a non-reentrant model
 14068 ;;
 14069                           
 14070                           
 14071                           ;psect for function ___awdiv
 14072  13E5                     ___awdiv:	
 14073                           
 14074                           ;incstack = 0
 14075                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14076  13E5  01F6               	clrf	___awdiv@sign
 14077  13E6  1FF1               	btfss	___awdiv@divisor+1,7
 14078  13E7  2BEF               	goto	i1l4400
 14079  13E8  09F0               	comf	___awdiv@divisor,f
 14080  13E9  09F1               	comf	___awdiv@divisor+1,f
 14081  13EA  0AF0               	incf	___awdiv@divisor,f
 14082  13EB  1903               	skipnz
 14083  13EC  0AF1               	incf	___awdiv@divisor+1,f
 14084  13ED  01F6               	clrf	___awdiv@sign
 14085  13EE  0AF6               	incf	___awdiv@sign,f
 14086  13EF                     i1l4400:	
 14087  13EF  1FF3               	btfss	___awdiv@dividend+1,7
 14088  13F0  2BFA               	goto	i1l4406
 14089  13F1  09F2               	comf	___awdiv@dividend,f
 14090  13F2  09F3               	comf	___awdiv@dividend+1,f
 14091  13F3  0AF2               	incf	___awdiv@dividend,f
 14092  13F4  1903               	skipnz
 14093  13F5  0AF3               	incf	___awdiv@dividend+1,f
 14094  13F6  3001               	movlw	1
 14095  13F7  00F4               	movwf	??___awdiv
 14096  13F8  0874               	movf	??___awdiv,w
 14097  13F9  06F6               	xorwf	___awdiv@sign,f
 14098  13FA                     i1l4406:	
 14099  13FA  01F7               	clrf	___awdiv@quotient
 14100  13FB  01F8               	clrf	___awdiv@quotient+1
 14101  13FC  0870               	movf	___awdiv@divisor,w
 14102  13FD  0471               	iorwf	___awdiv@divisor+1,w
 14103  13FE  1903               	btfsc	3,2
 14104  13FF  2C29               	goto	i1l4428
 14105  1400  01F5               	clrf	___awdiv@counter
 14106  1401  0AF5               	incf	___awdiv@counter,f
 14107  1402                     i1l4416:	
 14108  1402  1BF1               	btfsc	___awdiv@divisor+1,7
 14109  1403  2C0E               	goto	i1l4418
 14110  1404  3001               	movlw	1
 14111  1405                     u442_25:	
 14112  1405  35F0               	lslf	___awdiv@divisor,f
 14113  1406  0DF1               	rlf	___awdiv@divisor+1,f
 14114  1407  0B89               	decfsz	9,f
 14115  1408  2C05               	goto	u442_25
 14116  1409  3001               	movlw	1
 14117  140A  00F4               	movwf	??___awdiv
 14118  140B  0874               	movf	??___awdiv,w
 14119  140C  07F5               	addwf	___awdiv@counter,f
 14120  140D  2C02               	goto	i1l4416
 14121  140E                     i1l4418:	
 14122  140E  3001               	movlw	1
 14123  140F                     u444_25:	
 14124  140F  35F7               	lslf	___awdiv@quotient,f
 14125  1410  0DF8               	rlf	___awdiv@quotient+1,f
 14126  1411  0B89               	decfsz	9,f
 14127  1412  2C0F               	goto	u444_25
 14128  1413  0871               	movf	___awdiv@divisor+1,w
 14129  1414  0273               	subwf	___awdiv@dividend+1,w
 14130  1415  1D03               	skipz
 14131  1416  2C19               	goto	u445_25
 14132  1417  0870               	movf	___awdiv@divisor,w
 14133  1418  0272               	subwf	___awdiv@dividend,w
 14134  1419                     u445_25:	
 14135  1419  1C03               	skipc
 14136  141A  2C20               	goto	i1l4424
 14137  141B  0870               	movf	___awdiv@divisor,w
 14138  141C  02F2               	subwf	___awdiv@dividend,f
 14139  141D  0871               	movf	___awdiv@divisor+1,w
 14140  141E  3BF3               	subwfb	___awdiv@dividend+1,f
 14141  141F  1477               	bsf	___awdiv@quotient,0
 14142  1420                     i1l4424:	
 14143  1420  3001               	movlw	1
 14144  1421                     u446_25:	
 14145  1421  36F1               	lsrf	___awdiv@divisor+1,f
 14146  1422  0CF0               	rrf	___awdiv@divisor,f
 14147  1423  0B89               	decfsz	9,f
 14148  1424  2C21               	goto	u446_25
 14149  1425  3001               	movlw	1
 14150  1426  02F5               	subwf	___awdiv@counter,f
 14151  1427  1D03               	btfss	3,2
 14152  1428  2C0E               	goto	i1l4418
 14153  1429                     i1l4428:	
 14154  1429  0876               	movf	___awdiv@sign,w
 14155  142A  1903               	btfsc	3,2
 14156  142B  2C31               	goto	i1l4432
 14157  142C  09F7               	comf	___awdiv@quotient,f
 14158  142D  09F8               	comf	___awdiv@quotient+1,f
 14159  142E  0AF7               	incf	___awdiv@quotient,f
 14160  142F  1903               	skipnz
 14161  1430  0AF8               	incf	___awdiv@quotient+1,f
 14162  1431                     i1l4432:	
 14163  1431  0878               	movf	___awdiv@quotient+1,w
 14164  1432  00F1               	movwf	?___awdiv+1
 14165  1433  0877               	movf	___awdiv@quotient,w
 14166  1434  00F0               	movwf	?___awdiv
 14167  1435  0008               	return
 14168  1436                     __end_of___awdiv:	
 14169  007E                     btemp	set	126	;btemp
 14170  007E                     int$flags	set	126
 14171  007E                     wtemp	set	126
 14172  007E                     wtemp0	set	126
 14173  0080                     wtemp1	set	128
 14174  0082                     wtemp2	set	130
 14175  0084                     wtemp3	set	132
 14176  0086                     wtemp4	set	134
 14177  0088                     wtemp5	set	136
 14178  007F                     wtemp6	set	127
 14179  007E                     ttemp	set	126
 14180  007E                     ttemp0	set	126
 14181  0081                     ttemp1	set	129
 14182  0084                     ttemp2	set	132
 14183  0087                     ttemp3	set	135
 14184  007F                     ttemp4	set	127
 14185  007E                     ltemp	set	126
 14186  007E                     ltemp0	set	126
 14187  0082                     ltemp1	set	130
 14188  0086                     ltemp2	set	134
 14189  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        785
    BSS         212
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     38      70
    BANK3            80      0      78
    BANK4            80     15      55
    BANK5            80      0      44
    BANK6            80      0      61
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->_trunc
    _trunc->___fttol
    ___fttol->_map
    ___altoft->___fttol
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->_trunc
    _trunc->___altoft
    ___altoft->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   57126
                                             34 BANK2      4     4      0
                                              0 BANK4     15    15      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3308
                                             22 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4681
                                             22 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2140
                                             18 BANK1      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7868
                                             25 BANK1      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4047
                                             18 BANK1      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3821
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   12540
                                             22 BANK2     12     8      4
                           ___awtoft
                            ___ftmul
                            ___fttol
                              _trunc
 ---------------------------------------------------------------------------------
 (2) _trunc                                                9     6      3    4488
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                           ___awtoft (ARG)
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     910
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (3) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3186
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2324
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14119
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3252
                                             37 BANK1     16    10      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2328
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2294
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1754
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _trunc
       ___altoft
         ___ftpack
         ___fttol (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           _map (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
       _frexp (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     26      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      F      37      13       68.8%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     296      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3D      18       76.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     296      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Jan 02 09:33:57 2017

                     _update_mode 1230                      ___altoft@exp 012C                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012D                      ___awdiv@sign 0076                _topTactile_pressed 0159  
      setDoublePressState@f_state 00B2                   _updateSwitchTap 0C14                      ___ftadd@exp1 00B4  
                    ___ftadd@exp2 00B3                      ___ftadd@sign 00B2                               l304 03D2  
                             l523 1E2D                               l339 1FF1                               l700 1086  
                             l516 0A2D                               l701 1089                               l702 108C  
                             l703 108F                               l552 158E                               l705 1092  
                             l706 10B6              __size_of_adc_convert 0013                               l841 12AD  
                             l693 07D9                               l837 1286                               l853 13DA  
                             l694 07FD                               l863 1256                               l849 13AA  
                             l865 1258                               l698 1083                               l866 125B  
                             l867 1269                               _PR2 001B      solidring_tactiles@ring_delay 00B4  
                             _map 16D6                               _isr 0004                               _tap 02A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 0140           __end_of_set_leds_bottom 10B7  
                    __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029                      ___ftdiv@cntr 00CF  
                    ___ftdiv@sign 00D4                              _B25k 0220                              l1200 0C29  
                            l1214 0CE0                              l1076 0AB9                              l1505 0BBD  
                            l5000 14A7                              l1368 1665                              l1481 14CE  
                            l1482 14D6                              l1474 14BB                              l1565 17DE  
                            l5030 07D1                              l5022 07B1                              l5006 14C0  
                            l5024 07B9                              l5008 14C8                              l5112 17D4  
                            l5104 17B5                              l5026 07C1                              l5034 07E0  
                            l5114 17E2                              l5106 17C6                              l6010 0643  
                            l5028 07C9                              l5300 102C                              l5118 17F0  
                            l6022 0713                              l6014 068B                              l6006 0603  
                            l5400 0B89                              l5128 1050                              l5224 1522  
                            l6040 074A                              l5058 1099                              l5402 0B93  
                            l5074 135F                              l6042 07A7                              l6018 06CB  
                            l6300 109F                              l5412 0BAF                              l5404 0B98  
                            l5076 136F                              l5332 1686                              l5324 1676  
                            l5270 132B                              l5422 0BE1                              l5414 0BB9  
                            l5406 0B9C                              l5502 092D                              l5086 177C  
                            l5174 1453                              l5350 16CD                              l5342 16B4  
                            l5334 1694                              l6038 07A1                              ?_map 00D5  
                            l5432 0BFC                              l5418 0BCF                              l5442 0833  
                            l5514 0949                              l5506 0935                              l5362 1EAF  
                            l5346 16BF                              l5372 0B46                              l5382 0B5C  
                            l5470 08A3                              l5462 088A                              l5518 0951  
                            l5702 0A6A                              l5376 0B4D                              l5448 0849  
                            l5608 12A2                              l5800 0C78                              l5394 0B76  
                            l5490 08F2                              l5618 139F                              l5714 0A8C  
                            l5650 126D                              l5572 15A1                              l5484 08DC  
                            l5628 13C6                              l5900 099A                              l5740 0AD8  
                            l5716 0A94                              l5820 0CA9                              l5574 15AA  
                            l5734 0ABD                              l5806 0C82                              l5822 0CB1  
                            l6296 09A6                              l5904 09A1                              l5744 0AE0  
                            l5728 0AAC                              l5840 0D22                              l5832 0CD8  
                            l5824 0CC0                              l5648 125E                              l6298 07E6  
                            l5906 09BA                              l5746 0AE6                              l5754 0AF9  
                            l5690 0A49                              l5850 0D78                              l4980 1FB1  
                            ?_isr 0070                              l5598 127B                              l5694 0A5C  
                            l5854 0D9E                              l5862 0DDE                              l5942 03AC  
                            l4976 1FA7                              l4992 1491                              l5848 0D2E  
                            l5784 0C3A                              l5778 0C1F                              l4996 1498  
                            l5892 0988                              l5956 03D6                              l4998 14A2  
                            l5894 098C                              l5798 0C5B                              l5982 04AA  
                            l5958 03D9                              l5896 0990                              l5976 045B  
                            l5898 0996                              l5994 0555                              l5986 04EA  
                            l5998 0595                              u5115 14B6                              u5045 1FB2  
                            u6005 0958                              u5055 1FB9                              u5135 14C3  
                            u5215 1364                              u5305 17D5                              u6035 1ED2  
                            u5420 1329                              u6045 1ED8                              u6205 13BF  
                            u5245 1784                              u5415 130B                              u5175 14DD  
                            u5095 149D                              u6080 15A8                              u6065 1587  
                            u6145 129B                              u6075 159A                              u5275 17B6  
                            u6315 0A74                              u5515 1689                              u6235 1243  
                            u5445 1E58                              u6405 0AC9                              u5455 1018  
                            u5535 1695                              u5545 16A9                              u5715 0B8A  
                            u5395 152F                              u6275 0A42                              u5555 16B5  
                            u5475 080D                              u6285 0A55                              u6535 0C64  
                            u5745 0B9D                              u6705 0D7D                              u5685 0B77  
                            u5845 085B                              u5925 08FE                              u6645 0CF1  
                            u6565 0C8C                              u6805 04E8                              u5775 0BB0  
                            u5855 086B                              u5935 090E                              u6735 0A26  
                            u6655 0D07                              u6815 0573                              u5865 088B  
                            u6665 0D37                              u6825 0593                              u5875 089A  
                            u5955 0936                              u6675 0D4C                              u6835 0621  
                            u6755 03C8                              u5885 08A4                              u5965 093C  
                            u6685 0D60                              u6845 0641                              u6855 06A9  
                            u6775 0439                              u6865 06C9                              u6785 0459  
                            u5995 0952                              u6795 04C8                              u6893 0799  
                            u6885 0781                     _star_tactiles 14ED                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000                              _iCnt 01E0                              _mod1 0320  
                            _mod2 03A0                              _mod3 0420                              _main 0391  
                    ___ftpack@arg 00A0                      ___ftpack@exp 00A3                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            indf1 0001                              fsr1l 0006                              map@x 00D5  
                            btemp 007E                     __CFG_BOREN$ON 0000                              ltemp 007E  
        __end_of_setFeedbackState 1E67                              start 02E1                              ttemp 007E  
                            wtemp 007E      __end_of_getSwitchBypassState 1DBA      updateSwitchTap@tapCntDivisor 00BC  
    __end_of_setSwitchBypassState 134A                   ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000  
                    ___ftmul@cntr 00C3                      ___ftmul@sign 00C4                   __end_of_InitApp 1F9E  
               ??_restoreLEDState 00A0                      ___fttol@exp1 0125                             ??_map 00E4  
                    ___fttol@lval 0121                             ??_isr 003A                   _switchBypass_up 01E7  
       __size_of_initSwitchBypass 000F                   __end_of___aldiv 16D6                             ?_main 0070  
                 __end_of___awdiv 1436                   __end_of___ftadd 0C14                             _CCPR1 0291  
                           _CCPR2 0298                             _CCPR3 0311                             _CCPR4 0318  
                           _CCPR5 031C                             _CCPR9 061A                     __CFG_WDTE$OFF 0000  
                 __end_of___ftdiv 08C5                   __end_of___ftneg 1DD3                   __end_of___ftmul 0979  
                 ___awdiv@divisor 0070                   __end_of___fttol 1800                             i1l117 0118  
                           i1l150 02DC                             i1l145 02D5                             i1l693 12DD  
                           i1l694 12FF                   ___awdiv@counter 0075               _ConfigureOscillator 1DB2  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                 _switchTap_state 0165                 ??_setLongTapState 00A2                     ___awtoft@sign 00AD  
                           _frexp 1042                             _myBuf 04A0                             _errno 01D2  
                   ___ftpack@sign 00A4                             _timer 004D                    ?_star_tactiles 0070  
                           main@i 0142                             _trunc 1436                  __end_ofi1___lmul 1F6E  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 2000                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 12B8  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 013D  
            ?_ConfigureOscillator 0070                _getCurrentLEDState 1E34                _updateSwitchBypass 0A33  
         __end_of_updateSwitchTap 0DF8                   __initialization 02E3           _updateSwitchBypassState 07FF  
                    __end_of_main 07AA           __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 0979                            ??_main 0248                     ___fttol@sign1 0120  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 11AE                    _feedback_timer 0148  
                  _feedback_state 0066                    _feedback_start 0054                  ?_set_leds_bottom 00A0  
                          ?_frexp 00A0                  __end_of___altoft 1395                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0072               _baseline_delay_time 0058  
            ??_getCurrentLEDState 00A0                  __end_of___awtoft 1EC6                  __end_of___ftpack 14ED  
            ??_updateSwitchBypass 00B6                            ?_trunc 012E                            i1l4002 164B  
                          i1l1368 15E3                            i1l4400 13EF                            i1l4500 0163  
                          i1l4406 13FA                            i1l4510 01A1                            i1l4502 0173  
                          i1l4432 1431                            i1l4424 1420                            i1l4416 1402  
                          i1l4440 12C5                            i1l4520 01CA                            i1l4504 0175  
                          i1l4418 140E                            i1l4442 12CB                            i1l4450 12E3  
                          i1l4530 020F                            i1l4514 01AE                            i1l4428 1429  
                          i1l4444 12D1                            i1l4516 01BD                            i1l4446 12D7  
                          i1l4438 12BF                            i1l6302 0250                            i1l4550 0244  
                          i1l4542 0230                            i1l4534 0214                            i1l4526 020C  
                          i1l6304 12E8                            i1l4552 0247                            i1l4480 0105  
                          i1l4472 00BC                            i1l4546 0236                            i1l4538 0220  
                          i1l4466 00A1                            i1l4580 02DB                            i1l4556 024A  
                          i1l4564 02A4                            i1l4558 0261                            i1l4576 02D7  
                          i1l3954 1F47                            i1l3958 1F51                            i1l3984 1604  
                          i1l3976 15F4                            i1l3994 1632                            i1l3986 1612  
                          i1l3998 163D                            _PMADRH 0192                            _PMADRL 0191  
                          u361_25 1607                            _PMDATH 0194                            u442_25 1405  
                          _PMDATL 0193                            u363_25 1613                            u355_25 1F52  
                          u451_25 0098                            _PMCON2 0196                            u444_25 140F  
                          u364_25 1627                            u356_25 1F59                            u445_25 1419  
                          u365_25 1633                            u453_25 00B3                            u462_23 0191  
                          u446_25 1421                            u470_25 02B7                            u455_23 00D5  
                          u471_25 02D0                            u466_23 01F2                            u459_23 0131  
                          u467_25 0206                            u468_25 0229                    _debounce_count 01CA  
                  _debounce_mode1 01CC                    _debounce_mode2 01CE                         ??_InitApp 00A0  
           ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 13E5                    __CFG_PWRTE$OFF 0000  
                          ___lmul 1F9E                         ??___aldiv 00A8                         ??___awdiv 0074  
                       ??___ftadd 00AE                    __CFG_STVREN$ON 0000                         ??___ftdiv 00CB  
                       ??___ftneg 00A3                         ??___ftmul 00BB                         ??___fttol 00EB  
                __end_of_init_adc 1DDD                  __end_of_init_pwm 1230         __size_of_showBootSequence 002B  
                ___awdiv@quotient 0077                 __end_ofi1___aldiv 1654             ___ftmul@f3_as_product 00C0  
                    __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0                      __pdataCOMMON 007D  
            _getSwitchBypassState 1DB6                         ??_wait_ms 00AE              _setSwitchBypassState 1300  
                 ??_star_tactiles 00B2                            trunc@i 0131                            trunc@x 012E  
          setLongTapState@f_state 00A0           __end_of__initialization 038D                        ___altoft@c 0126  
                      ___ftadd@f1 00A8                        ___ftadd@f2 00AB                 _bypass_turning_on 0153  
                      ___ftdiv@f1 00C8                        ___ftdiv@f2 00C5                        ___ftdiv@f3 00D0  
                  _top_push_state 0064         ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00A0  
             _switchBypass_toggle 01DE                        ___awtoft@c 00A8           __end_of_set_subdivision 0A33  
                      ___ftmul@f1 00B5                        ___ftmul@f2 00B8                        ___fttol@f1 00E7  
                ?_updateSwitchTap 0070                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK0 1E0F                      __pidataBANK2 1001                      __pidataBANK3 1DDD  
                    __pidataBANK4 1EEC                      __pidataBANK6 1131                      __pidataBANK7 10F4  
                    __pidataBANK8 10B7                     __end_of_frexp 107C                     __end_of_trunc 1488  
                _initSwitchBypass 1E00                         ?i1___lmul 0070                   _doubleTap_state 0053  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2  
                         ??_frexp 00A4              __size_of_init_timer0 0007              __size_of_init_timer2 0009  
               i1___aldiv@divisor 0020                 i1___aldiv@counter 0028                           ??_trunc 00EF  
                      __pbssBANK0 0045                        __pbssBANK2 0146                        __pbssBANK3 01A0  
                      __pbssBANK5 02A0                        __pbssBANK9 04A0                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1E67                   __CFG_VCAPEN$OFF 0000                        _delayArray 23E8  
               ?_setFeedbackState 00A0                        _delay_time 005C                  _long_press_limit 0062  
    __size_of_setDoublePressState 0035                        _delayfound 01D0                        __pmaintext 0391  
              ??_setFeedbackState 00A2                    _InitializeTaps 1EC6                           ?___lmul 00A0  
                      __pintentry 0004                        _blink_rate 007D                     ??_adc_convert 00A2  
                       ?___altoft 0126                    ___lmul@product 00A8                   _setLongTapState 0802  
                       ?___awtoft 00A8                         ?___ftpack 00A0                        ??i1___lmul 0078  
                  _FLASH_ReadWord 1E84   __end_of_updateSwitchBypassState 0800                       modulation@x 002E  
                     modulation@y 0032                   _debounce_bypass 01C8                     _suspend_blink 0056  
                       ?_init_adc 0070                         ?_init_pwm 0070                           _InitApp 1F6E  
          __end_of_InitializeTaps 1EEC                     ?_set_leds_top 00A0                        _knob1_prev 015A  
                      _knob2_prev 015C                        _knob3_prev 015E                        _knob4_prev 0160  
                      _knob5_prev 0162                  ?_set_subdivision 0136                           ___aldiv 1654  
                         ___awdiv 13E5                   __size_of___lmul 0030                           ___ftadd 0B1E  
                         ___ftdiv 081C                           ___ftneg 1DCA                        _knob_1_pos 014A  
                      _knob_2_pos 014C                           ___ftmul 08C5                        _knob_3_pos 01D4  
                         ___fttol 1761                        _knob_4_pos 01D6                        _knob_5_pos 01D8  
               _switchTap_pressed 0057                        ??___altoft 012A                  _showBootSequence 1F14  
          __end_of_FLASH_ReadWord 1EA4                        ??___awtoft 00AB                        ??___ftpack 00A5  
              InitializeTaps@itap 00A1                           __ptext1 1230                           __ptext2 0C14  
                         __ptext3 0802                           __ptext4 1654                           __ptext5 0A33  
                         __ptext6 1E4D                           __ptext7 100D                           __ptext8 1F14  
                         __ptext9 14ED            ??_getSwitchBypassState 00A2                         _T2CONbits 001C  
                _adjust_sub_delay 01C4                      __size_of_map 008B                      __size_of_isr 02DD  
          ??_setSwitchBypassState 00B4               __end_of_adc_convert 1E34                  ___aldiv@dividend 00A4  
                         _wait_ms 1FCE           __end_of_restoreLEDState 1E84                           clrloop0 1DF5  
            end_of_initialization 038D                        _modulation 11AE                           init_ram 1DE8  
                      ??_init_adc 00A0                           initloop 1DE9                        ??_init_pwm 00A0  
    updateSwitchBypassState@state 00A0                _solidring_tactiles 116E                     _longTap_timer 014E  
                   _longTap_state 0067                     _longTap_start 0055                    ??_set_leds_top 00A4  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070           __end_of_setLongTapState 081C  
          i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2                  ___aldiv@quotient 00AB  
    __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070         FLASH_ReadWord@GIEBitValue 00A2  
            __size_of_update_mode 0041                   ?_FLASH_ReadWord 00A0                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010              star_tactiles@reverse 00B4  
                      _test_timer 01C0                         _TRISBbits 008D                         _TRISCbits 008E  
                       _TRISDbits 008F                         _TRISEbits 0090                         _TRISFbits 030C  
                       _TRISGbits 030D                         i1___aldiv 15D2           setFeedbackState@f_state 00A0  
            ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 1DB6       __size_of_getCurrentLEDState 0019  
                      map@out_max 00E1                        map@out_min 00DE       __size_of_updateSwitchBypass 00EB  
        __end_of_initSwitchBypass 1E0F                       _CCP1CONbits 0293                       ___ftdiv@exp 00D3  
        __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A              _switchBypass_pressed 0150  
                     _CCP3CONbits 0313                       _CCP4CONbits 031A                       _CCP5CONbits 031E  
                     _CCP6CONbits 0613                       _CCP7CONbits 0616                       ___ftmul@exp 00BF  
              adc_convert@channel 00A3                       _CCP8CONbits 0619                       _CCP9CONbits 061C  
            set_leds_top@ledState 00A2                    __end_of___lmul 1FCE                     __pidataBIGRAM 0DF8  
                     _adc_convert 1E21                     __pidataCOMMON 07FE                    _switchTap_down 0158  
           i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F               start_initialization 02E3  
           _bottomTactile_pressed 0152               _setDoublePressState 100D                        ?i1___aldiv 0020  
                     __end_of_map 1761                       __end_of_isr 02E1                  ?_restoreLEDState 0070  
           __end_of_star_tactiles 155C                _adjusted_pot_value 01C6                       ?_modulation 002E  
                      frexp@value 00A0              ?_setDoublePressState 00B2                  ?_setLongTapState 00A0  
                        ??___lmul 00A8                       __pdataBANK0 0058                       __pdataBANK2 015A  
                     __pdataBANK3 01E1                       __pdataBANK4 0220                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                i1___aldiv@dividend 0024  
                   _tap_iteration 01E9          __size_of_updateSwitchTap 01E4                 __size_of___altoft 004B  
       __size_of_setFeedbackState 001A                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                   ??_init_timer0 00A0                     ??_init_timer2 00A0              __end_of_set_leds_top 07FE  
                       ___latbits 0003                _switchBypass_state 0069                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK4 0248  
                   _delay_counter 0146                  i1___lmul@product 0078          __end_of_showBootSequence 1F3F  
        ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A                    isr@tmpSubDelay 0043  
                        ?_InitApp 0070                         __pnvBANK3 01EC             ??_setDoublePressState 00B4  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 00A0  
               ??_set_leds_bottom 00A2                _currentBypassState 0164                          ?___awdiv 0070  
                        ?___ftadd 00A8                          ?___ftdiv 00C5                          ?___ftneg 00A0  
                        ?___ftmul 00B5                          ?___fttol 00E7                       _blink_delay 01E1  
             __size_of_modulation 0041                       _blink_state 01EB                        _B25kLength 01EC  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                     ??i1___aldiv 007C                          ?_wait_ms 00AC               _read_bottom_tactile 1271  
                  __size_of_frexp 003A                    __size_of_trunc 0052               __end_of_init_timer0 1DC1  
             __end_of_init_timer2 1DCA                         _mod_value 01DA                         _mod_timer 01B8  
                ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0                   ___aldiv@counter 00A9  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 01E5                         clear_ram0 1DF4  
                       _tap_timer 0049                         _tap_total 01BC                     set_leds_top@x 00A0  
                ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 00B6                         map@in_max 00DB                         map@in_min 00D8  
                       _sub_timer 0045                        _ADCON0bits 009D                          i1___lmul 1F3F  
                      _ADCON1bits 009E                         main@i_377 0144          __size_of_set_subdivision 00BA  
                set_subdivision@x 0136                  set_subdivision@y 0138         __size_of_read_top_tactile 0050  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A                 ??_updateSwitchTap 00B6  
               ___lmul@multiplier 00A0                 _ReadSavedSettings 155C                 ?_initSwitchBypass 0070  
                  wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070                    wait_ms@timemsl 00AE  
                       frexp@eptr 00A3       setSwitchBypassState@f_state 00B2                ??_initSwitchBypass 00B6  
                __size_of_InitApp 0030                       _mode1_state 0154                     ??_update_mode 00A0  
                     _mode2_state 0155             ??_read_bottom_tactile 00B2               updateSwitchTap@iCnt 00BE  
             ??_ReadSavedSettings 00A4                        _APFCONbits 011D                 star_tactiles@iLed 00B5  
                __size_of___aldiv 0082                  __size_of___awdiv 0051                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 00A0                  __size_of___ftneg 0009  
                        ___altoft 134A                  __size_of___ftmul 00B4                  __size_of___fttol 009F  
                        ___awtoft 1EA4             __size_of_set_leds_top 0054                          ___ftpack 1488  
                        _map$2189 00E4            _preset_programmning_on 0157            star_tactiles@iLed_1444 00B7  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  set_leds_bottom@x 00A0  
                _setFeedbackState 1E4D                       _init_timer0 1DBA                       _init_timer2 1DC1  
              _delay_time_changed 01E3        __end_of_getCurrentLEDState 1E4D        __end_of_updateSwitchBypass 0B1E  
                        __ptext10 116E                          __ptext11 1E67                          __ptext20 1271  
                        __ptext12 1E34                          __ptext21 16D6                          __ptext13 0979  
                        __ptext30 1F9E                          __ptext22 1DCA                          __ptext14 1436  
                        __ptext31 07FF                          __ptext23 08C5                          __ptext15 1042  
                        __ptext40 11EF                          __ptext32 1DB6                          __ptext24 081C  
                        __ptext16 1761                          __ptext41 1DC1                          __ptext33 1E21  
                        __ptext25 0B1E                          __ptext17 134A                          __ptext50 13E5  
                        __ptext42 1DBA                          __ptext34 155C                          __ptext26 1488  
                        __ptext18 1EA4                          __ptext43 1DD3                          __ptext35 07AA  
                        __ptext27 1E00                          __ptext19 1395                          __ptext44 1DB2  
                        __ptext36 107C                          __ptext28 1300                          __ptext37 1E84  
                        __ptext29 1FCE                          __ptext46 12B8                          __ptext38 1EC6  
                        __ptext47 11AE                          __ptext39 1F6E                          __ptext48 1F3F  
                        __ptext49 15D2         __end_of_ReadSavedSettings 15D2                  __size_of_wait_ms 0032  
     __size_of_solidring_tactiles 0040                          _ledState 01B4                      ??_modulation 0036  
                     _mod_counter 0051                        trunc@expon 0134                          _init_adc 1DD3  
                   __size_of_main 0419                          _init_pwm 11EF      __size_of_ConfigureOscillator 0004  
                    _set_leds_top 07AA                          _num_taps 0068                          int$flags 007E  
                 i1set_leds_top@x 0070               __end_of_update_mode 1271                __end_of_modulation 11EF  
                      _INTCONbits 000B                       _tap_history 01A0                 ??_set_subdivision 013A  
                        intlevel1 0000                   _set_leds_bottom 107C                        _PMCON1bits 0195  
               ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000          __size_of_restoreLEDState 001D  
              ??_showBootSequence 00B9                   _reset_sub_delay 01DC                        _OSCCONbits 0099  
                    _preset_blink 0156                    i1_set_leds_top 12B8  __size_of_updateSwitchBypassState 0001  
          __size_of_star_tactiles 006F          __size_of_setLongTapState 001A                  _read_top_tactile 1395  
                    ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076       __end_of_setDoublePressState 1042  
                    _CCP10CONbits 061F                 _bottom_push_state 0060            __end_ofi1_set_leds_top 1300  
