

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Thu Dec 29 00:55:56 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK10,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    24                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    25                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    26                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    27                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    28                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    29                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    30                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    31                           	psect	clrtext,global,class=CODE,delta=2
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    34                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	text46,local,class=CODE,merge=1,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	psect	text48,local,class=CODE,merge=1,delta=2
    87                           	dabs	1,0x920,80
    88                           	dabs	1,0x8C6,42
    89                           	dabs	1,0x8A0,38
    90                           	dabs	1,0x820,80
    91                           	dabs	1,0x7A0,80
    92                           	dabs	1,0x720,80
    93                           	dabs	1,0x6A0,80
    94                           	dabs	1,0x620,80
    95                           	dabs	1,0x5A0,80
    96                           	dabs	1,0x56E,2
    97                           	dabs	1,0x236E,0,_delayArray
    98                           	dabs	1,0x2576,0,_mod5
    99                           	dabs	1,0x7E,2
   100  0000                     	;# 
   101  0001                     	;# 
   102  0002                     	;# 
   103  0003                     	;# 
   104  0004                     	;# 
   105  0005                     	;# 
   106  0006                     	;# 
   107  0007                     	;# 
   108  0008                     	;# 
   109  0009                     	;# 
   110  000A                     	;# 
   111  000B                     	;# 
   112  000C                     	;# 
   113  000D                     	;# 
   114  000E                     	;# 
   115  000F                     	;# 
   116  0010                     	;# 
   117  0011                     	;# 
   118  0012                     	;# 
   119  0013                     	;# 
   120  0014                     	;# 
   121  0015                     	;# 
   122  0016                     	;# 
   123  0016                     	;# 
   124  0017                     	;# 
   125  0018                     	;# 
   126  0019                     	;# 
   127  001A                     	;# 
   128  001B                     	;# 
   129  001C                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0094                     	;# 
   139  0095                     	;# 
   140  0096                     	;# 
   141  0097                     	;# 
   142  0099                     	;# 
   143  009A                     	;# 
   144  009B                     	;# 
   145  009B                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009E                     	;# 
   149  010C                     	;# 
   150  010D                     	;# 
   151  010E                     	;# 
   152  010F                     	;# 
   153  0110                     	;# 
   154  0116                     	;# 
   155  0117                     	;# 
   156  011D                     	;# 
   157  018C                     	;# 
   158  018D                     	;# 
   159  018F                     	;# 
   160  0190                     	;# 
   161  0191                     	;# 
   162  0191                     	;# 
   163  0192                     	;# 
   164  0193                     	;# 
   165  0193                     	;# 
   166  0194                     	;# 
   167  0195                     	;# 
   168  0196                     	;# 
   169  0197                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  0199                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019A                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019B                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019C                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019D                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019E                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  019F                     	;# 
   193  020D                     	;# 
   194  020F                     	;# 
   195  0210                     	;# 
   196  0211                     	;# 
   197  0211                     	;# 
   198  0212                     	;# 
   199  0212                     	;# 
   200  0213                     	;# 
   201  0213                     	;# 
   202  0214                     	;# 
   203  0214                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0215                     	;# 
   207  0216                     	;# 
   208  0216                     	;# 
   209  0217                     	;# 
   210  0217                     	;# 
   211  0219                     	;# 
   212  021A                     	;# 
   213  021B                     	;# 
   214  021C                     	;# 
   215  021D                     	;# 
   216  021E                     	;# 
   217  021F                     	;# 
   218  028C                     	;# 
   219  028D                     	;# 
   220  0291                     	;# 
   221  0291                     	;# 
   222  0292                     	;# 
   223  0293                     	;# 
   224  0298                     	;# 
   225  0298                     	;# 
   226  0299                     	;# 
   227  029A                     	;# 
   228  029D                     	;# 
   229  029E                     	;# 
   230  029F                     	;# 
   231  030C                     	;# 
   232  030D                     	;# 
   233  0311                     	;# 
   234  0311                     	;# 
   235  0312                     	;# 
   236  0313                     	;# 
   237  0318                     	;# 
   238  0318                     	;# 
   239  0319                     	;# 
   240  031A                     	;# 
   241  031C                     	;# 
   242  031C                     	;# 
   243  031D                     	;# 
   244  031E                     	;# 
   245  038C                     	;# 
   246  038D                     	;# 
   247  0394                     	;# 
   248  0395                     	;# 
   249  0396                     	;# 
   250  040C                     	;# 
   251  040D                     	;# 
   252  0411                     	;# 
   253  0411                     	;# 
   254  0412                     	;# 
   255  0413                     	;# 
   256  0414                     	;# 
   257  0415                     	;# 
   258  0416                     	;# 
   259  0417                     	;# 
   260  0418                     	;# 
   261  0418                     	;# 
   262  0419                     	;# 
   263  041A                     	;# 
   264  041B                     	;# 
   265  041C                     	;# 
   266  041D                     	;# 
   267  041E                     	;# 
   268  048D                     	;# 
   269  0491                     	;# 
   270  0491                     	;# 
   271  0492                     	;# 
   272  0492                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0493                     	;# 
   276  0494                     	;# 
   277  0494                     	;# 
   278  0495                     	;# 
   279  0495                     	;# 
   280  0496                     	;# 
   281  0496                     	;# 
   282  0497                     	;# 
   283  0497                     	;# 
   284  0595                     	;# 
   285  0596                     	;# 
   286  0597                     	;# 
   287  059C                     	;# 
   288  059D                     	;# 
   289  059E                     	;# 
   290  0611                     	;# 
   291  0611                     	;# 
   292  0612                     	;# 
   293  0613                     	;# 
   294  0614                     	;# 
   295  0614                     	;# 
   296  0615                     	;# 
   297  0616                     	;# 
   298  0617                     	;# 
   299  0617                     	;# 
   300  0618                     	;# 
   301  0619                     	;# 
   302  061A                     	;# 
   303  061A                     	;# 
   304  061B                     	;# 
   305  061C                     	;# 
   306  061D                     	;# 
   307  061D                     	;# 
   308  061E                     	;# 
   309  061F                     	;# 
   310  0FE4                     	;# 
   311  0FE5                     	;# 
   312  0FE6                     	;# 
   313  0FE7                     	;# 
   314  0FE8                     	;# 
   315  0FE9                     	;# 
   316  0FEA                     	;# 
   317  0FEB                     	;# 
   318  0FED                     	;# 
   319  0FEE                     	;# 
   320  0FEF                     	;# 
   321  0000                     	;# 
   322  0001                     	;# 
   323  0002                     	;# 
   324  0003                     	;# 
   325  0004                     	;# 
   326  0005                     	;# 
   327  0006                     	;# 
   328  0007                     	;# 
   329  0008                     	;# 
   330  0009                     	;# 
   331  000A                     	;# 
   332  000B                     	;# 
   333  000C                     	;# 
   334  000D                     	;# 
   335  000E                     	;# 
   336  000F                     	;# 
   337  0010                     	;# 
   338  0011                     	;# 
   339  0012                     	;# 
   340  0013                     	;# 
   341  0014                     	;# 
   342  0015                     	;# 
   343  0016                     	;# 
   344  0016                     	;# 
   345  0017                     	;# 
   346  0018                     	;# 
   347  0019                     	;# 
   348  001A                     	;# 
   349  001B                     	;# 
   350  001C                     	;# 
   351  008C                     	;# 
   352  008D                     	;# 
   353  008E                     	;# 
   354  008F                     	;# 
   355  0090                     	;# 
   356  0091                     	;# 
   357  0092                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0099                     	;# 
   364  009A                     	;# 
   365  009B                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  010C                     	;# 
   371  010D                     	;# 
   372  010E                     	;# 
   373  010F                     	;# 
   374  0110                     	;# 
   375  0116                     	;# 
   376  0117                     	;# 
   377  011D                     	;# 
   378  018C                     	;# 
   379  018D                     	;# 
   380  018F                     	;# 
   381  0190                     	;# 
   382  0191                     	;# 
   383  0191                     	;# 
   384  0192                     	;# 
   385  0193                     	;# 
   386  0193                     	;# 
   387  0194                     	;# 
   388  0195                     	;# 
   389  0196                     	;# 
   390  0197                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  0199                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019A                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019B                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019C                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019D                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019E                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  019F                     	;# 
   414  020D                     	;# 
   415  020F                     	;# 
   416  0210                     	;# 
   417  0211                     	;# 
   418  0211                     	;# 
   419  0212                     	;# 
   420  0212                     	;# 
   421  0213                     	;# 
   422  0213                     	;# 
   423  0214                     	;# 
   424  0214                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0215                     	;# 
   428  0216                     	;# 
   429  0216                     	;# 
   430  0217                     	;# 
   431  0217                     	;# 
   432  0219                     	;# 
   433  021A                     	;# 
   434  021B                     	;# 
   435  021C                     	;# 
   436  021D                     	;# 
   437  021E                     	;# 
   438  021F                     	;# 
   439  028C                     	;# 
   440  028D                     	;# 
   441  0291                     	;# 
   442  0291                     	;# 
   443  0292                     	;# 
   444  0293                     	;# 
   445  0298                     	;# 
   446  0298                     	;# 
   447  0299                     	;# 
   448  029A                     	;# 
   449  029D                     	;# 
   450  029E                     	;# 
   451  029F                     	;# 
   452  030C                     	;# 
   453  030D                     	;# 
   454  0311                     	;# 
   455  0311                     	;# 
   456  0312                     	;# 
   457  0313                     	;# 
   458  0318                     	;# 
   459  0318                     	;# 
   460  0319                     	;# 
   461  031A                     	;# 
   462  031C                     	;# 
   463  031C                     	;# 
   464  031D                     	;# 
   465  031E                     	;# 
   466  038C                     	;# 
   467  038D                     	;# 
   468  0394                     	;# 
   469  0395                     	;# 
   470  0396                     	;# 
   471  040C                     	;# 
   472  040D                     	;# 
   473  0411                     	;# 
   474  0411                     	;# 
   475  0412                     	;# 
   476  0413                     	;# 
   477  0414                     	;# 
   478  0415                     	;# 
   479  0416                     	;# 
   480  0417                     	;# 
   481  0418                     	;# 
   482  0418                     	;# 
   483  0419                     	;# 
   484  041A                     	;# 
   485  041B                     	;# 
   486  041C                     	;# 
   487  041D                     	;# 
   488  041E                     	;# 
   489  048D                     	;# 
   490  0491                     	;# 
   491  0491                     	;# 
   492  0492                     	;# 
   493  0492                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0493                     	;# 
   497  0494                     	;# 
   498  0494                     	;# 
   499  0495                     	;# 
   500  0495                     	;# 
   501  0496                     	;# 
   502  0496                     	;# 
   503  0497                     	;# 
   504  0497                     	;# 
   505  0595                     	;# 
   506  0596                     	;# 
   507  0597                     	;# 
   508  059C                     	;# 
   509  059D                     	;# 
   510  059E                     	;# 
   511  0611                     	;# 
   512  0611                     	;# 
   513  0612                     	;# 
   514  0613                     	;# 
   515  0614                     	;# 
   516  0614                     	;# 
   517  0615                     	;# 
   518  0616                     	;# 
   519  0617                     	;# 
   520  0617                     	;# 
   521  0618                     	;# 
   522  0619                     	;# 
   523  061A                     	;# 
   524  061A                     	;# 
   525  061B                     	;# 
   526  061C                     	;# 
   527  061D                     	;# 
   528  061D                     	;# 
   529  061E                     	;# 
   530  061F                     	;# 
   531  0FE4                     	;# 
   532  0FE5                     	;# 
   533  0FE6                     	;# 
   534  0FE7                     	;# 
   535  0FE8                     	;# 
   536  0FE9                     	;# 
   537  0FEA                     	;# 
   538  0FEB                     	;# 
   539  0FED                     	;# 
   540  0FEE                     	;# 
   541  0FEF                     	;# 
   542  0000                     	;# 
   543  0001                     	;# 
   544  0002                     	;# 
   545  0003                     	;# 
   546  0004                     	;# 
   547  0005                     	;# 
   548  0006                     	;# 
   549  0007                     	;# 
   550  0008                     	;# 
   551  0009                     	;# 
   552  000A                     	;# 
   553  000B                     	;# 
   554  000C                     	;# 
   555  000D                     	;# 
   556  000E                     	;# 
   557  000F                     	;# 
   558  0010                     	;# 
   559  0011                     	;# 
   560  0012                     	;# 
   561  0013                     	;# 
   562  0014                     	;# 
   563  0015                     	;# 
   564  0016                     	;# 
   565  0016                     	;# 
   566  0017                     	;# 
   567  0018                     	;# 
   568  0019                     	;# 
   569  001A                     	;# 
   570  001B                     	;# 
   571  001C                     	;# 
   572  008C                     	;# 
   573  008D                     	;# 
   574  008E                     	;# 
   575  008F                     	;# 
   576  0090                     	;# 
   577  0091                     	;# 
   578  0092                     	;# 
   579  0093                     	;# 
   580  0094                     	;# 
   581  0095                     	;# 
   582  0096                     	;# 
   583  0097                     	;# 
   584  0099                     	;# 
   585  009A                     	;# 
   586  009B                     	;# 
   587  009B                     	;# 
   588  009C                     	;# 
   589  009D                     	;# 
   590  009E                     	;# 
   591  010C                     	;# 
   592  010D                     	;# 
   593  010E                     	;# 
   594  010F                     	;# 
   595  0110                     	;# 
   596  0116                     	;# 
   597  0117                     	;# 
   598  011D                     	;# 
   599  018C                     	;# 
   600  018D                     	;# 
   601  018F                     	;# 
   602  0190                     	;# 
   603  0191                     	;# 
   604  0191                     	;# 
   605  0192                     	;# 
   606  0193                     	;# 
   607  0193                     	;# 
   608  0194                     	;# 
   609  0195                     	;# 
   610  0196                     	;# 
   611  0197                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  0199                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019A                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019B                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019C                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019D                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019E                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  019F                     	;# 
   635  020D                     	;# 
   636  020F                     	;# 
   637  0210                     	;# 
   638  0211                     	;# 
   639  0211                     	;# 
   640  0212                     	;# 
   641  0212                     	;# 
   642  0213                     	;# 
   643  0213                     	;# 
   644  0214                     	;# 
   645  0214                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0215                     	;# 
   649  0216                     	;# 
   650  0216                     	;# 
   651  0217                     	;# 
   652  0217                     	;# 
   653  0219                     	;# 
   654  021A                     	;# 
   655  021B                     	;# 
   656  021C                     	;# 
   657  021D                     	;# 
   658  021E                     	;# 
   659  021F                     	;# 
   660  028C                     	;# 
   661  028D                     	;# 
   662  0291                     	;# 
   663  0291                     	;# 
   664  0292                     	;# 
   665  0293                     	;# 
   666  0298                     	;# 
   667  0298                     	;# 
   668  0299                     	;# 
   669  029A                     	;# 
   670  029D                     	;# 
   671  029E                     	;# 
   672  029F                     	;# 
   673  030C                     	;# 
   674  030D                     	;# 
   675  0311                     	;# 
   676  0311                     	;# 
   677  0312                     	;# 
   678  0313                     	;# 
   679  0318                     	;# 
   680  0318                     	;# 
   681  0319                     	;# 
   682  031A                     	;# 
   683  031C                     	;# 
   684  031C                     	;# 
   685  031D                     	;# 
   686  031E                     	;# 
   687  038C                     	;# 
   688  038D                     	;# 
   689  0394                     	;# 
   690  0395                     	;# 
   691  0396                     	;# 
   692  040C                     	;# 
   693  040D                     	;# 
   694  0411                     	;# 
   695  0411                     	;# 
   696  0412                     	;# 
   697  0413                     	;# 
   698  0414                     	;# 
   699  0415                     	;# 
   700  0416                     	;# 
   701  0417                     	;# 
   702  0418                     	;# 
   703  0418                     	;# 
   704  0419                     	;# 
   705  041A                     	;# 
   706  041B                     	;# 
   707  041C                     	;# 
   708  041D                     	;# 
   709  041E                     	;# 
   710  048D                     	;# 
   711  0491                     	;# 
   712  0491                     	;# 
   713  0492                     	;# 
   714  0492                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0493                     	;# 
   718  0494                     	;# 
   719  0494                     	;# 
   720  0495                     	;# 
   721  0495                     	;# 
   722  0496                     	;# 
   723  0496                     	;# 
   724  0497                     	;# 
   725  0497                     	;# 
   726  0595                     	;# 
   727  0596                     	;# 
   728  0597                     	;# 
   729  059C                     	;# 
   730  059D                     	;# 
   731  059E                     	;# 
   732  0611                     	;# 
   733  0611                     	;# 
   734  0612                     	;# 
   735  0613                     	;# 
   736  0614                     	;# 
   737  0614                     	;# 
   738  0615                     	;# 
   739  0616                     	;# 
   740  0617                     	;# 
   741  0617                     	;# 
   742  0618                     	;# 
   743  0619                     	;# 
   744  061A                     	;# 
   745  061A                     	;# 
   746  061B                     	;# 
   747  061C                     	;# 
   748  061D                     	;# 
   749  061D                     	;# 
   750  061E                     	;# 
   751  061F                     	;# 
   752  0FE4                     	;# 
   753  0FE5                     	;# 
   754  0FE6                     	;# 
   755  0FE7                     	;# 
   756  0FE8                     	;# 
   757  0FE9                     	;# 
   758  0FEA                     	;# 
   759  0FEB                     	;# 
   760  0FED                     	;# 
   761  0FEE                     	;# 
   762  0FEF                     	;# 
   763  0000                     	;# 
   764  0001                     	;# 
   765  0002                     	;# 
   766  0003                     	;# 
   767  0004                     	;# 
   768  0005                     	;# 
   769  0006                     	;# 
   770  0007                     	;# 
   771  0008                     	;# 
   772  0009                     	;# 
   773  000A                     	;# 
   774  000B                     	;# 
   775  000C                     	;# 
   776  000D                     	;# 
   777  000E                     	;# 
   778  000F                     	;# 
   779  0010                     	;# 
   780  0011                     	;# 
   781  0012                     	;# 
   782  0013                     	;# 
   783  0014                     	;# 
   784  0015                     	;# 
   785  0016                     	;# 
   786  0016                     	;# 
   787  0017                     	;# 
   788  0018                     	;# 
   789  0019                     	;# 
   790  001A                     	;# 
   791  001B                     	;# 
   792  001C                     	;# 
   793  008C                     	;# 
   794  008D                     	;# 
   795  008E                     	;# 
   796  008F                     	;# 
   797  0090                     	;# 
   798  0091                     	;# 
   799  0092                     	;# 
   800  0093                     	;# 
   801  0094                     	;# 
   802  0095                     	;# 
   803  0096                     	;# 
   804  0097                     	;# 
   805  0099                     	;# 
   806  009A                     	;# 
   807  009B                     	;# 
   808  009B                     	;# 
   809  009C                     	;# 
   810  009D                     	;# 
   811  009E                     	;# 
   812  010C                     	;# 
   813  010D                     	;# 
   814  010E                     	;# 
   815  010F                     	;# 
   816  0110                     	;# 
   817  0116                     	;# 
   818  0117                     	;# 
   819  011D                     	;# 
   820  018C                     	;# 
   821  018D                     	;# 
   822  018F                     	;# 
   823  0190                     	;# 
   824  0191                     	;# 
   825  0191                     	;# 
   826  0192                     	;# 
   827  0193                     	;# 
   828  0193                     	;# 
   829  0194                     	;# 
   830  0195                     	;# 
   831  0196                     	;# 
   832  0197                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  0199                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019A                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019B                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019C                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019D                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019E                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  019F                     	;# 
   856  020D                     	;# 
   857  020F                     	;# 
   858  0210                     	;# 
   859  0211                     	;# 
   860  0211                     	;# 
   861  0212                     	;# 
   862  0212                     	;# 
   863  0213                     	;# 
   864  0213                     	;# 
   865  0214                     	;# 
   866  0214                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0215                     	;# 
   870  0216                     	;# 
   871  0216                     	;# 
   872  0217                     	;# 
   873  0217                     	;# 
   874  0219                     	;# 
   875  021A                     	;# 
   876  021B                     	;# 
   877  021C                     	;# 
   878  021D                     	;# 
   879  021E                     	;# 
   880  021F                     	;# 
   881  028C                     	;# 
   882  028D                     	;# 
   883  0291                     	;# 
   884  0291                     	;# 
   885  0292                     	;# 
   886  0293                     	;# 
   887  0298                     	;# 
   888  0298                     	;# 
   889  0299                     	;# 
   890  029A                     	;# 
   891  029D                     	;# 
   892  029E                     	;# 
   893  029F                     	;# 
   894  030C                     	;# 
   895  030D                     	;# 
   896  0311                     	;# 
   897  0311                     	;# 
   898  0312                     	;# 
   899  0313                     	;# 
   900  0318                     	;# 
   901  0318                     	;# 
   902  0319                     	;# 
   903  031A                     	;# 
   904  031C                     	;# 
   905  031C                     	;# 
   906  031D                     	;# 
   907  031E                     	;# 
   908  038C                     	;# 
   909  038D                     	;# 
   910  0394                     	;# 
   911  0395                     	;# 
   912  0396                     	;# 
   913  040C                     	;# 
   914  040D                     	;# 
   915  0411                     	;# 
   916  0411                     	;# 
   917  0412                     	;# 
   918  0413                     	;# 
   919  0414                     	;# 
   920  0415                     	;# 
   921  0416                     	;# 
   922  0417                     	;# 
   923  0418                     	;# 
   924  0418                     	;# 
   925  0419                     	;# 
   926  041A                     	;# 
   927  041B                     	;# 
   928  041C                     	;# 
   929  041D                     	;# 
   930  041E                     	;# 
   931  048D                     	;# 
   932  0491                     	;# 
   933  0491                     	;# 
   934  0492                     	;# 
   935  0492                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0493                     	;# 
   939  0494                     	;# 
   940  0494                     	;# 
   941  0495                     	;# 
   942  0495                     	;# 
   943  0496                     	;# 
   944  0496                     	;# 
   945  0497                     	;# 
   946  0497                     	;# 
   947  0595                     	;# 
   948  0596                     	;# 
   949  0597                     	;# 
   950  059C                     	;# 
   951  059D                     	;# 
   952  059E                     	;# 
   953  0611                     	;# 
   954  0611                     	;# 
   955  0612                     	;# 
   956  0613                     	;# 
   957  0614                     	;# 
   958  0614                     	;# 
   959  0615                     	;# 
   960  0616                     	;# 
   961  0617                     	;# 
   962  0617                     	;# 
   963  0618                     	;# 
   964  0619                     	;# 
   965  061A                     	;# 
   966  061A                     	;# 
   967  061B                     	;# 
   968  061C                     	;# 
   969  061D                     	;# 
   970  061D                     	;# 
   971  061E                     	;# 
   972  061F                     	;# 
   973  0FE4                     	;# 
   974  0FE5                     	;# 
   975  0FE6                     	;# 
   976  0FE7                     	;# 
   977  0FE8                     	;# 
   978  0FE9                     	;# 
   979  0FEA                     	;# 
   980  0FEB                     	;# 
   981  0FED                     	;# 
   982  0FEE                     	;# 
   983  0FEF                     	;# 
   984  0000                     	;# 
   985  0001                     	;# 
   986  0002                     	;# 
   987  0003                     	;# 
   988  0004                     	;# 
   989  0005                     	;# 
   990  0006                     	;# 
   991  0007                     	;# 
   992  0008                     	;# 
   993  0009                     	;# 
   994  000A                     	;# 
   995  000B                     	;# 
   996  000C                     	;# 
   997  000D                     	;# 
   998  000E                     	;# 
   999  000F                     	;# 
  1000  0010                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0013                     	;# 
  1004  0014                     	;# 
  1005  0015                     	;# 
  1006  0016                     	;# 
  1007  0016                     	;# 
  1008  0017                     	;# 
  1009  0018                     	;# 
  1010  0019                     	;# 
  1011  001A                     	;# 
  1012  001B                     	;# 
  1013  001C                     	;# 
  1014  008C                     	;# 
  1015  008D                     	;# 
  1016  008E                     	;# 
  1017  008F                     	;# 
  1018  0090                     	;# 
  1019  0091                     	;# 
  1020  0092                     	;# 
  1021  0093                     	;# 
  1022  0094                     	;# 
  1023  0095                     	;# 
  1024  0096                     	;# 
  1025  0097                     	;# 
  1026  0099                     	;# 
  1027  009A                     	;# 
  1028  009B                     	;# 
  1029  009B                     	;# 
  1030  009C                     	;# 
  1031  009D                     	;# 
  1032  009E                     	;# 
  1033  010C                     	;# 
  1034  010D                     	;# 
  1035  010E                     	;# 
  1036  010F                     	;# 
  1037  0110                     	;# 
  1038  0116                     	;# 
  1039  0117                     	;# 
  1040  011D                     	;# 
  1041  018C                     	;# 
  1042  018D                     	;# 
  1043  018F                     	;# 
  1044  0190                     	;# 
  1045  0191                     	;# 
  1046  0191                     	;# 
  1047  0192                     	;# 
  1048  0193                     	;# 
  1049  0193                     	;# 
  1050  0194                     	;# 
  1051  0195                     	;# 
  1052  0196                     	;# 
  1053  0197                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  0199                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019A                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019B                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019C                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019D                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019E                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  019F                     	;# 
  1077  020D                     	;# 
  1078  020F                     	;# 
  1079  0210                     	;# 
  1080  0211                     	;# 
  1081  0211                     	;# 
  1082  0212                     	;# 
  1083  0212                     	;# 
  1084  0213                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0214                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0216                     	;# 
  1092  0216                     	;# 
  1093  0217                     	;# 
  1094  0217                     	;# 
  1095  0219                     	;# 
  1096  021A                     	;# 
  1097  021B                     	;# 
  1098  021C                     	;# 
  1099  021D                     	;# 
  1100  021E                     	;# 
  1101  021F                     	;# 
  1102  028C                     	;# 
  1103  028D                     	;# 
  1104  0291                     	;# 
  1105  0291                     	;# 
  1106  0292                     	;# 
  1107  0293                     	;# 
  1108  0298                     	;# 
  1109  0298                     	;# 
  1110  0299                     	;# 
  1111  029A                     	;# 
  1112  029D                     	;# 
  1113  029E                     	;# 
  1114  029F                     	;# 
  1115  030C                     	;# 
  1116  030D                     	;# 
  1117  0311                     	;# 
  1118  0311                     	;# 
  1119  0312                     	;# 
  1120  0313                     	;# 
  1121  0318                     	;# 
  1122  0318                     	;# 
  1123  0319                     	;# 
  1124  031A                     	;# 
  1125  031C                     	;# 
  1126  031C                     	;# 
  1127  031D                     	;# 
  1128  031E                     	;# 
  1129  038C                     	;# 
  1130  038D                     	;# 
  1131  0394                     	;# 
  1132  0395                     	;# 
  1133  0396                     	;# 
  1134  040C                     	;# 
  1135  040D                     	;# 
  1136  0411                     	;# 
  1137  0411                     	;# 
  1138  0412                     	;# 
  1139  0413                     	;# 
  1140  0414                     	;# 
  1141  0415                     	;# 
  1142  0416                     	;# 
  1143  0417                     	;# 
  1144  0418                     	;# 
  1145  0418                     	;# 
  1146  0419                     	;# 
  1147  041A                     	;# 
  1148  041B                     	;# 
  1149  041C                     	;# 
  1150  041D                     	;# 
  1151  041E                     	;# 
  1152  048D                     	;# 
  1153  0491                     	;# 
  1154  0491                     	;# 
  1155  0492                     	;# 
  1156  0492                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0493                     	;# 
  1160  0494                     	;# 
  1161  0494                     	;# 
  1162  0495                     	;# 
  1163  0495                     	;# 
  1164  0496                     	;# 
  1165  0496                     	;# 
  1166  0497                     	;# 
  1167  0497                     	;# 
  1168  0595                     	;# 
  1169  0596                     	;# 
  1170  0597                     	;# 
  1171  059C                     	;# 
  1172  059D                     	;# 
  1173  059E                     	;# 
  1174  0611                     	;# 
  1175  0611                     	;# 
  1176  0612                     	;# 
  1177  0613                     	;# 
  1178  0614                     	;# 
  1179  0614                     	;# 
  1180  0615                     	;# 
  1181  0616                     	;# 
  1182  0617                     	;# 
  1183  0617                     	;# 
  1184  0618                     	;# 
  1185  0619                     	;# 
  1186  061A                     	;# 
  1187  061A                     	;# 
  1188  061B                     	;# 
  1189  061C                     	;# 
  1190  061D                     	;# 
  1191  061D                     	;# 
  1192  061E                     	;# 
  1193  061F                     	;# 
  1194  0FE4                     	;# 
  1195  0FE5                     	;# 
  1196  0FE6                     	;# 
  1197  0FE7                     	;# 
  1198  0FE8                     	;# 
  1199  0FE9                     	;# 
  1200  0FEA                     	;# 
  1201  0FEB                     	;# 
  1202  0FED                     	;# 
  1203  0FEE                     	;# 
  1204  0FEF                     	;# 
  1205  0000                     	;# 
  1206  0001                     	;# 
  1207  0002                     	;# 
  1208  0003                     	;# 
  1209  0004                     	;# 
  1210  0005                     	;# 
  1211  0006                     	;# 
  1212  0007                     	;# 
  1213  0008                     	;# 
  1214  0009                     	;# 
  1215  000A                     	;# 
  1216  000B                     	;# 
  1217  000C                     	;# 
  1218  000D                     	;# 
  1219  000E                     	;# 
  1220  000F                     	;# 
  1221  0010                     	;# 
  1222  0011                     	;# 
  1223  0012                     	;# 
  1224  0013                     	;# 
  1225  0014                     	;# 
  1226  0015                     	;# 
  1227  0016                     	;# 
  1228  0016                     	;# 
  1229  0017                     	;# 
  1230  0018                     	;# 
  1231  0019                     	;# 
  1232  001A                     	;# 
  1233  001B                     	;# 
  1234  001C                     	;# 
  1235  008C                     	;# 
  1236  008D                     	;# 
  1237  008E                     	;# 
  1238  008F                     	;# 
  1239  0090                     	;# 
  1240  0091                     	;# 
  1241  0092                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0096                     	;# 
  1246  0097                     	;# 
  1247  0099                     	;# 
  1248  009A                     	;# 
  1249  009B                     	;# 
  1250  009B                     	;# 
  1251  009C                     	;# 
  1252  009D                     	;# 
  1253  009E                     	;# 
  1254  010C                     	;# 
  1255  010D                     	;# 
  1256  010E                     	;# 
  1257  010F                     	;# 
  1258  0110                     	;# 
  1259  0116                     	;# 
  1260  0117                     	;# 
  1261  011D                     	;# 
  1262  018C                     	;# 
  1263  018D                     	;# 
  1264  018F                     	;# 
  1265  0190                     	;# 
  1266  0191                     	;# 
  1267  0191                     	;# 
  1268  0192                     	;# 
  1269  0193                     	;# 
  1270  0193                     	;# 
  1271  0194                     	;# 
  1272  0195                     	;# 
  1273  0196                     	;# 
  1274  0197                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  0199                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019A                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019B                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019C                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019D                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019E                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  019F                     	;# 
  1298  020D                     	;# 
  1299  020F                     	;# 
  1300  0210                     	;# 
  1301  0211                     	;# 
  1302  0211                     	;# 
  1303  0212                     	;# 
  1304  0212                     	;# 
  1305  0213                     	;# 
  1306  0213                     	;# 
  1307  0214                     	;# 
  1308  0214                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0215                     	;# 
  1312  0216                     	;# 
  1313  0216                     	;# 
  1314  0217                     	;# 
  1315  0217                     	;# 
  1316  0219                     	;# 
  1317  021A                     	;# 
  1318  021B                     	;# 
  1319  021C                     	;# 
  1320  021D                     	;# 
  1321  021E                     	;# 
  1322  021F                     	;# 
  1323  028C                     	;# 
  1324  028D                     	;# 
  1325  0291                     	;# 
  1326  0291                     	;# 
  1327  0292                     	;# 
  1328  0293                     	;# 
  1329  0298                     	;# 
  1330  0298                     	;# 
  1331  0299                     	;# 
  1332  029A                     	;# 
  1333  029D                     	;# 
  1334  029E                     	;# 
  1335  029F                     	;# 
  1336  030C                     	;# 
  1337  030D                     	;# 
  1338  0311                     	;# 
  1339  0311                     	;# 
  1340  0312                     	;# 
  1341  0313                     	;# 
  1342  0318                     	;# 
  1343  0318                     	;# 
  1344  0319                     	;# 
  1345  031A                     	;# 
  1346  031C                     	;# 
  1347  031C                     	;# 
  1348  031D                     	;# 
  1349  031E                     	;# 
  1350  038C                     	;# 
  1351  038D                     	;# 
  1352  0394                     	;# 
  1353  0395                     	;# 
  1354  0396                     	;# 
  1355  040C                     	;# 
  1356  040D                     	;# 
  1357  0411                     	;# 
  1358  0411                     	;# 
  1359  0412                     	;# 
  1360  0413                     	;# 
  1361  0414                     	;# 
  1362  0415                     	;# 
  1363  0416                     	;# 
  1364  0417                     	;# 
  1365  0418                     	;# 
  1366  0418                     	;# 
  1367  0419                     	;# 
  1368  041A                     	;# 
  1369  041B                     	;# 
  1370  041C                     	;# 
  1371  041D                     	;# 
  1372  041E                     	;# 
  1373  048D                     	;# 
  1374  0491                     	;# 
  1375  0491                     	;# 
  1376  0492                     	;# 
  1377  0492                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0493                     	;# 
  1381  0494                     	;# 
  1382  0494                     	;# 
  1383  0495                     	;# 
  1384  0495                     	;# 
  1385  0496                     	;# 
  1386  0496                     	;# 
  1387  0497                     	;# 
  1388  0497                     	;# 
  1389  0595                     	;# 
  1390  0596                     	;# 
  1391  0597                     	;# 
  1392  059C                     	;# 
  1393  059D                     	;# 
  1394  059E                     	;# 
  1395  0611                     	;# 
  1396  0611                     	;# 
  1397  0612                     	;# 
  1398  0613                     	;# 
  1399  0614                     	;# 
  1400  0614                     	;# 
  1401  0615                     	;# 
  1402  0616                     	;# 
  1403  0617                     	;# 
  1404  0617                     	;# 
  1405  0618                     	;# 
  1406  0619                     	;# 
  1407  061A                     	;# 
  1408  061A                     	;# 
  1409  061B                     	;# 
  1410  061C                     	;# 
  1411  061D                     	;# 
  1412  061D                     	;# 
  1413  061E                     	;# 
  1414  061F                     	;# 
  1415  0FE4                     	;# 
  1416  0FE5                     	;# 
  1417  0FE6                     	;# 
  1418  0FE7                     	;# 
  1419  0FE8                     	;# 
  1420  0FE9                     	;# 
  1421  0FEA                     	;# 
  1422  0FEB                     	;# 
  1423  0FED                     	;# 
  1424  0FEE                     	;# 
  1425  0FEF                     	;# 
  1426  0000                     	;# 
  1427  0001                     	;# 
  1428  0002                     	;# 
  1429  0003                     	;# 
  1430  0004                     	;# 
  1431  0005                     	;# 
  1432  0006                     	;# 
  1433  0007                     	;# 
  1434  0008                     	;# 
  1435  0009                     	;# 
  1436  000A                     	;# 
  1437  000B                     	;# 
  1438  000C                     	;# 
  1439  000D                     	;# 
  1440  000E                     	;# 
  1441  000F                     	;# 
  1442  0010                     	;# 
  1443  0011                     	;# 
  1444  0012                     	;# 
  1445  0013                     	;# 
  1446  0014                     	;# 
  1447  0015                     	;# 
  1448  0016                     	;# 
  1449  0016                     	;# 
  1450  0017                     	;# 
  1451  0018                     	;# 
  1452  0019                     	;# 
  1453  001A                     	;# 
  1454  001B                     	;# 
  1455  001C                     	;# 
  1456  008C                     	;# 
  1457  008D                     	;# 
  1458  008E                     	;# 
  1459  008F                     	;# 
  1460  0090                     	;# 
  1461  0091                     	;# 
  1462  0092                     	;# 
  1463  0093                     	;# 
  1464  0094                     	;# 
  1465  0095                     	;# 
  1466  0096                     	;# 
  1467  0097                     	;# 
  1468  0099                     	;# 
  1469  009A                     	;# 
  1470  009B                     	;# 
  1471  009B                     	;# 
  1472  009C                     	;# 
  1473  009D                     	;# 
  1474  009E                     	;# 
  1475  010C                     	;# 
  1476  010D                     	;# 
  1477  010E                     	;# 
  1478  010F                     	;# 
  1479  0110                     	;# 
  1480  0116                     	;# 
  1481  0117                     	;# 
  1482  011D                     	;# 
  1483  018C                     	;# 
  1484  018D                     	;# 
  1485  018F                     	;# 
  1486  0190                     	;# 
  1487  0191                     	;# 
  1488  0191                     	;# 
  1489  0192                     	;# 
  1490  0193                     	;# 
  1491  0193                     	;# 
  1492  0194                     	;# 
  1493  0195                     	;# 
  1494  0196                     	;# 
  1495  0197                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  0199                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019A                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019B                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019C                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019D                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019E                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  019F                     	;# 
  1519  020D                     	;# 
  1520  020F                     	;# 
  1521  0210                     	;# 
  1522  0211                     	;# 
  1523  0211                     	;# 
  1524  0212                     	;# 
  1525  0212                     	;# 
  1526  0213                     	;# 
  1527  0213                     	;# 
  1528  0214                     	;# 
  1529  0214                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0215                     	;# 
  1533  0216                     	;# 
  1534  0216                     	;# 
  1535  0217                     	;# 
  1536  0217                     	;# 
  1537  0219                     	;# 
  1538  021A                     	;# 
  1539  021B                     	;# 
  1540  021C                     	;# 
  1541  021D                     	;# 
  1542  021E                     	;# 
  1543  021F                     	;# 
  1544  028C                     	;# 
  1545  028D                     	;# 
  1546  0291                     	;# 
  1547  0291                     	;# 
  1548  0292                     	;# 
  1549  0293                     	;# 
  1550  0298                     	;# 
  1551  0298                     	;# 
  1552  0299                     	;# 
  1553  029A                     	;# 
  1554  029D                     	;# 
  1555  029E                     	;# 
  1556  029F                     	;# 
  1557  030C                     	;# 
  1558  030D                     	;# 
  1559  0311                     	;# 
  1560  0311                     	;# 
  1561  0312                     	;# 
  1562  0313                     	;# 
  1563  0318                     	;# 
  1564  0318                     	;# 
  1565  0319                     	;# 
  1566  031A                     	;# 
  1567  031C                     	;# 
  1568  031C                     	;# 
  1569  031D                     	;# 
  1570  031E                     	;# 
  1571  038C                     	;# 
  1572  038D                     	;# 
  1573  0394                     	;# 
  1574  0395                     	;# 
  1575  0396                     	;# 
  1576  040C                     	;# 
  1577  040D                     	;# 
  1578  0411                     	;# 
  1579  0411                     	;# 
  1580  0412                     	;# 
  1581  0413                     	;# 
  1582  0414                     	;# 
  1583  0415                     	;# 
  1584  0416                     	;# 
  1585  0417                     	;# 
  1586  0418                     	;# 
  1587  0418                     	;# 
  1588  0419                     	;# 
  1589  041A                     	;# 
  1590  041B                     	;# 
  1591  041C                     	;# 
  1592  041D                     	;# 
  1593  041E                     	;# 
  1594  048D                     	;# 
  1595  0491                     	;# 
  1596  0491                     	;# 
  1597  0492                     	;# 
  1598  0492                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0493                     	;# 
  1602  0494                     	;# 
  1603  0494                     	;# 
  1604  0495                     	;# 
  1605  0495                     	;# 
  1606  0496                     	;# 
  1607  0496                     	;# 
  1608  0497                     	;# 
  1609  0497                     	;# 
  1610  0595                     	;# 
  1611  0596                     	;# 
  1612  0597                     	;# 
  1613  059C                     	;# 
  1614  059D                     	;# 
  1615  059E                     	;# 
  1616  0611                     	;# 
  1617  0611                     	;# 
  1618  0612                     	;# 
  1619  0613                     	;# 
  1620  0614                     	;# 
  1621  0614                     	;# 
  1622  0615                     	;# 
  1623  0616                     	;# 
  1624  0617                     	;# 
  1625  0617                     	;# 
  1626  0618                     	;# 
  1627  0619                     	;# 
  1628  061A                     	;# 
  1629  061A                     	;# 
  1630  061B                     	;# 
  1631  061C                     	;# 
  1632  061D                     	;# 
  1633  061D                     	;# 
  1634  061E                     	;# 
  1635  061F                     	;# 
  1636  0FE4                     	;# 
  1637  0FE5                     	;# 
  1638  0FE6                     	;# 
  1639  0FE7                     	;# 
  1640  0FE8                     	;# 
  1641  0FE9                     	;# 
  1642  0FEA                     	;# 
  1643  0FEB                     	;# 
  1644  0FED                     	;# 
  1645  0FEE                     	;# 
  1646  0FEF                     	;# 
  1647  0000                     	;# 
  1648  0001                     	;# 
  1649  0002                     	;# 
  1650  0003                     	;# 
  1651  0004                     	;# 
  1652  0005                     	;# 
  1653  0006                     	;# 
  1654  0007                     	;# 
  1655  0008                     	;# 
  1656  0009                     	;# 
  1657  000A                     	;# 
  1658  000B                     	;# 
  1659  000C                     	;# 
  1660  000D                     	;# 
  1661  000E                     	;# 
  1662  000F                     	;# 
  1663  0010                     	;# 
  1664  0011                     	;# 
  1665  0012                     	;# 
  1666  0013                     	;# 
  1667  0014                     	;# 
  1668  0015                     	;# 
  1669  0016                     	;# 
  1670  0016                     	;# 
  1671  0017                     	;# 
  1672  0018                     	;# 
  1673  0019                     	;# 
  1674  001A                     	;# 
  1675  001B                     	;# 
  1676  001C                     	;# 
  1677  008C                     	;# 
  1678  008D                     	;# 
  1679  008E                     	;# 
  1680  008F                     	;# 
  1681  0090                     	;# 
  1682  0091                     	;# 
  1683  0092                     	;# 
  1684  0093                     	;# 
  1685  0094                     	;# 
  1686  0095                     	;# 
  1687  0096                     	;# 
  1688  0097                     	;# 
  1689  0099                     	;# 
  1690  009A                     	;# 
  1691  009B                     	;# 
  1692  009B                     	;# 
  1693  009C                     	;# 
  1694  009D                     	;# 
  1695  009E                     	;# 
  1696  010C                     	;# 
  1697  010D                     	;# 
  1698  010E                     	;# 
  1699  010F                     	;# 
  1700  0110                     	;# 
  1701  0116                     	;# 
  1702  0117                     	;# 
  1703  011D                     	;# 
  1704  018C                     	;# 
  1705  018D                     	;# 
  1706  018F                     	;# 
  1707  0190                     	;# 
  1708  0191                     	;# 
  1709  0191                     	;# 
  1710  0192                     	;# 
  1711  0193                     	;# 
  1712  0193                     	;# 
  1713  0194                     	;# 
  1714  0195                     	;# 
  1715  0196                     	;# 
  1716  0197                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  0199                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019A                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019B                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019C                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019D                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019E                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  019F                     	;# 
  1740  020D                     	;# 
  1741  020F                     	;# 
  1742  0210                     	;# 
  1743  0211                     	;# 
  1744  0211                     	;# 
  1745  0212                     	;# 
  1746  0212                     	;# 
  1747  0213                     	;# 
  1748  0213                     	;# 
  1749  0214                     	;# 
  1750  0214                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0215                     	;# 
  1754  0216                     	;# 
  1755  0216                     	;# 
  1756  0217                     	;# 
  1757  0217                     	;# 
  1758  0219                     	;# 
  1759  021A                     	;# 
  1760  021B                     	;# 
  1761  021C                     	;# 
  1762  021D                     	;# 
  1763  021E                     	;# 
  1764  021F                     	;# 
  1765  028C                     	;# 
  1766  028D                     	;# 
  1767  0291                     	;# 
  1768  0291                     	;# 
  1769  0292                     	;# 
  1770  0293                     	;# 
  1771  0298                     	;# 
  1772  0298                     	;# 
  1773  0299                     	;# 
  1774  029A                     	;# 
  1775  029D                     	;# 
  1776  029E                     	;# 
  1777  029F                     	;# 
  1778  030C                     	;# 
  1779  030D                     	;# 
  1780  0311                     	;# 
  1781  0311                     	;# 
  1782  0312                     	;# 
  1783  0313                     	;# 
  1784  0318                     	;# 
  1785  0318                     	;# 
  1786  0319                     	;# 
  1787  031A                     	;# 
  1788  031C                     	;# 
  1789  031C                     	;# 
  1790  031D                     	;# 
  1791  031E                     	;# 
  1792  038C                     	;# 
  1793  038D                     	;# 
  1794  0394                     	;# 
  1795  0395                     	;# 
  1796  0396                     	;# 
  1797  040C                     	;# 
  1798  040D                     	;# 
  1799  0411                     	;# 
  1800  0411                     	;# 
  1801  0412                     	;# 
  1802  0413                     	;# 
  1803  0414                     	;# 
  1804  0415                     	;# 
  1805  0416                     	;# 
  1806  0417                     	;# 
  1807  0418                     	;# 
  1808  0418                     	;# 
  1809  0419                     	;# 
  1810  041A                     	;# 
  1811  041B                     	;# 
  1812  041C                     	;# 
  1813  041D                     	;# 
  1814  041E                     	;# 
  1815  048D                     	;# 
  1816  0491                     	;# 
  1817  0491                     	;# 
  1818  0492                     	;# 
  1819  0492                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0493                     	;# 
  1823  0494                     	;# 
  1824  0494                     	;# 
  1825  0495                     	;# 
  1826  0495                     	;# 
  1827  0496                     	;# 
  1828  0496                     	;# 
  1829  0497                     	;# 
  1830  0497                     	;# 
  1831  0595                     	;# 
  1832  0596                     	;# 
  1833  0597                     	;# 
  1834  059C                     	;# 
  1835  059D                     	;# 
  1836  059E                     	;# 
  1837  0611                     	;# 
  1838  0611                     	;# 
  1839  0612                     	;# 
  1840  0613                     	;# 
  1841  0614                     	;# 
  1842  0614                     	;# 
  1843  0615                     	;# 
  1844  0616                     	;# 
  1845  0617                     	;# 
  1846  0617                     	;# 
  1847  0618                     	;# 
  1848  0619                     	;# 
  1849  061A                     	;# 
  1850  061A                     	;# 
  1851  061B                     	;# 
  1852  061C                     	;# 
  1853  061D                     	;# 
  1854  061D                     	;# 
  1855  061E                     	;# 
  1856  061F                     	;# 
  1857  0FE4                     	;# 
  1858  0FE5                     	;# 
  1859  0FE6                     	;# 
  1860  0FE7                     	;# 
  1861  0FE8                     	;# 
  1862  0FE9                     	;# 
  1863  0FEA                     	;# 
  1864  0FEB                     	;# 
  1865  0FED                     	;# 
  1866  0FEE                     	;# 
  1867  0FEF                     	;# 
  1868  0000                     	;# 
  1869  0001                     	;# 
  1870  0002                     	;# 
  1871  0003                     	;# 
  1872  0004                     	;# 
  1873  0005                     	;# 
  1874  0006                     	;# 
  1875  0007                     	;# 
  1876  0008                     	;# 
  1877  0009                     	;# 
  1878  000A                     	;# 
  1879  000B                     	;# 
  1880  000C                     	;# 
  1881  000D                     	;# 
  1882  000E                     	;# 
  1883  000F                     	;# 
  1884  0010                     	;# 
  1885  0011                     	;# 
  1886  0012                     	;# 
  1887  0013                     	;# 
  1888  0014                     	;# 
  1889  0015                     	;# 
  1890  0016                     	;# 
  1891  0016                     	;# 
  1892  0017                     	;# 
  1893  0018                     	;# 
  1894  0019                     	;# 
  1895  001A                     	;# 
  1896  001B                     	;# 
  1897  001C                     	;# 
  1898  008C                     	;# 
  1899  008D                     	;# 
  1900  008E                     	;# 
  1901  008F                     	;# 
  1902  0090                     	;# 
  1903  0091                     	;# 
  1904  0092                     	;# 
  1905  0093                     	;# 
  1906  0094                     	;# 
  1907  0095                     	;# 
  1908  0096                     	;# 
  1909  0097                     	;# 
  1910  0099                     	;# 
  1911  009A                     	;# 
  1912  009B                     	;# 
  1913  009B                     	;# 
  1914  009C                     	;# 
  1915  009D                     	;# 
  1916  009E                     	;# 
  1917  010C                     	;# 
  1918  010D                     	;# 
  1919  010E                     	;# 
  1920  010F                     	;# 
  1921  0110                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  011D                     	;# 
  1925  018C                     	;# 
  1926  018D                     	;# 
  1927  018F                     	;# 
  1928  0190                     	;# 
  1929  0191                     	;# 
  1930  0191                     	;# 
  1931  0192                     	;# 
  1932  0193                     	;# 
  1933  0193                     	;# 
  1934  0194                     	;# 
  1935  0195                     	;# 
  1936  0196                     	;# 
  1937  0197                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  0199                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019A                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019B                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019D                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019E                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  019F                     	;# 
  1961  020D                     	;# 
  1962  020F                     	;# 
  1963  0210                     	;# 
  1964  0211                     	;# 
  1965  0211                     	;# 
  1966  0212                     	;# 
  1967  0212                     	;# 
  1968  0213                     	;# 
  1969  0213                     	;# 
  1970  0214                     	;# 
  1971  0214                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0215                     	;# 
  1975  0216                     	;# 
  1976  0216                     	;# 
  1977  0217                     	;# 
  1978  0217                     	;# 
  1979  0219                     	;# 
  1980  021A                     	;# 
  1981  021B                     	;# 
  1982  021C                     	;# 
  1983  021D                     	;# 
  1984  021E                     	;# 
  1985  021F                     	;# 
  1986  028C                     	;# 
  1987  028D                     	;# 
  1988  0291                     	;# 
  1989  0291                     	;# 
  1990  0292                     	;# 
  1991  0293                     	;# 
  1992  0298                     	;# 
  1993  0298                     	;# 
  1994  0299                     	;# 
  1995  029A                     	;# 
  1996  029D                     	;# 
  1997  029E                     	;# 
  1998  029F                     	;# 
  1999  030C                     	;# 
  2000  030D                     	;# 
  2001  0311                     	;# 
  2002  0311                     	;# 
  2003  0312                     	;# 
  2004  0313                     	;# 
  2005  0318                     	;# 
  2006  0318                     	;# 
  2007  0319                     	;# 
  2008  031A                     	;# 
  2009  031C                     	;# 
  2010  031C                     	;# 
  2011  031D                     	;# 
  2012  031E                     	;# 
  2013  038C                     	;# 
  2014  038D                     	;# 
  2015  0394                     	;# 
  2016  0395                     	;# 
  2017  0396                     	;# 
  2018  040C                     	;# 
  2019  040D                     	;# 
  2020  0411                     	;# 
  2021  0411                     	;# 
  2022  0412                     	;# 
  2023  0413                     	;# 
  2024  0414                     	;# 
  2025  0415                     	;# 
  2026  0416                     	;# 
  2027  0417                     	;# 
  2028  0418                     	;# 
  2029  0418                     	;# 
  2030  0419                     	;# 
  2031  041A                     	;# 
  2032  041B                     	;# 
  2033  041C                     	;# 
  2034  041D                     	;# 
  2035  041E                     	;# 
  2036  048D                     	;# 
  2037  0491                     	;# 
  2038  0491                     	;# 
  2039  0492                     	;# 
  2040  0492                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0493                     	;# 
  2044  0494                     	;# 
  2045  0494                     	;# 
  2046  0495                     	;# 
  2047  0495                     	;# 
  2048  0496                     	;# 
  2049  0496                     	;# 
  2050  0497                     	;# 
  2051  0497                     	;# 
  2052  0595                     	;# 
  2053  0596                     	;# 
  2054  0597                     	;# 
  2055  059C                     	;# 
  2056  059D                     	;# 
  2057  059E                     	;# 
  2058  0611                     	;# 
  2059  0611                     	;# 
  2060  0612                     	;# 
  2061  0613                     	;# 
  2062  0614                     	;# 
  2063  0614                     	;# 
  2064  0615                     	;# 
  2065  0616                     	;# 
  2066  0617                     	;# 
  2067  0617                     	;# 
  2068  0618                     	;# 
  2069  0619                     	;# 
  2070  061A                     	;# 
  2071  061A                     	;# 
  2072  061B                     	;# 
  2073  061C                     	;# 
  2074  061D                     	;# 
  2075  061D                     	;# 
  2076  061E                     	;# 
  2077  061F                     	;# 
  2078  0FE4                     	;# 
  2079  0FE5                     	;# 
  2080  0FE6                     	;# 
  2081  0FE7                     	;# 
  2082  0FE8                     	;# 
  2083  0FE9                     	;# 
  2084  0FEA                     	;# 
  2085  0FEB                     	;# 
  2086  0FED                     	;# 
  2087  0FEE                     	;# 
  2088  0FEF                     	;# 
  2089  0000                     	;# 
  2090  0001                     	;# 
  2091  0002                     	;# 
  2092  0003                     	;# 
  2093  0004                     	;# 
  2094  0005                     	;# 
  2095  0006                     	;# 
  2096  0007                     	;# 
  2097  0008                     	;# 
  2098  0009                     	;# 
  2099  000A                     	;# 
  2100  000B                     	;# 
  2101  000C                     	;# 
  2102  000D                     	;# 
  2103  000E                     	;# 
  2104  000F                     	;# 
  2105  0010                     	;# 
  2106  0011                     	;# 
  2107  0012                     	;# 
  2108  0013                     	;# 
  2109  0014                     	;# 
  2110  0015                     	;# 
  2111  0016                     	;# 
  2112  0016                     	;# 
  2113  0017                     	;# 
  2114  0018                     	;# 
  2115  0019                     	;# 
  2116  001A                     	;# 
  2117  001B                     	;# 
  2118  001C                     	;# 
  2119  008C                     	;# 
  2120  008D                     	;# 
  2121  008E                     	;# 
  2122  008F                     	;# 
  2123  0090                     	;# 
  2124  0091                     	;# 
  2125  0092                     	;# 
  2126  0093                     	;# 
  2127  0094                     	;# 
  2128  0095                     	;# 
  2129  0096                     	;# 
  2130  0097                     	;# 
  2131  0099                     	;# 
  2132  009A                     	;# 
  2133  009B                     	;# 
  2134  009B                     	;# 
  2135  009C                     	;# 
  2136  009D                     	;# 
  2137  009E                     	;# 
  2138  010C                     	;# 
  2139  010D                     	;# 
  2140  010E                     	;# 
  2141  010F                     	;# 
  2142  0110                     	;# 
  2143  0116                     	;# 
  2144  0117                     	;# 
  2145  011D                     	;# 
  2146  018C                     	;# 
  2147  018D                     	;# 
  2148  018F                     	;# 
  2149  0190                     	;# 
  2150  0191                     	;# 
  2151  0191                     	;# 
  2152  0192                     	;# 
  2153  0193                     	;# 
  2154  0193                     	;# 
  2155  0194                     	;# 
  2156  0195                     	;# 
  2157  0196                     	;# 
  2158  0197                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  0199                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019A                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019B                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019C                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019D                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019E                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  019F                     	;# 
  2182  020D                     	;# 
  2183  020F                     	;# 
  2184  0210                     	;# 
  2185  0211                     	;# 
  2186  0211                     	;# 
  2187  0212                     	;# 
  2188  0212                     	;# 
  2189  0213                     	;# 
  2190  0213                     	;# 
  2191  0214                     	;# 
  2192  0214                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0215                     	;# 
  2196  0216                     	;# 
  2197  0216                     	;# 
  2198  0217                     	;# 
  2199  0217                     	;# 
  2200  0219                     	;# 
  2201  021A                     	;# 
  2202  021B                     	;# 
  2203  021C                     	;# 
  2204  021D                     	;# 
  2205  021E                     	;# 
  2206  021F                     	;# 
  2207  028C                     	;# 
  2208  028D                     	;# 
  2209  0291                     	;# 
  2210  0291                     	;# 
  2211  0292                     	;# 
  2212  0293                     	;# 
  2213  0298                     	;# 
  2214  0298                     	;# 
  2215  0299                     	;# 
  2216  029A                     	;# 
  2217  029D                     	;# 
  2218  029E                     	;# 
  2219  029F                     	;# 
  2220  030C                     	;# 
  2221  030D                     	;# 
  2222  0311                     	;# 
  2223  0311                     	;# 
  2224  0312                     	;# 
  2225  0313                     	;# 
  2226  0318                     	;# 
  2227  0318                     	;# 
  2228  0319                     	;# 
  2229  031A                     	;# 
  2230  031C                     	;# 
  2231  031C                     	;# 
  2232  031D                     	;# 
  2233  031E                     	;# 
  2234  038C                     	;# 
  2235  038D                     	;# 
  2236  0394                     	;# 
  2237  0395                     	;# 
  2238  0396                     	;# 
  2239  040C                     	;# 
  2240  040D                     	;# 
  2241  0411                     	;# 
  2242  0411                     	;# 
  2243  0412                     	;# 
  2244  0413                     	;# 
  2245  0414                     	;# 
  2246  0415                     	;# 
  2247  0416                     	;# 
  2248  0417                     	;# 
  2249  0418                     	;# 
  2250  0418                     	;# 
  2251  0419                     	;# 
  2252  041A                     	;# 
  2253  041B                     	;# 
  2254  041C                     	;# 
  2255  041D                     	;# 
  2256  041E                     	;# 
  2257  048D                     	;# 
  2258  0491                     	;# 
  2259  0491                     	;# 
  2260  0492                     	;# 
  2261  0492                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0493                     	;# 
  2265  0494                     	;# 
  2266  0494                     	;# 
  2267  0495                     	;# 
  2268  0495                     	;# 
  2269  0496                     	;# 
  2270  0496                     	;# 
  2271  0497                     	;# 
  2272  0497                     	;# 
  2273  0595                     	;# 
  2274  0596                     	;# 
  2275  0597                     	;# 
  2276  059C                     	;# 
  2277  059D                     	;# 
  2278  059E                     	;# 
  2279  0611                     	;# 
  2280  0611                     	;# 
  2281  0612                     	;# 
  2282  0613                     	;# 
  2283  0614                     	;# 
  2284  0614                     	;# 
  2285  0615                     	;# 
  2286  0616                     	;# 
  2287  0617                     	;# 
  2288  0617                     	;# 
  2289  0618                     	;# 
  2290  0619                     	;# 
  2291  061A                     	;# 
  2292  061A                     	;# 
  2293  061B                     	;# 
  2294  061C                     	;# 
  2295  061D                     	;# 
  2296  061D                     	;# 
  2297  061E                     	;# 
  2298  061F                     	;# 
  2299  0FE4                     	;# 
  2300  0FE5                     	;# 
  2301  0FE6                     	;# 
  2302  0FE7                     	;# 
  2303  0FE8                     	;# 
  2304  0FE9                     	;# 
  2305  0FEA                     	;# 
  2306  0FEB                     	;# 
  2307  0FED                     	;# 
  2308  0FEE                     	;# 
  2309  0FEF                     	;# 
  2310  0000                     	;# 
  2311  0001                     	;# 
  2312  0002                     	;# 
  2313  0003                     	;# 
  2314  0004                     	;# 
  2315  0005                     	;# 
  2316  0006                     	;# 
  2317  0007                     	;# 
  2318  0008                     	;# 
  2319  0009                     	;# 
  2320  000A                     	;# 
  2321  000B                     	;# 
  2322  000C                     	;# 
  2323  000D                     	;# 
  2324  000E                     	;# 
  2325  000F                     	;# 
  2326  0010                     	;# 
  2327  0011                     	;# 
  2328  0012                     	;# 
  2329  0013                     	;# 
  2330  0014                     	;# 
  2331  0015                     	;# 
  2332  0016                     	;# 
  2333  0016                     	;# 
  2334  0017                     	;# 
  2335  0018                     	;# 
  2336  0019                     	;# 
  2337  001A                     	;# 
  2338  001B                     	;# 
  2339  001C                     	;# 
  2340  008C                     	;# 
  2341  008D                     	;# 
  2342  008E                     	;# 
  2343  008F                     	;# 
  2344  0090                     	;# 
  2345  0091                     	;# 
  2346  0092                     	;# 
  2347  0093                     	;# 
  2348  0094                     	;# 
  2349  0095                     	;# 
  2350  0096                     	;# 
  2351  0097                     	;# 
  2352  0099                     	;# 
  2353  009A                     	;# 
  2354  009B                     	;# 
  2355  009B                     	;# 
  2356  009C                     	;# 
  2357  009D                     	;# 
  2358  009E                     	;# 
  2359  010C                     	;# 
  2360  010D                     	;# 
  2361  010E                     	;# 
  2362  010F                     	;# 
  2363  0110                     	;# 
  2364  0116                     	;# 
  2365  0117                     	;# 
  2366  011D                     	;# 
  2367  018C                     	;# 
  2368  018D                     	;# 
  2369  018F                     	;# 
  2370  0190                     	;# 
  2371  0191                     	;# 
  2372  0191                     	;# 
  2373  0192                     	;# 
  2374  0193                     	;# 
  2375  0193                     	;# 
  2376  0194                     	;# 
  2377  0195                     	;# 
  2378  0196                     	;# 
  2379  0197                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  0199                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019A                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019C                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019D                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019E                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  019F                     	;# 
  2403  020D                     	;# 
  2404  020F                     	;# 
  2405  0210                     	;# 
  2406  0211                     	;# 
  2407  0211                     	;# 
  2408  0212                     	;# 
  2409  0212                     	;# 
  2410  0213                     	;# 
  2411  0213                     	;# 
  2412  0214                     	;# 
  2413  0214                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0215                     	;# 
  2417  0216                     	;# 
  2418  0216                     	;# 
  2419  0217                     	;# 
  2420  0217                     	;# 
  2421  0219                     	;# 
  2422  021A                     	;# 
  2423  021B                     	;# 
  2424  021C                     	;# 
  2425  021D                     	;# 
  2426  021E                     	;# 
  2427  021F                     	;# 
  2428  028C                     	;# 
  2429  028D                     	;# 
  2430  0291                     	;# 
  2431  0291                     	;# 
  2432  0292                     	;# 
  2433  0293                     	;# 
  2434  0298                     	;# 
  2435  0298                     	;# 
  2436  0299                     	;# 
  2437  029A                     	;# 
  2438  029D                     	;# 
  2439  029E                     	;# 
  2440  029F                     	;# 
  2441  030C                     	;# 
  2442  030D                     	;# 
  2443  0311                     	;# 
  2444  0311                     	;# 
  2445  0312                     	;# 
  2446  0313                     	;# 
  2447  0318                     	;# 
  2448  0318                     	;# 
  2449  0319                     	;# 
  2450  031A                     	;# 
  2451  031C                     	;# 
  2452  031C                     	;# 
  2453  031D                     	;# 
  2454  031E                     	;# 
  2455  038C                     	;# 
  2456  038D                     	;# 
  2457  0394                     	;# 
  2458  0395                     	;# 
  2459  0396                     	;# 
  2460  040C                     	;# 
  2461  040D                     	;# 
  2462  0411                     	;# 
  2463  0411                     	;# 
  2464  0412                     	;# 
  2465  0413                     	;# 
  2466  0414                     	;# 
  2467  0415                     	;# 
  2468  0416                     	;# 
  2469  0417                     	;# 
  2470  0418                     	;# 
  2471  0418                     	;# 
  2472  0419                     	;# 
  2473  041A                     	;# 
  2474  041B                     	;# 
  2475  041C                     	;# 
  2476  041D                     	;# 
  2477  041E                     	;# 
  2478  048D                     	;# 
  2479  0491                     	;# 
  2480  0491                     	;# 
  2481  0492                     	;# 
  2482  0492                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0493                     	;# 
  2486  0494                     	;# 
  2487  0494                     	;# 
  2488  0495                     	;# 
  2489  0495                     	;# 
  2490  0496                     	;# 
  2491  0496                     	;# 
  2492  0497                     	;# 
  2493  0497                     	;# 
  2494  0595                     	;# 
  2495  0596                     	;# 
  2496  0597                     	;# 
  2497  059C                     	;# 
  2498  059D                     	;# 
  2499  059E                     	;# 
  2500  0611                     	;# 
  2501  0611                     	;# 
  2502  0612                     	;# 
  2503  0613                     	;# 
  2504  0614                     	;# 
  2505  0614                     	;# 
  2506  0615                     	;# 
  2507  0616                     	;# 
  2508  0617                     	;# 
  2509  0617                     	;# 
  2510  0618                     	;# 
  2511  0619                     	;# 
  2512  061A                     	;# 
  2513  061A                     	;# 
  2514  061B                     	;# 
  2515  061C                     	;# 
  2516  061D                     	;# 
  2517  061D                     	;# 
  2518  061E                     	;# 
  2519  061F                     	;# 
  2520  0FE4                     	;# 
  2521  0FE5                     	;# 
  2522  0FE6                     	;# 
  2523  0FE7                     	;# 
  2524  0FE8                     	;# 
  2525  0FE9                     	;# 
  2526  0FEA                     	;# 
  2527  0FEB                     	;# 
  2528  0FED                     	;# 
  2529  0FEE                     	;# 
  2530  0FEF                     	;# 
  2531  0000                     	;# 
  2532  0001                     	;# 
  2533  0002                     	;# 
  2534  0003                     	;# 
  2535  0004                     	;# 
  2536  0005                     	;# 
  2537  0006                     	;# 
  2538  0007                     	;# 
  2539  0008                     	;# 
  2540  0009                     	;# 
  2541  000A                     	;# 
  2542  000B                     	;# 
  2543  000C                     	;# 
  2544  000D                     	;# 
  2545  000E                     	;# 
  2546  000F                     	;# 
  2547  0010                     	;# 
  2548  0011                     	;# 
  2549  0012                     	;# 
  2550  0013                     	;# 
  2551  0014                     	;# 
  2552  0015                     	;# 
  2553  0016                     	;# 
  2554  0016                     	;# 
  2555  0017                     	;# 
  2556  0018                     	;# 
  2557  0019                     	;# 
  2558  001A                     	;# 
  2559  001B                     	;# 
  2560  001C                     	;# 
  2561  008C                     	;# 
  2562  008D                     	;# 
  2563  008E                     	;# 
  2564  008F                     	;# 
  2565  0090                     	;# 
  2566  0091                     	;# 
  2567  0092                     	;# 
  2568  0093                     	;# 
  2569  0094                     	;# 
  2570  0095                     	;# 
  2571  0096                     	;# 
  2572  0097                     	;# 
  2573  0099                     	;# 
  2574  009A                     	;# 
  2575  009B                     	;# 
  2576  009B                     	;# 
  2577  009C                     	;# 
  2578  009D                     	;# 
  2579  009E                     	;# 
  2580  010C                     	;# 
  2581  010D                     	;# 
  2582  010E                     	;# 
  2583  010F                     	;# 
  2584  0110                     	;# 
  2585  0116                     	;# 
  2586  0117                     	;# 
  2587  011D                     	;# 
  2588  018C                     	;# 
  2589  018D                     	;# 
  2590  018F                     	;# 
  2591  0190                     	;# 
  2592  0191                     	;# 
  2593  0191                     	;# 
  2594  0192                     	;# 
  2595  0193                     	;# 
  2596  0193                     	;# 
  2597  0194                     	;# 
  2598  0195                     	;# 
  2599  0196                     	;# 
  2600  0197                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  0199                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019A                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019B                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019C                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019D                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019E                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  019F                     	;# 
  2624  020D                     	;# 
  2625  020F                     	;# 
  2626  0210                     	;# 
  2627  0211                     	;# 
  2628  0211                     	;# 
  2629  0212                     	;# 
  2630  0212                     	;# 
  2631  0213                     	;# 
  2632  0213                     	;# 
  2633  0214                     	;# 
  2634  0214                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0215                     	;# 
  2638  0216                     	;# 
  2639  0216                     	;# 
  2640  0217                     	;# 
  2641  0217                     	;# 
  2642  0219                     	;# 
  2643  021A                     	;# 
  2644  021B                     	;# 
  2645  021C                     	;# 
  2646  021D                     	;# 
  2647  021E                     	;# 
  2648  021F                     	;# 
  2649  028C                     	;# 
  2650  028D                     	;# 
  2651  0291                     	;# 
  2652  0291                     	;# 
  2653  0292                     	;# 
  2654  0293                     	;# 
  2655  0298                     	;# 
  2656  0298                     	;# 
  2657  0299                     	;# 
  2658  029A                     	;# 
  2659  029D                     	;# 
  2660  029E                     	;# 
  2661  029F                     	;# 
  2662  030C                     	;# 
  2663  030D                     	;# 
  2664  0311                     	;# 
  2665  0311                     	;# 
  2666  0312                     	;# 
  2667  0313                     	;# 
  2668  0318                     	;# 
  2669  0318                     	;# 
  2670  0319                     	;# 
  2671  031A                     	;# 
  2672  031C                     	;# 
  2673  031C                     	;# 
  2674  031D                     	;# 
  2675  031E                     	;# 
  2676  038C                     	;# 
  2677  038D                     	;# 
  2678  0394                     	;# 
  2679  0395                     	;# 
  2680  0396                     	;# 
  2681  040C                     	;# 
  2682  040D                     	;# 
  2683  0411                     	;# 
  2684  0411                     	;# 
  2685  0412                     	;# 
  2686  0413                     	;# 
  2687  0414                     	;# 
  2688  0415                     	;# 
  2689  0416                     	;# 
  2690  0417                     	;# 
  2691  0418                     	;# 
  2692  0418                     	;# 
  2693  0419                     	;# 
  2694  041A                     	;# 
  2695  041B                     	;# 
  2696  041C                     	;# 
  2697  041D                     	;# 
  2698  041E                     	;# 
  2699  048D                     	;# 
  2700  0491                     	;# 
  2701  0491                     	;# 
  2702  0492                     	;# 
  2703  0492                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0493                     	;# 
  2707  0494                     	;# 
  2708  0494                     	;# 
  2709  0495                     	;# 
  2710  0495                     	;# 
  2711  0496                     	;# 
  2712  0496                     	;# 
  2713  0497                     	;# 
  2714  0497                     	;# 
  2715  0595                     	;# 
  2716  0596                     	;# 
  2717  0597                     	;# 
  2718  059C                     	;# 
  2719  059D                     	;# 
  2720  059E                     	;# 
  2721  0611                     	;# 
  2722  0611                     	;# 
  2723  0612                     	;# 
  2724  0613                     	;# 
  2725  0614                     	;# 
  2726  0614                     	;# 
  2727  0615                     	;# 
  2728  0616                     	;# 
  2729  0617                     	;# 
  2730  0617                     	;# 
  2731  0618                     	;# 
  2732  0619                     	;# 
  2733  061A                     	;# 
  2734  061A                     	;# 
  2735  061B                     	;# 
  2736  061C                     	;# 
  2737  061D                     	;# 
  2738  061D                     	;# 
  2739  061E                     	;# 
  2740  061F                     	;# 
  2741  0FE4                     	;# 
  2742  0FE5                     	;# 
  2743  0FE6                     	;# 
  2744  0FE7                     	;# 
  2745  0FE8                     	;# 
  2746  0FE9                     	;# 
  2747  0FEA                     	;# 
  2748  0FEB                     	;# 
  2749  0FED                     	;# 
  2750  0FEE                     	;# 
  2751  0FEF                     	;_delayArray
  2752                           
  2753                           	psect	idataCOMMON
  2754  0003                     __pidataCOMMON:	
  2755                           
  2756                           ;initializer for _blink_rate
  2757  0003  3414               	retlw	20
  2758                           
  2759                           	psect	idataBANK0
  2760  1D75                     __pidataBANK0:	
  2761                           
  2762                           ;initializer for _baseline_delay_time
  2763  1D75  34D0               	retlw	208
  2764  1D76  3407               	retlw	7
  2765  1D77  3400               	retlw	0
  2766  1D78  3400               	retlw	0
  2767                           
  2768                           ;initializer for _delay_time
  2769  1D79  34D0               	retlw	208
  2770  1D7A  3407               	retlw	7
  2771  1D7B  3400               	retlw	0
  2772  1D7C  3400               	retlw	0
  2773                           
  2774                           ;initializer for _bottom_push_state
  2775  1D7D  3406               	retlw	6
  2776  1D7E  3400               	retlw	0
  2777                           
  2778                           ;initializer for _long_press_limit
  2779  1D7F  34E8               	retlw	232
  2780  1D80  3403               	retlw	3
  2781                           
  2782                           ;initializer for _top_push_state
  2783  1D81  3406               	retlw	6
  2784  1D82  3400               	retlw	0
  2785                           
  2786                           ;initializer for _feedback_state
  2787  1D83  34FF               	retlw	255
  2788                           
  2789                           ;initializer for _longTap_state
  2790  1D84  34FF               	retlw	255
  2791                           
  2792                           ;initializer for _num_taps
  2793  1D85  3404               	retlw	4
  2794                           
  2795                           ;initializer for _switchBypass_state
  2796  1D86  34FF               	retlw	255
  2797                           
  2798                           	psect	idataBANK2
  2799  1D64                     __pidataBANK2:	
  2800                           
  2801                           ;initializer for _blink_delay
  2802  1D64  3464               	retlw	100
  2803  1D65  3400               	retlw	0
  2804                           
  2805                           ;initializer for _knob1_prev
  2806  1D66  34D0               	retlw	208
  2807  1D67  3407               	retlw	7
  2808                           
  2809                           ;initializer for _knob2_prev
  2810  1D68  34D0               	retlw	208
  2811  1D69  3407               	retlw	7
  2812                           
  2813                           ;initializer for _knob3_prev
  2814  1D6A  34D0               	retlw	208
  2815  1D6B  3407               	retlw	7
  2816                           
  2817                           ;initializer for _knob4_prev
  2818  1D6C  34D0               	retlw	208
  2819  1D6D  3407               	retlw	7
  2820                           
  2821                           ;initializer for _knob5_prev
  2822  1D6E  34D0               	retlw	208
  2823  1D6F  3407               	retlw	7
  2824                           
  2825                           ;initializer for _tap_iteration
  2826  1D70  3401               	retlw	1
  2827  1D71  3400               	retlw	0
  2828                           
  2829                           ;initializer for _blink_state
  2830  1D72  3401               	retlw	1
  2831                           
  2832                           ;initializer for _currentBypassState
  2833  1D73  34FF               	retlw	255
  2834                           
  2835                           ;initializer for _switchTap_state
  2836  1D74  34FF               	retlw	255
  2837                           
  2838                           	psect	idataBANK3
  2839  1D14                     __pidataBANK3:	
  2840                           
  2841                           ;initializer for _delay_time_changed
  2842  1D14  3401               	retlw	1
  2843  1D15  3400               	retlw	0
  2844                           
  2845                           ;initializer for _mod_delay_time
  2846  1D16  34D0               	retlw	208
  2847  1D17  3407               	retlw	7
  2848                           
  2849                           ;initializer for _switchBypass_up
  2850  1D18  3401               	retlw	1
  2851  1D19  3400               	retlw	0
  2852                           
  2853                           	psect	idataBANK5
  2854  12EA                     __pidataBANK5:	
  2855                           
  2856                           ;initializer for _B25k
  2857  12EA  34FF               	retlw	255
  2858  12EB  3400               	retlw	0
  2859  12EC  34FF               	retlw	255
  2860  12ED  3400               	retlw	0
  2861  12EE  34FF               	retlw	255
  2862  12EF  3400               	retlw	0
  2863  12F0  34DF               	retlw	223
  2864  12F1  3400               	retlw	0
  2865  12F2  34AE               	retlw	174
  2866  12F3  3400               	retlw	0
  2867  12F4  348E               	retlw	142
  2868  12F5  3400               	retlw	0
  2869  12F6  3478               	retlw	120
  2870  12F7  3400               	retlw	0
  2871  12F8  3467               	retlw	103
  2872  12F9  3400               	retlw	0
  2873  12FA  345B               	retlw	91
  2874  12FB  3400               	retlw	0
  2875  12FC  3450               	retlw	80
  2876  12FD  3400               	retlw	0
  2877  12FE  3448               	retlw	72
  2878  12FF  3400               	retlw	0
  2879  1300  3442               	retlw	66
  2880  1301  3400               	retlw	0
  2881  1302  343C               	retlw	60
  2882  1303  3400               	retlw	0
  2883  1304  3437               	retlw	55
  2884  1305  3400               	retlw	0
  2885  1306  3433               	retlw	51
  2886  1307  3400               	retlw	0
  2887  1308  3430               	retlw	48
  2888  1309  3400               	retlw	0
  2889  130A  342D               	retlw	45
  2890  130B  3400               	retlw	0
  2891  130C  342A               	retlw	42
  2892  130D  3400               	retlw	0
  2893  130E  3427               	retlw	39
  2894  130F  3400               	retlw	0
  2895  1310  3425               	retlw	37
  2896  1311  3400               	retlw	0
  2897  1312  3423               	retlw	35
  2898  1313  3400               	retlw	0
  2899  1314  3421               	retlw	33
  2900  1315  3400               	retlw	0
  2901  1316  3420               	retlw	32
  2902  1317  3400               	retlw	0
  2903  1318  341E               	retlw	30
  2904  1319  3400               	retlw	0
  2905  131A  341D               	retlw	29
  2906  131B  3400               	retlw	0
  2907  131C  341C               	retlw	28
  2908  131D  3400               	retlw	0
  2909  131E  341B               	retlw	27
  2910  131F  3400               	retlw	0
  2911  1320  341A               	retlw	26
  2912  1321  3400               	retlw	0
  2913  1322  3419               	retlw	25
  2914  1323  3400               	retlw	0
  2915  1324  3418               	retlw	24
  2916  1325  3400               	retlw	0
  2917  1326  3417               	retlw	23
  2918  1327  3400               	retlw	0
  2919  1328  3416               	retlw	22
  2920  1329  3400               	retlw	0
  2921  132A  3415               	retlw	21
  2922  132B  3400               	retlw	0
  2923  132C  3415               	retlw	21
  2924  132D  3400               	retlw	0
  2925  132E  3414               	retlw	20
  2926  132F  3400               	retlw	0
  2927  1330  3413               	retlw	19
  2928  1331  3400               	retlw	0
  2929  1332  340F               	retlw	15
  2930  1333  3400               	retlw	0
  2931  1334  340B               	retlw	11
  2932  1335  3400               	retlw	0
  2933  1336  3407               	retlw	7
  2934  1337  3400               	retlw	0
  2935  1338  3407               	retlw	7
  2936  1339  3400               	retlw	0
  2937                           
  2938                           	psect	idataBANK6
  2939  0800                     __pidataBANK6:	
  2940                           
  2941                           ;initializer for _mod2
  2942  0800  3400               	retlw	0
  2943  0801  3400               	retlw	0
  2944  0802  340D               	retlw	13
  2945  0803  3400               	retlw	0
  2946  0804  341B               	retlw	27
  2947  0805  3400               	retlw	0
  2948  0806  3428               	retlw	40
  2949  0807  3400               	retlw	0
  2950  0808  3435               	retlw	53
  2951  0809  3400               	retlw	0
  2952  080A  3443               	retlw	67
  2953  080B  3400               	retlw	0
  2954  080C  3450               	retlw	80
  2955  080D  3400               	retlw	0
  2956  080E  345D               	retlw	93
  2957  080F  3400               	retlw	0
  2958  0810  345D               	retlw	93
  2959  0811  3400               	retlw	0
  2960  0812  3450               	retlw	80
  2961  0813  3400               	retlw	0
  2962  0814  3443               	retlw	67
  2963  0815  3400               	retlw	0
  2964  0816  3435               	retlw	53
  2965  0817  3400               	retlw	0
  2966  0818  3428               	retlw	40
  2967  0819  3400               	retlw	0
  2968  081A  341B               	retlw	27
  2969  081B  3400               	retlw	0
  2970  081C  340D               	retlw	13
  2971  081D  3400               	retlw	0
  2972  081E  3400               	retlw	0
  2973  081F  3400               	retlw	0
  2974  0820  34F3               	retlw	243
  2975  0821  34FF               	retlw	255
  2976  0822  34E5               	retlw	229
  2977  0823  34FF               	retlw	255
  2978  0824  34D8               	retlw	216
  2979  0825  34FF               	retlw	255
  2980  0826  34CB               	retlw	203
  2981  0827  34FF               	retlw	255
  2982  0828  34BD               	retlw	189
  2983  0829  34FF               	retlw	255
  2984  082A  34B0               	retlw	176
  2985  082B  34FF               	retlw	255
  2986  082C  34A3               	retlw	163
  2987  082D  34FF               	retlw	255
  2988  082E  34A3               	retlw	163
  2989  082F  34FF               	retlw	255
  2990  0830  34B0               	retlw	176
  2991  0831  34FF               	retlw	255
  2992  0832  34BD               	retlw	189
  2993  0833  34FF               	retlw	255
  2994  0834  34CB               	retlw	203
  2995  0835  34FF               	retlw	255
  2996  0836  34D8               	retlw	216
  2997  0837  34FF               	retlw	255
  2998  0838  34E5               	retlw	229
  2999  0839  34FF               	retlw	255
  3000  083A  34F3               	retlw	243
  3001  083B  34FF               	retlw	255
  3002  083C  3400               	retlw	0
  3003  083D  3400               	retlw	0
  3004                           
  3005                           	psect	idataBANK7
  3006  1080                     __pidataBANK7:	
  3007                           
  3008                           ;initializer for _mod3
  3009  1080  3400               	retlw	0
  3010  1081  3400               	retlw	0
  3011  1082  3407               	retlw	7
  3012  1083  3400               	retlw	0
  3013  1084  340D               	retlw	13
  3014  1085  3400               	retlw	0
  3015  1086  3414               	retlw	20
  3016  1087  3400               	retlw	0
  3017  1088  341B               	retlw	27
  3018  1089  3400               	retlw	0
  3019  108A  3421               	retlw	33
  3020  108B  3400               	retlw	0
  3021  108C  3428               	retlw	40
  3022  108D  3400               	retlw	0
  3023  108E  342F               	retlw	47
  3024  108F  3400               	retlw	0
  3025  1090  3435               	retlw	53
  3026  1091  3400               	retlw	0
  3027  1092  343C               	retlw	60
  3028  1093  3400               	retlw	0
  3029  1094  3443               	retlw	67
  3030  1095  3400               	retlw	0
  3031  1096  3449               	retlw	73
  3032  1097  3400               	retlw	0
  3033  1098  3450               	retlw	80
  3034  1099  3400               	retlw	0
  3035  109A  3457               	retlw	87
  3036  109B  3400               	retlw	0
  3037  109C  345D               	retlw	93
  3038  109D  3400               	retlw	0
  3039  109E  349C               	retlw	156
  3040  109F  34FF               	retlw	255
  3041  10A0  34A3               	retlw	163
  3042  10A1  34FF               	retlw	255
  3043  10A2  34A9               	retlw	169
  3044  10A3  34FF               	retlw	255
  3045  10A4  34B0               	retlw	176
  3046  10A5  34FF               	retlw	255
  3047  10A6  34B7               	retlw	183
  3048  10A7  34FF               	retlw	255
  3049  10A8  34BD               	retlw	189
  3050  10A9  34FF               	retlw	255
  3051  10AA  34C4               	retlw	196
  3052  10AB  34FF               	retlw	255
  3053  10AC  34CB               	retlw	203
  3054  10AD  34FF               	retlw	255
  3055  10AE  34D1               	retlw	209
  3056  10AF  34FF               	retlw	255
  3057  10B0  34D8               	retlw	216
  3058  10B1  34FF               	retlw	255
  3059  10B2  34DF               	retlw	223
  3060  10B3  34FF               	retlw	255
  3061  10B4  34E5               	retlw	229
  3062  10B5  34FF               	retlw	255
  3063  10B6  34EC               	retlw	236
  3064  10B7  34FF               	retlw	255
  3065  10B8  34F3               	retlw	243
  3066  10B9  34FF               	retlw	255
  3067  10BA  34F9               	retlw	249
  3068  10BB  34FF               	retlw	255
  3069  10BC  3400               	retlw	0
  3070  10BD  3400               	retlw	0
  3071                           
  3072                           	psect	idataBANK8
  3073  1042                     __pidataBANK8:	
  3074                           
  3075                           ;initializer for _mod4
  3076  1042  3464               	retlw	100
  3077  1043  3400               	retlw	0
  3078  1044  3464               	retlw	100
  3079  1045  3400               	retlw	0
  3080  1046  3464               	retlw	100
  3081  1047  3400               	retlw	0
  3082  1048  3464               	retlw	100
  3083  1049  3400               	retlw	0
  3084  104A  3464               	retlw	100
  3085  104B  3400               	retlw	0
  3086  104C  3464               	retlw	100
  3087  104D  3400               	retlw	0
  3088  104E  3464               	retlw	100
  3089  104F  3400               	retlw	0
  3090  1050  3464               	retlw	100
  3091  1051  3400               	retlw	0
  3092  1052  3464               	retlw	100
  3093  1053  3400               	retlw	0
  3094  1054  3464               	retlw	100
  3095  1055  3400               	retlw	0
  3096  1056  3464               	retlw	100
  3097  1057  3400               	retlw	0
  3098  1058  3464               	retlw	100
  3099  1059  3400               	retlw	0
  3100  105A  3464               	retlw	100
  3101  105B  3400               	retlw	0
  3102  105C  3464               	retlw	100
  3103  105D  3400               	retlw	0
  3104  105E  3464               	retlw	100
  3105  105F  3400               	retlw	0
  3106  1060  349C               	retlw	156
  3107  1061  34FF               	retlw	255
  3108  1062  349C               	retlw	156
  3109  1063  34FF               	retlw	255
  3110  1064  349C               	retlw	156
  3111  1065  34FF               	retlw	255
  3112  1066  349C               	retlw	156
  3113  1067  34FF               	retlw	255
  3114  1068  349C               	retlw	156
  3115  1069  34FF               	retlw	255
  3116  106A  349C               	retlw	156
  3117  106B  34FF               	retlw	255
  3118  106C  349C               	retlw	156
  3119  106D  34FF               	retlw	255
  3120  106E  349C               	retlw	156
  3121  106F  34FF               	retlw	255
  3122  1070  349C               	retlw	156
  3123  1071  34FF               	retlw	255
  3124  1072  349C               	retlw	156
  3125  1073  34FF               	retlw	255
  3126  1074  349C               	retlw	156
  3127  1075  34FF               	retlw	255
  3128  1076  349C               	retlw	156
  3129  1077  34FF               	retlw	255
  3130  1078  349C               	retlw	156
  3131  1079  34FF               	retlw	255
  3132  107A  349C               	retlw	156
  3133  107B  34FF               	retlw	255
  3134  107C  349C               	retlw	156
  3135  107D  34FF               	retlw	255
  3136  107E  3464               	retlw	100
  3137  107F  3400               	retlw	0
  3138                           
  3139                           	psect	idataBANK10
  3140  1004                     __pidataBANK10:	
  3141                           
  3142                           ;initializer for _mod1
  3143  1004  3400               	retlw	0
  3144  1005  3400               	retlw	0
  3145  1006  3415               	retlw	21
  3146  1007  3400               	retlw	0
  3147  1008  3429               	retlw	41
  3148  1009  3400               	retlw	0
  3149  100A  343B               	retlw	59
  3150  100B  3400               	retlw	0
  3151  100C  344A               	retlw	74
  3152  100D  3400               	retlw	0
  3153  100E  3457               	retlw	87
  3154  100F  3400               	retlw	0
  3155  1010  345F               	retlw	95
  3156  1011  3400               	retlw	0
  3157  1012  3463               	retlw	99
  3158  1013  3400               	retlw	0
  3159  1014  3463               	retlw	99
  3160  1015  3400               	retlw	0
  3161  1016  345F               	retlw	95
  3162  1017  3400               	retlw	0
  3163  1018  3457               	retlw	87
  3164  1019  3400               	retlw	0
  3165  101A  344A               	retlw	74
  3166  101B  3400               	retlw	0
  3167  101C  343B               	retlw	59
  3168  101D  3400               	retlw	0
  3169  101E  3429               	retlw	41
  3170  101F  3400               	retlw	0
  3171  1020  3415               	retlw	21
  3172  1021  3400               	retlw	0
  3173  1022  3400               	retlw	0
  3174  1023  3400               	retlw	0
  3175  1024  34EB               	retlw	235
  3176  1025  34FF               	retlw	255
  3177  1026  34D7               	retlw	215
  3178  1027  34FF               	retlw	255
  3179  1028  34C5               	retlw	197
  3180  1029  34FF               	retlw	255
  3181  102A  34B6               	retlw	182
  3182  102B  34FF               	retlw	255
  3183  102C  34A9               	retlw	169
  3184  102D  34FF               	retlw	255
  3185  102E  34A1               	retlw	161
  3186  102F  34FF               	retlw	255
  3187  1030  349D               	retlw	157
  3188  1031  34FF               	retlw	255
  3189  1032  349D               	retlw	157
  3190  1033  34FF               	retlw	255
  3191  1034  34A1               	retlw	161
  3192  1035  34FF               	retlw	255
  3193  1036  34A9               	retlw	169
  3194  1037  34FF               	retlw	255
  3195  1038  34B6               	retlw	182
  3196  1039  34FF               	retlw	255
  3197  103A  34C5               	retlw	197
  3198  103B  34FF               	retlw	255
  3199  103C  34D7               	retlw	215
  3200  103D  34FF               	retlw	255
  3201  103E  34EB               	retlw	235
  3202  103F  34FF               	retlw	255
  3203  1040  3400               	retlw	0
  3204  1041  3400               	retlw	0
  3205                           
  3206                           	psect	idataBIGRAM
  3207  0D7E                     __pidataBIGRAM:	
  3208                           
  3209                           ;initializer for _delayArray
  3210  0D7E  3422               	retlw	34
  3211  0D7F  3408               	retlw	8
  3212  0D80  34FC               	retlw	252
  3213  0D81  3407               	retlw	7
  3214  0D82  34D8               	retlw	216
  3215  0D83  3407               	retlw	7
  3216  0D84  34B5               	retlw	181
  3217  0D85  3407               	retlw	7
  3218  0D86  3493               	retlw	147
  3219  0D87  3407               	retlw	7
  3220  0D88  3472               	retlw	114
  3221  0D89  3407               	retlw	7
  3222  0D8A  3452               	retlw	82
  3223  0D8B  3407               	retlw	7
  3224  0D8C  3434               	retlw	52
  3225  0D8D  3407               	retlw	7
  3226  0D8E  3416               	retlw	22
  3227  0D8F  3407               	retlw	7
  3228  0D90  34F9               	retlw	249
  3229  0D91  3406               	retlw	6
  3230  0D92  34DD               	retlw	221
  3231  0D93  3406               	retlw	6
  3232  0D94  34C2               	retlw	194
  3233  0D95  3406               	retlw	6
  3234  0D96  34A8               	retlw	168
  3235  0D97  3406               	retlw	6
  3236  0D98  348F               	retlw	143
  3237  0D99  3406               	retlw	6
  3238  0D9A  3476               	retlw	118
  3239  0D9B  3406               	retlw	6
  3240  0D9C  345E               	retlw	94
  3241  0D9D  3406               	retlw	6
  3242  0D9E  3447               	retlw	71
  3243  0D9F  3406               	retlw	6
  3244  0DA0  3430               	retlw	48
  3245  0DA1  3406               	retlw	6
  3246  0DA2  341A               	retlw	26
  3247  0DA3  3406               	retlw	6
  3248  0DA4  3405               	retlw	5
  3249  0DA5  3406               	retlw	6
  3250  0DA6  34F0               	retlw	240
  3251  0DA7  3405               	retlw	5
  3252  0DA8  34DC               	retlw	220
  3253  0DA9  3405               	retlw	5
  3254  0DAA  34C8               	retlw	200
  3255  0DAB  3405               	retlw	5
  3256  0DAC  34B5               	retlw	181
  3257  0DAD  3405               	retlw	5
  3258  0DAE  34A3               	retlw	163
  3259  0DAF  3405               	retlw	5
  3260  0DB0  3490               	retlw	144
  3261  0DB1  3405               	retlw	5
  3262  0DB2  347F               	retlw	127
  3263  0DB3  3405               	retlw	5
  3264  0DB4  346D               	retlw	109
  3265  0DB5  3405               	retlw	5
  3266  0DB6  345C               	retlw	92
  3267  0DB7  3405               	retlw	5
  3268  0DB8  344C               	retlw	76
  3269  0DB9  3405               	retlw	5
  3270  0DBA  343C               	retlw	60
  3271  0DBB  3405               	retlw	5
  3272  0DBC  342C               	retlw	44
  3273  0DBD  3405               	retlw	5
  3274  0DBE  341D               	retlw	29
  3275  0DBF  3405               	retlw	5
  3276  0DC0  340E               	retlw	14
  3277  0DC1  3405               	retlw	5
  3278  0DC2  34FF               	retlw	255
  3279  0DC3  3404               	retlw	4
  3280  0DC4  34F1               	retlw	241
  3281  0DC5  3404               	retlw	4
  3282  0DC6  34E2               	retlw	226
  3283  0DC7  3404               	retlw	4
  3284  0DC8  34D5               	retlw	213
  3285  0DC9  3404               	retlw	4
  3286  0DCA  34C7               	retlw	199
  3287  0DCB  3404               	retlw	4
  3288  0DCC  34BA               	retlw	186
  3289  0DCD  3404               	retlw	4
  3290  0DCE  34AD               	retlw	173
  3291  0DCF  3404               	retlw	4
  3292  0DD0  34A1               	retlw	161
  3293  0DD1  3404               	retlw	4
  3294  0DD2  3494               	retlw	148
  3295  0DD3  3404               	retlw	4
  3296  0DD4  3488               	retlw	136
  3297  0DD5  3404               	retlw	4
  3298  0DD6  347D               	retlw	125
  3299  0DD7  3404               	retlw	4
  3300  0DD8  3471               	retlw	113
  3301  0DD9  3404               	retlw	4
  3302  0DDA  3466               	retlw	102
  3303  0DDB  3404               	retlw	4
  3304  0DDC  345A               	retlw	90
  3305  0DDD  3404               	retlw	4
  3306  0DDE  3450               	retlw	80
  3307  0DDF  3404               	retlw	4
  3308  0DE0  3445               	retlw	69
  3309  0DE1  3404               	retlw	4
  3310  0DE2  343A               	retlw	58
  3311  0DE3  3404               	retlw	4
  3312  0DE4  3430               	retlw	48
  3313  0DE5  3404               	retlw	4
  3314  0DE6  3426               	retlw	38
  3315  0DE7  3404               	retlw	4
  3316  0DE8  341C               	retlw	28
  3317  0DE9  3404               	retlw	4
  3318  0DEA  3412               	retlw	18
  3319  0DEB  3404               	retlw	4
  3320  0DEC  3409               	retlw	9
  3321  0DED  3404               	retlw	4
  3322  0DEE  34FF               	retlw	255
  3323  0DEF  3403               	retlw	3
  3324  0DF0  34F6               	retlw	246
  3325  0DF1  3403               	retlw	3
  3326  0DF2  34ED               	retlw	237
  3327  0DF3  3403               	retlw	3
  3328  0DF4  34E4               	retlw	228
  3329  0DF5  3403               	retlw	3
  3330  0DF6  34DC               	retlw	220
  3331  0DF7  3403               	retlw	3
  3332  0DF8  34D3               	retlw	211
  3333  0DF9  3403               	retlw	3
  3334  0DFA  34CB               	retlw	203
  3335  0DFB  3403               	retlw	3
  3336  0DFC  34C2               	retlw	194
  3337  0DFD  3403               	retlw	3
  3338  0DFE  34BA               	retlw	186
  3339  0DFF  3403               	retlw	3
  3340  0E00  34B2               	retlw	178
  3341  0E01  3403               	retlw	3
  3342  0E02  34AA               	retlw	170
  3343  0E03  3403               	retlw	3
  3344  0E04  34A2               	retlw	162
  3345  0E05  3403               	retlw	3
  3346  0E06  349B               	retlw	155
  3347  0E07  3403               	retlw	3
  3348  0E08  3493               	retlw	147
  3349  0E09  3403               	retlw	3
  3350  0E0A  348C               	retlw	140
  3351  0E0B  3403               	retlw	3
  3352  0E0C  3485               	retlw	133
  3353  0E0D  3403               	retlw	3
  3354  0E0E  347E               	retlw	126
  3355  0E0F  3403               	retlw	3
  3356  0E10  3477               	retlw	119
  3357  0E11  3403               	retlw	3
  3358  0E12  3470               	retlw	112
  3359  0E13  3403               	retlw	3
  3360  0E14  3469               	retlw	105
  3361  0E15  3403               	retlw	3
  3362  0E16  3462               	retlw	98
  3363  0E17  3403               	retlw	3
  3364  0E18  345C               	retlw	92
  3365  0E19  3403               	retlw	3
  3366  0E1A  3455               	retlw	85
  3367  0E1B  3403               	retlw	3
  3368  0E1C  344F               	retlw	79
  3369  0E1D  3403               	retlw	3
  3370  0E1E  3448               	retlw	72
  3371  0E1F  3403               	retlw	3
  3372  0E20  3442               	retlw	66
  3373  0E21  3403               	retlw	3
  3374  0E22  343C               	retlw	60
  3375  0E23  3403               	retlw	3
  3376  0E24  3436               	retlw	54
  3377  0E25  3403               	retlw	3
  3378  0E26  3430               	retlw	48
  3379  0E27  3403               	retlw	3
  3380  0E28  342A               	retlw	42
  3381  0E29  3403               	retlw	3
  3382  0E2A  3424               	retlw	36
  3383  0E2B  3403               	retlw	3
  3384  0E2C  341F               	retlw	31
  3385  0E2D  3403               	retlw	3
  3386  0E2E  3419               	retlw	25
  3387  0E2F  3403               	retlw	3
  3388  0E30  3413               	retlw	19
  3389  0E31  3403               	retlw	3
  3390  0E32  340E               	retlw	14
  3391  0E33  3403               	retlw	3
  3392  0E34  3409               	retlw	9
  3393  0E35  3403               	retlw	3
  3394  0E36  3403               	retlw	3
  3395  0E37  3403               	retlw	3
  3396  0E38  34FE               	retlw	254
  3397  0E39  3402               	retlw	2
  3398  0E3A  34F9               	retlw	249
  3399  0E3B  3402               	retlw	2
  3400  0E3C  34F4               	retlw	244
  3401  0E3D  3402               	retlw	2
  3402  0E3E  34EF               	retlw	239
  3403  0E3F  3402               	retlw	2
  3404  0E40  34EA               	retlw	234
  3405  0E41  3402               	retlw	2
  3406  0E42  34E5               	retlw	229
  3407  0E43  3402               	retlw	2
  3408  0E44  34E0               	retlw	224
  3409  0E45  3402               	retlw	2
  3410  0E46  34DB               	retlw	219
  3411  0E47  3402               	retlw	2
  3412  0E48  34D7               	retlw	215
  3413  0E49  3402               	retlw	2
  3414  0E4A  34D2               	retlw	210
  3415  0E4B  3402               	retlw	2
  3416  0E4C  34CD               	retlw	205
  3417  0E4D  3402               	retlw	2
  3418  0E4E  34C9               	retlw	201
  3419  0E4F  3402               	retlw	2
  3420  0E50  34C4               	retlw	196
  3421  0E51  3402               	retlw	2
  3422  0E52  34C0               	retlw	192
  3423  0E53  3402               	retlw	2
  3424  0E54  34BC               	retlw	188
  3425  0E55  3402               	retlw	2
  3426  0E56  34B7               	retlw	183
  3427  0E57  3402               	retlw	2
  3428  0E58  34B3               	retlw	179
  3429  0E59  3402               	retlw	2
  3430  0E5A  34AF               	retlw	175
  3431  0E5B  3402               	retlw	2
  3432  0E5C  34AB               	retlw	171
  3433  0E5D  3402               	retlw	2
  3434  0E5E  34A6               	retlw	166
  3435  0E5F  3402               	retlw	2
  3436  0E60  34A2               	retlw	162
  3437  0E61  3402               	retlw	2
  3438  0E62  349E               	retlw	158
  3439  0E63  3402               	retlw	2
  3440  0E64  349A               	retlw	154
  3441  0E65  3402               	retlw	2
  3442  0E66  3497               	retlw	151
  3443  0E67  3402               	retlw	2
  3444  0E68  3493               	retlw	147
  3445  0E69  3402               	retlw	2
  3446  0E6A  348F               	retlw	143
  3447  0E6B  3402               	retlw	2
  3448  0E6C  348B               	retlw	139
  3449  0E6D  3402               	retlw	2
  3450  0E6E  3487               	retlw	135
  3451  0E6F  3402               	retlw	2
  3452  0E70  3484               	retlw	132
  3453  0E71  3402               	retlw	2
  3454  0E72  3480               	retlw	128
  3455  0E73  3402               	retlw	2
  3456  0E74  347C               	retlw	124
  3457  0E75  3402               	retlw	2
  3458  0E76  3479               	retlw	121
  3459  0E77  3402               	retlw	2
  3460  0E78  3475               	retlw	117
  3461  0E79  3402               	retlw	2
  3462  0E7A  3472               	retlw	114
  3463  0E7B  3402               	retlw	2
  3464  0E7C  346E               	retlw	110
  3465  0E7D  3402               	retlw	2
  3466  0E7E  346B               	retlw	107
  3467  0E7F  3402               	retlw	2
  3468  0E80  3467               	retlw	103
  3469  0E81  3402               	retlw	2
  3470  0E82  3464               	retlw	100
  3471  0E83  3402               	retlw	2
  3472  0E84  3461               	retlw	97
  3473  0E85  3402               	retlw	2
  3474  0E86  345E               	retlw	94
  3475  0E87  3402               	retlw	2
  3476  0E88  345A               	retlw	90
  3477  0E89  3402               	retlw	2
  3478  0E8A  3457               	retlw	87
  3479  0E8B  3402               	retlw	2
  3480  0E8C  3454               	retlw	84
  3481  0E8D  3402               	retlw	2
  3482  0E8E  3451               	retlw	81
  3483  0E8F  3402               	retlw	2
  3484  0E90  344E               	retlw	78
  3485  0E91  3402               	retlw	2
  3486  0E92  344B               	retlw	75
  3487  0E93  3402               	retlw	2
  3488  0E94  3448               	retlw	72
  3489  0E95  3402               	retlw	2
  3490  0E96  3445               	retlw	69
  3491  0E97  3402               	retlw	2
  3492  0E98  3442               	retlw	66
  3493  0E99  3402               	retlw	2
  3494  0E9A  343F               	retlw	63
  3495  0E9B  3402               	retlw	2
  3496  0E9C  343C               	retlw	60
  3497  0E9D  3402               	retlw	2
  3498  0E9E  3439               	retlw	57
  3499  0E9F  3402               	retlw	2
  3500  0EA0  3436               	retlw	54
  3501  0EA1  3402               	retlw	2
  3502  0EA2  3433               	retlw	51
  3503  0EA3  3402               	retlw	2
  3504  0EA4  3430               	retlw	48
  3505  0EA5  3402               	retlw	2
  3506  0EA6  342E               	retlw	46
  3507  0EA7  3402               	retlw	2
  3508  0EA8  342B               	retlw	43
  3509  0EA9  3402               	retlw	2
  3510  0EAA  3428               	retlw	40
  3511  0EAB  3402               	retlw	2
  3512  0EAC  3425               	retlw	37
  3513  0EAD  3402               	retlw	2
  3514  0EAE  3423               	retlw	35
  3515  0EAF  3402               	retlw	2
  3516  0EB0  3420               	retlw	32
  3517  0EB1  3402               	retlw	2
  3518  0EB2  341E               	retlw	30
  3519  0EB3  3402               	retlw	2
  3520  0EB4  341B               	retlw	27
  3521  0EB5  3402               	retlw	2
  3522  0EB6  3418               	retlw	24
  3523  0EB7  3402               	retlw	2
  3524  0EB8  3416               	retlw	22
  3525  0EB9  3402               	retlw	2
  3526  0EBA  3413               	retlw	19
  3527  0EBB  3402               	retlw	2
  3528  0EBC  3411               	retlw	17
  3529  0EBD  3402               	retlw	2
  3530  0EBE  340E               	retlw	14
  3531  0EBF  3402               	retlw	2
  3532  0EC0  340C               	retlw	12
  3533  0EC1  3402               	retlw	2
  3534  0EC2  340A               	retlw	10
  3535  0EC3  3402               	retlw	2
  3536  0EC4  3407               	retlw	7
  3537  0EC5  3402               	retlw	2
  3538  0EC6  3405               	retlw	5
  3539  0EC7  3402               	retlw	2
  3540  0EC8  3402               	retlw	2
  3541  0EC9  3402               	retlw	2
  3542  0ECA  3400               	retlw	0
  3543  0ECB  3402               	retlw	2
  3544  0ECC  34FE               	retlw	254
  3545  0ECD  3401               	retlw	1
  3546  0ECE  34FB               	retlw	251
  3547  0ECF  3401               	retlw	1
  3548  0ED0  34F9               	retlw	249
  3549  0ED1  3401               	retlw	1
  3550  0ED2  34F7               	retlw	247
  3551  0ED3  3401               	retlw	1
  3552  0ED4  34F5               	retlw	245
  3553  0ED5  3401               	retlw	1
  3554  0ED6  34F2               	retlw	242
  3555  0ED7  3401               	retlw	1
  3556  0ED8  34F0               	retlw	240
  3557  0ED9  3401               	retlw	1
  3558  0EDA  34EE               	retlw	238
  3559  0EDB  3401               	retlw	1
  3560  0EDC  34EC               	retlw	236
  3561  0EDD  3401               	retlw	1
  3562  0EDE  34EA               	retlw	234
  3563  0EDF  3401               	retlw	1
  3564  0EE0  34E8               	retlw	232
  3565  0EE1  3401               	retlw	1
  3566  0EE2  34E6               	retlw	230
  3567  0EE3  3401               	retlw	1
  3568  0EE4  34E3               	retlw	227
  3569  0EE5  3401               	retlw	1
  3570  0EE6  34E1               	retlw	225
  3571  0EE7  3401               	retlw	1
  3572  0EE8  34DF               	retlw	223
  3573  0EE9  3401               	retlw	1
  3574  0EEA  34DD               	retlw	221
  3575  0EEB  3401               	retlw	1
  3576  0EEC  34DB               	retlw	219
  3577  0EED  3401               	retlw	1
  3578  0EEE  34D9               	retlw	217
  3579  0EEF  3401               	retlw	1
  3580  0EF0  34D7               	retlw	215
  3581  0EF1  3401               	retlw	1
  3582  0EF2  34D5               	retlw	213
  3583  0EF3  3401               	retlw	1
  3584  0EF4  34D3               	retlw	211
  3585  0EF5  3401               	retlw	1
  3586  0EF6  34D2               	retlw	210
  3587  0EF7  3401               	retlw	1
  3588  0EF8  34D0               	retlw	208
  3589  0EF9  3401               	retlw	1
  3590  0EFA  34CE               	retlw	206
  3591  0EFB  3401               	retlw	1
  3592  0EFC  34CC               	retlw	204
  3593  0EFD  3401               	retlw	1
  3594  0EFE  34CA               	retlw	202
  3595  0EFF  3401               	retlw	1
  3596  0F00  34C8               	retlw	200
  3597  0F01  3401               	retlw	1
  3598  0F02  34C6               	retlw	198
  3599  0F03  3401               	retlw	1
  3600  0F04  34C4               	retlw	196
  3601  0F05  3401               	retlw	1
  3602  0F06  34C3               	retlw	195
  3603  0F07  3401               	retlw	1
  3604  0F08  34C1               	retlw	193
  3605  0F09  3401               	retlw	1
  3606  0F0A  34BF               	retlw	191
  3607  0F0B  3401               	retlw	1
  3608  0F0C  34BD               	retlw	189
  3609  0F0D  3401               	retlw	1
  3610  0F0E  34BC               	retlw	188
  3611  0F0F  3401               	retlw	1
  3612  0F10  34BA               	retlw	186
  3613  0F11  3401               	retlw	1
  3614  0F12  34B8               	retlw	184
  3615  0F13  3401               	retlw	1
  3616  0F14  34B6               	retlw	182
  3617  0F15  3401               	retlw	1
  3618  0F16  34B5               	retlw	181
  3619  0F17  3401               	retlw	1
  3620  0F18  34B3               	retlw	179
  3621  0F19  3401               	retlw	1
  3622  0F1A  34B1               	retlw	177
  3623  0F1B  3401               	retlw	1
  3624  0F1C  34B0               	retlw	176
  3625  0F1D  3401               	retlw	1
  3626  0F1E  34AE               	retlw	174
  3627  0F1F  3401               	retlw	1
  3628  0F20  34AC               	retlw	172
  3629  0F21  3401               	retlw	1
  3630  0F22  34AB               	retlw	171
  3631  0F23  3401               	retlw	1
  3632  0F24  34A9               	retlw	169
  3633  0F25  3401               	retlw	1
  3634  0F26  34A8               	retlw	168
  3635  0F27  3401               	retlw	1
  3636  0F28  34A6               	retlw	166
  3637  0F29  3401               	retlw	1
  3638  0F2A  34A4               	retlw	164
  3639  0F2B  3401               	retlw	1
  3640  0F2C  34A3               	retlw	163
  3641  0F2D  3401               	retlw	1
  3642  0F2E  34A1               	retlw	161
  3643  0F2F  3401               	retlw	1
  3644  0F30  34A0               	retlw	160
  3645  0F31  3401               	retlw	1
  3646  0F32  349E               	retlw	158
  3647  0F33  3401               	retlw	1
  3648  0F34  349D               	retlw	157
  3649  0F35  3401               	retlw	1
  3650  0F36  349B               	retlw	155
  3651  0F37  3401               	retlw	1
  3652  0F38  349A               	retlw	154
  3653  0F39  3401               	retlw	1
  3654  0F3A  3498               	retlw	152
  3655  0F3B  3401               	retlw	1
  3656  0F3C  3497               	retlw	151
  3657  0F3D  3401               	retlw	1
  3658  0F3E  3495               	retlw	149
  3659  0F3F  3401               	retlw	1
  3660  0F40  3494               	retlw	148
  3661  0F41  3401               	retlw	1
  3662  0F42  3492               	retlw	146
  3663  0F43  3401               	retlw	1
  3664  0F44  3491               	retlw	145
  3665  0F45  3401               	retlw	1
  3666  0F46  3490               	retlw	144
  3667  0F47  3401               	retlw	1
  3668  0F48  348E               	retlw	142
  3669  0F49  3401               	retlw	1
  3670  0F4A  348D               	retlw	141
  3671  0F4B  3401               	retlw	1
  3672  0F4C  348B               	retlw	139
  3673  0F4D  3401               	retlw	1
  3674  0F4E  348A               	retlw	138
  3675  0F4F  3401               	retlw	1
  3676  0F50  3489               	retlw	137
  3677  0F51  3401               	retlw	1
  3678  0F52  3487               	retlw	135
  3679  0F53  3401               	retlw	1
  3680  0F54  3486               	retlw	134
  3681  0F55  3401               	retlw	1
  3682  0F56  3485               	retlw	133
  3683  0F57  3401               	retlw	1
  3684  0F58  3483               	retlw	131
  3685  0F59  3401               	retlw	1
  3686  0F5A  3482               	retlw	130
  3687  0F5B  3401               	retlw	1
  3688  0F5C  3481               	retlw	129
  3689  0F5D  3401               	retlw	1
  3690  0F5E  347F               	retlw	127
  3691  0F5F  3401               	retlw	1
  3692  0F60  347E               	retlw	126
  3693  0F61  3401               	retlw	1
  3694  0F62  347D               	retlw	125
  3695  0F63  3401               	retlw	1
  3696  0F64  347B               	retlw	123
  3697  0F65  3401               	retlw	1
  3698  0F66  347A               	retlw	122
  3699  0F67  3401               	retlw	1
  3700  0F68  3479               	retlw	121
  3701  0F69  3401               	retlw	1
  3702  0F6A  3478               	retlw	120
  3703  0F6B  3401               	retlw	1
  3704  0F6C  3476               	retlw	118
  3705  0F6D  3401               	retlw	1
  3706  0F6E  3475               	retlw	117
  3707  0F6F  3401               	retlw	1
  3708  0F70  3474               	retlw	116
  3709  0F71  3401               	retlw	1
  3710  0F72  3473               	retlw	115
  3711  0F73  3401               	retlw	1
  3712  0F74  3471               	retlw	113
  3713  0F75  3401               	retlw	1
  3714  0F76  3470               	retlw	112
  3715  0F77  3401               	retlw	1
  3716  0F78  346F               	retlw	111
  3717  0F79  3401               	retlw	1
  3718  0F7A  346E               	retlw	110
  3719  0F7B  3401               	retlw	1
  3720  0F7C  3400               	retlw	0
  3721  0F7D  3400               	retlw	0
  3722  0F7E  3400               	retlw	0
  3723  0F7F  3400               	retlw	0
  3724  0F80  3400               	retlw	0
  3725  0F81  3400               	retlw	0
  3726  0F82  3400               	retlw	0
  3727  0F83  3400               	retlw	0
  3728  0F84  3400               	retlw	0
  3729  0F85  3400               	retlw	0
  3730                           
  3731                           ;initializer for _mod5
  3732  0F86  3400               	retlw	0
  3733  0F87  3400               	retlw	0
  3734  0F88  340A               	retlw	10
  3735  0F89  3400               	retlw	0
  3736  0F8A  3414               	retlw	20
  3737  0F8B  3400               	retlw	0
  3738  0F8C  341E               	retlw	30
  3739  0F8D  3400               	retlw	0
  3740  0F8E  3428               	retlw	40
  3741  0F8F  3400               	retlw	0
  3742  0F90  3432               	retlw	50
  3743  0F91  3400               	retlw	0
  3744  0F92  343A               	retlw	58
  3745  0F93  3400               	retlw	0
  3746  0F94  3442               	retlw	66
  3747  0F95  3400               	retlw	0
  3748  0F96  344A               	retlw	74
  3749  0F97  3400               	retlw	0
  3750  0F98  3450               	retlw	80
  3751  0F99  3400               	retlw	0
  3752  0F9A  3456               	retlw	86
  3753  0F9B  3400               	retlw	0
  3754  0F9C  345B               	retlw	91
  3755  0F9D  3400               	retlw	0
  3756  0F9E  345F               	retlw	95
  3757  0F9F  3400               	retlw	0
  3758  0FA0  3461               	retlw	97
  3759  0FA1  3400               	retlw	0
  3760  0FA2  3463               	retlw	99
  3761  0FA3  3400               	retlw	0
  3762  0FA4  3464               	retlw	100
  3763  0FA5  3400               	retlw	0
  3764  0FA6  3463               	retlw	99
  3765  0FA7  3400               	retlw	0
  3766  0FA8  3461               	retlw	97
  3767  0FA9  3400               	retlw	0
  3768  0FAA  345F               	retlw	95
  3769  0FAB  3400               	retlw	0
  3770  0FAC  345B               	retlw	91
  3771  0FAD  3400               	retlw	0
  3772  0FAE  3456               	retlw	86
  3773  0FAF  3400               	retlw	0
  3774  0FB0  3450               	retlw	80
  3775  0FB1  3400               	retlw	0
  3776  0FB2  344A               	retlw	74
  3777  0FB3  3400               	retlw	0
  3778  0FB4  3442               	retlw	66
  3779  0FB5  3400               	retlw	0
  3780  0FB6  343A               	retlw	58
  3781  0FB7  3400               	retlw	0
  3782  0FB8  3432               	retlw	50
  3783  0FB9  3400               	retlw	0
  3784  0FBA  3428               	retlw	40
  3785  0FBB  3400               	retlw	0
  3786  0FBC  341E               	retlw	30
  3787  0FBD  3400               	retlw	0
  3788  0FBE  3414               	retlw	20
  3789  0FBF  3400               	retlw	0
  3790  0FC0  340A               	retlw	10
  3791  0FC1  3400               	retlw	0
  3792  0FC2  3400               	retlw	0
  3793  0FC3  3400               	retlw	0
  3794  0FC4  34F6               	retlw	246
  3795  0FC5  34FF               	retlw	255
  3796  0FC6  34EC               	retlw	236
  3797  0FC7  34FF               	retlw	255
  3798  0FC8  34E2               	retlw	226
  3799  0FC9  34FF               	retlw	255
  3800  0FCA  34D8               	retlw	216
  3801  0FCB  34FF               	retlw	255
  3802  0FCC  34CE               	retlw	206
  3803  0FCD  34FF               	retlw	255
  3804  0FCE  34C6               	retlw	198
  3805  0FCF  34FF               	retlw	255
  3806  0FD0  34BE               	retlw	190
  3807  0FD1  34FF               	retlw	255
  3808  0FD2  34B6               	retlw	182
  3809  0FD3  34FF               	retlw	255
  3810  0FD4  34B0               	retlw	176
  3811  0FD5  34FF               	retlw	255
  3812  0FD6  34AA               	retlw	170
  3813  0FD7  34FF               	retlw	255
  3814  0FD8  34A5               	retlw	165
  3815  0FD9  34FF               	retlw	255
  3816  0FDA  34A1               	retlw	161
  3817  0FDB  34FF               	retlw	255
  3818  0FDC  349F               	retlw	159
  3819  0FDD  34FF               	retlw	255
  3820  0FDE  349D               	retlw	157
  3821  0FDF  34FF               	retlw	255
  3822  0FE0  349C               	retlw	156
  3823  0FE1  34FF               	retlw	255
  3824  0FE2  349D               	retlw	157
  3825  0FE3  34FF               	retlw	255
  3826  0FE4  349F               	retlw	159
  3827  0FE5  34FF               	retlw	255
  3828  0FE6  34A1               	retlw	161
  3829  0FE7  34FF               	retlw	255
  3830  0FE8  34A5               	retlw	165
  3831  0FE9  34FF               	retlw	255
  3832  0FEA  34AA               	retlw	170
  3833  0FEB  34FF               	retlw	255
  3834  0FEC  34B0               	retlw	176
  3835  0FED  34FF               	retlw	255
  3836  0FEE  34B6               	retlw	182
  3837  0FEF  34FF               	retlw	255
  3838  0FF0  34BE               	retlw	190
  3839  0FF1  34FF               	retlw	255
  3840  0FF2  34C6               	retlw	198
  3841  0FF3  34FF               	retlw	255
  3842  0FF4  34CE               	retlw	206
  3843  0FF5  34FF               	retlw	255
  3844  0FF6  34D8               	retlw	216
  3845  0FF7  34FF               	retlw	255
  3846  0FF8  34E2               	retlw	226
  3847  0FF9  34FF               	retlw	255
  3848  0FFA  34EC               	retlw	236
  3849  0FFB  34FF               	retlw	255
  3850  0FFC  34F6               	retlw	246
  3851  0FFD  34FF               	retlw	255
  3852  0FFE  3400               	retlw	0
  3853  0FFF  3400               	retlw	0
  3854                           
  3855                           	psect	nvBANK3
  3856  01E9                     __pnvBANK3:	
  3857  01E9                     _B25kLength:	
  3858  01E9                     	ds	2
  3859  000B                     _INTCONbits	set	11
  3860  000E                     _PORTCbits	set	14
  3861  000F                     _PORTDbits	set	15
  3862  0010                     _PORTEbits	set	16
  3863  001B                     _PR2	set	27
  3864  001C                     _T2CONbits	set	28
  3865  009D                     _ADCON0bits	set	157
  3866  009E                     _ADCON1bits	set	158
  3867  009C                     _ADRESH	set	156
  3868  009B                     _ADRESL	set	155
  3869  0095                     _OPTION_REGbits	set	149
  3870  0099                     _OSCCONbits	set	153
  3871  008D                     _TRISBbits	set	141
  3872  008E                     _TRISCbits	set	142
  3873  008F                     _TRISDbits	set	143
  3874  0090                     _TRISEbits	set	144
  3875  011D                     _APFCONbits	set	285
  3876  010D                     _LATBbits	set	269
  3877  010F                     _LATDbits	set	271
  3878  0190                     _ANSELEbits	set	400
  3879  0192                     _PMADRH	set	402
  3880  0191                     _PMADRL	set	401
  3881  0195                     _PMCON1bits	set	405
  3882  0196                     _PMCON2	set	406
  3883  0194                     _PMDATH	set	404
  3884  0193                     _PMDATL	set	403
  3885  0291                     _CCPR1	set	657
  3886  0298                     _CCPR2	set	664
  3887  0293                     _CCP1CONbits	set	659
  3888  029A                     _CCP2CONbits	set	666
  3889  029D                     _CCPTMRS0	set	669
  3890  029E                     _CCPTMRS1	set	670
  3891  029F                     _CCPTMRS2	set	671
  3892  0311                     _CCPR3	set	785
  3893  0318                     _CCPR4	set	792
  3894  031C                     _CCPR5	set	796
  3895  0313                     _CCP3CONbits	set	787
  3896  031A                     _CCP4CONbits	set	794
  3897  031E                     _CCP5CONbits	set	798
  3898  030C                     _TRISFbits	set	780
  3899  030D                     _TRISGbits	set	781
  3900  038C                     _LATFbits	set	908
  3901  038D                     _LATGbits	set	909
  3902  040C                     _ANSELFbits	set	1036
  3903  061A                     _CCPR9	set	1562
  3904  061F                     _CCP10CONbits	set	1567
  3905  0613                     _CCP6CONbits	set	1555
  3906  0616                     _CCP7CONbits	set	1558
  3907  0619                     _CCP8CONbits	set	1561
  3908  061C                     _CCP9CONbits	set	1564
  3909                           
  3910                           ; #config settings
  3911  0000                     
  3912                           	psect	cinit
  3913  0313                     start_initialization:	
  3914  0313                     __initialization:		;BIGRAM
  3915                           
  3916                           ; Clear objects allocated to BANK0
  3917  0313  3045               	movlw	low __pbssBANK0
  3918  0314  0084               	movwf	4
  3919  0315  3000               	movlw	high __pbssBANK0
  3920  0316  0085               	movwf	5
  3921  0317  3013               	movlw	19
  3922  0318  00FE               	movwf	btemp
  3923  0319  3000               	movlw	0
  3924  031A  00FF               	movwf	btemp+1
  3925  031B  319D  2549  3183   	fcall	clear_ram0
  3926                           
  3927                           ; Clear objects allocated to BANK2
  3928  031E  3020               	movlw	low __pbssBANK2
  3929  031F  0084               	movwf	4
  3930  0320  3001               	movlw	high __pbssBANK2
  3931  0321  0085               	movwf	5
  3932  0322  301F               	movlw	31
  3933  0323  00FE               	movwf	btemp
  3934  0324  3000               	movlw	0
  3935  0325  00FF               	movwf	btemp+1
  3936  0326  319D  2549  3183   	fcall	clear_ram0
  3937                           
  3938                           ; Clear objects allocated to BANK3
  3939  0329  30A0               	movlw	low __pbssBANK3
  3940  032A  0084               	movwf	4
  3941  032B  3001               	movlw	high __pbssBANK3
  3942  032C  0085               	movwf	5
  3943  032D  3034               	movlw	52
  3944  032E  00FE               	movwf	btemp
  3945  032F  3000               	movlw	0
  3946  0330  00FF               	movwf	btemp+1
  3947  0331  319D  2549  3183   	fcall	clear_ram0
  3948                           
  3949                           ; Clear objects allocated to BANK4
  3950  0334  3020               	movlw	low __pbssBANK4
  3951  0335  0084               	movwf	4
  3952  0336  3002               	movlw	high __pbssBANK4
  3953  0337  0085               	movwf	5
  3954  0338  302C               	movlw	44
  3955  0339  00FE               	movwf	btemp
  3956  033A  3000               	movlw	0
  3957  033B  00FF               	movwf	btemp+1
  3958  033C  319D  2549  3183   	fcall	clear_ram0
  3959                           
  3960                           ; Clear objects allocated to BANK9
  3961  033F  30A0               	movlw	low __pbssBANK9
  3962  0340  0084               	movwf	4
  3963  0341  3004               	movlw	high __pbssBANK9
  3964  0342  0085               	movwf	5
  3965  0343  3040               	movlw	64
  3966  0344  00FE               	movwf	btemp
  3967  0345  3000               	movlw	0
  3968  0346  00FF               	movwf	btemp+1
  3969  0347  319D  2549  3183   	fcall	clear_ram0
  3970                           
  3971                           ; Initialize objects allocated to BIGRAM
  3972  034A  307E               	movlw	low __pidataBIGRAM
  3973  034B  0084               	movwf	4
  3974  034C  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3975  034D  0085               	movwf	5
  3976  034E  306E               	movlw	low (0+9070)
  3977  034F  0086               	movwf	6
  3978  0350  3023               	movlw	high (0+9070)
  3979  0351  0087               	movwf	7
  3980  0352  3002               	movlw	2
  3981  0353  00FF               	movwf	btemp+1
  3982  0354  3082               	movlw	130
  3983  0355  319D  253D  3183   	fcall	init_ram
  3984                           
  3985                           ; Initialize objects allocated to COMMON
  3986  0358  3180  2003  3183   	fcall	__pidataCOMMON	;fetch initializer
  3987  035B  00FD               	movwf	__pdataCOMMON& (0+127)
  3988                           
  3989                           ; Initialize objects allocated to BANK0
  3990  035C  3075               	movlw	low __pidataBANK0
  3991  035D  0084               	movwf	4
  3992  035E  309D               	movlw	(high __pidataBANK0)| (0+128)
  3993  035F  0085               	movwf	5
  3994  0360  3058               	movlw	low __pdataBANK0
  3995  0361  0086               	movwf	6
  3996  0362  3000               	movlw	high __pdataBANK0
  3997  0363  0087               	movwf	7
  3998  0364  3000               	movlw	0
  3999  0365  00FF               	movwf	btemp+1
  4000  0366  3012               	movlw	18
  4001  0367  319D  253D  3183   	fcall	init_ram
  4002                           
  4003                           ; Initialize objects allocated to BANK2
  4004  036A  3064               	movlw	low __pidataBANK2
  4005  036B  0084               	movwf	4
  4006  036C  309D               	movlw	(high __pidataBANK2)| (0+128)
  4007  036D  0085               	movwf	5
  4008  036E  3055               	movlw	low __pdataBANK2
  4009  036F  0086               	movwf	6
  4010  0370  3001               	movlw	high __pdataBANK2
  4011  0371  0087               	movwf	7
  4012  0372  3000               	movlw	0
  4013  0373  00FF               	movwf	btemp+1
  4014  0374  3011               	movlw	17
  4015  0375  319D  253D  3183   	fcall	init_ram
  4016                           
  4017                           ; Initialize objects allocated to BANK3
  4018  0378  3014               	movlw	low __pidataBANK3
  4019  0379  0084               	movwf	4
  4020  037A  309D               	movlw	(high __pidataBANK3)| (0+128)
  4021  037B  0085               	movwf	5
  4022  037C  30E3               	movlw	low __pdataBANK3
  4023  037D  0086               	movwf	6
  4024  037E  3001               	movlw	high __pdataBANK3
  4025  037F  0087               	movwf	7
  4026  0380  3000               	movlw	0
  4027  0381  00FF               	movwf	btemp+1
  4028  0382  3006               	movlw	6
  4029  0383  319D  253D  3183   	fcall	init_ram
  4030                           
  4031                           ; Initialize objects allocated to BANK5
  4032  0386  30EA               	movlw	low __pidataBANK5
  4033  0387  0084               	movwf	4
  4034  0388  3092               	movlw	(high __pidataBANK5)| (0+128)
  4035  0389  0085               	movwf	5
  4036  038A  30A0               	movlw	low __pdataBANK5
  4037  038B  0086               	movwf	6
  4038  038C  3002               	movlw	high __pdataBANK5
  4039  038D  0087               	movwf	7
  4040  038E  3000               	movlw	0
  4041  038F  00FF               	movwf	btemp+1
  4042  0390  3050               	movlw	80
  4043  0391  319D  253D  3183   	fcall	init_ram
  4044                           
  4045                           ; Initialize objects allocated to BANK6
  4046  0394  3000               	movlw	low __pidataBANK6
  4047  0395  0084               	movwf	4
  4048  0396  3088               	movlw	(high __pidataBANK6)| (0+128)
  4049  0397  0085               	movwf	5
  4050  0398  3020               	movlw	low __pdataBANK6
  4051  0399  0086               	movwf	6
  4052  039A  3003               	movlw	high __pdataBANK6
  4053  039B  0087               	movwf	7
  4054  039C  3000               	movlw	0
  4055  039D  00FF               	movwf	btemp+1
  4056  039E  303E               	movlw	62
  4057  039F  319D  253D  3183   	fcall	init_ram
  4058                           
  4059                           ; Initialize objects allocated to BANK7
  4060  03A2  3080               	movlw	low __pidataBANK7
  4061  03A3  0084               	movwf	4
  4062  03A4  3090               	movlw	(high __pidataBANK7)| (0+128)
  4063  03A5  0085               	movwf	5
  4064  03A6  30A0               	movlw	low __pdataBANK7
  4065  03A7  0086               	movwf	6
  4066  03A8  3003               	movlw	high __pdataBANK7
  4067  03A9  0087               	movwf	7
  4068  03AA  3000               	movlw	0
  4069  03AB  00FF               	movwf	btemp+1
  4070  03AC  303E               	movlw	62
  4071  03AD  319D  253D  3183   	fcall	init_ram
  4072                           
  4073                           ; Initialize objects allocated to BANK8
  4074  03B0  3042               	movlw	low __pidataBANK8
  4075  03B1  0084               	movwf	4
  4076  03B2  3090               	movlw	(high __pidataBANK8)| (0+128)
  4077  03B3  0085               	movwf	5
  4078  03B4  3020               	movlw	low __pdataBANK8
  4079  03B5  0086               	movwf	6
  4080  03B6  3004               	movlw	high __pdataBANK8
  4081  03B7  0087               	movwf	7
  4082  03B8  3000               	movlw	0
  4083  03B9  00FF               	movwf	btemp+1
  4084  03BA  303E               	movlw	62
  4085  03BB  319D  253D  3183   	fcall	init_ram
  4086                           
  4087                           ; Initialize objects allocated to BANK10
  4088  03BE  3004               	movlw	low __pidataBANK10
  4089  03BF  0084               	movwf	4
  4090  03C0  3090               	movlw	(high __pidataBANK10)| (0+128)
  4091  03C1  0085               	movwf	5
  4092  03C2  3020               	movlw	low __pdataBANK10
  4093  03C3  0086               	movwf	6
  4094  03C4  3005               	movlw	high __pdataBANK10
  4095  03C5  0087               	movwf	7
  4096  03C6  3000               	movlw	0
  4097  03C7  00FF               	movwf	btemp+1
  4098  03C8  303E               	movlw	62
  4099  03C9  319D  253D         	fcall	init_ram
  4100  03CB                     end_of_initialization:	
  4101                           ;End of C runtime variable initialization code
  4102                           
  4103  03CB                     __end_of__initialization:	
  4104  03CB  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4105  03CC  0020               	movlb	0
  4106  03CD  3183  2BCF         	ljmp	_main	;jump to C main() function
  4107                           
  4108                           	psect	dataCOMMON
  4109  007D                     __pdataCOMMON:	
  4110  007D                     _blink_rate:	
  4111  007D                     	ds	1
  4112                           
  4113                           	psect	bssBANK0
  4114  0045                     __pbssBANK0:	
  4115  0045                     _sub_timer:	
  4116  0045                     	ds	4
  4117  0049                     _tap_timer:	
  4118  0049                     	ds	4
  4119  004D                     _timer:	
  4120  004D                     	ds	4
  4121  0051                     _mod_counter:	
  4122  0051                     	ds	2
  4123  0053                     _doubleTap_state:	
  4124  0053                     	ds	1
  4125  0054                     _feedback_start:	
  4126  0054                     	ds	1
  4127  0055                     _longTap_start:	
  4128  0055                     	ds	1
  4129  0056                     _suspend_blink:	
  4130  0056                     	ds	1
  4131  0057                     _switchTap_pressed:	
  4132  0057                     	ds	1
  4133                           
  4134                           	psect	dataBANK0
  4135  0058                     __pdataBANK0:	
  4136  0058                     _baseline_delay_time:	
  4137  0058                     	ds	4
  4138  005C                     _delay_time:	
  4139  005C                     	ds	4
  4140  0060                     _bottom_push_state:	
  4141  0060                     	ds	2
  4142  0062                     _long_press_limit:	
  4143  0062                     	ds	2
  4144  0064                     _top_push_state:	
  4145  0064                     	ds	2
  4146  0066                     _feedback_state:	
  4147  0066                     	ds	1
  4148  0067                     _longTap_state:	
  4149  0067                     	ds	1
  4150  0068                     _num_taps:	
  4151  0068                     	ds	1
  4152  0069                     _switchBypass_state:	
  4153  0069                     	ds	1
  4154                           
  4155                           	psect	bssBANK2
  4156  0120                     __pbssBANK2:	
  4157  0120                     _mod_timer:	
  4158  0120                     	ds	4
  4159  0124                     _delay_counter:	
  4160  0124                     	ds	2
  4161  0126                     _feedback_timer:	
  4162  0126                     	ds	2
  4163  0128                     _knob_1_pos:	
  4164  0128                     	ds	2
  4165  012A                     _knob_2_pos:	
  4166  012A                     	ds	2
  4167  012C                     _knob_3_pos:	
  4168  012C                     	ds	2
  4169  012E                     _knob_4_pos:	
  4170  012E                     	ds	2
  4171  0130                     _knob_5_pos:	
  4172  0130                     	ds	2
  4173  0132                     _longTap_timer:	
  4174  0132                     	ds	2
  4175  0134                     _switchBypass_pressed:	
  4176  0134                     	ds	2
  4177  0136                     _bottomTactile_pressed:	
  4178  0136                     	ds	1
  4179  0137                     _bypass_turning_on:	
  4180  0137                     	ds	1
  4181  0138                     _iCnt:	
  4182  0138                     	ds	1
  4183  0139                     _mode1_state:	
  4184  0139                     	ds	1
  4185  013A                     _mode2_state:	
  4186  013A                     	ds	1
  4187  013B                     _preset_blink:	
  4188  013B                     	ds	1
  4189  013C                     _preset_programmning_on:	
  4190  013C                     	ds	1
  4191  013D                     _switchTap_down:	
  4192  013D                     	ds	1
  4193  013E                     _topTactile_pressed:	
  4194  013E                     	ds	1
  4195                           
  4196                           	psect	dataBANK2
  4197  0155                     __pdataBANK2:	
  4198  0155                     _blink_delay:	
  4199  0155                     	ds	2
  4200  0157                     _knob1_prev:	
  4201  0157                     	ds	2
  4202  0159                     _knob2_prev:	
  4203  0159                     	ds	2
  4204  015B                     _knob3_prev:	
  4205  015B                     	ds	2
  4206  015D                     _knob4_prev:	
  4207  015D                     	ds	2
  4208  015F                     _knob5_prev:	
  4209  015F                     	ds	2
  4210  0161                     _tap_iteration:	
  4211  0161                     	ds	2
  4212  0163                     _blink_state:	
  4213  0163                     	ds	1
  4214  0164                     _currentBypassState:	
  4215  0164                     	ds	1
  4216  0165                     _switchTap_state:	
  4217  0165                     	ds	1
  4218                           
  4219                           	psect	bssBANK3
  4220  01A0                     __pbssBANK3:	
  4221  01A0                     _tap_history:	
  4222  01A0                     	ds	20
  4223  01B4                     _ledState:	
  4224  01B4                     	ds	4
  4225  01B8                     _tap_total:	
  4226  01B8                     	ds	4
  4227  01BC                     _test_timer:	
  4228  01BC                     	ds	4
  4229  01C0                     _adjust_sub_delay:	
  4230  01C0                     	ds	2
  4231  01C2                     _adjusted_pot_value:	
  4232  01C2                     	ds	2
  4233  01C4                     _debounce_bypass:	
  4234  01C4                     	ds	2
  4235  01C6                     _debounce_count:	
  4236  01C6                     	ds	2
  4237  01C8                     _debounce_mode1:	
  4238  01C8                     	ds	2
  4239  01CA                     _debounce_mode2:	
  4240  01CA                     	ds	2
  4241  01CC                     _delayfound:	
  4242  01CC                     	ds	2
  4243  01CE                     _mod_value:	
  4244  01CE                     	ds	2
  4245  01D0                     _reset_sub_delay:	
  4246  01D0                     	ds	2
  4247  01D2                     _switchBypass_toggle:	
  4248  01D2                     	ds	2
  4249                           
  4250                           	psect	dataBANK3
  4251  01E3                     __pdataBANK3:	
  4252  01E3                     _delay_time_changed:	
  4253  01E3                     	ds	2
  4254  01E5                     _mod_delay_time:	
  4255  01E5                     	ds	2
  4256  01E7                     _switchBypass_up:	
  4257  01E7                     	ds	2
  4258                           
  4259                           	psect	bssBANK4
  4260  0220                     __pbssBANK4:	
  4261  0220                     _tap:	
  4262  0220                     	ds	44
  4263                           
  4264                           	psect	dataBANK5
  4265  02A0                     __pdataBANK5:	
  4266  02A0                     _B25k:	
  4267  02A0                     	ds	80
  4268                           
  4269                           	psect	dataBANK6
  4270  0320                     __pdataBANK6:	
  4271  0320                     _mod2:	
  4272  0320                     	ds	62
  4273                           
  4274                           	psect	dataBANK7
  4275  03A0                     __pdataBANK7:	
  4276  03A0                     _mod3:	
  4277  03A0                     	ds	62
  4278                           
  4279                           	psect	dataBANK8
  4280  0420                     __pdataBANK8:	
  4281  0420                     _mod4:	
  4282  0420                     	ds	62
  4283                           
  4284                           	psect	bssBANK9
  4285  04A0                     __pbssBANK9:	
  4286  04A0                     _myBuf:	
  4287  04A0                     	ds	64
  4288                           
  4289                           	psect	dataBANK10
  4290  0520                     __pdataBANK10:	
  4291  0520                     _mod1:	
  4292  0520                     	ds	62
  4293                           
  4294                           	psect	clrtext
  4295  1D49                     clear_ram0:	
  4296                           ;	Called with FSR0 containing the base address, and
  4297                           ;	btemp/btemp+1 has the size to clear
  4298                           
  4299  1D49  0064               	clrwdt	;clear the watchdog before getting into this loop
  4300  1D4A                     clrloop0:	
  4301  1D4A  0180               	clrf	0	;clear RAM location pointed to by FSR
  4302  1D4B  3101               	addfsr 0,1
  4303  1D4C  3001               	movlw	1
  4304  1D4D  02FE               	subwf	126,f
  4305  1D4E  3000               	movlw	0
  4306  1D4F  3BFF               	subwfb	127,f
  4307  1D50  087F               	movf	127,w
  4308  1D51  047E               	iorwf	126,w
  4309  1D52  1903               	btfsc	3,2
  4310  1D53  3400               	retlw	0	;all done for this memory range, return
  4311  1D54  2D4A               	goto	clrloop0	;have we reached the end yet?
  4312                           
  4313                           	psect	inittext
  4314  1D3D                     init_ram:	
  4315  1D3D  00FE               	movwf	126
  4316  1D3E                     initloop:	
  4317  1D3E  0012               	moviw fsr0++
  4318  1D3F  001E               	movwi fsr1++
  4319  1D40  3001               	movlw	1
  4320  1D41  02FE               	subwf	126,f
  4321  1D42  3000               	movlw	0
  4322  1D43  3BFF               	subwfb	127,f
  4323  1D44  087F               	movf	127,w
  4324  1D45  047E               	iorwf	126,w
  4325  1D46  1903               	btfsc	3,2
  4326  1D47  3400               	retlw	0
  4327  1D48  2D3E               	goto	initloop
  4328                           
  4329                           	psect	cstackBANK3
  4330  01D4                     __pcstackBANK3:	
  4331  01D4                     ??_main:	
  4332                           
  4333                           ; 1 bytes @ 0x0
  4334  01D4                     	ds	15
  4335                           
  4336                           	psect	cstackBANK2
  4337  013F                     __pcstackBANK2:	
  4338  013F                     ___fttol@sign1:	
  4339                           
  4340                           ; 1 bytes @ 0x0
  4341  013F                     	ds	1
  4342  0140                     ___fttol@lval:	
  4343                           
  4344                           ; 4 bytes @ 0x1
  4345  0140                     	ds	4
  4346  0144                     ___fttol@exp1:	
  4347                           
  4348                           ; 1 bytes @ 0x5
  4349  0144                     	ds	1
  4350  0145                     ?_set_subdivision:	
  4351  0145                     set_subdivision@x:	
  4352                           ; 2 bytes @ 0x6
  4353                           
  4354                           
  4355                           ; 2 bytes @ 0x6
  4356  0145                     	ds	2
  4357  0147                     set_subdivision@y:	
  4358                           
  4359                           ; 2 bytes @ 0x8
  4360  0147                     	ds	2
  4361  0149                     ??_set_subdivision:	
  4362                           
  4363                           ; 1 bytes @ 0xA
  4364  0149                     	ds	3
  4365  014C                     set_subdivision@tmpX:	
  4366                           
  4367                           ; 2 bytes @ 0xD
  4368  014C                     	ds	2
  4369  014E                     set_subdivision@scalar:	
  4370                           
  4371                           ; 3 bytes @ 0xF
  4372  014E                     	ds	3
  4373  0151                     main@i:	
  4374                           
  4375                           ; 2 bytes @ 0x12
  4376  0151                     	ds	2
  4377  0153                     main@i_391:	
  4378                           
  4379                           ; 2 bytes @ 0x14
  4380  0153                     	ds	2
  4381                           
  4382                           	psect	cstackBANK1
  4383  00A0                     __pcstackBANK1:	
  4384  00A0                     ?_set_leds_top:	
  4385  00A0                     ??_ConfigureOscillator:	
  4386                           ; 1 bytes @ 0x0
  4387                           
  4388  00A0                     ??_InitApp:	
  4389                           ; 1 bytes @ 0x0
  4390                           
  4391  00A0                     ??_InitializeTaps:	
  4392                           ; 1 bytes @ 0x0
  4393                           
  4394  00A0                     ??_update_mode:	
  4395                           ; 1 bytes @ 0x0
  4396                           
  4397  00A0                     ??_init_adc:	
  4398                           ; 1 bytes @ 0x0
  4399                           
  4400  00A0                     ??_init_pwm:	
  4401                           ; 1 bytes @ 0x0
  4402                           
  4403  00A0                     ??_init_timer2:	
  4404                           ; 1 bytes @ 0x0
  4405                           
  4406  00A0                     ??_init_timer0:	
  4407                           ; 1 bytes @ 0x0
  4408                           
  4409  00A0                     ?_set_leds_bottom:	
  4410                           ; 1 bytes @ 0x0
  4411                           
  4412  00A0                     ??_getCurrentLEDState:	
  4413                           ; 1 bytes @ 0x0
  4414                           
  4415  00A0                     ??_restoreLEDState:	
  4416                           ; 1 bytes @ 0x0
  4417                           
  4418  00A0                     ?_setFeedbackState:	
  4419                           ; 1 bytes @ 0x0
  4420                           
  4421  00A0                     ?_setLongTapState:	
  4422                           ; 1 bytes @ 0x0
  4423                           
  4424  00A0                     ?_updateSwitchBypassState:	
  4425                           ; 1 bytes @ 0x0
  4426                           
  4427  00A0                     ?_adc_convert:	
  4428                           ; 1 bytes @ 0x0
  4429                           
  4430  00A0                     ?_FLASH_ReadWord:	
  4431                           ; 2 bytes @ 0x0
  4432                           
  4433  00A0                     ?_getSwitchBypassState:	
  4434                           ; 2 bytes @ 0x0
  4435                           
  4436  00A0                     ?___ftpack:	
  4437                           ; 2 bytes @ 0x0
  4438                           
  4439  00A0                     ?___ftneg:	
  4440                           ; 3 bytes @ 0x0
  4441                           
  4442  00A0                     ?___lmul:	
  4443                           ; 3 bytes @ 0x0
  4444                           
  4445  00A0                     ?___aldiv:	
  4446                           ; 4 bytes @ 0x0
  4447                           
  4448  00A0                     FLASH_ReadWord@flashAddr:	
  4449                           ; 4 bytes @ 0x0
  4450                           
  4451  00A0                     set_leds_top@x:	
  4452                           ; 2 bytes @ 0x0
  4453                           
  4454  00A0                     set_leds_bottom@x:	
  4455                           ; 2 bytes @ 0x0
  4456                           
  4457  00A0                     updateSwitchBypassState@state:	
  4458                           ; 2 bytes @ 0x0
  4459                           
  4460  00A0                     setFeedbackState@f_state:	
  4461                           ; 2 bytes @ 0x0
  4462                           
  4463  00A0                     setLongTapState@f_state:	
  4464                           ; 2 bytes @ 0x0
  4465                           
  4466  00A0                     ___ftpack@arg:	
  4467                           ; 2 bytes @ 0x0
  4468                           
  4469  00A0                     ___ftneg@f1:	
  4470                           ; 3 bytes @ 0x0
  4471                           
  4472  00A0                     ___lmul@multiplier:	
  4473                           ; 3 bytes @ 0x0
  4474                           
  4475  00A0                     ___aldiv@divisor:	
  4476                           ; 4 bytes @ 0x0
  4477                           
  4478                           
  4479                           ; 4 bytes @ 0x0
  4480  00A0                     	ds	1
  4481  00A1                     InitializeTaps@itap:	
  4482                           
  4483                           ; 2 bytes @ 0x1
  4484  00A1                     	ds	1
  4485  00A2                     ??_adc_convert:	
  4486  00A2                     ??_FLASH_ReadWord:	
  4487                           ; 1 bytes @ 0x2
  4488                           
  4489  00A2                     ??_set_leds_bottom:	
  4490                           ; 1 bytes @ 0x2
  4491                           
  4492  00A2                     ??_setFeedbackState:	
  4493                           ; 1 bytes @ 0x2
  4494                           
  4495  00A2                     ??_setLongTapState:	
  4496                           ; 1 bytes @ 0x2
  4497                           
  4498  00A2                     ??_updateSwitchBypassState:	
  4499                           ; 1 bytes @ 0x2
  4500                           
  4501  00A2                     ??_getSwitchBypassState:	
  4502                           ; 1 bytes @ 0x2
  4503                           
  4504  00A2                     FLASH_ReadWord@GIEBitValue:	
  4505                           ; 1 bytes @ 0x2
  4506                           
  4507  00A2                     set_leds_top@ledState:	
  4508                           ; 1 bytes @ 0x2
  4509                           
  4510                           
  4511                           ; 2 bytes @ 0x2
  4512  00A2                     	ds	1
  4513  00A3                     ??___ftneg:	
  4514  00A3                     adc_convert@channel:	
  4515                           ; 1 bytes @ 0x3
  4516                           
  4517  00A3                     ___ftpack@exp:	
  4518                           ; 1 bytes @ 0x3
  4519                           
  4520                           
  4521                           ; 1 bytes @ 0x3
  4522  00A3                     	ds	1
  4523  00A4                     ??_set_leds_top:	
  4524  00A4                     ??_ReadSavedSettings:	
  4525                           ; 1 bytes @ 0x4
  4526                           
  4527  00A4                     ___ftpack@sign:	
  4528                           ; 1 bytes @ 0x4
  4529                           
  4530  00A4                     ___lmul@multiplicand:	
  4531                           ; 1 bytes @ 0x4
  4532                           
  4533  00A4                     ___aldiv@dividend:	
  4534                           ; 4 bytes @ 0x4
  4535                           
  4536                           
  4537                           ; 4 bytes @ 0x4
  4538  00A4                     	ds	1
  4539  00A5                     ??___ftpack:	
  4540                           
  4541                           ; 1 bytes @ 0x5
  4542  00A5                     	ds	3
  4543  00A8                     ??___lmul:	
  4544  00A8                     ??___aldiv:	
  4545                           ; 1 bytes @ 0x8
  4546                           
  4547  00A8                     ?___altoft:	
  4548                           ; 1 bytes @ 0x8
  4549                           
  4550  00A8                     ?___awtoft:	
  4551                           ; 3 bytes @ 0x8
  4552                           
  4553  00A8                     ?___ftadd:	
  4554                           ; 3 bytes @ 0x8
  4555                           
  4556  00A8                     ___awtoft@c:	
  4557                           ; 3 bytes @ 0x8
  4558                           
  4559  00A8                     ___ftadd@f1:	
  4560                           ; 2 bytes @ 0x8
  4561                           
  4562  00A8                     ___lmul@product:	
  4563                           ; 3 bytes @ 0x8
  4564                           
  4565  00A8                     ___altoft@c:	
  4566                           ; 4 bytes @ 0x8
  4567                           
  4568                           
  4569                           ; 4 bytes @ 0x8
  4570  00A8                     	ds	1
  4571  00A9                     ___aldiv@counter:	
  4572                           
  4573                           ; 1 bytes @ 0x9
  4574  00A9                     	ds	1
  4575  00AA                     ___aldiv@sign:	
  4576                           
  4577                           ; 1 bytes @ 0xA
  4578  00AA                     	ds	1
  4579  00AB                     ??___awtoft:	
  4580  00AB                     ___ftadd@f2:	
  4581                           ; 1 bytes @ 0xB
  4582                           
  4583  00AB                     ___aldiv@quotient:	
  4584                           ; 3 bytes @ 0xB
  4585                           
  4586                           
  4587                           ; 4 bytes @ 0xB
  4588  00AB                     	ds	1
  4589  00AC                     ?_wait_ms:	
  4590  00AC                     ??___altoft:	
  4591                           ; 1 bytes @ 0xC
  4592                           
  4593  00AC                     wait_ms@timeSec:	
  4594                           ; 1 bytes @ 0xC
  4595                           
  4596                           
  4597                           ; 2 bytes @ 0xC
  4598  00AC                     	ds	1
  4599  00AD                     ___awtoft@sign:	
  4600                           
  4601                           ; 1 bytes @ 0xD
  4602  00AD                     	ds	1
  4603  00AE                     ??_wait_ms:	
  4604  00AE                     ??___ftadd:	
  4605                           ; 1 bytes @ 0xE
  4606                           
  4607  00AE                     ___altoft@exp:	
  4608                           ; 1 bytes @ 0xE
  4609                           
  4610  00AE                     wait_ms@timemsl:	
  4611                           ; 1 bytes @ 0xE
  4612                           
  4613                           
  4614                           ; 4 bytes @ 0xE
  4615  00AE                     	ds	1
  4616  00AF                     ___altoft@sign:	
  4617                           
  4618                           ; 1 bytes @ 0xF
  4619  00AF                     	ds	3
  4620  00B2                     ??_read_bottom_tactile:	
  4621  00B2                     ??_read_top_tactile:	
  4622                           ; 1 bytes @ 0x12
  4623                           
  4624  00B2                     ??_star_tactiles:	
  4625                           ; 1 bytes @ 0x12
  4626                           
  4627  00B2                     ??_solidring_tactiles:	
  4628                           ; 1 bytes @ 0x12
  4629                           
  4630  00B2                     ?_setSwitchBypassState:	
  4631                           ; 1 bytes @ 0x12
  4632                           
  4633  00B2                     ?_setDoublePressState:	
  4634                           ; 1 bytes @ 0x12
  4635                           
  4636  00B2                     ___ftadd@sign:	
  4637                           ; 1 bytes @ 0x12
  4638                           
  4639  00B2                     setSwitchBypassState@f_state:	
  4640                           ; 1 bytes @ 0x12
  4641                           
  4642  00B2                     setDoublePressState@f_state:	
  4643                           ; 2 bytes @ 0x12
  4644                           
  4645                           
  4646                           ; 2 bytes @ 0x12
  4647  00B2                     	ds	1
  4648  00B3                     ___ftadd@exp2:	
  4649                           
  4650                           ; 1 bytes @ 0x13
  4651  00B3                     	ds	1
  4652  00B4                     ??_setSwitchBypassState:	
  4653  00B4                     ??_setDoublePressState:	
  4654                           ; 1 bytes @ 0x14
  4655                           
  4656  00B4                     star_tactiles@reverse:	
  4657                           ; 1 bytes @ 0x14
  4658                           
  4659  00B4                     solidring_tactiles@ring_delay:	
  4660                           ; 1 bytes @ 0x14
  4661                           
  4662  00B4                     ___ftadd@exp1:	
  4663                           ; 1 bytes @ 0x14
  4664                           
  4665                           
  4666                           ; 1 bytes @ 0x14
  4667  00B4                     	ds	1
  4668  00B5                     ?___ftmul:	
  4669  00B5                     star_tactiles@iLed:	
  4670                           ; 3 bytes @ 0x15
  4671                           
  4672  00B5                     ___ftmul@f1:	
  4673                           ; 2 bytes @ 0x15
  4674                           
  4675                           
  4676                           ; 3 bytes @ 0x15
  4677  00B5                     	ds	1
  4678  00B6                     ??_initSwitchBypass:	
  4679  00B6                     ??_updateSwitchBypass:	
  4680                           ; 1 bytes @ 0x16
  4681                           
  4682  00B6                     ??_updateSwitchTap:	
  4683                           ; 1 bytes @ 0x16
  4684                           
  4685  00B6                     initSwitchBypass@initState:	
  4686                           ; 1 bytes @ 0x16
  4687                           
  4688                           
  4689                           ; 2 bytes @ 0x16
  4690  00B6                     	ds	1
  4691  00B7                     star_tactiles@iLed_1453:	
  4692                           
  4693                           ; 2 bytes @ 0x17
  4694  00B7                     	ds	1
  4695  00B8                     ___ftmul@f2:	
  4696                           
  4697                           ; 3 bytes @ 0x18
  4698  00B8                     	ds	1
  4699  00B9                     ??_showBootSequence:	
  4700                           
  4701                           ; 1 bytes @ 0x19
  4702  00B9                     	ds	2
  4703  00BB                     ??___ftmul:	
  4704                           
  4705                           ; 1 bytes @ 0x1B
  4706  00BB                     	ds	1
  4707  00BC                     updateSwitchTap@tapCntDivisor:	
  4708                           
  4709                           ; 2 bytes @ 0x1C
  4710  00BC                     	ds	2
  4711  00BE                     updateSwitchTap@iCnt:	
  4712                           
  4713                           ; 1 bytes @ 0x1E
  4714  00BE                     	ds	1
  4715  00BF                     ___ftmul@exp:	
  4716                           
  4717                           ; 1 bytes @ 0x1F
  4718  00BF                     	ds	1
  4719  00C0                     ___ftmul@f3_as_product:	
  4720                           
  4721                           ; 3 bytes @ 0x20
  4722  00C0                     	ds	3
  4723  00C3                     ___ftmul@cntr:	
  4724                           
  4725                           ; 1 bytes @ 0x23
  4726  00C3                     	ds	1
  4727  00C4                     ___ftmul@sign:	
  4728                           
  4729                           ; 1 bytes @ 0x24
  4730  00C4                     	ds	1
  4731  00C5                     ?___ftdiv:	
  4732  00C5                     ___ftdiv@f2:	
  4733                           ; 3 bytes @ 0x25
  4734                           
  4735                           
  4736                           ; 3 bytes @ 0x25
  4737  00C5                     	ds	3
  4738  00C8                     ___ftdiv@f1:	
  4739                           
  4740                           ; 3 bytes @ 0x28
  4741  00C8                     	ds	3
  4742  00CB                     ??___ftdiv:	
  4743                           
  4744                           ; 1 bytes @ 0x2B
  4745  00CB                     	ds	4
  4746  00CF                     ___ftdiv@cntr:	
  4747                           
  4748                           ; 1 bytes @ 0x2F
  4749  00CF                     	ds	1
  4750  00D0                     ___ftdiv@f3:	
  4751                           
  4752                           ; 3 bytes @ 0x30
  4753  00D0                     	ds	3
  4754  00D3                     ___ftdiv@exp:	
  4755                           
  4756                           ; 1 bytes @ 0x33
  4757  00D3                     	ds	1
  4758  00D4                     ___ftdiv@sign:	
  4759                           
  4760                           ; 1 bytes @ 0x34
  4761  00D4                     	ds	1
  4762  00D5                     ?_map:	
  4763  00D5                     map@x:	
  4764                           ; 3 bytes @ 0x35
  4765                           
  4766                           
  4767                           ; 3 bytes @ 0x35
  4768  00D5                     	ds	3
  4769  00D8                     map@in_min:	
  4770                           
  4771                           ; 3 bytes @ 0x38
  4772  00D8                     	ds	3
  4773  00DB                     map@in_max:	
  4774                           
  4775                           ; 3 bytes @ 0x3B
  4776  00DB                     	ds	3
  4777  00DE                     map@out_min:	
  4778                           
  4779                           ; 3 bytes @ 0x3E
  4780  00DE                     	ds	3
  4781  00E1                     map@out_max:	
  4782                           
  4783                           ; 3 bytes @ 0x41
  4784  00E1                     	ds	3
  4785  00E4                     ??_map:	
  4786  00E4                     _map$2172:	
  4787                           ; 1 bytes @ 0x44
  4788                           
  4789                           
  4790                           ; 3 bytes @ 0x44
  4791  00E4                     	ds	3
  4792  00E7                     ?___fttol:	
  4793  00E7                     ___fttol@f1:	
  4794                           ; 4 bytes @ 0x47
  4795                           
  4796                           
  4797                           ; 3 bytes @ 0x47
  4798  00E7                     	ds	4
  4799  00EB                     ??___fttol:	
  4800                           
  4801                           ; 1 bytes @ 0x4B
  4802  00EB                     	ds	4
  4803                           
  4804                           	psect	cstackCOMMON
  4805  0070                     __pcstackCOMMON:	
  4806  0070                     ?_ConfigureOscillator:	
  4807  0070                     ?_InitApp:	
  4808                           ; 1 bytes @ 0x0
  4809                           
  4810  0070                     ?_InitializeTaps:	
  4811                           ; 1 bytes @ 0x0
  4812                           
  4813  0070                     ?_initSwitchBypass:	
  4814                           ; 1 bytes @ 0x0
  4815                           
  4816  0070                     ?_ReadSavedSettings:	
  4817                           ; 1 bytes @ 0x0
  4818                           
  4819  0070                     ?_read_bottom_tactile:	
  4820                           ; 1 bytes @ 0x0
  4821                           
  4822  0070                     ?_read_top_tactile:	
  4823                           ; 1 bytes @ 0x0
  4824                           
  4825  0070                     ?_update_mode:	
  4826                           ; 1 bytes @ 0x0
  4827                           
  4828  0070                     ?_showBootSequence:	
  4829                           ; 1 bytes @ 0x0
  4830                           
  4831  0070                     ?_updateSwitchBypass:	
  4832                           ; 1 bytes @ 0x0
  4833                           
  4834  0070                     ?_updateSwitchTap:	
  4835                           ; 1 bytes @ 0x0
  4836                           
  4837  0070                     ?_init_adc:	
  4838                           ; 1 bytes @ 0x0
  4839                           
  4840  0070                     ?_init_pwm:	
  4841                           ; 1 bytes @ 0x0
  4842                           
  4843  0070                     ?_init_timer2:	
  4844                           ; 1 bytes @ 0x0
  4845                           
  4846  0070                     ?_init_timer0:	
  4847                           ; 1 bytes @ 0x0
  4848                           
  4849  0070                     ?_getCurrentLEDState:	
  4850                           ; 1 bytes @ 0x0
  4851                           
  4852  0070                     ?_star_tactiles:	
  4853                           ; 1 bytes @ 0x0
  4854                           
  4855  0070                     ?_solidring_tactiles:	
  4856                           ; 1 bytes @ 0x0
  4857                           
  4858  0070                     ?_restoreLEDState:	
  4859                           ; 1 bytes @ 0x0
  4860                           
  4861  0070                     ?_isr:	
  4862                           ; 1 bytes @ 0x0
  4863                           
  4864  0070                     ?_main:	
  4865                           ; 1 bytes @ 0x0
  4866                           
  4867  0070                     ?i1_set_leds_top:	
  4868                           ; 1 bytes @ 0x0
  4869                           
  4870  0070                     ?___awdiv:	
  4871                           ; 1 bytes @ 0x0
  4872                           
  4873  0070                     ?i1___lmul:	
  4874                           ; 2 bytes @ 0x0
  4875                           
  4876  0070                     ___awdiv@divisor:	
  4877                           ; 4 bytes @ 0x0
  4878                           
  4879  0070                     i1set_leds_top@x:	
  4880                           ; 2 bytes @ 0x0
  4881                           
  4882  0070                     i1___lmul@multiplier:	
  4883                           ; 2 bytes @ 0x0
  4884                           
  4885                           
  4886                           ; 4 bytes @ 0x0
  4887  0070                     	ds	2
  4888  0072                     ___awdiv@dividend:	
  4889  0072                     i1set_leds_top@ledState:	
  4890                           ; 2 bytes @ 0x2
  4891                           
  4892                           
  4893                           ; 2 bytes @ 0x2
  4894  0072                     	ds	2
  4895  0074                     ??___awdiv:	
  4896  0074                     ??i1_set_leds_top:	
  4897                           ; 1 bytes @ 0x4
  4898                           
  4899  0074                     i1___lmul@multiplicand:	
  4900                           ; 1 bytes @ 0x4
  4901                           
  4902                           
  4903                           ; 4 bytes @ 0x4
  4904  0074                     	ds	1
  4905  0075                     ___awdiv@counter:	
  4906                           
  4907                           ; 1 bytes @ 0x5
  4908  0075                     	ds	1
  4909  0076                     ___awdiv@sign:	
  4910                           
  4911                           ; 1 bytes @ 0x6
  4912  0076                     	ds	1
  4913  0077                     ___awdiv@quotient:	
  4914                           
  4915                           ; 2 bytes @ 0x7
  4916  0077                     	ds	1
  4917  0078                     ??i1___lmul:	
  4918  0078                     i1___lmul@product:	
  4919                           ; 1 bytes @ 0x8
  4920                           
  4921                           
  4922                           ; 4 bytes @ 0x8
  4923  0078                     	ds	4
  4924  007C                     ??i1___aldiv:	
  4925                           
  4926                           ; 1 bytes @ 0xC
  4927  007C                     	ds	1
  4928                           
  4929                           	psect	cstackBANK0
  4930  0020                     __pcstackBANK0:	
  4931  0020                     ?i1___aldiv:	
  4932  0020                     i1___aldiv@divisor:	
  4933                           ; 4 bytes @ 0x0
  4934                           
  4935                           
  4936                           ; 4 bytes @ 0x0
  4937  0020                     	ds	4
  4938  0024                     i1___aldiv@dividend:	
  4939                           
  4940                           ; 4 bytes @ 0x4
  4941  0024                     	ds	4
  4942  0028                     i1___aldiv@counter:	
  4943                           
  4944                           ; 1 bytes @ 0x8
  4945  0028                     	ds	1
  4946  0029                     i1___aldiv@sign:	
  4947                           
  4948                           ; 1 bytes @ 0x9
  4949  0029                     	ds	1
  4950  002A                     i1___aldiv@quotient:	
  4951                           
  4952                           ; 4 bytes @ 0xA
  4953  002A                     	ds	4
  4954  002E                     ?_modulation:	
  4955  002E                     modulation@x:	
  4956                           ; 4 bytes @ 0xE
  4957                           
  4958                           
  4959                           ; 4 bytes @ 0xE
  4960  002E                     	ds	4
  4961  0032                     modulation@y:	
  4962                           
  4963                           ; 4 bytes @ 0x12
  4964  0032                     	ds	4
  4965  0036                     ??_modulation:	
  4966                           
  4967                           ; 1 bytes @ 0x16
  4968  0036                     	ds	4
  4969  003A                     ??_isr:	
  4970                           
  4971                           ; 1 bytes @ 0x1A
  4972  003A                     	ds	9
  4973  0043                     isr@tmpSubDelay:	
  4974                           
  4975                           ; 2 bytes @ 0x23
  4976  0043                     	ds	2
  4977                           
  4978                           	psect	maintext
  4979  03CF                     __pmaintext:	
  4980 ;;
  4981 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4982 ;;
  4983 ;; *************** function _main *****************
  4984 ;; Defined at:
  4985 ;;		line 81 in file "main.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;		None
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  i               2   20[BANK2 ] int 
  4990 ;;  i               2   18[BANK2 ] int 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  1    wreg      void 
  4993 ;; Registers used:
  4994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4995 ;; Tracked objects:
  4996 ;;		On entry : B1F/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5001 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5002 ;;      Temps:          0       0       0       0      15       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5003 ;;      Totals:         0       0       0       4      15       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5004 ;;Total ram usage:       19 bytes
  5005 ;; Hardware stack levels required when called:    7
  5006 ;; This function calls:
  5007 ;;		_ConfigureOscillator
  5008 ;;		_InitApp
  5009 ;;		_InitializeTaps
  5010 ;;		_ReadSavedSettings
  5011 ;;		___altoft
  5012 ;;		___awtoft
  5013 ;;		___ftdiv
  5014 ;;		___fttol
  5015 ;;		_adc_convert
  5016 ;;		_initSwitchBypass
  5017 ;;		_map
  5018 ;;		_read_bottom_tactile
  5019 ;;		_read_top_tactile
  5020 ;;		_set_subdivision
  5021 ;;		_showBootSequence
  5022 ;;		_updateSwitchBypass
  5023 ;;		_updateSwitchTap
  5024 ;;		_update_mode
  5025 ;; This function is called by:
  5026 ;;		Startup code after reset
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _main
  5032  03CF                     _main:	
  5033                           
  5034                           ;main.c: 82: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038  03CF  3028               	movlw	40
  5039  03D0  0023               	movlb	3	; select bank3
  5040  03D1  00E9               	movwf	_B25kLength^(0+384)
  5041  03D2  3000               	movlw	0
  5042  03D3  00EA               	movwf	(_B25kLength^(0+384)+1)
  5043                           
  5044                           ;main.c: 83: ConfigureOscillator();
  5045  03D4  319D  2510  3183   	fcall	_ConfigureOscillator
  5046                           
  5047                           ;main.c: 84: InitApp();
  5048  03D7  319E  26C6  3183   	fcall	_InitApp
  5049                           
  5050                           ;main.c: 86: PORTEbits.RE0 = 1;
  5051  03DA  0020               	movlb	0	; select bank0
  5052  03DB  1410               	bsf	16,0	;volatile
  5053                           
  5054                           ;main.c: 87: PORTEbits.RE1 = 1;
  5055  03DC  1490               	bsf	16,1	;volatile
  5056                           
  5057                           ;main.c: 88: PORTDbits.RD6 = 1;
  5058  03DD  170F               	bsf	15,6	;volatile
  5059                           
  5060                           ;main.c: 89: PORTDbits.RD5 = 1;
  5061  03DE  168F               	bsf	15,5	;volatile
  5062                           
  5063                           ;main.c: 90: PORTCbits.RC0 = 1;
  5064  03DF  140E               	bsf	14,0	;volatile
  5065                           
  5066                           ;main.c: 91: PORTDbits.RD7 = 1;
  5067  03E0  178F               	bsf	15,7	;volatile
  5068                           
  5069                           ;main.c: 93: InitializeTaps();
  5070  03E1  319E  2646  3183   	fcall	_InitializeTaps
  5071                           
  5072                           ;main.c: 94: initSwitchBypass();
  5073  03E4  319D  2555  3183   	fcall	_initSwitchBypass
  5074                           
  5075                           ;main.c: 97: ReadSavedSettings();
  5076  03E7  3194  24B3  3183   	fcall	_ReadSavedSettings
  5077  03EA                     l5830:	
  5078                           ;main.c: 99: while (1) {
  5079                           
  5080                           
  5081                           ;main.c: 100: read_bottom_tactile();
  5082  03EA  3191  21C1  3183   	fcall	_read_bottom_tactile
  5083                           
  5084                           ;main.c: 101: read_top_tactile();
  5085  03ED  3192  229A  3183   	fcall	_read_top_tactile
  5086                           
  5087                           ;main.c: 104: update_mode();
  5088  03F0  3191  2180  3183   	fcall	_update_mode
  5089                           
  5090                           ;main.c: 106: if (PORTDbits.RD7 == 0) {
  5091  03F3  0020               	movlb	0	; select bank0
  5092  03F4  1B8F               	btfsc	15,7	;volatile
  5093  03F5  2C12               	goto	l5844
  5094                           
  5095                           ;main.c: 107: debounce_mode1++;
  5096  03F6  3001               	movlw	1
  5097  03F7  0023               	movlb	3	; select bank3
  5098  03F8  07C8               	addwf	_debounce_mode1^(0+384),f
  5099  03F9  3000               	movlw	0
  5100  03FA  3DC9               	addwfc	(_debounce_mode1+1)^(0+384),f
  5101                           
  5102                           ;main.c: 108: if (debounce_mode1 > 25) {
  5103  03FB  0849               	movf	(_debounce_mode1+1)^(0+384),w
  5104  03FC  3A80               	xorlw	128
  5105  03FD  00D4               	movwf	??_main^(0+384)
  5106  03FE  3080               	movlw	128
  5107  03FF  0254               	subwf	??_main^(0+384),w
  5108  0400  1D03               	skipz
  5109  0401  2C04               	goto	u6675
  5110  0402  301A               	movlw	26
  5111  0403  0248               	subwf	_debounce_mode1^(0+384),w
  5112  0404                     u6675:	
  5113  0404  1C03               	skipc
  5114  0405  2C15               	goto	l5846
  5115                           
  5116                           ;main.c: 109: debounce_mode1 = 25;
  5117  0406  3019               	movlw	25
  5118  0407  0023               	movlb	3	; select bank3
  5119  0408  00C8               	movwf	_debounce_mode1^(0+384)
  5120  0409  3000               	movlw	0
  5121  040A  00C9               	movwf	(_debounce_mode1^(0+384)+1)
  5122                           
  5123                           ;main.c: 113: showBootSequence();
  5124  040B  319E  266C  3183   	fcall	_showBootSequence
  5125  040E                     l313:	
  5126                           ;main.c: 116: while (PORTDbits.RD7 == 0) {
  5127                           
  5128  040E  0020               	movlb	0	; select bank0
  5129  040F  1B8F               	btfsc	15,7	;volatile
  5130  0410  2C15               	goto	l5846
  5131  0411  2C0E               	goto	l313
  5132  0412                     l5844:	
  5133                           ;main.c: 117: }
  5134                           ;main.c: 118: }
  5135                           ;main.c: 119: } else {
  5136                           
  5137                           
  5138                           ;main.c: 120: debounce_mode1 = 0;
  5139  0412  0023               	movlb	3	; select bank3
  5140  0413  01C8               	clrf	_debounce_mode1^(0+384)
  5141  0414  01C9               	clrf	(_debounce_mode1+1)^(0+384)
  5142  0415                     l5846:	
  5143                           
  5144                           ;main.c: 121: }
  5145                           ;main.c: 123: updateSwitchBypass();
  5146  0415  3189  21B8  3183   	fcall	_updateSwitchBypass
  5147                           
  5148                           ;main.c: 124: updateSwitchTap();
  5149  0418  318B  2399  3183   	fcall	_updateSwitchTap
  5150                           
  5151                           ;main.c: 218: knob_1_pos = adc_convert(0);
  5152  041B  3000               	movlw	0
  5153  041C  319D  2587  3183   	fcall	_adc_convert
  5154  041F  0021               	movlb	1	; select bank1
  5155  0420  0821               	movf	(?_adc_convert+1)^(0+128),w
  5156  0421  0022               	movlb	2	; select bank2
  5157  0422  00A9               	movwf	(_knob_1_pos+1)^(0+256)
  5158  0423  0021               	movlb	1	; select bank1
  5159  0424  0820               	movf	?_adc_convert^(0+128),w
  5160  0425  0022               	movlb	2	; select bank2
  5161  0426  00A8               	movwf	_knob_1_pos^(0+256)
  5162                           
  5163                           ;main.c: 219: knob_2_pos = adc_convert(1);
  5164  0427  3001               	movlw	1
  5165  0428  319D  2587  3183   	fcall	_adc_convert
  5166  042B  0021               	movlb	1	; select bank1
  5167  042C  0821               	movf	(?_adc_convert+1)^(0+128),w
  5168  042D  0022               	movlb	2	; select bank2
  5169  042E  00AB               	movwf	(_knob_2_pos+1)^(0+256)
  5170  042F  0021               	movlb	1	; select bank1
  5171  0430  0820               	movf	?_adc_convert^(0+128),w
  5172  0431  0022               	movlb	2	; select bank2
  5173  0432  00AA               	movwf	_knob_2_pos^(0+256)
  5174                           
  5175                           ;main.c: 220: knob_3_pos = adc_convert(2);
  5176  0433  3002               	movlw	2
  5177  0434  319D  2587  3183   	fcall	_adc_convert
  5178  0437  0021               	movlb	1	; select bank1
  5179  0438  0821               	movf	(?_adc_convert+1)^(0+128),w
  5180  0439  0022               	movlb	2	; select bank2
  5181  043A  00AD               	movwf	(_knob_3_pos+1)^(0+256)
  5182  043B  0021               	movlb	1	; select bank1
  5183  043C  0820               	movf	?_adc_convert^(0+128),w
  5184  043D  0022               	movlb	2	; select bank2
  5185  043E  00AC               	movwf	_knob_3_pos^(0+256)
  5186                           
  5187                           ;main.c: 221: knob_4_pos = adc_convert(3);
  5188  043F  3003               	movlw	3
  5189  0440  319D  2587  3183   	fcall	_adc_convert
  5190  0443  0021               	movlb	1	; select bank1
  5191  0444  0821               	movf	(?_adc_convert+1)^(0+128),w
  5192  0445  0022               	movlb	2	; select bank2
  5193  0446  00AF               	movwf	(_knob_4_pos+1)^(0+256)
  5194  0447  0021               	movlb	1	; select bank1
  5195  0448  0820               	movf	?_adc_convert^(0+128),w
  5196  0449  0022               	movlb	2	; select bank2
  5197  044A  00AE               	movwf	_knob_4_pos^(0+256)
  5198                           
  5199                           ;main.c: 222: knob_5_pos = adc_convert(4);
  5200  044B  3004               	movlw	4
  5201  044C  319D  2587  3183   	fcall	_adc_convert
  5202  044F  0021               	movlb	1	; select bank1
  5203  0450  0821               	movf	(?_adc_convert+1)^(0+128),w
  5204  0451  0022               	movlb	2	; select bank2
  5205  0452  00B1               	movwf	(_knob_5_pos+1)^(0+256)
  5206  0453  0021               	movlb	1	; select bank1
  5207  0454  0820               	movf	?_adc_convert^(0+128),w
  5208  0455  0022               	movlb	2	; select bank2
  5209  0456  00B0               	movwf	_knob_5_pos^(0+256)
  5210                           
  5211                           ;main.c: 249: LATBbits.LATB1 = 0;
  5212  0457  108D               	bcf	13,1	;volatile
  5213                           
  5214                           ;main.c: 250: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5215  0458  0957               	comf	_knob1_prev^(0+256),w	;volatile
  5216  0459  0023               	movlb	3	; select bank3
  5217  045A  00D4               	movwf	??_main^(0+384)
  5218  045B  0022               	movlb	2	; select bank2
  5219  045C  0958               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5220  045D  0023               	movlb	3	; select bank3
  5221  045E  00D5               	movwf	(??_main^(0+384)+1)
  5222  045F  0AD4               	incf	??_main^(0+384),f
  5223  0460  1903               	skipnz
  5224  0461  0AD5               	incf	(??_main^(0+384)+1),f
  5225  0462  0022               	movlb	2	; select bank2
  5226  0463  0828               	movf	_knob_1_pos^(0+256),w
  5227  0464  0023               	movlb	3	; select bank3
  5228  0465  0754               	addwf	??_main^(0+384),w
  5229  0466  00D6               	movwf	(??_main+2)^(0+384)
  5230  0467  0022               	movlb	2	; select bank2
  5231  0468  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5232  0469  0023               	movlb	3	; select bank3
  5233  046A  3D55               	addwfc	(??_main+1)^(0+384),w
  5234  046B  00D7               	movwf	(??_main+3)^(0+384)
  5235  046C  0857               	movf	(??_main+3)^(0+384),w
  5236  046D  3A80               	xorlw	128
  5237  046E  00D8               	movwf	(??_main+4)^(0+384)
  5238  046F  3080               	movlw	128
  5239  0470  0258               	subwf	(??_main+4)^(0+384),w
  5240  0471  1D03               	skipz
  5241  0472  2C75               	goto	u6695
  5242  0473  3004               	movlw	4
  5243  0474  0256               	subwf	(??_main+2)^(0+384),w
  5244  0475                     u6695:	
  5245  0475  1803               	skipnc
  5246  0476  2C97               	goto	l5866
  5247  0477  0022               	movlb	2	; select bank2
  5248  0478  0957               	comf	_knob1_prev^(0+256),w	;volatile
  5249  0479  0023               	movlb	3	; select bank3
  5250  047A  00D4               	movwf	??_main^(0+384)
  5251  047B  0022               	movlb	2	; select bank2
  5252  047C  0958               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5253  047D  0023               	movlb	3	; select bank3
  5254  047E  00D5               	movwf	(??_main^(0+384)+1)
  5255  047F  0AD4               	incf	??_main^(0+384),f
  5256  0480  1903               	skipnz
  5257  0481  0AD5               	incf	(??_main^(0+384)+1),f
  5258  0482  0022               	movlb	2	; select bank2
  5259  0483  0828               	movf	_knob_1_pos^(0+256),w
  5260  0484  0023               	movlb	3	; select bank3
  5261  0485  0754               	addwf	??_main^(0+384),w
  5262  0486  00D6               	movwf	(??_main+2)^(0+384)
  5263  0487  0022               	movlb	2	; select bank2
  5264  0488  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5265  0489  0023               	movlb	3	; select bank3
  5266  048A  3D55               	addwfc	(??_main+1)^(0+384),w
  5267  048B  00D7               	movwf	(??_main+3)^(0+384)
  5268  048C  0857               	movf	(??_main+3)^(0+384),w
  5269  048D  3A80               	xorlw	128
  5270  048E  00D8               	movwf	(??_main+4)^(0+384)
  5271  048F  307F               	movlw	127
  5272  0490  0258               	subwf	(??_main+4)^(0+384),w
  5273  0491  1D03               	skipz
  5274  0492  2C95               	goto	u6705
  5275  0493  30FD               	movlw	253
  5276  0494  0256               	subwf	(??_main+2)^(0+384),w
  5277  0495                     u6705:	
  5278  0495  1803               	skipnc
  5279  0496  2CEB               	goto	l5874
  5280  0497                     l5866:	
  5281                           
  5282                           ;main.c: 251: knob1_prev = knob_1_pos;
  5283  0497  0022               	movlb	2	; select bank2
  5284  0498  0829               	movf	(_knob_1_pos+1)^(0+256),w
  5285  0499  00D8               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5286  049A  0828               	movf	_knob_1_pos^(0+256),w
  5287  049B  00D7               	movwf	_knob1_prev^(0+256)	;volatile
  5288                           
  5289                           ;main.c: 252: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5290  049C  3000               	movlw	0
  5291  049D  0021               	movlb	1	; select bank1
  5292  049E  00E1               	movwf	map@out_max^(0+128)
  5293  049F  3048               	movlw	72
  5294  04A0  00E2               	movwf	(map@out_max+1)^(0+128)
  5295  04A1  3043               	movlw	67
  5296  04A2  00E3               	movwf	(map@out_max+2)^(0+128)
  5297  04A3  3080               	movlw	128
  5298  04A4  00DE               	movwf	map@out_min^(0+128)
  5299  04A5  3092               	movlw	146
  5300  04A6  00DF               	movwf	(map@out_min+1)^(0+128)
  5301  04A7  3044               	movlw	68
  5302  04A8  00E0               	movwf	(map@out_min+2)^(0+128)
  5303  04A9  30C0               	movlw	192
  5304  04AA  00DB               	movwf	map@in_max^(0+128)
  5305  04AB  307F               	movlw	127
  5306  04AC  00DC               	movwf	(map@in_max+1)^(0+128)
  5307  04AD  3044               	movlw	68
  5308  04AE  00DD               	movwf	(map@in_max+2)^(0+128)
  5309  04AF  3000               	movlw	0
  5310  04B0  00D8               	movwf	map@in_min^(0+128)
  5311  04B1  3000               	movlw	0
  5312  04B2  00D9               	movwf	(map@in_min+1)^(0+128)
  5313  04B3  3000               	movlw	0
  5314  04B4  00DA               	movwf	(map@in_min+2)^(0+128)
  5315  04B5  0022               	movlb	2	; select bank2
  5316  04B6  0858               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5317  04B7  0021               	movlb	1	; select bank1
  5318  04B8  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5319  04B9  0022               	movlb	2	; select bank2
  5320  04BA  0857               	movf	_knob1_prev^(0+256),w	;volatile
  5321  04BB  0021               	movlb	1	; select bank1
  5322  04BC  00A8               	movwf	___awtoft@c^(0+128)
  5323  04BD  319E  2624  3183   	fcall	___awtoft
  5324  04C0  0021               	movlb	1	; select bank1
  5325  04C1  0828               	movf	?___awtoft^(0+128),w
  5326  04C2  00D5               	movwf	map@x^(0+128)
  5327  04C3  0829               	movf	(?___awtoft+1)^(0+128),w
  5328  04C4  00D6               	movwf	(map@x+1)^(0+128)
  5329  04C5  082A               	movf	(?___awtoft+2)^(0+128),w
  5330  04C6  00D7               	movwf	(map@x+2)^(0+128)
  5331  04C7  3196  262D  3183   	fcall	_map
  5332  04CA  0021               	movlb	1	; select bank1
  5333  04CB  0855               	movf	?_map^(0+128),w
  5334  04CC  00E7               	movwf	___fttol@f1^(0+128)
  5335  04CD  0856               	movf	(?_map+1)^(0+128),w
  5336  04CE  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5337  04CF  0857               	movf	(?_map+2)^(0+128),w
  5338  04D0  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5339  04D1  3196  26B8  3183   	fcall	___fttol
  5340  04D4  0021               	movlb	1	; select bank1
  5341  04D5  086A               	movf	(?___fttol+3)^(0+128),w
  5342  04D6  0020               	movlb	0	; select bank0
  5343  04D7  00DB               	movwf	_baseline_delay_time+3	;volatile
  5344  04D8  0021               	movlb	1	; select bank1
  5345  04D9  0869               	movf	(?___fttol+2)^(0+128),w
  5346  04DA  0020               	movlb	0	; select bank0
  5347  04DB  00DA               	movwf	_baseline_delay_time+2	;volatile
  5348  04DC  0021               	movlb	1	; select bank1
  5349  04DD  0868               	movf	(?___fttol+1)^(0+128),w
  5350  04DE  0020               	movlb	0	; select bank0
  5351  04DF  00D9               	movwf	_baseline_delay_time+1	;volatile
  5352  04E0  0021               	movlb	1	; select bank1
  5353  04E1  0867               	movf	?___fttol^(0+128),w
  5354  04E2  0020               	movlb	0	; select bank0
  5355  04E3  00D8               	movwf	_baseline_delay_time	;volatile
  5356                           
  5357                           ;main.c: 253: delay_time_changed = 1;
  5358  04E4  3001               	movlw	1
  5359  04E5  0023               	movlb	3	; select bank3
  5360  04E6  00E3               	movwf	_delay_time_changed^(0+384)
  5361  04E7  3000               	movlw	0
  5362  04E8  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  5363                           
  5364                           ;main.c: 254: LATBbits.LATB1 = 1;
  5365  04E9  0022               	movlb	2	; select bank2
  5366  04EA  148D               	bsf	13,1	;volatile
  5367  04EB                     l5874:	
  5368                           
  5369                           ;main.c: 255: }
  5370                           ;main.c: 265: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5371  04EB  0022               	movlb	2	; select bank2
  5372  04EC  0959               	comf	_knob2_prev^(0+256),w	;volatile
  5373  04ED  0023               	movlb	3	; select bank3
  5374  04EE  00D4               	movwf	??_main^(0+384)
  5375  04EF  0022               	movlb	2	; select bank2
  5376  04F0  095A               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5377  04F1  0023               	movlb	3	; select bank3
  5378  04F2  00D5               	movwf	(??_main^(0+384)+1)
  5379  04F3  0AD4               	incf	??_main^(0+384),f
  5380  04F4  1903               	skipnz
  5381  04F5  0AD5               	incf	(??_main^(0+384)+1),f
  5382  04F6  0022               	movlb	2	; select bank2
  5383  04F7  082A               	movf	_knob_2_pos^(0+256),w
  5384  04F8  0023               	movlb	3	; select bank3
  5385  04F9  0754               	addwf	??_main^(0+384),w
  5386  04FA  00D6               	movwf	(??_main+2)^(0+384)
  5387  04FB  0022               	movlb	2	; select bank2
  5388  04FC  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5389  04FD  0023               	movlb	3	; select bank3
  5390  04FE  3D55               	addwfc	(??_main+1)^(0+384),w
  5391  04FF  00D7               	movwf	(??_main+3)^(0+384)
  5392  0500  0857               	movf	(??_main+3)^(0+384),w
  5393  0501  3A80               	xorlw	128
  5394  0502  00D8               	movwf	(??_main+4)^(0+384)
  5395  0503  3080               	movlw	128
  5396  0504  0258               	subwf	(??_main+4)^(0+384),w
  5397  0505  1D03               	skipz
  5398  0506  2D09               	goto	u6715
  5399  0507  3004               	movlw	4
  5400  0508  0256               	subwf	(??_main+2)^(0+384),w
  5401  0509                     u6715:	
  5402  0509  1803               	skipnc
  5403  050A  2D2B               	goto	l5878
  5404  050B  0022               	movlb	2	; select bank2
  5405  050C  0959               	comf	_knob2_prev^(0+256),w	;volatile
  5406  050D  0023               	movlb	3	; select bank3
  5407  050E  00D4               	movwf	??_main^(0+384)
  5408  050F  0022               	movlb	2	; select bank2
  5409  0510  095A               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5410  0511  0023               	movlb	3	; select bank3
  5411  0512  00D5               	movwf	(??_main^(0+384)+1)
  5412  0513  0AD4               	incf	??_main^(0+384),f
  5413  0514  1903               	skipnz
  5414  0515  0AD5               	incf	(??_main^(0+384)+1),f
  5415  0516  0022               	movlb	2	; select bank2
  5416  0517  082A               	movf	_knob_2_pos^(0+256),w
  5417  0518  0023               	movlb	3	; select bank3
  5418  0519  0754               	addwf	??_main^(0+384),w
  5419  051A  00D6               	movwf	(??_main+2)^(0+384)
  5420  051B  0022               	movlb	2	; select bank2
  5421  051C  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5422  051D  0023               	movlb	3	; select bank3
  5423  051E  3D55               	addwfc	(??_main+1)^(0+384),w
  5424  051F  00D7               	movwf	(??_main+3)^(0+384)
  5425  0520  0857               	movf	(??_main+3)^(0+384),w
  5426  0521  3A80               	xorlw	128
  5427  0522  00D8               	movwf	(??_main+4)^(0+384)
  5428  0523  307F               	movlw	127
  5429  0524  0258               	subwf	(??_main+4)^(0+384),w
  5430  0525  1D03               	skipz
  5431  0526  2D29               	goto	u6725
  5432  0527  30FD               	movlw	253
  5433  0528  0256               	subwf	(??_main+2)^(0+384),w
  5434  0529                     u6725:	
  5435  0529  1803               	skipnc
  5436  052A  2D8B               	goto	l5886
  5437  052B                     l5878:	
  5438                           
  5439                           ;main.c: 266: knob2_prev = knob_2_pos;
  5440  052B  0022               	movlb	2	; select bank2
  5441  052C  082B               	movf	(_knob_2_pos+1)^(0+256),w
  5442  052D  00DA               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5443  052E  082A               	movf	_knob_2_pos^(0+256),w
  5444  052F  00D9               	movwf	_knob2_prev^(0+256)	;volatile
  5445                           
  5446                           ;main.c: 267: int i = map(knob2_prev, 0, 1023, 0, 39);
  5447  0530  3000               	movlw	0
  5448  0531  0021               	movlb	1	; select bank1
  5449  0532  00E1               	movwf	map@out_max^(0+128)
  5450  0533  301C               	movlw	28
  5451  0534  00E2               	movwf	(map@out_max+1)^(0+128)
  5452  0535  3042               	movlw	66
  5453  0536  00E3               	movwf	(map@out_max+2)^(0+128)
  5454  0537  3000               	movlw	0
  5455  0538  00DE               	movwf	map@out_min^(0+128)
  5456  0539  3000               	movlw	0
  5457  053A  00DF               	movwf	(map@out_min+1)^(0+128)
  5458  053B  3000               	movlw	0
  5459  053C  00E0               	movwf	(map@out_min+2)^(0+128)
  5460  053D  30C0               	movlw	192
  5461  053E  00DB               	movwf	map@in_max^(0+128)
  5462  053F  307F               	movlw	127
  5463  0540  00DC               	movwf	(map@in_max+1)^(0+128)
  5464  0541  3044               	movlw	68
  5465  0542  00DD               	movwf	(map@in_max+2)^(0+128)
  5466  0543  3000               	movlw	0
  5467  0544  00D8               	movwf	map@in_min^(0+128)
  5468  0545  3000               	movlw	0
  5469  0546  00D9               	movwf	(map@in_min+1)^(0+128)
  5470  0547  3000               	movlw	0
  5471  0548  00DA               	movwf	(map@in_min+2)^(0+128)
  5472  0549  0022               	movlb	2	; select bank2
  5473  054A  085A               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5474  054B  0021               	movlb	1	; select bank1
  5475  054C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5476  054D  0022               	movlb	2	; select bank2
  5477  054E  0859               	movf	_knob2_prev^(0+256),w	;volatile
  5478  054F  0021               	movlb	1	; select bank1
  5479  0550  00A8               	movwf	___awtoft@c^(0+128)
  5480  0551  319E  2624  3183   	fcall	___awtoft
  5481  0554  0021               	movlb	1	; select bank1
  5482  0555  0828               	movf	?___awtoft^(0+128),w
  5483  0556  00D5               	movwf	map@x^(0+128)
  5484  0557  0829               	movf	(?___awtoft+1)^(0+128),w
  5485  0558  00D6               	movwf	(map@x+1)^(0+128)
  5486  0559  082A               	movf	(?___awtoft+2)^(0+128),w
  5487  055A  00D7               	movwf	(map@x+2)^(0+128)
  5488  055B  3196  262D  3183   	fcall	_map
  5489  055E  0021               	movlb	1	; select bank1
  5490  055F  0855               	movf	?_map^(0+128),w
  5491  0560  00E7               	movwf	___fttol@f1^(0+128)
  5492  0561  0856               	movf	(?_map+1)^(0+128),w
  5493  0562  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5494  0563  0857               	movf	(?_map+2)^(0+128),w
  5495  0564  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5496  0565  3196  26B8  3183   	fcall	___fttol
  5497  0568  0021               	movlb	1	; select bank1
  5498  0569  0868               	movf	(?___fttol^(0+128)+1),w
  5499  056A  0022               	movlb	2	; select bank2
  5500  056B  00D2               	movwf	(main@i+1)^(0+256)
  5501  056C  0021               	movlb	1	; select bank1
  5502  056D  0867               	movf	?___fttol^(0+128),w
  5503  056E  0022               	movlb	2	; select bank2
  5504  056F  00D1               	movwf	main@i^(0+256)
  5505                           
  5506                           ;main.c: 268: CCPR2 = B25k[B25kLength - 1 - i];
  5507  0570  0851               	movf	main@i^(0+256),w
  5508  0571  3E01               	addlw	1
  5509  0572  3AFF               	xorlw	255
  5510  0573  3E01               	addlw	1
  5511  0574  0023               	movlb	3	; select bank3
  5512  0575  0769               	addwf	_B25kLength^(0+384),w
  5513  0576  0709               	addwf	9,w
  5514  0577  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5515  0578  0086               	movwf	6
  5516  0579  3002               	movlw	2	; select bank5/6
  5517  057A  0087               	movwf	7
  5518  057B  3F40               	moviw [0]fsr1
  5519  057C  0025               	movlb	5	; select bank5
  5520  057D  0098               	movwf	24	;volatile
  5521  057E  3F41               	moviw [1]fsr1
  5522  057F  0099               	movwf	25	;volatile
  5523                           
  5524                           ;main.c: 269: CCPR3 = B25k[i];
  5525  0580  0022               	movlb	2	; select bank2
  5526  0581  3551               	lslf	main@i^(0+256),w
  5527  0582  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5528  0583  0086               	movwf	6
  5529  0584  3002               	movlw	2	; select bank5/6
  5530  0585  0087               	movwf	7
  5531  0586  3F40               	moviw [0]fsr1
  5532  0587  0026               	movlb	6	; select bank6
  5533  0588  0091               	movwf	17	;volatile
  5534  0589  3F41               	moviw [1]fsr1
  5535  058A  0092               	movwf	18	;volatile
  5536  058B                     l5886:	
  5537                           
  5538                           ;main.c: 270: }
  5539                           ;main.c: 280: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5540  058B  0022               	movlb	2	; select bank2
  5541  058C  095B               	comf	_knob3_prev^(0+256),w	;volatile
  5542  058D  0023               	movlb	3	; select bank3
  5543  058E  00D4               	movwf	??_main^(0+384)
  5544  058F  0022               	movlb	2	; select bank2
  5545  0590  095C               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5546  0591  0023               	movlb	3	; select bank3
  5547  0592  00D5               	movwf	(??_main^(0+384)+1)
  5548  0593  0AD4               	incf	??_main^(0+384),f
  5549  0594  1903               	skipnz
  5550  0595  0AD5               	incf	(??_main^(0+384)+1),f
  5551  0596  0022               	movlb	2	; select bank2
  5552  0597  082C               	movf	_knob_3_pos^(0+256),w
  5553  0598  0023               	movlb	3	; select bank3
  5554  0599  0754               	addwf	??_main^(0+384),w
  5555  059A  00D6               	movwf	(??_main+2)^(0+384)
  5556  059B  0022               	movlb	2	; select bank2
  5557  059C  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5558  059D  0023               	movlb	3	; select bank3
  5559  059E  3D55               	addwfc	(??_main+1)^(0+384),w
  5560  059F  00D7               	movwf	(??_main+3)^(0+384)
  5561  05A0  0857               	movf	(??_main+3)^(0+384),w
  5562  05A1  3A80               	xorlw	128
  5563  05A2  00D8               	movwf	(??_main+4)^(0+384)
  5564  05A3  3080               	movlw	128
  5565  05A4  0258               	subwf	(??_main+4)^(0+384),w
  5566  05A5  1D03               	skipz
  5567  05A6  2DA9               	goto	u6735
  5568  05A7  3004               	movlw	4
  5569  05A8  0256               	subwf	(??_main+2)^(0+384),w
  5570  05A9                     u6735:	
  5571  05A9  1803               	skipnc
  5572  05AA  2DCB               	goto	l5890
  5573  05AB  0022               	movlb	2	; select bank2
  5574  05AC  095B               	comf	_knob3_prev^(0+256),w	;volatile
  5575  05AD  0023               	movlb	3	; select bank3
  5576  05AE  00D4               	movwf	??_main^(0+384)
  5577  05AF  0022               	movlb	2	; select bank2
  5578  05B0  095C               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5579  05B1  0023               	movlb	3	; select bank3
  5580  05B2  00D5               	movwf	(??_main^(0+384)+1)
  5581  05B3  0AD4               	incf	??_main^(0+384),f
  5582  05B4  1903               	skipnz
  5583  05B5  0AD5               	incf	(??_main^(0+384)+1),f
  5584  05B6  0022               	movlb	2	; select bank2
  5585  05B7  082C               	movf	_knob_3_pos^(0+256),w
  5586  05B8  0023               	movlb	3	; select bank3
  5587  05B9  0754               	addwf	??_main^(0+384),w
  5588  05BA  00D6               	movwf	(??_main+2)^(0+384)
  5589  05BB  0022               	movlb	2	; select bank2
  5590  05BC  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5591  05BD  0023               	movlb	3	; select bank3
  5592  05BE  3D55               	addwfc	(??_main+1)^(0+384),w
  5593  05BF  00D7               	movwf	(??_main+3)^(0+384)
  5594  05C0  0857               	movf	(??_main+3)^(0+384),w
  5595  05C1  3A80               	xorlw	128
  5596  05C2  00D8               	movwf	(??_main+4)^(0+384)
  5597  05C3  307F               	movlw	127
  5598  05C4  0258               	subwf	(??_main+4)^(0+384),w
  5599  05C5  1D03               	skipz
  5600  05C6  2DC9               	goto	u6745
  5601  05C7  30FD               	movlw	253
  5602  05C8  0256               	subwf	(??_main+2)^(0+384),w
  5603  05C9                     u6745:	
  5604  05C9  1803               	skipnc
  5605  05CA  2E2B               	goto	l5898
  5606  05CB                     l5890:	
  5607                           
  5608                           ;main.c: 281: knob3_prev = knob_3_pos;
  5609  05CB  0022               	movlb	2	; select bank2
  5610  05CC  082D               	movf	(_knob_3_pos+1)^(0+256),w
  5611  05CD  00DC               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5612  05CE  082C               	movf	_knob_3_pos^(0+256),w
  5613  05CF  00DB               	movwf	_knob3_prev^(0+256)	;volatile
  5614                           
  5615                           ;main.c: 282: int i = map(knob3_prev, 0, 1023, 16, 0);
  5616  05D0  3000               	movlw	0
  5617  05D1  0021               	movlb	1	; select bank1
  5618  05D2  00E1               	movwf	map@out_max^(0+128)
  5619  05D3  3000               	movlw	0
  5620  05D4  00E2               	movwf	(map@out_max+1)^(0+128)
  5621  05D5  3000               	movlw	0
  5622  05D6  00E3               	movwf	(map@out_max+2)^(0+128)
  5623  05D7  3000               	movlw	0
  5624  05D8  00DE               	movwf	map@out_min^(0+128)
  5625  05D9  3080               	movlw	128
  5626  05DA  00DF               	movwf	(map@out_min+1)^(0+128)
  5627  05DB  3041               	movlw	65
  5628  05DC  00E0               	movwf	(map@out_min+2)^(0+128)
  5629  05DD  30C0               	movlw	192
  5630  05DE  00DB               	movwf	map@in_max^(0+128)
  5631  05DF  307F               	movlw	127
  5632  05E0  00DC               	movwf	(map@in_max+1)^(0+128)
  5633  05E1  3044               	movlw	68
  5634  05E2  00DD               	movwf	(map@in_max+2)^(0+128)
  5635  05E3  3000               	movlw	0
  5636  05E4  00D8               	movwf	map@in_min^(0+128)
  5637  05E5  3000               	movlw	0
  5638  05E6  00D9               	movwf	(map@in_min+1)^(0+128)
  5639  05E7  3000               	movlw	0
  5640  05E8  00DA               	movwf	(map@in_min+2)^(0+128)
  5641  05E9  0022               	movlb	2	; select bank2
  5642  05EA  085C               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5643  05EB  0021               	movlb	1	; select bank1
  5644  05EC  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5645  05ED  0022               	movlb	2	; select bank2
  5646  05EE  085B               	movf	_knob3_prev^(0+256),w	;volatile
  5647  05EF  0021               	movlb	1	; select bank1
  5648  05F0  00A8               	movwf	___awtoft@c^(0+128)
  5649  05F1  319E  2624  3183   	fcall	___awtoft
  5650  05F4  0021               	movlb	1	; select bank1
  5651  05F5  0828               	movf	?___awtoft^(0+128),w
  5652  05F6  00D5               	movwf	map@x^(0+128)
  5653  05F7  0829               	movf	(?___awtoft+1)^(0+128),w
  5654  05F8  00D6               	movwf	(map@x+1)^(0+128)
  5655  05F9  082A               	movf	(?___awtoft+2)^(0+128),w
  5656  05FA  00D7               	movwf	(map@x+2)^(0+128)
  5657  05FB  3196  262D  3183   	fcall	_map
  5658  05FE  0021               	movlb	1	; select bank1
  5659  05FF  0855               	movf	?_map^(0+128),w
  5660  0600  00E7               	movwf	___fttol@f1^(0+128)
  5661  0601  0856               	movf	(?_map+1)^(0+128),w
  5662  0602  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5663  0603  0857               	movf	(?_map+2)^(0+128),w
  5664  0604  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5665  0605  3196  26B8  3183   	fcall	___fttol
  5666  0608  0021               	movlb	1	; select bank1
  5667  0609  0868               	movf	(?___fttol^(0+128)+1),w
  5668  060A  0022               	movlb	2	; select bank2
  5669  060B  00D4               	movwf	(main@i_391+1)^(0+256)
  5670  060C  0021               	movlb	1	; select bank1
  5671  060D  0867               	movf	?___fttol^(0+128),w
  5672  060E  0022               	movlb	2	; select bank2
  5673  060F  00D3               	movwf	main@i_391^(0+256)
  5674                           
  5675                           ;main.c: 283: CCPR4 = B25k[B25kLength - 1 - i];
  5676  0610  0853               	movf	main@i_391^(0+256),w
  5677  0611  3E01               	addlw	1
  5678  0612  3AFF               	xorlw	255
  5679  0613  3E01               	addlw	1
  5680  0614  0023               	movlb	3	; select bank3
  5681  0615  0769               	addwf	_B25kLength^(0+384),w
  5682  0616  0709               	addwf	9,w
  5683  0617  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5684  0618  0086               	movwf	6
  5685  0619  3002               	movlw	2	; select bank5/6
  5686  061A  0087               	movwf	7
  5687  061B  3F40               	moviw [0]fsr1
  5688  061C  0026               	movlb	6	; select bank6
  5689  061D  0098               	movwf	24	;volatile
  5690  061E  3F41               	moviw [1]fsr1
  5691  061F  0099               	movwf	25	;volatile
  5692                           
  5693                           ;main.c: 284: CCPR5 = B25k[i];
  5694  0620  0022               	movlb	2	; select bank2
  5695  0621  3553               	lslf	main@i_391^(0+256),w
  5696  0622  3EA0               	addlw	(low (_B25k| (0+512)))& (0+255)
  5697  0623  0086               	movwf	6
  5698  0624  3002               	movlw	2	; select bank5/6
  5699  0625  0087               	movwf	7
  5700  0626  3F40               	moviw [0]fsr1
  5701  0627  0026               	movlb	6	; select bank6
  5702  0628  009C               	movwf	28	;volatile
  5703  0629  3F41               	moviw [1]fsr1
  5704  062A  009D               	movwf	29	;volatile
  5705  062B                     l5898:	
  5706                           
  5707                           ;main.c: 285: }
  5708                           ;main.c: 295: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5709  062B  0022               	movlb	2	; select bank2
  5710  062C  095D               	comf	_knob4_prev^(0+256),w	;volatile
  5711  062D  0023               	movlb	3	; select bank3
  5712  062E  00D4               	movwf	??_main^(0+384)
  5713  062F  0022               	movlb	2	; select bank2
  5714  0630  095E               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5715  0631  0023               	movlb	3	; select bank3
  5716  0632  00D5               	movwf	(??_main^(0+384)+1)
  5717  0633  0AD4               	incf	??_main^(0+384),f
  5718  0634  1903               	skipnz
  5719  0635  0AD5               	incf	(??_main^(0+384)+1),f
  5720  0636  0022               	movlb	2	; select bank2
  5721  0637  082E               	movf	_knob_4_pos^(0+256),w
  5722  0638  0023               	movlb	3	; select bank3
  5723  0639  0754               	addwf	??_main^(0+384),w
  5724  063A  00D6               	movwf	(??_main+2)^(0+384)
  5725  063B  0022               	movlb	2	; select bank2
  5726  063C  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5727  063D  0023               	movlb	3	; select bank3
  5728  063E  3D55               	addwfc	(??_main+1)^(0+384),w
  5729  063F  00D7               	movwf	(??_main+3)^(0+384)
  5730  0640  0857               	movf	(??_main+3)^(0+384),w
  5731  0641  3A80               	xorlw	128
  5732  0642  00D8               	movwf	(??_main+4)^(0+384)
  5733  0643  3080               	movlw	128
  5734  0644  0258               	subwf	(??_main+4)^(0+384),w
  5735  0645  1D03               	skipz
  5736  0646  2E49               	goto	u6755
  5737  0647  3004               	movlw	4
  5738  0648  0256               	subwf	(??_main+2)^(0+384),w
  5739  0649                     u6755:	
  5740  0649  1803               	skipnc
  5741  064A  2E6B               	goto	l5902
  5742  064B  0022               	movlb	2	; select bank2
  5743  064C  095D               	comf	_knob4_prev^(0+256),w	;volatile
  5744  064D  0023               	movlb	3	; select bank3
  5745  064E  00D4               	movwf	??_main^(0+384)
  5746  064F  0022               	movlb	2	; select bank2
  5747  0650  095E               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5748  0651  0023               	movlb	3	; select bank3
  5749  0652  00D5               	movwf	(??_main^(0+384)+1)
  5750  0653  0AD4               	incf	??_main^(0+384),f
  5751  0654  1903               	skipnz
  5752  0655  0AD5               	incf	(??_main^(0+384)+1),f
  5753  0656  0022               	movlb	2	; select bank2
  5754  0657  082E               	movf	_knob_4_pos^(0+256),w
  5755  0658  0023               	movlb	3	; select bank3
  5756  0659  0754               	addwf	??_main^(0+384),w
  5757  065A  00D6               	movwf	(??_main+2)^(0+384)
  5758  065B  0022               	movlb	2	; select bank2
  5759  065C  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5760  065D  0023               	movlb	3	; select bank3
  5761  065E  3D55               	addwfc	(??_main+1)^(0+384),w
  5762  065F  00D7               	movwf	(??_main+3)^(0+384)
  5763  0660  0857               	movf	(??_main+3)^(0+384),w
  5764  0661  3A80               	xorlw	128
  5765  0662  00D8               	movwf	(??_main+4)^(0+384)
  5766  0663  307F               	movlw	127
  5767  0664  0258               	subwf	(??_main+4)^(0+384),w
  5768  0665  1D03               	skipz
  5769  0666  2E69               	goto	u6765
  5770  0667  30FD               	movlw	253
  5771  0668  0256               	subwf	(??_main+2)^(0+384),w
  5772  0669                     u6765:	
  5773  0669  1803               	skipnc
  5774  066A  2EB0               	goto	l5906
  5775  066B                     l5902:	
  5776                           
  5777                           ;main.c: 296: knob4_prev = knob_4_pos;
  5778  066B  0022               	movlb	2	; select bank2
  5779  066C  082F               	movf	(_knob_4_pos+1)^(0+256),w
  5780  066D  00DE               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5781  066E  082E               	movf	_knob_4_pos^(0+256),w
  5782  066F  00DD               	movwf	_knob4_prev^(0+256)	;volatile
  5783                           
  5784                           ;main.c: 297: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5785  0670  3000               	movlw	0
  5786  0671  0021               	movlb	1	; select bank1
  5787  0672  00E1               	movwf	map@out_max^(0+128)
  5788  0673  307A               	movlw	122
  5789  0674  00E2               	movwf	(map@out_max+1)^(0+128)
  5790  0675  3044               	movlw	68
  5791  0676  00E3               	movwf	(map@out_max+2)^(0+128)
  5792  0677  3000               	movlw	0
  5793  0678  00DE               	movwf	map@out_min^(0+128)
  5794  0679  3070               	movlw	112
  5795  067A  00DF               	movwf	(map@out_min+1)^(0+128)
  5796  067B  3042               	movlw	66
  5797  067C  00E0               	movwf	(map@out_min+2)^(0+128)
  5798  067D  30C0               	movlw	192
  5799  067E  00DB               	movwf	map@in_max^(0+128)
  5800  067F  307F               	movlw	127
  5801  0680  00DC               	movwf	(map@in_max+1)^(0+128)
  5802  0681  3044               	movlw	68
  5803  0682  00DD               	movwf	(map@in_max+2)^(0+128)
  5804  0683  3000               	movlw	0
  5805  0684  00D8               	movwf	map@in_min^(0+128)
  5806  0685  3000               	movlw	0
  5807  0686  00D9               	movwf	(map@in_min+1)^(0+128)
  5808  0687  3000               	movlw	0
  5809  0688  00DA               	movwf	(map@in_min+2)^(0+128)
  5810  0689  0022               	movlb	2	; select bank2
  5811  068A  085E               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5812  068B  0021               	movlb	1	; select bank1
  5813  068C  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5814  068D  0022               	movlb	2	; select bank2
  5815  068E  085D               	movf	_knob4_prev^(0+256),w	;volatile
  5816  068F  0021               	movlb	1	; select bank1
  5817  0690  00A8               	movwf	___awtoft@c^(0+128)
  5818  0691  319E  2624  3183   	fcall	___awtoft
  5819  0694  0021               	movlb	1	; select bank1
  5820  0695  0828               	movf	?___awtoft^(0+128),w
  5821  0696  00D5               	movwf	map@x^(0+128)
  5822  0697  0829               	movf	(?___awtoft+1)^(0+128),w
  5823  0698  00D6               	movwf	(map@x+1)^(0+128)
  5824  0699  082A               	movf	(?___awtoft+2)^(0+128),w
  5825  069A  00D7               	movwf	(map@x+2)^(0+128)
  5826  069B  3196  262D  3183   	fcall	_map
  5827  069E  0021               	movlb	1	; select bank1
  5828  069F  0855               	movf	?_map^(0+128),w
  5829  06A0  00E7               	movwf	___fttol@f1^(0+128)
  5830  06A1  0856               	movf	(?_map+1)^(0+128),w
  5831  06A2  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5832  06A3  0857               	movf	(?_map+2)^(0+128),w
  5833  06A4  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5834  06A5  3196  26B8  3183   	fcall	___fttol
  5835  06A8  0021               	movlb	1	; select bank1
  5836  06A9  0868               	movf	(?___fttol^(0+128)+1),w
  5837  06AA  0023               	movlb	3	; select bank3
  5838  06AB  00E6               	movwf	(_mod_delay_time+1)^(0+384)
  5839  06AC  0021               	movlb	1	; select bank1
  5840  06AD  0867               	movf	?___fttol^(0+128),w
  5841  06AE  0023               	movlb	3	; select bank3
  5842  06AF  00E5               	movwf	_mod_delay_time^(0+384)
  5843  06B0                     l5906:	
  5844                           
  5845                           ;main.c: 298: }
  5846                           ;main.c: 306: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5847  06B0  0022               	movlb	2	; select bank2
  5848  06B1  095F               	comf	_knob5_prev^(0+256),w	;volatile
  5849  06B2  0023               	movlb	3	; select bank3
  5850  06B3  00D4               	movwf	??_main^(0+384)
  5851  06B4  0022               	movlb	2	; select bank2
  5852  06B5  0960               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5853  06B6  0023               	movlb	3	; select bank3
  5854  06B7  00D5               	movwf	(??_main^(0+384)+1)
  5855  06B8  0AD4               	incf	??_main^(0+384),f
  5856  06B9  1903               	skipnz
  5857  06BA  0AD5               	incf	(??_main^(0+384)+1),f
  5858  06BB  0022               	movlb	2	; select bank2
  5859  06BC  0830               	movf	_knob_5_pos^(0+256),w
  5860  06BD  0023               	movlb	3	; select bank3
  5861  06BE  0754               	addwf	??_main^(0+384),w
  5862  06BF  00D6               	movwf	(??_main+2)^(0+384)
  5863  06C0  0022               	movlb	2	; select bank2
  5864  06C1  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5865  06C2  0023               	movlb	3	; select bank3
  5866  06C3  3D55               	addwfc	(??_main+1)^(0+384),w
  5867  06C4  00D7               	movwf	(??_main+3)^(0+384)
  5868  06C5  0857               	movf	(??_main+3)^(0+384),w
  5869  06C6  3A80               	xorlw	128
  5870  06C7  00D8               	movwf	(??_main+4)^(0+384)
  5871  06C8  3080               	movlw	128
  5872  06C9  0258               	subwf	(??_main+4)^(0+384),w
  5873  06CA  1D03               	skipz
  5874  06CB  2ECE               	goto	u6775
  5875  06CC  3004               	movlw	4
  5876  06CD  0256               	subwf	(??_main+2)^(0+384),w
  5877  06CE                     u6775:	
  5878  06CE  1803               	skipnc
  5879  06CF  2EF0               	goto	l5910
  5880  06D0  0022               	movlb	2	; select bank2
  5881  06D1  095F               	comf	_knob5_prev^(0+256),w	;volatile
  5882  06D2  0023               	movlb	3	; select bank3
  5883  06D3  00D4               	movwf	??_main^(0+384)
  5884  06D4  0022               	movlb	2	; select bank2
  5885  06D5  0960               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5886  06D6  0023               	movlb	3	; select bank3
  5887  06D7  00D5               	movwf	(??_main^(0+384)+1)
  5888  06D8  0AD4               	incf	??_main^(0+384),f
  5889  06D9  1903               	skipnz
  5890  06DA  0AD5               	incf	(??_main^(0+384)+1),f
  5891  06DB  0022               	movlb	2	; select bank2
  5892  06DC  0830               	movf	_knob_5_pos^(0+256),w
  5893  06DD  0023               	movlb	3	; select bank3
  5894  06DE  0754               	addwf	??_main^(0+384),w
  5895  06DF  00D6               	movwf	(??_main+2)^(0+384)
  5896  06E0  0022               	movlb	2	; select bank2
  5897  06E1  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5898  06E2  0023               	movlb	3	; select bank3
  5899  06E3  3D55               	addwfc	(??_main+1)^(0+384),w
  5900  06E4  00D7               	movwf	(??_main+3)^(0+384)
  5901  06E5  0857               	movf	(??_main+3)^(0+384),w
  5902  06E6  3A80               	xorlw	128
  5903  06E7  00D8               	movwf	(??_main+4)^(0+384)
  5904  06E8  307F               	movlw	127
  5905  06E9  0258               	subwf	(??_main+4)^(0+384),w
  5906  06EA  1D03               	skipz
  5907  06EB  2EEE               	goto	u6785
  5908  06EC  30FD               	movlw	253
  5909  06ED  0256               	subwf	(??_main+2)^(0+384),w
  5910  06EE                     u6785:	
  5911  06EE  1803               	skipnc
  5912  06EF  2F35               	goto	l5914
  5913  06F0                     l5910:	
  5914                           
  5915                           ;main.c: 307: knob5_prev = knob_5_pos;
  5916  06F0  0022               	movlb	2	; select bank2
  5917  06F1  0831               	movf	(_knob_5_pos+1)^(0+256),w
  5918  06F2  00E0               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5919  06F3  0830               	movf	_knob_5_pos^(0+256),w
  5920  06F4  00DF               	movwf	_knob5_prev^(0+256)	;volatile
  5921                           
  5922                           ;main.c: 308: adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  5923  06F5  3000               	movlw	0
  5924  06F6  0021               	movlb	1	; select bank1
  5925  06F7  00E1               	movwf	map@out_max^(0+128)
  5926  06F8  3000               	movlw	0
  5927  06F9  00E2               	movwf	(map@out_max+1)^(0+128)
  5928  06FA  3000               	movlw	0
  5929  06FB  00E3               	movwf	(map@out_max+2)^(0+128)
  5930  06FC  3060               	movlw	96
  5931  06FD  00DE               	movwf	map@out_min^(0+128)
  5932  06FE  309F               	movlw	159
  5933  06FF  00DF               	movwf	(map@out_min+1)^(0+128)
  5934  0700  3044               	movlw	68
  5935  0701  00E0               	movwf	(map@out_min+2)^(0+128)
  5936  0702  30C0               	movlw	192
  5937  0703  00DB               	movwf	map@in_max^(0+128)
  5938  0704  307F               	movlw	127
  5939  0705  00DC               	movwf	(map@in_max+1)^(0+128)
  5940  0706  3044               	movlw	68
  5941  0707  00DD               	movwf	(map@in_max+2)^(0+128)
  5942  0708  3000               	movlw	0
  5943  0709  00D8               	movwf	map@in_min^(0+128)
  5944  070A  3000               	movlw	0
  5945  070B  00D9               	movwf	(map@in_min+1)^(0+128)
  5946  070C  3000               	movlw	0
  5947  070D  00DA               	movwf	(map@in_min+2)^(0+128)
  5948  070E  0022               	movlb	2	; select bank2
  5949  070F  0860               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  5950  0710  0021               	movlb	1	; select bank1
  5951  0711  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5952  0712  0022               	movlb	2	; select bank2
  5953  0713  085F               	movf	_knob5_prev^(0+256),w	;volatile
  5954  0714  0021               	movlb	1	; select bank1
  5955  0715  00A8               	movwf	___awtoft@c^(0+128)
  5956  0716  319E  2624  3183   	fcall	___awtoft
  5957  0719  0021               	movlb	1	; select bank1
  5958  071A  0828               	movf	?___awtoft^(0+128),w
  5959  071B  00D5               	movwf	map@x^(0+128)
  5960  071C  0829               	movf	(?___awtoft+1)^(0+128),w
  5961  071D  00D6               	movwf	(map@x+1)^(0+128)
  5962  071E  082A               	movf	(?___awtoft+2)^(0+128),w
  5963  071F  00D7               	movwf	(map@x+2)^(0+128)
  5964  0720  3196  262D  3183   	fcall	_map
  5965  0723  0021               	movlb	1	; select bank1
  5966  0724  0855               	movf	?_map^(0+128),w
  5967  0725  00E7               	movwf	___fttol@f1^(0+128)
  5968  0726  0856               	movf	(?_map+1)^(0+128),w
  5969  0727  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5970  0728  0857               	movf	(?_map+2)^(0+128),w
  5971  0729  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5972  072A  3196  26B8  3183   	fcall	___fttol
  5973  072D  0021               	movlb	1	; select bank1
  5974  072E  0868               	movf	(?___fttol^(0+128)+1),w
  5975  072F  0023               	movlb	3	; select bank3
  5976  0730  00C3               	movwf	(_adjusted_pot_value+1)^(0+384)
  5977  0731  0021               	movlb	1	; select bank1
  5978  0732  0867               	movf	?___fttol^(0+128),w
  5979  0733  0023               	movlb	3	; select bank3
  5980  0734  00C2               	movwf	_adjusted_pot_value^(0+384)
  5981  0735                     l5914:	
  5982                           
  5983                           ;main.c: 310: }
  5984                           ;main.c: 389: if (delay_time_changed == 1) {
  5985  0735  0023               	movlb	3	; select bank3
  5986  0736  0363               	decf	_delay_time_changed^(0+384),w
  5987  0737  0464               	iorwf	(_delay_time_changed+1)^(0+384),w
  5988  0738  1D03               	btfss	3,2
  5989  0739  2BEA               	goto	l5830
  5990                           
  5991                           ;main.c: 390: delay_time = baseline_delay_time;
  5992  073A  0020               	movlb	0	; select bank0
  5993  073B  085B               	movf	_baseline_delay_time+3,w	;volatile
  5994  073C  00DF               	movwf	_delay_time+3	;volatile
  5995  073D  085A               	movf	_baseline_delay_time+2,w	;volatile
  5996  073E  00DE               	movwf	_delay_time+2	;volatile
  5997  073F  0859               	movf	_baseline_delay_time+1,w	;volatile
  5998  0740  00DD               	movwf	_delay_time+1	;volatile
  5999  0741  0858               	movf	_baseline_delay_time,w	;volatile
  6000  0742  00DC               	movwf	_delay_time	;volatile
  6001                           
  6002                           ;main.c: 391: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6003  0743  0859               	movf	_baseline_delay_time+1,w	;volatile
  6004  0744  0022               	movlb	2	; select bank2
  6005  0745  00C6               	movwf	(set_subdivision@x+1)^(0+256)
  6006  0746  0020               	movlb	0	; select bank0
  6007  0747  0858               	movf	_baseline_delay_time,w	;volatile
  6008  0748  0022               	movlb	2	; select bank2
  6009  0749  00C5               	movwf	set_subdivision@x^(0+256)
  6010  074A  0020               	movlb	0	; select bank0
  6011  074B  0865               	movf	_top_push_state+1,w
  6012  074C  0022               	movlb	2	; select bank2
  6013  074D  00C8               	movwf	(set_subdivision@y+1)^(0+256)
  6014  074E  0020               	movlb	0	; select bank0
  6015  074F  0864               	movf	_top_push_state,w
  6016  0750  0022               	movlb	2	; select bank2
  6017  0751  00C7               	movwf	set_subdivision@y^(0+256)
  6018  0752  3188  20F2  3183   	fcall	_set_subdivision
  6019  0755  0022               	movlb	2	; select bank2
  6020  0756  0845               	movf	?_set_subdivision^(0+256),w
  6021  0757  0020               	movlb	0	; select bank0
  6022  0758  00DC               	movwf	_delay_time	;volatile
  6023  0759  0022               	movlb	2	; select bank2
  6024  075A  0846               	movf	(?_set_subdivision+1)^(0+256),w
  6025  075B  0020               	movlb	0	; select bank0
  6026  075C  00DD               	movwf	_delay_time+1	;volatile
  6027  075D  0D89               	rlf	9,f
  6028  075E  3B89               	subwfb	9,f
  6029  075F  0989               	comf	9,f
  6030  0760  00DE               	movwf	_delay_time+2	;volatile
  6031  0761  00DF               	movwf	_delay_time+3	;volatile
  6032                           
  6033                           ;main.c: 392: reset_sub_delay = 1;
  6034  0762  3001               	movlw	1
  6035  0763  0023               	movlb	3	; select bank3
  6036  0764  00D0               	movwf	_reset_sub_delay^(0+384)
  6037  0765  3000               	movlw	0
  6038  0766  00D1               	movwf	(_reset_sub_delay^(0+384)+1)
  6039                           
  6040                           ;main.c: 393: delayfound = 0;
  6041  0767  01CC               	clrf	_delayfound^(0+384)
  6042  0768  01CD               	clrf	(_delayfound+1)^(0+384)
  6043                           
  6044                           ;main.c: 394: delay_counter = 0;
  6045  0769  0022               	movlb	2	; select bank2
  6046  076A  01A4               	clrf	_delay_counter^(0+256)	;volatile
  6047  076B  01A5               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6048  076C                     l5932:	
  6049                           ;main.c: 396: while (delayfound == 0) {
  6050                           
  6051  076C  0023               	movlb	3	; select bank3
  6052  076D  084C               	movf	_delayfound^(0+384),w
  6053  076E  044D               	iorwf	(_delayfound+1)^(0+384),w
  6054  076F  1D03               	btfss	3,2
  6055  0770  2FC8               	goto	l5934
  6056                           
  6057                           ;main.c: 397: if (delayArray[delay_counter] <= delay_time * 2) {
  6058  0771  0022               	movlb	2	; select bank2
  6059  0772  0825               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6060  0773  0023               	movlb	3	; select bank3
  6061  0774  00D5               	movwf	(??_main^(0+384)+1)
  6062  0775  0022               	movlb	2	; select bank2
  6063  0776  0824               	movf	_delay_counter^(0+256),w	;volatile
  6064  0777  0023               	movlb	3	; select bank3
  6065  0778  00D4               	movwf	??_main^(0+384)
  6066  0779  35D4               	lslf	??_main^(0+384),f
  6067  077A  0DD5               	rlf	(??_main^(0+384)+1),f
  6068  077B  306E               	movlw	110
  6069  077C  00D6               	movwf	(??_main+2)^(0+384)
  6070  077D  3023               	movlw	35
  6071  077E  00D7               	movwf	((??_main+2)^(0+384)+1)
  6072  077F  0854               	movf	??_main^(0+384),w
  6073  0780  0756               	addwf	(??_main+2)^(0+384),w
  6074  0781  0086               	movwf	6
  6075  0782  0855               	movf	(??_main+1)^(0+384),w
  6076  0783  3D57               	addwfc	(??_main+3)^(0+384),w
  6077  0784  0087               	movwf	7
  6078  0785  3F40               	moviw [0]fsr1
  6079  0786  00D8               	movwf	(??_main+4)^(0+384)
  6080  0787  3F41               	moviw [1]fsr1
  6081  0788  00D9               	movwf	((??_main+4)^(0+384)+1)
  6082  0789  0858               	movf	(??_main+4)^(0+384),w
  6083  078A  00DA               	movwf	(??_main+6)^(0+384)
  6084  078B  0859               	movf	(??_main+5)^(0+384),w
  6085  078C  00DB               	movwf	((??_main+6)^(0+384)+1)
  6086  078D  3000               	movlw	0
  6087  078E  1BDB               	btfsc	((??_main+6)^(0+384)+1),7
  6088  078F  30FF               	movlw	255
  6089  0790  00DC               	movwf	((??_main+6)^(0+384)+2)
  6090  0791  00DD               	movwf	((??_main+6)^(0+384)+3)
  6091  0792  0020               	movlb	0	; select bank0
  6092  0793  085C               	movf	_delay_time,w	;volatile
  6093  0794  0023               	movlb	3	; select bank3
  6094  0795  00DE               	movwf	(??_main+10)^(0+384)
  6095  0796  0020               	movlb	0	; select bank0
  6096  0797  085D               	movf	_delay_time+1,w	;volatile
  6097  0798  0023               	movlb	3	; select bank3
  6098  0799  00DF               	movwf	((??_main+10)^(0+384)+1)
  6099  079A  0020               	movlb	0	; select bank0
  6100  079B  085E               	movf	_delay_time+2,w	;volatile
  6101  079C  0023               	movlb	3	; select bank3
  6102  079D  00E0               	movwf	((??_main+10)^(0+384)+2)
  6103  079E  0020               	movlb	0	; select bank0
  6104  079F  085F               	movf	_delay_time+3,w	;volatile
  6105  07A0  0023               	movlb	3	; select bank3
  6106  07A1  00E1               	movwf	((??_main+10)^(0+384)+3)
  6107  07A2  3001               	movlw	1
  6108  07A3                     u6805:	
  6109  07A3  35DE               	lslf	(??_main+10)^(0+384),f
  6110  07A4  0DDF               	rlf	((??_main+10)^(0+384)+1),f
  6111  07A5  0DE0               	rlf	((??_main+10)^(0+384)+2),f
  6112  07A6  0DE1               	rlf	((??_main+10)^(0+384)+3),f
  6113  07A7  0B89               	decfsz	9,f
  6114  07A8  2FA3               	goto	u6805
  6115  07A9  0861               	movf	(??_main+13)^(0+384),w
  6116  07AA  3A80               	xorlw	128
  6117  07AB  00E2               	movwf	(??_main+14)^(0+384)
  6118  07AC  085D               	movf	(??_main+9)^(0+384),w
  6119  07AD  3A80               	xorlw	128
  6120  07AE  0262               	subwf	(??_main+14)^(0+384),w
  6121  07AF  1D03               	skipz
  6122  07B0  2FBB               	goto	u6813
  6123  07B1  085C               	movf	(??_main+8)^(0+384),w
  6124  07B2  0260               	subwf	(??_main+12)^(0+384),w
  6125  07B3  1D03               	skipz
  6126  07B4  2FBB               	goto	u6813
  6127  07B5  085B               	movf	(??_main+7)^(0+384),w
  6128  07B6  025F               	subwf	(??_main+11)^(0+384),w
  6129  07B7  1D03               	skipz
  6130  07B8  2FBB               	goto	u6813
  6131  07B9  085A               	movf	(??_main+6)^(0+384),w
  6132  07BA  025E               	subwf	(??_main+10)^(0+384),w
  6133  07BB                     u6813:	
  6134  07BB  1C03               	skipc
  6135  07BC  2FC2               	goto	l5930
  6136                           
  6137                           ;main.c: 398: delayfound = 1;
  6138  07BD  3001               	movlw	1
  6139  07BE  00CC               	movwf	_delayfound^(0+384)
  6140  07BF  3000               	movlw	0
  6141  07C0  00CD               	movwf	(_delayfound^(0+384)+1)
  6142                           
  6143                           ;main.c: 402: } else {
  6144  07C1  2F6C               	goto	l5932
  6145  07C2                     l5930:	
  6146                           
  6147                           ;main.c: 403: delay_counter++;
  6148  07C2  3001               	movlw	1
  6149  07C3  0022               	movlb	2	; select bank2
  6150  07C4  07A4               	addwf	_delay_counter^(0+256),f	;volatile
  6151  07C5  3000               	movlw	0
  6152  07C6  3DA5               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6153  07C7  2F6C               	goto	l5932
  6154  07C8                     l5934:	
  6155                           
  6156                           ;main.c: 405: }
  6157                           ;main.c: 406: }
  6158                           ;main.c: 422: mod_delay_time = delay_time / 7.5;
  6159  07C8  0020               	movlb	0	; select bank0
  6160  07C9  085F               	movf	_delay_time+3,w	;volatile
  6161  07CA  0021               	movlb	1	; select bank1
  6162  07CB  00AB               	movwf	(___altoft@c+3)^(0+128)
  6163  07CC  0020               	movlb	0	; select bank0
  6164  07CD  085E               	movf	_delay_time+2,w	;volatile
  6165  07CE  0021               	movlb	1	; select bank1
  6166  07CF  00AA               	movwf	(___altoft@c+2)^(0+128)
  6167  07D0  0020               	movlb	0	; select bank0
  6168  07D1  085D               	movf	_delay_time+1,w	;volatile
  6169  07D2  0021               	movlb	1	; select bank1
  6170  07D3  00A9               	movwf	(___altoft@c+1)^(0+128)
  6171  07D4  0020               	movlb	0	; select bank0
  6172  07D5  085C               	movf	_delay_time,w	;volatile
  6173  07D6  0021               	movlb	1	; select bank1
  6174  07D7  00A8               	movwf	___altoft@c^(0+128)
  6175  07D8  319F  27C3  3183   	fcall	___altoft
  6176  07DB  0021               	movlb	1	; select bank1
  6177  07DC  0828               	movf	?___altoft^(0+128),w
  6178  07DD  00C8               	movwf	___ftdiv@f1^(0+128)
  6179  07DE  0829               	movf	(?___altoft+1)^(0+128),w
  6180  07DF  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  6181  07E0  082A               	movf	(?___altoft+2)^(0+128),w
  6182  07E1  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  6183  07E2  3000               	movlw	0
  6184  07E3  00C5               	movwf	___ftdiv@f2^(0+128)
  6185  07E4  30F0               	movlw	240
  6186  07E5  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  6187  07E6  3040               	movlw	64
  6188  07E7  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  6189  07E8  3197  2757  3183   	fcall	___ftdiv
  6190  07EB  0021               	movlb	1	; select bank1
  6191  07EC  0845               	movf	?___ftdiv^(0+128),w
  6192  07ED  00E7               	movwf	___fttol@f1^(0+128)
  6193  07EE  0846               	movf	(?___ftdiv+1)^(0+128),w
  6194  07EF  00E8               	movwf	(___fttol@f1+1)^(0+128)
  6195  07F0  0847               	movf	(?___ftdiv+2)^(0+128),w
  6196  07F1  00E9               	movwf	(___fttol@f1+2)^(0+128)
  6197  07F2  3196  26B8  3183   	fcall	___fttol
  6198  07F5  0021               	movlb	1	; select bank1
  6199  07F6  0868               	movf	(?___fttol^(0+128)+1),w
  6200  07F7  0023               	movlb	3	; select bank3
  6201  07F8  00E6               	movwf	(_mod_delay_time+1)^(0+384)
  6202  07F9  0021               	movlb	1	; select bank1
  6203  07FA  0867               	movf	?___fttol^(0+128),w
  6204  07FB  0023               	movlb	3	; select bank3
  6205  07FC  00E5               	movwf	_mod_delay_time^(0+384)
  6206                           
  6207                           ;main.c: 424: delay_time_changed = 0;
  6208  07FD  01E3               	clrf	_delay_time_changed^(0+384)
  6209  07FE  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  6210  07FF  2BEA               	goto	l5830
  6211  0800                     __end_of_main:	
  6212                           
  6213                           	psect	text1
  6214  1180                     __ptext1:	
  6215 ;; *************** function _update_mode *****************
  6216 ;; Defined at:
  6217 ;;		line 82 in file "tactiles.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;		None
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;		None
  6222 ;; Return value:  Size  Location     Type
  6223 ;;                  1    wreg      void 
  6224 ;; Registers used:
  6225 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6226 ;; Tracked objects:
  6227 ;;		On entry : 0/0
  6228 ;;		On exit  : 0/0
  6229 ;;		Unchanged: 0/0
  6230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6233 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6234 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6235 ;;Total ram usage:        1 bytes
  6236 ;; Hardware stack levels used:    1
  6237 ;; Hardware stack levels required when called:    3
  6238 ;; This function calls:
  6239 ;;		Nothing
  6240 ;; This function is called by:
  6241 ;;		_main
  6242 ;; This function uses a non-reentrant model
  6243 ;;
  6244                           
  6245                           
  6246                           ;psect for function _update_mode
  6247  1180                     _update_mode:	
  6248                           
  6249                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6250                           
  6251                           ;incstack = 0
  6252                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6253  1180  0020               	movlb	0	; select bank0
  6254  1181  180E               	btfsc	14,0	;volatile
  6255  1182  29BD               	goto	l5524
  6256                           
  6257                           ;tactiles.c: 88: debounce_mode2++;
  6258  1183  3001               	movlw	1
  6259  1184  0023               	movlb	3	; select bank3
  6260  1185  07CA               	addwf	_debounce_mode2^(0+384),f
  6261  1186  3000               	movlw	0
  6262  1187  3DCB               	addwfc	(_debounce_mode2+1)^(0+384),f
  6263                           
  6264                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6265  1188  084B               	movf	(_debounce_mode2+1)^(0+384),w
  6266  1189  3A80               	xorlw	128
  6267  118A  0021               	movlb	1	; select bank1
  6268  118B  00A0               	movwf	??_update_mode^(0+128)
  6269  118C  3080               	movlw	128
  6270  118D  0220               	subwf	??_update_mode^(0+128),w
  6271  118E  1D03               	skipz
  6272  118F  2993               	goto	u6135
  6273  1190  301A               	movlw	26
  6274  1191  0023               	movlb	3	; select bank3
  6275  1192  024A               	subwf	_debounce_mode2^(0+384),w
  6276  1193                     u6135:	
  6277  1193  1C03               	skipc
  6278  1194  0008               	return
  6279                           
  6280                           ;tactiles.c: 90: debounce_mode2 = 25;
  6281  1195  3019               	movlw	25
  6282  1196  0023               	movlb	3	; select bank3
  6283  1197  00CA               	movwf	_debounce_mode2^(0+384)
  6284  1198  3000               	movlw	0
  6285  1199  00CB               	movwf	(_debounce_mode2^(0+384)+1)
  6286                           
  6287                           ;tactiles.c: 91: mode2_state++;
  6288  119A  3001               	movlw	1
  6289  119B  0021               	movlb	1	; select bank1
  6290  119C  00A0               	movwf	??_update_mode^(0+128)
  6291  119D  0820               	movf	??_update_mode^(0+128),w
  6292  119E  0022               	movlb	2	; select bank2
  6293  119F  07BA               	addwf	_mode2_state^(0+256),f
  6294                           
  6295                           ;tactiles.c: 92: if (mode2_state > 2) {
  6296  11A0  3003               	movlw	3
  6297  11A1  023A               	subwf	_mode2_state^(0+256),w
  6298  11A2  1C03               	skipc
  6299  11A3  29AE               	goto	l5522
  6300                           
  6301                           ;tactiles.c: 93: mode2_state = 0;
  6302  11A4  01BA               	clrf	_mode2_state^(0+256)
  6303                           
  6304                           ;tactiles.c: 94: }
  6305                           ;tactiles.c: 95: switch(mode2_state) {
  6306  11A5  29AE               	goto	l5522
  6307  11A6                     l870:	
  6308                           ;tactiles.c: 96: case 0:
  6309                           
  6310                           
  6311                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6312  11A6  108D               	bcf	13,1	;volatile
  6313  11A7  29AC               	goto	L1
  6314  11A8                     l872:	
  6315                           ;tactiles.c: 100: case 1:
  6316                           
  6317                           ;tactiles.c: 99: break;
  6318                           
  6319                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6320                           
  6321                           
  6322                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6323  11A8  108D               	bcf	13,1	;volatile
  6324                           
  6325                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6326  11A9  140D               	bsf	13,0	;volatile
  6327                           
  6328                           ;tactiles.c: 103: break;
  6329  11AA  29B9               	goto	l874
  6330  11AB                     l873:	
  6331                           ;tactiles.c: 104: case 2:
  6332                           
  6333                           
  6334                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6335  11AB  148D               	bsf	13,1	;volatile
  6336  11AC                     L1:	
  6337                           
  6338                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6339  11AC  100D               	bcf	13,0	;volatile
  6340                           
  6341                           ;tactiles.c: 108: }
  6342                           
  6343                           ;tactiles.c: 107: break;
  6344  11AD  29B9               	goto	l874
  6345  11AE                     l5522:	
  6346  11AE  083A               	movf	_mode2_state^(0+256),w
  6347                           
  6348                           ; Switch size 1, requested type "space"
  6349                           ; Number of cases is 3, Range of values is 0 to 2
  6350                           ; switch strategies available:
  6351                           ; Name         Instructions Cycles
  6352                           ; simple_byte           10     6 (average)
  6353                           ; direct_byte           12     6 (fixed)
  6354                           ; jumptable            260     6 (fixed)
  6355                           ;	Chosen strategy is simple_byte
  6356  11AF  3A00               	xorlw	0	; case 0
  6357  11B0  1903               	skipnz
  6358  11B1  29A6               	goto	l870
  6359  11B2  3A01               	xorlw	1	; case 1
  6360  11B3  1903               	skipnz
  6361  11B4  29A8               	goto	l872
  6362  11B5  3A03               	xorlw	3	; case 2
  6363  11B6  1903               	skipnz
  6364  11B7  29AB               	goto	l873
  6365  11B8  29B9               	goto	l874
  6366  11B9                     l874:	
  6367                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6368                           
  6369  11B9  0020               	movlb	0	; select bank0
  6370  11BA  180E               	btfsc	14,0	;volatile
  6371  11BB  0008               	return
  6372  11BC  29B9               	goto	l874
  6373  11BD                     l5524:	
  6374                           ;tactiles.c: 110: }
  6375                           ;tactiles.c: 111: }
  6376                           ;tactiles.c: 112: } else {
  6377                           
  6378                           
  6379                           ;tactiles.c: 113: debounce_mode2 = 0;
  6380  11BD  0023               	movlb	3	; select bank3
  6381  11BE  01CA               	clrf	_debounce_mode2^(0+384)
  6382  11BF  01CB               	clrf	(_debounce_mode2+1)^(0+384)
  6383  11C0  0008               	return
  6384  11C1                     __end_of_update_mode:	
  6385                           
  6386                           	psect	text2
  6387  0B99                     __ptext2:	
  6388 ;; *************** function _updateSwitchTap *****************
  6389 ;; Defined at:
  6390 ;;		line 48 in file "SwitchTap.c"
  6391 ;; Parameters:    Size  Location     Type
  6392 ;;		None
  6393 ;; Auto vars:     Size  Location     Type
  6394 ;;  tapCntDiviso    2   28[BANK1 ] int 
  6395 ;;  iCnt            1   30[BANK1 ] unsigned char 
  6396 ;; Return value:  Size  Location     Type
  6397 ;;                  1    wreg      void 
  6398 ;; Registers used:
  6399 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6400 ;; Tracked objects:
  6401 ;;		On entry : 0/0
  6402 ;;		On exit  : 0/0
  6403 ;;		Unchanged: 0/0
  6404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6406 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6407 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6408 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6409 ;;Total ram usage:        9 bytes
  6410 ;; Hardware stack levels used:    1
  6411 ;; Hardware stack levels required when called:    6
  6412 ;; This function calls:
  6413 ;;		___aldiv
  6414 ;;		_setDoublePressState
  6415 ;;		_setLongTapState
  6416 ;; This function is called by:
  6417 ;;		_main
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           
  6422                           ;psect for function _updateSwitchTap
  6423  0B99                     _updateSwitchTap:	
  6424                           
  6425                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6426                           
  6427                           ;incstack = 0
  6428                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6429  0B99  0021               	movlb	1	; select bank1
  6430  0B9A  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6431                           
  6432                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6433  0B9B  0020               	movlb	0	; select bank0
  6434  0B9C  1810               	btfsc	16,0	;volatile
  6435  0B9D  2BA4               	goto	l5652
  6436                           
  6437                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6438  0B9E  0857               	movf	_switchTap_pressed,w
  6439  0B9F  1903               	btfsc	3,2
  6440  0BA0  2BAE               	goto	l1209
  6441                           
  6442                           ;SwitchTap.c: 59: switchTap_pressed--;
  6443  0BA1  3001               	movlw	1
  6444  0BA2  02D7               	subwf	_switchTap_pressed,f
  6445                           
  6446                           ;SwitchTap.c: 60: }
  6447                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6448  0BA3  2BAE               	goto	l1209
  6449  0BA4                     l5652:	
  6450  0BA4  3019               	movlw	25
  6451  0BA5  0257               	subwf	_switchTap_pressed,w
  6452  0BA6  1803               	skipnc
  6453  0BA7  2BAE               	goto	l1209
  6454                           
  6455                           ;SwitchTap.c: 62: switchTap_pressed++;
  6456  0BA8  3001               	movlw	1
  6457  0BA9  0021               	movlb	1	; select bank1
  6458  0BAA  00B6               	movwf	??_updateSwitchTap^(0+128)
  6459  0BAB  0836               	movf	??_updateSwitchTap^(0+128),w
  6460  0BAC  0020               	movlb	0	; select bank0
  6461  0BAD  07D7               	addwf	_switchTap_pressed,f
  6462  0BAE                     l1209:	
  6463                           
  6464                           ;SwitchTap.c: 63: }
  6465                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6466  0BAE  0857               	movf	_switchTap_pressed,w
  6467  0BAF  1D03               	btfss	3,2
  6468  0BB0  2D64               	goto	l5736
  6469                           
  6470                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6471  0BB1  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6472  0BB2  2C36               	goto	l5696
  6473  0BB3  084C               	movf	_tap_timer+3,w	;volatile
  6474  0BB4  1D03               	btfss	3,2
  6475  0BB5  2BBF               	goto	l5658
  6476  0BB6  084B               	movf	_tap_timer+2,w	;volatile
  6477  0BB7  1D03               	btfss	3,2
  6478  0BB8  2BBF               	goto	l5658
  6479  0BB9  301B               	movlw	27
  6480  0BBA  0249               	subwf	_tap_timer,w	;volatile
  6481  0BBB  3006               	movlw	6
  6482  0BBC  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6483  0BBD  1C03               	btfss	3,0
  6484  0BBE  2C36               	goto	l5696
  6485  0BBF                     l5658:	
  6486                           
  6487                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6488  0BBF  0022               	movlb	2	; select bank2
  6489  0BC0  033D               	decf	_switchTap_down^(0+256),w
  6490  0BC1  1903               	btfsc	3,2
  6491  0BC2  2C00               	goto	l5676
  6492                           
  6493                           ;SwitchTap.c: 78: switchTap_down = 1;
  6494  0BC3  01BD               	clrf	_switchTap_down^(0+256)
  6495  0BC4  0ABD               	incf	_switchTap_down^(0+256),f
  6496                           
  6497                           ;SwitchTap.c: 79: tap_timer = 0;
  6498  0BC5  3000               	movlw	0
  6499  0BC6  0020               	movlb	0	; select bank0
  6500  0BC7  00CC               	movwf	_tap_timer+3	;volatile
  6501  0BC8  3000               	movlw	0
  6502  0BC9  00CB               	movwf	_tap_timer+2	;volatile
  6503  0BCA  3000               	movlw	0
  6504  0BCB  00CA               	movwf	_tap_timer+1	;volatile
  6505  0BCC  3000               	movlw	0
  6506  0BCD  00C9               	movwf	_tap_timer	;volatile
  6507                           
  6508                           ;SwitchTap.c: 80: tap_iteration = 1;
  6509  0BCE  3001               	movlw	1
  6510  0BCF  0022               	movlb	2	; select bank2
  6511  0BD0  00E1               	movwf	_tap_iteration^(0+256)
  6512  0BD1  3000               	movlw	0
  6513  0BD2  00E2               	movwf	(_tap_iteration^(0+256)+1)
  6514                           
  6515                           ;SwitchTap.c: 81: tap_total = 0;
  6516  0BD3  3000               	movlw	0
  6517  0BD4  0023               	movlb	3	; select bank3
  6518  0BD5  00BB               	movwf	(_tap_total+3)^(0+384)
  6519  0BD6  3000               	movlw	0
  6520  0BD7  00BA               	movwf	(_tap_total+2)^(0+384)
  6521  0BD8  3000               	movlw	0
  6522  0BD9  00B9               	movwf	(_tap_total+1)^(0+384)
  6523  0BDA  3000               	movlw	0
  6524  0BDB  00B8               	movwf	_tap_total^(0+384)
  6525                           
  6526                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6527  0BDC  01E3               	clrf	_delay_time_changed^(0+384)
  6528  0BDD  01E4               	clrf	(_delay_time_changed+1)^(0+384)
  6529                           
  6530                           ;SwitchTap.c: 83: LATDbits.LATD0 = 0;
  6531  0BDE  0022               	movlb	2	; select bank2
  6532  0BDF  100F               	bcf	15,0	;volatile
  6533                           
  6534                           ;SwitchTap.c: 85: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6535  0BE0  0021               	movlb	1	; select bank1
  6536  0BE1  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6537  0BE2  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6538  0BE3                     l5674:	
  6539  0BE3  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6540  0BE4  0020               	movlb	0	; select bank0
  6541  0BE5  0268               	subwf	_num_taps,w
  6542  0BE6  1C03               	btfss	3,0
  6543  0BE7  2C00               	goto	l5676
  6544                           
  6545                           ;SwitchTap.c: 86: tap_history[iCnt] = 0;
  6546  0BE8  0021               	movlb	1	; select bank1
  6547  0BE9  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6548  0BEA  00B6               	movwf	??_updateSwitchTap^(0+128)
  6549  0BEB  3001               	movlw	1
  6550  0BEC                     u6435:	
  6551  0BEC  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6552  0BED  3EFF               	addlw	-1
  6553  0BEE  1D03               	skipz
  6554  0BEF  2BEC               	goto	u6435
  6555  0BF0  3536               	lslf	??_updateSwitchTap^(0+128),w
  6556  0BF1  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6557  0BF2  0086               	movwf	6
  6558  0BF3  3001               	movlw	1	; select bank3/4
  6559  0BF4  0087               	movwf	7
  6560  0BF5  3000               	movlw	0
  6561  0BF6  3FC0               	movwi [0]fsr1
  6562  0BF7  3000               	movlw	0
  6563  0BF8  3FC1               	movwi [1]fsr1
  6564  0BF9  3FC2               	movwi [2]fsr1
  6565  0BFA  3FC3               	movwi [3]fsr1
  6566  0BFB  3001               	movlw	1
  6567  0BFC  00B6               	movwf	??_updateSwitchTap^(0+128)
  6568  0BFD  0836               	movf	??_updateSwitchTap^(0+128),w
  6569  0BFE  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6570  0BFF  2BE3               	goto	l5674
  6571  0C00                     l5676:	
  6572                           
  6573                           ;SwitchTap.c: 87: }
  6574                           ;SwitchTap.c: 88: }
  6575                           ;SwitchTap.c: 91: if (longTap_start == 0) {
  6576  0C00  0020               	movlb	0	; select bank0
  6577  0C01  0855               	movf	_longTap_start,w
  6578  0C02  1D03               	btfss	3,2
  6579  0C03  2C0A               	goto	l5682
  6580                           
  6581                           ;SwitchTap.c: 92: longTap_start = 1;
  6582  0C04  01D5               	clrf	_longTap_start
  6583  0C05  0AD5               	incf	_longTap_start,f
  6584                           
  6585                           ;SwitchTap.c: 93: longTap_state = 0;
  6586  0C06  01E7               	clrf	_longTap_state	;volatile
  6587                           
  6588                           ;SwitchTap.c: 94: longTap_timer = 0;
  6589  0C07  0022               	movlb	2	; select bank2
  6590  0C08  01B2               	clrf	_longTap_timer^(0+256)	;volatile
  6591  0C09  01B3               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6592  0C0A                     l5682:	
  6593                           
  6594                           ;SwitchTap.c: 95: }
  6595                           ;SwitchTap.c: 99: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6596  0C0A  0020               	movlb	0	; select bank0
  6597  0C0B  0863               	movf	_long_press_limit+1,w
  6598  0C0C  0022               	movlb	2	; select bank2
  6599  0C0D  0233               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6600  0C0E  1D03               	skipz
  6601  0C0F  2C14               	goto	u6465
  6602  0C10  0020               	movlb	0	; select bank0
  6603  0C11  0862               	movf	_long_press_limit,w
  6604  0C12  0022               	movlb	2	; select bank2
  6605  0C13  0232               	subwf	_longTap_timer^(0+256),w	;volatile
  6606  0C14                     u6465:	
  6607  0C14  1C03               	skipc
  6608  0C15  0008               	return
  6609  0C16  0020               	movlb	0	; select bank0
  6610  0C17  0867               	movf	_longTap_state,w	;volatile
  6611  0C18  1D03               	btfss	3,2
  6612  0C19  0008               	return
  6613                           
  6614                           ;SwitchTap.c: 101: longTap_timer = long_press_limit;
  6615  0C1A  0863               	movf	_long_press_limit+1,w
  6616  0C1B  0022               	movlb	2	; select bank2
  6617  0C1C  00B3               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6618  0C1D  0020               	movlb	0	; select bank0
  6619  0C1E  0862               	movf	_long_press_limit,w
  6620  0C1F  0022               	movlb	2	; select bank2
  6621  0C20  00B2               	movwf	_longTap_timer^(0+256)	;volatile
  6622                           
  6623                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  6624  0C21  120D               	bcf	13,4	;volatile
  6625                           
  6626                           ;SwitchTap.c: 104: if (feedback_start != 1) {
  6627  0C22  0020               	movlb	0	; select bank0
  6628  0C23  0354               	decf	_feedback_start,w
  6629  0C24  1903               	btfsc	3,2
  6630  0C25  2C2E               	goto	l5694
  6631                           
  6632                           ;SwitchTap.c: 105: setLongTapState(1);
  6633  0C26  3001               	movlw	1
  6634  0C27  0021               	movlb	1	; select bank1
  6635  0C28  00A0               	movwf	setLongTapState@f_state^(0+128)
  6636  0C29  3000               	movlw	0
  6637  0C2A  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6638  0C2B  319D  25CD         	fcall	_setLongTapState
  6639                           
  6640                           ;SwitchTap.c: 106: } else {
  6641  0C2D  0008               	return
  6642  0C2E                     l5694:	
  6643                           
  6644                           ;SwitchTap.c: 107: setDoublePressState(1);
  6645  0C2E  3001               	movlw	1
  6646  0C2F  0021               	movlb	1	; select bank1
  6647  0C30  00B2               	movwf	setDoublePressState@f_state^(0+128)
  6648  0C31  3000               	movlw	0
  6649  0C32  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6650  0C33  319F  2726         	fcall	_setDoublePressState
  6651                           
  6652                           ;SwitchTap.c: 108: }
  6653                           ;SwitchTap.c: 109: }
  6654                           ;SwitchTap.c: 111: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6655  0C35  0008               	return
  6656  0C36                     l5696:	
  6657  0C36  0020               	movlb	0	; select bank0
  6658  0C37  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6659  0C38  2C45               	goto	l5698
  6660  0C39  084C               	movf	_tap_timer+3,w	;volatile
  6661  0C3A  1D03               	btfss	3,2
  6662  0C3B  0008               	return
  6663  0C3C  084B               	movf	_tap_timer+2,w	;volatile
  6664  0C3D  1D03               	btfss	3,2
  6665  0C3E  0008               	return
  6666  0C3F  301B               	movlw	27
  6667  0C40  0249               	subwf	_tap_timer,w	;volatile
  6668  0C41  3006               	movlw	6
  6669  0C42  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6670  0C43  1803               	btfsc	3,0
  6671  0C44  0008               	return
  6672  0C45                     l5698:	
  6673  0C45  0867               	movf	_longTap_state,w	;volatile
  6674  0C46  1D03               	btfss	3,2
  6675  0C47  0008               	return
  6676  0C48  0022               	movlb	2	; select bank2
  6677  0C49  033D               	decf	_switchTap_down^(0+256),w
  6678  0C4A  1903               	btfsc	3,2
  6679  0C4B  0008               	return
  6680                           
  6681                           ;SwitchTap.c: 113: switchTap_down = 1;
  6682  0C4C  01BD               	clrf	_switchTap_down^(0+256)
  6683  0C4D  0ABD               	incf	_switchTap_down^(0+256),f
  6684                           
  6685                           ;SwitchTap.c: 114: if (tap_timer >= 1172) {
  6686  0C4E  0020               	movlb	0	; select bank0
  6687  0C4F  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6688  0C50  2C65               	goto	l1223
  6689  0C51  084C               	movf	_tap_timer+3,w	;volatile
  6690  0C52  1D03               	btfss	3,2
  6691  0C53  2C5D               	goto	l5706
  6692  0C54  084B               	movf	_tap_timer+2,w	;volatile
  6693  0C55  1D03               	btfss	3,2
  6694  0C56  2C5D               	goto	l5706
  6695  0C57  3094               	movlw	148
  6696  0C58  0249               	subwf	_tap_timer,w	;volatile
  6697  0C59  3004               	movlw	4
  6698  0C5A  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6699  0C5B  1C03               	btfss	3,0
  6700  0C5C  2C65               	goto	l1223
  6701  0C5D                     l5706:	
  6702                           
  6703                           ;SwitchTap.c: 115: tap_timer = 1172;
  6704  0C5D  3000               	movlw	0
  6705  0C5E  00CC               	movwf	_tap_timer+3	;volatile
  6706  0C5F  3000               	movlw	0
  6707  0C60  00CB               	movwf	_tap_timer+2	;volatile
  6708  0C61  3004               	movlw	4
  6709  0C62  00CA               	movwf	_tap_timer+1	;volatile
  6710  0C63  3094               	movlw	148
  6711  0C64  00C9               	movwf	_tap_timer	;volatile
  6712  0C65                     l1223:	
  6713                           
  6714                           ;SwitchTap.c: 116: }
  6715                           ;SwitchTap.c: 118: int tapCntDivisor = num_taps;
  6716  0C65  0868               	movf	_num_taps,w
  6717  0C66  0021               	movlb	1	; select bank1
  6718  0C67  00B6               	movwf	??_updateSwitchTap^(0+128)
  6719  0C68  01B7               	clrf	(??_updateSwitchTap^(0+128)+1)
  6720  0C69  0836               	movf	??_updateSwitchTap^(0+128),w
  6721  0C6A  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6722  0C6B  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6723  0C6C  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6724                           
  6725                           ;SwitchTap.c: 119: if (tap_iteration <= num_taps) {
  6726  0C6D  0022               	movlb	2	; select bank2
  6727  0C6E  0862               	movf	(_tap_iteration+1)^(0+256),w
  6728  0C6F  3A80               	xorlw	128
  6729  0C70  3C80               	sublw	128
  6730  0C71  1D03               	skipz
  6731  0C72  2C76               	goto	u6535
  6732  0C73  0861               	movf	_tap_iteration^(0+256),w
  6733  0C74  0020               	movlb	0	; select bank0
  6734  0C75  0268               	subwf	_num_taps,w
  6735  0C76                     u6535:	
  6736  0C76  1C03               	skipc
  6737  0C77  2CA8               	goto	l5714
  6738                           
  6739                           ;SwitchTap.c: 120: tap_total += tap_timer;
  6740  0C78  0020               	movlb	0	; select bank0
  6741  0C79  0849               	movf	_tap_timer,w	;volatile
  6742  0C7A  0023               	movlb	3	; select bank3
  6743  0C7B  07B8               	addwf	_tap_total^(0+384),f
  6744  0C7C  0020               	movlb	0	; select bank0
  6745  0C7D  084A               	movf	_tap_timer+1,w	;volatile
  6746  0C7E  0023               	movlb	3	; select bank3
  6747  0C7F  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6748  0C80  0020               	movlb	0	; select bank0
  6749  0C81  084B               	movf	_tap_timer+2,w	;volatile
  6750  0C82  0023               	movlb	3	; select bank3
  6751  0C83  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6752  0C84  0020               	movlb	0	; select bank0
  6753  0C85  084C               	movf	_tap_timer+3,w	;volatile
  6754  0C86  0023               	movlb	3	; select bank3
  6755  0C87  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6756                           
  6757                           ;SwitchTap.c: 121: tap_history[tap_iteration] = tap_timer;
  6758  0C88  0022               	movlb	2	; select bank2
  6759  0C89  0861               	movf	_tap_iteration^(0+256),w
  6760  0C8A  0021               	movlb	1	; select bank1
  6761  0C8B  00B6               	movwf	??_updateSwitchTap^(0+128)
  6762  0C8C  3001               	movlw	1
  6763  0C8D                     u6545:	
  6764  0C8D  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6765  0C8E  3EFF               	addlw	-1
  6766  0C8F  1D03               	skipz
  6767  0C90  2C8D               	goto	u6545
  6768  0C91  3536               	lslf	??_updateSwitchTap^(0+128),w
  6769  0C92  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6770  0C93  0086               	movwf	6
  6771  0C94  3001               	movlw	1	; select bank3/4
  6772  0C95  0087               	movwf	7
  6773  0C96  0020               	movlb	0	; select bank0
  6774  0C97  0849               	movf	_tap_timer,w	;volatile
  6775  0C98  3FC0               	movwi [0]fsr1
  6776  0C99  084A               	movf	_tap_timer+1,w	;volatile
  6777  0C9A  3FC1               	movwi [1]fsr1
  6778  0C9B  084B               	movf	_tap_timer+2,w	;volatile
  6779  0C9C  3FC2               	movwi [2]fsr1
  6780  0C9D  084C               	movf	_tap_timer+3,w	;volatile
  6781  0C9E  3FC3               	movwi [3]fsr1
  6782                           
  6783                           ;SwitchTap.c: 122: tapCntDivisor = tap_iteration;
  6784  0C9F  0022               	movlb	2	; select bank2
  6785  0CA0  0862               	movf	(_tap_iteration+1)^(0+256),w
  6786  0CA1  0021               	movlb	1	; select bank1
  6787  0CA2  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6788  0CA3  0022               	movlb	2	; select bank2
  6789  0CA4  0861               	movf	_tap_iteration^(0+256),w
  6790  0CA5  0021               	movlb	1	; select bank1
  6791  0CA6  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6792                           
  6793                           ;SwitchTap.c: 123: } else {
  6794  0CA7  2D24               	goto	l5728
  6795  0CA8                     l5714:	
  6796                           
  6797                           ;SwitchTap.c: 124: tap_total = 0;
  6798  0CA8  3000               	movlw	0
  6799  0CA9  0023               	movlb	3	; select bank3
  6800  0CAA  00BB               	movwf	(_tap_total+3)^(0+384)
  6801  0CAB  3000               	movlw	0
  6802  0CAC  00BA               	movwf	(_tap_total+2)^(0+384)
  6803  0CAD  3000               	movlw	0
  6804  0CAE  00B9               	movwf	(_tap_total+1)^(0+384)
  6805  0CAF  3000               	movlw	0
  6806  0CB0  00B8               	movwf	_tap_total^(0+384)
  6807                           
  6808                           ;SwitchTap.c: 125: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6809  0CB1  0021               	movlb	1	; select bank1
  6810  0CB2  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6811  0CB3  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6812  0CB4                     l5722:	
  6813  0CB4  0020               	movlb	0	; select bank0
  6814  0CB5  0868               	movf	_num_taps,w
  6815  0CB6  0021               	movlb	1	; select bank1
  6816  0CB7  023E               	subwf	updateSwitchTap@iCnt^(0+128),w
  6817  0CB8  1803               	btfsc	3,0
  6818  0CB9  2CFE               	goto	l5724
  6819                           
  6820                           ;SwitchTap.c: 126: tap_history[iCnt] = tap_history[iCnt + 1];
  6821  0CBA  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6822  0CBB  00B6               	movwf	??_updateSwitchTap^(0+128)
  6823  0CBC  3001               	movlw	1
  6824  0CBD                     u6555:	
  6825  0CBD  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6826  0CBE  3EFF               	addlw	-1
  6827  0CBF  1D03               	skipz
  6828  0CC0  2CBD               	goto	u6555
  6829  0CC1  3536               	lslf	??_updateSwitchTap^(0+128),w
  6830  0CC2  3E04               	addlw	4
  6831  0CC3  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6832  0CC4  0086               	movwf	6
  6833  0CC5  3001               	movlw	1	; select bank3/4
  6834  0CC6  0087               	movwf	7
  6835  0CC7  3F40               	moviw [0]fsr1
  6836  0CC8  00B7               	movwf	(??_updateSwitchTap+1)^(0+128)
  6837  0CC9  3F41               	moviw [1]fsr1
  6838  0CCA  00B8               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6839  0CCB  3F42               	moviw [2]fsr1
  6840  0CCC  00B9               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  6841  0CCD  3F43               	moviw [3]fsr1
  6842  0CCE  00BA               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  6843  0CCF  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6844  0CD0  00BB               	movwf	(??_updateSwitchTap+5)^(0+128)
  6845  0CD1  3001               	movlw	1
  6846  0CD2                     u6565:	
  6847  0CD2  35BB               	lslf	(??_updateSwitchTap+5)^(0+128),f
  6848  0CD3  3EFF               	addlw	-1
  6849  0CD4  1D03               	skipz
  6850  0CD5  2CD2               	goto	u6565
  6851  0CD6  353B               	lslf	(??_updateSwitchTap+5)^(0+128),w
  6852  0CD7  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6853  0CD8  0086               	movwf	6
  6854  0CD9  3001               	movlw	1	; select bank3/4
  6855  0CDA  0087               	movwf	7
  6856  0CDB  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6857  0CDC  3FC0               	movwi [0]fsr1
  6858  0CDD  0838               	movf	(??_updateSwitchTap+2)^(0+128),w
  6859  0CDE  3FC1               	movwi [1]fsr1
  6860  0CDF  0839               	movf	(??_updateSwitchTap+3)^(0+128),w
  6861  0CE0  3FC2               	movwi [2]fsr1
  6862  0CE1  083A               	movf	(??_updateSwitchTap+4)^(0+128),w
  6863  0CE2  3FC3               	movwi [3]fsr1
  6864                           
  6865                           ;SwitchTap.c: 127: tap_total += tap_history[iCnt];
  6866  0CE3  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6867  0CE4  00B6               	movwf	??_updateSwitchTap^(0+128)
  6868  0CE5  3001               	movlw	1
  6869  0CE6                     u6575:	
  6870  0CE6  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6871  0CE7  3EFF               	addlw	-1
  6872  0CE8  1D03               	skipz
  6873  0CE9  2CE6               	goto	u6575
  6874  0CEA  3536               	lslf	??_updateSwitchTap^(0+128),w
  6875  0CEB  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6876  0CEC  0086               	movwf	6
  6877  0CED  3001               	movlw	1	; select bank3/4
  6878  0CEE  0087               	movwf	7
  6879  0CEF  3F40               	moviw [0]fsr1
  6880  0CF0  0023               	movlb	3	; select bank3
  6881  0CF1  07B8               	addwf	_tap_total^(0+384),f
  6882  0CF2  3F41               	moviw [1]fsr1
  6883  0CF3  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6884  0CF4  3F42               	moviw [2]fsr1
  6885  0CF5  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6886  0CF6  3F43               	moviw [3]fsr1
  6887  0CF7  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6888  0CF8  3001               	movlw	1
  6889  0CF9  0021               	movlb	1	; select bank1
  6890  0CFA  00B6               	movwf	??_updateSwitchTap^(0+128)
  6891  0CFB  0836               	movf	??_updateSwitchTap^(0+128),w
  6892  0CFC  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6893  0CFD  2CB4               	goto	l5722
  6894  0CFE                     l5724:	
  6895                           
  6896                           ;SwitchTap.c: 128: }
  6897                           ;SwitchTap.c: 129: tap_history[num_taps] = tap_timer;
  6898  0CFE  0020               	movlb	0	; select bank0
  6899  0CFF  0868               	movf	_num_taps,w
  6900  0D00  0021               	movlb	1	; select bank1
  6901  0D01  00B6               	movwf	??_updateSwitchTap^(0+128)
  6902  0D02  3001               	movlw	1
  6903  0D03                     u6595:	
  6904  0D03  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6905  0D04  3EFF               	addlw	-1
  6906  0D05  1D03               	skipz
  6907  0D06  2D03               	goto	u6595
  6908  0D07  3536               	lslf	??_updateSwitchTap^(0+128),w
  6909  0D08  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6910  0D09  0086               	movwf	6
  6911  0D0A  3001               	movlw	1	; select bank3/4
  6912  0D0B  0087               	movwf	7
  6913  0D0C  0020               	movlb	0	; select bank0
  6914  0D0D  0849               	movf	_tap_timer,w	;volatile
  6915  0D0E  3FC0               	movwi [0]fsr1
  6916  0D0F  084A               	movf	_tap_timer+1,w	;volatile
  6917  0D10  3FC1               	movwi [1]fsr1
  6918  0D11  084B               	movf	_tap_timer+2,w	;volatile
  6919  0D12  3FC2               	movwi [2]fsr1
  6920  0D13  084C               	movf	_tap_timer+3,w	;volatile
  6921  0D14  3FC3               	movwi [3]fsr1
  6922                           
  6923                           ;SwitchTap.c: 130: tap_total += tap_timer;
  6924  0D15  0849               	movf	_tap_timer,w	;volatile
  6925  0D16  0023               	movlb	3	; select bank3
  6926  0D17  07B8               	addwf	_tap_total^(0+384),f
  6927  0D18  0020               	movlb	0	; select bank0
  6928  0D19  084A               	movf	_tap_timer+1,w	;volatile
  6929  0D1A  0023               	movlb	3	; select bank3
  6930  0D1B  3DB9               	addwfc	(_tap_total+1)^(0+384),f
  6931  0D1C  0020               	movlb	0	; select bank0
  6932  0D1D  084B               	movf	_tap_timer+2,w	;volatile
  6933  0D1E  0023               	movlb	3	; select bank3
  6934  0D1F  3DBA               	addwfc	(_tap_total+2)^(0+384),f
  6935  0D20  0020               	movlb	0	; select bank0
  6936  0D21  084C               	movf	_tap_timer+3,w	;volatile
  6937  0D22  0023               	movlb	3	; select bank3
  6938  0D23  3DBB               	addwfc	(_tap_total+3)^(0+384),f
  6939  0D24                     l5728:	
  6940                           
  6941                           ;SwitchTap.c: 131: }
  6942                           ;SwitchTap.c: 133: baseline_delay_time = tap_total / tapCntDivisor;
  6943  0D24  0021               	movlb	1	; select bank1
  6944  0D25  083C               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  6945  0D26  00A0               	movwf	___aldiv@divisor^(0+128)
  6946  0D27  083D               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  6947  0D28  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  6948  0D29  0D89               	rlf	9,f
  6949  0D2A  3B89               	subwfb	9,f
  6950  0D2B  0989               	comf	9,f
  6951  0D2C  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  6952  0D2D  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  6953  0D2E  0023               	movlb	3	; select bank3
  6954  0D2F  083B               	movf	(_tap_total+3)^(0+384),w
  6955  0D30  0021               	movlb	1	; select bank1
  6956  0D31  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6957  0D32  0023               	movlb	3	; select bank3
  6958  0D33  083A               	movf	(_tap_total+2)^(0+384),w
  6959  0D34  0021               	movlb	1	; select bank1
  6960  0D35  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6961  0D36  0023               	movlb	3	; select bank3
  6962  0D37  0839               	movf	(_tap_total+1)^(0+384),w
  6963  0D38  0021               	movlb	1	; select bank1
  6964  0D39  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6965  0D3A  0023               	movlb	3	; select bank3
  6966  0D3B  0838               	movf	_tap_total^(0+384),w
  6967  0D3C  0021               	movlb	1	; select bank1
  6968  0D3D  00A4               	movwf	___aldiv@dividend^(0+128)
  6969  0D3E  3195  25AB         	fcall	___aldiv
  6970  0D40  0021               	movlb	1	; select bank1
  6971  0D41  0823               	movf	(?___aldiv+3)^(0+128),w
  6972  0D42  0020               	movlb	0	; select bank0
  6973  0D43  00DB               	movwf	_baseline_delay_time+3	;volatile
  6974  0D44  0021               	movlb	1	; select bank1
  6975  0D45  0822               	movf	(?___aldiv+2)^(0+128),w
  6976  0D46  0020               	movlb	0	; select bank0
  6977  0D47  00DA               	movwf	_baseline_delay_time+2	;volatile
  6978  0D48  0021               	movlb	1	; select bank1
  6979  0D49  0821               	movf	(?___aldiv+1)^(0+128),w
  6980  0D4A  0020               	movlb	0	; select bank0
  6981  0D4B  00D9               	movwf	_baseline_delay_time+1	;volatile
  6982  0D4C  0021               	movlb	1	; select bank1
  6983  0D4D  0820               	movf	?___aldiv^(0+128),w
  6984  0D4E  0020               	movlb	0	; select bank0
  6985  0D4F  00D8               	movwf	_baseline_delay_time	;volatile
  6986                           
  6987                           ;SwitchTap.c: 134: delay_time_changed = 1;
  6988  0D50  3001               	movlw	1
  6989  0D51  0023               	movlb	3	; select bank3
  6990  0D52  00E3               	movwf	_delay_time_changed^(0+384)
  6991  0D53  3000               	movlw	0
  6992  0D54  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  6993                           
  6994                           ;SwitchTap.c: 135: tap_timer = 0;
  6995  0D55  3000               	movlw	0
  6996  0D56  0020               	movlb	0	; select bank0
  6997  0D57  00CC               	movwf	_tap_timer+3	;volatile
  6998  0D58  3000               	movlw	0
  6999  0D59  00CB               	movwf	_tap_timer+2	;volatile
  7000  0D5A  3000               	movlw	0
  7001  0D5B  00CA               	movwf	_tap_timer+1	;volatile
  7002  0D5C  3000               	movlw	0
  7003  0D5D  00C9               	movwf	_tap_timer	;volatile
  7004                           
  7005                           ;SwitchTap.c: 137: tap_iteration++;
  7006  0D5E  3001               	movlw	1
  7007  0D5F  0022               	movlb	2	; select bank2
  7008  0D60  07E1               	addwf	_tap_iteration^(0+256),f
  7009  0D61  3000               	movlw	0
  7010  0D62  3DE2               	addwfc	(_tap_iteration+1)^(0+256),f
  7011                           
  7012                           ;SwitchTap.c: 138: }
  7013                           ;SwitchTap.c: 140: } else if (switchTap_pressed >= 25) {
  7014  0D63  0008               	return
  7015  0D64                     l5736:	
  7016  0D64  3019               	movlw	25
  7017  0D65  0020               	movlb	0	; select bank0
  7018  0D66  0257               	subwf	_switchTap_pressed,w
  7019  0D67  1C03               	skipc
  7020  0D68  0008               	return
  7021                           
  7022                           ;SwitchTap.c: 141: switchTap_down = 0;
  7023  0D69  0022               	movlb	2	; select bank2
  7024  0D6A  01BD               	clrf	_switchTap_down^(0+256)
  7025                           
  7026                           ;SwitchTap.c: 142: switchTap_state = 0;
  7027  0D6B  01E5               	clrf	_switchTap_state^(0+256)
  7028                           
  7029                           ;SwitchTap.c: 148: setLongTapState(0);
  7030  0D6C  3000               	movlw	0
  7031  0D6D  0021               	movlb	1	; select bank1
  7032  0D6E  00A0               	movwf	setLongTapState@f_state^(0+128)
  7033  0D6F  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  7034  0D70  319D  25CD         	fcall	_setLongTapState
  7035                           
  7036                           ;SwitchTap.c: 150: longTap_timer = 0;
  7037  0D72  0022               	movlb	2	; select bank2
  7038  0D73  01B2               	clrf	_longTap_timer^(0+256)	;volatile
  7039  0D74  01B3               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7040                           
  7041                           ;SwitchTap.c: 151: longTap_start = 0;
  7042  0D75  0020               	movlb	0	; select bank0
  7043  0D76  01D5               	clrf	_longTap_start
  7044                           
  7045                           ;SwitchTap.c: 153: switchTap_pressed = 25;
  7046  0D77  3019               	movlw	25
  7047  0D78  0021               	movlb	1	; select bank1
  7048  0D79  00B6               	movwf	??_updateSwitchTap^(0+128)
  7049  0D7A  0836               	movf	??_updateSwitchTap^(0+128),w
  7050  0D7B  0020               	movlb	0	; select bank0
  7051  0D7C  00D7               	movwf	_switchTap_pressed
  7052  0D7D  0008               	return
  7053  0D7E                     __end_of_updateSwitchTap:	
  7054                           
  7055                           	psect	text3
  7056  1DCD                     __ptext3:	
  7057 ;; *************** function _setLongTapState *****************
  7058 ;; Defined at:
  7059 ;;		line 168 in file "SwitchTap.c"
  7060 ;; Parameters:    Size  Location     Type
  7061 ;;  f_state         2    0[BANK1 ] int 
  7062 ;; Auto vars:     Size  Location     Type
  7063 ;;		None
  7064 ;; Return value:  Size  Location     Type
  7065 ;;                  1    wreg      void 
  7066 ;; Registers used:
  7067 ;;		wreg, status,0
  7068 ;; Tracked objects:
  7069 ;;		On entry : 0/0
  7070 ;;		On exit  : 0/0
  7071 ;;		Unchanged: 0/0
  7072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7073 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7075 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7076 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7077 ;;Total ram usage:        4 bytes
  7078 ;; Hardware stack levels used:    1
  7079 ;; Hardware stack levels required when called:    3
  7080 ;; This function calls:
  7081 ;;		Nothing
  7082 ;; This function is called by:
  7083 ;;		_updateSwitchTap
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           
  7088                           ;psect for function _setLongTapState
  7089  1DCD                     _setLongTapState:	
  7090                           
  7091                           ;SwitchTap.c: 169: if (longTap_state == f_state) {return;}
  7092                           
  7093                           ;incstack = 0
  7094                           ; Regs used in _setLongTapState: [wreg+status,0]
  7095  1DCD  0020               	movlb	0	; select bank0
  7096  1DCE  0867               	movf	_longTap_state,w	;volatile
  7097  1DCF  0021               	movlb	1	; select bank1
  7098  1DD0  00A2               	movwf	??_setLongTapState^(0+128)
  7099  1DD1  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  7100  1DD2  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  7101  1DD3  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  7102  1DD4  1D03               	skipz
  7103  1DD5  2DD8               	goto	u5275
  7104  1DD6  0820               	movf	setLongTapState@f_state^(0+128),w
  7105  1DD7  0622               	xorwf	??_setLongTapState^(0+128),w
  7106  1DD8                     u5275:	
  7107  1DD8  1903               	btfsc	3,2
  7108  1DD9  0008               	return
  7109                           
  7110                           ;SwitchTap.c: 170: longTap_state = f_state;
  7111  1DDA  0820               	movf	setLongTapState@f_state^(0+128),w
  7112  1DDB  00A2               	movwf	??_setLongTapState^(0+128)
  7113  1DDC  0822               	movf	??_setLongTapState^(0+128),w
  7114  1DDD  0020               	movlb	0	; select bank0
  7115  1DDE  00E7               	movwf	_longTap_state	;volatile
  7116                           
  7117                           ;SwitchTap.c: 171: LATBbits.LATB5 = f_state;
  7118  1DDF  0021               	movlb	1	; select bank1
  7119  1DE0  0C20               	rrf	setLongTapState@f_state^(0+128),w
  7120  1DE1  0022               	movlb	2	; select bank2
  7121  1DE2  1C03               	skipc
  7122  1DE3  128D               	bcf	13,5	;volatile
  7123  1DE4  1803               	skipnc
  7124  1DE5  168D               	bsf	13,5	;volatile
  7125  1DE6  0008               	return
  7126  1DE7                     __end_of_setLongTapState:	
  7127                           
  7128                           	psect	text4
  7129  15AB                     __ptext4:	
  7130 ;; *************** function ___aldiv *****************
  7131 ;; Defined at:
  7132 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  7133 ;; Parameters:    Size  Location     Type
  7134 ;;  divisor         4    0[BANK1 ] long 
  7135 ;;  dividend        4    4[BANK1 ] long 
  7136 ;; Auto vars:     Size  Location     Type
  7137 ;;  quotient        4   11[BANK1 ] long 
  7138 ;;  sign            1   10[BANK1 ] unsigned char 
  7139 ;;  counter         1    9[BANK1 ] unsigned char 
  7140 ;; Return value:  Size  Location     Type
  7141 ;;                  4    0[BANK1 ] long 
  7142 ;; Registers used:
  7143 ;;		wreg, status,2, status,0
  7144 ;; Tracked objects:
  7145 ;;		On entry : 0/0
  7146 ;;		On exit  : 0/0
  7147 ;;		Unchanged: 0/0
  7148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7149 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7150 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7151 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7152 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7153 ;;Total ram usage:       15 bytes
  7154 ;; Hardware stack levels used:    1
  7155 ;; Hardware stack levels required when called:    3
  7156 ;; This function calls:
  7157 ;;		Nothing
  7158 ;; This function is called by:
  7159 ;;		_updateSwitchTap
  7160 ;; This function uses a non-reentrant model
  7161 ;;
  7162                           
  7163                           
  7164                           ;psect for function ___aldiv
  7165  15AB                     ___aldiv:	
  7166                           
  7167                           ;incstack = 0
  7168                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  7169  15AB  0021               	movlb	1	; select bank1
  7170  15AC  01AA               	clrf	___aldiv@sign^(0+128)
  7171  15AD  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  7172  15AE  2DBC               	goto	l1377
  7173  15AF  09A0               	comf	___aldiv@divisor^(0+128),f
  7174  15B0  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  7175  15B1  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  7176  15B2  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  7177  15B3  0AA0               	incf	___aldiv@divisor^(0+128),f
  7178  15B4  1903               	skipnz
  7179  15B5  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  7180  15B6  1903               	skipnz
  7181  15B7  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  7182  15B8  1903               	skipnz
  7183  15B9  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  7184  15BA  01AA               	clrf	___aldiv@sign^(0+128)
  7185  15BB  0AAA               	incf	___aldiv@sign^(0+128),f
  7186  15BC                     l1377:	
  7187  15BC  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  7188  15BD  2DCD               	goto	l5156
  7189  15BE  09A4               	comf	___aldiv@dividend^(0+128),f
  7190  15BF  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  7191  15C0  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  7192  15C1  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  7193  15C2  0AA4               	incf	___aldiv@dividend^(0+128),f
  7194  15C3  1903               	skipnz
  7195  15C4  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  7196  15C5  1903               	skipnz
  7197  15C6  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  7198  15C7  1903               	skipnz
  7199  15C8  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  7200  15C9  3001               	movlw	1
  7201  15CA  00A8               	movwf	??___aldiv^(0+128)
  7202  15CB  0828               	movf	??___aldiv^(0+128),w
  7203  15CC  06AA               	xorwf	___aldiv@sign^(0+128),f
  7204  15CD                     l5156:	
  7205  15CD  3000               	movlw	0
  7206  15CE  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  7207  15CF  3000               	movlw	0
  7208  15D0  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  7209  15D1  3000               	movlw	0
  7210  15D2  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  7211  15D3  3000               	movlw	0
  7212  15D4  00AB               	movwf	___aldiv@quotient^(0+128)
  7213  15D5  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7214  15D6  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  7215  15D7  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  7216  15D8  0420               	iorwf	___aldiv@divisor^(0+128),w
  7217  15D9  1903               	skipnz
  7218  15DA  2E16               	goto	l5178
  7219  15DB  01A9               	clrf	___aldiv@counter^(0+128)
  7220  15DC  0AA9               	incf	___aldiv@counter^(0+128),f
  7221  15DD                     l5164:	
  7222  15DD  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  7223  15DE  2DEB               	goto	l5166
  7224  15DF  3001               	movlw	1
  7225  15E0                     u5315:	
  7226  15E0  35A0               	lslf	___aldiv@divisor^(0+128),f
  7227  15E1  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  7228  15E2  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  7229  15E3  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  7230  15E4  0B89               	decfsz	9,f
  7231  15E5  2DE0               	goto	u5315
  7232  15E6  3001               	movlw	1
  7233  15E7  00A8               	movwf	??___aldiv^(0+128)
  7234  15E8  0828               	movf	??___aldiv^(0+128),w
  7235  15E9  07A9               	addwf	___aldiv@counter^(0+128),f
  7236  15EA  2DDD               	goto	l5164
  7237  15EB                     l5166:	
  7238  15EB  3001               	movlw	1
  7239  15EC                     u5335:	
  7240  15EC  35AB               	lslf	___aldiv@quotient^(0+128),f
  7241  15ED  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  7242  15EE  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  7243  15EF  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  7244  15F0  0B89               	decfsz	9,f
  7245  15F1  2DEC               	goto	u5335
  7246  15F2  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7247  15F3  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  7248  15F4  1D03               	skipz
  7249  15F5  2E00               	goto	u5345
  7250  15F6  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7251  15F7  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  7252  15F8  1D03               	skipz
  7253  15F9  2E00               	goto	u5345
  7254  15FA  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7255  15FB  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  7256  15FC  1D03               	skipz
  7257  15FD  2E00               	goto	u5345
  7258  15FE  0820               	movf	___aldiv@divisor^(0+128),w
  7259  15FF  0224               	subwf	___aldiv@dividend^(0+128),w
  7260  1600                     u5345:	
  7261  1600  1C03               	skipc
  7262  1601  2E0B               	goto	l5174
  7263  1602  0820               	movf	___aldiv@divisor^(0+128),w
  7264  1603  02A4               	subwf	___aldiv@dividend^(0+128),f
  7265  1604  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  7266  1605  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  7267  1606  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7268  1607  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7269  1608  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7270  1609  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7271  160A  142B               	bsf	___aldiv@quotient^(0+128),0
  7272  160B                     l5174:	
  7273  160B  3001               	movlw	1
  7274  160C                     u5355:	
  7275  160C  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7276  160D  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7277  160E  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7278  160F  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7279  1610  0B89               	decfsz	9,f
  7280  1611  2E0C               	goto	u5355
  7281  1612  3001               	movlw	1
  7282  1613  02A9               	subwf	___aldiv@counter^(0+128),f
  7283  1614  1D03               	btfss	3,2
  7284  1615  2DEB               	goto	l5166
  7285  1616                     l5178:	
  7286  1616  082A               	movf	___aldiv@sign^(0+128),w
  7287  1617  1903               	btfsc	3,2
  7288  1618  2E24               	goto	l5182
  7289  1619  09AB               	comf	___aldiv@quotient^(0+128),f
  7290  161A  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7291  161B  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7292  161C  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7293  161D  0AAB               	incf	___aldiv@quotient^(0+128),f
  7294  161E  1903               	skipnz
  7295  161F  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7296  1620  1903               	skipnz
  7297  1621  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7298  1622  1903               	skipnz
  7299  1623  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7300  1624                     l5182:	
  7301  1624  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7302  1625  00A3               	movwf	(?___aldiv+3)^(0+128)
  7303  1626  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7304  1627  00A2               	movwf	(?___aldiv+2)^(0+128)
  7305  1628  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7306  1629  00A1               	movwf	(?___aldiv+1)^(0+128)
  7307  162A  082B               	movf	___aldiv@quotient^(0+128),w
  7308  162B  00A0               	movwf	?___aldiv^(0+128)
  7309  162C  0008               	return
  7310  162D                     __end_of___aldiv:	
  7311                           
  7312                           	psect	text5
  7313  09B8                     __ptext5:	
  7314 ;; *************** function _updateSwitchBypass *****************
  7315 ;; Defined at:
  7316 ;;		line 34 in file "SwitchBypass.c"
  7317 ;; Parameters:    Size  Location     Type
  7318 ;;		None
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0, pclath, cstack
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7332 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7333 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7334 ;;Total ram usage:        2 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    6
  7337 ;; This function calls:
  7338 ;;		_setDoublePressState
  7339 ;;		_setFeedbackState
  7340 ;;		_setSwitchBypassState
  7341 ;; This function is called by:
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           
  7347                           ;psect for function _updateSwitchBypass
  7348  09B8                     _updateSwitchBypass:	
  7349                           
  7350                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7354  09B8  0020               	movlb	0	; select bank0
  7355  09B9  1890               	btfsc	16,1	;volatile
  7356  09BA  29CE               	goto	l5564
  7357                           
  7358                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7359  09BB  0022               	movlb	2	; select bank2
  7360  09BC  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7361  09BD  3A80               	xorlw	128
  7362  09BE  0021               	movlb	1	; select bank1
  7363  09BF  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7364  09C0  3080               	movlw	128
  7365  09C1  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7366  09C2  1D03               	skipz
  7367  09C3  29C7               	goto	u6175
  7368  09C4  3001               	movlw	1
  7369  09C5  0022               	movlb	2	; select bank2
  7370  09C6  0234               	subwf	_switchBypass_pressed^(0+256),w
  7371  09C7                     u6175:	
  7372  09C7  1C03               	skipc
  7373  09C8  29E1               	goto	l5568
  7374                           
  7375                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7376  09C9  30FF               	movlw	255
  7377  09CA  0022               	movlb	2	; select bank2
  7378  09CB  07B4               	addwf	_switchBypass_pressed^(0+256),f
  7379  09CC  30FF               	movlw	255
  7380  09CD  29E0               	goto	L2
  7381  09CE                     l5564:	
  7382                           ;SwitchBypass.c: 44: }
  7383                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7384                           
  7385  09CE  0022               	movlb	2	; select bank2
  7386  09CF  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7387  09D0  3A80               	xorlw	128
  7388  09D1  0021               	movlb	1	; select bank1
  7389  09D2  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7390  09D3  3080               	movlw	128
  7391  09D4  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7392  09D5  1D03               	skipz
  7393  09D6  29DA               	goto	u6185
  7394  09D7  3019               	movlw	25
  7395  09D8  0022               	movlb	2	; select bank2
  7396  09D9  0234               	subwf	_switchBypass_pressed^(0+256),w
  7397  09DA                     u6185:	
  7398  09DA  1803               	skipnc
  7399  09DB  29E1               	goto	l5568
  7400                           
  7401                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7402  09DC  3001               	movlw	1
  7403  09DD  0022               	movlb	2	; select bank2
  7404  09DE  07B4               	addwf	_switchBypass_pressed^(0+256),f
  7405  09DF  3000               	movlw	0
  7406  09E0                     L2:	
  7407  09E0  3DB5               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7408  09E1                     l5568:	
  7409                           
  7410                           ;SwitchBypass.c: 47: }
  7411                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7412  09E1  0022               	movlb	2	; select bank2
  7413  09E2  0834               	movf	_switchBypass_pressed^(0+256),w
  7414  09E3  0435               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7415  09E4  1D03               	btfss	3,2
  7416  09E5  2A42               	goto	l5608
  7417                           
  7418                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7419  09E6  0020               	movlb	0	; select bank0
  7420  09E7  0854               	movf	_feedback_start,w
  7421  09E8  1D03               	btfss	3,2
  7422  09E9  29EF               	goto	l5576
  7423                           
  7424                           ;SwitchBypass.c: 57: feedback_start = 1;
  7425  09EA  01D4               	clrf	_feedback_start
  7426  09EB  0AD4               	incf	_feedback_start,f
  7427                           
  7428                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7429  09EC  0022               	movlb	2	; select bank2
  7430  09ED  01A6               	clrf	_feedback_timer^(0+256)	;volatile
  7431  09EE  01A7               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7432  09EF                     l5576:	
  7433                           
  7434                           ;SwitchBypass.c: 59: }
  7435                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7436  09EF  0020               	movlb	0	; select bank0
  7437  09F0  0863               	movf	_long_press_limit+1,w
  7438  09F1  0022               	movlb	2	; select bank2
  7439  09F2  0227               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7440  09F3  1D03               	skipz
  7441  09F4  29F9               	goto	u6215
  7442  09F5  0020               	movlb	0	; select bank0
  7443  09F6  0862               	movf	_long_press_limit,w
  7444  09F7  0022               	movlb	2	; select bank2
  7445  09F8  0226               	subwf	_feedback_timer^(0+256),w	;volatile
  7446  09F9                     u6215:	
  7447  09F9  1C03               	skipc
  7448  09FA  2A19               	goto	l5590
  7449  09FB  0020               	movlb	0	; select bank0
  7450  09FC  0866               	movf	_feedback_state,w	;volatile
  7451  09FD  1D03               	btfss	3,2
  7452  09FE  2A19               	goto	l5590
  7453  09FF  0853               	movf	_doubleTap_state,w	;volatile
  7454  0A00  1D03               	btfss	3,2
  7455  0A01  2A19               	goto	l5590
  7456                           
  7457                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7458  0A02  0022               	movlb	2	; select bank2
  7459  0A03  110D               	bcf	13,2	;volatile
  7460                           
  7461                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7462  0A04  0020               	movlb	0	; select bank0
  7463  0A05  0355               	decf	_longTap_start,w
  7464  0A06  1903               	btfsc	3,2
  7465  0A07  2A11               	goto	l5588
  7466                           
  7467                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7468  0A08  3001               	movlw	1
  7469  0A09  0021               	movlb	1	; select bank1
  7470  0A0A  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7471  0A0B  3000               	movlw	0
  7472  0A0C  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7473  0A0D  319D  25B3  3189   	fcall	_setFeedbackState
  7474                           
  7475                           ;SwitchBypass.c: 67: } else {
  7476  0A10  2A19               	goto	l5590
  7477  0A11                     l5588:	
  7478                           
  7479                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7480  0A11  3001               	movlw	1
  7481  0A12  0021               	movlb	1	; select bank1
  7482  0A13  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7483  0A14  3000               	movlw	0
  7484  0A15  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7485  0A16  319F  2726  3189   	fcall	_setDoublePressState
  7486  0A19                     l5590:	
  7487                           
  7488                           ;SwitchBypass.c: 69: }
  7489                           ;SwitchBypass.c: 70: }
  7490                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7491  0A19  0020               	movlb	0	; select bank0
  7492  0A1A  0853               	movf	_doubleTap_state,w	;volatile
  7493  0A1B  1D03               	btfss	3,2
  7494  0A1C  2A3E               	goto	l1083
  7495  0A1D  0866               	movf	_feedback_state,w	;volatile
  7496  0A1E  1D03               	btfss	3,2
  7497  0A1F  2A3E               	goto	l1083
  7498                           
  7499                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7500  0A20  0369               	decf	_switchBypass_state,w
  7501  0A21  1D03               	btfss	3,2
  7502  0A22  2A31               	goto	l5602
  7503                           
  7504                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7505  0A23  0023               	movlb	3	; select bank3
  7506  0A24  0367               	decf	_switchBypass_up^(0+384),w
  7507  0A25  0468               	iorwf	(_switchBypass_up+1)^(0+384),w
  7508  0A26  1D03               	btfss	3,2
  7509  0A27  2A3E               	goto	l1083
  7510                           
  7511                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7512  0A28  0022               	movlb	2	; select bank2
  7513  0A29  01E4               	clrf	_currentBypassState^(0+256)
  7514  0A2A  0AE4               	incf	_currentBypassState^(0+256),f
  7515                           
  7516                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7517  0A2B  3001               	movlw	1
  7518  0A2C  0023               	movlb	3	; select bank3
  7519  0A2D  00D2               	movwf	_switchBypass_toggle^(0+384)
  7520  0A2E  3000               	movlw	0
  7521  0A2F  00D3               	movwf	(_switchBypass_toggle^(0+384)+1)
  7522                           
  7523                           ;SwitchBypass.c: 78: }
  7524                           ;SwitchBypass.c: 93: } else {
  7525  0A30  2A3E               	goto	l1083
  7526  0A31                     l5602:	
  7527                           
  7528                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7529  0A31  0022               	movlb	2	; select bank2
  7530  0A32  0337               	decf	_bypass_turning_on^(0+256),w
  7531  0A33  1903               	btfsc	3,2
  7532  0A34  2A3E               	goto	l1083
  7533                           
  7534                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7535  0A35  01E4               	clrf	_currentBypassState^(0+256)
  7536                           
  7537                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7538  0A36  01B7               	clrf	_bypass_turning_on^(0+256)
  7539  0A37  0AB7               	incf	_bypass_turning_on^(0+256),f
  7540                           
  7541                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7542  0A38  0023               	movlb	3	; select bank3
  7543  0A39  01D2               	clrf	_switchBypass_toggle^(0+384)
  7544  0A3A  01D3               	clrf	(_switchBypass_toggle+1)^(0+384)
  7545                           
  7546                           ;SwitchBypass.c: 101: feedback_state = 0;
  7547  0A3B  0020               	movlb	0	; select bank0
  7548  0A3C  01E6               	clrf	_feedback_state	;volatile
  7549                           
  7550                           ;SwitchBypass.c: 102: feedback_start = 0;
  7551  0A3D  01D4               	clrf	_feedback_start
  7552  0A3E                     l1083:	
  7553                           
  7554                           ;SwitchBypass.c: 103: }
  7555                           ;SwitchBypass.c: 104: }
  7556                           ;SwitchBypass.c: 106: }
  7557                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7558  0A3E  0023               	movlb	3	; select bank3
  7559  0A3F  01E7               	clrf	_switchBypass_up^(0+384)
  7560  0A40  01E8               	clrf	(_switchBypass_up+1)^(0+384)
  7561                           
  7562                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7563  0A41  0008               	return
  7564  0A42                     l5608:	
  7565  0A42  0022               	movlb	2	; select bank2
  7566  0A43  0835               	movf	(_switchBypass_pressed+1)^(0+256),w
  7567  0A44  3A80               	xorlw	128
  7568  0A45  0021               	movlb	1	; select bank1
  7569  0A46  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7570  0A47  3080               	movlw	128
  7571  0A48  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7572  0A49  1D03               	skipz
  7573  0A4A  2A4E               	goto	u6305
  7574  0A4B  3019               	movlw	25
  7575  0A4C  0022               	movlb	2	; select bank2
  7576  0A4D  0234               	subwf	_switchBypass_pressed^(0+256),w
  7577  0A4E                     u6305:	
  7578  0A4E  1C03               	skipc
  7579  0A4F  0008               	return
  7580                           
  7581                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7582  0A50  0020               	movlb	0	; select bank0
  7583  0A51  0353               	decf	_doubleTap_state,w	;volatile
  7584  0A52  1D03               	btfss	3,2
  7585  0A53  2A5D               	goto	l5614
  7586                           
  7587                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7588  0A54  0022               	movlb	2	; select bank2
  7589  0A55  0864               	movf	_currentBypassState^(0+256),w
  7590  0A56  0021               	movlb	1	; select bank1
  7591  0A57  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7592  0A58  01B7               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7593  0A59  0836               	movf	??_updateSwitchBypass^(0+128),w
  7594  0A5A  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7595  0A5B  0837               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7596  0A5C  2A7A               	goto	L3
  7597  0A5D                     l5614:	
  7598                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7599                           
  7600  0A5D  0022               	movlb	2	; select bank2
  7601  0A5E  0337               	decf	_bypass_turning_on^(0+256),w
  7602  0A5F  1903               	btfsc	3,2
  7603  0A60  2A65               	goto	l5618
  7604  0A61  0020               	movlb	0	; select bank0
  7605  0A62  0366               	decf	_feedback_state,w	;volatile
  7606  0A63  1D03               	btfss	3,2
  7607  0A64  2A6B               	goto	l5620
  7608  0A65                     l5618:	
  7609                           
  7610                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7611  0A65  3001               	movlw	1
  7612  0A66  0021               	movlb	1	; select bank1
  7613  0A67  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7614  0A68  3000               	movlw	0
  7615  0A69  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7616  0A6A  2A7B               	goto	L4
  7617  0A6B                     l5620:	
  7618                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7619                           
  7620  0A6B  0023               	movlb	3	; select bank3
  7621  0A6C  0352               	decf	_switchBypass_toggle^(0+384),w
  7622  0A6D  0453               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7623  0A6E  1D03               	btfss	3,2
  7624  0A6F  2A7E               	goto	l5628
  7625  0A70  0020               	movlb	0	; select bank0
  7626  0A71  0866               	movf	_feedback_state,w	;volatile
  7627  0A72  1D03               	btfss	3,2
  7628  0A73  2A7E               	goto	l5628
  7629  0A74  0853               	movf	_doubleTap_state,w	;volatile
  7630  0A75  1D03               	btfss	3,2
  7631  0A76  2A7E               	goto	l5628
  7632                           
  7633                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7634  0A77  3000               	movlw	0
  7635  0A78  0021               	movlb	1	; select bank1
  7636  0A79  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7637  0A7A                     L3:	
  7638  0A7A  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7639  0A7B                     L4:	
  7640  0A7B  3192  2250  3189   	fcall	_setSwitchBypassState
  7641  0A7E                     l5628:	
  7642                           
  7643                           ;SwitchBypass.c: 115: }
  7644                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7645  0A7E  0020               	movlb	0	; select bank0
  7646  0A7F  0C69               	rrf	_switchBypass_state,w
  7647  0A80  0022               	movlb	2	; select bank2
  7648  0A81  1C03               	skipc
  7649  0A82  110D               	bcf	13,2	;volatile
  7650  0A83  1803               	skipnc
  7651  0A84  150D               	bsf	13,2	;volatile
  7652                           
  7653                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7654  0A85  3000               	movlw	0
  7655  0A86  0021               	movlb	1	; select bank1
  7656  0A87  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7657  0A88  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7658  0A89  319D  25B3  3189   	fcall	_setFeedbackState
  7659                           
  7660                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7661  0A8C  3000               	movlw	0
  7662  0A8D  0021               	movlb	1	; select bank1
  7663  0A8E  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7664  0A8F  00B3               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7665  0A90  319F  2726         	fcall	_setDoublePressState
  7666                           
  7667                           ;SwitchBypass.c: 122: feedback_start = 0;
  7668  0A92  0020               	movlb	0	; select bank0
  7669  0A93  01D4               	clrf	_feedback_start
  7670                           
  7671                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7672  0A94  0022               	movlb	2	; select bank2
  7673  0A95  01B7               	clrf	_bypass_turning_on^(0+256)
  7674                           
  7675                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7676  0A96  0023               	movlb	3	; select bank3
  7677  0A97  01D2               	clrf	_switchBypass_toggle^(0+384)
  7678  0A98  01D3               	clrf	(_switchBypass_toggle+1)^(0+384)
  7679                           
  7680                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7681  0A99  3001               	movlw	1
  7682  0A9A  00E7               	movwf	_switchBypass_up^(0+384)
  7683  0A9B  3000               	movlw	0
  7684  0A9C  00E8               	movwf	(_switchBypass_up^(0+384)+1)
  7685                           
  7686                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7687  0A9D  3019               	movlw	25
  7688  0A9E  0022               	movlb	2	; select bank2
  7689  0A9F  00B4               	movwf	_switchBypass_pressed^(0+256)
  7690  0AA0  3000               	movlw	0
  7691  0AA1  00B5               	movwf	(_switchBypass_pressed^(0+256)+1)
  7692  0AA2  0008               	return
  7693  0AA3                     __end_of_updateSwitchBypass:	
  7694                           
  7695                           	psect	text6
  7696  1DB3                     __ptext6:	
  7697 ;; *************** function _setFeedbackState *****************
  7698 ;; Defined at:
  7699 ;;		line 151 in file "SwitchBypass.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  f_state         2    0[BANK1 ] int 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;		None
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  1    wreg      void 
  7706 ;; Registers used:
  7707 ;;		wreg, status,0
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7713 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7715 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7716 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7717 ;;Total ram usage:        4 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    3
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_updateSwitchBypass
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           
  7728                           ;psect for function _setFeedbackState
  7729  1DB3                     _setFeedbackState:	
  7730                           
  7731                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7732                           
  7733                           ;incstack = 0
  7734                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7735  1DB3  0020               	movlb	0	; select bank0
  7736  1DB4  0866               	movf	_feedback_state,w	;volatile
  7737  1DB5  0021               	movlb	1	; select bank1
  7738  1DB6  00A2               	movwf	??_setFeedbackState^(0+128)
  7739  1DB7  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7740  1DB8  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7741  1DB9  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7742  1DBA  1D03               	skipz
  7743  1DBB  2DBE               	goto	u5245
  7744  1DBC  0820               	movf	setFeedbackState@f_state^(0+128),w
  7745  1DBD  0622               	xorwf	??_setFeedbackState^(0+128),w
  7746  1DBE                     u5245:	
  7747  1DBE  1903               	btfsc	3,2
  7748  1DBF  0008               	return
  7749                           
  7750                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7751  1DC0  0820               	movf	setFeedbackState@f_state^(0+128),w
  7752  1DC1  00A2               	movwf	??_setFeedbackState^(0+128)
  7753  1DC2  0822               	movf	??_setFeedbackState^(0+128),w
  7754  1DC3  0020               	movlb	0	; select bank0
  7755  1DC4  00E6               	movwf	_feedback_state	;volatile
  7756                           
  7757                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7758  1DC5  0021               	movlb	1	; select bank1
  7759  1DC6  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7760  1DC7  0022               	movlb	2	; select bank2
  7761  1DC8  1C03               	skipc
  7762  1DC9  118D               	bcf	13,3	;volatile
  7763  1DCA  1803               	skipnc
  7764  1DCB  158D               	bsf	13,3	;volatile
  7765  1DCC  0008               	return
  7766  1DCD                     __end_of_setFeedbackState:	
  7767                           
  7768                           	psect	text7
  7769  1F26                     __ptext7:	
  7770 ;; *************** function _setDoublePressState *****************
  7771 ;; Defined at:
  7772 ;;		line 20 in file "preset_programming.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;  f_state         2   18[BANK1 ] int 
  7775 ;; Auto vars:     Size  Location     Type
  7776 ;;		None
  7777 ;; Return value:  Size  Location     Type
  7778 ;;                  1    wreg      void 
  7779 ;; Registers used:
  7780 ;;		wreg, status,2, status,0, pclath, cstack
  7781 ;; Tracked objects:
  7782 ;;		On entry : 0/0
  7783 ;;		On exit  : 0/0
  7784 ;;		Unchanged: 0/0
  7785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7786 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7788 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7789 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7790 ;;Total ram usage:        4 bytes
  7791 ;; Hardware stack levels used:    1
  7792 ;; Hardware stack levels required when called:    5
  7793 ;; This function calls:
  7794 ;;		_wait_ms
  7795 ;; This function is called by:
  7796 ;;		_updateSwitchBypass
  7797 ;;		_updateSwitchTap
  7798 ;; This function uses a non-reentrant model
  7799 ;;
  7800                           
  7801                           
  7802                           ;psect for function _setDoublePressState
  7803  1F26                     _setDoublePressState:	
  7804                           
  7805                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  7806                           
  7807                           ;incstack = 0
  7808                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  7809  1F26  0020               	movlb	0	; select bank0
  7810  1F27  0853               	movf	_doubleTap_state,w	;volatile
  7811  1F28  0021               	movlb	1	; select bank1
  7812  1F29  00B4               	movwf	??_setDoublePressState^(0+128)
  7813  1F2A  01B5               	clrf	(??_setDoublePressState^(0+128)+1)
  7814  1F2B  0833               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7815  1F2C  0635               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7816  1F2D  1D03               	skipz
  7817  1F2E  2F31               	goto	u5255
  7818  1F2F  0832               	movf	setDoublePressState@f_state^(0+128),w
  7819  1F30  0634               	xorwf	??_setDoublePressState^(0+128),w
  7820  1F31                     u5255:	
  7821  1F31  1903               	btfsc	3,2
  7822  1F32  0008               	return
  7823                           
  7824                           ;preset_programming.c: 22: doubleTap_state = f_state;
  7825  1F33  0832               	movf	setDoublePressState@f_state^(0+128),w
  7826  1F34  00B4               	movwf	??_setDoublePressState^(0+128)
  7827  1F35  0834               	movf	??_setDoublePressState^(0+128),w
  7828  1F36  0020               	movlb	0	; select bank0
  7829  1F37  00D3               	movwf	_doubleTap_state	;volatile
  7830                           
  7831                           ;preset_programming.c: 23: if (f_state == 1) {
  7832  1F38  0021               	movlb	1	; select bank1
  7833  1F39  0332               	decf	setDoublePressState@f_state^(0+128),w
  7834  1F3A  0433               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7835  1F3B  1D03               	btfss	3,2
  7836  1F3C  2F40               	goto	l5134
  7837                           
  7838                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  7839  1F3D  0022               	movlb	2	; select bank2
  7840  1F3E  120D               	bcf	13,4	;volatile
  7841                           
  7842                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  7843  1F3F  110D               	bcf	13,2	;volatile
  7844  1F40                     l5134:	
  7845                           
  7846                           ;preset_programming.c: 26: }
  7847                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  7848  1F40  0021               	movlb	1	; select bank1
  7849  1F41  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7850  1F42  0022               	movlb	2	; select bank2
  7851  1F43  1C03               	skipc
  7852  1F44  108D               	bcf	13,1	;volatile
  7853  1F45  1803               	skipnc
  7854  1F46  148D               	bsf	13,1	;volatile
  7855                           
  7856                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  7857  1F47  0021               	movlb	1	; select bank1
  7858  1F48  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7859  1F49  0022               	movlb	2	; select bank2
  7860  1F4A  1C03               	skipc
  7861  1F4B  100D               	bcf	13,0	;volatile
  7862  1F4C  1803               	skipnc
  7863  1F4D  140D               	bsf	13,0	;volatile
  7864                           
  7865                           ;preset_programming.c: 31: wait_ms(20);
  7866  1F4E  3014               	movlw	20
  7867  1F4F  0021               	movlb	1	; select bank1
  7868  1F50  00AC               	movwf	wait_ms@timeSec^(0+128)
  7869  1F51  3000               	movlw	0
  7870  1F52  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7871  1F53  319F  2756         	fcall	_wait_ms
  7872  1F55  0008               	return
  7873  1F56                     __end_of_setDoublePressState:	
  7874                           
  7875                           	psect	text8
  7876  1E6C                     __ptext8:	
  7877 ;; *************** function _showBootSequence *****************
  7878 ;; Defined at:
  7879 ;;		line 86 in file "LEDs.c"
  7880 ;; Parameters:    Size  Location     Type
  7881 ;;		None
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  1    wreg      void 
  7886 ;; Registers used:
  7887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7895 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7896 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7897 ;;Total ram usage:        1 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    6
  7900 ;; This function calls:
  7901 ;;		_getCurrentLEDState
  7902 ;;		_restoreLEDState
  7903 ;;		_solidring_tactiles
  7904 ;;		_star_tactiles
  7905 ;; This function is called by:
  7906 ;;		_main
  7907 ;; This function uses a non-reentrant model
  7908 ;;
  7909                           
  7910                           
  7911                           ;psect for function _showBootSequence
  7912  1E6C                     _showBootSequence:	
  7913                           
  7914                           ;LEDs.c: 87: getCurrentLEDState();
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7918  1E6C  319D  259A  319E   	fcall	_getCurrentLEDState
  7919                           
  7920                           ;LEDs.c: 88: suspend_blink = 1;
  7921  1E6F  3001               	movlw	1
  7922  1E70  0021               	movlb	1	; select bank1
  7923  1E71  00B9               	movwf	??_showBootSequence^(0+128)
  7924  1E72  0839               	movf	??_showBootSequence^(0+128),w
  7925  1E73  0020               	movlb	0	; select bank0
  7926  1E74  00D6               	movwf	_suspend_blink	;volatile
  7927                           
  7928                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  7929  1E75  0022               	movlb	2	; select bank2
  7930  1E76  120D               	bcf	13,4	;volatile
  7931                           
  7932                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  7933  1E77  110D               	bcf	13,2	;volatile
  7934                           
  7935                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  7936  1E78  128D               	bcf	13,5	;volatile
  7937                           
  7938                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  7939  1E79  118D               	bcf	13,3	;volatile
  7940                           
  7941                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  7942  1E7A  100D               	bcf	13,0	;volatile
  7943                           
  7944                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  7945  1E7B  108D               	bcf	13,1	;volatile
  7946                           
  7947                           ;LEDs.c: 113: star_tactiles(0);
  7948  1E7C  3000               	movlw	0
  7949  1E7D  3194  2444  319E   	fcall	_star_tactiles
  7950                           
  7951                           ;LEDs.c: 114: star_tactiles(0);
  7952  1E80  3000               	movlw	0
  7953  1E81  3194  2444  319E   	fcall	_star_tactiles
  7954                           
  7955                           ;LEDs.c: 115: star_tactiles(1);
  7956  1E84  3001               	movlw	1
  7957  1E85  3194  2444  319E   	fcall	_star_tactiles
  7958                           
  7959                           ;LEDs.c: 116: star_tactiles(1);
  7960  1E88  3001               	movlw	1
  7961  1E89  3194  2444  319E   	fcall	_star_tactiles
  7962                           
  7963                           ;LEDs.c: 118: solidring_tactiles();
  7964  1E8C  3190  20BE  319E   	fcall	_solidring_tactiles
  7965                           
  7966                           ;LEDs.c: 119: solidring_tactiles();
  7967  1E8F  3190  20BE  319E   	fcall	_solidring_tactiles
  7968                           
  7969                           ;LEDs.c: 122: suspend_blink = 0;
  7970  1E92  0020               	movlb	0	; select bank0
  7971  1E93  01D6               	clrf	_suspend_blink	;volatile
  7972                           
  7973                           ;LEDs.c: 123: restoreLEDState();
  7974  1E94  319D  25E7         	fcall	_restoreLEDState
  7975  1E96  0008               	return
  7976  1E97                     __end_of_showBootSequence:	
  7977                           
  7978                           	psect	text9
  7979  1444                     __ptext9:	
  7980 ;; *************** function _star_tactiles *****************
  7981 ;; Defined at:
  7982 ;;		line 194 in file "LEDs.c"
  7983 ;; Parameters:    Size  Location     Type
  7984 ;;  reverse         1    wreg     unsigned char 
  7985 ;; Auto vars:     Size  Location     Type
  7986 ;;  reverse         1   20[BANK1 ] unsigned char 
  7987 ;;  iLed            2   23[BANK1 ] int 
  7988 ;;  iLed            2   21[BANK1 ] int 
  7989 ;; Return value:  Size  Location     Type
  7990 ;;                  1    wreg      void 
  7991 ;; Registers used:
  7992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7993 ;; Tracked objects:
  7994 ;;		On entry : 0/0
  7995 ;;		On exit  : 0/0
  7996 ;;		Unchanged: 0/0
  7997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7999 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8000 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8001 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8002 ;;Total ram usage:        7 bytes
  8003 ;; Hardware stack levels used:    1
  8004 ;; Hardware stack levels required when called:    5
  8005 ;; This function calls:
  8006 ;;		_set_leds_bottom
  8007 ;;		_set_leds_top
  8008 ;;		_wait_ms
  8009 ;; This function is called by:
  8010 ;;		_showBootSequence
  8011 ;; This function uses a non-reentrant model
  8012 ;;
  8013                           
  8014                           
  8015                           ;psect for function _star_tactiles
  8016  1444                     _star_tactiles:	
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8020                           ;star_tactiles@reverse stored from wreg
  8021  1444  0021               	movlb	1	; select bank1
  8022  1445  00B4               	movwf	star_tactiles@reverse^(0+128)
  8023                           
  8024                           ;LEDs.c: 195: if (reverse == 1) {
  8025  1446  0334               	decf	star_tactiles@reverse^(0+128),w
  8026  1447  1D03               	btfss	3,2
  8027  1448  2C79               	goto	l5060
  8028                           
  8029                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8030  1449  3005               	movlw	5
  8031  144A  00B5               	movwf	star_tactiles@iLed^(0+128)
  8032  144B  3000               	movlw	0
  8033  144C  00B6               	movwf	(star_tactiles@iLed^(0+128)+1)
  8034  144D                     L5:	
  8035  144D  1BB6               	btfsc	(star_tactiles@iLed+1)^(0+128),7
  8036  144E  0008               	return
  8037                           
  8038                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8039  144F  0836               	movf	(star_tactiles@iLed+1)^(0+128),w
  8040  1450  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8041  1451  0835               	movf	star_tactiles@iLed^(0+128),w
  8042  1452  00A0               	movwf	set_leds_top@x^(0+128)
  8043  1453  3001               	movlw	1
  8044  1454  00A2               	movwf	set_leds_top@ledState^(0+128)
  8045  1455  3000               	movlw	0
  8046  1456  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8047  1457  3193  238B  3194   	fcall	_set_leds_top
  8048                           
  8049                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8050  145A  0021               	movlb	1	; select bank1
  8051  145B  0935               	comf	star_tactiles@iLed^(0+128),w
  8052  145C  00B2               	movwf	??_star_tactiles^(0+128)
  8053  145D  0936               	comf	(star_tactiles@iLed+1)^(0+128),w
  8054  145E  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8055  145F  0AB2               	incf	??_star_tactiles^(0+128),f
  8056  1460  1903               	skipnz
  8057  1461  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8058  1462  0832               	movf	??_star_tactiles^(0+128),w
  8059  1463  3E06               	addlw	6
  8060  1464  00A0               	movwf	set_leds_bottom@x^(0+128)
  8061  1465  3000               	movlw	0
  8062  1466  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8063  1467  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8064  1468  319F  2788  3194   	fcall	_set_leds_bottom
  8065                           
  8066                           ;LEDs.c: 199: wait_ms(5);
  8067  146B  3005               	movlw	5
  8068  146C  0021               	movlb	1	; select bank1
  8069  146D  00AC               	movwf	wait_ms@timeSec^(0+128)
  8070  146E  3000               	movlw	0
  8071  146F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8072  1470  319F  2756  3194   	fcall	_wait_ms
  8073  1473  30FF               	movlw	255
  8074  1474  0021               	movlb	1	; select bank1
  8075  1475  07B5               	addwf	star_tactiles@iLed^(0+128),f
  8076  1476  30FF               	movlw	255
  8077  1477  3DB6               	addwfc	(star_tactiles@iLed+1)^(0+128),f
  8078  1478  2C4D               	goto	L5
  8079  1479                     l5060:	
  8080                           ;LEDs.c: 200: }
  8081                           ;LEDs.c: 201: } else {
  8082                           
  8083                           
  8084                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8085  1479  3001               	movlw	1
  8086  147A  00B7               	movwf	star_tactiles@iLed_1453^(0+128)
  8087  147B  3000               	movlw	0
  8088  147C  00B8               	movwf	(star_tactiles@iLed_1453^(0+128)+1)
  8089  147D                     L6:	
  8090  147D  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8091  147E  3A80               	xorlw	128
  8092  147F  00B2               	movwf	??_star_tactiles^(0+128)
  8093  1480  3080               	movlw	128
  8094  1481  0232               	subwf	??_star_tactiles^(0+128),w
  8095  1482  1D03               	skipz
  8096  1483  2C86               	goto	u5195
  8097  1484  3007               	movlw	7
  8098  1485  0237               	subwf	star_tactiles@iLed_1453^(0+128),w
  8099  1486                     u5195:	
  8100  1486  1803               	btfsc	3,0
  8101  1487  0008               	return
  8102                           
  8103                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8104  1488  0021               	movlb	1	; select bank1
  8105  1489  0838               	movf	(star_tactiles@iLed_1453+1)^(0+128),w
  8106  148A  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8107  148B  0837               	movf	star_tactiles@iLed_1453^(0+128),w
  8108  148C  00A0               	movwf	set_leds_top@x^(0+128)
  8109  148D  3001               	movlw	1
  8110  148E  00A2               	movwf	set_leds_top@ledState^(0+128)
  8111  148F  3000               	movlw	0
  8112  1490  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8113  1491  3193  238B  3194   	fcall	_set_leds_top
  8114                           
  8115                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8116  1494  0021               	movlb	1	; select bank1
  8117  1495  0937               	comf	star_tactiles@iLed_1453^(0+128),w
  8118  1496  00B2               	movwf	??_star_tactiles^(0+128)
  8119  1497  0938               	comf	(star_tactiles@iLed_1453+1)^(0+128),w
  8120  1498  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8121  1499  0AB2               	incf	??_star_tactiles^(0+128),f
  8122  149A  1903               	skipnz
  8123  149B  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8124  149C  0832               	movf	??_star_tactiles^(0+128),w
  8125  149D  3E06               	addlw	6
  8126  149E  00A0               	movwf	set_leds_bottom@x^(0+128)
  8127  149F  3000               	movlw	0
  8128  14A0  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8129  14A1  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8130  14A2  319F  2788  3194   	fcall	_set_leds_bottom
  8131                           
  8132                           ;LEDs.c: 205: wait_ms(5);
  8133  14A5  3005               	movlw	5
  8134  14A6  0021               	movlb	1	; select bank1
  8135  14A7  00AC               	movwf	wait_ms@timeSec^(0+128)
  8136  14A8  3000               	movlw	0
  8137  14A9  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8138  14AA  319F  2756  3194   	fcall	_wait_ms
  8139  14AD  3001               	movlw	1
  8140  14AE  0021               	movlb	1	; select bank1
  8141  14AF  07B7               	addwf	star_tactiles@iLed_1453^(0+128),f
  8142  14B0  3000               	movlw	0
  8143  14B1  3DB8               	addwfc	(star_tactiles@iLed_1453+1)^(0+128),f
  8144  14B2  2C7D               	goto	L6
  8145  14B3                     __end_of_star_tactiles:	
  8146                           
  8147                           	psect	text10
  8148  10BE                     __ptext10:	
  8149 ;; *************** function _solidring_tactiles *****************
  8150 ;; Defined at:
  8151 ;;		line 223 in file "LEDs.c"
  8152 ;; Parameters:    Size  Location     Type
  8153 ;;		None
  8154 ;; Auto vars:     Size  Location     Type
  8155 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8156 ;; Return value:  Size  Location     Type
  8157 ;;                  1    wreg      void 
  8158 ;; Registers used:
  8159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8160 ;; Tracked objects:
  8161 ;;		On entry : 0/0
  8162 ;;		On exit  : 0/0
  8163 ;;		Unchanged: 0/0
  8164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8166 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8167 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8168 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8169 ;;Total ram usage:        3 bytes
  8170 ;; Hardware stack levels used:    1
  8171 ;; Hardware stack levels required when called:    5
  8172 ;; This function calls:
  8173 ;;		_set_leds_bottom
  8174 ;;		_set_leds_top
  8175 ;;		_wait_ms
  8176 ;; This function is called by:
  8177 ;;		_showBootSequence
  8178 ;;		_showSave
  8179 ;; This function uses a non-reentrant model
  8180 ;;
  8181                           
  8182                           
  8183                           ;psect for function _solidring_tactiles
  8184  10BE                     _solidring_tactiles:	
  8185                           
  8186                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8187                           
  8188                           ;incstack = 0
  8189                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8190  10BE  301E               	movlw	30
  8191  10BF  0021               	movlb	1	; select bank1
  8192  10C0  00B2               	movwf	??_solidring_tactiles^(0+128)
  8193  10C1  0832               	movf	??_solidring_tactiles^(0+128),w
  8194  10C2  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8195                           
  8196                           ;LEDs.c: 225: set_leds_top(100, 1);
  8197  10C3  3064               	movlw	100
  8198  10C4  00A0               	movwf	set_leds_top@x^(0+128)
  8199  10C5  3000               	movlw	0
  8200  10C6  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8201  10C7  3001               	movlw	1
  8202  10C8  00A2               	movwf	set_leds_top@ledState^(0+128)
  8203  10C9  3000               	movlw	0
  8204  10CA  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8205  10CB  3193  238B  3190   	fcall	_set_leds_top
  8206                           
  8207                           ;LEDs.c: 226: set_leds_bottom(100);
  8208  10CE  3064               	movlw	100
  8209  10CF  0021               	movlb	1	; select bank1
  8210  10D0  00A0               	movwf	set_leds_bottom@x^(0+128)
  8211  10D1  3000               	movlw	0
  8212  10D2  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8213  10D3  319F  2788  3190   	fcall	_set_leds_bottom
  8214                           
  8215                           ;LEDs.c: 227: wait_ms(ring_delay);
  8216  10D6  0021               	movlb	1	; select bank1
  8217  10D7  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8218  10D8  00B2               	movwf	??_solidring_tactiles^(0+128)
  8219  10D9  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8220  10DA  0832               	movf	??_solidring_tactiles^(0+128),w
  8221  10DB  00AC               	movwf	wait_ms@timeSec^(0+128)
  8222  10DC  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8223  10DD  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8224  10DE  319F  2756  3190   	fcall	_wait_ms
  8225                           
  8226                           ;LEDs.c: 229: set_leds_top(0, 1);
  8227  10E1  3000               	movlw	0
  8228  10E2  0021               	movlb	1	; select bank1
  8229  10E3  00A0               	movwf	set_leds_top@x^(0+128)
  8230  10E4  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8231  10E5  3001               	movlw	1
  8232  10E6  00A2               	movwf	set_leds_top@ledState^(0+128)
  8233  10E7  3000               	movlw	0
  8234  10E8  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8235  10E9  3193  238B  3190   	fcall	_set_leds_top
  8236                           
  8237                           ;LEDs.c: 230: set_leds_bottom(0);
  8238  10EC  3000               	movlw	0
  8239  10ED  0021               	movlb	1	; select bank1
  8240  10EE  00A0               	movwf	set_leds_bottom@x^(0+128)
  8241  10EF  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8242  10F0  319F  2788  3190   	fcall	_set_leds_bottom
  8243                           
  8244                           ;LEDs.c: 231: wait_ms(ring_delay);
  8245  10F3  0021               	movlb	1	; select bank1
  8246  10F4  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8247  10F5  00B2               	movwf	??_solidring_tactiles^(0+128)
  8248  10F6  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8249  10F7  0832               	movf	??_solidring_tactiles^(0+128),w
  8250  10F8  00AC               	movwf	wait_ms@timeSec^(0+128)
  8251  10F9  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8252  10FA  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8253  10FB  319F  2756         	fcall	_wait_ms
  8254  10FD  0008               	return
  8255  10FE                     __end_of_solidring_tactiles:	
  8256                           
  8257                           	psect	text11
  8258  1DE7                     __ptext11:	
  8259 ;; *************** function _restoreLEDState *****************
  8260 ;; Defined at:
  8261 ;;		line 89 in file "state_manager.c"
  8262 ;; Parameters:    Size  Location     Type
  8263 ;;		None
  8264 ;; Auto vars:     Size  Location     Type
  8265 ;;		None
  8266 ;; Return value:  Size  Location     Type
  8267 ;;                  1    wreg      void 
  8268 ;; Registers used:
  8269 ;;		wreg, status,0
  8270 ;; Tracked objects:
  8271 ;;		On entry : 0/0
  8272 ;;		On exit  : 0/0
  8273 ;;		Unchanged: 0/0
  8274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8279 ;;Total ram usage:        0 bytes
  8280 ;; Hardware stack levels used:    1
  8281 ;; Hardware stack levels required when called:    3
  8282 ;; This function calls:
  8283 ;;		Nothing
  8284 ;; This function is called by:
  8285 ;;		_showBootSequence
  8286 ;;		_showError_Alternating
  8287 ;;		_show_error
  8288 ;;		_show_cancel
  8289 ;; This function uses a non-reentrant model
  8290 ;;
  8291                           
  8292                           
  8293                           ;psect for function _restoreLEDState
  8294  1DE7                     _restoreLEDState:	
  8295                           
  8296                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8297                           
  8298                           ;incstack = 0
  8299                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8300  1DE7  0023               	movlb	3	; select bank3
  8301  1DE8  0C34               	rrf	_ledState^(0+384),w
  8302  1DE9  0022               	movlb	2	; select bank2
  8303  1DEA  1C03               	skipc
  8304  1DEB  120D               	bcf	13,4	;volatile
  8305  1DEC  1803               	skipnc
  8306  1DED  160D               	bsf	13,4	;volatile
  8307                           
  8308                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8309  1DEE  0023               	movlb	3	; select bank3
  8310  1DEF  0C36               	rrf	(_ledState^(0+384)+2),w
  8311  1DF0  0022               	movlb	2	; select bank2
  8312  1DF1  1C03               	skipc
  8313  1DF2  110D               	bcf	13,2	;volatile
  8314  1DF3  1803               	skipnc
  8315  1DF4  150D               	bsf	13,2	;volatile
  8316                           
  8317                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8318  1DF5  0023               	movlb	3	; select bank3
  8319  1DF6  0C35               	rrf	(_ledState^(0+384)+1),w
  8320  1DF7  0022               	movlb	2	; select bank2
  8321  1DF8  1C03               	skipc
  8322  1DF9  128D               	bcf	13,5	;volatile
  8323  1DFA  1803               	skipnc
  8324  1DFB  168D               	bsf	13,5	;volatile
  8325                           
  8326                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8327  1DFC  0023               	movlb	3	; select bank3
  8328  1DFD  0C37               	rrf	(_ledState^(0+384)+3),w
  8329  1DFE  0022               	movlb	2	; select bank2
  8330  1DFF  1C03               	skipc
  8331  1E00  118D               	bcf	13,3	;volatile
  8332  1E01  1803               	skipnc
  8333  1E02  158D               	bsf	13,3	;volatile
  8334  1E03  0008               	return
  8335  1E04                     __end_of_restoreLEDState:	
  8336                           
  8337                           	psect	text12
  8338  1D9A                     __ptext12:	
  8339 ;; *************** function _getCurrentLEDState *****************
  8340 ;; Defined at:
  8341 ;;		line 83 in file "state_manager.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;		None
  8346 ;; Return value:  Size  Location     Type
  8347 ;;                  1    wreg      void 
  8348 ;; Registers used:
  8349 ;;		wreg, status,2
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : 0/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8359 ;;Total ram usage:        0 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    3
  8362 ;; This function calls:
  8363 ;;		Nothing
  8364 ;; This function is called by:
  8365 ;;		_showBootSequence
  8366 ;;		_showError_Alternating
  8367 ;;		_show_error
  8368 ;;		_show_cancel
  8369 ;; This function uses a non-reentrant model
  8370 ;;
  8371                           
  8372                           
  8373                           ;psect for function _getCurrentLEDState
  8374  1D9A                     _getCurrentLEDState:	
  8375                           
  8376                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8377                           
  8378                           ;incstack = 0
  8379                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8380  1D9A  3000               	movlw	0
  8381  1D9B  0022               	movlb	2	; select bank2
  8382  1D9C  1A0D               	btfsc	13,4	;volatile
  8383  1D9D  3001               	movlw	1
  8384  1D9E  0023               	movlb	3	; select bank3
  8385  1D9F  00B4               	movwf	_ledState^(0+384)
  8386                           
  8387                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8388  1DA0  3000               	movlw	0
  8389  1DA1  0022               	movlb	2	; select bank2
  8390  1DA2  190D               	btfsc	13,2	;volatile
  8391  1DA3  3001               	movlw	1
  8392  1DA4  0023               	movlb	3	; select bank3
  8393  1DA5  00B6               	movwf	(_ledState^(0+384)+2)
  8394                           
  8395                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8396  1DA6  3000               	movlw	0
  8397  1DA7  0022               	movlb	2	; select bank2
  8398  1DA8  1A8D               	btfsc	13,5	;volatile
  8399  1DA9  3001               	movlw	1
  8400  1DAA  0023               	movlb	3	; select bank3
  8401  1DAB  00B5               	movwf	(_ledState^(0+384)+1)
  8402                           
  8403                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8404  1DAC  3000               	movlw	0
  8405  1DAD  0022               	movlb	2	; select bank2
  8406  1DAE  198D               	btfsc	13,3	;volatile
  8407  1DAF  3001               	movlw	1
  8408  1DB0  0023               	movlb	3	; select bank3
  8409  1DB1  00B7               	movwf	(_ledState^(0+384)+3)
  8410  1DB2  0008               	return
  8411  1DB3                     __end_of_getCurrentLEDState:	
  8412                           
  8413                           	psect	text13
  8414  08F2                     __ptext13:	
  8415 ;; *************** function _set_subdivision *****************
  8416 ;; Defined at:
  8417 ;;		line 77 in file "user.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;  x               2    6[BANK2 ] int 
  8420 ;;  y               2    8[BANK2 ] int 
  8421 ;; Auto vars:     Size  Location     Type
  8422 ;;  scalar          3   15[BANK2 ] float 
  8423 ;;  tmpX            2   13[BANK2 ] int 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  2    6[BANK2 ] int 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8433 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8434 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8435 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8436 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8437 ;;Total ram usage:       12 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    5
  8440 ;; This function calls:
  8441 ;;		___awtoft
  8442 ;;		___ftdiv
  8443 ;;		___ftmul
  8444 ;;		___fttol
  8445 ;; This function is called by:
  8446 ;;		_main
  8447 ;; This function uses a non-reentrant model
  8448 ;;
  8449                           
  8450                           
  8451                           ;psect for function _set_subdivision
  8452  08F2                     _set_subdivision:	
  8453                           
  8454                           ;user.c: 78: adjust_sub_delay = 0;
  8455                           
  8456                           ;incstack = 0
  8457                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8458  08F2  0023               	movlb	3	; select bank3
  8459  08F3  01C0               	clrf	_adjust_sub_delay^(0+384)
  8460  08F4  01C1               	clrf	(_adjust_sub_delay+1)^(0+384)
  8461                           
  8462                           ;user.c: 79: int tmpX = x;
  8463  08F5  0022               	movlb	2	; select bank2
  8464  08F6  0846               	movf	(set_subdivision@x+1)^(0+256),w
  8465  08F7  00CD               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8466  08F8  0845               	movf	set_subdivision@x^(0+256),w
  8467  08F9  00CC               	movwf	set_subdivision@tmpX^(0+256)
  8468                           
  8469                           ;user.c: 80: float scalar = 1.0;
  8470  08FA  3000               	movlw	0
  8471  08FB  00CE               	movwf	set_subdivision@scalar^(0+256)
  8472  08FC  3080               	movlw	128
  8473  08FD  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8474  08FE  303F               	movlw	63
  8475  08FF  00D0               	movwf	(set_subdivision@scalar+2)^(0+256)
  8476                           
  8477                           ;user.c: 83: switch (y) {
  8478  0900  291A               	goto	l5778
  8479  0901                     l5766:	
  8480                           ;user.c: 84: case 1:
  8481                           
  8482                           
  8483                           ;user.c: 85: scalar = 0.75;
  8484  0901  3000               	movlw	0
  8485  0902  00CE               	movwf	set_subdivision@scalar^(0+256)
  8486  0903  3040               	movlw	64
  8487  0904  290C               	goto	L8
  8488  0905                     l5768:	
  8489                           ;user.c: 87: case 2:
  8490                           
  8491                           ;user.c: 86: break;
  8492                           
  8493                           
  8494                           ;user.c: 88: scalar = 0.6666;
  8495  0905  30A6               	movlw	166
  8496  0906  00CE               	movwf	set_subdivision@scalar^(0+256)
  8497  0907  302A               	movlw	42
  8498  0908  290C               	goto	L8
  8499  0909                     l5770:	
  8500                           ;user.c: 90: case 3:
  8501                           
  8502                           ;user.c: 89: break;
  8503                           
  8504                           
  8505                           ;user.c: 91: scalar = .5;
  8506  0909  3000               	movlw	0
  8507  090A  00CE               	movwf	set_subdivision@scalar^(0+256)
  8508  090B  3000               	movlw	0
  8509  090C                     L8:	
  8510  090C  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8511  090D  303F               	movlw	63
  8512  090E  2918               	goto	L10
  8513  090F                     l5772:	
  8514                           ;user.c: 93: case 4:
  8515                           
  8516                           ;user.c: 92: break;
  8517                           
  8518                           
  8519                           ;user.c: 94: scalar = 0.3333;
  8520  090F  30A6               	movlw	166
  8521  0910  00CE               	movwf	set_subdivision@scalar^(0+256)
  8522  0911  30AA               	movlw	170
  8523  0912  2916               	goto	L11
  8524  0913                     l5774:	
  8525                           ;user.c: 96: case 5:
  8526                           
  8527                           ;user.c: 95: break;
  8528                           
  8529                           
  8530                           ;user.c: 97: scalar = 0.25;
  8531  0913  3000               	movlw	0
  8532  0914  00CE               	movwf	set_subdivision@scalar^(0+256)
  8533  0915  3080               	movlw	128
  8534  0916                     L11:	
  8535  0916  00CF               	movwf	(set_subdivision@scalar+1)^(0+256)
  8536  0917  303E               	movlw	62
  8537  0918                     L10:	
  8538  0918  00D0               	movwf	(set_subdivision@scalar+2)^(0+256)
  8539                           
  8540                           ;user.c: 102: }
  8541                           
  8542                           ;user.c: 101: break;
  8543                           
  8544                           ;user.c: 99: case 6:
  8545                           
  8546                           ;user.c: 98: break;
  8547  0919  2933               	goto	l5780
  8548  091A                     l5778:	
  8549                           
  8550                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8551                           ; Switch size 1, requested type "space"
  8552                           ; Number of cases is 1, Range of values is 0 to 0
  8553                           ; switch strategies available:
  8554                           ; Name         Instructions Cycles
  8555                           ; simple_byte            4     3 (average)
  8556                           ; direct_byte            8     6 (fixed)
  8557                           ; jumptable            260     6 (fixed)
  8558                           ;	Chosen strategy is simple_byte
  8559  091A  0848               	movf	(set_subdivision@y+1)^(0+256),w
  8560  091B  3A00               	xorlw	0	; case 0
  8561  091C  1903               	skipnz
  8562  091D  291F               	goto	l6190
  8563  091E  2933               	goto	l5780
  8564  091F                     l6190:	
  8565                           
  8566                           ; Switch size 1, requested type "space"
  8567                           ; Number of cases is 6, Range of values is 1 to 6
  8568                           ; switch strategies available:
  8569                           ; Name         Instructions Cycles
  8570                           ; simple_byte           19    10 (average)
  8571                           ; direct_byte           21     9 (fixed)
  8572                           ; jumptable            263     9 (fixed)
  8573                           ;	Chosen strategy is simple_byte
  8574  091F  0847               	movf	set_subdivision@y^(0+256),w
  8575  0920  3A01               	xorlw	1	; case 1
  8576  0921  1903               	skipnz
  8577  0922  2901               	goto	l5766
  8578  0923  3A03               	xorlw	3	; case 2
  8579  0924  1903               	skipnz
  8580  0925  2905               	goto	l5768
  8581  0926  3A01               	xorlw	1	; case 3
  8582  0927  1903               	skipnz
  8583  0928  2909               	goto	l5770
  8584  0929  3A07               	xorlw	7	; case 4
  8585  092A  1903               	skipnz
  8586  092B  290F               	goto	l5772
  8587  092C  3A01               	xorlw	1	; case 5
  8588  092D  1903               	skipnz
  8589  092E  2913               	goto	l5774
  8590  092F  3A03               	xorlw	3	; case 6
  8591  0930  1903               	skipnz
  8592  0931  2933               	goto	l5780
  8593  0932  2933               	goto	l5780
  8594  0933                     l5780:	
  8595                           
  8596                           ;user.c: 104: tmpX = tmpX * scalar;
  8597  0933  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8598  0934  0021               	movlb	1	; select bank1
  8599  0935  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8600  0936  0022               	movlb	2	; select bank2
  8601  0937  084C               	movf	set_subdivision@tmpX^(0+256),w
  8602  0938  0021               	movlb	1	; select bank1
  8603  0939  00A8               	movwf	___awtoft@c^(0+128)
  8604  093A  319E  2624  3188   	fcall	___awtoft
  8605  093D  0021               	movlb	1	; select bank1
  8606  093E  0828               	movf	?___awtoft^(0+128),w
  8607  093F  00B8               	movwf	___ftmul@f2^(0+128)
  8608  0940  0829               	movf	(?___awtoft+1)^(0+128),w
  8609  0941  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  8610  0942  082A               	movf	(?___awtoft+2)^(0+128),w
  8611  0943  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  8612  0944  0022               	movlb	2	; select bank2
  8613  0945  084E               	movf	set_subdivision@scalar^(0+256),w
  8614  0946  0021               	movlb	1	; select bank1
  8615  0947  00B5               	movwf	___ftmul@f1^(0+128)
  8616  0948  0022               	movlb	2	; select bank2
  8617  0949  084F               	movf	(set_subdivision@scalar+1)^(0+256),w
  8618  094A  0021               	movlb	1	; select bank1
  8619  094B  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  8620  094C  0022               	movlb	2	; select bank2
  8621  094D  0850               	movf	(set_subdivision@scalar+2)^(0+256),w
  8622  094E  0021               	movlb	1	; select bank1
  8623  094F  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  8624  0950  3188  203E  3188   	fcall	___ftmul
  8625  0953  0021               	movlb	1	; select bank1
  8626  0954  0835               	movf	?___ftmul^(0+128),w
  8627  0955  00E7               	movwf	___fttol@f1^(0+128)
  8628  0956  0836               	movf	(?___ftmul+1)^(0+128),w
  8629  0957  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8630  0958  0837               	movf	(?___ftmul+2)^(0+128),w
  8631  0959  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8632  095A  3196  26B8  3188   	fcall	___fttol
  8633  095D  0021               	movlb	1	; select bank1
  8634  095E  0868               	movf	(?___fttol^(0+128)+1),w
  8635  095F  0022               	movlb	2	; select bank2
  8636  0960  00CD               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8637  0961  0021               	movlb	1	; select bank1
  8638  0962  0867               	movf	?___fttol^(0+128),w
  8639  0963  0022               	movlb	2	; select bank2
  8640  0964  00CC               	movwf	set_subdivision@tmpX^(0+256)
  8641                           
  8642                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  8643  0965  084E               	movf	set_subdivision@scalar^(0+256),w
  8644  0966  0021               	movlb	1	; select bank1
  8645  0967  00C5               	movwf	___ftdiv@f2^(0+128)
  8646  0968  0022               	movlb	2	; select bank2
  8647  0969  084F               	movf	(set_subdivision@scalar+1)^(0+256),w
  8648  096A  0021               	movlb	1	; select bank1
  8649  096B  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  8650  096C  0022               	movlb	2	; select bank2
  8651  096D  0850               	movf	(set_subdivision@scalar+2)^(0+256),w
  8652  096E  0021               	movlb	1	; select bank1
  8653  096F  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  8654  0970  0022               	movlb	2	; select bank2
  8655  0971  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8656  0972  0021               	movlb	1	; select bank1
  8657  0973  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8658  0974  0022               	movlb	2	; select bank2
  8659  0975  084C               	movf	set_subdivision@tmpX^(0+256),w
  8660  0976  0021               	movlb	1	; select bank1
  8661  0977  00A8               	movwf	___awtoft@c^(0+128)
  8662  0978  319E  2624  3188   	fcall	___awtoft
  8663  097B  0021               	movlb	1	; select bank1
  8664  097C  0828               	movf	?___awtoft^(0+128),w
  8665  097D  00C8               	movwf	___ftdiv@f1^(0+128)
  8666  097E  0829               	movf	(?___awtoft+1)^(0+128),w
  8667  097F  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  8668  0980  082A               	movf	(?___awtoft+2)^(0+128),w
  8669  0981  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  8670  0982  3197  2757  3188   	fcall	___ftdiv
  8671  0985  0021               	movlb	1	; select bank1
  8672  0986  0845               	movf	?___ftdiv^(0+128),w
  8673  0987  0022               	movlb	2	; select bank2
  8674  0988  00C9               	movwf	??_set_subdivision^(0+256)
  8675  0989  0021               	movlb	1	; select bank1
  8676  098A  0846               	movf	(?___ftdiv+1)^(0+128),w
  8677  098B  0022               	movlb	2	; select bank2
  8678  098C  00CA               	movwf	(??_set_subdivision^(0+256)+1)
  8679  098D  0021               	movlb	1	; select bank1
  8680  098E  0847               	movf	(?___ftdiv+2)^(0+128),w
  8681  098F  0022               	movlb	2	; select bank2
  8682  0990  00CB               	movwf	(??_set_subdivision^(0+256)+2)
  8683  0991  0846               	movf	(set_subdivision@x+1)^(0+256),w
  8684  0992  0021               	movlb	1	; select bank1
  8685  0993  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8686  0994  0022               	movlb	2	; select bank2
  8687  0995  0845               	movf	set_subdivision@x^(0+256),w
  8688  0996  0021               	movlb	1	; select bank1
  8689  0997  00A8               	movwf	___awtoft@c^(0+128)
  8690  0998  319E  2624  3188   	fcall	___awtoft
  8691  099B  0021               	movlb	1	; select bank1
  8692  099C  082A               	movf	(?___awtoft+2)^(0+128),w
  8693  099D  0022               	movlb	2	; select bank2
  8694  099E  064B               	xorwf	(??_set_subdivision+2)^(0+256),w
  8695  099F  1D03               	skipz
  8696  09A0  29AB               	goto	u6625
  8697  09A1  0021               	movlb	1	; select bank1
  8698  09A2  0829               	movf	(?___awtoft+1)^(0+128),w
  8699  09A3  0022               	movlb	2	; select bank2
  8700  09A4  064A               	xorwf	(??_set_subdivision+1)^(0+256),w
  8701  09A5  1D03               	skipz
  8702  09A6  29AB               	goto	u6625
  8703  09A7  0021               	movlb	1	; select bank1
  8704  09A8  0828               	movf	?___awtoft^(0+128),w
  8705  09A9  0022               	movlb	2	; select bank2
  8706  09AA  0649               	xorwf	??_set_subdivision^(0+256),w
  8707  09AB                     u6625:	
  8708  09AB  1903               	skipnz
  8709  09AC  29B2               	goto	l523
  8710  09AD  3001               	movlw	1
  8711  09AE  0023               	movlb	3	; select bank3
  8712  09AF  00C0               	movwf	_adjust_sub_delay^(0+384)
  8713  09B0  3000               	movlw	0
  8714  09B1  00C1               	movwf	(_adjust_sub_delay^(0+384)+1)
  8715  09B2                     l523:	
  8716                           
  8717                           ;user.c: 106: return tmpX;
  8718  09B2  0022               	movlb	2	; select bank2
  8719  09B3  084D               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8720  09B4  00C6               	movwf	(?_set_subdivision+1)^(0+256)
  8721  09B5  084C               	movf	set_subdivision@tmpX^(0+256),w
  8722  09B6  00C5               	movwf	?_set_subdivision^(0+256)
  8723  09B7  0008               	return
  8724  09B8                     __end_of_set_subdivision:	
  8725                           
  8726                           	psect	text14
  8727  16B8                     __ptext14:	
  8728 ;; *************** function ___fttol *****************
  8729 ;; Defined at:
  8730 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  f1              3   71[BANK1 ] float 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  lval            4    1[BANK2 ] unsigned long 
  8735 ;;  exp1            1    5[BANK2 ] unsigned char 
  8736 ;;  sign1           1    0[BANK2 ] unsigned char 
  8737 ;; Return value:  Size  Location     Type
  8738 ;;                  4   71[BANK1 ] long 
  8739 ;; Registers used:
  8740 ;;		wreg, status,2, status,0
  8741 ;; Tracked objects:
  8742 ;;		On entry : 0/0
  8743 ;;		On exit  : 0/0
  8744 ;;		Unchanged: 0/0
  8745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8746 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8747 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8748 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8749 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8750 ;;Total ram usage:       14 bytes
  8751 ;; Hardware stack levels used:    1
  8752 ;; Hardware stack levels required when called:    3
  8753 ;; This function calls:
  8754 ;;		Nothing
  8755 ;; This function is called by:
  8756 ;;		_main
  8757 ;;		_set_subdivision
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function ___fttol
  8763  16B8                     ___fttol:	
  8764                           
  8765                           ;incstack = 0
  8766                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8767  16B8  0021               	movlb	1	; select bank1
  8768  16B9  0867               	movf	___fttol@f1^(0+128),w
  8769  16BA  00EB               	movwf	??___fttol^(0+128)
  8770  16BB  0868               	movf	(___fttol@f1+1)^(0+128),w
  8771  16BC  00EC               	movwf	(??___fttol^(0+128)+1)
  8772  16BD  0869               	movf	(___fttol@f1+2)^(0+128),w
  8773  16BE  00ED               	movwf	(??___fttol^(0+128)+2)
  8774  16BF  1003               	clrc
  8775  16C0  0D6C               	rlf	(??___fttol^(0+128)+1),w
  8776  16C1  0D6D               	rlf	(??___fttol^(0+128)+2),w
  8777  16C2  00EE               	movwf	(??___fttol+3)^(0+128)
  8778  16C3  086E               	movf	(??___fttol+3)^(0+128),w
  8779  16C4  0022               	movlb	2	; select bank2
  8780  16C5  00C4               	movwf	___fttol@exp1^(0+256)
  8781  16C6  0844               	movf	___fttol@exp1^(0+256),w
  8782  16C7  1D03               	btfss	3,2
  8783  16C8  2ED3               	goto	l5374
  8784  16C9  3000               	movlw	0
  8785  16CA  0021               	movlb	1	; select bank1
  8786  16CB  00EA               	movwf	(?___fttol+3)^(0+128)
  8787  16CC  3000               	movlw	0
  8788  16CD  00E9               	movwf	(?___fttol+2)^(0+128)
  8789  16CE  3000               	movlw	0
  8790  16CF  00E8               	movwf	(?___fttol+1)^(0+128)
  8791  16D0  3000               	movlw	0
  8792  16D1  00E7               	movwf	?___fttol^(0+128)
  8793  16D2  0008               	return
  8794  16D3                     l5374:	
  8795  16D3  0021               	movlb	1	; select bank1
  8796  16D4  0867               	movf	___fttol@f1^(0+128),w
  8797  16D5  00EB               	movwf	??___fttol^(0+128)
  8798  16D6  0868               	movf	(___fttol@f1+1)^(0+128),w
  8799  16D7  00EC               	movwf	(??___fttol^(0+128)+1)
  8800  16D8  0869               	movf	(___fttol@f1+2)^(0+128),w
  8801  16D9  00ED               	movwf	(??___fttol^(0+128)+2)
  8802  16DA  3017               	movlw	23
  8803  16DB                     u5845:	
  8804  16DB  36ED               	lsrf	(??___fttol^(0+128)+2),f
  8805  16DC  0CEC               	rrf	(??___fttol^(0+128)+1),f
  8806  16DD  0CEB               	rrf	??___fttol^(0+128),f
  8807  16DE  0B89               	decfsz	9,f
  8808  16DF  2EDB               	goto	u5845
  8809  16E0  086B               	movf	??___fttol^(0+128),w
  8810  16E1  00EE               	movwf	(??___fttol+3)^(0+128)
  8811  16E2  086E               	movf	(??___fttol+3)^(0+128),w
  8812  16E3  0022               	movlb	2	; select bank2
  8813  16E4  00BF               	movwf	___fttol@sign1^(0+256)
  8814  16E5  0021               	movlb	1	; select bank1
  8815  16E6  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  8816  16E7  30FF               	movlw	255
  8817  16E8  05E7               	andwf	___fttol@f1^(0+128),f
  8818  16E9  30FF               	movlw	255
  8819  16EA  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  8820  16EB  3000               	movlw	0
  8821  16EC  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  8822  16ED  0867               	movf	___fttol@f1^(0+128),w
  8823  16EE  0022               	movlb	2	; select bank2
  8824  16EF  00C0               	movwf	___fttol@lval^(0+256)
  8825  16F0  0021               	movlb	1	; select bank1
  8826  16F1  0868               	movf	(___fttol@f1+1)^(0+128),w
  8827  16F2  0022               	movlb	2	; select bank2
  8828  16F3  00C1               	movwf	(___fttol@lval^(0+256)+1)
  8829  16F4  0021               	movlb	1	; select bank1
  8830  16F5  0869               	movf	(___fttol@f1+2)^(0+128),w
  8831  16F6  0022               	movlb	2	; select bank2
  8832  16F7  00C2               	movwf	(___fttol@lval^(0+256)+2)
  8833  16F8  01C3               	clrf	(___fttol@lval^(0+256)+3)
  8834  16F9  308E               	movlw	142
  8835  16FA  02C4               	subwf	___fttol@exp1^(0+256),f
  8836  16FB  1FC4               	btfss	___fttol@exp1^(0+256),7
  8837  16FC  2F1D               	goto	l5394
  8838  16FD  0844               	movf	___fttol@exp1^(0+256),w
  8839  16FE  3A80               	xorlw	128
  8840  16FF  3E8F               	addlw	143
  8841  1700  1803               	skipnc
  8842  1701  2F0C               	goto	l5392
  8843  1702  3000               	movlw	0
  8844  1703  0021               	movlb	1	; select bank1
  8845  1704  00EA               	movwf	(?___fttol+3)^(0+128)
  8846  1705  3000               	movlw	0
  8847  1706  00E9               	movwf	(?___fttol+2)^(0+128)
  8848  1707  3000               	movlw	0
  8849  1708  00E8               	movwf	(?___fttol+1)^(0+128)
  8850  1709  3000               	movlw	0
  8851  170A  00E7               	movwf	?___fttol^(0+128)
  8852  170B  0008               	return
  8853  170C                     l5392:	
  8854  170C  3001               	movlw	1
  8855  170D                     u5875:	
  8856  170D  0022               	movlb	2	; select bank2
  8857  170E  36C3               	lsrf	(___fttol@lval+3)^(0+256),f
  8858  170F  0CC2               	rrf	(___fttol@lval+2)^(0+256),f
  8859  1710  0CC1               	rrf	(___fttol@lval+1)^(0+256),f
  8860  1711  0CC0               	rrf	___fttol@lval^(0+256),f
  8861  1712  0B89               	decfsz	9,f
  8862  1713  2F0D               	goto	u5875
  8863  1714  3001               	movlw	1
  8864  1715  0021               	movlb	1	; select bank1
  8865  1716  00EB               	movwf	??___fttol^(0+128)
  8866  1717  086B               	movf	??___fttol^(0+128),w
  8867  1718  0022               	movlb	2	; select bank2
  8868  1719  07C4               	addwf	___fttol@exp1^(0+256),f
  8869  171A  1903               	btfsc	3,2
  8870  171B  2F39               	goto	l5402
  8871  171C  2F0C               	goto	l5392
  8872  171D                     l5394:	
  8873  171D  3018               	movlw	24
  8874  171E  0244               	subwf	___fttol@exp1^(0+256),w
  8875  171F  1C03               	skipc
  8876  1720  2F35               	goto	l1574
  8877  1721  3000               	movlw	0
  8878  1722  0021               	movlb	1	; select bank1
  8879  1723  00EA               	movwf	(?___fttol+3)^(0+128)
  8880  1724  3000               	movlw	0
  8881  1725  00E9               	movwf	(?___fttol+2)^(0+128)
  8882  1726  3000               	movlw	0
  8883  1727  00E8               	movwf	(?___fttol+1)^(0+128)
  8884  1728  3000               	movlw	0
  8885  1729  00E7               	movwf	?___fttol^(0+128)
  8886  172A  0008               	return
  8887  172B                     l5400:	
  8888  172B  3001               	movlw	1
  8889  172C                     u5905:	
  8890  172C  0022               	movlb	2	; select bank2
  8891  172D  35C0               	lslf	___fttol@lval^(0+256),f
  8892  172E  0DC1               	rlf	(___fttol@lval+1)^(0+256),f
  8893  172F  0DC2               	rlf	(___fttol@lval+2)^(0+256),f
  8894  1730  0DC3               	rlf	(___fttol@lval+3)^(0+256),f
  8895  1731  0B89               	decfsz	9,f
  8896  1732  2F2C               	goto	u5905
  8897  1733  3001               	movlw	1
  8898  1734  02C4               	subwf	___fttol@exp1^(0+256),f
  8899  1735                     l1574:	
  8900  1735  0022               	movlb	2	; select bank2
  8901  1736  0844               	movf	___fttol@exp1^(0+256),w
  8902  1737  1D03               	btfss	3,2
  8903  1738  2F2B               	goto	l5400
  8904  1739                     l5402:	
  8905  1739  083F               	movf	___fttol@sign1^(0+256),w
  8906  173A  1903               	btfsc	3,2
  8907  173B  2F47               	goto	l5406
  8908  173C  09C0               	comf	___fttol@lval^(0+256),f
  8909  173D  09C1               	comf	(___fttol@lval+1)^(0+256),f
  8910  173E  09C2               	comf	(___fttol@lval+2)^(0+256),f
  8911  173F  09C3               	comf	(___fttol@lval+3)^(0+256),f
  8912  1740  0AC0               	incf	___fttol@lval^(0+256),f
  8913  1741  1903               	skipnz
  8914  1742  0AC1               	incf	(___fttol@lval+1)^(0+256),f
  8915  1743  1903               	skipnz
  8916  1744  0AC2               	incf	(___fttol@lval+2)^(0+256),f
  8917  1745  1903               	skipnz
  8918  1746  0AC3               	incf	(___fttol@lval+3)^(0+256),f
  8919  1747                     l5406:	
  8920  1747  0843               	movf	(___fttol@lval+3)^(0+256),w
  8921  1748  0021               	movlb	1	; select bank1
  8922  1749  00EA               	movwf	(?___fttol+3)^(0+128)
  8923  174A  0022               	movlb	2	; select bank2
  8924  174B  0842               	movf	(___fttol@lval+2)^(0+256),w
  8925  174C  0021               	movlb	1	; select bank1
  8926  174D  00E9               	movwf	(?___fttol+2)^(0+128)
  8927  174E  0022               	movlb	2	; select bank2
  8928  174F  0841               	movf	(___fttol@lval+1)^(0+256),w
  8929  1750  0021               	movlb	1	; select bank1
  8930  1751  00E8               	movwf	(?___fttol+1)^(0+128)
  8931  1752  0022               	movlb	2	; select bank2
  8932  1753  0840               	movf	___fttol@lval^(0+256),w
  8933  1754  0021               	movlb	1	; select bank1
  8934  1755  00E7               	movwf	?___fttol^(0+128)
  8935  1756  0008               	return
  8936  1757                     __end_of___fttol:	
  8937                           
  8938                           	psect	text15
  8939  1E24                     __ptext15:	
  8940 ;; *************** function ___awtoft *****************
  8941 ;; Defined at:
  8942 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  8943 ;; Parameters:    Size  Location     Type
  8944 ;;  c               2    8[BANK1 ] int 
  8945 ;; Auto vars:     Size  Location     Type
  8946 ;;  sign            1   13[BANK1 ] unsigned char 
  8947 ;; Return value:  Size  Location     Type
  8948 ;;                  3    8[BANK1 ] float 
  8949 ;; Registers used:
  8950 ;;		wreg, status,2, status,0, pclath, cstack
  8951 ;; Tracked objects:
  8952 ;;		On entry : 0/0
  8953 ;;		On exit  : 0/0
  8954 ;;		Unchanged: 0/0
  8955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8956 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8957 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8958 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8959 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8960 ;;Total ram usage:        6 bytes
  8961 ;; Hardware stack levels used:    1
  8962 ;; Hardware stack levels required when called:    4
  8963 ;; This function calls:
  8964 ;;		___ftpack
  8965 ;; This function is called by:
  8966 ;;		_main
  8967 ;;		_set_subdivision
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           
  8972                           ;psect for function ___awtoft
  8973  1E24                     ___awtoft:	
  8974                           
  8975                           ;incstack = 0
  8976                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8977  1E24  0021               	movlb	1	; select bank1
  8978  1E25  01AD               	clrf	___awtoft@sign^(0+128)
  8979  1E26  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  8980  1E27  2E2F               	goto	l5194
  8981  1E28  09A8               	comf	___awtoft@c^(0+128),f
  8982  1E29  09A9               	comf	(___awtoft@c+1)^(0+128),f
  8983  1E2A  0AA8               	incf	___awtoft@c^(0+128),f
  8984  1E2B  1903               	skipnz
  8985  1E2C  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  8986  1E2D  01AD               	clrf	___awtoft@sign^(0+128)
  8987  1E2E  0AAD               	incf	___awtoft@sign^(0+128),f
  8988  1E2F                     l5194:	
  8989  1E2F  0828               	movf	___awtoft@c^(0+128),w
  8990  1E30  00A0               	movwf	___ftpack@arg^(0+128)
  8991  1E31  0829               	movf	(___awtoft@c+1)^(0+128),w
  8992  1E32  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  8993  1E33  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  8994  1E34  308E               	movlw	142
  8995  1E35  00AB               	movwf	??___awtoft^(0+128)
  8996  1E36  082B               	movf	??___awtoft^(0+128),w
  8997  1E37  00A3               	movwf	___ftpack@exp^(0+128)
  8998  1E38  082D               	movf	___awtoft@sign^(0+128),w
  8999  1E39  00AC               	movwf	(??___awtoft+1)^(0+128)
  9000  1E3A  082C               	movf	(??___awtoft+1)^(0+128),w
  9001  1E3B  00A4               	movwf	___ftpack@sign^(0+128)
  9002  1E3C  3193  23DF         	fcall	___ftpack
  9003  1E3E  0021               	movlb	1	; select bank1
  9004  1E3F  0820               	movf	?___ftpack^(0+128),w
  9005  1E40  00A8               	movwf	?___awtoft^(0+128)
  9006  1E41  0821               	movf	(?___ftpack+1)^(0+128),w
  9007  1E42  00A9               	movwf	(?___awtoft+1)^(0+128)
  9008  1E43  0822               	movf	(?___ftpack+2)^(0+128),w
  9009  1E44  00AA               	movwf	(?___awtoft+2)^(0+128)
  9010  1E45  0008               	return
  9011  1E46                     __end_of___awtoft:	
  9012                           
  9013                           	psect	text16
  9014  129A                     __ptext16:	
  9015 ;; *************** function _read_top_tactile *****************
  9016 ;; Defined at:
  9017 ;;		line 47 in file "tactiles.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;		None
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;		None
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  1    wreg      void 
  9024 ;; Registers used:
  9025 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9031 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9033 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9034 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9035 ;;Total ram usage:        1 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    5
  9038 ;; This function calls:
  9039 ;;		_set_leds_top
  9040 ;;		_wait_ms
  9041 ;; This function is called by:
  9042 ;;		_main
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _read_top_tactile
  9048  129A                     _read_top_tactile:	
  9049                           
  9050                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9054  129A  0020               	movlb	0	; select bank0
  9055  129B  1A8F               	btfsc	15,5	;volatile
  9056  129C  2AA4               	goto	l5492
  9057                           
  9058                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9059  129D  0022               	movlb	2	; select bank2
  9060  129E  083E               	movf	_topTactile_pressed^(0+256),w
  9061  129F  1903               	btfsc	3,2
  9062  12A0  2AAF               	goto	l856
  9063                           
  9064                           ;tactiles.c: 58: topTactile_pressed--;
  9065  12A1  3001               	movlw	1
  9066  12A2  02BE               	subwf	_topTactile_pressed^(0+256),f
  9067                           
  9068                           ;tactiles.c: 59: }
  9069                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9070  12A3  2AAF               	goto	l856
  9071  12A4                     l5492:	
  9072  12A4  3019               	movlw	25
  9073  12A5  0022               	movlb	2	; select bank2
  9074  12A6  023E               	subwf	_topTactile_pressed^(0+256),w
  9075  12A7  1803               	skipnc
  9076  12A8  2AAF               	goto	l856
  9077                           
  9078                           ;tactiles.c: 61: topTactile_pressed++;
  9079  12A9  3001               	movlw	1
  9080  12AA  0021               	movlb	1	; select bank1
  9081  12AB  00B2               	movwf	??_read_top_tactile^(0+128)
  9082  12AC  0832               	movf	??_read_top_tactile^(0+128),w
  9083  12AD  0022               	movlb	2	; select bank2
  9084  12AE  07BE               	addwf	_topTactile_pressed^(0+256),f
  9085  12AF                     l856:	
  9086                           
  9087                           ;tactiles.c: 62: }
  9088                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9089  12AF  083E               	movf	_topTactile_pressed^(0+256),w
  9090  12B0  1D03               	btfss	3,2
  9091  12B1  0008               	return
  9092                           
  9093                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9094  12B2  0020               	movlb	0	; select bank0
  9095  12B3  0864               	movf	_top_push_state,w
  9096  12B4  3E01               	addlw	1
  9097  12B5  00E4               	movwf	_top_push_state
  9098  12B6  3000               	movlw	0
  9099  12B7  3D65               	addwfc	_top_push_state+1,w
  9100  12B8  00E5               	movwf	_top_push_state+1
  9101                           
  9102                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9103  12B9  0865               	movf	_top_push_state+1,w
  9104  12BA  3A80               	xorlw	128
  9105  12BB  0021               	movlb	1	; select bank1
  9106  12BC  00B2               	movwf	??_read_top_tactile^(0+128)
  9107  12BD  3080               	movlw	128
  9108  12BE  0232               	subwf	??_read_top_tactile^(0+128),w
  9109  12BF  1D03               	skipz
  9110  12C0  2AC4               	goto	u6105
  9111  12C1  3007               	movlw	7
  9112  12C2  0020               	movlb	0	; select bank0
  9113  12C3  0264               	subwf	_top_push_state,w
  9114  12C4                     u6105:	
  9115  12C4  1C03               	skipc
  9116  12C5  2ACB               	goto	l5502
  9117                           
  9118                           ;tactiles.c: 70: top_push_state = 1;
  9119  12C6  3001               	movlw	1
  9120  12C7  0020               	movlb	0	; select bank0
  9121  12C8  00E4               	movwf	_top_push_state
  9122  12C9  3000               	movlw	0
  9123  12CA  00E5               	movwf	_top_push_state+1
  9124  12CB                     l5502:	
  9125                           
  9126                           ;tactiles.c: 71: }
  9127                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9128  12CB  0020               	movlb	0	; select bank0
  9129  12CC  0865               	movf	_top_push_state+1,w
  9130  12CD  0021               	movlb	1	; select bank1
  9131  12CE  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9132  12CF  0020               	movlb	0	; select bank0
  9133  12D0  0864               	movf	_top_push_state,w
  9134  12D1  0021               	movlb	1	; select bank1
  9135  12D2  00A0               	movwf	set_leds_top@x^(0+128)
  9136  12D3  3001               	movlw	1
  9137  12D4  00A2               	movwf	set_leds_top@ledState^(0+128)
  9138  12D5  3000               	movlw	0
  9139  12D6  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9140  12D7  3193  238B  3192   	fcall	_set_leds_top
  9141                           
  9142                           ;tactiles.c: 73: delay_time_changed = 1;
  9143  12DA  3001               	movlw	1
  9144  12DB  0023               	movlb	3	; select bank3
  9145  12DC  00E3               	movwf	_delay_time_changed^(0+384)
  9146  12DD  3000               	movlw	0
  9147  12DE  00E4               	movwf	(_delay_time_changed^(0+384)+1)
  9148  12DF                     l860:	
  9149                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9150                           
  9151  12DF  0020               	movlb	0	; select bank0
  9152  12E0  1E8F               	btfss	15,5	;volatile
  9153  12E1  2ADF               	goto	l860
  9154                           
  9155                           ;tactiles.c: 77: }
  9156                           ;tactiles.c: 78: wait_ms(20);
  9157  12E2  3014               	movlw	20
  9158  12E3  0021               	movlb	1	; select bank1
  9159  12E4  00AC               	movwf	wait_ms@timeSec^(0+128)
  9160  12E5  3000               	movlw	0
  9161  12E6  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9162  12E7  319F  2756         	fcall	_wait_ms
  9163  12E9  0008               	return
  9164  12EA                     __end_of_read_top_tactile:	
  9165                           
  9166                           	psect	text17
  9167  11C1                     __ptext17:	
  9168 ;; *************** function _read_bottom_tactile *****************
  9169 ;; Defined at:
  9170 ;;		line 17 in file "tactiles.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;		None
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;		None
  9175 ;; Return value:  Size  Location     Type
  9176 ;;                  1    wreg      void 
  9177 ;; Registers used:
  9178 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9185 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9186 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9187 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9188 ;;Total ram usage:        1 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    5
  9191 ;; This function calls:
  9192 ;;		_set_leds_bottom
  9193 ;;		_wait_ms
  9194 ;; This function is called by:
  9195 ;;		_main
  9196 ;; This function uses a non-reentrant model
  9197 ;;
  9198                           
  9199                           
  9200                           ;psect for function _read_bottom_tactile
  9201  11C1                     _read_bottom_tactile:	
  9202                           
  9203                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9207  11C1  0020               	movlb	0	; select bank0
  9208  11C2  1B0F               	btfsc	15,6	;volatile
  9209  11C3  29CB               	goto	l5472
  9210                           
  9211                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9212  11C4  0022               	movlb	2	; select bank2
  9213  11C5  0836               	movf	_bottomTactile_pressed^(0+256),w
  9214  11C6  1903               	btfsc	3,2
  9215  11C7  29D6               	goto	l844
  9216                           
  9217                           ;tactiles.c: 27: bottomTactile_pressed--;
  9218  11C8  3001               	movlw	1
  9219  11C9  02B6               	subwf	_bottomTactile_pressed^(0+256),f
  9220                           
  9221                           ;tactiles.c: 28: }
  9222                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9223  11CA  29D6               	goto	l844
  9224  11CB                     l5472:	
  9225  11CB  3019               	movlw	25
  9226  11CC  0022               	movlb	2	; select bank2
  9227  11CD  0236               	subwf	_bottomTactile_pressed^(0+256),w
  9228  11CE  1803               	skipnc
  9229  11CF  29D6               	goto	l844
  9230                           
  9231                           ;tactiles.c: 30: bottomTactile_pressed++;
  9232  11D0  3001               	movlw	1
  9233  11D1  0021               	movlb	1	; select bank1
  9234  11D2  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9235  11D3  0832               	movf	??_read_bottom_tactile^(0+128),w
  9236  11D4  0022               	movlb	2	; select bank2
  9237  11D5  07B6               	addwf	_bottomTactile_pressed^(0+256),f
  9238  11D6                     l844:	
  9239                           
  9240                           ;tactiles.c: 31: }
  9241                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9242  11D6  0836               	movf	_bottomTactile_pressed^(0+256),w
  9243  11D7  1D03               	btfss	3,2
  9244  11D8  0008               	return
  9245                           
  9246                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9247  11D9  0020               	movlb	0	; select bank0
  9248  11DA  0860               	movf	_bottom_push_state,w
  9249  11DB  3E01               	addlw	1
  9250  11DC  00E0               	movwf	_bottom_push_state
  9251  11DD  3000               	movlw	0
  9252  11DE  3D61               	addwfc	_bottom_push_state+1,w
  9253  11DF  00E1               	movwf	_bottom_push_state+1
  9254                           
  9255                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9256  11E0  0861               	movf	_bottom_push_state+1,w
  9257  11E1  3A80               	xorlw	128
  9258  11E2  0021               	movlb	1	; select bank1
  9259  11E3  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9260  11E4  3080               	movlw	128
  9261  11E5  0232               	subwf	??_read_bottom_tactile^(0+128),w
  9262  11E6  1D03               	skipz
  9263  11E7  29EB               	goto	u6045
  9264  11E8  3007               	movlw	7
  9265  11E9  0020               	movlb	0	; select bank0
  9266  11EA  0260               	subwf	_bottom_push_state,w
  9267  11EB                     u6045:	
  9268  11EB  1C03               	skipc
  9269  11EC  29F2               	goto	l5482
  9270                           
  9271                           ;tactiles.c: 37: bottom_push_state = 1;
  9272  11ED  3001               	movlw	1
  9273  11EE  0020               	movlb	0	; select bank0
  9274  11EF  00E0               	movwf	_bottom_push_state
  9275  11F0  3000               	movlw	0
  9276  11F1  00E1               	movwf	_bottom_push_state+1
  9277  11F2                     l5482:	
  9278                           
  9279                           ;tactiles.c: 38: }
  9280                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9281  11F2  0020               	movlb	0	; select bank0
  9282  11F3  0861               	movf	_bottom_push_state+1,w
  9283  11F4  0021               	movlb	1	; select bank1
  9284  11F5  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9285  11F6  0020               	movlb	0	; select bank0
  9286  11F7  0860               	movf	_bottom_push_state,w
  9287  11F8  0021               	movlb	1	; select bank1
  9288  11F9  00A0               	movwf	set_leds_bottom@x^(0+128)
  9289  11FA  319F  2788  3191   	fcall	_set_leds_bottom
  9290  11FD                     l848:	
  9291                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9292                           
  9293  11FD  0020               	movlb	0	; select bank0
  9294  11FE  1F0F               	btfss	15,6	;volatile
  9295  11FF  29FD               	goto	l848
  9296                           
  9297                           ;tactiles.c: 42: }
  9298                           ;tactiles.c: 43: wait_ms(20);
  9299  1200  3014               	movlw	20
  9300  1201  0021               	movlb	1	; select bank1
  9301  1202  00AC               	movwf	wait_ms@timeSec^(0+128)
  9302  1203  3000               	movlw	0
  9303  1204  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9304  1205  319F  2756         	fcall	_wait_ms
  9305  1207  0008               	return
  9306  1208                     __end_of_read_bottom_tactile:	
  9307                           
  9308                           	psect	text18
  9309  162D                     __ptext18:	
  9310 ;; *************** function _map *****************
  9311 ;; Defined at:
  9312 ;;		line 171 in file "user.c"
  9313 ;; Parameters:    Size  Location     Type
  9314 ;;  x               3   53[BANK1 ] float 
  9315 ;;  in_min          3   56[BANK1 ] float 
  9316 ;;  in_max          3   59[BANK1 ] float 
  9317 ;;  out_min         3   62[BANK1 ] float 
  9318 ;;  out_max         3   65[BANK1 ] float 
  9319 ;; Auto vars:     Size  Location     Type
  9320 ;;		None
  9321 ;; Return value:  Size  Location     Type
  9322 ;;                  3   53[BANK1 ] float 
  9323 ;; Registers used:
  9324 ;;		wreg, status,2, status,0, pclath, cstack
  9325 ;; Tracked objects:
  9326 ;;		On entry : 0/0
  9327 ;;		On exit  : 0/0
  9328 ;;		Unchanged: 0/0
  9329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9330 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9331 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9333 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9334 ;;Total ram usage:       18 bytes
  9335 ;; Hardware stack levels used:    1
  9336 ;; Hardware stack levels required when called:    5
  9337 ;; This function calls:
  9338 ;;		___ftadd
  9339 ;;		___ftdiv
  9340 ;;		___ftmul
  9341 ;;		___ftneg
  9342 ;; This function is called by:
  9343 ;;		_main
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           
  9348                           ;psect for function _map
  9349  162D                     _map:	
  9350                           
  9351                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9352                           
  9353                           ;incstack = 0
  9354                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9355  162D  0021               	movlb	1	; select bank1
  9356  162E  085B               	movf	map@in_max^(0+128),w
  9357  162F  00A8               	movwf	___ftadd@f1^(0+128)
  9358  1630  085C               	movf	(map@in_max+1)^(0+128),w
  9359  1631  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9360  1632  085D               	movf	(map@in_max+2)^(0+128),w
  9361  1633  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9362  1634  0858               	movf	map@in_min^(0+128),w
  9363  1635  00A0               	movwf	___ftneg@f1^(0+128)
  9364  1636  0859               	movf	(map@in_min+1)^(0+128),w
  9365  1637  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9366  1638  085A               	movf	(map@in_min+2)^(0+128),w
  9367  1639  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9368  163A  319D  252A  3196   	fcall	___ftneg
  9369  163D  0021               	movlb	1	; select bank1
  9370  163E  0820               	movf	?___ftneg^(0+128),w
  9371  163F  00AB               	movwf	___ftadd@f2^(0+128)
  9372  1640  0821               	movf	(?___ftneg+1)^(0+128),w
  9373  1641  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9374  1642  0822               	movf	(?___ftneg+2)^(0+128),w
  9375  1643  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9376  1644  318A  22A3  3196   	fcall	___ftadd
  9377  1647  0021               	movlb	1	; select bank1
  9378  1648  0828               	movf	?___ftadd^(0+128),w
  9379  1649  00C5               	movwf	___ftdiv@f2^(0+128)
  9380  164A  0829               	movf	(?___ftadd+1)^(0+128),w
  9381  164B  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  9382  164C  082A               	movf	(?___ftadd+2)^(0+128),w
  9383  164D  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  9384  164E  0861               	movf	map@out_max^(0+128),w
  9385  164F  00A8               	movwf	___ftadd@f1^(0+128)
  9386  1650  0862               	movf	(map@out_max+1)^(0+128),w
  9387  1651  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9388  1652  0863               	movf	(map@out_max+2)^(0+128),w
  9389  1653  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9390  1654  085E               	movf	map@out_min^(0+128),w
  9391  1655  00A0               	movwf	___ftneg@f1^(0+128)
  9392  1656  085F               	movf	(map@out_min+1)^(0+128),w
  9393  1657  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9394  1658  0860               	movf	(map@out_min+2)^(0+128),w
  9395  1659  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9396  165A  319D  252A  3196   	fcall	___ftneg
  9397  165D  0021               	movlb	1	; select bank1
  9398  165E  0820               	movf	?___ftneg^(0+128),w
  9399  165F  00AB               	movwf	___ftadd@f2^(0+128)
  9400  1660  0821               	movf	(?___ftneg+1)^(0+128),w
  9401  1661  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9402  1662  0822               	movf	(?___ftneg+2)^(0+128),w
  9403  1663  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9404  1664  318A  22A3  3196   	fcall	___ftadd
  9405  1667  0021               	movlb	1	; select bank1
  9406  1668  0828               	movf	?___ftadd^(0+128),w
  9407  1669  00B5               	movwf	___ftmul@f1^(0+128)
  9408  166A  0829               	movf	(?___ftadd+1)^(0+128),w
  9409  166B  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9410  166C  082A               	movf	(?___ftadd+2)^(0+128),w
  9411  166D  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9412  166E  0855               	movf	map@x^(0+128),w
  9413  166F  00A8               	movwf	___ftadd@f1^(0+128)
  9414  1670  0856               	movf	(map@x+1)^(0+128),w
  9415  1671  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9416  1672  0857               	movf	(map@x+2)^(0+128),w
  9417  1673  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9418  1674  0858               	movf	map@in_min^(0+128),w
  9419  1675  00A0               	movwf	___ftneg@f1^(0+128)
  9420  1676  0859               	movf	(map@in_min+1)^(0+128),w
  9421  1677  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9422  1678  085A               	movf	(map@in_min+2)^(0+128),w
  9423  1679  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9424  167A  319D  252A  3196   	fcall	___ftneg
  9425  167D  0021               	movlb	1	; select bank1
  9426  167E  0820               	movf	?___ftneg^(0+128),w
  9427  167F  00AB               	movwf	___ftadd@f2^(0+128)
  9428  1680  0821               	movf	(?___ftneg+1)^(0+128),w
  9429  1681  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9430  1682  0822               	movf	(?___ftneg+2)^(0+128),w
  9431  1683  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9432  1684  318A  22A3  3196   	fcall	___ftadd
  9433  1687  0021               	movlb	1	; select bank1
  9434  1688  0828               	movf	?___ftadd^(0+128),w
  9435  1689  00B8               	movwf	___ftmul@f2^(0+128)
  9436  168A  0829               	movf	(?___ftadd+1)^(0+128),w
  9437  168B  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9438  168C  082A               	movf	(?___ftadd+2)^(0+128),w
  9439  168D  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9440  168E  3188  203E  3196   	fcall	___ftmul
  9441  1691  0021               	movlb	1	; select bank1
  9442  1692  0835               	movf	?___ftmul^(0+128),w
  9443  1693  00C8               	movwf	___ftdiv@f1^(0+128)
  9444  1694  0836               	movf	(?___ftmul+1)^(0+128),w
  9445  1695  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  9446  1696  0837               	movf	(?___ftmul+2)^(0+128),w
  9447  1697  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  9448  1698  3197  2757  3196   	fcall	___ftdiv
  9449  169B  0021               	movlb	1	; select bank1
  9450  169C  0845               	movf	?___ftdiv^(0+128),w
  9451  169D  00E4               	movwf	_map$2172^(0+128)
  9452  169E  0846               	movf	(?___ftdiv+1)^(0+128),w
  9453  169F  00E5               	movwf	(_map$2172+1)^(0+128)
  9454  16A0  0847               	movf	(?___ftdiv+2)^(0+128),w
  9455  16A1  00E6               	movwf	(_map$2172+2)^(0+128)
  9456                           
  9457                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9458  16A2  085E               	movf	map@out_min^(0+128),w
  9459  16A3  00A8               	movwf	___ftadd@f1^(0+128)
  9460  16A4  085F               	movf	(map@out_min+1)^(0+128),w
  9461  16A5  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9462  16A6  0860               	movf	(map@out_min+2)^(0+128),w
  9463  16A7  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9464  16A8  0864               	movf	_map$2172^(0+128),w
  9465  16A9  00AB               	movwf	___ftadd@f2^(0+128)
  9466  16AA  0865               	movf	(_map$2172+1)^(0+128),w
  9467  16AB  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9468  16AC  0866               	movf	(_map$2172+2)^(0+128),w
  9469  16AD  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9470  16AE  318A  22A3         	fcall	___ftadd
  9471  16B0  0021               	movlb	1	; select bank1
  9472  16B1  0828               	movf	?___ftadd^(0+128),w
  9473  16B2  00D5               	movwf	?_map^(0+128)
  9474  16B3  0829               	movf	(?___ftadd+1)^(0+128),w
  9475  16B4  00D6               	movwf	(?_map+1)^(0+128)
  9476  16B5  082A               	movf	(?___ftadd+2)^(0+128),w
  9477  16B6  00D7               	movwf	(?_map+2)^(0+128)
  9478  16B7  0008               	return
  9479  16B8                     __end_of_map:	
  9480                           
  9481                           	psect	text19
  9482  1D2A                     __ptext19:	
  9483 ;; *************** function ___ftneg *****************
  9484 ;; Defined at:
  9485 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9486 ;; Parameters:    Size  Location     Type
  9487 ;;  f1              3    0[BANK1 ] float 
  9488 ;; Auto vars:     Size  Location     Type
  9489 ;;		None
  9490 ;; Return value:  Size  Location     Type
  9491 ;;                  3    0[BANK1 ] float 
  9492 ;; Registers used:
  9493 ;;		wreg
  9494 ;; Tracked objects:
  9495 ;;		On entry : 0/0
  9496 ;;		On exit  : 0/0
  9497 ;;		Unchanged: 0/0
  9498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9499 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9502 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9503 ;;Total ram usage:        3 bytes
  9504 ;; Hardware stack levels used:    1
  9505 ;; Hardware stack levels required when called:    3
  9506 ;; This function calls:
  9507 ;;		Nothing
  9508 ;; This function is called by:
  9509 ;;		_map
  9510 ;;		_scalePotValue
  9511 ;; This function uses a non-reentrant model
  9512 ;;
  9513                           
  9514                           
  9515                           ;psect for function ___ftneg
  9516  1D2A                     ___ftneg:	
  9517                           
  9518                           ;incstack = 0
  9519                           ; Regs used in ___ftneg: [wreg]
  9520  1D2A  0021               	movlb	1	; select bank1
  9521  1D2B  0822               	movf	(___ftneg@f1+2)^(0+128),w
  9522  1D2C  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  9523  1D2D  0420               	iorwf	___ftneg@f1^(0+128),w
  9524  1D2E  1903               	skipnz
  9525  1D2F  0008               	return
  9526  1D30  3080               	movlw	128
  9527  1D31  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  9528  1D32  0008               	return
  9529  1D33                     __end_of___ftneg:	
  9530                           
  9531                           	psect	text20
  9532  083E                     __ptext20:	
  9533 ;; *************** function ___ftmul *****************
  9534 ;; Defined at:
  9535 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;  f1              3   21[BANK1 ] float 
  9538 ;;  f2              3   24[BANK1 ] float 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
  9541 ;;  sign            1   36[BANK1 ] unsigned char 
  9542 ;;  cntr            1   35[BANK1 ] unsigned char 
  9543 ;;  exp             1   31[BANK1 ] unsigned char 
  9544 ;; Return value:  Size  Location     Type
  9545 ;;                  3   21[BANK1 ] float 
  9546 ;; Registers used:
  9547 ;;		wreg, status,2, status,0, pclath, cstack
  9548 ;; Tracked objects:
  9549 ;;		On entry : 0/0
  9550 ;;		On exit  : 0/0
  9551 ;;		Unchanged: 0/0
  9552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9553 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9554 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9555 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9556 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9557 ;;Total ram usage:       16 bytes
  9558 ;; Hardware stack levels used:    1
  9559 ;; Hardware stack levels required when called:    4
  9560 ;; This function calls:
  9561 ;;		___ftpack
  9562 ;; This function is called by:
  9563 ;;		_set_subdivision
  9564 ;;		_map
  9565 ;;		_scalePotValue
  9566 ;; This function uses a non-reentrant model
  9567 ;;
  9568                           
  9569                           
  9570                           ;psect for function ___ftmul
  9571  083E                     ___ftmul:	
  9572                           
  9573                           ;incstack = 0
  9574                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9575  083E  0021               	movlb	1	; select bank1
  9576  083F  0835               	movf	___ftmul@f1^(0+128),w
  9577  0840  00BB               	movwf	??___ftmul^(0+128)
  9578  0841  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9579  0842  00BC               	movwf	(??___ftmul^(0+128)+1)
  9580  0843  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9581  0844  00BD               	movwf	(??___ftmul^(0+128)+2)
  9582  0845  1003               	clrc
  9583  0846  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9584  0847  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9585  0848  00BE               	movwf	(??___ftmul+3)^(0+128)
  9586  0849  083E               	movf	(??___ftmul+3)^(0+128),w
  9587  084A  00BF               	movwf	___ftmul@exp^(0+128)
  9588  084B  083F               	movf	___ftmul@exp^(0+128),w
  9589  084C  1D03               	btfss	3,2
  9590  084D  2855               	goto	l5316
  9591  084E  3000               	movlw	0
  9592  084F  00B5               	movwf	?___ftmul^(0+128)
  9593  0850  3000               	movlw	0
  9594  0851  00B6               	movwf	(?___ftmul+1)^(0+128)
  9595  0852  3000               	movlw	0
  9596  0853  00B7               	movwf	(?___ftmul+2)^(0+128)
  9597  0854  0008               	return
  9598  0855                     l5316:	
  9599  0855  0838               	movf	___ftmul@f2^(0+128),w
  9600  0856  00BB               	movwf	??___ftmul^(0+128)
  9601  0857  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9602  0858  00BC               	movwf	(??___ftmul^(0+128)+1)
  9603  0859  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9604  085A  00BD               	movwf	(??___ftmul^(0+128)+2)
  9605  085B  1003               	clrc
  9606  085C  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9607  085D  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9608  085E  00BE               	movwf	(??___ftmul+3)^(0+128)
  9609  085F  083E               	movf	(??___ftmul+3)^(0+128),w
  9610  0860  00C4               	movwf	___ftmul@sign^(0+128)
  9611  0861  0844               	movf	___ftmul@sign^(0+128),w
  9612  0862  1D03               	btfss	3,2
  9613  0863  286B               	goto	l5322
  9614  0864  3000               	movlw	0
  9615  0865  00B5               	movwf	?___ftmul^(0+128)
  9616  0866  3000               	movlw	0
  9617  0867  00B6               	movwf	(?___ftmul+1)^(0+128)
  9618  0868  3000               	movlw	0
  9619  0869  00B7               	movwf	(?___ftmul+2)^(0+128)
  9620  086A  0008               	return
  9621  086B                     l5322:	
  9622  086B  0844               	movf	___ftmul@sign^(0+128),w
  9623  086C  3E7B               	addlw	123
  9624  086D  00BB               	movwf	??___ftmul^(0+128)
  9625  086E  083B               	movf	??___ftmul^(0+128),w
  9626  086F  07BF               	addwf	___ftmul@exp^(0+128),f
  9627  0870  0835               	movf	___ftmul@f1^(0+128),w
  9628  0871  00BB               	movwf	??___ftmul^(0+128)
  9629  0872  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9630  0873  00BC               	movwf	(??___ftmul^(0+128)+1)
  9631  0874  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9632  0875  00BD               	movwf	(??___ftmul^(0+128)+2)
  9633  0876  3010               	movlw	16
  9634  0877                     u5725:	
  9635  0877  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9636  0878  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9637  0879  0CBB               	rrf	??___ftmul^(0+128),f
  9638  087A  0B89               	decfsz	9,f
  9639  087B  2877               	goto	u5725
  9640  087C  083B               	movf	??___ftmul^(0+128),w
  9641  087D  00BE               	movwf	(??___ftmul+3)^(0+128)
  9642  087E  083E               	movf	(??___ftmul+3)^(0+128),w
  9643  087F  00C4               	movwf	___ftmul@sign^(0+128)
  9644  0880  0838               	movf	___ftmul@f2^(0+128),w
  9645  0881  00BB               	movwf	??___ftmul^(0+128)
  9646  0882  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9647  0883  00BC               	movwf	(??___ftmul^(0+128)+1)
  9648  0884  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9649  0885  00BD               	movwf	(??___ftmul^(0+128)+2)
  9650  0886  3010               	movlw	16
  9651  0887                     u5735:	
  9652  0887  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9653  0888  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9654  0889  0CBB               	rrf	??___ftmul^(0+128),f
  9655  088A  0B89               	decfsz	9,f
  9656  088B  2887               	goto	u5735
  9657  088C  083B               	movf	??___ftmul^(0+128),w
  9658  088D  00BE               	movwf	(??___ftmul+3)^(0+128)
  9659  088E  083E               	movf	(??___ftmul+3)^(0+128),w
  9660  088F  06C4               	xorwf	___ftmul@sign^(0+128),f
  9661  0890  3080               	movlw	128
  9662  0891  00BB               	movwf	??___ftmul^(0+128)
  9663  0892  083B               	movf	??___ftmul^(0+128),w
  9664  0893  05C4               	andwf	___ftmul@sign^(0+128),f
  9665  0894  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
  9666  0895  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
  9667  0896  30FF               	movlw	255
  9668  0897  05B8               	andwf	___ftmul@f2^(0+128),f
  9669  0898  30FF               	movlw	255
  9670  0899  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
  9671  089A  3000               	movlw	0
  9672  089B  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
  9673  089C  3000               	movlw	0
  9674  089D  00C0               	movwf	___ftmul@f3_as_product^(0+128)
  9675  089E  3000               	movlw	0
  9676  089F  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  9677  08A0  3000               	movlw	0
  9678  08A1  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  9679  08A2  3007               	movlw	7
  9680  08A3  00BB               	movwf	??___ftmul^(0+128)
  9681  08A4  083B               	movf	??___ftmul^(0+128),w
  9682  08A5  00C3               	movwf	___ftmul@cntr^(0+128)
  9683  08A6                     l5334:	
  9684  08A6  1C35               	btfss	___ftmul@f1^(0+128),0
  9685  08A7  28AE               	goto	l5338
  9686  08A8  0838               	movf	___ftmul@f2^(0+128),w
  9687  08A9  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9688  08AA  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9689  08AB  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9690  08AC  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9691  08AD  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9692  08AE                     l5338:	
  9693  08AE  3001               	movlw	1
  9694  08AF                     u5755:	
  9695  08AF  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9696  08B0  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9697  08B1  0CB5               	rrf	___ftmul@f1^(0+128),f
  9698  08B2  0B89               	decfsz	9,f
  9699  08B3  28AF               	goto	u5755
  9700  08B4  3001               	movlw	1
  9701  08B5                     u5765:	
  9702  08B5  35B8               	lslf	___ftmul@f2^(0+128),f
  9703  08B6  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
  9704  08B7  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
  9705  08B8  0B89               	decfsz	9,f
  9706  08B9  28B5               	goto	u5765
  9707  08BA  3001               	movlw	1
  9708  08BB  02C3               	subwf	___ftmul@cntr^(0+128),f
  9709  08BC  1D03               	btfss	3,2
  9710  08BD  28A6               	goto	l5334
  9711  08BE  3009               	movlw	9
  9712  08BF  00BB               	movwf	??___ftmul^(0+128)
  9713  08C0  083B               	movf	??___ftmul^(0+128),w
  9714  08C1  00C3               	movwf	___ftmul@cntr^(0+128)
  9715  08C2                     l5346:	
  9716  08C2  1C35               	btfss	___ftmul@f1^(0+128),0
  9717  08C3  28CA               	goto	l5350
  9718  08C4  0838               	movf	___ftmul@f2^(0+128),w
  9719  08C5  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9720  08C6  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9721  08C7  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9722  08C8  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9723  08C9  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9724  08CA                     l5350:	
  9725  08CA  3001               	movlw	1
  9726  08CB                     u5795:	
  9727  08CB  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9728  08CC  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9729  08CD  0CB5               	rrf	___ftmul@f1^(0+128),f
  9730  08CE  0B89               	decfsz	9,f
  9731  08CF  28CB               	goto	u5795
  9732  08D0  3001               	movlw	1
  9733  08D1                     u5805:	
  9734  08D1  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  9735  08D2  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  9736  08D3  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
  9737  08D4  0B89               	decfsz	9,f
  9738  08D5  28D1               	goto	u5805
  9739  08D6  3001               	movlw	1
  9740  08D7  02C3               	subwf	___ftmul@cntr^(0+128),f
  9741  08D8  1D03               	btfss	3,2
  9742  08D9  28C2               	goto	l5346
  9743  08DA  0840               	movf	___ftmul@f3_as_product^(0+128),w
  9744  08DB  00A0               	movwf	___ftpack@arg^(0+128)
  9745  08DC  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  9746  08DD  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9747  08DE  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  9748  08DF  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9749  08E0  083F               	movf	___ftmul@exp^(0+128),w
  9750  08E1  00BB               	movwf	??___ftmul^(0+128)
  9751  08E2  083B               	movf	??___ftmul^(0+128),w
  9752  08E3  00A3               	movwf	___ftpack@exp^(0+128)
  9753  08E4  0844               	movf	___ftmul@sign^(0+128),w
  9754  08E5  00BC               	movwf	(??___ftmul+1)^(0+128)
  9755  08E6  083C               	movf	(??___ftmul+1)^(0+128),w
  9756  08E7  00A4               	movwf	___ftpack@sign^(0+128)
  9757  08E8  3193  23DF         	fcall	___ftpack
  9758  08EA  0021               	movlb	1	; select bank1
  9759  08EB  0820               	movf	?___ftpack^(0+128),w
  9760  08EC  00B5               	movwf	?___ftmul^(0+128)
  9761  08ED  0821               	movf	(?___ftpack+1)^(0+128),w
  9762  08EE  00B6               	movwf	(?___ftmul+1)^(0+128)
  9763  08EF  0822               	movf	(?___ftpack+2)^(0+128),w
  9764  08F0  00B7               	movwf	(?___ftmul+2)^(0+128)
  9765  08F1  0008               	return
  9766  08F2                     __end_of___ftmul:	
  9767                           
  9768                           	psect	text21
  9769  1757                     __ptext21:	
  9770 ;; *************** function ___ftdiv *****************
  9771 ;; Defined at:
  9772 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9773 ;; Parameters:    Size  Location     Type
  9774 ;;  f2              3   37[BANK1 ] float 
  9775 ;;  f1              3   40[BANK1 ] float 
  9776 ;; Auto vars:     Size  Location     Type
  9777 ;;  f3              3   48[BANK1 ] float 
  9778 ;;  sign            1   52[BANK1 ] unsigned char 
  9779 ;;  exp             1   51[BANK1 ] unsigned char 
  9780 ;;  cntr            1   47[BANK1 ] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  3   37[BANK1 ] float 
  9783 ;; Registers used:
  9784 ;;		wreg, status,2, status,0, pclath, cstack
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9790 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9791 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9792 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9793 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9794 ;;Total ram usage:       16 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    4
  9797 ;; This function calls:
  9798 ;;		___ftpack
  9799 ;; This function is called by:
  9800 ;;		_main
  9801 ;;		_set_subdivision
  9802 ;;		_map
  9803 ;;		_scalePotValue
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           
  9808                           ;psect for function ___ftdiv
  9809  1757                     ___ftdiv:	
  9810                           
  9811                           ;incstack = 0
  9812                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9813  1757  0021               	movlb	1	; select bank1
  9814  1758  0848               	movf	___ftdiv@f1^(0+128),w
  9815  1759  00CB               	movwf	??___ftdiv^(0+128)
  9816  175A  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9817  175B  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9818  175C  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9819  175D  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9820  175E  1003               	clrc
  9821  175F  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9822  1760  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9823  1761  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9824  1762  084E               	movf	(??___ftdiv+3)^(0+128),w
  9825  1763  00D3               	movwf	___ftdiv@exp^(0+128)
  9826  1764  0853               	movf	___ftdiv@exp^(0+128),w
  9827  1765  1D03               	btfss	3,2
  9828  1766  2F6E               	goto	l5274
  9829  1767  3000               	movlw	0
  9830  1768  00C5               	movwf	?___ftdiv^(0+128)
  9831  1769  3000               	movlw	0
  9832  176A  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9833  176B  3000               	movlw	0
  9834  176C  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9835  176D  0008               	return
  9836  176E                     l5274:	
  9837  176E  0845               	movf	___ftdiv@f2^(0+128),w
  9838  176F  00CB               	movwf	??___ftdiv^(0+128)
  9839  1770  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9840  1771  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9841  1772  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9842  1773  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9843  1774  1003               	clrc
  9844  1775  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9845  1776  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9846  1777  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9847  1778  084E               	movf	(??___ftdiv+3)^(0+128),w
  9848  1779  00D4               	movwf	___ftdiv@sign^(0+128)
  9849  177A  0854               	movf	___ftdiv@sign^(0+128),w
  9850  177B  1D03               	btfss	3,2
  9851  177C  2F84               	goto	l5280
  9852  177D  3000               	movlw	0
  9853  177E  00C5               	movwf	?___ftdiv^(0+128)
  9854  177F  3000               	movlw	0
  9855  1780  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9856  1781  3000               	movlw	0
  9857  1782  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9858  1783  0008               	return
  9859  1784                     l5280:	
  9860  1784  3000               	movlw	0
  9861  1785  00D0               	movwf	___ftdiv@f3^(0+128)
  9862  1786  3000               	movlw	0
  9863  1787  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
  9864  1788  3000               	movlw	0
  9865  1789  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
  9866  178A  3089               	movlw	137
  9867  178B  0754               	addwf	___ftdiv@sign^(0+128),w
  9868  178C  00CB               	movwf	??___ftdiv^(0+128)
  9869  178D  084B               	movf	??___ftdiv^(0+128),w
  9870  178E  02D3               	subwf	___ftdiv@exp^(0+128),f
  9871  178F  0848               	movf	___ftdiv@f1^(0+128),w
  9872  1790  00CB               	movwf	??___ftdiv^(0+128)
  9873  1791  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9874  1792  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9875  1793  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9876  1794  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9877  1795  3010               	movlw	16
  9878  1796                     u5645:	
  9879  1796  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9880  1797  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9881  1798  0CCB               	rrf	??___ftdiv^(0+128),f
  9882  1799  0B89               	decfsz	9,f
  9883  179A  2F96               	goto	u5645
  9884  179B  084B               	movf	??___ftdiv^(0+128),w
  9885  179C  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9886  179D  084E               	movf	(??___ftdiv+3)^(0+128),w
  9887  179E  00D4               	movwf	___ftdiv@sign^(0+128)
  9888  179F  0845               	movf	___ftdiv@f2^(0+128),w
  9889  17A0  00CB               	movwf	??___ftdiv^(0+128)
  9890  17A1  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9891  17A2  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9892  17A3  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9893  17A4  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9894  17A5  3010               	movlw	16
  9895  17A6                     u5655:	
  9896  17A6  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9897  17A7  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9898  17A8  0CCB               	rrf	??___ftdiv^(0+128),f
  9899  17A9  0B89               	decfsz	9,f
  9900  17AA  2FA6               	goto	u5655
  9901  17AB  084B               	movf	??___ftdiv^(0+128),w
  9902  17AC  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9903  17AD  084E               	movf	(??___ftdiv+3)^(0+128),w
  9904  17AE  06D4               	xorwf	___ftdiv@sign^(0+128),f
  9905  17AF  3080               	movlw	128
  9906  17B0  00CB               	movwf	??___ftdiv^(0+128)
  9907  17B1  084B               	movf	??___ftdiv^(0+128),w
  9908  17B2  05D4               	andwf	___ftdiv@sign^(0+128),f
  9909  17B3  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
  9910  17B4  30FF               	movlw	255
  9911  17B5  05C8               	andwf	___ftdiv@f1^(0+128),f
  9912  17B6  30FF               	movlw	255
  9913  17B7  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
  9914  17B8  3000               	movlw	0
  9915  17B9  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
  9916  17BA  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
  9917  17BB  30FF               	movlw	255
  9918  17BC  05C5               	andwf	___ftdiv@f2^(0+128),f
  9919  17BD  30FF               	movlw	255
  9920  17BE  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
  9921  17BF  3000               	movlw	0
  9922  17C0  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
  9923  17C1  3018               	movlw	24
  9924  17C2  00CB               	movwf	??___ftdiv^(0+128)
  9925  17C3  084B               	movf	??___ftdiv^(0+128),w
  9926  17C4  00CF               	movwf	___ftdiv@cntr^(0+128)
  9927  17C5                     l5294:	
  9928  17C5  3001               	movlw	1
  9929  17C6                     u5665:	
  9930  17C6  35D0               	lslf	___ftdiv@f3^(0+128),f
  9931  17C7  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
  9932  17C8  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
  9933  17C9  0B89               	decfsz	9,f
  9934  17CA  2FC6               	goto	u5665
  9935  17CB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9936  17CC  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
  9937  17CD  1D03               	skipz
  9938  17CE  2FD5               	goto	u5675
  9939  17CF  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9940  17D0  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
  9941  17D1  1D03               	skipz
  9942  17D2  2FD5               	goto	u5675
  9943  17D3  0845               	movf	___ftdiv@f2^(0+128),w
  9944  17D4  0248               	subwf	___ftdiv@f1^(0+128),w
  9945  17D5                     u5675:	
  9946  17D5  1C03               	skipc
  9947  17D6  2FDE               	goto	l5302
  9948  17D7  0845               	movf	___ftdiv@f2^(0+128),w
  9949  17D8  02C8               	subwf	___ftdiv@f1^(0+128),f
  9950  17D9  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9951  17DA  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
  9952  17DB  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9953  17DC  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
  9954  17DD  1450               	bsf	___ftdiv@f3^(0+128),0
  9955  17DE                     l5302:	
  9956  17DE  3001               	movlw	1
  9957  17DF                     u5685:	
  9958  17DF  35C8               	lslf	___ftdiv@f1^(0+128),f
  9959  17E0  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
  9960  17E1  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
  9961  17E2  0B89               	decfsz	9,f
  9962  17E3  2FDF               	goto	u5685
  9963  17E4  3001               	movlw	1
  9964  17E5  02CF               	subwf	___ftdiv@cntr^(0+128),f
  9965  17E6  1D03               	btfss	3,2
  9966  17E7  2FC5               	goto	l5294
  9967  17E8  0850               	movf	___ftdiv@f3^(0+128),w
  9968  17E9  00A0               	movwf	___ftpack@arg^(0+128)
  9969  17EA  0851               	movf	(___ftdiv@f3+1)^(0+128),w
  9970  17EB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9971  17EC  0852               	movf	(___ftdiv@f3+2)^(0+128),w
  9972  17ED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9973  17EE  0853               	movf	___ftdiv@exp^(0+128),w
  9974  17EF  00CB               	movwf	??___ftdiv^(0+128)
  9975  17F0  084B               	movf	??___ftdiv^(0+128),w
  9976  17F1  00A3               	movwf	___ftpack@exp^(0+128)
  9977  17F2  0854               	movf	___ftdiv@sign^(0+128),w
  9978  17F3  00CC               	movwf	(??___ftdiv+1)^(0+128)
  9979  17F4  084C               	movf	(??___ftdiv+1)^(0+128),w
  9980  17F5  00A4               	movwf	___ftpack@sign^(0+128)
  9981  17F6  3193  23DF         	fcall	___ftpack
  9982  17F8  0021               	movlb	1	; select bank1
  9983  17F9  0820               	movf	?___ftpack^(0+128),w
  9984  17FA  00C5               	movwf	?___ftdiv^(0+128)
  9985  17FB  0821               	movf	(?___ftpack+1)^(0+128),w
  9986  17FC  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9987  17FD  0822               	movf	(?___ftpack+2)^(0+128),w
  9988  17FE  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9989  17FF  0008               	return
  9990  1800                     __end_of___ftdiv:	
  9991                           
  9992                           	psect	text22
  9993  0AA3                     __ptext22:	
  9994 ;; *************** function ___ftadd *****************
  9995 ;; Defined at:
  9996 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
  9997 ;; Parameters:    Size  Location     Type
  9998 ;;  f1              3    8[BANK1 ] float 
  9999 ;;  f2              3   11[BANK1 ] float 
 10000 ;; Auto vars:     Size  Location     Type
 10001 ;;  exp1            1   20[BANK1 ] unsigned char 
 10002 ;;  exp2            1   19[BANK1 ] unsigned char 
 10003 ;;  sign            1   18[BANK1 ] unsigned char 
 10004 ;; Return value:  Size  Location     Type
 10005 ;;                  3    8[BANK1 ] float 
 10006 ;; Registers used:
 10007 ;;		wreg, status,2, status,0, pclath, cstack
 10008 ;; Tracked objects:
 10009 ;;		On entry : 0/0
 10010 ;;		On exit  : 0/0
 10011 ;;		Unchanged: 0/0
 10012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10013 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10014 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10015 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10016 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10017 ;;Total ram usage:       13 bytes
 10018 ;; Hardware stack levels used:    1
 10019 ;; Hardware stack levels required when called:    4
 10020 ;; This function calls:
 10021 ;;		___ftpack
 10022 ;; This function is called by:
 10023 ;;		_map
 10024 ;;		_scalePotValue
 10025 ;; This function uses a non-reentrant model
 10026 ;;
 10027                           
 10028                           
 10029                           ;psect for function ___ftadd
 10030  0AA3                     ___ftadd:	
 10031                           
 10032                           ;incstack = 0
 10033                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10034  0AA3  0021               	movlb	1	; select bank1
 10035  0AA4  0828               	movf	___ftadd@f1^(0+128),w
 10036  0AA5  00AE               	movwf	??___ftadd^(0+128)
 10037  0AA6  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10038  0AA7  00AF               	movwf	(??___ftadd^(0+128)+1)
 10039  0AA8  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10040  0AA9  00B0               	movwf	(??___ftadd^(0+128)+2)
 10041  0AAA  1003               	clrc
 10042  0AAB  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10043  0AAC  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10044  0AAD  00B1               	movwf	(??___ftadd+3)^(0+128)
 10045  0AAE  0831               	movf	(??___ftadd+3)^(0+128),w
 10046  0AAF  00B4               	movwf	___ftadd@exp1^(0+128)
 10047  0AB0  082B               	movf	___ftadd@f2^(0+128),w
 10048  0AB1  00AE               	movwf	??___ftadd^(0+128)
 10049  0AB2  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10050  0AB3  00AF               	movwf	(??___ftadd^(0+128)+1)
 10051  0AB4  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10052  0AB5  00B0               	movwf	(??___ftadd^(0+128)+2)
 10053  0AB6  1003               	clrc
 10054  0AB7  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10055  0AB8  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10056  0AB9  00B1               	movwf	(??___ftadd+3)^(0+128)
 10057  0ABA  0831               	movf	(??___ftadd+3)^(0+128),w
 10058  0ABB  00B3               	movwf	___ftadd@exp2^(0+128)
 10059  0ABC  0834               	movf	___ftadd@exp1^(0+128),w
 10060  0ABD  1903               	btfsc	3,2
 10061  0ABE  2ACB               	goto	l5204
 10062  0ABF  0833               	movf	___ftadd@exp2^(0+128),w
 10063  0AC0  0234               	subwf	___ftadd@exp1^(0+128),w
 10064  0AC1  1803               	skipnc
 10065  0AC2  2AD2               	goto	l5208
 10066  0AC3  0334               	decf	___ftadd@exp1^(0+128),w
 10067  0AC4  3AFF               	xorlw	255
 10068  0AC5  0733               	addwf	___ftadd@exp2^(0+128),w
 10069  0AC6  00AE               	movwf	??___ftadd^(0+128)
 10070  0AC7  3019               	movlw	25
 10071  0AC8  022E               	subwf	??___ftadd^(0+128),w
 10072  0AC9  1C03               	skipc
 10073  0ACA  2AD2               	goto	l5208
 10074  0ACB                     l5204:	
 10075  0ACB  082B               	movf	___ftadd@f2^(0+128),w
 10076  0ACC  00A8               	movwf	?___ftadd^(0+128)
 10077  0ACD  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10078  0ACE  00A9               	movwf	(?___ftadd+1)^(0+128)
 10079  0ACF  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10080  0AD0  00AA               	movwf	(?___ftadd+2)^(0+128)
 10081  0AD1  0008               	return
 10082  0AD2                     l5208:	
 10083  0AD2  0833               	movf	___ftadd@exp2^(0+128),w
 10084  0AD3  1903               	btfsc	3,2
 10085  0AD4  0008               	return
 10086  0AD5  0834               	movf	___ftadd@exp1^(0+128),w
 10087  0AD6  0233               	subwf	___ftadd@exp2^(0+128),w
 10088  0AD7  1803               	skipnc
 10089  0AD8  2AE1               	goto	l5214
 10090  0AD9  0333               	decf	___ftadd@exp2^(0+128),w
 10091  0ADA  3AFF               	xorlw	255
 10092  0ADB  0734               	addwf	___ftadd@exp1^(0+128),w
 10093  0ADC  00AE               	movwf	??___ftadd^(0+128)
 10094  0ADD  3019               	movlw	25
 10095  0ADE  022E               	subwf	??___ftadd^(0+128),w
 10096  0ADF  1803               	btfsc	3,0
 10097  0AE0  0008               	return
 10098  0AE1                     l5214:	
 10099  0AE1  3006               	movlw	6
 10100  0AE2  00AE               	movwf	??___ftadd^(0+128)
 10101  0AE3  082E               	movf	??___ftadd^(0+128),w
 10102  0AE4  00B2               	movwf	___ftadd@sign^(0+128)
 10103  0AE5  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10104  0AE6  17B2               	bsf	___ftadd@sign^(0+128),7
 10105  0AE7  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10106  0AE8  1732               	bsf	___ftadd@sign^(0+128),6
 10107  0AE9  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10108  0AEA  30FF               	movlw	255
 10109  0AEB  05A8               	andwf	___ftadd@f1^(0+128),f
 10110  0AEC  30FF               	movlw	255
 10111  0AED  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10112  0AEE  3000               	movlw	0
 10113  0AEF  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10114  0AF0  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10115  0AF1  30FF               	movlw	255
 10116  0AF2  05AB               	andwf	___ftadd@f2^(0+128),f
 10117  0AF3  30FF               	movlw	255
 10118  0AF4  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10119  0AF5  3000               	movlw	0
 10120  0AF6  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10121  0AF7  0833               	movf	___ftadd@exp2^(0+128),w
 10122  0AF8  0234               	subwf	___ftadd@exp1^(0+128),w
 10123  0AF9  1803               	skipnc
 10124  0AFA  2B1D               	goto	l5236
 10125  0AFB                     l5226:	
 10126  0AFB  3001               	movlw	1
 10127  0AFC                     u5485:	
 10128  0AFC  35AB               	lslf	___ftadd@f2^(0+128),f
 10129  0AFD  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 10130  0AFE  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 10131  0AFF  0B89               	decfsz	9,f
 10132  0B00  2AFC               	goto	u5485
 10133  0B01  3001               	movlw	1
 10134  0B02  02B3               	subwf	___ftadd@exp2^(0+128),f
 10135  0B03  0833               	movf	___ftadd@exp2^(0+128),w
 10136  0B04  0634               	xorwf	___ftadd@exp1^(0+128),w
 10137  0B05  1903               	skipnz
 10138  0B06  2B18               	goto	l5234
 10139  0B07  3001               	movlw	1
 10140  0B08  02B2               	subwf	___ftadd@sign^(0+128),f
 10141  0B09  0832               	movf	___ftadd@sign^(0+128),w
 10142  0B0A  3907               	andlw	7
 10143  0B0B  1903               	btfsc	3,2
 10144  0B0C  2B18               	goto	l5234
 10145  0B0D  2AFB               	goto	l5226
 10146  0B0E                     l5232:	
 10147  0B0E  3001               	movlw	1
 10148  0B0F                     u5515:	
 10149  0B0F  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 10150  0B10  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 10151  0B11  0CA8               	rrf	___ftadd@f1^(0+128),f
 10152  0B12  0B89               	decfsz	9,f
 10153  0B13  2B0F               	goto	u5515
 10154  0B14  3001               	movlw	1
 10155  0B15  00AE               	movwf	??___ftadd^(0+128)
 10156  0B16  082E               	movf	??___ftadd^(0+128),w
 10157  0B17  07B4               	addwf	___ftadd@exp1^(0+128),f
 10158  0B18                     l5234:	
 10159  0B18  0834               	movf	___ftadd@exp1^(0+128),w
 10160  0B19  0633               	xorwf	___ftadd@exp2^(0+128),w
 10161  0B1A  1903               	btfsc	3,2
 10162  0B1B  2B42               	goto	l1514
 10163  0B1C  2B0E               	goto	l5232
 10164  0B1D                     l5236:	
 10165  0B1D  0834               	movf	___ftadd@exp1^(0+128),w
 10166  0B1E  0233               	subwf	___ftadd@exp2^(0+128),w
 10167  0B1F  1803               	skipnc
 10168  0B20  2B42               	goto	l1514
 10169  0B21                     l5238:	
 10170  0B21  3001               	movlw	1
 10171  0B22                     u5545:	
 10172  0B22  35A8               	lslf	___ftadd@f1^(0+128),f
 10173  0B23  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 10174  0B24  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 10175  0B25  0B89               	decfsz	9,f
 10176  0B26  2B22               	goto	u5545
 10177  0B27  3001               	movlw	1
 10178  0B28  02B4               	subwf	___ftadd@exp1^(0+128),f
 10179  0B29  0833               	movf	___ftadd@exp2^(0+128),w
 10180  0B2A  0634               	xorwf	___ftadd@exp1^(0+128),w
 10181  0B2B  1903               	skipnz
 10182  0B2C  2B3E               	goto	l5246
 10183  0B2D  3001               	movlw	1
 10184  0B2E  02B2               	subwf	___ftadd@sign^(0+128),f
 10185  0B2F  0832               	movf	___ftadd@sign^(0+128),w
 10186  0B30  3907               	andlw	7
 10187  0B31  1903               	btfsc	3,2
 10188  0B32  2B3E               	goto	l5246
 10189  0B33  2B21               	goto	l5238
 10190  0B34                     l5244:	
 10191  0B34  3001               	movlw	1
 10192  0B35                     u5575:	
 10193  0B35  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 10194  0B36  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 10195  0B37  0CAB               	rrf	___ftadd@f2^(0+128),f
 10196  0B38  0B89               	decfsz	9,f
 10197  0B39  2B35               	goto	u5575
 10198  0B3A  3001               	movlw	1
 10199  0B3B  00AE               	movwf	??___ftadd^(0+128)
 10200  0B3C  082E               	movf	??___ftadd^(0+128),w
 10201  0B3D  07B3               	addwf	___ftadd@exp2^(0+128),f
 10202  0B3E                     l5246:	
 10203  0B3E  0834               	movf	___ftadd@exp1^(0+128),w
 10204  0B3F  0633               	xorwf	___ftadd@exp2^(0+128),w
 10205  0B40  1D03               	skipz
 10206  0B41  2B34               	goto	l5244
 10207  0B42                     l1514:	
 10208  0B42  1FB2               	btfss	___ftadd@sign^(0+128),7
 10209  0B43  2B54               	goto	l5250
 10210  0B44  30FF               	movlw	255
 10211  0B45  06A8               	xorwf	___ftadd@f1^(0+128),f
 10212  0B46  30FF               	movlw	255
 10213  0B47  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 10214  0B48  30FF               	movlw	255
 10215  0B49  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 10216  0B4A  3001               	movlw	1
 10217  0B4B  07A8               	addwf	___ftadd@f1^(0+128),f
 10218  0B4C  3000               	movlw	0
 10219  0B4D  1803               	skipnc
 10220  0B4E  3001               	movlw	1
 10221  0B4F  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 10222  0B50  3000               	movlw	0
 10223  0B51  1803               	skipnc
 10224  0B52  3001               	movlw	1
 10225  0B53  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 10226  0B54                     l5250:	
 10227  0B54  1F32               	btfss	___ftadd@sign^(0+128),6
 10228  0B55  2B66               	goto	l5254
 10229  0B56  30FF               	movlw	255
 10230  0B57  06AB               	xorwf	___ftadd@f2^(0+128),f
 10231  0B58  30FF               	movlw	255
 10232  0B59  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10233  0B5A  30FF               	movlw	255
 10234  0B5B  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10235  0B5C  3001               	movlw	1
 10236  0B5D  07AB               	addwf	___ftadd@f2^(0+128),f
 10237  0B5E  3000               	movlw	0
 10238  0B5F  1803               	skipnc
 10239  0B60  3001               	movlw	1
 10240  0B61  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10241  0B62  3000               	movlw	0
 10242  0B63  1803               	skipnc
 10243  0B64  3001               	movlw	1
 10244  0B65  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10245  0B66                     l5254:	
 10246  0B66  01B2               	clrf	___ftadd@sign^(0+128)
 10247  0B67  0828               	movf	___ftadd@f1^(0+128),w
 10248  0B68  07AB               	addwf	___ftadd@f2^(0+128),f
 10249  0B69  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10250  0B6A  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 10251  0B6B  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10252  0B6C  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 10253  0B6D  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 10254  0B6E  2B81               	goto	l5264
 10255  0B6F  30FF               	movlw	255
 10256  0B70  06AB               	xorwf	___ftadd@f2^(0+128),f
 10257  0B71  30FF               	movlw	255
 10258  0B72  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10259  0B73  30FF               	movlw	255
 10260  0B74  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10261  0B75  3001               	movlw	1
 10262  0B76  07AB               	addwf	___ftadd@f2^(0+128),f
 10263  0B77  3000               	movlw	0
 10264  0B78  1803               	skipnc
 10265  0B79  3001               	movlw	1
 10266  0B7A  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10267  0B7B  3000               	movlw	0
 10268  0B7C  1803               	skipnc
 10269  0B7D  3001               	movlw	1
 10270  0B7E  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10271  0B7F  01B2               	clrf	___ftadd@sign^(0+128)
 10272  0B80  0AB2               	incf	___ftadd@sign^(0+128),f
 10273  0B81                     l5264:	
 10274  0B81  082B               	movf	___ftadd@f2^(0+128),w
 10275  0B82  00A0               	movwf	___ftpack@arg^(0+128)
 10276  0B83  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10277  0B84  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10278  0B85  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10279  0B86  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10280  0B87  0834               	movf	___ftadd@exp1^(0+128),w
 10281  0B88  00AE               	movwf	??___ftadd^(0+128)
 10282  0B89  082E               	movf	??___ftadd^(0+128),w
 10283  0B8A  00A3               	movwf	___ftpack@exp^(0+128)
 10284  0B8B  0832               	movf	___ftadd@sign^(0+128),w
 10285  0B8C  00AF               	movwf	(??___ftadd+1)^(0+128)
 10286  0B8D  082F               	movf	(??___ftadd+1)^(0+128),w
 10287  0B8E  00A4               	movwf	___ftpack@sign^(0+128)
 10288  0B8F  3193  23DF         	fcall	___ftpack
 10289  0B91  0021               	movlb	1	; select bank1
 10290  0B92  0820               	movf	?___ftpack^(0+128),w
 10291  0B93  00A8               	movwf	?___ftadd^(0+128)
 10292  0B94  0821               	movf	(?___ftpack+1)^(0+128),w
 10293  0B95  00A9               	movwf	(?___ftadd+1)^(0+128)
 10294  0B96  0822               	movf	(?___ftpack+2)^(0+128),w
 10295  0B97  00AA               	movwf	(?___ftadd+2)^(0+128)
 10296  0B98  0008               	return
 10297  0B99                     __end_of___ftadd:	
 10298                           
 10299                           	psect	text23
 10300  1D55                     __ptext23:	
 10301 ;; *************** function _initSwitchBypass *****************
 10302 ;; Defined at:
 10303 ;;		line 29 in file "SwitchBypass.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;		None
 10306 ;; Auto vars:     Size  Location     Type
 10307 ;;  initState       2   22[BANK1 ] int 
 10308 ;; Return value:  Size  Location     Type
 10309 ;;                  1    wreg      void 
 10310 ;; Registers used:
 10311 ;;		wreg, status,2, status,0, pclath, cstack
 10312 ;; Tracked objects:
 10313 ;;		On entry : 0/0
 10314 ;;		On exit  : 0/0
 10315 ;;		Unchanged: 0/0
 10316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10318 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10320 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10321 ;;Total ram usage:        2 bytes
 10322 ;; Hardware stack levels used:    1
 10323 ;; Hardware stack levels required when called:    6
 10324 ;; This function calls:
 10325 ;;		_getSwitchBypassState
 10326 ;;		_setSwitchBypassState
 10327 ;; This function is called by:
 10328 ;;		_main
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _initSwitchBypass
 10334  1D55                     _initSwitchBypass:	
 10335                           
 10336                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10340  1D55  3190  2000  319D   	fcall	_getSwitchBypassState
 10341  1D58  0021               	movlb	1	; select bank1
 10342  1D59  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 10343  1D5A  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 10344  1D5B  0820               	movf	?_getSwitchBypassState^(0+128),w
 10345  1D5C  00B6               	movwf	initSwitchBypass@initState^(0+128)
 10346                           
 10347                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10348  1D5D  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 10349  1D5E  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 10350  1D5F  0836               	movf	initSwitchBypass@initState^(0+128),w
 10351  1D60  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 10352  1D61  3192  2250         	fcall	_setSwitchBypassState
 10353  1D63  0008               	return
 10354  1D64                     __end_of_initSwitchBypass:	
 10355                           
 10356                           	psect	text24
 10357  1250                     __ptext24:	
 10358 ;; *************** function _setSwitchBypassState *****************
 10359 ;; Defined at:
 10360 ;;		line 134 in file "SwitchBypass.c"
 10361 ;; Parameters:    Size  Location     Type
 10362 ;;  f_state         2   18[BANK1 ] int 
 10363 ;; Auto vars:     Size  Location     Type
 10364 ;;		None
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  1    wreg      void 
 10367 ;; Registers used:
 10368 ;;		wreg, status,2, status,0, pclath, cstack
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10374 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10376 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10377 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10378 ;;Total ram usage:        4 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:    5
 10381 ;; This function calls:
 10382 ;;		_updateSwitchBypassState
 10383 ;;		_wait_ms
 10384 ;; This function is called by:
 10385 ;;		_initSwitchBypass
 10386 ;;		_updateSwitchBypass
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _setSwitchBypassState
 10392  1250                     _setSwitchBypassState:	
 10393                           
 10394                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10398  1250  0020               	movlb	0	; select bank0
 10399  1251  0869               	movf	_switchBypass_state,w
 10400  1252  0021               	movlb	1	; select bank1
 10401  1253  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10402  1254  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10403  1255  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 10404  1256  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 10405  1257  1D03               	skipz
 10406  1258  2A5B               	goto	u5215
 10407  1259  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10408  125A  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 10409  125B                     u5215:	
 10410  125B  1903               	btfsc	3,2
 10411  125C  0008               	return
 10412                           
 10413                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10414  125D  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10415  125E  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10416  125F  0834               	movf	??_setSwitchBypassState^(0+128),w
 10417  1260  0020               	movlb	0	; select bank0
 10418  1261  00E9               	movwf	_switchBypass_state
 10419                           
 10420                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10421  1262  0021               	movlb	1	; select bank1
 10422  1263  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10423  1264  0022               	movlb	2	; select bank2
 10424  1265  1C03               	skipc
 10425  1266  110D               	bcf	13,2	;volatile
 10426  1267  1803               	skipnc
 10427  1268  150D               	bsf	13,2	;volatile
 10428                           
 10429                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10430  1269  118D               	bcf	13,3	;volatile
 10431                           
 10432                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10433  126A  0021               	movlb	1	; select bank1
 10434  126B  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10435  126C  0027               	movlb	7	; select bank7
 10436  126D  1C03               	skipc
 10437  126E  110D               	bcf	13,2	;volatile
 10438  126F  1803               	skipnc
 10439  1270  150D               	bsf	13,2	;volatile
 10440                           
 10441                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10442  1271  0021               	movlb	1	; select bank1
 10443  1272  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10444  1273  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 10445  1274  1D03               	btfss	3,2
 10446  1275  2A79               	goto	u5220
 10447  1276  0027               	movlb	7	; select bank7
 10448  1277  148D               	bsf	13,1	;volatile
 10449  1278  2A7B               	goto	l5106
 10450  1279                     u5220:	
 10451  1279  0027               	movlb	7	; select bank7
 10452  127A  108D               	bcf	13,1	;volatile
 10453  127B                     l5106:	
 10454                           
 10455                           ;SwitchBypass.c: 142: wait_ms(20);
 10456  127B  3014               	movlw	20
 10457  127C  0021               	movlb	1	; select bank1
 10458  127D  00AC               	movwf	wait_ms@timeSec^(0+128)
 10459  127E  3000               	movlw	0
 10460  127F  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10461  1280  319F  2756  3192   	fcall	_wait_ms
 10462                           
 10463                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10464  1283  0027               	movlb	7	; select bank7
 10465  1284  110D               	bcf	13,2	;volatile
 10466                           
 10467                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10468  1285  108D               	bcf	13,1	;volatile
 10469                           
 10470                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10471  1286  0020               	movlb	0	; select bank0
 10472  1287  0869               	movf	_switchBypass_state,w
 10473  1288  0021               	movlb	1	; select bank1
 10474  1289  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10475  128A  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10476  128B  0834               	movf	??_setSwitchBypassState^(0+128),w
 10477  128C  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 10478  128D  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 10479  128E  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 10480  128F  3180  2002  3192   	fcall	_updateSwitchBypassState
 10481                           
 10482                           ;SwitchBypass.c: 148: wait_ms(20);
 10483  1292  3014               	movlw	20
 10484  1293  0021               	movlb	1	; select bank1
 10485  1294  00AC               	movwf	wait_ms@timeSec^(0+128)
 10486  1295  3000               	movlw	0
 10487  1296  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10488  1297  319F  2756         	fcall	_wait_ms
 10489  1299  0008               	return
 10490  129A                     __end_of_setSwitchBypassState:	
 10491                           
 10492                           	psect	text25
 10493  1F56                     __ptext25:	
 10494 ;; *************** function _wait_ms *****************
 10495 ;; Defined at:
 10496 ;;		line 23 in file "system.c"
 10497 ;; Parameters:    Size  Location     Type
 10498 ;;  timeSec         2   12[BANK1 ] unsigned int 
 10499 ;; Auto vars:     Size  Location     Type
 10500 ;;  timemsl         4   14[BANK1 ] long 
 10501 ;; Return value:  Size  Location     Type
 10502 ;;                  1    wreg      void 
 10503 ;; Registers used:
 10504 ;;		wreg, status,2, status,0, pclath, cstack
 10505 ;; Tracked objects:
 10506 ;;		On entry : 0/0
 10507 ;;		On exit  : 0/0
 10508 ;;		Unchanged: 0/0
 10509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10510 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10511 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10513 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10514 ;;Total ram usage:        6 bytes
 10515 ;; Hardware stack levels used:    1
 10516 ;; Hardware stack levels required when called:    4
 10517 ;; This function calls:
 10518 ;;		___lmul
 10519 ;; This function is called by:
 10520 ;;		_star_tactiles
 10521 ;;		_solidring_tactiles
 10522 ;;		_read_bottom_tactile
 10523 ;;		_read_top_tactile
 10524 ;;		_setSwitchBypassState
 10525 ;;		_setDoublePressState
 10526 ;;		_showError_Alternating
 10527 ;;		_show_error
 10528 ;;		_show_cancel
 10529 ;;		_ring_tactiles
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           
 10534                           ;psect for function _wait_ms
 10535  1F56                     _wait_ms:	
 10536                           
 10537                           ;system.c: 25: long timemsl = 0;
 10538                           
 10539                           ;incstack = 0
 10540                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10541  1F56  3000               	movlw	0
 10542  1F57  0021               	movlb	1	; select bank1
 10543  1F58  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10544  1F59  3000               	movlw	0
 10545  1F5A  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10546  1F5B  3000               	movlw	0
 10547  1F5C  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10548  1F5D  3000               	movlw	0
 10549  1F5E  00AE               	movwf	wait_ms@timemsl^(0+128)
 10550                           
 10551                           ;system.c: 26: timemsl = timeSec * 1000l;
 10552  1F5F  082C               	movf	wait_ms@timeSec^(0+128),w
 10553  1F60  00A0               	movwf	___lmul@multiplier^(0+128)
 10554  1F61  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 10555  1F62  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 10556  1F63  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 10557  1F64  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 10558  1F65  3000               	movlw	0
 10559  1F66  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 10560  1F67  3000               	movlw	0
 10561  1F68  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 10562  1F69  3003               	movlw	3
 10563  1F6A  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 10564  1F6B  30E8               	movlw	232
 10565  1F6C  00A4               	movwf	___lmul@multiplicand^(0+128)
 10566  1F6D  319E  26F6  319F   	fcall	___lmul
 10567  1F70  0021               	movlb	1	; select bank1
 10568  1F71  0823               	movf	(?___lmul+3)^(0+128),w
 10569  1F72  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10570  1F73  0822               	movf	(?___lmul+2)^(0+128),w
 10571  1F74  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10572  1F75  0821               	movf	(?___lmul+1)^(0+128),w
 10573  1F76  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10574  1F77  0820               	movf	?___lmul^(0+128),w
 10575  1F78  00AE               	movwf	wait_ms@timemsl^(0+128)
 10576  1F79                     l348:	
 10577                           ;system.c: 27: for( ; timemsl; timemsl--);
 10578                           
 10579  1F79  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 10580  1F7A  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 10581  1F7B  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 10582  1F7C  042E               	iorwf	wait_ms@timemsl^(0+128),w
 10583  1F7D  1903               	btfsc	3,2
 10584  1F7E  0008               	return
 10585  1F7F  30FF               	movlw	255
 10586  1F80  07AE               	addwf	wait_ms@timemsl^(0+128),f
 10587  1F81  30FF               	movlw	255
 10588  1F82  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 10589  1F83  30FF               	movlw	255
 10590  1F84  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 10591  1F85  30FF               	movlw	255
 10592  1F86  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 10593  1F87  2F79               	goto	l348
 10594  1F88                     __end_of_wait_ms:	
 10595                           
 10596                           	psect	text26
 10597  1EF6                     __ptext26:	
 10598 ;; *************** function ___lmul *****************
 10599 ;; Defined at:
 10600 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10601 ;; Parameters:    Size  Location     Type
 10602 ;;  multiplier      4    0[BANK1 ] unsigned long 
 10603 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  product         4    8[BANK1 ] unsigned long 
 10606 ;; Return value:  Size  Location     Type
 10607 ;;                  4    0[BANK1 ] unsigned long 
 10608 ;; Registers used:
 10609 ;;		wreg, status,2, status,0
 10610 ;; Tracked objects:
 10611 ;;		On entry : 0/0
 10612 ;;		On exit  : 0/0
 10613 ;;		Unchanged: 0/0
 10614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10615 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10616 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10618 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10619 ;;Total ram usage:       12 bytes
 10620 ;; Hardware stack levels used:    1
 10621 ;; Hardware stack levels required when called:    3
 10622 ;; This function calls:
 10623 ;;		Nothing
 10624 ;; This function is called by:
 10625 ;;		_wait_ms
 10626 ;; This function uses a non-reentrant model
 10627 ;;
 10628                           
 10629                           
 10630                           ;psect for function ___lmul
 10631  1EF6                     ___lmul:	
 10632                           
 10633                           ;incstack = 0
 10634                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10635  1EF6  3000               	movlw	0
 10636  1EF7  0021               	movlb	1	; select bank1
 10637  1EF8  00AB               	movwf	(___lmul@product+3)^(0+128)
 10638  1EF9  3000               	movlw	0
 10639  1EFA  00AA               	movwf	(___lmul@product+2)^(0+128)
 10640  1EFB  3000               	movlw	0
 10641  1EFC  00A9               	movwf	(___lmul@product+1)^(0+128)
 10642  1EFD  3000               	movlw	0
 10643  1EFE  00A8               	movwf	___lmul@product^(0+128)
 10644  1EFF                     l4904:	
 10645  1EFF  1C20               	btfss	___lmul@multiplier^(0+128),0
 10646  1F00  2F09               	goto	l4908
 10647  1F01  0824               	movf	___lmul@multiplicand^(0+128),w
 10648  1F02  07A8               	addwf	___lmul@product^(0+128),f
 10649  1F03  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 10650  1F04  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 10651  1F05  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 10652  1F06  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 10653  1F07  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 10654  1F08  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 10655  1F09                     l4908:	
 10656  1F09  3001               	movlw	1
 10657  1F0A                     u5005:	
 10658  1F0A  35A4               	lslf	___lmul@multiplicand^(0+128),f
 10659  1F0B  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 10660  1F0C  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 10661  1F0D  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 10662  1F0E  0B89               	decfsz	9,f
 10663  1F0F  2F0A               	goto	u5005
 10664  1F10  3001               	movlw	1
 10665  1F11                     u5015:	
 10666  1F11  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 10667  1F12  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 10668  1F13  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 10669  1F14  0CA0               	rrf	___lmul@multiplier^(0+128),f
 10670  1F15  0B89               	decfsz	9,f
 10671  1F16  2F11               	goto	u5015
 10672  1F17  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 10673  1F18  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 10674  1F19  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 10675  1F1A  0420               	iorwf	___lmul@multiplier^(0+128),w
 10676  1F1B  1D03               	skipz
 10677  1F1C  2EFF               	goto	l4904
 10678  1F1D  082B               	movf	(___lmul@product+3)^(0+128),w
 10679  1F1E  00A3               	movwf	(?___lmul+3)^(0+128)
 10680  1F1F  082A               	movf	(___lmul@product+2)^(0+128),w
 10681  1F20  00A2               	movwf	(?___lmul+2)^(0+128)
 10682  1F21  0829               	movf	(___lmul@product+1)^(0+128),w
 10683  1F22  00A1               	movwf	(?___lmul+1)^(0+128)
 10684  1F23  0828               	movf	___lmul@product^(0+128),w
 10685  1F24  00A0               	movwf	?___lmul^(0+128)
 10686  1F25  0008               	return
 10687  1F26                     __end_of___lmul:	
 10688                           
 10689                           	psect	text27
 10690  0002                     __ptext27:	
 10691 ;; *************** function _updateSwitchBypassState *****************
 10692 ;; Defined at:
 10693 ;;		line 96 in file "state_manager.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;  state           2    0[BANK1 ] int 
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  1    wreg      void 
 10700 ;; Registers used:
 10701 ;;		None
 10702 ;; Tracked objects:
 10703 ;;		On entry : 0/0
 10704 ;;		On exit  : 0/0
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10707 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10710 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10711 ;;Total ram usage:        2 bytes
 10712 ;; Hardware stack levels used:    1
 10713 ;; Hardware stack levels required when called:    3
 10714 ;; This function calls:
 10715 ;;		Nothing
 10716 ;; This function is called by:
 10717 ;;		_setSwitchBypassState
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721                           
 10722                           ;psect for function _updateSwitchBypassState
 10723  0002                     _updateSwitchBypassState:	
 10724                           
 10725                           ;incstack = 0
 10726                           ; Regs used in _updateSwitchBypassState: []
 10727  0002  0008               	return
 10728  0003                     __end_of_updateSwitchBypassState:	
 10729                           
 10730                           	psect	text28
 10731  1000                     __ptext28:	
 10732 ;; *************** function _getSwitchBypassState *****************
 10733 ;; Defined at:
 10734 ;;		line 103 in file "state_manager.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;		None
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  2    0[BANK1 ] int 
 10741 ;; Registers used:
 10742 ;;		status,2
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10748 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10751 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10752 ;;Total ram usage:        2 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    3
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_initSwitchBypass
 10759 ;; This function uses a non-reentrant model
 10760 ;;
 10761                           
 10762                           
 10763                           ;psect for function _getSwitchBypassState
 10764  1000                     _getSwitchBypassState:	
 10765                           
 10766                           ;state_manager.c: 108: return 0;
 10767                           
 10768                           ;incstack = 0
 10769                           ; Regs used in _getSwitchBypassState: [status,2]
 10770  1000  0021               	movlb	1	; select bank1
 10771  1001  01A0               	clrf	?_getSwitchBypassState^(0+128)
 10772  1002  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 10773  1003  0008               	return
 10774  1004                     __end_of_getSwitchBypassState:	
 10775                           
 10776                           	psect	text29
 10777  1D87                     __ptext29:	
 10778 ;; *************** function _adc_convert *****************
 10779 ;; Defined at:
 10780 ;;		line 116 in file "user.c"
 10781 ;; Parameters:    Size  Location     Type
 10782 ;;  channel         1    wreg     unsigned char 
 10783 ;; Auto vars:     Size  Location     Type
 10784 ;;  channel         1    3[BANK1 ] unsigned char 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  2    0[BANK1 ] unsigned int 
 10787 ;; Registers used:
 10788 ;;		wreg, status,2, status,0
 10789 ;; Tracked objects:
 10790 ;;		On entry : 0/0
 10791 ;;		On exit  : 0/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10794 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10795 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10796 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10797 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10798 ;;Total ram usage:        4 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    3
 10801 ;; This function calls:
 10802 ;;		Nothing
 10803 ;; This function is called by:
 10804 ;;		_main
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           
 10809                           ;psect for function _adc_convert
 10810  1D87                     _adc_convert:	
 10811                           
 10812                           ;incstack = 0
 10813                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 10814                           ;adc_convert@channel stored from wreg
 10815  1D87  0021               	movlb	1	; select bank1
 10816  1D88  00A3               	movwf	adc_convert@channel^(0+128)
 10817                           
 10818                           ;user.c: 117: ADCON0bits.CHS = channel;
 10819  1D89  0823               	movf	adc_convert@channel^(0+128),w
 10820  1D8A  00A2               	movwf	??_adc_convert^(0+128)
 10821  1D8B  0DA2               	rlf	??_adc_convert^(0+128),f
 10822  1D8C  0DA2               	rlf	??_adc_convert^(0+128),f
 10823  1D8D  081D               	movf	29,w	;volatile
 10824  1D8E  0622               	xorwf	??_adc_convert^(0+128),w
 10825  1D8F  3983               	andlw	-125
 10826  1D90  0622               	xorwf	??_adc_convert^(0+128),w
 10827  1D91  009D               	movwf	29	;volatile
 10828                           
 10829                           ;user.c: 118: ADCON0bits.GO = 0b1;
 10830  1D92  149D               	bsf	29,1	;volatile
 10831  1D93                     l530:	
 10832                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 10833                           
 10834  1D93  189D               	btfsc	29,1	;volatile
 10835  1D94  2D93               	goto	l530
 10836                           
 10837                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 10838  1D95  081C               	movf	28,w	;volatile
 10839  1D96  00A1               	movwf	(?_adc_convert+1)^(0+128)
 10840  1D97  081B               	movf	27,w	;volatile
 10841  1D98  00A0               	movwf	?_adc_convert^(0+128)
 10842  1D99  0008               	return
 10843  1D9A                     __end_of_adc_convert:	
 10844                           
 10845                           	psect	text30
 10846  1FC3                     __ptext30:	
 10847 ;; *************** function ___altoft *****************
 10848 ;; Defined at:
 10849 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;  c               4    8[BANK1 ] long 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  sign            1   15[BANK1 ] unsigned char 
 10854 ;;  exp             1   14[BANK1 ] unsigned char 
 10855 ;; Return value:  Size  Location     Type
 10856 ;;                  3    8[BANK1 ] float 
 10857 ;; Registers used:
 10858 ;;		wreg, status,2, status,0, pclath, cstack
 10859 ;; Tracked objects:
 10860 ;;		On entry : 0/0
 10861 ;;		On exit  : 0/0
 10862 ;;		Unchanged: 0/0
 10863 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10864 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10865 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10866 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10867 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10868 ;;Total ram usage:        8 bytes
 10869 ;; Hardware stack levels used:    1
 10870 ;; Hardware stack levels required when called:    4
 10871 ;; This function calls:
 10872 ;;		___ftpack
 10873 ;; This function is called by:
 10874 ;;		_main
 10875 ;; This function uses a non-reentrant model
 10876 ;;
 10877                           
 10878                           
 10879                           ;psect for function ___altoft
 10880  1FC3                     ___altoft:	
 10881                           
 10882                           ;incstack = 0
 10883                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 10884  1FC3  0021               	movlb	1	; select bank1
 10885  1FC4  01AF               	clrf	___altoft@sign^(0+128)
 10886  1FC5  308E               	movlw	142
 10887  1FC6  00AC               	movwf	??___altoft^(0+128)
 10888  1FC7  082C               	movf	??___altoft^(0+128),w
 10889  1FC8  00AE               	movwf	___altoft@exp^(0+128)
 10890  1FC9  1FAB               	btfss	(___altoft@c+3)^(0+128),7
 10891  1FCA  2FD8               	goto	l5800
 10892  1FCB  09A8               	comf	___altoft@c^(0+128),f
 10893  1FCC  09A9               	comf	(___altoft@c+1)^(0+128),f
 10894  1FCD  09AA               	comf	(___altoft@c+2)^(0+128),f
 10895  1FCE  09AB               	comf	(___altoft@c+3)^(0+128),f
 10896  1FCF  0AA8               	incf	___altoft@c^(0+128),f
 10897  1FD0  1903               	skipnz
 10898  1FD1  0AA9               	incf	(___altoft@c+1)^(0+128),f
 10899  1FD2  1903               	skipnz
 10900  1FD3  0AAA               	incf	(___altoft@c+2)^(0+128),f
 10901  1FD4  1903               	skipnz
 10902  1FD5  0AAB               	incf	(___altoft@c+3)^(0+128),f
 10903  1FD6  01AF               	clrf	___altoft@sign^(0+128)
 10904  1FD7  0AAF               	incf	___altoft@sign^(0+128),f
 10905  1FD8                     l5800:	
 10906  1FD8  30FF               	movlw	255
 10907  1FD9  052B               	andwf	(___altoft@c+3)^(0+128),w
 10908  1FDA  1903               	btfsc	3,2
 10909  1FDB  2FE8               	goto	l5802
 10910  1FDC  3001               	movlw	1
 10911  1FDD                     u6645:	
 10912  1FDD  36AB               	lsrf	(___altoft@c+3)^(0+128),f
 10913  1FDE  0CAA               	rrf	(___altoft@c+2)^(0+128),f
 10914  1FDF  0CA9               	rrf	(___altoft@c+1)^(0+128),f
 10915  1FE0  0CA8               	rrf	___altoft@c^(0+128),f
 10916  1FE1  0B89               	decfsz	9,f
 10917  1FE2  2FDD               	goto	u6645
 10918  1FE3  3001               	movlw	1
 10919  1FE4  00AC               	movwf	??___altoft^(0+128)
 10920  1FE5  082C               	movf	??___altoft^(0+128),w
 10921  1FE6  07AE               	addwf	___altoft@exp^(0+128),f
 10922  1FE7  2FD8               	goto	l5800
 10923  1FE8                     l5802:	
 10924  1FE8  0828               	movf	___altoft@c^(0+128),w
 10925  1FE9  00A0               	movwf	___ftpack@arg^(0+128)
 10926  1FEA  0829               	movf	(___altoft@c+1)^(0+128),w
 10927  1FEB  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10928  1FEC  082A               	movf	(___altoft@c+2)^(0+128),w
 10929  1FED  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10930  1FEE  082E               	movf	___altoft@exp^(0+128),w
 10931  1FEF  00AC               	movwf	??___altoft^(0+128)
 10932  1FF0  082C               	movf	??___altoft^(0+128),w
 10933  1FF1  00A3               	movwf	___ftpack@exp^(0+128)
 10934  1FF2  082F               	movf	___altoft@sign^(0+128),w
 10935  1FF3  00AD               	movwf	(??___altoft+1)^(0+128)
 10936  1FF4  082D               	movf	(??___altoft+1)^(0+128),w
 10937  1FF5  00A4               	movwf	___ftpack@sign^(0+128)
 10938  1FF6  3193  23DF         	fcall	___ftpack
 10939  1FF8  0021               	movlb	1	; select bank1
 10940  1FF9  0820               	movf	?___ftpack^(0+128),w
 10941  1FFA  00A8               	movwf	?___altoft^(0+128)
 10942  1FFB  0821               	movf	(?___ftpack+1)^(0+128),w
 10943  1FFC  00A9               	movwf	(?___altoft+1)^(0+128)
 10944  1FFD  0822               	movf	(?___ftpack+2)^(0+128),w
 10945  1FFE  00AA               	movwf	(?___altoft+2)^(0+128)
 10946  1FFF  0008               	return
 10947  2000                     __end_of___altoft:	
 10948                           
 10949                           	psect	text31
 10950  13DF                     __ptext31:	
 10951 ;; *************** function ___ftpack *****************
 10952 ;; Defined at:
 10953 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;  arg             3    0[BANK1 ] unsigned um
 10956 ;;  exp             1    3[BANK1 ] unsigned char 
 10957 ;;  sign            1    4[BANK1 ] unsigned char 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;		None
 10960 ;; Return value:  Size  Location     Type
 10961 ;;                  3    0[BANK1 ] float 
 10962 ;; Registers used:
 10963 ;;		wreg, status,2, status,0
 10964 ;; Tracked objects:
 10965 ;;		On entry : 0/0
 10966 ;;		On exit  : 0/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10969 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10971 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10972 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10973 ;;Total ram usage:        8 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    3
 10976 ;; This function calls:
 10977 ;;		Nothing
 10978 ;; This function is called by:
 10979 ;;		___altoft
 10980 ;;		___awtoft
 10981 ;;		___ftadd
 10982 ;;		___ftdiv
 10983 ;;		___ftmul
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           
 10988                           ;psect for function ___ftpack
 10989  13DF                     ___ftpack:	
 10990                           
 10991                           ;incstack = 0
 10992                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10993  13DF  0021               	movlb	1	; select bank1
 10994  13E0  0823               	movf	___ftpack@exp^(0+128),w
 10995  13E1  1903               	btfsc	3,2
 10996  13E2  2BE8               	goto	l4964
 10997  13E3  0822               	movf	(___ftpack@arg+2)^(0+128),w
 10998  13E4  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 10999  13E5  0420               	iorwf	___ftpack@arg^(0+128),w
 11000  13E6  1D03               	skipz
 11001  13E7  2BF9               	goto	l4970
 11002  13E8                     l4964:	
 11003  13E8  3000               	movlw	0
 11004  13E9  00A0               	movwf	?___ftpack^(0+128)
 11005  13EA  3000               	movlw	0
 11006  13EB  00A1               	movwf	(?___ftpack+1)^(0+128)
 11007  13EC  3000               	movlw	0
 11008  13ED  00A2               	movwf	(?___ftpack+2)^(0+128)
 11009  13EE  0008               	return
 11010  13EF                     l4968:	
 11011  13EF  3001               	movlw	1
 11012  13F0  00A5               	movwf	??___ftpack^(0+128)
 11013  13F1  0825               	movf	??___ftpack^(0+128),w
 11014  13F2  07A3               	addwf	___ftpack@exp^(0+128),f
 11015  13F3  3001               	movlw	1
 11016  13F4                     u5065:	
 11017  13F4  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11018  13F5  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11019  13F6  0CA0               	rrf	___ftpack@arg^(0+128),f
 11020  13F7  0B89               	decfsz	9,f
 11021  13F8  2BF4               	goto	u5065
 11022  13F9                     l4970:	
 11023  13F9  30FE               	movlw	254
 11024  13FA  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11025  13FB  1903               	btfsc	3,2
 11026  13FC  2C12               	goto	l1483
 11027  13FD  2BEF               	goto	l4968
 11028  13FE                     l4972:	
 11029  13FE  3001               	movlw	1
 11030  13FF  00A5               	movwf	??___ftpack^(0+128)
 11031  1400  0825               	movf	??___ftpack^(0+128),w
 11032  1401  07A3               	addwf	___ftpack@exp^(0+128),f
 11033  1402  3001               	movlw	1
 11034  1403  07A0               	addwf	___ftpack@arg^(0+128),f
 11035  1404  3000               	movlw	0
 11036  1405  1803               	skipnc
 11037  1406  3001               	movlw	1
 11038  1407  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 11039  1408  3000               	movlw	0
 11040  1409  1803               	skipnc
 11041  140A  3001               	movlw	1
 11042  140B  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 11043  140C  3001               	movlw	1
 11044  140D                     u5085:	
 11045  140D  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 11046  140E  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 11047  140F  0CA0               	rrf	___ftpack@arg^(0+128),f
 11048  1410  0B89               	decfsz	9,f
 11049  1411  2C0D               	goto	u5085
 11050  1412                     l1483:	
 11051  1412  30FF               	movlw	255
 11052  1413  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 11053  1414  1903               	btfsc	3,2
 11054  1415  2C1F               	goto	l4980
 11055  1416  2BFE               	goto	l4972
 11056  1417                     l4978:	
 11057  1417  3001               	movlw	1
 11058  1418  02A3               	subwf	___ftpack@exp^(0+128),f
 11059  1419  3001               	movlw	1
 11060  141A                     u5105:	
 11061  141A  35A0               	lslf	___ftpack@arg^(0+128),f
 11062  141B  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 11063  141C  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 11064  141D  0B89               	decfsz	9,f
 11065  141E  2C1A               	goto	u5105
 11066  141F                     l4980:	
 11067  141F  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 11068  1420  2C25               	goto	l1490
 11069  1421  3002               	movlw	2
 11070  1422  0223               	subwf	___ftpack@exp^(0+128),w
 11071  1423  1803               	skipnc
 11072  1424  2C17               	goto	l4978
 11073  1425                     l1490:	
 11074  1425  1823               	btfsc	___ftpack@exp^(0+128),0
 11075  1426  2C2D               	goto	l1491
 11076  1427  30FF               	movlw	255
 11077  1428  05A0               	andwf	___ftpack@arg^(0+128),f
 11078  1429  307F               	movlw	127
 11079  142A  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 11080  142B  30FF               	movlw	255
 11081  142C  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 11082  142D                     l1491:	
 11083  142D  1003               	clrc
 11084  142E  0CA3               	rrf	___ftpack@exp^(0+128),f
 11085  142F  0823               	movf	___ftpack@exp^(0+128),w
 11086  1430  00A5               	movwf	??___ftpack^(0+128)
 11087  1431  01A6               	clrf	(??___ftpack^(0+128)+1)
 11088  1432  01A7               	clrf	(??___ftpack^(0+128)+2)
 11089  1433  3010               	movlw	16
 11090  1434                     u5145:	
 11091  1434  35A5               	lslf	??___ftpack^(0+128),f
 11092  1435  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 11093  1436  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 11094  1437  0B89               	decfsz	9,f
 11095  1438  2C34               	goto	u5145
 11096  1439  0825               	movf	??___ftpack^(0+128),w
 11097  143A  04A0               	iorwf	___ftpack@arg^(0+128),f
 11098  143B  0826               	movf	(??___ftpack+1)^(0+128),w
 11099  143C  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 11100  143D  0827               	movf	(??___ftpack+2)^(0+128),w
 11101  143E  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 11102  143F  0824               	movf	___ftpack@sign^(0+128),w
 11103  1440  1903               	btfsc	3,2
 11104  1441  0008               	return
 11105  1442  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 11106  1443  0008               	return
 11107  1444                     __end_of___ftpack:	
 11108                           
 11109                           	psect	text32
 11110  14B3                     __ptext32:	
 11111 ;; *************** function _ReadSavedSettings *****************
 11112 ;; Defined at:
 11113 ;;		line 193 in file "user.c"
 11114 ;; Parameters:    Size  Location     Type
 11115 ;;		None
 11116 ;; Auto vars:     Size  Location     Type
 11117 ;;		None
 11118 ;; Return value:  Size  Location     Type
 11119 ;;                  1    wreg      void 
 11120 ;; Registers used:
 11121 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11122 ;; Tracked objects:
 11123 ;;		On entry : 0/0
 11124 ;;		On exit  : 0/0
 11125 ;;		Unchanged: 0/0
 11126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11129 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11130 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11131 ;;Total ram usage:        1 bytes
 11132 ;; Hardware stack levels used:    1
 11133 ;; Hardware stack levels required when called:    4
 11134 ;; This function calls:
 11135 ;;		_FLASH_ReadWord
 11136 ;;		_set_leds_bottom
 11137 ;;		_set_leds_top
 11138 ;; This function is called by:
 11139 ;;		_main
 11140 ;; This function uses a non-reentrant model
 11141 ;;
 11142                           
 11143                           
 11144                           ;psect for function _ReadSavedSettings
 11145  14B3                     _ReadSavedSettings:	
 11146                           
 11147                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11148                           
 11149                           ;incstack = 0
 11150                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11151  14B3  3081               	movlw	129
 11152  14B4  0021               	movlb	1	; select bank1
 11153  14B5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11154  14B6  301F               	movlw	31
 11155  14B7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11156  14B8  319E  2604  3194   	fcall	_FLASH_ReadWord
 11157  14BB  0021               	movlb	1	; select bank1
 11158  14BC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11159  14BD  0020               	movlb	0	; select bank0
 11160  14BE  00E5               	movwf	_top_push_state+1
 11161  14BF  0021               	movlb	1	; select bank1
 11162  14C0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11163  14C1  0020               	movlb	0	; select bank0
 11164  14C2  00E4               	movwf	_top_push_state
 11165                           
 11166                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 11167  14C3  3082               	movlw	130
 11168  14C4  0021               	movlb	1	; select bank1
 11169  14C5  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11170  14C6  301F               	movlw	31
 11171  14C7  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11172  14C8  319E  2604  3194   	fcall	_FLASH_ReadWord
 11173  14CB  0021               	movlb	1	; select bank1
 11174  14CC  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11175  14CD  0020               	movlb	0	; select bank0
 11176  14CE  00E1               	movwf	_bottom_push_state+1
 11177  14CF  0021               	movlb	1	; select bank1
 11178  14D0  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11179  14D1  0020               	movlb	0	; select bank0
 11180  14D2  00E0               	movwf	_bottom_push_state
 11181                           
 11182                           ;user.c: 198: if (top_push_state > 6) {
 11183  14D3  0865               	movf	_top_push_state+1,w
 11184  14D4  3A80               	xorlw	128
 11185  14D5  0021               	movlb	1	; select bank1
 11186  14D6  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11187  14D7  3080               	movlw	128
 11188  14D8  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11189  14D9  1D03               	skipz
 11190  14DA  2CDE               	goto	u5965
 11191  14DB  3007               	movlw	7
 11192  14DC  0020               	movlb	0	; select bank0
 11193  14DD  0264               	subwf	_top_push_state,w
 11194  14DE                     u5965:	
 11195  14DE  1C03               	skipc
 11196  14DF  2CE5               	goto	l559
 11197                           
 11198                           ;user.c: 200: top_push_state = 6;
 11199  14E0  3006               	movlw	6
 11200  14E1  0020               	movlb	0	; select bank0
 11201  14E2  00E4               	movwf	_top_push_state
 11202  14E3  3000               	movlw	0
 11203  14E4  00E5               	movwf	_top_push_state+1
 11204  14E5                     l559:	
 11205                           
 11206                           ;user.c: 201: }
 11207                           ;user.c: 202: if (bottom_push_state > 6) {
 11208  14E5  0020               	movlb	0	; select bank0
 11209  14E6  0861               	movf	_bottom_push_state+1,w
 11210  14E7  3A80               	xorlw	128
 11211  14E8  0021               	movlb	1	; select bank1
 11212  14E9  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11213  14EA  3080               	movlw	128
 11214  14EB  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11215  14EC  1D03               	skipz
 11216  14ED  2CF1               	goto	u5975
 11217  14EE  3007               	movlw	7
 11218  14EF  0020               	movlb	0	; select bank0
 11219  14F0  0260               	subwf	_bottom_push_state,w
 11220  14F1                     u5975:	
 11221  14F1  1C03               	skipc
 11222  14F2  2CF8               	goto	l5446
 11223                           
 11224                           ;user.c: 204: bottom_push_state = 6;
 11225  14F3  3006               	movlw	6
 11226  14F4  0020               	movlb	0	; select bank0
 11227  14F5  00E0               	movwf	_bottom_push_state
 11228  14F6  3000               	movlw	0
 11229  14F7  00E1               	movwf	_bottom_push_state+1
 11230  14F8                     l5446:	
 11231                           
 11232                           ;user.c: 205: }
 11233                           ;user.c: 208: LATGbits.LATG1 = !switchBypass_state;
 11234  14F8  0020               	movlb	0	; select bank0
 11235  14F9  0869               	movf	_switchBypass_state,w
 11236  14FA  1D03               	btfss	3,2
 11237  14FB  2CFF               	goto	u5980
 11238  14FC  0027               	movlb	7	; select bank7
 11239  14FD  148D               	bsf	13,1	;volatile
 11240  14FE  2D01               	goto	l5448
 11241  14FF                     u5980:	
 11242  14FF  0027               	movlb	7	; select bank7
 11243  1500  108D               	bcf	13,1	;volatile
 11244  1501                     l5448:	
 11245                           
 11246                           ;user.c: 209: LATGbits.LATG2 = switchBypass_state;
 11247  1501  0020               	movlb	0	; select bank0
 11248  1502  0C69               	rrf	_switchBypass_state,w
 11249  1503  0027               	movlb	7	; select bank7
 11250  1504  1C03               	skipc
 11251  1505  110D               	bcf	13,2	;volatile
 11252  1506  1803               	skipnc
 11253  1507  150D               	bsf	13,2	;volatile
 11254                           
 11255                           ;user.c: 210: LATBbits.LATB2 = 0;
 11256  1508  0022               	movlb	2	; select bank2
 11257  1509  110D               	bcf	13,2	;volatile
 11258                           
 11259                           ;user.c: 211: LATBbits.LATB3 = 0;
 11260  150A  118D               	bcf	13,3	;volatile
 11261                           
 11262                           ;user.c: 213: LATBbits.LATB4 = 0;
 11263  150B  120D               	bcf	13,4	;volatile
 11264                           
 11265                           ;user.c: 214: LATBbits.LATB5 = 0;
 11266  150C  128D               	bcf	13,5	;volatile
 11267                           
 11268                           ;user.c: 216: LATBbits.LATB1 = 0;
 11269  150D  108D               	bcf	13,1	;volatile
 11270                           
 11271                           ;user.c: 217: LATBbits.LATB0 = 0;
 11272  150E  100D               	bcf	13,0	;volatile
 11273                           
 11274                           ;user.c: 220: set_leds_top(top_push_state, 1);
 11275  150F  0020               	movlb	0	; select bank0
 11276  1510  0865               	movf	_top_push_state+1,w
 11277  1511  0021               	movlb	1	; select bank1
 11278  1512  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 11279  1513  0020               	movlb	0	; select bank0
 11280  1514  0864               	movf	_top_push_state,w
 11281  1515  0021               	movlb	1	; select bank1
 11282  1516  00A0               	movwf	set_leds_top@x^(0+128)
 11283  1517  3001               	movlw	1
 11284  1518  00A2               	movwf	set_leds_top@ledState^(0+128)
 11285  1519  3000               	movlw	0
 11286  151A  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 11287  151B  3193  238B  3194   	fcall	_set_leds_top
 11288                           
 11289                           ;user.c: 221: set_leds_bottom(bottom_push_state);
 11290  151E  0020               	movlb	0	; select bank0
 11291  151F  0861               	movf	_bottom_push_state+1,w
 11292  1520  0021               	movlb	1	; select bank1
 11293  1521  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 11294  1522  0020               	movlb	0	; select bank0
 11295  1523  0860               	movf	_bottom_push_state,w
 11296  1524  0021               	movlb	1	; select bank1
 11297  1525  00A0               	movwf	set_leds_bottom@x^(0+128)
 11298  1526  319F  2788         	fcall	_set_leds_bottom
 11299  1528  0008               	return
 11300  1529                     __end_of_ReadSavedSettings:	
 11301                           
 11302                           	psect	text33
 11303  138B                     __ptext33:	
 11304 ;; *************** function _set_leds_top *****************
 11305 ;; Defined at:
 11306 ;;		line 16 in file "LEDs.c"
 11307 ;; Parameters:    Size  Location     Type
 11308 ;;  x               2    0[BANK1 ] int 
 11309 ;;  ledState        2    2[BANK1 ] int 
 11310 ;; Auto vars:     Size  Location     Type
 11311 ;;		None
 11312 ;; Return value:  Size  Location     Type
 11313 ;;                  1    wreg      void 
 11314 ;; Registers used:
 11315 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11316 ;; Tracked objects:
 11317 ;;		On entry : 0/0
 11318 ;;		On exit  : 0/0
 11319 ;;		Unchanged: 0/0
 11320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11321 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11324 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11325 ;;Total ram usage:        4 bytes
 11326 ;; Hardware stack levels used:    1
 11327 ;; Hardware stack levels required when called:    3
 11328 ;; This function calls:
 11329 ;;		Nothing
 11330 ;; This function is called by:
 11331 ;;		_ReadSavedSettings
 11332 ;;		_star_tactiles
 11333 ;;		_solidring_tactiles
 11334 ;;		_read_top_tactile
 11335 ;;		_ring_tactiles
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           
 11340                           ;psect for function _set_leds_top
 11341  138B                     _set_leds_top:	
 11342                           
 11343                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11344                           
 11345                           ;incstack = 0
 11346                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11347  138B  0027               	movlb	7	; select bank7
 11348  138C  100C               	bcf	12,0	;volatile
 11349                           
 11350                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11351  138D  108C               	bcf	12,1	;volatile
 11352                           
 11353                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11354  138E  110C               	bcf	12,2	;volatile
 11355                           
 11356                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11357  138F  118C               	bcf	12,3	;volatile
 11358                           
 11359                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11360  1390  120C               	bcf	12,4	;volatile
 11361                           
 11362                           ;LEDs.c: 22: switch (x) {
 11363  1391  2BC1               	goto	l4930
 11364  1392                     l4918:	
 11365                           ;LEDs.c: 23: case 1:
 11366                           
 11367                           
 11368                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11369  1392  0021               	movlb	1	; select bank1
 11370  1393  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11371  1394  0027               	movlb	7	; select bank7
 11372  1395  1C03               	skipc
 11373  1396  100C               	bcf	12,0	;volatile
 11374  1397  1803               	skipnc
 11375  1398  140C               	bsf	12,0	;volatile
 11376                           
 11377                           ;LEDs.c: 25: break;
 11378  1399  0008               	return
 11379  139A                     l4920:	
 11380                           ;LEDs.c: 26: case 2:
 11381                           
 11382                           
 11383                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11384  139A  0021               	movlb	1	; select bank1
 11385  139B  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11386  139C  0027               	movlb	7	; select bank7
 11387  139D  1C03               	skipc
 11388  139E  108C               	bcf	12,1	;volatile
 11389  139F  1803               	skipnc
 11390  13A0  148C               	bsf	12,1	;volatile
 11391                           
 11392                           ;LEDs.c: 28: break;
 11393  13A1  0008               	return
 11394  13A2                     l4922:	
 11395                           ;LEDs.c: 29: case 3:
 11396                           
 11397                           
 11398                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11399  13A2  0021               	movlb	1	; select bank1
 11400  13A3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11401  13A4  0027               	movlb	7	; select bank7
 11402  13A5  1C03               	skipc
 11403  13A6  110C               	bcf	12,2	;volatile
 11404  13A7  1803               	skipnc
 11405  13A8  150C               	bsf	12,2	;volatile
 11406                           
 11407                           ;LEDs.c: 31: break;
 11408  13A9  0008               	return
 11409  13AA                     l4924:	
 11410                           ;LEDs.c: 32: case 4:
 11411                           
 11412                           
 11413                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11414  13AA  0021               	movlb	1	; select bank1
 11415  13AB  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11416  13AC  0027               	movlb	7	; select bank7
 11417  13AD  1C03               	skipc
 11418  13AE  118C               	bcf	12,3	;volatile
 11419  13AF  1803               	skipnc
 11420  13B0  158C               	bsf	12,3	;volatile
 11421                           
 11422                           ;LEDs.c: 34: break;
 11423  13B1  0008               	return
 11424  13B2                     l4926:	
 11425                           ;LEDs.c: 35: case 5:
 11426                           
 11427                           
 11428                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11429  13B2  0021               	movlb	1	; select bank1
 11430  13B3  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11431  13B4  0027               	movlb	7	; select bank7
 11432  13B5  1C03               	skipc
 11433  13B6  120C               	bcf	12,4	;volatile
 11434  13B7  1803               	skipnc
 11435  13B8  160C               	bsf	12,4	;volatile
 11436                           
 11437                           ;LEDs.c: 39: break;
 11438                           
 11439                           ;LEDs.c: 38: case 6:
 11440                           
 11441                           ;LEDs.c: 37: break;
 11442  13B9  0008               	return
 11443  13BA                     l700:	
 11444                           ;LEDs.c: 40: case 100:
 11445                           
 11446                           
 11447                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11448  13BA  0027               	movlb	7	; select bank7
 11449  13BB  140C               	bsf	12,0	;volatile
 11450                           
 11451                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11452  13BC  148C               	bsf	12,1	;volatile
 11453                           
 11454                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11455  13BD  150C               	bsf	12,2	;volatile
 11456                           
 11457                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11458  13BE  158C               	bsf	12,3	;volatile
 11459                           
 11460                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11461  13BF  160C               	bsf	12,4	;volatile
 11462                           
 11463                           ;LEDs.c: 47: }
 11464                           
 11465                           ;LEDs.c: 46: break;
 11466  13C0  0008               	return
 11467  13C1                     l4930:	
 11468                           
 11469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11470                           ; Switch size 1, requested type "space"
 11471                           ; Number of cases is 1, Range of values is 0 to 0
 11472                           ; switch strategies available:
 11473                           ; Name         Instructions Cycles
 11474                           ; simple_byte            4     3 (average)
 11475                           ; direct_byte            8     6 (fixed)
 11476                           ; jumptable            260     6 (fixed)
 11477                           ;	Chosen strategy is simple_byte
 11478  13C1  0021               	movlb	1	; select bank1
 11479  13C2  0821               	movf	(set_leds_top@x+1)^(0+128),w
 11480  13C3  3A00               	xorlw	0	; case 0
 11481  13C4  1903               	skipnz
 11482  13C5  2BC7               	goto	l6192
 11483  13C6  2BDE               	goto	l701
 11484  13C7                     l6192:	
 11485                           
 11486                           ; Switch size 1, requested type "space"
 11487                           ; Number of cases is 7, Range of values is 1 to 100
 11488                           ; switch strategies available:
 11489                           ; Name         Instructions Cycles
 11490                           ; simple_byte           22    12 (average)
 11491                           ; direct_byte          209     9 (fixed)
 11492                           ; jumptable            263     9 (fixed)
 11493                           ;	Chosen strategy is simple_byte
 11494  13C7  0820               	movf	set_leds_top@x^(0+128),w
 11495  13C8  3A01               	xorlw	1	; case 1
 11496  13C9  1903               	skipnz
 11497  13CA  2B92               	goto	l4918
 11498  13CB  3A03               	xorlw	3	; case 2
 11499  13CC  1903               	skipnz
 11500  13CD  2B9A               	goto	l4920
 11501  13CE  3A01               	xorlw	1	; case 3
 11502  13CF  1903               	skipnz
 11503  13D0  2BA2               	goto	l4922
 11504  13D1  3A07               	xorlw	7	; case 4
 11505  13D2  1903               	skipnz
 11506  13D3  2BAA               	goto	l4924
 11507  13D4  3A01               	xorlw	1	; case 5
 11508  13D5  1903               	skipnz
 11509  13D6  2BB2               	goto	l4926
 11510  13D7  3A03               	xorlw	3	; case 6
 11511  13D8  1903               	skipnz
 11512  13D9  2BDE               	goto	l701
 11513  13DA  3A62               	xorlw	98	; case 100
 11514  13DB  1903               	skipnz
 11515  13DC  2BBA               	goto	l700
 11516  13DD  2BDE               	goto	l701
 11517  13DE                     l701:	
 11518  13DE  0008               	return
 11519  13DF                     __end_of_set_leds_top:	
 11520                           
 11521                           	psect	text34
 11522  1F88                     __ptext34:	
 11523 ;; *************** function _set_leds_bottom *****************
 11524 ;; Defined at:
 11525 ;;		line 51 in file "LEDs.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;  x               2    0[BANK1 ] int 
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      void 
 11532 ;; Registers used:
 11533 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11539 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11542 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11543 ;;Total ram usage:        2 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:    3
 11546 ;; This function calls:
 11547 ;;		Nothing
 11548 ;; This function is called by:
 11549 ;;		_ReadSavedSettings
 11550 ;;		_star_tactiles
 11551 ;;		_solidring_tactiles
 11552 ;;		_read_bottom_tactile
 11553 ;;		_ring_tactiles
 11554 ;; This function uses a non-reentrant model
 11555 ;;
 11556                           
 11557                           
 11558                           ;psect for function _set_leds_bottom
 11559  1F88                     _set_leds_bottom:	
 11560                           
 11561                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11562                           
 11563                           ;incstack = 0
 11564                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11565  1F88  0022               	movlb	2	; select bank2
 11566  1F89  100F               	bcf	15,0	;volatile
 11567                           
 11568                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11569  1F8A  108F               	bcf	15,1	;volatile
 11570                           
 11571                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11572  1F8B  110F               	bcf	15,2	;volatile
 11573                           
 11574                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11575  1F8C  118F               	bcf	15,3	;volatile
 11576                           
 11577                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11578  1F8D  120F               	bcf	15,4	;volatile
 11579                           
 11580                           ;LEDs.c: 57: switch (x) {
 11581  1F8E  2FA5               	goto	l4954
 11582  1F8F                     l705:	
 11583                           ;LEDs.c: 58: case 1:
 11584                           
 11585                           
 11586                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11587  1F8F  0022               	movlb	2	; select bank2
 11588  1F90  140F               	bsf	15,0	;volatile
 11589                           
 11590                           ;LEDs.c: 60: break;
 11591  1F91  0008               	return
 11592  1F92                     l707:	
 11593                           ;LEDs.c: 61: case 2:
 11594                           
 11595                           
 11596                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11597  1F92  0022               	movlb	2	; select bank2
 11598  1F93  148F               	bsf	15,1	;volatile
 11599                           
 11600                           ;LEDs.c: 63: break;
 11601  1F94  0008               	return
 11602  1F95                     l708:	
 11603                           ;LEDs.c: 64: case 3:
 11604                           
 11605                           
 11606                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11607  1F95  0022               	movlb	2	; select bank2
 11608  1F96  150F               	bsf	15,2	;volatile
 11609                           
 11610                           ;LEDs.c: 66: break;
 11611  1F97  0008               	return
 11612  1F98                     l709:	
 11613                           ;LEDs.c: 67: case 4:
 11614                           
 11615                           
 11616                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11617  1F98  0022               	movlb	2	; select bank2
 11618  1F99  158F               	bsf	15,3	;volatile
 11619                           
 11620                           ;LEDs.c: 69: break;
 11621  1F9A  0008               	return
 11622  1F9B                     l710:	
 11623                           ;LEDs.c: 70: case 5:
 11624                           
 11625                           
 11626                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11627  1F9B  0022               	movlb	2	; select bank2
 11628  1F9C  160F               	bsf	15,4	;volatile
 11629                           
 11630                           ;LEDs.c: 74: break;
 11631                           
 11632                           ;LEDs.c: 73: case 6:
 11633                           
 11634                           ;LEDs.c: 72: break;
 11635  1F9D  0008               	return
 11636  1F9E                     l712:	
 11637                           ;LEDs.c: 75: case 100:
 11638                           
 11639                           
 11640                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11641  1F9E  0022               	movlb	2	; select bank2
 11642  1F9F  140F               	bsf	15,0	;volatile
 11643                           
 11644                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11645  1FA0  148F               	bsf	15,1	;volatile
 11646                           
 11647                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11648  1FA1  150F               	bsf	15,2	;volatile
 11649                           
 11650                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11651  1FA2  158F               	bsf	15,3	;volatile
 11652                           
 11653                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11654  1FA3  160F               	bsf	15,4	;volatile
 11655                           
 11656                           ;LEDs.c: 82: }
 11657                           
 11658                           ;LEDs.c: 81: break;
 11659  1FA4  0008               	return
 11660  1FA5                     l4954:	
 11661                           
 11662                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11663                           ; Switch size 1, requested type "space"
 11664                           ; Number of cases is 1, Range of values is 0 to 0
 11665                           ; switch strategies available:
 11666                           ; Name         Instructions Cycles
 11667                           ; simple_byte            4     3 (average)
 11668                           ; direct_byte            8     6 (fixed)
 11669                           ; jumptable            260     6 (fixed)
 11670                           ;	Chosen strategy is simple_byte
 11671  1FA5  0021               	movlb	1	; select bank1
 11672  1FA6  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 11673  1FA7  3A00               	xorlw	0	; case 0
 11674  1FA8  1903               	skipnz
 11675  1FA9  2FAB               	goto	l6194
 11676  1FAA  2FC2               	goto	l713
 11677  1FAB                     l6194:	
 11678                           
 11679                           ; Switch size 1, requested type "space"
 11680                           ; Number of cases is 7, Range of values is 1 to 100
 11681                           ; switch strategies available:
 11682                           ; Name         Instructions Cycles
 11683                           ; simple_byte           22    12 (average)
 11684                           ; direct_byte          209     9 (fixed)
 11685                           ; jumptable            263     9 (fixed)
 11686                           ;	Chosen strategy is simple_byte
 11687  1FAB  0820               	movf	set_leds_bottom@x^(0+128),w
 11688  1FAC  3A01               	xorlw	1	; case 1
 11689  1FAD  1903               	skipnz
 11690  1FAE  2F8F               	goto	l705
 11691  1FAF  3A03               	xorlw	3	; case 2
 11692  1FB0  1903               	skipnz
 11693  1FB1  2F92               	goto	l707
 11694  1FB2  3A01               	xorlw	1	; case 3
 11695  1FB3  1903               	skipnz
 11696  1FB4  2F95               	goto	l708
 11697  1FB5  3A07               	xorlw	7	; case 4
 11698  1FB6  1903               	skipnz
 11699  1FB7  2F98               	goto	l709
 11700  1FB8  3A01               	xorlw	1	; case 5
 11701  1FB9  1903               	skipnz
 11702  1FBA  2F9B               	goto	l710
 11703  1FBB  3A03               	xorlw	3	; case 6
 11704  1FBC  1903               	skipnz
 11705  1FBD  2FC2               	goto	l713
 11706  1FBE  3A62               	xorlw	98	; case 100
 11707  1FBF  1903               	skipnz
 11708  1FC0  2F9E               	goto	l712
 11709  1FC1  2FC2               	goto	l713
 11710  1FC2                     l713:	
 11711  1FC2  0008               	return
 11712  1FC3                     __end_of_set_leds_bottom:	
 11713                           
 11714                           	psect	text35
 11715  1E04                     __ptext35:	
 11716 ;; *************** function _FLASH_ReadWord *****************
 11717 ;; Defined at:
 11718 ;;		line 58 in file "memory.c"
 11719 ;; Parameters:    Size  Location     Type
 11720 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 11721 ;; Auto vars:     Size  Location     Type
 11722 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 11723 ;; Return value:  Size  Location     Type
 11724 ;;                  2    0[BANK1 ] unsigned int 
 11725 ;; Registers used:
 11726 ;;		wreg, status,2, status,0
 11727 ;; Tracked objects:
 11728 ;;		On entry : 0/0
 11729 ;;		On exit  : 0/0
 11730 ;;		Unchanged: 0/0
 11731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11732 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11733 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11735 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11736 ;;Total ram usage:        3 bytes
 11737 ;; Hardware stack levels used:    1
 11738 ;; Hardware stack levels required when called:    3
 11739 ;; This function calls:
 11740 ;;		Nothing
 11741 ;; This function is called by:
 11742 ;;		_ReadSavedSettings
 11743 ;;		_FLASH_WriteWord
 11744 ;; This function uses a non-reentrant model
 11745 ;;
 11746                           
 11747                           
 11748                           ;psect for function _FLASH_ReadWord
 11749  1E04                     _FLASH_ReadWord:	
 11750                           
 11751                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11752                           
 11753                           ;incstack = 0
 11754                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11755  1E04  3000               	movlw	0
 11756  1E05  1B8B               	btfsc	11,7	;volatile
 11757  1E06  3001               	movlw	1
 11758  1E07  0021               	movlb	1	; select bank1
 11759  1E08  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 11760                           
 11761                           ;memory.c: 61: INTCONbits.GIE = 0;
 11762  1E09  138B               	bcf	11,7	;volatile
 11763                           
 11764                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11765  1E0A  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 11766  1E0B  0023               	movlb	3	; select bank3
 11767  1E0C  0091               	movwf	17	;volatile
 11768                           
 11769                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11770  1E0D  0021               	movlb	1	; select bank1
 11771  1E0E  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 11772  1E0F  0023               	movlb	3	; select bank3
 11773  1E10  0092               	movwf	18	;volatile
 11774                           
 11775                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11776  1E11  1315               	bcf	21,6	;volatile
 11777                           
 11778                           ;memory.c: 66: PMCON1bits.RD = 1;
 11779  1E12  1415               	bsf	21,0	;volatile
 11780                           
 11781                           ;memory.c: 67: __nop();
 11782  1E13  0000               	nop
 11783                           
 11784                           ;memory.c: 68: __nop();
 11785  1E14  0000               	nop
 11786                           
 11787                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11788  1E15  0021               	movlb	1	; select bank1
 11789  1E16  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 11790  1E17  1C03               	skipc
 11791  1E18  138B               	bcf	11,7	;volatile
 11792  1E19  1803               	skipnc
 11793  1E1A  178B               	bsf	11,7	;volatile
 11794                           
 11795                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11796  1E1B  0023               	movlb	3	; select bank3
 11797  1E1C  0814               	movf	20,w	;volatile
 11798  1E1D  0021               	movlb	1	; select bank1
 11799  1E1E  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 11800  1E1F  0023               	movlb	3	; select bank3
 11801  1E20  0813               	movf	19,w	;volatile
 11802  1E21  0021               	movlb	1	; select bank1
 11803  1E22  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 11804  1E23  0008               	return
 11805  1E24                     __end_of_FLASH_ReadWord:	
 11806                           
 11807                           	psect	text36
 11808  1E46                     __ptext36:	
 11809 ;; *************** function _InitializeTaps *****************
 11810 ;; Defined at:
 11811 ;;		line 187 in file "user.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;		None
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  itap            2    1[BANK1 ] int 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;                  1    wreg      void 
 11818 ;; Registers used:
 11819 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11826 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11827 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11828 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11829 ;;Total ram usage:        3 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    3
 11832 ;; This function calls:
 11833 ;;		Nothing
 11834 ;; This function is called by:
 11835 ;;		_main
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           
 11840                           ;psect for function _InitializeTaps
 11841  1E46                     _InitializeTaps:	
 11842                           
 11843                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 11844                           
 11845                           ;incstack = 0
 11846                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11847  1E46  0021               	movlb	1	; select bank1
 11848  1E47  01A1               	clrf	InitializeTaps@itap^(0+128)
 11849  1E48  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 11850  1E49                     L12:	
 11851  1E49  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 11852  1E4A  3A80               	xorlw	128
 11853  1E4B  00A0               	movwf	??_InitializeTaps^(0+128)
 11854  1E4C  3080               	movlw	128
 11855  1E4D  0220               	subwf	??_InitializeTaps^(0+128),w
 11856  1E4E  1D03               	skipz
 11857  1E4F  2E52               	goto	u5935
 11858  1E50  300C               	movlw	12
 11859  1E51  0221               	subwf	InitializeTaps@itap^(0+128),w
 11860  1E52                     u5935:	
 11861  1E52  1803               	btfsc	3,0
 11862  1E53  0008               	return
 11863                           
 11864                           ;user.c: 189: tap[itap] = 0;
 11865  1E54  0021               	movlb	1	; select bank1
 11866  1E55  0821               	movf	InitializeTaps@itap^(0+128),w
 11867  1E56  00A0               	movwf	??_InitializeTaps^(0+128)
 11868  1E57  3001               	movlw	1
 11869  1E58                     u5945:	
 11870  1E58  35A0               	lslf	??_InitializeTaps^(0+128),f
 11871  1E59  3EFF               	addlw	-1
 11872  1E5A  1D03               	skipz
 11873  1E5B  2E58               	goto	u5945
 11874  1E5C  3520               	lslf	??_InitializeTaps^(0+128),w
 11875  1E5D  3E20               	addlw	(low (_tap| (0+512)))& (0+255)
 11876  1E5E  0086               	movwf	6
 11877  1E5F  3002               	movlw	2	; select bank4/5
 11878  1E60  0087               	movwf	7
 11879  1E61  3000               	movlw	0
 11880  1E62  3FC0               	movwi [0]fsr1
 11881  1E63  3000               	movlw	0
 11882  1E64  3FC1               	movwi [1]fsr1
 11883  1E65  3FC2               	movwi [2]fsr1
 11884  1E66  3FC3               	movwi [3]fsr1
 11885  1E67  3001               	movlw	1
 11886  1E68  07A1               	addwf	InitializeTaps@itap^(0+128),f
 11887  1E69  3000               	movlw	0
 11888  1E6A  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 11889  1E6B  2E49               	goto	L12
 11890  1E6C                     __end_of_InitializeTaps:	
 11891                           
 11892                           	psect	text37
 11893  1EC6                     __ptext37:	
 11894 ;; *************** function _InitApp *****************
 11895 ;; Defined at:
 11896 ;;		line 23 in file "user.c"
 11897 ;; Parameters:    Size  Location     Type
 11898 ;;		None
 11899 ;; Auto vars:     Size  Location     Type
 11900 ;;		None
 11901 ;; Return value:  Size  Location     Type
 11902 ;;                  1    wreg      void 
 11903 ;; Registers used:
 11904 ;;		wreg, status,2, status,0, pclath, cstack
 11905 ;; Tracked objects:
 11906 ;;		On entry : 0/0
 11907 ;;		On exit  : 0/0
 11908 ;;		Unchanged: 0/0
 11909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11914 ;;Total ram usage:        0 bytes
 11915 ;; Hardware stack levels used:    1
 11916 ;; Hardware stack levels required when called:    5
 11917 ;; This function calls:
 11918 ;;		_init_adc
 11919 ;;		_init_pwm
 11920 ;; This function is called by:
 11921 ;;		_main
 11922 ;; This function uses a non-reentrant model
 11923 ;;
 11924                           
 11925                           
 11926                           ;psect for function _InitApp
 11927  1EC6                     _InitApp:	
 11928                           
 11929                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 11930                           
 11931                           ;incstack = 0
 11932                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 11933  1EC6  0021               	movlb	1	; select bank1
 11934  1EC7  100D               	bcf	13,0	;volatile
 11935                           
 11936                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 11937  1EC8  108D               	bcf	13,1	;volatile
 11938                           
 11939                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 11940  1EC9  110D               	bcf	13,2	;volatile
 11941                           
 11942                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 11943  1ECA  118D               	bcf	13,3	;volatile
 11944                           
 11945                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 11946  1ECB  120D               	bcf	13,4	;volatile
 11947                           
 11948                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 11949  1ECC  128D               	bcf	13,5	;volatile
 11950                           
 11951                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 11952  1ECD  140E               	bsf	14,0	;volatile
 11953                           
 11954                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 11955  1ECE  120E               	bcf	14,4	;volatile
 11956                           
 11957                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 11958  1ECF  128E               	bcf	14,5	;volatile
 11959                           
 11960                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 11961  1ED0  100F               	bcf	15,0	;volatile
 11962                           
 11963                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 11964  1ED1  108F               	bcf	15,1	;volatile
 11965                           
 11966                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 11967  1ED2  110F               	bcf	15,2	;volatile
 11968                           
 11969                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 11970  1ED3  118F               	bcf	15,3	;volatile
 11971                           
 11972                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 11973  1ED4  120F               	bcf	15,4	;volatile
 11974                           
 11975                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 11976  1ED5  168F               	bsf	15,5	;volatile
 11977                           
 11978                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 11979  1ED6  170F               	bsf	15,6	;volatile
 11980                           
 11981                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 11982  1ED7  178F               	bsf	15,7	;volatile
 11983                           
 11984                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 11985  1ED8  1410               	bsf	16,0	;volatile
 11986                           
 11987                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 11988  1ED9  1490               	bsf	16,1	;volatile
 11989                           
 11990                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 11991  1EDA  0023               	movlb	3	; select bank3
 11992  1EDB  1010               	bcf	16,0	;volatile
 11993                           
 11994                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 11995  1EDC  1090               	bcf	16,1	;volatile
 11996                           
 11997                           ;user.c: 53: PORTEbits.RE0 = 0;
 11998  1EDD  0020               	movlb	0	; select bank0
 11999  1EDE  1010               	bcf	16,0	;volatile
 12000                           
 12001                           ;user.c: 54: PORTEbits.RE1 = 0;
 12002  1EDF  1090               	bcf	16,1	;volatile
 12003                           
 12004                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12005  1EE0  0026               	movlb	6	; select bank6
 12006  1EE1  100C               	bcf	12,0	;volatile
 12007                           
 12008                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12009  1EE2  108C               	bcf	12,1	;volatile
 12010                           
 12011                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12012  1EE3  110C               	bcf	12,2	;volatile
 12013                           
 12014                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12015  1EE4  118C               	bcf	12,3	;volatile
 12016                           
 12017                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12018  1EE5  120C               	bcf	12,4	;volatile
 12019                           
 12020                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12021  1EE6  128C               	bcf	12,5	;volatile
 12022                           
 12023                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12024  1EE7  170C               	bsf	12,6	;volatile
 12025                           
 12026                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12027  1EE8  0028               	movlb	8	; select bank8
 12028  1EE9  130C               	bcf	12,6	;volatile
 12029                           
 12030                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12031  1EEA  0026               	movlb	6	; select bank6
 12032  1EEB  108D               	bcf	13,1	;volatile
 12033                           
 12034                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12035  1EEC  110D               	bcf	13,2	;volatile
 12036                           
 12037                           ;user.c: 68: init_adc();
 12038  1EED  319D  2533  319E   	fcall	_init_adc
 12039                           
 12040                           ;user.c: 69: init_pwm();
 12041  1EF0  3191  213F         	fcall	_init_pwm
 12042                           
 12043                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12044  1EF2  178B               	bsf	11,7	;volatile
 12045                           
 12046                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12047  1EF3  168B               	bsf	11,5	;volatile
 12048                           
 12049                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12050  1EF4  110B               	bcf	11,2	;volatile
 12051  1EF5  0008               	return
 12052  1EF6                     __end_of_InitApp:	
 12053                           
 12054                           	psect	text38
 12055  113F                     __ptext38:	
 12056 ;; *************** function _init_pwm *****************
 12057 ;; Defined at:
 12058 ;;		line 123 in file "user.c"
 12059 ;; Parameters:    Size  Location     Type
 12060 ;;		None
 12061 ;; Auto vars:     Size  Location     Type
 12062 ;;		None
 12063 ;; Return value:  Size  Location     Type
 12064 ;;                  1    wreg      void 
 12065 ;; Registers used:
 12066 ;;		wreg, status,2, status,0, pclath, cstack
 12067 ;; Tracked objects:
 12068 ;;		On entry : 0/0
 12069 ;;		On exit  : 0/0
 12070 ;;		Unchanged: 0/0
 12071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12073 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12075 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12076 ;;Total ram usage:        0 bytes
 12077 ;; Hardware stack levels used:    1
 12078 ;; Hardware stack levels required when called:    4
 12079 ;; This function calls:
 12080 ;;		_init_timer0
 12081 ;;		_init_timer2
 12082 ;; This function is called by:
 12083 ;;		_InitApp
 12084 ;; This function uses a non-reentrant model
 12085 ;;
 12086                           
 12087                           
 12088                           ;psect for function _init_pwm
 12089  113F                     _init_pwm:	
 12090                           
 12091                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12092                           
 12093                           ;incstack = 0
 12094                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12095  113F  0022               	movlb	2	; select bank2
 12096  1140  101D               	bcf	29,0	;volatile
 12097                           
 12098                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12099  1141  0021               	movlb	1	; select bank1
 12100  1142  110E               	bcf	14,2	;volatile
 12101                           
 12102                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12103  1143  108E               	bcf	14,1	;volatile
 12104                           
 12105                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12106  1144  0026               	movlb	6	; select bank6
 12107  1145  100D               	bcf	13,0	;volatile
 12108                           
 12109                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12110  1146  118D               	bcf	13,3	;volatile
 12111                           
 12112                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12113  1147  120D               	bcf	13,4	;volatile
 12114                           
 12115                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12116  1148  0021               	movlb	1	; select bank1
 12117  1149  1310               	bcf	16,6	;volatile
 12118                           
 12119                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12120  114A  1290               	bcf	16,5	;volatile
 12121                           
 12122                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12123  114B  1210               	bcf	16,4	;volatile
 12124                           
 12125                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12126  114C  1190               	bcf	16,3	;volatile
 12127                           
 12128                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12129  114D  1110               	bcf	16,2	;volatile
 12130                           
 12131                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12132  114E  300F               	movlw	15
 12133  114F  0025               	movlb	5	; select bank5
 12134  1150  0493               	iorwf	19,f	;volatile
 12135                           
 12136                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12137  1151  300F               	movlw	15
 12138  1152  049A               	iorwf	26,f	;volatile
 12139                           
 12140                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12141  1153  300F               	movlw	15
 12142  1154  0026               	movlb	6	; select bank6
 12143  1155  0493               	iorwf	19,f	;volatile
 12144                           
 12145                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12146  1156  300F               	movlw	15
 12147  1157  049A               	iorwf	26,f	;volatile
 12148                           
 12149                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12150  1158  300F               	movlw	15
 12151  1159  049E               	iorwf	30,f	;volatile
 12152                           
 12153                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12154  115A  300F               	movlw	15
 12155  115B  002C               	movlb	12	; select bank12
 12156  115C  0493               	iorwf	19,f	;volatile
 12157                           
 12158                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12159  115D  300F               	movlw	15
 12160  115E  0496               	iorwf	22,f	;volatile
 12161                           
 12162                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12163  115F  300F               	movlw	15
 12164  1160  0499               	iorwf	25,f	;volatile
 12165                           
 12166                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12167  1161  300F               	movlw	15
 12168  1162  049C               	iorwf	28,f	;volatile
 12169                           
 12170                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12171  1163  300F               	movlw	15
 12172  1164  049F               	iorwf	31,f	;volatile
 12173                           
 12174                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12175  1165  0025               	movlb	5	; select bank5
 12176  1166  019D               	clrf	29	;volatile
 12177                           
 12178                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12179  1167  019E               	clrf	30	;volatile
 12180                           
 12181                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12182  1168  019F               	clrf	31	;volatile
 12183                           
 12184                           ;user.c: 148: CCPR1 = 50;
 12185  1169  3000               	movlw	0
 12186  116A  0092               	movwf	18	;volatile
 12187  116B  3032               	movlw	50
 12188  116C  0091               	movwf	17	;volatile
 12189                           
 12190                           ;user.c: 149: CCPR2 = 100;
 12191  116D  3000               	movlw	0
 12192  116E  0099               	movwf	25	;volatile
 12193  116F  3064               	movlw	100
 12194  1170  0098               	movwf	24	;volatile
 12195                           
 12196                           ;user.c: 150: CCPR3 = 150;
 12197  1171  3000               	movlw	0
 12198  1172  0026               	movlb	6	; select bank6
 12199  1173  0092               	movwf	18	;volatile
 12200  1174  3096               	movlw	150
 12201  1175  0091               	movwf	17	;volatile
 12202                           
 12203                           ;user.c: 151: CCPR4 = 200;
 12204  1176  3000               	movlw	0
 12205  1177  0099               	movwf	25	;volatile
 12206  1178  30C8               	movlw	200
 12207  1179  0098               	movwf	24	;volatile
 12208                           
 12209                           ;user.c: 152: init_timer2();
 12210  117A  319D  2521  3191   	fcall	_init_timer2
 12211                           
 12212                           ;user.c: 153: init_timer0();
 12213  117D  319D  251A         	fcall	_init_timer0
 12214  117F  0008               	return
 12215  1180                     __end_of_init_pwm:	
 12216                           
 12217                           	psect	text39
 12218  1D21                     __ptext39:	
 12219 ;; *************** function _init_timer2 *****************
 12220 ;; Defined at:
 12221 ;;		line 156 in file "user.c"
 12222 ;; Parameters:    Size  Location     Type
 12223 ;;		None
 12224 ;; Auto vars:     Size  Location     Type
 12225 ;;		None
 12226 ;; Return value:  Size  Location     Type
 12227 ;;                  1    wreg      void 
 12228 ;; Registers used:
 12229 ;;		wreg, status,2, status,0
 12230 ;; Tracked objects:
 12231 ;;		On entry : 0/0
 12232 ;;		On exit  : 0/0
 12233 ;;		Unchanged: 0/0
 12234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12239 ;;Total ram usage:        0 bytes
 12240 ;; Hardware stack levels used:    1
 12241 ;; Hardware stack levels required when called:    3
 12242 ;; This function calls:
 12243 ;;		Nothing
 12244 ;; This function is called by:
 12245 ;;		_init_pwm
 12246 ;; This function uses a non-reentrant model
 12247 ;;
 12248                           
 12249                           
 12250                           ;psect for function _init_timer2
 12251  1D21                     _init_timer2:	
 12252                           
 12253                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 12254                           
 12255                           ;incstack = 0
 12256                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12257  1D21  3087               	movlw	-121
 12258  1D22  0020               	movlb	0	; select bank0
 12259  1D23  059C               	andwf	28,f	;volatile
 12260                           
 12261                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 12262  1D24  30FC               	movlw	-4
 12263  1D25  059C               	andwf	28,f	;volatile
 12264                           
 12265                           ;user.c: 159: PR2 = 0xFF;
 12266  1D26  30FF               	movlw	255
 12267  1D27  009B               	movwf	27	;volatile
 12268                           
 12269                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 12270  1D28  151C               	bsf	28,2	;volatile
 12271  1D29  0008               	return
 12272  1D2A                     __end_of_init_timer2:	
 12273                           
 12274                           	psect	text40
 12275  1D1A                     __ptext40:	
 12276 ;; *************** function _init_timer0 *****************
 12277 ;; Defined at:
 12278 ;;		line 163 in file "user.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;		None
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;		None
 12283 ;; Return value:  Size  Location     Type
 12284 ;;                  1    wreg      void 
 12285 ;; Registers used:
 12286 ;;		None
 12287 ;; Tracked objects:
 12288 ;;		On entry : 0/0
 12289 ;;		On exit  : 0/0
 12290 ;;		Unchanged: 0/0
 12291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12296 ;;Total ram usage:        0 bytes
 12297 ;; Hardware stack levels used:    1
 12298 ;; Hardware stack levels required when called:    3
 12299 ;; This function calls:
 12300 ;;		Nothing
 12301 ;; This function is called by:
 12302 ;;		_init_pwm
 12303 ;; This function uses a non-reentrant model
 12304 ;;
 12305                           
 12306                           
 12307                           ;psect for function _init_timer0
 12308  1D1A                     _init_timer0:	
 12309                           
 12310                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 12311                           
 12312                           ;incstack = 0
 12313                           ; Regs used in _init_timer0: []
 12314  1D1A  0021               	movlb	1	; select bank1
 12315  1D1B  1295               	bcf	21,5	;volatile
 12316                           
 12317                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 12318  1D1C  1195               	bcf	21,3	;volatile
 12319                           
 12320                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 12321  1D1D  1015               	bcf	21,0	;volatile
 12322                           
 12323                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 12324  1D1E  1495               	bsf	21,1	;volatile
 12325                           
 12326                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 12327  1D1F  1115               	bcf	21,2	;volatile
 12328  1D20  0008               	return
 12329  1D21                     __end_of_init_timer0:	
 12330                           
 12331                           	psect	text41
 12332  1D33                     __ptext41:	
 12333 ;; *************** function _init_adc *****************
 12334 ;; Defined at:
 12335 ;;		line 109 in file "user.c"
 12336 ;; Parameters:    Size  Location     Type
 12337 ;;		None
 12338 ;; Auto vars:     Size  Location     Type
 12339 ;;		None
 12340 ;; Return value:  Size  Location     Type
 12341 ;;                  1    wreg      void 
 12342 ;; Registers used:
 12343 ;;		wreg, status,2, status,0
 12344 ;; Tracked objects:
 12345 ;;		On entry : 0/0
 12346 ;;		On exit  : 0/0
 12347 ;;		Unchanged: 0/0
 12348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12352 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12353 ;;Total ram usage:        0 bytes
 12354 ;; Hardware stack levels used:    1
 12355 ;; Hardware stack levels required when called:    3
 12356 ;; This function calls:
 12357 ;;		Nothing
 12358 ;; This function is called by:
 12359 ;;		_InitApp
 12360 ;; This function uses a non-reentrant model
 12361 ;;
 12362                           
 12363                           
 12364                           ;psect for function _init_adc
 12365  1D33                     _init_adc:	
 12366                           
 12367                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 12368                           
 12369                           ;incstack = 0
 12370                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12371  1D33  0021               	movlb	1	; select bank1
 12372  1D34  179E               	bsf	30,7	;volatile
 12373                           
 12374                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 12375  1D35  081E               	movf	30,w	;volatile
 12376  1D36  398F               	andlw	-113
 12377  1D37  3860               	iorlw	96
 12378  1D38  009E               	movwf	30	;volatile
 12379                           
 12380                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 12381  1D39  30FC               	movlw	-4
 12382  1D3A  059E               	andwf	30,f	;volatile
 12383                           
 12384                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 12385  1D3B  141D               	bsf	29,0	;volatile
 12386  1D3C  0008               	return
 12387  1D3D                     __end_of_init_adc:	
 12388                           
 12389                           	psect	text42
 12390  1D10                     __ptext42:	
 12391 ;; *************** function _ConfigureOscillator *****************
 12392 ;; Defined at:
 12393 ;;		line 18 in file "system.c"
 12394 ;; Parameters:    Size  Location     Type
 12395 ;;		None
 12396 ;; Auto vars:     Size  Location     Type
 12397 ;;		None
 12398 ;; Return value:  Size  Location     Type
 12399 ;;                  1    wreg      void 
 12400 ;; Registers used:
 12401 ;;		wreg, status,2, status,0
 12402 ;; Tracked objects:
 12403 ;;		On entry : 0/0
 12404 ;;		On exit  : 0/0
 12405 ;;		Unchanged: 0/0
 12406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12411 ;;Total ram usage:        0 bytes
 12412 ;; Hardware stack levels used:    1
 12413 ;; Hardware stack levels required when called:    3
 12414 ;; This function calls:
 12415 ;;		Nothing
 12416 ;; This function is called by:
 12417 ;;		_main
 12418 ;; This function uses a non-reentrant model
 12419 ;;
 12420                           
 12421                           
 12422                           ;psect for function _ConfigureOscillator
 12423  1D10                     _ConfigureOscillator:	
 12424                           
 12425                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12426                           
 12427                           ;incstack = 0
 12428                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12429  1D10  30FC               	movlw	-4
 12430  1D11  0021               	movlb	1	; select bank1
 12431  1D12  0599               	andwf	25,f	;volatile
 12432  1D13  0008               	return
 12433  1D14                     __end_of_ConfigureOscillator:	
 12434                           
 12435                           	psect	intentry
 12436  0004                     __pintentry:	
 12437 ;; *************** function _isr *****************
 12438 ;; Defined at:
 12439 ;;		line 25 in file "interrupts.c"
 12440 ;; Parameters:    Size  Location     Type
 12441 ;;		None
 12442 ;; Auto vars:     Size  Location     Type
 12443 ;;  tmpSubDelay     2   35[BANK0 ] int 
 12444 ;; Return value:  Size  Location     Type
 12445 ;;                  1    wreg      void 
 12446 ;; Registers used:
 12447 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12448 ;; Tracked objects:
 12449 ;;		On entry : 0/0
 12450 ;;		On exit  : 0/0
 12451 ;;		Unchanged: 0/0
 12452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12454 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12455 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12456 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12457 ;;Total ram usage:       11 bytes
 12458 ;; Hardware stack levels used:    1
 12459 ;; Hardware stack levels required when called:    2
 12460 ;; This function calls:
 12461 ;;		___awdiv
 12462 ;;		_modulation
 12463 ;;		i1_set_leds_top
 12464 ;; This function is called by:
 12465 ;;		Interrupt level 1
 12466 ;; This function uses a non-reentrant model
 12467 ;;
 12468                           
 12469  0004                     _isr:	
 12470                           
 12471                           ;incstack = 0
 12472                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12473  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12474  0005  3180               	pagesel	$
 12475  0006  0020               	movlb	0	; select bank0
 12476  0007  087F               	movf	127,w
 12477  0008  00C2               	movwf	??_isr+8
 12478                           
 12479                           ;interrupts.c: 26: int tmpSubDelay;
 12480                           ;interrupts.c: 28: extern volatile long timer;
 12481                           ;interrupts.c: 29: extern volatile long sub_timer;
 12482                           ;interrupts.c: 30: extern volatile long tap_timer;
 12483                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 12484                           ;interrupts.c: 32: extern int mod_delay_time;
 12485                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 12486                           ;interrupts.c: 36: extern int top_push_state;
 12487                           ;interrupts.c: 37: extern uint8_t feedback_start;
 12488                           ;interrupts.c: 38: extern volatile long mod_timer;
 12489                           ;interrupts.c: 39: extern volatile long delay_time;
 12490  0009  1D0B               	btfss	11,2	;volatile
 12491  000A  2919               	goto	i1l121
 12492                           
 12493                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 12494  000B  085D               	movf	_delay_time+1,w	;volatile
 12495  000C  00C4               	movwf	isr@tmpSubDelay+1
 12496  000D  085C               	movf	_delay_time,w	;volatile
 12497  000E  00C3               	movwf	isr@tmpSubDelay
 12498                           
 12499                           ;interrupts.c: 42: timer = timer + 1;
 12500  000F  3001               	movlw	1
 12501  0010  00BA               	movwf	??_isr
 12502  0011  3000               	movlw	0
 12503  0012  00BB               	movwf	??_isr+1
 12504  0013  3000               	movlw	0
 12505  0014  00BC               	movwf	??_isr+2
 12506  0015  3000               	movlw	0
 12507  0016  00BD               	movwf	??_isr+3
 12508  0017  084D               	movf	_timer,w	;volatile
 12509  0018  07BA               	addwf	??_isr,f
 12510  0019  084E               	movf	_timer+1,w	;volatile
 12511  001A  3DBB               	addwfc	??_isr+1,f
 12512  001B  084F               	movf	_timer+2,w	;volatile
 12513  001C  3DBC               	addwfc	??_isr+2,f
 12514  001D  0850               	movf	_timer+3,w	;volatile
 12515  001E  3DBD               	addwfc	??_isr+3,f
 12516  001F  083D               	movf	??_isr+3,w
 12517  0020  00D0               	movwf	_timer+3	;volatile
 12518  0021  083C               	movf	??_isr+2,w
 12519  0022  00CF               	movwf	_timer+2	;volatile
 12520  0023  083B               	movf	??_isr+1,w
 12521  0024  00CE               	movwf	_timer+1	;volatile
 12522  0025  083A               	movf	??_isr,w
 12523  0026  00CD               	movwf	_timer	;volatile
 12524                           
 12525                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 12526  0027  3001               	movlw	1
 12527  0028  00BA               	movwf	??_isr
 12528  0029  3000               	movlw	0
 12529  002A  00BB               	movwf	??_isr+1
 12530  002B  3000               	movlw	0
 12531  002C  00BC               	movwf	??_isr+2
 12532  002D  3000               	movlw	0
 12533  002E  00BD               	movwf	??_isr+3
 12534  002F  0845               	movf	_sub_timer,w	;volatile
 12535  0030  07BA               	addwf	??_isr,f
 12536  0031  0846               	movf	_sub_timer+1,w	;volatile
 12537  0032  3DBB               	addwfc	??_isr+1,f
 12538  0033  0847               	movf	_sub_timer+2,w	;volatile
 12539  0034  3DBC               	addwfc	??_isr+2,f
 12540  0035  0848               	movf	_sub_timer+3,w	;volatile
 12541  0036  3DBD               	addwfc	??_isr+3,f
 12542  0037  083D               	movf	??_isr+3,w
 12543  0038  00C8               	movwf	_sub_timer+3	;volatile
 12544  0039  083C               	movf	??_isr+2,w
 12545  003A  00C7               	movwf	_sub_timer+2	;volatile
 12546  003B  083B               	movf	??_isr+1,w
 12547  003C  00C6               	movwf	_sub_timer+1	;volatile
 12548  003D  083A               	movf	??_isr,w
 12549  003E  00C5               	movwf	_sub_timer	;volatile
 12550                           
 12551                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 12552  003F  3001               	movlw	1
 12553  0040  00BA               	movwf	??_isr
 12554  0041  3000               	movlw	0
 12555  0042  00BB               	movwf	??_isr+1
 12556  0043  3000               	movlw	0
 12557  0044  00BC               	movwf	??_isr+2
 12558  0045  3000               	movlw	0
 12559  0046  00BD               	movwf	??_isr+3
 12560  0047  0849               	movf	_tap_timer,w	;volatile
 12561  0048  07BA               	addwf	??_isr,f
 12562  0049  084A               	movf	_tap_timer+1,w	;volatile
 12563  004A  3DBB               	addwfc	??_isr+1,f
 12564  004B  084B               	movf	_tap_timer+2,w	;volatile
 12565  004C  3DBC               	addwfc	??_isr+2,f
 12566  004D  084C               	movf	_tap_timer+3,w	;volatile
 12567  004E  3DBD               	addwfc	??_isr+3,f
 12568  004F  083D               	movf	??_isr+3,w
 12569  0050  00CC               	movwf	_tap_timer+3	;volatile
 12570  0051  083C               	movf	??_isr+2,w
 12571  0052  00CB               	movwf	_tap_timer+2	;volatile
 12572  0053  083B               	movf	??_isr+1,w
 12573  0054  00CA               	movwf	_tap_timer+1	;volatile
 12574  0055  083A               	movf	??_isr,w
 12575  0056  00C9               	movwf	_tap_timer	;volatile
 12576                           
 12577                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 12578  0057  3001               	movlw	1
 12579  0058  00BA               	movwf	??_isr
 12580  0059  3000               	movlw	0
 12581  005A  00BB               	movwf	??_isr+1
 12582  005B  3000               	movlw	0
 12583  005C  00BC               	movwf	??_isr+2
 12584  005D  3000               	movlw	0
 12585  005E  00BD               	movwf	??_isr+3
 12586  005F  0022               	movlb	2	; select bank2
 12587  0060  0820               	movf	_mod_timer^(0+256),w	;volatile
 12588  0061  0020               	movlb	0	; select bank0
 12589  0062  07BA               	addwf	??_isr,f
 12590  0063  0022               	movlb	2	; select bank2
 12591  0064  0821               	movf	(_mod_timer+1)^(0+256),w	;volatile
 12592  0065  0020               	movlb	0	; select bank0
 12593  0066  3DBB               	addwfc	??_isr+1,f
 12594  0067  0022               	movlb	2	; select bank2
 12595  0068  0822               	movf	(_mod_timer+2)^(0+256),w	;volatile
 12596  0069  0020               	movlb	0	; select bank0
 12597  006A  3DBC               	addwfc	??_isr+2,f
 12598  006B  0022               	movlb	2	; select bank2
 12599  006C  0823               	movf	(_mod_timer+3)^(0+256),w	;volatile
 12600  006D  0020               	movlb	0	; select bank0
 12601  006E  3DBD               	addwfc	??_isr+3,f
 12602  006F  083D               	movf	??_isr+3,w
 12603  0070  0022               	movlb	2	; select bank2
 12604  0071  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12605  0072  0020               	movlb	0	; select bank0
 12606  0073  083C               	movf	??_isr+2,w
 12607  0074  0022               	movlb	2	; select bank2
 12608  0075  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12609  0076  0020               	movlb	0	; select bank0
 12610  0077  083B               	movf	??_isr+1,w
 12611  0078  0022               	movlb	2	; select bank2
 12612  0079  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12613  007A  0020               	movlb	0	; select bank0
 12614  007B  083A               	movf	??_isr,w
 12615  007C  0022               	movlb	2	; select bank2
 12616  007D  00A0               	movwf	_mod_timer^(0+256)	;volatile
 12617                           
 12618                           ;interrupts.c: 46: test_timer++;
 12619  007E  3001               	movlw	1
 12620  007F  0023               	movlb	3	; select bank3
 12621  0080  07BC               	addwf	_test_timer^(0+384),f	;volatile
 12622  0081  3000               	movlw	0
 12623  0082  3DBD               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 12624  0083  3000               	movlw	0
 12625  0084  3DBE               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 12626  0085  3000               	movlw	0
 12627  0086  3DBF               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 12628                           
 12629                           ;interrupts.c: 47: if (feedback_start == 1) {
 12630  0087  0020               	movlb	0	; select bank0
 12631  0088  0354               	decf	_feedback_start,w
 12632  0089  1D03               	btfss	3,2
 12633  008A  28A2               	goto	i1l4378
 12634                           
 12635                           ;interrupts.c: 48: feedback_timer++;
 12636  008B  3001               	movlw	1
 12637  008C  0022               	movlb	2	; select bank2
 12638  008D  07A6               	addwf	_feedback_timer^(0+256),f	;volatile
 12639  008E  3000               	movlw	0
 12640  008F  3DA7               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 12641                           
 12642                           ;interrupts.c: 49: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 12643  0090  0827               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 12644  0091  0020               	movlb	0	; select bank0
 12645  0092  0263               	subwf	_long_press_limit+1,w
 12646  0093  1D03               	skipz
 12647  0094  2899               	goto	u445_25
 12648  0095  0022               	movlb	2	; select bank2
 12649  0096  0826               	movf	_feedback_timer^(0+256),w	;volatile
 12650  0097  0020               	movlb	0	; select bank0
 12651  0098  0262               	subwf	_long_press_limit,w
 12652  0099                     u445_25:	
 12653  0099  1803               	skipnc
 12654  009A  28A2               	goto	i1l4378
 12655  009B  0863               	movf	_long_press_limit+1,w
 12656  009C  0022               	movlb	2	; select bank2
 12657  009D  00A7               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 12658  009E  0020               	movlb	0	; select bank0
 12659  009F  0862               	movf	_long_press_limit,w
 12660  00A0  0022               	movlb	2	; select bank2
 12661  00A1  00A6               	movwf	_feedback_timer^(0+256)	;volatile
 12662  00A2                     i1l4378:	
 12663                           
 12664                           ;interrupts.c: 50: }
 12665                           ;interrupts.c: 51: if (longTap_start == 1) {
 12666  00A2  0020               	movlb	0	; select bank0
 12667  00A3  0355               	decf	_longTap_start,w
 12668  00A4  1D03               	btfss	3,2
 12669  00A5  28BD               	goto	i1l4384
 12670                           
 12671                           ;interrupts.c: 52: longTap_timer++;
 12672  00A6  3001               	movlw	1
 12673  00A7  0022               	movlb	2	; select bank2
 12674  00A8  07B2               	addwf	_longTap_timer^(0+256),f	;volatile
 12675  00A9  3000               	movlw	0
 12676  00AA  3DB3               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 12677                           
 12678                           ;interrupts.c: 53: if (longTap_timer > long_press_limit) {
 12679  00AB  0833               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 12680  00AC  0020               	movlb	0	; select bank0
 12681  00AD  0263               	subwf	_long_press_limit+1,w
 12682  00AE  1D03               	skipz
 12683  00AF  28B4               	goto	u447_25
 12684  00B0  0022               	movlb	2	; select bank2
 12685  00B1  0832               	movf	_longTap_timer^(0+256),w	;volatile
 12686  00B2  0020               	movlb	0	; select bank0
 12687  00B3  0262               	subwf	_long_press_limit,w
 12688  00B4                     u447_25:	
 12689  00B4  1803               	skipnc
 12690  00B5  28BD               	goto	i1l4384
 12691                           
 12692                           ;interrupts.c: 54: longTap_timer = long_press_limit;
 12693  00B6  0863               	movf	_long_press_limit+1,w
 12694  00B7  0022               	movlb	2	; select bank2
 12695  00B8  00B3               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 12696  00B9  0020               	movlb	0	; select bank0
 12697  00BA  0862               	movf	_long_press_limit,w
 12698  00BB  0022               	movlb	2	; select bank2
 12699  00BC  00B2               	movwf	_longTap_timer^(0+256)	;volatile
 12700  00BD                     i1l4384:	
 12701                           
 12702                           ;interrupts.c: 55: }
 12703                           ;interrupts.c: 56: }
 12704                           ;interrupts.c: 57: INTCONbits.TMR0IF = 0;
 12705  00BD  110B               	bcf	11,2	;volatile
 12706                           
 12707                           ;interrupts.c: 59: if (adjust_sub_delay == 1) {
 12708  00BE  0023               	movlb	3	; select bank3
 12709  00BF  0340               	decf	_adjust_sub_delay^(0+384),w
 12710  00C0  0441               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 12711  00C1  1D03               	btfss	3,2
 12712  00C2  2919               	goto	i1l121
 12713                           
 12714                           ;interrupts.c: 60: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 12715  00C3  0020               	movlb	0	; select bank0
 12716  00C4  0848               	movf	_sub_timer+3,w	;volatile
 12717  00C5  3A80               	xorlw	128
 12718  00C6  00BA               	movwf	??_isr
 12719  00C7  085F               	movf	_delay_time+3,w	;volatile
 12720  00C8  3A80               	xorlw	128
 12721  00C9  023A               	subwf	??_isr,w
 12722  00CA  1D03               	skipz
 12723  00CB  28D6               	goto	u449_23
 12724  00CC  085E               	movf	_delay_time+2,w	;volatile
 12725  00CD  0247               	subwf	_sub_timer+2,w	;volatile
 12726  00CE  1D03               	skipz
 12727  00CF  28D6               	goto	u449_23
 12728  00D0  085D               	movf	_delay_time+1,w	;volatile
 12729  00D1  0246               	subwf	_sub_timer+1,w	;volatile
 12730  00D2  1D03               	skipz
 12731  00D3  28D6               	goto	u449_23
 12732  00D4  085C               	movf	_delay_time,w	;volatile
 12733  00D5  0245               	subwf	_sub_timer,w	;volatile
 12734  00D6                     u449_23:	
 12735  00D6  1C03               	skipc
 12736  00D7  2919               	goto	i1l121
 12737  00D8  0858               	movf	_baseline_delay_time,w	;volatile
 12738  00D9  00BA               	movwf	??_isr
 12739  00DA  0859               	movf	_baseline_delay_time+1,w	;volatile
 12740  00DB  00BB               	movwf	??_isr+1
 12741  00DC  085A               	movf	_baseline_delay_time+2,w	;volatile
 12742  00DD  00BC               	movwf	??_isr+2
 12743  00DE  085B               	movf	_baseline_delay_time+3,w	;volatile
 12744  00DF  00BD               	movwf	??_isr+3
 12745  00E0  094D               	comf	_timer,w	;volatile
 12746  00E1  00BE               	movwf	??_isr+4
 12747  00E2  094E               	comf	_timer+1,w	;volatile
 12748  00E3  00BF               	movwf	??_isr+5
 12749  00E4  094F               	comf	_timer+2,w	;volatile
 12750  00E5  00C0               	movwf	??_isr+6
 12751  00E6  0950               	comf	_timer+3,w	;volatile
 12752  00E7  00C1               	movwf	??_isr+7
 12753  00E8  0ABE               	incf	??_isr+4,f
 12754  00E9  1903               	skipnz
 12755  00EA  0ABF               	incf	??_isr+5,f
 12756  00EB  1903               	skipnz
 12757  00EC  0AC0               	incf	??_isr+6,f
 12758  00ED  1903               	skipnz
 12759  00EE  0AC1               	incf	??_isr+7,f
 12760  00EF  083E               	movf	??_isr+4,w
 12761  00F0  07BA               	addwf	??_isr,f
 12762  00F1  083F               	movf	??_isr+5,w
 12763  00F2  3DBB               	addwfc	??_isr+1,f
 12764  00F3  0840               	movf	??_isr+6,w
 12765  00F4  3DBC               	addwfc	??_isr+2,f
 12766  00F5  0841               	movf	??_isr+7,w
 12767  00F6  3DBD               	addwfc	??_isr+3,f
 12768  00F7  1BBD               	btfsc	??_isr+3,7
 12769  00F8  2906               	goto	i1l4392
 12770  00F9  083D               	movf	??_isr+3,w
 12771  00FA  1D03               	btfss	3,2
 12772  00FB  2919               	goto	i1l121
 12773  00FC  083C               	movf	??_isr+2,w
 12774  00FD  1D03               	btfss	3,2
 12775  00FE  2919               	goto	i1l121
 12776  00FF  083B               	movf	??_isr+1,w
 12777  0100  1D03               	btfss	3,2
 12778  0101  2919               	goto	i1l121
 12779  0102  3004               	movlw	4
 12780  0103  023A               	subwf	??_isr,w
 12781  0104  1803               	btfsc	3,0
 12782  0105  2919               	goto	i1l121
 12783  0106                     i1l4392:	
 12784                           
 12785                           ;interrupts.c: 61: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 12786  0106  094D               	comf	_timer,w	;volatile
 12787  0107  00BA               	movwf	??_isr
 12788  0108  094E               	comf	_timer+1,w	;volatile
 12789  0109  00BB               	movwf	??_isr+1
 12790  010A  0ABA               	incf	??_isr,f
 12791  010B  1903               	skipnz
 12792  010C  0ABB               	incf	??_isr+1,f
 12793  010D  0858               	movf	_baseline_delay_time,w	;volatile
 12794  010E  073A               	addwf	??_isr,w
 12795  010F  00BC               	movwf	??_isr+2
 12796  0110  0859               	movf	_baseline_delay_time+1,w	;volatile
 12797  0111  3D3B               	addwfc	??_isr+1,w
 12798  0112  00BD               	movwf	??_isr+3
 12799  0113  0845               	movf	_sub_timer,w	;volatile
 12800  0114  073C               	addwf	??_isr+2,w
 12801  0115  00C3               	movwf	isr@tmpSubDelay
 12802  0116  0846               	movf	_sub_timer+1,w	;volatile
 12803  0117  3D3D               	addwfc	??_isr+3,w
 12804  0118  00C4               	movwf	isr@tmpSubDelay+1
 12805  0119                     i1l121:	
 12806                           
 12807                           ;interrupts.c: 62: }
 12808                           ;interrupts.c: 63: }
 12809                           ;interrupts.c: 64: }
 12810                           ;interrupts.c: 77: if (longTap_state < 1 && doubleTap_state < 1) {
 12811  0119  0020               	movlb	0	; select bank0
 12812  011A  0867               	movf	_longTap_state,w	;volatile
 12813  011B  1D03               	btfss	3,2
 12814  011C  297A               	goto	i1l4416
 12815  011D  0853               	movf	_doubleTap_state,w	;volatile
 12816  011E  1D03               	btfss	3,2
 12817  011F  297A               	goto	i1l4416
 12818                           
 12819                           ;interrupts.c: 80: if (timer >= baseline_delay_time) {
 12820  0120  0850               	movf	_timer+3,w	;volatile
 12821  0121  3A80               	xorlw	128
 12822  0122  00BA               	movwf	??_isr
 12823  0123  085B               	movf	_baseline_delay_time+3,w	;volatile
 12824  0124  3A80               	xorlw	128
 12825  0125  023A               	subwf	??_isr,w
 12826  0126  1D03               	skipz
 12827  0127  2932               	goto	u453_23
 12828  0128  085A               	movf	_baseline_delay_time+2,w	;volatile
 12829  0129  024F               	subwf	_timer+2,w	;volatile
 12830  012A  1D03               	skipz
 12831  012B  2932               	goto	u453_23
 12832  012C  0859               	movf	_baseline_delay_time+1,w	;volatile
 12833  012D  024E               	subwf	_timer+1,w	;volatile
 12834  012E  1D03               	skipz
 12835  012F  2932               	goto	u453_23
 12836  0130  0858               	movf	_baseline_delay_time,w	;volatile
 12837  0131  024D               	subwf	_timer,w	;volatile
 12838  0132                     u453_23:	
 12839  0132  1C03               	skipc
 12840  0133  2968               	goto	i1l4412
 12841                           
 12842                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 12843  0134  0022               	movlb	2	; select bank2
 12844  0135  160D               	bsf	13,4	;volatile
 12845                           
 12846                           ;interrupts.c: 85: timer = 0;
 12847  0136  3000               	movlw	0
 12848  0137  0020               	movlb	0	; select bank0
 12849  0138  00D0               	movwf	_timer+3	;volatile
 12850  0139  3000               	movlw	0
 12851  013A  00CF               	movwf	_timer+2	;volatile
 12852  013B  3000               	movlw	0
 12853  013C  00CE               	movwf	_timer+1	;volatile
 12854  013D  3000               	movlw	0
 12855  013E  00CD               	movwf	_timer	;volatile
 12856                           
 12857                           ;interrupts.c: 86: if (reset_sub_delay == 1) {
 12858  013F  0023               	movlb	3	; select bank3
 12859  0140  0350               	decf	_reset_sub_delay^(0+384),w
 12860  0141  0451               	iorwf	(_reset_sub_delay+1)^(0+384),w
 12861  0142  1D03               	btfss	3,2
 12862  0143  2968               	goto	i1l4412
 12863                           
 12864                           ;interrupts.c: 88: CCPR1 = delay_counter;
 12865  0144  0022               	movlb	2	; select bank2
 12866  0145  0825               	movf	(_delay_counter+1)^(0+256),w	;volatile
 12867  0146  0025               	movlb	5	; select bank5
 12868  0147  0092               	movwf	18	;volatile
 12869  0148  0022               	movlb	2	; select bank2
 12870  0149  0824               	movf	_delay_counter^(0+256),w	;volatile
 12871  014A  0025               	movlb	5	; select bank5
 12872  014B  0091               	movwf	17	;volatile
 12873                           
 12874                           ;interrupts.c: 91: mod_counter = 0;
 12875  014C  0020               	movlb	0	; select bank0
 12876  014D  01D1               	clrf	_mod_counter
 12877  014E  01D2               	clrf	_mod_counter+1
 12878                           
 12879                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 12880  014F  0023               	movlb	3	; select bank3
 12881  0150  0865               	movf	_mod_delay_time^(0+384),w
 12882  0151  0022               	movlb	2	; select bank2
 12883  0152  00A0               	movwf	_mod_timer^(0+256)	;volatile
 12884  0153  0023               	movlb	3	; select bank3
 12885  0154  0866               	movf	(_mod_delay_time+1)^(0+384),w
 12886  0155  0022               	movlb	2	; select bank2
 12887  0156  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12888  0157  0D89               	rlf	9,f
 12889  0158  3B89               	subwfb	9,f
 12890  0159  0989               	comf	9,f
 12891  015A  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12892  015B  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12893                           
 12894                           ;interrupts.c: 94: reset_sub_delay = 0;
 12895  015C  0023               	movlb	3	; select bank3
 12896  015D  01D0               	clrf	_reset_sub_delay^(0+384)
 12897  015E  01D1               	clrf	(_reset_sub_delay+1)^(0+384)
 12898                           
 12899                           ;interrupts.c: 95: sub_timer = delay_time;
 12900  015F  0020               	movlb	0	; select bank0
 12901  0160  085F               	movf	_delay_time+3,w	;volatile
 12902  0161  00C8               	movwf	_sub_timer+3	;volatile
 12903  0162  085E               	movf	_delay_time+2,w	;volatile
 12904  0163  00C7               	movwf	_sub_timer+2	;volatile
 12905  0164  085D               	movf	_delay_time+1,w	;volatile
 12906  0165  00C6               	movwf	_sub_timer+1	;volatile
 12907  0166  085C               	movf	_delay_time,w	;volatile
 12908  0167  00C5               	movwf	_sub_timer	;volatile
 12909  0168                     i1l4412:	
 12910                           
 12911                           ;interrupts.c: 96: }
 12912                           ;interrupts.c: 97: }
 12913                           ;interrupts.c: 99: if (timer >= 30) {
 12914  0168  0020               	movlb	0	; select bank0
 12915  0169  1BD0               	btfsc	_timer+3,7	;volatile
 12916  016A  297A               	goto	i1l4416
 12917  016B  0850               	movf	_timer+3,w	;volatile
 12918  016C  1D03               	btfss	3,2
 12919  016D  2978               	goto	i1l4414
 12920  016E  084F               	movf	_timer+2,w	;volatile
 12921  016F  1D03               	btfss	3,2
 12922  0170  2978               	goto	i1l4414
 12923  0171  084E               	movf	_timer+1,w	;volatile
 12924  0172  1D03               	btfss	3,2
 12925  0173  2978               	goto	i1l4414
 12926  0174  301E               	movlw	30
 12927  0175  024D               	subwf	_timer,w	;volatile
 12928  0176  1C03               	btfss	3,0
 12929  0177  297A               	goto	i1l4416
 12930  0178                     i1l4414:	
 12931                           
 12932                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 12933  0178  0022               	movlb	2	; select bank2
 12934  0179  120D               	bcf	13,4	;volatile
 12935  017A                     i1l4416:	
 12936                           
 12937                           ;interrupts.c: 103: }
 12938                           ;interrupts.c: 104: }
 12939                           ;interrupts.c: 107: if (sub_timer >= tmpSubDelay) {
 12940  017A  0020               	movlb	0	; select bank0
 12941  017B  0843               	movf	isr@tmpSubDelay,w
 12942  017C  00BA               	movwf	??_isr
 12943  017D  0844               	movf	isr@tmpSubDelay+1,w
 12944  017E  00BB               	movwf	??_isr+1
 12945  017F  3000               	movlw	0
 12946  0180  1BBB               	btfsc	??_isr+1,7
 12947  0181  30FF               	movlw	255
 12948  0182  00BC               	movwf	??_isr+2
 12949  0183  00BD               	movwf	??_isr+3
 12950  0184  0848               	movf	_sub_timer+3,w	;volatile
 12951  0185  3A80               	xorlw	128
 12952  0186  00BE               	movwf	??_isr+4
 12953  0187  083D               	movf	??_isr+3,w
 12954  0188  3A80               	xorlw	128
 12955  0189  023E               	subwf	??_isr+4,w
 12956  018A  1D03               	skipz
 12957  018B  2996               	goto	u456_23
 12958  018C  083C               	movf	??_isr+2,w
 12959  018D  0247               	subwf	_sub_timer+2,w	;volatile
 12960  018E  1D03               	skipz
 12961  018F  2996               	goto	u456_23
 12962  0190  083B               	movf	??_isr+1,w
 12963  0191  0246               	subwf	_sub_timer+1,w	;volatile
 12964  0192  1D03               	skipz
 12965  0193  2996               	goto	u456_23
 12966  0194  083A               	movf	??_isr,w
 12967  0195  0245               	subwf	_sub_timer,w	;volatile
 12968  0196                     u456_23:	
 12969  0196  1C03               	skipc
 12970  0197  29B3               	goto	i1l4426
 12971                           
 12972                           ;interrupts.c: 108: if (suspend_blink == 0) {
 12973  0198  0856               	movf	_suspend_blink,w	;volatile
 12974  0199  1D03               	btfss	3,2
 12975  019A  29A6               	goto	i1l4422
 12976                           
 12977                           ;interrupts.c: 109: set_leds_top(top_push_state, 1);
 12978  019B  0865               	movf	_top_push_state+1,w
 12979  019C  00F1               	movwf	i1set_leds_top@x+1
 12980  019D  0864               	movf	_top_push_state,w
 12981  019E  00F0               	movwf	i1set_leds_top@x
 12982  019F  3001               	movlw	1
 12983  01A0  00F2               	movwf	i1set_leds_top@ledState
 12984  01A1  3000               	movlw	0
 12985  01A2  00F3               	movwf	i1set_leds_top@ledState+1
 12986  01A3  3192  2208  3180   	fcall	i1_set_leds_top
 12987  01A6                     i1l4422:	
 12988                           
 12989                           ;interrupts.c: 110: }
 12990                           ;interrupts.c: 111: tmpSubDelay = delay_time;
 12991  01A6  0020               	movlb	0	; select bank0
 12992  01A7  085D               	movf	_delay_time+1,w	;volatile
 12993  01A8  00C4               	movwf	isr@tmpSubDelay+1
 12994  01A9  085C               	movf	_delay_time,w	;volatile
 12995  01AA  00C3               	movwf	isr@tmpSubDelay
 12996                           
 12997                           ;interrupts.c: 112: sub_timer = 0;
 12998  01AB  3000               	movlw	0
 12999  01AC  00C8               	movwf	_sub_timer+3	;volatile
 13000  01AD  3000               	movlw	0
 13001  01AE  00C7               	movwf	_sub_timer+2	;volatile
 13002  01AF  3000               	movlw	0
 13003  01B0  00C6               	movwf	_sub_timer+1	;volatile
 13004  01B1  3000               	movlw	0
 13005  01B2  00C5               	movwf	_sub_timer	;volatile
 13006  01B3                     i1l4426:	
 13007                           
 13008                           ;interrupts.c: 113: }
 13009                           ;interrupts.c: 115: if (sub_timer >= 20) {
 13010  01B3  1BC8               	btfsc	_sub_timer+3,7	;volatile
 13011  01B4  29CF               	goto	i1l4432
 13012  01B5  0848               	movf	_sub_timer+3,w	;volatile
 13013  01B6  1D03               	btfss	3,2
 13014  01B7  29C2               	goto	i1l4428
 13015  01B8  0847               	movf	_sub_timer+2,w	;volatile
 13016  01B9  1D03               	btfss	3,2
 13017  01BA  29C2               	goto	i1l4428
 13018  01BB  0846               	movf	_sub_timer+1,w	;volatile
 13019  01BC  1D03               	btfss	3,2
 13020  01BD  29C2               	goto	i1l4428
 13021  01BE  3014               	movlw	20
 13022  01BF  0245               	subwf	_sub_timer,w	;volatile
 13023  01C0  1C03               	btfss	3,0
 13024  01C1  29CF               	goto	i1l4432
 13025  01C2                     i1l4428:	
 13026                           
 13027                           ;interrupts.c: 116: if (suspend_blink == 0) {
 13028  01C2  0856               	movf	_suspend_blink,w	;volatile
 13029  01C3  1D03               	btfss	3,2
 13030  01C4  29CF               	goto	i1l4432
 13031                           
 13032                           ;interrupts.c: 117: set_leds_top(top_push_state, 0);
 13033  01C5  0865               	movf	_top_push_state+1,w
 13034  01C6  00F1               	movwf	i1set_leds_top@x+1
 13035  01C7  0864               	movf	_top_push_state,w
 13036  01C8  00F0               	movwf	i1set_leds_top@x
 13037  01C9  3000               	movlw	0
 13038  01CA  00F2               	movwf	i1set_leds_top@ledState
 13039  01CB  00F3               	movwf	i1set_leds_top@ledState+1
 13040  01CC  3192  2208  3180   	fcall	i1_set_leds_top
 13041  01CF                     i1l4432:	
 13042                           
 13043                           ;interrupts.c: 118: }
 13044                           ;interrupts.c: 119: }
 13045                           ;interrupts.c: 130: LATBbits.LATB0 = 0;
 13046  01CF  0022               	movlb	2	; select bank2
 13047  01D0  100D               	bcf	13,0	;volatile
 13048                           
 13049                           ;interrupts.c: 131: if (mod_timer >= mod_delay_time) {
 13050  01D1  0023               	movlb	3	; select bank3
 13051  01D2  0865               	movf	_mod_delay_time^(0+384),w
 13052  01D3  0020               	movlb	0	; select bank0
 13053  01D4  00BA               	movwf	??_isr
 13054  01D5  0023               	movlb	3	; select bank3
 13055  01D6  0866               	movf	(_mod_delay_time+1)^(0+384),w
 13056  01D7  0020               	movlb	0	; select bank0
 13057  01D8  00BB               	movwf	??_isr+1
 13058  01D9  3000               	movlw	0
 13059  01DA  1BBB               	btfsc	??_isr+1,7
 13060  01DB  30FF               	movlw	255
 13061  01DC  00BC               	movwf	??_isr+2
 13062  01DD  00BD               	movwf	??_isr+3
 13063  01DE  0022               	movlb	2	; select bank2
 13064  01DF  0823               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13065  01E0  3A80               	xorlw	128
 13066  01E1  0020               	movlb	0	; select bank0
 13067  01E2  00BE               	movwf	??_isr+4
 13068  01E3  083D               	movf	??_isr+3,w
 13069  01E4  3A80               	xorlw	128
 13070  01E5  023E               	subwf	??_isr+4,w
 13071  01E6  0022               	movlb	2	; select bank2
 13072  01E7  1D03               	skipz
 13073  01E8  29F9               	goto	u460_23
 13074  01E9  0020               	movlb	0	; select bank0
 13075  01EA  083C               	movf	??_isr+2,w
 13076  01EB  0022               	movlb	2	; select bank2
 13077  01EC  0222               	subwf	(_mod_timer+2)^(0+256),w	;volatile
 13078  01ED  1D03               	skipz
 13079  01EE  29F9               	goto	u460_23
 13080  01EF  0020               	movlb	0	; select bank0
 13081  01F0  083B               	movf	??_isr+1,w
 13082  01F1  0022               	movlb	2	; select bank2
 13083  01F2  0221               	subwf	(_mod_timer+1)^(0+256),w	;volatile
 13084  01F3  1D03               	skipz
 13085  01F4  29F9               	goto	u460_23
 13086  01F5  0020               	movlb	0	; select bank0
 13087  01F6  083A               	movf	??_isr,w
 13088  01F7  0022               	movlb	2	; select bank2
 13089  01F8  0220               	subwf	_mod_timer^(0+256),w	;volatile
 13090  01F9                     u460_23:	
 13091  01F9  1C03               	skipc
 13092  01FA  2AD7               	goto	i1l4486
 13093                           
 13094                           ;interrupts.c: 132: LATBbits.LATB0 = 1;
 13095  01FB  140D               	bsf	13,0	;volatile
 13096                           
 13097                           ;interrupts.c: 134: mod_timer = 0;
 13098  01FC  3000               	movlw	0
 13099  01FD  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13100  01FE  3000               	movlw	0
 13101  01FF  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13102  0200  3000               	movlw	0
 13103  0201  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13104  0202  3000               	movlw	0
 13105  0203  00A0               	movwf	_mod_timer^(0+256)	;volatile
 13106                           
 13107                           ;interrupts.c: 136: if (bottom_push_state == 1 || bottom_push_state == 5) {
 13108  0204  0020               	movlb	0	; select bank0
 13109  0205  0360               	decf	_bottom_push_state,w
 13110  0206  0461               	iorwf	_bottom_push_state+1,w
 13111  0207  1903               	btfsc	3,2
 13112  0208  2A0E               	goto	i1l4444
 13113  0209  3005               	movlw	5
 13114  020A  0660               	xorwf	_bottom_push_state,w
 13115  020B  0461               	iorwf	_bottom_push_state+1,w
 13116  020C  1D03               	btfss	3,2
 13117  020D  2A17               	goto	i1l4448
 13118  020E                     i1l4444:	
 13119                           
 13120                           ;interrupts.c: 137: if (mod_counter >= 61) {
 13121  020E  0852               	movf	_mod_counter+1,w
 13122  020F  3A80               	xorlw	128
 13123  0210  00BA               	movwf	??_isr
 13124  0211  3080               	movlw	128
 13125  0212  023A               	subwf	??_isr,w
 13126  0213  1D03               	skipz
 13127  0214  2A20               	goto	u464_25
 13128  0215  303D               	movlw	61
 13129  0216  2A1F               	goto	L13
 13130  0217                     i1l4448:	
 13131                           ;interrupts.c: 139: }
 13132                           ;interrupts.c: 140: } else {
 13133                           
 13134                           ;interrupts.c: 138: mod_counter = 0;
 13135                           
 13136                           
 13137                           ;interrupts.c: 141: if (mod_counter >= 31) {
 13138  0217  0852               	movf	_mod_counter+1,w
 13139  0218  3A80               	xorlw	128
 13140  0219  00BA               	movwf	??_isr
 13141  021A  3080               	movlw	128
 13142  021B  023A               	subwf	??_isr,w
 13143  021C  1D03               	skipz
 13144  021D  2A20               	goto	u464_25
 13145  021E  301F               	movlw	31
 13146  021F                     L13:	
 13147  021F  0251               	subwf	_mod_counter,w
 13148  0220                     u464_25:	
 13149  0220  1C03               	skipc
 13150  0221  2A78               	goto	i1l4478
 13151                           
 13152                           ;interrupts.c: 142: mod_counter = 0;
 13153  0222  0020               	movlb	0	; select bank0
 13154  0223  01D1               	clrf	_mod_counter
 13155  0224  01D2               	clrf	_mod_counter+1
 13156                           
 13157                           ;interrupts.c: 143: }
 13158                           ;interrupts.c: 144: }
 13159                           ;interrupts.c: 146: switch (bottom_push_state) {
 13160  0225  2A78               	goto	i1l4478
 13161  0226                     i1l4452:	
 13162                           ;interrupts.c: 147: case 1:
 13163                           
 13164                           
 13165                           ;interrupts.c: 148: mod_value = mod5[mod_counter];
 13166  0226  0852               	movf	_mod_counter+1,w
 13167  0227  00BB               	movwf	??_isr+1
 13168  0228  0851               	movf	_mod_counter,w
 13169  0229  00BA               	movwf	??_isr
 13170  022A  35BA               	lslf	??_isr,f
 13171  022B  0DBB               	rlf	??_isr+1,f
 13172  022C  3076               	movlw	118
 13173  022D  00BC               	movwf	??_isr+2
 13174  022E  3025               	movlw	37
 13175  022F  00BD               	movwf	??_isr+3
 13176  0230  083A               	movf	??_isr,w
 13177  0231  073C               	addwf	??_isr+2,w
 13178  0232  0086               	movwf	6
 13179  0233  083B               	movf	??_isr+1,w
 13180  0234  3D3D               	addwfc	??_isr+3,w
 13181  0235  0087               	movwf	7
 13182  0236  3F40               	moviw [0]fsr1
 13183  0237  0023               	movlb	3	; select bank3
 13184  0238  00CE               	movwf	_mod_value^(0+384)
 13185  0239  3F41               	moviw [1]fsr1
 13186  023A  2A58               	goto	L16
 13187  023B                     i1l4456:	
 13188                           ;interrupts.c: 151: case 2:
 13189                           
 13190                           ;interrupts.c: 150: break;
 13191                           
 13192                           ;interrupts.c: 149: PORTCbits.RC4 = 0;
 13193                           
 13194                           
 13195                           ;interrupts.c: 152: mod_value = mod2[mod_counter];
 13196  023B  3551               	lslf	_mod_counter,w
 13197  023C  3E20               	addlw	(low (_mod2| (0+768)))& (0+255)
 13198  023D  0086               	movwf	6
 13199  023E  3003               	movlw	3	; select bank6/7
 13200  023F  0087               	movwf	7
 13201  0240  3F40               	moviw [0]fsr1
 13202  0241  0023               	movlb	3	; select bank3
 13203  0242  00CE               	movwf	_mod_value^(0+384)
 13204  0243  3F41               	moviw [1]fsr1
 13205  0244  2A58               	goto	L16
 13206  0245                     i1l4460:	
 13207                           ;interrupts.c: 155: case 3:
 13208                           
 13209                           ;interrupts.c: 154: break;
 13210                           
 13211                           ;interrupts.c: 153: PORTCbits.RC4 = 0;
 13212                           
 13213                           
 13214                           ;interrupts.c: 156: mod_value = mod3[mod_counter];
 13215  0245  3551               	lslf	_mod_counter,w
 13216  0246  3EA0               	addlw	(low (_mod3| (0+768)))& (0+255)
 13217  0247  0086               	movwf	6
 13218  0248  3003               	movlw	3	; select bank7/8
 13219  0249  0087               	movwf	7
 13220  024A  3F40               	moviw [0]fsr1
 13221  024B  0023               	movlb	3	; select bank3
 13222  024C  00CE               	movwf	_mod_value^(0+384)
 13223  024D  3F41               	moviw [1]fsr1
 13224  024E  2A58               	goto	L16
 13225  024F                     i1l4464:	
 13226                           ;interrupts.c: 159: case 4:
 13227                           
 13228                           ;interrupts.c: 158: break;
 13229                           
 13230                           ;interrupts.c: 157: PORTCbits.RC4 = 0;
 13231                           
 13232                           
 13233                           ;interrupts.c: 160: mod_value = mod4[mod_counter];
 13234  024F  3551               	lslf	_mod_counter,w
 13235  0250  3E20               	addlw	(low (_mod4| (0+1024)))& (0+255)
 13236  0251  0086               	movwf	6
 13237  0252  3004               	movlw	4	; select bank8/9
 13238  0253  0087               	movwf	7
 13239  0254  3F40               	moviw [0]fsr1
 13240  0255  0023               	movlb	3	; select bank3
 13241  0256  00CE               	movwf	_mod_value^(0+384)
 13242  0257  3F41               	moviw [1]fsr1
 13243  0258                     L16:	
 13244  0258  00CF               	movwf	(_mod_value+1)^(0+384)
 13245  0259  2A75               	goto	i1l4474
 13246  025A                     i1l4468:	
 13247                           ;interrupts.c: 163: case 5:
 13248                           
 13249                           ;interrupts.c: 162: break;
 13250                           
 13251                           ;interrupts.c: 161: PORTCbits.RC4 = 0;
 13252                           
 13253                           
 13254                           ;interrupts.c: 164: mod_value = mod5[mod_counter];
 13255  025A  0852               	movf	_mod_counter+1,w
 13256  025B  00BB               	movwf	??_isr+1
 13257  025C  0851               	movf	_mod_counter,w
 13258  025D  00BA               	movwf	??_isr
 13259  025E  35BA               	lslf	??_isr,f
 13260  025F  0DBB               	rlf	??_isr+1,f
 13261  0260  3076               	movlw	118
 13262  0261  00BC               	movwf	??_isr+2
 13263  0262  3025               	movlw	37
 13264  0263  00BD               	movwf	??_isr+3
 13265  0264  083A               	movf	??_isr,w
 13266  0265  073C               	addwf	??_isr+2,w
 13267  0266  0086               	movwf	6
 13268  0267  083B               	movf	??_isr+1,w
 13269  0268  3D3D               	addwfc	??_isr+3,w
 13270  0269  0087               	movwf	7
 13271  026A  3F40               	moviw [0]fsr1
 13272  026B  0023               	movlb	3	; select bank3
 13273  026C  00CE               	movwf	_mod_value^(0+384)
 13274  026D  3F41               	moviw [1]fsr1
 13275  026E  00CF               	movwf	(_mod_value+1)^(0+384)
 13276                           
 13277                           ;interrupts.c: 166: PORTCbits.RC4 = 1;
 13278  026F  0020               	movlb	0	; select bank0
 13279  0270  160E               	bsf	14,4	;volatile
 13280                           
 13281                           ;interrupts.c: 167: break;
 13282  0271  2A92               	goto	i1l4480
 13283  0272                     i1l4472:	
 13284                           ;interrupts.c: 168: case 6:
 13285                           
 13286                           
 13287                           ;interrupts.c: 169: mod_value = 0;
 13288  0272  0023               	movlb	3	; select bank3
 13289  0273  01CE               	clrf	_mod_value^(0+384)
 13290  0274  01CF               	clrf	(_mod_value+1)^(0+384)
 13291  0275                     i1l4474:	
 13292                           
 13293                           ;interrupts.c: 170: PORTCbits.RC4 = 0;
 13294  0275  0020               	movlb	0	; select bank0
 13295  0276  120E               	bcf	14,4	;volatile
 13296                           
 13297                           ;interrupts.c: 172: }
 13298                           
 13299                           ;interrupts.c: 171: break;
 13300  0277  2A92               	goto	i1l4480
 13301  0278                     i1l4478:	
 13302                           
 13303                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13304                           ; Switch size 1, requested type "space"
 13305                           ; Number of cases is 1, Range of values is 0 to 0
 13306                           ; switch strategies available:
 13307                           ; Name         Instructions Cycles
 13308                           ; simple_byte            4     3 (average)
 13309                           ; direct_byte            8     6 (fixed)
 13310                           ; jumptable            260     6 (fixed)
 13311                           ;	Chosen strategy is simple_byte
 13312  0278  0020               	movlb	0	; select bank0
 13313  0279  0861               	movf	_bottom_push_state+1,w
 13314  027A  3A00               	xorlw	0	; case 0
 13315  027B  1903               	skipnz
 13316  027C  2A7E               	goto	i1l6196
 13317  027D  2A92               	goto	i1l4480
 13318  027E                     i1l6196:	
 13319                           
 13320                           ; Switch size 1, requested type "space"
 13321                           ; Number of cases is 6, Range of values is 1 to 6
 13322                           ; switch strategies available:
 13323                           ; Name         Instructions Cycles
 13324                           ; simple_byte           19    10 (average)
 13325                           ; direct_byte           21     9 (fixed)
 13326                           ; jumptable            263     9 (fixed)
 13327                           ;	Chosen strategy is simple_byte
 13328  027E  0860               	movf	_bottom_push_state,w
 13329  027F  3A01               	xorlw	1	; case 1
 13330  0280  1903               	skipnz
 13331  0281  2A26               	goto	i1l4452
 13332  0282  3A03               	xorlw	3	; case 2
 13333  0283  1903               	skipnz
 13334  0284  2A3B               	goto	i1l4456
 13335  0285  3A01               	xorlw	1	; case 3
 13336  0286  1903               	skipnz
 13337  0287  2A45               	goto	i1l4460
 13338  0288  3A07               	xorlw	7	; case 4
 13339  0289  1903               	skipnz
 13340  028A  2A4F               	goto	i1l4464
 13341  028B  3A01               	xorlw	1	; case 5
 13342  028C  1903               	skipnz
 13343  028D  2A5A               	goto	i1l4468
 13344  028E  3A03               	xorlw	3	; case 6
 13345  028F  1903               	skipnz
 13346  0290  2A72               	goto	i1l4472
 13347  0291  2A92               	goto	i1l4480
 13348  0292                     i1l4480:	
 13349                           
 13350                           ;interrupts.c: 181: mod_value = modulation(mod_value, adjusted_pot_value);
 13351  0292  0023               	movlb	3	; select bank3
 13352  0293  084E               	movf	_mod_value^(0+384),w
 13353  0294  0020               	movlb	0	; select bank0
 13354  0295  00AE               	movwf	modulation@x
 13355  0296  0023               	movlb	3	; select bank3
 13356  0297  084F               	movf	(_mod_value+1)^(0+384),w
 13357  0298  0020               	movlb	0	; select bank0
 13358  0299  00AF               	movwf	modulation@x+1
 13359  029A  0D89               	rlf	9,f
 13360  029B  3B89               	subwfb	9,f
 13361  029C  0989               	comf	9,f
 13362  029D  00B0               	movwf	modulation@x+2
 13363  029E  00B1               	movwf	modulation@x+3
 13364  029F  0023               	movlb	3	; select bank3
 13365  02A0  0842               	movf	_adjusted_pot_value^(0+384),w
 13366  02A1  0020               	movlb	0	; select bank0
 13367  02A2  00B2               	movwf	modulation@y
 13368  02A3  0023               	movlb	3	; select bank3
 13369  02A4  0843               	movf	(_adjusted_pot_value+1)^(0+384),w
 13370  02A5  0020               	movlb	0	; select bank0
 13371  02A6  00B3               	movwf	modulation@y+1
 13372  02A7  0D89               	rlf	9,f
 13373  02A8  3B89               	subwfb	9,f
 13374  02A9  0989               	comf	9,f
 13375  02AA  00B4               	movwf	modulation@y+2
 13376  02AB  00B5               	movwf	modulation@y+3
 13377  02AC  3190  20FE  3180   	fcall	_modulation
 13378  02AF  0020               	movlb	0	; select bank0
 13379  02B0  082F               	movf	?_modulation+1,w
 13380  02B1  0023               	movlb	3	; select bank3
 13381  02B2  00CF               	movwf	(_mod_value+1)^(0+384)
 13382  02B3  0020               	movlb	0	; select bank0
 13383  02B4  082E               	movf	?_modulation,w
 13384  02B5  0023               	movlb	3	; select bank3
 13385  02B6  00CE               	movwf	_mod_value^(0+384)
 13386                           
 13387                           ;interrupts.c: 182: CCPR9 = mod_value / 2;
 13388  02B7  3002               	movlw	2
 13389  02B8  00F0               	movwf	___awdiv@divisor
 13390  02B9  3000               	movlw	0
 13391  02BA  00F1               	movwf	___awdiv@divisor+1
 13392  02BB  084F               	movf	(_mod_value+1)^(0+384),w
 13393  02BC  00F3               	movwf	___awdiv@dividend+1
 13394  02BD  084E               	movf	_mod_value^(0+384),w
 13395  02BE  00F2               	movwf	___awdiv@dividend
 13396  02BF  3193  233A  3180   	fcall	___awdiv
 13397  02C2  0871               	movf	?___awdiv+1,w
 13398  02C3  002C               	movlb	12	; select bank12
 13399  02C4  009B               	movwf	27	;volatile
 13400  02C5  0870               	movf	?___awdiv,w
 13401  02C6  009A               	movwf	26	;volatile
 13402                           
 13403                           ;interrupts.c: 183: mod_timer = 0;
 13404  02C7  3000               	movlw	0
 13405  02C8  0022               	movlb	2	; select bank2
 13406  02C9  00A3               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13407  02CA  3000               	movlw	0
 13408  02CB  00A2               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13409  02CC  3000               	movlw	0
 13410  02CD  00A1               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13411  02CE  3000               	movlw	0
 13412  02CF  00A0               	movwf	_mod_timer^(0+256)	;volatile
 13413                           
 13414                           ;interrupts.c: 184: mod_counter = mod_counter + 1;
 13415  02D0  0020               	movlb	0	; select bank0
 13416  02D1  0851               	movf	_mod_counter,w
 13417  02D2  3E01               	addlw	1
 13418  02D3  00D1               	movwf	_mod_counter
 13419  02D4  3000               	movlw	0
 13420  02D5  3D52               	addwfc	_mod_counter+1,w
 13421  02D6  00D2               	movwf	_mod_counter+1
 13422  02D7                     i1l4486:	
 13423                           
 13424                           ;interrupts.c: 198: }
 13425                           ;interrupts.c: 223: if (preset_programmning_on == 1) {
 13426  02D7  0022               	movlb	2	; select bank2
 13427  02D8  033C               	decf	_preset_programmning_on^(0+256),w
 13428  02D9  1D03               	btfss	3,2
 13429  02DA  2B07               	goto	i1l4498
 13430                           
 13431                           ;interrupts.c: 224: preset_blink++;
 13432  02DB  3001               	movlw	1
 13433  02DC  0020               	movlb	0	; select bank0
 13434  02DD  00BA               	movwf	??_isr
 13435  02DE  083A               	movf	??_isr,w
 13436  02DF  0022               	movlb	2	; select bank2
 13437  02E0  07BB               	addwf	_preset_blink^(0+256),f
 13438                           
 13439                           ;interrupts.c: 226: if (preset_blink >= blink_delay) {
 13440  02E1  0856               	movf	(_blink_delay+1)^(0+256),w
 13441  02E2  3A80               	xorlw	128
 13442  02E3  3C80               	sublw	128
 13443  02E4  1D03               	skipz
 13444  02E5  2AE8               	goto	u466_25
 13445  02E6  0855               	movf	_blink_delay^(0+256),w
 13446  02E7  023B               	subwf	_preset_blink^(0+256),w
 13447  02E8                     u466_25:	
 13448  02E8  1C03               	skipc
 13449  02E9  2B05               	goto	i1l152
 13450                           
 13451                           ;interrupts.c: 227: LATBbits.LATB1 = 1;
 13452  02EA  0022               	movlb	2	; select bank2
 13453  02EB  148D               	bsf	13,1	;volatile
 13454                           
 13455                           ;interrupts.c: 228: if (preset_blink > blink_delay*2) {
 13456  02EC  0856               	movf	(_blink_delay+1)^(0+256),w
 13457  02ED  0020               	movlb	0	; select bank0
 13458  02EE  00BB               	movwf	??_isr+1
 13459  02EF  0022               	movlb	2	; select bank2
 13460  02F0  0855               	movf	_blink_delay^(0+256),w
 13461  02F1  0020               	movlb	0	; select bank0
 13462  02F2  00BA               	movwf	??_isr
 13463  02F3  35BA               	lslf	??_isr,f
 13464  02F4  0DBB               	rlf	??_isr+1,f
 13465  02F5  083B               	movf	??_isr+1,w
 13466  02F6  3A80               	xorlw	128
 13467  02F7  00BC               	movwf	??_isr+2
 13468  02F8  3080               	movlw	128
 13469  02F9  023C               	subwf	??_isr+2,w
 13470  02FA  1D03               	skipz
 13471  02FB  2B00               	goto	u467_25
 13472  02FC  0022               	movlb	2	; select bank2
 13473  02FD  083B               	movf	_preset_blink^(0+256),w
 13474  02FE  0020               	movlb	0	; select bank0
 13475  02FF  023A               	subwf	??_isr,w
 13476  0300                     u467_25:	
 13477  0300  1803               	skipnc
 13478  0301  2B0C               	goto	i1l157
 13479                           
 13480                           ;interrupts.c: 229: preset_blink = 0;
 13481  0302  0022               	movlb	2	; select bank2
 13482  0303  01BB               	clrf	_preset_blink^(0+256)
 13483                           
 13484                           ;interrupts.c: 230: }
 13485                           ;interrupts.c: 232: } else {
 13486  0304  2B0C               	goto	i1l157
 13487  0305                     i1l152:	
 13488                           
 13489                           ;interrupts.c: 233: LATBbits.LATB1 = 0;
 13490  0305  0022               	movlb	2	; select bank2
 13491  0306  2B0B               	goto	i1l4502
 13492  0307                     i1l4498:	
 13493                           ;interrupts.c: 234: }
 13494                           ;interrupts.c: 236: } else {
 13495                           
 13496                           
 13497                           ;interrupts.c: 237: if (preset_blink > 0) {
 13498  0307  083B               	movf	_preset_blink^(0+256),w
 13499  0308  1903               	btfsc	3,2
 13500  0309  2B0C               	goto	i1l157
 13501                           
 13502                           ;interrupts.c: 238: preset_blink = 0;
 13503  030A  01BB               	clrf	_preset_blink^(0+256)
 13504  030B                     i1l4502:	
 13505                           
 13506                           ;interrupts.c: 239: LATBbits.LATB1 = 0;
 13507  030B  108D               	bcf	13,1	;volatile
 13508  030C                     i1l157:	
 13509  030C  0020               	movlb	0	; select bank0
 13510  030D  0842               	movf	??_isr+8,w
 13511  030E  00FF               	movwf	127
 13512  030F  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13513  0310  0009               	retfie
 13514  0311                     __end_of_isr:	
 13515                           
 13516                           	psect	text44
 13517  1208                     __ptext44:	
 13518 ;; *************** function i1_set_leds_top *****************
 13519 ;; Defined at:
 13520 ;;		line 16 in file "LEDs.c"
 13521 ;; Parameters:    Size  Location     Type
 13522 ;;  x               2    0[COMMON] int 
 13523 ;;  ledState        2    2[COMMON] int 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;		None
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13535 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13538 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13539 ;;Total ram usage:        4 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		_isr
 13545 ;; This function uses a non-reentrant model
 13546 ;;
 13547                           
 13548                           
 13549                           ;psect for function i1_set_leds_top
 13550  1208                     i1_set_leds_top:	
 13551                           
 13552                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13553                           
 13554                           ;incstack = 0
 13555                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13556  1208  0027               	movlb	7	; select bank7
 13557  1209  100C               	bcf	12,0	;volatile
 13558                           
 13559                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13560  120A  108C               	bcf	12,1	;volatile
 13561                           
 13562                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13563  120B  110C               	bcf	12,2	;volatile
 13564                           
 13565                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13566  120C  118C               	bcf	12,3	;volatile
 13567                           
 13568                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13569  120D  120C               	bcf	12,4	;volatile
 13570                           
 13571                           ;LEDs.c: 22: switch (x) {
 13572  120E  2A33               	goto	i1l4362
 13573  120F                     i1l4350:	
 13574                           ;LEDs.c: 23: case 1:
 13575                           
 13576                           
 13577                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13578  120F  0C72               	rrf	i1set_leds_top@ledState,w
 13579  1210  1C03               	skipc
 13580  1211  100C               	bcf	12,0	;volatile
 13581  1212  1803               	skipnc
 13582  1213  140C               	bsf	12,0	;volatile
 13583                           
 13584                           ;LEDs.c: 25: break;
 13585  1214  0008               	return
 13586  1215                     i1l4352:	
 13587                           ;LEDs.c: 26: case 2:
 13588                           
 13589                           
 13590                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13591  1215  0C72               	rrf	i1set_leds_top@ledState,w
 13592  1216  1C03               	skipc
 13593  1217  108C               	bcf	12,1	;volatile
 13594  1218  1803               	skipnc
 13595  1219  148C               	bsf	12,1	;volatile
 13596                           
 13597                           ;LEDs.c: 28: break;
 13598  121A  0008               	return
 13599  121B                     i1l4354:	
 13600                           ;LEDs.c: 29: case 3:
 13601                           
 13602                           
 13603                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13604  121B  0C72               	rrf	i1set_leds_top@ledState,w
 13605  121C  1C03               	skipc
 13606  121D  110C               	bcf	12,2	;volatile
 13607  121E  1803               	skipnc
 13608  121F  150C               	bsf	12,2	;volatile
 13609                           
 13610                           ;LEDs.c: 31: break;
 13611  1220  0008               	return
 13612  1221                     i1l4356:	
 13613                           ;LEDs.c: 32: case 4:
 13614                           
 13615                           
 13616                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13617  1221  0C72               	rrf	i1set_leds_top@ledState,w
 13618  1222  1C03               	skipc
 13619  1223  118C               	bcf	12,3	;volatile
 13620  1224  1803               	skipnc
 13621  1225  158C               	bsf	12,3	;volatile
 13622                           
 13623                           ;LEDs.c: 34: break;
 13624  1226  0008               	return
 13625  1227                     i1l4358:	
 13626                           ;LEDs.c: 35: case 5:
 13627                           
 13628                           
 13629                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13630  1227  0C72               	rrf	i1set_leds_top@ledState,w
 13631  1228  1C03               	skipc
 13632  1229  120C               	bcf	12,4	;volatile
 13633  122A  1803               	skipnc
 13634  122B  160C               	bsf	12,4	;volatile
 13635                           
 13636                           ;LEDs.c: 39: break;
 13637                           
 13638                           ;LEDs.c: 38: case 6:
 13639                           
 13640                           ;LEDs.c: 37: break;
 13641  122C  0008               	return
 13642  122D                     i1l700:	
 13643                           ;LEDs.c: 40: case 100:
 13644                           
 13645                           
 13646                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13647  122D  140C               	bsf	12,0	;volatile
 13648                           
 13649                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13650  122E  148C               	bsf	12,1	;volatile
 13651                           
 13652                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13653  122F  150C               	bsf	12,2	;volatile
 13654                           
 13655                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13656  1230  158C               	bsf	12,3	;volatile
 13657                           
 13658                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13659  1231  160C               	bsf	12,4	;volatile
 13660                           
 13661                           ;LEDs.c: 47: }
 13662                           
 13663                           ;LEDs.c: 46: break;
 13664  1232  0008               	return
 13665  1233                     i1l4362:	
 13666                           
 13667                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13668                           ; Switch size 1, requested type "space"
 13669                           ; Number of cases is 1, Range of values is 0 to 0
 13670                           ; switch strategies available:
 13671                           ; Name         Instructions Cycles
 13672                           ; simple_byte            4     3 (average)
 13673                           ; direct_byte            8     6 (fixed)
 13674                           ; jumptable            260     6 (fixed)
 13675                           ;	Chosen strategy is simple_byte
 13676  1233  0871               	movf	i1set_leds_top@x+1,w
 13677  1234  3A00               	xorlw	0	; case 0
 13678  1235  1903               	skipnz
 13679  1236  2A38               	goto	i1l6198
 13680  1237  2A4F               	goto	i1l701
 13681  1238                     i1l6198:	
 13682                           
 13683                           ; Switch size 1, requested type "space"
 13684                           ; Number of cases is 7, Range of values is 1 to 100
 13685                           ; switch strategies available:
 13686                           ; Name         Instructions Cycles
 13687                           ; simple_byte           22    12 (average)
 13688                           ; direct_byte          209     9 (fixed)
 13689                           ; jumptable            263     9 (fixed)
 13690                           ;	Chosen strategy is simple_byte
 13691  1238  0870               	movf	i1set_leds_top@x,w
 13692  1239  3A01               	xorlw	1	; case 1
 13693  123A  1903               	skipnz
 13694  123B  2A0F               	goto	i1l4350
 13695  123C  3A03               	xorlw	3	; case 2
 13696  123D  1903               	skipnz
 13697  123E  2A15               	goto	i1l4352
 13698  123F  3A01               	xorlw	1	; case 3
 13699  1240  1903               	skipnz
 13700  1241  2A1B               	goto	i1l4354
 13701  1242  3A07               	xorlw	7	; case 4
 13702  1243  1903               	skipnz
 13703  1244  2A21               	goto	i1l4356
 13704  1245  3A01               	xorlw	1	; case 5
 13705  1246  1903               	skipnz
 13706  1247  2A27               	goto	i1l4358
 13707  1248  3A03               	xorlw	3	; case 6
 13708  1249  1903               	skipnz
 13709  124A  2A4F               	goto	i1l701
 13710  124B  3A62               	xorlw	98	; case 100
 13711  124C  1903               	skipnz
 13712  124D  2A2D               	goto	i1l700
 13713  124E  2A4F               	goto	i1l701
 13714  124F                     i1l701:	
 13715  124F  0008               	return
 13716  1250                     __end_ofi1_set_leds_top:	
 13717                           
 13718                           	psect	text45
 13719  10FE                     __ptext45:	
 13720 ;; *************** function _modulation *****************
 13721 ;; Defined at:
 13722 ;;		line 181 in file "user.c"
 13723 ;; Parameters:    Size  Location     Type
 13724 ;;  x               4   14[BANK0 ] long 
 13725 ;;  y               4   18[BANK0 ] long 
 13726 ;; Auto vars:     Size  Location     Type
 13727 ;;		None
 13728 ;; Return value:  Size  Location     Type
 13729 ;;                  4   14[BANK0 ] long 
 13730 ;; Registers used:
 13731 ;;		wreg, status,2, status,0, pclath, cstack
 13732 ;; Tracked objects:
 13733 ;;		On entry : 0/0
 13734 ;;		On exit  : 0/0
 13735 ;;		Unchanged: 0/0
 13736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13737 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13739 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13740 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13741 ;;Total ram usage:       12 bytes
 13742 ;; Hardware stack levels used:    1
 13743 ;; Hardware stack levels required when called:    1
 13744 ;; This function calls:
 13745 ;;		i1___aldiv
 13746 ;;		i1___lmul
 13747 ;; This function is called by:
 13748 ;;		_isr
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           
 13753                           ;psect for function _modulation
 13754  10FE                     _modulation:	
 13755                           
 13756                           ;user.c: 184: return (127500 + (y * x)) / 1000;
 13757                           
 13758                           ;incstack = 0
 13759                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 13760  10FE  3000               	movlw	0
 13761  10FF  0020               	movlb	0	; select bank0
 13762  1100  00A3               	movwf	i1___aldiv@divisor+3
 13763  1101  3000               	movlw	0
 13764  1102  00A2               	movwf	i1___aldiv@divisor+2
 13765  1103  3003               	movlw	3
 13766  1104  00A1               	movwf	i1___aldiv@divisor+1
 13767  1105  30E8               	movlw	232
 13768  1106  00A0               	movwf	i1___aldiv@divisor
 13769  1107  300C               	movlw	12
 13770  1108  00B6               	movwf	??_modulation
 13771  1109  30F2               	movlw	242
 13772  110A  00B7               	movwf	??_modulation+1
 13773  110B  3001               	movlw	1
 13774  110C  00B8               	movwf	??_modulation+2
 13775  110D  3000               	movlw	0
 13776  110E  00B9               	movwf	??_modulation+3
 13777  110F  0835               	movf	modulation@y+3,w
 13778  1110  00F3               	movwf	i1___lmul@multiplier+3
 13779  1111  0834               	movf	modulation@y+2,w
 13780  1112  00F2               	movwf	i1___lmul@multiplier+2
 13781  1113  0833               	movf	modulation@y+1,w
 13782  1114  00F1               	movwf	i1___lmul@multiplier+1
 13783  1115  0832               	movf	modulation@y,w
 13784  1116  00F0               	movwf	i1___lmul@multiplier
 13785  1117  0831               	movf	modulation@x+3,w
 13786  1118  00F7               	movwf	i1___lmul@multiplicand+3
 13787  1119  0830               	movf	modulation@x+2,w
 13788  111A  00F6               	movwf	i1___lmul@multiplicand+2
 13789  111B  082F               	movf	modulation@x+1,w
 13790  111C  00F5               	movwf	i1___lmul@multiplicand+1
 13791  111D  082E               	movf	modulation@x,w
 13792  111E  00F4               	movwf	i1___lmul@multiplicand
 13793  111F  319E  2697  3190   	fcall	i1___lmul
 13794  1122  0870               	movf	?i1___lmul,w
 13795  1123  0020               	movlb	0	; select bank0
 13796  1124  07B6               	addwf	??_modulation,f
 13797  1125  0871               	movf	?i1___lmul+1,w
 13798  1126  3DB7               	addwfc	??_modulation+1,f
 13799  1127  0872               	movf	?i1___lmul+2,w
 13800  1128  3DB8               	addwfc	??_modulation+2,f
 13801  1129  0873               	movf	?i1___lmul+3,w
 13802  112A  3DB9               	addwfc	??_modulation+3,f
 13803  112B  0839               	movf	??_modulation+3,w
 13804  112C  00A7               	movwf	i1___aldiv@dividend+3
 13805  112D  0838               	movf	??_modulation+2,w
 13806  112E  00A6               	movwf	i1___aldiv@dividend+2
 13807  112F  0837               	movf	??_modulation+1,w
 13808  1130  00A5               	movwf	i1___aldiv@dividend+1
 13809  1131  0836               	movf	??_modulation,w
 13810  1132  00A4               	movwf	i1___aldiv@dividend
 13811  1133  3195  2529         	fcall	i1___aldiv
 13812  1135  0020               	movlb	0	; select bank0
 13813  1136  0823               	movf	?i1___aldiv+3,w
 13814  1137  00B1               	movwf	?_modulation+3
 13815  1138  0822               	movf	?i1___aldiv+2,w
 13816  1139  00B0               	movwf	?_modulation+2
 13817  113A  0821               	movf	?i1___aldiv+1,w
 13818  113B  00AF               	movwf	?_modulation+1
 13819  113C  0820               	movf	?i1___aldiv,w
 13820  113D  00AE               	movwf	?_modulation
 13821  113E  0008               	return
 13822  113F                     __end_of_modulation:	
 13823                           
 13824                           	psect	text46
 13825  1E97                     __ptext46:	
 13826 ;; *************** function i1___lmul *****************
 13827 ;; Defined at:
 13828 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13829 ;; Parameters:    Size  Location     Type
 13830 ;;  multiplier      4    0[COMMON] unsigned long 
 13831 ;;  multiplicand    4    4[COMMON] unsigned long 
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  __lmul          4    8[COMMON] unsigned long 
 13834 ;; Return value:  Size  Location     Type
 13835 ;;                  4    0[COMMON] unsigned long 
 13836 ;; Registers used:
 13837 ;;		wreg, status,2, status,0
 13838 ;; Tracked objects:
 13839 ;;		On entry : 0/0
 13840 ;;		On exit  : 0/0
 13841 ;;		Unchanged: 0/0
 13842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13843 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13844 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13846 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13847 ;;Total ram usage:       12 bytes
 13848 ;; Hardware stack levels used:    1
 13849 ;; This function calls:
 13850 ;;		Nothing
 13851 ;; This function is called by:
 13852 ;;		_modulation
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           
 13857                           ;psect for function i1___lmul
 13858  1E97                     i1___lmul:	
 13859                           
 13860                           ;incstack = 0
 13861                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 13862  1E97  3000               	movlw	0
 13863  1E98  00FB               	movwf	i1___lmul@product+3
 13864  1E99  3000               	movlw	0
 13865  1E9A  00FA               	movwf	i1___lmul@product+2
 13866  1E9B  3000               	movlw	0
 13867  1E9C  00F9               	movwf	i1___lmul@product+1
 13868  1E9D  3000               	movlw	0
 13869  1E9E  00F8               	movwf	i1___lmul@product
 13870  1E9F                     i1l3852:	
 13871  1E9F  1C70               	btfss	i1___lmul@multiplier,0
 13872  1EA0  2EA9               	goto	i1l3856
 13873  1EA1  0874               	movf	i1___lmul@multiplicand,w
 13874  1EA2  07F8               	addwf	i1___lmul@product,f
 13875  1EA3  0875               	movf	i1___lmul@multiplicand+1,w
 13876  1EA4  3DF9               	addwfc	i1___lmul@product+1,f
 13877  1EA5  0876               	movf	i1___lmul@multiplicand+2,w
 13878  1EA6  3DFA               	addwfc	i1___lmul@product+2,f
 13879  1EA7  0877               	movf	i1___lmul@multiplicand+3,w
 13880  1EA8  3DFB               	addwfc	i1___lmul@product+3,f
 13881  1EA9                     i1l3856:	
 13882  1EA9  3001               	movlw	1
 13883  1EAA                     u347_25:	
 13884  1EAA  35F4               	lslf	i1___lmul@multiplicand,f
 13885  1EAB  0DF5               	rlf	i1___lmul@multiplicand+1,f
 13886  1EAC  0DF6               	rlf	i1___lmul@multiplicand+2,f
 13887  1EAD  0DF7               	rlf	i1___lmul@multiplicand+3,f
 13888  1EAE  0B89               	decfsz	9,f
 13889  1EAF  2EAA               	goto	u347_25
 13890  1EB0  3001               	movlw	1
 13891  1EB1                     u348_25:	
 13892  1EB1  36F3               	lsrf	i1___lmul@multiplier+3,f
 13893  1EB2  0CF2               	rrf	i1___lmul@multiplier+2,f
 13894  1EB3  0CF1               	rrf	i1___lmul@multiplier+1,f
 13895  1EB4  0CF0               	rrf	i1___lmul@multiplier,f
 13896  1EB5  0B89               	decfsz	9,f
 13897  1EB6  2EB1               	goto	u348_25
 13898  1EB7  0873               	movf	i1___lmul@multiplier+3,w
 13899  1EB8  0472               	iorwf	i1___lmul@multiplier+2,w
 13900  1EB9  0471               	iorwf	i1___lmul@multiplier+1,w
 13901  1EBA  0470               	iorwf	i1___lmul@multiplier,w
 13902  1EBB  1D03               	skipz
 13903  1EBC  2E9F               	goto	i1l3852
 13904  1EBD  087B               	movf	i1___lmul@product+3,w
 13905  1EBE  00F3               	movwf	?i1___lmul+3
 13906  1EBF  087A               	movf	i1___lmul@product+2,w
 13907  1EC0  00F2               	movwf	?i1___lmul+2
 13908  1EC1  0879               	movf	i1___lmul@product+1,w
 13909  1EC2  00F1               	movwf	?i1___lmul+1
 13910  1EC3  0878               	movf	i1___lmul@product,w
 13911  1EC4  00F0               	movwf	?i1___lmul
 13912  1EC5  0008               	return
 13913  1EC6                     __end_ofi1___lmul:	
 13914                           
 13915                           	psect	text47
 13916  1529                     __ptext47:	
 13917 ;; *************** function i1___aldiv *****************
 13918 ;; Defined at:
 13919 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 13920 ;; Parameters:    Size  Location     Type
 13921 ;;  divisor         4    0[BANK0 ] long 
 13922 ;;  dividend        4    4[BANK0 ] long 
 13923 ;; Auto vars:     Size  Location     Type
 13924 ;;  __aldiv         4   10[BANK0 ] long 
 13925 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 13926 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  4    0[BANK0 ] long 
 13929 ;; Registers used:
 13930 ;;		wreg, status,2, status,0
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13936 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13938 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13939 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13940 ;;Total ram usage:       15 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; This function calls:
 13943 ;;		Nothing
 13944 ;; This function is called by:
 13945 ;;		_modulation
 13946 ;; This function uses a non-reentrant model
 13947 ;;
 13948                           
 13949                           
 13950                           ;psect for function i1___aldiv
 13951  1529                     i1___aldiv:	
 13952                           
 13953                           ;incstack = 0
 13954                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 13955  1529  0020               	movlb	0	; select bank0
 13956  152A  01A9               	clrf	i1___aldiv@sign
 13957  152B  1FA3               	btfss	i1___aldiv@divisor+3,7
 13958  152C  2D3A               	goto	i1l1377
 13959  152D  09A0               	comf	i1___aldiv@divisor,f
 13960  152E  09A1               	comf	i1___aldiv@divisor+1,f
 13961  152F  09A2               	comf	i1___aldiv@divisor+2,f
 13962  1530  09A3               	comf	i1___aldiv@divisor+3,f
 13963  1531  0AA0               	incf	i1___aldiv@divisor,f
 13964  1532  1903               	skipnz
 13965  1533  0AA1               	incf	i1___aldiv@divisor+1,f
 13966  1534  1903               	skipnz
 13967  1535  0AA2               	incf	i1___aldiv@divisor+2,f
 13968  1536  1903               	skipnz
 13969  1537  0AA3               	incf	i1___aldiv@divisor+3,f
 13970  1538  01A9               	clrf	i1___aldiv@sign
 13971  1539  0AA9               	incf	i1___aldiv@sign,f
 13972  153A                     i1l1377:	
 13973  153A  1FA7               	btfss	i1___aldiv@dividend+3,7
 13974  153B  2D4B               	goto	i1l3874
 13975  153C  09A4               	comf	i1___aldiv@dividend,f
 13976  153D  09A5               	comf	i1___aldiv@dividend+1,f
 13977  153E  09A6               	comf	i1___aldiv@dividend+2,f
 13978  153F  09A7               	comf	i1___aldiv@dividend+3,f
 13979  1540  0AA4               	incf	i1___aldiv@dividend,f
 13980  1541  1903               	skipnz
 13981  1542  0AA5               	incf	i1___aldiv@dividend+1,f
 13982  1543  1903               	skipnz
 13983  1544  0AA6               	incf	i1___aldiv@dividend+2,f
 13984  1545  1903               	skipnz
 13985  1546  0AA7               	incf	i1___aldiv@dividend+3,f
 13986  1547  3001               	movlw	1
 13987  1548  00FC               	movwf	??i1___aldiv
 13988  1549  087C               	movf	??i1___aldiv,w
 13989  154A  06A9               	xorwf	i1___aldiv@sign,f
 13990  154B                     i1l3874:	
 13991  154B  3000               	movlw	0
 13992  154C  00AD               	movwf	i1___aldiv@quotient+3
 13993  154D  3000               	movlw	0
 13994  154E  00AC               	movwf	i1___aldiv@quotient+2
 13995  154F  3000               	movlw	0
 13996  1550  00AB               	movwf	i1___aldiv@quotient+1
 13997  1551  3000               	movlw	0
 13998  1552  00AA               	movwf	i1___aldiv@quotient
 13999  1553  0823               	movf	i1___aldiv@divisor+3,w
 14000  1554  0422               	iorwf	i1___aldiv@divisor+2,w
 14001  1555  0421               	iorwf	i1___aldiv@divisor+1,w
 14002  1556  0420               	iorwf	i1___aldiv@divisor,w
 14003  1557  1903               	skipnz
 14004  1558  2D94               	goto	i1l3896
 14005  1559  01A8               	clrf	i1___aldiv@counter
 14006  155A  0AA8               	incf	i1___aldiv@counter,f
 14007  155B                     i1l3882:	
 14008  155B  1BA3               	btfsc	i1___aldiv@divisor+3,7
 14009  155C  2D69               	goto	i1l3884
 14010  155D  3001               	movlw	1
 14011  155E                     u353_25:	
 14012  155E  35A0               	lslf	i1___aldiv@divisor,f
 14013  155F  0DA1               	rlf	i1___aldiv@divisor+1,f
 14014  1560  0DA2               	rlf	i1___aldiv@divisor+2,f
 14015  1561  0DA3               	rlf	i1___aldiv@divisor+3,f
 14016  1562  0B89               	decfsz	9,f
 14017  1563  2D5E               	goto	u353_25
 14018  1564  3001               	movlw	1
 14019  1565  00FC               	movwf	??i1___aldiv
 14020  1566  087C               	movf	??i1___aldiv,w
 14021  1567  07A8               	addwf	i1___aldiv@counter,f
 14022  1568  2D5B               	goto	i1l3882
 14023  1569                     i1l3884:	
 14024  1569  3001               	movlw	1
 14025  156A                     u355_25:	
 14026  156A  35AA               	lslf	i1___aldiv@quotient,f
 14027  156B  0DAB               	rlf	i1___aldiv@quotient+1,f
 14028  156C  0DAC               	rlf	i1___aldiv@quotient+2,f
 14029  156D  0DAD               	rlf	i1___aldiv@quotient+3,f
 14030  156E  0B89               	decfsz	9,f
 14031  156F  2D6A               	goto	u355_25
 14032  1570  0823               	movf	i1___aldiv@divisor+3,w
 14033  1571  0227               	subwf	i1___aldiv@dividend+3,w
 14034  1572  1D03               	skipz
 14035  1573  2D7E               	goto	u356_25
 14036  1574  0822               	movf	i1___aldiv@divisor+2,w
 14037  1575  0226               	subwf	i1___aldiv@dividend+2,w
 14038  1576  1D03               	skipz
 14039  1577  2D7E               	goto	u356_25
 14040  1578  0821               	movf	i1___aldiv@divisor+1,w
 14041  1579  0225               	subwf	i1___aldiv@dividend+1,w
 14042  157A  1D03               	skipz
 14043  157B  2D7E               	goto	u356_25
 14044  157C  0820               	movf	i1___aldiv@divisor,w
 14045  157D  0224               	subwf	i1___aldiv@dividend,w
 14046  157E                     u356_25:	
 14047  157E  1C03               	skipc
 14048  157F  2D89               	goto	i1l3892
 14049  1580  0820               	movf	i1___aldiv@divisor,w
 14050  1581  02A4               	subwf	i1___aldiv@dividend,f
 14051  1582  0821               	movf	i1___aldiv@divisor+1,w
 14052  1583  3BA5               	subwfb	i1___aldiv@dividend+1,f
 14053  1584  0822               	movf	i1___aldiv@divisor+2,w
 14054  1585  3BA6               	subwfb	i1___aldiv@dividend+2,f
 14055  1586  0823               	movf	i1___aldiv@divisor+3,w
 14056  1587  3BA7               	subwfb	i1___aldiv@dividend+3,f
 14057  1588  142A               	bsf	i1___aldiv@quotient,0
 14058  1589                     i1l3892:	
 14059  1589  3001               	movlw	1
 14060  158A                     u357_25:	
 14061  158A  36A3               	lsrf	i1___aldiv@divisor+3,f
 14062  158B  0CA2               	rrf	i1___aldiv@divisor+2,f
 14063  158C  0CA1               	rrf	i1___aldiv@divisor+1,f
 14064  158D  0CA0               	rrf	i1___aldiv@divisor,f
 14065  158E  0B89               	decfsz	9,f
 14066  158F  2D8A               	goto	u357_25
 14067  1590  3001               	movlw	1
 14068  1591  02A8               	subwf	i1___aldiv@counter,f
 14069  1592  1D03               	btfss	3,2
 14070  1593  2D69               	goto	i1l3884
 14071  1594                     i1l3896:	
 14072  1594  0829               	movf	i1___aldiv@sign,w
 14073  1595  1903               	btfsc	3,2
 14074  1596  2DA2               	goto	i1l3900
 14075  1597  09AA               	comf	i1___aldiv@quotient,f
 14076  1598  09AB               	comf	i1___aldiv@quotient+1,f
 14077  1599  09AC               	comf	i1___aldiv@quotient+2,f
 14078  159A  09AD               	comf	i1___aldiv@quotient+3,f
 14079  159B  0AAA               	incf	i1___aldiv@quotient,f
 14080  159C  1903               	skipnz
 14081  159D  0AAB               	incf	i1___aldiv@quotient+1,f
 14082  159E  1903               	skipnz
 14083  159F  0AAC               	incf	i1___aldiv@quotient+2,f
 14084  15A0  1903               	skipnz
 14085  15A1  0AAD               	incf	i1___aldiv@quotient+3,f
 14086  15A2                     i1l3900:	
 14087  15A2  082D               	movf	i1___aldiv@quotient+3,w
 14088  15A3  00A3               	movwf	?i1___aldiv+3
 14089  15A4  082C               	movf	i1___aldiv@quotient+2,w
 14090  15A5  00A2               	movwf	?i1___aldiv+2
 14091  15A6  082B               	movf	i1___aldiv@quotient+1,w
 14092  15A7  00A1               	movwf	?i1___aldiv+1
 14093  15A8  082A               	movf	i1___aldiv@quotient,w
 14094  15A9  00A0               	movwf	?i1___aldiv
 14095  15AA  0008               	return
 14096  15AB                     __end_ofi1___aldiv:	
 14097                           
 14098                           	psect	text48
 14099  133A                     __ptext48:	
 14100 ;; *************** function ___awdiv *****************
 14101 ;; Defined at:
 14102 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14103 ;; Parameters:    Size  Location     Type
 14104 ;;  divisor         2    0[COMMON] int 
 14105 ;;  dividend        2    2[COMMON] int 
 14106 ;; Auto vars:     Size  Location     Type
 14107 ;;  quotient        2    7[COMMON] int 
 14108 ;;  sign            1    6[COMMON] unsigned char 
 14109 ;;  counter         1    5[COMMON] unsigned char 
 14110 ;; Return value:  Size  Location     Type
 14111 ;;                  2    0[COMMON] int 
 14112 ;; Registers used:
 14113 ;;		wreg, status,2, status,0
 14114 ;; Tracked objects:
 14115 ;;		On entry : 0/0
 14116 ;;		On exit  : 0/0
 14117 ;;		Unchanged: 0/0
 14118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14119 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14120 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14121 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14122 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14123 ;;Total ram usage:        9 bytes
 14124 ;; Hardware stack levels used:    1
 14125 ;; This function calls:
 14126 ;;		Nothing
 14127 ;; This function is called by:
 14128 ;;		_isr
 14129 ;; This function uses a non-reentrant model
 14130 ;;
 14131                           
 14132                           
 14133                           ;psect for function ___awdiv
 14134  133A                     ___awdiv:	
 14135                           
 14136                           ;incstack = 0
 14137                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14138  133A  01F6               	clrf	___awdiv@sign
 14139  133B  1FF1               	btfss	___awdiv@divisor+1,7
 14140  133C  2B44               	goto	i1l4312
 14141  133D  09F0               	comf	___awdiv@divisor,f
 14142  133E  09F1               	comf	___awdiv@divisor+1,f
 14143  133F  0AF0               	incf	___awdiv@divisor,f
 14144  1340  1903               	skipnz
 14145  1341  0AF1               	incf	___awdiv@divisor+1,f
 14146  1342  01F6               	clrf	___awdiv@sign
 14147  1343  0AF6               	incf	___awdiv@sign,f
 14148  1344                     i1l4312:	
 14149  1344  1FF3               	btfss	___awdiv@dividend+1,7
 14150  1345  2B4F               	goto	i1l4318
 14151  1346  09F2               	comf	___awdiv@dividend,f
 14152  1347  09F3               	comf	___awdiv@dividend+1,f
 14153  1348  0AF2               	incf	___awdiv@dividend,f
 14154  1349  1903               	skipnz
 14155  134A  0AF3               	incf	___awdiv@dividend+1,f
 14156  134B  3001               	movlw	1
 14157  134C  00F4               	movwf	??___awdiv
 14158  134D  0874               	movf	??___awdiv,w
 14159  134E  06F6               	xorwf	___awdiv@sign,f
 14160  134F                     i1l4318:	
 14161  134F  01F7               	clrf	___awdiv@quotient
 14162  1350  01F8               	clrf	___awdiv@quotient+1
 14163  1351  0870               	movf	___awdiv@divisor,w
 14164  1352  0471               	iorwf	___awdiv@divisor+1,w
 14165  1353  1903               	btfsc	3,2
 14166  1354  2B7E               	goto	i1l4340
 14167  1355  01F5               	clrf	___awdiv@counter
 14168  1356  0AF5               	incf	___awdiv@counter,f
 14169  1357                     i1l4328:	
 14170  1357  1BF1               	btfsc	___awdiv@divisor+1,7
 14171  1358  2B63               	goto	i1l4330
 14172  1359  3001               	movlw	1
 14173  135A                     u436_25:	
 14174  135A  35F0               	lslf	___awdiv@divisor,f
 14175  135B  0DF1               	rlf	___awdiv@divisor+1,f
 14176  135C  0B89               	decfsz	9,f
 14177  135D  2B5A               	goto	u436_25
 14178  135E  3001               	movlw	1
 14179  135F  00F4               	movwf	??___awdiv
 14180  1360  0874               	movf	??___awdiv,w
 14181  1361  07F5               	addwf	___awdiv@counter,f
 14182  1362  2B57               	goto	i1l4328
 14183  1363                     i1l4330:	
 14184  1363  3001               	movlw	1
 14185  1364                     u438_25:	
 14186  1364  35F7               	lslf	___awdiv@quotient,f
 14187  1365  0DF8               	rlf	___awdiv@quotient+1,f
 14188  1366  0B89               	decfsz	9,f
 14189  1367  2B64               	goto	u438_25
 14190  1368  0871               	movf	___awdiv@divisor+1,w
 14191  1369  0273               	subwf	___awdiv@dividend+1,w
 14192  136A  1D03               	skipz
 14193  136B  2B6E               	goto	u439_25
 14194  136C  0870               	movf	___awdiv@divisor,w
 14195  136D  0272               	subwf	___awdiv@dividend,w
 14196  136E                     u439_25:	
 14197  136E  1C03               	skipc
 14198  136F  2B75               	goto	i1l4336
 14199  1370  0870               	movf	___awdiv@divisor,w
 14200  1371  02F2               	subwf	___awdiv@dividend,f
 14201  1372  0871               	movf	___awdiv@divisor+1,w
 14202  1373  3BF3               	subwfb	___awdiv@dividend+1,f
 14203  1374  1477               	bsf	___awdiv@quotient,0
 14204  1375                     i1l4336:	
 14205  1375  3001               	movlw	1
 14206  1376                     u440_25:	
 14207  1376  36F1               	lsrf	___awdiv@divisor+1,f
 14208  1377  0CF0               	rrf	___awdiv@divisor,f
 14209  1378  0B89               	decfsz	9,f
 14210  1379  2B76               	goto	u440_25
 14211  137A  3001               	movlw	1
 14212  137B  02F5               	subwf	___awdiv@counter,f
 14213  137C  1D03               	btfss	3,2
 14214  137D  2B63               	goto	i1l4330
 14215  137E                     i1l4340:	
 14216  137E  0876               	movf	___awdiv@sign,w
 14217  137F  1903               	btfsc	3,2
 14218  1380  2B86               	goto	i1l4344
 14219  1381  09F7               	comf	___awdiv@quotient,f
 14220  1382  09F8               	comf	___awdiv@quotient+1,f
 14221  1383  0AF7               	incf	___awdiv@quotient,f
 14222  1384  1903               	skipnz
 14223  1385  0AF8               	incf	___awdiv@quotient+1,f
 14224  1386                     i1l4344:	
 14225  1386  0878               	movf	___awdiv@quotient+1,w
 14226  1387  00F1               	movwf	?___awdiv+1
 14227  1388  0877               	movf	___awdiv@quotient,w
 14228  1389  00F0               	movwf	?___awdiv
 14229  138A  0008               	return
 14230  138B                     __end_of___awdiv:	
 14231  007E                     btemp	set	126	;btemp
 14232  007E                     int$flags	set	126
 14233  007E                     wtemp	set	126
 14234  007E                     wtemp0	set	126
 14235  0080                     wtemp1	set	128
 14236  0082                     wtemp2	set	130
 14237  0084                     wtemp3	set	132
 14238  0086                     wtemp4	set	134
 14239  0088                     wtemp5	set	136
 14240  007F                     wtemp6	set	127
 14241  007E                     ttemp	set	126
 14242  007E                     ttemp0	set	126
 14243  0081                     ttemp1	set	129
 14244  0084                     ttemp2	set	132
 14245  0087                     ttemp3	set	135
 14246  007F                     ttemp4	set	127
 14247  007E                     ltemp	set	126
 14248  007E                     ltemp0	set	126
 14249  0082                     ltemp1	set	130
 14250  0086                     ltemp2	set	134
 14251  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1012
    BSS         210
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     79      79
    BANK2            80     22      70
    BANK3            80     15      75
    BANK4            80      0      44
    BANK5            80      0      80
    BANK6            80      0      62
    BANK7            80      0      62
    BANK8            80      0      62
    BANK9            80      0      64
    BANK10           78      0      62
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->___fttol
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   62845
                                             18 BANK2      4     4      0
                                              0 BANK3     15    15      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3308
                                             22 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4681
                                             22 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2140
                                             18 BANK1      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7868
                                             25 BANK1      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4047
                                             18 BANK1      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3821
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11643
                                              6 BANK2     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3186
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2324
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14370
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3560
                                             37 BANK1     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2328
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2294
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1754
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2805
                                              8 BANK1      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4F      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     16      46       9       87.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      F      4B      11       93.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      2C      13       55.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      50      15      100.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2EC      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3E      20       77.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3E      22       77.5%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      3E      26       79.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2EC      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Thu Dec 29 00:55:56 2016

                     _update_mode 1180                      ___altoft@exp 00AE                       __CFG_CP$OFF 0000  
                   ___altoft@sign 00AF                      ___awdiv@sign 0076                _topTactile_pressed 013E  
      setDoublePressState@f_state 00B2                   _updateSwitchTap 0B99                      ___ftadd@exp1 00B4  
                    ___ftadd@exp2 00B3                      ___ftadd@sign 00B2                               l313 040E  
                             l530 1D93                               l523 09B2                               l700 13BA  
                             l348 1F79                               l701 13DE                               l710 1F9B  
                             l712 1F9E                               l713 1FC2                               l705 1F8F  
                             l707 1F92              __size_of_adc_convert 0013                               l708 1F95  
                             l709 1F98                               l559 14E5                               l844 11D6  
                             l860 12DF                               l870 11A6                               l848 11FD  
                             l856 12AF                               l872 11A8                               l873 11AB  
                             l874 11B9                               _PR2 001B      solidring_tactiles@ring_delay 00B4  
                             _map 162D                               _isr 0004                               _tap 0220  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 014C           __end_of_set_leds_bottom 1FC3  
                    __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029                      ___ftdiv@cntr 00CF  
                    ___ftdiv@sign 00D4                              _B25k 02A0                              l1223 0C65  
                            l1209 0BAE                              l1083 0A3E                              l1514 0B42  
                            l1377 15BC                              l1490 1425                              l1491 142D  
                            l1483 1412                              l1574 1735                              l5106 127B  
                            l5204 0ACB                              l5060 1479                              l5214 0AE1  
                            l5302 17DE                              l5134 1F40                              l5232 0B0E  
                            l5208 0AD2                              l5400 172B                              l5250 0B54  
                            l5234 0B18                              l5226 0AFB                              l5322 086B  
                            l5402 1739                              l5244 0B34                              l5236 0B1D  
                            l5316 0855                              l5164 15DD                              l5156 15CD  
                            l5254 0B66                              l5246 0B3E                              l5238 0B21  
                            l5350 08CA                              l5334 08A6                              l5502 12CB  
                            l5406 1747                              l5182 1624                              l5174 160B  
                            l5166 15EB                              ?_map 00D5                              l5264 0B81  
                            l5280 1784                              l5274 176E                              l5346 08C2  
                            l5338 08AE                              l5194 1E2F                              l5602 0A31  
                            l5178 1616                              l5522 11AE                              l5620 0A6B  
                            l5524 11BD                              l5446 14F8                              l5294 17C5  
                            l5374 16D3                              l6190 091F                              l5614 0A5D  
                            l6192 13C7                              l4920 139A                              l5448 1501  
                            l5800 1FD8                              l4904 1EFF                              l5472 11CB  
                            l5392 170C                              l5608 0A42                              l6194 1FAB  
                            l4922 13A2                              l4930 13C1                              l5802 1FE8  
                            l5482 11F2                              l5394 171D                              l5618 0A65  
                            l5722 0CB4                              l5714 0CA8                              l5706 0C5D  
                            l4924 13AA                              l4908 1F09                              l5492 12A4  
                            l5628 0A7E                              l5564 09CE                              l5724 0CFE  
                            l5652 0BA4                              l4926 13B2                              l4918 1392  
                            l5590 0A19                              l5910 06F0                              l5902 066B  
                            l5830 03EA                              l5576 09EF                              l5568 09E1  
                            l5728 0D24                              l5736 0D64                              l4954 1FA5  
                            l4970 13F9                              l5770 0909                              l5682 0C0A  
                            l5674 0BE3                              l5658 0BBF                              l5930 07C2  
                            l5914 0735                              l5906 06B0                              l4980 141F  
                            l4972 13FE                              l4964 13E8                              l5772 090F  
                            l5780 0933                              l5588 0A11                              l5676 0C00  
                            l5932 076C                              l5844 0412                              ?_isr 0070  
                            l5774 0913                              l5766 0901                              l5694 0C2E  
                            l5934 07C8                              l5846 0415                              l4968 13EF  
                            l5768 0905                              l5696 0C36                              l4978 1417  
                            l5778 091A                              l5698 0C45                              l5890 05CB  
                            l5874 04EB                              l5866 0497                              l5886 058B  
                            l5878 052B                              l5898 062B                              u5005 1F0A  
                            u5015 1F11                              u5105 141A                              u5220 1279  
                            u5215 125B                              u5145 1434                              u5065 13F4  
                            u6105 12C4                              u5315 15E0                              u5085 140D  
                            u6045 11EB                              u5245 1DBE                              u5255 1F31  
                            u6215 09F9                              u5335 15EC                              u6135 1193  
                            u6305 0A4E                              u5345 1600                              u5515 0B0F  
                            u5195 1486                              u5355 160C                              u5275 1DD8  
                            u6175 09C7                              u5545 0B22                              u6185 09DA  
                            u6435 0BEC                              u5485 0AFC                              u5645 1796  
                            u5805 08D1                              u5725 0877                              u5575 0B35  
                            u5655 17A6                              u5735 0887                              u6535 0C76  
                            u5665 17C6                              u5905 172C                              u6625 09AB  
                            u6545 0C8D                              u6465 0C14                              u6705 0495  
                            u5675 17D5                              u5755 08AF                              u6555 0CBD  
                            u6715 0509                              u6645 1FDD                              u5685 17DF  
                            u5765 08B5                              u5845 16DB                              u6565 0CD2  
                            u6813 07BB                              u6805 07A3                              u6725 0529  
                            u5935 1E52                              u6575 0CE6                              u6735 05A9  
                            u5945 1E58                              u6745 05C9                              u5795 08CB  
                            u5875 170D                              u6595 0D03                              u6755 0649  
                            u6675 0404                              u5980 14FF                              u5965 14DE  
                            u6765 0669                              u5975 14F1                              u6775 06CE  
                            u6695 0475                              u6785 06EE                     _star_tactiles 1444  
                    __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000                              _iCnt 0138  
                            _mod1 0520                              _mod2 0320                              _mod3 03A0  
                            _mod4 0420                              _mod5 2576                              _main 03CF  
                    ___ftpack@arg 00A0                      ___ftpack@exp 00A3                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            fsr1l 0006                              map@x 00D5                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E          __end_of_setFeedbackState 1DCD  
                            start 0311                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 1004      updateSwitchTap@tapCntDivisor 00BC      __end_of_setSwitchBypassState 129A  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00C3  
                    ___ftmul@sign 00C4                   __end_of_InitApp 1EF6                 ??_restoreLEDState 00A0  
                    ___fttol@exp1 0144                             ??_map 00E4                      ___fttol@lval 0140  
                           ??_isr 003A                   _switchBypass_up 01E7         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 162D                             ?_main 0070                   __end_of___awdiv 138B  
                 __end_of___ftadd 0B99                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 1800  
                 __end_of___ftneg 1D33                   __end_of___ftmul 08F2                   ___awdiv@divisor 0070  
                 __end_of___fttol 1757                             i1l121 0119                             i1l152 0305  
                           i1l157 030C                             i1l700 122D                             i1l701 124F  
                 ___awdiv@counter 0075               _ConfigureOscillator 1D10                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 00A4                   _switchTap_state 0165  
               ??_setLongTapState 00A2                     ___awtoft@sign 00AD                             _myBuf 04A0  
                   ___ftpack@sign 00A4                             _timer 004D                    ?_star_tactiles 0070  
                           main@i 0151                  __end_ofi1___lmul 1EC6                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 1F88                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 1208                __size_ofi1___aldiv 0082  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F             set_subdivision@scalar 014E              ?_ConfigureOscillator 0070  
              _getCurrentLEDState 1D9A                _updateSwitchBypass 09B8           __end_of_updateSwitchTap 0D7E  
                 __initialization 0313           _updateSwitchBypassState 0002                      __end_of_main 0800  
         __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070               ?_getCurrentLEDState 0070  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000                   _set_subdivision 08F2  
                          ??_main 01D4                     ___fttol@sign1 013F           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 10FE                    _feedback_timer 0126                    _feedback_state 0066  
                  _feedback_start 0054                  ?_set_leds_bottom 00A0                  __end_of___altoft 2000  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0072  
             _baseline_delay_time 0058              ??_getCurrentLEDState 00A0                  __end_of___awtoft 1E46  
                __end_of___ftpack 1444              ??_updateSwitchBypass 00B6                            i1l1377 153A  
                          i1l4312 1344                            i1l4330 1363                            i1l4340 137E  
                          i1l4412 0168                            i1l4318 134F                            i1l4350 120F  
                          i1l4502 030B                            i1l4422 01A6                            i1l4414 0178  
                          i1l4344 1386                            i1l4336 1375                            i1l4328 1357  
                          i1l4352 1215                            i1l4432 01CF                            i1l4416 017A  
                          i1l4354 121B                            i1l4362 1233                            i1l4426 01B3  
                          i1l3900 15A2                            i1l4356 1221                            i1l4460 0245  
                          i1l4452 0226                            i1l4444 020E                            i1l4428 01C2  
                          i1l4358 1227                            i1l4472 0272                            i1l4464 024F  
                          i1l4456 023B                            i1l4480 0292                            i1l4448 0217  
                          i1l4392 0106                            i1l4384 00BD                            i1l4474 0275  
                          i1l4378 00A2                            i1l3852 1E9F                            i1l4468 025A  
                          i1l4478 0278                            i1l4486 02D7                            i1l3856 1EA9  
                          i1l3882 155B                            i1l3874 154B                            i1l4498 0307  
                          i1l3892 1589                            i1l3884 1569                            i1l6196 027E  
                          i1l6198 1238                            i1l3896 1594                            _PMADRH 0192  
                          u440_25 1376                            _PMADRL 0191                            u353_25 155E  
                          _PMDATH 0194                            _PMDATL 0193                            u355_25 156A  
                          u347_25 1EAA                            _PMCON2 0196                            u460_23 01F9  
                          u436_25 135A                            u356_25 157E                            u348_25 1EB1  
                          u453_23 0132                            u357_25 158A                            u445_25 0099  
                          u438_25 1364                            u439_25 136E                            u447_25 00B4  
                          u456_23 0196                            u464_25 0220                            u449_23 00D6  
                          u466_25 02E8                            u467_25 0300                    _debounce_count 01C6  
                  _debounce_mode1 01C8                    _debounce_mode2 01CA                         ??_InitApp 00A0  
           ??_ConfigureOscillator 00A0          __end_of_read_top_tactile 12EA                    __CFG_PWRTE$OFF 0000  
                          ___lmul 1EF6                         ??___aldiv 00A8                         ??___awdiv 0074  
                       ??___ftadd 00AE                    __CFG_STVREN$ON 0000                         ??___ftdiv 00CB  
                       ??___ftneg 00A3                         ??___ftmul 00BB                         ??___fttol 00EB  
                __end_of_init_adc 1D3D                  __end_of_init_pwm 1180         __size_of_showBootSequence 002B  
                ___awdiv@quotient 0077                      __pdataBANK10 0520                 __end_ofi1___aldiv 15AB  
           ___ftmul@f3_as_product 00C0                      __pdataBIGRAM 236E           FLASH_ReadWord@flashAddr 00A0  
                    __pdataCOMMON 007D              _getSwitchBypassState 1000                         ??_wait_ms 00AE  
            _setSwitchBypassState 1250                   ??_star_tactiles 00B2            setLongTapState@f_state 00A0  
         __end_of__initialization 03CB                        ___altoft@c 00A8                        ___ftadd@f1 00A8  
                      ___ftadd@f2 00AB                 _bypass_turning_on 0137                        ___ftdiv@f1 00C8  
                      ___ftdiv@f2 00C5                        ___ftdiv@f3 00D0                    _top_push_state 0064  
       ??_updateSwitchBypassState 00A2                        ___ftneg@f1 00A0               _switchBypass_toggle 01D2  
                      ___awtoft@c 00A8           __end_of_set_subdivision 09B8                        ___ftmul@f1 00B5  
                      ___ftmul@f2 00B8                        ___fttol@f1 00E7                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 1D75  
                    __pidataBANK2 1D64                      __pidataBANK3 1D14                      __pidataBANK5 12EA  
                    __pidataBANK6 0800                      __pidataBANK7 1080                      __pidataBANK8 1042  
                _initSwitchBypass 1D55                         ?i1___lmul 0070                   _doubleTap_state 0053  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0             ?_setSwitchBypassState 00B2  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                 i1___aldiv@divisor 0020  
               i1___aldiv@counter 0028                        __pbssBANK0 0045                        __pbssBANK2 0120  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                        __pbssBANK9 04A0  
                ??i1_set_leds_top 0074                   _restoreLEDState 1DE7                   __CFG_VCAPEN$OFF 0000  
                      _delayArray 236E                 ?_setFeedbackState 00A0                        _delay_time 005C  
                _long_press_limit 0062      __size_of_setDoublePressState 0030                        _delayfound 01CC  
                      __pmaintext 03CF                ??_setFeedbackState 00A2                    _InitializeTaps 1E46  
                         ?___lmul 00A0                        __pintentry 0004                        _blink_rate 007D  
                   ??_adc_convert 00A2                         ?___altoft 00A8                    ___lmul@product 00A8  
                 _setLongTapState 1DCD                         ?___awtoft 00A8                         ?___ftpack 00A0  
                      ??i1___lmul 0078                    _FLASH_ReadWord 1E04   __end_of_updateSwitchBypassState 0003  
                     modulation@x 002E                       modulation@y 0032                   _debounce_bypass 01C4  
                   _suspend_blink 0056                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1EC6            __end_of_InitializeTaps 1E6C                     ?_set_leds_top 00A0  
                      _knob1_prev 0157                        _knob2_prev 0159                        _knob3_prev 015B  
                      _knob4_prev 015D                        _knob5_prev 015F                  ?_set_subdivision 0145  
                         ___aldiv 15AB                           ___awdiv 133A                   __size_of___lmul 0030  
                         ___ftadd 0AA3                           ___ftdiv 1757                           ___ftneg 1D2A  
                      _knob_1_pos 0128                        _knob_2_pos 012A                           ___ftmul 083E  
                      _knob_3_pos 012C                           ___fttol 16B8                        _knob_4_pos 012E  
                      _knob_5_pos 0130                 _switchTap_pressed 0057                        ??___altoft 00AC  
                _showBootSequence 1E6C            __end_of_FLASH_ReadWord 1E24                        ??___awtoft 00AB  
                      ??___ftpack 00A5                InitializeTaps@itap 00A1                           __ptext1 1180  
                         __ptext2 0B99                           __ptext3 1DCD                           __ptext4 15AB  
                         __ptext5 09B8                           __ptext6 1DB3                           __ptext7 1F26  
                         __ptext8 1E6C                           __ptext9 1444            ??_getSwitchBypassState 00A2  
                       _T2CONbits 001C                  _adjust_sub_delay 01C0                      __size_of_map 008B  
                    __size_of_isr 030D            ??_setSwitchBypassState 00B4               __end_of_adc_convert 1D9A  
                ___aldiv@dividend 00A4                           _wait_ms 1F56           __end_of_restoreLEDState 1E04  
                         clrloop0 1D4A              end_of_initialization 03CB                        _modulation 10FE  
                         init_ram 1D3D                        ??_init_adc 00A0                           initloop 1D3E  
                      ??_init_pwm 00A0      updateSwitchBypassState@state 00A0                _solidring_tactiles 10BE  
                   _longTap_timer 0132                     _longTap_state 0067                     _longTap_start 0055  
                  ??_set_leds_top 00A4                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1DE7            i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 00A2              __size_of_update_mode 0041                   ?_FLASH_ReadWord 00A0  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
            star_tactiles@reverse 00B4                        _test_timer 01BC                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         i1___aldiv 1529  
         setFeedbackState@f_state 00A0              ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 1D14  
     __size_of_getCurrentLEDState 0019                        map@out_max 00E1                        map@out_min 00DE  
     __size_of_updateSwitchBypass 00EB          __end_of_initSwitchBypass 1D64                       _CCP1CONbits 0293  
                     ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 0134                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 00BF                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                     __pidataBANK10 1004  
                  __end_of___lmul 1F26                     __pidataBIGRAM 0D7E                       _adc_convert 1D87  
                   __pidataCOMMON 0003                    _switchTap_down 013D             i1___lmul@multiplicand 0074  
               __size_ofi1___lmul 002F               start_initialization 0313             _bottomTactile_pressed 0136  
             _setDoublePressState 1F26                        ?i1___aldiv 0020                       __end_of_map 16B8  
                     __end_of_isr 0311                  ?_restoreLEDState 0070             __end_of_star_tactiles 14B3  
              _adjusted_pot_value 01C2                       ?_modulation 002E              ?_setDoublePressState 00B2  
                ?_setLongTapState 00A0                          ??___lmul 00A8                       __pdataBANK0 0058  
                     __pdataBANK2 0155                       __pdataBANK3 01E3                       __pdataBANK5 02A0  
                     __pdataBANK6 0320                       __pdataBANK7 03A0                       __pdataBANK8 0420  
              i1___aldiv@dividend 0024                     _tap_iteration 0161          __size_of_updateSwitchTap 01E5  
               __size_of___altoft 003D         __size_of_setFeedbackState 001A                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 00A0                     ??_init_timer2 00A0  
            __end_of_set_leds_top 13DF                         ___latbits 0003                _switchBypass_state 0069  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 013F  
                   __pcstackBANK3 01D4                     _delay_counter 0124                  i1___lmul@product 0078  
        __end_of_showBootSequence 1E97          ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A  
                  isr@tmpSubDelay 0043                          ?_InitApp 0070                         __pnvBANK3 01E9  
           ??_setDoublePressState 00B4                 __size_of_init_adc 000A                 __size_of_init_pwm 0041  
                        ?___aldiv 00A0                 ??_set_leds_bottom 00A2                _currentBypassState 0164  
                        ?___awdiv 0070                          ?___ftadd 00A8                          ?___ftdiv 00C5  
                        ?___ftneg 00A0                          ?___ftmul 00B5                          ?___fttol 00E7  
                     _blink_delay 0155               __size_of_modulation 0041                       _blink_state 0163  
                      _B25kLength 01E9                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                       ??i1___aldiv 007C                          ?_wait_ms 00AC  
             _read_bottom_tactile 11C1               __end_of_init_timer0 1D21               __end_of_init_timer2 1D2A  
                       _mod_value 01CE                         _mod_timer 0120                  ??_InitializeTaps 00A0  
                 ___aldiv@divisor 00A0                   ___aldiv@counter 00A9                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 01E5                         clear_ram0 1D49                         _tap_timer 0049  
                       _tap_total 01B8                     set_leds_top@x 00A0                  ??_FLASH_ReadWord 00A2  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6  
                       map@in_max 00DB                         map@in_min 00D8                         _sub_timer 0045  
                      _ADCON0bits 009D                          i1___lmul 1E97                        _ADCON1bits 009E  
                       main@i_391 0153          __size_of_set_subdivision 00C6                  set_subdivision@x 0145  
                set_subdivision@y 0147         __size_of_read_top_tactile 0050     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 004A                 ??_updateSwitchTap 00B6                 ___lmul@multiplier 00A0  
               _ReadSavedSettings 14B3                 ?_initSwitchBypass 0070                    wait_ms@timeSec 00AC  
              ?_ReadSavedSettings 0070                    wait_ms@timemsl 00AE       setSwitchBypassState@f_state 00B2  
              ??_initSwitchBypass 00B6                  __size_of_InitApp 0030                       _mode1_state 0139  
                   ??_update_mode 00A0                       _mode2_state 013A             ??_read_bottom_tactile 00B2  
             updateSwitchTap@iCnt 00BE               ??_ReadSavedSettings 00A4                        _APFCONbits 011D  
               star_tactiles@iLed 00B5                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 1FC3                  __size_of___ftmul 00B4  
                __size_of___fttol 009F                          ___awtoft 1E24             __size_of_set_leds_top 0054  
                        ___ftpack 13DF                          _map$2172 00E4            _preset_programmning_on 013C  
          star_tactiles@iLed_1453 00B7                        _ANSELEbits 0190                        _ANSELFbits 040C  
                set_leds_bottom@x 00A0                  _setFeedbackState 1DB3                       _init_timer0 1D1A  
                     _init_timer2 1D21                _delay_time_changed 01E3        __end_of_getCurrentLEDState 1DB3  
      __end_of_updateSwitchBypass 0AA3                          __ptext10 10BE                          __ptext11 1DE7  
                        __ptext20 083E                          __ptext12 1D9A                          __ptext21 1757  
                        __ptext13 08F2                          __ptext30 1FC3                          __ptext22 0AA3  
                        __ptext14 16B8                          __ptext31 13DF                          __ptext23 1D55  
                        __ptext15 1E24                          __ptext40 1D1A                          __ptext32 14B3  
                        __ptext24 1250                          __ptext16 129A                          __ptext41 1D33  
                        __ptext33 138B                          __ptext25 1F56                          __ptext17 11C1  
                        __ptext42 1D10                          __ptext34 1F88                          __ptext26 1EF6  
                        __ptext18 162D                          __ptext35 1E04                          __ptext27 0002  
                        __ptext19 1D2A                          __ptext44 1208                          __ptext36 1E46  
                        __ptext28 1000                          __ptext45 10FE                          __ptext37 1EC6  
                        __ptext29 1D87                          __ptext46 1E97                          __ptext38 113F  
                        __ptext47 1529                          __ptext39 1D21                          __ptext48 133A  
       __end_of_ReadSavedSettings 1529                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 01B4                      ??_modulation 0036                       _mod_counter 0051  
                        _init_adc 1D33                     __size_of_main 0431                          _init_pwm 113F  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 138B                          _num_taps 0068  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 11C1  
              __end_of_modulation 113F                        _INTCONbits 000B                       _tap_history 01A0  
               ??_set_subdivision 0149                          intlevel1 0000                   _set_leds_bottom 1F88  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 001D                ??_showBootSequence 00B9                   _reset_sub_delay 01D0  
                      _OSCCONbits 0099                      _preset_blink 013B                    i1_set_leds_top 1208  
__size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F          __size_of_setLongTapState 001A  
                _read_top_tactile 129A                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 1F56                      _CCP10CONbits 061F                 _bottom_push_state 0060  
          __end_ofi1_set_leds_top 1250  
