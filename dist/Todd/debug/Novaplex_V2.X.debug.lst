

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Dec 28 01:19:12 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	idataBANK6,global,class=CODE,delta=2
    11                           	psect	idataBANK7,global,class=CODE,delta=2
    12                           	psect	idataBANK8,global,class=CODE,delta=2
    13                           	psect	idataBANK9,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	bssBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    39                           	psect	text1,local,class=CODE,merge=1,delta=2
    40                           	psect	text2,local,class=CODE,merge=1,delta=2
    41                           	psect	text3,local,class=CODE,merge=1,delta=2
    42                           	psect	text4,local,class=CODE,merge=1,delta=2
    43                           	psect	text5,local,class=CODE,merge=1,delta=2
    44                           	psect	text6,local,class=CODE,merge=1,delta=2
    45                           	psect	text7,local,class=CODE,merge=1,delta=2
    46                           	psect	text8,local,class=CODE,merge=1,delta=2
    47                           	psect	text9,local,class=CODE,merge=1,delta=2
    48                           	psect	text10,local,class=CODE,merge=1,delta=2
    49                           	psect	text11,local,class=CODE,merge=1,delta=2
    50                           	psect	text12,local,class=CODE,merge=1,delta=2
    51                           	psect	text13,local,class=CODE,merge=1,delta=2
    52                           	psect	text14,local,class=CODE,merge=1,delta=2
    53                           	psect	text15,local,class=CODE,merge=1,delta=2
    54                           	psect	text16,local,class=CODE,merge=1,delta=2
    55                           	psect	text17,local,class=CODE,merge=1,delta=2
    56                           	psect	text18,local,class=CODE,merge=1,delta=2
    57                           	psect	text19,local,class=CODE,merge=1,delta=2
    58                           	psect	text20,local,class=CODE,merge=1,delta=2
    59                           	psect	text21,local,class=CODE,merge=1,delta=2
    60                           	psect	text22,local,class=CODE,merge=1,delta=2
    61                           	psect	text23,local,class=CODE,merge=1,delta=2
    62                           	psect	text24,local,class=CODE,merge=1,delta=2
    63                           	psect	text25,local,class=CODE,merge=1,delta=2
    64                           	psect	text26,local,class=CODE,merge=1,delta=2
    65                           	psect	text27,local,class=CODE,merge=1,delta=2
    66                           	psect	text28,local,class=CODE,merge=1,delta=2
    67                           	psect	text29,local,class=CODE,merge=1,delta=2
    68                           	psect	text30,local,class=CODE,merge=1,delta=2
    69                           	psect	text31,local,class=CODE,merge=1,delta=2
    70                           	psect	text32,local,class=CODE,merge=1,delta=2
    71                           	psect	text33,local,class=CODE,merge=1,delta=2
    72                           	psect	text34,local,class=CODE,merge=1,delta=2
    73                           	psect	text35,local,class=CODE,merge=1,delta=2
    74                           	psect	text36,local,class=CODE,merge=1,delta=2
    75                           	psect	text37,local,class=CODE,merge=1,delta=2
    76                           	psect	text38,local,class=CODE,merge=1,delta=2
    77                           	psect	text39,local,class=CODE,merge=1,delta=2
    78                           	psect	text40,local,class=CODE,merge=1,delta=2
    79                           	psect	text41,local,class=CODE,merge=1,delta=2
    80                           	psect	text42,local,class=CODE,merge=1,delta=2
    81                           	psect	text43,local,class=CODE,merge=1,delta=2
    82                           	psect	text44,local,class=CODE,merge=1,delta=2
    83                           	psect	text45,local,class=CODE,merge=1,delta=2
    84                           	psect	intentry,global,class=CODE,delta=2
    85                           	psect	text47,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x920,80
    87                           	dabs	1,0x8C6,42
    88                           	dabs	1,0x8A0,38
    89                           	dabs	1,0x820,80
    90                           	dabs	1,0x7A0,80
    91                           	dabs	1,0x720,80
    92                           	dabs	1,0x6A0,80
    93                           	dabs	1,0x620,80
    94                           	dabs	1,0x5A0,80
    95                           	dabs	1,0x56E,2
    96                           	dabs	1,0x236E,0,_delayArray
    97                           	dabs	1,0x2576,0,_mod5
    98                           	dabs	1,0x7E,2
    99  0000                     	;# 
   100  0001                     	;# 
   101  0002                     	;# 
   102  0003                     	;# 
   103  0004                     	;# 
   104  0005                     	;# 
   105  0006                     	;# 
   106  0007                     	;# 
   107  0008                     	;# 
   108  0009                     	;# 
   109  000A                     	;# 
   110  000B                     	;# 
   111  000C                     	;# 
   112  000D                     	;# 
   113  000E                     	;# 
   114  000F                     	;# 
   115  0010                     	;# 
   116  0011                     	;# 
   117  0012                     	;# 
   118  0013                     	;# 
   119  0014                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0016                     	;# 
   123  0017                     	;# 
   124  0018                     	;# 
   125  0019                     	;# 
   126  001A                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  008C                     	;# 
   130  008D                     	;# 
   131  008E                     	;# 
   132  008F                     	;# 
   133  0090                     	;# 
   134  0091                     	;# 
   135  0092                     	;# 
   136  0093                     	;# 
   137  0094                     	;# 
   138  0095                     	;# 
   139  0096                     	;# 
   140  0097                     	;# 
   141  0099                     	;# 
   142  009A                     	;# 
   143  009B                     	;# 
   144  009B                     	;# 
   145  009C                     	;# 
   146  009D                     	;# 
   147  009E                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0110                     	;# 
   153  0116                     	;# 
   154  0117                     	;# 
   155  011D                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  018F                     	;# 
   159  0190                     	;# 
   160  0191                     	;# 
   161  0191                     	;# 
   162  0192                     	;# 
   163  0193                     	;# 
   164  0193                     	;# 
   165  0194                     	;# 
   166  0195                     	;# 
   167  0196                     	;# 
   168  0197                     	;# 
   169  0199                     	;# 
   170  0199                     	;# 
   171  0199                     	;# 
   172  019A                     	;# 
   173  019A                     	;# 
   174  019A                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019B                     	;# 
   178  019B                     	;# 
   179  019B                     	;# 
   180  019C                     	;# 
   181  019C                     	;# 
   182  019C                     	;# 
   183  019D                     	;# 
   184  019D                     	;# 
   185  019D                     	;# 
   186  019E                     	;# 
   187  019E                     	;# 
   188  019E                     	;# 
   189  019F                     	;# 
   190  019F                     	;# 
   191  019F                     	;# 
   192  020D                     	;# 
   193  020F                     	;# 
   194  0210                     	;# 
   195  0211                     	;# 
   196  0211                     	;# 
   197  0212                     	;# 
   198  0212                     	;# 
   199  0213                     	;# 
   200  0213                     	;# 
   201  0214                     	;# 
   202  0214                     	;# 
   203  0215                     	;# 
   204  0215                     	;# 
   205  0215                     	;# 
   206  0216                     	;# 
   207  0216                     	;# 
   208  0217                     	;# 
   209  0217                     	;# 
   210  0219                     	;# 
   211  021A                     	;# 
   212  021B                     	;# 
   213  021C                     	;# 
   214  021D                     	;# 
   215  021E                     	;# 
   216  021F                     	;# 
   217  028C                     	;# 
   218  028D                     	;# 
   219  0291                     	;# 
   220  0291                     	;# 
   221  0292                     	;# 
   222  0293                     	;# 
   223  0298                     	;# 
   224  0298                     	;# 
   225  0299                     	;# 
   226  029A                     	;# 
   227  029D                     	;# 
   228  029E                     	;# 
   229  029F                     	;# 
   230  030C                     	;# 
   231  030D                     	;# 
   232  0311                     	;# 
   233  0311                     	;# 
   234  0312                     	;# 
   235  0313                     	;# 
   236  0318                     	;# 
   237  0318                     	;# 
   238  0319                     	;# 
   239  031A                     	;# 
   240  031C                     	;# 
   241  031C                     	;# 
   242  031D                     	;# 
   243  031E                     	;# 
   244  038C                     	;# 
   245  038D                     	;# 
   246  0394                     	;# 
   247  0395                     	;# 
   248  0396                     	;# 
   249  040C                     	;# 
   250  040D                     	;# 
   251  0411                     	;# 
   252  0411                     	;# 
   253  0412                     	;# 
   254  0413                     	;# 
   255  0414                     	;# 
   256  0415                     	;# 
   257  0416                     	;# 
   258  0417                     	;# 
   259  0418                     	;# 
   260  0418                     	;# 
   261  0419                     	;# 
   262  041A                     	;# 
   263  041B                     	;# 
   264  041C                     	;# 
   265  041D                     	;# 
   266  041E                     	;# 
   267  048D                     	;# 
   268  0491                     	;# 
   269  0491                     	;# 
   270  0492                     	;# 
   271  0492                     	;# 
   272  0493                     	;# 
   273  0493                     	;# 
   274  0493                     	;# 
   275  0494                     	;# 
   276  0494                     	;# 
   277  0495                     	;# 
   278  0495                     	;# 
   279  0496                     	;# 
   280  0496                     	;# 
   281  0497                     	;# 
   282  0497                     	;# 
   283  0595                     	;# 
   284  0596                     	;# 
   285  0597                     	;# 
   286  059C                     	;# 
   287  059D                     	;# 
   288  059E                     	;# 
   289  0611                     	;# 
   290  0611                     	;# 
   291  0612                     	;# 
   292  0613                     	;# 
   293  0614                     	;# 
   294  0614                     	;# 
   295  0615                     	;# 
   296  0616                     	;# 
   297  0617                     	;# 
   298  0617                     	;# 
   299  0618                     	;# 
   300  0619                     	;# 
   301  061A                     	;# 
   302  061A                     	;# 
   303  061B                     	;# 
   304  061C                     	;# 
   305  061D                     	;# 
   306  061D                     	;# 
   307  061E                     	;# 
   308  061F                     	;# 
   309  0FE4                     	;# 
   310  0FE5                     	;# 
   311  0FE6                     	;# 
   312  0FE7                     	;# 
   313  0FE8                     	;# 
   314  0FE9                     	;# 
   315  0FEA                     	;# 
   316  0FEB                     	;# 
   317  0FED                     	;# 
   318  0FEE                     	;# 
   319  0FEF                     	;# 
   320  0000                     	;# 
   321  0001                     	;# 
   322  0002                     	;# 
   323  0003                     	;# 
   324  0004                     	;# 
   325  0005                     	;# 
   326  0006                     	;# 
   327  0007                     	;# 
   328  0008                     	;# 
   329  0009                     	;# 
   330  000A                     	;# 
   331  000B                     	;# 
   332  000C                     	;# 
   333  000D                     	;# 
   334  000E                     	;# 
   335  000F                     	;# 
   336  0010                     	;# 
   337  0011                     	;# 
   338  0012                     	;# 
   339  0013                     	;# 
   340  0014                     	;# 
   341  0015                     	;# 
   342  0016                     	;# 
   343  0016                     	;# 
   344  0017                     	;# 
   345  0018                     	;# 
   346  0019                     	;# 
   347  001A                     	;# 
   348  001B                     	;# 
   349  001C                     	;# 
   350  008C                     	;# 
   351  008D                     	;# 
   352  008E                     	;# 
   353  008F                     	;# 
   354  0090                     	;# 
   355  0091                     	;# 
   356  0092                     	;# 
   357  0093                     	;# 
   358  0094                     	;# 
   359  0095                     	;# 
   360  0096                     	;# 
   361  0097                     	;# 
   362  0099                     	;# 
   363  009A                     	;# 
   364  009B                     	;# 
   365  009B                     	;# 
   366  009C                     	;# 
   367  009D                     	;# 
   368  009E                     	;# 
   369  010C                     	;# 
   370  010D                     	;# 
   371  010E                     	;# 
   372  010F                     	;# 
   373  0110                     	;# 
   374  0116                     	;# 
   375  0117                     	;# 
   376  011D                     	;# 
   377  018C                     	;# 
   378  018D                     	;# 
   379  018F                     	;# 
   380  0190                     	;# 
   381  0191                     	;# 
   382  0191                     	;# 
   383  0192                     	;# 
   384  0193                     	;# 
   385  0193                     	;# 
   386  0194                     	;# 
   387  0195                     	;# 
   388  0196                     	;# 
   389  0197                     	;# 
   390  0199                     	;# 
   391  0199                     	;# 
   392  0199                     	;# 
   393  019A                     	;# 
   394  019A                     	;# 
   395  019A                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019B                     	;# 
   399  019B                     	;# 
   400  019B                     	;# 
   401  019C                     	;# 
   402  019C                     	;# 
   403  019C                     	;# 
   404  019D                     	;# 
   405  019D                     	;# 
   406  019D                     	;# 
   407  019E                     	;# 
   408  019E                     	;# 
   409  019E                     	;# 
   410  019F                     	;# 
   411  019F                     	;# 
   412  019F                     	;# 
   413  020D                     	;# 
   414  020F                     	;# 
   415  0210                     	;# 
   416  0211                     	;# 
   417  0211                     	;# 
   418  0212                     	;# 
   419  0212                     	;# 
   420  0213                     	;# 
   421  0213                     	;# 
   422  0214                     	;# 
   423  0214                     	;# 
   424  0215                     	;# 
   425  0215                     	;# 
   426  0215                     	;# 
   427  0216                     	;# 
   428  0216                     	;# 
   429  0217                     	;# 
   430  0217                     	;# 
   431  0219                     	;# 
   432  021A                     	;# 
   433  021B                     	;# 
   434  021C                     	;# 
   435  021D                     	;# 
   436  021E                     	;# 
   437  021F                     	;# 
   438  028C                     	;# 
   439  028D                     	;# 
   440  0291                     	;# 
   441  0291                     	;# 
   442  0292                     	;# 
   443  0293                     	;# 
   444  0298                     	;# 
   445  0298                     	;# 
   446  0299                     	;# 
   447  029A                     	;# 
   448  029D                     	;# 
   449  029E                     	;# 
   450  029F                     	;# 
   451  030C                     	;# 
   452  030D                     	;# 
   453  0311                     	;# 
   454  0311                     	;# 
   455  0312                     	;# 
   456  0313                     	;# 
   457  0318                     	;# 
   458  0318                     	;# 
   459  0319                     	;# 
   460  031A                     	;# 
   461  031C                     	;# 
   462  031C                     	;# 
   463  031D                     	;# 
   464  031E                     	;# 
   465  038C                     	;# 
   466  038D                     	;# 
   467  0394                     	;# 
   468  0395                     	;# 
   469  0396                     	;# 
   470  040C                     	;# 
   471  040D                     	;# 
   472  0411                     	;# 
   473  0411                     	;# 
   474  0412                     	;# 
   475  0413                     	;# 
   476  0414                     	;# 
   477  0415                     	;# 
   478  0416                     	;# 
   479  0417                     	;# 
   480  0418                     	;# 
   481  0418                     	;# 
   482  0419                     	;# 
   483  041A                     	;# 
   484  041B                     	;# 
   485  041C                     	;# 
   486  041D                     	;# 
   487  041E                     	;# 
   488  048D                     	;# 
   489  0491                     	;# 
   490  0491                     	;# 
   491  0492                     	;# 
   492  0492                     	;# 
   493  0493                     	;# 
   494  0493                     	;# 
   495  0493                     	;# 
   496  0494                     	;# 
   497  0494                     	;# 
   498  0495                     	;# 
   499  0495                     	;# 
   500  0496                     	;# 
   501  0496                     	;# 
   502  0497                     	;# 
   503  0497                     	;# 
   504  0595                     	;# 
   505  0596                     	;# 
   506  0597                     	;# 
   507  059C                     	;# 
   508  059D                     	;# 
   509  059E                     	;# 
   510  0611                     	;# 
   511  0611                     	;# 
   512  0612                     	;# 
   513  0613                     	;# 
   514  0614                     	;# 
   515  0614                     	;# 
   516  0615                     	;# 
   517  0616                     	;# 
   518  0617                     	;# 
   519  0617                     	;# 
   520  0618                     	;# 
   521  0619                     	;# 
   522  061A                     	;# 
   523  061A                     	;# 
   524  061B                     	;# 
   525  061C                     	;# 
   526  061D                     	;# 
   527  061D                     	;# 
   528  061E                     	;# 
   529  061F                     	;# 
   530  0FE4                     	;# 
   531  0FE5                     	;# 
   532  0FE6                     	;# 
   533  0FE7                     	;# 
   534  0FE8                     	;# 
   535  0FE9                     	;# 
   536  0FEA                     	;# 
   537  0FEB                     	;# 
   538  0FED                     	;# 
   539  0FEE                     	;# 
   540  0FEF                     	;# 
   541  0000                     	;# 
   542  0001                     	;# 
   543  0002                     	;# 
   544  0003                     	;# 
   545  0004                     	;# 
   546  0005                     	;# 
   547  0006                     	;# 
   548  0007                     	;# 
   549  0008                     	;# 
   550  0009                     	;# 
   551  000A                     	;# 
   552  000B                     	;# 
   553  000C                     	;# 
   554  000D                     	;# 
   555  000E                     	;# 
   556  000F                     	;# 
   557  0010                     	;# 
   558  0011                     	;# 
   559  0012                     	;# 
   560  0013                     	;# 
   561  0014                     	;# 
   562  0015                     	;# 
   563  0016                     	;# 
   564  0016                     	;# 
   565  0017                     	;# 
   566  0018                     	;# 
   567  0019                     	;# 
   568  001A                     	;# 
   569  001B                     	;# 
   570  001C                     	;# 
   571  008C                     	;# 
   572  008D                     	;# 
   573  008E                     	;# 
   574  008F                     	;# 
   575  0090                     	;# 
   576  0091                     	;# 
   577  0092                     	;# 
   578  0093                     	;# 
   579  0094                     	;# 
   580  0095                     	;# 
   581  0096                     	;# 
   582  0097                     	;# 
   583  0099                     	;# 
   584  009A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  010C                     	;# 
   591  010D                     	;# 
   592  010E                     	;# 
   593  010F                     	;# 
   594  0110                     	;# 
   595  0116                     	;# 
   596  0117                     	;# 
   597  011D                     	;# 
   598  018C                     	;# 
   599  018D                     	;# 
   600  018F                     	;# 
   601  0190                     	;# 
   602  0191                     	;# 
   603  0191                     	;# 
   604  0192                     	;# 
   605  0193                     	;# 
   606  0193                     	;# 
   607  0194                     	;# 
   608  0195                     	;# 
   609  0196                     	;# 
   610  0197                     	;# 
   611  0199                     	;# 
   612  0199                     	;# 
   613  0199                     	;# 
   614  019A                     	;# 
   615  019A                     	;# 
   616  019A                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019B                     	;# 
   620  019B                     	;# 
   621  019B                     	;# 
   622  019C                     	;# 
   623  019C                     	;# 
   624  019C                     	;# 
   625  019D                     	;# 
   626  019D                     	;# 
   627  019D                     	;# 
   628  019E                     	;# 
   629  019E                     	;# 
   630  019E                     	;# 
   631  019F                     	;# 
   632  019F                     	;# 
   633  019F                     	;# 
   634  020D                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0211                     	;# 
   638  0211                     	;# 
   639  0212                     	;# 
   640  0212                     	;# 
   641  0213                     	;# 
   642  0213                     	;# 
   643  0214                     	;# 
   644  0214                     	;# 
   645  0215                     	;# 
   646  0215                     	;# 
   647  0215                     	;# 
   648  0216                     	;# 
   649  0216                     	;# 
   650  0217                     	;# 
   651  0217                     	;# 
   652  0219                     	;# 
   653  021A                     	;# 
   654  021B                     	;# 
   655  021C                     	;# 
   656  021D                     	;# 
   657  021E                     	;# 
   658  021F                     	;# 
   659  028C                     	;# 
   660  028D                     	;# 
   661  0291                     	;# 
   662  0291                     	;# 
   663  0292                     	;# 
   664  0293                     	;# 
   665  0298                     	;# 
   666  0298                     	;# 
   667  0299                     	;# 
   668  029A                     	;# 
   669  029D                     	;# 
   670  029E                     	;# 
   671  029F                     	;# 
   672  030C                     	;# 
   673  030D                     	;# 
   674  0311                     	;# 
   675  0311                     	;# 
   676  0312                     	;# 
   677  0313                     	;# 
   678  0318                     	;# 
   679  0318                     	;# 
   680  0319                     	;# 
   681  031A                     	;# 
   682  031C                     	;# 
   683  031C                     	;# 
   684  031D                     	;# 
   685  031E                     	;# 
   686  038C                     	;# 
   687  038D                     	;# 
   688  0394                     	;# 
   689  0395                     	;# 
   690  0396                     	;# 
   691  040C                     	;# 
   692  040D                     	;# 
   693  0411                     	;# 
   694  0411                     	;# 
   695  0412                     	;# 
   696  0413                     	;# 
   697  0414                     	;# 
   698  0415                     	;# 
   699  0416                     	;# 
   700  0417                     	;# 
   701  0418                     	;# 
   702  0418                     	;# 
   703  0419                     	;# 
   704  041A                     	;# 
   705  041B                     	;# 
   706  041C                     	;# 
   707  041D                     	;# 
   708  041E                     	;# 
   709  048D                     	;# 
   710  0491                     	;# 
   711  0491                     	;# 
   712  0492                     	;# 
   713  0492                     	;# 
   714  0493                     	;# 
   715  0493                     	;# 
   716  0493                     	;# 
   717  0494                     	;# 
   718  0494                     	;# 
   719  0495                     	;# 
   720  0495                     	;# 
   721  0496                     	;# 
   722  0496                     	;# 
   723  0497                     	;# 
   724  0497                     	;# 
   725  0595                     	;# 
   726  0596                     	;# 
   727  0597                     	;# 
   728  059C                     	;# 
   729  059D                     	;# 
   730  059E                     	;# 
   731  0611                     	;# 
   732  0611                     	;# 
   733  0612                     	;# 
   734  0613                     	;# 
   735  0614                     	;# 
   736  0614                     	;# 
   737  0615                     	;# 
   738  0616                     	;# 
   739  0617                     	;# 
   740  0617                     	;# 
   741  0618                     	;# 
   742  0619                     	;# 
   743  061A                     	;# 
   744  061A                     	;# 
   745  061B                     	;# 
   746  061C                     	;# 
   747  061D                     	;# 
   748  061D                     	;# 
   749  061E                     	;# 
   750  061F                     	;# 
   751  0FE4                     	;# 
   752  0FE5                     	;# 
   753  0FE6                     	;# 
   754  0FE7                     	;# 
   755  0FE8                     	;# 
   756  0FE9                     	;# 
   757  0FEA                     	;# 
   758  0FEB                     	;# 
   759  0FED                     	;# 
   760  0FEE                     	;# 
   761  0FEF                     	;# 
   762  0000                     	;# 
   763  0001                     	;# 
   764  0002                     	;# 
   765  0003                     	;# 
   766  0004                     	;# 
   767  0005                     	;# 
   768  0006                     	;# 
   769  0007                     	;# 
   770  0008                     	;# 
   771  0009                     	;# 
   772  000A                     	;# 
   773  000B                     	;# 
   774  000C                     	;# 
   775  000D                     	;# 
   776  000E                     	;# 
   777  000F                     	;# 
   778  0010                     	;# 
   779  0011                     	;# 
   780  0012                     	;# 
   781  0013                     	;# 
   782  0014                     	;# 
   783  0015                     	;# 
   784  0016                     	;# 
   785  0016                     	;# 
   786  0017                     	;# 
   787  0018                     	;# 
   788  0019                     	;# 
   789  001A                     	;# 
   790  001B                     	;# 
   791  001C                     	;# 
   792  008C                     	;# 
   793  008D                     	;# 
   794  008E                     	;# 
   795  008F                     	;# 
   796  0090                     	;# 
   797  0091                     	;# 
   798  0092                     	;# 
   799  0093                     	;# 
   800  0094                     	;# 
   801  0095                     	;# 
   802  0096                     	;# 
   803  0097                     	;# 
   804  0099                     	;# 
   805  009A                     	;# 
   806  009B                     	;# 
   807  009B                     	;# 
   808  009C                     	;# 
   809  009D                     	;# 
   810  009E                     	;# 
   811  010C                     	;# 
   812  010D                     	;# 
   813  010E                     	;# 
   814  010F                     	;# 
   815  0110                     	;# 
   816  0116                     	;# 
   817  0117                     	;# 
   818  011D                     	;# 
   819  018C                     	;# 
   820  018D                     	;# 
   821  018F                     	;# 
   822  0190                     	;# 
   823  0191                     	;# 
   824  0191                     	;# 
   825  0192                     	;# 
   826  0193                     	;# 
   827  0193                     	;# 
   828  0194                     	;# 
   829  0195                     	;# 
   830  0196                     	;# 
   831  0197                     	;# 
   832  0199                     	;# 
   833  0199                     	;# 
   834  0199                     	;# 
   835  019A                     	;# 
   836  019A                     	;# 
   837  019A                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019B                     	;# 
   841  019B                     	;# 
   842  019B                     	;# 
   843  019C                     	;# 
   844  019C                     	;# 
   845  019C                     	;# 
   846  019D                     	;# 
   847  019D                     	;# 
   848  019D                     	;# 
   849  019E                     	;# 
   850  019E                     	;# 
   851  019E                     	;# 
   852  019F                     	;# 
   853  019F                     	;# 
   854  019F                     	;# 
   855  020D                     	;# 
   856  020F                     	;# 
   857  0210                     	;# 
   858  0211                     	;# 
   859  0211                     	;# 
   860  0212                     	;# 
   861  0212                     	;# 
   862  0213                     	;# 
   863  0213                     	;# 
   864  0214                     	;# 
   865  0214                     	;# 
   866  0215                     	;# 
   867  0215                     	;# 
   868  0215                     	;# 
   869  0216                     	;# 
   870  0216                     	;# 
   871  0217                     	;# 
   872  0217                     	;# 
   873  0219                     	;# 
   874  021A                     	;# 
   875  021B                     	;# 
   876  021C                     	;# 
   877  021D                     	;# 
   878  021E                     	;# 
   879  021F                     	;# 
   880  028C                     	;# 
   881  028D                     	;# 
   882  0291                     	;# 
   883  0291                     	;# 
   884  0292                     	;# 
   885  0293                     	;# 
   886  0298                     	;# 
   887  0298                     	;# 
   888  0299                     	;# 
   889  029A                     	;# 
   890  029D                     	;# 
   891  029E                     	;# 
   892  029F                     	;# 
   893  030C                     	;# 
   894  030D                     	;# 
   895  0311                     	;# 
   896  0311                     	;# 
   897  0312                     	;# 
   898  0313                     	;# 
   899  0318                     	;# 
   900  0318                     	;# 
   901  0319                     	;# 
   902  031A                     	;# 
   903  031C                     	;# 
   904  031C                     	;# 
   905  031D                     	;# 
   906  031E                     	;# 
   907  038C                     	;# 
   908  038D                     	;# 
   909  0394                     	;# 
   910  0395                     	;# 
   911  0396                     	;# 
   912  040C                     	;# 
   913  040D                     	;# 
   914  0411                     	;# 
   915  0411                     	;# 
   916  0412                     	;# 
   917  0413                     	;# 
   918  0414                     	;# 
   919  0415                     	;# 
   920  0416                     	;# 
   921  0417                     	;# 
   922  0418                     	;# 
   923  0418                     	;# 
   924  0419                     	;# 
   925  041A                     	;# 
   926  041B                     	;# 
   927  041C                     	;# 
   928  041D                     	;# 
   929  041E                     	;# 
   930  048D                     	;# 
   931  0491                     	;# 
   932  0491                     	;# 
   933  0492                     	;# 
   934  0492                     	;# 
   935  0493                     	;# 
   936  0493                     	;# 
   937  0493                     	;# 
   938  0494                     	;# 
   939  0494                     	;# 
   940  0495                     	;# 
   941  0495                     	;# 
   942  0496                     	;# 
   943  0496                     	;# 
   944  0497                     	;# 
   945  0497                     	;# 
   946  0595                     	;# 
   947  0596                     	;# 
   948  0597                     	;# 
   949  059C                     	;# 
   950  059D                     	;# 
   951  059E                     	;# 
   952  0611                     	;# 
   953  0611                     	;# 
   954  0612                     	;# 
   955  0613                     	;# 
   956  0614                     	;# 
   957  0614                     	;# 
   958  0615                     	;# 
   959  0616                     	;# 
   960  0617                     	;# 
   961  0617                     	;# 
   962  0618                     	;# 
   963  0619                     	;# 
   964  061A                     	;# 
   965  061A                     	;# 
   966  061B                     	;# 
   967  061C                     	;# 
   968  061D                     	;# 
   969  061D                     	;# 
   970  061E                     	;# 
   971  061F                     	;# 
   972  0FE4                     	;# 
   973  0FE5                     	;# 
   974  0FE6                     	;# 
   975  0FE7                     	;# 
   976  0FE8                     	;# 
   977  0FE9                     	;# 
   978  0FEA                     	;# 
   979  0FEB                     	;# 
   980  0FED                     	;# 
   981  0FEE                     	;# 
   982  0FEF                     	;# 
   983  0000                     	;# 
   984  0001                     	;# 
   985  0002                     	;# 
   986  0003                     	;# 
   987  0004                     	;# 
   988  0005                     	;# 
   989  0006                     	;# 
   990  0007                     	;# 
   991  0008                     	;# 
   992  0009                     	;# 
   993  000A                     	;# 
   994  000B                     	;# 
   995  000C                     	;# 
   996  000D                     	;# 
   997  000E                     	;# 
   998  000F                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008D                     	;# 
  1015  008E                     	;# 
  1016  008F                     	;# 
  1017  0090                     	;# 
  1018  0091                     	;# 
  1019  0092                     	;# 
  1020  0093                     	;# 
  1021  0094                     	;# 
  1022  0095                     	;# 
  1023  0096                     	;# 
  1024  0097                     	;# 
  1025  0099                     	;# 
  1026  009A                     	;# 
  1027  009B                     	;# 
  1028  009B                     	;# 
  1029  009C                     	;# 
  1030  009D                     	;# 
  1031  009E                     	;# 
  1032  010C                     	;# 
  1033  010D                     	;# 
  1034  010E                     	;# 
  1035  010F                     	;# 
  1036  0110                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  011D                     	;# 
  1040  018C                     	;# 
  1041  018D                     	;# 
  1042  018F                     	;# 
  1043  0190                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  020D                     	;# 
  1077  020F                     	;# 
  1078  0210                     	;# 
  1079  0211                     	;# 
  1080  0211                     	;# 
  1081  0212                     	;# 
  1082  0212                     	;# 
  1083  0213                     	;# 
  1084  0213                     	;# 
  1085  0214                     	;# 
  1086  0214                     	;# 
  1087  0215                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0216                     	;# 
  1091  0216                     	;# 
  1092  0217                     	;# 
  1093  0217                     	;# 
  1094  0219                     	;# 
  1095  021A                     	;# 
  1096  021B                     	;# 
  1097  021C                     	;# 
  1098  021D                     	;# 
  1099  021E                     	;# 
  1100  021F                     	;# 
  1101  028C                     	;# 
  1102  028D                     	;# 
  1103  0291                     	;# 
  1104  0291                     	;# 
  1105  0292                     	;# 
  1106  0293                     	;# 
  1107  0298                     	;# 
  1108  0298                     	;# 
  1109  0299                     	;# 
  1110  029A                     	;# 
  1111  029D                     	;# 
  1112  029E                     	;# 
  1113  029F                     	;# 
  1114  030C                     	;# 
  1115  030D                     	;# 
  1116  0311                     	;# 
  1117  0311                     	;# 
  1118  0312                     	;# 
  1119  0313                     	;# 
  1120  0318                     	;# 
  1121  0318                     	;# 
  1122  0319                     	;# 
  1123  031A                     	;# 
  1124  031C                     	;# 
  1125  031C                     	;# 
  1126  031D                     	;# 
  1127  031E                     	;# 
  1128  038C                     	;# 
  1129  038D                     	;# 
  1130  0394                     	;# 
  1131  0395                     	;# 
  1132  0396                     	;# 
  1133  040C                     	;# 
  1134  040D                     	;# 
  1135  0411                     	;# 
  1136  0411                     	;# 
  1137  0412                     	;# 
  1138  0413                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  0418                     	;# 
  1145  0419                     	;# 
  1146  041A                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  048D                     	;# 
  1152  0491                     	;# 
  1153  0491                     	;# 
  1154  0492                     	;# 
  1155  0492                     	;# 
  1156  0493                     	;# 
  1157  0493                     	;# 
  1158  0493                     	;# 
  1159  0494                     	;# 
  1160  0494                     	;# 
  1161  0495                     	;# 
  1162  0495                     	;# 
  1163  0496                     	;# 
  1164  0496                     	;# 
  1165  0497                     	;# 
  1166  0497                     	;# 
  1167  0595                     	;# 
  1168  0596                     	;# 
  1169  0597                     	;# 
  1170  059C                     	;# 
  1171  059D                     	;# 
  1172  059E                     	;# 
  1173  0611                     	;# 
  1174  0611                     	;# 
  1175  0612                     	;# 
  1176  0613                     	;# 
  1177  0614                     	;# 
  1178  0614                     	;# 
  1179  0615                     	;# 
  1180  0616                     	;# 
  1181  0617                     	;# 
  1182  0617                     	;# 
  1183  0618                     	;# 
  1184  0619                     	;# 
  1185  061A                     	;# 
  1186  061A                     	;# 
  1187  061B                     	;# 
  1188  061C                     	;# 
  1189  061D                     	;# 
  1190  061D                     	;# 
  1191  061E                     	;# 
  1192  061F                     	;# 
  1193  0FE4                     	;# 
  1194  0FE5                     	;# 
  1195  0FE6                     	;# 
  1196  0FE7                     	;# 
  1197  0FE8                     	;# 
  1198  0FE9                     	;# 
  1199  0FEA                     	;# 
  1200  0FEB                     	;# 
  1201  0FED                     	;# 
  1202  0FEE                     	;# 
  1203  0FEF                     	;# 
  1204  0000                     	;# 
  1205  0001                     	;# 
  1206  0002                     	;# 
  1207  0003                     	;# 
  1208  0004                     	;# 
  1209  0005                     	;# 
  1210  0006                     	;# 
  1211  0007                     	;# 
  1212  0008                     	;# 
  1213  0009                     	;# 
  1214  000A                     	;# 
  1215  000B                     	;# 
  1216  000C                     	;# 
  1217  000D                     	;# 
  1218  000E                     	;# 
  1219  000F                     	;# 
  1220  0010                     	;# 
  1221  0011                     	;# 
  1222  0012                     	;# 
  1223  0013                     	;# 
  1224  0014                     	;# 
  1225  0015                     	;# 
  1226  0016                     	;# 
  1227  0016                     	;# 
  1228  0017                     	;# 
  1229  0018                     	;# 
  1230  0019                     	;# 
  1231  001A                     	;# 
  1232  001B                     	;# 
  1233  001C                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0094                     	;# 
  1243  0095                     	;# 
  1244  0096                     	;# 
  1245  0097                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0116                     	;# 
  1259  0117                     	;# 
  1260  011D                     	;# 
  1261  018C                     	;# 
  1262  018D                     	;# 
  1263  018F                     	;# 
  1264  0190                     	;# 
  1265  0191                     	;# 
  1266  0191                     	;# 
  1267  0192                     	;# 
  1268  0193                     	;# 
  1269  0193                     	;# 
  1270  0194                     	;# 
  1271  0195                     	;# 
  1272  0196                     	;# 
  1273  0197                     	;# 
  1274  0199                     	;# 
  1275  0199                     	;# 
  1276  0199                     	;# 
  1277  019A                     	;# 
  1278  019A                     	;# 
  1279  019A                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019B                     	;# 
  1283  019B                     	;# 
  1284  019B                     	;# 
  1285  019C                     	;# 
  1286  019C                     	;# 
  1287  019C                     	;# 
  1288  019D                     	;# 
  1289  019D                     	;# 
  1290  019D                     	;# 
  1291  019E                     	;# 
  1292  019E                     	;# 
  1293  019E                     	;# 
  1294  019F                     	;# 
  1295  019F                     	;# 
  1296  019F                     	;# 
  1297  020D                     	;# 
  1298  020F                     	;# 
  1299  0210                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0298                     	;# 
  1329  0298                     	;# 
  1330  0299                     	;# 
  1331  029A                     	;# 
  1332  029D                     	;# 
  1333  029E                     	;# 
  1334  029F                     	;# 
  1335  030C                     	;# 
  1336  030D                     	;# 
  1337  0311                     	;# 
  1338  0311                     	;# 
  1339  0312                     	;# 
  1340  0313                     	;# 
  1341  0318                     	;# 
  1342  0318                     	;# 
  1343  0319                     	;# 
  1344  031A                     	;# 
  1345  031C                     	;# 
  1346  031C                     	;# 
  1347  031D                     	;# 
  1348  031E                     	;# 
  1349  038C                     	;# 
  1350  038D                     	;# 
  1351  0394                     	;# 
  1352  0395                     	;# 
  1353  0396                     	;# 
  1354  040C                     	;# 
  1355  040D                     	;# 
  1356  0411                     	;# 
  1357  0411                     	;# 
  1358  0412                     	;# 
  1359  0413                     	;# 
  1360  0414                     	;# 
  1361  0415                     	;# 
  1362  0416                     	;# 
  1363  0417                     	;# 
  1364  0418                     	;# 
  1365  0418                     	;# 
  1366  0419                     	;# 
  1367  041A                     	;# 
  1368  041B                     	;# 
  1369  041C                     	;# 
  1370  041D                     	;# 
  1371  041E                     	;# 
  1372  048D                     	;# 
  1373  0491                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0492                     	;# 
  1377  0493                     	;# 
  1378  0493                     	;# 
  1379  0493                     	;# 
  1380  0494                     	;# 
  1381  0494                     	;# 
  1382  0495                     	;# 
  1383  0495                     	;# 
  1384  0496                     	;# 
  1385  0496                     	;# 
  1386  0497                     	;# 
  1387  0497                     	;# 
  1388  0595                     	;# 
  1389  0596                     	;# 
  1390  0597                     	;# 
  1391  059C                     	;# 
  1392  059D                     	;# 
  1393  059E                     	;# 
  1394  0611                     	;# 
  1395  0611                     	;# 
  1396  0612                     	;# 
  1397  0613                     	;# 
  1398  0614                     	;# 
  1399  0614                     	;# 
  1400  0615                     	;# 
  1401  0616                     	;# 
  1402  0617                     	;# 
  1403  0617                     	;# 
  1404  0618                     	;# 
  1405  0619                     	;# 
  1406  061A                     	;# 
  1407  061A                     	;# 
  1408  061B                     	;# 
  1409  061C                     	;# 
  1410  061D                     	;# 
  1411  061D                     	;# 
  1412  061E                     	;# 
  1413  061F                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425  0000                     	;# 
  1426  0001                     	;# 
  1427  0002                     	;# 
  1428  0003                     	;# 
  1429  0004                     	;# 
  1430  0005                     	;# 
  1431  0006                     	;# 
  1432  0007                     	;# 
  1433  0008                     	;# 
  1434  0009                     	;# 
  1435  000A                     	;# 
  1436  000B                     	;# 
  1437  000C                     	;# 
  1438  000D                     	;# 
  1439  000E                     	;# 
  1440  000F                     	;# 
  1441  0010                     	;# 
  1442  0011                     	;# 
  1443  0012                     	;# 
  1444  0013                     	;# 
  1445  0014                     	;# 
  1446  0015                     	;# 
  1447  0016                     	;# 
  1448  0016                     	;# 
  1449  0017                     	;# 
  1450  0018                     	;# 
  1451  0019                     	;# 
  1452  001A                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  008C                     	;# 
  1456  008D                     	;# 
  1457  008E                     	;# 
  1458  008F                     	;# 
  1459  0090                     	;# 
  1460  0091                     	;# 
  1461  0092                     	;# 
  1462  0093                     	;# 
  1463  0094                     	;# 
  1464  0095                     	;# 
  1465  0096                     	;# 
  1466  0097                     	;# 
  1467  0099                     	;# 
  1468  009A                     	;# 
  1469  009B                     	;# 
  1470  009B                     	;# 
  1471  009C                     	;# 
  1472  009D                     	;# 
  1473  009E                     	;# 
  1474  010C                     	;# 
  1475  010D                     	;# 
  1476  010E                     	;# 
  1477  010F                     	;# 
  1478  0110                     	;# 
  1479  0116                     	;# 
  1480  0117                     	;# 
  1481  011D                     	;# 
  1482  018C                     	;# 
  1483  018D                     	;# 
  1484  018F                     	;# 
  1485  0190                     	;# 
  1486  0191                     	;# 
  1487  0191                     	;# 
  1488  0192                     	;# 
  1489  0193                     	;# 
  1490  0193                     	;# 
  1491  0194                     	;# 
  1492  0195                     	;# 
  1493  0196                     	;# 
  1494  0197                     	;# 
  1495  0199                     	;# 
  1496  0199                     	;# 
  1497  0199                     	;# 
  1498  019A                     	;# 
  1499  019A                     	;# 
  1500  019A                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019B                     	;# 
  1504  019B                     	;# 
  1505  019B                     	;# 
  1506  019C                     	;# 
  1507  019C                     	;# 
  1508  019C                     	;# 
  1509  019D                     	;# 
  1510  019D                     	;# 
  1511  019D                     	;# 
  1512  019E                     	;# 
  1513  019E                     	;# 
  1514  019E                     	;# 
  1515  019F                     	;# 
  1516  019F                     	;# 
  1517  019F                     	;# 
  1518  020D                     	;# 
  1519  020F                     	;# 
  1520  0210                     	;# 
  1521  0211                     	;# 
  1522  0211                     	;# 
  1523  0212                     	;# 
  1524  0212                     	;# 
  1525  0213                     	;# 
  1526  0213                     	;# 
  1527  0214                     	;# 
  1528  0214                     	;# 
  1529  0215                     	;# 
  1530  0215                     	;# 
  1531  0215                     	;# 
  1532  0216                     	;# 
  1533  0216                     	;# 
  1534  0217                     	;# 
  1535  0217                     	;# 
  1536  0219                     	;# 
  1537  021A                     	;# 
  1538  021B                     	;# 
  1539  021C                     	;# 
  1540  021D                     	;# 
  1541  021E                     	;# 
  1542  021F                     	;# 
  1543  028C                     	;# 
  1544  028D                     	;# 
  1545  0291                     	;# 
  1546  0291                     	;# 
  1547  0292                     	;# 
  1548  0293                     	;# 
  1549  0298                     	;# 
  1550  0298                     	;# 
  1551  0299                     	;# 
  1552  029A                     	;# 
  1553  029D                     	;# 
  1554  029E                     	;# 
  1555  029F                     	;# 
  1556  030C                     	;# 
  1557  030D                     	;# 
  1558  0311                     	;# 
  1559  0311                     	;# 
  1560  0312                     	;# 
  1561  0313                     	;# 
  1562  0318                     	;# 
  1563  0318                     	;# 
  1564  0319                     	;# 
  1565  031A                     	;# 
  1566  031C                     	;# 
  1567  031C                     	;# 
  1568  031D                     	;# 
  1569  031E                     	;# 
  1570  038C                     	;# 
  1571  038D                     	;# 
  1572  0394                     	;# 
  1573  0395                     	;# 
  1574  0396                     	;# 
  1575  040C                     	;# 
  1576  040D                     	;# 
  1577  0411                     	;# 
  1578  0411                     	;# 
  1579  0412                     	;# 
  1580  0413                     	;# 
  1581  0414                     	;# 
  1582  0415                     	;# 
  1583  0416                     	;# 
  1584  0417                     	;# 
  1585  0418                     	;# 
  1586  0418                     	;# 
  1587  0419                     	;# 
  1588  041A                     	;# 
  1589  041B                     	;# 
  1590  041C                     	;# 
  1591  041D                     	;# 
  1592  041E                     	;# 
  1593  048D                     	;# 
  1594  0491                     	;# 
  1595  0491                     	;# 
  1596  0492                     	;# 
  1597  0492                     	;# 
  1598  0493                     	;# 
  1599  0493                     	;# 
  1600  0493                     	;# 
  1601  0494                     	;# 
  1602  0494                     	;# 
  1603  0495                     	;# 
  1604  0495                     	;# 
  1605  0496                     	;# 
  1606  0496                     	;# 
  1607  0497                     	;# 
  1608  0497                     	;# 
  1609  0595                     	;# 
  1610  0596                     	;# 
  1611  0597                     	;# 
  1612  059C                     	;# 
  1613  059D                     	;# 
  1614  059E                     	;# 
  1615  0611                     	;# 
  1616  0611                     	;# 
  1617  0612                     	;# 
  1618  0613                     	;# 
  1619  0614                     	;# 
  1620  0614                     	;# 
  1621  0615                     	;# 
  1622  0616                     	;# 
  1623  0617                     	;# 
  1624  0617                     	;# 
  1625  0618                     	;# 
  1626  0619                     	;# 
  1627  061A                     	;# 
  1628  061A                     	;# 
  1629  061B                     	;# 
  1630  061C                     	;# 
  1631  061D                     	;# 
  1632  061D                     	;# 
  1633  061E                     	;# 
  1634  061F                     	;# 
  1635  0FE4                     	;# 
  1636  0FE5                     	;# 
  1637  0FE6                     	;# 
  1638  0FE7                     	;# 
  1639  0FE8                     	;# 
  1640  0FE9                     	;# 
  1641  0FEA                     	;# 
  1642  0FEB                     	;# 
  1643  0FED                     	;# 
  1644  0FEE                     	;# 
  1645  0FEF                     	;# 
  1646  0000                     	;# 
  1647  0001                     	;# 
  1648  0002                     	;# 
  1649  0003                     	;# 
  1650  0004                     	;# 
  1651  0005                     	;# 
  1652  0006                     	;# 
  1653  0007                     	;# 
  1654  0008                     	;# 
  1655  0009                     	;# 
  1656  000A                     	;# 
  1657  000B                     	;# 
  1658  000C                     	;# 
  1659  000D                     	;# 
  1660  000E                     	;# 
  1661  000F                     	;# 
  1662  0010                     	;# 
  1663  0011                     	;# 
  1664  0012                     	;# 
  1665  0013                     	;# 
  1666  0014                     	;# 
  1667  0015                     	;# 
  1668  0016                     	;# 
  1669  0016                     	;# 
  1670  0017                     	;# 
  1671  0018                     	;# 
  1672  0019                     	;# 
  1673  001A                     	;# 
  1674  001B                     	;# 
  1675  001C                     	;# 
  1676  008C                     	;# 
  1677  008D                     	;# 
  1678  008E                     	;# 
  1679  008F                     	;# 
  1680  0090                     	;# 
  1681  0091                     	;# 
  1682  0092                     	;# 
  1683  0093                     	;# 
  1684  0094                     	;# 
  1685  0095                     	;# 
  1686  0096                     	;# 
  1687  0097                     	;# 
  1688  0099                     	;# 
  1689  009A                     	;# 
  1690  009B                     	;# 
  1691  009B                     	;# 
  1692  009C                     	;# 
  1693  009D                     	;# 
  1694  009E                     	;# 
  1695  010C                     	;# 
  1696  010D                     	;# 
  1697  010E                     	;# 
  1698  010F                     	;# 
  1699  0110                     	;# 
  1700  0116                     	;# 
  1701  0117                     	;# 
  1702  011D                     	;# 
  1703  018C                     	;# 
  1704  018D                     	;# 
  1705  018F                     	;# 
  1706  0190                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  0199                     	;# 
  1718  0199                     	;# 
  1719  019A                     	;# 
  1720  019A                     	;# 
  1721  019A                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019B                     	;# 
  1725  019B                     	;# 
  1726  019B                     	;# 
  1727  019C                     	;# 
  1728  019C                     	;# 
  1729  019C                     	;# 
  1730  019D                     	;# 
  1731  019D                     	;# 
  1732  019D                     	;# 
  1733  019E                     	;# 
  1734  019E                     	;# 
  1735  019E                     	;# 
  1736  019F                     	;# 
  1737  019F                     	;# 
  1738  019F                     	;# 
  1739  020D                     	;# 
  1740  020F                     	;# 
  1741  0210                     	;# 
  1742  0211                     	;# 
  1743  0211                     	;# 
  1744  0212                     	;# 
  1745  0212                     	;# 
  1746  0213                     	;# 
  1747  0213                     	;# 
  1748  0214                     	;# 
  1749  0214                     	;# 
  1750  0215                     	;# 
  1751  0215                     	;# 
  1752  0215                     	;# 
  1753  0216                     	;# 
  1754  0216                     	;# 
  1755  0217                     	;# 
  1756  0217                     	;# 
  1757  0219                     	;# 
  1758  021A                     	;# 
  1759  021B                     	;# 
  1760  021C                     	;# 
  1761  021D                     	;# 
  1762  021E                     	;# 
  1763  021F                     	;# 
  1764  028C                     	;# 
  1765  028D                     	;# 
  1766  0291                     	;# 
  1767  0291                     	;# 
  1768  0292                     	;# 
  1769  0293                     	;# 
  1770  0298                     	;# 
  1771  0298                     	;# 
  1772  0299                     	;# 
  1773  029A                     	;# 
  1774  029D                     	;# 
  1775  029E                     	;# 
  1776  029F                     	;# 
  1777  030C                     	;# 
  1778  030D                     	;# 
  1779  0311                     	;# 
  1780  0311                     	;# 
  1781  0312                     	;# 
  1782  0313                     	;# 
  1783  0318                     	;# 
  1784  0318                     	;# 
  1785  0319                     	;# 
  1786  031A                     	;# 
  1787  031C                     	;# 
  1788  031C                     	;# 
  1789  031D                     	;# 
  1790  031E                     	;# 
  1791  038C                     	;# 
  1792  038D                     	;# 
  1793  0394                     	;# 
  1794  0395                     	;# 
  1795  0396                     	;# 
  1796  040C                     	;# 
  1797  040D                     	;# 
  1798  0411                     	;# 
  1799  0411                     	;# 
  1800  0412                     	;# 
  1801  0413                     	;# 
  1802  0414                     	;# 
  1803  0415                     	;# 
  1804  0416                     	;# 
  1805  0417                     	;# 
  1806  0418                     	;# 
  1807  0418                     	;# 
  1808  0419                     	;# 
  1809  041A                     	;# 
  1810  041B                     	;# 
  1811  041C                     	;# 
  1812  041D                     	;# 
  1813  041E                     	;# 
  1814  048D                     	;# 
  1815  0491                     	;# 
  1816  0491                     	;# 
  1817  0492                     	;# 
  1818  0492                     	;# 
  1819  0493                     	;# 
  1820  0493                     	;# 
  1821  0493                     	;# 
  1822  0494                     	;# 
  1823  0494                     	;# 
  1824  0495                     	;# 
  1825  0495                     	;# 
  1826  0496                     	;# 
  1827  0496                     	;# 
  1828  0497                     	;# 
  1829  0497                     	;# 
  1830  0595                     	;# 
  1831  0596                     	;# 
  1832  0597                     	;# 
  1833  059C                     	;# 
  1834  059D                     	;# 
  1835  059E                     	;# 
  1836  0611                     	;# 
  1837  0611                     	;# 
  1838  0612                     	;# 
  1839  0613                     	;# 
  1840  0614                     	;# 
  1841  0614                     	;# 
  1842  0615                     	;# 
  1843  0616                     	;# 
  1844  0617                     	;# 
  1845  0617                     	;# 
  1846  0618                     	;# 
  1847  0619                     	;# 
  1848  061A                     	;# 
  1849  061A                     	;# 
  1850  061B                     	;# 
  1851  061C                     	;# 
  1852  061D                     	;# 
  1853  061D                     	;# 
  1854  061E                     	;# 
  1855  061F                     	;# 
  1856  0FE4                     	;# 
  1857  0FE5                     	;# 
  1858  0FE6                     	;# 
  1859  0FE7                     	;# 
  1860  0FE8                     	;# 
  1861  0FE9                     	;# 
  1862  0FEA                     	;# 
  1863  0FEB                     	;# 
  1864  0FED                     	;# 
  1865  0FEE                     	;# 
  1866  0FEF                     	;# 
  1867  0000                     	;# 
  1868  0001                     	;# 
  1869  0002                     	;# 
  1870  0003                     	;# 
  1871  0004                     	;# 
  1872  0005                     	;# 
  1873  0006                     	;# 
  1874  0007                     	;# 
  1875  0008                     	;# 
  1876  0009                     	;# 
  1877  000A                     	;# 
  1878  000B                     	;# 
  1879  000C                     	;# 
  1880  000D                     	;# 
  1881  000E                     	;# 
  1882  000F                     	;# 
  1883  0010                     	;# 
  1884  0011                     	;# 
  1885  0012                     	;# 
  1886  0013                     	;# 
  1887  0014                     	;# 
  1888  0015                     	;# 
  1889  0016                     	;# 
  1890  0016                     	;# 
  1891  0017                     	;# 
  1892  0018                     	;# 
  1893  0019                     	;# 
  1894  001A                     	;# 
  1895  001B                     	;# 
  1896  001C                     	;# 
  1897  008C                     	;# 
  1898  008D                     	;# 
  1899  008E                     	;# 
  1900  008F                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0097                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  010C                     	;# 
  1917  010D                     	;# 
  1918  010E                     	;# 
  1919  010F                     	;# 
  1920  0110                     	;# 
  1921  0116                     	;# 
  1922  0117                     	;# 
  1923  011D                     	;# 
  1924  018C                     	;# 
  1925  018D                     	;# 
  1926  018F                     	;# 
  1927  0190                     	;# 
  1928  0191                     	;# 
  1929  0191                     	;# 
  1930  0192                     	;# 
  1931  0193                     	;# 
  1932  0193                     	;# 
  1933  0194                     	;# 
  1934  0195                     	;# 
  1935  0196                     	;# 
  1936  0197                     	;# 
  1937  0199                     	;# 
  1938  0199                     	;# 
  1939  0199                     	;# 
  1940  019A                     	;# 
  1941  019A                     	;# 
  1942  019A                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019B                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019C                     	;# 
  1949  019C                     	;# 
  1950  019C                     	;# 
  1951  019D                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019E                     	;# 
  1957  019F                     	;# 
  1958  019F                     	;# 
  1959  019F                     	;# 
  1960  020D                     	;# 
  1961  020F                     	;# 
  1962  0210                     	;# 
  1963  0211                     	;# 
  1964  0211                     	;# 
  1965  0212                     	;# 
  1966  0212                     	;# 
  1967  0213                     	;# 
  1968  0213                     	;# 
  1969  0214                     	;# 
  1970  0214                     	;# 
  1971  0215                     	;# 
  1972  0215                     	;# 
  1973  0215                     	;# 
  1974  0216                     	;# 
  1975  0216                     	;# 
  1976  0217                     	;# 
  1977  0217                     	;# 
  1978  0219                     	;# 
  1979  021A                     	;# 
  1980  021B                     	;# 
  1981  021C                     	;# 
  1982  021D                     	;# 
  1983  021E                     	;# 
  1984  021F                     	;# 
  1985  028C                     	;# 
  1986  028D                     	;# 
  1987  0291                     	;# 
  1988  0291                     	;# 
  1989  0292                     	;# 
  1990  0293                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029D                     	;# 
  1996  029E                     	;# 
  1997  029F                     	;# 
  1998  030C                     	;# 
  1999  030D                     	;# 
  2000  0311                     	;# 
  2001  0311                     	;# 
  2002  0312                     	;# 
  2003  0313                     	;# 
  2004  0318                     	;# 
  2005  0318                     	;# 
  2006  0319                     	;# 
  2007  031A                     	;# 
  2008  031C                     	;# 
  2009  031C                     	;# 
  2010  031D                     	;# 
  2011  031E                     	;# 
  2012  038C                     	;# 
  2013  038D                     	;# 
  2014  0394                     	;# 
  2015  0395                     	;# 
  2016  0396                     	;# 
  2017  040C                     	;# 
  2018  040D                     	;# 
  2019  0411                     	;# 
  2020  0411                     	;# 
  2021  0412                     	;# 
  2022  0413                     	;# 
  2023  0414                     	;# 
  2024  0415                     	;# 
  2025  0416                     	;# 
  2026  0417                     	;# 
  2027  0418                     	;# 
  2028  0418                     	;# 
  2029  0419                     	;# 
  2030  041A                     	;# 
  2031  041B                     	;# 
  2032  041C                     	;# 
  2033  041D                     	;# 
  2034  041E                     	;# 
  2035  048D                     	;# 
  2036  0491                     	;# 
  2037  0491                     	;# 
  2038  0492                     	;# 
  2039  0492                     	;# 
  2040  0493                     	;# 
  2041  0493                     	;# 
  2042  0493                     	;# 
  2043  0494                     	;# 
  2044  0494                     	;# 
  2045  0495                     	;# 
  2046  0495                     	;# 
  2047  0496                     	;# 
  2048  0496                     	;# 
  2049  0497                     	;# 
  2050  0497                     	;# 
  2051  0595                     	;# 
  2052  0596                     	;# 
  2053  0597                     	;# 
  2054  059C                     	;# 
  2055  059D                     	;# 
  2056  059E                     	;# 
  2057  0611                     	;# 
  2058  0611                     	;# 
  2059  0612                     	;# 
  2060  0613                     	;# 
  2061  0614                     	;# 
  2062  0614                     	;# 
  2063  0615                     	;# 
  2064  0616                     	;# 
  2065  0617                     	;# 
  2066  0617                     	;# 
  2067  0618                     	;# 
  2068  0619                     	;# 
  2069  061A                     	;# 
  2070  061A                     	;# 
  2071  061B                     	;# 
  2072  061C                     	;# 
  2073  061D                     	;# 
  2074  061D                     	;# 
  2075  061E                     	;# 
  2076  061F                     	;# 
  2077  0FE4                     	;# 
  2078  0FE5                     	;# 
  2079  0FE6                     	;# 
  2080  0FE7                     	;# 
  2081  0FE8                     	;# 
  2082  0FE9                     	;# 
  2083  0FEA                     	;# 
  2084  0FEB                     	;# 
  2085  0FED                     	;# 
  2086  0FEE                     	;# 
  2087  0FEF                     	;# 
  2088  0000                     	;# 
  2089  0001                     	;# 
  2090  0002                     	;# 
  2091  0003                     	;# 
  2092  0004                     	;# 
  2093  0005                     	;# 
  2094  0006                     	;# 
  2095  0007                     	;# 
  2096  0008                     	;# 
  2097  0009                     	;# 
  2098  000A                     	;# 
  2099  000B                     	;# 
  2100  000C                     	;# 
  2101  000D                     	;# 
  2102  000E                     	;# 
  2103  000F                     	;# 
  2104  0010                     	;# 
  2105  0011                     	;# 
  2106  0012                     	;# 
  2107  0013                     	;# 
  2108  0014                     	;# 
  2109  0015                     	;# 
  2110  0016                     	;# 
  2111  0016                     	;# 
  2112  0017                     	;# 
  2113  0018                     	;# 
  2114  0019                     	;# 
  2115  001A                     	;# 
  2116  001B                     	;# 
  2117  001C                     	;# 
  2118  008C                     	;# 
  2119  008D                     	;# 
  2120  008E                     	;# 
  2121  008F                     	;# 
  2122  0090                     	;# 
  2123  0091                     	;# 
  2124  0092                     	;# 
  2125  0093                     	;# 
  2126  0094                     	;# 
  2127  0095                     	;# 
  2128  0096                     	;# 
  2129  0097                     	;# 
  2130  0099                     	;# 
  2131  009A                     	;# 
  2132  009B                     	;# 
  2133  009B                     	;# 
  2134  009C                     	;# 
  2135  009D                     	;# 
  2136  009E                     	;# 
  2137  010C                     	;# 
  2138  010D                     	;# 
  2139  010E                     	;# 
  2140  010F                     	;# 
  2141  0110                     	;# 
  2142  0116                     	;# 
  2143  0117                     	;# 
  2144  011D                     	;# 
  2145  018C                     	;# 
  2146  018D                     	;# 
  2147  018F                     	;# 
  2148  0190                     	;# 
  2149  0191                     	;# 
  2150  0191                     	;# 
  2151  0192                     	;# 
  2152  0193                     	;# 
  2153  0193                     	;# 
  2154  0194                     	;# 
  2155  0195                     	;# 
  2156  0196                     	;# 
  2157  0197                     	;# 
  2158  0199                     	;# 
  2159  0199                     	;# 
  2160  0199                     	;# 
  2161  019A                     	;# 
  2162  019A                     	;# 
  2163  019A                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019B                     	;# 
  2167  019B                     	;# 
  2168  019B                     	;# 
  2169  019C                     	;# 
  2170  019C                     	;# 
  2171  019C                     	;# 
  2172  019D                     	;# 
  2173  019D                     	;# 
  2174  019D                     	;# 
  2175  019E                     	;# 
  2176  019E                     	;# 
  2177  019E                     	;# 
  2178  019F                     	;# 
  2179  019F                     	;# 
  2180  019F                     	;# 
  2181  020D                     	;# 
  2182  020F                     	;# 
  2183  0210                     	;# 
  2184  0211                     	;# 
  2185  0211                     	;# 
  2186  0212                     	;# 
  2187  0212                     	;# 
  2188  0213                     	;# 
  2189  0213                     	;# 
  2190  0214                     	;# 
  2191  0214                     	;# 
  2192  0215                     	;# 
  2193  0215                     	;# 
  2194  0215                     	;# 
  2195  0216                     	;# 
  2196  0216                     	;# 
  2197  0217                     	;# 
  2198  0217                     	;# 
  2199  0219                     	;# 
  2200  021A                     	;# 
  2201  021B                     	;# 
  2202  021C                     	;# 
  2203  021D                     	;# 
  2204  021E                     	;# 
  2205  021F                     	;# 
  2206  028C                     	;# 
  2207  028D                     	;# 
  2208  0291                     	;# 
  2209  0291                     	;# 
  2210  0292                     	;# 
  2211  0293                     	;# 
  2212  0298                     	;# 
  2213  0298                     	;# 
  2214  0299                     	;# 
  2215  029A                     	;# 
  2216  029D                     	;# 
  2217  029E                     	;# 
  2218  029F                     	;# 
  2219  030C                     	;# 
  2220  030D                     	;# 
  2221  0311                     	;# 
  2222  0311                     	;# 
  2223  0312                     	;# 
  2224  0313                     	;# 
  2225  0318                     	;# 
  2226  0318                     	;# 
  2227  0319                     	;# 
  2228  031A                     	;# 
  2229  031C                     	;# 
  2230  031C                     	;# 
  2231  031D                     	;# 
  2232  031E                     	;# 
  2233  038C                     	;# 
  2234  038D                     	;# 
  2235  0394                     	;# 
  2236  0395                     	;# 
  2237  0396                     	;# 
  2238  040C                     	;# 
  2239  040D                     	;# 
  2240  0411                     	;# 
  2241  0411                     	;# 
  2242  0412                     	;# 
  2243  0413                     	;# 
  2244  0414                     	;# 
  2245  0415                     	;# 
  2246  0416                     	;# 
  2247  0417                     	;# 
  2248  0418                     	;# 
  2249  0418                     	;# 
  2250  0419                     	;# 
  2251  041A                     	;# 
  2252  041B                     	;# 
  2253  041C                     	;# 
  2254  041D                     	;# 
  2255  041E                     	;# 
  2256  048D                     	;# 
  2257  0491                     	;# 
  2258  0491                     	;# 
  2259  0492                     	;# 
  2260  0492                     	;# 
  2261  0493                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0494                     	;# 
  2266  0495                     	;# 
  2267  0495                     	;# 
  2268  0496                     	;# 
  2269  0496                     	;# 
  2270  0497                     	;# 
  2271  0497                     	;# 
  2272  0595                     	;# 
  2273  0596                     	;# 
  2274  0597                     	;# 
  2275  059C                     	;# 
  2276  059D                     	;# 
  2277  059E                     	;# 
  2278  0611                     	;# 
  2279  0611                     	;# 
  2280  0612                     	;# 
  2281  0613                     	;# 
  2282  0614                     	;# 
  2283  0614                     	;# 
  2284  0615                     	;# 
  2285  0616                     	;# 
  2286  0617                     	;# 
  2287  0617                     	;# 
  2288  0618                     	;# 
  2289  0619                     	;# 
  2290  061A                     	;# 
  2291  061A                     	;# 
  2292  061B                     	;# 
  2293  061C                     	;# 
  2294  061D                     	;# 
  2295  061D                     	;# 
  2296  061E                     	;# 
  2297  061F                     	;# 
  2298  0FE4                     	;# 
  2299  0FE5                     	;# 
  2300  0FE6                     	;# 
  2301  0FE7                     	;# 
  2302  0FE8                     	;# 
  2303  0FE9                     	;# 
  2304  0FEA                     	;# 
  2305  0FEB                     	;# 
  2306  0FED                     	;# 
  2307  0FEE                     	;# 
  2308  0FEF                     	;# 
  2309  0000                     	;# 
  2310  0001                     	;# 
  2311  0002                     	;# 
  2312  0003                     	;# 
  2313  0004                     	;# 
  2314  0005                     	;# 
  2315  0006                     	;# 
  2316  0007                     	;# 
  2317  0008                     	;# 
  2318  0009                     	;# 
  2319  000A                     	;# 
  2320  000B                     	;# 
  2321  000C                     	;# 
  2322  000D                     	;# 
  2323  000E                     	;# 
  2324  000F                     	;# 
  2325  0010                     	;# 
  2326  0011                     	;# 
  2327  0012                     	;# 
  2328  0013                     	;# 
  2329  0014                     	;# 
  2330  0015                     	;# 
  2331  0016                     	;# 
  2332  0016                     	;# 
  2333  0017                     	;# 
  2334  0018                     	;# 
  2335  0019                     	;# 
  2336  001A                     	;# 
  2337  001B                     	;# 
  2338  001C                     	;# 
  2339  008C                     	;# 
  2340  008D                     	;# 
  2341  008E                     	;# 
  2342  008F                     	;# 
  2343  0090                     	;# 
  2344  0091                     	;# 
  2345  0092                     	;# 
  2346  0093                     	;# 
  2347  0094                     	;# 
  2348  0095                     	;# 
  2349  0096                     	;# 
  2350  0097                     	;# 
  2351  0099                     	;# 
  2352  009A                     	;# 
  2353  009B                     	;# 
  2354  009B                     	;# 
  2355  009C                     	;# 
  2356  009D                     	;# 
  2357  009E                     	;# 
  2358  010C                     	;# 
  2359  010D                     	;# 
  2360  010E                     	;# 
  2361  010F                     	;# 
  2362  0110                     	;# 
  2363  0116                     	;# 
  2364  0117                     	;# 
  2365  011D                     	;# 
  2366  018C                     	;# 
  2367  018D                     	;# 
  2368  018F                     	;# 
  2369  0190                     	;# 
  2370  0191                     	;# 
  2371  0191                     	;# 
  2372  0192                     	;# 
  2373  0193                     	;# 
  2374  0193                     	;# 
  2375  0194                     	;# 
  2376  0195                     	;# 
  2377  0196                     	;# 
  2378  0197                     	;# 
  2379  0199                     	;# 
  2380  0199                     	;# 
  2381  0199                     	;# 
  2382  019A                     	;# 
  2383  019A                     	;# 
  2384  019A                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019B                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019C                     	;# 
  2391  019C                     	;# 
  2392  019C                     	;# 
  2393  019D                     	;# 
  2394  019D                     	;# 
  2395  019D                     	;# 
  2396  019E                     	;# 
  2397  019E                     	;# 
  2398  019E                     	;# 
  2399  019F                     	;# 
  2400  019F                     	;# 
  2401  019F                     	;# 
  2402  020D                     	;# 
  2403  020F                     	;# 
  2404  0210                     	;# 
  2405  0211                     	;# 
  2406  0211                     	;# 
  2407  0212                     	;# 
  2408  0212                     	;# 
  2409  0213                     	;# 
  2410  0213                     	;# 
  2411  0214                     	;# 
  2412  0214                     	;# 
  2413  0215                     	;# 
  2414  0215                     	;# 
  2415  0215                     	;# 
  2416  0216                     	;# 
  2417  0216                     	;# 
  2418  0217                     	;# 
  2419  0217                     	;# 
  2420  0219                     	;# 
  2421  021A                     	;# 
  2422  021B                     	;# 
  2423  021C                     	;# 
  2424  021D                     	;# 
  2425  021E                     	;# 
  2426  021F                     	;# 
  2427  028C                     	;# 
  2428  028D                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0298                     	;# 
  2434  0298                     	;# 
  2435  0299                     	;# 
  2436  029A                     	;# 
  2437  029D                     	;# 
  2438  029E                     	;# 
  2439  029F                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  0311                     	;# 
  2443  0311                     	;# 
  2444  0312                     	;# 
  2445  0313                     	;# 
  2446  0318                     	;# 
  2447  0318                     	;# 
  2448  0319                     	;# 
  2449  031A                     	;# 
  2450  031C                     	;# 
  2451  031C                     	;# 
  2452  031D                     	;# 
  2453  031E                     	;# 
  2454  038C                     	;# 
  2455  038D                     	;# 
  2456  0394                     	;# 
  2457  0395                     	;# 
  2458  0396                     	;# 
  2459  040C                     	;# 
  2460  040D                     	;# 
  2461  0411                     	;# 
  2462  0411                     	;# 
  2463  0412                     	;# 
  2464  0413                     	;# 
  2465  0414                     	;# 
  2466  0415                     	;# 
  2467  0416                     	;# 
  2468  0417                     	;# 
  2469  0418                     	;# 
  2470  0418                     	;# 
  2471  0419                     	;# 
  2472  041A                     	;# 
  2473  041B                     	;# 
  2474  041C                     	;# 
  2475  041D                     	;# 
  2476  041E                     	;# 
  2477  048D                     	;# 
  2478  0491                     	;# 
  2479  0491                     	;# 
  2480  0492                     	;# 
  2481  0492                     	;# 
  2482  0493                     	;# 
  2483  0493                     	;# 
  2484  0493                     	;# 
  2485  0494                     	;# 
  2486  0494                     	;# 
  2487  0495                     	;# 
  2488  0495                     	;# 
  2489  0496                     	;# 
  2490  0496                     	;# 
  2491  0497                     	;# 
  2492  0497                     	;# 
  2493  0595                     	;# 
  2494  0596                     	;# 
  2495  0597                     	;# 
  2496  059C                     	;# 
  2497  059D                     	;# 
  2498  059E                     	;# 
  2499  0611                     	;# 
  2500  0611                     	;# 
  2501  0612                     	;# 
  2502  0613                     	;# 
  2503  0614                     	;# 
  2504  0614                     	;# 
  2505  0615                     	;# 
  2506  0616                     	;# 
  2507  0617                     	;# 
  2508  0617                     	;# 
  2509  0618                     	;# 
  2510  0619                     	;# 
  2511  061A                     	;# 
  2512  061A                     	;# 
  2513  061B                     	;# 
  2514  061C                     	;# 
  2515  061D                     	;# 
  2516  061D                     	;# 
  2517  061E                     	;# 
  2518  061F                     	;# 
  2519  0FE4                     	;# 
  2520  0FE5                     	;# 
  2521  0FE6                     	;# 
  2522  0FE7                     	;# 
  2523  0FE8                     	;# 
  2524  0FE9                     	;# 
  2525  0FEA                     	;# 
  2526  0FEB                     	;# 
  2527  0FED                     	;# 
  2528  0FEE                     	;# 
  2529  0FEF                     	;# 
  2530  0000                     	;# 
  2531  0001                     	;# 
  2532  0002                     	;# 
  2533  0003                     	;# 
  2534  0004                     	;# 
  2535  0005                     	;# 
  2536  0006                     	;# 
  2537  0007                     	;# 
  2538  0008                     	;# 
  2539  0009                     	;# 
  2540  000A                     	;# 
  2541  000B                     	;# 
  2542  000C                     	;# 
  2543  000D                     	;# 
  2544  000E                     	;# 
  2545  000F                     	;# 
  2546  0010                     	;# 
  2547  0011                     	;# 
  2548  0012                     	;# 
  2549  0013                     	;# 
  2550  0014                     	;# 
  2551  0015                     	;# 
  2552  0016                     	;# 
  2553  0016                     	;# 
  2554  0017                     	;# 
  2555  0018                     	;# 
  2556  0019                     	;# 
  2557  001A                     	;# 
  2558  001B                     	;# 
  2559  001C                     	;# 
  2560  008C                     	;# 
  2561  008D                     	;# 
  2562  008E                     	;# 
  2563  008F                     	;# 
  2564  0090                     	;# 
  2565  0091                     	;# 
  2566  0092                     	;# 
  2567  0093                     	;# 
  2568  0094                     	;# 
  2569  0095                     	;# 
  2570  0096                     	;# 
  2571  0097                     	;# 
  2572  0099                     	;# 
  2573  009A                     	;# 
  2574  009B                     	;# 
  2575  009B                     	;# 
  2576  009C                     	;# 
  2577  009D                     	;# 
  2578  009E                     	;# 
  2579  010C                     	;# 
  2580  010D                     	;# 
  2581  010E                     	;# 
  2582  010F                     	;# 
  2583  0110                     	;# 
  2584  0116                     	;# 
  2585  0117                     	;# 
  2586  011D                     	;# 
  2587  018C                     	;# 
  2588  018D                     	;# 
  2589  018F                     	;# 
  2590  0190                     	;# 
  2591  0191                     	;# 
  2592  0191                     	;# 
  2593  0192                     	;# 
  2594  0193                     	;# 
  2595  0193                     	;# 
  2596  0194                     	;# 
  2597  0195                     	;# 
  2598  0196                     	;# 
  2599  0197                     	;# 
  2600  0199                     	;# 
  2601  0199                     	;# 
  2602  0199                     	;# 
  2603  019A                     	;# 
  2604  019A                     	;# 
  2605  019A                     	;# 
  2606  019B                     	;# 
  2607  019B                     	;# 
  2608  019B                     	;# 
  2609  019B                     	;# 
  2610  019B                     	;# 
  2611  019C                     	;# 
  2612  019C                     	;# 
  2613  019C                     	;# 
  2614  019D                     	;# 
  2615  019D                     	;# 
  2616  019D                     	;# 
  2617  019E                     	;# 
  2618  019E                     	;# 
  2619  019E                     	;# 
  2620  019F                     	;# 
  2621  019F                     	;# 
  2622  019F                     	;# 
  2623  020D                     	;# 
  2624  020F                     	;# 
  2625  0210                     	;# 
  2626  0211                     	;# 
  2627  0211                     	;# 
  2628  0212                     	;# 
  2629  0212                     	;# 
  2630  0213                     	;# 
  2631  0213                     	;# 
  2632  0214                     	;# 
  2633  0214                     	;# 
  2634  0215                     	;# 
  2635  0215                     	;# 
  2636  0215                     	;# 
  2637  0216                     	;# 
  2638  0216                     	;# 
  2639  0217                     	;# 
  2640  0217                     	;# 
  2641  0219                     	;# 
  2642  021A                     	;# 
  2643  021B                     	;# 
  2644  021C                     	;# 
  2645  021D                     	;# 
  2646  021E                     	;# 
  2647  021F                     	;# 
  2648  028C                     	;# 
  2649  028D                     	;# 
  2650  0291                     	;# 
  2651  0291                     	;# 
  2652  0292                     	;# 
  2653  0293                     	;# 
  2654  0298                     	;# 
  2655  0298                     	;# 
  2656  0299                     	;# 
  2657  029A                     	;# 
  2658  029D                     	;# 
  2659  029E                     	;# 
  2660  029F                     	;# 
  2661  030C                     	;# 
  2662  030D                     	;# 
  2663  0311                     	;# 
  2664  0311                     	;# 
  2665  0312                     	;# 
  2666  0313                     	;# 
  2667  0318                     	;# 
  2668  0318                     	;# 
  2669  0319                     	;# 
  2670  031A                     	;# 
  2671  031C                     	;# 
  2672  031C                     	;# 
  2673  031D                     	;# 
  2674  031E                     	;# 
  2675  038C                     	;# 
  2676  038D                     	;# 
  2677  0394                     	;# 
  2678  0395                     	;# 
  2679  0396                     	;# 
  2680  040C                     	;# 
  2681  040D                     	;# 
  2682  0411                     	;# 
  2683  0411                     	;# 
  2684  0412                     	;# 
  2685  0413                     	;# 
  2686  0414                     	;# 
  2687  0415                     	;# 
  2688  0416                     	;# 
  2689  0417                     	;# 
  2690  0418                     	;# 
  2691  0418                     	;# 
  2692  0419                     	;# 
  2693  041A                     	;# 
  2694  041B                     	;# 
  2695  041C                     	;# 
  2696  041D                     	;# 
  2697  041E                     	;# 
  2698  048D                     	;# 
  2699  0491                     	;# 
  2700  0491                     	;# 
  2701  0492                     	;# 
  2702  0492                     	;# 
  2703  0493                     	;# 
  2704  0493                     	;# 
  2705  0493                     	;# 
  2706  0494                     	;# 
  2707  0494                     	;# 
  2708  0495                     	;# 
  2709  0495                     	;# 
  2710  0496                     	;# 
  2711  0496                     	;# 
  2712  0497                     	;# 
  2713  0497                     	;# 
  2714  0595                     	;# 
  2715  0596                     	;# 
  2716  0597                     	;# 
  2717  059C                     	;# 
  2718  059D                     	;# 
  2719  059E                     	;# 
  2720  0611                     	;# 
  2721  0611                     	;# 
  2722  0612                     	;# 
  2723  0613                     	;# 
  2724  0614                     	;# 
  2725  0614                     	;# 
  2726  0615                     	;# 
  2727  0616                     	;# 
  2728  0617                     	;# 
  2729  0617                     	;# 
  2730  0618                     	;# 
  2731  0619                     	;# 
  2732  061A                     	;# 
  2733  061A                     	;# 
  2734  061B                     	;# 
  2735  061C                     	;# 
  2736  061D                     	;# 
  2737  061D                     	;# 
  2738  061E                     	;# 
  2739  061F                     	;# 
  2740  0FE4                     	;# 
  2741  0FE5                     	;# 
  2742  0FE6                     	;# 
  2743  0FE7                     	;# 
  2744  0FE8                     	;# 
  2745  0FE9                     	;# 
  2746  0FEA                     	;# 
  2747  0FEB                     	;# 
  2748  0FED                     	;# 
  2749  0FEE                     	;# 
  2750  0FEF                     	;_delayArray
  2751                           
  2752                           	psect	idataCOMMON
  2753  07FF                     __pidataCOMMON:	
  2754                           
  2755                           ;initializer for _switchBypass_state
  2756  07FF  34FF               	retlw	255
  2757                           
  2758                           	psect	idataBANK0
  2759  0002                     __pidataBANK0:	
  2760                           
  2761                           ;initializer for _feedback_state
  2762  0002  34FF               	retlw	255
  2763                           
  2764                           ;initializer for _longTap_state
  2765  0003  34FF               	retlw	255
  2766                           
  2767                           	psect	idataBANK1
  2768  1DC8                     __pidataBANK1:	
  2769                           
  2770                           ;initializer for _baseline_delay_time
  2771  1DC8  34D0               	retlw	208
  2772  1DC9  3407               	retlw	7
  2773  1DCA  3400               	retlw	0
  2774  1DCB  3400               	retlw	0
  2775                           
  2776                           ;initializer for _delay_time
  2777  1DCC  34D0               	retlw	208
  2778  1DCD  3407               	retlw	7
  2779  1DCE  3400               	retlw	0
  2780  1DCF  3400               	retlw	0
  2781                           
  2782                           ;initializer for _bottom_push_state
  2783  1DD0  3406               	retlw	6
  2784  1DD1  3400               	retlw	0
  2785                           
  2786                           ;initializer for _knob1_prev
  2787  1DD2  34D0               	retlw	208
  2788  1DD3  3407               	retlw	7
  2789                           
  2790                           ;initializer for _long_press_limit
  2791  1DD4  34E8               	retlw	232
  2792  1DD5  3403               	retlw	3
  2793                           
  2794                           ;initializer for _top_push_state
  2795  1DD6  3406               	retlw	6
  2796  1DD7  3400               	retlw	0
  2797                           
  2798                           ;initializer for _blink_rate
  2799  1DD8  3414               	retlw	20
  2800                           
  2801                           ;initializer for _num_taps
  2802  1DD9  3404               	retlw	4
  2803                           
  2804                           	psect	idataBANK2
  2805  1DDA                     __pidataBANK2:	
  2806                           
  2807                           ;initializer for _blink_delay
  2808  1DDA  3464               	retlw	100
  2809  1DDB  3400               	retlw	0
  2810                           
  2811                           ;initializer for _delay_time_changed
  2812  1DDC  3401               	retlw	1
  2813  1DDD  3400               	retlw	0
  2814                           
  2815                           ;initializer for _knob2_prev
  2816  1DDE  34D0               	retlw	208
  2817  1DDF  3407               	retlw	7
  2818                           
  2819                           ;initializer for _knob3_prev
  2820  1DE0  34D0               	retlw	208
  2821  1DE1  3407               	retlw	7
  2822                           
  2823                           ;initializer for _knob4_prev
  2824  1DE2  34D0               	retlw	208
  2825  1DE3  3407               	retlw	7
  2826                           
  2827                           ;initializer for _knob5_prev
  2828  1DE4  34D0               	retlw	208
  2829  1DE5  3407               	retlw	7
  2830                           
  2831                           ;initializer for _mod_delay_time
  2832  1DE6  34D0               	retlw	208
  2833  1DE7  3407               	retlw	7
  2834                           
  2835                           ;initializer for _switchBypass_up
  2836  1DE8  3401               	retlw	1
  2837  1DE9  3400               	retlw	0
  2838                           
  2839                           ;initializer for _tap_iteration
  2840  1DEA  3401               	retlw	1
  2841  1DEB  3400               	retlw	0
  2842                           
  2843                           ;initializer for _blink_state
  2844  1DEC  3401               	retlw	1
  2845                           
  2846                           ;initializer for _currentBypassState
  2847  1DED  34FF               	retlw	255
  2848                           
  2849                           ;initializer for _switchTap_state
  2850  1DEE  34FF               	retlw	255
  2851                           
  2852                           	psect	idataBANK4
  2853  112D                     __pidataBANK4:	
  2854                           
  2855                           ;initializer for _mod2
  2856  112D  3400               	retlw	0
  2857  112E  3400               	retlw	0
  2858  112F  340D               	retlw	13
  2859  1130  3400               	retlw	0
  2860  1131  341B               	retlw	27
  2861  1132  3400               	retlw	0
  2862  1133  3428               	retlw	40
  2863  1134  3400               	retlw	0
  2864  1135  3435               	retlw	53
  2865  1136  3400               	retlw	0
  2866  1137  3443               	retlw	67
  2867  1138  3400               	retlw	0
  2868  1139  3450               	retlw	80
  2869  113A  3400               	retlw	0
  2870  113B  345D               	retlw	93
  2871  113C  3400               	retlw	0
  2872  113D  345D               	retlw	93
  2873  113E  3400               	retlw	0
  2874  113F  3450               	retlw	80
  2875  1140  3400               	retlw	0
  2876  1141  3443               	retlw	67
  2877  1142  3400               	retlw	0
  2878  1143  3435               	retlw	53
  2879  1144  3400               	retlw	0
  2880  1145  3428               	retlw	40
  2881  1146  3400               	retlw	0
  2882  1147  341B               	retlw	27
  2883  1148  3400               	retlw	0
  2884  1149  340D               	retlw	13
  2885  114A  3400               	retlw	0
  2886  114B  3400               	retlw	0
  2887  114C  3400               	retlw	0
  2888  114D  34F3               	retlw	243
  2889  114E  34FF               	retlw	255
  2890  114F  34E5               	retlw	229
  2891  1150  34FF               	retlw	255
  2892  1151  34D8               	retlw	216
  2893  1152  34FF               	retlw	255
  2894  1153  34CB               	retlw	203
  2895  1154  34FF               	retlw	255
  2896  1155  34BD               	retlw	189
  2897  1156  34FF               	retlw	255
  2898  1157  34B0               	retlw	176
  2899  1158  34FF               	retlw	255
  2900  1159  34A3               	retlw	163
  2901  115A  34FF               	retlw	255
  2902  115B  34A3               	retlw	163
  2903  115C  34FF               	retlw	255
  2904  115D  34B0               	retlw	176
  2905  115E  34FF               	retlw	255
  2906  115F  34BD               	retlw	189
  2907  1160  34FF               	retlw	255
  2908  1161  34CB               	retlw	203
  2909  1162  34FF               	retlw	255
  2910  1163  34D8               	retlw	216
  2911  1164  34FF               	retlw	255
  2912  1165  34E5               	retlw	229
  2913  1166  34FF               	retlw	255
  2914  1167  34F3               	retlw	243
  2915  1168  34FF               	retlw	255
  2916  1169  3400               	retlw	0
  2917  116A  3400               	retlw	0
  2918                           
  2919                           	psect	idataBANK5
  2920  10EF                     __pidataBANK5:	
  2921                           
  2922                           ;initializer for _mod3
  2923  10EF  3400               	retlw	0
  2924  10F0  3400               	retlw	0
  2925  10F1  3407               	retlw	7
  2926  10F2  3400               	retlw	0
  2927  10F3  340D               	retlw	13
  2928  10F4  3400               	retlw	0
  2929  10F5  3414               	retlw	20
  2930  10F6  3400               	retlw	0
  2931  10F7  341B               	retlw	27
  2932  10F8  3400               	retlw	0
  2933  10F9  3421               	retlw	33
  2934  10FA  3400               	retlw	0
  2935  10FB  3428               	retlw	40
  2936  10FC  3400               	retlw	0
  2937  10FD  342F               	retlw	47
  2938  10FE  3400               	retlw	0
  2939  10FF  3435               	retlw	53
  2940  1100  3400               	retlw	0
  2941  1101  343C               	retlw	60
  2942  1102  3400               	retlw	0
  2943  1103  3443               	retlw	67
  2944  1104  3400               	retlw	0
  2945  1105  3449               	retlw	73
  2946  1106  3400               	retlw	0
  2947  1107  3450               	retlw	80
  2948  1108  3400               	retlw	0
  2949  1109  3457               	retlw	87
  2950  110A  3400               	retlw	0
  2951  110B  345D               	retlw	93
  2952  110C  3400               	retlw	0
  2953  110D  349C               	retlw	156
  2954  110E  34FF               	retlw	255
  2955  110F  34A3               	retlw	163
  2956  1110  34FF               	retlw	255
  2957  1111  34A9               	retlw	169
  2958  1112  34FF               	retlw	255
  2959  1113  34B0               	retlw	176
  2960  1114  34FF               	retlw	255
  2961  1115  34B7               	retlw	183
  2962  1116  34FF               	retlw	255
  2963  1117  34BD               	retlw	189
  2964  1118  34FF               	retlw	255
  2965  1119  34C4               	retlw	196
  2966  111A  34FF               	retlw	255
  2967  111B  34CB               	retlw	203
  2968  111C  34FF               	retlw	255
  2969  111D  34D1               	retlw	209
  2970  111E  34FF               	retlw	255
  2971  111F  34D8               	retlw	216
  2972  1120  34FF               	retlw	255
  2973  1121  34DF               	retlw	223
  2974  1122  34FF               	retlw	255
  2975  1123  34E5               	retlw	229
  2976  1124  34FF               	retlw	255
  2977  1125  34EC               	retlw	236
  2978  1126  34FF               	retlw	255
  2979  1127  34F3               	retlw	243
  2980  1128  34FF               	retlw	255
  2981  1129  34F9               	retlw	249
  2982  112A  34FF               	retlw	255
  2983  112B  3400               	retlw	0
  2984  112C  3400               	retlw	0
  2985                           
  2986                           	psect	idataBANK6
  2987  10B1                     __pidataBANK6:	
  2988                           
  2989                           ;initializer for _mod4
  2990  10B1  3464               	retlw	100
  2991  10B2  3400               	retlw	0
  2992  10B3  3464               	retlw	100
  2993  10B4  3400               	retlw	0
  2994  10B5  3464               	retlw	100
  2995  10B6  3400               	retlw	0
  2996  10B7  3464               	retlw	100
  2997  10B8  3400               	retlw	0
  2998  10B9  3464               	retlw	100
  2999  10BA  3400               	retlw	0
  3000  10BB  3464               	retlw	100
  3001  10BC  3400               	retlw	0
  3002  10BD  3464               	retlw	100
  3003  10BE  3400               	retlw	0
  3004  10BF  3464               	retlw	100
  3005  10C0  3400               	retlw	0
  3006  10C1  3464               	retlw	100
  3007  10C2  3400               	retlw	0
  3008  10C3  3464               	retlw	100
  3009  10C4  3400               	retlw	0
  3010  10C5  3464               	retlw	100
  3011  10C6  3400               	retlw	0
  3012  10C7  3464               	retlw	100
  3013  10C8  3400               	retlw	0
  3014  10C9  3464               	retlw	100
  3015  10CA  3400               	retlw	0
  3016  10CB  3464               	retlw	100
  3017  10CC  3400               	retlw	0
  3018  10CD  3464               	retlw	100
  3019  10CE  3400               	retlw	0
  3020  10CF  349C               	retlw	156
  3021  10D0  34FF               	retlw	255
  3022  10D1  349C               	retlw	156
  3023  10D2  34FF               	retlw	255
  3024  10D3  349C               	retlw	156
  3025  10D4  34FF               	retlw	255
  3026  10D5  349C               	retlw	156
  3027  10D6  34FF               	retlw	255
  3028  10D7  349C               	retlw	156
  3029  10D8  34FF               	retlw	255
  3030  10D9  349C               	retlw	156
  3031  10DA  34FF               	retlw	255
  3032  10DB  349C               	retlw	156
  3033  10DC  34FF               	retlw	255
  3034  10DD  349C               	retlw	156
  3035  10DE  34FF               	retlw	255
  3036  10DF  349C               	retlw	156
  3037  10E0  34FF               	retlw	255
  3038  10E1  349C               	retlw	156
  3039  10E2  34FF               	retlw	255
  3040  10E3  349C               	retlw	156
  3041  10E4  34FF               	retlw	255
  3042  10E5  349C               	retlw	156
  3043  10E6  34FF               	retlw	255
  3044  10E7  349C               	retlw	156
  3045  10E8  34FF               	retlw	255
  3046  10E9  349C               	retlw	156
  3047  10EA  34FF               	retlw	255
  3048  10EB  349C               	retlw	156
  3049  10EC  34FF               	retlw	255
  3050  10ED  3464               	retlw	100
  3051  10EE  3400               	retlw	0
  3052                           
  3053                           	psect	idataBANK7
  3054  1073                     __pidataBANK7:	
  3055                           
  3056                           ;initializer for _mod1
  3057  1073  3400               	retlw	0
  3058  1074  3400               	retlw	0
  3059  1075  3415               	retlw	21
  3060  1076  3400               	retlw	0
  3061  1077  3429               	retlw	41
  3062  1078  3400               	retlw	0
  3063  1079  343B               	retlw	59
  3064  107A  3400               	retlw	0
  3065  107B  344A               	retlw	74
  3066  107C  3400               	retlw	0
  3067  107D  3457               	retlw	87
  3068  107E  3400               	retlw	0
  3069  107F  345F               	retlw	95
  3070  1080  3400               	retlw	0
  3071  1081  3463               	retlw	99
  3072  1082  3400               	retlw	0
  3073  1083  3463               	retlw	99
  3074  1084  3400               	retlw	0
  3075  1085  345F               	retlw	95
  3076  1086  3400               	retlw	0
  3077  1087  3457               	retlw	87
  3078  1088  3400               	retlw	0
  3079  1089  344A               	retlw	74
  3080  108A  3400               	retlw	0
  3081  108B  343B               	retlw	59
  3082  108C  3400               	retlw	0
  3083  108D  3429               	retlw	41
  3084  108E  3400               	retlw	0
  3085  108F  3415               	retlw	21
  3086  1090  3400               	retlw	0
  3087  1091  3400               	retlw	0
  3088  1092  3400               	retlw	0
  3089  1093  34EB               	retlw	235
  3090  1094  34FF               	retlw	255
  3091  1095  34D7               	retlw	215
  3092  1096  34FF               	retlw	255
  3093  1097  34C5               	retlw	197
  3094  1098  34FF               	retlw	255
  3095  1099  34B6               	retlw	182
  3096  109A  34FF               	retlw	255
  3097  109B  34A9               	retlw	169
  3098  109C  34FF               	retlw	255
  3099  109D  34A1               	retlw	161
  3100  109E  34FF               	retlw	255
  3101  109F  349D               	retlw	157
  3102  10A0  34FF               	retlw	255
  3103  10A1  349D               	retlw	157
  3104  10A2  34FF               	retlw	255
  3105  10A3  34A1               	retlw	161
  3106  10A4  34FF               	retlw	255
  3107  10A5  34A9               	retlw	169
  3108  10A6  34FF               	retlw	255
  3109  10A7  34B6               	retlw	182
  3110  10A8  34FF               	retlw	255
  3111  10A9  34C5               	retlw	197
  3112  10AA  34FF               	retlw	255
  3113  10AB  34D7               	retlw	215
  3114  10AC  34FF               	retlw	255
  3115  10AD  34EB               	retlw	235
  3116  10AE  34FF               	retlw	255
  3117  10AF  3400               	retlw	0
  3118  10B0  3400               	retlw	0
  3119                           
  3120                           	psect	idataBANK8
  3121  13EE                     __pidataBANK8:	
  3122                           
  3123                           ;initializer for _B25k
  3124  13EE  34FF               	retlw	255
  3125  13EF  3400               	retlw	0
  3126  13F0  34FF               	retlw	255
  3127  13F1  3400               	retlw	0
  3128  13F2  34FF               	retlw	255
  3129  13F3  3400               	retlw	0
  3130  13F4  34DF               	retlw	223
  3131  13F5  3400               	retlw	0
  3132  13F6  34AE               	retlw	174
  3133  13F7  3400               	retlw	0
  3134  13F8  348E               	retlw	142
  3135  13F9  3400               	retlw	0
  3136  13FA  3478               	retlw	120
  3137  13FB  3400               	retlw	0
  3138  13FC  3467               	retlw	103
  3139  13FD  3400               	retlw	0
  3140  13FE  345B               	retlw	91
  3141  13FF  3400               	retlw	0
  3142  1400  3450               	retlw	80
  3143  1401  3400               	retlw	0
  3144  1402  3448               	retlw	72
  3145  1403  3400               	retlw	0
  3146  1404  3442               	retlw	66
  3147  1405  3400               	retlw	0
  3148  1406  343C               	retlw	60
  3149  1407  3400               	retlw	0
  3150  1408  3437               	retlw	55
  3151  1409  3400               	retlw	0
  3152  140A  3433               	retlw	51
  3153  140B  3400               	retlw	0
  3154  140C  3430               	retlw	48
  3155  140D  3400               	retlw	0
  3156  140E  342D               	retlw	45
  3157  140F  3400               	retlw	0
  3158  1410  342A               	retlw	42
  3159  1411  3400               	retlw	0
  3160  1412  3427               	retlw	39
  3161  1413  3400               	retlw	0
  3162  1414  3425               	retlw	37
  3163  1415  3400               	retlw	0
  3164  1416  3423               	retlw	35
  3165  1417  3400               	retlw	0
  3166  1418  3421               	retlw	33
  3167  1419  3400               	retlw	0
  3168  141A  3420               	retlw	32
  3169  141B  3400               	retlw	0
  3170  141C  341E               	retlw	30
  3171  141D  3400               	retlw	0
  3172  141E  341D               	retlw	29
  3173  141F  3400               	retlw	0
  3174  1420  341C               	retlw	28
  3175  1421  3400               	retlw	0
  3176  1422  341B               	retlw	27
  3177  1423  3400               	retlw	0
  3178  1424  341A               	retlw	26
  3179  1425  3400               	retlw	0
  3180  1426  3419               	retlw	25
  3181  1427  3400               	retlw	0
  3182  1428  3418               	retlw	24
  3183  1429  3400               	retlw	0
  3184  142A  3417               	retlw	23
  3185  142B  3400               	retlw	0
  3186  142C  3416               	retlw	22
  3187  142D  3400               	retlw	0
  3188  142E  3415               	retlw	21
  3189  142F  3400               	retlw	0
  3190  1430  3415               	retlw	21
  3191  1431  3400               	retlw	0
  3192  1432  3414               	retlw	20
  3193  1433  3400               	retlw	0
  3194  1434  3413               	retlw	19
  3195  1435  3400               	retlw	0
  3196  1436  340F               	retlw	15
  3197  1437  3400               	retlw	0
  3198  1438  340B               	retlw	11
  3199  1439  3400               	retlw	0
  3200  143A  3407               	retlw	7
  3201  143B  3400               	retlw	0
  3202  143C  3407               	retlw	7
  3203  143D  3400               	retlw	0
  3204                           
  3205                           	psect	idataBANK9
  3206  139E                     __pidataBANK9:	
  3207                           
  3208                           ;initializer for _iB25k
  3209  139E  3407               	retlw	7
  3210  139F  3400               	retlw	0
  3211  13A0  3407               	retlw	7
  3212  13A1  3400               	retlw	0
  3213  13A2  340B               	retlw	11
  3214  13A3  3400               	retlw	0
  3215  13A4  340F               	retlw	15
  3216  13A5  3400               	retlw	0
  3217  13A6  3413               	retlw	19
  3218  13A7  3400               	retlw	0
  3219  13A8  3414               	retlw	20
  3220  13A9  3400               	retlw	0
  3221  13AA  3415               	retlw	21
  3222  13AB  3400               	retlw	0
  3223  13AC  3415               	retlw	21
  3224  13AD  3400               	retlw	0
  3225  13AE  3416               	retlw	22
  3226  13AF  3400               	retlw	0
  3227  13B0  3417               	retlw	23
  3228  13B1  3400               	retlw	0
  3229  13B2  3418               	retlw	24
  3230  13B3  3400               	retlw	0
  3231  13B4  3419               	retlw	25
  3232  13B5  3400               	retlw	0
  3233  13B6  341A               	retlw	26
  3234  13B7  3400               	retlw	0
  3235  13B8  341B               	retlw	27
  3236  13B9  3400               	retlw	0
  3237  13BA  341C               	retlw	28
  3238  13BB  3400               	retlw	0
  3239  13BC  341D               	retlw	29
  3240  13BD  3400               	retlw	0
  3241  13BE  341E               	retlw	30
  3242  13BF  3400               	retlw	0
  3243  13C0  3420               	retlw	32
  3244  13C1  3400               	retlw	0
  3245  13C2  3421               	retlw	33
  3246  13C3  3400               	retlw	0
  3247  13C4  3423               	retlw	35
  3248  13C5  3400               	retlw	0
  3249  13C6  3425               	retlw	37
  3250  13C7  3400               	retlw	0
  3251  13C8  3427               	retlw	39
  3252  13C9  3400               	retlw	0
  3253  13CA  342A               	retlw	42
  3254  13CB  3400               	retlw	0
  3255  13CC  342D               	retlw	45
  3256  13CD  3400               	retlw	0
  3257  13CE  3430               	retlw	48
  3258  13CF  3400               	retlw	0
  3259  13D0  3433               	retlw	51
  3260  13D1  3400               	retlw	0
  3261  13D2  3437               	retlw	55
  3262  13D3  3400               	retlw	0
  3263  13D4  343C               	retlw	60
  3264  13D5  3400               	retlw	0
  3265  13D6  3442               	retlw	66
  3266  13D7  3400               	retlw	0
  3267  13D8  3448               	retlw	72
  3268  13D9  3400               	retlw	0
  3269  13DA  3450               	retlw	80
  3270  13DB  3400               	retlw	0
  3271  13DC  345B               	retlw	91
  3272  13DD  3400               	retlw	0
  3273  13DE  3467               	retlw	103
  3274  13DF  3400               	retlw	0
  3275  13E0  3478               	retlw	120
  3276  13E1  3400               	retlw	0
  3277  13E2  348E               	retlw	142
  3278  13E3  3400               	retlw	0
  3279  13E4  34AE               	retlw	174
  3280  13E5  3400               	retlw	0
  3281  13E6  34DF               	retlw	223
  3282  13E7  3400               	retlw	0
  3283  13E8  34FF               	retlw	255
  3284  13E9  3400               	retlw	0
  3285  13EA  34FF               	retlw	255
  3286  13EB  3400               	retlw	0
  3287  13EC  34FF               	retlw	255
  3288  13ED  3400               	retlw	0
  3289                           
  3290                           	psect	idataBIGRAM
  3291  02AC                     __pidataBIGRAM:	
  3292                           
  3293                           ;initializer for _delayArray
  3294  02AC  3422               	retlw	34
  3295  02AD  3408               	retlw	8
  3296  02AE  34FC               	retlw	252
  3297  02AF  3407               	retlw	7
  3298  02B0  34D8               	retlw	216
  3299  02B1  3407               	retlw	7
  3300  02B2  34B5               	retlw	181
  3301  02B3  3407               	retlw	7
  3302  02B4  3493               	retlw	147
  3303  02B5  3407               	retlw	7
  3304  02B6  3472               	retlw	114
  3305  02B7  3407               	retlw	7
  3306  02B8  3452               	retlw	82
  3307  02B9  3407               	retlw	7
  3308  02BA  3434               	retlw	52
  3309  02BB  3407               	retlw	7
  3310  02BC  3416               	retlw	22
  3311  02BD  3407               	retlw	7
  3312  02BE  34F9               	retlw	249
  3313  02BF  3406               	retlw	6
  3314  02C0  34DD               	retlw	221
  3315  02C1  3406               	retlw	6
  3316  02C2  34C2               	retlw	194
  3317  02C3  3406               	retlw	6
  3318  02C4  34A8               	retlw	168
  3319  02C5  3406               	retlw	6
  3320  02C6  348F               	retlw	143
  3321  02C7  3406               	retlw	6
  3322  02C8  3476               	retlw	118
  3323  02C9  3406               	retlw	6
  3324  02CA  345E               	retlw	94
  3325  02CB  3406               	retlw	6
  3326  02CC  3447               	retlw	71
  3327  02CD  3406               	retlw	6
  3328  02CE  3430               	retlw	48
  3329  02CF  3406               	retlw	6
  3330  02D0  341A               	retlw	26
  3331  02D1  3406               	retlw	6
  3332  02D2  3405               	retlw	5
  3333  02D3  3406               	retlw	6
  3334  02D4  34F0               	retlw	240
  3335  02D5  3405               	retlw	5
  3336  02D6  34DC               	retlw	220
  3337  02D7  3405               	retlw	5
  3338  02D8  34C8               	retlw	200
  3339  02D9  3405               	retlw	5
  3340  02DA  34B5               	retlw	181
  3341  02DB  3405               	retlw	5
  3342  02DC  34A3               	retlw	163
  3343  02DD  3405               	retlw	5
  3344  02DE  3490               	retlw	144
  3345  02DF  3405               	retlw	5
  3346  02E0  347F               	retlw	127
  3347  02E1  3405               	retlw	5
  3348  02E2  346D               	retlw	109
  3349  02E3  3405               	retlw	5
  3350  02E4  345C               	retlw	92
  3351  02E5  3405               	retlw	5
  3352  02E6  344C               	retlw	76
  3353  02E7  3405               	retlw	5
  3354  02E8  343C               	retlw	60
  3355  02E9  3405               	retlw	5
  3356  02EA  342C               	retlw	44
  3357  02EB  3405               	retlw	5
  3358  02EC  341D               	retlw	29
  3359  02ED  3405               	retlw	5
  3360  02EE  340E               	retlw	14
  3361  02EF  3405               	retlw	5
  3362  02F0  34FF               	retlw	255
  3363  02F1  3404               	retlw	4
  3364  02F2  34F1               	retlw	241
  3365  02F3  3404               	retlw	4
  3366  02F4  34E2               	retlw	226
  3367  02F5  3404               	retlw	4
  3368  02F6  34D5               	retlw	213
  3369  02F7  3404               	retlw	4
  3370  02F8  34C7               	retlw	199
  3371  02F9  3404               	retlw	4
  3372  02FA  34BA               	retlw	186
  3373  02FB  3404               	retlw	4
  3374  02FC  34AD               	retlw	173
  3375  02FD  3404               	retlw	4
  3376  02FE  34A1               	retlw	161
  3377  02FF  3404               	retlw	4
  3378  0300  3494               	retlw	148
  3379  0301  3404               	retlw	4
  3380  0302  3488               	retlw	136
  3381  0303  3404               	retlw	4
  3382  0304  347D               	retlw	125
  3383  0305  3404               	retlw	4
  3384  0306  3471               	retlw	113
  3385  0307  3404               	retlw	4
  3386  0308  3466               	retlw	102
  3387  0309  3404               	retlw	4
  3388  030A  345A               	retlw	90
  3389  030B  3404               	retlw	4
  3390  030C  3450               	retlw	80
  3391  030D  3404               	retlw	4
  3392  030E  3445               	retlw	69
  3393  030F  3404               	retlw	4
  3394  0310  343A               	retlw	58
  3395  0311  3404               	retlw	4
  3396  0312  3430               	retlw	48
  3397  0313  3404               	retlw	4
  3398  0314  3426               	retlw	38
  3399  0315  3404               	retlw	4
  3400  0316  341C               	retlw	28
  3401  0317  3404               	retlw	4
  3402  0318  3412               	retlw	18
  3403  0319  3404               	retlw	4
  3404  031A  3409               	retlw	9
  3405  031B  3404               	retlw	4
  3406  031C  34FF               	retlw	255
  3407  031D  3403               	retlw	3
  3408  031E  34F6               	retlw	246
  3409  031F  3403               	retlw	3
  3410  0320  34ED               	retlw	237
  3411  0321  3403               	retlw	3
  3412  0322  34E4               	retlw	228
  3413  0323  3403               	retlw	3
  3414  0324  34DC               	retlw	220
  3415  0325  3403               	retlw	3
  3416  0326  34D3               	retlw	211
  3417  0327  3403               	retlw	3
  3418  0328  34CB               	retlw	203
  3419  0329  3403               	retlw	3
  3420  032A  34C2               	retlw	194
  3421  032B  3403               	retlw	3
  3422  032C  34BA               	retlw	186
  3423  032D  3403               	retlw	3
  3424  032E  34B2               	retlw	178
  3425  032F  3403               	retlw	3
  3426  0330  34AA               	retlw	170
  3427  0331  3403               	retlw	3
  3428  0332  34A2               	retlw	162
  3429  0333  3403               	retlw	3
  3430  0334  349B               	retlw	155
  3431  0335  3403               	retlw	3
  3432  0336  3493               	retlw	147
  3433  0337  3403               	retlw	3
  3434  0338  348C               	retlw	140
  3435  0339  3403               	retlw	3
  3436  033A  3485               	retlw	133
  3437  033B  3403               	retlw	3
  3438  033C  347E               	retlw	126
  3439  033D  3403               	retlw	3
  3440  033E  3477               	retlw	119
  3441  033F  3403               	retlw	3
  3442  0340  3470               	retlw	112
  3443  0341  3403               	retlw	3
  3444  0342  3469               	retlw	105
  3445  0343  3403               	retlw	3
  3446  0344  3462               	retlw	98
  3447  0345  3403               	retlw	3
  3448  0346  345C               	retlw	92
  3449  0347  3403               	retlw	3
  3450  0348  3455               	retlw	85
  3451  0349  3403               	retlw	3
  3452  034A  344F               	retlw	79
  3453  034B  3403               	retlw	3
  3454  034C  3448               	retlw	72
  3455  034D  3403               	retlw	3
  3456  034E  3442               	retlw	66
  3457  034F  3403               	retlw	3
  3458  0350  343C               	retlw	60
  3459  0351  3403               	retlw	3
  3460  0352  3436               	retlw	54
  3461  0353  3403               	retlw	3
  3462  0354  3430               	retlw	48
  3463  0355  3403               	retlw	3
  3464  0356  342A               	retlw	42
  3465  0357  3403               	retlw	3
  3466  0358  3424               	retlw	36
  3467  0359  3403               	retlw	3
  3468  035A  341F               	retlw	31
  3469  035B  3403               	retlw	3
  3470  035C  3419               	retlw	25
  3471  035D  3403               	retlw	3
  3472  035E  3413               	retlw	19
  3473  035F  3403               	retlw	3
  3474  0360  340E               	retlw	14
  3475  0361  3403               	retlw	3
  3476  0362  3409               	retlw	9
  3477  0363  3403               	retlw	3
  3478  0364  3403               	retlw	3
  3479  0365  3403               	retlw	3
  3480  0366  34FE               	retlw	254
  3481  0367  3402               	retlw	2
  3482  0368  34F9               	retlw	249
  3483  0369  3402               	retlw	2
  3484  036A  34F4               	retlw	244
  3485  036B  3402               	retlw	2
  3486  036C  34EF               	retlw	239
  3487  036D  3402               	retlw	2
  3488  036E  34EA               	retlw	234
  3489  036F  3402               	retlw	2
  3490  0370  34E5               	retlw	229
  3491  0371  3402               	retlw	2
  3492  0372  34E0               	retlw	224
  3493  0373  3402               	retlw	2
  3494  0374  34DB               	retlw	219
  3495  0375  3402               	retlw	2
  3496  0376  34D7               	retlw	215
  3497  0377  3402               	retlw	2
  3498  0378  34D2               	retlw	210
  3499  0379  3402               	retlw	2
  3500  037A  34CD               	retlw	205
  3501  037B  3402               	retlw	2
  3502  037C  34C9               	retlw	201
  3503  037D  3402               	retlw	2
  3504  037E  34C4               	retlw	196
  3505  037F  3402               	retlw	2
  3506  0380  34C0               	retlw	192
  3507  0381  3402               	retlw	2
  3508  0382  34BC               	retlw	188
  3509  0383  3402               	retlw	2
  3510  0384  34B7               	retlw	183
  3511  0385  3402               	retlw	2
  3512  0386  34B3               	retlw	179
  3513  0387  3402               	retlw	2
  3514  0388  34AF               	retlw	175
  3515  0389  3402               	retlw	2
  3516  038A  34AB               	retlw	171
  3517  038B  3402               	retlw	2
  3518  038C  34A6               	retlw	166
  3519  038D  3402               	retlw	2
  3520  038E  34A2               	retlw	162
  3521  038F  3402               	retlw	2
  3522  0390  349E               	retlw	158
  3523  0391  3402               	retlw	2
  3524  0392  349A               	retlw	154
  3525  0393  3402               	retlw	2
  3526  0394  3497               	retlw	151
  3527  0395  3402               	retlw	2
  3528  0396  3493               	retlw	147
  3529  0397  3402               	retlw	2
  3530  0398  348F               	retlw	143
  3531  0399  3402               	retlw	2
  3532  039A  348B               	retlw	139
  3533  039B  3402               	retlw	2
  3534  039C  3487               	retlw	135
  3535  039D  3402               	retlw	2
  3536  039E  3484               	retlw	132
  3537  039F  3402               	retlw	2
  3538  03A0  3480               	retlw	128
  3539  03A1  3402               	retlw	2
  3540  03A2  347C               	retlw	124
  3541  03A3  3402               	retlw	2
  3542  03A4  3479               	retlw	121
  3543  03A5  3402               	retlw	2
  3544  03A6  3475               	retlw	117
  3545  03A7  3402               	retlw	2
  3546  03A8  3472               	retlw	114
  3547  03A9  3402               	retlw	2
  3548  03AA  346E               	retlw	110
  3549  03AB  3402               	retlw	2
  3550  03AC  346B               	retlw	107
  3551  03AD  3402               	retlw	2
  3552  03AE  3467               	retlw	103
  3553  03AF  3402               	retlw	2
  3554  03B0  3464               	retlw	100
  3555  03B1  3402               	retlw	2
  3556  03B2  3461               	retlw	97
  3557  03B3  3402               	retlw	2
  3558  03B4  345E               	retlw	94
  3559  03B5  3402               	retlw	2
  3560  03B6  345A               	retlw	90
  3561  03B7  3402               	retlw	2
  3562  03B8  3457               	retlw	87
  3563  03B9  3402               	retlw	2
  3564  03BA  3454               	retlw	84
  3565  03BB  3402               	retlw	2
  3566  03BC  3451               	retlw	81
  3567  03BD  3402               	retlw	2
  3568  03BE  344E               	retlw	78
  3569  03BF  3402               	retlw	2
  3570  03C0  344B               	retlw	75
  3571  03C1  3402               	retlw	2
  3572  03C2  3448               	retlw	72
  3573  03C3  3402               	retlw	2
  3574  03C4  3445               	retlw	69
  3575  03C5  3402               	retlw	2
  3576  03C6  3442               	retlw	66
  3577  03C7  3402               	retlw	2
  3578  03C8  343F               	retlw	63
  3579  03C9  3402               	retlw	2
  3580  03CA  343C               	retlw	60
  3581  03CB  3402               	retlw	2
  3582  03CC  3439               	retlw	57
  3583  03CD  3402               	retlw	2
  3584  03CE  3436               	retlw	54
  3585  03CF  3402               	retlw	2
  3586  03D0  3433               	retlw	51
  3587  03D1  3402               	retlw	2
  3588  03D2  3430               	retlw	48
  3589  03D3  3402               	retlw	2
  3590  03D4  342E               	retlw	46
  3591  03D5  3402               	retlw	2
  3592  03D6  342B               	retlw	43
  3593  03D7  3402               	retlw	2
  3594  03D8  3428               	retlw	40
  3595  03D9  3402               	retlw	2
  3596  03DA  3425               	retlw	37
  3597  03DB  3402               	retlw	2
  3598  03DC  3423               	retlw	35
  3599  03DD  3402               	retlw	2
  3600  03DE  3420               	retlw	32
  3601  03DF  3402               	retlw	2
  3602  03E0  341E               	retlw	30
  3603  03E1  3402               	retlw	2
  3604  03E2  341B               	retlw	27
  3605  03E3  3402               	retlw	2
  3606  03E4  3418               	retlw	24
  3607  03E5  3402               	retlw	2
  3608  03E6  3416               	retlw	22
  3609  03E7  3402               	retlw	2
  3610  03E8  3413               	retlw	19
  3611  03E9  3402               	retlw	2
  3612  03EA  3411               	retlw	17
  3613  03EB  3402               	retlw	2
  3614  03EC  340E               	retlw	14
  3615  03ED  3402               	retlw	2
  3616  03EE  340C               	retlw	12
  3617  03EF  3402               	retlw	2
  3618  03F0  340A               	retlw	10
  3619  03F1  3402               	retlw	2
  3620  03F2  3407               	retlw	7
  3621  03F3  3402               	retlw	2
  3622  03F4  3405               	retlw	5
  3623  03F5  3402               	retlw	2
  3624  03F6  3402               	retlw	2
  3625  03F7  3402               	retlw	2
  3626  03F8  3400               	retlw	0
  3627  03F9  3402               	retlw	2
  3628  03FA  34FE               	retlw	254
  3629  03FB  3401               	retlw	1
  3630  03FC  34FB               	retlw	251
  3631  03FD  3401               	retlw	1
  3632  03FE  34F9               	retlw	249
  3633  03FF  3401               	retlw	1
  3634  0400  34F7               	retlw	247
  3635  0401  3401               	retlw	1
  3636  0402  34F5               	retlw	245
  3637  0403  3401               	retlw	1
  3638  0404  34F2               	retlw	242
  3639  0405  3401               	retlw	1
  3640  0406  34F0               	retlw	240
  3641  0407  3401               	retlw	1
  3642  0408  34EE               	retlw	238
  3643  0409  3401               	retlw	1
  3644  040A  34EC               	retlw	236
  3645  040B  3401               	retlw	1
  3646  040C  34EA               	retlw	234
  3647  040D  3401               	retlw	1
  3648  040E  34E8               	retlw	232
  3649  040F  3401               	retlw	1
  3650  0410  34E6               	retlw	230
  3651  0411  3401               	retlw	1
  3652  0412  34E3               	retlw	227
  3653  0413  3401               	retlw	1
  3654  0414  34E1               	retlw	225
  3655  0415  3401               	retlw	1
  3656  0416  34DF               	retlw	223
  3657  0417  3401               	retlw	1
  3658  0418  34DD               	retlw	221
  3659  0419  3401               	retlw	1
  3660  041A  34DB               	retlw	219
  3661  041B  3401               	retlw	1
  3662  041C  34D9               	retlw	217
  3663  041D  3401               	retlw	1
  3664  041E  34D7               	retlw	215
  3665  041F  3401               	retlw	1
  3666  0420  34D5               	retlw	213
  3667  0421  3401               	retlw	1
  3668  0422  34D3               	retlw	211
  3669  0423  3401               	retlw	1
  3670  0424  34D2               	retlw	210
  3671  0425  3401               	retlw	1
  3672  0426  34D0               	retlw	208
  3673  0427  3401               	retlw	1
  3674  0428  34CE               	retlw	206
  3675  0429  3401               	retlw	1
  3676  042A  34CC               	retlw	204
  3677  042B  3401               	retlw	1
  3678  042C  34CA               	retlw	202
  3679  042D  3401               	retlw	1
  3680  042E  34C8               	retlw	200
  3681  042F  3401               	retlw	1
  3682  0430  34C6               	retlw	198
  3683  0431  3401               	retlw	1
  3684  0432  34C4               	retlw	196
  3685  0433  3401               	retlw	1
  3686  0434  34C3               	retlw	195
  3687  0435  3401               	retlw	1
  3688  0436  34C1               	retlw	193
  3689  0437  3401               	retlw	1
  3690  0438  34BF               	retlw	191
  3691  0439  3401               	retlw	1
  3692  043A  34BD               	retlw	189
  3693  043B  3401               	retlw	1
  3694  043C  34BC               	retlw	188
  3695  043D  3401               	retlw	1
  3696  043E  34BA               	retlw	186
  3697  043F  3401               	retlw	1
  3698  0440  34B8               	retlw	184
  3699  0441  3401               	retlw	1
  3700  0442  34B6               	retlw	182
  3701  0443  3401               	retlw	1
  3702  0444  34B5               	retlw	181
  3703  0445  3401               	retlw	1
  3704  0446  34B3               	retlw	179
  3705  0447  3401               	retlw	1
  3706  0448  34B1               	retlw	177
  3707  0449  3401               	retlw	1
  3708  044A  34B0               	retlw	176
  3709  044B  3401               	retlw	1
  3710  044C  34AE               	retlw	174
  3711  044D  3401               	retlw	1
  3712  044E  34AC               	retlw	172
  3713  044F  3401               	retlw	1
  3714  0450  34AB               	retlw	171
  3715  0451  3401               	retlw	1
  3716  0452  34A9               	retlw	169
  3717  0453  3401               	retlw	1
  3718  0454  34A8               	retlw	168
  3719  0455  3401               	retlw	1
  3720  0456  34A6               	retlw	166
  3721  0457  3401               	retlw	1
  3722  0458  34A4               	retlw	164
  3723  0459  3401               	retlw	1
  3724  045A  34A3               	retlw	163
  3725  045B  3401               	retlw	1
  3726  045C  34A1               	retlw	161
  3727  045D  3401               	retlw	1
  3728  045E  34A0               	retlw	160
  3729  045F  3401               	retlw	1
  3730  0460  349E               	retlw	158
  3731  0461  3401               	retlw	1
  3732  0462  349D               	retlw	157
  3733  0463  3401               	retlw	1
  3734  0464  349B               	retlw	155
  3735  0465  3401               	retlw	1
  3736  0466  349A               	retlw	154
  3737  0467  3401               	retlw	1
  3738  0468  3498               	retlw	152
  3739  0469  3401               	retlw	1
  3740  046A  3497               	retlw	151
  3741  046B  3401               	retlw	1
  3742  046C  3495               	retlw	149
  3743  046D  3401               	retlw	1
  3744  046E  3494               	retlw	148
  3745  046F  3401               	retlw	1
  3746  0470  3492               	retlw	146
  3747  0471  3401               	retlw	1
  3748  0472  3491               	retlw	145
  3749  0473  3401               	retlw	1
  3750  0474  3490               	retlw	144
  3751  0475  3401               	retlw	1
  3752  0476  348E               	retlw	142
  3753  0477  3401               	retlw	1
  3754  0478  348D               	retlw	141
  3755  0479  3401               	retlw	1
  3756  047A  348B               	retlw	139
  3757  047B  3401               	retlw	1
  3758  047C  348A               	retlw	138
  3759  047D  3401               	retlw	1
  3760  047E  3489               	retlw	137
  3761  047F  3401               	retlw	1
  3762  0480  3487               	retlw	135
  3763  0481  3401               	retlw	1
  3764  0482  3486               	retlw	134
  3765  0483  3401               	retlw	1
  3766  0484  3485               	retlw	133
  3767  0485  3401               	retlw	1
  3768  0486  3483               	retlw	131
  3769  0487  3401               	retlw	1
  3770  0488  3482               	retlw	130
  3771  0489  3401               	retlw	1
  3772  048A  3481               	retlw	129
  3773  048B  3401               	retlw	1
  3774  048C  347F               	retlw	127
  3775  048D  3401               	retlw	1
  3776  048E  347E               	retlw	126
  3777  048F  3401               	retlw	1
  3778  0490  347D               	retlw	125
  3779  0491  3401               	retlw	1
  3780  0492  347B               	retlw	123
  3781  0493  3401               	retlw	1
  3782  0494  347A               	retlw	122
  3783  0495  3401               	retlw	1
  3784  0496  3479               	retlw	121
  3785  0497  3401               	retlw	1
  3786  0498  3478               	retlw	120
  3787  0499  3401               	retlw	1
  3788  049A  3476               	retlw	118
  3789  049B  3401               	retlw	1
  3790  049C  3475               	retlw	117
  3791  049D  3401               	retlw	1
  3792  049E  3474               	retlw	116
  3793  049F  3401               	retlw	1
  3794  04A0  3473               	retlw	115
  3795  04A1  3401               	retlw	1
  3796  04A2  3471               	retlw	113
  3797  04A3  3401               	retlw	1
  3798  04A4  3470               	retlw	112
  3799  04A5  3401               	retlw	1
  3800  04A6  346F               	retlw	111
  3801  04A7  3401               	retlw	1
  3802  04A8  346E               	retlw	110
  3803  04A9  3401               	retlw	1
  3804  04AA  3400               	retlw	0
  3805  04AB  3400               	retlw	0
  3806  04AC  3400               	retlw	0
  3807  04AD  3400               	retlw	0
  3808  04AE  3400               	retlw	0
  3809  04AF  3400               	retlw	0
  3810  04B0  3400               	retlw	0
  3811  04B1  3400               	retlw	0
  3812  04B2  3400               	retlw	0
  3813  04B3  3400               	retlw	0
  3814                           
  3815                           ;initializer for _mod5
  3816  04B4  3400               	retlw	0
  3817  04B5  3400               	retlw	0
  3818  04B6  340A               	retlw	10
  3819  04B7  3400               	retlw	0
  3820  04B8  3414               	retlw	20
  3821  04B9  3400               	retlw	0
  3822  04BA  341E               	retlw	30
  3823  04BB  3400               	retlw	0
  3824  04BC  3428               	retlw	40
  3825  04BD  3400               	retlw	0
  3826  04BE  3432               	retlw	50
  3827  04BF  3400               	retlw	0
  3828  04C0  343A               	retlw	58
  3829  04C1  3400               	retlw	0
  3830  04C2  3442               	retlw	66
  3831  04C3  3400               	retlw	0
  3832  04C4  344A               	retlw	74
  3833  04C5  3400               	retlw	0
  3834  04C6  3450               	retlw	80
  3835  04C7  3400               	retlw	0
  3836  04C8  3456               	retlw	86
  3837  04C9  3400               	retlw	0
  3838  04CA  345B               	retlw	91
  3839  04CB  3400               	retlw	0
  3840  04CC  345F               	retlw	95
  3841  04CD  3400               	retlw	0
  3842  04CE  3461               	retlw	97
  3843  04CF  3400               	retlw	0
  3844  04D0  3463               	retlw	99
  3845  04D1  3400               	retlw	0
  3846  04D2  3464               	retlw	100
  3847  04D3  3400               	retlw	0
  3848  04D4  3463               	retlw	99
  3849  04D5  3400               	retlw	0
  3850  04D6  3461               	retlw	97
  3851  04D7  3400               	retlw	0
  3852  04D8  345F               	retlw	95
  3853  04D9  3400               	retlw	0
  3854  04DA  345B               	retlw	91
  3855  04DB  3400               	retlw	0
  3856  04DC  3456               	retlw	86
  3857  04DD  3400               	retlw	0
  3858  04DE  3450               	retlw	80
  3859  04DF  3400               	retlw	0
  3860  04E0  344A               	retlw	74
  3861  04E1  3400               	retlw	0
  3862  04E2  3442               	retlw	66
  3863  04E3  3400               	retlw	0
  3864  04E4  343A               	retlw	58
  3865  04E5  3400               	retlw	0
  3866  04E6  3432               	retlw	50
  3867  04E7  3400               	retlw	0
  3868  04E8  3428               	retlw	40
  3869  04E9  3400               	retlw	0
  3870  04EA  341E               	retlw	30
  3871  04EB  3400               	retlw	0
  3872  04EC  3414               	retlw	20
  3873  04ED  3400               	retlw	0
  3874  04EE  340A               	retlw	10
  3875  04EF  3400               	retlw	0
  3876  04F0  3400               	retlw	0
  3877  04F1  3400               	retlw	0
  3878  04F2  34F6               	retlw	246
  3879  04F3  34FF               	retlw	255
  3880  04F4  34EC               	retlw	236
  3881  04F5  34FF               	retlw	255
  3882  04F6  34E2               	retlw	226
  3883  04F7  34FF               	retlw	255
  3884  04F8  34D8               	retlw	216
  3885  04F9  34FF               	retlw	255
  3886  04FA  34CE               	retlw	206
  3887  04FB  34FF               	retlw	255
  3888  04FC  34C6               	retlw	198
  3889  04FD  34FF               	retlw	255
  3890  04FE  34BE               	retlw	190
  3891  04FF  34FF               	retlw	255
  3892  0500  34B6               	retlw	182
  3893  0501  34FF               	retlw	255
  3894  0502  34B0               	retlw	176
  3895  0503  34FF               	retlw	255
  3896  0504  34AA               	retlw	170
  3897  0505  34FF               	retlw	255
  3898  0506  34A5               	retlw	165
  3899  0507  34FF               	retlw	255
  3900  0508  34A1               	retlw	161
  3901  0509  34FF               	retlw	255
  3902  050A  349F               	retlw	159
  3903  050B  34FF               	retlw	255
  3904  050C  349D               	retlw	157
  3905  050D  34FF               	retlw	255
  3906  050E  349C               	retlw	156
  3907  050F  34FF               	retlw	255
  3908  0510  349D               	retlw	157
  3909  0511  34FF               	retlw	255
  3910  0512  349F               	retlw	159
  3911  0513  34FF               	retlw	255
  3912  0514  34A1               	retlw	161
  3913  0515  34FF               	retlw	255
  3914  0516  34A5               	retlw	165
  3915  0517  34FF               	retlw	255
  3916  0518  34AA               	retlw	170
  3917  0519  34FF               	retlw	255
  3918  051A  34B0               	retlw	176
  3919  051B  34FF               	retlw	255
  3920  051C  34B6               	retlw	182
  3921  051D  34FF               	retlw	255
  3922  051E  34BE               	retlw	190
  3923  051F  34FF               	retlw	255
  3924  0520  34C6               	retlw	198
  3925  0521  34FF               	retlw	255
  3926  0522  34CE               	retlw	206
  3927  0523  34FF               	retlw	255
  3928  0524  34D8               	retlw	216
  3929  0525  34FF               	retlw	255
  3930  0526  34E2               	retlw	226
  3931  0527  34FF               	retlw	255
  3932  0528  34EC               	retlw	236
  3933  0529  34FF               	retlw	255
  3934  052A  34F6               	retlw	246
  3935  052B  34FF               	retlw	255
  3936  052C  3400               	retlw	0
  3937  052D  3400               	retlw	0
  3938  000B                     _INTCONbits	set	11
  3939  000E                     _PORTCbits	set	14
  3940  000F                     _PORTDbits	set	15
  3941  0010                     _PORTEbits	set	16
  3942  001B                     _PR2	set	27
  3943  001C                     _T2CONbits	set	28
  3944  009D                     _ADCON0bits	set	157
  3945  009E                     _ADCON1bits	set	158
  3946  009C                     _ADRESH	set	156
  3947  009B                     _ADRESL	set	155
  3948  0095                     _OPTION_REGbits	set	149
  3949  0099                     _OSCCONbits	set	153
  3950  008D                     _TRISBbits	set	141
  3951  008E                     _TRISCbits	set	142
  3952  008F                     _TRISDbits	set	143
  3953  0090                     _TRISEbits	set	144
  3954  011D                     _APFCONbits	set	285
  3955  010D                     _LATBbits	set	269
  3956  010F                     _LATDbits	set	271
  3957  0190                     _ANSELEbits	set	400
  3958  0192                     _PMADRH	set	402
  3959  0191                     _PMADRL	set	401
  3960  0195                     _PMCON1bits	set	405
  3961  0196                     _PMCON2	set	406
  3962  0194                     _PMDATH	set	404
  3963  0193                     _PMDATL	set	403
  3964  0291                     _CCPR1	set	657
  3965  0298                     _CCPR2	set	664
  3966  0293                     _CCP1CONbits	set	659
  3967  029A                     _CCP2CONbits	set	666
  3968  029D                     _CCPTMRS0	set	669
  3969  029E                     _CCPTMRS1	set	670
  3970  029F                     _CCPTMRS2	set	671
  3971  0311                     _CCPR3	set	785
  3972  0318                     _CCPR4	set	792
  3973  031C                     _CCPR5	set	796
  3974  0313                     _CCP3CONbits	set	787
  3975  031A                     _CCP4CONbits	set	794
  3976  031E                     _CCP5CONbits	set	798
  3977  030C                     _TRISFbits	set	780
  3978  030D                     _TRISGbits	set	781
  3979  038C                     _LATFbits	set	908
  3980  038D                     _LATGbits	set	909
  3981  040C                     _ANSELFbits	set	1036
  3982  061A                     _CCPR9	set	1562
  3983  061F                     _CCP10CONbits	set	1567
  3984  0613                     _CCP6CONbits	set	1555
  3985  0616                     _CCP7CONbits	set	1558
  3986  0619                     _CCP8CONbits	set	1561
  3987  061C                     _CCP9CONbits	set	1564
  3988                           
  3989                           ; #config settings
  3990  0000                     
  3991                           	psect	cinit
  3992  01F2                     start_initialization:	
  3993  01F2                     __initialization:		;BIGRAM
  3994                           
  3995                           ; Clear objects allocated to BANK0
  3996  01F2  01EB               	clrf	__pbssBANK0& (0+127)
  3997                           
  3998                           ; Clear objects allocated to BANK1
  3999  01F3  30DB               	movlw	low __pbssBANK1
  4000  01F4  0084               	movwf	4
  4001  01F5  3000               	movlw	high __pbssBANK1
  4002  01F6  0085               	movwf	5
  4003  01F7  3011               	movlw	17
  4004  01F8  00FE               	movwf	btemp
  4005  01F9  3000               	movlw	0
  4006  01FA  00FF               	movwf	btemp+1
  4007  01FB  319D  259B  3181   	fcall	clear_ram0
  4008                           
  4009                           ; Clear objects allocated to BANK2
  4010  01FE  3020               	movlw	low __pbssBANK2
  4011  01FF  0084               	movwf	4
  4012  0200  3001               	movlw	high __pbssBANK2
  4013  0201  0085               	movwf	5
  4014  0202  303A               	movlw	58
  4015  0203  00FE               	movwf	btemp
  4016  0204  3000               	movlw	0
  4017  0205  00FF               	movwf	btemp+1
  4018  0206  319D  259B  3181   	fcall	clear_ram0
  4019                           
  4020                           ; Clear objects allocated to BANK3
  4021  0209  30A0               	movlw	low __pbssBANK3
  4022  020A  0084               	movwf	4
  4023  020B  3001               	movlw	high __pbssBANK3
  4024  020C  0085               	movwf	5
  4025  020D  3048               	movlw	72
  4026  020E  00FE               	movwf	btemp
  4027  020F  3000               	movlw	0
  4028  0210  00FF               	movwf	btemp+1
  4029  0211  319D  259B  3181   	fcall	clear_ram0
  4030                           
  4031                           ; Clear objects allocated to BANK10
  4032  0214  3020               	movlw	low __pbssBANK10
  4033  0215  0084               	movwf	4
  4034  0216  3005               	movlw	high __pbssBANK10
  4035  0217  0085               	movwf	5
  4036  0218  3040               	movlw	64
  4037  0219  00FE               	movwf	btemp
  4038  021A  3000               	movlw	0
  4039  021B  00FF               	movwf	btemp+1
  4040  021C  319D  259B  3181   	fcall	clear_ram0
  4041                           
  4042                           ; Initialize objects allocated to BIGRAM
  4043  021F  30AC               	movlw	low __pidataBIGRAM
  4044  0220  0084               	movwf	4
  4045  0221  3082               	movlw	(high __pidataBIGRAM)| (0+128)
  4046  0222  0085               	movwf	5
  4047  0223  306E               	movlw	low (0+9070)
  4048  0224  0086               	movwf	6
  4049  0225  3023               	movlw	high (0+9070)
  4050  0226  0087               	movwf	7
  4051  0227  3002               	movlw	2
  4052  0228  00FF               	movwf	btemp+1
  4053  0229  3082               	movlw	130
  4054  022A  319D  258F  3181   	fcall	init_ram
  4055                           
  4056                           ; Initialize objects allocated to COMMON
  4057  022D  3187  27FF  3181   	fcall	__pidataCOMMON	;fetch initializer
  4058  0230  00FD               	movwf	__pdataCOMMON& (0+127)
  4059                           
  4060                           ; Initialize objects allocated to BANK0
  4061  0231  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
  4062  0234  00E9               	movwf	__pdataBANK0& (0+127)
  4063  0235  3180  2003  3181   	fcall	__pidataBANK0+1	;fetch initializer
  4064  0238  00EA               	movwf	(__pdataBANK0+1)& (0+127)
  4065                           
  4066                           ; Initialize objects allocated to BANK1
  4067  0239  30C8               	movlw	low __pidataBANK1
  4068  023A  0084               	movwf	4
  4069  023B  309D               	movlw	(high __pidataBANK1)| (0+128)
  4070  023C  0085               	movwf	5
  4071  023D  30C9               	movlw	low __pdataBANK1
  4072  023E  0086               	movwf	6
  4073  023F  3000               	movlw	high __pdataBANK1
  4074  0240  0087               	movwf	7
  4075  0241  3000               	movlw	0
  4076  0242  00FF               	movwf	btemp+1
  4077  0243  3012               	movlw	18
  4078  0244  319D  258F  3181   	fcall	init_ram
  4079                           
  4080                           ; Initialize objects allocated to BANK2
  4081  0247  30DA               	movlw	low __pidataBANK2
  4082  0248  0084               	movwf	4
  4083  0249  309D               	movlw	(high __pidataBANK2)| (0+128)
  4084  024A  0085               	movwf	5
  4085  024B  305A               	movlw	low __pdataBANK2
  4086  024C  0086               	movwf	6
  4087  024D  3001               	movlw	high __pdataBANK2
  4088  024E  0087               	movwf	7
  4089  024F  3000               	movlw	0
  4090  0250  00FF               	movwf	btemp+1
  4091  0251  3015               	movlw	21
  4092  0252  319D  258F  3181   	fcall	init_ram
  4093                           
  4094                           ; Initialize objects allocated to BANK4
  4095  0255  302D               	movlw	low __pidataBANK4
  4096  0256  0084               	movwf	4
  4097  0257  3091               	movlw	(high __pidataBANK4)| (0+128)
  4098  0258  0085               	movwf	5
  4099  0259  3020               	movlw	low __pdataBANK4
  4100  025A  0086               	movwf	6
  4101  025B  3002               	movlw	high __pdataBANK4
  4102  025C  0087               	movwf	7
  4103  025D  3000               	movlw	0
  4104  025E  00FF               	movwf	btemp+1
  4105  025F  303E               	movlw	62
  4106  0260  319D  258F  3181   	fcall	init_ram
  4107                           
  4108                           ; Initialize objects allocated to BANK5
  4109  0263  30EF               	movlw	low __pidataBANK5
  4110  0264  0084               	movwf	4
  4111  0265  3090               	movlw	(high __pidataBANK5)| (0+128)
  4112  0266  0085               	movwf	5
  4113  0267  30A0               	movlw	low __pdataBANK5
  4114  0268  0086               	movwf	6
  4115  0269  3002               	movlw	high __pdataBANK5
  4116  026A  0087               	movwf	7
  4117  026B  3000               	movlw	0
  4118  026C  00FF               	movwf	btemp+1
  4119  026D  303E               	movlw	62
  4120  026E  319D  258F  3181   	fcall	init_ram
  4121                           
  4122                           ; Initialize objects allocated to BANK6
  4123  0271  30B1               	movlw	low __pidataBANK6
  4124  0272  0084               	movwf	4
  4125  0273  3090               	movlw	(high __pidataBANK6)| (0+128)
  4126  0274  0085               	movwf	5
  4127  0275  3020               	movlw	low __pdataBANK6
  4128  0276  0086               	movwf	6
  4129  0277  3003               	movlw	high __pdataBANK6
  4130  0278  0087               	movwf	7
  4131  0279  3000               	movlw	0
  4132  027A  00FF               	movwf	btemp+1
  4133  027B  303E               	movlw	62
  4134  027C  319D  258F  3181   	fcall	init_ram
  4135                           
  4136                           ; Initialize objects allocated to BANK7
  4137  027F  3073               	movlw	low __pidataBANK7
  4138  0280  0084               	movwf	4
  4139  0281  3090               	movlw	(high __pidataBANK7)| (0+128)
  4140  0282  0085               	movwf	5
  4141  0283  30A0               	movlw	low __pdataBANK7
  4142  0284  0086               	movwf	6
  4143  0285  3003               	movlw	high __pdataBANK7
  4144  0286  0087               	movwf	7
  4145  0287  3000               	movlw	0
  4146  0288  00FF               	movwf	btemp+1
  4147  0289  303E               	movlw	62
  4148  028A  319D  258F  3181   	fcall	init_ram
  4149                           
  4150                           ; Initialize objects allocated to BANK8
  4151  028D  30EE               	movlw	low __pidataBANK8
  4152  028E  0084               	movwf	4
  4153  028F  3093               	movlw	(high __pidataBANK8)| (0+128)
  4154  0290  0085               	movwf	5
  4155  0291  3020               	movlw	low __pdataBANK8
  4156  0292  0086               	movwf	6
  4157  0293  3004               	movlw	high __pdataBANK8
  4158  0294  0087               	movwf	7
  4159  0295  3000               	movlw	0
  4160  0296  00FF               	movwf	btemp+1
  4161  0297  3050               	movlw	80
  4162  0298  319D  258F  3181   	fcall	init_ram
  4163                           
  4164                           ; Initialize objects allocated to BANK9
  4165  029B  309E               	movlw	low __pidataBANK9
  4166  029C  0084               	movwf	4
  4167  029D  3093               	movlw	(high __pidataBANK9)| (0+128)
  4168  029E  0085               	movwf	5
  4169  029F  30A0               	movlw	low __pdataBANK9
  4170  02A0  0086               	movwf	6
  4171  02A1  3004               	movlw	high __pdataBANK9
  4172  02A2  0087               	movwf	7
  4173  02A3  3000               	movlw	0
  4174  02A4  00FF               	movwf	btemp+1
  4175  02A5  3050               	movlw	80
  4176  02A6  319D  258F         	fcall	init_ram
  4177  02A8                     end_of_initialization:	
  4178                           ;End of C runtime variable initialization code
  4179                           
  4180  02A8                     __end_of__initialization:	
  4181  02A8  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4182  02A9  0020               	movlb	0
  4183  02AA  318A  2A70         	ljmp	_main	;jump to C main() function
  4184                           
  4185                           	psect	dataCOMMON
  4186  007D                     __pdataCOMMON:	
  4187  007D                     _switchBypass_state:	
  4188  007D                     	ds	1
  4189                           
  4190                           	psect	bssBANK0
  4191  006B                     __pbssBANK0:	
  4192  006B                     _doubleTap_state:	
  4193  006B                     	ds	1
  4194                           
  4195                           	psect	dataBANK0
  4196  0069                     __pdataBANK0:	
  4197  0069                     _feedback_state:	
  4198  0069                     	ds	1
  4199  006A                     _longTap_state:	
  4200  006A                     	ds	1
  4201                           
  4202                           	psect	bssBANK1
  4203  00DB                     __pbssBANK1:	
  4204  00DB                     _sub_timer:	
  4205  00DB                     	ds	4
  4206  00DF                     _tap_timer:	
  4207  00DF                     	ds	4
  4208  00E3                     _timer:	
  4209  00E3                     	ds	4
  4210  00E7                     _mod_counter:	
  4211  00E7                     	ds	2
  4212  00E9                     _feedback_start:	
  4213  00E9                     	ds	1
  4214  00EA                     _suspend_blink:	
  4215  00EA                     	ds	1
  4216  00EB                     _switchTap_pressed:	
  4217  00EB                     	ds	1
  4218                           
  4219                           	psect	dataBANK1
  4220  00C9                     __pdataBANK1:	
  4221  00C9                     _baseline_delay_time:	
  4222  00C9                     	ds	4
  4223  00CD                     _delay_time:	
  4224  00CD                     	ds	4
  4225  00D1                     _bottom_push_state:	
  4226  00D1                     	ds	2
  4227  00D3                     _knob1_prev:	
  4228  00D3                     	ds	2
  4229  00D5                     _long_press_limit:	
  4230  00D5                     	ds	2
  4231  00D7                     _top_push_state:	
  4232  00D7                     	ds	2
  4233  00D9                     _blink_rate:	
  4234  00D9                     	ds	1
  4235  00DA                     _num_taps:	
  4236  00DA                     	ds	1
  4237                           
  4238                           	psect	bssBANK2
  4239  0120                     __pbssBANK2:	
  4240  0120                     _ledState:	
  4241  0120                     	ds	4
  4242  0124                     _mod_timer:	
  4243  0124                     	ds	4
  4244  0128                     _SPI_Value:	
  4245  0128                     	ds	2
  4246  012A                     _adjust_sub_delay:	
  4247  012A                     	ds	2
  4248  012C                     _debounce_bypass:	
  4249  012C                     	ds	2
  4250  012E                     _debounce_count:	
  4251  012E                     	ds	2
  4252  0130                     _debounce_mode1:	
  4253  0130                     	ds	2
  4254  0132                     _debounce_mode2:	
  4255  0132                     	ds	2
  4256  0134                     _delay_counter:	
  4257  0134                     	ds	2
  4258  0136                     _delayfound:	
  4259  0136                     	ds	2
  4260  0138                     _feedback_timer:	
  4261  0138                     	ds	2
  4262  013A                     _knob_1_pos:	
  4263  013A                     	ds	2
  4264  013C                     _knob_2_pos:	
  4265  013C                     	ds	2
  4266  013E                     _knob_3_pos:	
  4267  013E                     	ds	2
  4268  0140                     _knob_4_pos:	
  4269  0140                     	ds	2
  4270  0142                     _knob_5_pos:	
  4271  0142                     	ds	2
  4272  0144                     _longTap_timer:	
  4273  0144                     	ds	2
  4274  0146                     _mod_delay_time_bak:	
  4275  0146                     	ds	2
  4276  0148                     _mod_value:	
  4277  0148                     	ds	2
  4278  014A                     _reset_sub_delay:	
  4279  014A                     	ds	2
  4280  014C                     _switchBypass_pressed:	
  4281  014C                     	ds	2
  4282  014E                     _switchBypass_toggle:	
  4283  014E                     	ds	2
  4284  0150                     _bottomTactile_pressed:	
  4285  0150                     	ds	1
  4286  0151                     _bypass_turning_on:	
  4287  0151                     	ds	1
  4288  0152                     _iCnt:	
  4289  0152                     	ds	1
  4290  0153                     _longTap_start:	
  4291  0153                     	ds	1
  4292  0154                     _mode1_state:	
  4293  0154                     	ds	1
  4294  0155                     _mode2_state:	
  4295  0155                     	ds	1
  4296  0156                     _preset_blink:	
  4297  0156                     	ds	1
  4298  0157                     _preset_programmning_on:	
  4299  0157                     	ds	1
  4300  0158                     _switchTap_down:	
  4301  0158                     	ds	1
  4302  0159                     _topTactile_pressed:	
  4303  0159                     	ds	1
  4304                           
  4305                           	psect	dataBANK2
  4306  015A                     __pdataBANK2:	
  4307  015A                     _blink_delay:	
  4308  015A                     	ds	2
  4309  015C                     _delay_time_changed:	
  4310  015C                     	ds	2
  4311  015E                     _knob2_prev:	
  4312  015E                     	ds	2
  4313  0160                     _knob3_prev:	
  4314  0160                     	ds	2
  4315  0162                     _knob4_prev:	
  4316  0162                     	ds	2
  4317  0164                     _knob5_prev:	
  4318  0164                     	ds	2
  4319  0166                     _mod_delay_time:	
  4320  0166                     	ds	2
  4321  0168                     _switchBypass_up:	
  4322  0168                     	ds	2
  4323  016A                     _tap_iteration:	
  4324  016A                     	ds	2
  4325  016C                     _blink_state:	
  4326  016C                     	ds	1
  4327  016D                     _currentBypassState:	
  4328  016D                     	ds	1
  4329  016E                     _switchTap_state:	
  4330  016E                     	ds	1
  4331                           
  4332                           	psect	bssBANK3
  4333  01A0                     __pbssBANK3:	
  4334  01A0                     _tap:	
  4335  01A0                     	ds	44
  4336  01CC                     _tap_history:	
  4337  01CC                     	ds	20
  4338  01E0                     _tap_total:	
  4339  01E0                     	ds	4
  4340  01E4                     _test_timer:	
  4341  01E4                     	ds	4
  4342                           
  4343                           	psect	dataBANK4
  4344  0220                     __pdataBANK4:	
  4345  0220                     _mod2:	
  4346  0220                     	ds	62
  4347                           
  4348                           	psect	dataBANK5
  4349  02A0                     __pdataBANK5:	
  4350  02A0                     _mod3:	
  4351  02A0                     	ds	62
  4352                           
  4353                           	psect	dataBANK6
  4354  0320                     __pdataBANK6:	
  4355  0320                     _mod4:	
  4356  0320                     	ds	62
  4357                           
  4358                           	psect	dataBANK7
  4359  03A0                     __pdataBANK7:	
  4360  03A0                     _mod1:	
  4361  03A0                     	ds	62
  4362                           
  4363                           	psect	dataBANK8
  4364  0420                     __pdataBANK8:	
  4365  0420                     _B25k:	
  4366  0420                     	ds	80
  4367                           
  4368                           	psect	dataBANK9
  4369  04A0                     __pdataBANK9:	
  4370  04A0                     _iB25k:	
  4371  04A0                     	ds	80
  4372                           
  4373                           	psect	bssBANK10
  4374  0520                     __pbssBANK10:	
  4375  0520                     _myBuf:	
  4376  0520                     	ds	64
  4377                           
  4378                           	psect	clrtext
  4379  1D9B                     clear_ram0:	
  4380                           ;	Called with FSR0 containing the base address, and
  4381                           ;	btemp/btemp+1 has the size to clear
  4382                           
  4383  1D9B  0064               	clrwdt	;clear the watchdog before getting into this loop
  4384  1D9C                     clrloop0:	
  4385  1D9C  0180               	clrf	0	;clear RAM location pointed to by FSR
  4386  1D9D  3101               	addfsr 0,1
  4387  1D9E  3001               	movlw	1
  4388  1D9F  02FE               	subwf	126,f
  4389  1DA0  3000               	movlw	0
  4390  1DA1  3BFF               	subwfb	127,f
  4391  1DA2  087F               	movf	127,w
  4392  1DA3  047E               	iorwf	126,w
  4393  1DA4  1903               	btfsc	3,2
  4394  1DA5  3400               	retlw	0	;all done for this memory range, return
  4395  1DA6  2D9C               	goto	clrloop0	;have we reached the end yet?
  4396                           
  4397                           	psect	inittext
  4398  1D8F                     init_ram:	
  4399  1D8F  00FE               	movwf	126
  4400  1D90                     initloop:	
  4401  1D90  0012               	moviw fsr0++
  4402  1D91  001E               	movwi fsr1++
  4403  1D92  3001               	movlw	1
  4404  1D93  02FE               	subwf	126,f
  4405  1D94  3000               	movlw	0
  4406  1D95  3BFF               	subwfb	127,f
  4407  1D96  087F               	movf	127,w
  4408  1D97  047E               	iorwf	126,w
  4409  1D98  1903               	btfsc	3,2
  4410  1D99  3400               	retlw	0
  4411  1D9A  2D90               	goto	initloop
  4412                           
  4413                           	psect	cstackBANK3
  4414  01E8                     __pcstackBANK3:	
  4415  01E8                     main@x:	
  4416                           
  4417                           ; 2 bytes @ 0x0
  4418  01E8                     	ds	2
  4419  01EA                     main@i:	
  4420                           
  4421                           ; 2 bytes @ 0x2
  4422  01EA                     	ds	2
  4423  01EC                     main@i_405:	
  4424                           
  4425                           ; 2 bytes @ 0x4
  4426  01EC                     	ds	2
  4427  01EE                     main@adjusted_pot_value:	
  4428                           
  4429                           ; 2 bytes @ 0x6
  4430  01EE                     	ds	2
  4431                           
  4432                           	psect	cstackBANK1
  4433  00A0                     __pcstackBANK1:	
  4434  00A0                     ?___fttol:	
  4435  00A0                     ___fttol@f1:	
  4436                           ; 4 bytes @ 0x0
  4437                           
  4438                           
  4439                           ; 3 bytes @ 0x0
  4440  00A0                     	ds	4
  4441  00A4                     ??___fttol:	
  4442                           
  4443                           ; 1 bytes @ 0x4
  4444  00A4                     	ds	4
  4445  00A8                     ___fttol@sign1:	
  4446                           
  4447                           ; 1 bytes @ 0x8
  4448  00A8                     	ds	1
  4449  00A9                     ___fttol@lval:	
  4450                           
  4451                           ; 4 bytes @ 0x9
  4452  00A9                     	ds	4
  4453  00AD                     ___fttol@exp1:	
  4454                           
  4455                           ; 1 bytes @ 0xD
  4456  00AD                     	ds	1
  4457  00AE                     ?_set_subdivision:	
  4458  00AE                     set_subdivision@x:	
  4459                           ; 2 bytes @ 0xE
  4460                           
  4461                           
  4462                           ; 2 bytes @ 0xE
  4463  00AE                     	ds	2
  4464  00B0                     set_subdivision@y:	
  4465                           
  4466                           ; 2 bytes @ 0x10
  4467  00B0                     	ds	2
  4468  00B2                     ??_set_subdivision:	
  4469                           
  4470                           ; 1 bytes @ 0x12
  4471  00B2                     	ds	3
  4472  00B5                     set_subdivision@tmpX:	
  4473                           
  4474                           ; 2 bytes @ 0x15
  4475  00B5                     	ds	2
  4476  00B7                     set_subdivision@scalar:	
  4477                           
  4478                           ; 3 bytes @ 0x17
  4479  00B7                     	ds	3
  4480  00BA                     ??_main:	
  4481                           
  4482                           ; 1 bytes @ 0x1A
  4483  00BA                     	ds	15
  4484                           
  4485                           	psect	cstackCOMMON
  4486  0070                     __pcstackCOMMON:	
  4487  0070                     ?_ConfigureOscillator:	
  4488  0070                     ?_InitApp:	
  4489                           ; 1 bytes @ 0x0
  4490                           
  4491  0070                     ?_InitializeTaps:	
  4492                           ; 1 bytes @ 0x0
  4493                           
  4494  0070                     ?_initSwitchBypass:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0070                     ?_ReadSavedSettings:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0070                     ?_read_bottom_tactile:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0070                     ?_read_top_tactile:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0070                     ?_update_mode:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0070                     ?_showBootSequence:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0070                     ?_updateSwitchBypass:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0070                     ?_updateSwitchTap:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0070                     ?_init_adc:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0070                     ?_init_pwm:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  0070                     ?_init_timer2:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0070                     ?_init_timer0:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0070                     ?_getCurrentLEDState:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_star_tactiles:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_solidring_tactiles:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_restoreLEDState:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_isr:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_main:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?i1_set_leds_top:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     i1set_leds_top@x:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554                           
  4555                           ; 2 bytes @ 0x0
  4556  0070                     	ds	2
  4557  0072                     i1set_leds_top@ledState:	
  4558                           
  4559                           ; 2 bytes @ 0x2
  4560  0072                     	ds	2
  4561  0074                     ??_isr:	
  4562  0074                     ??i1_set_leds_top:	
  4563                           ; 1 bytes @ 0x4
  4564                           
  4565                           
  4566                           ; 1 bytes @ 0x4
  4567  0074                     	ds	9
  4568                           
  4569                           	psect	cstackBANK0
  4570  0020                     __pcstackBANK0:	
  4571  0020                     isr@tmpSubDelay:	
  4572                           
  4573                           ; 2 bytes @ 0x0
  4574  0020                     	ds	2
  4575  0022                     ?_set_leds_top:	
  4576  0022                     ??_ConfigureOscillator:	
  4577                           ; 1 bytes @ 0x2
  4578                           
  4579  0022                     ??_InitApp:	
  4580                           ; 1 bytes @ 0x2
  4581                           
  4582  0022                     ??_InitializeTaps:	
  4583                           ; 1 bytes @ 0x2
  4584                           
  4585  0022                     ??_update_mode:	
  4586                           ; 1 bytes @ 0x2
  4587                           
  4588  0022                     ??_init_adc:	
  4589                           ; 1 bytes @ 0x2
  4590                           
  4591  0022                     ??_init_pwm:	
  4592                           ; 1 bytes @ 0x2
  4593                           
  4594  0022                     ??_init_timer2:	
  4595                           ; 1 bytes @ 0x2
  4596                           
  4597  0022                     ??_init_timer0:	
  4598                           ; 1 bytes @ 0x2
  4599                           
  4600  0022                     ?_set_leds_bottom:	
  4601                           ; 1 bytes @ 0x2
  4602                           
  4603  0022                     ??_getCurrentLEDState:	
  4604                           ; 1 bytes @ 0x2
  4605                           
  4606  0022                     ??_restoreLEDState:	
  4607                           ; 1 bytes @ 0x2
  4608                           
  4609  0022                     ?_setFeedbackState:	
  4610                           ; 1 bytes @ 0x2
  4611                           
  4612  0022                     ?_setLongTapState:	
  4613                           ; 1 bytes @ 0x2
  4614                           
  4615  0022                     ?_updateSwitchBypassState:	
  4616                           ; 1 bytes @ 0x2
  4617                           
  4618  0022                     ?_adc_convert:	
  4619                           ; 1 bytes @ 0x2
  4620                           
  4621  0022                     ?_FLASH_ReadWord:	
  4622                           ; 2 bytes @ 0x2
  4623                           
  4624  0022                     ?_getSwitchBypassState:	
  4625                           ; 2 bytes @ 0x2
  4626                           
  4627  0022                     ?___wmul:	
  4628                           ; 2 bytes @ 0x2
  4629                           
  4630  0022                     ?___awdiv:	
  4631                           ; 2 bytes @ 0x2
  4632                           
  4633  0022                     ?___ftpack:	
  4634                           ; 2 bytes @ 0x2
  4635                           
  4636  0022                     ?___ftneg:	
  4637                           ; 3 bytes @ 0x2
  4638                           
  4639  0022                     ?___lmul:	
  4640                           ; 3 bytes @ 0x2
  4641                           
  4642  0022                     FLASH_ReadWord@flashAddr:	
  4643                           ; 4 bytes @ 0x2
  4644                           
  4645  0022                     set_leds_top@x:	
  4646                           ; 2 bytes @ 0x2
  4647                           
  4648  0022                     set_leds_bottom@x:	
  4649                           ; 2 bytes @ 0x2
  4650                           
  4651  0022                     updateSwitchBypassState@state:	
  4652                           ; 2 bytes @ 0x2
  4653                           
  4654  0022                     setFeedbackState@f_state:	
  4655                           ; 2 bytes @ 0x2
  4656                           
  4657  0022                     setLongTapState@f_state:	
  4658                           ; 2 bytes @ 0x2
  4659                           
  4660  0022                     ___wmul@multiplier:	
  4661                           ; 2 bytes @ 0x2
  4662                           
  4663  0022                     ___awdiv@divisor:	
  4664                           ; 2 bytes @ 0x2
  4665                           
  4666  0022                     ___ftpack@arg:	
  4667                           ; 2 bytes @ 0x2
  4668                           
  4669  0022                     ___ftneg@f1:	
  4670                           ; 3 bytes @ 0x2
  4671                           
  4672  0022                     ___lmul@multiplier:	
  4673                           ; 3 bytes @ 0x2
  4674                           
  4675                           
  4676                           ; 4 bytes @ 0x2
  4677  0022                     	ds	1
  4678  0023                     InitializeTaps@itap:	
  4679                           
  4680                           ; 2 bytes @ 0x3
  4681  0023                     	ds	1
  4682  0024                     ??_adc_convert:	
  4683  0024                     ??_FLASH_ReadWord:	
  4684                           ; 1 bytes @ 0x4
  4685                           
  4686  0024                     ??_set_leds_bottom:	
  4687                           ; 1 bytes @ 0x4
  4688                           
  4689  0024                     ??_setFeedbackState:	
  4690                           ; 1 bytes @ 0x4
  4691                           
  4692  0024                     ??_setLongTapState:	
  4693                           ; 1 bytes @ 0x4
  4694                           
  4695  0024                     ??_updateSwitchBypassState:	
  4696                           ; 1 bytes @ 0x4
  4697                           
  4698  0024                     ??_getSwitchBypassState:	
  4699                           ; 1 bytes @ 0x4
  4700                           
  4701  0024                     FLASH_ReadWord@GIEBitValue:	
  4702                           ; 1 bytes @ 0x4
  4703                           
  4704  0024                     set_leds_top@ledState:	
  4705                           ; 1 bytes @ 0x4
  4706                           
  4707  0024                     ___wmul@multiplicand:	
  4708                           ; 2 bytes @ 0x4
  4709                           
  4710  0024                     ___awdiv@dividend:	
  4711                           ; 2 bytes @ 0x4
  4712                           
  4713                           
  4714                           ; 2 bytes @ 0x4
  4715  0024                     	ds	1
  4716  0025                     ??___ftneg:	
  4717  0025                     adc_convert@channel:	
  4718                           ; 1 bytes @ 0x5
  4719                           
  4720  0025                     ___ftpack@exp:	
  4721                           ; 1 bytes @ 0x5
  4722                           
  4723                           
  4724                           ; 1 bytes @ 0x5
  4725  0025                     	ds	1
  4726  0026                     ??_set_leds_top:	
  4727  0026                     ??_ReadSavedSettings:	
  4728                           ; 1 bytes @ 0x6
  4729                           
  4730  0026                     ??___wmul:	
  4731                           ; 1 bytes @ 0x6
  4732                           
  4733  0026                     ??___awdiv:	
  4734                           ; 1 bytes @ 0x6
  4735                           
  4736  0026                     ___ftpack@sign:	
  4737                           ; 1 bytes @ 0x6
  4738                           
  4739  0026                     ___wmul@product:	
  4740                           ; 1 bytes @ 0x6
  4741                           
  4742  0026                     ___lmul@multiplicand:	
  4743                           ; 2 bytes @ 0x6
  4744                           
  4745                           
  4746                           ; 4 bytes @ 0x6
  4747  0026                     	ds	1
  4748  0027                     ??___ftpack:	
  4749  0027                     ___awdiv@counter:	
  4750                           ; 1 bytes @ 0x7
  4751                           
  4752                           
  4753                           ; 1 bytes @ 0x7
  4754  0027                     	ds	1
  4755  0028                     ?___aldiv:	
  4756  0028                     ___awdiv@sign:	
  4757                           ; 4 bytes @ 0x8
  4758                           
  4759  0028                     ___aldiv@divisor:	
  4760                           ; 1 bytes @ 0x8
  4761                           
  4762                           
  4763                           ; 4 bytes @ 0x8
  4764  0028                     	ds	1
  4765  0029                     ___awdiv@quotient:	
  4766                           
  4767                           ; 2 bytes @ 0x9
  4768  0029                     	ds	1
  4769  002A                     ??___lmul:	
  4770  002A                     ?___altoft:	
  4771                           ; 1 bytes @ 0xA
  4772                           
  4773  002A                     ?___awtoft:	
  4774                           ; 3 bytes @ 0xA
  4775                           
  4776  002A                     ?___ftadd:	
  4777                           ; 3 bytes @ 0xA
  4778                           
  4779  002A                     ___awtoft@c:	
  4780                           ; 3 bytes @ 0xA
  4781                           
  4782  002A                     ___ftadd@f1:	
  4783                           ; 2 bytes @ 0xA
  4784                           
  4785  002A                     ___lmul@product:	
  4786                           ; 3 bytes @ 0xA
  4787                           
  4788  002A                     ___altoft@c:	
  4789                           ; 4 bytes @ 0xA
  4790                           
  4791                           
  4792                           ; 4 bytes @ 0xA
  4793  002A                     	ds	2
  4794  002C                     ___aldiv@dividend:	
  4795                           
  4796                           ; 4 bytes @ 0xC
  4797  002C                     	ds	1
  4798  002D                     ??___awtoft:	
  4799  002D                     ___ftadd@f2:	
  4800                           ; 1 bytes @ 0xD
  4801                           
  4802                           
  4803                           ; 3 bytes @ 0xD
  4804  002D                     	ds	1
  4805  002E                     ?_wait_ms:	
  4806  002E                     ??___altoft:	
  4807                           ; 1 bytes @ 0xE
  4808                           
  4809  002E                     wait_ms@timeSec:	
  4810                           ; 1 bytes @ 0xE
  4811                           
  4812                           
  4813                           ; 2 bytes @ 0xE
  4814  002E                     	ds	1
  4815  002F                     ___awtoft@sign:	
  4816                           
  4817                           ; 1 bytes @ 0xF
  4818  002F                     	ds	1
  4819  0030                     ??_wait_ms:	
  4820  0030                     ??___aldiv:	
  4821                           ; 1 bytes @ 0x10
  4822                           
  4823  0030                     ??___ftadd:	
  4824                           ; 1 bytes @ 0x10
  4825                           
  4826  0030                     ___altoft@exp:	
  4827                           ; 1 bytes @ 0x10
  4828                           
  4829  0030                     wait_ms@timemsl:	
  4830                           ; 1 bytes @ 0x10
  4831                           
  4832                           
  4833                           ; 4 bytes @ 0x10
  4834  0030                     	ds	1
  4835  0031                     ___aldiv@counter:	
  4836  0031                     ___altoft@sign:	
  4837                           ; 1 bytes @ 0x11
  4838                           
  4839                           
  4840                           ; 1 bytes @ 0x11
  4841  0031                     	ds	1
  4842  0032                     ___aldiv@sign:	
  4843                           
  4844                           ; 1 bytes @ 0x12
  4845  0032                     	ds	1
  4846  0033                     ___aldiv@quotient:	
  4847                           
  4848                           ; 4 bytes @ 0x13
  4849  0033                     	ds	1
  4850  0034                     ??_read_bottom_tactile:	
  4851  0034                     ??_read_top_tactile:	
  4852                           ; 1 bytes @ 0x14
  4853                           
  4854  0034                     ??_star_tactiles:	
  4855                           ; 1 bytes @ 0x14
  4856                           
  4857  0034                     ??_solidring_tactiles:	
  4858                           ; 1 bytes @ 0x14
  4859                           
  4860  0034                     ?_setSwitchBypassState:	
  4861                           ; 1 bytes @ 0x14
  4862                           
  4863  0034                     ?_setDoublePressState:	
  4864                           ; 1 bytes @ 0x14
  4865                           
  4866  0034                     ___ftadd@sign:	
  4867                           ; 1 bytes @ 0x14
  4868                           
  4869  0034                     setSwitchBypassState@f_state:	
  4870                           ; 1 bytes @ 0x14
  4871                           
  4872  0034                     setDoublePressState@f_state:	
  4873                           ; 2 bytes @ 0x14
  4874                           
  4875                           
  4876                           ; 2 bytes @ 0x14
  4877  0034                     	ds	1
  4878  0035                     ___ftadd@exp2:	
  4879                           
  4880                           ; 1 bytes @ 0x15
  4881  0035                     	ds	1
  4882  0036                     ??_setSwitchBypassState:	
  4883  0036                     ??_setDoublePressState:	
  4884                           ; 1 bytes @ 0x16
  4885                           
  4886  0036                     star_tactiles@reverse:	
  4887                           ; 1 bytes @ 0x16
  4888                           
  4889  0036                     solidring_tactiles@ring_delay:	
  4890                           ; 1 bytes @ 0x16
  4891                           
  4892  0036                     ___ftadd@exp1:	
  4893                           ; 1 bytes @ 0x16
  4894                           
  4895                           
  4896                           ; 1 bytes @ 0x16
  4897  0036                     	ds	1
  4898  0037                     ?_modulation:	
  4899  0037                     ?___ftmul:	
  4900                           ; 2 bytes @ 0x17
  4901                           
  4902  0037                     modulation@x:	
  4903                           ; 3 bytes @ 0x17
  4904                           
  4905  0037                     star_tactiles@iLed:	
  4906                           ; 2 bytes @ 0x17
  4907                           
  4908  0037                     ___ftmul@f1:	
  4909                           ; 2 bytes @ 0x17
  4910                           
  4911                           
  4912                           ; 3 bytes @ 0x17
  4913  0037                     	ds	1
  4914  0038                     ??_initSwitchBypass:	
  4915  0038                     ??_updateSwitchBypass:	
  4916                           ; 1 bytes @ 0x18
  4917                           
  4918  0038                     ??_updateSwitchTap:	
  4919                           ; 1 bytes @ 0x18
  4920                           
  4921  0038                     initSwitchBypass@initState:	
  4922                           ; 1 bytes @ 0x18
  4923                           
  4924                           
  4925                           ; 2 bytes @ 0x18
  4926  0038                     	ds	1
  4927  0039                     modulation@y:	
  4928  0039                     star_tactiles@iLed_1457:	
  4929                           ; 2 bytes @ 0x19
  4930                           
  4931                           
  4932                           ; 2 bytes @ 0x19
  4933  0039                     	ds	1
  4934  003A                     ___ftmul@f2:	
  4935                           
  4936                           ; 3 bytes @ 0x1A
  4937  003A                     	ds	1
  4938  003B                     ??_showBootSequence:	
  4939  003B                     ??_modulation:	
  4940                           ; 1 bytes @ 0x1B
  4941                           
  4942                           
  4943                           ; 1 bytes @ 0x1B
  4944  003B                     	ds	2
  4945  003D                     ??___ftmul:	
  4946                           
  4947                           ; 1 bytes @ 0x1D
  4948  003D                     	ds	1
  4949  003E                     updateSwitchTap@tapCntDivisor:	
  4950                           
  4951                           ; 2 bytes @ 0x1E
  4952  003E                     	ds	2
  4953  0040                     updateSwitchTap@iCnt:	
  4954                           
  4955                           ; 1 bytes @ 0x20
  4956  0040                     	ds	1
  4957  0041                     ___ftmul@exp:	
  4958                           
  4959                           ; 1 bytes @ 0x21
  4960  0041                     	ds	1
  4961  0042                     ___ftmul@f3_as_product:	
  4962                           
  4963                           ; 3 bytes @ 0x22
  4964  0042                     	ds	3
  4965  0045                     ___ftmul@cntr:	
  4966                           
  4967                           ; 1 bytes @ 0x25
  4968  0045                     	ds	1
  4969  0046                     ___ftmul@sign:	
  4970                           
  4971                           ; 1 bytes @ 0x26
  4972  0046                     	ds	1
  4973  0047                     ?___ftdiv:	
  4974  0047                     ___ftdiv@f2:	
  4975                           ; 3 bytes @ 0x27
  4976                           
  4977                           
  4978                           ; 3 bytes @ 0x27
  4979  0047                     	ds	3
  4980  004A                     ___ftdiv@f1:	
  4981                           
  4982                           ; 3 bytes @ 0x2A
  4983  004A                     	ds	3
  4984  004D                     ??___ftdiv:	
  4985                           
  4986                           ; 1 bytes @ 0x2D
  4987  004D                     	ds	4
  4988  0051                     ___ftdiv@cntr:	
  4989                           
  4990                           ; 1 bytes @ 0x31
  4991  0051                     	ds	1
  4992  0052                     ___ftdiv@f3:	
  4993                           
  4994                           ; 3 bytes @ 0x32
  4995  0052                     	ds	3
  4996  0055                     ___ftdiv@exp:	
  4997                           
  4998                           ; 1 bytes @ 0x35
  4999  0055                     	ds	1
  5000  0056                     ___ftdiv@sign:	
  5001                           
  5002                           ; 1 bytes @ 0x36
  5003  0056                     	ds	1
  5004  0057                     ?_map:	
  5005  0057                     map@x:	
  5006                           ; 3 bytes @ 0x37
  5007                           
  5008                           
  5009                           ; 3 bytes @ 0x37
  5010  0057                     	ds	3
  5011  005A                     map@in_min:	
  5012                           
  5013                           ; 3 bytes @ 0x3A
  5014  005A                     	ds	3
  5015  005D                     map@in_max:	
  5016                           
  5017                           ; 3 bytes @ 0x3D
  5018  005D                     	ds	3
  5019  0060                     map@out_min:	
  5020                           
  5021                           ; 3 bytes @ 0x40
  5022  0060                     	ds	3
  5023  0063                     map@out_max:	
  5024                           
  5025                           ; 3 bytes @ 0x43
  5026  0063                     	ds	3
  5027  0066                     ??_map:	
  5028  0066                     _map$2176:	
  5029                           ; 1 bytes @ 0x46
  5030                           
  5031                           
  5032                           ; 3 bytes @ 0x46
  5033  0066                     	ds	3
  5034                           
  5035                           	psect	maintext
  5036  0A70                     __pmaintext:	
  5037 ;;
  5038 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  5039 ;;
  5040 ;; *************** function _main *****************
  5041 ;; Defined at:
  5042 ;;		line 82 in file "main.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  adjusted_pot    2    6[BANK3 ] int 
  5047 ;;  i               2    4[BANK3 ] int 
  5048 ;;  i               2    2[BANK3 ] int 
  5049 ;;  x               2    0[BANK3 ] int 
  5050 ;; Return value:  Size  Location     Type
  5051 ;;                  1    wreg      void 
  5052 ;; Registers used:
  5053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5054 ;; Tracked objects:
  5055 ;;		On entry : B1F/0
  5056 ;;		On exit  : 0/0
  5057 ;;		Unchanged: 0/0
  5058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5060 ;;      Locals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5061 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5062 ;;      Totals:         0       0      15       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5063 ;;Total ram usage:       23 bytes
  5064 ;; Hardware stack levels required when called:    6
  5065 ;; This function calls:
  5066 ;;		_ConfigureOscillator
  5067 ;;		_InitApp
  5068 ;;		_InitializeTaps
  5069 ;;		_ReadSavedSettings
  5070 ;;		___altoft
  5071 ;;		___awdiv
  5072 ;;		___awtoft
  5073 ;;		___ftdiv
  5074 ;;		___fttol
  5075 ;;		_adc_convert
  5076 ;;		_initSwitchBypass
  5077 ;;		_map
  5078 ;;		_modulation
  5079 ;;		_read_bottom_tactile
  5080 ;;		_read_top_tactile
  5081 ;;		_set_subdivision
  5082 ;;		_showBootSequence
  5083 ;;		_updateSwitchBypass
  5084 ;;		_updateSwitchTap
  5085 ;;		_update_mode
  5086 ;; This function is called by:
  5087 ;;		Startup code after reset
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           
  5092                           ;psect for function _main
  5093  0A70                     _main:	
  5094                           
  5095                           ;main.c: 83: ConfigureOscillator();
  5096                           
  5097                           ;incstack = 0
  5098                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5099  0A70  319D  2574  318A   	fcall	_ConfigureOscillator
  5100                           
  5101                           ;main.c: 84: InitApp();
  5102  0A73  319F  2728  318A   	fcall	_InitApp
  5103                           
  5104                           ;main.c: 86: PORTEbits.RE0 = 1;
  5105  0A76  0020               	movlb	0	; select bank0
  5106  0A77  1410               	bsf	16,0	;volatile
  5107                           
  5108                           ;main.c: 87: PORTEbits.RE1 = 1;
  5109  0A78  1490               	bsf	16,1	;volatile
  5110                           
  5111                           ;main.c: 88: PORTDbits.RD6 = 1;
  5112  0A79  170F               	bsf	15,6	;volatile
  5113                           
  5114                           ;main.c: 89: PORTDbits.RD5 = 1;
  5115  0A7A  168F               	bsf	15,5	;volatile
  5116                           
  5117                           ;main.c: 90: PORTCbits.RC0 = 1;
  5118  0A7B  140E               	bsf	14,0	;volatile
  5119                           
  5120                           ;main.c: 91: PORTDbits.RD7 = 1;
  5121  0A7C  178F               	bsf	15,7	;volatile
  5122                           
  5123                           ;main.c: 93: InitializeTaps();
  5124  0A7D  319E  26AA  318A   	fcall	_InitializeTaps
  5125                           
  5126                           ;main.c: 94: initSwitchBypass();
  5127  0A80  319D  25A7  318A   	fcall	_initSwitchBypass
  5128                           
  5129                           ;main.c: 97: ReadSavedSettings();
  5130  0A83  3193  2301  318A   	fcall	_ReadSavedSettings
  5131                           
  5132                           ;main.c: 99: int x = mod1[1];
  5133  0A86  0027               	movlb	7	; select bank7
  5134  0A87  0823               	movf	((_mod1+1)^(0+896)+2),w
  5135  0A88  0023               	movlb	3	; select bank3
  5136  0A89  00E9               	movwf	(main@x+1)^(0+384)
  5137  0A8A  0027               	movlb	7	; select bank7
  5138  0A8B  0822               	movf	(_mod1^(0+896)+2),w
  5139  0A8C  0023               	movlb	3	; select bank3
  5140  0A8D  00E8               	movwf	main@x^(0+384)
  5141                           
  5142                           ;main.c: 100: x = mod2[0];
  5143  0A8E  0024               	movlb	4	; select bank4
  5144  0A8F  0821               	movf	(_mod2+1)^(0+512),w
  5145  0A90  0023               	movlb	3	; select bank3
  5146  0A91  00E9               	movwf	(main@x+1)^(0+384)
  5147  0A92  0024               	movlb	4	; select bank4
  5148  0A93  0820               	movf	_mod2^(0+512),w
  5149  0A94  0023               	movlb	3	; select bank3
  5150  0A95  00E8               	movwf	main@x^(0+384)
  5151                           
  5152                           ;main.c: 101: x = mod3[0];
  5153  0A96  0025               	movlb	5	; select bank5
  5154  0A97  0821               	movf	(_mod3+1)^(0+640),w
  5155  0A98  0023               	movlb	3	; select bank3
  5156  0A99  00E9               	movwf	(main@x+1)^(0+384)
  5157  0A9A  0025               	movlb	5	; select bank5
  5158  0A9B  0820               	movf	_mod3^(0+640),w
  5159  0A9C  0023               	movlb	3	; select bank3
  5160  0A9D  00E8               	movwf	main@x^(0+384)
  5161                           
  5162                           ;main.c: 102: x = mod4[0];
  5163  0A9E  0026               	movlb	6	; select bank6
  5164  0A9F  0821               	movf	(_mod4+1)^(0+768),w
  5165  0AA0  0023               	movlb	3	; select bank3
  5166  0AA1  00E9               	movwf	(main@x+1)^(0+384)
  5167  0AA2  0026               	movlb	6	; select bank6
  5168  0AA3  0820               	movf	_mod4^(0+768),w
  5169  0AA4  0023               	movlb	3	; select bank3
  5170  0AA5  00E8               	movwf	main@x^(0+384)
  5171                           
  5172                           ;main.c: 103: x = mod5[0];
  5173  0AA6  3076               	movlw	118
  5174  0AA7  0086               	movwf	6
  5175  0AA8  3025               	movlw	37
  5176  0AA9  0087               	movwf	7
  5177  0AAA  3F40               	moviw [0]fsr1
  5178  0AAB  00E8               	movwf	main@x^(0+384)
  5179  0AAC  3F41               	moviw [1]fsr1
  5180  0AAD  00E9               	movwf	(main@x+1)^(0+384)
  5181  0AAE                     l5828:	
  5182                           ;main.c: 105: while (1) {
  5183                           
  5184                           
  5185                           ;main.c: 106: read_bottom_tactile();
  5186  0AAE  3192  2273  318A   	fcall	_read_bottom_tactile
  5187                           
  5188                           ;main.c: 107: read_top_tactile();
  5189  0AB1  3193  234F  318A   	fcall	_read_top_tactile
  5190                           
  5191                           ;main.c: 110: update_mode();
  5192  0AB4  3191  21EC  318A   	fcall	_update_mode
  5193                           
  5194                           ;main.c: 112: if (PORTDbits.RD7 == 0) {
  5195  0AB7  0020               	movlb	0	; select bank0
  5196  0AB8  1B8F               	btfsc	15,7	;volatile
  5197  0AB9  2AD8               	goto	l5842
  5198                           
  5199                           ;main.c: 113: debounce_mode1++;
  5200  0ABA  3001               	movlw	1
  5201  0ABB  0022               	movlb	2	; select bank2
  5202  0ABC  07B0               	addwf	_debounce_mode1^(0+256),f
  5203  0ABD  3000               	movlw	0
  5204  0ABE  3DB1               	addwfc	(_debounce_mode1+1)^(0+256),f
  5205                           
  5206                           ;main.c: 114: if (debounce_mode1 > 25) {
  5207  0ABF  0831               	movf	(_debounce_mode1+1)^(0+256),w
  5208  0AC0  3A80               	xorlw	128
  5209  0AC1  0021               	movlb	1	; select bank1
  5210  0AC2  00BA               	movwf	??_main^(0+128)
  5211  0AC3  3080               	movlw	128
  5212  0AC4  023A               	subwf	??_main^(0+128),w
  5213  0AC5  1D03               	skipz
  5214  0AC6  2ACA               	goto	u6615
  5215  0AC7  301A               	movlw	26
  5216  0AC8  0022               	movlb	2	; select bank2
  5217  0AC9  0230               	subwf	_debounce_mode1^(0+256),w
  5218  0ACA                     u6615:	
  5219  0ACA  1C03               	skipc
  5220  0ACB  2ADB               	goto	l5844
  5221                           
  5222                           ;main.c: 115: debounce_mode1 = 25;
  5223  0ACC  3019               	movlw	25
  5224  0ACD  0022               	movlb	2	; select bank2
  5225  0ACE  00B0               	movwf	_debounce_mode1^(0+256)
  5226  0ACF  3000               	movlw	0
  5227  0AD0  00B1               	movwf	(_debounce_mode1^(0+256)+1)
  5228                           
  5229                           ;main.c: 119: showBootSequence();
  5230  0AD1  319E  26D0  318A   	fcall	_showBootSequence
  5231  0AD4                     l296:	
  5232                           ;main.c: 122: while (PORTDbits.RD7 == 0) {
  5233                           
  5234  0AD4  0020               	movlb	0	; select bank0
  5235  0AD5  1B8F               	btfsc	15,7	;volatile
  5236  0AD6  2ADB               	goto	l5844
  5237  0AD7  2AD4               	goto	l296
  5238  0AD8                     l5842:	
  5239                           ;main.c: 123: }
  5240                           ;main.c: 124: }
  5241                           ;main.c: 125: } else {
  5242                           
  5243                           
  5244                           ;main.c: 126: debounce_mode1 = 0;
  5245  0AD8  0022               	movlb	2	; select bank2
  5246  0AD9  01B0               	clrf	_debounce_mode1^(0+256)
  5247  0ADA  01B1               	clrf	(_debounce_mode1+1)^(0+256)
  5248  0ADB                     l5844:	
  5249                           
  5250                           ;main.c: 127: }
  5251                           ;main.c: 129: updateSwitchBypass();
  5252  0ADB  3187  2716  318A   	fcall	_updateSwitchBypass
  5253                           
  5254                           ;main.c: 130: updateSwitchTap();
  5255  0ADE  3185  252E  318A   	fcall	_updateSwitchTap
  5256                           
  5257                           ;main.c: 224: knob_1_pos = adc_convert(0);
  5258  0AE1  3000               	movlw	0
  5259  0AE2  319E  2633  318A   	fcall	_adc_convert
  5260  0AE5  0020               	movlb	0	; select bank0
  5261  0AE6  0823               	movf	?_adc_convert+1,w
  5262  0AE7  0022               	movlb	2	; select bank2
  5263  0AE8  00BB               	movwf	(_knob_1_pos+1)^(0+256)
  5264  0AE9  0020               	movlb	0	; select bank0
  5265  0AEA  0822               	movf	?_adc_convert,w
  5266  0AEB  0022               	movlb	2	; select bank2
  5267  0AEC  00BA               	movwf	_knob_1_pos^(0+256)
  5268                           
  5269                           ;main.c: 225: knob_2_pos = adc_convert(1);
  5270  0AED  3001               	movlw	1
  5271  0AEE  319E  2633  318A   	fcall	_adc_convert
  5272  0AF1  0020               	movlb	0	; select bank0
  5273  0AF2  0823               	movf	?_adc_convert+1,w
  5274  0AF3  0022               	movlb	2	; select bank2
  5275  0AF4  00BD               	movwf	(_knob_2_pos+1)^(0+256)
  5276  0AF5  0020               	movlb	0	; select bank0
  5277  0AF6  0822               	movf	?_adc_convert,w
  5278  0AF7  0022               	movlb	2	; select bank2
  5279  0AF8  00BC               	movwf	_knob_2_pos^(0+256)
  5280                           
  5281                           ;main.c: 226: knob_3_pos = adc_convert(2);
  5282  0AF9  3002               	movlw	2
  5283  0AFA  319E  2633  318A   	fcall	_adc_convert
  5284  0AFD  0020               	movlb	0	; select bank0
  5285  0AFE  0823               	movf	?_adc_convert+1,w
  5286  0AFF  0022               	movlb	2	; select bank2
  5287  0B00  00BF               	movwf	(_knob_3_pos+1)^(0+256)
  5288  0B01  0020               	movlb	0	; select bank0
  5289  0B02  0822               	movf	?_adc_convert,w
  5290  0B03  0022               	movlb	2	; select bank2
  5291  0B04  00BE               	movwf	_knob_3_pos^(0+256)
  5292                           
  5293                           ;main.c: 227: knob_4_pos = adc_convert(3);
  5294  0B05  3003               	movlw	3
  5295  0B06  319E  2633  318A   	fcall	_adc_convert
  5296  0B09  0020               	movlb	0	; select bank0
  5297  0B0A  0823               	movf	?_adc_convert+1,w
  5298  0B0B  0022               	movlb	2	; select bank2
  5299  0B0C  00C1               	movwf	(_knob_4_pos+1)^(0+256)
  5300  0B0D  0020               	movlb	0	; select bank0
  5301  0B0E  0822               	movf	?_adc_convert,w
  5302  0B0F  0022               	movlb	2	; select bank2
  5303  0B10  00C0               	movwf	_knob_4_pos^(0+256)
  5304                           
  5305                           ;main.c: 228: knob_5_pos = adc_convert(4);
  5306  0B11  3004               	movlw	4
  5307  0B12  319E  2633  318A   	fcall	_adc_convert
  5308  0B15  0020               	movlb	0	; select bank0
  5309  0B16  0823               	movf	?_adc_convert+1,w
  5310  0B17  0022               	movlb	2	; select bank2
  5311  0B18  00C3               	movwf	(_knob_5_pos+1)^(0+256)
  5312  0B19  0020               	movlb	0	; select bank0
  5313  0B1A  0822               	movf	?_adc_convert,w
  5314  0B1B  0022               	movlb	2	; select bank2
  5315  0B1C  00C2               	movwf	_knob_5_pos^(0+256)
  5316                           
  5317                           ;main.c: 255: LATBbits.LATB1 = 0;
  5318  0B1D  108D               	bcf	13,1	;volatile
  5319                           
  5320                           ;main.c: 256: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5321  0B1E  0021               	movlb	1	; select bank1
  5322  0B1F  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5323  0B20  00BA               	movwf	??_main^(0+128)
  5324  0B21  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5325  0B22  00BB               	movwf	(??_main^(0+128)+1)
  5326  0B23  0ABA               	incf	??_main^(0+128),f
  5327  0B24  1903               	skipnz
  5328  0B25  0ABB               	incf	(??_main^(0+128)+1),f
  5329  0B26  0022               	movlb	2	; select bank2
  5330  0B27  083A               	movf	_knob_1_pos^(0+256),w
  5331  0B28  0021               	movlb	1	; select bank1
  5332  0B29  073A               	addwf	??_main^(0+128),w
  5333  0B2A  00BC               	movwf	(??_main+2)^(0+128)
  5334  0B2B  0022               	movlb	2	; select bank2
  5335  0B2C  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5336  0B2D  0021               	movlb	1	; select bank1
  5337  0B2E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5338  0B2F  00BD               	movwf	(??_main+3)^(0+128)
  5339  0B30  083D               	movf	(??_main+3)^(0+128),w
  5340  0B31  3A80               	xorlw	128
  5341  0B32  00BE               	movwf	(??_main+4)^(0+128)
  5342  0B33  3080               	movlw	128
  5343  0B34  023E               	subwf	(??_main+4)^(0+128),w
  5344  0B35  1D03               	skipz
  5345  0B36  2B39               	goto	u6635
  5346  0B37  3004               	movlw	4
  5347  0B38  023C               	subwf	(??_main+2)^(0+128),w
  5348  0B39                     u6635:	
  5349  0B39  1803               	skipnc
  5350  0B3A  2B58               	goto	l5864
  5351  0B3B  0021               	movlb	1	; select bank1
  5352  0B3C  0953               	comf	_knob1_prev^(0+128),w	;volatile
  5353  0B3D  00BA               	movwf	??_main^(0+128)
  5354  0B3E  0954               	comf	(_knob1_prev+1)^(0+128),w	;volatile
  5355  0B3F  00BB               	movwf	(??_main^(0+128)+1)
  5356  0B40  0ABA               	incf	??_main^(0+128),f
  5357  0B41  1903               	skipnz
  5358  0B42  0ABB               	incf	(??_main^(0+128)+1),f
  5359  0B43  0022               	movlb	2	; select bank2
  5360  0B44  083A               	movf	_knob_1_pos^(0+256),w
  5361  0B45  0021               	movlb	1	; select bank1
  5362  0B46  073A               	addwf	??_main^(0+128),w
  5363  0B47  00BC               	movwf	(??_main+2)^(0+128)
  5364  0B48  0022               	movlb	2	; select bank2
  5365  0B49  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5366  0B4A  0021               	movlb	1	; select bank1
  5367  0B4B  3D3B               	addwfc	(??_main+1)^(0+128),w
  5368  0B4C  00BD               	movwf	(??_main+3)^(0+128)
  5369  0B4D  083D               	movf	(??_main+3)^(0+128),w
  5370  0B4E  3A80               	xorlw	128
  5371  0B4F  00BE               	movwf	(??_main+4)^(0+128)
  5372  0B50  307F               	movlw	127
  5373  0B51  023E               	subwf	(??_main+4)^(0+128),w
  5374  0B52  1D03               	skipz
  5375  0B53  2B56               	goto	u6645
  5376  0B54  30FD               	movlw	253
  5377  0B55  023C               	subwf	(??_main+2)^(0+128),w
  5378  0B56                     u6645:	
  5379  0B56  1803               	skipnc
  5380  0B57  2BAC               	goto	l5872
  5381  0B58                     l5864:	
  5382                           
  5383                           ;main.c: 257: knob1_prev = knob_1_pos;
  5384  0B58  0022               	movlb	2	; select bank2
  5385  0B59  083B               	movf	(_knob_1_pos+1)^(0+256),w
  5386  0B5A  0021               	movlb	1	; select bank1
  5387  0B5B  00D4               	movwf	(_knob1_prev+1)^(0+128)	;volatile
  5388  0B5C  0022               	movlb	2	; select bank2
  5389  0B5D  083A               	movf	_knob_1_pos^(0+256),w
  5390  0B5E  0021               	movlb	1	; select bank1
  5391  0B5F  00D3               	movwf	_knob1_prev^(0+128)	;volatile
  5392                           
  5393                           ;main.c: 258: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5394  0B60  3000               	movlw	0
  5395  0B61  0020               	movlb	0	; select bank0
  5396  0B62  00E3               	movwf	map@out_max
  5397  0B63  3048               	movlw	72
  5398  0B64  00E4               	movwf	map@out_max+1
  5399  0B65  3043               	movlw	67
  5400  0B66  00E5               	movwf	map@out_max+2
  5401  0B67  3080               	movlw	128
  5402  0B68  00E0               	movwf	map@out_min
  5403  0B69  3092               	movlw	146
  5404  0B6A  00E1               	movwf	map@out_min+1
  5405  0B6B  3044               	movlw	68
  5406  0B6C  00E2               	movwf	map@out_min+2
  5407  0B6D  30C0               	movlw	192
  5408  0B6E  00DD               	movwf	map@in_max
  5409  0B6F  307F               	movlw	127
  5410  0B70  00DE               	movwf	map@in_max+1
  5411  0B71  3044               	movlw	68
  5412  0B72  00DF               	movwf	map@in_max+2
  5413  0B73  3000               	movlw	0
  5414  0B74  00DA               	movwf	map@in_min
  5415  0B75  3000               	movlw	0
  5416  0B76  00DB               	movwf	map@in_min+1
  5417  0B77  3000               	movlw	0
  5418  0B78  00DC               	movwf	map@in_min+2
  5419  0B79  0021               	movlb	1	; select bank1
  5420  0B7A  0854               	movf	(_knob1_prev+1)^(0+128),w	;volatile
  5421  0B7B  0020               	movlb	0	; select bank0
  5422  0B7C  00AB               	movwf	___awtoft@c+1
  5423  0B7D  0021               	movlb	1	; select bank1
  5424  0B7E  0853               	movf	_knob1_prev^(0+128),w	;volatile
  5425  0B7F  0020               	movlb	0	; select bank0
  5426  0B80  00AA               	movwf	___awtoft@c
  5427  0B81  319E  2688  318A   	fcall	___awtoft
  5428  0B84  0020               	movlb	0	; select bank0
  5429  0B85  082A               	movf	?___awtoft,w
  5430  0B86  00D7               	movwf	map@x
  5431  0B87  082B               	movf	?___awtoft+1,w
  5432  0B88  00D8               	movwf	map@x+1
  5433  0B89  082C               	movf	?___awtoft+2,w
  5434  0B8A  00D9               	movwf	map@x+2
  5435  0B8B  3196  26C1  318A   	fcall	_map
  5436  0B8E  0020               	movlb	0	; select bank0
  5437  0B8F  0857               	movf	?_map,w
  5438  0B90  0021               	movlb	1	; select bank1
  5439  0B91  00A0               	movwf	___fttol@f1^(0+128)
  5440  0B92  0020               	movlb	0	; select bank0
  5441  0B93  0858               	movf	?_map+1,w
  5442  0B94  0021               	movlb	1	; select bank1
  5443  0B95  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5444  0B96  0020               	movlb	0	; select bank0
  5445  0B97  0859               	movf	?_map+2,w
  5446  0B98  0021               	movlb	1	; select bank1
  5447  0B99  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5448  0B9A  3196  263A  318A   	fcall	___fttol
  5449  0B9D  0021               	movlb	1	; select bank1
  5450  0B9E  0823               	movf	(?___fttol+3)^(0+128),w
  5451  0B9F  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5452  0BA0  0822               	movf	(?___fttol+2)^(0+128),w
  5453  0BA1  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5454  0BA2  0821               	movf	(?___fttol+1)^(0+128),w
  5455  0BA3  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5456  0BA4  0820               	movf	?___fttol^(0+128),w
  5457  0BA5  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  5458                           
  5459                           ;main.c: 259: delay_time_changed = 1;
  5460  0BA6  3001               	movlw	1
  5461  0BA7  0022               	movlb	2	; select bank2
  5462  0BA8  00DC               	movwf	_delay_time_changed^(0+256)
  5463  0BA9  3000               	movlw	0
  5464  0BAA  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  5465                           
  5466                           ;main.c: 260: LATBbits.LATB1 = 1;
  5467  0BAB  148D               	bsf	13,1	;volatile
  5468  0BAC                     l5872:	
  5469                           
  5470                           ;main.c: 261: }
  5471                           ;main.c: 271: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5472  0BAC  0022               	movlb	2	; select bank2
  5473  0BAD  095E               	comf	_knob2_prev^(0+256),w	;volatile
  5474  0BAE  0021               	movlb	1	; select bank1
  5475  0BAF  00BA               	movwf	??_main^(0+128)
  5476  0BB0  0022               	movlb	2	; select bank2
  5477  0BB1  095F               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5478  0BB2  0021               	movlb	1	; select bank1
  5479  0BB3  00BB               	movwf	(??_main^(0+128)+1)
  5480  0BB4  0ABA               	incf	??_main^(0+128),f
  5481  0BB5  1903               	skipnz
  5482  0BB6  0ABB               	incf	(??_main^(0+128)+1),f
  5483  0BB7  0022               	movlb	2	; select bank2
  5484  0BB8  083C               	movf	_knob_2_pos^(0+256),w
  5485  0BB9  0021               	movlb	1	; select bank1
  5486  0BBA  073A               	addwf	??_main^(0+128),w
  5487  0BBB  00BC               	movwf	(??_main+2)^(0+128)
  5488  0BBC  0022               	movlb	2	; select bank2
  5489  0BBD  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5490  0BBE  0021               	movlb	1	; select bank1
  5491  0BBF  3D3B               	addwfc	(??_main+1)^(0+128),w
  5492  0BC0  00BD               	movwf	(??_main+3)^(0+128)
  5493  0BC1  083D               	movf	(??_main+3)^(0+128),w
  5494  0BC2  3A80               	xorlw	128
  5495  0BC3  00BE               	movwf	(??_main+4)^(0+128)
  5496  0BC4  3080               	movlw	128
  5497  0BC5  023E               	subwf	(??_main+4)^(0+128),w
  5498  0BC6  1D03               	skipz
  5499  0BC7  2BCA               	goto	u6655
  5500  0BC8  3004               	movlw	4
  5501  0BC9  023C               	subwf	(??_main+2)^(0+128),w
  5502  0BCA                     u6655:	
  5503  0BCA  1803               	skipnc
  5504  0BCB  2BEC               	goto	l5876
  5505  0BCC  0022               	movlb	2	; select bank2
  5506  0BCD  095E               	comf	_knob2_prev^(0+256),w	;volatile
  5507  0BCE  0021               	movlb	1	; select bank1
  5508  0BCF  00BA               	movwf	??_main^(0+128)
  5509  0BD0  0022               	movlb	2	; select bank2
  5510  0BD1  095F               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5511  0BD2  0021               	movlb	1	; select bank1
  5512  0BD3  00BB               	movwf	(??_main^(0+128)+1)
  5513  0BD4  0ABA               	incf	??_main^(0+128),f
  5514  0BD5  1903               	skipnz
  5515  0BD6  0ABB               	incf	(??_main^(0+128)+1),f
  5516  0BD7  0022               	movlb	2	; select bank2
  5517  0BD8  083C               	movf	_knob_2_pos^(0+256),w
  5518  0BD9  0021               	movlb	1	; select bank1
  5519  0BDA  073A               	addwf	??_main^(0+128),w
  5520  0BDB  00BC               	movwf	(??_main+2)^(0+128)
  5521  0BDC  0022               	movlb	2	; select bank2
  5522  0BDD  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5523  0BDE  0021               	movlb	1	; select bank1
  5524  0BDF  3D3B               	addwfc	(??_main+1)^(0+128),w
  5525  0BE0  00BD               	movwf	(??_main+3)^(0+128)
  5526  0BE1  083D               	movf	(??_main+3)^(0+128),w
  5527  0BE2  3A80               	xorlw	128
  5528  0BE3  00BE               	movwf	(??_main+4)^(0+128)
  5529  0BE4  307F               	movlw	127
  5530  0BE5  023E               	subwf	(??_main+4)^(0+128),w
  5531  0BE6  1D03               	skipz
  5532  0BE7  2BEA               	goto	u6665
  5533  0BE8  30FD               	movlw	253
  5534  0BE9  023C               	subwf	(??_main+2)^(0+128),w
  5535  0BEA                     u6665:	
  5536  0BEA  1803               	skipnc
  5537  0BEB  2C4B               	goto	l5884
  5538  0BEC                     l5876:	
  5539                           
  5540                           ;main.c: 272: knob2_prev = knob_2_pos;
  5541  0BEC  0022               	movlb	2	; select bank2
  5542  0BED  083D               	movf	(_knob_2_pos+1)^(0+256),w
  5543  0BEE  00DF               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5544  0BEF  083C               	movf	_knob_2_pos^(0+256),w
  5545  0BF0  00DE               	movwf	_knob2_prev^(0+256)	;volatile
  5546                           
  5547                           ;main.c: 273: int i = map(knob2_prev, 0, 1023, 0, 39);
  5548  0BF1  3000               	movlw	0
  5549  0BF2  0020               	movlb	0	; select bank0
  5550  0BF3  00E3               	movwf	map@out_max
  5551  0BF4  301C               	movlw	28
  5552  0BF5  00E4               	movwf	map@out_max+1
  5553  0BF6  3042               	movlw	66
  5554  0BF7  00E5               	movwf	map@out_max+2
  5555  0BF8  3000               	movlw	0
  5556  0BF9  00E0               	movwf	map@out_min
  5557  0BFA  3000               	movlw	0
  5558  0BFB  00E1               	movwf	map@out_min+1
  5559  0BFC  3000               	movlw	0
  5560  0BFD  00E2               	movwf	map@out_min+2
  5561  0BFE  30C0               	movlw	192
  5562  0BFF  00DD               	movwf	map@in_max
  5563  0C00  307F               	movlw	127
  5564  0C01  00DE               	movwf	map@in_max+1
  5565  0C02  3044               	movlw	68
  5566  0C03  00DF               	movwf	map@in_max+2
  5567  0C04  3000               	movlw	0
  5568  0C05  00DA               	movwf	map@in_min
  5569  0C06  3000               	movlw	0
  5570  0C07  00DB               	movwf	map@in_min+1
  5571  0C08  3000               	movlw	0
  5572  0C09  00DC               	movwf	map@in_min+2
  5573  0C0A  0022               	movlb	2	; select bank2
  5574  0C0B  085F               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5575  0C0C  0020               	movlb	0	; select bank0
  5576  0C0D  00AB               	movwf	___awtoft@c+1
  5577  0C0E  0022               	movlb	2	; select bank2
  5578  0C0F  085E               	movf	_knob2_prev^(0+256),w	;volatile
  5579  0C10  0020               	movlb	0	; select bank0
  5580  0C11  00AA               	movwf	___awtoft@c
  5581  0C12  319E  2688  318A   	fcall	___awtoft
  5582  0C15  0020               	movlb	0	; select bank0
  5583  0C16  082A               	movf	?___awtoft,w
  5584  0C17  00D7               	movwf	map@x
  5585  0C18  082B               	movf	?___awtoft+1,w
  5586  0C19  00D8               	movwf	map@x+1
  5587  0C1A  082C               	movf	?___awtoft+2,w
  5588  0C1B  00D9               	movwf	map@x+2
  5589  0C1C  3196  26C1  318A   	fcall	_map
  5590  0C1F  0020               	movlb	0	; select bank0
  5591  0C20  0857               	movf	?_map,w
  5592  0C21  0021               	movlb	1	; select bank1
  5593  0C22  00A0               	movwf	___fttol@f1^(0+128)
  5594  0C23  0020               	movlb	0	; select bank0
  5595  0C24  0858               	movf	?_map+1,w
  5596  0C25  0021               	movlb	1	; select bank1
  5597  0C26  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5598  0C27  0020               	movlb	0	; select bank0
  5599  0C28  0859               	movf	?_map+2,w
  5600  0C29  0021               	movlb	1	; select bank1
  5601  0C2A  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5602  0C2B  3196  263A  318A   	fcall	___fttol
  5603  0C2E  0021               	movlb	1	; select bank1
  5604  0C2F  0821               	movf	(?___fttol^(0+128)+1),w
  5605  0C30  0023               	movlb	3	; select bank3
  5606  0C31  00EB               	movwf	(main@i+1)^(0+384)
  5607  0C32  0021               	movlb	1	; select bank1
  5608  0C33  0820               	movf	?___fttol^(0+128),w
  5609  0C34  0023               	movlb	3	; select bank3
  5610  0C35  00EA               	movwf	main@i^(0+384)
  5611                           
  5612                           ;main.c: 274: CCPR2 = iB25k[i];
  5613  0C36  356A               	lslf	main@i^(0+384),w
  5614  0C37  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5615  0C38  0086               	movwf	6
  5616  0C39  3004               	movlw	4	; select bank9/10
  5617  0C3A  0087               	movwf	7
  5618  0C3B  3F40               	moviw [0]fsr1
  5619  0C3C  0025               	movlb	5	; select bank5
  5620  0C3D  0098               	movwf	24	;volatile
  5621  0C3E  3F41               	moviw [1]fsr1
  5622  0C3F  0099               	movwf	25	;volatile
  5623                           
  5624                           ;main.c: 275: CCPR3 = B25k[i];
  5625  0C40  0023               	movlb	3	; select bank3
  5626  0C41  356A               	lslf	main@i^(0+384),w
  5627  0C42  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
  5628  0C43  0086               	movwf	6
  5629  0C44  3004               	movlw	4	; select bank8/9
  5630  0C45  0087               	movwf	7
  5631  0C46  3F40               	moviw [0]fsr1
  5632  0C47  0026               	movlb	6	; select bank6
  5633  0C48  0091               	movwf	17	;volatile
  5634  0C49  3F41               	moviw [1]fsr1
  5635  0C4A  0092               	movwf	18	;volatile
  5636  0C4B                     l5884:	
  5637                           
  5638                           ;main.c: 276: }
  5639                           ;main.c: 286: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5640  0C4B  0022               	movlb	2	; select bank2
  5641  0C4C  0960               	comf	_knob3_prev^(0+256),w	;volatile
  5642  0C4D  0021               	movlb	1	; select bank1
  5643  0C4E  00BA               	movwf	??_main^(0+128)
  5644  0C4F  0022               	movlb	2	; select bank2
  5645  0C50  0961               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5646  0C51  0021               	movlb	1	; select bank1
  5647  0C52  00BB               	movwf	(??_main^(0+128)+1)
  5648  0C53  0ABA               	incf	??_main^(0+128),f
  5649  0C54  1903               	skipnz
  5650  0C55  0ABB               	incf	(??_main^(0+128)+1),f
  5651  0C56  0022               	movlb	2	; select bank2
  5652  0C57  083E               	movf	_knob_3_pos^(0+256),w
  5653  0C58  0021               	movlb	1	; select bank1
  5654  0C59  073A               	addwf	??_main^(0+128),w
  5655  0C5A  00BC               	movwf	(??_main+2)^(0+128)
  5656  0C5B  0022               	movlb	2	; select bank2
  5657  0C5C  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5658  0C5D  0021               	movlb	1	; select bank1
  5659  0C5E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5660  0C5F  00BD               	movwf	(??_main+3)^(0+128)
  5661  0C60  083D               	movf	(??_main+3)^(0+128),w
  5662  0C61  3A80               	xorlw	128
  5663  0C62  00BE               	movwf	(??_main+4)^(0+128)
  5664  0C63  3080               	movlw	128
  5665  0C64  023E               	subwf	(??_main+4)^(0+128),w
  5666  0C65  1D03               	skipz
  5667  0C66  2C69               	goto	u6675
  5668  0C67  3004               	movlw	4
  5669  0C68  023C               	subwf	(??_main+2)^(0+128),w
  5670  0C69                     u6675:	
  5671  0C69  1803               	skipnc
  5672  0C6A  2C8B               	goto	l5888
  5673  0C6B  0022               	movlb	2	; select bank2
  5674  0C6C  0960               	comf	_knob3_prev^(0+256),w	;volatile
  5675  0C6D  0021               	movlb	1	; select bank1
  5676  0C6E  00BA               	movwf	??_main^(0+128)
  5677  0C6F  0022               	movlb	2	; select bank2
  5678  0C70  0961               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5679  0C71  0021               	movlb	1	; select bank1
  5680  0C72  00BB               	movwf	(??_main^(0+128)+1)
  5681  0C73  0ABA               	incf	??_main^(0+128),f
  5682  0C74  1903               	skipnz
  5683  0C75  0ABB               	incf	(??_main^(0+128)+1),f
  5684  0C76  0022               	movlb	2	; select bank2
  5685  0C77  083E               	movf	_knob_3_pos^(0+256),w
  5686  0C78  0021               	movlb	1	; select bank1
  5687  0C79  073A               	addwf	??_main^(0+128),w
  5688  0C7A  00BC               	movwf	(??_main+2)^(0+128)
  5689  0C7B  0022               	movlb	2	; select bank2
  5690  0C7C  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5691  0C7D  0021               	movlb	1	; select bank1
  5692  0C7E  3D3B               	addwfc	(??_main+1)^(0+128),w
  5693  0C7F  00BD               	movwf	(??_main+3)^(0+128)
  5694  0C80  083D               	movf	(??_main+3)^(0+128),w
  5695  0C81  3A80               	xorlw	128
  5696  0C82  00BE               	movwf	(??_main+4)^(0+128)
  5697  0C83  307F               	movlw	127
  5698  0C84  023E               	subwf	(??_main+4)^(0+128),w
  5699  0C85  1D03               	skipz
  5700  0C86  2C89               	goto	u6685
  5701  0C87  30FD               	movlw	253
  5702  0C88  023C               	subwf	(??_main+2)^(0+128),w
  5703  0C89                     u6685:	
  5704  0C89  1803               	skipnc
  5705  0C8A  2CEA               	goto	l5896
  5706  0C8B                     l5888:	
  5707                           
  5708                           ;main.c: 287: knob3_prev = knob_3_pos;
  5709  0C8B  0022               	movlb	2	; select bank2
  5710  0C8C  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5711  0C8D  00E1               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5712  0C8E  083E               	movf	_knob_3_pos^(0+256),w
  5713  0C8F  00E0               	movwf	_knob3_prev^(0+256)	;volatile
  5714                           
  5715                           ;main.c: 288: int i = map(knob3_prev, 0, 1023, 16, 0);
  5716  0C90  3000               	movlw	0
  5717  0C91  0020               	movlb	0	; select bank0
  5718  0C92  00E3               	movwf	map@out_max
  5719  0C93  3000               	movlw	0
  5720  0C94  00E4               	movwf	map@out_max+1
  5721  0C95  3000               	movlw	0
  5722  0C96  00E5               	movwf	map@out_max+2
  5723  0C97  3000               	movlw	0
  5724  0C98  00E0               	movwf	map@out_min
  5725  0C99  3080               	movlw	128
  5726  0C9A  00E1               	movwf	map@out_min+1
  5727  0C9B  3041               	movlw	65
  5728  0C9C  00E2               	movwf	map@out_min+2
  5729  0C9D  30C0               	movlw	192
  5730  0C9E  00DD               	movwf	map@in_max
  5731  0C9F  307F               	movlw	127
  5732  0CA0  00DE               	movwf	map@in_max+1
  5733  0CA1  3044               	movlw	68
  5734  0CA2  00DF               	movwf	map@in_max+2
  5735  0CA3  3000               	movlw	0
  5736  0CA4  00DA               	movwf	map@in_min
  5737  0CA5  3000               	movlw	0
  5738  0CA6  00DB               	movwf	map@in_min+1
  5739  0CA7  3000               	movlw	0
  5740  0CA8  00DC               	movwf	map@in_min+2
  5741  0CA9  0022               	movlb	2	; select bank2
  5742  0CAA  0861               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5743  0CAB  0020               	movlb	0	; select bank0
  5744  0CAC  00AB               	movwf	___awtoft@c+1
  5745  0CAD  0022               	movlb	2	; select bank2
  5746  0CAE  0860               	movf	_knob3_prev^(0+256),w	;volatile
  5747  0CAF  0020               	movlb	0	; select bank0
  5748  0CB0  00AA               	movwf	___awtoft@c
  5749  0CB1  319E  2688  318A   	fcall	___awtoft
  5750  0CB4  0020               	movlb	0	; select bank0
  5751  0CB5  082A               	movf	?___awtoft,w
  5752  0CB6  00D7               	movwf	map@x
  5753  0CB7  082B               	movf	?___awtoft+1,w
  5754  0CB8  00D8               	movwf	map@x+1
  5755  0CB9  082C               	movf	?___awtoft+2,w
  5756  0CBA  00D9               	movwf	map@x+2
  5757  0CBB  3196  26C1  318A   	fcall	_map
  5758  0CBE  0020               	movlb	0	; select bank0
  5759  0CBF  0857               	movf	?_map,w
  5760  0CC0  0021               	movlb	1	; select bank1
  5761  0CC1  00A0               	movwf	___fttol@f1^(0+128)
  5762  0CC2  0020               	movlb	0	; select bank0
  5763  0CC3  0858               	movf	?_map+1,w
  5764  0CC4  0021               	movlb	1	; select bank1
  5765  0CC5  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5766  0CC6  0020               	movlb	0	; select bank0
  5767  0CC7  0859               	movf	?_map+2,w
  5768  0CC8  0021               	movlb	1	; select bank1
  5769  0CC9  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5770  0CCA  3196  263A  318A   	fcall	___fttol
  5771  0CCD  0021               	movlb	1	; select bank1
  5772  0CCE  0821               	movf	(?___fttol^(0+128)+1),w
  5773  0CCF  0023               	movlb	3	; select bank3
  5774  0CD0  00ED               	movwf	(main@i_405+1)^(0+384)
  5775  0CD1  0021               	movlb	1	; select bank1
  5776  0CD2  0820               	movf	?___fttol^(0+128),w
  5777  0CD3  0023               	movlb	3	; select bank3
  5778  0CD4  00EC               	movwf	main@i_405^(0+384)
  5779                           
  5780                           ;main.c: 289: CCPR4 = iB25k[i];
  5781  0CD5  356C               	lslf	main@i_405^(0+384),w
  5782  0CD6  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5783  0CD7  0086               	movwf	6
  5784  0CD8  3004               	movlw	4	; select bank9/10
  5785  0CD9  0087               	movwf	7
  5786  0CDA  3F40               	moviw [0]fsr1
  5787  0CDB  0026               	movlb	6	; select bank6
  5788  0CDC  0098               	movwf	24	;volatile
  5789  0CDD  3F41               	moviw [1]fsr1
  5790  0CDE  0099               	movwf	25	;volatile
  5791                           
  5792                           ;main.c: 290: CCPR5 = B25k[i];
  5793  0CDF  0023               	movlb	3	; select bank3
  5794  0CE0  356C               	lslf	main@i_405^(0+384),w
  5795  0CE1  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
  5796  0CE2  0086               	movwf	6
  5797  0CE3  3004               	movlw	4	; select bank8/9
  5798  0CE4  0087               	movwf	7
  5799  0CE5  3F40               	moviw [0]fsr1
  5800  0CE6  0026               	movlb	6	; select bank6
  5801  0CE7  009C               	movwf	28	;volatile
  5802  0CE8  3F41               	moviw [1]fsr1
  5803  0CE9  009D               	movwf	29	;volatile
  5804  0CEA                     l5896:	
  5805                           
  5806                           ;main.c: 291: }
  5807                           ;main.c: 301: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5808  0CEA  0022               	movlb	2	; select bank2
  5809  0CEB  0962               	comf	_knob4_prev^(0+256),w	;volatile
  5810  0CEC  0021               	movlb	1	; select bank1
  5811  0CED  00BA               	movwf	??_main^(0+128)
  5812  0CEE  0022               	movlb	2	; select bank2
  5813  0CEF  0963               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5814  0CF0  0021               	movlb	1	; select bank1
  5815  0CF1  00BB               	movwf	(??_main^(0+128)+1)
  5816  0CF2  0ABA               	incf	??_main^(0+128),f
  5817  0CF3  1903               	skipnz
  5818  0CF4  0ABB               	incf	(??_main^(0+128)+1),f
  5819  0CF5  0022               	movlb	2	; select bank2
  5820  0CF6  0840               	movf	_knob_4_pos^(0+256),w
  5821  0CF7  0021               	movlb	1	; select bank1
  5822  0CF8  073A               	addwf	??_main^(0+128),w
  5823  0CF9  00BC               	movwf	(??_main+2)^(0+128)
  5824  0CFA  0022               	movlb	2	; select bank2
  5825  0CFB  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5826  0CFC  0021               	movlb	1	; select bank1
  5827  0CFD  3D3B               	addwfc	(??_main+1)^(0+128),w
  5828  0CFE  00BD               	movwf	(??_main+3)^(0+128)
  5829  0CFF  083D               	movf	(??_main+3)^(0+128),w
  5830  0D00  3A80               	xorlw	128
  5831  0D01  00BE               	movwf	(??_main+4)^(0+128)
  5832  0D02  3080               	movlw	128
  5833  0D03  023E               	subwf	(??_main+4)^(0+128),w
  5834  0D04  1D03               	skipz
  5835  0D05  2D08               	goto	u6695
  5836  0D06  3004               	movlw	4
  5837  0D07  023C               	subwf	(??_main+2)^(0+128),w
  5838  0D08                     u6695:	
  5839  0D08  1803               	skipnc
  5840  0D09  2D2A               	goto	l5900
  5841  0D0A  0022               	movlb	2	; select bank2
  5842  0D0B  0962               	comf	_knob4_prev^(0+256),w	;volatile
  5843  0D0C  0021               	movlb	1	; select bank1
  5844  0D0D  00BA               	movwf	??_main^(0+128)
  5845  0D0E  0022               	movlb	2	; select bank2
  5846  0D0F  0963               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5847  0D10  0021               	movlb	1	; select bank1
  5848  0D11  00BB               	movwf	(??_main^(0+128)+1)
  5849  0D12  0ABA               	incf	??_main^(0+128),f
  5850  0D13  1903               	skipnz
  5851  0D14  0ABB               	incf	(??_main^(0+128)+1),f
  5852  0D15  0022               	movlb	2	; select bank2
  5853  0D16  0840               	movf	_knob_4_pos^(0+256),w
  5854  0D17  0021               	movlb	1	; select bank1
  5855  0D18  073A               	addwf	??_main^(0+128),w
  5856  0D19  00BC               	movwf	(??_main+2)^(0+128)
  5857  0D1A  0022               	movlb	2	; select bank2
  5858  0D1B  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5859  0D1C  0021               	movlb	1	; select bank1
  5860  0D1D  3D3B               	addwfc	(??_main+1)^(0+128),w
  5861  0D1E  00BD               	movwf	(??_main+3)^(0+128)
  5862  0D1F  083D               	movf	(??_main+3)^(0+128),w
  5863  0D20  3A80               	xorlw	128
  5864  0D21  00BE               	movwf	(??_main+4)^(0+128)
  5865  0D22  307F               	movlw	127
  5866  0D23  023E               	subwf	(??_main+4)^(0+128),w
  5867  0D24  1D03               	skipz
  5868  0D25  2D28               	goto	u6705
  5869  0D26  30FD               	movlw	253
  5870  0D27  023C               	subwf	(??_main+2)^(0+128),w
  5871  0D28                     u6705:	
  5872  0D28  1803               	skipnc
  5873  0D29  2D74               	goto	l5904
  5874  0D2A                     l5900:	
  5875                           
  5876                           ;main.c: 302: knob4_prev = knob_4_pos;
  5877  0D2A  0022               	movlb	2	; select bank2
  5878  0D2B  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5879  0D2C  00E3               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5880  0D2D  0840               	movf	_knob_4_pos^(0+256),w
  5881  0D2E  00E2               	movwf	_knob4_prev^(0+256)	;volatile
  5882                           
  5883                           ;main.c: 303: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5884  0D2F  3000               	movlw	0
  5885  0D30  0020               	movlb	0	; select bank0
  5886  0D31  00E3               	movwf	map@out_max
  5887  0D32  307A               	movlw	122
  5888  0D33  00E4               	movwf	map@out_max+1
  5889  0D34  3044               	movlw	68
  5890  0D35  00E5               	movwf	map@out_max+2
  5891  0D36  3000               	movlw	0
  5892  0D37  00E0               	movwf	map@out_min
  5893  0D38  3070               	movlw	112
  5894  0D39  00E1               	movwf	map@out_min+1
  5895  0D3A  3042               	movlw	66
  5896  0D3B  00E2               	movwf	map@out_min+2
  5897  0D3C  30C0               	movlw	192
  5898  0D3D  00DD               	movwf	map@in_max
  5899  0D3E  307F               	movlw	127
  5900  0D3F  00DE               	movwf	map@in_max+1
  5901  0D40  3044               	movlw	68
  5902  0D41  00DF               	movwf	map@in_max+2
  5903  0D42  3000               	movlw	0
  5904  0D43  00DA               	movwf	map@in_min
  5905  0D44  3000               	movlw	0
  5906  0D45  00DB               	movwf	map@in_min+1
  5907  0D46  3000               	movlw	0
  5908  0D47  00DC               	movwf	map@in_min+2
  5909  0D48  0022               	movlb	2	; select bank2
  5910  0D49  0863               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5911  0D4A  0020               	movlb	0	; select bank0
  5912  0D4B  00AB               	movwf	___awtoft@c+1
  5913  0D4C  0022               	movlb	2	; select bank2
  5914  0D4D  0862               	movf	_knob4_prev^(0+256),w	;volatile
  5915  0D4E  0020               	movlb	0	; select bank0
  5916  0D4F  00AA               	movwf	___awtoft@c
  5917  0D50  319E  2688  318A   	fcall	___awtoft
  5918  0D53  0020               	movlb	0	; select bank0
  5919  0D54  082A               	movf	?___awtoft,w
  5920  0D55  00D7               	movwf	map@x
  5921  0D56  082B               	movf	?___awtoft+1,w
  5922  0D57  00D8               	movwf	map@x+1
  5923  0D58  082C               	movf	?___awtoft+2,w
  5924  0D59  00D9               	movwf	map@x+2
  5925  0D5A  3196  26C1  318A   	fcall	_map
  5926  0D5D  0020               	movlb	0	; select bank0
  5927  0D5E  0857               	movf	?_map,w
  5928  0D5F  0021               	movlb	1	; select bank1
  5929  0D60  00A0               	movwf	___fttol@f1^(0+128)
  5930  0D61  0020               	movlb	0	; select bank0
  5931  0D62  0858               	movf	?_map+1,w
  5932  0D63  0021               	movlb	1	; select bank1
  5933  0D64  00A1               	movwf	(___fttol@f1+1)^(0+128)
  5934  0D65  0020               	movlb	0	; select bank0
  5935  0D66  0859               	movf	?_map+2,w
  5936  0D67  0021               	movlb	1	; select bank1
  5937  0D68  00A2               	movwf	(___fttol@f1+2)^(0+128)
  5938  0D69  3196  263A  318A   	fcall	___fttol
  5939  0D6C  0021               	movlb	1	; select bank1
  5940  0D6D  0821               	movf	(?___fttol^(0+128)+1),w
  5941  0D6E  0022               	movlb	2	; select bank2
  5942  0D6F  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  5943  0D70  0021               	movlb	1	; select bank1
  5944  0D71  0820               	movf	?___fttol^(0+128),w
  5945  0D72  0022               	movlb	2	; select bank2
  5946  0D73  00E6               	movwf	_mod_delay_time^(0+256)
  5947  0D74                     l5904:	
  5948                           
  5949                           ;main.c: 304: }
  5950                           ;main.c: 312: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5951  0D74  0022               	movlb	2	; select bank2
  5952  0D75  0964               	comf	_knob5_prev^(0+256),w	;volatile
  5953  0D76  0021               	movlb	1	; select bank1
  5954  0D77  00BA               	movwf	??_main^(0+128)
  5955  0D78  0022               	movlb	2	; select bank2
  5956  0D79  0965               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5957  0D7A  0021               	movlb	1	; select bank1
  5958  0D7B  00BB               	movwf	(??_main^(0+128)+1)
  5959  0D7C  0ABA               	incf	??_main^(0+128),f
  5960  0D7D  1903               	skipnz
  5961  0D7E  0ABB               	incf	(??_main^(0+128)+1),f
  5962  0D7F  0022               	movlb	2	; select bank2
  5963  0D80  0842               	movf	_knob_5_pos^(0+256),w
  5964  0D81  0021               	movlb	1	; select bank1
  5965  0D82  073A               	addwf	??_main^(0+128),w
  5966  0D83  00BC               	movwf	(??_main+2)^(0+128)
  5967  0D84  0022               	movlb	2	; select bank2
  5968  0D85  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5969  0D86  0021               	movlb	1	; select bank1
  5970  0D87  3D3B               	addwfc	(??_main+1)^(0+128),w
  5971  0D88  00BD               	movwf	(??_main+3)^(0+128)
  5972  0D89  083D               	movf	(??_main+3)^(0+128),w
  5973  0D8A  3A80               	xorlw	128
  5974  0D8B  00BE               	movwf	(??_main+4)^(0+128)
  5975  0D8C  3080               	movlw	128
  5976  0D8D  023E               	subwf	(??_main+4)^(0+128),w
  5977  0D8E  1D03               	skipz
  5978  0D8F  2D92               	goto	u6715
  5979  0D90  3004               	movlw	4
  5980  0D91  023C               	subwf	(??_main+2)^(0+128),w
  5981  0D92                     u6715:	
  5982  0D92  1803               	skipnc
  5983  0D93  2DB4               	goto	l5908
  5984  0D94  0022               	movlb	2	; select bank2
  5985  0D95  0964               	comf	_knob5_prev^(0+256),w	;volatile
  5986  0D96  0021               	movlb	1	; select bank1
  5987  0D97  00BA               	movwf	??_main^(0+128)
  5988  0D98  0022               	movlb	2	; select bank2
  5989  0D99  0965               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5990  0D9A  0021               	movlb	1	; select bank1
  5991  0D9B  00BB               	movwf	(??_main^(0+128)+1)
  5992  0D9C  0ABA               	incf	??_main^(0+128),f
  5993  0D9D  1903               	skipnz
  5994  0D9E  0ABB               	incf	(??_main^(0+128)+1),f
  5995  0D9F  0022               	movlb	2	; select bank2
  5996  0DA0  0842               	movf	_knob_5_pos^(0+256),w
  5997  0DA1  0021               	movlb	1	; select bank1
  5998  0DA2  073A               	addwf	??_main^(0+128),w
  5999  0DA3  00BC               	movwf	(??_main+2)^(0+128)
  6000  0DA4  0022               	movlb	2	; select bank2
  6001  0DA5  0843               	movf	(_knob_5_pos+1)^(0+256),w
  6002  0DA6  0021               	movlb	1	; select bank1
  6003  0DA7  3D3B               	addwfc	(??_main+1)^(0+128),w
  6004  0DA8  00BD               	movwf	(??_main+3)^(0+128)
  6005  0DA9  083D               	movf	(??_main+3)^(0+128),w
  6006  0DAA  3A80               	xorlw	128
  6007  0DAB  00BE               	movwf	(??_main+4)^(0+128)
  6008  0DAC  307F               	movlw	127
  6009  0DAD  023E               	subwf	(??_main+4)^(0+128),w
  6010  0DAE  1D03               	skipz
  6011  0DAF  2DB2               	goto	u6725
  6012  0DB0  30FD               	movlw	253
  6013  0DB1  023C               	subwf	(??_main+2)^(0+128),w
  6014  0DB2                     u6725:	
  6015  0DB2  1803               	skipnc
  6016  0DB3  2DB9               	goto	l5910
  6017  0DB4                     l5908:	
  6018                           
  6019                           ;main.c: 313: knob5_prev = knob_5_pos;
  6020  0DB4  0022               	movlb	2	; select bank2
  6021  0DB5  0843               	movf	(_knob_5_pos+1)^(0+256),w
  6022  0DB6  00E5               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  6023  0DB7  0842               	movf	_knob_5_pos^(0+256),w
  6024  0DB8  00E4               	movwf	_knob5_prev^(0+256)	;volatile
  6025  0DB9                     l5910:	
  6026                           
  6027                           ;main.c: 314: }
  6028                           ;main.c: 322: LATBbits.LATB0 = 0;
  6029  0DB9  0022               	movlb	2	; select bank2
  6030  0DBA  100D               	bcf	13,0	;volatile
  6031                           
  6032                           ;main.c: 334: if (mod_timer >= mod_delay_time) {
  6033  0DBB  0866               	movf	_mod_delay_time^(0+256),w
  6034  0DBC  0021               	movlb	1	; select bank1
  6035  0DBD  00BA               	movwf	??_main^(0+128)
  6036  0DBE  0022               	movlb	2	; select bank2
  6037  0DBF  0867               	movf	(_mod_delay_time+1)^(0+256),w
  6038  0DC0  0021               	movlb	1	; select bank1
  6039  0DC1  00BB               	movwf	(??_main^(0+128)+1)
  6040  0DC2  3000               	movlw	0
  6041  0DC3  1BBB               	btfsc	(??_main^(0+128)+1),7
  6042  0DC4  30FF               	movlw	255
  6043  0DC5  00BC               	movwf	(??_main^(0+128)+2)
  6044  0DC6  00BD               	movwf	(??_main^(0+128)+3)
  6045  0DC7  0022               	movlb	2	; select bank2
  6046  0DC8  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  6047  0DC9  3A80               	xorlw	128
  6048  0DCA  0021               	movlb	1	; select bank1
  6049  0DCB  00BE               	movwf	(??_main+4)^(0+128)
  6050  0DCC  083D               	movf	(??_main+3)^(0+128),w
  6051  0DCD  3A80               	xorlw	128
  6052  0DCE  023E               	subwf	(??_main+4)^(0+128),w
  6053  0DCF  0022               	movlb	2	; select bank2
  6054  0DD0  1D03               	skipz
  6055  0DD1  2DE2               	goto	u6733
  6056  0DD2  0021               	movlb	1	; select bank1
  6057  0DD3  083C               	movf	(??_main+2)^(0+128),w
  6058  0DD4  0022               	movlb	2	; select bank2
  6059  0DD5  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  6060  0DD6  1D03               	skipz
  6061  0DD7  2DE2               	goto	u6733
  6062  0DD8  0021               	movlb	1	; select bank1
  6063  0DD9  083B               	movf	(??_main+1)^(0+128),w
  6064  0DDA  0022               	movlb	2	; select bank2
  6065  0DDB  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  6066  0DDC  1D03               	skipz
  6067  0DDD  2DE2               	goto	u6733
  6068  0DDE  0021               	movlb	1	; select bank1
  6069  0DDF  083A               	movf	??_main^(0+128),w
  6070  0DE0  0022               	movlb	2	; select bank2
  6071  0DE1  0224               	subwf	_mod_timer^(0+256),w	;volatile
  6072  0DE2                     u6733:	
  6073  0DE2  1C03               	skipc
  6074  0DE3  2F45               	goto	l5978
  6075                           
  6076                           ;main.c: 335: LATBbits.LATB0 = 1;
  6077  0DE4  140D               	bsf	13,0	;volatile
  6078                           
  6079                           ;main.c: 336: mod_counter = mod_counter + 1;
  6080  0DE5  0021               	movlb	1	; select bank1
  6081  0DE6  0867               	movf	_mod_counter^(0+128),w
  6082  0DE7  3E01               	addlw	1
  6083  0DE8  00E7               	movwf	_mod_counter^(0+128)
  6084  0DE9  3000               	movlw	0
  6085  0DEA  3D68               	addwfc	(_mod_counter+1)^(0+128),w
  6086  0DEB  00E8               	movwf	(_mod_counter+1)^(0+128)
  6087                           
  6088                           ;main.c: 337: mod_timer = 0;
  6089  0DEC  3000               	movlw	0
  6090  0DED  0022               	movlb	2	; select bank2
  6091  0DEE  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6092  0DEF  3000               	movlw	0
  6093  0DF0  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6094  0DF1  3000               	movlw	0
  6095  0DF2  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6096  0DF3  3000               	movlw	0
  6097  0DF4  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6098                           
  6099                           ;main.c: 339: if (bottom_push_state == 1 || bottom_push_state == 5) {
  6100  0DF5  0021               	movlb	1	; select bank1
  6101  0DF6  0351               	decf	_bottom_push_state^(0+128),w
  6102  0DF7  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6103  0DF8  1903               	btfsc	3,2
  6104  0DF9  2DFF               	goto	l5922
  6105  0DFA  3005               	movlw	5
  6106  0DFB  0651               	xorwf	_bottom_push_state^(0+128),w
  6107  0DFC  0452               	iorwf	(_bottom_push_state+1)^(0+128),w
  6108  0DFD  1D03               	btfss	3,2
  6109  0DFE  2E08               	goto	l5926
  6110  0DFF                     l5922:	
  6111                           
  6112                           ;main.c: 340: if (mod_counter >= 61) {
  6113  0DFF  0868               	movf	(_mod_counter+1)^(0+128),w
  6114  0E00  3A80               	xorlw	128
  6115  0E01  00BA               	movwf	??_main^(0+128)
  6116  0E02  3080               	movlw	128
  6117  0E03  023A               	subwf	??_main^(0+128),w
  6118  0E04  1D03               	skipz
  6119  0E05  2E11               	goto	u6775
  6120  0E06  303D               	movlw	61
  6121  0E07  2E10               	goto	L1
  6122  0E08                     l5926:	
  6123                           ;main.c: 342: }
  6124                           ;main.c: 343: } else {
  6125                           
  6126                           ;main.c: 341: mod_counter = 0;
  6127                           
  6128                           
  6129                           ;main.c: 344: if (mod_counter > 31) {
  6130  0E08  0868               	movf	(_mod_counter+1)^(0+128),w
  6131  0E09  3A80               	xorlw	128
  6132  0E0A  00BA               	movwf	??_main^(0+128)
  6133  0E0B  3080               	movlw	128
  6134  0E0C  023A               	subwf	??_main^(0+128),w
  6135  0E0D  1D03               	skipz
  6136  0E0E  2E11               	goto	u6775
  6137  0E0F  3020               	movlw	32
  6138  0E10                     L1:	
  6139  0E10  0267               	subwf	_mod_counter^(0+128),w
  6140  0E11                     u6775:	
  6141  0E11  1C03               	skipc
  6142  0E12  2E16               	goto	l5930
  6143                           
  6144                           ;main.c: 345: mod_counter = 0;
  6145  0E13  0021               	movlb	1	; select bank1
  6146  0E14  01E7               	clrf	_mod_counter^(0+128)
  6147  0E15  01E8               	clrf	(_mod_counter+1)^(0+128)
  6148  0E16                     l5930:	
  6149                           
  6150                           ;main.c: 346: }
  6151                           ;main.c: 347: }
  6152                           ;main.c: 350: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  6153  0E16  3000               	movlw	0
  6154  0E17  0020               	movlb	0	; select bank0
  6155  0E18  00E3               	movwf	map@out_max
  6156  0E19  3000               	movlw	0
  6157  0E1A  00E4               	movwf	map@out_max+1
  6158  0E1B  3000               	movlw	0
  6159  0E1C  00E5               	movwf	map@out_max+2
  6160  0E1D  3060               	movlw	96
  6161  0E1E  00E0               	movwf	map@out_min
  6162  0E1F  309F               	movlw	159
  6163  0E20  00E1               	movwf	map@out_min+1
  6164  0E21  3044               	movlw	68
  6165  0E22  00E2               	movwf	map@out_min+2
  6166  0E23  30C0               	movlw	192
  6167  0E24  00DD               	movwf	map@in_max
  6168  0E25  307F               	movlw	127
  6169  0E26  00DE               	movwf	map@in_max+1
  6170  0E27  3044               	movlw	68
  6171  0E28  00DF               	movwf	map@in_max+2
  6172  0E29  3000               	movlw	0
  6173  0E2A  00DA               	movwf	map@in_min
  6174  0E2B  3000               	movlw	0
  6175  0E2C  00DB               	movwf	map@in_min+1
  6176  0E2D  3000               	movlw	0
  6177  0E2E  00DC               	movwf	map@in_min+2
  6178  0E2F  0022               	movlb	2	; select bank2
  6179  0E30  0865               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  6180  0E31  0020               	movlb	0	; select bank0
  6181  0E32  00AB               	movwf	___awtoft@c+1
  6182  0E33  0022               	movlb	2	; select bank2
  6183  0E34  0864               	movf	_knob5_prev^(0+256),w	;volatile
  6184  0E35  0020               	movlb	0	; select bank0
  6185  0E36  00AA               	movwf	___awtoft@c
  6186  0E37  319E  2688  318A   	fcall	___awtoft
  6187  0E3A  0020               	movlb	0	; select bank0
  6188  0E3B  082A               	movf	?___awtoft,w
  6189  0E3C  00D7               	movwf	map@x
  6190  0E3D  082B               	movf	?___awtoft+1,w
  6191  0E3E  00D8               	movwf	map@x+1
  6192  0E3F  082C               	movf	?___awtoft+2,w
  6193  0E40  00D9               	movwf	map@x+2
  6194  0E41  3196  26C1  318A   	fcall	_map
  6195  0E44  0020               	movlb	0	; select bank0
  6196  0E45  0857               	movf	?_map,w
  6197  0E46  0021               	movlb	1	; select bank1
  6198  0E47  00A0               	movwf	___fttol@f1^(0+128)
  6199  0E48  0020               	movlb	0	; select bank0
  6200  0E49  0858               	movf	?_map+1,w
  6201  0E4A  0021               	movlb	1	; select bank1
  6202  0E4B  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6203  0E4C  0020               	movlb	0	; select bank0
  6204  0E4D  0859               	movf	?_map+2,w
  6205  0E4E  0021               	movlb	1	; select bank1
  6206  0E4F  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6207  0E50  3196  263A  318A   	fcall	___fttol
  6208  0E53  0021               	movlb	1	; select bank1
  6209  0E54  0821               	movf	(?___fttol^(0+128)+1),w
  6210  0E55  0023               	movlb	3	; select bank3
  6211  0E56  00EF               	movwf	(main@adjusted_pot_value+1)^(0+384)
  6212  0E57  0021               	movlb	1	; select bank1
  6213  0E58  0820               	movf	?___fttol^(0+128),w
  6214  0E59  0023               	movlb	3	; select bank3
  6215  0E5A  00EE               	movwf	main@adjusted_pot_value^(0+384)
  6216                           
  6217                           ;main.c: 351: switch (bottom_push_state) {
  6218  0E5B  2EB8               	goto	l5960
  6219  0E5C                     l5932:	
  6220                           ;main.c: 352: case 1:
  6221                           
  6222                           
  6223                           ;main.c: 353: mod_value = mod5[mod_counter];
  6224  0E5C  0021               	movlb	1	; select bank1
  6225  0E5D  0868               	movf	(_mod_counter+1)^(0+128),w
  6226  0E5E  00BB               	movwf	(??_main^(0+128)+1)
  6227  0E5F  0867               	movf	_mod_counter^(0+128),w
  6228  0E60  00BA               	movwf	??_main^(0+128)
  6229  0E61  35BA               	lslf	??_main^(0+128),f
  6230  0E62  0DBB               	rlf	(??_main^(0+128)+1),f
  6231  0E63  3076               	movlw	118
  6232  0E64  00BC               	movwf	(??_main+2)^(0+128)
  6233  0E65  3025               	movlw	37
  6234  0E66  00BD               	movwf	((??_main+2)^(0+128)+1)
  6235  0E67  083A               	movf	??_main^(0+128),w
  6236  0E68  073C               	addwf	(??_main+2)^(0+128),w
  6237  0E69  0086               	movwf	6
  6238  0E6A  083B               	movf	(??_main+1)^(0+128),w
  6239  0E6B  3D3D               	addwfc	(??_main+3)^(0+128),w
  6240  0E6C  0087               	movwf	7
  6241  0E6D  3F40               	moviw [0]fsr1
  6242  0E6E  0022               	movlb	2	; select bank2
  6243  0E6F  00C8               	movwf	_mod_value^(0+256)
  6244  0E70  3F41               	moviw [1]fsr1
  6245  0E71  2E92               	goto	L4
  6246  0E72                     l5936:	
  6247                           ;main.c: 356: case 2:
  6248                           
  6249                           ;main.c: 355: break;
  6250                           
  6251                           ;main.c: 354: PORTCbits.RC4 = 0;
  6252                           
  6253                           
  6254                           ;main.c: 357: mod_value = mod2[mod_counter];
  6255  0E72  0021               	movlb	1	; select bank1
  6256  0E73  3567               	lslf	_mod_counter^(0+128),w
  6257  0E74  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  6258  0E75  0086               	movwf	6
  6259  0E76  3002               	movlw	2	; select bank4/5
  6260  0E77  0087               	movwf	7
  6261  0E78  3F40               	moviw [0]fsr1
  6262  0E79  0022               	movlb	2	; select bank2
  6263  0E7A  00C8               	movwf	_mod_value^(0+256)
  6264  0E7B  3F41               	moviw [1]fsr1
  6265  0E7C  2E92               	goto	L4
  6266  0E7D                     l5940:	
  6267                           ;main.c: 360: case 3:
  6268                           
  6269                           ;main.c: 359: break;
  6270                           
  6271                           ;main.c: 358: PORTCbits.RC4 = 0;
  6272                           
  6273                           
  6274                           ;main.c: 361: mod_value = mod3[mod_counter];
  6275  0E7D  0021               	movlb	1	; select bank1
  6276  0E7E  3567               	lslf	_mod_counter^(0+128),w
  6277  0E7F  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  6278  0E80  0086               	movwf	6
  6279  0E81  3002               	movlw	2	; select bank5/6
  6280  0E82  0087               	movwf	7
  6281  0E83  3F40               	moviw [0]fsr1
  6282  0E84  0022               	movlb	2	; select bank2
  6283  0E85  00C8               	movwf	_mod_value^(0+256)
  6284  0E86  3F41               	moviw [1]fsr1
  6285  0E87  2E92               	goto	L4
  6286  0E88                     l5944:	
  6287                           ;main.c: 364: case 4:
  6288                           
  6289                           ;main.c: 363: break;
  6290                           
  6291                           ;main.c: 362: PORTCbits.RC4 = 0;
  6292                           
  6293                           
  6294                           ;main.c: 365: mod_value = mod4[mod_counter];
  6295  0E88  0021               	movlb	1	; select bank1
  6296  0E89  3567               	lslf	_mod_counter^(0+128),w
  6297  0E8A  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  6298  0E8B  0086               	movwf	6
  6299  0E8C  3003               	movlw	3	; select bank6/7
  6300  0E8D  0087               	movwf	7
  6301  0E8E  3F40               	moviw [0]fsr1
  6302  0E8F  0022               	movlb	2	; select bank2
  6303  0E90  00C8               	movwf	_mod_value^(0+256)
  6304  0E91  3F41               	moviw [1]fsr1
  6305  0E92                     L4:	
  6306  0E92  00C9               	movwf	(_mod_value+1)^(0+256)
  6307  0E93  2EB5               	goto	l5956
  6308  0E94                     l5948:	
  6309                           ;main.c: 368: case 5:
  6310                           
  6311                           ;main.c: 367: break;
  6312                           
  6313                           ;main.c: 366: PORTCbits.RC4 = 0;
  6314                           
  6315                           
  6316                           ;main.c: 369: mod_value = mod5[mod_counter];
  6317  0E94  0021               	movlb	1	; select bank1
  6318  0E95  0868               	movf	(_mod_counter+1)^(0+128),w
  6319  0E96  00BB               	movwf	(??_main^(0+128)+1)
  6320  0E97  0867               	movf	_mod_counter^(0+128),w
  6321  0E98  00BA               	movwf	??_main^(0+128)
  6322  0E99  35BA               	lslf	??_main^(0+128),f
  6323  0E9A  0DBB               	rlf	(??_main^(0+128)+1),f
  6324  0E9B  3076               	movlw	118
  6325  0E9C  00BC               	movwf	(??_main+2)^(0+128)
  6326  0E9D  3025               	movlw	37
  6327  0E9E  00BD               	movwf	((??_main+2)^(0+128)+1)
  6328  0E9F  083A               	movf	??_main^(0+128),w
  6329  0EA0  073C               	addwf	(??_main+2)^(0+128),w
  6330  0EA1  0086               	movwf	6
  6331  0EA2  083B               	movf	(??_main+1)^(0+128),w
  6332  0EA3  3D3D               	addwfc	(??_main+3)^(0+128),w
  6333  0EA4  0087               	movwf	7
  6334  0EA5  3F40               	moviw [0]fsr1
  6335  0EA6  0022               	movlb	2	; select bank2
  6336  0EA7  00C8               	movwf	_mod_value^(0+256)
  6337  0EA8  3F41               	moviw [1]fsr1
  6338  0EA9  00C9               	movwf	(_mod_value+1)^(0+256)
  6339                           
  6340                           ;main.c: 370: adjusted_pot_value = 1275;
  6341  0EAA  30FB               	movlw	251
  6342  0EAB  0023               	movlb	3	; select bank3
  6343  0EAC  00EE               	movwf	main@adjusted_pot_value^(0+384)
  6344  0EAD  3004               	movlw	4
  6345  0EAE  00EF               	movwf	(main@adjusted_pot_value^(0+384)+1)
  6346                           
  6347                           ;main.c: 371: PORTCbits.RC4 = 1;
  6348  0EAF  0020               	movlb	0	; select bank0
  6349  0EB0  160E               	bsf	14,4	;volatile
  6350                           
  6351                           ;main.c: 372: break;
  6352  0EB1  2ED2               	goto	l5962
  6353  0EB2                     l5954:	
  6354                           ;main.c: 373: case 6:
  6355                           
  6356                           
  6357                           ;main.c: 374: mod_value = 0;
  6358  0EB2  0022               	movlb	2	; select bank2
  6359  0EB3  01C8               	clrf	_mod_value^(0+256)
  6360  0EB4  01C9               	clrf	(_mod_value+1)^(0+256)
  6361  0EB5                     l5956:	
  6362                           
  6363                           ;main.c: 375: PORTCbits.RC4 = 0;
  6364  0EB5  0020               	movlb	0	; select bank0
  6365  0EB6  120E               	bcf	14,4	;volatile
  6366                           
  6367                           ;main.c: 377: }
  6368                           
  6369                           ;main.c: 376: break;
  6370  0EB7  2ED2               	goto	l5962
  6371  0EB8                     l5960:	
  6372                           
  6373                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6374                           ; Switch size 1, requested type "space"
  6375                           ; Number of cases is 1, Range of values is 0 to 0
  6376                           ; switch strategies available:
  6377                           ; Name         Instructions Cycles
  6378                           ; simple_byte            4     3 (average)
  6379                           ; direct_byte            8     6 (fixed)
  6380                           ; jumptable            260     6 (fixed)
  6381                           ;	Chosen strategy is simple_byte
  6382  0EB8  0021               	movlb	1	; select bank1
  6383  0EB9  0852               	movf	(_bottom_push_state+1)^(0+128),w
  6384  0EBA  3A00               	xorlw	0	; case 0
  6385  0EBB  1903               	skipnz
  6386  0EBC  2EBE               	goto	l6248
  6387  0EBD  2ED2               	goto	l5962
  6388  0EBE                     l6248:	
  6389                           
  6390                           ; Switch size 1, requested type "space"
  6391                           ; Number of cases is 6, Range of values is 1 to 6
  6392                           ; switch strategies available:
  6393                           ; Name         Instructions Cycles
  6394                           ; simple_byte           19    10 (average)
  6395                           ; direct_byte           21     9 (fixed)
  6396                           ; jumptable            263     9 (fixed)
  6397                           ;	Chosen strategy is simple_byte
  6398  0EBE  0851               	movf	_bottom_push_state^(0+128),w
  6399  0EBF  3A01               	xorlw	1	; case 1
  6400  0EC0  1903               	skipnz
  6401  0EC1  2E5C               	goto	l5932
  6402  0EC2  3A03               	xorlw	3	; case 2
  6403  0EC3  1903               	skipnz
  6404  0EC4  2E72               	goto	l5936
  6405  0EC5  3A01               	xorlw	1	; case 3
  6406  0EC6  1903               	skipnz
  6407  0EC7  2E7D               	goto	l5940
  6408  0EC8  3A07               	xorlw	7	; case 4
  6409  0EC9  1903               	skipnz
  6410  0ECA  2E88               	goto	l5944
  6411  0ECB  3A01               	xorlw	1	; case 5
  6412  0ECC  1903               	skipnz
  6413  0ECD  2E94               	goto	l5948
  6414  0ECE  3A03               	xorlw	3	; case 6
  6415  0ECF  1903               	skipnz
  6416  0ED0  2EB2               	goto	l5954
  6417  0ED1  2ED2               	goto	l5962
  6418  0ED2                     l5962:	
  6419                           
  6420                           ;main.c: 379: if (mod_value > 80) {
  6421  0ED2  0022               	movlb	2	; select bank2
  6422  0ED3  0849               	movf	(_mod_value+1)^(0+256),w
  6423  0ED4  3A80               	xorlw	128
  6424  0ED5  0021               	movlb	1	; select bank1
  6425  0ED6  00BA               	movwf	??_main^(0+128)
  6426  0ED7  3080               	movlw	128
  6427  0ED8  023A               	subwf	??_main^(0+128),w
  6428  0ED9  1D03               	skipz
  6429  0EDA  2EDE               	goto	u6785
  6430  0EDB  3051               	movlw	81
  6431  0EDC  0022               	movlb	2	; select bank2
  6432  0EDD  0248               	subwf	_mod_value^(0+256),w
  6433  0EDE                     u6785:	
  6434  0EDE  1C03               	skipc
  6435  0EDF  2EE3               	goto	l330
  6436                           
  6437                           ;main.c: 380: LATDbits.LATD1 = 1;
  6438  0EE0  0022               	movlb	2	; select bank2
  6439  0EE1  148F               	bsf	15,1	;volatile
  6440                           
  6441                           ;main.c: 381: } else {
  6442  0EE2  2EE5               	goto	l5966
  6443  0EE3                     l330:	
  6444                           
  6445                           ;main.c: 382: LATDbits.LATD1 = 0;
  6446  0EE3  0022               	movlb	2	; select bank2
  6447  0EE4  108F               	bcf	15,1	;volatile
  6448  0EE5                     l5966:	
  6449                           
  6450                           ;main.c: 383: }
  6451                           ;main.c: 384: if (adjusted_pot_value > 1150) {
  6452  0EE5  0023               	movlb	3	; select bank3
  6453  0EE6  086F               	movf	(main@adjusted_pot_value+1)^(0+384),w
  6454  0EE7  3A80               	xorlw	128
  6455  0EE8  0021               	movlb	1	; select bank1
  6456  0EE9  00BA               	movwf	??_main^(0+128)
  6457  0EEA  3084               	movlw	132
  6458  0EEB  023A               	subwf	??_main^(0+128),w
  6459  0EEC  1D03               	skipz
  6460  0EED  2EF1               	goto	u6795
  6461  0EEE  307F               	movlw	127
  6462  0EEF  0023               	movlb	3	; select bank3
  6463  0EF0  026E               	subwf	main@adjusted_pot_value^(0+384),w
  6464  0EF1                     u6795:	
  6465  0EF1  1C03               	skipc
  6466  0EF2  2EF6               	goto	l332
  6467                           
  6468                           ;main.c: 385: LATDbits.LATD3 = 1;
  6469  0EF3  0022               	movlb	2	; select bank2
  6470  0EF4  158F               	bsf	15,3	;volatile
  6471                           
  6472                           ;main.c: 386: } else {
  6473  0EF5  2EF8               	goto	l5970
  6474  0EF6                     l332:	
  6475                           
  6476                           ;main.c: 387: LATDbits.LATD3 = 0;
  6477  0EF6  0022               	movlb	2	; select bank2
  6478  0EF7  118F               	bcf	15,3	;volatile
  6479  0EF8                     l5970:	
  6480                           
  6481                           ;main.c: 388: }
  6482                           ;main.c: 390: mod_value = modulation(mod_value, adjusted_pot_value);
  6483  0EF8  0849               	movf	(_mod_value+1)^(0+256),w
  6484  0EF9  0020               	movlb	0	; select bank0
  6485  0EFA  00B8               	movwf	modulation@x+1
  6486  0EFB  0022               	movlb	2	; select bank2
  6487  0EFC  0848               	movf	_mod_value^(0+256),w
  6488  0EFD  0020               	movlb	0	; select bank0
  6489  0EFE  00B7               	movwf	modulation@x
  6490  0EFF  0023               	movlb	3	; select bank3
  6491  0F00  086F               	movf	(main@adjusted_pot_value+1)^(0+384),w
  6492  0F01  0020               	movlb	0	; select bank0
  6493  0F02  00BA               	movwf	modulation@y+1
  6494  0F03  0023               	movlb	3	; select bank3
  6495  0F04  086E               	movf	main@adjusted_pot_value^(0+384),w
  6496  0F05  0020               	movlb	0	; select bank0
  6497  0F06  00B9               	movwf	modulation@y
  6498  0F07  3190  2035  318A   	fcall	_modulation
  6499  0F0A  0020               	movlb	0	; select bank0
  6500  0F0B  0838               	movf	?_modulation+1,w
  6501  0F0C  0022               	movlb	2	; select bank2
  6502  0F0D  00C9               	movwf	(_mod_value+1)^(0+256)
  6503  0F0E  0020               	movlb	0	; select bank0
  6504  0F0F  0837               	movf	?_modulation,w
  6505  0F10  0022               	movlb	2	; select bank2
  6506  0F11  00C8               	movwf	_mod_value^(0+256)
  6507                           
  6508                           ;main.c: 391: CCPR9 = mod_value / 2;
  6509  0F12  3002               	movlw	2
  6510  0F13  0020               	movlb	0	; select bank0
  6511  0F14  00A2               	movwf	___awdiv@divisor
  6512  0F15  3000               	movlw	0
  6513  0F16  00A3               	movwf	___awdiv@divisor+1
  6514  0F17  0022               	movlb	2	; select bank2
  6515  0F18  0849               	movf	(_mod_value+1)^(0+256),w
  6516  0F19  0020               	movlb	0	; select bank0
  6517  0F1A  00A5               	movwf	___awdiv@dividend+1
  6518  0F1B  0022               	movlb	2	; select bank2
  6519  0F1C  0848               	movf	_mod_value^(0+256),w
  6520  0F1D  0020               	movlb	0	; select bank0
  6521  0F1E  00A4               	movwf	___awdiv@dividend
  6522  0F1F  3194  243E  318A   	fcall	___awdiv
  6523  0F22  0020               	movlb	0	; select bank0
  6524  0F23  0823               	movf	?___awdiv+1,w
  6525  0F24  002C               	movlb	12	; select bank12
  6526  0F25  009B               	movwf	27	;volatile
  6527  0F26  0020               	movlb	0	; select bank0
  6528  0F27  0822               	movf	?___awdiv,w
  6529  0F28  002C               	movlb	12	; select bank12
  6530  0F29  009A               	movwf	26	;volatile
  6531                           
  6532                           ;main.c: 392: mod_timer = 0;
  6533  0F2A  3000               	movlw	0
  6534  0F2B  0022               	movlb	2	; select bank2
  6535  0F2C  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6536  0F2D  3000               	movlw	0
  6537  0F2E  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6538  0F2F  3000               	movlw	0
  6539  0F30  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6540  0F31  3000               	movlw	0
  6541  0F32  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6542                           
  6543                           ;main.c: 395: if (mod_value > 100) {
  6544  0F33  0849               	movf	(_mod_value+1)^(0+256),w
  6545  0F34  3A80               	xorlw	128
  6546  0F35  0021               	movlb	1	; select bank1
  6547  0F36  00BA               	movwf	??_main^(0+128)
  6548  0F37  3080               	movlw	128
  6549  0F38  023A               	subwf	??_main^(0+128),w
  6550  0F39  1D03               	skipz
  6551  0F3A  2F3E               	goto	u6805
  6552  0F3B  3065               	movlw	101
  6553  0F3C  0022               	movlb	2	; select bank2
  6554  0F3D  0248               	subwf	_mod_value^(0+256),w
  6555  0F3E                     u6805:	
  6556  0F3E  1C03               	skipc
  6557  0F3F  2F43               	goto	l334
  6558                           
  6559                           ;main.c: 396: LATDbits.LATD2 = 1;
  6560  0F40  0022               	movlb	2	; select bank2
  6561  0F41  150F               	bsf	15,2	;volatile
  6562                           
  6563                           ;main.c: 397: } else {
  6564  0F42  2F45               	goto	l5978
  6565  0F43                     l334:	
  6566                           
  6567                           ;main.c: 398: LATDbits.LATD2 = 0;
  6568  0F43  0022               	movlb	2	; select bank2
  6569  0F44  110F               	bcf	15,2	;volatile
  6570  0F45                     l5978:	
  6571                           
  6572                           ;main.c: 399: }
  6573                           ;main.c: 401: }
  6574                           ;main.c: 408: if (delay_time_changed == 1) {
  6575  0F45  035C               	decf	_delay_time_changed^(0+256),w
  6576  0F46  045D               	iorwf	(_delay_time_changed+1)^(0+256),w
  6577  0F47  1D03               	btfss	3,2
  6578  0F48  2AAE               	goto	l5828
  6579                           
  6580                           ;main.c: 409: delay_time = baseline_delay_time;
  6581  0F49  0021               	movlb	1	; select bank1
  6582  0F4A  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6583  0F4B  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6584  0F4C  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6585  0F4D  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6586  0F4E  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6587  0F4F  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6588  0F50  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6589  0F51  00CD               	movwf	_delay_time^(0+128)	;volatile
  6590                           
  6591                           ;main.c: 410: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6592  0F52  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6593  0F53  00AF               	movwf	(set_subdivision@x+1)^(0+128)
  6594  0F54  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
  6595  0F55  00AE               	movwf	set_subdivision@x^(0+128)
  6596  0F56  0858               	movf	(_top_push_state+1)^(0+128),w
  6597  0F57  00B1               	movwf	(set_subdivision@y+1)^(0+128)
  6598  0F58  0857               	movf	_top_push_state^(0+128),w
  6599  0F59  00B0               	movwf	set_subdivision@y^(0+128)
  6600  0F5A  3188  20B2  318A   	fcall	_set_subdivision
  6601  0F5D  0021               	movlb	1	; select bank1
  6602  0F5E  082E               	movf	?_set_subdivision^(0+128),w
  6603  0F5F  00CD               	movwf	_delay_time^(0+128)	;volatile
  6604  0F60  082F               	movf	(?_set_subdivision+1)^(0+128),w
  6605  0F61  00CE               	movwf	(_delay_time+1)^(0+128)	;volatile
  6606  0F62  0D89               	rlf	9,f
  6607  0F63  3B89               	subwfb	9,f
  6608  0F64  0989               	comf	9,f
  6609  0F65  00CF               	movwf	(_delay_time+2)^(0+128)	;volatile
  6610  0F66  00D0               	movwf	(_delay_time+3)^(0+128)	;volatile
  6611                           
  6612                           ;main.c: 411: reset_sub_delay = 1;
  6613  0F67  3001               	movlw	1
  6614  0F68  0022               	movlb	2	; select bank2
  6615  0F69  00CA               	movwf	_reset_sub_delay^(0+256)
  6616  0F6A  3000               	movlw	0
  6617  0F6B  00CB               	movwf	(_reset_sub_delay^(0+256)+1)
  6618                           
  6619                           ;main.c: 412: delayfound = 0;
  6620  0F6C  01B6               	clrf	_delayfound^(0+256)
  6621  0F6D  01B7               	clrf	(_delayfound+1)^(0+256)
  6622                           
  6623                           ;main.c: 413: delay_counter = 0;
  6624  0F6E  01B4               	clrf	_delay_counter^(0+256)	;volatile
  6625  0F6F  01B5               	clrf	(_delay_counter+1)^(0+256)	;volatile
  6626  0F70                     l5996:	
  6627                           ;main.c: 415: while (delayfound == 0) {
  6628                           
  6629  0F70  0836               	movf	_delayfound^(0+256),w
  6630  0F71  0437               	iorwf	(_delayfound+1)^(0+256),w
  6631  0F72  1D03               	btfss	3,2
  6632  0F73  2FC3               	goto	l5998
  6633                           
  6634                           ;main.c: 416: if (delayArray[delay_counter] <= delay_time * 2) {
  6635  0F74  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
  6636  0F75  0021               	movlb	1	; select bank1
  6637  0F76  00BB               	movwf	(??_main^(0+128)+1)
  6638  0F77  0022               	movlb	2	; select bank2
  6639  0F78  0834               	movf	_delay_counter^(0+256),w	;volatile
  6640  0F79  0021               	movlb	1	; select bank1
  6641  0F7A  00BA               	movwf	??_main^(0+128)
  6642  0F7B  35BA               	lslf	??_main^(0+128),f
  6643  0F7C  0DBB               	rlf	(??_main^(0+128)+1),f
  6644  0F7D  306E               	movlw	110
  6645  0F7E  00BC               	movwf	(??_main+2)^(0+128)
  6646  0F7F  3023               	movlw	35
  6647  0F80  00BD               	movwf	((??_main+2)^(0+128)+1)
  6648  0F81  083A               	movf	??_main^(0+128),w
  6649  0F82  073C               	addwf	(??_main+2)^(0+128),w
  6650  0F83  0086               	movwf	6
  6651  0F84  083B               	movf	(??_main+1)^(0+128),w
  6652  0F85  3D3D               	addwfc	(??_main+3)^(0+128),w
  6653  0F86  0087               	movwf	7
  6654  0F87  3F40               	moviw [0]fsr1
  6655  0F88  00BE               	movwf	(??_main+4)^(0+128)
  6656  0F89  3F41               	moviw [1]fsr1
  6657  0F8A  00BF               	movwf	((??_main+4)^(0+128)+1)
  6658  0F8B  083E               	movf	(??_main+4)^(0+128),w
  6659  0F8C  00C0               	movwf	(??_main+6)^(0+128)
  6660  0F8D  083F               	movf	(??_main+5)^(0+128),w
  6661  0F8E  00C1               	movwf	((??_main+6)^(0+128)+1)
  6662  0F8F  3000               	movlw	0
  6663  0F90  1BC1               	btfsc	((??_main+6)^(0+128)+1),7
  6664  0F91  30FF               	movlw	255
  6665  0F92  00C2               	movwf	((??_main+6)^(0+128)+2)
  6666  0F93  00C3               	movwf	((??_main+6)^(0+128)+3)
  6667  0F94  084D               	movf	_delay_time^(0+128),w	;volatile
  6668  0F95  00C4               	movwf	(??_main+10)^(0+128)
  6669  0F96  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6670  0F97  00C5               	movwf	((??_main+10)^(0+128)+1)
  6671  0F98  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6672  0F99  00C6               	movwf	((??_main+10)^(0+128)+2)
  6673  0F9A  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6674  0F9B  00C7               	movwf	((??_main+10)^(0+128)+3)
  6675  0F9C  3001               	movlw	1
  6676  0F9D                     u6825:	
  6677  0F9D  35C4               	lslf	(??_main+10)^(0+128),f
  6678  0F9E  0DC5               	rlf	((??_main+10)^(0+128)+1),f
  6679  0F9F  0DC6               	rlf	((??_main+10)^(0+128)+2),f
  6680  0FA0  0DC7               	rlf	((??_main+10)^(0+128)+3),f
  6681  0FA1  0B89               	decfsz	9,f
  6682  0FA2  2F9D               	goto	u6825
  6683  0FA3  0847               	movf	(??_main+13)^(0+128),w
  6684  0FA4  3A80               	xorlw	128
  6685  0FA5  00C8               	movwf	(??_main+14)^(0+128)
  6686  0FA6  0843               	movf	(??_main+9)^(0+128),w
  6687  0FA7  3A80               	xorlw	128
  6688  0FA8  0248               	subwf	(??_main+14)^(0+128),w
  6689  0FA9  1D03               	skipz
  6690  0FAA  2FB5               	goto	u6833
  6691  0FAB  0842               	movf	(??_main+8)^(0+128),w
  6692  0FAC  0246               	subwf	(??_main+12)^(0+128),w
  6693  0FAD  1D03               	skipz
  6694  0FAE  2FB5               	goto	u6833
  6695  0FAF  0841               	movf	(??_main+7)^(0+128),w
  6696  0FB0  0245               	subwf	(??_main+11)^(0+128),w
  6697  0FB1  1D03               	skipz
  6698  0FB2  2FB5               	goto	u6833
  6699  0FB3  0840               	movf	(??_main+6)^(0+128),w
  6700  0FB4  0244               	subwf	(??_main+10)^(0+128),w
  6701  0FB5                     u6833:	
  6702  0FB5  1C03               	skipc
  6703  0FB6  2FBD               	goto	l5994
  6704                           
  6705                           ;main.c: 417: delayfound = 1;
  6706  0FB7  3001               	movlw	1
  6707  0FB8  0022               	movlb	2	; select bank2
  6708  0FB9  00B6               	movwf	_delayfound^(0+256)
  6709  0FBA  3000               	movlw	0
  6710  0FBB  00B7               	movwf	(_delayfound^(0+256)+1)
  6711                           
  6712                           ;main.c: 421: } else {
  6713  0FBC  2F70               	goto	l5996
  6714  0FBD                     l5994:	
  6715                           
  6716                           ;main.c: 422: delay_counter++;
  6717  0FBD  3001               	movlw	1
  6718  0FBE  0022               	movlb	2	; select bank2
  6719  0FBF  07B4               	addwf	_delay_counter^(0+256),f	;volatile
  6720  0FC0  3000               	movlw	0
  6721  0FC1  3DB5               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  6722  0FC2  2F70               	goto	l5996
  6723  0FC3                     l5998:	
  6724                           
  6725                           ;main.c: 424: }
  6726                           ;main.c: 425: }
  6727                           ;main.c: 441: mod_delay_time = delay_time / 7.5;
  6728  0FC3  0021               	movlb	1	; select bank1
  6729  0FC4  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
  6730  0FC5  0020               	movlb	0	; select bank0
  6731  0FC6  00AD               	movwf	___altoft@c+3
  6732  0FC7  0021               	movlb	1	; select bank1
  6733  0FC8  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
  6734  0FC9  0020               	movlb	0	; select bank0
  6735  0FCA  00AC               	movwf	___altoft@c+2
  6736  0FCB  0021               	movlb	1	; select bank1
  6737  0FCC  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
  6738  0FCD  0020               	movlb	0	; select bank0
  6739  0FCE  00AB               	movwf	___altoft@c+1
  6740  0FCF  0021               	movlb	1	; select bank1
  6741  0FD0  084D               	movf	_delay_time^(0+128),w	;volatile
  6742  0FD1  0020               	movlb	0	; select bank0
  6743  0FD2  00AA               	movwf	___altoft@c
  6744  0FD3  319F  27C3  318A   	fcall	___altoft
  6745  0FD6  0020               	movlb	0	; select bank0
  6746  0FD7  082A               	movf	?___altoft,w
  6747  0FD8  00CA               	movwf	___ftdiv@f1
  6748  0FD9  082B               	movf	?___altoft+1,w
  6749  0FDA  00CB               	movwf	___ftdiv@f1+1
  6750  0FDB  082C               	movf	?___altoft+2,w
  6751  0FDC  00CC               	movwf	___ftdiv@f1+2
  6752  0FDD  3000               	movlw	0
  6753  0FDE  00C7               	movwf	___ftdiv@f2
  6754  0FDF  30F0               	movlw	240
  6755  0FE0  00C8               	movwf	___ftdiv@f2+1
  6756  0FE1  3040               	movlw	64
  6757  0FE2  00C9               	movwf	___ftdiv@f2+2
  6758  0FE3  3188  2009  318A   	fcall	___ftdiv
  6759  0FE6  0020               	movlb	0	; select bank0
  6760  0FE7  0847               	movf	?___ftdiv,w
  6761  0FE8  0021               	movlb	1	; select bank1
  6762  0FE9  00A0               	movwf	___fttol@f1^(0+128)
  6763  0FEA  0020               	movlb	0	; select bank0
  6764  0FEB  0848               	movf	?___ftdiv+1,w
  6765  0FEC  0021               	movlb	1	; select bank1
  6766  0FED  00A1               	movwf	(___fttol@f1+1)^(0+128)
  6767  0FEE  0020               	movlb	0	; select bank0
  6768  0FEF  0849               	movf	?___ftdiv+2,w
  6769  0FF0  0021               	movlb	1	; select bank1
  6770  0FF1  00A2               	movwf	(___fttol@f1+2)^(0+128)
  6771  0FF2  3196  263A  318A   	fcall	___fttol
  6772  0FF5  0021               	movlb	1	; select bank1
  6773  0FF6  0821               	movf	(?___fttol^(0+128)+1),w
  6774  0FF7  0022               	movlb	2	; select bank2
  6775  0FF8  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  6776  0FF9  0021               	movlb	1	; select bank1
  6777  0FFA  0820               	movf	?___fttol^(0+128),w
  6778  0FFB  0022               	movlb	2	; select bank2
  6779  0FFC  00E6               	movwf	_mod_delay_time^(0+256)
  6780                           
  6781                           ;main.c: 443: delay_time_changed = 0;
  6782  0FFD  01DC               	clrf	_delay_time_changed^(0+256)
  6783  0FFE  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  6784  0FFF  2AAE               	goto	l5828
  6785  1000                     __end_of_main:	
  6786                           
  6787                           	psect	text1
  6788  11EC                     __ptext1:	
  6789 ;; *************** function _update_mode *****************
  6790 ;; Defined at:
  6791 ;;		line 82 in file "tactiles.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;		None
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6808 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6809 ;;Total ram usage:        1 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    2
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_main
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _update_mode
  6821  11EC                     _update_mode:	
  6822                           
  6823                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6827  11EC  0020               	movlb	0	; select bank0
  6828  11ED  180E               	btfsc	14,0	;volatile
  6829  11EE  2A29               	goto	l5466
  6830                           
  6831                           ;tactiles.c: 88: debounce_mode2++;
  6832  11EF  3001               	movlw	1
  6833  11F0  0022               	movlb	2	; select bank2
  6834  11F1  07B2               	addwf	_debounce_mode2^(0+256),f
  6835  11F2  3000               	movlw	0
  6836  11F3  3DB3               	addwfc	(_debounce_mode2+1)^(0+256),f
  6837                           
  6838                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6839  11F4  0833               	movf	(_debounce_mode2+1)^(0+256),w
  6840  11F5  3A80               	xorlw	128
  6841  11F6  0020               	movlb	0	; select bank0
  6842  11F7  00A2               	movwf	??_update_mode
  6843  11F8  3080               	movlw	128
  6844  11F9  0222               	subwf	??_update_mode,w
  6845  11FA  1D03               	skipz
  6846  11FB  29FF               	goto	u5975
  6847  11FC  301A               	movlw	26
  6848  11FD  0022               	movlb	2	; select bank2
  6849  11FE  0232               	subwf	_debounce_mode2^(0+256),w
  6850  11FF                     u5975:	
  6851  11FF  1C03               	skipc
  6852  1200  0008               	return
  6853                           
  6854                           ;tactiles.c: 90: debounce_mode2 = 25;
  6855  1201  3019               	movlw	25
  6856  1202  0022               	movlb	2	; select bank2
  6857  1203  00B2               	movwf	_debounce_mode2^(0+256)
  6858  1204  3000               	movlw	0
  6859  1205  00B3               	movwf	(_debounce_mode2^(0+256)+1)
  6860                           
  6861                           ;tactiles.c: 91: mode2_state++;
  6862  1206  3001               	movlw	1
  6863  1207  0020               	movlb	0	; select bank0
  6864  1208  00A2               	movwf	??_update_mode
  6865  1209  0822               	movf	??_update_mode,w
  6866  120A  0022               	movlb	2	; select bank2
  6867  120B  07D5               	addwf	_mode2_state^(0+256),f
  6868                           
  6869                           ;tactiles.c: 92: if (mode2_state > 2) {
  6870  120C  3003               	movlw	3
  6871  120D  0255               	subwf	_mode2_state^(0+256),w
  6872  120E  1C03               	skipc
  6873  120F  2A1A               	goto	l5464
  6874                           
  6875                           ;tactiles.c: 93: mode2_state = 0;
  6876  1210  01D5               	clrf	_mode2_state^(0+256)
  6877                           
  6878                           ;tactiles.c: 94: }
  6879                           ;tactiles.c: 95: switch(mode2_state) {
  6880  1211  2A1A               	goto	l5464
  6881  1212                     l872:	
  6882                           ;tactiles.c: 96: case 0:
  6883                           
  6884                           
  6885                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6886  1212  108D               	bcf	13,1	;volatile
  6887  1213  2A18               	goto	L5
  6888  1214                     l874:	
  6889                           ;tactiles.c: 100: case 1:
  6890                           
  6891                           ;tactiles.c: 99: break;
  6892                           
  6893                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6894                           
  6895                           
  6896                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6897  1214  108D               	bcf	13,1	;volatile
  6898                           
  6899                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6900  1215  140D               	bsf	13,0	;volatile
  6901                           
  6902                           ;tactiles.c: 103: break;
  6903  1216  2A25               	goto	l876
  6904  1217                     l875:	
  6905                           ;tactiles.c: 104: case 2:
  6906                           
  6907                           
  6908                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6909  1217  148D               	bsf	13,1	;volatile
  6910  1218                     L5:	
  6911                           
  6912                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6913  1218  100D               	bcf	13,0	;volatile
  6914                           
  6915                           ;tactiles.c: 108: }
  6916                           
  6917                           ;tactiles.c: 107: break;
  6918  1219  2A25               	goto	l876
  6919  121A                     l5464:	
  6920  121A  0855               	movf	_mode2_state^(0+256),w
  6921                           
  6922                           ; Switch size 1, requested type "space"
  6923                           ; Number of cases is 3, Range of values is 0 to 2
  6924                           ; switch strategies available:
  6925                           ; Name         Instructions Cycles
  6926                           ; simple_byte           10     6 (average)
  6927                           ; direct_byte           12     6 (fixed)
  6928                           ; jumptable            260     6 (fixed)
  6929                           ;	Chosen strategy is simple_byte
  6930  121B  3A00               	xorlw	0	; case 0
  6931  121C  1903               	skipnz
  6932  121D  2A12               	goto	l872
  6933  121E  3A01               	xorlw	1	; case 1
  6934  121F  1903               	skipnz
  6935  1220  2A14               	goto	l874
  6936  1221  3A03               	xorlw	3	; case 2
  6937  1222  1903               	skipnz
  6938  1223  2A17               	goto	l875
  6939  1224  2A25               	goto	l876
  6940  1225                     l876:	
  6941                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6942                           
  6943  1225  0020               	movlb	0	; select bank0
  6944  1226  180E               	btfsc	14,0	;volatile
  6945  1227  0008               	return
  6946  1228  2A25               	goto	l876
  6947  1229                     l5466:	
  6948                           ;tactiles.c: 110: }
  6949                           ;tactiles.c: 111: }
  6950                           ;tactiles.c: 112: } else {
  6951                           
  6952                           
  6953                           ;tactiles.c: 113: debounce_mode2 = 0;
  6954  1229  0022               	movlb	2	; select bank2
  6955  122A  01B2               	clrf	_debounce_mode2^(0+256)
  6956  122B  01B3               	clrf	(_debounce_mode2+1)^(0+256)
  6957  122C  0008               	return
  6958  122D                     __end_of_update_mode:	
  6959                           
  6960                           	psect	text2
  6961  052E                     __ptext2:	
  6962 ;; *************** function _updateSwitchTap *****************
  6963 ;; Defined at:
  6964 ;;		line 48 in file "SwitchTap.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;		None
  6967 ;; Auto vars:     Size  Location     Type
  6968 ;;  tapCntDiviso    2   30[BANK0 ] int 
  6969 ;;  iCnt            1   32[BANK0 ] unsigned char 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  1    wreg      void 
  6972 ;; Registers used:
  6973 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6980 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6981 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6982 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6983 ;;Total ram usage:        9 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    5
  6986 ;; This function calls:
  6987 ;;		___aldiv
  6988 ;;		_setDoublePressState
  6989 ;;		_setLongTapState
  6990 ;; This function is called by:
  6991 ;;		_main
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           
  6996                           ;psect for function _updateSwitchTap
  6997  052E                     _updateSwitchTap:	
  6998                           
  6999                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  7000                           
  7001                           ;incstack = 0
  7002                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7003  052E  0020               	movlb	0	; select bank0
  7004  052F  01C0               	clrf	updateSwitchTap@iCnt
  7005                           
  7006                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  7007  0530  1810               	btfsc	16,0	;volatile
  7008  0531  2D39               	goto	l5594
  7009                           
  7010                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  7011  0532  0021               	movlb	1	; select bank1
  7012  0533  086B               	movf	_switchTap_pressed^(0+128),w
  7013  0534  1903               	btfsc	3,2
  7014  0535  2D44               	goto	l1211
  7015                           
  7016                           ;SwitchTap.c: 59: switchTap_pressed--;
  7017  0536  3001               	movlw	1
  7018  0537  02EB               	subwf	_switchTap_pressed^(0+128),f
  7019                           
  7020                           ;SwitchTap.c: 60: }
  7021                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  7022  0538  2D44               	goto	l1211
  7023  0539                     l5594:	
  7024  0539  3019               	movlw	25
  7025  053A  0021               	movlb	1	; select bank1
  7026  053B  026B               	subwf	_switchTap_pressed^(0+128),w
  7027  053C  1803               	skipnc
  7028  053D  2D44               	goto	l1211
  7029                           
  7030                           ;SwitchTap.c: 62: switchTap_pressed++;
  7031  053E  3001               	movlw	1
  7032  053F  0020               	movlb	0	; select bank0
  7033  0540  00B8               	movwf	??_updateSwitchTap
  7034  0541  0838               	movf	??_updateSwitchTap,w
  7035  0542  0021               	movlb	1	; select bank1
  7036  0543  07EB               	addwf	_switchTap_pressed^(0+128),f
  7037  0544                     l1211:	
  7038                           
  7039                           ;SwitchTap.c: 63: }
  7040                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  7041  0544  086B               	movf	_switchTap_pressed^(0+128),w
  7042  0545  1D03               	btfss	3,2
  7043  0546  2EFD               	goto	l5678
  7044                           
  7045                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  7046  0547  1BE2               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7047  0548  2DCE               	goto	l5638
  7048  0549  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7049  054A  1D03               	btfss	3,2
  7050  054B  2D55               	goto	l5600
  7051  054C  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7052  054D  1D03               	btfss	3,2
  7053  054E  2D55               	goto	l5600
  7054  054F  301B               	movlw	27
  7055  0550  025F               	subwf	_tap_timer^(0+128),w	;volatile
  7056  0551  3006               	movlw	6
  7057  0552  3B60               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7058  0553  1C03               	btfss	3,0
  7059  0554  2DCE               	goto	l5638
  7060  0555                     l5600:	
  7061                           
  7062                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  7063  0555  0022               	movlb	2	; select bank2
  7064  0556  0358               	decf	_switchTap_down^(0+256),w
  7065  0557  1903               	btfsc	3,2
  7066  0558  2D96               	goto	l5618
  7067                           
  7068                           ;SwitchTap.c: 78: switchTap_down = 1;
  7069  0559  01D8               	clrf	_switchTap_down^(0+256)
  7070  055A  0AD8               	incf	_switchTap_down^(0+256),f
  7071                           
  7072                           ;SwitchTap.c: 79: tap_timer = 0;
  7073  055B  3000               	movlw	0
  7074  055C  0021               	movlb	1	; select bank1
  7075  055D  00E2               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7076  055E  3000               	movlw	0
  7077  055F  00E1               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7078  0560  3000               	movlw	0
  7079  0561  00E0               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7080  0562  3000               	movlw	0
  7081  0563  00DF               	movwf	_tap_timer^(0+128)	;volatile
  7082                           
  7083                           ;SwitchTap.c: 80: tap_iteration = 1;
  7084  0564  3001               	movlw	1
  7085  0565  0022               	movlb	2	; select bank2
  7086  0566  00EA               	movwf	_tap_iteration^(0+256)
  7087  0567  3000               	movlw	0
  7088  0568  00EB               	movwf	(_tap_iteration^(0+256)+1)
  7089                           
  7090                           ;SwitchTap.c: 81: tap_total = 0;
  7091  0569  3000               	movlw	0
  7092  056A  0023               	movlb	3	; select bank3
  7093  056B  00E3               	movwf	(_tap_total+3)^(0+384)
  7094  056C  3000               	movlw	0
  7095  056D  00E2               	movwf	(_tap_total+2)^(0+384)
  7096  056E  3000               	movlw	0
  7097  056F  00E1               	movwf	(_tap_total+1)^(0+384)
  7098  0570  3000               	movlw	0
  7099  0571  00E0               	movwf	_tap_total^(0+384)
  7100                           
  7101                           ;SwitchTap.c: 82: delay_time_changed = 0;
  7102  0572  0022               	movlb	2	; select bank2
  7103  0573  01DC               	clrf	_delay_time_changed^(0+256)
  7104  0574  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  7105                           
  7106                           ;SwitchTap.c: 83: LATDbits.LATD0 = 0;
  7107  0575  100F               	bcf	15,0	;volatile
  7108                           
  7109                           ;SwitchTap.c: 85: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  7110  0576  0020               	movlb	0	; select bank0
  7111  0577  01C0               	clrf	updateSwitchTap@iCnt
  7112  0578  0AC0               	incf	updateSwitchTap@iCnt,f
  7113  0579                     l5616:	
  7114  0579  0840               	movf	updateSwitchTap@iCnt,w
  7115  057A  0021               	movlb	1	; select bank1
  7116  057B  025A               	subwf	_num_taps^(0+128),w
  7117  057C  1C03               	btfss	3,0
  7118  057D  2D96               	goto	l5618
  7119                           
  7120                           ;SwitchTap.c: 86: tap_history[iCnt] = 0;
  7121  057E  0020               	movlb	0	; select bank0
  7122  057F  0840               	movf	updateSwitchTap@iCnt,w
  7123  0580  00B8               	movwf	??_updateSwitchTap
  7124  0581  3001               	movlw	1
  7125  0582                     u6275:	
  7126  0582  35B8               	lslf	??_updateSwitchTap,f
  7127  0583  3EFF               	addlw	-1
  7128  0584  1D03               	skipz
  7129  0585  2D82               	goto	u6275
  7130  0586  3538               	lslf	??_updateSwitchTap,w
  7131  0587  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7132  0588  0086               	movwf	6
  7133  0589  3001               	movlw	1	; select bank3/4
  7134  058A  0087               	movwf	7
  7135  058B  3000               	movlw	0
  7136  058C  3FC0               	movwi [0]fsr1
  7137  058D  3000               	movlw	0
  7138  058E  3FC1               	movwi [1]fsr1
  7139  058F  3FC2               	movwi [2]fsr1
  7140  0590  3FC3               	movwi [3]fsr1
  7141  0591  3001               	movlw	1
  7142  0592  00B8               	movwf	??_updateSwitchTap
  7143  0593  0838               	movf	??_updateSwitchTap,w
  7144  0594  07C0               	addwf	updateSwitchTap@iCnt,f
  7145  0595  2D79               	goto	l5616
  7146  0596                     l5618:	
  7147                           
  7148                           ;SwitchTap.c: 87: }
  7149                           ;SwitchTap.c: 88: }
  7150                           ;SwitchTap.c: 91: if (longTap_start == 0) {
  7151  0596  0022               	movlb	2	; select bank2
  7152  0597  0853               	movf	_longTap_start^(0+256),w
  7153  0598  1D03               	btfss	3,2
  7154  0599  2DA1               	goto	l5624
  7155                           
  7156                           ;SwitchTap.c: 92: longTap_start = 1;
  7157  059A  01D3               	clrf	_longTap_start^(0+256)
  7158  059B  0AD3               	incf	_longTap_start^(0+256),f
  7159                           
  7160                           ;SwitchTap.c: 93: longTap_state = 0;
  7161  059C  0020               	movlb	0	; select bank0
  7162  059D  01EA               	clrf	_longTap_state	;volatile
  7163                           
  7164                           ;SwitchTap.c: 94: longTap_timer = 0;
  7165  059E  0022               	movlb	2	; select bank2
  7166  059F  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7167  05A0  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7168  05A1                     l5624:	
  7169                           
  7170                           ;SwitchTap.c: 95: }
  7171                           ;SwitchTap.c: 99: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  7172  05A1  0021               	movlb	1	; select bank1
  7173  05A2  0856               	movf	(_long_press_limit+1)^(0+128),w
  7174  05A3  0022               	movlb	2	; select bank2
  7175  05A4  0245               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  7176  05A5  1D03               	skipz
  7177  05A6  2DAB               	goto	u6305
  7178  05A7  0021               	movlb	1	; select bank1
  7179  05A8  0855               	movf	_long_press_limit^(0+128),w
  7180  05A9  0022               	movlb	2	; select bank2
  7181  05AA  0244               	subwf	_longTap_timer^(0+256),w	;volatile
  7182  05AB                     u6305:	
  7183  05AB  1C03               	skipc
  7184  05AC  0008               	return
  7185  05AD  0020               	movlb	0	; select bank0
  7186  05AE  086A               	movf	_longTap_state,w	;volatile
  7187  05AF  1D03               	btfss	3,2
  7188  05B0  0008               	return
  7189                           
  7190                           ;SwitchTap.c: 101: longTap_timer = long_press_limit;
  7191  05B1  0021               	movlb	1	; select bank1
  7192  05B2  0856               	movf	(_long_press_limit+1)^(0+128),w
  7193  05B3  0022               	movlb	2	; select bank2
  7194  05B4  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  7195  05B5  0021               	movlb	1	; select bank1
  7196  05B6  0855               	movf	_long_press_limit^(0+128),w
  7197  05B7  0022               	movlb	2	; select bank2
  7198  05B8  00C4               	movwf	_longTap_timer^(0+256)	;volatile
  7199                           
  7200                           ;SwitchTap.c: 102: LATBbits.LATB4 = 0;
  7201  05B9  120D               	bcf	13,4	;volatile
  7202                           
  7203                           ;SwitchTap.c: 104: if (feedback_start != 1) {
  7204  05BA  0021               	movlb	1	; select bank1
  7205  05BB  0369               	decf	_feedback_start^(0+128),w
  7206  05BC  1903               	btfsc	3,2
  7207  05BD  2DC6               	goto	l5636
  7208                           
  7209                           ;SwitchTap.c: 105: setLongTapState(1);
  7210  05BE  3001               	movlw	1
  7211  05BF  0020               	movlb	0	; select bank0
  7212  05C0  00A2               	movwf	setLongTapState@f_state
  7213  05C1  3000               	movlw	0
  7214  05C2  00A3               	movwf	setLongTapState@f_state+1
  7215  05C3  319E  261C         	fcall	_setLongTapState
  7216                           
  7217                           ;SwitchTap.c: 106: } else {
  7218  05C5  0008               	return
  7219  05C6                     l5636:	
  7220                           
  7221                           ;SwitchTap.c: 107: setDoublePressState(1);
  7222  05C6  3001               	movlw	1
  7223  05C7  0020               	movlb	0	; select bank0
  7224  05C8  00B4               	movwf	setDoublePressState@f_state
  7225  05C9  3000               	movlw	0
  7226  05CA  00B5               	movwf	setDoublePressState@f_state+1
  7227  05CB  319E  26FB         	fcall	_setDoublePressState
  7228                           
  7229                           ;SwitchTap.c: 108: }
  7230                           ;SwitchTap.c: 109: }
  7231                           ;SwitchTap.c: 111: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  7232  05CD  0008               	return
  7233  05CE                     l5638:	
  7234  05CE  0021               	movlb	1	; select bank1
  7235  05CF  1BE2               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7236  05D0  2DDD               	goto	l5640
  7237  05D1  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7238  05D2  1D03               	btfss	3,2
  7239  05D3  0008               	return
  7240  05D4  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7241  05D5  1D03               	btfss	3,2
  7242  05D6  0008               	return
  7243  05D7  301B               	movlw	27
  7244  05D8  025F               	subwf	_tap_timer^(0+128),w	;volatile
  7245  05D9  3006               	movlw	6
  7246  05DA  3B60               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7247  05DB  1803               	btfsc	3,0
  7248  05DC  0008               	return
  7249  05DD                     l5640:	
  7250  05DD  0020               	movlb	0	; select bank0
  7251  05DE  086A               	movf	_longTap_state,w	;volatile
  7252  05DF  1D03               	btfss	3,2
  7253  05E0  0008               	return
  7254  05E1  0022               	movlb	2	; select bank2
  7255  05E2  0358               	decf	_switchTap_down^(0+256),w
  7256  05E3  1903               	btfsc	3,2
  7257  05E4  0008               	return
  7258                           
  7259                           ;SwitchTap.c: 113: switchTap_down = 1;
  7260  05E5  01D8               	clrf	_switchTap_down^(0+256)
  7261  05E6  0AD8               	incf	_switchTap_down^(0+256),f
  7262                           
  7263                           ;SwitchTap.c: 114: if (tap_timer >= 1172) {
  7264  05E7  0021               	movlb	1	; select bank1
  7265  05E8  1BE2               	btfsc	(_tap_timer+3)^(0+128),7	;volatile
  7266  05E9  2DFE               	goto	l1225
  7267  05EA  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7268  05EB  1D03               	btfss	3,2
  7269  05EC  2DF6               	goto	l5648
  7270  05ED  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7271  05EE  1D03               	btfss	3,2
  7272  05EF  2DF6               	goto	l5648
  7273  05F0  3094               	movlw	148
  7274  05F1  025F               	subwf	_tap_timer^(0+128),w	;volatile
  7275  05F2  3004               	movlw	4
  7276  05F3  3B60               	subwfb	(_tap_timer+1)^(0+128),w	;volatile
  7277  05F4  1C03               	btfss	3,0
  7278  05F5  2DFE               	goto	l1225
  7279  05F6                     l5648:	
  7280                           
  7281                           ;SwitchTap.c: 115: tap_timer = 1172;
  7282  05F6  3000               	movlw	0
  7283  05F7  00E2               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7284  05F8  3000               	movlw	0
  7285  05F9  00E1               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7286  05FA  3004               	movlw	4
  7287  05FB  00E0               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7288  05FC  3094               	movlw	148
  7289  05FD  00DF               	movwf	_tap_timer^(0+128)	;volatile
  7290  05FE                     l1225:	
  7291                           
  7292                           ;SwitchTap.c: 116: }
  7293                           ;SwitchTap.c: 118: int tapCntDivisor = num_taps;
  7294  05FE  085A               	movf	_num_taps^(0+128),w
  7295  05FF  0020               	movlb	0	; select bank0
  7296  0600  00B8               	movwf	??_updateSwitchTap
  7297  0601  01B9               	clrf	??_updateSwitchTap+1
  7298  0602  0838               	movf	??_updateSwitchTap,w
  7299  0603  00BE               	movwf	updateSwitchTap@tapCntDivisor
  7300  0604  0839               	movf	??_updateSwitchTap+1,w
  7301  0605  00BF               	movwf	updateSwitchTap@tapCntDivisor+1
  7302                           
  7303                           ;SwitchTap.c: 119: if (tap_iteration <= num_taps) {
  7304  0606  0022               	movlb	2	; select bank2
  7305  0607  086B               	movf	(_tap_iteration+1)^(0+256),w
  7306  0608  3A80               	xorlw	128
  7307  0609  3C80               	sublw	128
  7308  060A  1D03               	skipz
  7309  060B  2E0F               	goto	u6375
  7310  060C  086A               	movf	_tap_iteration^(0+256),w
  7311  060D  0021               	movlb	1	; select bank1
  7312  060E  025A               	subwf	_num_taps^(0+128),w
  7313  060F                     u6375:	
  7314  060F  1C03               	skipc
  7315  0610  2E41               	goto	l5656
  7316                           
  7317                           ;SwitchTap.c: 120: tap_total += tap_timer;
  7318  0611  0021               	movlb	1	; select bank1
  7319  0612  085F               	movf	_tap_timer^(0+128),w	;volatile
  7320  0613  0023               	movlb	3	; select bank3
  7321  0614  07E0               	addwf	_tap_total^(0+384),f
  7322  0615  0021               	movlb	1	; select bank1
  7323  0616  0860               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7324  0617  0023               	movlb	3	; select bank3
  7325  0618  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7326  0619  0021               	movlb	1	; select bank1
  7327  061A  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7328  061B  0023               	movlb	3	; select bank3
  7329  061C  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7330  061D  0021               	movlb	1	; select bank1
  7331  061E  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7332  061F  0023               	movlb	3	; select bank3
  7333  0620  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7334                           
  7335                           ;SwitchTap.c: 121: tap_history[tap_iteration] = tap_timer;
  7336  0621  0022               	movlb	2	; select bank2
  7337  0622  086A               	movf	_tap_iteration^(0+256),w
  7338  0623  0020               	movlb	0	; select bank0
  7339  0624  00B8               	movwf	??_updateSwitchTap
  7340  0625  3001               	movlw	1
  7341  0626                     u6385:	
  7342  0626  35B8               	lslf	??_updateSwitchTap,f
  7343  0627  3EFF               	addlw	-1
  7344  0628  1D03               	skipz
  7345  0629  2E26               	goto	u6385
  7346  062A  3538               	lslf	??_updateSwitchTap,w
  7347  062B  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7348  062C  0086               	movwf	6
  7349  062D  3001               	movlw	1	; select bank3/4
  7350  062E  0087               	movwf	7
  7351  062F  0021               	movlb	1	; select bank1
  7352  0630  085F               	movf	_tap_timer^(0+128),w	;volatile
  7353  0631  3FC0               	movwi [0]fsr1
  7354  0632  0860               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7355  0633  3FC1               	movwi [1]fsr1
  7356  0634  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7357  0635  3FC2               	movwi [2]fsr1
  7358  0636  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7359  0637  3FC3               	movwi [3]fsr1
  7360                           
  7361                           ;SwitchTap.c: 122: tapCntDivisor = tap_iteration;
  7362  0638  0022               	movlb	2	; select bank2
  7363  0639  086B               	movf	(_tap_iteration+1)^(0+256),w
  7364  063A  0020               	movlb	0	; select bank0
  7365  063B  00BF               	movwf	updateSwitchTap@tapCntDivisor+1
  7366  063C  0022               	movlb	2	; select bank2
  7367  063D  086A               	movf	_tap_iteration^(0+256),w
  7368  063E  0020               	movlb	0	; select bank0
  7369  063F  00BE               	movwf	updateSwitchTap@tapCntDivisor
  7370                           
  7371                           ;SwitchTap.c: 123: } else {
  7372  0640  2EBD               	goto	l5670
  7373  0641                     l5656:	
  7374                           
  7375                           ;SwitchTap.c: 124: tap_total = 0;
  7376  0641  3000               	movlw	0
  7377  0642  0023               	movlb	3	; select bank3
  7378  0643  00E3               	movwf	(_tap_total+3)^(0+384)
  7379  0644  3000               	movlw	0
  7380  0645  00E2               	movwf	(_tap_total+2)^(0+384)
  7381  0646  3000               	movlw	0
  7382  0647  00E1               	movwf	(_tap_total+1)^(0+384)
  7383  0648  3000               	movlw	0
  7384  0649  00E0               	movwf	_tap_total^(0+384)
  7385                           
  7386                           ;SwitchTap.c: 125: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7387  064A  0020               	movlb	0	; select bank0
  7388  064B  01C0               	clrf	updateSwitchTap@iCnt
  7389  064C  0AC0               	incf	updateSwitchTap@iCnt,f
  7390  064D                     l5664:	
  7391  064D  0021               	movlb	1	; select bank1
  7392  064E  085A               	movf	_num_taps^(0+128),w
  7393  064F  0020               	movlb	0	; select bank0
  7394  0650  0240               	subwf	updateSwitchTap@iCnt,w
  7395  0651  1803               	btfsc	3,0
  7396  0652  2E97               	goto	l5666
  7397                           
  7398                           ;SwitchTap.c: 126: tap_history[iCnt] = tap_history[iCnt + 1];
  7399  0653  0840               	movf	updateSwitchTap@iCnt,w
  7400  0654  00B8               	movwf	??_updateSwitchTap
  7401  0655  3001               	movlw	1
  7402  0656                     u6395:	
  7403  0656  35B8               	lslf	??_updateSwitchTap,f
  7404  0657  3EFF               	addlw	-1
  7405  0658  1D03               	skipz
  7406  0659  2E56               	goto	u6395
  7407  065A  3538               	lslf	??_updateSwitchTap,w
  7408  065B  3E04               	addlw	4
  7409  065C  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7410  065D  0086               	movwf	6
  7411  065E  3001               	movlw	1	; select bank3/4
  7412  065F  0087               	movwf	7
  7413  0660  3F40               	moviw [0]fsr1
  7414  0661  00B9               	movwf	??_updateSwitchTap+1
  7415  0662  3F41               	moviw [1]fsr1
  7416  0663  00BA               	movwf	??_updateSwitchTap+2
  7417  0664  3F42               	moviw [2]fsr1
  7418  0665  00BB               	movwf	??_updateSwitchTap+3
  7419  0666  3F43               	moviw [3]fsr1
  7420  0667  00BC               	movwf	??_updateSwitchTap+4
  7421  0668  0840               	movf	updateSwitchTap@iCnt,w
  7422  0669  00BD               	movwf	??_updateSwitchTap+5
  7423  066A  3001               	movlw	1
  7424  066B                     u6405:	
  7425  066B  35BD               	lslf	??_updateSwitchTap+5,f
  7426  066C  3EFF               	addlw	-1
  7427  066D  1D03               	skipz
  7428  066E  2E6B               	goto	u6405
  7429  066F  353D               	lslf	??_updateSwitchTap+5,w
  7430  0670  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7431  0671  0086               	movwf	6
  7432  0672  3001               	movlw	1	; select bank3/4
  7433  0673  0087               	movwf	7
  7434  0674  0839               	movf	??_updateSwitchTap+1,w
  7435  0675  3FC0               	movwi [0]fsr1
  7436  0676  083A               	movf	??_updateSwitchTap+2,w
  7437  0677  3FC1               	movwi [1]fsr1
  7438  0678  083B               	movf	??_updateSwitchTap+3,w
  7439  0679  3FC2               	movwi [2]fsr1
  7440  067A  083C               	movf	??_updateSwitchTap+4,w
  7441  067B  3FC3               	movwi [3]fsr1
  7442                           
  7443                           ;SwitchTap.c: 127: tap_total += tap_history[iCnt];
  7444  067C  0840               	movf	updateSwitchTap@iCnt,w
  7445  067D  00B8               	movwf	??_updateSwitchTap
  7446  067E  3001               	movlw	1
  7447  067F                     u6415:	
  7448  067F  35B8               	lslf	??_updateSwitchTap,f
  7449  0680  3EFF               	addlw	-1
  7450  0681  1D03               	skipz
  7451  0682  2E7F               	goto	u6415
  7452  0683  3538               	lslf	??_updateSwitchTap,w
  7453  0684  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7454  0685  0086               	movwf	6
  7455  0686  3001               	movlw	1	; select bank3/4
  7456  0687  0087               	movwf	7
  7457  0688  3F40               	moviw [0]fsr1
  7458  0689  0023               	movlb	3	; select bank3
  7459  068A  07E0               	addwf	_tap_total^(0+384),f
  7460  068B  3F41               	moviw [1]fsr1
  7461  068C  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7462  068D  3F42               	moviw [2]fsr1
  7463  068E  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7464  068F  3F43               	moviw [3]fsr1
  7465  0690  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7466  0691  3001               	movlw	1
  7467  0692  0020               	movlb	0	; select bank0
  7468  0693  00B8               	movwf	??_updateSwitchTap
  7469  0694  0838               	movf	??_updateSwitchTap,w
  7470  0695  07C0               	addwf	updateSwitchTap@iCnt,f
  7471  0696  2E4D               	goto	l5664
  7472  0697                     l5666:	
  7473                           
  7474                           ;SwitchTap.c: 128: }
  7475                           ;SwitchTap.c: 129: tap_history[num_taps] = tap_timer;
  7476  0697  0021               	movlb	1	; select bank1
  7477  0698  085A               	movf	_num_taps^(0+128),w
  7478  0699  0020               	movlb	0	; select bank0
  7479  069A  00B8               	movwf	??_updateSwitchTap
  7480  069B  3001               	movlw	1
  7481  069C                     u6435:	
  7482  069C  35B8               	lslf	??_updateSwitchTap,f
  7483  069D  3EFF               	addlw	-1
  7484  069E  1D03               	skipz
  7485  069F  2E9C               	goto	u6435
  7486  06A0  3538               	lslf	??_updateSwitchTap,w
  7487  06A1  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7488  06A2  0086               	movwf	6
  7489  06A3  3001               	movlw	1	; select bank3/4
  7490  06A4  0087               	movwf	7
  7491  06A5  0021               	movlb	1	; select bank1
  7492  06A6  085F               	movf	_tap_timer^(0+128),w	;volatile
  7493  06A7  3FC0               	movwi [0]fsr1
  7494  06A8  0860               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7495  06A9  3FC1               	movwi [1]fsr1
  7496  06AA  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7497  06AB  3FC2               	movwi [2]fsr1
  7498  06AC  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7499  06AD  3FC3               	movwi [3]fsr1
  7500                           
  7501                           ;SwitchTap.c: 130: tap_total += tap_timer;
  7502  06AE  085F               	movf	_tap_timer^(0+128),w	;volatile
  7503  06AF  0023               	movlb	3	; select bank3
  7504  06B0  07E0               	addwf	_tap_total^(0+384),f
  7505  06B1  0021               	movlb	1	; select bank1
  7506  06B2  0860               	movf	(_tap_timer+1)^(0+128),w	;volatile
  7507  06B3  0023               	movlb	3	; select bank3
  7508  06B4  3DE1               	addwfc	(_tap_total+1)^(0+384),f
  7509  06B5  0021               	movlb	1	; select bank1
  7510  06B6  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
  7511  06B7  0023               	movlb	3	; select bank3
  7512  06B8  3DE2               	addwfc	(_tap_total+2)^(0+384),f
  7513  06B9  0021               	movlb	1	; select bank1
  7514  06BA  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
  7515  06BB  0023               	movlb	3	; select bank3
  7516  06BC  3DE3               	addwfc	(_tap_total+3)^(0+384),f
  7517  06BD                     l5670:	
  7518                           
  7519                           ;SwitchTap.c: 131: }
  7520                           ;SwitchTap.c: 133: baseline_delay_time = tap_total / tapCntDivisor;
  7521  06BD  0020               	movlb	0	; select bank0
  7522  06BE  083E               	movf	updateSwitchTap@tapCntDivisor,w
  7523  06BF  00A8               	movwf	___aldiv@divisor
  7524  06C0  083F               	movf	updateSwitchTap@tapCntDivisor+1,w
  7525  06C1  00A9               	movwf	___aldiv@divisor+1
  7526  06C2  0D89               	rlf	9,f
  7527  06C3  3B89               	subwfb	9,f
  7528  06C4  0989               	comf	9,f
  7529  06C5  00AA               	movwf	___aldiv@divisor+2
  7530  06C6  00AB               	movwf	___aldiv@divisor+3
  7531  06C7  0023               	movlb	3	; select bank3
  7532  06C8  0863               	movf	(_tap_total+3)^(0+384),w
  7533  06C9  0020               	movlb	0	; select bank0
  7534  06CA  00AF               	movwf	___aldiv@dividend+3
  7535  06CB  0023               	movlb	3	; select bank3
  7536  06CC  0862               	movf	(_tap_total+2)^(0+384),w
  7537  06CD  0020               	movlb	0	; select bank0
  7538  06CE  00AE               	movwf	___aldiv@dividend+2
  7539  06CF  0023               	movlb	3	; select bank3
  7540  06D0  0861               	movf	(_tap_total+1)^(0+384),w
  7541  06D1  0020               	movlb	0	; select bank0
  7542  06D2  00AD               	movwf	___aldiv@dividend+1
  7543  06D3  0023               	movlb	3	; select bank3
  7544  06D4  0860               	movf	_tap_total^(0+384),w
  7545  06D5  0020               	movlb	0	; select bank0
  7546  06D6  00AC               	movwf	___aldiv@dividend
  7547  06D7  3195  25B8         	fcall	___aldiv
  7548  06D9  0020               	movlb	0	; select bank0
  7549  06DA  082B               	movf	?___aldiv+3,w
  7550  06DB  0021               	movlb	1	; select bank1
  7551  06DC  00CC               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7552  06DD  0020               	movlb	0	; select bank0
  7553  06DE  082A               	movf	?___aldiv+2,w
  7554  06DF  0021               	movlb	1	; select bank1
  7555  06E0  00CB               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7556  06E1  0020               	movlb	0	; select bank0
  7557  06E2  0829               	movf	?___aldiv+1,w
  7558  06E3  0021               	movlb	1	; select bank1
  7559  06E4  00CA               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7560  06E5  0020               	movlb	0	; select bank0
  7561  06E6  0828               	movf	?___aldiv,w
  7562  06E7  0021               	movlb	1	; select bank1
  7563  06E8  00C9               	movwf	_baseline_delay_time^(0+128)	;volatile
  7564                           
  7565                           ;SwitchTap.c: 134: delay_time_changed = 1;
  7566  06E9  3001               	movlw	1
  7567  06EA  0022               	movlb	2	; select bank2
  7568  06EB  00DC               	movwf	_delay_time_changed^(0+256)
  7569  06EC  3000               	movlw	0
  7570  06ED  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  7571                           
  7572                           ;SwitchTap.c: 135: tap_timer = 0;
  7573  06EE  3000               	movlw	0
  7574  06EF  0021               	movlb	1	; select bank1
  7575  06F0  00E2               	movwf	(_tap_timer+3)^(0+128)	;volatile
  7576  06F1  3000               	movlw	0
  7577  06F2  00E1               	movwf	(_tap_timer+2)^(0+128)	;volatile
  7578  06F3  3000               	movlw	0
  7579  06F4  00E0               	movwf	(_tap_timer+1)^(0+128)	;volatile
  7580  06F5  3000               	movlw	0
  7581  06F6  00DF               	movwf	_tap_timer^(0+128)	;volatile
  7582                           
  7583                           ;SwitchTap.c: 137: tap_iteration++;
  7584  06F7  3001               	movlw	1
  7585  06F8  0022               	movlb	2	; select bank2
  7586  06F9  07EA               	addwf	_tap_iteration^(0+256),f
  7587  06FA  3000               	movlw	0
  7588  06FB  3DEB               	addwfc	(_tap_iteration+1)^(0+256),f
  7589                           
  7590                           ;SwitchTap.c: 138: }
  7591                           ;SwitchTap.c: 140: } else if (switchTap_pressed >= 25) {
  7592  06FC  0008               	return
  7593  06FD                     l5678:	
  7594  06FD  3019               	movlw	25
  7595  06FE  0021               	movlb	1	; select bank1
  7596  06FF  026B               	subwf	_switchTap_pressed^(0+128),w
  7597  0700  1C03               	skipc
  7598  0701  0008               	return
  7599                           
  7600                           ;SwitchTap.c: 141: switchTap_down = 0;
  7601  0702  0022               	movlb	2	; select bank2
  7602  0703  01D8               	clrf	_switchTap_down^(0+256)
  7603                           
  7604                           ;SwitchTap.c: 142: switchTap_state = 0;
  7605  0704  01EE               	clrf	_switchTap_state^(0+256)
  7606                           
  7607                           ;SwitchTap.c: 148: setLongTapState(0);
  7608  0705  3000               	movlw	0
  7609  0706  0020               	movlb	0	; select bank0
  7610  0707  00A2               	movwf	setLongTapState@f_state
  7611  0708  00A3               	movwf	setLongTapState@f_state+1
  7612  0709  319E  261C         	fcall	_setLongTapState
  7613                           
  7614                           ;SwitchTap.c: 150: longTap_timer = 0;
  7615  070B  0022               	movlb	2	; select bank2
  7616  070C  01C4               	clrf	_longTap_timer^(0+256)	;volatile
  7617  070D  01C5               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  7618                           
  7619                           ;SwitchTap.c: 151: longTap_start = 0;
  7620  070E  01D3               	clrf	_longTap_start^(0+256)
  7621                           
  7622                           ;SwitchTap.c: 153: switchTap_pressed = 25;
  7623  070F  3019               	movlw	25
  7624  0710  0020               	movlb	0	; select bank0
  7625  0711  00B8               	movwf	??_updateSwitchTap
  7626  0712  0838               	movf	??_updateSwitchTap,w
  7627  0713  0021               	movlb	1	; select bank1
  7628  0714  00EB               	movwf	_switchTap_pressed^(0+128)
  7629  0715  0008               	return
  7630  0716                     __end_of_updateSwitchTap:	
  7631                           
  7632                           	psect	text3
  7633  1E1C                     __ptext3:	
  7634 ;; *************** function _setLongTapState *****************
  7635 ;; Defined at:
  7636 ;;		line 168 in file "SwitchTap.c"
  7637 ;; Parameters:    Size  Location     Type
  7638 ;;  f_state         2    2[BANK0 ] int 
  7639 ;; Auto vars:     Size  Location     Type
  7640 ;;		None
  7641 ;; Return value:  Size  Location     Type
  7642 ;;                  1    wreg      void 
  7643 ;; Registers used:
  7644 ;;		wreg, status,0
  7645 ;; Tracked objects:
  7646 ;;		On entry : 0/0
  7647 ;;		On exit  : 0/0
  7648 ;;		Unchanged: 0/0
  7649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7650 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7652 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7654 ;;Total ram usage:        4 bytes
  7655 ;; Hardware stack levels used:    1
  7656 ;; Hardware stack levels required when called:    2
  7657 ;; This function calls:
  7658 ;;		Nothing
  7659 ;; This function is called by:
  7660 ;;		_updateSwitchTap
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           
  7665                           ;psect for function _setLongTapState
  7666  1E1C                     _setLongTapState:	
  7667                           
  7668                           ;SwitchTap.c: 169: if (longTap_state == f_state) {return;}
  7669                           
  7670                           ;incstack = 0
  7671                           ; Regs used in _setLongTapState: [wreg+status,0]
  7672  1E1C  0020               	movlb	0	; select bank0
  7673  1E1D  086A               	movf	_longTap_state,w	;volatile
  7674  1E1E  00A4               	movwf	??_setLongTapState
  7675  1E1F  01A5               	clrf	??_setLongTapState+1
  7676  1E20  0823               	movf	setLongTapState@f_state+1,w
  7677  1E21  0625               	xorwf	??_setLongTapState+1,w
  7678  1E22  1D03               	skipz
  7679  1E23  2E26               	goto	u5095
  7680  1E24  0822               	movf	setLongTapState@f_state,w
  7681  1E25  0624               	xorwf	??_setLongTapState,w
  7682  1E26                     u5095:	
  7683  1E26  1903               	btfsc	3,2
  7684  1E27  0008               	return
  7685                           
  7686                           ;SwitchTap.c: 170: longTap_state = f_state;
  7687  1E28  0822               	movf	setLongTapState@f_state,w
  7688  1E29  00A4               	movwf	??_setLongTapState
  7689  1E2A  0824               	movf	??_setLongTapState,w
  7690  1E2B  00EA               	movwf	_longTap_state	;volatile
  7691                           
  7692                           ;SwitchTap.c: 171: LATBbits.LATB5 = f_state;
  7693  1E2C  0C22               	rrf	setLongTapState@f_state,w
  7694  1E2D  0022               	movlb	2	; select bank2
  7695  1E2E  1C03               	skipc
  7696  1E2F  128D               	bcf	13,5	;volatile
  7697  1E30  1803               	skipnc
  7698  1E31  168D               	bsf	13,5	;volatile
  7699  1E32  0008               	return
  7700  1E33                     __end_of_setLongTapState:	
  7701                           
  7702                           	psect	text4
  7703  0716                     __ptext4:	
  7704 ;; *************** function _updateSwitchBypass *****************
  7705 ;; Defined at:
  7706 ;;		line 34 in file "SwitchBypass.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;		None
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;		None
  7711 ;; Return value:  Size  Location     Type
  7712 ;;                  1    wreg      void 
  7713 ;; Registers used:
  7714 ;;		wreg, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7723 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7724 ;;Total ram usage:        2 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    5
  7727 ;; This function calls:
  7728 ;;		_setDoublePressState
  7729 ;;		_setFeedbackState
  7730 ;;		_setSwitchBypassState
  7731 ;; This function is called by:
  7732 ;;		_main
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           
  7737                           ;psect for function _updateSwitchBypass
  7738  0716                     _updateSwitchBypass:	
  7739                           
  7740                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7741                           
  7742                           ;incstack = 0
  7743                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7744  0716  0020               	movlb	0	; select bank0
  7745  0717  1890               	btfsc	16,1	;volatile
  7746  0718  2F2C               	goto	l5506
  7747                           
  7748                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7749  0719  0022               	movlb	2	; select bank2
  7750  071A  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7751  071B  3A80               	xorlw	128
  7752  071C  0020               	movlb	0	; select bank0
  7753  071D  00B8               	movwf	??_updateSwitchBypass
  7754  071E  3080               	movlw	128
  7755  071F  0238               	subwf	??_updateSwitchBypass,w
  7756  0720  1D03               	skipz
  7757  0721  2F25               	goto	u6015
  7758  0722  3001               	movlw	1
  7759  0723  0022               	movlb	2	; select bank2
  7760  0724  024C               	subwf	_switchBypass_pressed^(0+256),w
  7761  0725                     u6015:	
  7762  0725  1C03               	skipc
  7763  0726  2F3F               	goto	l5510
  7764                           
  7765                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7766  0727  30FF               	movlw	255
  7767  0728  0022               	movlb	2	; select bank2
  7768  0729  07CC               	addwf	_switchBypass_pressed^(0+256),f
  7769  072A  30FF               	movlw	255
  7770  072B  2F3E               	goto	L6
  7771  072C                     l5506:	
  7772                           ;SwitchBypass.c: 44: }
  7773                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7774                           
  7775  072C  0022               	movlb	2	; select bank2
  7776  072D  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7777  072E  3A80               	xorlw	128
  7778  072F  0020               	movlb	0	; select bank0
  7779  0730  00B8               	movwf	??_updateSwitchBypass
  7780  0731  3080               	movlw	128
  7781  0732  0238               	subwf	??_updateSwitchBypass,w
  7782  0733  1D03               	skipz
  7783  0734  2F38               	goto	u6025
  7784  0735  3019               	movlw	25
  7785  0736  0022               	movlb	2	; select bank2
  7786  0737  024C               	subwf	_switchBypass_pressed^(0+256),w
  7787  0738                     u6025:	
  7788  0738  1803               	skipnc
  7789  0739  2F3F               	goto	l5510
  7790                           
  7791                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7792  073A  3001               	movlw	1
  7793  073B  0022               	movlb	2	; select bank2
  7794  073C  07CC               	addwf	_switchBypass_pressed^(0+256),f
  7795  073D  3000               	movlw	0
  7796  073E                     L6:	
  7797  073E  3DCD               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7798  073F                     l5510:	
  7799                           
  7800                           ;SwitchBypass.c: 47: }
  7801                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7802  073F  0022               	movlb	2	; select bank2
  7803  0740  084C               	movf	_switchBypass_pressed^(0+256),w
  7804  0741  044D               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7805  0742  1D03               	btfss	3,2
  7806  0743  2F9D               	goto	l5550
  7807                           
  7808                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7809  0744  0021               	movlb	1	; select bank1
  7810  0745  0869               	movf	_feedback_start^(0+128),w
  7811  0746  1D03               	btfss	3,2
  7812  0747  2F4D               	goto	l5518
  7813                           
  7814                           ;SwitchBypass.c: 57: feedback_start = 1;
  7815  0748  01E9               	clrf	_feedback_start^(0+128)
  7816  0749  0AE9               	incf	_feedback_start^(0+128),f
  7817                           
  7818                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7819  074A  0022               	movlb	2	; select bank2
  7820  074B  01B8               	clrf	_feedback_timer^(0+256)	;volatile
  7821  074C  01B9               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7822  074D                     l5518:	
  7823                           
  7824                           ;SwitchBypass.c: 59: }
  7825                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7826  074D  0021               	movlb	1	; select bank1
  7827  074E  0856               	movf	(_long_press_limit+1)^(0+128),w
  7828  074F  0022               	movlb	2	; select bank2
  7829  0750  0239               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7830  0751  1D03               	skipz
  7831  0752  2F57               	goto	u6055
  7832  0753  0021               	movlb	1	; select bank1
  7833  0754  0855               	movf	_long_press_limit^(0+128),w
  7834  0755  0022               	movlb	2	; select bank2
  7835  0756  0238               	subwf	_feedback_timer^(0+256),w	;volatile
  7836  0757                     u6055:	
  7837  0757  1C03               	skipc
  7838  0758  2F76               	goto	l5532
  7839  0759  0020               	movlb	0	; select bank0
  7840  075A  0869               	movf	_feedback_state,w	;volatile
  7841  075B  1D03               	btfss	3,2
  7842  075C  2F76               	goto	l5532
  7843  075D  086B               	movf	_doubleTap_state,w	;volatile
  7844  075E  1D03               	btfss	3,2
  7845  075F  2F76               	goto	l5532
  7846                           
  7847                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7848  0760  0022               	movlb	2	; select bank2
  7849  0761  110D               	bcf	13,2	;volatile
  7850                           
  7851                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7852  0762  0353               	decf	_longTap_start^(0+256),w
  7853  0763  1903               	btfsc	3,2
  7854  0764  2F6E               	goto	l5530
  7855                           
  7856                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7857  0765  3001               	movlw	1
  7858  0766  0020               	movlb	0	; select bank0
  7859  0767  00A2               	movwf	setFeedbackState@f_state
  7860  0768  3000               	movlw	0
  7861  0769  00A3               	movwf	setFeedbackState@f_state+1
  7862  076A  319E  2605  3187   	fcall	_setFeedbackState
  7863                           
  7864                           ;SwitchBypass.c: 67: } else {
  7865  076D  2F76               	goto	l5532
  7866  076E                     l5530:	
  7867                           
  7868                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7869  076E  3001               	movlw	1
  7870  076F  0020               	movlb	0	; select bank0
  7871  0770  00B4               	movwf	setDoublePressState@f_state
  7872  0771  3000               	movlw	0
  7873  0772  00B5               	movwf	setDoublePressState@f_state+1
  7874  0773  319E  26FB  3187   	fcall	_setDoublePressState
  7875  0776                     l5532:	
  7876                           
  7877                           ;SwitchBypass.c: 69: }
  7878                           ;SwitchBypass.c: 70: }
  7879                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7880  0776  0020               	movlb	0	; select bank0
  7881  0777  086B               	movf	_doubleTap_state,w	;volatile
  7882  0778  1D03               	btfss	3,2
  7883  0779  2F99               	goto	l1085
  7884  077A  0869               	movf	_feedback_state,w	;volatile
  7885  077B  1D03               	btfss	3,2
  7886  077C  2F99               	goto	l1085
  7887                           
  7888                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7889  077D  037D               	decf	_switchBypass_state,w
  7890  077E  1D03               	btfss	3,2
  7891  077F  2F8C               	goto	l5544
  7892                           
  7893                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7894  0780  0022               	movlb	2	; select bank2
  7895  0781  0368               	decf	_switchBypass_up^(0+256),w
  7896  0782  0469               	iorwf	(_switchBypass_up+1)^(0+256),w
  7897  0783  1D03               	btfss	3,2
  7898  0784  2F99               	goto	l1085
  7899                           
  7900                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7901  0785  01ED               	clrf	_currentBypassState^(0+256)
  7902  0786  0AED               	incf	_currentBypassState^(0+256),f
  7903                           
  7904                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7905  0787  3001               	movlw	1
  7906  0788  00CE               	movwf	_switchBypass_toggle^(0+256)
  7907  0789  3000               	movlw	0
  7908  078A  00CF               	movwf	(_switchBypass_toggle^(0+256)+1)
  7909                           
  7910                           ;SwitchBypass.c: 78: }
  7911                           ;SwitchBypass.c: 93: } else {
  7912  078B  2F99               	goto	l1085
  7913  078C                     l5544:	
  7914                           
  7915                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7916  078C  0022               	movlb	2	; select bank2
  7917  078D  0351               	decf	_bypass_turning_on^(0+256),w
  7918  078E  1903               	btfsc	3,2
  7919  078F  2F99               	goto	l1085
  7920                           
  7921                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7922  0790  01ED               	clrf	_currentBypassState^(0+256)
  7923                           
  7924                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7925  0791  01D1               	clrf	_bypass_turning_on^(0+256)
  7926  0792  0AD1               	incf	_bypass_turning_on^(0+256),f
  7927                           
  7928                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7929  0793  01CE               	clrf	_switchBypass_toggle^(0+256)
  7930  0794  01CF               	clrf	(_switchBypass_toggle+1)^(0+256)
  7931                           
  7932                           ;SwitchBypass.c: 101: feedback_state = 0;
  7933  0795  0020               	movlb	0	; select bank0
  7934  0796  01E9               	clrf	_feedback_state	;volatile
  7935                           
  7936                           ;SwitchBypass.c: 102: feedback_start = 0;
  7937  0797  0021               	movlb	1	; select bank1
  7938  0798  01E9               	clrf	_feedback_start^(0+128)
  7939  0799                     l1085:	
  7940                           
  7941                           ;SwitchBypass.c: 103: }
  7942                           ;SwitchBypass.c: 104: }
  7943                           ;SwitchBypass.c: 106: }
  7944                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7945  0799  0022               	movlb	2	; select bank2
  7946  079A  01E8               	clrf	_switchBypass_up^(0+256)
  7947  079B  01E9               	clrf	(_switchBypass_up+1)^(0+256)
  7948                           
  7949                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7950  079C  0008               	return
  7951  079D                     l5550:	
  7952  079D  084D               	movf	(_switchBypass_pressed+1)^(0+256),w
  7953  079E  3A80               	xorlw	128
  7954  079F  0020               	movlb	0	; select bank0
  7955  07A0  00B8               	movwf	??_updateSwitchBypass
  7956  07A1  3080               	movlw	128
  7957  07A2  0238               	subwf	??_updateSwitchBypass,w
  7958  07A3  1D03               	skipz
  7959  07A4  2FA8               	goto	u6145
  7960  07A5  3019               	movlw	25
  7961  07A6  0022               	movlb	2	; select bank2
  7962  07A7  024C               	subwf	_switchBypass_pressed^(0+256),w
  7963  07A8                     u6145:	
  7964  07A8  1C03               	skipc
  7965  07A9  0008               	return
  7966                           
  7967                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7968  07AA  0020               	movlb	0	; select bank0
  7969  07AB  036B               	decf	_doubleTap_state,w	;volatile
  7970  07AC  1D03               	btfss	3,2
  7971  07AD  2FB7               	goto	l5556
  7972                           
  7973                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7974  07AE  0022               	movlb	2	; select bank2
  7975  07AF  086D               	movf	_currentBypassState^(0+256),w
  7976  07B0  0020               	movlb	0	; select bank0
  7977  07B1  00B8               	movwf	??_updateSwitchBypass
  7978  07B2  01B9               	clrf	??_updateSwitchBypass+1
  7979  07B3  0838               	movf	??_updateSwitchBypass,w
  7980  07B4  00B4               	movwf	setSwitchBypassState@f_state
  7981  07B5  0839               	movf	??_updateSwitchBypass+1,w
  7982  07B6  2FD2               	goto	L7
  7983  07B7                     l5556:	
  7984                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7985                           
  7986  07B7  0022               	movlb	2	; select bank2
  7987  07B8  0351               	decf	_bypass_turning_on^(0+256),w
  7988  07B9  1903               	btfsc	3,2
  7989  07BA  2FBF               	goto	l5560
  7990  07BB  0020               	movlb	0	; select bank0
  7991  07BC  0369               	decf	_feedback_state,w	;volatile
  7992  07BD  1D03               	btfss	3,2
  7993  07BE  2FC4               	goto	l5562
  7994  07BF                     l5560:	
  7995                           
  7996                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7997  07BF  3001               	movlw	1
  7998  07C0  0020               	movlb	0	; select bank0
  7999  07C1  00B4               	movwf	setSwitchBypassState@f_state
  8000  07C2  3000               	movlw	0
  8001  07C3  2FD2               	goto	L7
  8002  07C4                     l5562:	
  8003                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  8004                           
  8005  07C4  0022               	movlb	2	; select bank2
  8006  07C5  034E               	decf	_switchBypass_toggle^(0+256),w
  8007  07C6  044F               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  8008  07C7  1D03               	btfss	3,2
  8009  07C8  2FD6               	goto	l5570
  8010  07C9  0020               	movlb	0	; select bank0
  8011  07CA  0869               	movf	_feedback_state,w	;volatile
  8012  07CB  1D03               	btfss	3,2
  8013  07CC  2FD6               	goto	l5570
  8014  07CD  086B               	movf	_doubleTap_state,w	;volatile
  8015  07CE  1D03               	btfss	3,2
  8016  07CF  2FD6               	goto	l5570
  8017                           
  8018                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  8019  07D0  3000               	movlw	0
  8020  07D1  00B4               	movwf	setSwitchBypassState@f_state
  8021  07D2                     L7:	
  8022  07D2  00B5               	movwf	setSwitchBypassState@f_state+1
  8023  07D3  3192  222D  3187   	fcall	_setSwitchBypassState
  8024  07D6                     l5570:	
  8025                           
  8026                           ;SwitchBypass.c: 115: }
  8027                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  8028  07D6  0C7D               	rrf	_switchBypass_state,w
  8029  07D7  0022               	movlb	2	; select bank2
  8030  07D8  1C03               	skipc
  8031  07D9  110D               	bcf	13,2	;volatile
  8032  07DA  1803               	skipnc
  8033  07DB  150D               	bsf	13,2	;volatile
  8034                           
  8035                           ;SwitchBypass.c: 120: setFeedbackState(0);
  8036  07DC  3000               	movlw	0
  8037  07DD  0020               	movlb	0	; select bank0
  8038  07DE  00A2               	movwf	setFeedbackState@f_state
  8039  07DF  00A3               	movwf	setFeedbackState@f_state+1
  8040  07E0  319E  2605  3187   	fcall	_setFeedbackState
  8041                           
  8042                           ;SwitchBypass.c: 121: setDoublePressState(0);
  8043  07E3  3000               	movlw	0
  8044  07E4  0020               	movlb	0	; select bank0
  8045  07E5  00B4               	movwf	setDoublePressState@f_state
  8046  07E6  00B5               	movwf	setDoublePressState@f_state+1
  8047  07E7  319E  26FB         	fcall	_setDoublePressState
  8048                           
  8049                           ;SwitchBypass.c: 122: feedback_start = 0;
  8050  07E9  0021               	movlb	1	; select bank1
  8051  07EA  01E9               	clrf	_feedback_start^(0+128)
  8052                           
  8053                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  8054  07EB  0022               	movlb	2	; select bank2
  8055  07EC  01D1               	clrf	_bypass_turning_on^(0+256)
  8056                           
  8057                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  8058  07ED  01CE               	clrf	_switchBypass_toggle^(0+256)
  8059  07EE  01CF               	clrf	(_switchBypass_toggle+1)^(0+256)
  8060                           
  8061                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  8062  07EF  3001               	movlw	1
  8063  07F0  00E8               	movwf	_switchBypass_up^(0+256)
  8064  07F1  3000               	movlw	0
  8065  07F2  00E9               	movwf	(_switchBypass_up^(0+256)+1)
  8066                           
  8067                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  8068  07F3  3019               	movlw	25
  8069  07F4  00CC               	movwf	_switchBypass_pressed^(0+256)
  8070  07F5  3000               	movlw	0
  8071  07F6  00CD               	movwf	(_switchBypass_pressed^(0+256)+1)
  8072  07F7  0008               	return
  8073  07F8                     __end_of_updateSwitchBypass:	
  8074                           
  8075                           	psect	text5
  8076  1E05                     __ptext5:	
  8077 ;; *************** function _setFeedbackState *****************
  8078 ;; Defined at:
  8079 ;;		line 151 in file "SwitchBypass.c"
  8080 ;; Parameters:    Size  Location     Type
  8081 ;;  f_state         2    2[BANK0 ] int 
  8082 ;; Auto vars:     Size  Location     Type
  8083 ;;		None
  8084 ;; Return value:  Size  Location     Type
  8085 ;;                  1    wreg      void 
  8086 ;; Registers used:
  8087 ;;		wreg, status,0
  8088 ;; Tracked objects:
  8089 ;;		On entry : 0/0
  8090 ;;		On exit  : 0/0
  8091 ;;		Unchanged: 0/0
  8092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8093 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8096 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8097 ;;Total ram usage:        4 bytes
  8098 ;; Hardware stack levels used:    1
  8099 ;; Hardware stack levels required when called:    2
  8100 ;; This function calls:
  8101 ;;		Nothing
  8102 ;; This function is called by:
  8103 ;;		_updateSwitchBypass
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _setFeedbackState
  8109  1E05                     _setFeedbackState:	
  8110                           
  8111                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _setFeedbackState: [wreg+status,0]
  8115  1E05  0020               	movlb	0	; select bank0
  8116  1E06  0869               	movf	_feedback_state,w	;volatile
  8117  1E07  00A4               	movwf	??_setFeedbackState
  8118  1E08  01A5               	clrf	??_setFeedbackState+1
  8119  1E09  0823               	movf	setFeedbackState@f_state+1,w
  8120  1E0A  0625               	xorwf	??_setFeedbackState+1,w
  8121  1E0B  1D03               	skipz
  8122  1E0C  2E0F               	goto	u5065
  8123  1E0D  0822               	movf	setFeedbackState@f_state,w
  8124  1E0E  0624               	xorwf	??_setFeedbackState,w
  8125  1E0F                     u5065:	
  8126  1E0F  1903               	btfsc	3,2
  8127  1E10  0008               	return
  8128                           
  8129                           ;SwitchBypass.c: 153: feedback_state = f_state;
  8130  1E11  0822               	movf	setFeedbackState@f_state,w
  8131  1E12  00A4               	movwf	??_setFeedbackState
  8132  1E13  0824               	movf	??_setFeedbackState,w
  8133  1E14  00E9               	movwf	_feedback_state	;volatile
  8134                           
  8135                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  8136  1E15  0C22               	rrf	setFeedbackState@f_state,w
  8137  1E16  0022               	movlb	2	; select bank2
  8138  1E17  1C03               	skipc
  8139  1E18  118D               	bcf	13,3	;volatile
  8140  1E19  1803               	skipnc
  8141  1E1A  158D               	bsf	13,3	;volatile
  8142  1E1B  0008               	return
  8143  1E1C                     __end_of_setFeedbackState:	
  8144                           
  8145                           	psect	text6
  8146  1EFB                     __ptext6:	
  8147 ;; *************** function _setDoublePressState *****************
  8148 ;; Defined at:
  8149 ;;		line 20 in file "preset_programming.c"
  8150 ;; Parameters:    Size  Location     Type
  8151 ;;  f_state         2   20[BANK0 ] int 
  8152 ;; Auto vars:     Size  Location     Type
  8153 ;;		None
  8154 ;; Return value:  Size  Location     Type
  8155 ;;                  1    wreg      void 
  8156 ;; Registers used:
  8157 ;;		wreg, status,2, status,0, pclath, cstack
  8158 ;; Tracked objects:
  8159 ;;		On entry : 0/0
  8160 ;;		On exit  : 0/0
  8161 ;;		Unchanged: 0/0
  8162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8163 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8165 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8166 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8167 ;;Total ram usage:        4 bytes
  8168 ;; Hardware stack levels used:    1
  8169 ;; Hardware stack levels required when called:    4
  8170 ;; This function calls:
  8171 ;;		_wait_ms
  8172 ;; This function is called by:
  8173 ;;		_updateSwitchBypass
  8174 ;;		_updateSwitchTap
  8175 ;; This function uses a non-reentrant model
  8176 ;;
  8177                           
  8178                           
  8179                           ;psect for function _setDoublePressState
  8180  1EFB                     _setDoublePressState:	
  8181                           
  8182                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  8183                           
  8184                           ;incstack = 0
  8185                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  8186  1EFB  0020               	movlb	0	; select bank0
  8187  1EFC  086B               	movf	_doubleTap_state,w	;volatile
  8188  1EFD  00B6               	movwf	??_setDoublePressState
  8189  1EFE  01B7               	clrf	??_setDoublePressState+1
  8190  1EFF  0835               	movf	setDoublePressState@f_state+1,w
  8191  1F00  0637               	xorwf	??_setDoublePressState+1,w
  8192  1F01  1D03               	skipz
  8193  1F02  2F05               	goto	u5075
  8194  1F03  0834               	movf	setDoublePressState@f_state,w
  8195  1F04  0636               	xorwf	??_setDoublePressState,w
  8196  1F05                     u5075:	
  8197  1F05  1903               	btfsc	3,2
  8198  1F06  0008               	return
  8199                           
  8200                           ;preset_programming.c: 22: doubleTap_state = f_state;
  8201  1F07  0834               	movf	setDoublePressState@f_state,w
  8202  1F08  00B6               	movwf	??_setDoublePressState
  8203  1F09  0836               	movf	??_setDoublePressState,w
  8204  1F0A  00EB               	movwf	_doubleTap_state	;volatile
  8205                           
  8206                           ;preset_programming.c: 23: if (f_state == 1) {
  8207  1F0B  0334               	decf	setDoublePressState@f_state,w
  8208  1F0C  0435               	iorwf	setDoublePressState@f_state+1,w
  8209  1F0D  1D03               	btfss	3,2
  8210  1F0E  2F12               	goto	l5068
  8211                           
  8212                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  8213  1F0F  0022               	movlb	2	; select bank2
  8214  1F10  120D               	bcf	13,4	;volatile
  8215                           
  8216                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  8217  1F11  110D               	bcf	13,2	;volatile
  8218  1F12                     l5068:	
  8219                           
  8220                           ;preset_programming.c: 26: }
  8221                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  8222  1F12  0020               	movlb	0	; select bank0
  8223  1F13  0C34               	rrf	setDoublePressState@f_state,w
  8224  1F14  0022               	movlb	2	; select bank2
  8225  1F15  1C03               	skipc
  8226  1F16  108D               	bcf	13,1	;volatile
  8227  1F17  1803               	skipnc
  8228  1F18  148D               	bsf	13,1	;volatile
  8229                           
  8230                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  8231  1F19  0020               	movlb	0	; select bank0
  8232  1F1A  0C34               	rrf	setDoublePressState@f_state,w
  8233  1F1B  0022               	movlb	2	; select bank2
  8234  1F1C  1C03               	skipc
  8235  1F1D  100D               	bcf	13,0	;volatile
  8236  1F1E  1803               	skipnc
  8237  1F1F  140D               	bsf	13,0	;volatile
  8238                           
  8239                           ;preset_programming.c: 31: wait_ms(20);
  8240  1F20  3014               	movlw	20
  8241  1F21  0020               	movlb	0	; select bank0
  8242  1F22  00AE               	movwf	wait_ms@timeSec
  8243  1F23  3000               	movlw	0
  8244  1F24  00AF               	movwf	wait_ms@timeSec+1
  8245  1F25  3190  2003         	fcall	_wait_ms
  8246  1F27  0008               	return
  8247  1F28                     __end_of_setDoublePressState:	
  8248                           
  8249                           	psect	text7
  8250  1ED0                     __ptext7:	
  8251 ;; *************** function _showBootSequence *****************
  8252 ;; Defined at:
  8253 ;;		line 86 in file "LEDs.c"
  8254 ;; Parameters:    Size  Location     Type
  8255 ;;		None
  8256 ;; Auto vars:     Size  Location     Type
  8257 ;;		None
  8258 ;; Return value:  Size  Location     Type
  8259 ;;                  1    wreg      void 
  8260 ;; Registers used:
  8261 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8262 ;; Tracked objects:
  8263 ;;		On entry : 0/0
  8264 ;;		On exit  : 0/0
  8265 ;;		Unchanged: 0/0
  8266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8271 ;;Total ram usage:        1 bytes
  8272 ;; Hardware stack levels used:    1
  8273 ;; Hardware stack levels required when called:    5
  8274 ;; This function calls:
  8275 ;;		_getCurrentLEDState
  8276 ;;		_restoreLEDState
  8277 ;;		_solidring_tactiles
  8278 ;;		_star_tactiles
  8279 ;; This function is called by:
  8280 ;;		_main
  8281 ;; This function uses a non-reentrant model
  8282 ;;
  8283                           
  8284                           
  8285                           ;psect for function _showBootSequence
  8286  1ED0                     _showBootSequence:	
  8287                           
  8288                           ;LEDs.c: 87: getCurrentLEDState();
  8289                           
  8290                           ;incstack = 0
  8291                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8292  1ED0  319D  25B6  319E   	fcall	_getCurrentLEDState
  8293                           
  8294                           ;LEDs.c: 88: suspend_blink = 1;
  8295  1ED3  3001               	movlw	1
  8296  1ED4  0020               	movlb	0	; select bank0
  8297  1ED5  00BB               	movwf	??_showBootSequence
  8298  1ED6  083B               	movf	??_showBootSequence,w
  8299  1ED7  0021               	movlb	1	; select bank1
  8300  1ED8  00EA               	movwf	_suspend_blink^(0+128)	;volatile
  8301                           
  8302                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8303  1ED9  0022               	movlb	2	; select bank2
  8304  1EDA  120D               	bcf	13,4	;volatile
  8305                           
  8306                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8307  1EDB  110D               	bcf	13,2	;volatile
  8308                           
  8309                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8310  1EDC  128D               	bcf	13,5	;volatile
  8311                           
  8312                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8313  1EDD  118D               	bcf	13,3	;volatile
  8314                           
  8315                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8316  1EDE  100D               	bcf	13,0	;volatile
  8317                           
  8318                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8319  1EDF  108D               	bcf	13,1	;volatile
  8320                           
  8321                           ;LEDs.c: 113: star_tactiles(0);
  8322  1EE0  3000               	movlw	0
  8323  1EE1  3195  2549  319E   	fcall	_star_tactiles
  8324                           
  8325                           ;LEDs.c: 114: star_tactiles(0);
  8326  1EE4  3000               	movlw	0
  8327  1EE5  3195  2549  319E   	fcall	_star_tactiles
  8328                           
  8329                           ;LEDs.c: 115: star_tactiles(1);
  8330  1EE8  3001               	movlw	1
  8331  1EE9  3195  2549  319E   	fcall	_star_tactiles
  8332                           
  8333                           ;LEDs.c: 116: star_tactiles(1);
  8334  1EEC  3001               	movlw	1
  8335  1EED  3195  2549  319E   	fcall	_star_tactiles
  8336                           
  8337                           ;LEDs.c: 118: solidring_tactiles();
  8338  1EF0  3191  216B  319E   	fcall	_solidring_tactiles
  8339                           
  8340                           ;LEDs.c: 119: solidring_tactiles();
  8341  1EF3  3191  216B  319E   	fcall	_solidring_tactiles
  8342                           
  8343                           ;LEDs.c: 122: suspend_blink = 0;
  8344  1EF6  0021               	movlb	1	; select bank1
  8345  1EF7  01EA               	clrf	_suspend_blink^(0+128)	;volatile
  8346                           
  8347                           ;LEDs.c: 123: restoreLEDState();
  8348  1EF8  319D  25EF         	fcall	_restoreLEDState
  8349  1EFA  0008               	return
  8350  1EFB                     __end_of_showBootSequence:	
  8351                           
  8352                           	psect	text8
  8353  1549                     __ptext8:	
  8354 ;; *************** function _star_tactiles *****************
  8355 ;; Defined at:
  8356 ;;		line 194 in file "LEDs.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;  reverse         1    wreg     unsigned char 
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;  reverse         1   22[BANK0 ] unsigned char 
  8361 ;;  iLed            2   25[BANK0 ] int 
  8362 ;;  iLed            2   23[BANK0 ] int 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      void 
  8365 ;; Registers used:
  8366 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8367 ;; Tracked objects:
  8368 ;;		On entry : 0/0
  8369 ;;		On exit  : 0/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8373 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8374 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8375 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8376 ;;Total ram usage:        7 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:    4
  8379 ;; This function calls:
  8380 ;;		_set_leds_bottom
  8381 ;;		_set_leds_top
  8382 ;;		_wait_ms
  8383 ;; This function is called by:
  8384 ;;		_showBootSequence
  8385 ;; This function uses a non-reentrant model
  8386 ;;
  8387                           
  8388                           
  8389                           ;psect for function _star_tactiles
  8390  1549                     _star_tactiles:	
  8391                           
  8392                           ;incstack = 0
  8393                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8394                           ;star_tactiles@reverse stored from wreg
  8395  1549  0020               	movlb	0	; select bank0
  8396  154A  00B6               	movwf	star_tactiles@reverse
  8397                           
  8398                           ;LEDs.c: 195: if (reverse == 1) {
  8399  154B  0336               	decf	star_tactiles@reverse,w
  8400  154C  1D03               	btfss	3,2
  8401  154D  2D7E               	goto	l4994
  8402                           
  8403                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8404  154E  3005               	movlw	5
  8405  154F  00B7               	movwf	star_tactiles@iLed
  8406  1550  3000               	movlw	0
  8407  1551  00B8               	movwf	star_tactiles@iLed+1
  8408  1552                     L8:	
  8409  1552  1BB8               	btfsc	star_tactiles@iLed+1,7
  8410  1553  0008               	return
  8411                           
  8412                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8413  1554  0838               	movf	star_tactiles@iLed+1,w
  8414  1555  00A3               	movwf	set_leds_top@x+1
  8415  1556  0837               	movf	star_tactiles@iLed,w
  8416  1557  00A2               	movwf	set_leds_top@x
  8417  1558  3001               	movlw	1
  8418  1559  00A4               	movwf	set_leds_top@ledState
  8419  155A  3000               	movlw	0
  8420  155B  00A5               	movwf	set_leds_top@ledState+1
  8421  155C  3194  2490  3195   	fcall	_set_leds_top
  8422                           
  8423                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8424  155F  0020               	movlb	0	; select bank0
  8425  1560  0937               	comf	star_tactiles@iLed,w
  8426  1561  00B4               	movwf	??_star_tactiles
  8427  1562  0938               	comf	star_tactiles@iLed+1,w
  8428  1563  00B5               	movwf	??_star_tactiles+1
  8429  1564  0AB4               	incf	??_star_tactiles,f
  8430  1565  1903               	skipnz
  8431  1566  0AB5               	incf	??_star_tactiles+1,f
  8432  1567  0834               	movf	??_star_tactiles,w
  8433  1568  3E06               	addlw	6
  8434  1569  00A2               	movwf	set_leds_bottom@x
  8435  156A  3000               	movlw	0
  8436  156B  3D35               	addwfc	??_star_tactiles+1,w
  8437  156C  00A3               	movwf	set_leds_bottom@x+1
  8438  156D  319F  2788  3195   	fcall	_set_leds_bottom
  8439                           
  8440                           ;LEDs.c: 199: wait_ms(5);
  8441  1570  3005               	movlw	5
  8442  1571  0020               	movlb	0	; select bank0
  8443  1572  00AE               	movwf	wait_ms@timeSec
  8444  1573  3000               	movlw	0
  8445  1574  00AF               	movwf	wait_ms@timeSec+1
  8446  1575  3190  2003  3195   	fcall	_wait_ms
  8447  1578  30FF               	movlw	255
  8448  1579  0020               	movlb	0	; select bank0
  8449  157A  07B7               	addwf	star_tactiles@iLed,f
  8450  157B  30FF               	movlw	255
  8451  157C  3DB8               	addwfc	star_tactiles@iLed+1,f
  8452  157D  2D52               	goto	L8
  8453  157E                     l4994:	
  8454                           ;LEDs.c: 200: }
  8455                           ;LEDs.c: 201: } else {
  8456                           
  8457                           
  8458                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8459  157E  3001               	movlw	1
  8460  157F  00B9               	movwf	star_tactiles@iLed_1457
  8461  1580  3000               	movlw	0
  8462  1581  00BA               	movwf	star_tactiles@iLed_1457+1
  8463  1582                     L9:	
  8464  1582  083A               	movf	star_tactiles@iLed_1457+1,w
  8465  1583  3A80               	xorlw	128
  8466  1584  00B4               	movwf	??_star_tactiles
  8467  1585  3080               	movlw	128
  8468  1586  0234               	subwf	??_star_tactiles,w
  8469  1587  1D03               	skipz
  8470  1588  2D8B               	goto	u5015
  8471  1589  3007               	movlw	7
  8472  158A  0239               	subwf	star_tactiles@iLed_1457,w
  8473  158B                     u5015:	
  8474  158B  1803               	btfsc	3,0
  8475  158C  0008               	return
  8476                           
  8477                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8478  158D  0020               	movlb	0	; select bank0
  8479  158E  083A               	movf	star_tactiles@iLed_1457+1,w
  8480  158F  00A3               	movwf	set_leds_top@x+1
  8481  1590  0839               	movf	star_tactiles@iLed_1457,w
  8482  1591  00A2               	movwf	set_leds_top@x
  8483  1592  3001               	movlw	1
  8484  1593  00A4               	movwf	set_leds_top@ledState
  8485  1594  3000               	movlw	0
  8486  1595  00A5               	movwf	set_leds_top@ledState+1
  8487  1596  3194  2490  3195   	fcall	_set_leds_top
  8488                           
  8489                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8490  1599  0020               	movlb	0	; select bank0
  8491  159A  0939               	comf	star_tactiles@iLed_1457,w
  8492  159B  00B4               	movwf	??_star_tactiles
  8493  159C  093A               	comf	star_tactiles@iLed_1457+1,w
  8494  159D  00B5               	movwf	??_star_tactiles+1
  8495  159E  0AB4               	incf	??_star_tactiles,f
  8496  159F  1903               	skipnz
  8497  15A0  0AB5               	incf	??_star_tactiles+1,f
  8498  15A1  0834               	movf	??_star_tactiles,w
  8499  15A2  3E06               	addlw	6
  8500  15A3  00A2               	movwf	set_leds_bottom@x
  8501  15A4  3000               	movlw	0
  8502  15A5  3D35               	addwfc	??_star_tactiles+1,w
  8503  15A6  00A3               	movwf	set_leds_bottom@x+1
  8504  15A7  319F  2788  3195   	fcall	_set_leds_bottom
  8505                           
  8506                           ;LEDs.c: 205: wait_ms(5);
  8507  15AA  3005               	movlw	5
  8508  15AB  0020               	movlb	0	; select bank0
  8509  15AC  00AE               	movwf	wait_ms@timeSec
  8510  15AD  3000               	movlw	0
  8511  15AE  00AF               	movwf	wait_ms@timeSec+1
  8512  15AF  3190  2003  3195   	fcall	_wait_ms
  8513  15B2  3001               	movlw	1
  8514  15B3  0020               	movlb	0	; select bank0
  8515  15B4  07B9               	addwf	star_tactiles@iLed_1457,f
  8516  15B5  3000               	movlw	0
  8517  15B6  3DBA               	addwfc	star_tactiles@iLed_1457+1,f
  8518  15B7  2D82               	goto	L9
  8519  15B8                     __end_of_star_tactiles:	
  8520                           
  8521                           	psect	text9
  8522  116B                     __ptext9:	
  8523 ;; *************** function _solidring_tactiles *****************
  8524 ;; Defined at:
  8525 ;;		line 223 in file "LEDs.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;		None
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  ring_delay      1   22[BANK0 ] unsigned char 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;                  1    wreg      void 
  8532 ;; Registers used:
  8533 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8542 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8543 ;;Total ram usage:        3 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    4
  8546 ;; This function calls:
  8547 ;;		_set_leds_bottom
  8548 ;;		_set_leds_top
  8549 ;;		_wait_ms
  8550 ;; This function is called by:
  8551 ;;		_showBootSequence
  8552 ;;		_showSave
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _solidring_tactiles
  8558  116B                     _solidring_tactiles:	
  8559                           
  8560                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8561                           
  8562                           ;incstack = 0
  8563                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8564  116B  301E               	movlw	30
  8565  116C  0020               	movlb	0	; select bank0
  8566  116D  00B4               	movwf	??_solidring_tactiles
  8567  116E  0834               	movf	??_solidring_tactiles,w
  8568  116F  00B6               	movwf	solidring_tactiles@ring_delay
  8569                           
  8570                           ;LEDs.c: 225: set_leds_top(100, 1);
  8571  1170  3064               	movlw	100
  8572  1171  00A2               	movwf	set_leds_top@x
  8573  1172  3000               	movlw	0
  8574  1173  00A3               	movwf	set_leds_top@x+1
  8575  1174  3001               	movlw	1
  8576  1175  00A4               	movwf	set_leds_top@ledState
  8577  1176  3000               	movlw	0
  8578  1177  00A5               	movwf	set_leds_top@ledState+1
  8579  1178  3194  2490  3191   	fcall	_set_leds_top
  8580                           
  8581                           ;LEDs.c: 226: set_leds_bottom(100);
  8582  117B  3064               	movlw	100
  8583  117C  0020               	movlb	0	; select bank0
  8584  117D  00A2               	movwf	set_leds_bottom@x
  8585  117E  3000               	movlw	0
  8586  117F  00A3               	movwf	set_leds_bottom@x+1
  8587  1180  319F  2788  3191   	fcall	_set_leds_bottom
  8588                           
  8589                           ;LEDs.c: 227: wait_ms(ring_delay);
  8590  1183  0020               	movlb	0	; select bank0
  8591  1184  0836               	movf	solidring_tactiles@ring_delay,w
  8592  1185  00B4               	movwf	??_solidring_tactiles
  8593  1186  01B5               	clrf	??_solidring_tactiles+1
  8594  1187  0834               	movf	??_solidring_tactiles,w
  8595  1188  00AE               	movwf	wait_ms@timeSec
  8596  1189  0835               	movf	??_solidring_tactiles+1,w
  8597  118A  00AF               	movwf	wait_ms@timeSec+1
  8598  118B  3190  2003  3191   	fcall	_wait_ms
  8599                           
  8600                           ;LEDs.c: 229: set_leds_top(0, 1);
  8601  118E  3000               	movlw	0
  8602  118F  0020               	movlb	0	; select bank0
  8603  1190  00A2               	movwf	set_leds_top@x
  8604  1191  00A3               	movwf	set_leds_top@x+1
  8605  1192  3001               	movlw	1
  8606  1193  00A4               	movwf	set_leds_top@ledState
  8607  1194  3000               	movlw	0
  8608  1195  00A5               	movwf	set_leds_top@ledState+1
  8609  1196  3194  2490  3191   	fcall	_set_leds_top
  8610                           
  8611                           ;LEDs.c: 230: set_leds_bottom(0);
  8612  1199  3000               	movlw	0
  8613  119A  0020               	movlb	0	; select bank0
  8614  119B  00A2               	movwf	set_leds_bottom@x
  8615  119C  00A3               	movwf	set_leds_bottom@x+1
  8616  119D  319F  2788  3191   	fcall	_set_leds_bottom
  8617                           
  8618                           ;LEDs.c: 231: wait_ms(ring_delay);
  8619  11A0  0020               	movlb	0	; select bank0
  8620  11A1  0836               	movf	solidring_tactiles@ring_delay,w
  8621  11A2  00B4               	movwf	??_solidring_tactiles
  8622  11A3  01B5               	clrf	??_solidring_tactiles+1
  8623  11A4  0834               	movf	??_solidring_tactiles,w
  8624  11A5  00AE               	movwf	wait_ms@timeSec
  8625  11A6  0835               	movf	??_solidring_tactiles+1,w
  8626  11A7  00AF               	movwf	wait_ms@timeSec+1
  8627  11A8  3190  2003         	fcall	_wait_ms
  8628  11AA  0008               	return
  8629  11AB                     __end_of_solidring_tactiles:	
  8630                           
  8631                           	psect	text10
  8632  1DEF                     __ptext10:	
  8633 ;; *************** function _restoreLEDState *****************
  8634 ;; Defined at:
  8635 ;;		line 89 in file "state_manager.c"
  8636 ;; Parameters:    Size  Location     Type
  8637 ;;		None
  8638 ;; Auto vars:     Size  Location     Type
  8639 ;;		None
  8640 ;; Return value:  Size  Location     Type
  8641 ;;                  1    wreg      void 
  8642 ;; Registers used:
  8643 ;;		wreg, status,0
  8644 ;; Tracked objects:
  8645 ;;		On entry : 0/0
  8646 ;;		On exit  : 0/0
  8647 ;;		Unchanged: 0/0
  8648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8649 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8650 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8651 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8652 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8653 ;;Total ram usage:        0 bytes
  8654 ;; Hardware stack levels used:    1
  8655 ;; Hardware stack levels required when called:    2
  8656 ;; This function calls:
  8657 ;;		Nothing
  8658 ;; This function is called by:
  8659 ;;		_showBootSequence
  8660 ;;		_showError_Alternating
  8661 ;;		_show_error
  8662 ;;		_show_cancel
  8663 ;; This function uses a non-reentrant model
  8664 ;;
  8665                           
  8666                           
  8667                           ;psect for function _restoreLEDState
  8668  1DEF                     _restoreLEDState:	
  8669                           
  8670                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8671                           
  8672                           ;incstack = 0
  8673                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8674  1DEF  0022               	movlb	2	; select bank2
  8675  1DF0  0C20               	rrf	_ledState^(0+256),w
  8676  1DF1  1C03               	skipc
  8677  1DF2  120D               	bcf	13,4	;volatile
  8678  1DF3  1803               	skipnc
  8679  1DF4  160D               	bsf	13,4	;volatile
  8680                           
  8681                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8682  1DF5  0C22               	rrf	(_ledState^(0+256)+2),w
  8683  1DF6  1C03               	skipc
  8684  1DF7  110D               	bcf	13,2	;volatile
  8685  1DF8  1803               	skipnc
  8686  1DF9  150D               	bsf	13,2	;volatile
  8687                           
  8688                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8689  1DFA  0C21               	rrf	(_ledState^(0+256)+1),w
  8690  1DFB  1C03               	skipc
  8691  1DFC  128D               	bcf	13,5	;volatile
  8692  1DFD  1803               	skipnc
  8693  1DFE  168D               	bsf	13,5	;volatile
  8694                           
  8695                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8696  1DFF  0C23               	rrf	(_ledState^(0+256)+3),w
  8697  1E00  1C03               	skipc
  8698  1E01  118D               	bcf	13,3	;volatile
  8699  1E02  1803               	skipnc
  8700  1E03  158D               	bsf	13,3	;volatile
  8701  1E04  0008               	return
  8702  1E05                     __end_of_restoreLEDState:	
  8703                           
  8704                           	psect	text11
  8705  1DB6                     __ptext11:	
  8706 ;; *************** function _getCurrentLEDState *****************
  8707 ;; Defined at:
  8708 ;;		line 83 in file "state_manager.c"
  8709 ;; Parameters:    Size  Location     Type
  8710 ;;		None
  8711 ;; Auto vars:     Size  Location     Type
  8712 ;;		None
  8713 ;; Return value:  Size  Location     Type
  8714 ;;                  1    wreg      void 
  8715 ;; Registers used:
  8716 ;;		wreg, status,2
  8717 ;; Tracked objects:
  8718 ;;		On entry : 0/0
  8719 ;;		On exit  : 0/0
  8720 ;;		Unchanged: 0/0
  8721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8725 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8726 ;;Total ram usage:        0 bytes
  8727 ;; Hardware stack levels used:    1
  8728 ;; Hardware stack levels required when called:    2
  8729 ;; This function calls:
  8730 ;;		Nothing
  8731 ;; This function is called by:
  8732 ;;		_showBootSequence
  8733 ;;		_showError_Alternating
  8734 ;;		_show_error
  8735 ;;		_show_cancel
  8736 ;; This function uses a non-reentrant model
  8737 ;;
  8738                           
  8739                           
  8740                           ;psect for function _getCurrentLEDState
  8741  1DB6                     _getCurrentLEDState:	
  8742                           
  8743                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8744                           
  8745                           ;incstack = 0
  8746                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8747  1DB6  3000               	movlw	0
  8748  1DB7  0022               	movlb	2	; select bank2
  8749  1DB8  1A0D               	btfsc	13,4	;volatile
  8750  1DB9  3001               	movlw	1
  8751  1DBA  00A0               	movwf	_ledState^(0+256)
  8752                           
  8753                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8754  1DBB  3000               	movlw	0
  8755  1DBC  190D               	btfsc	13,2	;volatile
  8756  1DBD  3001               	movlw	1
  8757  1DBE  00A2               	movwf	(_ledState^(0+256)+2)
  8758                           
  8759                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8760  1DBF  3000               	movlw	0
  8761  1DC0  1A8D               	btfsc	13,5	;volatile
  8762  1DC1  3001               	movlw	1
  8763  1DC2  00A1               	movwf	(_ledState^(0+256)+1)
  8764                           
  8765                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8766  1DC3  3000               	movlw	0
  8767  1DC4  198D               	btfsc	13,3	;volatile
  8768  1DC5  3001               	movlw	1
  8769  1DC6  00A3               	movwf	(_ledState^(0+256)+3)
  8770  1DC7  0008               	return
  8771  1DC8                     __end_of_getCurrentLEDState:	
  8772                           
  8773                           	psect	text12
  8774  08B2                     __ptext12:	
  8775 ;; *************** function _set_subdivision *****************
  8776 ;; Defined at:
  8777 ;;		line 77 in file "user.c"
  8778 ;; Parameters:    Size  Location     Type
  8779 ;;  x               2   14[BANK1 ] int 
  8780 ;;  y               2   16[BANK1 ] int 
  8781 ;; Auto vars:     Size  Location     Type
  8782 ;;  scalar          3   23[BANK1 ] float 
  8783 ;;  tmpX            2   21[BANK1 ] int 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  2   14[BANK1 ] int 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8793 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8794 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8795 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8796 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8797 ;;Total ram usage:       12 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    4
  8800 ;; This function calls:
  8801 ;;		___awtoft
  8802 ;;		___ftdiv
  8803 ;;		___ftmul
  8804 ;;		___fttol
  8805 ;; This function is called by:
  8806 ;;		_main
  8807 ;; This function uses a non-reentrant model
  8808 ;;
  8809                           
  8810                           
  8811                           ;psect for function _set_subdivision
  8812  08B2                     _set_subdivision:	
  8813                           
  8814                           ;user.c: 78: adjust_sub_delay = 0;
  8815                           
  8816                           ;incstack = 0
  8817                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8818  08B2  0022               	movlb	2	; select bank2
  8819  08B3  01AA               	clrf	_adjust_sub_delay^(0+256)
  8820  08B4  01AB               	clrf	(_adjust_sub_delay+1)^(0+256)
  8821                           
  8822                           ;user.c: 79: int tmpX = x;
  8823  08B5  0021               	movlb	1	; select bank1
  8824  08B6  082F               	movf	(set_subdivision@x+1)^(0+128),w
  8825  08B7  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  8826  08B8  082E               	movf	set_subdivision@x^(0+128),w
  8827  08B9  00B5               	movwf	set_subdivision@tmpX^(0+128)
  8828                           
  8829                           ;user.c: 80: float scalar = 1.0;
  8830  08BA  3000               	movlw	0
  8831  08BB  00B7               	movwf	set_subdivision@scalar^(0+128)
  8832  08BC  3080               	movlw	128
  8833  08BD  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8834  08BE  303F               	movlw	63
  8835  08BF  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8836                           
  8837                           ;user.c: 83: switch (y) {
  8838  08C0  28DA               	goto	l5726
  8839  08C1                     l5714:	
  8840                           ;user.c: 84: case 1:
  8841                           
  8842                           
  8843                           ;user.c: 85: scalar = 0.75;
  8844  08C1  3000               	movlw	0
  8845  08C2  00B7               	movwf	set_subdivision@scalar^(0+128)
  8846  08C3  3040               	movlw	64
  8847  08C4  28CC               	goto	L11
  8848  08C5                     l5716:	
  8849                           ;user.c: 87: case 2:
  8850                           
  8851                           ;user.c: 86: break;
  8852                           
  8853                           
  8854                           ;user.c: 88: scalar = 0.6666;
  8855  08C5  30A6               	movlw	166
  8856  08C6  00B7               	movwf	set_subdivision@scalar^(0+128)
  8857  08C7  302A               	movlw	42
  8858  08C8  28CC               	goto	L11
  8859  08C9                     l5718:	
  8860                           ;user.c: 90: case 3:
  8861                           
  8862                           ;user.c: 89: break;
  8863                           
  8864                           
  8865                           ;user.c: 91: scalar = .5;
  8866  08C9  3000               	movlw	0
  8867  08CA  00B7               	movwf	set_subdivision@scalar^(0+128)
  8868  08CB  3000               	movlw	0
  8869  08CC                     L11:	
  8870  08CC  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8871  08CD  303F               	movlw	63
  8872  08CE  28D8               	goto	L13
  8873  08CF                     l5720:	
  8874                           ;user.c: 93: case 4:
  8875                           
  8876                           ;user.c: 92: break;
  8877                           
  8878                           
  8879                           ;user.c: 94: scalar = 0.3333;
  8880  08CF  30A6               	movlw	166
  8881  08D0  00B7               	movwf	set_subdivision@scalar^(0+128)
  8882  08D1  30AA               	movlw	170
  8883  08D2  28D6               	goto	L14
  8884  08D3                     l5722:	
  8885                           ;user.c: 96: case 5:
  8886                           
  8887                           ;user.c: 95: break;
  8888                           
  8889                           
  8890                           ;user.c: 97: scalar = 0.25;
  8891  08D3  3000               	movlw	0
  8892  08D4  00B7               	movwf	set_subdivision@scalar^(0+128)
  8893  08D5  3080               	movlw	128
  8894  08D6                     L14:	
  8895  08D6  00B8               	movwf	(set_subdivision@scalar+1)^(0+128)
  8896  08D7  303E               	movlw	62
  8897  08D8                     L13:	
  8898  08D8  00B9               	movwf	(set_subdivision@scalar+2)^(0+128)
  8899                           
  8900                           ;user.c: 102: }
  8901                           
  8902                           ;user.c: 101: break;
  8903                           
  8904                           ;user.c: 99: case 6:
  8905                           
  8906                           ;user.c: 98: break;
  8907  08D9  28F3               	goto	l5728
  8908  08DA                     l5726:	
  8909                           
  8910                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8911                           ; Switch size 1, requested type "space"
  8912                           ; Number of cases is 1, Range of values is 0 to 0
  8913                           ; switch strategies available:
  8914                           ; Name         Instructions Cycles
  8915                           ; simple_byte            4     3 (average)
  8916                           ; direct_byte            8     6 (fixed)
  8917                           ; jumptable            260     6 (fixed)
  8918                           ;	Chosen strategy is simple_byte
  8919  08DA  0831               	movf	(set_subdivision@y+1)^(0+128),w
  8920  08DB  3A00               	xorlw	0	; case 0
  8921  08DC  1903               	skipnz
  8922  08DD  28DF               	goto	l6250
  8923  08DE  28F3               	goto	l5728
  8924  08DF                     l6250:	
  8925                           
  8926                           ; Switch size 1, requested type "space"
  8927                           ; Number of cases is 6, Range of values is 1 to 6
  8928                           ; switch strategies available:
  8929                           ; Name         Instructions Cycles
  8930                           ; simple_byte           19    10 (average)
  8931                           ; direct_byte           21     9 (fixed)
  8932                           ; jumptable            263     9 (fixed)
  8933                           ;	Chosen strategy is simple_byte
  8934  08DF  0830               	movf	set_subdivision@y^(0+128),w
  8935  08E0  3A01               	xorlw	1	; case 1
  8936  08E1  1903               	skipnz
  8937  08E2  28C1               	goto	l5714
  8938  08E3  3A03               	xorlw	3	; case 2
  8939  08E4  1903               	skipnz
  8940  08E5  28C5               	goto	l5716
  8941  08E6  3A01               	xorlw	1	; case 3
  8942  08E7  1903               	skipnz
  8943  08E8  28C9               	goto	l5718
  8944  08E9  3A07               	xorlw	7	; case 4
  8945  08EA  1903               	skipnz
  8946  08EB  28CF               	goto	l5720
  8947  08EC  3A01               	xorlw	1	; case 5
  8948  08ED  1903               	skipnz
  8949  08EE  28D3               	goto	l5722
  8950  08EF  3A03               	xorlw	3	; case 6
  8951  08F0  1903               	skipnz
  8952  08F1  28F3               	goto	l5728
  8953  08F2  28F3               	goto	l5728
  8954  08F3                     l5728:	
  8955                           
  8956                           ;user.c: 104: tmpX = tmpX * scalar;
  8957  08F3  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  8958  08F4  0020               	movlb	0	; select bank0
  8959  08F5  00AB               	movwf	___awtoft@c+1
  8960  08F6  0021               	movlb	1	; select bank1
  8961  08F7  0835               	movf	set_subdivision@tmpX^(0+128),w
  8962  08F8  0020               	movlb	0	; select bank0
  8963  08F9  00AA               	movwf	___awtoft@c
  8964  08FA  319E  2688  3188   	fcall	___awtoft
  8965  08FD  0020               	movlb	0	; select bank0
  8966  08FE  082A               	movf	?___awtoft,w
  8967  08FF  00BA               	movwf	___ftmul@f2
  8968  0900  082B               	movf	?___awtoft+1,w
  8969  0901  00BB               	movwf	___ftmul@f2+1
  8970  0902  082C               	movf	?___awtoft+2,w
  8971  0903  00BC               	movwf	___ftmul@f2+2
  8972  0904  0021               	movlb	1	; select bank1
  8973  0905  0837               	movf	set_subdivision@scalar^(0+128),w
  8974  0906  0020               	movlb	0	; select bank0
  8975  0907  00B7               	movwf	___ftmul@f1
  8976  0908  0021               	movlb	1	; select bank1
  8977  0909  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  8978  090A  0020               	movlb	0	; select bank0
  8979  090B  00B8               	movwf	___ftmul@f1+1
  8980  090C  0021               	movlb	1	; select bank1
  8981  090D  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  8982  090E  0020               	movlb	0	; select bank0
  8983  090F  00B9               	movwf	___ftmul@f1+2
  8984  0910  3197  274C  3188   	fcall	___ftmul
  8985  0913  0020               	movlb	0	; select bank0
  8986  0914  0837               	movf	?___ftmul,w
  8987  0915  0021               	movlb	1	; select bank1
  8988  0916  00A0               	movwf	___fttol@f1^(0+128)
  8989  0917  0020               	movlb	0	; select bank0
  8990  0918  0838               	movf	?___ftmul+1,w
  8991  0919  0021               	movlb	1	; select bank1
  8992  091A  00A1               	movwf	(___fttol@f1+1)^(0+128)
  8993  091B  0020               	movlb	0	; select bank0
  8994  091C  0839               	movf	?___ftmul+2,w
  8995  091D  0021               	movlb	1	; select bank1
  8996  091E  00A2               	movwf	(___fttol@f1+2)^(0+128)
  8997  091F  3196  263A  3188   	fcall	___fttol
  8998  0922  0021               	movlb	1	; select bank1
  8999  0923  0821               	movf	(?___fttol^(0+128)+1),w
  9000  0924  00B6               	movwf	(set_subdivision@tmpX+1)^(0+128)
  9001  0925  0820               	movf	?___fttol^(0+128),w
  9002  0926  00B5               	movwf	set_subdivision@tmpX^(0+128)
  9003                           
  9004                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  9005  0927  0837               	movf	set_subdivision@scalar^(0+128),w
  9006  0928  0020               	movlb	0	; select bank0
  9007  0929  00C7               	movwf	___ftdiv@f2
  9008  092A  0021               	movlb	1	; select bank1
  9009  092B  0838               	movf	(set_subdivision@scalar+1)^(0+128),w
  9010  092C  0020               	movlb	0	; select bank0
  9011  092D  00C8               	movwf	___ftdiv@f2+1
  9012  092E  0021               	movlb	1	; select bank1
  9013  092F  0839               	movf	(set_subdivision@scalar+2)^(0+128),w
  9014  0930  0020               	movlb	0	; select bank0
  9015  0931  00C9               	movwf	___ftdiv@f2+2
  9016  0932  0021               	movlb	1	; select bank1
  9017  0933  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  9018  0934  0020               	movlb	0	; select bank0
  9019  0935  00AB               	movwf	___awtoft@c+1
  9020  0936  0021               	movlb	1	; select bank1
  9021  0937  0835               	movf	set_subdivision@tmpX^(0+128),w
  9022  0938  0020               	movlb	0	; select bank0
  9023  0939  00AA               	movwf	___awtoft@c
  9024  093A  319E  2688  3188   	fcall	___awtoft
  9025  093D  0020               	movlb	0	; select bank0
  9026  093E  082A               	movf	?___awtoft,w
  9027  093F  00CA               	movwf	___ftdiv@f1
  9028  0940  082B               	movf	?___awtoft+1,w
  9029  0941  00CB               	movwf	___ftdiv@f1+1
  9030  0942  082C               	movf	?___awtoft+2,w
  9031  0943  00CC               	movwf	___ftdiv@f1+2
  9032  0944  3188  2009  3188   	fcall	___ftdiv
  9033  0947  0020               	movlb	0	; select bank0
  9034  0948  0847               	movf	?___ftdiv,w
  9035  0949  0021               	movlb	1	; select bank1
  9036  094A  00B2               	movwf	??_set_subdivision^(0+128)
  9037  094B  0020               	movlb	0	; select bank0
  9038  094C  0848               	movf	?___ftdiv+1,w
  9039  094D  0021               	movlb	1	; select bank1
  9040  094E  00B3               	movwf	(??_set_subdivision^(0+128)+1)
  9041  094F  0020               	movlb	0	; select bank0
  9042  0950  0849               	movf	?___ftdiv+2,w
  9043  0951  0021               	movlb	1	; select bank1
  9044  0952  00B4               	movwf	(??_set_subdivision^(0+128)+2)
  9045  0953  082F               	movf	(set_subdivision@x+1)^(0+128),w
  9046  0954  0020               	movlb	0	; select bank0
  9047  0955  00AB               	movwf	___awtoft@c+1
  9048  0956  0021               	movlb	1	; select bank1
  9049  0957  082E               	movf	set_subdivision@x^(0+128),w
  9050  0958  0020               	movlb	0	; select bank0
  9051  0959  00AA               	movwf	___awtoft@c
  9052  095A  319E  2688  3188   	fcall	___awtoft
  9053  095D  0020               	movlb	0	; select bank0
  9054  095E  082C               	movf	?___awtoft+2,w
  9055  095F  0021               	movlb	1	; select bank1
  9056  0960  0634               	xorwf	(??_set_subdivision+2)^(0+128),w
  9057  0961  1D03               	skipz
  9058  0962  296D               	goto	u6465
  9059  0963  0020               	movlb	0	; select bank0
  9060  0964  082B               	movf	?___awtoft+1,w
  9061  0965  0021               	movlb	1	; select bank1
  9062  0966  0633               	xorwf	(??_set_subdivision+1)^(0+128),w
  9063  0967  1D03               	skipz
  9064  0968  296D               	goto	u6465
  9065  0969  0020               	movlb	0	; select bank0
  9066  096A  082A               	movf	?___awtoft,w
  9067  096B  0021               	movlb	1	; select bank1
  9068  096C  0632               	xorwf	??_set_subdivision^(0+128),w
  9069  096D                     u6465:	
  9070  096D  1903               	skipnz
  9071  096E  2974               	goto	l527
  9072  096F  3001               	movlw	1
  9073  0970  0022               	movlb	2	; select bank2
  9074  0971  00AA               	movwf	_adjust_sub_delay^(0+256)
  9075  0972  3000               	movlw	0
  9076  0973  00AB               	movwf	(_adjust_sub_delay^(0+256)+1)
  9077  0974                     l527:	
  9078                           
  9079                           ;user.c: 106: return tmpX;
  9080  0974  0021               	movlb	1	; select bank1
  9081  0975  0836               	movf	(set_subdivision@tmpX+1)^(0+128),w
  9082  0976  00AF               	movwf	(?_set_subdivision+1)^(0+128)
  9083  0977  0835               	movf	set_subdivision@tmpX^(0+128),w
  9084  0978  00AE               	movwf	?_set_subdivision^(0+128)
  9085  0979  0008               	return
  9086  097A                     __end_of_set_subdivision:	
  9087                           
  9088                           	psect	text13
  9089  163A                     __ptext13:	
  9090 ;; *************** function ___fttol *****************
  9091 ;; Defined at:
  9092 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  f1              3    0[BANK1 ] float 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  lval            4    9[BANK1 ] unsigned long 
  9097 ;;  exp1            1   13[BANK1 ] unsigned char 
  9098 ;;  sign1           1    8[BANK1 ] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  4    0[BANK1 ] long 
  9101 ;; Registers used:
  9102 ;;		wreg, status,2, status,0
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9108 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9109 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9110 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9111 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9112 ;;Total ram usage:       14 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    2
  9115 ;; This function calls:
  9116 ;;		Nothing
  9117 ;; This function is called by:
  9118 ;;		_main
  9119 ;;		_set_subdivision
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function ___fttol
  9125  163A                     ___fttol:	
  9126                           
  9127                           ;incstack = 0
  9128                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9129  163A  0021               	movlb	1	; select bank1
  9130  163B  0820               	movf	___fttol@f1^(0+128),w
  9131  163C  00A4               	movwf	??___fttol^(0+128)
  9132  163D  0821               	movf	(___fttol@f1+1)^(0+128),w
  9133  163E  00A5               	movwf	(??___fttol^(0+128)+1)
  9134  163F  0822               	movf	(___fttol@f1+2)^(0+128),w
  9135  1640  00A6               	movwf	(??___fttol^(0+128)+2)
  9136  1641  1003               	clrc
  9137  1642  0D25               	rlf	(??___fttol^(0+128)+1),w
  9138  1643  0D26               	rlf	(??___fttol^(0+128)+2),w
  9139  1644  00A7               	movwf	(??___fttol+3)^(0+128)
  9140  1645  0827               	movf	(??___fttol+3)^(0+128),w
  9141  1646  00AD               	movwf	___fttol@exp1^(0+128)
  9142  1647  082D               	movf	___fttol@exp1^(0+128),w
  9143  1648  1D03               	btfss	3,2
  9144  1649  2E53               	goto	l5322
  9145  164A  3000               	movlw	0
  9146  164B  00A3               	movwf	(?___fttol+3)^(0+128)
  9147  164C  3000               	movlw	0
  9148  164D  00A2               	movwf	(?___fttol+2)^(0+128)
  9149  164E  3000               	movlw	0
  9150  164F  00A1               	movwf	(?___fttol+1)^(0+128)
  9151  1650  3000               	movlw	0
  9152  1651  00A0               	movwf	?___fttol^(0+128)
  9153  1652  0008               	return
  9154  1653                     l5322:	
  9155  1653  0820               	movf	___fttol@f1^(0+128),w
  9156  1654  00A4               	movwf	??___fttol^(0+128)
  9157  1655  0821               	movf	(___fttol@f1+1)^(0+128),w
  9158  1656  00A5               	movwf	(??___fttol^(0+128)+1)
  9159  1657  0822               	movf	(___fttol@f1+2)^(0+128),w
  9160  1658  00A6               	movwf	(??___fttol^(0+128)+2)
  9161  1659  3017               	movlw	23
  9162  165A                     u5705:	
  9163  165A  36A6               	lsrf	(??___fttol^(0+128)+2),f
  9164  165B  0CA5               	rrf	(??___fttol^(0+128)+1),f
  9165  165C  0CA4               	rrf	??___fttol^(0+128),f
  9166  165D  0B89               	decfsz	9,f
  9167  165E  2E5A               	goto	u5705
  9168  165F  0824               	movf	??___fttol^(0+128),w
  9169  1660  00A7               	movwf	(??___fttol+3)^(0+128)
  9170  1661  0827               	movf	(??___fttol+3)^(0+128),w
  9171  1662  00A8               	movwf	___fttol@sign1^(0+128)
  9172  1663  17A1               	bsf	(___fttol@f1^(0+128)+1),7
  9173  1664  30FF               	movlw	255
  9174  1665  05A0               	andwf	___fttol@f1^(0+128),f
  9175  1666  30FF               	movlw	255
  9176  1667  05A1               	andwf	(___fttol@f1+1)^(0+128),f
  9177  1668  3000               	movlw	0
  9178  1669  05A2               	andwf	(___fttol@f1+2)^(0+128),f
  9179  166A  0820               	movf	___fttol@f1^(0+128),w
  9180  166B  00A9               	movwf	___fttol@lval^(0+128)
  9181  166C  0821               	movf	(___fttol@f1+1)^(0+128),w
  9182  166D  00AA               	movwf	(___fttol@lval^(0+128)+1)
  9183  166E  0822               	movf	(___fttol@f1+2)^(0+128),w
  9184  166F  00AB               	movwf	(___fttol@lval^(0+128)+2)
  9185  1670  01AC               	clrf	(___fttol@lval^(0+128)+3)
  9186  1671  308E               	movlw	142
  9187  1672  02AD               	subwf	___fttol@exp1^(0+128),f
  9188  1673  1FAD               	btfss	___fttol@exp1^(0+128),7
  9189  1674  2E91               	goto	l5342
  9190  1675  082D               	movf	___fttol@exp1^(0+128),w
  9191  1676  3A80               	xorlw	128
  9192  1677  3E8F               	addlw	143
  9193  1678  1803               	skipnc
  9194  1679  2E83               	goto	l5340
  9195  167A  3000               	movlw	0
  9196  167B  00A3               	movwf	(?___fttol+3)^(0+128)
  9197  167C  3000               	movlw	0
  9198  167D  00A2               	movwf	(?___fttol+2)^(0+128)
  9199  167E  3000               	movlw	0
  9200  167F  00A1               	movwf	(?___fttol+1)^(0+128)
  9201  1680  3000               	movlw	0
  9202  1681  00A0               	movwf	?___fttol^(0+128)
  9203  1682  0008               	return
  9204  1683                     l5340:	
  9205  1683  3001               	movlw	1
  9206  1684                     u5735:	
  9207  1684  36AC               	lsrf	(___fttol@lval+3)^(0+128),f
  9208  1685  0CAB               	rrf	(___fttol@lval+2)^(0+128),f
  9209  1686  0CAA               	rrf	(___fttol@lval+1)^(0+128),f
  9210  1687  0CA9               	rrf	___fttol@lval^(0+128),f
  9211  1688  0B89               	decfsz	9,f
  9212  1689  2E84               	goto	u5735
  9213  168A  3001               	movlw	1
  9214  168B  00A4               	movwf	??___fttol^(0+128)
  9215  168C  0824               	movf	??___fttol^(0+128),w
  9216  168D  07AD               	addwf	___fttol@exp1^(0+128),f
  9217  168E  1903               	btfsc	3,2
  9218  168F  2EAA               	goto	l5350
  9219  1690  2E83               	goto	l5340
  9220  1691                     l5342:	
  9221  1691  3018               	movlw	24
  9222  1692  022D               	subwf	___fttol@exp1^(0+128),w
  9223  1693  1C03               	skipc
  9224  1694  2EA7               	goto	l1576
  9225  1695  3000               	movlw	0
  9226  1696  00A3               	movwf	(?___fttol+3)^(0+128)
  9227  1697  3000               	movlw	0
  9228  1698  00A2               	movwf	(?___fttol+2)^(0+128)
  9229  1699  3000               	movlw	0
  9230  169A  00A1               	movwf	(?___fttol+1)^(0+128)
  9231  169B  3000               	movlw	0
  9232  169C  00A0               	movwf	?___fttol^(0+128)
  9233  169D  0008               	return
  9234  169E                     l5348:	
  9235  169E  3001               	movlw	1
  9236  169F                     u5765:	
  9237  169F  35A9               	lslf	___fttol@lval^(0+128),f
  9238  16A0  0DAA               	rlf	(___fttol@lval+1)^(0+128),f
  9239  16A1  0DAB               	rlf	(___fttol@lval+2)^(0+128),f
  9240  16A2  0DAC               	rlf	(___fttol@lval+3)^(0+128),f
  9241  16A3  0B89               	decfsz	9,f
  9242  16A4  2E9F               	goto	u5765
  9243  16A5  3001               	movlw	1
  9244  16A6  02AD               	subwf	___fttol@exp1^(0+128),f
  9245  16A7                     l1576:	
  9246  16A7  082D               	movf	___fttol@exp1^(0+128),w
  9247  16A8  1D03               	btfss	3,2
  9248  16A9  2E9E               	goto	l5348
  9249  16AA                     l5350:	
  9250  16AA  0828               	movf	___fttol@sign1^(0+128),w
  9251  16AB  1903               	btfsc	3,2
  9252  16AC  2EB8               	goto	l5354
  9253  16AD  09A9               	comf	___fttol@lval^(0+128),f
  9254  16AE  09AA               	comf	(___fttol@lval+1)^(0+128),f
  9255  16AF  09AB               	comf	(___fttol@lval+2)^(0+128),f
  9256  16B0  09AC               	comf	(___fttol@lval+3)^(0+128),f
  9257  16B1  0AA9               	incf	___fttol@lval^(0+128),f
  9258  16B2  1903               	skipnz
  9259  16B3  0AAA               	incf	(___fttol@lval+1)^(0+128),f
  9260  16B4  1903               	skipnz
  9261  16B5  0AAB               	incf	(___fttol@lval+2)^(0+128),f
  9262  16B6  1903               	skipnz
  9263  16B7  0AAC               	incf	(___fttol@lval+3)^(0+128),f
  9264  16B8                     l5354:	
  9265  16B8  082C               	movf	(___fttol@lval+3)^(0+128),w
  9266  16B9  00A3               	movwf	(?___fttol+3)^(0+128)
  9267  16BA  082B               	movf	(___fttol@lval+2)^(0+128),w
  9268  16BB  00A2               	movwf	(?___fttol+2)^(0+128)
  9269  16BC  082A               	movf	(___fttol@lval+1)^(0+128),w
  9270  16BD  00A1               	movwf	(?___fttol+1)^(0+128)
  9271  16BE  0829               	movf	___fttol@lval^(0+128),w
  9272  16BF  00A0               	movwf	?___fttol^(0+128)
  9273  16C0  0008               	return
  9274  16C1                     __end_of___fttol:	
  9275                           
  9276                           	psect	text14
  9277  1E88                     __ptext14:	
  9278 ;; *************** function ___awtoft *****************
  9279 ;; Defined at:
  9280 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9281 ;; Parameters:    Size  Location     Type
  9282 ;;  c               2   10[BANK0 ] int 
  9283 ;; Auto vars:     Size  Location     Type
  9284 ;;  sign            1   15[BANK0 ] unsigned char 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  3   10[BANK0 ] float 
  9287 ;; Registers used:
  9288 ;;		wreg, status,2, status,0, pclath, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9294 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9295 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9297 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9298 ;;Total ram usage:        6 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    3
  9301 ;; This function calls:
  9302 ;;		___ftpack
  9303 ;; This function is called by:
  9304 ;;		_main
  9305 ;;		_set_subdivision
  9306 ;; This function uses a non-reentrant model
  9307 ;;
  9308                           
  9309                           
  9310                           ;psect for function ___awtoft
  9311  1E88                     ___awtoft:	
  9312                           
  9313                           ;incstack = 0
  9314                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9315  1E88  0020               	movlb	0	; select bank0
  9316  1E89  01AF               	clrf	___awtoft@sign
  9317  1E8A  1FAB               	btfss	___awtoft@c+1,7
  9318  1E8B  2E93               	goto	l5142
  9319  1E8C  09AA               	comf	___awtoft@c,f
  9320  1E8D  09AB               	comf	___awtoft@c+1,f
  9321  1E8E  0AAA               	incf	___awtoft@c,f
  9322  1E8F  1903               	skipnz
  9323  1E90  0AAB               	incf	___awtoft@c+1,f
  9324  1E91  01AF               	clrf	___awtoft@sign
  9325  1E92  0AAF               	incf	___awtoft@sign,f
  9326  1E93                     l5142:	
  9327  1E93  082A               	movf	___awtoft@c,w
  9328  1E94  00A2               	movwf	___ftpack@arg
  9329  1E95  082B               	movf	___awtoft@c+1,w
  9330  1E96  00A3               	movwf	___ftpack@arg+1
  9331  1E97  01A4               	clrf	___ftpack@arg+2
  9332  1E98  308E               	movlw	142
  9333  1E99  00AD               	movwf	??___awtoft
  9334  1E9A  082D               	movf	??___awtoft,w
  9335  1E9B  00A5               	movwf	___ftpack@exp
  9336  1E9C  082F               	movf	___awtoft@sign,w
  9337  1E9D  00AE               	movwf	??___awtoft+1
  9338  1E9E  082E               	movf	??___awtoft+1,w
  9339  1E9F  00A6               	movwf	___ftpack@sign
  9340  1EA0  3194  24E4         	fcall	___ftpack
  9341  1EA2  0020               	movlb	0	; select bank0
  9342  1EA3  0822               	movf	?___ftpack,w
  9343  1EA4  00AA               	movwf	?___awtoft
  9344  1EA5  0823               	movf	?___ftpack+1,w
  9345  1EA6  00AB               	movwf	?___awtoft+1
  9346  1EA7  0824               	movf	?___ftpack+2,w
  9347  1EA8  00AC               	movwf	?___awtoft+2
  9348  1EA9  0008               	return
  9349  1EAA                     __end_of___awtoft:	
  9350                           
  9351                           	psect	text15
  9352  134F                     __ptext15:	
  9353 ;; *************** function _read_top_tactile *****************
  9354 ;; Defined at:
  9355 ;;		line 47 in file "tactiles.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;		None
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9373 ;;Total ram usage:        1 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    4
  9376 ;; This function calls:
  9377 ;;		_set_leds_top
  9378 ;;		_wait_ms
  9379 ;; This function is called by:
  9380 ;;		_main
  9381 ;; This function uses a non-reentrant model
  9382 ;;
  9383                           
  9384                           
  9385                           ;psect for function _read_top_tactile
  9386  134F                     _read_top_tactile:	
  9387                           
  9388                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9389                           
  9390                           ;incstack = 0
  9391                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9392  134F  0020               	movlb	0	; select bank0
  9393  1350  1A8F               	btfsc	15,5	;volatile
  9394  1351  2B59               	goto	l5434
  9395                           
  9396                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9397  1352  0022               	movlb	2	; select bank2
  9398  1353  0859               	movf	_topTactile_pressed^(0+256),w
  9399  1354  1903               	btfsc	3,2
  9400  1355  2B64               	goto	l858
  9401                           
  9402                           ;tactiles.c: 58: topTactile_pressed--;
  9403  1356  3001               	movlw	1
  9404  1357  02D9               	subwf	_topTactile_pressed^(0+256),f
  9405                           
  9406                           ;tactiles.c: 59: }
  9407                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9408  1358  2B64               	goto	l858
  9409  1359                     l5434:	
  9410  1359  3019               	movlw	25
  9411  135A  0022               	movlb	2	; select bank2
  9412  135B  0259               	subwf	_topTactile_pressed^(0+256),w
  9413  135C  1803               	skipnc
  9414  135D  2B64               	goto	l858
  9415                           
  9416                           ;tactiles.c: 61: topTactile_pressed++;
  9417  135E  3001               	movlw	1
  9418  135F  0020               	movlb	0	; select bank0
  9419  1360  00B4               	movwf	??_read_top_tactile
  9420  1361  0834               	movf	??_read_top_tactile,w
  9421  1362  0022               	movlb	2	; select bank2
  9422  1363  07D9               	addwf	_topTactile_pressed^(0+256),f
  9423  1364                     l858:	
  9424                           
  9425                           ;tactiles.c: 62: }
  9426                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9427  1364  0859               	movf	_topTactile_pressed^(0+256),w
  9428  1365  1D03               	btfss	3,2
  9429  1366  0008               	return
  9430                           
  9431                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9432  1367  0021               	movlb	1	; select bank1
  9433  1368  0857               	movf	_top_push_state^(0+128),w
  9434  1369  3E01               	addlw	1
  9435  136A  00D7               	movwf	_top_push_state^(0+128)
  9436  136B  3000               	movlw	0
  9437  136C  3D58               	addwfc	(_top_push_state+1)^(0+128),w
  9438  136D  00D8               	movwf	(_top_push_state+1)^(0+128)
  9439                           
  9440                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9441  136E  0858               	movf	(_top_push_state+1)^(0+128),w
  9442  136F  3A80               	xorlw	128
  9443  1370  0020               	movlb	0	; select bank0
  9444  1371  00B4               	movwf	??_read_top_tactile
  9445  1372  3080               	movlw	128
  9446  1373  0234               	subwf	??_read_top_tactile,w
  9447  1374  1D03               	skipz
  9448  1375  2B79               	goto	u5945
  9449  1376  3007               	movlw	7
  9450  1377  0021               	movlb	1	; select bank1
  9451  1378  0257               	subwf	_top_push_state^(0+128),w
  9452  1379                     u5945:	
  9453  1379  1C03               	skipc
  9454  137A  2B80               	goto	l5444
  9455                           
  9456                           ;tactiles.c: 70: top_push_state = 1;
  9457  137B  3001               	movlw	1
  9458  137C  0021               	movlb	1	; select bank1
  9459  137D  00D7               	movwf	_top_push_state^(0+128)
  9460  137E  3000               	movlw	0
  9461  137F  00D8               	movwf	(_top_push_state^(0+128)+1)
  9462  1380                     l5444:	
  9463                           
  9464                           ;tactiles.c: 71: }
  9465                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9466  1380  0021               	movlb	1	; select bank1
  9467  1381  0858               	movf	(_top_push_state+1)^(0+128),w
  9468  1382  0020               	movlb	0	; select bank0
  9469  1383  00A3               	movwf	set_leds_top@x+1
  9470  1384  0021               	movlb	1	; select bank1
  9471  1385  0857               	movf	_top_push_state^(0+128),w
  9472  1386  0020               	movlb	0	; select bank0
  9473  1387  00A2               	movwf	set_leds_top@x
  9474  1388  3001               	movlw	1
  9475  1389  00A4               	movwf	set_leds_top@ledState
  9476  138A  3000               	movlw	0
  9477  138B  00A5               	movwf	set_leds_top@ledState+1
  9478  138C  3194  2490  3193   	fcall	_set_leds_top
  9479                           
  9480                           ;tactiles.c: 73: delay_time_changed = 1;
  9481  138F  3001               	movlw	1
  9482  1390  0022               	movlb	2	; select bank2
  9483  1391  00DC               	movwf	_delay_time_changed^(0+256)
  9484  1392  3000               	movlw	0
  9485  1393  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  9486  1394                     l862:	
  9487                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9488                           
  9489  1394  0020               	movlb	0	; select bank0
  9490  1395  1E8F               	btfss	15,5	;volatile
  9491  1396  2B94               	goto	l862
  9492                           
  9493                           ;tactiles.c: 77: }
  9494                           ;tactiles.c: 78: wait_ms(20);
  9495  1397  3014               	movlw	20
  9496  1398  00AE               	movwf	wait_ms@timeSec
  9497  1399  3000               	movlw	0
  9498  139A  00AF               	movwf	wait_ms@timeSec+1
  9499  139B  3190  2003         	fcall	_wait_ms
  9500  139D  0008               	return
  9501  139E                     __end_of_read_top_tactile:	
  9502                           
  9503                           	psect	text16
  9504  1273                     __ptext16:	
  9505 ;; *************** function _read_bottom_tactile *****************
  9506 ;; Defined at:
  9507 ;;		line 17 in file "tactiles.c"
  9508 ;; Parameters:    Size  Location     Type
  9509 ;;		None
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;		None
  9512 ;; Return value:  Size  Location     Type
  9513 ;;                  1    wreg      void 
  9514 ;; Registers used:
  9515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9516 ;; Tracked objects:
  9517 ;;		On entry : 0/0
  9518 ;;		On exit  : 0/0
  9519 ;;		Unchanged: 0/0
  9520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9525 ;;Total ram usage:        1 bytes
  9526 ;; Hardware stack levels used:    1
  9527 ;; Hardware stack levels required when called:    4
  9528 ;; This function calls:
  9529 ;;		_set_leds_bottom
  9530 ;;		_wait_ms
  9531 ;; This function is called by:
  9532 ;;		_main
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _read_bottom_tactile
  9538  1273                     _read_bottom_tactile:	
  9539                           
  9540                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9544  1273  0020               	movlb	0	; select bank0
  9545  1274  1B0F               	btfsc	15,6	;volatile
  9546  1275  2A7D               	goto	l5414
  9547                           
  9548                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9549  1276  0022               	movlb	2	; select bank2
  9550  1277  0850               	movf	_bottomTactile_pressed^(0+256),w
  9551  1278  1903               	btfsc	3,2
  9552  1279  2A88               	goto	l846
  9553                           
  9554                           ;tactiles.c: 27: bottomTactile_pressed--;
  9555  127A  3001               	movlw	1
  9556  127B  02D0               	subwf	_bottomTactile_pressed^(0+256),f
  9557                           
  9558                           ;tactiles.c: 28: }
  9559                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9560  127C  2A88               	goto	l846
  9561  127D                     l5414:	
  9562  127D  3019               	movlw	25
  9563  127E  0022               	movlb	2	; select bank2
  9564  127F  0250               	subwf	_bottomTactile_pressed^(0+256),w
  9565  1280  1803               	skipnc
  9566  1281  2A88               	goto	l846
  9567                           
  9568                           ;tactiles.c: 30: bottomTactile_pressed++;
  9569  1282  3001               	movlw	1
  9570  1283  0020               	movlb	0	; select bank0
  9571  1284  00B4               	movwf	??_read_bottom_tactile
  9572  1285  0834               	movf	??_read_bottom_tactile,w
  9573  1286  0022               	movlb	2	; select bank2
  9574  1287  07D0               	addwf	_bottomTactile_pressed^(0+256),f
  9575  1288                     l846:	
  9576                           
  9577                           ;tactiles.c: 31: }
  9578                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9579  1288  0850               	movf	_bottomTactile_pressed^(0+256),w
  9580  1289  1D03               	btfss	3,2
  9581  128A  0008               	return
  9582                           
  9583                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9584  128B  0021               	movlb	1	; select bank1
  9585  128C  0851               	movf	_bottom_push_state^(0+128),w
  9586  128D  3E01               	addlw	1
  9587  128E  00D1               	movwf	_bottom_push_state^(0+128)
  9588  128F  3000               	movlw	0
  9589  1290  3D52               	addwfc	(_bottom_push_state+1)^(0+128),w
  9590  1291  00D2               	movwf	(_bottom_push_state+1)^(0+128)
  9591                           
  9592                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9593  1292  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9594  1293  3A80               	xorlw	128
  9595  1294  0020               	movlb	0	; select bank0
  9596  1295  00B4               	movwf	??_read_bottom_tactile
  9597  1296  3080               	movlw	128
  9598  1297  0234               	subwf	??_read_bottom_tactile,w
  9599  1298  1D03               	skipz
  9600  1299  2A9D               	goto	u5885
  9601  129A  3007               	movlw	7
  9602  129B  0021               	movlb	1	; select bank1
  9603  129C  0251               	subwf	_bottom_push_state^(0+128),w
  9604  129D                     u5885:	
  9605  129D  1C03               	skipc
  9606  129E  2AA4               	goto	l5424
  9607                           
  9608                           ;tactiles.c: 37: bottom_push_state = 1;
  9609  129F  3001               	movlw	1
  9610  12A0  0021               	movlb	1	; select bank1
  9611  12A1  00D1               	movwf	_bottom_push_state^(0+128)
  9612  12A2  3000               	movlw	0
  9613  12A3  00D2               	movwf	(_bottom_push_state^(0+128)+1)
  9614  12A4                     l5424:	
  9615                           
  9616                           ;tactiles.c: 38: }
  9617                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9618  12A4  0021               	movlb	1	; select bank1
  9619  12A5  0852               	movf	(_bottom_push_state+1)^(0+128),w
  9620  12A6  0020               	movlb	0	; select bank0
  9621  12A7  00A3               	movwf	set_leds_bottom@x+1
  9622  12A8  0021               	movlb	1	; select bank1
  9623  12A9  0851               	movf	_bottom_push_state^(0+128),w
  9624  12AA  0020               	movlb	0	; select bank0
  9625  12AB  00A2               	movwf	set_leds_bottom@x
  9626  12AC  319F  2788  3192   	fcall	_set_leds_bottom
  9627  12AF                     l850:	
  9628                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9629                           
  9630  12AF  0020               	movlb	0	; select bank0
  9631  12B0  1F0F               	btfss	15,6	;volatile
  9632  12B1  2AAF               	goto	l850
  9633                           
  9634                           ;tactiles.c: 42: }
  9635                           ;tactiles.c: 43: wait_ms(20);
  9636  12B2  3014               	movlw	20
  9637  12B3  00AE               	movwf	wait_ms@timeSec
  9638  12B4  3000               	movlw	0
  9639  12B5  00AF               	movwf	wait_ms@timeSec+1
  9640  12B6  3190  2003         	fcall	_wait_ms
  9641  12B8  0008               	return
  9642  12B9                     __end_of_read_bottom_tactile:	
  9643                           
  9644                           	psect	text17
  9645  1035                     __ptext17:	
  9646 ;; *************** function _modulation *****************
  9647 ;; Defined at:
  9648 ;;		line 181 in file "user.c"
  9649 ;; Parameters:    Size  Location     Type
  9650 ;;  x               2   23[BANK0 ] int 
  9651 ;;  y               2   25[BANK0 ] int 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;		None
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  2   23[BANK0 ] int 
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0, pclath, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9663 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9664 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9665 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9666 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9667 ;;Total ram usage:       12 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    3
  9670 ;; This function calls:
  9671 ;;		___aldiv
  9672 ;;		___wmul
  9673 ;; This function is called by:
  9674 ;;		_main
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           
  9679                           ;psect for function _modulation
  9680  1035                     _modulation:	
  9681                           
  9682                           ;user.c: 183: x = (127500 + (y * x)) / 1000;
  9683                           
  9684                           ;incstack = 0
  9685                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9686  1035  3000               	movlw	0
  9687  1036  0020               	movlb	0	; select bank0
  9688  1037  00AB               	movwf	___aldiv@divisor+3
  9689  1038  3000               	movlw	0
  9690  1039  00AA               	movwf	___aldiv@divisor+2
  9691  103A  3003               	movlw	3
  9692  103B  00A9               	movwf	___aldiv@divisor+1
  9693  103C  30E8               	movlw	232
  9694  103D  00A8               	movwf	___aldiv@divisor
  9695  103E  300C               	movlw	12
  9696  103F  00BB               	movwf	??_modulation
  9697  1040  30F2               	movlw	242
  9698  1041  00BC               	movwf	??_modulation+1
  9699  1042  3001               	movlw	1
  9700  1043  00BD               	movwf	??_modulation+2
  9701  1044  3000               	movlw	0
  9702  1045  00BE               	movwf	??_modulation+3
  9703  1046  083A               	movf	modulation@y+1,w
  9704  1047  00A3               	movwf	___wmul@multiplier+1
  9705  1048  0839               	movf	modulation@y,w
  9706  1049  00A2               	movwf	___wmul@multiplier
  9707  104A  0838               	movf	modulation@x+1,w
  9708  104B  00A5               	movwf	___wmul@multiplicand+1
  9709  104C  0837               	movf	modulation@x,w
  9710  104D  00A4               	movwf	___wmul@multiplicand
  9711  104E  319E  264C  3190   	fcall	___wmul
  9712  1051  0020               	movlb	0	; select bank0
  9713  1052  0822               	movf	?___wmul,w
  9714  1053  00BF               	movwf	??_modulation+4
  9715  1054  0823               	movf	?___wmul+1,w
  9716  1055  00C0               	movwf	??_modulation+5
  9717  1056  3000               	movlw	0
  9718  1057  1BC0               	btfsc	??_modulation+5,7
  9719  1058  30FF               	movlw	255
  9720  1059  00C1               	movwf	??_modulation+6
  9721  105A  00C2               	movwf	??_modulation+7
  9722  105B  083F               	movf	??_modulation+4,w
  9723  105C  07BB               	addwf	??_modulation,f
  9724  105D  0840               	movf	??_modulation+5,w
  9725  105E  3DBC               	addwfc	??_modulation+1,f
  9726  105F  0841               	movf	??_modulation+6,w
  9727  1060  3DBD               	addwfc	??_modulation+2,f
  9728  1061  0842               	movf	??_modulation+7,w
  9729  1062  3DBE               	addwfc	??_modulation+3,f
  9730  1063  083E               	movf	??_modulation+3,w
  9731  1064  00AF               	movwf	___aldiv@dividend+3
  9732  1065  083D               	movf	??_modulation+2,w
  9733  1066  00AE               	movwf	___aldiv@dividend+2
  9734  1067  083C               	movf	??_modulation+1,w
  9735  1068  00AD               	movwf	___aldiv@dividend+1
  9736  1069  083B               	movf	??_modulation,w
  9737  106A  00AC               	movwf	___aldiv@dividend
  9738  106B  3195  25B8         	fcall	___aldiv
  9739  106D  0020               	movlb	0	; select bank0
  9740  106E  0829               	movf	?___aldiv+1,w
  9741  106F  00B8               	movwf	modulation@x+1
  9742  1070  0828               	movf	?___aldiv,w
  9743  1071  00B7               	movwf	modulation@x
  9744                           
  9745                           ;user.c: 184: return x;
  9746  1072  0008               	return
  9747  1073                     __end_of_modulation:	
  9748                           
  9749                           	psect	text18
  9750  1E4C                     __ptext18:	
  9751 ;; *************** function ___wmul *****************
  9752 ;; Defined at:
  9753 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  9754 ;; Parameters:    Size  Location     Type
  9755 ;;  multiplier      2    2[BANK0 ] unsigned int 
  9756 ;;  multiplicand    2    4[BANK0 ] unsigned int 
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;  product         2    6[BANK0 ] unsigned int 
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  2    2[BANK0 ] unsigned int 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2, status,0
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9768 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9771 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9772 ;;Total ram usage:        6 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    2
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_modulation
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           
  9783                           ;psect for function ___wmul
  9784  1E4C                     ___wmul:	
  9785                           
  9786                           ;incstack = 0
  9787                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9788  1E4C  0020               	movlb	0	; select bank0
  9789  1E4D  01A6               	clrf	___wmul@product
  9790  1E4E  01A7               	clrf	___wmul@product+1
  9791  1E4F                     l5082:	
  9792  1E4F  1C22               	btfss	___wmul@multiplier,0
  9793  1E50  2E55               	goto	l1324
  9794  1E51  0824               	movf	___wmul@multiplicand,w
  9795  1E52  07A6               	addwf	___wmul@product,f
  9796  1E53  0825               	movf	___wmul@multiplicand+1,w
  9797  1E54  3DA7               	addwfc	___wmul@product+1,f
  9798  1E55                     l1324:	
  9799  1E55  3001               	movlw	1
  9800  1E56                     u5115:	
  9801  1E56  35A4               	lslf	___wmul@multiplicand,f
  9802  1E57  0DA5               	rlf	___wmul@multiplicand+1,f
  9803  1E58  0B89               	decfsz	9,f
  9804  1E59  2E56               	goto	u5115
  9805  1E5A  3001               	movlw	1
  9806  1E5B                     u5125:	
  9807  1E5B  36A3               	lsrf	___wmul@multiplier+1,f
  9808  1E5C  0CA2               	rrf	___wmul@multiplier,f
  9809  1E5D  0B89               	decfsz	9,f
  9810  1E5E  2E5B               	goto	u5125
  9811  1E5F  0822               	movf	___wmul@multiplier,w
  9812  1E60  0423               	iorwf	___wmul@multiplier+1,w
  9813  1E61  1D03               	btfss	3,2
  9814  1E62  2E4F               	goto	l5082
  9815  1E63  0827               	movf	___wmul@product+1,w
  9816  1E64  00A3               	movwf	?___wmul+1
  9817  1E65  0826               	movf	___wmul@product,w
  9818  1E66  00A2               	movwf	?___wmul
  9819  1E67  0008               	return
  9820  1E68                     __end_of___wmul:	
  9821                           
  9822                           	psect	text19
  9823  15B8                     __ptext19:	
  9824 ;; *************** function ___aldiv *****************
  9825 ;; Defined at:
  9826 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9827 ;; Parameters:    Size  Location     Type
  9828 ;;  divisor         4    8[BANK0 ] long 
  9829 ;;  dividend        4   12[BANK0 ] long 
  9830 ;; Auto vars:     Size  Location     Type
  9831 ;;  quotient        4   19[BANK0 ] long 
  9832 ;;  sign            1   18[BANK0 ] unsigned char 
  9833 ;;  counter         1   17[BANK0 ] unsigned char 
  9834 ;; Return value:  Size  Location     Type
  9835 ;;                  4    8[BANK0 ] long 
  9836 ;; Registers used:
  9837 ;;		wreg, status,2, status,0
  9838 ;; Tracked objects:
  9839 ;;		On entry : 0/0
  9840 ;;		On exit  : 0/0
  9841 ;;		Unchanged: 0/0
  9842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9843 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9844 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9846 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9847 ;;Total ram usage:       15 bytes
  9848 ;; Hardware stack levels used:    1
  9849 ;; Hardware stack levels required when called:    2
  9850 ;; This function calls:
  9851 ;;		Nothing
  9852 ;; This function is called by:
  9853 ;;		_modulation
  9854 ;;		_updateSwitchTap
  9855 ;; This function uses a non-reentrant model
  9856 ;;
  9857                           
  9858                           
  9859                           ;psect for function ___aldiv
  9860  15B8                     ___aldiv:	
  9861                           
  9862                           ;incstack = 0
  9863                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9864  15B8  0020               	movlb	0	; select bank0
  9865  15B9  01B2               	clrf	___aldiv@sign
  9866  15BA  1FAB               	btfss	___aldiv@divisor+3,7
  9867  15BB  2DC9               	goto	l1379
  9868  15BC  09A8               	comf	___aldiv@divisor,f
  9869  15BD  09A9               	comf	___aldiv@divisor+1,f
  9870  15BE  09AA               	comf	___aldiv@divisor+2,f
  9871  15BF  09AB               	comf	___aldiv@divisor+3,f
  9872  15C0  0AA8               	incf	___aldiv@divisor,f
  9873  15C1  1903               	skipnz
  9874  15C2  0AA9               	incf	___aldiv@divisor+1,f
  9875  15C3  1903               	skipnz
  9876  15C4  0AAA               	incf	___aldiv@divisor+2,f
  9877  15C5  1903               	skipnz
  9878  15C6  0AAB               	incf	___aldiv@divisor+3,f
  9879  15C7  01B2               	clrf	___aldiv@sign
  9880  15C8  0AB2               	incf	___aldiv@sign,f
  9881  15C9                     l1379:	
  9882  15C9  1FAF               	btfss	___aldiv@dividend+3,7
  9883  15CA  2DDA               	goto	l5104
  9884  15CB  09AC               	comf	___aldiv@dividend,f
  9885  15CC  09AD               	comf	___aldiv@dividend+1,f
  9886  15CD  09AE               	comf	___aldiv@dividend+2,f
  9887  15CE  09AF               	comf	___aldiv@dividend+3,f
  9888  15CF  0AAC               	incf	___aldiv@dividend,f
  9889  15D0  1903               	skipnz
  9890  15D1  0AAD               	incf	___aldiv@dividend+1,f
  9891  15D2  1903               	skipnz
  9892  15D3  0AAE               	incf	___aldiv@dividend+2,f
  9893  15D4  1903               	skipnz
  9894  15D5  0AAF               	incf	___aldiv@dividend+3,f
  9895  15D6  3001               	movlw	1
  9896  15D7  00B0               	movwf	??___aldiv
  9897  15D8  0830               	movf	??___aldiv,w
  9898  15D9  06B2               	xorwf	___aldiv@sign,f
  9899  15DA                     l5104:	
  9900  15DA  3000               	movlw	0
  9901  15DB  00B6               	movwf	___aldiv@quotient+3
  9902  15DC  3000               	movlw	0
  9903  15DD  00B5               	movwf	___aldiv@quotient+2
  9904  15DE  3000               	movlw	0
  9905  15DF  00B4               	movwf	___aldiv@quotient+1
  9906  15E0  3000               	movlw	0
  9907  15E1  00B3               	movwf	___aldiv@quotient
  9908  15E2  082B               	movf	___aldiv@divisor+3,w
  9909  15E3  042A               	iorwf	___aldiv@divisor+2,w
  9910  15E4  0429               	iorwf	___aldiv@divisor+1,w
  9911  15E5  0428               	iorwf	___aldiv@divisor,w
  9912  15E6  1903               	skipnz
  9913  15E7  2E23               	goto	l5126
  9914  15E8  01B1               	clrf	___aldiv@counter
  9915  15E9  0AB1               	incf	___aldiv@counter,f
  9916  15EA                     l5112:	
  9917  15EA  1BAB               	btfsc	___aldiv@divisor+3,7
  9918  15EB  2DF8               	goto	l5114
  9919  15EC  3001               	movlw	1
  9920  15ED                     u5175:	
  9921  15ED  35A8               	lslf	___aldiv@divisor,f
  9922  15EE  0DA9               	rlf	___aldiv@divisor+1,f
  9923  15EF  0DAA               	rlf	___aldiv@divisor+2,f
  9924  15F0  0DAB               	rlf	___aldiv@divisor+3,f
  9925  15F1  0B89               	decfsz	9,f
  9926  15F2  2DED               	goto	u5175
  9927  15F3  3001               	movlw	1
  9928  15F4  00B0               	movwf	??___aldiv
  9929  15F5  0830               	movf	??___aldiv,w
  9930  15F6  07B1               	addwf	___aldiv@counter,f
  9931  15F7  2DEA               	goto	l5112
  9932  15F8                     l5114:	
  9933  15F8  3001               	movlw	1
  9934  15F9                     u5195:	
  9935  15F9  35B3               	lslf	___aldiv@quotient,f
  9936  15FA  0DB4               	rlf	___aldiv@quotient+1,f
  9937  15FB  0DB5               	rlf	___aldiv@quotient+2,f
  9938  15FC  0DB6               	rlf	___aldiv@quotient+3,f
  9939  15FD  0B89               	decfsz	9,f
  9940  15FE  2DF9               	goto	u5195
  9941  15FF  082B               	movf	___aldiv@divisor+3,w
  9942  1600  022F               	subwf	___aldiv@dividend+3,w
  9943  1601  1D03               	skipz
  9944  1602  2E0D               	goto	u5205
  9945  1603  082A               	movf	___aldiv@divisor+2,w
  9946  1604  022E               	subwf	___aldiv@dividend+2,w
  9947  1605  1D03               	skipz
  9948  1606  2E0D               	goto	u5205
  9949  1607  0829               	movf	___aldiv@divisor+1,w
  9950  1608  022D               	subwf	___aldiv@dividend+1,w
  9951  1609  1D03               	skipz
  9952  160A  2E0D               	goto	u5205
  9953  160B  0828               	movf	___aldiv@divisor,w
  9954  160C  022C               	subwf	___aldiv@dividend,w
  9955  160D                     u5205:	
  9956  160D  1C03               	skipc
  9957  160E  2E18               	goto	l5122
  9958  160F  0828               	movf	___aldiv@divisor,w
  9959  1610  02AC               	subwf	___aldiv@dividend,f
  9960  1611  0829               	movf	___aldiv@divisor+1,w
  9961  1612  3BAD               	subwfb	___aldiv@dividend+1,f
  9962  1613  082A               	movf	___aldiv@divisor+2,w
  9963  1614  3BAE               	subwfb	___aldiv@dividend+2,f
  9964  1615  082B               	movf	___aldiv@divisor+3,w
  9965  1616  3BAF               	subwfb	___aldiv@dividend+3,f
  9966  1617  1433               	bsf	___aldiv@quotient,0
  9967  1618                     l5122:	
  9968  1618  3001               	movlw	1
  9969  1619                     u5215:	
  9970  1619  36AB               	lsrf	___aldiv@divisor+3,f
  9971  161A  0CAA               	rrf	___aldiv@divisor+2,f
  9972  161B  0CA9               	rrf	___aldiv@divisor+1,f
  9973  161C  0CA8               	rrf	___aldiv@divisor,f
  9974  161D  0B89               	decfsz	9,f
  9975  161E  2E19               	goto	u5215
  9976  161F  3001               	movlw	1
  9977  1620  02B1               	subwf	___aldiv@counter,f
  9978  1621  1D03               	btfss	3,2
  9979  1622  2DF8               	goto	l5114
  9980  1623                     l5126:	
  9981  1623  0832               	movf	___aldiv@sign,w
  9982  1624  1903               	btfsc	3,2
  9983  1625  2E31               	goto	l5130
  9984  1626  09B3               	comf	___aldiv@quotient,f
  9985  1627  09B4               	comf	___aldiv@quotient+1,f
  9986  1628  09B5               	comf	___aldiv@quotient+2,f
  9987  1629  09B6               	comf	___aldiv@quotient+3,f
  9988  162A  0AB3               	incf	___aldiv@quotient,f
  9989  162B  1903               	skipnz
  9990  162C  0AB4               	incf	___aldiv@quotient+1,f
  9991  162D  1903               	skipnz
  9992  162E  0AB5               	incf	___aldiv@quotient+2,f
  9993  162F  1903               	skipnz
  9994  1630  0AB6               	incf	___aldiv@quotient+3,f
  9995  1631                     l5130:	
  9996  1631  0836               	movf	___aldiv@quotient+3,w
  9997  1632  00AB               	movwf	?___aldiv+3
  9998  1633  0835               	movf	___aldiv@quotient+2,w
  9999  1634  00AA               	movwf	?___aldiv+2
 10000  1635  0834               	movf	___aldiv@quotient+1,w
 10001  1636  00A9               	movwf	?___aldiv+1
 10002  1637  0833               	movf	___aldiv@quotient,w
 10003  1638  00A8               	movwf	?___aldiv
 10004  1639  0008               	return
 10005  163A                     __end_of___aldiv:	
 10006                           
 10007                           	psect	text20
 10008  16C1                     __ptext20:	
 10009 ;; *************** function _map *****************
 10010 ;; Defined at:
 10011 ;;		line 171 in file "user.c"
 10012 ;; Parameters:    Size  Location     Type
 10013 ;;  x               3   55[BANK0 ] float 
 10014 ;;  in_min          3   58[BANK0 ] float 
 10015 ;;  in_max          3   61[BANK0 ] float 
 10016 ;;  out_min         3   64[BANK0 ] float 
 10017 ;;  out_max         3   67[BANK0 ] float 
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;		None
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  3   55[BANK0 ] float 
 10022 ;; Registers used:
 10023 ;;		wreg, status,2, status,0, pclath, cstack
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10029 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10030 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10032 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10033 ;;Total ram usage:       18 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    4
 10036 ;; This function calls:
 10037 ;;		___ftadd
 10038 ;;		___ftdiv
 10039 ;;		___ftmul
 10040 ;;		___ftneg
 10041 ;; This function is called by:
 10042 ;;		_main
 10043 ;; This function uses a non-reentrant model
 10044 ;;
 10045                           
 10046                           
 10047                           ;psect for function _map
 10048  16C1                     _map:	
 10049                           
 10050                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10051                           
 10052                           ;incstack = 0
 10053                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
 10054  16C1  0020               	movlb	0	; select bank0
 10055  16C2  085D               	movf	map@in_max,w
 10056  16C3  00AA               	movwf	___ftadd@f1
 10057  16C4  085E               	movf	map@in_max+1,w
 10058  16C5  00AB               	movwf	___ftadd@f1+1
 10059  16C6  085F               	movf	map@in_max+2,w
 10060  16C7  00AC               	movwf	___ftadd@f1+2
 10061  16C8  085A               	movf	map@in_min,w
 10062  16C9  00A2               	movwf	___ftneg@f1
 10063  16CA  085B               	movf	map@in_min+1,w
 10064  16CB  00A3               	movwf	___ftneg@f1+1
 10065  16CC  085C               	movf	map@in_min+2,w
 10066  16CD  00A4               	movwf	___ftneg@f1+2
 10067  16CE  3188  2000  3196   	fcall	___ftneg
 10068  16D1  0020               	movlb	0	; select bank0
 10069  16D2  0822               	movf	?___ftneg,w
 10070  16D3  00AD               	movwf	___ftadd@f2
 10071  16D4  0823               	movf	?___ftneg+1,w
 10072  16D5  00AE               	movwf	___ftadd@f2+1
 10073  16D6  0824               	movf	?___ftneg+2,w
 10074  16D7  00AF               	movwf	___ftadd@f2+2
 10075  16D8  3189  217A  3196   	fcall	___ftadd
 10076  16DB  0020               	movlb	0	; select bank0
 10077  16DC  082A               	movf	?___ftadd,w
 10078  16DD  00C7               	movwf	___ftdiv@f2
 10079  16DE  082B               	movf	?___ftadd+1,w
 10080  16DF  00C8               	movwf	___ftdiv@f2+1
 10081  16E0  082C               	movf	?___ftadd+2,w
 10082  16E1  00C9               	movwf	___ftdiv@f2+2
 10083  16E2  0863               	movf	map@out_max,w
 10084  16E3  00AA               	movwf	___ftadd@f1
 10085  16E4  0864               	movf	map@out_max+1,w
 10086  16E5  00AB               	movwf	___ftadd@f1+1
 10087  16E6  0865               	movf	map@out_max+2,w
 10088  16E7  00AC               	movwf	___ftadd@f1+2
 10089  16E8  0860               	movf	map@out_min,w
 10090  16E9  00A2               	movwf	___ftneg@f1
 10091  16EA  0861               	movf	map@out_min+1,w
 10092  16EB  00A3               	movwf	___ftneg@f1+1
 10093  16EC  0862               	movf	map@out_min+2,w
 10094  16ED  00A4               	movwf	___ftneg@f1+2
 10095  16EE  3188  2000  3196   	fcall	___ftneg
 10096  16F1  0020               	movlb	0	; select bank0
 10097  16F2  0822               	movf	?___ftneg,w
 10098  16F3  00AD               	movwf	___ftadd@f2
 10099  16F4  0823               	movf	?___ftneg+1,w
 10100  16F5  00AE               	movwf	___ftadd@f2+1
 10101  16F6  0824               	movf	?___ftneg+2,w
 10102  16F7  00AF               	movwf	___ftadd@f2+2
 10103  16F8  3189  217A  3196   	fcall	___ftadd
 10104  16FB  0020               	movlb	0	; select bank0
 10105  16FC  082A               	movf	?___ftadd,w
 10106  16FD  00B7               	movwf	___ftmul@f1
 10107  16FE  082B               	movf	?___ftadd+1,w
 10108  16FF  00B8               	movwf	___ftmul@f1+1
 10109  1700  082C               	movf	?___ftadd+2,w
 10110  1701  00B9               	movwf	___ftmul@f1+2
 10111  1702  0857               	movf	map@x,w
 10112  1703  00AA               	movwf	___ftadd@f1
 10113  1704  0858               	movf	map@x+1,w
 10114  1705  00AB               	movwf	___ftadd@f1+1
 10115  1706  0859               	movf	map@x+2,w
 10116  1707  00AC               	movwf	___ftadd@f1+2
 10117  1708  085A               	movf	map@in_min,w
 10118  1709  00A2               	movwf	___ftneg@f1
 10119  170A  085B               	movf	map@in_min+1,w
 10120  170B  00A3               	movwf	___ftneg@f1+1
 10121  170C  085C               	movf	map@in_min+2,w
 10122  170D  00A4               	movwf	___ftneg@f1+2
 10123  170E  3188  2000  3196   	fcall	___ftneg
 10124  1711  0020               	movlb	0	; select bank0
 10125  1712  0822               	movf	?___ftneg,w
 10126  1713  00AD               	movwf	___ftadd@f2
 10127  1714  0823               	movf	?___ftneg+1,w
 10128  1715  00AE               	movwf	___ftadd@f2+1
 10129  1716  0824               	movf	?___ftneg+2,w
 10130  1717  00AF               	movwf	___ftadd@f2+2
 10131  1718  3189  217A  3196   	fcall	___ftadd
 10132  171B  0020               	movlb	0	; select bank0
 10133  171C  082A               	movf	?___ftadd,w
 10134  171D  00BA               	movwf	___ftmul@f2
 10135  171E  082B               	movf	?___ftadd+1,w
 10136  171F  00BB               	movwf	___ftmul@f2+1
 10137  1720  082C               	movf	?___ftadd+2,w
 10138  1721  00BC               	movwf	___ftmul@f2+2
 10139  1722  3197  274C  3196   	fcall	___ftmul
 10140  1725  0020               	movlb	0	; select bank0
 10141  1726  0837               	movf	?___ftmul,w
 10142  1727  00CA               	movwf	___ftdiv@f1
 10143  1728  0838               	movf	?___ftmul+1,w
 10144  1729  00CB               	movwf	___ftdiv@f1+1
 10145  172A  0839               	movf	?___ftmul+2,w
 10146  172B  00CC               	movwf	___ftdiv@f1+2
 10147  172C  3188  2009  3196   	fcall	___ftdiv
 10148  172F  0020               	movlb	0	; select bank0
 10149  1730  0847               	movf	?___ftdiv,w
 10150  1731  00E6               	movwf	_map$2176
 10151  1732  0848               	movf	?___ftdiv+1,w
 10152  1733  00E7               	movwf	_map$2176+1
 10153  1734  0849               	movf	?___ftdiv+2,w
 10154  1735  00E8               	movwf	_map$2176+2
 10155                           
 10156                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 10157  1736  0860               	movf	map@out_min,w
 10158  1737  00AA               	movwf	___ftadd@f1
 10159  1738  0861               	movf	map@out_min+1,w
 10160  1739  00AB               	movwf	___ftadd@f1+1
 10161  173A  0862               	movf	map@out_min+2,w
 10162  173B  00AC               	movwf	___ftadd@f1+2
 10163  173C  0866               	movf	_map$2176,w
 10164  173D  00AD               	movwf	___ftadd@f2
 10165  173E  0867               	movf	_map$2176+1,w
 10166  173F  00AE               	movwf	___ftadd@f2+1
 10167  1740  0868               	movf	_map$2176+2,w
 10168  1741  00AF               	movwf	___ftadd@f2+2
 10169  1742  3189  217A         	fcall	___ftadd
 10170  1744  0020               	movlb	0	; select bank0
 10171  1745  082A               	movf	?___ftadd,w
 10172  1746  00D7               	movwf	?_map
 10173  1747  082B               	movf	?___ftadd+1,w
 10174  1748  00D8               	movwf	?_map+1
 10175  1749  082C               	movf	?___ftadd+2,w
 10176  174A  00D9               	movwf	?_map+2
 10177  174B  0008               	return
 10178  174C                     __end_of_map:	
 10179                           
 10180                           	psect	text21
 10181  0800                     __ptext21:	
 10182 ;; *************** function ___ftneg *****************
 10183 ;; Defined at:
 10184 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
 10185 ;; Parameters:    Size  Location     Type
 10186 ;;  f1              3    2[BANK0 ] float 
 10187 ;; Auto vars:     Size  Location     Type
 10188 ;;		None
 10189 ;; Return value:  Size  Location     Type
 10190 ;;                  3    2[BANK0 ] float 
 10191 ;; Registers used:
 10192 ;;		wreg
 10193 ;; Tracked objects:
 10194 ;;		On entry : 0/0
 10195 ;;		On exit  : 0/0
 10196 ;;		Unchanged: 0/0
 10197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10198 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10201 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10202 ;;Total ram usage:        3 bytes
 10203 ;; Hardware stack levels used:    1
 10204 ;; Hardware stack levels required when called:    2
 10205 ;; This function calls:
 10206 ;;		Nothing
 10207 ;; This function is called by:
 10208 ;;		_map
 10209 ;;		_scalePotValue
 10210 ;; This function uses a non-reentrant model
 10211 ;;
 10212                           
 10213                           
 10214                           ;psect for function ___ftneg
 10215  0800                     ___ftneg:	
 10216                           
 10217                           ;incstack = 0
 10218                           ; Regs used in ___ftneg: [wreg]
 10219  0800  0020               	movlb	0	; select bank0
 10220  0801  0824               	movf	___ftneg@f1+2,w
 10221  0802  0423               	iorwf	___ftneg@f1+1,w
 10222  0803  0422               	iorwf	___ftneg@f1,w
 10223  0804  1903               	skipnz
 10224  0805  0008               	return
 10225  0806  3080               	movlw	128
 10226  0807  06A4               	xorwf	___ftneg@f1+2,f
 10227  0808  0008               	return
 10228  0809                     __end_of___ftneg:	
 10229                           
 10230                           	psect	text22
 10231  174C                     __ptext22:	
 10232 ;; *************** function ___ftmul *****************
 10233 ;; Defined at:
 10234 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
 10235 ;; Parameters:    Size  Location     Type
 10236 ;;  f1              3   23[BANK0 ] float 
 10237 ;;  f2              3   26[BANK0 ] float 
 10238 ;; Auto vars:     Size  Location     Type
 10239 ;;  f3_as_produc    3   34[BANK0 ] unsigned um
 10240 ;;  sign            1   38[BANK0 ] unsigned char 
 10241 ;;  cntr            1   37[BANK0 ] unsigned char 
 10242 ;;  exp             1   33[BANK0 ] unsigned char 
 10243 ;; Return value:  Size  Location     Type
 10244 ;;                  3   23[BANK0 ] float 
 10245 ;; Registers used:
 10246 ;;		wreg, status,2, status,0, pclath, cstack
 10247 ;; Tracked objects:
 10248 ;;		On entry : 0/0
 10249 ;;		On exit  : 0/0
 10250 ;;		Unchanged: 0/0
 10251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10252 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10253 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10254 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10255 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10256 ;;Total ram usage:       16 bytes
 10257 ;; Hardware stack levels used:    1
 10258 ;; Hardware stack levels required when called:    3
 10259 ;; This function calls:
 10260 ;;		___ftpack
 10261 ;; This function is called by:
 10262 ;;		_set_subdivision
 10263 ;;		_map
 10264 ;;		_scalePotValue
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function ___ftmul
 10270  174C                     ___ftmul:	
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10274  174C  0020               	movlb	0	; select bank0
 10275  174D  0837               	movf	___ftmul@f1,w
 10276  174E  00BD               	movwf	??___ftmul
 10277  174F  0838               	movf	___ftmul@f1+1,w
 10278  1750  00BE               	movwf	??___ftmul+1
 10279  1751  0839               	movf	___ftmul@f1+2,w
 10280  1752  00BF               	movwf	??___ftmul+2
 10281  1753  1003               	clrc
 10282  1754  0D3E               	rlf	??___ftmul+1,w
 10283  1755  0D3F               	rlf	??___ftmul+2,w
 10284  1756  00C0               	movwf	??___ftmul+3
 10285  1757  0840               	movf	??___ftmul+3,w
 10286  1758  00C1               	movwf	___ftmul@exp
 10287  1759  0841               	movf	___ftmul@exp,w
 10288  175A  1D03               	btfss	3,2
 10289  175B  2F63               	goto	l5264
 10290  175C  3000               	movlw	0
 10291  175D  00B7               	movwf	?___ftmul
 10292  175E  3000               	movlw	0
 10293  175F  00B8               	movwf	?___ftmul+1
 10294  1760  3000               	movlw	0
 10295  1761  00B9               	movwf	?___ftmul+2
 10296  1762  0008               	return
 10297  1763                     l5264:	
 10298  1763  083A               	movf	___ftmul@f2,w
 10299  1764  00BD               	movwf	??___ftmul
 10300  1765  083B               	movf	___ftmul@f2+1,w
 10301  1766  00BE               	movwf	??___ftmul+1
 10302  1767  083C               	movf	___ftmul@f2+2,w
 10303  1768  00BF               	movwf	??___ftmul+2
 10304  1769  1003               	clrc
 10305  176A  0D3E               	rlf	??___ftmul+1,w
 10306  176B  0D3F               	rlf	??___ftmul+2,w
 10307  176C  00C0               	movwf	??___ftmul+3
 10308  176D  0840               	movf	??___ftmul+3,w
 10309  176E  00C6               	movwf	___ftmul@sign
 10310  176F  0846               	movf	___ftmul@sign,w
 10311  1770  1D03               	btfss	3,2
 10312  1771  2F79               	goto	l5270
 10313  1772  3000               	movlw	0
 10314  1773  00B7               	movwf	?___ftmul
 10315  1774  3000               	movlw	0
 10316  1775  00B8               	movwf	?___ftmul+1
 10317  1776  3000               	movlw	0
 10318  1777  00B9               	movwf	?___ftmul+2
 10319  1778  0008               	return
 10320  1779                     l5270:	
 10321  1779  0846               	movf	___ftmul@sign,w
 10322  177A  3E7B               	addlw	123
 10323  177B  00BD               	movwf	??___ftmul
 10324  177C  083D               	movf	??___ftmul,w
 10325  177D  07C1               	addwf	___ftmul@exp,f
 10326  177E  0837               	movf	___ftmul@f1,w
 10327  177F  00BD               	movwf	??___ftmul
 10328  1780  0838               	movf	___ftmul@f1+1,w
 10329  1781  00BE               	movwf	??___ftmul+1
 10330  1782  0839               	movf	___ftmul@f1+2,w
 10331  1783  00BF               	movwf	??___ftmul+2
 10332  1784  3010               	movlw	16
 10333  1785                     u5585:	
 10334  1785  36BF               	lsrf	??___ftmul+2,f
 10335  1786  0CBE               	rrf	??___ftmul+1,f
 10336  1787  0CBD               	rrf	??___ftmul,f
 10337  1788  0B89               	decfsz	9,f
 10338  1789  2F85               	goto	u5585
 10339  178A  083D               	movf	??___ftmul,w
 10340  178B  00C0               	movwf	??___ftmul+3
 10341  178C  0840               	movf	??___ftmul+3,w
 10342  178D  00C6               	movwf	___ftmul@sign
 10343  178E  083A               	movf	___ftmul@f2,w
 10344  178F  00BD               	movwf	??___ftmul
 10345  1790  083B               	movf	___ftmul@f2+1,w
 10346  1791  00BE               	movwf	??___ftmul+1
 10347  1792  083C               	movf	___ftmul@f2+2,w
 10348  1793  00BF               	movwf	??___ftmul+2
 10349  1794  3010               	movlw	16
 10350  1795                     u5595:	
 10351  1795  36BF               	lsrf	??___ftmul+2,f
 10352  1796  0CBE               	rrf	??___ftmul+1,f
 10353  1797  0CBD               	rrf	??___ftmul,f
 10354  1798  0B89               	decfsz	9,f
 10355  1799  2F95               	goto	u5595
 10356  179A  083D               	movf	??___ftmul,w
 10357  179B  00C0               	movwf	??___ftmul+3
 10358  179C  0840               	movf	??___ftmul+3,w
 10359  179D  06C6               	xorwf	___ftmul@sign,f
 10360  179E  3080               	movlw	128
 10361  179F  00BD               	movwf	??___ftmul
 10362  17A0  083D               	movf	??___ftmul,w
 10363  17A1  05C6               	andwf	___ftmul@sign,f
 10364  17A2  17B8               	bsf	___ftmul@f1+1,7
 10365  17A3  17BB               	bsf	___ftmul@f2+1,7
 10366  17A4  30FF               	movlw	255
 10367  17A5  05BA               	andwf	___ftmul@f2,f
 10368  17A6  30FF               	movlw	255
 10369  17A7  05BB               	andwf	___ftmul@f2+1,f
 10370  17A8  3000               	movlw	0
 10371  17A9  05BC               	andwf	___ftmul@f2+2,f
 10372  17AA  3000               	movlw	0
 10373  17AB  00C2               	movwf	___ftmul@f3_as_product
 10374  17AC  3000               	movlw	0
 10375  17AD  00C3               	movwf	___ftmul@f3_as_product+1
 10376  17AE  3000               	movlw	0
 10377  17AF  00C4               	movwf	___ftmul@f3_as_product+2
 10378  17B0  3007               	movlw	7
 10379  17B1  00BD               	movwf	??___ftmul
 10380  17B2  083D               	movf	??___ftmul,w
 10381  17B3  00C5               	movwf	___ftmul@cntr
 10382  17B4                     l5282:	
 10383  17B4  1C37               	btfss	___ftmul@f1,0
 10384  17B5  2FBC               	goto	l5286
 10385  17B6  083A               	movf	___ftmul@f2,w
 10386  17B7  07C2               	addwf	___ftmul@f3_as_product,f
 10387  17B8  083B               	movf	___ftmul@f2+1,w
 10388  17B9  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10389  17BA  083C               	movf	___ftmul@f2+2,w
 10390  17BB  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10391  17BC                     l5286:	
 10392  17BC  3001               	movlw	1
 10393  17BD                     u5615:	
 10394  17BD  36B9               	lsrf	___ftmul@f1+2,f
 10395  17BE  0CB8               	rrf	___ftmul@f1+1,f
 10396  17BF  0CB7               	rrf	___ftmul@f1,f
 10397  17C0  0B89               	decfsz	9,f
 10398  17C1  2FBD               	goto	u5615
 10399  17C2  3001               	movlw	1
 10400  17C3                     u5625:	
 10401  17C3  35BA               	lslf	___ftmul@f2,f
 10402  17C4  0DBB               	rlf	___ftmul@f2+1,f
 10403  17C5  0DBC               	rlf	___ftmul@f2+2,f
 10404  17C6  0B89               	decfsz	9,f
 10405  17C7  2FC3               	goto	u5625
 10406  17C8  3001               	movlw	1
 10407  17C9  02C5               	subwf	___ftmul@cntr,f
 10408  17CA  1D03               	btfss	3,2
 10409  17CB  2FB4               	goto	l5282
 10410  17CC  3009               	movlw	9
 10411  17CD  00BD               	movwf	??___ftmul
 10412  17CE  083D               	movf	??___ftmul,w
 10413  17CF  00C5               	movwf	___ftmul@cntr
 10414  17D0                     l5294:	
 10415  17D0  1C37               	btfss	___ftmul@f1,0
 10416  17D1  2FD8               	goto	l5298
 10417  17D2  083A               	movf	___ftmul@f2,w
 10418  17D3  07C2               	addwf	___ftmul@f3_as_product,f
 10419  17D4  083B               	movf	___ftmul@f2+1,w
 10420  17D5  3DC3               	addwfc	___ftmul@f3_as_product+1,f
 10421  17D6  083C               	movf	___ftmul@f2+2,w
 10422  17D7  3DC4               	addwfc	___ftmul@f3_as_product+2,f
 10423  17D8                     l5298:	
 10424  17D8  3001               	movlw	1
 10425  17D9                     u5655:	
 10426  17D9  36B9               	lsrf	___ftmul@f1+2,f
 10427  17DA  0CB8               	rrf	___ftmul@f1+1,f
 10428  17DB  0CB7               	rrf	___ftmul@f1,f
 10429  17DC  0B89               	decfsz	9,f
 10430  17DD  2FD9               	goto	u5655
 10431  17DE  3001               	movlw	1
 10432  17DF                     u5665:	
 10433  17DF  36C4               	lsrf	___ftmul@f3_as_product+2,f
 10434  17E0  0CC3               	rrf	___ftmul@f3_as_product+1,f
 10435  17E1  0CC2               	rrf	___ftmul@f3_as_product,f
 10436  17E2  0B89               	decfsz	9,f
 10437  17E3  2FDF               	goto	u5665
 10438  17E4  3001               	movlw	1
 10439  17E5  02C5               	subwf	___ftmul@cntr,f
 10440  17E6  1D03               	btfss	3,2
 10441  17E7  2FD0               	goto	l5294
 10442  17E8  0842               	movf	___ftmul@f3_as_product,w
 10443  17E9  00A2               	movwf	___ftpack@arg
 10444  17EA  0843               	movf	___ftmul@f3_as_product+1,w
 10445  17EB  00A3               	movwf	___ftpack@arg+1
 10446  17EC  0844               	movf	___ftmul@f3_as_product+2,w
 10447  17ED  00A4               	movwf	___ftpack@arg+2
 10448  17EE  0841               	movf	___ftmul@exp,w
 10449  17EF  00BD               	movwf	??___ftmul
 10450  17F0  083D               	movf	??___ftmul,w
 10451  17F1  00A5               	movwf	___ftpack@exp
 10452  17F2  0846               	movf	___ftmul@sign,w
 10453  17F3  00BE               	movwf	??___ftmul+1
 10454  17F4  083E               	movf	??___ftmul+1,w
 10455  17F5  00A6               	movwf	___ftpack@sign
 10456  17F6  3194  24E4         	fcall	___ftpack
 10457  17F8  0020               	movlb	0	; select bank0
 10458  17F9  0822               	movf	?___ftpack,w
 10459  17FA  00B7               	movwf	?___ftmul
 10460  17FB  0823               	movf	?___ftpack+1,w
 10461  17FC  00B8               	movwf	?___ftmul+1
 10462  17FD  0824               	movf	?___ftpack+2,w
 10463  17FE  00B9               	movwf	?___ftmul+2
 10464  17FF  0008               	return
 10465  1800                     __end_of___ftmul:	
 10466                           
 10467                           	psect	text23
 10468  0809                     __ptext23:	
 10469 ;; *************** function ___ftdiv *****************
 10470 ;; Defined at:
 10471 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10472 ;; Parameters:    Size  Location     Type
 10473 ;;  f2              3   39[BANK0 ] float 
 10474 ;;  f1              3   42[BANK0 ] float 
 10475 ;; Auto vars:     Size  Location     Type
 10476 ;;  f3              3   50[BANK0 ] float 
 10477 ;;  sign            1   54[BANK0 ] unsigned char 
 10478 ;;  exp             1   53[BANK0 ] unsigned char 
 10479 ;;  cntr            1   49[BANK0 ] unsigned char 
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  3   39[BANK0 ] float 
 10482 ;; Registers used:
 10483 ;;		wreg, status,2, status,0, pclath, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10489 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10490 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10491 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10492 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10493 ;;Total ram usage:       16 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    3
 10496 ;; This function calls:
 10497 ;;		___ftpack
 10498 ;; This function is called by:
 10499 ;;		_main
 10500 ;;		_set_subdivision
 10501 ;;		_map
 10502 ;;		_scalePotValue
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           
 10507                           ;psect for function ___ftdiv
 10508  0809                     ___ftdiv:	
 10509                           
 10510                           ;incstack = 0
 10511                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10512  0809  0020               	movlb	0	; select bank0
 10513  080A  084A               	movf	___ftdiv@f1,w
 10514  080B  00CD               	movwf	??___ftdiv
 10515  080C  084B               	movf	___ftdiv@f1+1,w
 10516  080D  00CE               	movwf	??___ftdiv+1
 10517  080E  084C               	movf	___ftdiv@f1+2,w
 10518  080F  00CF               	movwf	??___ftdiv+2
 10519  0810  1003               	clrc
 10520  0811  0D4E               	rlf	??___ftdiv+1,w
 10521  0812  0D4F               	rlf	??___ftdiv+2,w
 10522  0813  00D0               	movwf	??___ftdiv+3
 10523  0814  0850               	movf	??___ftdiv+3,w
 10524  0815  00D5               	movwf	___ftdiv@exp
 10525  0816  0855               	movf	___ftdiv@exp,w
 10526  0817  1D03               	btfss	3,2
 10527  0818  2820               	goto	l5222
 10528  0819  3000               	movlw	0
 10529  081A  00C7               	movwf	?___ftdiv
 10530  081B  3000               	movlw	0
 10531  081C  00C8               	movwf	?___ftdiv+1
 10532  081D  3000               	movlw	0
 10533  081E  00C9               	movwf	?___ftdiv+2
 10534  081F  0008               	return
 10535  0820                     l5222:	
 10536  0820  0847               	movf	___ftdiv@f2,w
 10537  0821  00CD               	movwf	??___ftdiv
 10538  0822  0848               	movf	___ftdiv@f2+1,w
 10539  0823  00CE               	movwf	??___ftdiv+1
 10540  0824  0849               	movf	___ftdiv@f2+2,w
 10541  0825  00CF               	movwf	??___ftdiv+2
 10542  0826  1003               	clrc
 10543  0827  0D4E               	rlf	??___ftdiv+1,w
 10544  0828  0D4F               	rlf	??___ftdiv+2,w
 10545  0829  00D0               	movwf	??___ftdiv+3
 10546  082A  0850               	movf	??___ftdiv+3,w
 10547  082B  00D6               	movwf	___ftdiv@sign
 10548  082C  0856               	movf	___ftdiv@sign,w
 10549  082D  1D03               	btfss	3,2
 10550  082E  2836               	goto	l5228
 10551  082F  3000               	movlw	0
 10552  0830  00C7               	movwf	?___ftdiv
 10553  0831  3000               	movlw	0
 10554  0832  00C8               	movwf	?___ftdiv+1
 10555  0833  3000               	movlw	0
 10556  0834  00C9               	movwf	?___ftdiv+2
 10557  0835  0008               	return
 10558  0836                     l5228:	
 10559  0836  3000               	movlw	0
 10560  0837  00D2               	movwf	___ftdiv@f3
 10561  0838  3000               	movlw	0
 10562  0839  00D3               	movwf	___ftdiv@f3+1
 10563  083A  3000               	movlw	0
 10564  083B  00D4               	movwf	___ftdiv@f3+2
 10565  083C  3089               	movlw	137
 10566  083D  0756               	addwf	___ftdiv@sign,w
 10567  083E  00CD               	movwf	??___ftdiv
 10568  083F  084D               	movf	??___ftdiv,w
 10569  0840  02D5               	subwf	___ftdiv@exp,f
 10570  0841  084A               	movf	___ftdiv@f1,w
 10571  0842  00CD               	movwf	??___ftdiv
 10572  0843  084B               	movf	___ftdiv@f1+1,w
 10573  0844  00CE               	movwf	??___ftdiv+1
 10574  0845  084C               	movf	___ftdiv@f1+2,w
 10575  0846  00CF               	movwf	??___ftdiv+2
 10576  0847  3010               	movlw	16
 10577  0848                     u5505:	
 10578  0848  36CF               	lsrf	??___ftdiv+2,f
 10579  0849  0CCE               	rrf	??___ftdiv+1,f
 10580  084A  0CCD               	rrf	??___ftdiv,f
 10581  084B  0B89               	decfsz	9,f
 10582  084C  2848               	goto	u5505
 10583  084D  084D               	movf	??___ftdiv,w
 10584  084E  00D0               	movwf	??___ftdiv+3
 10585  084F  0850               	movf	??___ftdiv+3,w
 10586  0850  00D6               	movwf	___ftdiv@sign
 10587  0851  0847               	movf	___ftdiv@f2,w
 10588  0852  00CD               	movwf	??___ftdiv
 10589  0853  0848               	movf	___ftdiv@f2+1,w
 10590  0854  00CE               	movwf	??___ftdiv+1
 10591  0855  0849               	movf	___ftdiv@f2+2,w
 10592  0856  00CF               	movwf	??___ftdiv+2
 10593  0857  3010               	movlw	16
 10594  0858                     u5515:	
 10595  0858  36CF               	lsrf	??___ftdiv+2,f
 10596  0859  0CCE               	rrf	??___ftdiv+1,f
 10597  085A  0CCD               	rrf	??___ftdiv,f
 10598  085B  0B89               	decfsz	9,f
 10599  085C  2858               	goto	u5515
 10600  085D  084D               	movf	??___ftdiv,w
 10601  085E  00D0               	movwf	??___ftdiv+3
 10602  085F  0850               	movf	??___ftdiv+3,w
 10603  0860  06D6               	xorwf	___ftdiv@sign,f
 10604  0861  3080               	movlw	128
 10605  0862  00CD               	movwf	??___ftdiv
 10606  0863  084D               	movf	??___ftdiv,w
 10607  0864  05D6               	andwf	___ftdiv@sign,f
 10608  0865  17CB               	bsf	___ftdiv@f1+1,7
 10609  0866  30FF               	movlw	255
 10610  0867  05CA               	andwf	___ftdiv@f1,f
 10611  0868  30FF               	movlw	255
 10612  0869  05CB               	andwf	___ftdiv@f1+1,f
 10613  086A  3000               	movlw	0
 10614  086B  05CC               	andwf	___ftdiv@f1+2,f
 10615  086C  17C8               	bsf	___ftdiv@f2+1,7
 10616  086D  30FF               	movlw	255
 10617  086E  05C7               	andwf	___ftdiv@f2,f
 10618  086F  30FF               	movlw	255
 10619  0870  05C8               	andwf	___ftdiv@f2+1,f
 10620  0871  3000               	movlw	0
 10621  0872  05C9               	andwf	___ftdiv@f2+2,f
 10622  0873  3018               	movlw	24
 10623  0874  00CD               	movwf	??___ftdiv
 10624  0875  084D               	movf	??___ftdiv,w
 10625  0876  00D1               	movwf	___ftdiv@cntr
 10626  0877                     l5242:	
 10627  0877  3001               	movlw	1
 10628  0878                     u5525:	
 10629  0878  35D2               	lslf	___ftdiv@f3,f
 10630  0879  0DD3               	rlf	___ftdiv@f3+1,f
 10631  087A  0DD4               	rlf	___ftdiv@f3+2,f
 10632  087B  0B89               	decfsz	9,f
 10633  087C  2878               	goto	u5525
 10634  087D  0849               	movf	___ftdiv@f2+2,w
 10635  087E  024C               	subwf	___ftdiv@f1+2,w
 10636  087F  1D03               	skipz
 10637  0880  2887               	goto	u5535
 10638  0881  0848               	movf	___ftdiv@f2+1,w
 10639  0882  024B               	subwf	___ftdiv@f1+1,w
 10640  0883  1D03               	skipz
 10641  0884  2887               	goto	u5535
 10642  0885  0847               	movf	___ftdiv@f2,w
 10643  0886  024A               	subwf	___ftdiv@f1,w
 10644  0887                     u5535:	
 10645  0887  1C03               	skipc
 10646  0888  2890               	goto	l5250
 10647  0889  0847               	movf	___ftdiv@f2,w
 10648  088A  02CA               	subwf	___ftdiv@f1,f
 10649  088B  0848               	movf	___ftdiv@f2+1,w
 10650  088C  3BCB               	subwfb	___ftdiv@f1+1,f
 10651  088D  0849               	movf	___ftdiv@f2+2,w
 10652  088E  3BCC               	subwfb	___ftdiv@f1+2,f
 10653  088F  1452               	bsf	___ftdiv@f3,0
 10654  0890                     l5250:	
 10655  0890  3001               	movlw	1
 10656  0891                     u5545:	
 10657  0891  35CA               	lslf	___ftdiv@f1,f
 10658  0892  0DCB               	rlf	___ftdiv@f1+1,f
 10659  0893  0DCC               	rlf	___ftdiv@f1+2,f
 10660  0894  0B89               	decfsz	9,f
 10661  0895  2891               	goto	u5545
 10662  0896  3001               	movlw	1
 10663  0897  02D1               	subwf	___ftdiv@cntr,f
 10664  0898  1D03               	btfss	3,2
 10665  0899  2877               	goto	l5242
 10666  089A  0852               	movf	___ftdiv@f3,w
 10667  089B  00A2               	movwf	___ftpack@arg
 10668  089C  0853               	movf	___ftdiv@f3+1,w
 10669  089D  00A3               	movwf	___ftpack@arg+1
 10670  089E  0854               	movf	___ftdiv@f3+2,w
 10671  089F  00A4               	movwf	___ftpack@arg+2
 10672  08A0  0855               	movf	___ftdiv@exp,w
 10673  08A1  00CD               	movwf	??___ftdiv
 10674  08A2  084D               	movf	??___ftdiv,w
 10675  08A3  00A5               	movwf	___ftpack@exp
 10676  08A4  0856               	movf	___ftdiv@sign,w
 10677  08A5  00CE               	movwf	??___ftdiv+1
 10678  08A6  084E               	movf	??___ftdiv+1,w
 10679  08A7  00A6               	movwf	___ftpack@sign
 10680  08A8  3194  24E4         	fcall	___ftpack
 10681  08AA  0020               	movlb	0	; select bank0
 10682  08AB  0822               	movf	?___ftpack,w
 10683  08AC  00C7               	movwf	?___ftdiv
 10684  08AD  0823               	movf	?___ftpack+1,w
 10685  08AE  00C8               	movwf	?___ftdiv+1
 10686  08AF  0824               	movf	?___ftpack+2,w
 10687  08B0  00C9               	movwf	?___ftdiv+2
 10688  08B1  0008               	return
 10689  08B2                     __end_of___ftdiv:	
 10690                           
 10691                           	psect	text24
 10692  097A                     __ptext24:	
 10693 ;; *************** function ___ftadd *****************
 10694 ;; Defined at:
 10695 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;  f1              3   10[BANK0 ] float 
 10698 ;;  f2              3   13[BANK0 ] float 
 10699 ;; Auto vars:     Size  Location     Type
 10700 ;;  exp1            1   22[BANK0 ] unsigned char 
 10701 ;;  exp2            1   21[BANK0 ] unsigned char 
 10702 ;;  sign            1   20[BANK0 ] unsigned char 
 10703 ;; Return value:  Size  Location     Type
 10704 ;;                  3   10[BANK0 ] float 
 10705 ;; Registers used:
 10706 ;;		wreg, status,2, status,0, pclath, cstack
 10707 ;; Tracked objects:
 10708 ;;		On entry : 0/0
 10709 ;;		On exit  : 0/0
 10710 ;;		Unchanged: 0/0
 10711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10712 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10713 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10715 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10716 ;;Total ram usage:       13 bytes
 10717 ;; Hardware stack levels used:    1
 10718 ;; Hardware stack levels required when called:    3
 10719 ;; This function calls:
 10720 ;;		___ftpack
 10721 ;; This function is called by:
 10722 ;;		_map
 10723 ;;		_scalePotValue
 10724 ;; This function uses a non-reentrant model
 10725 ;;
 10726                           
 10727                           
 10728                           ;psect for function ___ftadd
 10729  097A                     ___ftadd:	
 10730                           
 10731                           ;incstack = 0
 10732                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10733  097A  0020               	movlb	0	; select bank0
 10734  097B  082A               	movf	___ftadd@f1,w
 10735  097C  00B0               	movwf	??___ftadd
 10736  097D  082B               	movf	___ftadd@f1+1,w
 10737  097E  00B1               	movwf	??___ftadd+1
 10738  097F  082C               	movf	___ftadd@f1+2,w
 10739  0980  00B2               	movwf	??___ftadd+2
 10740  0981  1003               	clrc
 10741  0982  0D31               	rlf	??___ftadd+1,w
 10742  0983  0D32               	rlf	??___ftadd+2,w
 10743  0984  00B3               	movwf	??___ftadd+3
 10744  0985  0833               	movf	??___ftadd+3,w
 10745  0986  00B6               	movwf	___ftadd@exp1
 10746  0987  082D               	movf	___ftadd@f2,w
 10747  0988  00B0               	movwf	??___ftadd
 10748  0989  082E               	movf	___ftadd@f2+1,w
 10749  098A  00B1               	movwf	??___ftadd+1
 10750  098B  082F               	movf	___ftadd@f2+2,w
 10751  098C  00B2               	movwf	??___ftadd+2
 10752  098D  1003               	clrc
 10753  098E  0D31               	rlf	??___ftadd+1,w
 10754  098F  0D32               	rlf	??___ftadd+2,w
 10755  0990  00B3               	movwf	??___ftadd+3
 10756  0991  0833               	movf	??___ftadd+3,w
 10757  0992  00B5               	movwf	___ftadd@exp2
 10758  0993  0836               	movf	___ftadd@exp1,w
 10759  0994  1903               	btfsc	3,2
 10760  0995  29A2               	goto	l5152
 10761  0996  0835               	movf	___ftadd@exp2,w
 10762  0997  0236               	subwf	___ftadd@exp1,w
 10763  0998  1803               	skipnc
 10764  0999  29A9               	goto	l5156
 10765  099A  0336               	decf	___ftadd@exp1,w
 10766  099B  3AFF               	xorlw	255
 10767  099C  0735               	addwf	___ftadd@exp2,w
 10768  099D  00B0               	movwf	??___ftadd
 10769  099E  3019               	movlw	25
 10770  099F  0230               	subwf	??___ftadd,w
 10771  09A0  1C03               	skipc
 10772  09A1  29A9               	goto	l5156
 10773  09A2                     l5152:	
 10774  09A2  082D               	movf	___ftadd@f2,w
 10775  09A3  00AA               	movwf	?___ftadd
 10776  09A4  082E               	movf	___ftadd@f2+1,w
 10777  09A5  00AB               	movwf	?___ftadd+1
 10778  09A6  082F               	movf	___ftadd@f2+2,w
 10779  09A7  00AC               	movwf	?___ftadd+2
 10780  09A8  0008               	return
 10781  09A9                     l5156:	
 10782  09A9  0835               	movf	___ftadd@exp2,w
 10783  09AA  1903               	btfsc	3,2
 10784  09AB  0008               	return
 10785  09AC  0836               	movf	___ftadd@exp1,w
 10786  09AD  0235               	subwf	___ftadd@exp2,w
 10787  09AE  1803               	skipnc
 10788  09AF  29B8               	goto	l5162
 10789  09B0  0335               	decf	___ftadd@exp2,w
 10790  09B1  3AFF               	xorlw	255
 10791  09B2  0736               	addwf	___ftadd@exp1,w
 10792  09B3  00B0               	movwf	??___ftadd
 10793  09B4  3019               	movlw	25
 10794  09B5  0230               	subwf	??___ftadd,w
 10795  09B6  1803               	btfsc	3,0
 10796  09B7  0008               	return
 10797  09B8                     l5162:	
 10798  09B8  3006               	movlw	6
 10799  09B9  00B0               	movwf	??___ftadd
 10800  09BA  0830               	movf	??___ftadd,w
 10801  09BB  00B4               	movwf	___ftadd@sign
 10802  09BC  1BAC               	btfsc	___ftadd@f1+2,7
 10803  09BD  17B4               	bsf	___ftadd@sign,7
 10804  09BE  1BAF               	btfsc	___ftadd@f2+2,7
 10805  09BF  1734               	bsf	___ftadd@sign,6
 10806  09C0  17AB               	bsf	___ftadd@f1+1,7
 10807  09C1  30FF               	movlw	255
 10808  09C2  05AA               	andwf	___ftadd@f1,f
 10809  09C3  30FF               	movlw	255
 10810  09C4  05AB               	andwf	___ftadd@f1+1,f
 10811  09C5  3000               	movlw	0
 10812  09C6  05AC               	andwf	___ftadd@f1+2,f
 10813  09C7  17AE               	bsf	___ftadd@f2+1,7
 10814  09C8  30FF               	movlw	255
 10815  09C9  05AD               	andwf	___ftadd@f2,f
 10816  09CA  30FF               	movlw	255
 10817  09CB  05AE               	andwf	___ftadd@f2+1,f
 10818  09CC  3000               	movlw	0
 10819  09CD  05AF               	andwf	___ftadd@f2+2,f
 10820  09CE  0835               	movf	___ftadd@exp2,w
 10821  09CF  0236               	subwf	___ftadd@exp1,w
 10822  09D0  1803               	skipnc
 10823  09D1  29F4               	goto	l5184
 10824  09D2                     l5174:	
 10825  09D2  3001               	movlw	1
 10826  09D3                     u5345:	
 10827  09D3  35AD               	lslf	___ftadd@f2,f
 10828  09D4  0DAE               	rlf	___ftadd@f2+1,f
 10829  09D5  0DAF               	rlf	___ftadd@f2+2,f
 10830  09D6  0B89               	decfsz	9,f
 10831  09D7  29D3               	goto	u5345
 10832  09D8  3001               	movlw	1
 10833  09D9  02B5               	subwf	___ftadd@exp2,f
 10834  09DA  0835               	movf	___ftadd@exp2,w
 10835  09DB  0636               	xorwf	___ftadd@exp1,w
 10836  09DC  1903               	skipnz
 10837  09DD  29EF               	goto	l5182
 10838  09DE  3001               	movlw	1
 10839  09DF  02B4               	subwf	___ftadd@sign,f
 10840  09E0  0834               	movf	___ftadd@sign,w
 10841  09E1  3907               	andlw	7
 10842  09E2  1903               	btfsc	3,2
 10843  09E3  29EF               	goto	l5182
 10844  09E4  29D2               	goto	l5174
 10845  09E5                     l5180:	
 10846  09E5  3001               	movlw	1
 10847  09E6                     u5375:	
 10848  09E6  36AC               	lsrf	___ftadd@f1+2,f
 10849  09E7  0CAB               	rrf	___ftadd@f1+1,f
 10850  09E8  0CAA               	rrf	___ftadd@f1,f
 10851  09E9  0B89               	decfsz	9,f
 10852  09EA  29E6               	goto	u5375
 10853  09EB  3001               	movlw	1
 10854  09EC  00B0               	movwf	??___ftadd
 10855  09ED  0830               	movf	??___ftadd,w
 10856  09EE  07B6               	addwf	___ftadd@exp1,f
 10857  09EF                     l5182:	
 10858  09EF  0836               	movf	___ftadd@exp1,w
 10859  09F0  0635               	xorwf	___ftadd@exp2,w
 10860  09F1  1903               	btfsc	3,2
 10861  09F2  2A19               	goto	l1516
 10862  09F3  29E5               	goto	l5180
 10863  09F4                     l5184:	
 10864  09F4  0836               	movf	___ftadd@exp1,w
 10865  09F5  0235               	subwf	___ftadd@exp2,w
 10866  09F6  1803               	skipnc
 10867  09F7  2A19               	goto	l1516
 10868  09F8                     l5186:	
 10869  09F8  3001               	movlw	1
 10870  09F9                     u5405:	
 10871  09F9  35AA               	lslf	___ftadd@f1,f
 10872  09FA  0DAB               	rlf	___ftadd@f1+1,f
 10873  09FB  0DAC               	rlf	___ftadd@f1+2,f
 10874  09FC  0B89               	decfsz	9,f
 10875  09FD  29F9               	goto	u5405
 10876  09FE  3001               	movlw	1
 10877  09FF  02B6               	subwf	___ftadd@exp1,f
 10878  0A00  0835               	movf	___ftadd@exp2,w
 10879  0A01  0636               	xorwf	___ftadd@exp1,w
 10880  0A02  1903               	skipnz
 10881  0A03  2A15               	goto	l5194
 10882  0A04  3001               	movlw	1
 10883  0A05  02B4               	subwf	___ftadd@sign,f
 10884  0A06  0834               	movf	___ftadd@sign,w
 10885  0A07  3907               	andlw	7
 10886  0A08  1903               	btfsc	3,2
 10887  0A09  2A15               	goto	l5194
 10888  0A0A  29F8               	goto	l5186
 10889  0A0B                     l5192:	
 10890  0A0B  3001               	movlw	1
 10891  0A0C                     u5435:	
 10892  0A0C  36AF               	lsrf	___ftadd@f2+2,f
 10893  0A0D  0CAE               	rrf	___ftadd@f2+1,f
 10894  0A0E  0CAD               	rrf	___ftadd@f2,f
 10895  0A0F  0B89               	decfsz	9,f
 10896  0A10  2A0C               	goto	u5435
 10897  0A11  3001               	movlw	1
 10898  0A12  00B0               	movwf	??___ftadd
 10899  0A13  0830               	movf	??___ftadd,w
 10900  0A14  07B5               	addwf	___ftadd@exp2,f
 10901  0A15                     l5194:	
 10902  0A15  0836               	movf	___ftadd@exp1,w
 10903  0A16  0635               	xorwf	___ftadd@exp2,w
 10904  0A17  1D03               	skipz
 10905  0A18  2A0B               	goto	l5192
 10906  0A19                     l1516:	
 10907  0A19  1FB4               	btfss	___ftadd@sign,7
 10908  0A1A  2A2B               	goto	l5198
 10909  0A1B  30FF               	movlw	255
 10910  0A1C  06AA               	xorwf	___ftadd@f1,f
 10911  0A1D  30FF               	movlw	255
 10912  0A1E  06AB               	xorwf	___ftadd@f1+1,f
 10913  0A1F  30FF               	movlw	255
 10914  0A20  06AC               	xorwf	___ftadd@f1+2,f
 10915  0A21  3001               	movlw	1
 10916  0A22  07AA               	addwf	___ftadd@f1,f
 10917  0A23  3000               	movlw	0
 10918  0A24  1803               	skipnc
 10919  0A25  3001               	movlw	1
 10920  0A26  07AB               	addwf	___ftadd@f1+1,f
 10921  0A27  3000               	movlw	0
 10922  0A28  1803               	skipnc
 10923  0A29  3001               	movlw	1
 10924  0A2A  07AC               	addwf	___ftadd@f1+2,f
 10925  0A2B                     l5198:	
 10926  0A2B  1F34               	btfss	___ftadd@sign,6
 10927  0A2C  2A3D               	goto	l5202
 10928  0A2D  30FF               	movlw	255
 10929  0A2E  06AD               	xorwf	___ftadd@f2,f
 10930  0A2F  30FF               	movlw	255
 10931  0A30  06AE               	xorwf	___ftadd@f2+1,f
 10932  0A31  30FF               	movlw	255
 10933  0A32  06AF               	xorwf	___ftadd@f2+2,f
 10934  0A33  3001               	movlw	1
 10935  0A34  07AD               	addwf	___ftadd@f2,f
 10936  0A35  3000               	movlw	0
 10937  0A36  1803               	skipnc
 10938  0A37  3001               	movlw	1
 10939  0A38  07AE               	addwf	___ftadd@f2+1,f
 10940  0A39  3000               	movlw	0
 10941  0A3A  1803               	skipnc
 10942  0A3B  3001               	movlw	1
 10943  0A3C  07AF               	addwf	___ftadd@f2+2,f
 10944  0A3D                     l5202:	
 10945  0A3D  01B4               	clrf	___ftadd@sign
 10946  0A3E  082A               	movf	___ftadd@f1,w
 10947  0A3F  07AD               	addwf	___ftadd@f2,f
 10948  0A40  082B               	movf	___ftadd@f1+1,w
 10949  0A41  3DAE               	addwfc	___ftadd@f2+1,f
 10950  0A42  082C               	movf	___ftadd@f1+2,w
 10951  0A43  3DAF               	addwfc	___ftadd@f2+2,f
 10952  0A44  1FAF               	btfss	___ftadd@f2+2,7
 10953  0A45  2A58               	goto	l5212
 10954  0A46  30FF               	movlw	255
 10955  0A47  06AD               	xorwf	___ftadd@f2,f
 10956  0A48  30FF               	movlw	255
 10957  0A49  06AE               	xorwf	___ftadd@f2+1,f
 10958  0A4A  30FF               	movlw	255
 10959  0A4B  06AF               	xorwf	___ftadd@f2+2,f
 10960  0A4C  3001               	movlw	1
 10961  0A4D  07AD               	addwf	___ftadd@f2,f
 10962  0A4E  3000               	movlw	0
 10963  0A4F  1803               	skipnc
 10964  0A50  3001               	movlw	1
 10965  0A51  07AE               	addwf	___ftadd@f2+1,f
 10966  0A52  3000               	movlw	0
 10967  0A53  1803               	skipnc
 10968  0A54  3001               	movlw	1
 10969  0A55  07AF               	addwf	___ftadd@f2+2,f
 10970  0A56  01B4               	clrf	___ftadd@sign
 10971  0A57  0AB4               	incf	___ftadd@sign,f
 10972  0A58                     l5212:	
 10973  0A58  082D               	movf	___ftadd@f2,w
 10974  0A59  00A2               	movwf	___ftpack@arg
 10975  0A5A  082E               	movf	___ftadd@f2+1,w
 10976  0A5B  00A3               	movwf	___ftpack@arg+1
 10977  0A5C  082F               	movf	___ftadd@f2+2,w
 10978  0A5D  00A4               	movwf	___ftpack@arg+2
 10979  0A5E  0836               	movf	___ftadd@exp1,w
 10980  0A5F  00B0               	movwf	??___ftadd
 10981  0A60  0830               	movf	??___ftadd,w
 10982  0A61  00A5               	movwf	___ftpack@exp
 10983  0A62  0834               	movf	___ftadd@sign,w
 10984  0A63  00B1               	movwf	??___ftadd+1
 10985  0A64  0831               	movf	??___ftadd+1,w
 10986  0A65  00A6               	movwf	___ftpack@sign
 10987  0A66  3194  24E4         	fcall	___ftpack
 10988  0A68  0020               	movlb	0	; select bank0
 10989  0A69  0822               	movf	?___ftpack,w
 10990  0A6A  00AA               	movwf	?___ftadd
 10991  0A6B  0823               	movf	?___ftpack+1,w
 10992  0A6C  00AB               	movwf	?___ftadd+1
 10993  0A6D  0824               	movf	?___ftpack+2,w
 10994  0A6E  00AC               	movwf	?___ftadd+2
 10995  0A6F  0008               	return
 10996  0A70                     __end_of___ftadd:	
 10997                           
 10998                           	psect	text25
 10999  1DA7                     __ptext25:	
 11000 ;; *************** function _initSwitchBypass *****************
 11001 ;; Defined at:
 11002 ;;		line 29 in file "SwitchBypass.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;  initState       2   24[BANK0 ] int 
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      void 
 11009 ;; Registers used:
 11010 ;;		wreg, status,2, status,0, pclath, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 0/0
 11013 ;;		On exit  : 0/0
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11019 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11020 ;;Total ram usage:        2 bytes
 11021 ;; Hardware stack levels used:    1
 11022 ;; Hardware stack levels required when called:    5
 11023 ;; This function calls:
 11024 ;;		_getSwitchBypassState
 11025 ;;		_setSwitchBypassState
 11026 ;; This function is called by:
 11027 ;;		_main
 11028 ;; This function uses a non-reentrant model
 11029 ;;
 11030                           
 11031                           
 11032                           ;psect for function _initSwitchBypass
 11033  1DA7                     _initSwitchBypass:	
 11034                           
 11035                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 11036                           
 11037                           ;incstack = 0
 11038                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 11039  1DA7  319D  2578  319D   	fcall	_getSwitchBypassState
 11040  1DAA  0020               	movlb	0	; select bank0
 11041  1DAB  0823               	movf	?_getSwitchBypassState+1,w
 11042  1DAC  00B9               	movwf	initSwitchBypass@initState+1
 11043  1DAD  0822               	movf	?_getSwitchBypassState,w
 11044  1DAE  00B8               	movwf	initSwitchBypass@initState
 11045                           
 11046                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 11047  1DAF  0839               	movf	initSwitchBypass@initState+1,w
 11048  1DB0  00B5               	movwf	setSwitchBypassState@f_state+1
 11049  1DB1  0838               	movf	initSwitchBypass@initState,w
 11050  1DB2  00B4               	movwf	setSwitchBypassState@f_state
 11051  1DB3  3192  222D         	fcall	_setSwitchBypassState
 11052  1DB5  0008               	return
 11053  1DB6                     __end_of_initSwitchBypass:	
 11054                           
 11055                           	psect	text26
 11056  122D                     __ptext26:	
 11057 ;; *************** function _setSwitchBypassState *****************
 11058 ;; Defined at:
 11059 ;;		line 134 in file "SwitchBypass.c"
 11060 ;; Parameters:    Size  Location     Type
 11061 ;;  f_state         2   20[BANK0 ] int 
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;		None
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  1    wreg      void 
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0, pclath, cstack
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11073 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11076 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11077 ;;Total ram usage:        4 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:    4
 11080 ;; This function calls:
 11081 ;;		_updateSwitchBypassState
 11082 ;;		_wait_ms
 11083 ;; This function is called by:
 11084 ;;		_initSwitchBypass
 11085 ;;		_updateSwitchBypass
 11086 ;; This function uses a non-reentrant model
 11087 ;;
 11088                           
 11089                           
 11090                           ;psect for function _setSwitchBypassState
 11091  122D                     _setSwitchBypassState:	
 11092                           
 11093                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 11094                           
 11095                           ;incstack = 0
 11096                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 11097  122D  087D               	movf	_switchBypass_state,w
 11098  122E  0020               	movlb	0	; select bank0
 11099  122F  00B6               	movwf	??_setSwitchBypassState
 11100  1230  01B7               	clrf	??_setSwitchBypassState+1
 11101  1231  0835               	movf	setSwitchBypassState@f_state+1,w
 11102  1232  0637               	xorwf	??_setSwitchBypassState+1,w
 11103  1233  1D03               	skipz
 11104  1234  2A37               	goto	u5035
 11105  1235  0834               	movf	setSwitchBypassState@f_state,w
 11106  1236  0636               	xorwf	??_setSwitchBypassState,w
 11107  1237                     u5035:	
 11108  1237  1903               	btfsc	3,2
 11109  1238  0008               	return
 11110                           
 11111                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 11112  1239  0834               	movf	setSwitchBypassState@f_state,w
 11113  123A  00B6               	movwf	??_setSwitchBypassState
 11114  123B  0836               	movf	??_setSwitchBypassState,w
 11115  123C  00FD               	movwf	_switchBypass_state
 11116                           
 11117                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 11118  123D  0C34               	rrf	setSwitchBypassState@f_state,w
 11119  123E  0022               	movlb	2	; select bank2
 11120  123F  1C03               	skipc
 11121  1240  110D               	bcf	13,2	;volatile
 11122  1241  1803               	skipnc
 11123  1242  150D               	bsf	13,2	;volatile
 11124                           
 11125                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 11126  1243  118D               	bcf	13,3	;volatile
 11127                           
 11128                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 11129  1244  0020               	movlb	0	; select bank0
 11130  1245  0C34               	rrf	setSwitchBypassState@f_state,w
 11131  1246  0027               	movlb	7	; select bank7
 11132  1247  1C03               	skipc
 11133  1248  110D               	bcf	13,2	;volatile
 11134  1249  1803               	skipnc
 11135  124A  150D               	bsf	13,2	;volatile
 11136                           
 11137                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 11138  124B  0020               	movlb	0	; select bank0
 11139  124C  0834               	movf	setSwitchBypassState@f_state,w
 11140  124D  0435               	iorwf	setSwitchBypassState@f_state+1,w
 11141  124E  1D03               	btfss	3,2
 11142  124F  2A53               	goto	u5040
 11143  1250  0027               	movlb	7	; select bank7
 11144  1251  148D               	bsf	13,1	;volatile
 11145  1252  2A55               	goto	l5040
 11146  1253                     u5040:	
 11147  1253  0027               	movlb	7	; select bank7
 11148  1254  108D               	bcf	13,1	;volatile
 11149  1255                     l5040:	
 11150                           
 11151                           ;SwitchBypass.c: 142: wait_ms(20);
 11152  1255  3014               	movlw	20
 11153  1256  0020               	movlb	0	; select bank0
 11154  1257  00AE               	movwf	wait_ms@timeSec
 11155  1258  3000               	movlw	0
 11156  1259  00AF               	movwf	wait_ms@timeSec+1
 11157  125A  3190  2003  3192   	fcall	_wait_ms
 11158                           
 11159                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 11160  125D  0027               	movlb	7	; select bank7
 11161  125E  110D               	bcf	13,2	;volatile
 11162                           
 11163                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 11164  125F  108D               	bcf	13,1	;volatile
 11165                           
 11166                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 11167  1260  087D               	movf	_switchBypass_state,w
 11168  1261  0020               	movlb	0	; select bank0
 11169  1262  00B6               	movwf	??_setSwitchBypassState
 11170  1263  01B7               	clrf	??_setSwitchBypassState+1
 11171  1264  0836               	movf	??_setSwitchBypassState,w
 11172  1265  00A2               	movwf	updateSwitchBypassState@state
 11173  1266  0837               	movf	??_setSwitchBypassState+1,w
 11174  1267  00A3               	movwf	updateSwitchBypassState@state+1
 11175  1268  3190  2002  3192   	fcall	_updateSwitchBypassState
 11176                           
 11177                           ;SwitchBypass.c: 148: wait_ms(20);
 11178  126B  3014               	movlw	20
 11179  126C  0020               	movlb	0	; select bank0
 11180  126D  00AE               	movwf	wait_ms@timeSec
 11181  126E  3000               	movlw	0
 11182  126F  00AF               	movwf	wait_ms@timeSec+1
 11183  1270  3190  2003         	fcall	_wait_ms
 11184  1272  0008               	return
 11185  1273                     __end_of_setSwitchBypassState:	
 11186                           
 11187                           	psect	text27
 11188  1003                     __ptext27:	
 11189 ;; *************** function _wait_ms *****************
 11190 ;; Defined at:
 11191 ;;		line 23 in file "system.c"
 11192 ;; Parameters:    Size  Location     Type
 11193 ;;  timeSec         2   14[BANK0 ] unsigned int 
 11194 ;; Auto vars:     Size  Location     Type
 11195 ;;  timemsl         4   16[BANK0 ] long 
 11196 ;; Return value:  Size  Location     Type
 11197 ;;                  1    wreg      void 
 11198 ;; Registers used:
 11199 ;;		wreg, status,2, status,0, pclath, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : 0/0
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11206 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11209 ;;Total ram usage:        6 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    3
 11212 ;; This function calls:
 11213 ;;		___lmul
 11214 ;; This function is called by:
 11215 ;;		_star_tactiles
 11216 ;;		_solidring_tactiles
 11217 ;;		_read_bottom_tactile
 11218 ;;		_read_top_tactile
 11219 ;;		_setSwitchBypassState
 11220 ;;		_setDoublePressState
 11221 ;;		_showError_Alternating
 11222 ;;		_show_error
 11223 ;;		_show_cancel
 11224 ;;		_ring_tactiles
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           
 11229                           ;psect for function _wait_ms
 11230  1003                     _wait_ms:	
 11231                           
 11232                           ;system.c: 25: long timemsl = 0;
 11233                           
 11234                           ;incstack = 0
 11235                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 11236  1003  3000               	movlw	0
 11237  1004  0020               	movlb	0	; select bank0
 11238  1005  00B3               	movwf	wait_ms@timemsl+3
 11239  1006  3000               	movlw	0
 11240  1007  00B2               	movwf	wait_ms@timemsl+2
 11241  1008  3000               	movlw	0
 11242  1009  00B1               	movwf	wait_ms@timemsl+1
 11243  100A  3000               	movlw	0
 11244  100B  00B0               	movwf	wait_ms@timemsl
 11245                           
 11246                           ;system.c: 26: timemsl = timeSec * 1000l;
 11247  100C  082E               	movf	wait_ms@timeSec,w
 11248  100D  00A2               	movwf	___lmul@multiplier
 11249  100E  082F               	movf	wait_ms@timeSec+1,w
 11250  100F  00A3               	movwf	___lmul@multiplier+1
 11251  1010  01A4               	clrf	___lmul@multiplier+2
 11252  1011  01A5               	clrf	___lmul@multiplier+3
 11253  1012  3000               	movlw	0
 11254  1013  00A9               	movwf	___lmul@multiplicand+3
 11255  1014  3000               	movlw	0
 11256  1015  00A8               	movwf	___lmul@multiplicand+2
 11257  1016  3003               	movlw	3
 11258  1017  00A7               	movwf	___lmul@multiplicand+1
 11259  1018  30E8               	movlw	232
 11260  1019  00A6               	movwf	___lmul@multiplicand
 11261  101A  319F  2758  3190   	fcall	___lmul
 11262  101D  0020               	movlb	0	; select bank0
 11263  101E  0825               	movf	?___lmul+3,w
 11264  101F  00B3               	movwf	wait_ms@timemsl+3
 11265  1020  0824               	movf	?___lmul+2,w
 11266  1021  00B2               	movwf	wait_ms@timemsl+2
 11267  1022  0823               	movf	?___lmul+1,w
 11268  1023  00B1               	movwf	wait_ms@timemsl+1
 11269  1024  0822               	movf	?___lmul,w
 11270  1025  00B0               	movwf	wait_ms@timemsl
 11271  1026                     l352:	
 11272                           ;system.c: 27: for( ; timemsl; timemsl--);
 11273                           
 11274  1026  0833               	movf	wait_ms@timemsl+3,w
 11275  1027  0432               	iorwf	wait_ms@timemsl+2,w
 11276  1028  0431               	iorwf	wait_ms@timemsl+1,w
 11277  1029  0430               	iorwf	wait_ms@timemsl,w
 11278  102A  1903               	btfsc	3,2
 11279  102B  0008               	return
 11280  102C  30FF               	movlw	255
 11281  102D  07B0               	addwf	wait_ms@timemsl,f
 11282  102E  30FF               	movlw	255
 11283  102F  3DB1               	addwfc	wait_ms@timemsl+1,f
 11284  1030  30FF               	movlw	255
 11285  1031  3DB2               	addwfc	wait_ms@timemsl+2,f
 11286  1032  30FF               	movlw	255
 11287  1033  3DB3               	addwfc	wait_ms@timemsl+3,f
 11288  1034  2826               	goto	l352
 11289  1035                     __end_of_wait_ms:	
 11290                           
 11291                           	psect	text28
 11292  1F58                     __ptext28:	
 11293 ;; *************** function ___lmul *****************
 11294 ;; Defined at:
 11295 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 11296 ;; Parameters:    Size  Location     Type
 11297 ;;  multiplier      4    2[BANK0 ] unsigned long 
 11298 ;;  multiplicand    4    6[BANK0 ] unsigned long 
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  product         4   10[BANK0 ] unsigned long 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  4    2[BANK0 ] unsigned long 
 11303 ;; Registers used:
 11304 ;;		wreg, status,2, status,0
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11310 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11311 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11313 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11314 ;;Total ram usage:       12 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    2
 11317 ;; This function calls:
 11318 ;;		Nothing
 11319 ;; This function is called by:
 11320 ;;		_wait_ms
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           
 11325                           ;psect for function ___lmul
 11326  1F58                     ___lmul:	
 11327                           
 11328                           ;incstack = 0
 11329                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11330  1F58  3000               	movlw	0
 11331  1F59  0020               	movlb	0	; select bank0
 11332  1F5A  00AD               	movwf	___lmul@product+3
 11333  1F5B  3000               	movlw	0
 11334  1F5C  00AC               	movwf	___lmul@product+2
 11335  1F5D  3000               	movlw	0
 11336  1F5E  00AB               	movwf	___lmul@product+1
 11337  1F5F  3000               	movlw	0
 11338  1F60  00AA               	movwf	___lmul@product
 11339  1F61                     l4838:	
 11340  1F61  1C22               	btfss	___lmul@multiplier,0
 11341  1F62  2F6B               	goto	l4842
 11342  1F63  0826               	movf	___lmul@multiplicand,w
 11343  1F64  07AA               	addwf	___lmul@product,f
 11344  1F65  0827               	movf	___lmul@multiplicand+1,w
 11345  1F66  3DAB               	addwfc	___lmul@product+1,f
 11346  1F67  0828               	movf	___lmul@multiplicand+2,w
 11347  1F68  3DAC               	addwfc	___lmul@product+2,f
 11348  1F69  0829               	movf	___lmul@multiplicand+3,w
 11349  1F6A  3DAD               	addwfc	___lmul@product+3,f
 11350  1F6B                     l4842:	
 11351  1F6B  3001               	movlw	1
 11352  1F6C                     u4825:	
 11353  1F6C  35A6               	lslf	___lmul@multiplicand,f
 11354  1F6D  0DA7               	rlf	___lmul@multiplicand+1,f
 11355  1F6E  0DA8               	rlf	___lmul@multiplicand+2,f
 11356  1F6F  0DA9               	rlf	___lmul@multiplicand+3,f
 11357  1F70  0B89               	decfsz	9,f
 11358  1F71  2F6C               	goto	u4825
 11359  1F72  3001               	movlw	1
 11360  1F73                     u4835:	
 11361  1F73  36A5               	lsrf	___lmul@multiplier+3,f
 11362  1F74  0CA4               	rrf	___lmul@multiplier+2,f
 11363  1F75  0CA3               	rrf	___lmul@multiplier+1,f
 11364  1F76  0CA2               	rrf	___lmul@multiplier,f
 11365  1F77  0B89               	decfsz	9,f
 11366  1F78  2F73               	goto	u4835
 11367  1F79  0825               	movf	___lmul@multiplier+3,w
 11368  1F7A  0424               	iorwf	___lmul@multiplier+2,w
 11369  1F7B  0423               	iorwf	___lmul@multiplier+1,w
 11370  1F7C  0422               	iorwf	___lmul@multiplier,w
 11371  1F7D  1D03               	skipz
 11372  1F7E  2F61               	goto	l4838
 11373  1F7F  082D               	movf	___lmul@product+3,w
 11374  1F80  00A5               	movwf	?___lmul+3
 11375  1F81  082C               	movf	___lmul@product+2,w
 11376  1F82  00A4               	movwf	?___lmul+2
 11377  1F83  082B               	movf	___lmul@product+1,w
 11378  1F84  00A3               	movwf	?___lmul+1
 11379  1F85  082A               	movf	___lmul@product,w
 11380  1F86  00A2               	movwf	?___lmul
 11381  1F87  0008               	return
 11382  1F88                     __end_of___lmul:	
 11383                           
 11384                           	psect	text29
 11385  1002                     __ptext29:	
 11386 ;; *************** function _updateSwitchBypassState *****************
 11387 ;; Defined at:
 11388 ;;		line 96 in file "state_manager.c"
 11389 ;; Parameters:    Size  Location     Type
 11390 ;;  state           2    2[BANK0 ] int 
 11391 ;; Auto vars:     Size  Location     Type
 11392 ;;		None
 11393 ;; Return value:  Size  Location     Type
 11394 ;;                  1    wreg      void 
 11395 ;; Registers used:
 11396 ;;		None
 11397 ;; Tracked objects:
 11398 ;;		On entry : 0/0
 11399 ;;		On exit  : 0/0
 11400 ;;		Unchanged: 0/0
 11401 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11402 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11403 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11404 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11405 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11406 ;;Total ram usage:        2 bytes
 11407 ;; Hardware stack levels used:    1
 11408 ;; Hardware stack levels required when called:    2
 11409 ;; This function calls:
 11410 ;;		Nothing
 11411 ;; This function is called by:
 11412 ;;		_setSwitchBypassState
 11413 ;; This function uses a non-reentrant model
 11414 ;;
 11415                           
 11416                           
 11417                           ;psect for function _updateSwitchBypassState
 11418  1002                     _updateSwitchBypassState:	
 11419                           
 11420                           ;incstack = 0
 11421                           ; Regs used in _updateSwitchBypassState: []
 11422  1002  0008               	return
 11423  1003                     __end_of_updateSwitchBypassState:	
 11424                           
 11425                           	psect	text30
 11426  1D78                     __ptext30:	
 11427 ;; *************** function _getSwitchBypassState *****************
 11428 ;; Defined at:
 11429 ;;		line 103 in file "state_manager.c"
 11430 ;; Parameters:    Size  Location     Type
 11431 ;;		None
 11432 ;; Auto vars:     Size  Location     Type
 11433 ;;		None
 11434 ;; Return value:  Size  Location     Type
 11435 ;;                  2    2[BANK0 ] int 
 11436 ;; Registers used:
 11437 ;;		status,2
 11438 ;; Tracked objects:
 11439 ;;		On entry : 0/0
 11440 ;;		On exit  : 0/0
 11441 ;;		Unchanged: 0/0
 11442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11443 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11447 ;;Total ram usage:        2 bytes
 11448 ;; Hardware stack levels used:    1
 11449 ;; Hardware stack levels required when called:    2
 11450 ;; This function calls:
 11451 ;;		Nothing
 11452 ;; This function is called by:
 11453 ;;		_initSwitchBypass
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457                           
 11458                           ;psect for function _getSwitchBypassState
 11459  1D78                     _getSwitchBypassState:	
 11460                           
 11461                           ;state_manager.c: 108: return 0;
 11462                           
 11463                           ;incstack = 0
 11464                           ; Regs used in _getSwitchBypassState: [status,2]
 11465  1D78  0020               	movlb	0	; select bank0
 11466  1D79  01A2               	clrf	?_getSwitchBypassState
 11467  1D7A  01A3               	clrf	?_getSwitchBypassState+1
 11468  1D7B  0008               	return
 11469  1D7C                     __end_of_getSwitchBypassState:	
 11470                           
 11471                           	psect	text31
 11472  1E33                     __ptext31:	
 11473 ;; *************** function _adc_convert *****************
 11474 ;; Defined at:
 11475 ;;		line 116 in file "user.c"
 11476 ;; Parameters:    Size  Location     Type
 11477 ;;  channel         1    wreg     unsigned char 
 11478 ;; Auto vars:     Size  Location     Type
 11479 ;;  channel         1    5[BANK0 ] unsigned char 
 11480 ;; Return value:  Size  Location     Type
 11481 ;;                  2    2[BANK0 ] unsigned int 
 11482 ;; Registers used:
 11483 ;;		wreg, status,2, status,0
 11484 ;; Tracked objects:
 11485 ;;		On entry : 0/0
 11486 ;;		On exit  : 0/0
 11487 ;;		Unchanged: 0/0
 11488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11492 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11493 ;;Total ram usage:        4 bytes
 11494 ;; Hardware stack levels used:    1
 11495 ;; Hardware stack levels required when called:    2
 11496 ;; This function calls:
 11497 ;;		Nothing
 11498 ;; This function is called by:
 11499 ;;		_main
 11500 ;; This function uses a non-reentrant model
 11501 ;;
 11502                           
 11503                           
 11504                           ;psect for function _adc_convert
 11505  1E33                     _adc_convert:	
 11506                           
 11507                           ;incstack = 0
 11508                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11509                           ;adc_convert@channel stored from wreg
 11510  1E33  0020               	movlb	0	; select bank0
 11511  1E34  00A5               	movwf	adc_convert@channel
 11512                           
 11513                           ;user.c: 117: ADCON0bits.CHS = channel;
 11514  1E35  0825               	movf	adc_convert@channel,w
 11515  1E36  00A4               	movwf	??_adc_convert
 11516  1E37  0DA4               	rlf	??_adc_convert,f
 11517  1E38  0DA4               	rlf	??_adc_convert,f
 11518  1E39  0021               	movlb	1	; select bank1
 11519  1E3A  081D               	movf	29,w	;volatile
 11520  1E3B  0020               	movlb	0	; select bank0
 11521  1E3C  0624               	xorwf	??_adc_convert,w
 11522  1E3D  3983               	andlw	-125
 11523  1E3E  0624               	xorwf	??_adc_convert,w
 11524  1E3F  0021               	movlb	1	; select bank1
 11525  1E40  009D               	movwf	29	;volatile
 11526                           
 11527                           ;user.c: 118: ADCON0bits.GO = 0b1;
 11528  1E41  149D               	bsf	29,1	;volatile
 11529  1E42                     l534:	
 11530                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 11531                           
 11532  1E42  189D               	btfsc	29,1	;volatile
 11533  1E43  2E42               	goto	l534
 11534                           
 11535                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 11536  1E44  081C               	movf	28,w	;volatile
 11537  1E45  0020               	movlb	0	; select bank0
 11538  1E46  00A3               	movwf	?_adc_convert+1
 11539  1E47  0021               	movlb	1	; select bank1
 11540  1E48  081B               	movf	27,w	;volatile
 11541  1E49  0020               	movlb	0	; select bank0
 11542  1E4A  00A2               	movwf	?_adc_convert
 11543  1E4B  0008               	return
 11544  1E4C                     __end_of_adc_convert:	
 11545                           
 11546                           	psect	text32
 11547  143E                     __ptext32:	
 11548 ;; *************** function ___awdiv *****************
 11549 ;; Defined at:
 11550 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11551 ;; Parameters:    Size  Location     Type
 11552 ;;  divisor         2    2[BANK0 ] int 
 11553 ;;  dividend        2    4[BANK0 ] int 
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  quotient        2    9[BANK0 ] int 
 11556 ;;  sign            1    8[BANK0 ] unsigned char 
 11557 ;;  counter         1    7[BANK0 ] unsigned char 
 11558 ;; Return value:  Size  Location     Type
 11559 ;;                  2    2[BANK0 ] int 
 11560 ;; Registers used:
 11561 ;;		wreg, status,2, status,0
 11562 ;; Tracked objects:
 11563 ;;		On entry : 0/0
 11564 ;;		On exit  : 0/0
 11565 ;;		Unchanged: 0/0
 11566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11567 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11568 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11570 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11571 ;;Total ram usage:        9 bytes
 11572 ;; Hardware stack levels used:    1
 11573 ;; Hardware stack levels required when called:    2
 11574 ;; This function calls:
 11575 ;;		Nothing
 11576 ;; This function is called by:
 11577 ;;		_main
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           
 11582                           ;psect for function ___awdiv
 11583  143E                     ___awdiv:	
 11584                           
 11585                           ;incstack = 0
 11586                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11587  143E  0020               	movlb	0	; select bank0
 11588  143F  01A8               	clrf	___awdiv@sign
 11589  1440  1FA3               	btfss	___awdiv@divisor+1,7
 11590  1441  2C49               	goto	l5762
 11591  1442  09A2               	comf	___awdiv@divisor,f
 11592  1443  09A3               	comf	___awdiv@divisor+1,f
 11593  1444  0AA2               	incf	___awdiv@divisor,f
 11594  1445  1903               	skipnz
 11595  1446  0AA3               	incf	___awdiv@divisor+1,f
 11596  1447  01A8               	clrf	___awdiv@sign
 11597  1448  0AA8               	incf	___awdiv@sign,f
 11598  1449                     l5762:	
 11599  1449  1FA5               	btfss	___awdiv@dividend+1,7
 11600  144A  2C54               	goto	l5768
 11601  144B  09A4               	comf	___awdiv@dividend,f
 11602  144C  09A5               	comf	___awdiv@dividend+1,f
 11603  144D  0AA4               	incf	___awdiv@dividend,f
 11604  144E  1903               	skipnz
 11605  144F  0AA5               	incf	___awdiv@dividend+1,f
 11606  1450  3001               	movlw	1
 11607  1451  00A6               	movwf	??___awdiv
 11608  1452  0826               	movf	??___awdiv,w
 11609  1453  06A8               	xorwf	___awdiv@sign,f
 11610  1454                     l5768:	
 11611  1454  01A9               	clrf	___awdiv@quotient
 11612  1455  01AA               	clrf	___awdiv@quotient+1
 11613  1456  0822               	movf	___awdiv@divisor,w
 11614  1457  0423               	iorwf	___awdiv@divisor+1,w
 11615  1458  1903               	btfsc	3,2
 11616  1459  2C83               	goto	l5790
 11617  145A  01A7               	clrf	___awdiv@counter
 11618  145B  0AA7               	incf	___awdiv@counter,f
 11619  145C                     l5778:	
 11620  145C  1BA3               	btfsc	___awdiv@divisor+1,7
 11621  145D  2C68               	goto	l5780
 11622  145E  3001               	movlw	1
 11623  145F                     u6535:	
 11624  145F  35A2               	lslf	___awdiv@divisor,f
 11625  1460  0DA3               	rlf	___awdiv@divisor+1,f
 11626  1461  0B89               	decfsz	9,f
 11627  1462  2C5F               	goto	u6535
 11628  1463  3001               	movlw	1
 11629  1464  00A6               	movwf	??___awdiv
 11630  1465  0826               	movf	??___awdiv,w
 11631  1466  07A7               	addwf	___awdiv@counter,f
 11632  1467  2C5C               	goto	l5778
 11633  1468                     l5780:	
 11634  1468  3001               	movlw	1
 11635  1469                     u6555:	
 11636  1469  35A9               	lslf	___awdiv@quotient,f
 11637  146A  0DAA               	rlf	___awdiv@quotient+1,f
 11638  146B  0B89               	decfsz	9,f
 11639  146C  2C69               	goto	u6555
 11640  146D  0823               	movf	___awdiv@divisor+1,w
 11641  146E  0225               	subwf	___awdiv@dividend+1,w
 11642  146F  1D03               	skipz
 11643  1470  2C73               	goto	u6565
 11644  1471  0822               	movf	___awdiv@divisor,w
 11645  1472  0224               	subwf	___awdiv@dividend,w
 11646  1473                     u6565:	
 11647  1473  1C03               	skipc
 11648  1474  2C7A               	goto	l5786
 11649  1475  0822               	movf	___awdiv@divisor,w
 11650  1476  02A4               	subwf	___awdiv@dividend,f
 11651  1477  0823               	movf	___awdiv@divisor+1,w
 11652  1478  3BA5               	subwfb	___awdiv@dividend+1,f
 11653  1479  1429               	bsf	___awdiv@quotient,0
 11654  147A                     l5786:	
 11655  147A  3001               	movlw	1
 11656  147B                     u6575:	
 11657  147B  36A3               	lsrf	___awdiv@divisor+1,f
 11658  147C  0CA2               	rrf	___awdiv@divisor,f
 11659  147D  0B89               	decfsz	9,f
 11660  147E  2C7B               	goto	u6575
 11661  147F  3001               	movlw	1
 11662  1480  02A7               	subwf	___awdiv@counter,f
 11663  1481  1D03               	btfss	3,2
 11664  1482  2C68               	goto	l5780
 11665  1483                     l5790:	
 11666  1483  0828               	movf	___awdiv@sign,w
 11667  1484  1903               	btfsc	3,2
 11668  1485  2C8B               	goto	l5794
 11669  1486  09A9               	comf	___awdiv@quotient,f
 11670  1487  09AA               	comf	___awdiv@quotient+1,f
 11671  1488  0AA9               	incf	___awdiv@quotient,f
 11672  1489  1903               	skipnz
 11673  148A  0AAA               	incf	___awdiv@quotient+1,f
 11674  148B                     l5794:	
 11675  148B  082A               	movf	___awdiv@quotient+1,w
 11676  148C  00A3               	movwf	?___awdiv+1
 11677  148D  0829               	movf	___awdiv@quotient,w
 11678  148E  00A2               	movwf	?___awdiv
 11679  148F  0008               	return
 11680  1490                     __end_of___awdiv:	
 11681                           
 11682                           	psect	text33
 11683  1FC3                     __ptext33:	
 11684 ;; *************** function ___altoft *****************
 11685 ;; Defined at:
 11686 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11687 ;; Parameters:    Size  Location     Type
 11688 ;;  c               4   10[BANK0 ] long 
 11689 ;; Auto vars:     Size  Location     Type
 11690 ;;  sign            1   17[BANK0 ] unsigned char 
 11691 ;;  exp             1   16[BANK0 ] unsigned char 
 11692 ;; Return value:  Size  Location     Type
 11693 ;;                  3   10[BANK0 ] float 
 11694 ;; Registers used:
 11695 ;;		wreg, status,2, status,0, pclath, cstack
 11696 ;; Tracked objects:
 11697 ;;		On entry : 0/0
 11698 ;;		On exit  : 0/0
 11699 ;;		Unchanged: 0/0
 11700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11701 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11702 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11703 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11704 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11705 ;;Total ram usage:        8 bytes
 11706 ;; Hardware stack levels used:    1
 11707 ;; Hardware stack levels required when called:    3
 11708 ;; This function calls:
 11709 ;;		___ftpack
 11710 ;; This function is called by:
 11711 ;;		_main
 11712 ;; This function uses a non-reentrant model
 11713 ;;
 11714                           
 11715                           
 11716                           ;psect for function ___altoft
 11717  1FC3                     ___altoft:	
 11718                           
 11719                           ;incstack = 0
 11720                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11721  1FC3  0020               	movlb	0	; select bank0
 11722  1FC4  01B1               	clrf	___altoft@sign
 11723  1FC5  308E               	movlw	142
 11724  1FC6  00AE               	movwf	??___altoft
 11725  1FC7  082E               	movf	??___altoft,w
 11726  1FC8  00B0               	movwf	___altoft@exp
 11727  1FC9  1FAD               	btfss	___altoft@c+3,7
 11728  1FCA  2FD8               	goto	l5748
 11729  1FCB  09AA               	comf	___altoft@c,f
 11730  1FCC  09AB               	comf	___altoft@c+1,f
 11731  1FCD  09AC               	comf	___altoft@c+2,f
 11732  1FCE  09AD               	comf	___altoft@c+3,f
 11733  1FCF  0AAA               	incf	___altoft@c,f
 11734  1FD0  1903               	skipnz
 11735  1FD1  0AAB               	incf	___altoft@c+1,f
 11736  1FD2  1903               	skipnz
 11737  1FD3  0AAC               	incf	___altoft@c+2,f
 11738  1FD4  1903               	skipnz
 11739  1FD5  0AAD               	incf	___altoft@c+3,f
 11740  1FD6  01B1               	clrf	___altoft@sign
 11741  1FD7  0AB1               	incf	___altoft@sign,f
 11742  1FD8                     l5748:	
 11743  1FD8  30FF               	movlw	255
 11744  1FD9  052D               	andwf	___altoft@c+3,w
 11745  1FDA  1903               	btfsc	3,2
 11746  1FDB  2FE8               	goto	l5750
 11747  1FDC  3001               	movlw	1
 11748  1FDD                     u6485:	
 11749  1FDD  36AD               	lsrf	___altoft@c+3,f
 11750  1FDE  0CAC               	rrf	___altoft@c+2,f
 11751  1FDF  0CAB               	rrf	___altoft@c+1,f
 11752  1FE0  0CAA               	rrf	___altoft@c,f
 11753  1FE1  0B89               	decfsz	9,f
 11754  1FE2  2FDD               	goto	u6485
 11755  1FE3  3001               	movlw	1
 11756  1FE4  00AE               	movwf	??___altoft
 11757  1FE5  082E               	movf	??___altoft,w
 11758  1FE6  07B0               	addwf	___altoft@exp,f
 11759  1FE7  2FD8               	goto	l5748
 11760  1FE8                     l5750:	
 11761  1FE8  082A               	movf	___altoft@c,w
 11762  1FE9  00A2               	movwf	___ftpack@arg
 11763  1FEA  082B               	movf	___altoft@c+1,w
 11764  1FEB  00A3               	movwf	___ftpack@arg+1
 11765  1FEC  082C               	movf	___altoft@c+2,w
 11766  1FED  00A4               	movwf	___ftpack@arg+2
 11767  1FEE  0830               	movf	___altoft@exp,w
 11768  1FEF  00AE               	movwf	??___altoft
 11769  1FF0  082E               	movf	??___altoft,w
 11770  1FF1  00A5               	movwf	___ftpack@exp
 11771  1FF2  0831               	movf	___altoft@sign,w
 11772  1FF3  00AF               	movwf	??___altoft+1
 11773  1FF4  082F               	movf	??___altoft+1,w
 11774  1FF5  00A6               	movwf	___ftpack@sign
 11775  1FF6  3194  24E4         	fcall	___ftpack
 11776  1FF8  0020               	movlb	0	; select bank0
 11777  1FF9  0822               	movf	?___ftpack,w
 11778  1FFA  00AA               	movwf	?___altoft
 11779  1FFB  0823               	movf	?___ftpack+1,w
 11780  1FFC  00AB               	movwf	?___altoft+1
 11781  1FFD  0824               	movf	?___ftpack+2,w
 11782  1FFE  00AC               	movwf	?___altoft+2
 11783  1FFF  0008               	return
 11784  2000                     __end_of___altoft:	
 11785                           
 11786                           	psect	text34
 11787  14E4                     __ptext34:	
 11788 ;; *************** function ___ftpack *****************
 11789 ;; Defined at:
 11790 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;  arg             3    2[BANK0 ] unsigned um
 11793 ;;  exp             1    5[BANK0 ] unsigned char 
 11794 ;;  sign            1    6[BANK0 ] unsigned char 
 11795 ;; Auto vars:     Size  Location     Type
 11796 ;;		None
 11797 ;; Return value:  Size  Location     Type
 11798 ;;                  3    2[BANK0 ] float 
 11799 ;; Registers used:
 11800 ;;		wreg, status,2, status,0
 11801 ;; Tracked objects:
 11802 ;;		On entry : 0/0
 11803 ;;		On exit  : 0/0
 11804 ;;		Unchanged: 0/0
 11805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11806 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11808 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11809 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11810 ;;Total ram usage:        8 bytes
 11811 ;; Hardware stack levels used:    1
 11812 ;; Hardware stack levels required when called:    2
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		___altoft
 11817 ;;		___awtoft
 11818 ;;		___ftadd
 11819 ;;		___ftdiv
 11820 ;;		___ftmul
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function ___ftpack
 11826  14E4                     ___ftpack:	
 11827                           
 11828                           ;incstack = 0
 11829                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11830  14E4  0020               	movlb	0	; select bank0
 11831  14E5  0825               	movf	___ftpack@exp,w
 11832  14E6  1903               	btfsc	3,2
 11833  14E7  2CED               	goto	l4898
 11834  14E8  0824               	movf	___ftpack@arg+2,w
 11835  14E9  0423               	iorwf	___ftpack@arg+1,w
 11836  14EA  0422               	iorwf	___ftpack@arg,w
 11837  14EB  1D03               	skipz
 11838  14EC  2CFE               	goto	l4904
 11839  14ED                     l4898:	
 11840  14ED  3000               	movlw	0
 11841  14EE  00A2               	movwf	?___ftpack
 11842  14EF  3000               	movlw	0
 11843  14F0  00A3               	movwf	?___ftpack+1
 11844  14F1  3000               	movlw	0
 11845  14F2  00A4               	movwf	?___ftpack+2
 11846  14F3  0008               	return
 11847  14F4                     l4902:	
 11848  14F4  3001               	movlw	1
 11849  14F5  00A7               	movwf	??___ftpack
 11850  14F6  0827               	movf	??___ftpack,w
 11851  14F7  07A5               	addwf	___ftpack@exp,f
 11852  14F8  3001               	movlw	1
 11853  14F9                     u4885:	
 11854  14F9  36A4               	lsrf	___ftpack@arg+2,f
 11855  14FA  0CA3               	rrf	___ftpack@arg+1,f
 11856  14FB  0CA2               	rrf	___ftpack@arg,f
 11857  14FC  0B89               	decfsz	9,f
 11858  14FD  2CF9               	goto	u4885
 11859  14FE                     l4904:	
 11860  14FE  30FE               	movlw	254
 11861  14FF  0524               	andwf	___ftpack@arg+2,w
 11862  1500  1903               	btfsc	3,2
 11863  1501  2D17               	goto	l1485
 11864  1502  2CF4               	goto	l4902
 11865  1503                     l4906:	
 11866  1503  3001               	movlw	1
 11867  1504  00A7               	movwf	??___ftpack
 11868  1505  0827               	movf	??___ftpack,w
 11869  1506  07A5               	addwf	___ftpack@exp,f
 11870  1507  3001               	movlw	1
 11871  1508  07A2               	addwf	___ftpack@arg,f
 11872  1509  3000               	movlw	0
 11873  150A  1803               	skipnc
 11874  150B  3001               	movlw	1
 11875  150C  07A3               	addwf	___ftpack@arg+1,f
 11876  150D  3000               	movlw	0
 11877  150E  1803               	skipnc
 11878  150F  3001               	movlw	1
 11879  1510  07A4               	addwf	___ftpack@arg+2,f
 11880  1511  3001               	movlw	1
 11881  1512                     u4905:	
 11882  1512  36A4               	lsrf	___ftpack@arg+2,f
 11883  1513  0CA3               	rrf	___ftpack@arg+1,f
 11884  1514  0CA2               	rrf	___ftpack@arg,f
 11885  1515  0B89               	decfsz	9,f
 11886  1516  2D12               	goto	u4905
 11887  1517                     l1485:	
 11888  1517  30FF               	movlw	255
 11889  1518  0524               	andwf	___ftpack@arg+2,w
 11890  1519  1903               	btfsc	3,2
 11891  151A  2D24               	goto	l4914
 11892  151B  2D03               	goto	l4906
 11893  151C                     l4912:	
 11894  151C  3001               	movlw	1
 11895  151D  02A5               	subwf	___ftpack@exp,f
 11896  151E  3001               	movlw	1
 11897  151F                     u4925:	
 11898  151F  35A2               	lslf	___ftpack@arg,f
 11899  1520  0DA3               	rlf	___ftpack@arg+1,f
 11900  1521  0DA4               	rlf	___ftpack@arg+2,f
 11901  1522  0B89               	decfsz	9,f
 11902  1523  2D1F               	goto	u4925
 11903  1524                     l4914:	
 11904  1524  1BA3               	btfsc	___ftpack@arg+1,7
 11905  1525  2D2A               	goto	l1492
 11906  1526  3002               	movlw	2
 11907  1527  0225               	subwf	___ftpack@exp,w
 11908  1528  1803               	skipnc
 11909  1529  2D1C               	goto	l4912
 11910  152A                     l1492:	
 11911  152A  1825               	btfsc	___ftpack@exp,0
 11912  152B  2D32               	goto	l1493
 11913  152C  30FF               	movlw	255
 11914  152D  05A2               	andwf	___ftpack@arg,f
 11915  152E  307F               	movlw	127
 11916  152F  05A3               	andwf	___ftpack@arg+1,f
 11917  1530  30FF               	movlw	255
 11918  1531  05A4               	andwf	___ftpack@arg+2,f
 11919  1532                     l1493:	
 11920  1532  1003               	clrc
 11921  1533  0CA5               	rrf	___ftpack@exp,f
 11922  1534  0825               	movf	___ftpack@exp,w
 11923  1535  00A7               	movwf	??___ftpack
 11924  1536  01A8               	clrf	??___ftpack+1
 11925  1537  01A9               	clrf	??___ftpack+2
 11926  1538  3010               	movlw	16
 11927  1539                     u4965:	
 11928  1539  35A7               	lslf	??___ftpack,f
 11929  153A  0DA8               	rlf	??___ftpack+1,f
 11930  153B  0DA9               	rlf	??___ftpack+2,f
 11931  153C  0B89               	decfsz	9,f
 11932  153D  2D39               	goto	u4965
 11933  153E  0827               	movf	??___ftpack,w
 11934  153F  04A2               	iorwf	___ftpack@arg,f
 11935  1540  0828               	movf	??___ftpack+1,w
 11936  1541  04A3               	iorwf	___ftpack@arg+1,f
 11937  1542  0829               	movf	??___ftpack+2,w
 11938  1543  04A4               	iorwf	___ftpack@arg+2,f
 11939  1544  0826               	movf	___ftpack@sign,w
 11940  1545  1903               	btfsc	3,2
 11941  1546  0008               	return
 11942  1547  17A4               	bsf	___ftpack@arg+2,7
 11943  1548  0008               	return
 11944  1549                     __end_of___ftpack:	
 11945                           
 11946                           	psect	text35
 11947  1301                     __ptext35:	
 11948 ;; *************** function _ReadSavedSettings *****************
 11949 ;; Defined at:
 11950 ;;		line 193 in file "user.c"
 11951 ;; Parameters:    Size  Location     Type
 11952 ;;		None
 11953 ;; Auto vars:     Size  Location     Type
 11954 ;;		None
 11955 ;; Return value:  Size  Location     Type
 11956 ;;                  1    wreg      void 
 11957 ;; Registers used:
 11958 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11959 ;; Tracked objects:
 11960 ;;		On entry : 0/0
 11961 ;;		On exit  : 0/0
 11962 ;;		Unchanged: 0/0
 11963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11967 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11968 ;;Total ram usage:        0 bytes
 11969 ;; Hardware stack levels used:    1
 11970 ;; Hardware stack levels required when called:    3
 11971 ;; This function calls:
 11972 ;;		_FLASH_ReadWord
 11973 ;;		_set_leds_bottom
 11974 ;;		_set_leds_top
 11975 ;; This function is called by:
 11976 ;;		_main
 11977 ;; This function uses a non-reentrant model
 11978 ;;
 11979                           
 11980                           
 11981                           ;psect for function _ReadSavedSettings
 11982  1301                     _ReadSavedSettings:	
 11983                           
 11984                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11985                           
 11986                           ;incstack = 0
 11987                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11988  1301  3081               	movlw	129
 11989  1302  0020               	movlb	0	; select bank0
 11990  1303  00A2               	movwf	FLASH_ReadWord@flashAddr
 11991  1304  301F               	movlw	31
 11992  1305  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 11993  1306  319E  2668  3193   	fcall	_FLASH_ReadWord
 11994  1309  0020               	movlb	0	; select bank0
 11995  130A  0823               	movf	?_FLASH_ReadWord+1,w
 11996  130B  0021               	movlb	1	; select bank1
 11997  130C  00D8               	movwf	(_top_push_state+1)^(0+128)
 11998  130D  0020               	movlb	0	; select bank0
 11999  130E  0822               	movf	?_FLASH_ReadWord,w
 12000  130F  0021               	movlb	1	; select bank1
 12001  1310  00D7               	movwf	_top_push_state^(0+128)
 12002                           
 12003                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 12004  1311  3082               	movlw	130
 12005  1312  0020               	movlb	0	; select bank0
 12006  1313  00A2               	movwf	FLASH_ReadWord@flashAddr
 12007  1314  301F               	movlw	31
 12008  1315  00A3               	movwf	FLASH_ReadWord@flashAddr+1
 12009  1316  319E  2668  3193   	fcall	_FLASH_ReadWord
 12010  1319  0020               	movlb	0	; select bank0
 12011  131A  0823               	movf	?_FLASH_ReadWord+1,w
 12012  131B  0021               	movlb	1	; select bank1
 12013  131C  00D2               	movwf	(_bottom_push_state+1)^(0+128)
 12014  131D  0020               	movlb	0	; select bank0
 12015  131E  0822               	movf	?_FLASH_ReadWord,w
 12016  131F  0021               	movlb	1	; select bank1
 12017  1320  00D1               	movwf	_bottom_push_state^(0+128)
 12018                           
 12019                           ;user.c: 199: LATGbits.LATG1 = !switchBypass_state;
 12020  1321  087D               	movf	_switchBypass_state,w
 12021  1322  1D03               	btfss	3,2
 12022  1323  2B27               	goto	u5820
 12023  1324  0027               	movlb	7	; select bank7
 12024  1325  148D               	bsf	13,1	;volatile
 12025  1326  2B29               	goto	l5390
 12026  1327                     u5820:	
 12027  1327  0027               	movlb	7	; select bank7
 12028  1328  108D               	bcf	13,1	;volatile
 12029  1329                     l5390:	
 12030                           
 12031                           ;user.c: 200: LATGbits.LATG2 = switchBypass_state;
 12032  1329  0C7D               	rrf	_switchBypass_state,w
 12033  132A  1C03               	skipc
 12034  132B  110D               	bcf	13,2	;volatile
 12035  132C  1803               	skipnc
 12036  132D  150D               	bsf	13,2	;volatile
 12037                           
 12038                           ;user.c: 201: LATBbits.LATB2 = 0;
 12039  132E  0022               	movlb	2	; select bank2
 12040  132F  110D               	bcf	13,2	;volatile
 12041                           
 12042                           ;user.c: 202: LATBbits.LATB3 = 0;
 12043  1330  118D               	bcf	13,3	;volatile
 12044                           
 12045                           ;user.c: 204: LATBbits.LATB4 = 0;
 12046  1331  120D               	bcf	13,4	;volatile
 12047                           
 12048                           ;user.c: 205: LATBbits.LATB5 = 0;
 12049  1332  128D               	bcf	13,5	;volatile
 12050                           
 12051                           ;user.c: 207: LATBbits.LATB1 = 0;
 12052  1333  108D               	bcf	13,1	;volatile
 12053                           
 12054                           ;user.c: 208: LATBbits.LATB0 = 0;
 12055  1334  100D               	bcf	13,0	;volatile
 12056                           
 12057                           ;user.c: 211: set_leds_top(top_push_state, 1);
 12058  1335  0021               	movlb	1	; select bank1
 12059  1336  0858               	movf	(_top_push_state+1)^(0+128),w
 12060  1337  0020               	movlb	0	; select bank0
 12061  1338  00A3               	movwf	set_leds_top@x+1
 12062  1339  0021               	movlb	1	; select bank1
 12063  133A  0857               	movf	_top_push_state^(0+128),w
 12064  133B  0020               	movlb	0	; select bank0
 12065  133C  00A2               	movwf	set_leds_top@x
 12066  133D  3001               	movlw	1
 12067  133E  00A4               	movwf	set_leds_top@ledState
 12068  133F  3000               	movlw	0
 12069  1340  00A5               	movwf	set_leds_top@ledState+1
 12070  1341  3194  2490  3193   	fcall	_set_leds_top
 12071                           
 12072                           ;user.c: 212: set_leds_bottom(bottom_push_state);
 12073  1344  0021               	movlb	1	; select bank1
 12074  1345  0852               	movf	(_bottom_push_state+1)^(0+128),w
 12075  1346  0020               	movlb	0	; select bank0
 12076  1347  00A3               	movwf	set_leds_bottom@x+1
 12077  1348  0021               	movlb	1	; select bank1
 12078  1349  0851               	movf	_bottom_push_state^(0+128),w
 12079  134A  0020               	movlb	0	; select bank0
 12080  134B  00A2               	movwf	set_leds_bottom@x
 12081  134C  319F  2788         	fcall	_set_leds_bottom
 12082  134E  0008               	return
 12083  134F                     __end_of_ReadSavedSettings:	
 12084                           
 12085                           	psect	text36
 12086  1490                     __ptext36:	
 12087 ;; *************** function _set_leds_top *****************
 12088 ;; Defined at:
 12089 ;;		line 16 in file "LEDs.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  x               2    2[BANK0 ] int 
 12092 ;;  ledState        2    4[BANK0 ] int 
 12093 ;; Auto vars:     Size  Location     Type
 12094 ;;		None
 12095 ;; Return value:  Size  Location     Type
 12096 ;;                  1    wreg      void 
 12097 ;; Registers used:
 12098 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12099 ;; Tracked objects:
 12100 ;;		On entry : 0/0
 12101 ;;		On exit  : 0/0
 12102 ;;		Unchanged: 0/0
 12103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12104 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12107 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12108 ;;Total ram usage:        4 bytes
 12109 ;; Hardware stack levels used:    1
 12110 ;; Hardware stack levels required when called:    2
 12111 ;; This function calls:
 12112 ;;		Nothing
 12113 ;; This function is called by:
 12114 ;;		_ReadSavedSettings
 12115 ;;		_star_tactiles
 12116 ;;		_solidring_tactiles
 12117 ;;		_read_top_tactile
 12118 ;;		_ring_tactiles
 12119 ;; This function uses a non-reentrant model
 12120 ;;
 12121                           
 12122                           
 12123                           ;psect for function _set_leds_top
 12124  1490                     _set_leds_top:	
 12125                           
 12126                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 12127                           
 12128                           ;incstack = 0
 12129                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 12130  1490  0027               	movlb	7	; select bank7
 12131  1491  100C               	bcf	12,0	;volatile
 12132                           
 12133                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 12134  1492  108C               	bcf	12,1	;volatile
 12135                           
 12136                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 12137  1493  110C               	bcf	12,2	;volatile
 12138                           
 12139                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 12140  1494  118C               	bcf	12,3	;volatile
 12141                           
 12142                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 12143  1495  120C               	bcf	12,4	;volatile
 12144                           
 12145                           ;LEDs.c: 22: switch (x) {
 12146  1496  2CC6               	goto	l4864
 12147  1497                     l4852:	
 12148                           ;LEDs.c: 23: case 1:
 12149                           
 12150                           
 12151                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 12152  1497  0020               	movlb	0	; select bank0
 12153  1498  0C24               	rrf	set_leds_top@ledState,w
 12154  1499  0027               	movlb	7	; select bank7
 12155  149A  1C03               	skipc
 12156  149B  100C               	bcf	12,0	;volatile
 12157  149C  1803               	skipnc
 12158  149D  140C               	bsf	12,0	;volatile
 12159                           
 12160                           ;LEDs.c: 25: break;
 12161  149E  0008               	return
 12162  149F                     l4854:	
 12163                           ;LEDs.c: 26: case 2:
 12164                           
 12165                           
 12166                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 12167  149F  0020               	movlb	0	; select bank0
 12168  14A0  0C24               	rrf	set_leds_top@ledState,w
 12169  14A1  0027               	movlb	7	; select bank7
 12170  14A2  1C03               	skipc
 12171  14A3  108C               	bcf	12,1	;volatile
 12172  14A4  1803               	skipnc
 12173  14A5  148C               	bsf	12,1	;volatile
 12174                           
 12175                           ;LEDs.c: 28: break;
 12176  14A6  0008               	return
 12177  14A7                     l4856:	
 12178                           ;LEDs.c: 29: case 3:
 12179                           
 12180                           
 12181                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 12182  14A7  0020               	movlb	0	; select bank0
 12183  14A8  0C24               	rrf	set_leds_top@ledState,w
 12184  14A9  0027               	movlb	7	; select bank7
 12185  14AA  1C03               	skipc
 12186  14AB  110C               	bcf	12,2	;volatile
 12187  14AC  1803               	skipnc
 12188  14AD  150C               	bsf	12,2	;volatile
 12189                           
 12190                           ;LEDs.c: 31: break;
 12191  14AE  0008               	return
 12192  14AF                     l4858:	
 12193                           ;LEDs.c: 32: case 4:
 12194                           
 12195                           
 12196                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 12197  14AF  0020               	movlb	0	; select bank0
 12198  14B0  0C24               	rrf	set_leds_top@ledState,w
 12199  14B1  0027               	movlb	7	; select bank7
 12200  14B2  1C03               	skipc
 12201  14B3  118C               	bcf	12,3	;volatile
 12202  14B4  1803               	skipnc
 12203  14B5  158C               	bsf	12,3	;volatile
 12204                           
 12205                           ;LEDs.c: 34: break;
 12206  14B6  0008               	return
 12207  14B7                     l4860:	
 12208                           ;LEDs.c: 35: case 5:
 12209                           
 12210                           
 12211                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 12212  14B7  0020               	movlb	0	; select bank0
 12213  14B8  0C24               	rrf	set_leds_top@ledState,w
 12214  14B9  0027               	movlb	7	; select bank7
 12215  14BA  1C03               	skipc
 12216  14BB  120C               	bcf	12,4	;volatile
 12217  14BC  1803               	skipnc
 12218  14BD  160C               	bsf	12,4	;volatile
 12219                           
 12220                           ;LEDs.c: 39: break;
 12221                           
 12222                           ;LEDs.c: 38: case 6:
 12223                           
 12224                           ;LEDs.c: 37: break;
 12225  14BE  0008               	return
 12226  14BF                     l702:	
 12227                           ;LEDs.c: 40: case 100:
 12228                           
 12229                           
 12230                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 12231  14BF  0027               	movlb	7	; select bank7
 12232  14C0  140C               	bsf	12,0	;volatile
 12233                           
 12234                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 12235  14C1  148C               	bsf	12,1	;volatile
 12236                           
 12237                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 12238  14C2  150C               	bsf	12,2	;volatile
 12239                           
 12240                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 12241  14C3  158C               	bsf	12,3	;volatile
 12242                           
 12243                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 12244  14C4  160C               	bsf	12,4	;volatile
 12245                           
 12246                           ;LEDs.c: 47: }
 12247                           
 12248                           ;LEDs.c: 46: break;
 12249  14C5  0008               	return
 12250  14C6                     l4864:	
 12251                           
 12252                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12253                           ; Switch size 1, requested type "space"
 12254                           ; Number of cases is 1, Range of values is 0 to 0
 12255                           ; switch strategies available:
 12256                           ; Name         Instructions Cycles
 12257                           ; simple_byte            4     3 (average)
 12258                           ; direct_byte            8     6 (fixed)
 12259                           ; jumptable            260     6 (fixed)
 12260                           ;	Chosen strategy is simple_byte
 12261  14C6  0020               	movlb	0	; select bank0
 12262  14C7  0823               	movf	set_leds_top@x+1,w
 12263  14C8  3A00               	xorlw	0	; case 0
 12264  14C9  1903               	skipnz
 12265  14CA  2CCC               	goto	l6252
 12266  14CB  2CE3               	goto	l703
 12267  14CC                     l6252:	
 12268                           
 12269                           ; Switch size 1, requested type "space"
 12270                           ; Number of cases is 7, Range of values is 1 to 100
 12271                           ; switch strategies available:
 12272                           ; Name         Instructions Cycles
 12273                           ; simple_byte           22    12 (average)
 12274                           ; direct_byte          209     9 (fixed)
 12275                           ; jumptable            263     9 (fixed)
 12276                           ;	Chosen strategy is simple_byte
 12277  14CC  0822               	movf	set_leds_top@x,w
 12278  14CD  3A01               	xorlw	1	; case 1
 12279  14CE  1903               	skipnz
 12280  14CF  2C97               	goto	l4852
 12281  14D0  3A03               	xorlw	3	; case 2
 12282  14D1  1903               	skipnz
 12283  14D2  2C9F               	goto	l4854
 12284  14D3  3A01               	xorlw	1	; case 3
 12285  14D4  1903               	skipnz
 12286  14D5  2CA7               	goto	l4856
 12287  14D6  3A07               	xorlw	7	; case 4
 12288  14D7  1903               	skipnz
 12289  14D8  2CAF               	goto	l4858
 12290  14D9  3A01               	xorlw	1	; case 5
 12291  14DA  1903               	skipnz
 12292  14DB  2CB7               	goto	l4860
 12293  14DC  3A03               	xorlw	3	; case 6
 12294  14DD  1903               	skipnz
 12295  14DE  2CE3               	goto	l703
 12296  14DF  3A62               	xorlw	98	; case 100
 12297  14E0  1903               	skipnz
 12298  14E1  2CBF               	goto	l702
 12299  14E2  2CE3               	goto	l703
 12300  14E3                     l703:	
 12301  14E3  0008               	return
 12302  14E4                     __end_of_set_leds_top:	
 12303                           
 12304                           	psect	text37
 12305  1F88                     __ptext37:	
 12306 ;; *************** function _set_leds_bottom *****************
 12307 ;; Defined at:
 12308 ;;		line 51 in file "LEDs.c"
 12309 ;; Parameters:    Size  Location     Type
 12310 ;;  x               2    2[BANK0 ] int 
 12311 ;; Auto vars:     Size  Location     Type
 12312 ;;		None
 12313 ;; Return value:  Size  Location     Type
 12314 ;;                  1    wreg      void 
 12315 ;; Registers used:
 12316 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12317 ;; Tracked objects:
 12318 ;;		On entry : 0/0
 12319 ;;		On exit  : 0/0
 12320 ;;		Unchanged: 0/0
 12321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12322 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12325 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12326 ;;Total ram usage:        2 bytes
 12327 ;; Hardware stack levels used:    1
 12328 ;; Hardware stack levels required when called:    2
 12329 ;; This function calls:
 12330 ;;		Nothing
 12331 ;; This function is called by:
 12332 ;;		_ReadSavedSettings
 12333 ;;		_star_tactiles
 12334 ;;		_solidring_tactiles
 12335 ;;		_read_bottom_tactile
 12336 ;;		_ring_tactiles
 12337 ;; This function uses a non-reentrant model
 12338 ;;
 12339                           
 12340                           
 12341                           ;psect for function _set_leds_bottom
 12342  1F88                     _set_leds_bottom:	
 12343                           
 12344                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12345                           
 12346                           ;incstack = 0
 12347                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12348  1F88  0022               	movlb	2	; select bank2
 12349  1F89  100F               	bcf	15,0	;volatile
 12350                           
 12351                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12352  1F8A  108F               	bcf	15,1	;volatile
 12353                           
 12354                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12355  1F8B  110F               	bcf	15,2	;volatile
 12356                           
 12357                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12358  1F8C  118F               	bcf	15,3	;volatile
 12359                           
 12360                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12361  1F8D  120F               	bcf	15,4	;volatile
 12362                           
 12363                           ;LEDs.c: 57: switch (x) {
 12364  1F8E  2FA5               	goto	l4888
 12365  1F8F                     l707:	
 12366                           ;LEDs.c: 58: case 1:
 12367                           
 12368                           
 12369                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12370  1F8F  0022               	movlb	2	; select bank2
 12371  1F90  140F               	bsf	15,0	;volatile
 12372                           
 12373                           ;LEDs.c: 60: break;
 12374  1F91  0008               	return
 12375  1F92                     l709:	
 12376                           ;LEDs.c: 61: case 2:
 12377                           
 12378                           
 12379                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12380  1F92  0022               	movlb	2	; select bank2
 12381  1F93  148F               	bsf	15,1	;volatile
 12382                           
 12383                           ;LEDs.c: 63: break;
 12384  1F94  0008               	return
 12385  1F95                     l710:	
 12386                           ;LEDs.c: 64: case 3:
 12387                           
 12388                           
 12389                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12390  1F95  0022               	movlb	2	; select bank2
 12391  1F96  150F               	bsf	15,2	;volatile
 12392                           
 12393                           ;LEDs.c: 66: break;
 12394  1F97  0008               	return
 12395  1F98                     l711:	
 12396                           ;LEDs.c: 67: case 4:
 12397                           
 12398                           
 12399                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12400  1F98  0022               	movlb	2	; select bank2
 12401  1F99  158F               	bsf	15,3	;volatile
 12402                           
 12403                           ;LEDs.c: 69: break;
 12404  1F9A  0008               	return
 12405  1F9B                     l712:	
 12406                           ;LEDs.c: 70: case 5:
 12407                           
 12408                           
 12409                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12410  1F9B  0022               	movlb	2	; select bank2
 12411  1F9C  160F               	bsf	15,4	;volatile
 12412                           
 12413                           ;LEDs.c: 74: break;
 12414                           
 12415                           ;LEDs.c: 73: case 6:
 12416                           
 12417                           ;LEDs.c: 72: break;
 12418  1F9D  0008               	return
 12419  1F9E                     l714:	
 12420                           ;LEDs.c: 75: case 100:
 12421                           
 12422                           
 12423                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12424  1F9E  0022               	movlb	2	; select bank2
 12425  1F9F  140F               	bsf	15,0	;volatile
 12426                           
 12427                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12428  1FA0  148F               	bsf	15,1	;volatile
 12429                           
 12430                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12431  1FA1  150F               	bsf	15,2	;volatile
 12432                           
 12433                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12434  1FA2  158F               	bsf	15,3	;volatile
 12435                           
 12436                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12437  1FA3  160F               	bsf	15,4	;volatile
 12438                           
 12439                           ;LEDs.c: 82: }
 12440                           
 12441                           ;LEDs.c: 81: break;
 12442  1FA4  0008               	return
 12443  1FA5                     l4888:	
 12444                           
 12445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12446                           ; Switch size 1, requested type "space"
 12447                           ; Number of cases is 1, Range of values is 0 to 0
 12448                           ; switch strategies available:
 12449                           ; Name         Instructions Cycles
 12450                           ; simple_byte            4     3 (average)
 12451                           ; direct_byte            8     6 (fixed)
 12452                           ; jumptable            260     6 (fixed)
 12453                           ;	Chosen strategy is simple_byte
 12454  1FA5  0020               	movlb	0	; select bank0
 12455  1FA6  0823               	movf	set_leds_bottom@x+1,w
 12456  1FA7  3A00               	xorlw	0	; case 0
 12457  1FA8  1903               	skipnz
 12458  1FA9  2FAB               	goto	l6254
 12459  1FAA  2FC2               	goto	l715
 12460  1FAB                     l6254:	
 12461                           
 12462                           ; Switch size 1, requested type "space"
 12463                           ; Number of cases is 7, Range of values is 1 to 100
 12464                           ; switch strategies available:
 12465                           ; Name         Instructions Cycles
 12466                           ; simple_byte           22    12 (average)
 12467                           ; direct_byte          209     9 (fixed)
 12468                           ; jumptable            263     9 (fixed)
 12469                           ;	Chosen strategy is simple_byte
 12470  1FAB  0822               	movf	set_leds_bottom@x,w
 12471  1FAC  3A01               	xorlw	1	; case 1
 12472  1FAD  1903               	skipnz
 12473  1FAE  2F8F               	goto	l707
 12474  1FAF  3A03               	xorlw	3	; case 2
 12475  1FB0  1903               	skipnz
 12476  1FB1  2F92               	goto	l709
 12477  1FB2  3A01               	xorlw	1	; case 3
 12478  1FB3  1903               	skipnz
 12479  1FB4  2F95               	goto	l710
 12480  1FB5  3A07               	xorlw	7	; case 4
 12481  1FB6  1903               	skipnz
 12482  1FB7  2F98               	goto	l711
 12483  1FB8  3A01               	xorlw	1	; case 5
 12484  1FB9  1903               	skipnz
 12485  1FBA  2F9B               	goto	l712
 12486  1FBB  3A03               	xorlw	3	; case 6
 12487  1FBC  1903               	skipnz
 12488  1FBD  2FC2               	goto	l715
 12489  1FBE  3A62               	xorlw	98	; case 100
 12490  1FBF  1903               	skipnz
 12491  1FC0  2F9E               	goto	l714
 12492  1FC1  2FC2               	goto	l715
 12493  1FC2                     l715:	
 12494  1FC2  0008               	return
 12495  1FC3                     __end_of_set_leds_bottom:	
 12496                           
 12497                           	psect	text38
 12498  1E68                     __ptext38:	
 12499 ;; *************** function _FLASH_ReadWord *****************
 12500 ;; Defined at:
 12501 ;;		line 58 in file "memory.c"
 12502 ;; Parameters:    Size  Location     Type
 12503 ;;  flashAddr       2    2[BANK0 ] unsigned int 
 12504 ;; Auto vars:     Size  Location     Type
 12505 ;;  GIEBitValue     1    4[BANK0 ] unsigned char 
 12506 ;; Return value:  Size  Location     Type
 12507 ;;                  2    2[BANK0 ] unsigned int 
 12508 ;; Registers used:
 12509 ;;		wreg, status,2, status,0
 12510 ;; Tracked objects:
 12511 ;;		On entry : 0/0
 12512 ;;		On exit  : 0/0
 12513 ;;		Unchanged: 0/0
 12514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12515 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12518 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12519 ;;Total ram usage:        3 bytes
 12520 ;; Hardware stack levels used:    1
 12521 ;; Hardware stack levels required when called:    2
 12522 ;; This function calls:
 12523 ;;		Nothing
 12524 ;; This function is called by:
 12525 ;;		_ReadSavedSettings
 12526 ;;		_FLASH_WriteWord
 12527 ;; This function uses a non-reentrant model
 12528 ;;
 12529                           
 12530                           
 12531                           ;psect for function _FLASH_ReadWord
 12532  1E68                     _FLASH_ReadWord:	
 12533                           
 12534                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12535                           
 12536                           ;incstack = 0
 12537                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12538  1E68  3000               	movlw	0
 12539  1E69  1B8B               	btfsc	11,7	;volatile
 12540  1E6A  3001               	movlw	1
 12541  1E6B  0020               	movlb	0	; select bank0
 12542  1E6C  00A4               	movwf	FLASH_ReadWord@GIEBitValue
 12543                           
 12544                           ;memory.c: 61: INTCONbits.GIE = 0;
 12545  1E6D  138B               	bcf	11,7	;volatile
 12546                           
 12547                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12548  1E6E  0822               	movf	FLASH_ReadWord@flashAddr,w
 12549  1E6F  0023               	movlb	3	; select bank3
 12550  1E70  0091               	movwf	17	;volatile
 12551                           
 12552                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12553  1E71  0020               	movlb	0	; select bank0
 12554  1E72  0823               	movf	FLASH_ReadWord@flashAddr+1,w
 12555  1E73  0023               	movlb	3	; select bank3
 12556  1E74  0092               	movwf	18	;volatile
 12557                           
 12558                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12559  1E75  1315               	bcf	21,6	;volatile
 12560                           
 12561                           ;memory.c: 66: PMCON1bits.RD = 1;
 12562  1E76  1415               	bsf	21,0	;volatile
 12563                           
 12564                           ;memory.c: 67: __nop();
 12565  1E77  0000               	nop
 12566                           
 12567                           ;memory.c: 68: __nop();
 12568  1E78  0000               	nop
 12569                           
 12570                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12571  1E79  0020               	movlb	0	; select bank0
 12572  1E7A  0C24               	rrf	FLASH_ReadWord@GIEBitValue,w
 12573  1E7B  1C03               	skipc
 12574  1E7C  138B               	bcf	11,7	;volatile
 12575  1E7D  1803               	skipnc
 12576  1E7E  178B               	bsf	11,7	;volatile
 12577                           
 12578                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12579  1E7F  0023               	movlb	3	; select bank3
 12580  1E80  0814               	movf	20,w	;volatile
 12581  1E81  0020               	movlb	0	; select bank0
 12582  1E82  00A3               	movwf	?_FLASH_ReadWord+1
 12583  1E83  0023               	movlb	3	; select bank3
 12584  1E84  0813               	movf	19,w	;volatile
 12585  1E85  0020               	movlb	0	; select bank0
 12586  1E86  00A2               	movwf	?_FLASH_ReadWord
 12587  1E87  0008               	return
 12588  1E88                     __end_of_FLASH_ReadWord:	
 12589                           
 12590                           	psect	text39
 12591  1EAA                     __ptext39:	
 12592 ;; *************** function _InitializeTaps *****************
 12593 ;; Defined at:
 12594 ;;		line 187 in file "user.c"
 12595 ;; Parameters:    Size  Location     Type
 12596 ;;		None
 12597 ;; Auto vars:     Size  Location     Type
 12598 ;;  itap            2    3[BANK0 ] int 
 12599 ;; Return value:  Size  Location     Type
 12600 ;;                  1    wreg      void 
 12601 ;; Registers used:
 12602 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12603 ;; Tracked objects:
 12604 ;;		On entry : 0/0
 12605 ;;		On exit  : 0/0
 12606 ;;		Unchanged: 0/0
 12607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12609 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12610 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12611 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12612 ;;Total ram usage:        3 bytes
 12613 ;; Hardware stack levels used:    1
 12614 ;; Hardware stack levels required when called:    2
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_main
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _InitializeTaps
 12624  1EAA                     _InitializeTaps:	
 12625                           
 12626                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12630  1EAA  0020               	movlb	0	; select bank0
 12631  1EAB  01A3               	clrf	InitializeTaps@itap
 12632  1EAC  01A4               	clrf	InitializeTaps@itap+1
 12633  1EAD                     L15:	
 12634  1EAD  0824               	movf	InitializeTaps@itap+1,w
 12635  1EAE  3A80               	xorlw	128
 12636  1EAF  00A2               	movwf	??_InitializeTaps
 12637  1EB0  3080               	movlw	128
 12638  1EB1  0222               	subwf	??_InitializeTaps,w
 12639  1EB2  1D03               	skipz
 12640  1EB3  2EB6               	goto	u5795
 12641  1EB4  300C               	movlw	12
 12642  1EB5  0223               	subwf	InitializeTaps@itap,w
 12643  1EB6                     u5795:	
 12644  1EB6  1803               	btfsc	3,0
 12645  1EB7  0008               	return
 12646                           
 12647                           ;user.c: 189: tap[itap] = 0;
 12648  1EB8  0020               	movlb	0	; select bank0
 12649  1EB9  0823               	movf	InitializeTaps@itap,w
 12650  1EBA  00A2               	movwf	??_InitializeTaps
 12651  1EBB  3001               	movlw	1
 12652  1EBC                     u5805:	
 12653  1EBC  35A2               	lslf	??_InitializeTaps,f
 12654  1EBD  3EFF               	addlw	-1
 12655  1EBE  1D03               	skipz
 12656  1EBF  2EBC               	goto	u5805
 12657  1EC0  3522               	lslf	??_InitializeTaps,w
 12658  1EC1  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12659  1EC2  0086               	movwf	6
 12660  1EC3  3001               	movlw	1	; select bank3/4
 12661  1EC4  0087               	movwf	7
 12662  1EC5  3000               	movlw	0
 12663  1EC6  3FC0               	movwi [0]fsr1
 12664  1EC7  3000               	movlw	0
 12665  1EC8  3FC1               	movwi [1]fsr1
 12666  1EC9  3FC2               	movwi [2]fsr1
 12667  1ECA  3FC3               	movwi [3]fsr1
 12668  1ECB  3001               	movlw	1
 12669  1ECC  07A3               	addwf	InitializeTaps@itap,f
 12670  1ECD  3000               	movlw	0
 12671  1ECE  3DA4               	addwfc	InitializeTaps@itap+1,f
 12672  1ECF  2EAD               	goto	L15
 12673  1ED0                     __end_of_InitializeTaps:	
 12674                           
 12675                           	psect	text40
 12676  1F28                     __ptext40:	
 12677 ;; *************** function _InitApp *****************
 12678 ;; Defined at:
 12679 ;;		line 23 in file "user.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;		None
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;		None
 12684 ;; Return value:  Size  Location     Type
 12685 ;;                  1    wreg      void 
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, status,0, pclath, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12694 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12696 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12697 ;;Total ram usage:        0 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    4
 12700 ;; This function calls:
 12701 ;;		_init_adc
 12702 ;;		_init_pwm
 12703 ;; This function is called by:
 12704 ;;		_main
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _InitApp
 12710  1F28                     _InitApp:	
 12711                           
 12712                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12716  1F28  0021               	movlb	1	; select bank1
 12717  1F29  100D               	bcf	13,0	;volatile
 12718                           
 12719                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12720  1F2A  108D               	bcf	13,1	;volatile
 12721                           
 12722                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12723  1F2B  110D               	bcf	13,2	;volatile
 12724                           
 12725                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12726  1F2C  118D               	bcf	13,3	;volatile
 12727                           
 12728                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12729  1F2D  120D               	bcf	13,4	;volatile
 12730                           
 12731                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12732  1F2E  128D               	bcf	13,5	;volatile
 12733                           
 12734                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12735  1F2F  140E               	bsf	14,0	;volatile
 12736                           
 12737                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12738  1F30  120E               	bcf	14,4	;volatile
 12739                           
 12740                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12741  1F31  128E               	bcf	14,5	;volatile
 12742                           
 12743                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12744  1F32  100F               	bcf	15,0	;volatile
 12745                           
 12746                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12747  1F33  108F               	bcf	15,1	;volatile
 12748                           
 12749                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12750  1F34  110F               	bcf	15,2	;volatile
 12751                           
 12752                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12753  1F35  118F               	bcf	15,3	;volatile
 12754                           
 12755                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12756  1F36  120F               	bcf	15,4	;volatile
 12757                           
 12758                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12759  1F37  168F               	bsf	15,5	;volatile
 12760                           
 12761                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12762  1F38  170F               	bsf	15,6	;volatile
 12763                           
 12764                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12765  1F39  178F               	bsf	15,7	;volatile
 12766                           
 12767                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12768  1F3A  1410               	bsf	16,0	;volatile
 12769                           
 12770                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12771  1F3B  1490               	bsf	16,1	;volatile
 12772                           
 12773                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12774  1F3C  0023               	movlb	3	; select bank3
 12775  1F3D  1010               	bcf	16,0	;volatile
 12776                           
 12777                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12778  1F3E  1090               	bcf	16,1	;volatile
 12779                           
 12780                           ;user.c: 53: PORTEbits.RE0 = 0;
 12781  1F3F  0020               	movlb	0	; select bank0
 12782  1F40  1010               	bcf	16,0	;volatile
 12783                           
 12784                           ;user.c: 54: PORTEbits.RE1 = 0;
 12785  1F41  1090               	bcf	16,1	;volatile
 12786                           
 12787                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12788  1F42  0026               	movlb	6	; select bank6
 12789  1F43  100C               	bcf	12,0	;volatile
 12790                           
 12791                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12792  1F44  108C               	bcf	12,1	;volatile
 12793                           
 12794                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12795  1F45  110C               	bcf	12,2	;volatile
 12796                           
 12797                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12798  1F46  118C               	bcf	12,3	;volatile
 12799                           
 12800                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12801  1F47  120C               	bcf	12,4	;volatile
 12802                           
 12803                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12804  1F48  128C               	bcf	12,5	;volatile
 12805                           
 12806                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12807  1F49  170C               	bsf	12,6	;volatile
 12808                           
 12809                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12810  1F4A  0028               	movlb	8	; select bank8
 12811  1F4B  130C               	bcf	12,6	;volatile
 12812                           
 12813                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12814  1F4C  0026               	movlb	6	; select bank6
 12815  1F4D  108D               	bcf	13,1	;volatile
 12816                           
 12817                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12818  1F4E  110D               	bcf	13,2	;volatile
 12819                           
 12820                           ;user.c: 68: init_adc();
 12821  1F4F  319D  2585  319F   	fcall	_init_adc
 12822                           
 12823                           ;user.c: 69: init_pwm();
 12824  1F52  3191  21AB         	fcall	_init_pwm
 12825                           
 12826                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12827  1F54  178B               	bsf	11,7	;volatile
 12828                           
 12829                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12830  1F55  168B               	bsf	11,5	;volatile
 12831                           
 12832                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12833  1F56  110B               	bcf	11,2	;volatile
 12834  1F57  0008               	return
 12835  1F58                     __end_of_InitApp:	
 12836                           
 12837                           	psect	text41
 12838  11AB                     __ptext41:	
 12839 ;; *************** function _init_pwm *****************
 12840 ;; Defined at:
 12841 ;;		line 123 in file "user.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;		None
 12844 ;; Auto vars:     Size  Location     Type
 12845 ;;		None
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      void 
 12848 ;; Registers used:
 12849 ;;		wreg, status,2, status,0, pclath, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12859 ;;Total ram usage:        0 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    3
 12862 ;; This function calls:
 12863 ;;		_init_timer0
 12864 ;;		_init_timer2
 12865 ;; This function is called by:
 12866 ;;		_InitApp
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           
 12871                           ;psect for function _init_pwm
 12872  11AB                     _init_pwm:	
 12873                           
 12874                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12875                           
 12876                           ;incstack = 0
 12877                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12878  11AB  0022               	movlb	2	; select bank2
 12879  11AC  101D               	bcf	29,0	;volatile
 12880                           
 12881                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12882  11AD  0021               	movlb	1	; select bank1
 12883  11AE  110E               	bcf	14,2	;volatile
 12884                           
 12885                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12886  11AF  108E               	bcf	14,1	;volatile
 12887                           
 12888                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12889  11B0  0026               	movlb	6	; select bank6
 12890  11B1  100D               	bcf	13,0	;volatile
 12891                           
 12892                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12893  11B2  118D               	bcf	13,3	;volatile
 12894                           
 12895                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12896  11B3  120D               	bcf	13,4	;volatile
 12897                           
 12898                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12899  11B4  0021               	movlb	1	; select bank1
 12900  11B5  1310               	bcf	16,6	;volatile
 12901                           
 12902                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12903  11B6  1290               	bcf	16,5	;volatile
 12904                           
 12905                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12906  11B7  1210               	bcf	16,4	;volatile
 12907                           
 12908                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12909  11B8  1190               	bcf	16,3	;volatile
 12910                           
 12911                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12912  11B9  1110               	bcf	16,2	;volatile
 12913                           
 12914                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12915  11BA  300F               	movlw	15
 12916  11BB  0025               	movlb	5	; select bank5
 12917  11BC  0493               	iorwf	19,f	;volatile
 12918                           
 12919                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12920  11BD  300F               	movlw	15
 12921  11BE  049A               	iorwf	26,f	;volatile
 12922                           
 12923                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12924  11BF  300F               	movlw	15
 12925  11C0  0026               	movlb	6	; select bank6
 12926  11C1  0493               	iorwf	19,f	;volatile
 12927                           
 12928                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12929  11C2  300F               	movlw	15
 12930  11C3  049A               	iorwf	26,f	;volatile
 12931                           
 12932                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12933  11C4  300F               	movlw	15
 12934  11C5  049E               	iorwf	30,f	;volatile
 12935                           
 12936                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12937  11C6  300F               	movlw	15
 12938  11C7  002C               	movlb	12	; select bank12
 12939  11C8  0493               	iorwf	19,f	;volatile
 12940                           
 12941                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12942  11C9  300F               	movlw	15
 12943  11CA  0496               	iorwf	22,f	;volatile
 12944                           
 12945                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12946  11CB  300F               	movlw	15
 12947  11CC  0499               	iorwf	25,f	;volatile
 12948                           
 12949                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12950  11CD  300F               	movlw	15
 12951  11CE  049C               	iorwf	28,f	;volatile
 12952                           
 12953                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12954  11CF  300F               	movlw	15
 12955  11D0  049F               	iorwf	31,f	;volatile
 12956                           
 12957                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12958  11D1  0025               	movlb	5	; select bank5
 12959  11D2  019D               	clrf	29	;volatile
 12960                           
 12961                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12962  11D3  019E               	clrf	30	;volatile
 12963                           
 12964                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12965  11D4  019F               	clrf	31	;volatile
 12966                           
 12967                           ;user.c: 148: CCPR1 = 50;
 12968  11D5  3000               	movlw	0
 12969  11D6  0092               	movwf	18	;volatile
 12970  11D7  3032               	movlw	50
 12971  11D8  0091               	movwf	17	;volatile
 12972                           
 12973                           ;user.c: 149: CCPR2 = 100;
 12974  11D9  3000               	movlw	0
 12975  11DA  0099               	movwf	25	;volatile
 12976  11DB  3064               	movlw	100
 12977  11DC  0098               	movwf	24	;volatile
 12978                           
 12979                           ;user.c: 150: CCPR3 = 150;
 12980  11DD  3000               	movlw	0
 12981  11DE  0026               	movlb	6	; select bank6
 12982  11DF  0092               	movwf	18	;volatile
 12983  11E0  3096               	movlw	150
 12984  11E1  0091               	movwf	17	;volatile
 12985                           
 12986                           ;user.c: 151: CCPR4 = 200;
 12987  11E2  3000               	movlw	0
 12988  11E3  0099               	movwf	25	;volatile
 12989  11E4  30C8               	movlw	200
 12990  11E5  0098               	movwf	24	;volatile
 12991                           
 12992                           ;user.c: 152: init_timer2();
 12993  11E6  319D  257C  3191   	fcall	_init_timer2
 12994                           
 12995                           ;user.c: 153: init_timer0();
 12996  11E9  3187  27F8         	fcall	_init_timer0
 12997  11EB  0008               	return
 12998  11EC                     __end_of_init_pwm:	
 12999                           
 13000                           	psect	text42
 13001  1D7C                     __ptext42:	
 13002 ;; *************** function _init_timer2 *****************
 13003 ;; Defined at:
 13004 ;;		line 156 in file "user.c"
 13005 ;; Parameters:    Size  Location     Type
 13006 ;;		None
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;		None
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      void 
 13011 ;; Registers used:
 13012 ;;		wreg, status,2, status,0
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13021 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13022 ;;Total ram usage:        0 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; Hardware stack levels required when called:    2
 13025 ;; This function calls:
 13026 ;;		Nothing
 13027 ;; This function is called by:
 13028 ;;		_init_pwm
 13029 ;; This function uses a non-reentrant model
 13030 ;;
 13031                           
 13032                           
 13033                           ;psect for function _init_timer2
 13034  1D7C                     _init_timer2:	
 13035                           
 13036                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 13037                           
 13038                           ;incstack = 0
 13039                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 13040  1D7C  3087               	movlw	-121
 13041  1D7D  0020               	movlb	0	; select bank0
 13042  1D7E  059C               	andwf	28,f	;volatile
 13043                           
 13044                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 13045  1D7F  30FC               	movlw	-4
 13046  1D80  059C               	andwf	28,f	;volatile
 13047                           
 13048                           ;user.c: 159: PR2 = 0xFF;
 13049  1D81  30FF               	movlw	255
 13050  1D82  009B               	movwf	27	;volatile
 13051                           
 13052                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 13053  1D83  151C               	bsf	28,2	;volatile
 13054  1D84  0008               	return
 13055  1D85                     __end_of_init_timer2:	
 13056                           
 13057                           	psect	text43
 13058  07F8                     __ptext43:	
 13059 ;; *************** function _init_timer0 *****************
 13060 ;; Defined at:
 13061 ;;		line 163 in file "user.c"
 13062 ;; Parameters:    Size  Location     Type
 13063 ;;		None
 13064 ;; Auto vars:     Size  Location     Type
 13065 ;;		None
 13066 ;; Return value:  Size  Location     Type
 13067 ;;                  1    wreg      void 
 13068 ;; Registers used:
 13069 ;;		None
 13070 ;; Tracked objects:
 13071 ;;		On entry : 0/0
 13072 ;;		On exit  : 0/0
 13073 ;;		Unchanged: 0/0
 13074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13079 ;;Total ram usage:        0 bytes
 13080 ;; Hardware stack levels used:    1
 13081 ;; Hardware stack levels required when called:    2
 13082 ;; This function calls:
 13083 ;;		Nothing
 13084 ;; This function is called by:
 13085 ;;		_init_pwm
 13086 ;; This function uses a non-reentrant model
 13087 ;;
 13088                           
 13089                           
 13090                           ;psect for function _init_timer0
 13091  07F8                     _init_timer0:	
 13092                           
 13093                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 13094                           
 13095                           ;incstack = 0
 13096                           ; Regs used in _init_timer0: []
 13097  07F8  0021               	movlb	1	; select bank1
 13098  07F9  1295               	bcf	21,5	;volatile
 13099                           
 13100                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 13101  07FA  1195               	bcf	21,3	;volatile
 13102                           
 13103                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 13104  07FB  1015               	bcf	21,0	;volatile
 13105                           
 13106                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 13107  07FC  1495               	bsf	21,1	;volatile
 13108                           
 13109                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 13110  07FD  1115               	bcf	21,2	;volatile
 13111  07FE  0008               	return
 13112  07FF                     __end_of_init_timer0:	
 13113                           
 13114                           	psect	text44
 13115  1D85                     __ptext44:	
 13116 ;; *************** function _init_adc *****************
 13117 ;; Defined at:
 13118 ;;		line 109 in file "user.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;		None
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      void 
 13125 ;; Registers used:
 13126 ;;		wreg, status,2, status,0
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13136 ;;Total ram usage:        0 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    2
 13139 ;; This function calls:
 13140 ;;		Nothing
 13141 ;; This function is called by:
 13142 ;;		_InitApp
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           
 13147                           ;psect for function _init_adc
 13148  1D85                     _init_adc:	
 13149                           
 13150                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 13151                           
 13152                           ;incstack = 0
 13153                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 13154  1D85  0021               	movlb	1	; select bank1
 13155  1D86  179E               	bsf	30,7	;volatile
 13156                           
 13157                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 13158  1D87  081E               	movf	30,w	;volatile
 13159  1D88  398F               	andlw	-113
 13160  1D89  3860               	iorlw	96
 13161  1D8A  009E               	movwf	30	;volatile
 13162                           
 13163                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 13164  1D8B  30FC               	movlw	-4
 13165  1D8C  059E               	andwf	30,f	;volatile
 13166                           
 13167                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 13168  1D8D  141D               	bsf	29,0	;volatile
 13169  1D8E  0008               	return
 13170  1D8F                     __end_of_init_adc:	
 13171                           
 13172                           	psect	text45
 13173  1D74                     __ptext45:	
 13174 ;; *************** function _ConfigureOscillator *****************
 13175 ;; Defined at:
 13176 ;;		line 18 in file "system.c"
 13177 ;; Parameters:    Size  Location     Type
 13178 ;;		None
 13179 ;; Auto vars:     Size  Location     Type
 13180 ;;		None
 13181 ;; Return value:  Size  Location     Type
 13182 ;;                  1    wreg      void 
 13183 ;; Registers used:
 13184 ;;		wreg, status,2, status,0
 13185 ;; Tracked objects:
 13186 ;;		On entry : 0/0
 13187 ;;		On exit  : 0/0
 13188 ;;		Unchanged: 0/0
 13189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13194 ;;Total ram usage:        0 bytes
 13195 ;; Hardware stack levels used:    1
 13196 ;; Hardware stack levels required when called:    2
 13197 ;; This function calls:
 13198 ;;		Nothing
 13199 ;; This function is called by:
 13200 ;;		_main
 13201 ;; This function uses a non-reentrant model
 13202 ;;
 13203                           
 13204                           
 13205                           ;psect for function _ConfigureOscillator
 13206  1D74                     _ConfigureOscillator:	
 13207                           
 13208                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 13209                           
 13210                           ;incstack = 0
 13211                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 13212  1D74  30FC               	movlw	-4
 13213  1D75  0021               	movlb	1	; select bank1
 13214  1D76  0599               	andwf	25,f	;volatile
 13215  1D77  0008               	return
 13216  1D78                     __end_of_ConfigureOscillator:	
 13217                           
 13218                           	psect	intentry
 13219  0004                     __pintentry:	
 13220 ;; *************** function _isr *****************
 13221 ;; Defined at:
 13222 ;;		line 23 in file "interrupts.c"
 13223 ;; Parameters:    Size  Location     Type
 13224 ;;		None
 13225 ;; Auto vars:     Size  Location     Type
 13226 ;;  tmpSubDelay     2    0[BANK0 ] int 
 13227 ;; Return value:  Size  Location     Type
 13228 ;;                  1    wreg      void 
 13229 ;; Registers used:
 13230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13231 ;; Tracked objects:
 13232 ;;		On entry : 0/0
 13233 ;;		On exit  : 0/0
 13234 ;;		Unchanged: 0/0
 13235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13237 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13238 ;;      Temps:          9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13239 ;;      Totals:         9       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13240 ;;Total ram usage:       11 bytes
 13241 ;; Hardware stack levels used:    1
 13242 ;; Hardware stack levels required when called:    1
 13243 ;; This function calls:
 13244 ;;		i1_set_leds_top
 13245 ;; This function is called by:
 13246 ;;		Interrupt level 1
 13247 ;; This function uses a non-reentrant model
 13248 ;;
 13249                           
 13250  0004                     _isr:	
 13251                           
 13252                           ;incstack = 0
 13253                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13254  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 13255  0005  3180               	pagesel	$
 13256  0006  0020               	movlb	0	; select bank0
 13257  0007  087F               	movf	127,w
 13258  0008  00FC               	movwf	??_isr+8
 13259                           
 13260                           ;interrupts.c: 24: int tmpSubDelay;
 13261                           ;interrupts.c: 25: extern volatile long timer;
 13262                           ;interrupts.c: 26: extern volatile long sub_timer;
 13263                           ;interrupts.c: 27: extern volatile long tap_timer;
 13264                           ;interrupts.c: 29: extern volatile long baseline_delay_time;
 13265                           ;interrupts.c: 31: extern int top_push_state;
 13266                           ;interrupts.c: 32: extern uint8_t feedback_start;
 13267                           ;interrupts.c: 33: extern volatile long mod_timer;
 13268                           ;interrupts.c: 34: extern volatile long delay_time;
 13269                           ;interrupts.c: 35: if (INTCONbits.TMR0IF == 1) {
 13270  0009  1D0B               	btfss	11,2	;volatile
 13271  000A  2912               	goto	i1l97
 13272                           
 13273                           ;interrupts.c: 36: tmpSubDelay = delay_time;
 13274  000B  0021               	movlb	1	; select bank1
 13275  000C  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13276  000D  0020               	movlb	0	; select bank0
 13277  000E  00A1               	movwf	isr@tmpSubDelay+1
 13278  000F  0021               	movlb	1	; select bank1
 13279  0010  084D               	movf	_delay_time^(0+128),w	;volatile
 13280  0011  0020               	movlb	0	; select bank0
 13281  0012  00A0               	movwf	isr@tmpSubDelay
 13282                           
 13283                           ;interrupts.c: 37: timer = timer + 1;
 13284  0013  3001               	movlw	1
 13285  0014  00F4               	movwf	??_isr
 13286  0015  3000               	movlw	0
 13287  0016  00F5               	movwf	??_isr+1
 13288  0017  3000               	movlw	0
 13289  0018  00F6               	movwf	??_isr+2
 13290  0019  3000               	movlw	0
 13291  001A  00F7               	movwf	??_isr+3
 13292  001B  0021               	movlb	1	; select bank1
 13293  001C  0863               	movf	_timer^(0+128),w	;volatile
 13294  001D  07F4               	addwf	??_isr,f
 13295  001E  0864               	movf	(_timer+1)^(0+128),w	;volatile
 13296  001F  3DF5               	addwfc	??_isr+1,f
 13297  0020  0865               	movf	(_timer+2)^(0+128),w	;volatile
 13298  0021  3DF6               	addwfc	??_isr+2,f
 13299  0022  0866               	movf	(_timer+3)^(0+128),w	;volatile
 13300  0023  3DF7               	addwfc	??_isr+3,f
 13301  0024  0877               	movf	??_isr+3,w
 13302  0025  00E6               	movwf	(_timer+3)^(0+128)	;volatile
 13303  0026  0876               	movf	??_isr+2,w
 13304  0027  00E5               	movwf	(_timer+2)^(0+128)	;volatile
 13305  0028  0875               	movf	??_isr+1,w
 13306  0029  00E4               	movwf	(_timer+1)^(0+128)	;volatile
 13307  002A  0874               	movf	??_isr,w
 13308  002B  00E3               	movwf	_timer^(0+128)	;volatile
 13309                           
 13310                           ;interrupts.c: 38: sub_timer = sub_timer + 1;
 13311  002C  3001               	movlw	1
 13312  002D  00F4               	movwf	??_isr
 13313  002E  3000               	movlw	0
 13314  002F  00F5               	movwf	??_isr+1
 13315  0030  3000               	movlw	0
 13316  0031  00F6               	movwf	??_isr+2
 13317  0032  3000               	movlw	0
 13318  0033  00F7               	movwf	??_isr+3
 13319  0034  085B               	movf	_sub_timer^(0+128),w	;volatile
 13320  0035  07F4               	addwf	??_isr,f
 13321  0036  085C               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13322  0037  3DF5               	addwfc	??_isr+1,f
 13323  0038  085D               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13324  0039  3DF6               	addwfc	??_isr+2,f
 13325  003A  085E               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13326  003B  3DF7               	addwfc	??_isr+3,f
 13327  003C  0877               	movf	??_isr+3,w
 13328  003D  00DE               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13329  003E  0876               	movf	??_isr+2,w
 13330  003F  00DD               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13331  0040  0875               	movf	??_isr+1,w
 13332  0041  00DC               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13333  0042  0874               	movf	??_isr,w
 13334  0043  00DB               	movwf	_sub_timer^(0+128)	;volatile
 13335                           
 13336                           ;interrupts.c: 39: tap_timer = tap_timer + 1;
 13337  0044  3001               	movlw	1
 13338  0045  00F4               	movwf	??_isr
 13339  0046  3000               	movlw	0
 13340  0047  00F5               	movwf	??_isr+1
 13341  0048  3000               	movlw	0
 13342  0049  00F6               	movwf	??_isr+2
 13343  004A  3000               	movlw	0
 13344  004B  00F7               	movwf	??_isr+3
 13345  004C  085F               	movf	_tap_timer^(0+128),w	;volatile
 13346  004D  07F4               	addwf	??_isr,f
 13347  004E  0860               	movf	(_tap_timer+1)^(0+128),w	;volatile
 13348  004F  3DF5               	addwfc	??_isr+1,f
 13349  0050  0861               	movf	(_tap_timer+2)^(0+128),w	;volatile
 13350  0051  3DF6               	addwfc	??_isr+2,f
 13351  0052  0862               	movf	(_tap_timer+3)^(0+128),w	;volatile
 13352  0053  3DF7               	addwfc	??_isr+3,f
 13353  0054  0877               	movf	??_isr+3,w
 13354  0055  00E2               	movwf	(_tap_timer+3)^(0+128)	;volatile
 13355  0056  0876               	movf	??_isr+2,w
 13356  0057  00E1               	movwf	(_tap_timer+2)^(0+128)	;volatile
 13357  0058  0875               	movf	??_isr+1,w
 13358  0059  00E0               	movwf	(_tap_timer+1)^(0+128)	;volatile
 13359  005A  0874               	movf	??_isr,w
 13360  005B  00DF               	movwf	_tap_timer^(0+128)	;volatile
 13361                           
 13362                           ;interrupts.c: 40: mod_timer = mod_timer + 1;
 13363  005C  3001               	movlw	1
 13364  005D  00F4               	movwf	??_isr
 13365  005E  3000               	movlw	0
 13366  005F  00F5               	movwf	??_isr+1
 13367  0060  3000               	movlw	0
 13368  0061  00F6               	movwf	??_isr+2
 13369  0062  3000               	movlw	0
 13370  0063  00F7               	movwf	??_isr+3
 13371  0064  0022               	movlb	2	; select bank2
 13372  0065  0824               	movf	_mod_timer^(0+256),w	;volatile
 13373  0066  07F4               	addwf	??_isr,f
 13374  0067  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 13375  0068  3DF5               	addwfc	??_isr+1,f
 13376  0069  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 13377  006A  3DF6               	addwfc	??_isr+2,f
 13378  006B  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13379  006C  3DF7               	addwfc	??_isr+3,f
 13380  006D  0877               	movf	??_isr+3,w
 13381  006E  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13382  006F  0876               	movf	??_isr+2,w
 13383  0070  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13384  0071  0875               	movf	??_isr+1,w
 13385  0072  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13386  0073  0874               	movf	??_isr,w
 13387  0074  00A4               	movwf	_mod_timer^(0+256)	;volatile
 13388                           
 13389                           ;interrupts.c: 41: test_timer++;
 13390  0075  3001               	movlw	1
 13391  0076  0023               	movlb	3	; select bank3
 13392  0077  07E4               	addwf	_test_timer^(0+384),f	;volatile
 13393  0078  3000               	movlw	0
 13394  0079  3DE5               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 13395  007A  3000               	movlw	0
 13396  007B  3DE6               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 13397  007C  3000               	movlw	0
 13398  007D  3DE7               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 13399                           
 13400                           ;interrupts.c: 42: if (feedback_start == 1) {
 13401  007E  0021               	movlb	1	; select bank1
 13402  007F  0369               	decf	_feedback_start^(0+128),w
 13403  0080  1D03               	btfss	3,2
 13404  0081  2899               	goto	i1l4308
 13405                           
 13406                           ;interrupts.c: 43: feedback_timer++;
 13407  0082  3001               	movlw	1
 13408  0083  0022               	movlb	2	; select bank2
 13409  0084  07B8               	addwf	_feedback_timer^(0+256),f	;volatile
 13410  0085  3000               	movlw	0
 13411  0086  3DB9               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 13412                           
 13413                           ;interrupts.c: 44: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13414  0087  0839               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 13415  0088  0021               	movlb	1	; select bank1
 13416  0089  0256               	subwf	(_long_press_limit+1)^(0+128),w
 13417  008A  1D03               	skipz
 13418  008B  2890               	goto	u424_25
 13419  008C  0022               	movlb	2	; select bank2
 13420  008D  0838               	movf	_feedback_timer^(0+256),w	;volatile
 13421  008E  0021               	movlb	1	; select bank1
 13422  008F  0255               	subwf	_long_press_limit^(0+128),w
 13423  0090                     u424_25:	
 13424  0090  1803               	skipnc
 13425  0091  2899               	goto	i1l4308
 13426  0092  0856               	movf	(_long_press_limit+1)^(0+128),w
 13427  0093  0022               	movlb	2	; select bank2
 13428  0094  00B9               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 13429  0095  0021               	movlb	1	; select bank1
 13430  0096  0855               	movf	_long_press_limit^(0+128),w
 13431  0097  0022               	movlb	2	; select bank2
 13432  0098  00B8               	movwf	_feedback_timer^(0+256)	;volatile
 13433  0099                     i1l4308:	
 13434                           
 13435                           ;interrupts.c: 45: }
 13436                           ;interrupts.c: 46: if (longTap_start == 1) {
 13437  0099  0022               	movlb	2	; select bank2
 13438  009A  0353               	decf	_longTap_start^(0+256),w
 13439  009B  1D03               	btfss	3,2
 13440  009C  28B3               	goto	i1l4314
 13441                           
 13442                           ;interrupts.c: 47: longTap_timer++;
 13443  009D  3001               	movlw	1
 13444  009E  07C4               	addwf	_longTap_timer^(0+256),f	;volatile
 13445  009F  3000               	movlw	0
 13446  00A0  3DC5               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 13447                           
 13448                           ;interrupts.c: 48: if (longTap_timer > long_press_limit) {
 13449  00A1  0845               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 13450  00A2  0021               	movlb	1	; select bank1
 13451  00A3  0256               	subwf	(_long_press_limit+1)^(0+128),w
 13452  00A4  1D03               	skipz
 13453  00A5  28AA               	goto	u426_25
 13454  00A6  0022               	movlb	2	; select bank2
 13455  00A7  0844               	movf	_longTap_timer^(0+256),w	;volatile
 13456  00A8  0021               	movlb	1	; select bank1
 13457  00A9  0255               	subwf	_long_press_limit^(0+128),w
 13458  00AA                     u426_25:	
 13459  00AA  1803               	skipnc
 13460  00AB  28B3               	goto	i1l4314
 13461                           
 13462                           ;interrupts.c: 49: longTap_timer = long_press_limit;
 13463  00AC  0856               	movf	(_long_press_limit+1)^(0+128),w
 13464  00AD  0022               	movlb	2	; select bank2
 13465  00AE  00C5               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 13466  00AF  0021               	movlb	1	; select bank1
 13467  00B0  0855               	movf	_long_press_limit^(0+128),w
 13468  00B1  0022               	movlb	2	; select bank2
 13469  00B2  00C4               	movwf	_longTap_timer^(0+256)	;volatile
 13470  00B3                     i1l4314:	
 13471                           
 13472                           ;interrupts.c: 50: }
 13473                           ;interrupts.c: 51: }
 13474                           ;interrupts.c: 52: INTCONbits.TMR0IF = 0;
 13475  00B3  110B               	bcf	11,2	;volatile
 13476                           
 13477                           ;interrupts.c: 54: if (adjust_sub_delay == 1) {
 13478  00B4  0022               	movlb	2	; select bank2
 13479  00B5  032A               	decf	_adjust_sub_delay^(0+256),w
 13480  00B6  042B               	iorwf	(_adjust_sub_delay+1)^(0+256),w
 13481  00B7  1D03               	btfss	3,2
 13482  00B8  2912               	goto	i1l97
 13483                           
 13484                           ;interrupts.c: 55: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 13485  00B9  0021               	movlb	1	; select bank1
 13486  00BA  085E               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13487  00BB  3A80               	xorlw	128
 13488  00BC  00F4               	movwf	??_isr
 13489  00BD  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13490  00BE  3A80               	xorlw	128
 13491  00BF  0274               	subwf	??_isr,w
 13492  00C0  1D03               	skipz
 13493  00C1  28CC               	goto	u428_23
 13494  00C2  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13495  00C3  025D               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13496  00C4  1D03               	skipz
 13497  00C5  28CC               	goto	u428_23
 13498  00C6  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13499  00C7  025C               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13500  00C8  1D03               	skipz
 13501  00C9  28CC               	goto	u428_23
 13502  00CA  084D               	movf	_delay_time^(0+128),w	;volatile
 13503  00CB  025B               	subwf	_sub_timer^(0+128),w	;volatile
 13504  00CC                     u428_23:	
 13505  00CC  1C03               	skipc
 13506  00CD  2912               	goto	i1l97
 13507  00CE  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13508  00CF  00F4               	movwf	??_isr
 13509  00D0  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13510  00D1  00F5               	movwf	??_isr+1
 13511  00D2  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13512  00D3  00F6               	movwf	??_isr+2
 13513  00D4  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13514  00D5  00F7               	movwf	??_isr+3
 13515  00D6  0963               	comf	_timer^(0+128),w	;volatile
 13516  00D7  00F8               	movwf	??_isr+4
 13517  00D8  0964               	comf	(_timer+1)^(0+128),w	;volatile
 13518  00D9  00F9               	movwf	??_isr+5
 13519  00DA  0965               	comf	(_timer+2)^(0+128),w	;volatile
 13520  00DB  00FA               	movwf	??_isr+6
 13521  00DC  0966               	comf	(_timer+3)^(0+128),w	;volatile
 13522  00DD  00FB               	movwf	??_isr+7
 13523  00DE  0AF8               	incf	??_isr+4,f
 13524  00DF  1903               	skipnz
 13525  00E0  0AF9               	incf	??_isr+5,f
 13526  00E1  1903               	skipnz
 13527  00E2  0AFA               	incf	??_isr+6,f
 13528  00E3  1903               	skipnz
 13529  00E4  0AFB               	incf	??_isr+7,f
 13530  00E5  0878               	movf	??_isr+4,w
 13531  00E6  07F4               	addwf	??_isr,f
 13532  00E7  0879               	movf	??_isr+5,w
 13533  00E8  3DF5               	addwfc	??_isr+1,f
 13534  00E9  087A               	movf	??_isr+6,w
 13535  00EA  3DF6               	addwfc	??_isr+2,f
 13536  00EB  087B               	movf	??_isr+7,w
 13537  00EC  3DF7               	addwfc	??_isr+3,f
 13538  00ED  1BF7               	btfsc	??_isr+3,7
 13539  00EE  28FC               	goto	i1l4322
 13540  00EF  0877               	movf	??_isr+3,w
 13541  00F0  1D03               	btfss	3,2
 13542  00F1  2912               	goto	i1l97
 13543  00F2  0876               	movf	??_isr+2,w
 13544  00F3  1D03               	btfss	3,2
 13545  00F4  2912               	goto	i1l97
 13546  00F5  0875               	movf	??_isr+1,w
 13547  00F6  1D03               	btfss	3,2
 13548  00F7  2912               	goto	i1l97
 13549  00F8  3004               	movlw	4
 13550  00F9  0274               	subwf	??_isr,w
 13551  00FA  1803               	btfsc	3,0
 13552  00FB  2912               	goto	i1l97
 13553  00FC                     i1l4322:	
 13554                           
 13555                           ;interrupts.c: 56: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 13556  00FC  0963               	comf	_timer^(0+128),w	;volatile
 13557  00FD  00F4               	movwf	??_isr
 13558  00FE  0964               	comf	(_timer+1)^(0+128),w	;volatile
 13559  00FF  00F5               	movwf	??_isr+1
 13560  0100  0AF4               	incf	??_isr,f
 13561  0101  1903               	skipnz
 13562  0102  0AF5               	incf	??_isr+1,f
 13563  0103  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13564  0104  0774               	addwf	??_isr,w
 13565  0105  00F6               	movwf	??_isr+2
 13566  0106  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13567  0107  3D75               	addwfc	??_isr+1,w
 13568  0108  00F7               	movwf	??_isr+3
 13569  0109  085B               	movf	_sub_timer^(0+128),w	;volatile
 13570  010A  0776               	addwf	??_isr+2,w
 13571  010B  0020               	movlb	0	; select bank0
 13572  010C  00A0               	movwf	isr@tmpSubDelay
 13573  010D  0021               	movlb	1	; select bank1
 13574  010E  085C               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13575  010F  3D77               	addwfc	??_isr+3,w
 13576  0110  0020               	movlb	0	; select bank0
 13577  0111  00A1               	movwf	isr@tmpSubDelay+1
 13578  0112                     i1l97:	
 13579                           
 13580                           ;interrupts.c: 57: }
 13581                           ;interrupts.c: 58: }
 13582                           ;interrupts.c: 59: }
 13583                           ;interrupts.c: 72: if (longTap_state < 1 && doubleTap_state < 1) {
 13584  0112  0020               	movlb	0	; select bank0
 13585  0113  086A               	movf	_longTap_state,w	;volatile
 13586  0114  1D03               	btfss	3,2
 13587  0115  2963               	goto	i1l4344
 13588  0116  086B               	movf	_doubleTap_state,w	;volatile
 13589  0117  1D03               	btfss	3,2
 13590  0118  2963               	goto	i1l4344
 13591                           
 13592                           ;interrupts.c: 75: if (timer >= baseline_delay_time) {
 13593  0119  0021               	movlb	1	; select bank1
 13594  011A  0866               	movf	(_timer+3)^(0+128),w	;volatile
 13595  011B  3A80               	xorlw	128
 13596  011C  00F4               	movwf	??_isr
 13597  011D  084C               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13598  011E  3A80               	xorlw	128
 13599  011F  0274               	subwf	??_isr,w
 13600  0120  1D03               	skipz
 13601  0121  292C               	goto	u432_23
 13602  0122  084B               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13603  0123  0265               	subwf	(_timer+2)^(0+128),w	;volatile
 13604  0124  1D03               	skipz
 13605  0125  292C               	goto	u432_23
 13606  0126  084A               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13607  0127  0264               	subwf	(_timer+1)^(0+128),w	;volatile
 13608  0128  1D03               	skipz
 13609  0129  292C               	goto	u432_23
 13610  012A  0849               	movf	_baseline_delay_time^(0+128),w	;volatile
 13611  012B  0263               	subwf	_timer^(0+128),w	;volatile
 13612  012C                     u432_23:	
 13613  012C  1C03               	skipc
 13614  012D  2951               	goto	i1l4340
 13615                           
 13616                           ;interrupts.c: 78: LATBbits.LATB4 = 1;
 13617  012E  0022               	movlb	2	; select bank2
 13618  012F  160D               	bsf	13,4	;volatile
 13619                           
 13620                           ;interrupts.c: 80: timer = 0;
 13621  0130  3000               	movlw	0
 13622  0131  0021               	movlb	1	; select bank1
 13623  0132  00E6               	movwf	(_timer+3)^(0+128)	;volatile
 13624  0133  3000               	movlw	0
 13625  0134  00E5               	movwf	(_timer+2)^(0+128)	;volatile
 13626  0135  3000               	movlw	0
 13627  0136  00E4               	movwf	(_timer+1)^(0+128)	;volatile
 13628  0137  3000               	movlw	0
 13629  0138  00E3               	movwf	_timer^(0+128)	;volatile
 13630                           
 13631                           ;interrupts.c: 81: if (reset_sub_delay == 1) {
 13632  0139  0022               	movlb	2	; select bank2
 13633  013A  034A               	decf	_reset_sub_delay^(0+256),w
 13634  013B  044B               	iorwf	(_reset_sub_delay+1)^(0+256),w
 13635  013C  1D03               	btfss	3,2
 13636  013D  2951               	goto	i1l4340
 13637                           
 13638                           ;interrupts.c: 82: CCPR1 = delay_counter;
 13639  013E  0835               	movf	(_delay_counter+1)^(0+256),w	;volatile
 13640  013F  0025               	movlb	5	; select bank5
 13641  0140  0092               	movwf	18	;volatile
 13642  0141  0022               	movlb	2	; select bank2
 13643  0142  0834               	movf	_delay_counter^(0+256),w	;volatile
 13644  0143  0025               	movlb	5	; select bank5
 13645  0144  0091               	movwf	17	;volatile
 13646                           
 13647                           ;interrupts.c: 83: reset_sub_delay = 0;
 13648  0145  0022               	movlb	2	; select bank2
 13649  0146  01CA               	clrf	_reset_sub_delay^(0+256)
 13650  0147  01CB               	clrf	(_reset_sub_delay+1)^(0+256)
 13651                           
 13652                           ;interrupts.c: 84: sub_timer = delay_time;
 13653  0148  0021               	movlb	1	; select bank1
 13654  0149  0850               	movf	(_delay_time+3)^(0+128),w	;volatile
 13655  014A  00DE               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13656  014B  084F               	movf	(_delay_time+2)^(0+128),w	;volatile
 13657  014C  00DD               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13658  014D  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13659  014E  00DC               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13660  014F  084D               	movf	_delay_time^(0+128),w	;volatile
 13661  0150  00DB               	movwf	_sub_timer^(0+128)	;volatile
 13662  0151                     i1l4340:	
 13663                           
 13664                           ;interrupts.c: 85: }
 13665                           ;interrupts.c: 86: }
 13666                           ;interrupts.c: 88: if (timer >= 30) {
 13667  0151  0021               	movlb	1	; select bank1
 13668  0152  1BE6               	btfsc	(_timer+3)^(0+128),7	;volatile
 13669  0153  2963               	goto	i1l4344
 13670  0154  0866               	movf	(_timer+3)^(0+128),w	;volatile
 13671  0155  1D03               	btfss	3,2
 13672  0156  2961               	goto	i1l4342
 13673  0157  0865               	movf	(_timer+2)^(0+128),w	;volatile
 13674  0158  1D03               	btfss	3,2
 13675  0159  2961               	goto	i1l4342
 13676  015A  0864               	movf	(_timer+1)^(0+128),w	;volatile
 13677  015B  1D03               	btfss	3,2
 13678  015C  2961               	goto	i1l4342
 13679  015D  301E               	movlw	30
 13680  015E  0263               	subwf	_timer^(0+128),w	;volatile
 13681  015F  1C03               	btfss	3,0
 13682  0160  2963               	goto	i1l4344
 13683  0161                     i1l4342:	
 13684                           
 13685                           ;interrupts.c: 90: LATBbits.LATB4 = 0;
 13686  0161  0022               	movlb	2	; select bank2
 13687  0162  120D               	bcf	13,4	;volatile
 13688  0163                     i1l4344:	
 13689                           
 13690                           ;interrupts.c: 92: }
 13691                           ;interrupts.c: 93: }
 13692                           ;interrupts.c: 96: if (sub_timer >= tmpSubDelay) {
 13693  0163  0020               	movlb	0	; select bank0
 13694  0164  0820               	movf	isr@tmpSubDelay,w
 13695  0165  00F4               	movwf	??_isr
 13696  0166  0821               	movf	isr@tmpSubDelay+1,w
 13697  0167  00F5               	movwf	??_isr+1
 13698  0168  3000               	movlw	0
 13699  0169  1BF5               	btfsc	??_isr+1,7
 13700  016A  30FF               	movlw	255
 13701  016B  00F6               	movwf	??_isr+2
 13702  016C  00F7               	movwf	??_isr+3
 13703  016D  0021               	movlb	1	; select bank1
 13704  016E  085E               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13705  016F  3A80               	xorlw	128
 13706  0170  00F8               	movwf	??_isr+4
 13707  0171  0877               	movf	??_isr+3,w
 13708  0172  3A80               	xorlw	128
 13709  0173  0278               	subwf	??_isr+4,w
 13710  0174  1D03               	skipz
 13711  0175  2980               	goto	u435_23
 13712  0176  0876               	movf	??_isr+2,w
 13713  0177  025D               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13714  0178  1D03               	skipz
 13715  0179  2980               	goto	u435_23
 13716  017A  0875               	movf	??_isr+1,w
 13717  017B  025C               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13718  017C  1D03               	skipz
 13719  017D  2980               	goto	u435_23
 13720  017E  0874               	movf	??_isr,w
 13721  017F  025B               	subwf	_sub_timer^(0+128),w	;volatile
 13722  0180                     u435_23:	
 13723  0180  1C03               	skipc
 13724  0181  29A1               	goto	i1l4354
 13725                           
 13726                           ;interrupts.c: 97: if (suspend_blink == 0) {
 13727  0182  086A               	movf	_suspend_blink^(0+128),w	;volatile
 13728  0183  1D03               	btfss	3,2
 13729  0184  2990               	goto	i1l4350
 13730                           
 13731                           ;interrupts.c: 98: set_leds_top(top_push_state, 1);
 13732  0185  0858               	movf	(_top_push_state+1)^(0+128),w
 13733  0186  00F1               	movwf	i1set_leds_top@x+1
 13734  0187  0857               	movf	_top_push_state^(0+128),w
 13735  0188  00F0               	movwf	i1set_leds_top@x
 13736  0189  3001               	movlw	1
 13737  018A  00F2               	movwf	i1set_leds_top@ledState
 13738  018B  3000               	movlw	0
 13739  018C  00F3               	movwf	i1set_leds_top@ledState+1
 13740  018D  3192  22B9  3180   	fcall	i1_set_leds_top
 13741  0190                     i1l4350:	
 13742                           
 13743                           ;interrupts.c: 99: }
 13744                           ;interrupts.c: 100: tmpSubDelay = delay_time;
 13745  0190  0021               	movlb	1	; select bank1
 13746  0191  084E               	movf	(_delay_time+1)^(0+128),w	;volatile
 13747  0192  0020               	movlb	0	; select bank0
 13748  0193  00A1               	movwf	isr@tmpSubDelay+1
 13749  0194  0021               	movlb	1	; select bank1
 13750  0195  084D               	movf	_delay_time^(0+128),w	;volatile
 13751  0196  0020               	movlb	0	; select bank0
 13752  0197  00A0               	movwf	isr@tmpSubDelay
 13753                           
 13754                           ;interrupts.c: 101: sub_timer = 0;
 13755  0198  3000               	movlw	0
 13756  0199  0021               	movlb	1	; select bank1
 13757  019A  00DE               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13758  019B  3000               	movlw	0
 13759  019C  00DD               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13760  019D  3000               	movlw	0
 13761  019E  00DC               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13762  019F  3000               	movlw	0
 13763  01A0  00DB               	movwf	_sub_timer^(0+128)	;volatile
 13764  01A1                     i1l4354:	
 13765                           
 13766                           ;interrupts.c: 102: }
 13767                           ;interrupts.c: 104: if (sub_timer >= 20) {
 13768  01A1  1BDE               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 13769  01A2  29BD               	goto	i1l4360
 13770  01A3  085E               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13771  01A4  1D03               	btfss	3,2
 13772  01A5  29B0               	goto	i1l4356
 13773  01A6  085D               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13774  01A7  1D03               	btfss	3,2
 13775  01A8  29B0               	goto	i1l4356
 13776  01A9  085C               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13777  01AA  1D03               	btfss	3,2
 13778  01AB  29B0               	goto	i1l4356
 13779  01AC  3014               	movlw	20
 13780  01AD  025B               	subwf	_sub_timer^(0+128),w	;volatile
 13781  01AE  1C03               	btfss	3,0
 13782  01AF  29BD               	goto	i1l4360
 13783  01B0                     i1l4356:	
 13784                           
 13785                           ;interrupts.c: 105: if (suspend_blink == 0) {
 13786  01B0  086A               	movf	_suspend_blink^(0+128),w	;volatile
 13787  01B1  1D03               	btfss	3,2
 13788  01B2  29BD               	goto	i1l4360
 13789                           
 13790                           ;interrupts.c: 106: set_leds_top(top_push_state, 0);
 13791  01B3  0858               	movf	(_top_push_state+1)^(0+128),w
 13792  01B4  00F1               	movwf	i1set_leds_top@x+1
 13793  01B5  0857               	movf	_top_push_state^(0+128),w
 13794  01B6  00F0               	movwf	i1set_leds_top@x
 13795  01B7  3000               	movlw	0
 13796  01B8  00F2               	movwf	i1set_leds_top@ledState
 13797  01B9  00F3               	movwf	i1set_leds_top@ledState+1
 13798  01BA  3192  22B9  3180   	fcall	i1_set_leds_top
 13799  01BD                     i1l4360:	
 13800                           
 13801                           ;interrupts.c: 107: }
 13802                           ;interrupts.c: 108: }
 13803                           ;interrupts.c: 111: if (preset_programmning_on == 1) {
 13804  01BD  0022               	movlb	2	; select bank2
 13805  01BE  0357               	decf	_preset_programmning_on^(0+256),w
 13806  01BF  1D03               	btfss	3,2
 13807  01C0  29E6               	goto	i1l4372
 13808                           
 13809                           ;interrupts.c: 112: preset_blink++;
 13810  01C1  3001               	movlw	1
 13811  01C2  00F4               	movwf	??_isr
 13812  01C3  0874               	movf	??_isr,w
 13813  01C4  07D6               	addwf	_preset_blink^(0+256),f
 13814                           
 13815                           ;interrupts.c: 114: if (preset_blink >= blink_delay) {
 13816  01C5  085B               	movf	(_blink_delay+1)^(0+256),w
 13817  01C6  3A80               	xorlw	128
 13818  01C7  3C80               	sublw	128
 13819  01C8  1D03               	skipz
 13820  01C9  29CC               	goto	u440_25
 13821  01CA  085A               	movf	_blink_delay^(0+256),w
 13822  01CB  0256               	subwf	_preset_blink^(0+256),w
 13823  01CC                     u440_25:	
 13824  01CC  1C03               	skipc
 13825  01CD  29E4               	goto	i1l113
 13826                           
 13827                           ;interrupts.c: 115: LATBbits.LATB1 = 1;
 13828  01CE  0022               	movlb	2	; select bank2
 13829  01CF  148D               	bsf	13,1	;volatile
 13830                           
 13831                           ;interrupts.c: 116: if (preset_blink > blink_delay*2) {
 13832  01D0  085B               	movf	(_blink_delay+1)^(0+256),w
 13833  01D1  00F5               	movwf	??_isr+1
 13834  01D2  085A               	movf	_blink_delay^(0+256),w
 13835  01D3  00F4               	movwf	??_isr
 13836  01D4  35F4               	lslf	??_isr,f
 13837  01D5  0DF5               	rlf	??_isr+1,f
 13838  01D6  0875               	movf	??_isr+1,w
 13839  01D7  3A80               	xorlw	128
 13840  01D8  00F6               	movwf	??_isr+2
 13841  01D9  3080               	movlw	128
 13842  01DA  0276               	subwf	??_isr+2,w
 13843  01DB  1D03               	skipz
 13844  01DC  29DF               	goto	u441_25
 13845  01DD  0856               	movf	_preset_blink^(0+256),w
 13846  01DE  0274               	subwf	??_isr,w
 13847  01DF                     u441_25:	
 13848  01DF  1803               	skipnc
 13849  01E0  29EB               	goto	i1l118
 13850                           
 13851                           ;interrupts.c: 117: preset_blink = 0;
 13852  01E1  0022               	movlb	2	; select bank2
 13853  01E2  01D6               	clrf	_preset_blink^(0+256)
 13854                           
 13855                           ;interrupts.c: 118: }
 13856                           ;interrupts.c: 120: } else {
 13857  01E3  29EB               	goto	i1l118
 13858  01E4                     i1l113:	
 13859                           
 13860                           ;interrupts.c: 121: LATBbits.LATB1 = 0;
 13861  01E4  0022               	movlb	2	; select bank2
 13862  01E5  29EA               	goto	i1l4376
 13863  01E6                     i1l4372:	
 13864                           ;interrupts.c: 122: }
 13865                           ;interrupts.c: 124: } else {
 13866                           
 13867                           
 13868                           ;interrupts.c: 125: if (preset_blink > 0) {
 13869  01E6  0856               	movf	_preset_blink^(0+256),w
 13870  01E7  1903               	btfsc	3,2
 13871  01E8  29EB               	goto	i1l118
 13872                           
 13873                           ;interrupts.c: 126: preset_blink = 0;
 13874  01E9  01D6               	clrf	_preset_blink^(0+256)
 13875  01EA                     i1l4376:	
 13876                           
 13877                           ;interrupts.c: 127: LATBbits.LATB1 = 0;
 13878  01EA  108D               	bcf	13,1	;volatile
 13879  01EB                     i1l118:	
 13880  01EB  087C               	movf	??_isr+8,w
 13881  01EC  0020               	movlb	0	; select bank0
 13882  01ED  00FF               	movwf	127
 13883  01EE  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13884  01EF  0009               	retfie
 13885  01F0                     __end_of_isr:	
 13886                           
 13887                           	psect	text47
 13888  12B9                     __ptext47:	
 13889 ;; *************** function i1_set_leds_top *****************
 13890 ;; Defined at:
 13891 ;;		line 16 in file "LEDs.c"
 13892 ;; Parameters:    Size  Location     Type
 13893 ;;  x               2    0[COMMON] int 
 13894 ;;  ledState        2    2[COMMON] int 
 13895 ;; Auto vars:     Size  Location     Type
 13896 ;;		None
 13897 ;; Return value:  Size  Location     Type
 13898 ;;                  1    wreg      void 
 13899 ;; Registers used:
 13900 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13901 ;; Tracked objects:
 13902 ;;		On entry : 0/0
 13903 ;;		On exit  : 0/0
 13904 ;;		Unchanged: 0/0
 13905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13906 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13907 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13909 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13910 ;;Total ram usage:        4 bytes
 13911 ;; Hardware stack levels used:    1
 13912 ;; This function calls:
 13913 ;;		Nothing
 13914 ;; This function is called by:
 13915 ;;		_isr
 13916 ;; This function uses a non-reentrant model
 13917 ;;
 13918                           
 13919                           
 13920                           ;psect for function i1_set_leds_top
 13921  12B9                     i1_set_leds_top:	
 13922                           
 13923                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13924                           
 13925                           ;incstack = 0
 13926                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13927  12B9  0027               	movlb	7	; select bank7
 13928  12BA  100C               	bcf	12,0	;volatile
 13929                           
 13930                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13931  12BB  108C               	bcf	12,1	;volatile
 13932                           
 13933                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13934  12BC  110C               	bcf	12,2	;volatile
 13935                           
 13936                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13937  12BD  118C               	bcf	12,3	;volatile
 13938                           
 13939                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13940  12BE  120C               	bcf	12,4	;volatile
 13941                           
 13942                           ;LEDs.c: 22: switch (x) {
 13943  12BF  2AE4               	goto	i1l4292
 13944  12C0                     i1l4280:	
 13945                           ;LEDs.c: 23: case 1:
 13946                           
 13947                           
 13948                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13949  12C0  0C72               	rrf	i1set_leds_top@ledState,w
 13950  12C1  1C03               	skipc
 13951  12C2  100C               	bcf	12,0	;volatile
 13952  12C3  1803               	skipnc
 13953  12C4  140C               	bsf	12,0	;volatile
 13954                           
 13955                           ;LEDs.c: 25: break;
 13956  12C5  0008               	return
 13957  12C6                     i1l4282:	
 13958                           ;LEDs.c: 26: case 2:
 13959                           
 13960                           
 13961                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13962  12C6  0C72               	rrf	i1set_leds_top@ledState,w
 13963  12C7  1C03               	skipc
 13964  12C8  108C               	bcf	12,1	;volatile
 13965  12C9  1803               	skipnc
 13966  12CA  148C               	bsf	12,1	;volatile
 13967                           
 13968                           ;LEDs.c: 28: break;
 13969  12CB  0008               	return
 13970  12CC                     i1l4284:	
 13971                           ;LEDs.c: 29: case 3:
 13972                           
 13973                           
 13974                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13975  12CC  0C72               	rrf	i1set_leds_top@ledState,w
 13976  12CD  1C03               	skipc
 13977  12CE  110C               	bcf	12,2	;volatile
 13978  12CF  1803               	skipnc
 13979  12D0  150C               	bsf	12,2	;volatile
 13980                           
 13981                           ;LEDs.c: 31: break;
 13982  12D1  0008               	return
 13983  12D2                     i1l4286:	
 13984                           ;LEDs.c: 32: case 4:
 13985                           
 13986                           
 13987                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13988  12D2  0C72               	rrf	i1set_leds_top@ledState,w
 13989  12D3  1C03               	skipc
 13990  12D4  118C               	bcf	12,3	;volatile
 13991  12D5  1803               	skipnc
 13992  12D6  158C               	bsf	12,3	;volatile
 13993                           
 13994                           ;LEDs.c: 34: break;
 13995  12D7  0008               	return
 13996  12D8                     i1l4288:	
 13997                           ;LEDs.c: 35: case 5:
 13998                           
 13999                           
 14000                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 14001  12D8  0C72               	rrf	i1set_leds_top@ledState,w
 14002  12D9  1C03               	skipc
 14003  12DA  120C               	bcf	12,4	;volatile
 14004  12DB  1803               	skipnc
 14005  12DC  160C               	bsf	12,4	;volatile
 14006                           
 14007                           ;LEDs.c: 39: break;
 14008                           
 14009                           ;LEDs.c: 38: case 6:
 14010                           
 14011                           ;LEDs.c: 37: break;
 14012  12DD  0008               	return
 14013  12DE                     i1l702:	
 14014                           ;LEDs.c: 40: case 100:
 14015                           
 14016                           
 14017                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 14018  12DE  140C               	bsf	12,0	;volatile
 14019                           
 14020                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 14021  12DF  148C               	bsf	12,1	;volatile
 14022                           
 14023                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 14024  12E0  150C               	bsf	12,2	;volatile
 14025                           
 14026                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 14027  12E1  158C               	bsf	12,3	;volatile
 14028                           
 14029                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 14030  12E2  160C               	bsf	12,4	;volatile
 14031                           
 14032                           ;LEDs.c: 47: }
 14033                           
 14034                           ;LEDs.c: 46: break;
 14035  12E3  0008               	return
 14036  12E4                     i1l4292:	
 14037                           
 14038                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14039                           ; Switch size 1, requested type "space"
 14040                           ; Number of cases is 1, Range of values is 0 to 0
 14041                           ; switch strategies available:
 14042                           ; Name         Instructions Cycles
 14043                           ; simple_byte            4     3 (average)
 14044                           ; direct_byte            8     6 (fixed)
 14045                           ; jumptable            260     6 (fixed)
 14046                           ;	Chosen strategy is simple_byte
 14047  12E4  0871               	movf	i1set_leds_top@x+1,w
 14048  12E5  3A00               	xorlw	0	; case 0
 14049  12E6  1903               	skipnz
 14050  12E7  2AE9               	goto	i1l6256
 14051  12E8  2B00               	goto	i1l703
 14052  12E9                     i1l6256:	
 14053                           
 14054                           ; Switch size 1, requested type "space"
 14055                           ; Number of cases is 7, Range of values is 1 to 100
 14056                           ; switch strategies available:
 14057                           ; Name         Instructions Cycles
 14058                           ; simple_byte           22    12 (average)
 14059                           ; direct_byte          209     9 (fixed)
 14060                           ; jumptable            263     9 (fixed)
 14061                           ;	Chosen strategy is simple_byte
 14062  12E9  0870               	movf	i1set_leds_top@x,w
 14063  12EA  3A01               	xorlw	1	; case 1
 14064  12EB  1903               	skipnz
 14065  12EC  2AC0               	goto	i1l4280
 14066  12ED  3A03               	xorlw	3	; case 2
 14067  12EE  1903               	skipnz
 14068  12EF  2AC6               	goto	i1l4282
 14069  12F0  3A01               	xorlw	1	; case 3
 14070  12F1  1903               	skipnz
 14071  12F2  2ACC               	goto	i1l4284
 14072  12F3  3A07               	xorlw	7	; case 4
 14073  12F4  1903               	skipnz
 14074  12F5  2AD2               	goto	i1l4286
 14075  12F6  3A01               	xorlw	1	; case 5
 14076  12F7  1903               	skipnz
 14077  12F8  2AD8               	goto	i1l4288
 14078  12F9  3A03               	xorlw	3	; case 6
 14079  12FA  1903               	skipnz
 14080  12FB  2B00               	goto	i1l703
 14081  12FC  3A62               	xorlw	98	; case 100
 14082  12FD  1903               	skipnz
 14083  12FE  2ADE               	goto	i1l702
 14084  12FF  2B00               	goto	i1l703
 14085  1300                     i1l703:	
 14086  1300  0008               	return
 14087  1301                     __end_ofi1_set_leds_top:	
 14088  007E                     btemp	set	126	;btemp
 14089  007E                     int$flags	set	126
 14090  007E                     wtemp	set	126
 14091  007E                     wtemp0	set	126
 14092  0080                     wtemp1	set	128
 14093  0082                     wtemp2	set	130
 14094  0084                     wtemp3	set	132
 14095  0086                     wtemp4	set	134
 14096  0088                     wtemp5	set	136
 14097  007F                     wtemp6	set	127
 14098  007E                     ttemp	set	126
 14099  007E                     ttemp0	set	126
 14100  0081                     ttemp1	set	129
 14101  0084                     ttemp2	set	132
 14102  0087                     ttemp3	set	135
 14103  007F                     ttemp4	set	127
 14104  007E                     ltemp	set	126
 14105  007E                     ltemp0	set	126
 14106  0082                     ltemp1	set	130
 14107  0086                     ltemp2	set	134
 14108  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1092
    BSS         212
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     73      76
    BANK1            80     41      76
    BANK2            80      0      79
    BANK3            80      8      80
    BANK4            80      0      62
    BANK5            80      0      62
    BANK6            80      0      62
    BANK7            80      0      62
    BANK8            80      0      80
    BANK9            80      0      80
    BANK10           78      0      64
    BANK11            0      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->_map
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                23    23      0   64218
                                             26 BANK1     15    15      0
                                              0 BANK3      8     8      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              2 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3294
                                             24 BANK0      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4513
                                             24 BANK0      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2056
                                             20 BANK0      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7700
                                             27 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    3963
                                             20 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3737
                                             20 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11643
                                             14 BANK1     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                              0 BANK1     14    10      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                             10 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3102
                                             20 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2240
                                             20 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4    1293
                                             23 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              2 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     753
                                              8 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14370
                                             55 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     373
                                              2 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             23 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3560
                                             39 BANK0     16    10      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                             10 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2244
                                             24 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2210
                                             20 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1670
                                             14 BANK0      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     290
                                              2 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              2 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     599
                                              2 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2805
                                             10 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              2 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    0     0      0    2329
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              2 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              2 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              2 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              2 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0     261
                                              4 COMMON     9     9      0
                                              0 BANK0      2     2      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___wmul (ARG)
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     29      4C       7       95.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      8      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3E      13       77.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3E      15       77.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     31D      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3E      18       77.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3E      20       77.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      50      24      100.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              4E      0      40      26       82.1%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     31D      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK11               0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Dec 28 01:19:12 2016

                     _update_mode 11EC                      ___altoft@exp 0030                       __CFG_CP$OFF 0000  
                   ___altoft@sign 0031                      ___awdiv@sign 0028                _topTactile_pressed 0159  
      setDoublePressState@f_state 0034               ___wmul@multiplicand 0024                   _updateSwitchTap 052E  
                    ___ftadd@exp1 0036                      ___ftadd@exp2 0035                      ___ftadd@sign 0034  
                             l330 0EE3                               l332 0EF6                               l334 0F43  
                             l352 1026                               l710 1F95                               l702 14BF  
                             l534 1E42                               l711 1F98                               l703 14E3  
                             l527 0974                               l712 1F9B                               l296 0AD4  
                             l714 1F9E                               l715 1FC2                               l707 1F8F  
            __size_of_adc_convert 0019                               l709 1F92                               l850 12AF  
                             l846 1288                               l862 1394                               l872 1212  
                             l858 1364                               l874 1214                               l875 1217  
                             l876 1225                               _PR2 001B      solidring_tactiles@ring_delay 0036  
                             _map 16C1                               _isr 0004                               _tap 01A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 00B5           __end_of_set_leds_bottom 1FC3  
                    __CFG_LVP$OFF 0000                      ___ftdiv@cntr 0051                      ___ftdiv@sign 0056  
                            _B25k 0420                              l1211 0544                              l1225 05FE  
                            l1324 1E55                              l1085 0799                              l1516 0A19  
                            l1379 15C9                              l1492 152A                              l1493 1532  
                            l1485 1517                              l5040 1255                              l5112 15EA  
                            l5104 15DA                              l1576 16A7                              l5202 0A3D  
                            l5130 1631                              l5122 1618                              l5114 15F8  
                            l5212 0A58                              l5222 0820                              l5126 1623  
                            l5142 1E93                              l5152 09A2                              l5162 09B8  
                            l5250 0890                              l5242 0877                              l5082 1E4F  
                            l5322 1653                              l5180 09E5                              l5156 09A9  
                            l5228 0836                              l5340 1683                              l5068 1F12  
                            l5182 09EF                              l5174 09D2                              l5270 1779  
                            l5414 127D                              l5350 16AA                              l5342 1691  
                            l5510 073F                              ?_map 0057                              l5192 0A0B  
                            l5184 09F4                              l5264 1763                              l5424 12A4  
                            l5600 0555                              l5194 0A15                              l5186 09F8  
                            l5282 17B4                              l5434 1359                              l5354 16B8  
                            l6250 08DF                              l5530 076E                              l5506 072C  
                            l6252 14CC                              l5444 1380                              l5348 169E  
                            l5532 0776                              l6254 1FAB                              l5390 1329  
                            l4902 14F4                              l5198 0A2B                              l5294 17D0  
                            l5286 17BC                              l5518 074D                              l5550 079D  
                            l4912 151C                              l4904 14FE                              l5720 08CF  
                            l5560 07BF                              l5544 078C                              l5640 05DD  
                            l5624 05A1                              l5616 0579                              l5464 121A  
                            l6248 0EBE                              l4914 1524                              l4906 1503  
                            l4842 1F6B                              l5298 17D8                              l5722 08D3  
                            l5714 08C1                              l5562 07C4                              l5570 07D6  
                            l5618 0596                              l5466 1229                              l4860 14B7  
                            l4852 1497                              l5716 08C5                              l5556 07B7  
                            l5636 05C6                              l5900 0D2A                              l4854 149F  
                            l5750 1FE8                              l4838 1F61                              l5718 08C9  
                            l5726 08DA                              l5670 06BD                              l5638 05CE  
                            l5910 0DB9                              l4856 14A7                              l4864 14C6  
                            l5728 08F3                              l5664 064D                              l5656 0641  
                            l5648 05F6                              l5904 0D74                              l4858 14AF  
                            l5762 1449                              l5666 0697                              l5594 0539  
                            l5930 0E16                              l5922 0DFF                              l5842 0AD8  
                            l5748 1FD8                              l5780 1468                              l5940 0E7D  
                            l5932 0E5C                              l5908 0DB4                              l5844 0ADB  
                            l5828 0AAE                              ?_isr 0070                              l5790 1483  
                            l5678 06FD                              l5926 0E08                              l4888 1FA5  
                            l5768 1454                              l5944 0E88                              l5936 0E72  
                            l5960 0EB8                              l5872 0BAC                              l5864 0B58  
                            l4898 14ED                              l5794 148B                              l5786 147A  
                            l5778 145C                              l4994 157E                              l5970 0EF8  
                            l5954 0EB2                              l5962 0ED2                              l5956 0EB5  
                            l5948 0E94                              l5884 0C4B                              l5876 0BEC  
                            l5966 0EE5                              l5896 0CEA                              l5888 0C8B  
                            l5994 0FBD                              l5978 0F45                              l5996 0F70  
                            l5998 0FC3                              u5015 158B                              u5040 1253  
                            u5035 1237                              u5115 1E56                              u5205 160D  
                            u5125 1E5B                              u5215 1619                              u6015 0725  
                            u5065 1E0F                              u6025 0738                              u5075 1F05  
                            u5405 09F9                              u5175 15ED                              u6055 0757  
                            u5095 1E26                              u5345 09D3                              u5505 0848  
                            u6145 07A8                              u6305 05AB                              u5435 0A0C  
                            u5515 0858                              u5195 15F9                              u5525 0878  
                            u6405 066B                              u5375 09E6                              u5535 0887  
                            u5615 17BD                              u6415 067F                              u4905 1512  
                            u4825 1F6C                              u5545 0891                              u5625 17C3  
                            u5705 165A                              u4835 1F73                              u6435 069C  
                            u6275 0582                              u5820 1327                              u5805 1EBC  
                            u4925 151F                              u6535 145F                              u5655 17D9  
                            u5735 1684                              u6375 060F                              u6615 0ACA  
                            i1l97 0112                              u5665 17DF                              u5585 1785  
                            u6465 096D                              u6385 0626                              u6705 0D28  
                            u6555 1469                              u5595 1795                              u6395 0656  
                            u6715 0D92                              u6635 0B39                              u4965 1539  
                            u4885 14F9                              u6485 1FDD                              u6565 1473  
                            u5765 169F                              u6805 0F3E                              u6733 0DE2  
                            u6725 0DB2                              u6645 0B56                              u6575 147B  
                            u6655 0BCA                              u5945 1379                              u6833 0FB5  
                            u6825 0F9D                              u6665 0BEA                              u5795 1EB6  
                            u6675 0C69                              u5885 129D                              u6685 0C89  
                            u5975 11FF                              u6775 0E11                              u6695 0D08  
                            u6785 0EDE                              u6795 0EF1                     _star_tactiles 1549  
                    __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000                              _iCnt 0152  
                            _mod1 03A0                              _mod2 0220                              _mod3 02A0  
                            _mod4 0320                              _mod5 2576                              _main 0A70  
                    ___ftpack@arg 0022                      ___ftpack@exp 0025                              fsr0h 0005  
                            fsr1h 0007                              fsr0l 0004                              indf0 0000  
                            fsr1l 0006                              map@x 0057                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E          __end_of_setFeedbackState 1E1C  
                            start 01F0                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 1D7C      updateSwitchTap@tapCntDivisor 003E      __end_of_setSwitchBypassState 1273  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0045  
                    ___ftmul@sign 0046                   __end_of_InitApp 1F58                 ??_restoreLEDState 0022  
                    ___fttol@exp1 00AD                             ??_map 0066                      ___fttol@lval 00A9  
                           ??_isr 0074                   _switchBypass_up 0168         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 163A                             ?_main 0070                   __end_of___awdiv 1490  
                 __end_of___ftadd 0A70                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 08B2  
                 __end_of___ftneg 0809                   __end_of___ftmul 1800                   ___awdiv@divisor 0022  
                 __end_of___fttol 16C1                             i1l113 01E4                             i1l118 01EB  
                           i1l702 12DE                             i1l703 1300                   ___awdiv@counter 0027  
                           _iB25k 04A0               _ConfigureOscillator 1D74                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 0026                   _switchTap_state 016E  
               ??_setLongTapState 0024                     ___awtoft@sign 002F                             _myBuf 0520  
                   ___ftpack@sign 0026                             _timer 00E3                    ?_star_tactiles 0070  
                           main@i 01EA                             main@x 01E8                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 1035                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 12B9                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
           set_subdivision@scalar 00B7              ?_ConfigureOscillator 0070                _getCurrentLEDState 1DB6  
              _updateSwitchBypass 0716           __end_of_updateSwitchTap 0716                   __initialization 01F2  
         _updateSwitchBypassState 1002                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 08B2                            ??_main 00BA                     ___fttol@sign1 00A8  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 11AB                    _feedback_timer 0138  
                  _feedback_state 0069                    _feedback_start 00E9                  ?_set_leds_bottom 0022  
                __end_of___altoft 2000                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0024               _baseline_delay_time 00C9              ??_getCurrentLEDState 0022  
                __end_of___awtoft 1EAA                  __end_of___ftpack 1549              ??_updateSwitchBypass 0038  
                          i1l4322 00FC                            i1l4314 00B3                            i1l4340 0151  
                          i1l4308 0099                            i1l4350 0190                            i1l4342 0161  
                          i1l4280 12C0                            i1l4360 01BD                            i1l4344 0163  
                          i1l4282 12C6                            i1l4354 01A1                            i1l4284 12CC  
                          i1l4292 12E4                            i1l4372 01E6                            i1l4356 01B0  
                          i1l4286 12D2                            i1l4288 12D8                            i1l4376 01EA  
                          i1l6256 12E9                            u432_23 012C                            _PMADRH 0192  
                          u440_25 01CC                            u424_25 0090                            _PMADRL 0191  
                          u441_25 01DF                            _PMDATH 0194                            u426_25 00AA  
                          _PMDATL 0193                            u435_23 0180                            _PMCON2 0196  
                          u428_23 00CC                    _debounce_count 012E                    _debounce_mode1 0130  
                  _debounce_mode2 0132                         ??_InitApp 0022             ??_ConfigureOscillator 0022  
        __end_of_read_top_tactile 139E                    __CFG_PWRTE$OFF 0000                            ___lmul 1F58  
                       ??___aldiv 0030                            ___wmul 1E4C                         ??___awdiv 0026  
                       ??___ftadd 0030                    __CFG_STVREN$ON 0000                         ??___ftdiv 004D  
                       ??___ftneg 0025                         ??___ftmul 003D                         ??___fttol 00A4  
                __end_of_init_adc 1D8F                  __end_of_init_pwm 11EC         __size_of_showBootSequence 002B  
                ___awdiv@quotient 0029             ___ftmul@f3_as_product 0042                      __pdataBIGRAM 236E  
         FLASH_ReadWord@flashAddr 0022                      __pdataCOMMON 007D              _getSwitchBypassState 1D78  
                       ??_wait_ms 0030              _setSwitchBypassState 122D                   ??_star_tactiles 0034  
          setLongTapState@f_state 0022           __end_of__initialization 02A8                        ___altoft@c 002A  
                      ___ftadd@f1 002A                        ___ftadd@f2 002D                 _bypass_turning_on 0151  
                      ___ftdiv@f1 004A                        ___ftdiv@f2 0047                        ___ftdiv@f3 0052  
                  _top_push_state 00D7         ??_updateSwitchBypassState 0024                        ___ftneg@f1 0022  
             _switchBypass_toggle 014E                        ___awtoft@c 002A           __end_of_set_subdivision 097A  
                      ___ftmul@f1 0037                        ___ftmul@f2 003A                        ___fttol@f1 00A0  
                ?_updateSwitchTap 0070                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK0 0002                      __pidataBANK1 1DC8                      __pidataBANK2 1DDA  
                    __pidataBANK4 112D                      __pidataBANK5 10EF                      __pidataBANK6 10B1  
                    __pidataBANK7 1073                      __pidataBANK8 13EE                      __pidataBANK9 139E  
                _initSwitchBypass 1DA7                   _doubleTap_state 006B                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 0022             ?_setSwitchBypassState 0034              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                        __pbssBANK0 006B                        __pbssBANK1 00DB  
                      __pbssBANK2 0120                        __pbssBANK3 01A0                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1DEF                   __CFG_VCAPEN$OFF 0000                        _delayArray 236E  
               ?_setFeedbackState 0022                        _delay_time 00CD                  _long_press_limit 00D5  
    __size_of_setDoublePressState 002D                        _delayfound 0136                        __pmaintext 0A70  
              ??_setFeedbackState 0024                    _InitializeTaps 1EAA                           ?___lmul 0022  
                         ?___wmul 0022                        __pintentry 0004                        _blink_rate 00D9  
                   ??_adc_convert 0024                         ?___altoft 002A                    ___lmul@product 002A  
                 _setLongTapState 1E1C                         ?___awtoft 002A                         ?___ftpack 0022  
                  _FLASH_ReadWord 1E68   __end_of_updateSwitchBypassState 1003                       modulation@x 0037  
                     modulation@y 0039                   _debounce_bypass 012C                     _suspend_blink 00EA  
                       ?_init_adc 0070                         ?_init_pwm 0070                           _InitApp 1F28  
          __end_of_InitializeTaps 1ED0                     ?_set_leds_top 0022                        _knob1_prev 00D3  
                      _knob2_prev 015E                        _knob3_prev 0160                        _knob4_prev 0162  
                      _knob5_prev 0164                  ?_set_subdivision 00AE                           ___aldiv 15B8  
                         ___awdiv 143E                   __size_of___lmul 0030                           ___ftadd 097A  
                         ___ftdiv 0809                           ___ftneg 0800                        _knob_1_pos 013A  
                      _knob_2_pos 013C                   __size_of___wmul 001C                           ___ftmul 174C  
                      _knob_3_pos 013E                           ___fttol 163A                        _knob_4_pos 0140  
                      _knob_5_pos 0142                 _switchTap_pressed 00EB                        ??___altoft 002E  
                _showBootSequence 1ED0            __end_of_FLASH_ReadWord 1E88                        ??___awtoft 002D  
                      ??___ftpack 0027                InitializeTaps@itap 0023                           __ptext1 11EC  
                         __ptext2 052E                           __ptext3 1E1C                           __ptext4 0716  
                         __ptext5 1E05                           __ptext6 1EFB                           __ptext7 1ED0  
                         __ptext8 1549                           __ptext9 116B            ??_getSwitchBypassState 0024  
                       _T2CONbits 001C                  _adjust_sub_delay 012A                      __size_of_map 008B  
                    __size_of_isr 01EC            ??_setSwitchBypassState 0036               __end_of_adc_convert 1E4C  
                ___aldiv@dividend 002C                           _wait_ms 1003           __end_of_restoreLEDState 1E05  
                         clrloop0 1D9C              end_of_initialization 02A8                        _modulation 1035  
                         init_ram 1D8F                        ??_init_adc 0022                           initloop 1D90  
                      ??_init_pwm 0022      updateSwitchBypassState@state 0022                _solidring_tactiles 116B  
                   _longTap_timer 0144                     _longTap_state 006A                     _longTap_start 0153  
                  ??_set_leds_top 0026                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1E33            i1set_leds_top@ledState 0072                ??_read_top_tactile 0034  
                ___aldiv@quotient 0033      __size_of_read_bottom_tactile 0046               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 0024              __size_of_update_mode 0041                   ?_FLASH_ReadWord 0022  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
            star_tactiles@reverse 0036                        _test_timer 01E4                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         _SPI_Value 0128  
         setFeedbackState@f_state 0022              ??_solidring_tactiles 0034       __end_of_ConfigureOscillator 1D78  
     __size_of_getCurrentLEDState 0012                        map@out_max 0063                        map@out_min 0060  
     __size_of_updateSwitchBypass 00E2          __end_of_initSwitchBypass 1DB6                       _CCP1CONbits 0293  
                     ___ftdiv@exp 0055          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 014C                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 0041                adc_convert@channel 0025                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 0024                    __end_of___lmul 1F88  
                   __pidataBIGRAM 02AC                    __end_of___wmul 1E68                       _adc_convert 1E33  
                   __pidataCOMMON 07FF                    _switchTap_down 0158               start_initialization 01F2  
           _bottomTactile_pressed 0150               _setDoublePressState 1EFB                       __end_of_map 174C  
                     __end_of_isr 01F0                  ?_restoreLEDState 0070                _mod_delay_time_bak 0146  
           __end_of_star_tactiles 15B8                       ?_modulation 0037              ?_setDoublePressState 0034  
                ?_setLongTapState 0022                          ??___lmul 002A                          ??___wmul 0026  
                     __pdataBANK0 0069                       __pdataBANK1 00C9                       __pdataBANK2 015A  
                     __pdataBANK4 0220                       __pdataBANK5 02A0                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                       __pdataBANK9 04A0  
                   _tap_iteration 016A          __size_of_updateSwitchTap 01E8                 __size_of___altoft 003D  
                     __pbssBANK10 0520         __size_of_setFeedbackState 0017                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 0022                     ??_init_timer2 0022  
            __end_of_set_leds_top 14E4                         ___latbits 0003                _switchBypass_state 007D  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK3 01E8  
                   _delay_counter 0134          __end_of_showBootSequence 1EFB          ?_updateSwitchBypassState 0022  
                  isr@tmpSubDelay 0020                          ?_InitApp 0070             ??_setDoublePressState 0036  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 0028  
               ??_set_leds_bottom 0024                _currentBypassState 016D                          ?___awdiv 0022  
                        ?___ftadd 002A                          ?___ftdiv 0047                          ?___ftneg 0022  
                        ?___ftmul 0037                          ?___fttol 00A0                       _blink_delay 015A  
             __size_of_modulation 003E                       _blink_state 016C                          _CCPTMRS0 029D  
                        _CCPTMRS1 029E                          _CCPTMRS2 029F                          ?_wait_ms 002E  
             _read_bottom_tactile 1273               __end_of_init_timer0 07FF               __end_of_init_timer2 1D85  
                       _mod_value 0148                         _mod_timer 0124                  ??_InitializeTaps 0022  
                 ___aldiv@divisor 0028                   ___aldiv@counter 0031                    ___wmul@product 0026  
                        _LATBbits 010D                          _LATDbits 010F                          _LATFbits 038C  
                        _LATGbits 038D                    _mod_delay_time 0166                         clear_ram0 1D9B  
                       _tap_timer 00DF                         _tap_total 01E0                     set_leds_top@x 0022  
                ??_FLASH_ReadWord 0024              ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048  
       initSwitchBypass@initState 0038                         map@in_max 005D                         map@in_min 005A  
                       _sub_timer 00DB                        _ADCON0bits 009D                        _ADCON1bits 009E  
                       main@i_405 01EC          __size_of_set_subdivision 00C8                 ___wmul@multiplier 0022  
                set_subdivision@x 00AE                  set_subdivision@y 00B0         __size_of_read_top_tactile 004F  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0046                 ??_updateSwitchTap 0038  
               ___lmul@multiplier 0022                 _ReadSavedSettings 1301                 ?_initSwitchBypass 0070  
                  wait_ms@timeSec 002E                ?_ReadSavedSettings 0070                    wait_ms@timemsl 0030  
     setSwitchBypassState@f_state 0034                ??_initSwitchBypass 0038                  __size_of_InitApp 0030  
                     _mode1_state 0154                     ??_update_mode 0022                       _mode2_state 0155  
           ??_read_bottom_tactile 0034               updateSwitchTap@iCnt 0040               ??_ReadSavedSettings 0026  
                      _APFCONbits 011D                 star_tactiles@iLed 0037                  __size_of___aldiv 0082  
                __size_of___awdiv 0052                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 0022                  __size_of___ftneg 0009                          ___altoft 1FC3  
                __size_of___ftmul 00B4                  __size_of___fttol 0087                          ___awtoft 1E88  
           __size_of_set_leds_top 0054                          ___ftpack 14E4                          _map$2176 0066  
          _preset_programmning_on 0157            star_tactiles@iLed_1457 0039                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 0022                  _setFeedbackState 1E05  
                     _init_timer0 07F8                       _init_timer2 1D7C                _delay_time_changed 015C  
      __end_of_getCurrentLEDState 1DC8        __end_of_updateSwitchBypass 07F8                          __ptext10 1DEF  
                        __ptext11 1DB6                          __ptext20 16C1                          __ptext12 08B2  
                        __ptext21 0800                          __ptext13 163A                          __ptext30 1D78  
                        __ptext22 174C                          __ptext14 1E88                          __ptext31 1E33  
                        __ptext23 0809                          __ptext15 134F                          __ptext40 1F28  
                        __ptext32 143E                          __ptext24 097A                          __ptext16 1273  
                        __ptext41 11AB                          __ptext33 1FC3                          __ptext25 1DA7  
                        __ptext17 1035                          __ptext42 1D7C                          __ptext34 14E4  
                        __ptext26 122D                          __ptext18 1E4C                          __ptext43 07F8  
                        __ptext35 1301                          __ptext27 1003                          __ptext19 15B8  
                        __ptext44 1D85                          __ptext36 1490                          __ptext28 1F58  
                        __ptext45 1D74                          __ptext37 1F88                          __ptext29 1002  
                        __ptext38 1E68                          __ptext47 12B9                          __ptext39 1EAA  
       __end_of_ReadSavedSettings 134F                  __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040  
                        _ledState 0120                      ??_modulation 003B                       _mod_counter 00E7  
                        _init_adc 1D85                     __size_of_main 0590                          _init_pwm 11AB  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 1490                          _num_taps 00DA  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 122D  
              __end_of_modulation 1073                        _INTCONbits 000B                       _tap_history 01CC  
               ??_set_subdivision 00B2                          intlevel1 0000                   _set_leds_bottom 1F88  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 0016                ??_showBootSequence 003B                   _reset_sub_delay 014A  
                      _OSCCONbits 0099                      _preset_blink 0156                    i1_set_leds_top 12B9  
__size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F          __size_of_setLongTapState 0017  
                _read_top_tactile 134F                      ___aldiv@sign 0032        __size_of_ReadSavedSettings 004E  
          main@adjusted_pot_value 01EE       __end_of_setDoublePressState 1F28                      _CCP10CONbits 061F  
               _bottom_push_state 00D1            __end_ofi1_set_leds_top 1301  
