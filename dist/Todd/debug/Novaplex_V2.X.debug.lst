

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Wed Oct 19 22:16:54 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK5,global,class=CODE,delta=2
    10                           	psect	idataBANK6,global,class=CODE,delta=2
    11                           	psect	idataBANK7,global,class=CODE,delta=2
    12                           	psect	idataBANK8,global,class=CODE,delta=2
    13                           	psect	idataBANK9,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	bssBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x920,80
    85                           	dabs	1,0x8A0,80
    86                           	dabs	1,0x820,80
    87                           	dabs	1,0x7A0,80
    88                           	dabs	1,0x720,80
    89                           	dabs	1,0x6A0,80
    90                           	dabs	1,0x652,30
    91                           	dabs	1,0x620,50
    92                           	dabs	1,0x5A8,72
    93                           	dabs	1,0x23F2,0,_delay
    94                           	dabs	1,0x2378,0,_mod5
    95                           	dabs	1,0x7E,2
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  008C                     	;# 
   127  008D                     	;# 
   128  008E                     	;# 
   129  008F                     	;# 
   130  0090                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0110                     	;# 
   150  0116                     	;# 
   151  0117                     	;# 
   152  011D                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  018F                     	;# 
   156  0190                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0194                     	;# 
   163  0195                     	;# 
   164  0196                     	;# 
   165  0197                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  020D                     	;# 
   190  020F                     	;# 
   191  0210                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  028C                     	;# 
   215  028D                     	;# 
   216  0291                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0293                     	;# 
   220  0298                     	;# 
   221  0298                     	;# 
   222  0299                     	;# 
   223  029A                     	;# 
   224  029D                     	;# 
   225  029E                     	;# 
   226  029F                     	;# 
   227  030C                     	;# 
   228  030D                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0318                     	;# 
   234  0318                     	;# 
   235  0319                     	;# 
   236  031A                     	;# 
   237  031C                     	;# 
   238  031C                     	;# 
   239  031D                     	;# 
   240  031E                     	;# 
   241  038C                     	;# 
   242  038D                     	;# 
   243  0394                     	;# 
   244  0395                     	;# 
   245  0396                     	;# 
   246  040C                     	;# 
   247  040D                     	;# 
   248  0411                     	;# 
   249  0411                     	;# 
   250  0412                     	;# 
   251  0413                     	;# 
   252  0414                     	;# 
   253  0415                     	;# 
   254  0416                     	;# 
   255  0417                     	;# 
   256  0418                     	;# 
   257  0418                     	;# 
   258  0419                     	;# 
   259  041A                     	;# 
   260  041B                     	;# 
   261  041C                     	;# 
   262  041D                     	;# 
   263  041E                     	;# 
   264  048D                     	;# 
   265  0491                     	;# 
   266  0491                     	;# 
   267  0492                     	;# 
   268  0492                     	;# 
   269  0493                     	;# 
   270  0493                     	;# 
   271  0493                     	;# 
   272  0494                     	;# 
   273  0494                     	;# 
   274  0495                     	;# 
   275  0495                     	;# 
   276  0496                     	;# 
   277  0496                     	;# 
   278  0497                     	;# 
   279  0497                     	;# 
   280  0595                     	;# 
   281  0596                     	;# 
   282  0597                     	;# 
   283  059C                     	;# 
   284  059D                     	;# 
   285  059E                     	;# 
   286  0611                     	;# 
   287  0611                     	;# 
   288  0612                     	;# 
   289  0613                     	;# 
   290  0614                     	;# 
   291  0614                     	;# 
   292  0615                     	;# 
   293  0616                     	;# 
   294  0617                     	;# 
   295  0617                     	;# 
   296  0618                     	;# 
   297  0619                     	;# 
   298  061A                     	;# 
   299  061A                     	;# 
   300  061B                     	;# 
   301  061C                     	;# 
   302  061D                     	;# 
   303  061D                     	;# 
   304  061E                     	;# 
   305  061F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000D                     	;# 
   331  000E                     	;# 
   332  000F                     	;# 
   333  0010                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  008C                     	;# 
   348  008D                     	;# 
   349  008E                     	;# 
   350  008F                     	;# 
   351  0090                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  010C                     	;# 
   367  010D                     	;# 
   368  010E                     	;# 
   369  010F                     	;# 
   370  0110                     	;# 
   371  0116                     	;# 
   372  0117                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376  018F                     	;# 
   377  0190                     	;# 
   378  0191                     	;# 
   379  0191                     	;# 
   380  0192                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0194                     	;# 
   384  0195                     	;# 
   385  0196                     	;# 
   386  0197                     	;# 
   387  0199                     	;# 
   388  0199                     	;# 
   389  0199                     	;# 
   390  019A                     	;# 
   391  019A                     	;# 
   392  019A                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019C                     	;# 
   399  019C                     	;# 
   400  019C                     	;# 
   401  019D                     	;# 
   402  019D                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019E                     	;# 
   406  019E                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  019F                     	;# 
   410  020D                     	;# 
   411  020F                     	;# 
   412  0210                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0219                     	;# 
   429  021A                     	;# 
   430  021B                     	;# 
   431  021C                     	;# 
   432  021D                     	;# 
   433  021E                     	;# 
   434  021F                     	;# 
   435  028C                     	;# 
   436  028D                     	;# 
   437  0291                     	;# 
   438  0291                     	;# 
   439  0292                     	;# 
   440  0293                     	;# 
   441  0298                     	;# 
   442  0298                     	;# 
   443  0299                     	;# 
   444  029A                     	;# 
   445  029D                     	;# 
   446  029E                     	;# 
   447  029F                     	;# 
   448  030C                     	;# 
   449  030D                     	;# 
   450  0311                     	;# 
   451  0311                     	;# 
   452  0312                     	;# 
   453  0313                     	;# 
   454  0318                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  031C                     	;# 
   459  031C                     	;# 
   460  031D                     	;# 
   461  031E                     	;# 
   462  038C                     	;# 
   463  038D                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  040C                     	;# 
   468  040D                     	;# 
   469  0411                     	;# 
   470  0411                     	;# 
   471  0412                     	;# 
   472  0413                     	;# 
   473  0414                     	;# 
   474  0415                     	;# 
   475  0416                     	;# 
   476  0417                     	;# 
   477  0418                     	;# 
   478  0418                     	;# 
   479  0419                     	;# 
   480  041A                     	;# 
   481  041B                     	;# 
   482  041C                     	;# 
   483  041D                     	;# 
   484  041E                     	;# 
   485  048D                     	;# 
   486  0491                     	;# 
   487  0491                     	;# 
   488  0492                     	;# 
   489  0492                     	;# 
   490  0493                     	;# 
   491  0493                     	;# 
   492  0493                     	;# 
   493  0494                     	;# 
   494  0494                     	;# 
   495  0495                     	;# 
   496  0495                     	;# 
   497  0496                     	;# 
   498  0496                     	;# 
   499  0497                     	;# 
   500  0497                     	;# 
   501  0595                     	;# 
   502  0596                     	;# 
   503  0597                     	;# 
   504  059C                     	;# 
   505  059D                     	;# 
   506  059E                     	;# 
   507  0611                     	;# 
   508  0611                     	;# 
   509  0612                     	;# 
   510  0613                     	;# 
   511  0614                     	;# 
   512  0614                     	;# 
   513  0615                     	;# 
   514  0616                     	;# 
   515  0617                     	;# 
   516  0617                     	;# 
   517  0618                     	;# 
   518  0619                     	;# 
   519  061A                     	;# 
   520  061A                     	;# 
   521  061B                     	;# 
   522  061C                     	;# 
   523  061D                     	;# 
   524  061D                     	;# 
   525  061E                     	;# 
   526  061F                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEB                     	;# 
   535  0FED                     	;# 
   536  0FEE                     	;# 
   537  0FEF                     	;# 
   538  0000                     	;# 
   539  0001                     	;# 
   540  0002                     	;# 
   541  0003                     	;# 
   542  0004                     	;# 
   543  0005                     	;# 
   544  0006                     	;# 
   545  0007                     	;# 
   546  0008                     	;# 
   547  0009                     	;# 
   548  000A                     	;# 
   549  000B                     	;# 
   550  000C                     	;# 
   551  000D                     	;# 
   552  000E                     	;# 
   553  000F                     	;# 
   554  0010                     	;# 
   555  0011                     	;# 
   556  0012                     	;# 
   557  0013                     	;# 
   558  0014                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  008F                     	;# 
   572  0090                     	;# 
   573  0091                     	;# 
   574  0092                     	;# 
   575  0093                     	;# 
   576  0094                     	;# 
   577  0095                     	;# 
   578  0096                     	;# 
   579  0097                     	;# 
   580  0099                     	;# 
   581  009A                     	;# 
   582  009B                     	;# 
   583  009B                     	;# 
   584  009C                     	;# 
   585  009D                     	;# 
   586  009E                     	;# 
   587  010C                     	;# 
   588  010D                     	;# 
   589  010E                     	;# 
   590  010F                     	;# 
   591  0110                     	;# 
   592  0116                     	;# 
   593  0117                     	;# 
   594  011D                     	;# 
   595  018C                     	;# 
   596  018D                     	;# 
   597  018F                     	;# 
   598  0190                     	;# 
   599  0191                     	;# 
   600  0191                     	;# 
   601  0192                     	;# 
   602  0193                     	;# 
   603  0193                     	;# 
   604  0194                     	;# 
   605  0195                     	;# 
   606  0196                     	;# 
   607  0197                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  0199                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019A                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019C                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019D                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019E                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  019F                     	;# 
   631  020D                     	;# 
   632  020F                     	;# 
   633  0210                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0219                     	;# 
   650  021A                     	;# 
   651  021B                     	;# 
   652  021C                     	;# 
   653  021D                     	;# 
   654  021E                     	;# 
   655  021F                     	;# 
   656  028C                     	;# 
   657  028D                     	;# 
   658  0291                     	;# 
   659  0291                     	;# 
   660  0292                     	;# 
   661  0293                     	;# 
   662  0298                     	;# 
   663  0298                     	;# 
   664  0299                     	;# 
   665  029A                     	;# 
   666  029D                     	;# 
   667  029E                     	;# 
   668  029F                     	;# 
   669  030C                     	;# 
   670  030D                     	;# 
   671  0311                     	;# 
   672  0311                     	;# 
   673  0312                     	;# 
   674  0313                     	;# 
   675  0318                     	;# 
   676  0318                     	;# 
   677  0319                     	;# 
   678  031A                     	;# 
   679  031C                     	;# 
   680  031C                     	;# 
   681  031D                     	;# 
   682  031E                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  0394                     	;# 
   686  0395                     	;# 
   687  0396                     	;# 
   688  040C                     	;# 
   689  040D                     	;# 
   690  0411                     	;# 
   691  0411                     	;# 
   692  0412                     	;# 
   693  0413                     	;# 
   694  0414                     	;# 
   695  0415                     	;# 
   696  0416                     	;# 
   697  0417                     	;# 
   698  0418                     	;# 
   699  0418                     	;# 
   700  0419                     	;# 
   701  041A                     	;# 
   702  041B                     	;# 
   703  041C                     	;# 
   704  041D                     	;# 
   705  041E                     	;# 
   706  048D                     	;# 
   707  0491                     	;# 
   708  0491                     	;# 
   709  0492                     	;# 
   710  0492                     	;# 
   711  0493                     	;# 
   712  0493                     	;# 
   713  0493                     	;# 
   714  0494                     	;# 
   715  0494                     	;# 
   716  0495                     	;# 
   717  0495                     	;# 
   718  0496                     	;# 
   719  0496                     	;# 
   720  0497                     	;# 
   721  0497                     	;# 
   722  0595                     	;# 
   723  0596                     	;# 
   724  0597                     	;# 
   725  059C                     	;# 
   726  059D                     	;# 
   727  059E                     	;# 
   728  0611                     	;# 
   729  0611                     	;# 
   730  0612                     	;# 
   731  0613                     	;# 
   732  0614                     	;# 
   733  0614                     	;# 
   734  0615                     	;# 
   735  0616                     	;# 
   736  0617                     	;# 
   737  0617                     	;# 
   738  0618                     	;# 
   739  0619                     	;# 
   740  061A                     	;# 
   741  061A                     	;# 
   742  061B                     	;# 
   743  061C                     	;# 
   744  061D                     	;# 
   745  061D                     	;# 
   746  061E                     	;# 
   747  061F                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  000F                     	;# 
   775  0010                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  008C                     	;# 
   790  008D                     	;# 
   791  008E                     	;# 
   792  008F                     	;# 
   793  0090                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0099                     	;# 
   802  009A                     	;# 
   803  009B                     	;# 
   804  009B                     	;# 
   805  009C                     	;# 
   806  009D                     	;# 
   807  009E                     	;# 
   808  010C                     	;# 
   809  010D                     	;# 
   810  010E                     	;# 
   811  010F                     	;# 
   812  0110                     	;# 
   813  0116                     	;# 
   814  0117                     	;# 
   815  011D                     	;# 
   816  018C                     	;# 
   817  018D                     	;# 
   818  018F                     	;# 
   819  0190                     	;# 
   820  0191                     	;# 
   821  0191                     	;# 
   822  0192                     	;# 
   823  0193                     	;# 
   824  0193                     	;# 
   825  0194                     	;# 
   826  0195                     	;# 
   827  0196                     	;# 
   828  0197                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  0199                     	;# 
   832  019A                     	;# 
   833  019A                     	;# 
   834  019A                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019C                     	;# 
   841  019C                     	;# 
   842  019C                     	;# 
   843  019D                     	;# 
   844  019D                     	;# 
   845  019D                     	;# 
   846  019E                     	;# 
   847  019E                     	;# 
   848  019E                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  019F                     	;# 
   852  020D                     	;# 
   853  020F                     	;# 
   854  0210                     	;# 
   855  0211                     	;# 
   856  0211                     	;# 
   857  0212                     	;# 
   858  0212                     	;# 
   859  0213                     	;# 
   860  0213                     	;# 
   861  0214                     	;# 
   862  0214                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0215                     	;# 
   866  0216                     	;# 
   867  0216                     	;# 
   868  0217                     	;# 
   869  0217                     	;# 
   870  0219                     	;# 
   871  021A                     	;# 
   872  021B                     	;# 
   873  021C                     	;# 
   874  021D                     	;# 
   875  021E                     	;# 
   876  021F                     	;# 
   877  028C                     	;# 
   878  028D                     	;# 
   879  0291                     	;# 
   880  0291                     	;# 
   881  0292                     	;# 
   882  0293                     	;# 
   883  0298                     	;# 
   884  0298                     	;# 
   885  0299                     	;# 
   886  029A                     	;# 
   887  029D                     	;# 
   888  029E                     	;# 
   889  029F                     	;# 
   890  030C                     	;# 
   891  030D                     	;# 
   892  0311                     	;# 
   893  0311                     	;# 
   894  0312                     	;# 
   895  0313                     	;# 
   896  0318                     	;# 
   897  0318                     	;# 
   898  0319                     	;# 
   899  031A                     	;# 
   900  031C                     	;# 
   901  031C                     	;# 
   902  031D                     	;# 
   903  031E                     	;# 
   904  038C                     	;# 
   905  038D                     	;# 
   906  0394                     	;# 
   907  0395                     	;# 
   908  0396                     	;# 
   909  040C                     	;# 
   910  040D                     	;# 
   911  0411                     	;# 
   912  0411                     	;# 
   913  0412                     	;# 
   914  0413                     	;# 
   915  0414                     	;# 
   916  0415                     	;# 
   917  0416                     	;# 
   918  0417                     	;# 
   919  0418                     	;# 
   920  0418                     	;# 
   921  0419                     	;# 
   922  041A                     	;# 
   923  041B                     	;# 
   924  041C                     	;# 
   925  041D                     	;# 
   926  041E                     	;# 
   927  048D                     	;# 
   928  0491                     	;# 
   929  0491                     	;# 
   930  0492                     	;# 
   931  0492                     	;# 
   932  0493                     	;# 
   933  0493                     	;# 
   934  0493                     	;# 
   935  0494                     	;# 
   936  0494                     	;# 
   937  0495                     	;# 
   938  0495                     	;# 
   939  0496                     	;# 
   940  0496                     	;# 
   941  0497                     	;# 
   942  0497                     	;# 
   943  0595                     	;# 
   944  0596                     	;# 
   945  0597                     	;# 
   946  059C                     	;# 
   947  059D                     	;# 
   948  059E                     	;# 
   949  0611                     	;# 
   950  0611                     	;# 
   951  0612                     	;# 
   952  0613                     	;# 
   953  0614                     	;# 
   954  0614                     	;# 
   955  0615                     	;# 
   956  0616                     	;# 
   957  0617                     	;# 
   958  0617                     	;# 
   959  0618                     	;# 
   960  0619                     	;# 
   961  061A                     	;# 
   962  061A                     	;# 
   963  061B                     	;# 
   964  061C                     	;# 
   965  061D                     	;# 
   966  061D                     	;# 
   967  061E                     	;# 
   968  061F                     	;# 
   969  0FE4                     	;# 
   970  0FE5                     	;# 
   971  0FE6                     	;# 
   972  0FE7                     	;# 
   973  0FE8                     	;# 
   974  0FE9                     	;# 
   975  0FEA                     	;# 
   976  0FEB                     	;# 
   977  0FED                     	;# 
   978  0FEE                     	;# 
   979  0FEF                     	;# 
   980  0000                     	;# 
   981  0001                     	;# 
   982  0002                     	;# 
   983  0003                     	;# 
   984  0004                     	;# 
   985  0005                     	;# 
   986  0006                     	;# 
   987  0007                     	;# 
   988  0008                     	;# 
   989  0009                     	;# 
   990  000A                     	;# 
   991  000B                     	;# 
   992  000C                     	;# 
   993  000D                     	;# 
   994  000E                     	;# 
   995  000F                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0013                     	;# 
  1000  0014                     	;# 
  1001  0015                     	;# 
  1002  0016                     	;# 
  1003  0016                     	;# 
  1004  0017                     	;# 
  1005  0018                     	;# 
  1006  0019                     	;# 
  1007  001A                     	;# 
  1008  001B                     	;# 
  1009  001C                     	;# 
  1010  008C                     	;# 
  1011  008D                     	;# 
  1012  008E                     	;# 
  1013  008F                     	;# 
  1014  0090                     	;# 
  1015  0091                     	;# 
  1016  0092                     	;# 
  1017  0093                     	;# 
  1018  0094                     	;# 
  1019  0095                     	;# 
  1020  0096                     	;# 
  1021  0097                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  010C                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  010F                     	;# 
  1033  0110                     	;# 
  1034  0116                     	;# 
  1035  0117                     	;# 
  1036  011D                     	;# 
  1037  018C                     	;# 
  1038  018D                     	;# 
  1039  018F                     	;# 
  1040  0190                     	;# 
  1041  0191                     	;# 
  1042  0191                     	;# 
  1043  0192                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0197                     	;# 
  1050  0199                     	;# 
  1051  0199                     	;# 
  1052  0199                     	;# 
  1053  019A                     	;# 
  1054  019A                     	;# 
  1055  019A                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019C                     	;# 
  1064  019D                     	;# 
  1065  019D                     	;# 
  1066  019D                     	;# 
  1067  019E                     	;# 
  1068  019E                     	;# 
  1069  019E                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  019F                     	;# 
  1073  020D                     	;# 
  1074  020F                     	;# 
  1075  0210                     	;# 
  1076  0211                     	;# 
  1077  0211                     	;# 
  1078  0212                     	;# 
  1079  0212                     	;# 
  1080  0213                     	;# 
  1081  0213                     	;# 
  1082  0214                     	;# 
  1083  0214                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0216                     	;# 
  1088  0216                     	;# 
  1089  0217                     	;# 
  1090  0217                     	;# 
  1091  0219                     	;# 
  1092  021A                     	;# 
  1093  021B                     	;# 
  1094  021C                     	;# 
  1095  021D                     	;# 
  1096  021E                     	;# 
  1097  021F                     	;# 
  1098  028C                     	;# 
  1099  028D                     	;# 
  1100  0291                     	;# 
  1101  0291                     	;# 
  1102  0292                     	;# 
  1103  0293                     	;# 
  1104  0298                     	;# 
  1105  0298                     	;# 
  1106  0299                     	;# 
  1107  029A                     	;# 
  1108  029D                     	;# 
  1109  029E                     	;# 
  1110  029F                     	;# 
  1111  030C                     	;# 
  1112  030D                     	;# 
  1113  0311                     	;# 
  1114  0311                     	;# 
  1115  0312                     	;# 
  1116  0313                     	;# 
  1117  0318                     	;# 
  1118  0318                     	;# 
  1119  0319                     	;# 
  1120  031A                     	;# 
  1121  031C                     	;# 
  1122  031C                     	;# 
  1123  031D                     	;# 
  1124  031E                     	;# 
  1125  038C                     	;# 
  1126  038D                     	;# 
  1127  0394                     	;# 
  1128  0395                     	;# 
  1129  0396                     	;# 
  1130  040C                     	;# 
  1131  040D                     	;# 
  1132  0411                     	;# 
  1133  0411                     	;# 
  1134  0412                     	;# 
  1135  0413                     	;# 
  1136  0414                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  0418                     	;# 
  1141  0418                     	;# 
  1142  0419                     	;# 
  1143  041A                     	;# 
  1144  041B                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  048D                     	;# 
  1149  0491                     	;# 
  1150  0491                     	;# 
  1151  0492                     	;# 
  1152  0492                     	;# 
  1153  0493                     	;# 
  1154  0493                     	;# 
  1155  0493                     	;# 
  1156  0494                     	;# 
  1157  0494                     	;# 
  1158  0495                     	;# 
  1159  0495                     	;# 
  1160  0496                     	;# 
  1161  0496                     	;# 
  1162  0497                     	;# 
  1163  0497                     	;# 
  1164  0595                     	;# 
  1165  0596                     	;# 
  1166  0597                     	;# 
  1167  059C                     	;# 
  1168  059D                     	;# 
  1169  059E                     	;# 
  1170  0611                     	;# 
  1171  0611                     	;# 
  1172  0612                     	;# 
  1173  0613                     	;# 
  1174  0614                     	;# 
  1175  0614                     	;# 
  1176  0615                     	;# 
  1177  0616                     	;# 
  1178  0617                     	;# 
  1179  0617                     	;# 
  1180  0618                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061A                     	;# 
  1184  061B                     	;# 
  1185  061C                     	;# 
  1186  061D                     	;# 
  1187  061D                     	;# 
  1188  061E                     	;# 
  1189  061F                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  000E                     	;# 
  1216  000F                     	;# 
  1217  0010                     	;# 
  1218  0011                     	;# 
  1219  0012                     	;# 
  1220  0013                     	;# 
  1221  0014                     	;# 
  1222  0015                     	;# 
  1223  0016                     	;# 
  1224  0016                     	;# 
  1225  0017                     	;# 
  1226  0018                     	;# 
  1227  0019                     	;# 
  1228  001A                     	;# 
  1229  001B                     	;# 
  1230  001C                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  008E                     	;# 
  1234  008F                     	;# 
  1235  0090                     	;# 
  1236  0091                     	;# 
  1237  0092                     	;# 
  1238  0093                     	;# 
  1239  0094                     	;# 
  1240  0095                     	;# 
  1241  0096                     	;# 
  1242  0097                     	;# 
  1243  0099                     	;# 
  1244  009A                     	;# 
  1245  009B                     	;# 
  1246  009B                     	;# 
  1247  009C                     	;# 
  1248  009D                     	;# 
  1249  009E                     	;# 
  1250  010C                     	;# 
  1251  010D                     	;# 
  1252  010E                     	;# 
  1253  010F                     	;# 
  1254  0110                     	;# 
  1255  0116                     	;# 
  1256  0117                     	;# 
  1257  011D                     	;# 
  1258  018C                     	;# 
  1259  018D                     	;# 
  1260  018F                     	;# 
  1261  0190                     	;# 
  1262  0191                     	;# 
  1263  0191                     	;# 
  1264  0192                     	;# 
  1265  0193                     	;# 
  1266  0193                     	;# 
  1267  0194                     	;# 
  1268  0195                     	;# 
  1269  0196                     	;# 
  1270  0197                     	;# 
  1271  0199                     	;# 
  1272  0199                     	;# 
  1273  0199                     	;# 
  1274  019A                     	;# 
  1275  019A                     	;# 
  1276  019A                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019C                     	;# 
  1283  019C                     	;# 
  1284  019C                     	;# 
  1285  019D                     	;# 
  1286  019D                     	;# 
  1287  019D                     	;# 
  1288  019E                     	;# 
  1289  019E                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  019F                     	;# 
  1294  020D                     	;# 
  1295  020F                     	;# 
  1296  0210                     	;# 
  1297  0211                     	;# 
  1298  0211                     	;# 
  1299  0212                     	;# 
  1300  0212                     	;# 
  1301  0213                     	;# 
  1302  0213                     	;# 
  1303  0214                     	;# 
  1304  0214                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0215                     	;# 
  1308  0216                     	;# 
  1309  0216                     	;# 
  1310  0217                     	;# 
  1311  0217                     	;# 
  1312  0219                     	;# 
  1313  021A                     	;# 
  1314  021B                     	;# 
  1315  021C                     	;# 
  1316  021D                     	;# 
  1317  021E                     	;# 
  1318  021F                     	;# 
  1319  028C                     	;# 
  1320  028D                     	;# 
  1321  0291                     	;# 
  1322  0291                     	;# 
  1323  0292                     	;# 
  1324  0293                     	;# 
  1325  0298                     	;# 
  1326  0298                     	;# 
  1327  0299                     	;# 
  1328  029A                     	;# 
  1329  029D                     	;# 
  1330  029E                     	;# 
  1331  029F                     	;# 
  1332  030C                     	;# 
  1333  030D                     	;# 
  1334  0311                     	;# 
  1335  0311                     	;# 
  1336  0312                     	;# 
  1337  0313                     	;# 
  1338  0318                     	;# 
  1339  0318                     	;# 
  1340  0319                     	;# 
  1341  031A                     	;# 
  1342  031C                     	;# 
  1343  031C                     	;# 
  1344  031D                     	;# 
  1345  031E                     	;# 
  1346  038C                     	;# 
  1347  038D                     	;# 
  1348  0394                     	;# 
  1349  0395                     	;# 
  1350  0396                     	;# 
  1351  040C                     	;# 
  1352  040D                     	;# 
  1353  0411                     	;# 
  1354  0411                     	;# 
  1355  0412                     	;# 
  1356  0413                     	;# 
  1357  0414                     	;# 
  1358  0415                     	;# 
  1359  0416                     	;# 
  1360  0417                     	;# 
  1361  0418                     	;# 
  1362  0418                     	;# 
  1363  0419                     	;# 
  1364  041A                     	;# 
  1365  041B                     	;# 
  1366  041C                     	;# 
  1367  041D                     	;# 
  1368  041E                     	;# 
  1369  048D                     	;# 
  1370  0491                     	;# 
  1371  0491                     	;# 
  1372  0492                     	;# 
  1373  0492                     	;# 
  1374  0493                     	;# 
  1375  0493                     	;# 
  1376  0493                     	;# 
  1377  0494                     	;# 
  1378  0494                     	;# 
  1379  0495                     	;# 
  1380  0495                     	;# 
  1381  0496                     	;# 
  1382  0496                     	;# 
  1383  0497                     	;# 
  1384  0497                     	;# 
  1385  0595                     	;# 
  1386  0596                     	;# 
  1387  0597                     	;# 
  1388  059C                     	;# 
  1389  059D                     	;# 
  1390  059E                     	;# 
  1391  0611                     	;# 
  1392  0611                     	;# 
  1393  0612                     	;# 
  1394  0613                     	;# 
  1395  0614                     	;# 
  1396  0614                     	;# 
  1397  0615                     	;# 
  1398  0616                     	;# 
  1399  0617                     	;# 
  1400  0617                     	;# 
  1401  0618                     	;# 
  1402  0619                     	;# 
  1403  061A                     	;# 
  1404  061A                     	;# 
  1405  061B                     	;# 
  1406  061C                     	;# 
  1407  061D                     	;# 
  1408  061D                     	;# 
  1409  061E                     	;# 
  1410  061F                     	;# 
  1411  0FE4                     	;# 
  1412  0FE5                     	;# 
  1413  0FE6                     	;# 
  1414  0FE7                     	;# 
  1415  0FE8                     	;# 
  1416  0FE9                     	;# 
  1417  0FEA                     	;# 
  1418  0FEB                     	;# 
  1419  0FED                     	;# 
  1420  0FEE                     	;# 
  1421  0FEF                     	;# 
  1422  0000                     	;# 
  1423  0001                     	;# 
  1424  0002                     	;# 
  1425  0003                     	;# 
  1426  0004                     	;# 
  1427  0005                     	;# 
  1428  0006                     	;# 
  1429  0007                     	;# 
  1430  0008                     	;# 
  1431  0009                     	;# 
  1432  000A                     	;# 
  1433  000B                     	;# 
  1434  000C                     	;# 
  1435  000D                     	;# 
  1436  000E                     	;# 
  1437  000F                     	;# 
  1438  0010                     	;# 
  1439  0011                     	;# 
  1440  0012                     	;# 
  1441  0013                     	;# 
  1442  0014                     	;# 
  1443  0015                     	;# 
  1444  0016                     	;# 
  1445  0016                     	;# 
  1446  0017                     	;# 
  1447  0018                     	;# 
  1448  0019                     	;# 
  1449  001A                     	;# 
  1450  001B                     	;# 
  1451  001C                     	;# 
  1452  008C                     	;# 
  1453  008D                     	;# 
  1454  008E                     	;# 
  1455  008F                     	;# 
  1456  0090                     	;# 
  1457  0091                     	;# 
  1458  0092                     	;# 
  1459  0093                     	;# 
  1460  0094                     	;# 
  1461  0095                     	;# 
  1462  0096                     	;# 
  1463  0097                     	;# 
  1464  0099                     	;# 
  1465  009A                     	;# 
  1466  009B                     	;# 
  1467  009B                     	;# 
  1468  009C                     	;# 
  1469  009D                     	;# 
  1470  009E                     	;# 
  1471  010C                     	;# 
  1472  010D                     	;# 
  1473  010E                     	;# 
  1474  010F                     	;# 
  1475  0110                     	;# 
  1476  0116                     	;# 
  1477  0117                     	;# 
  1478  011D                     	;# 
  1479  018C                     	;# 
  1480  018D                     	;# 
  1481  018F                     	;# 
  1482  0190                     	;# 
  1483  0191                     	;# 
  1484  0191                     	;# 
  1485  0192                     	;# 
  1486  0193                     	;# 
  1487  0193                     	;# 
  1488  0194                     	;# 
  1489  0195                     	;# 
  1490  0196                     	;# 
  1491  0197                     	;# 
  1492  0199                     	;# 
  1493  0199                     	;# 
  1494  0199                     	;# 
  1495  019A                     	;# 
  1496  019A                     	;# 
  1497  019A                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019C                     	;# 
  1504  019C                     	;# 
  1505  019C                     	;# 
  1506  019D                     	;# 
  1507  019D                     	;# 
  1508  019D                     	;# 
  1509  019E                     	;# 
  1510  019E                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  019F                     	;# 
  1514  019F                     	;# 
  1515  020D                     	;# 
  1516  020F                     	;# 
  1517  0210                     	;# 
  1518  0211                     	;# 
  1519  0211                     	;# 
  1520  0212                     	;# 
  1521  0212                     	;# 
  1522  0213                     	;# 
  1523  0213                     	;# 
  1524  0214                     	;# 
  1525  0214                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0215                     	;# 
  1529  0216                     	;# 
  1530  0216                     	;# 
  1531  0217                     	;# 
  1532  0217                     	;# 
  1533  0219                     	;# 
  1534  021A                     	;# 
  1535  021B                     	;# 
  1536  021C                     	;# 
  1537  021D                     	;# 
  1538  021E                     	;# 
  1539  021F                     	;# 
  1540  028C                     	;# 
  1541  028D                     	;# 
  1542  0291                     	;# 
  1543  0291                     	;# 
  1544  0292                     	;# 
  1545  0293                     	;# 
  1546  0298                     	;# 
  1547  0298                     	;# 
  1548  0299                     	;# 
  1549  029A                     	;# 
  1550  029D                     	;# 
  1551  029E                     	;# 
  1552  029F                     	;# 
  1553  030C                     	;# 
  1554  030D                     	;# 
  1555  0311                     	;# 
  1556  0311                     	;# 
  1557  0312                     	;# 
  1558  0313                     	;# 
  1559  0318                     	;# 
  1560  0318                     	;# 
  1561  0319                     	;# 
  1562  031A                     	;# 
  1563  031C                     	;# 
  1564  031C                     	;# 
  1565  031D                     	;# 
  1566  031E                     	;# 
  1567  038C                     	;# 
  1568  038D                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  040C                     	;# 
  1573  040D                     	;# 
  1574  0411                     	;# 
  1575  0411                     	;# 
  1576  0412                     	;# 
  1577  0413                     	;# 
  1578  0414                     	;# 
  1579  0415                     	;# 
  1580  0416                     	;# 
  1581  0417                     	;# 
  1582  0418                     	;# 
  1583  0418                     	;# 
  1584  0419                     	;# 
  1585  041A                     	;# 
  1586  041B                     	;# 
  1587  041C                     	;# 
  1588  041D                     	;# 
  1589  041E                     	;# 
  1590  048D                     	;# 
  1591  0491                     	;# 
  1592  0491                     	;# 
  1593  0492                     	;# 
  1594  0492                     	;# 
  1595  0493                     	;# 
  1596  0493                     	;# 
  1597  0493                     	;# 
  1598  0494                     	;# 
  1599  0494                     	;# 
  1600  0495                     	;# 
  1601  0495                     	;# 
  1602  0496                     	;# 
  1603  0496                     	;# 
  1604  0497                     	;# 
  1605  0497                     	;# 
  1606  0595                     	;# 
  1607  0596                     	;# 
  1608  0597                     	;# 
  1609  059C                     	;# 
  1610  059D                     	;# 
  1611  059E                     	;# 
  1612  0611                     	;# 
  1613  0611                     	;# 
  1614  0612                     	;# 
  1615  0613                     	;# 
  1616  0614                     	;# 
  1617  0614                     	;# 
  1618  0615                     	;# 
  1619  0616                     	;# 
  1620  0617                     	;# 
  1621  0617                     	;# 
  1622  0618                     	;# 
  1623  0619                     	;# 
  1624  061A                     	;# 
  1625  061A                     	;# 
  1626  061B                     	;# 
  1627  061C                     	;# 
  1628  061D                     	;# 
  1629  061D                     	;# 
  1630  061E                     	;# 
  1631  061F                     	;# 
  1632  0FE4                     	;# 
  1633  0FE5                     	;# 
  1634  0FE6                     	;# 
  1635  0FE7                     	;# 
  1636  0FE8                     	;# 
  1637  0FE9                     	;# 
  1638  0FEA                     	;# 
  1639  0FEB                     	;# 
  1640  0FED                     	;# 
  1641  0FEE                     	;# 
  1642  0FEF                     	;# 
  1643  0000                     	;# 
  1644  0001                     	;# 
  1645  0002                     	;# 
  1646  0003                     	;# 
  1647  0004                     	;# 
  1648  0005                     	;# 
  1649  0006                     	;# 
  1650  0007                     	;# 
  1651  0008                     	;# 
  1652  0009                     	;# 
  1653  000A                     	;# 
  1654  000B                     	;# 
  1655  000C                     	;# 
  1656  000D                     	;# 
  1657  000E                     	;# 
  1658  000F                     	;# 
  1659  0010                     	;# 
  1660  0011                     	;# 
  1661  0012                     	;# 
  1662  0013                     	;# 
  1663  0014                     	;# 
  1664  0015                     	;# 
  1665  0016                     	;# 
  1666  0016                     	;# 
  1667  0017                     	;# 
  1668  0018                     	;# 
  1669  0019                     	;# 
  1670  001A                     	;# 
  1671  001B                     	;# 
  1672  001C                     	;# 
  1673  008C                     	;# 
  1674  008D                     	;# 
  1675  008E                     	;# 
  1676  008F                     	;# 
  1677  0090                     	;# 
  1678  0091                     	;# 
  1679  0092                     	;# 
  1680  0093                     	;# 
  1681  0094                     	;# 
  1682  0095                     	;# 
  1683  0096                     	;# 
  1684  0097                     	;# 
  1685  0099                     	;# 
  1686  009A                     	;# 
  1687  009B                     	;# 
  1688  009B                     	;# 
  1689  009C                     	;# 
  1690  009D                     	;# 
  1691  009E                     	;# 
  1692  010C                     	;# 
  1693  010D                     	;# 
  1694  010E                     	;# 
  1695  010F                     	;# 
  1696  0110                     	;# 
  1697  0116                     	;# 
  1698  0117                     	;# 
  1699  011D                     	;# 
  1700  018C                     	;# 
  1701  018D                     	;# 
  1702  018F                     	;# 
  1703  0190                     	;# 
  1704  0191                     	;# 
  1705  0191                     	;# 
  1706  0192                     	;# 
  1707  0193                     	;# 
  1708  0193                     	;# 
  1709  0194                     	;# 
  1710  0195                     	;# 
  1711  0196                     	;# 
  1712  0197                     	;# 
  1713  0199                     	;# 
  1714  0199                     	;# 
  1715  0199                     	;# 
  1716  019A                     	;# 
  1717  019A                     	;# 
  1718  019A                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019C                     	;# 
  1725  019C                     	;# 
  1726  019C                     	;# 
  1727  019D                     	;# 
  1728  019D                     	;# 
  1729  019D                     	;# 
  1730  019E                     	;# 
  1731  019E                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  019F                     	;# 
  1735  019F                     	;# 
  1736  020D                     	;# 
  1737  020F                     	;# 
  1738  0210                     	;# 
  1739  0211                     	;# 
  1740  0211                     	;# 
  1741  0212                     	;# 
  1742  0212                     	;# 
  1743  0213                     	;# 
  1744  0213                     	;# 
  1745  0214                     	;# 
  1746  0214                     	;# 
  1747  0215                     	;# 
  1748  0215                     	;# 
  1749  0215                     	;# 
  1750  0216                     	;# 
  1751  0216                     	;# 
  1752  0217                     	;# 
  1753  0217                     	;# 
  1754  0219                     	;# 
  1755  021A                     	;# 
  1756  021B                     	;# 
  1757  021C                     	;# 
  1758  021D                     	;# 
  1759  021E                     	;# 
  1760  021F                     	;# 
  1761  028C                     	;# 
  1762  028D                     	;# 
  1763  0291                     	;# 
  1764  0291                     	;# 
  1765  0292                     	;# 
  1766  0293                     	;# 
  1767  0298                     	;# 
  1768  0298                     	;# 
  1769  0299                     	;# 
  1770  029A                     	;# 
  1771  029D                     	;# 
  1772  029E                     	;# 
  1773  029F                     	;# 
  1774  030C                     	;# 
  1775  030D                     	;# 
  1776  0311                     	;# 
  1777  0311                     	;# 
  1778  0312                     	;# 
  1779  0313                     	;# 
  1780  0318                     	;# 
  1781  0318                     	;# 
  1782  0319                     	;# 
  1783  031A                     	;# 
  1784  031C                     	;# 
  1785  031C                     	;# 
  1786  031D                     	;# 
  1787  031E                     	;# 
  1788  038C                     	;# 
  1789  038D                     	;# 
  1790  0394                     	;# 
  1791  0395                     	;# 
  1792  0396                     	;# 
  1793  040C                     	;# 
  1794  040D                     	;# 
  1795  0411                     	;# 
  1796  0411                     	;# 
  1797  0412                     	;# 
  1798  0413                     	;# 
  1799  0414                     	;# 
  1800  0415                     	;# 
  1801  0416                     	;# 
  1802  0417                     	;# 
  1803  0418                     	;# 
  1804  0418                     	;# 
  1805  0419                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041D                     	;# 
  1810  041E                     	;# 
  1811  048D                     	;# 
  1812  0491                     	;# 
  1813  0491                     	;# 
  1814  0492                     	;# 
  1815  0492                     	;# 
  1816  0493                     	;# 
  1817  0493                     	;# 
  1818  0493                     	;# 
  1819  0494                     	;# 
  1820  0494                     	;# 
  1821  0495                     	;# 
  1822  0495                     	;# 
  1823  0496                     	;# 
  1824  0496                     	;# 
  1825  0497                     	;# 
  1826  0497                     	;# 
  1827  0595                     	;# 
  1828  0596                     	;# 
  1829  0597                     	;# 
  1830  059C                     	;# 
  1831  059D                     	;# 
  1832  059E                     	;# 
  1833  0611                     	;# 
  1834  0611                     	;# 
  1835  0612                     	;# 
  1836  0613                     	;# 
  1837  0614                     	;# 
  1838  0614                     	;# 
  1839  0615                     	;# 
  1840  0616                     	;# 
  1841  0617                     	;# 
  1842  0617                     	;# 
  1843  0618                     	;# 
  1844  0619                     	;# 
  1845  061A                     	;# 
  1846  061A                     	;# 
  1847  061B                     	;# 
  1848  061C                     	;# 
  1849  061D                     	;# 
  1850  061D                     	;# 
  1851  061E                     	;# 
  1852  061F                     	;# 
  1853  0FE4                     	;# 
  1854  0FE5                     	;# 
  1855  0FE6                     	;# 
  1856  0FE7                     	;# 
  1857  0FE8                     	;# 
  1858  0FE9                     	;# 
  1859  0FEA                     	;# 
  1860  0FEB                     	;# 
  1861  0FED                     	;# 
  1862  0FEE                     	;# 
  1863  0FEF                     	;# 
  1864  0000                     	;# 
  1865  0001                     	;# 
  1866  0002                     	;# 
  1867  0003                     	;# 
  1868  0004                     	;# 
  1869  0005                     	;# 
  1870  0006                     	;# 
  1871  0007                     	;# 
  1872  0008                     	;# 
  1873  0009                     	;# 
  1874  000A                     	;# 
  1875  000B                     	;# 
  1876  000C                     	;# 
  1877  000D                     	;# 
  1878  000E                     	;# 
  1879  000F                     	;# 
  1880  0010                     	;# 
  1881  0011                     	;# 
  1882  0012                     	;# 
  1883  0013                     	;# 
  1884  0014                     	;# 
  1885  0015                     	;# 
  1886  0016                     	;# 
  1887  0016                     	;# 
  1888  0017                     	;# 
  1889  0018                     	;# 
  1890  0019                     	;# 
  1891  001A                     	;# 
  1892  001B                     	;# 
  1893  001C                     	;# 
  1894  008C                     	;# 
  1895  008D                     	;# 
  1896  008E                     	;# 
  1897  008F                     	;# 
  1898  0090                     	;# 
  1899  0091                     	;# 
  1900  0092                     	;# 
  1901  0093                     	;# 
  1902  0094                     	;# 
  1903  0095                     	;# 
  1904  0096                     	;# 
  1905  0097                     	;# 
  1906  0099                     	;# 
  1907  009A                     	;# 
  1908  009B                     	;# 
  1909  009B                     	;# 
  1910  009C                     	;# 
  1911  009D                     	;# 
  1912  009E                     	;# 
  1913  010C                     	;# 
  1914  010D                     	;# 
  1915  010E                     	;# 
  1916  010F                     	;# 
  1917  0110                     	;# 
  1918  0116                     	;# 
  1919  0117                     	;# 
  1920  011D                     	;# 
  1921  018C                     	;# 
  1922  018D                     	;# 
  1923  018F                     	;# 
  1924  0190                     	;# 
  1925  0191                     	;# 
  1926  0191                     	;# 
  1927  0192                     	;# 
  1928  0193                     	;# 
  1929  0193                     	;# 
  1930  0194                     	;# 
  1931  0195                     	;# 
  1932  0196                     	;# 
  1933  0197                     	;# 
  1934  0199                     	;# 
  1935  0199                     	;# 
  1936  0199                     	;# 
  1937  019A                     	;# 
  1938  019A                     	;# 
  1939  019A                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019C                     	;# 
  1946  019C                     	;# 
  1947  019C                     	;# 
  1948  019D                     	;# 
  1949  019D                     	;# 
  1950  019D                     	;# 
  1951  019E                     	;# 
  1952  019E                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  019F                     	;# 
  1957  020D                     	;# 
  1958  020F                     	;# 
  1959  0210                     	;# 
  1960  0211                     	;# 
  1961  0211                     	;# 
  1962  0212                     	;# 
  1963  0212                     	;# 
  1964  0213                     	;# 
  1965  0213                     	;# 
  1966  0214                     	;# 
  1967  0214                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0215                     	;# 
  1971  0216                     	;# 
  1972  0216                     	;# 
  1973  0217                     	;# 
  1974  0217                     	;# 
  1975  0219                     	;# 
  1976  021A                     	;# 
  1977  021B                     	;# 
  1978  021C                     	;# 
  1979  021D                     	;# 
  1980  021E                     	;# 
  1981  021F                     	;# 
  1982  028C                     	;# 
  1983  028D                     	;# 
  1984  0291                     	;# 
  1985  0291                     	;# 
  1986  0292                     	;# 
  1987  0293                     	;# 
  1988  0298                     	;# 
  1989  0298                     	;# 
  1990  0299                     	;# 
  1991  029A                     	;# 
  1992  029D                     	;# 
  1993  029E                     	;# 
  1994  029F                     	;# 
  1995  030C                     	;# 
  1996  030D                     	;# 
  1997  0311                     	;# 
  1998  0311                     	;# 
  1999  0312                     	;# 
  2000  0313                     	;# 
  2001  0318                     	;# 
  2002  0318                     	;# 
  2003  0319                     	;# 
  2004  031A                     	;# 
  2005  031C                     	;# 
  2006  031C                     	;# 
  2007  031D                     	;# 
  2008  031E                     	;# 
  2009  038C                     	;# 
  2010  038D                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  040C                     	;# 
  2015  040D                     	;# 
  2016  0411                     	;# 
  2017  0411                     	;# 
  2018  0412                     	;# 
  2019  0413                     	;# 
  2020  0414                     	;# 
  2021  0415                     	;# 
  2022  0416                     	;# 
  2023  0417                     	;# 
  2024  0418                     	;# 
  2025  0418                     	;# 
  2026  0419                     	;# 
  2027  041A                     	;# 
  2028  041B                     	;# 
  2029  041C                     	;# 
  2030  041D                     	;# 
  2031  041E                     	;# 
  2032  048D                     	;# 
  2033  0491                     	;# 
  2034  0491                     	;# 
  2035  0492                     	;# 
  2036  0492                     	;# 
  2037  0493                     	;# 
  2038  0493                     	;# 
  2039  0493                     	;# 
  2040  0494                     	;# 
  2041  0494                     	;# 
  2042  0495                     	;# 
  2043  0495                     	;# 
  2044  0496                     	;# 
  2045  0496                     	;# 
  2046  0497                     	;# 
  2047  0497                     	;# 
  2048  0595                     	;# 
  2049  0596                     	;# 
  2050  0597                     	;# 
  2051  059C                     	;# 
  2052  059D                     	;# 
  2053  059E                     	;# 
  2054  0611                     	;# 
  2055  0611                     	;# 
  2056  0612                     	;# 
  2057  0613                     	;# 
  2058  0614                     	;# 
  2059  0614                     	;# 
  2060  0615                     	;# 
  2061  0616                     	;# 
  2062  0617                     	;# 
  2063  0617                     	;# 
  2064  0618                     	;# 
  2065  0619                     	;# 
  2066  061A                     	;# 
  2067  061A                     	;# 
  2068  061B                     	;# 
  2069  061C                     	;# 
  2070  061D                     	;# 
  2071  061D                     	;# 
  2072  061E                     	;# 
  2073  061F                     	;# 
  2074  0FE4                     	;# 
  2075  0FE5                     	;# 
  2076  0FE6                     	;# 
  2077  0FE7                     	;# 
  2078  0FE8                     	;# 
  2079  0FE9                     	;# 
  2080  0FEA                     	;# 
  2081  0FEB                     	;# 
  2082  0FED                     	;# 
  2083  0FEE                     	;# 
  2084  0FEF                     	;# 
  2085  0000                     	;# 
  2086  0001                     	;# 
  2087  0002                     	;# 
  2088  0003                     	;# 
  2089  0004                     	;# 
  2090  0005                     	;# 
  2091  0006                     	;# 
  2092  0007                     	;# 
  2093  0008                     	;# 
  2094  0009                     	;# 
  2095  000A                     	;# 
  2096  000B                     	;# 
  2097  000C                     	;# 
  2098  000D                     	;# 
  2099  000E                     	;# 
  2100  000F                     	;# 
  2101  0010                     	;# 
  2102  0011                     	;# 
  2103  0012                     	;# 
  2104  0013                     	;# 
  2105  0014                     	;# 
  2106  0015                     	;# 
  2107  0016                     	;# 
  2108  0016                     	;# 
  2109  0017                     	;# 
  2110  0018                     	;# 
  2111  0019                     	;# 
  2112  001A                     	;# 
  2113  001B                     	;# 
  2114  001C                     	;# 
  2115  008C                     	;# 
  2116  008D                     	;# 
  2117  008E                     	;# 
  2118  008F                     	;# 
  2119  0090                     	;# 
  2120  0091                     	;# 
  2121  0092                     	;# 
  2122  0093                     	;# 
  2123  0094                     	;# 
  2124  0095                     	;# 
  2125  0096                     	;# 
  2126  0097                     	;# 
  2127  0099                     	;# 
  2128  009A                     	;# 
  2129  009B                     	;# 
  2130  009B                     	;# 
  2131  009C                     	;# 
  2132  009D                     	;# 
  2133  009E                     	;# 
  2134  010C                     	;# 
  2135  010D                     	;# 
  2136  010E                     	;# 
  2137  010F                     	;# 
  2138  0110                     	;# 
  2139  0116                     	;# 
  2140  0117                     	;# 
  2141  011D                     	;# 
  2142  018C                     	;# 
  2143  018D                     	;# 
  2144  018F                     	;# 
  2145  0190                     	;# 
  2146  0191                     	;# 
  2147  0191                     	;# 
  2148  0192                     	;# 
  2149  0193                     	;# 
  2150  0193                     	;# 
  2151  0194                     	;# 
  2152  0195                     	;# 
  2153  0196                     	;# 
  2154  0197                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  0199                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019A                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019C                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019D                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  019F                     	;# 
  2178  020D                     	;# 
  2179  020F                     	;# 
  2180  0210                     	;# 
  2181  0211                     	;# 
  2182  0211                     	;# 
  2183  0212                     	;# 
  2184  0212                     	;# 
  2185  0213                     	;# 
  2186  0213                     	;# 
  2187  0214                     	;# 
  2188  0214                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0215                     	;# 
  2192  0216                     	;# 
  2193  0216                     	;# 
  2194  0217                     	;# 
  2195  0217                     	;# 
  2196  0219                     	;# 
  2197  021A                     	;# 
  2198  021B                     	;# 
  2199  021C                     	;# 
  2200  021D                     	;# 
  2201  021E                     	;# 
  2202  021F                     	;# 
  2203  028C                     	;# 
  2204  028D                     	;# 
  2205  0291                     	;# 
  2206  0291                     	;# 
  2207  0292                     	;# 
  2208  0293                     	;# 
  2209  0298                     	;# 
  2210  0298                     	;# 
  2211  0299                     	;# 
  2212  029A                     	;# 
  2213  029D                     	;# 
  2214  029E                     	;# 
  2215  029F                     	;# 
  2216  030C                     	;# 
  2217  030D                     	;# 
  2218  0311                     	;# 
  2219  0311                     	;# 
  2220  0312                     	;# 
  2221  0313                     	;# 
  2222  0318                     	;# 
  2223  0318                     	;# 
  2224  0319                     	;# 
  2225  031A                     	;# 
  2226  031C                     	;# 
  2227  031C                     	;# 
  2228  031D                     	;# 
  2229  031E                     	;# 
  2230  038C                     	;# 
  2231  038D                     	;# 
  2232  0394                     	;# 
  2233  0395                     	;# 
  2234  0396                     	;# 
  2235  040C                     	;# 
  2236  040D                     	;# 
  2237  0411                     	;# 
  2238  0411                     	;# 
  2239  0412                     	;# 
  2240  0413                     	;# 
  2241  0414                     	;# 
  2242  0415                     	;# 
  2243  0416                     	;# 
  2244  0417                     	;# 
  2245  0418                     	;# 
  2246  0418                     	;# 
  2247  0419                     	;# 
  2248  041A                     	;# 
  2249  041B                     	;# 
  2250  041C                     	;# 
  2251  041D                     	;# 
  2252  041E                     	;# 
  2253  048D                     	;# 
  2254  0491                     	;# 
  2255  0491                     	;# 
  2256  0492                     	;# 
  2257  0492                     	;# 
  2258  0493                     	;# 
  2259  0493                     	;# 
  2260  0493                     	;# 
  2261  0494                     	;# 
  2262  0494                     	;# 
  2263  0495                     	;# 
  2264  0495                     	;# 
  2265  0496                     	;# 
  2266  0496                     	;# 
  2267  0497                     	;# 
  2268  0497                     	;# 
  2269  0595                     	;# 
  2270  0596                     	;# 
  2271  0597                     	;# 
  2272  059C                     	;# 
  2273  059D                     	;# 
  2274  059E                     	;# 
  2275  0611                     	;# 
  2276  0611                     	;# 
  2277  0612                     	;# 
  2278  0613                     	;# 
  2279  0614                     	;# 
  2280  0614                     	;# 
  2281  0615                     	;# 
  2282  0616                     	;# 
  2283  0617                     	;# 
  2284  0617                     	;# 
  2285  0618                     	;# 
  2286  0619                     	;# 
  2287  061A                     	;# 
  2288  061A                     	;# 
  2289  061B                     	;# 
  2290  061C                     	;# 
  2291  061D                     	;# 
  2292  061D                     	;# 
  2293  061E                     	;# 
  2294  061F                     	;# 
  2295  0FE4                     	;# 
  2296  0FE5                     	;# 
  2297  0FE6                     	;# 
  2298  0FE7                     	;# 
  2299  0FE8                     	;# 
  2300  0FE9                     	;# 
  2301  0FEA                     	;# 
  2302  0FEB                     	;# 
  2303  0FED                     	;# 
  2304  0FEE                     	;# 
  2305  0FEF                     	;# 
  2306  0000                     	;# 
  2307  0001                     	;# 
  2308  0002                     	;# 
  2309  0003                     	;# 
  2310  0004                     	;# 
  2311  0005                     	;# 
  2312  0006                     	;# 
  2313  0007                     	;# 
  2314  0008                     	;# 
  2315  0009                     	;# 
  2316  000A                     	;# 
  2317  000B                     	;# 
  2318  000C                     	;# 
  2319  000D                     	;# 
  2320  000E                     	;# 
  2321  000F                     	;# 
  2322  0010                     	;# 
  2323  0011                     	;# 
  2324  0012                     	;# 
  2325  0013                     	;# 
  2326  0014                     	;# 
  2327  0015                     	;# 
  2328  0016                     	;# 
  2329  0016                     	;# 
  2330  0017                     	;# 
  2331  0018                     	;# 
  2332  0019                     	;# 
  2333  001A                     	;# 
  2334  001B                     	;# 
  2335  001C                     	;# 
  2336  008C                     	;# 
  2337  008D                     	;# 
  2338  008E                     	;# 
  2339  008F                     	;# 
  2340  0090                     	;# 
  2341  0091                     	;# 
  2342  0092                     	;# 
  2343  0093                     	;# 
  2344  0094                     	;# 
  2345  0095                     	;# 
  2346  0096                     	;# 
  2347  0097                     	;# 
  2348  0099                     	;# 
  2349  009A                     	;# 
  2350  009B                     	;# 
  2351  009B                     	;# 
  2352  009C                     	;# 
  2353  009D                     	;# 
  2354  009E                     	;# 
  2355  010C                     	;# 
  2356  010D                     	;# 
  2357  010E                     	;# 
  2358  010F                     	;# 
  2359  0110                     	;# 
  2360  0116                     	;# 
  2361  0117                     	;# 
  2362  011D                     	;# 
  2363  018C                     	;# 
  2364  018D                     	;# 
  2365  018F                     	;# 
  2366  0190                     	;# 
  2367  0191                     	;# 
  2368  0191                     	;# 
  2369  0192                     	;# 
  2370  0193                     	;# 
  2371  0193                     	;# 
  2372  0194                     	;# 
  2373  0195                     	;# 
  2374  0196                     	;# 
  2375  0197                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  0199                     	;# 
  2379  019A                     	;# 
  2380  019A                     	;# 
  2381  019A                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019C                     	;# 
  2388  019C                     	;# 
  2389  019C                     	;# 
  2390  019D                     	;# 
  2391  019D                     	;# 
  2392  019D                     	;# 
  2393  019E                     	;# 
  2394  019E                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  019F                     	;# 
  2398  019F                     	;# 
  2399  020D                     	;# 
  2400  020F                     	;# 
  2401  0210                     	;# 
  2402  0211                     	;# 
  2403  0211                     	;# 
  2404  0212                     	;# 
  2405  0212                     	;# 
  2406  0213                     	;# 
  2407  0213                     	;# 
  2408  0214                     	;# 
  2409  0214                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0215                     	;# 
  2413  0216                     	;# 
  2414  0216                     	;# 
  2415  0217                     	;# 
  2416  0217                     	;# 
  2417  0219                     	;# 
  2418  021A                     	;# 
  2419  021B                     	;# 
  2420  021C                     	;# 
  2421  021D                     	;# 
  2422  021E                     	;# 
  2423  021F                     	;# 
  2424  028C                     	;# 
  2425  028D                     	;# 
  2426  0291                     	;# 
  2427  0291                     	;# 
  2428  0292                     	;# 
  2429  0293                     	;# 
  2430  0298                     	;# 
  2431  0298                     	;# 
  2432  0299                     	;# 
  2433  029A                     	;# 
  2434  029D                     	;# 
  2435  029E                     	;# 
  2436  029F                     	;# 
  2437  030C                     	;# 
  2438  030D                     	;# 
  2439  0311                     	;# 
  2440  0311                     	;# 
  2441  0312                     	;# 
  2442  0313                     	;# 
  2443  0318                     	;# 
  2444  0318                     	;# 
  2445  0319                     	;# 
  2446  031A                     	;# 
  2447  031C                     	;# 
  2448  031C                     	;# 
  2449  031D                     	;# 
  2450  031E                     	;# 
  2451  038C                     	;# 
  2452  038D                     	;# 
  2453  0394                     	;# 
  2454  0395                     	;# 
  2455  0396                     	;# 
  2456  040C                     	;# 
  2457  040D                     	;# 
  2458  0411                     	;# 
  2459  0411                     	;# 
  2460  0412                     	;# 
  2461  0413                     	;# 
  2462  0414                     	;# 
  2463  0415                     	;# 
  2464  0416                     	;# 
  2465  0417                     	;# 
  2466  0418                     	;# 
  2467  0418                     	;# 
  2468  0419                     	;# 
  2469  041A                     	;# 
  2470  041B                     	;# 
  2471  041C                     	;# 
  2472  041D                     	;# 
  2473  041E                     	;# 
  2474  048D                     	;# 
  2475  0491                     	;# 
  2476  0491                     	;# 
  2477  0492                     	;# 
  2478  0492                     	;# 
  2479  0493                     	;# 
  2480  0493                     	;# 
  2481  0493                     	;# 
  2482  0494                     	;# 
  2483  0494                     	;# 
  2484  0495                     	;# 
  2485  0495                     	;# 
  2486  0496                     	;# 
  2487  0496                     	;# 
  2488  0497                     	;# 
  2489  0497                     	;# 
  2490  0595                     	;# 
  2491  0596                     	;# 
  2492  0597                     	;# 
  2493  059C                     	;# 
  2494  059D                     	;# 
  2495  059E                     	;# 
  2496  0611                     	;# 
  2497  0611                     	;# 
  2498  0612                     	;# 
  2499  0613                     	;# 
  2500  0614                     	;# 
  2501  0614                     	;# 
  2502  0615                     	;# 
  2503  0616                     	;# 
  2504  0617                     	;# 
  2505  0617                     	;# 
  2506  0618                     	;# 
  2507  0619                     	;# 
  2508  061A                     	;# 
  2509  061A                     	;# 
  2510  061B                     	;# 
  2511  061C                     	;# 
  2512  061D                     	;# 
  2513  061D                     	;# 
  2514  061E                     	;# 
  2515  061F                     	;# 
  2516  0FE4                     	;# 
  2517  0FE5                     	;# 
  2518  0FE6                     	;# 
  2519  0FE7                     	;# 
  2520  0FE8                     	;# 
  2521  0FE9                     	;# 
  2522  0FEA                     	;# 
  2523  0FEB                     	;# 
  2524  0FED                     	;# 
  2525  0FEE                     	;# 
  2526  0FEF                     	;_mod5
  2527                           
  2528                           	psect	idataCOMMON
  2529  0003                     __pidataCOMMON:	
  2530                           
  2531                           ;initializer for _longTap_state
  2532  0003  34FF               	retlw	255
  2533                           
  2534                           	psect	idataBANK0
  2535  0002                     __pidataBANK0:	
  2536                           
  2537                           ;initializer for _switchBypass_state
  2538  0002  34FF               	retlw	255
  2539                           
  2540                           	psect	idataBANK1
  2541  1F34                     __pidataBANK1:	
  2542                           
  2543                           ;initializer for _baseline_delay_time
  2544  1F34  34D0               	retlw	208
  2545  1F35  3407               	retlw	7
  2546  1F36  3400               	retlw	0
  2547  1F37  3400               	retlw	0
  2548                           
  2549                           ;initializer for _delay_time
  2550  1F38  34D0               	retlw	208
  2551  1F39  3407               	retlw	7
  2552  1F3A  3400               	retlw	0
  2553  1F3B  3400               	retlw	0
  2554                           
  2555                           ;initializer for _bottom_push_state
  2556  1F3C  3406               	retlw	6
  2557  1F3D  3400               	retlw	0
  2558                           
  2559                           ;initializer for _long_press_limit
  2560  1F3E  34E8               	retlw	232
  2561  1F3F  3403               	retlw	3
  2562                           
  2563                           ;initializer for _tap_iteration
  2564  1F40  3401               	retlw	1
  2565  1F41  3400               	retlw	0
  2566                           
  2567                           ;initializer for _top_push_state
  2568  1F42  3406               	retlw	6
  2569  1F43  3400               	retlw	0
  2570                           
  2571                           ;initializer for _blink_rate
  2572  1F44  3414               	retlw	20
  2573                           
  2574                           ;initializer for _num_taps
  2575  1F45  3404               	retlw	4
  2576                           
  2577                           ;initializer for _switchTap_state
  2578  1F46  34FF               	retlw	255
  2579                           
  2580                           	psect	idataBANK2
  2581  1F47                     __pidataBANK2:	
  2582                           
  2583                           ;initializer for _blink_delay
  2584  1F47  3464               	retlw	100
  2585  1F48  3400               	retlw	0
  2586                           
  2587                           ;initializer for _delay_time_changed
  2588  1F49  3401               	retlw	1
  2589  1F4A  3400               	retlw	0
  2590                           
  2591                           ;initializer for _feedback_state
  2592  1F4B  34FF               	retlw	255
  2593  1F4C  34FF               	retlw	255
  2594                           
  2595                           ;initializer for _knob1_prev
  2596  1F4D  34D0               	retlw	208
  2597  1F4E  3407               	retlw	7
  2598                           
  2599                           ;initializer for _knob2_prev
  2600  1F4F  34D0               	retlw	208
  2601  1F50  3407               	retlw	7
  2602                           
  2603                           ;initializer for _knob3_prev
  2604  1F51  34D0               	retlw	208
  2605  1F52  3407               	retlw	7
  2606                           
  2607                           ;initializer for _knob4_prev
  2608  1F53  34D0               	retlw	208
  2609  1F54  3407               	retlw	7
  2610                           
  2611                           ;initializer for _knob5_prev
  2612  1F55  34D0               	retlw	208
  2613  1F56  3407               	retlw	7
  2614                           
  2615                           ;initializer for _mod_delay_time
  2616  1F57  34D0               	retlw	208
  2617  1F58  3407               	retlw	7
  2618                           
  2619                           ;initializer for _switchBypass_up
  2620  1F59  3401               	retlw	1
  2621  1F5A  3400               	retlw	0
  2622                           
  2623                           ;initializer for _blink_state
  2624  1F5B  3401               	retlw	1
  2625                           
  2626                           	psect	idataBANK4
  2627  1205                     __pidataBANK4:	
  2628                           
  2629                           ;initializer for _mod2
  2630  1205  3400               	retlw	0
  2631  1206  3400               	retlw	0
  2632  1207  340D               	retlw	13
  2633  1208  3400               	retlw	0
  2634  1209  341B               	retlw	27
  2635  120A  3400               	retlw	0
  2636  120B  3428               	retlw	40
  2637  120C  3400               	retlw	0
  2638  120D  3435               	retlw	53
  2639  120E  3400               	retlw	0
  2640  120F  3443               	retlw	67
  2641  1210  3400               	retlw	0
  2642  1211  3450               	retlw	80
  2643  1212  3400               	retlw	0
  2644  1213  345D               	retlw	93
  2645  1214  3400               	retlw	0
  2646  1215  345D               	retlw	93
  2647  1216  3400               	retlw	0
  2648  1217  3450               	retlw	80
  2649  1218  3400               	retlw	0
  2650  1219  3443               	retlw	67
  2651  121A  3400               	retlw	0
  2652  121B  3435               	retlw	53
  2653  121C  3400               	retlw	0
  2654  121D  3428               	retlw	40
  2655  121E  3400               	retlw	0
  2656  121F  341B               	retlw	27
  2657  1220  3400               	retlw	0
  2658  1221  340D               	retlw	13
  2659  1222  3400               	retlw	0
  2660  1223  3400               	retlw	0
  2661  1224  3400               	retlw	0
  2662  1225  34F3               	retlw	243
  2663  1226  34FF               	retlw	255
  2664  1227  34E5               	retlw	229
  2665  1228  34FF               	retlw	255
  2666  1229  34D8               	retlw	216
  2667  122A  34FF               	retlw	255
  2668  122B  34CB               	retlw	203
  2669  122C  34FF               	retlw	255
  2670  122D  34BD               	retlw	189
  2671  122E  34FF               	retlw	255
  2672  122F  34B0               	retlw	176
  2673  1230  34FF               	retlw	255
  2674  1231  34A3               	retlw	163
  2675  1232  34FF               	retlw	255
  2676  1233  34A3               	retlw	163
  2677  1234  34FF               	retlw	255
  2678  1235  34B0               	retlw	176
  2679  1236  34FF               	retlw	255
  2680  1237  34BD               	retlw	189
  2681  1238  34FF               	retlw	255
  2682  1239  34CB               	retlw	203
  2683  123A  34FF               	retlw	255
  2684  123B  34D8               	retlw	216
  2685  123C  34FF               	retlw	255
  2686  123D  34E5               	retlw	229
  2687  123E  34FF               	retlw	255
  2688                           
  2689                           	psect	idataBANK5
  2690  11CB                     __pidataBANK5:	
  2691                           
  2692                           ;initializer for _mod3
  2693  11CB  3400               	retlw	0
  2694  11CC  3400               	retlw	0
  2695  11CD  3407               	retlw	7
  2696  11CE  3400               	retlw	0
  2697  11CF  340D               	retlw	13
  2698  11D0  3400               	retlw	0
  2699  11D1  3414               	retlw	20
  2700  11D2  3400               	retlw	0
  2701  11D3  341B               	retlw	27
  2702  11D4  3400               	retlw	0
  2703  11D5  3421               	retlw	33
  2704  11D6  3400               	retlw	0
  2705  11D7  3428               	retlw	40
  2706  11D8  3400               	retlw	0
  2707  11D9  342F               	retlw	47
  2708  11DA  3400               	retlw	0
  2709  11DB  3435               	retlw	53
  2710  11DC  3400               	retlw	0
  2711  11DD  343C               	retlw	60
  2712  11DE  3400               	retlw	0
  2713  11DF  3443               	retlw	67
  2714  11E0  3400               	retlw	0
  2715  11E1  3449               	retlw	73
  2716  11E2  3400               	retlw	0
  2717  11E3  3450               	retlw	80
  2718  11E4  3400               	retlw	0
  2719  11E5  3457               	retlw	87
  2720  11E6  3400               	retlw	0
  2721  11E7  345D               	retlw	93
  2722  11E8  3400               	retlw	0
  2723  11E9  349C               	retlw	156
  2724  11EA  34FF               	retlw	255
  2725  11EB  34A3               	retlw	163
  2726  11EC  34FF               	retlw	255
  2727  11ED  34A9               	retlw	169
  2728  11EE  34FF               	retlw	255
  2729  11EF  34B0               	retlw	176
  2730  11F0  34FF               	retlw	255
  2731  11F1  34B7               	retlw	183
  2732  11F2  34FF               	retlw	255
  2733  11F3  34BD               	retlw	189
  2734  11F4  34FF               	retlw	255
  2735  11F5  34C4               	retlw	196
  2736  11F6  34FF               	retlw	255
  2737  11F7  34CB               	retlw	203
  2738  11F8  34FF               	retlw	255
  2739  11F9  34D1               	retlw	209
  2740  11FA  34FF               	retlw	255
  2741  11FB  34D8               	retlw	216
  2742  11FC  34FF               	retlw	255
  2743  11FD  34DF               	retlw	223
  2744  11FE  34FF               	retlw	255
  2745  11FF  34E5               	retlw	229
  2746  1200  34FF               	retlw	255
  2747  1201  34EC               	retlw	236
  2748  1202  34FF               	retlw	255
  2749  1203  34F3               	retlw	243
  2750  1204  34FF               	retlw	255
  2751                           
  2752                           	psect	idataBANK6
  2753  1191                     __pidataBANK6:	
  2754                           
  2755                           ;initializer for _mod4
  2756  1191  3464               	retlw	100
  2757  1192  3400               	retlw	0
  2758  1193  3464               	retlw	100
  2759  1194  3400               	retlw	0
  2760  1195  3464               	retlw	100
  2761  1196  3400               	retlw	0
  2762  1197  3464               	retlw	100
  2763  1198  3400               	retlw	0
  2764  1199  3464               	retlw	100
  2765  119A  3400               	retlw	0
  2766  119B  3464               	retlw	100
  2767  119C  3400               	retlw	0
  2768  119D  3464               	retlw	100
  2769  119E  3400               	retlw	0
  2770  119F  3464               	retlw	100
  2771  11A0  3400               	retlw	0
  2772  11A1  3464               	retlw	100
  2773  11A2  3400               	retlw	0
  2774  11A3  3464               	retlw	100
  2775  11A4  3400               	retlw	0
  2776  11A5  3464               	retlw	100
  2777  11A6  3400               	retlw	0
  2778  11A7  3464               	retlw	100
  2779  11A8  3400               	retlw	0
  2780  11A9  3464               	retlw	100
  2781  11AA  3400               	retlw	0
  2782  11AB  3464               	retlw	100
  2783  11AC  3400               	retlw	0
  2784  11AD  3464               	retlw	100
  2785  11AE  3400               	retlw	0
  2786  11AF  349C               	retlw	156
  2787  11B0  34FF               	retlw	255
  2788  11B1  349C               	retlw	156
  2789  11B2  34FF               	retlw	255
  2790  11B3  349C               	retlw	156
  2791  11B4  34FF               	retlw	255
  2792  11B5  349C               	retlw	156
  2793  11B6  34FF               	retlw	255
  2794  11B7  349C               	retlw	156
  2795  11B8  34FF               	retlw	255
  2796  11B9  349C               	retlw	156
  2797  11BA  34FF               	retlw	255
  2798  11BB  349C               	retlw	156
  2799  11BC  34FF               	retlw	255
  2800  11BD  349C               	retlw	156
  2801  11BE  34FF               	retlw	255
  2802  11BF  349C               	retlw	156
  2803  11C0  34FF               	retlw	255
  2804  11C1  349C               	retlw	156
  2805  11C2  34FF               	retlw	255
  2806  11C3  349C               	retlw	156
  2807  11C4  34FF               	retlw	255
  2808  11C5  349C               	retlw	156
  2809  11C6  34FF               	retlw	255
  2810  11C7  349C               	retlw	156
  2811  11C8  34FF               	retlw	255
  2812  11C9  349C               	retlw	156
  2813  11CA  34FF               	retlw	255
  2814                           
  2815                           	psect	idataBANK7
  2816  14D8                     __pidataBANK7:	
  2817                           
  2818                           ;initializer for _B25k
  2819  14D8  34FF               	retlw	255
  2820  14D9  3400               	retlw	0
  2821  14DA  34FF               	retlw	255
  2822  14DB  3400               	retlw	0
  2823  14DC  34FF               	retlw	255
  2824  14DD  3400               	retlw	0
  2825  14DE  34DF               	retlw	223
  2826  14DF  3400               	retlw	0
  2827  14E0  34AE               	retlw	174
  2828  14E1  3400               	retlw	0
  2829  14E2  348E               	retlw	142
  2830  14E3  3400               	retlw	0
  2831  14E4  3478               	retlw	120
  2832  14E5  3400               	retlw	0
  2833  14E6  3467               	retlw	103
  2834  14E7  3400               	retlw	0
  2835  14E8  345B               	retlw	91
  2836  14E9  3400               	retlw	0
  2837  14EA  3450               	retlw	80
  2838  14EB  3400               	retlw	0
  2839  14EC  3448               	retlw	72
  2840  14ED  3400               	retlw	0
  2841  14EE  3442               	retlw	66
  2842  14EF  3400               	retlw	0
  2843  14F0  343C               	retlw	60
  2844  14F1  3400               	retlw	0
  2845  14F2  3437               	retlw	55
  2846  14F3  3400               	retlw	0
  2847  14F4  3433               	retlw	51
  2848  14F5  3400               	retlw	0
  2849  14F6  3430               	retlw	48
  2850  14F7  3400               	retlw	0
  2851  14F8  342D               	retlw	45
  2852  14F9  3400               	retlw	0
  2853  14FA  342A               	retlw	42
  2854  14FB  3400               	retlw	0
  2855  14FC  3427               	retlw	39
  2856  14FD  3400               	retlw	0
  2857  14FE  3425               	retlw	37
  2858  14FF  3400               	retlw	0
  2859  1500  3423               	retlw	35
  2860  1501  3400               	retlw	0
  2861  1502  3421               	retlw	33
  2862  1503  3400               	retlw	0
  2863  1504  3420               	retlw	32
  2864  1505  3400               	retlw	0
  2865  1506  341E               	retlw	30
  2866  1507  3400               	retlw	0
  2867  1508  341D               	retlw	29
  2868  1509  3400               	retlw	0
  2869  150A  341C               	retlw	28
  2870  150B  3400               	retlw	0
  2871  150C  341B               	retlw	27
  2872  150D  3400               	retlw	0
  2873  150E  341A               	retlw	26
  2874  150F  3400               	retlw	0
  2875  1510  3419               	retlw	25
  2876  1511  3400               	retlw	0
  2877  1512  3418               	retlw	24
  2878  1513  3400               	retlw	0
  2879  1514  3417               	retlw	23
  2880  1515  3400               	retlw	0
  2881  1516  3416               	retlw	22
  2882  1517  3400               	retlw	0
  2883  1518  3415               	retlw	21
  2884  1519  3400               	retlw	0
  2885  151A  3415               	retlw	21
  2886  151B  3400               	retlw	0
  2887  151C  3414               	retlw	20
  2888  151D  3400               	retlw	0
  2889  151E  3413               	retlw	19
  2890  151F  3400               	retlw	0
  2891  1520  340F               	retlw	15
  2892  1521  3400               	retlw	0
  2893  1522  340B               	retlw	11
  2894  1523  3400               	retlw	0
  2895  1524  3407               	retlw	7
  2896  1525  3400               	retlw	0
  2897  1526  3407               	retlw	7
  2898  1527  3400               	retlw	0
  2899                           
  2900                           	psect	idataBANK8
  2901  1488                     __pidataBANK8:	
  2902                           
  2903                           ;initializer for _iB25k
  2904  1488  3407               	retlw	7
  2905  1489  3400               	retlw	0
  2906  148A  3407               	retlw	7
  2907  148B  3400               	retlw	0
  2908  148C  340B               	retlw	11
  2909  148D  3400               	retlw	0
  2910  148E  340F               	retlw	15
  2911  148F  3400               	retlw	0
  2912  1490  3413               	retlw	19
  2913  1491  3400               	retlw	0
  2914  1492  3414               	retlw	20
  2915  1493  3400               	retlw	0
  2916  1494  3415               	retlw	21
  2917  1495  3400               	retlw	0
  2918  1496  3415               	retlw	21
  2919  1497  3400               	retlw	0
  2920  1498  3416               	retlw	22
  2921  1499  3400               	retlw	0
  2922  149A  3417               	retlw	23
  2923  149B  3400               	retlw	0
  2924  149C  3418               	retlw	24
  2925  149D  3400               	retlw	0
  2926  149E  3419               	retlw	25
  2927  149F  3400               	retlw	0
  2928  14A0  341A               	retlw	26
  2929  14A1  3400               	retlw	0
  2930  14A2  341B               	retlw	27
  2931  14A3  3400               	retlw	0
  2932  14A4  341C               	retlw	28
  2933  14A5  3400               	retlw	0
  2934  14A6  341D               	retlw	29
  2935  14A7  3400               	retlw	0
  2936  14A8  341E               	retlw	30
  2937  14A9  3400               	retlw	0
  2938  14AA  3420               	retlw	32
  2939  14AB  3400               	retlw	0
  2940  14AC  3421               	retlw	33
  2941  14AD  3400               	retlw	0
  2942  14AE  3423               	retlw	35
  2943  14AF  3400               	retlw	0
  2944  14B0  3425               	retlw	37
  2945  14B1  3400               	retlw	0
  2946  14B2  3427               	retlw	39
  2947  14B3  3400               	retlw	0
  2948  14B4  342A               	retlw	42
  2949  14B5  3400               	retlw	0
  2950  14B6  342D               	retlw	45
  2951  14B7  3400               	retlw	0
  2952  14B8  3430               	retlw	48
  2953  14B9  3400               	retlw	0
  2954  14BA  3433               	retlw	51
  2955  14BB  3400               	retlw	0
  2956  14BC  3437               	retlw	55
  2957  14BD  3400               	retlw	0
  2958  14BE  343C               	retlw	60
  2959  14BF  3400               	retlw	0
  2960  14C0  3442               	retlw	66
  2961  14C1  3400               	retlw	0
  2962  14C2  3448               	retlw	72
  2963  14C3  3400               	retlw	0
  2964  14C4  3450               	retlw	80
  2965  14C5  3400               	retlw	0
  2966  14C6  345B               	retlw	91
  2967  14C7  3400               	retlw	0
  2968  14C8  3467               	retlw	103
  2969  14C9  3400               	retlw	0
  2970  14CA  3478               	retlw	120
  2971  14CB  3400               	retlw	0
  2972  14CC  348E               	retlw	142
  2973  14CD  3400               	retlw	0
  2974  14CE  34AE               	retlw	174
  2975  14CF  3400               	retlw	0
  2976  14D0  34DF               	retlw	223
  2977  14D1  3400               	retlw	0
  2978  14D2  34FF               	retlw	255
  2979  14D3  3400               	retlw	0
  2980  14D4  34FF               	retlw	255
  2981  14D5  3400               	retlw	0
  2982  14D6  34FF               	retlw	255
  2983  14D7  3400               	retlw	0
  2984                           
  2985                           	psect	idataBANK9
  2986  1157                     __pidataBANK9:	
  2987                           
  2988                           ;initializer for _mod1
  2989  1157  3400               	retlw	0
  2990  1158  3400               	retlw	0
  2991  1159  3415               	retlw	21
  2992  115A  3400               	retlw	0
  2993  115B  3428               	retlw	40
  2994  115C  3400               	retlw	0
  2995  115D  343B               	retlw	59
  2996  115E  3400               	retlw	0
  2997  115F  344A               	retlw	74
  2998  1160  3400               	retlw	0
  2999  1161  3456               	retlw	86
  3000  1162  3400               	retlw	0
  3001  1163  345F               	retlw	95
  3002  1164  3400               	retlw	0
  3003  1165  3463               	retlw	99
  3004  1166  3400               	retlw	0
  3005  1167  3464               	retlw	100
  3006  1168  3400               	retlw	0
  3007  1169  345F               	retlw	95
  3008  116A  3400               	retlw	0
  3009  116B  3457               	retlw	87
  3010  116C  3400               	retlw	0
  3011  116D  344B               	retlw	75
  3012  116E  3400               	retlw	0
  3013  116F  343C               	retlw	60
  3014  1170  3400               	retlw	0
  3015  1171  342A               	retlw	42
  3016  1172  3400               	retlw	0
  3017  1173  3416               	retlw	22
  3018  1174  3400               	retlw	0
  3019  1175  3402               	retlw	2
  3020  1176  3400               	retlw	0
  3021  1177  34ED               	retlw	237
  3022  1178  34FF               	retlw	255
  3023  1179  34D9               	retlw	217
  3024  117A  34FF               	retlw	255
  3025  117B  34C7               	retlw	199
  3026  117C  34FF               	retlw	255
  3027  117D  34B7               	retlw	183
  3028  117E  34FF               	retlw	255
  3029  117F  34AB               	retlw	171
  3030  1180  34FF               	retlw	255
  3031  1181  34A2               	retlw	162
  3032  1182  34FF               	retlw	255
  3033  1183  349D               	retlw	157
  3034  1184  34FF               	retlw	255
  3035  1185  349C               	retlw	156
  3036  1186  34FF               	retlw	255
  3037  1187  34A8               	retlw	168
  3038  1188  34FF               	retlw	255
  3039  1189  34B4               	retlw	180
  3040  118A  34FF               	retlw	255
  3041  118B  34C3               	retlw	195
  3042  118C  34FF               	retlw	255
  3043  118D  34D5               	retlw	213
  3044  118E  34FF               	retlw	255
  3045  118F  34E8               	retlw	232
  3046  1190  34FF               	retlw	255
  3047                           
  3048                           	psect	idataBIGRAM
  3049  0D88                     __pidataBIGRAM:	
  3050                           
  3051                           ;initializer for _delay
  3052  0D88  3422               	retlw	34
  3053  0D89  3408               	retlw	8
  3054  0D8A  34FC               	retlw	252
  3055  0D8B  3407               	retlw	7
  3056  0D8C  34D8               	retlw	216
  3057  0D8D  3407               	retlw	7
  3058  0D8E  34B5               	retlw	181
  3059  0D8F  3407               	retlw	7
  3060  0D90  3493               	retlw	147
  3061  0D91  3407               	retlw	7
  3062  0D92  3472               	retlw	114
  3063  0D93  3407               	retlw	7
  3064  0D94  3452               	retlw	82
  3065  0D95  3407               	retlw	7
  3066  0D96  3434               	retlw	52
  3067  0D97  3407               	retlw	7
  3068  0D98  3416               	retlw	22
  3069  0D99  3407               	retlw	7
  3070  0D9A  34F9               	retlw	249
  3071  0D9B  3406               	retlw	6
  3072  0D9C  34DD               	retlw	221
  3073  0D9D  3406               	retlw	6
  3074  0D9E  34C2               	retlw	194
  3075  0D9F  3406               	retlw	6
  3076  0DA0  34A8               	retlw	168
  3077  0DA1  3406               	retlw	6
  3078  0DA2  348F               	retlw	143
  3079  0DA3  3406               	retlw	6
  3080  0DA4  3476               	retlw	118
  3081  0DA5  3406               	retlw	6
  3082  0DA6  345E               	retlw	94
  3083  0DA7  3406               	retlw	6
  3084  0DA8  3447               	retlw	71
  3085  0DA9  3406               	retlw	6
  3086  0DAA  3430               	retlw	48
  3087  0DAB  3406               	retlw	6
  3088  0DAC  341A               	retlw	26
  3089  0DAD  3406               	retlw	6
  3090  0DAE  3405               	retlw	5
  3091  0DAF  3406               	retlw	6
  3092  0DB0  34F0               	retlw	240
  3093  0DB1  3405               	retlw	5
  3094  0DB2  34DC               	retlw	220
  3095  0DB3  3405               	retlw	5
  3096  0DB4  34C8               	retlw	200
  3097  0DB5  3405               	retlw	5
  3098  0DB6  34B5               	retlw	181
  3099  0DB7  3405               	retlw	5
  3100  0DB8  34A3               	retlw	163
  3101  0DB9  3405               	retlw	5
  3102  0DBA  3490               	retlw	144
  3103  0DBB  3405               	retlw	5
  3104  0DBC  347F               	retlw	127
  3105  0DBD  3405               	retlw	5
  3106  0DBE  346D               	retlw	109
  3107  0DBF  3405               	retlw	5
  3108  0DC0  345C               	retlw	92
  3109  0DC1  3405               	retlw	5
  3110  0DC2  344C               	retlw	76
  3111  0DC3  3405               	retlw	5
  3112  0DC4  343C               	retlw	60
  3113  0DC5  3405               	retlw	5
  3114  0DC6  342C               	retlw	44
  3115  0DC7  3405               	retlw	5
  3116  0DC8  341D               	retlw	29
  3117  0DC9  3405               	retlw	5
  3118  0DCA  340E               	retlw	14
  3119  0DCB  3405               	retlw	5
  3120  0DCC  34FF               	retlw	255
  3121  0DCD  3404               	retlw	4
  3122  0DCE  34F1               	retlw	241
  3123  0DCF  3404               	retlw	4
  3124  0DD0  34E2               	retlw	226
  3125  0DD1  3404               	retlw	4
  3126  0DD2  34D5               	retlw	213
  3127  0DD3  3404               	retlw	4
  3128  0DD4  34C7               	retlw	199
  3129  0DD5  3404               	retlw	4
  3130  0DD6  34BA               	retlw	186
  3131  0DD7  3404               	retlw	4
  3132  0DD8  34AD               	retlw	173
  3133  0DD9  3404               	retlw	4
  3134  0DDA  34A1               	retlw	161
  3135  0DDB  3404               	retlw	4
  3136  0DDC  3494               	retlw	148
  3137  0DDD  3404               	retlw	4
  3138  0DDE  3488               	retlw	136
  3139  0DDF  3404               	retlw	4
  3140  0DE0  347D               	retlw	125
  3141  0DE1  3404               	retlw	4
  3142  0DE2  3471               	retlw	113
  3143  0DE3  3404               	retlw	4
  3144  0DE4  3466               	retlw	102
  3145  0DE5  3404               	retlw	4
  3146  0DE6  345A               	retlw	90
  3147  0DE7  3404               	retlw	4
  3148  0DE8  3450               	retlw	80
  3149  0DE9  3404               	retlw	4
  3150  0DEA  3445               	retlw	69
  3151  0DEB  3404               	retlw	4
  3152  0DEC  343A               	retlw	58
  3153  0DED  3404               	retlw	4
  3154  0DEE  3430               	retlw	48
  3155  0DEF  3404               	retlw	4
  3156  0DF0  3426               	retlw	38
  3157  0DF1  3404               	retlw	4
  3158  0DF2  341C               	retlw	28
  3159  0DF3  3404               	retlw	4
  3160  0DF4  3412               	retlw	18
  3161  0DF5  3404               	retlw	4
  3162  0DF6  3409               	retlw	9
  3163  0DF7  3404               	retlw	4
  3164  0DF8  34FF               	retlw	255
  3165  0DF9  3403               	retlw	3
  3166  0DFA  34F6               	retlw	246
  3167  0DFB  3403               	retlw	3
  3168  0DFC  34ED               	retlw	237
  3169  0DFD  3403               	retlw	3
  3170  0DFE  34E4               	retlw	228
  3171  0DFF  3403               	retlw	3
  3172  0E00  34DC               	retlw	220
  3173  0E01  3403               	retlw	3
  3174  0E02  34D3               	retlw	211
  3175  0E03  3403               	retlw	3
  3176  0E04  34CB               	retlw	203
  3177  0E05  3403               	retlw	3
  3178  0E06  34C2               	retlw	194
  3179  0E07  3403               	retlw	3
  3180  0E08  34BA               	retlw	186
  3181  0E09  3403               	retlw	3
  3182  0E0A  34B2               	retlw	178
  3183  0E0B  3403               	retlw	3
  3184  0E0C  34AA               	retlw	170
  3185  0E0D  3403               	retlw	3
  3186  0E0E  34A2               	retlw	162
  3187  0E0F  3403               	retlw	3
  3188  0E10  349B               	retlw	155
  3189  0E11  3403               	retlw	3
  3190  0E12  3493               	retlw	147
  3191  0E13  3403               	retlw	3
  3192  0E14  348C               	retlw	140
  3193  0E15  3403               	retlw	3
  3194  0E16  3485               	retlw	133
  3195  0E17  3403               	retlw	3
  3196  0E18  347E               	retlw	126
  3197  0E19  3403               	retlw	3
  3198  0E1A  3477               	retlw	119
  3199  0E1B  3403               	retlw	3
  3200  0E1C  3470               	retlw	112
  3201  0E1D  3403               	retlw	3
  3202  0E1E  3469               	retlw	105
  3203  0E1F  3403               	retlw	3
  3204  0E20  3462               	retlw	98
  3205  0E21  3403               	retlw	3
  3206  0E22  345C               	retlw	92
  3207  0E23  3403               	retlw	3
  3208  0E24  3455               	retlw	85
  3209  0E25  3403               	retlw	3
  3210  0E26  344F               	retlw	79
  3211  0E27  3403               	retlw	3
  3212  0E28  3448               	retlw	72
  3213  0E29  3403               	retlw	3
  3214  0E2A  3442               	retlw	66
  3215  0E2B  3403               	retlw	3
  3216  0E2C  343C               	retlw	60
  3217  0E2D  3403               	retlw	3
  3218  0E2E  3436               	retlw	54
  3219  0E2F  3403               	retlw	3
  3220  0E30  3430               	retlw	48
  3221  0E31  3403               	retlw	3
  3222  0E32  342A               	retlw	42
  3223  0E33  3403               	retlw	3
  3224  0E34  3424               	retlw	36
  3225  0E35  3403               	retlw	3
  3226  0E36  341F               	retlw	31
  3227  0E37  3403               	retlw	3
  3228  0E38  3419               	retlw	25
  3229  0E39  3403               	retlw	3
  3230  0E3A  3413               	retlw	19
  3231  0E3B  3403               	retlw	3
  3232  0E3C  340E               	retlw	14
  3233  0E3D  3403               	retlw	3
  3234  0E3E  3409               	retlw	9
  3235  0E3F  3403               	retlw	3
  3236  0E40  3403               	retlw	3
  3237  0E41  3403               	retlw	3
  3238  0E42  34FE               	retlw	254
  3239  0E43  3402               	retlw	2
  3240  0E44  34F9               	retlw	249
  3241  0E45  3402               	retlw	2
  3242  0E46  34F4               	retlw	244
  3243  0E47  3402               	retlw	2
  3244  0E48  34EF               	retlw	239
  3245  0E49  3402               	retlw	2
  3246  0E4A  34EA               	retlw	234
  3247  0E4B  3402               	retlw	2
  3248  0E4C  34E5               	retlw	229
  3249  0E4D  3402               	retlw	2
  3250  0E4E  34E0               	retlw	224
  3251  0E4F  3402               	retlw	2
  3252  0E50  34DB               	retlw	219
  3253  0E51  3402               	retlw	2
  3254  0E52  34D7               	retlw	215
  3255  0E53  3402               	retlw	2
  3256  0E54  34D2               	retlw	210
  3257  0E55  3402               	retlw	2
  3258  0E56  34CD               	retlw	205
  3259  0E57  3402               	retlw	2
  3260  0E58  34C9               	retlw	201
  3261  0E59  3402               	retlw	2
  3262  0E5A  34C4               	retlw	196
  3263  0E5B  3402               	retlw	2
  3264  0E5C  34C0               	retlw	192
  3265  0E5D  3402               	retlw	2
  3266  0E5E  34BC               	retlw	188
  3267  0E5F  3402               	retlw	2
  3268  0E60  34B7               	retlw	183
  3269  0E61  3402               	retlw	2
  3270  0E62  34B3               	retlw	179
  3271  0E63  3402               	retlw	2
  3272  0E64  34AF               	retlw	175
  3273  0E65  3402               	retlw	2
  3274  0E66  34AB               	retlw	171
  3275  0E67  3402               	retlw	2
  3276  0E68  34A6               	retlw	166
  3277  0E69  3402               	retlw	2
  3278  0E6A  34A2               	retlw	162
  3279  0E6B  3402               	retlw	2
  3280  0E6C  349E               	retlw	158
  3281  0E6D  3402               	retlw	2
  3282  0E6E  349A               	retlw	154
  3283  0E6F  3402               	retlw	2
  3284  0E70  3497               	retlw	151
  3285  0E71  3402               	retlw	2
  3286  0E72  3493               	retlw	147
  3287  0E73  3402               	retlw	2
  3288  0E74  348F               	retlw	143
  3289  0E75  3402               	retlw	2
  3290  0E76  348B               	retlw	139
  3291  0E77  3402               	retlw	2
  3292  0E78  3487               	retlw	135
  3293  0E79  3402               	retlw	2
  3294  0E7A  3484               	retlw	132
  3295  0E7B  3402               	retlw	2
  3296  0E7C  3480               	retlw	128
  3297  0E7D  3402               	retlw	2
  3298  0E7E  347C               	retlw	124
  3299  0E7F  3402               	retlw	2
  3300  0E80  3479               	retlw	121
  3301  0E81  3402               	retlw	2
  3302  0E82  3475               	retlw	117
  3303  0E83  3402               	retlw	2
  3304  0E84  3472               	retlw	114
  3305  0E85  3402               	retlw	2
  3306  0E86  346E               	retlw	110
  3307  0E87  3402               	retlw	2
  3308  0E88  346B               	retlw	107
  3309  0E89  3402               	retlw	2
  3310  0E8A  3467               	retlw	103
  3311  0E8B  3402               	retlw	2
  3312  0E8C  3464               	retlw	100
  3313  0E8D  3402               	retlw	2
  3314  0E8E  3461               	retlw	97
  3315  0E8F  3402               	retlw	2
  3316  0E90  345E               	retlw	94
  3317  0E91  3402               	retlw	2
  3318  0E92  345A               	retlw	90
  3319  0E93  3402               	retlw	2
  3320  0E94  3457               	retlw	87
  3321  0E95  3402               	retlw	2
  3322  0E96  3454               	retlw	84
  3323  0E97  3402               	retlw	2
  3324  0E98  3451               	retlw	81
  3325  0E99  3402               	retlw	2
  3326  0E9A  344E               	retlw	78
  3327  0E9B  3402               	retlw	2
  3328  0E9C  344B               	retlw	75
  3329  0E9D  3402               	retlw	2
  3330  0E9E  3448               	retlw	72
  3331  0E9F  3402               	retlw	2
  3332  0EA0  3445               	retlw	69
  3333  0EA1  3402               	retlw	2
  3334  0EA2  3442               	retlw	66
  3335  0EA3  3402               	retlw	2
  3336  0EA4  343F               	retlw	63
  3337  0EA5  3402               	retlw	2
  3338  0EA6  343C               	retlw	60
  3339  0EA7  3402               	retlw	2
  3340  0EA8  3439               	retlw	57
  3341  0EA9  3402               	retlw	2
  3342  0EAA  3436               	retlw	54
  3343  0EAB  3402               	retlw	2
  3344  0EAC  3433               	retlw	51
  3345  0EAD  3402               	retlw	2
  3346  0EAE  3430               	retlw	48
  3347  0EAF  3402               	retlw	2
  3348  0EB0  342E               	retlw	46
  3349  0EB1  3402               	retlw	2
  3350  0EB2  342B               	retlw	43
  3351  0EB3  3402               	retlw	2
  3352  0EB4  3428               	retlw	40
  3353  0EB5  3402               	retlw	2
  3354  0EB6  3425               	retlw	37
  3355  0EB7  3402               	retlw	2
  3356  0EB8  3423               	retlw	35
  3357  0EB9  3402               	retlw	2
  3358  0EBA  3420               	retlw	32
  3359  0EBB  3402               	retlw	2
  3360  0EBC  341E               	retlw	30
  3361  0EBD  3402               	retlw	2
  3362  0EBE  341B               	retlw	27
  3363  0EBF  3402               	retlw	2
  3364  0EC0  3418               	retlw	24
  3365  0EC1  3402               	retlw	2
  3366  0EC2  3416               	retlw	22
  3367  0EC3  3402               	retlw	2
  3368  0EC4  3413               	retlw	19
  3369  0EC5  3402               	retlw	2
  3370  0EC6  3411               	retlw	17
  3371  0EC7  3402               	retlw	2
  3372  0EC8  340E               	retlw	14
  3373  0EC9  3402               	retlw	2
  3374  0ECA  340C               	retlw	12
  3375  0ECB  3402               	retlw	2
  3376  0ECC  340A               	retlw	10
  3377  0ECD  3402               	retlw	2
  3378  0ECE  3407               	retlw	7
  3379  0ECF  3402               	retlw	2
  3380  0ED0  3405               	retlw	5
  3381  0ED1  3402               	retlw	2
  3382  0ED2  3402               	retlw	2
  3383  0ED3  3402               	retlw	2
  3384  0ED4  3400               	retlw	0
  3385  0ED5  3402               	retlw	2
  3386  0ED6  34FE               	retlw	254
  3387  0ED7  3401               	retlw	1
  3388  0ED8  34FB               	retlw	251
  3389  0ED9  3401               	retlw	1
  3390  0EDA  34F9               	retlw	249
  3391  0EDB  3401               	retlw	1
  3392  0EDC  34F7               	retlw	247
  3393  0EDD  3401               	retlw	1
  3394  0EDE  34F5               	retlw	245
  3395  0EDF  3401               	retlw	1
  3396  0EE0  34F2               	retlw	242
  3397  0EE1  3401               	retlw	1
  3398  0EE2  34F0               	retlw	240
  3399  0EE3  3401               	retlw	1
  3400  0EE4  34EE               	retlw	238
  3401  0EE5  3401               	retlw	1
  3402  0EE6  34EC               	retlw	236
  3403  0EE7  3401               	retlw	1
  3404  0EE8  34EA               	retlw	234
  3405  0EE9  3401               	retlw	1
  3406  0EEA  34E8               	retlw	232
  3407  0EEB  3401               	retlw	1
  3408  0EEC  34E6               	retlw	230
  3409  0EED  3401               	retlw	1
  3410  0EEE  34E3               	retlw	227
  3411  0EEF  3401               	retlw	1
  3412  0EF0  34E1               	retlw	225
  3413  0EF1  3401               	retlw	1
  3414  0EF2  34DF               	retlw	223
  3415  0EF3  3401               	retlw	1
  3416  0EF4  34DD               	retlw	221
  3417  0EF5  3401               	retlw	1
  3418  0EF6  34DB               	retlw	219
  3419  0EF7  3401               	retlw	1
  3420  0EF8  34D9               	retlw	217
  3421  0EF9  3401               	retlw	1
  3422  0EFA  34D7               	retlw	215
  3423  0EFB  3401               	retlw	1
  3424  0EFC  34D5               	retlw	213
  3425  0EFD  3401               	retlw	1
  3426  0EFE  34D3               	retlw	211
  3427  0EFF  3401               	retlw	1
  3428  0F00  34D2               	retlw	210
  3429  0F01  3401               	retlw	1
  3430  0F02  34D0               	retlw	208
  3431  0F03  3401               	retlw	1
  3432  0F04  34CE               	retlw	206
  3433  0F05  3401               	retlw	1
  3434  0F06  34CC               	retlw	204
  3435  0F07  3401               	retlw	1
  3436  0F08  34CA               	retlw	202
  3437  0F09  3401               	retlw	1
  3438  0F0A  34C8               	retlw	200
  3439  0F0B  3401               	retlw	1
  3440  0F0C  34C6               	retlw	198
  3441  0F0D  3401               	retlw	1
  3442  0F0E  34C4               	retlw	196
  3443  0F0F  3401               	retlw	1
  3444  0F10  34C3               	retlw	195
  3445  0F11  3401               	retlw	1
  3446  0F12  34C1               	retlw	193
  3447  0F13  3401               	retlw	1
  3448  0F14  34BF               	retlw	191
  3449  0F15  3401               	retlw	1
  3450  0F16  34BD               	retlw	189
  3451  0F17  3401               	retlw	1
  3452  0F18  34BC               	retlw	188
  3453  0F19  3401               	retlw	1
  3454  0F1A  34BA               	retlw	186
  3455  0F1B  3401               	retlw	1
  3456  0F1C  34B8               	retlw	184
  3457  0F1D  3401               	retlw	1
  3458  0F1E  34B6               	retlw	182
  3459  0F1F  3401               	retlw	1
  3460  0F20  34B5               	retlw	181
  3461  0F21  3401               	retlw	1
  3462  0F22  34B3               	retlw	179
  3463  0F23  3401               	retlw	1
  3464  0F24  34B1               	retlw	177
  3465  0F25  3401               	retlw	1
  3466  0F26  34B0               	retlw	176
  3467  0F27  3401               	retlw	1
  3468  0F28  34AE               	retlw	174
  3469  0F29  3401               	retlw	1
  3470  0F2A  34AC               	retlw	172
  3471  0F2B  3401               	retlw	1
  3472  0F2C  34AB               	retlw	171
  3473  0F2D  3401               	retlw	1
  3474  0F2E  34A9               	retlw	169
  3475  0F2F  3401               	retlw	1
  3476  0F30  34A8               	retlw	168
  3477  0F31  3401               	retlw	1
  3478  0F32  34A6               	retlw	166
  3479  0F33  3401               	retlw	1
  3480  0F34  34A4               	retlw	164
  3481  0F35  3401               	retlw	1
  3482  0F36  34A3               	retlw	163
  3483  0F37  3401               	retlw	1
  3484  0F38  34A1               	retlw	161
  3485  0F39  3401               	retlw	1
  3486  0F3A  34A0               	retlw	160
  3487  0F3B  3401               	retlw	1
  3488  0F3C  349E               	retlw	158
  3489  0F3D  3401               	retlw	1
  3490  0F3E  349D               	retlw	157
  3491  0F3F  3401               	retlw	1
  3492  0F40  349B               	retlw	155
  3493  0F41  3401               	retlw	1
  3494  0F42  349A               	retlw	154
  3495  0F43  3401               	retlw	1
  3496  0F44  3498               	retlw	152
  3497  0F45  3401               	retlw	1
  3498  0F46  3497               	retlw	151
  3499  0F47  3401               	retlw	1
  3500  0F48  3495               	retlw	149
  3501  0F49  3401               	retlw	1
  3502  0F4A  3494               	retlw	148
  3503  0F4B  3401               	retlw	1
  3504  0F4C  3492               	retlw	146
  3505  0F4D  3401               	retlw	1
  3506  0F4E  3491               	retlw	145
  3507  0F4F  3401               	retlw	1
  3508  0F50  3490               	retlw	144
  3509  0F51  3401               	retlw	1
  3510  0F52  348E               	retlw	142
  3511  0F53  3401               	retlw	1
  3512  0F54  348D               	retlw	141
  3513  0F55  3401               	retlw	1
  3514  0F56  348B               	retlw	139
  3515  0F57  3401               	retlw	1
  3516  0F58  348A               	retlw	138
  3517  0F59  3401               	retlw	1
  3518  0F5A  3489               	retlw	137
  3519  0F5B  3401               	retlw	1
  3520  0F5C  3487               	retlw	135
  3521  0F5D  3401               	retlw	1
  3522  0F5E  3486               	retlw	134
  3523  0F5F  3401               	retlw	1
  3524  0F60  3485               	retlw	133
  3525  0F61  3401               	retlw	1
  3526  0F62  3483               	retlw	131
  3527  0F63  3401               	retlw	1
  3528  0F64  3482               	retlw	130
  3529  0F65  3401               	retlw	1
  3530  0F66  3481               	retlw	129
  3531  0F67  3401               	retlw	1
  3532  0F68  347F               	retlw	127
  3533  0F69  3401               	retlw	1
  3534  0F6A  347E               	retlw	126
  3535  0F6B  3401               	retlw	1
  3536  0F6C  347D               	retlw	125
  3537  0F6D  3401               	retlw	1
  3538  0F6E  347B               	retlw	123
  3539  0F6F  3401               	retlw	1
  3540  0F70  347A               	retlw	122
  3541  0F71  3401               	retlw	1
  3542  0F72  3479               	retlw	121
  3543  0F73  3401               	retlw	1
  3544  0F74  3478               	retlw	120
  3545  0F75  3401               	retlw	1
  3546  0F76  3476               	retlw	118
  3547  0F77  3401               	retlw	1
  3548  0F78  3475               	retlw	117
  3549  0F79  3401               	retlw	1
  3550  0F7A  3474               	retlw	116
  3551  0F7B  3401               	retlw	1
  3552  0F7C  3473               	retlw	115
  3553  0F7D  3401               	retlw	1
  3554  0F7E  3471               	retlw	113
  3555  0F7F  3401               	retlw	1
  3556  0F80  3470               	retlw	112
  3557  0F81  3401               	retlw	1
  3558  0F82  346F               	retlw	111
  3559  0F83  3401               	retlw	1
  3560  0F84  346E               	retlw	110
  3561  0F85  3401               	retlw	1
  3562                           
  3563                           ;initializer for _mod5
  3564  0F86  3400               	retlw	0
  3565  0F87  3400               	retlw	0
  3566  0F88  340A               	retlw	10
  3567  0F89  3400               	retlw	0
  3568  0F8A  3414               	retlw	20
  3569  0F8B  3400               	retlw	0
  3570  0F8C  341E               	retlw	30
  3571  0F8D  3400               	retlw	0
  3572  0F8E  3428               	retlw	40
  3573  0F8F  3400               	retlw	0
  3574  0F90  3432               	retlw	50
  3575  0F91  3400               	retlw	0
  3576  0F92  343A               	retlw	58
  3577  0F93  3400               	retlw	0
  3578  0F94  3442               	retlw	66
  3579  0F95  3400               	retlw	0
  3580  0F96  344A               	retlw	74
  3581  0F97  3400               	retlw	0
  3582  0F98  3450               	retlw	80
  3583  0F99  3400               	retlw	0
  3584  0F9A  3456               	retlw	86
  3585  0F9B  3400               	retlw	0
  3586  0F9C  345B               	retlw	91
  3587  0F9D  3400               	retlw	0
  3588  0F9E  345F               	retlw	95
  3589  0F9F  3400               	retlw	0
  3590  0FA0  3461               	retlw	97
  3591  0FA1  3400               	retlw	0
  3592  0FA2  3463               	retlw	99
  3593  0FA3  3400               	retlw	0
  3594  0FA4  3464               	retlw	100
  3595  0FA5  3400               	retlw	0
  3596  0FA6  3463               	retlw	99
  3597  0FA7  3400               	retlw	0
  3598  0FA8  3461               	retlw	97
  3599  0FA9  3400               	retlw	0
  3600  0FAA  345F               	retlw	95
  3601  0FAB  3400               	retlw	0
  3602  0FAC  345B               	retlw	91
  3603  0FAD  3400               	retlw	0
  3604  0FAE  3456               	retlw	86
  3605  0FAF  3400               	retlw	0
  3606  0FB0  3450               	retlw	80
  3607  0FB1  3400               	retlw	0
  3608  0FB2  344A               	retlw	74
  3609  0FB3  3400               	retlw	0
  3610  0FB4  3442               	retlw	66
  3611  0FB5  3400               	retlw	0
  3612  0FB6  343A               	retlw	58
  3613  0FB7  3400               	retlw	0
  3614  0FB8  3432               	retlw	50
  3615  0FB9  3400               	retlw	0
  3616  0FBA  3428               	retlw	40
  3617  0FBB  3400               	retlw	0
  3618  0FBC  341E               	retlw	30
  3619  0FBD  3400               	retlw	0
  3620  0FBE  3414               	retlw	20
  3621  0FBF  3400               	retlw	0
  3622  0FC0  340A               	retlw	10
  3623  0FC1  3400               	retlw	0
  3624  0FC2  3400               	retlw	0
  3625  0FC3  3400               	retlw	0
  3626  0FC4  34F6               	retlw	246
  3627  0FC5  34FF               	retlw	255
  3628  0FC6  34EC               	retlw	236
  3629  0FC7  34FF               	retlw	255
  3630  0FC8  34E2               	retlw	226
  3631  0FC9  34FF               	retlw	255
  3632  0FCA  34D8               	retlw	216
  3633  0FCB  34FF               	retlw	255
  3634  0FCC  34CE               	retlw	206
  3635  0FCD  34FF               	retlw	255
  3636  0FCE  34C6               	retlw	198
  3637  0FCF  34FF               	retlw	255
  3638  0FD0  34BE               	retlw	190
  3639  0FD1  34FF               	retlw	255
  3640  0FD2  34B6               	retlw	182
  3641  0FD3  34FF               	retlw	255
  3642  0FD4  34B0               	retlw	176
  3643  0FD5  34FF               	retlw	255
  3644  0FD6  34AA               	retlw	170
  3645  0FD7  34FF               	retlw	255
  3646  0FD8  34A5               	retlw	165
  3647  0FD9  34FF               	retlw	255
  3648  0FDA  34A1               	retlw	161
  3649  0FDB  34FF               	retlw	255
  3650  0FDC  349F               	retlw	159
  3651  0FDD  34FF               	retlw	255
  3652  0FDE  349D               	retlw	157
  3653  0FDF  34FF               	retlw	255
  3654  0FE0  349C               	retlw	156
  3655  0FE1  34FF               	retlw	255
  3656  0FE2  349D               	retlw	157
  3657  0FE3  34FF               	retlw	255
  3658  0FE4  349F               	retlw	159
  3659  0FE5  34FF               	retlw	255
  3660  0FE6  34A1               	retlw	161
  3661  0FE7  34FF               	retlw	255
  3662  0FE8  34A5               	retlw	165
  3663  0FE9  34FF               	retlw	255
  3664  0FEA  34AA               	retlw	170
  3665  0FEB  34FF               	retlw	255
  3666  0FEC  34B0               	retlw	176
  3667  0FED  34FF               	retlw	255
  3668  0FEE  34B6               	retlw	182
  3669  0FEF  34FF               	retlw	255
  3670  0FF0  34BE               	retlw	190
  3671  0FF1  34FF               	retlw	255
  3672  0FF2  34C6               	retlw	198
  3673  0FF3  34FF               	retlw	255
  3674  0FF4  34CE               	retlw	206
  3675  0FF5  34FF               	retlw	255
  3676  0FF6  34D8               	retlw	216
  3677  0FF7  34FF               	retlw	255
  3678  0FF8  34E2               	retlw	226
  3679  0FF9  34FF               	retlw	255
  3680  0FFA  34EC               	retlw	236
  3681  0FFB  34FF               	retlw	255
  3682  0FFC  34F6               	retlw	246
  3683  0FFD  34FF               	retlw	255
  3684  0FFE  3400               	retlw	0
  3685  0FFF  3400               	retlw	0
  3686  000B                     _INTCONbits	set	11
  3687  000E                     _PORTCbits	set	14
  3688  000F                     _PORTDbits	set	15
  3689  0010                     _PORTEbits	set	16
  3690  001B                     _PR2	set	27
  3691  001C                     _T2CONbits	set	28
  3692  009D                     _ADCON0bits	set	157
  3693  009E                     _ADCON1bits	set	158
  3694  009C                     _ADRESH	set	156
  3695  009B                     _ADRESL	set	155
  3696  0095                     _OPTION_REGbits	set	149
  3697  0099                     _OSCCONbits	set	153
  3698  008D                     _TRISBbits	set	141
  3699  008E                     _TRISCbits	set	142
  3700  008F                     _TRISDbits	set	143
  3701  0090                     _TRISEbits	set	144
  3702  011D                     _APFCONbits	set	285
  3703  010D                     _LATBbits	set	269
  3704  010F                     _LATDbits	set	271
  3705  0190                     _ANSELEbits	set	400
  3706  0192                     _PMADRH	set	402
  3707  0191                     _PMADRL	set	401
  3708  0195                     _PMCON1bits	set	405
  3709  0196                     _PMCON2	set	406
  3710  0194                     _PMDATH	set	404
  3711  0193                     _PMDATL	set	403
  3712  0291                     _CCPR1	set	657
  3713  0298                     _CCPR2	set	664
  3714  0293                     _CCP1CONbits	set	659
  3715  029A                     _CCP2CONbits	set	666
  3716  029D                     _CCPTMRS0	set	669
  3717  029E                     _CCPTMRS1	set	670
  3718  029F                     _CCPTMRS2	set	671
  3719  0311                     _CCPR3	set	785
  3720  0318                     _CCPR4	set	792
  3721  031C                     _CCPR5	set	796
  3722  0313                     _CCP3CONbits	set	787
  3723  031A                     _CCP4CONbits	set	794
  3724  031E                     _CCP5CONbits	set	798
  3725  030C                     _TRISFbits	set	780
  3726  030D                     _TRISGbits	set	781
  3727  038C                     _LATFbits	set	908
  3728  038D                     _LATGbits	set	909
  3729  040C                     _ANSELFbits	set	1036
  3730  061A                     _CCPR9	set	1562
  3731  061F                     _CCP10CONbits	set	1567
  3732  0613                     _CCP6CONbits	set	1555
  3733  0616                     _CCP7CONbits	set	1558
  3734  0619                     _CCP8CONbits	set	1561
  3735  061C                     _CCP9CONbits	set	1564
  3736                           
  3737                           ; #config settings
  3738  0000                     
  3739                           	psect	cinit
  3740  0149                     start_initialization:	
  3741  0149                     __initialization:		;BIGRAM
  3742                           
  3743                           ; Clear objects allocated to COMMON
  3744  0149  01F9               	clrf	__pbssCOMMON& (0+127)
  3745  014A  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3746  014B  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  3747  014C  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  3748                           
  3749                           ; Clear objects allocated to BANK1
  3750  014D  30BF               	movlw	low __pbssBANK1
  3751  014E  0084               	movwf	4
  3752  014F  3000               	movlw	high __pbssBANK1
  3753  0150  0085               	movwf	5
  3754  0151  301E               	movlw	30
  3755  0152  00FE               	movwf	btemp
  3756  0153  3000               	movlw	0
  3757  0154  00FF               	movwf	btemp+1
  3758  0155  319F  2707  3181   	fcall	clear_ram0
  3759                           
  3760                           ; Clear objects allocated to BANK2
  3761  0158  3020               	movlw	low __pbssBANK2
  3762  0159  0084               	movwf	4
  3763  015A  3001               	movlw	high __pbssBANK2
  3764  015B  0085               	movwf	5
  3765  015C  3029               	movlw	41
  3766  015D  00FE               	movwf	btemp
  3767  015E  3000               	movlw	0
  3768  015F  00FF               	movwf	btemp+1
  3769  0160  319F  2707  3181   	fcall	clear_ram0
  3770                           
  3771                           ; Clear objects allocated to BANK3
  3772  0163  30A0               	movlw	low __pbssBANK3
  3773  0164  0084               	movwf	4
  3774  0165  3001               	movlw	high __pbssBANK3
  3775  0166  0085               	movwf	5
  3776  0167  3040               	movlw	64
  3777  0168  00FE               	movwf	btemp
  3778  0169  3000               	movlw	0
  3779  016A  00FF               	movwf	btemp+1
  3780  016B  319F  2707  3181   	fcall	clear_ram0
  3781                           
  3782                           ; Clear objects allocated to BANK10
  3783  016E  3020               	movlw	low __pbssBANK10
  3784  016F  0084               	movwf	4
  3785  0170  3005               	movlw	high __pbssBANK10
  3786  0171  0085               	movwf	5
  3787  0172  3040               	movlw	64
  3788  0173  00FE               	movwf	btemp
  3789  0174  3000               	movlw	0
  3790  0175  00FF               	movwf	btemp+1
  3791  0176  319F  2707  3181   	fcall	clear_ram0
  3792                           
  3793                           ; Initialize objects allocated to BIGRAM
  3794  0179  3088               	movlw	low __pidataBIGRAM
  3795  017A  0084               	movwf	4
  3796  017B  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3797  017C  0085               	movwf	5
  3798  017D  3078               	movlw	low (0+9080)
  3799  017E  0086               	movwf	6
  3800  017F  3023               	movlw	high (0+9080)
  3801  0180  0087               	movwf	7
  3802  0181  3002               	movlw	2
  3803  0182  00FF               	movwf	btemp+1
  3804  0183  3078               	movlw	120
  3805  0184  319E  26FB  3181   	fcall	init_ram
  3806                           
  3807                           ; Initialize objects allocated to COMMON
  3808  0187  3180  2003  3181   	fcall	__pidataCOMMON	;fetch initializer
  3809  018A  00FD               	movwf	__pdataCOMMON& (0+127)
  3810                           
  3811                           ; Initialize objects allocated to BANK0
  3812  018B  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
  3813  018E  00EF               	movwf	__pdataBANK0& (0+127)
  3814                           
  3815                           ; Initialize objects allocated to BANK1
  3816  018F  3034               	movlw	low __pidataBANK1
  3817  0190  0084               	movwf	4
  3818  0191  309F               	movlw	(high __pidataBANK1)| (0+128)
  3819  0192  0085               	movwf	5
  3820  0193  30DD               	movlw	low __pdataBANK1
  3821  0194  0086               	movwf	6
  3822  0195  3000               	movlw	high __pdataBANK1
  3823  0196  0087               	movwf	7
  3824  0197  3000               	movlw	0
  3825  0198  00FF               	movwf	btemp+1
  3826  0199  3013               	movlw	19
  3827  019A  319E  26FB  3181   	fcall	init_ram
  3828                           
  3829                           ; Initialize objects allocated to BANK2
  3830  019D  3047               	movlw	low __pidataBANK2
  3831  019E  0084               	movwf	4
  3832  019F  309F               	movlw	(high __pidataBANK2)| (0+128)
  3833  01A0  0085               	movwf	5
  3834  01A1  3049               	movlw	low __pdataBANK2
  3835  01A2  0086               	movwf	6
  3836  01A3  3001               	movlw	high __pdataBANK2
  3837  01A4  0087               	movwf	7
  3838  01A5  3000               	movlw	0
  3839  01A6  00FF               	movwf	btemp+1
  3840  01A7  3015               	movlw	21
  3841  01A8  319E  26FB  3181   	fcall	init_ram
  3842                           
  3843                           ; Initialize objects allocated to BANK4
  3844  01AB  3005               	movlw	low __pidataBANK4
  3845  01AC  0084               	movwf	4
  3846  01AD  3092               	movlw	(high __pidataBANK4)| (0+128)
  3847  01AE  0085               	movwf	5
  3848  01AF  3020               	movlw	low __pdataBANK4
  3849  01B0  0086               	movwf	6
  3850  01B1  3002               	movlw	high __pdataBANK4
  3851  01B2  0087               	movwf	7
  3852  01B3  3000               	movlw	0
  3853  01B4  00FF               	movwf	btemp+1
  3854  01B5  303A               	movlw	58
  3855  01B6  319E  26FB  3181   	fcall	init_ram
  3856                           
  3857                           ; Initialize objects allocated to BANK5
  3858  01B9  30CB               	movlw	low __pidataBANK5
  3859  01BA  0084               	movwf	4
  3860  01BB  3091               	movlw	(high __pidataBANK5)| (0+128)
  3861  01BC  0085               	movwf	5
  3862  01BD  30A0               	movlw	low __pdataBANK5
  3863  01BE  0086               	movwf	6
  3864  01BF  3002               	movlw	high __pdataBANK5
  3865  01C0  0087               	movwf	7
  3866  01C1  3000               	movlw	0
  3867  01C2  00FF               	movwf	btemp+1
  3868  01C3  303A               	movlw	58
  3869  01C4  319E  26FB  3181   	fcall	init_ram
  3870                           
  3871                           ; Initialize objects allocated to BANK6
  3872  01C7  3091               	movlw	low __pidataBANK6
  3873  01C8  0084               	movwf	4
  3874  01C9  3091               	movlw	(high __pidataBANK6)| (0+128)
  3875  01CA  0085               	movwf	5
  3876  01CB  3020               	movlw	low __pdataBANK6
  3877  01CC  0086               	movwf	6
  3878  01CD  3003               	movlw	high __pdataBANK6
  3879  01CE  0087               	movwf	7
  3880  01CF  3000               	movlw	0
  3881  01D0  00FF               	movwf	btemp+1
  3882  01D1  303A               	movlw	58
  3883  01D2  319E  26FB  3181   	fcall	init_ram
  3884                           
  3885                           ; Initialize objects allocated to BANK7
  3886  01D5  30D8               	movlw	low __pidataBANK7
  3887  01D6  0084               	movwf	4
  3888  01D7  3094               	movlw	(high __pidataBANK7)| (0+128)
  3889  01D8  0085               	movwf	5
  3890  01D9  30A0               	movlw	low __pdataBANK7
  3891  01DA  0086               	movwf	6
  3892  01DB  3003               	movlw	high __pdataBANK7
  3893  01DC  0087               	movwf	7
  3894  01DD  3000               	movlw	0
  3895  01DE  00FF               	movwf	btemp+1
  3896  01DF  3050               	movlw	80
  3897  01E0  319E  26FB  3181   	fcall	init_ram
  3898                           
  3899                           ; Initialize objects allocated to BANK8
  3900  01E3  3088               	movlw	low __pidataBANK8
  3901  01E4  0084               	movwf	4
  3902  01E5  3094               	movlw	(high __pidataBANK8)| (0+128)
  3903  01E6  0085               	movwf	5
  3904  01E7  3020               	movlw	low __pdataBANK8
  3905  01E8  0086               	movwf	6
  3906  01E9  3004               	movlw	high __pdataBANK8
  3907  01EA  0087               	movwf	7
  3908  01EB  3000               	movlw	0
  3909  01EC  00FF               	movwf	btemp+1
  3910  01ED  3050               	movlw	80
  3911  01EE  319E  26FB  3181   	fcall	init_ram
  3912                           
  3913                           ; Initialize objects allocated to BANK9
  3914  01F1  3057               	movlw	low __pidataBANK9
  3915  01F2  0084               	movwf	4
  3916  01F3  3091               	movlw	(high __pidataBANK9)| (0+128)
  3917  01F4  0085               	movwf	5
  3918  01F5  30A0               	movlw	low __pdataBANK9
  3919  01F6  0086               	movwf	6
  3920  01F7  3004               	movlw	high __pdataBANK9
  3921  01F8  0087               	movwf	7
  3922  01F9  3000               	movlw	0
  3923  01FA  00FF               	movwf	btemp+1
  3924  01FB  303A               	movlw	58
  3925  01FC  319E  26FB         	fcall	init_ram
  3926  01FE                     end_of_initialization:	
  3927                           ;End of C runtime variable initialization code
  3928                           
  3929  01FE                     __end_of__initialization:	
  3930  01FE  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3931  01FF  0020               	movlb	0
  3932  0200  3182  2A02         	ljmp	_main	;jump to C main() function
  3933                           
  3934                           	psect	bssCOMMON
  3935  0079                     __pbssCOMMON:	
  3936  0079                     _tap_timer:	
  3937  0079                     	ds	4
  3938                           
  3939                           	psect	dataCOMMON
  3940  007D                     __pdataCOMMON:	
  3941  007D                     _longTap_state:	
  3942  007D                     	ds	1
  3943                           
  3944                           	psect	dataBANK0
  3945  006F                     __pdataBANK0:	
  3946  006F                     _switchBypass_state:	
  3947  006F                     	ds	1
  3948                           
  3949                           	psect	bssBANK1
  3950  00BF                     __pbssBANK1:	
  3951  00BF                     _sub_timer:	
  3952  00BF                     	ds	4
  3953  00C3                     _timer:	
  3954  00C3                     	ds	4
  3955  00C7                     _feedback_timer:	
  3956  00C7                     	ds	2
  3957  00C9                     _knob_1_pos:	
  3958  00C9                     	ds	2
  3959  00CB                     _knob_2_pos:	
  3960  00CB                     	ds	2
  3961  00CD                     _knob_3_pos:	
  3962  00CD                     	ds	2
  3963  00CF                     _longTap_timer:	
  3964  00CF                     	ds	2
  3965  00D1                     _mod_counter:	
  3966  00D1                     	ds	2
  3967  00D3                     _switchBypass_pressed:	
  3968  00D3                     	ds	2
  3969  00D5                     _bypass_turning_on:	
  3970  00D5                     	ds	1
  3971  00D6                     _feedback_start:	
  3972  00D6                     	ds	1
  3973  00D7                     _longTap_start:	
  3974  00D7                     	ds	1
  3975  00D8                     _mode2_state:	
  3976  00D8                     	ds	1
  3977  00D9                     _preset_blink:	
  3978  00D9                     	ds	1
  3979  00DA                     _preset_programmning_on:	
  3980  00DA                     	ds	1
  3981  00DB                     _suspend_blink:	
  3982  00DB                     	ds	1
  3983  00DC                     _switchTap_pressed:	
  3984  00DC                     	ds	1
  3985                           
  3986                           	psect	dataBANK1
  3987  00DD                     __pdataBANK1:	
  3988  00DD                     _baseline_delay_time:	
  3989  00DD                     	ds	4
  3990  00E1                     _delay_time:	
  3991  00E1                     	ds	4
  3992  00E5                     _bottom_push_state:	
  3993  00E5                     	ds	2
  3994  00E7                     _long_press_limit:	
  3995  00E7                     	ds	2
  3996  00E9                     _tap_iteration:	
  3997  00E9                     	ds	2
  3998  00EB                     _top_push_state:	
  3999  00EB                     	ds	2
  4000  00ED                     _blink_rate:	
  4001  00ED                     	ds	1
  4002  00EE                     _num_taps:	
  4003  00EE                     	ds	1
  4004  00EF                     _switchTap_state:	
  4005  00EF                     	ds	1
  4006                           
  4007                           	psect	bssBANK2
  4008  0120                     __pbssBANK2:	
  4009  0120                     _ledState:	
  4010  0120                     	ds	4
  4011  0124                     _mod_timer:	
  4012  0124                     	ds	4
  4013  0128                     _tap_total:	
  4014  0128                     	ds	4
  4015  012C                     wait_ms@timel:	
  4016  012C                     	ds	4
  4017  0130                     _SPI_Value:	
  4018  0130                     	ds	2
  4019  0132                     _debounce_bypass:	
  4020  0132                     	ds	2
  4021  0134                     _debounce_count:	
  4022  0134                     	ds	2
  4023  0136                     _debounce_mode1:	
  4024  0136                     	ds	2
  4025  0138                     _debounce_mode2:	
  4026  0138                     	ds	2
  4027  013A                     _delay_counter:	
  4028  013A                     	ds	2
  4029  013C                     _delayfound:	
  4030  013C                     	ds	2
  4031  013E                     _knob_4_pos:	
  4032  013E                     	ds	2
  4033  0140                     _knob_5_pos:	
  4034  0140                     	ds	2
  4035  0142                     _mod_value:	
  4036  0142                     	ds	2
  4037  0144                     _switchBypass_toggle:	
  4038  0144                     	ds	2
  4039  0146                     _iCnt:	
  4040  0146                     	ds	1
  4041  0147                     _mode1_state:	
  4042  0147                     	ds	1
  4043  0148                     _switchTap_toggle:	
  4044  0148                     	ds	1
  4045                           
  4046                           	psect	dataBANK2
  4047  0149                     __pdataBANK2:	
  4048  0149                     _blink_delay:	
  4049  0149                     	ds	2
  4050  014B                     _delay_time_changed:	
  4051  014B                     	ds	2
  4052  014D                     _feedback_state:	
  4053  014D                     	ds	2
  4054  014F                     _knob1_prev:	
  4055  014F                     	ds	2
  4056  0151                     _knob2_prev:	
  4057  0151                     	ds	2
  4058  0153                     _knob3_prev:	
  4059  0153                     	ds	2
  4060  0155                     _knob4_prev:	
  4061  0155                     	ds	2
  4062  0157                     _knob5_prev:	
  4063  0157                     	ds	2
  4064  0159                     _mod_delay_time:	
  4065  0159                     	ds	2
  4066  015B                     _switchBypass_up:	
  4067  015B                     	ds	2
  4068  015D                     _blink_state:	
  4069  015D                     	ds	1
  4070                           
  4071                           	psect	bssBANK3
  4072  01A0                     __pbssBANK3:	
  4073  01A0                     _tap:	
  4074  01A0                     	ds	44
  4075  01CC                     _tap_history:	
  4076  01CC                     	ds	20
  4077                           
  4078                           	psect	dataBANK4
  4079  0220                     __pdataBANK4:	
  4080  0220                     _mod2:	
  4081  0220                     	ds	58
  4082                           
  4083                           	psect	dataBANK5
  4084  02A0                     __pdataBANK5:	
  4085  02A0                     _mod3:	
  4086  02A0                     	ds	58
  4087                           
  4088                           	psect	dataBANK6
  4089  0320                     __pdataBANK6:	
  4090  0320                     _mod4:	
  4091  0320                     	ds	58
  4092                           
  4093                           	psect	dataBANK7
  4094  03A0                     __pdataBANK7:	
  4095  03A0                     _B25k:	
  4096  03A0                     	ds	80
  4097                           
  4098                           	psect	dataBANK8
  4099  0420                     __pdataBANK8:	
  4100  0420                     _iB25k:	
  4101  0420                     	ds	80
  4102                           
  4103                           	psect	dataBANK9
  4104  04A0                     __pdataBANK9:	
  4105  04A0                     _mod1:	
  4106  04A0                     	ds	58
  4107                           
  4108                           	psect	bssBANK10
  4109  0520                     __pbssBANK10:	
  4110  0520                     _myBuf:	
  4111  0520                     	ds	64
  4112                           
  4113                           	psect	clrtext
  4114  1F07                     clear_ram0:	
  4115                           ;	Called with FSR0 containing the base address, and
  4116                           ;	btemp/btemp+1 has the size to clear
  4117                           
  4118  1F07  0064               	clrwdt	;clear the watchdog before getting into this loop
  4119  1F08                     clrloop0:	
  4120  1F08  0180               	clrf	0	;clear RAM location pointed to by FSR
  4121  1F09  3101               	addfsr 0,1
  4122  1F0A  3001               	movlw	1
  4123  1F0B  02FE               	subwf	126,f
  4124  1F0C  3000               	movlw	0
  4125  1F0D  3BFF               	subwfb	127,f
  4126  1F0E  087F               	movf	127,w
  4127  1F0F  047E               	iorwf	126,w
  4128  1F10  1903               	btfsc	3,2
  4129  1F11  3400               	retlw	0	;all done for this memory range, return
  4130  1F12  2F08               	goto	clrloop0	;have we reached the end yet?
  4131                           
  4132                           	psect	inittext
  4133  1EFB                     init_ram:	
  4134  1EFB  00FE               	movwf	126
  4135  1EFC                     initloop:	
  4136  1EFC  0012               	moviw fsr0++
  4137  1EFD  001E               	movwi fsr1++
  4138  1EFE  3001               	movlw	1
  4139  1EFF  02FE               	subwf	126,f
  4140  1F00  3000               	movlw	0
  4141  1F01  3BFF               	subwfb	127,f
  4142  1F02  087F               	movf	127,w
  4143  1F03  047E               	iorwf	126,w
  4144  1F04  1903               	btfsc	3,2
  4145  1F05  3400               	retlw	0
  4146  1F06  2EFC               	goto	initloop
  4147                           
  4148                           	psect	cstackBANK1
  4149  00A0                     __pcstackBANK1:	
  4150  00A0                     ___fttol@sign1:	
  4151                           
  4152                           ; 1 bytes @ 0x0
  4153  00A0                     	ds	1
  4154  00A1                     ___fttol@lval:	
  4155                           
  4156                           ; 4 bytes @ 0x1
  4157  00A1                     	ds	4
  4158  00A5                     ___fttol@exp1:	
  4159                           
  4160                           ; 1 bytes @ 0x5
  4161  00A5                     	ds	1
  4162  00A6                     ?_set_subdivision:	
  4163  00A6                     set_subdivision@x:	
  4164                           ; 2 bytes @ 0x6
  4165                           
  4166                           
  4167                           ; 2 bytes @ 0x6
  4168  00A6                     	ds	2
  4169  00A8                     set_subdivision@y:	
  4170                           
  4171                           ; 2 bytes @ 0x8
  4172  00A8                     	ds	2
  4173  00AA                     ??_main:	
  4174                           
  4175                           ; 1 bytes @ 0xA
  4176  00AA                     	ds	15
  4177  00B9                     main@adjusted_pot_value:	
  4178                           
  4179                           ; 2 bytes @ 0x19
  4180  00B9                     	ds	2
  4181  00BB                     main@i:	
  4182                           
  4183                           ; 2 bytes @ 0x1B
  4184  00BB                     	ds	2
  4185  00BD                     main@i_315:	
  4186                           
  4187                           ; 2 bytes @ 0x1D
  4188  00BD                     	ds	2
  4189                           
  4190                           	psect	cstackCOMMON
  4191  0070                     __pcstackCOMMON:	
  4192  0070                     ?_ConfigureOscillator:	
  4193  0070                     ?_InitApp:	
  4194                           ; 1 bytes @ 0x0
  4195                           
  4196  0070                     ?_InitializeTaps:	
  4197                           ; 1 bytes @ 0x0
  4198                           
  4199  0070                     ?_initSwitchBypass:	
  4200                           ; 1 bytes @ 0x0
  4201                           
  4202  0070                     ?_ReadSavedSettings:	
  4203                           ; 1 bytes @ 0x0
  4204                           
  4205  0070                     ?_read_bottom_tactile:	
  4206                           ; 1 bytes @ 0x0
  4207                           
  4208  0070                     ?_read_top_tactile:	
  4209                           ; 1 bytes @ 0x0
  4210                           
  4211  0070                     ?_update_mode:	
  4212                           ; 1 bytes @ 0x0
  4213                           
  4214  0070                     ?_showBootSequence:	
  4215                           ; 1 bytes @ 0x0
  4216                           
  4217  0070                     ?_updateSwitchBypass:	
  4218                           ; 1 bytes @ 0x0
  4219                           
  4220  0070                     ?_updateSwitchTap:	
  4221                           ; 1 bytes @ 0x0
  4222                           
  4223  0070                     ?_init_adc:	
  4224                           ; 1 bytes @ 0x0
  4225                           
  4226  0070                     ?_init_pwm:	
  4227                           ; 1 bytes @ 0x0
  4228                           
  4229  0070                     ?_init_timer2:	
  4230                           ; 1 bytes @ 0x0
  4231                           
  4232  0070                     ?_init_timer0:	
  4233                           ; 1 bytes @ 0x0
  4234                           
  4235  0070                     ?_getCurrentLEDState:	
  4236                           ; 1 bytes @ 0x0
  4237                           
  4238  0070                     ?_star_tactiles:	
  4239                           ; 1 bytes @ 0x0
  4240                           
  4241  0070                     ?_solidring_tactiles:	
  4242                           ; 1 bytes @ 0x0
  4243                           
  4244  0070                     ?_restoreLEDState:	
  4245                           ; 1 bytes @ 0x0
  4246                           
  4247  0070                     ?_isr:	
  4248                           ; 1 bytes @ 0x0
  4249                           
  4250  0070                     ?_main:	
  4251                           ; 1 bytes @ 0x0
  4252                           
  4253  0070                     ?i1_set_leds_top:	
  4254                           ; 1 bytes @ 0x0
  4255                           
  4256  0070                     i1set_leds_top@x:	
  4257                           ; 1 bytes @ 0x0
  4258                           
  4259                           
  4260                           ; 2 bytes @ 0x0
  4261  0070                     	ds	2
  4262  0072                     i1set_leds_top@ledState:	
  4263                           
  4264                           ; 2 bytes @ 0x2
  4265  0072                     	ds	2
  4266  0074                     ??_isr:	
  4267  0074                     ??i1_set_leds_top:	
  4268                           ; 1 bytes @ 0x4
  4269                           
  4270                           
  4271                           ; 1 bytes @ 0x4
  4272  0074                     	ds	5
  4273                           
  4274                           	psect	cstackBANK0
  4275  0020                     __pcstackBANK0:	
  4276  0020                     ?_set_leds_top:	
  4277  0020                     ??_ConfigureOscillator:	
  4278                           ; 1 bytes @ 0x0
  4279                           
  4280  0020                     ??_InitApp:	
  4281                           ; 1 bytes @ 0x0
  4282                           
  4283  0020                     ??_InitializeTaps:	
  4284                           ; 1 bytes @ 0x0
  4285                           
  4286  0020                     ??_update_mode:	
  4287                           ; 1 bytes @ 0x0
  4288                           
  4289  0020                     ??_init_adc:	
  4290                           ; 1 bytes @ 0x0
  4291                           
  4292  0020                     ??_init_pwm:	
  4293                           ; 1 bytes @ 0x0
  4294                           
  4295  0020                     ??_init_timer2:	
  4296                           ; 1 bytes @ 0x0
  4297                           
  4298  0020                     ??_init_timer0:	
  4299                           ; 1 bytes @ 0x0
  4300                           
  4301  0020                     ?_set_leds_bottom:	
  4302                           ; 1 bytes @ 0x0
  4303                           
  4304  0020                     ??_getCurrentLEDState:	
  4305                           ; 1 bytes @ 0x0
  4306                           
  4307  0020                     ??_restoreLEDState:	
  4308                           ; 1 bytes @ 0x0
  4309                           
  4310  0020                     ?_setLongTapState:	
  4311                           ; 1 bytes @ 0x0
  4312                           
  4313  0020                     ?_updateSwitchBypassState:	
  4314                           ; 1 bytes @ 0x0
  4315                           
  4316  0020                     ?_adc_convert:	
  4317                           ; 1 bytes @ 0x0
  4318                           
  4319  0020                     ?_FLASH_ReadWord:	
  4320                           ; 2 bytes @ 0x0
  4321                           
  4322  0020                     ?_getSwitchBypassState:	
  4323                           ; 2 bytes @ 0x0
  4324                           
  4325  0020                     ?___wmul:	
  4326                           ; 2 bytes @ 0x0
  4327                           
  4328  0020                     ?___awdiv:	
  4329                           ; 2 bytes @ 0x0
  4330                           
  4331  0020                     ?___ftpack:	
  4332                           ; 2 bytes @ 0x0
  4333                           
  4334  0020                     ?___ftneg:	
  4335                           ; 3 bytes @ 0x0
  4336                           
  4337  0020                     ?___lmul:	
  4338                           ; 3 bytes @ 0x0
  4339                           
  4340  0020                     FLASH_ReadWord@flashAddr:	
  4341                           ; 4 bytes @ 0x0
  4342                           
  4343  0020                     set_leds_top@x:	
  4344                           ; 2 bytes @ 0x0
  4345                           
  4346  0020                     set_leds_bottom@x:	
  4347                           ; 2 bytes @ 0x0
  4348                           
  4349  0020                     updateSwitchBypassState@state:	
  4350                           ; 2 bytes @ 0x0
  4351                           
  4352  0020                     setLongTapState@f_state:	
  4353                           ; 2 bytes @ 0x0
  4354                           
  4355  0020                     ___wmul@multiplier:	
  4356                           ; 2 bytes @ 0x0
  4357                           
  4358  0020                     ___awdiv@divisor:	
  4359                           ; 2 bytes @ 0x0
  4360                           
  4361  0020                     ___ftpack@arg:	
  4362                           ; 2 bytes @ 0x0
  4363                           
  4364  0020                     ___ftneg@f1:	
  4365                           ; 3 bytes @ 0x0
  4366                           
  4367  0020                     ___lmul@multiplier:	
  4368                           ; 3 bytes @ 0x0
  4369                           
  4370                           
  4371                           ; 4 bytes @ 0x0
  4372  0020                     	ds	1
  4373  0021                     InitializeTaps@itap:	
  4374                           
  4375                           ; 2 bytes @ 0x1
  4376  0021                     	ds	1
  4377  0022                     ??_adc_convert:	
  4378  0022                     ??_FLASH_ReadWord:	
  4379                           ; 1 bytes @ 0x2
  4380                           
  4381  0022                     ??_set_leds_bottom:	
  4382                           ; 1 bytes @ 0x2
  4383                           
  4384  0022                     ??_setLongTapState:	
  4385                           ; 1 bytes @ 0x2
  4386                           
  4387  0022                     ??_updateSwitchBypassState:	
  4388                           ; 1 bytes @ 0x2
  4389                           
  4390  0022                     ??_getSwitchBypassState:	
  4391                           ; 1 bytes @ 0x2
  4392                           
  4393  0022                     FLASH_ReadWord@GIEBitValue:	
  4394                           ; 1 bytes @ 0x2
  4395                           
  4396  0022                     set_leds_top@ledState:	
  4397                           ; 1 bytes @ 0x2
  4398                           
  4399  0022                     ___wmul@multiplicand:	
  4400                           ; 2 bytes @ 0x2
  4401                           
  4402  0022                     ___awdiv@dividend:	
  4403                           ; 2 bytes @ 0x2
  4404                           
  4405                           
  4406                           ; 2 bytes @ 0x2
  4407  0022                     	ds	1
  4408  0023                     ??___ftneg:	
  4409  0023                     adc_convert@channel:	
  4410                           ; 1 bytes @ 0x3
  4411                           
  4412  0023                     ___ftpack@exp:	
  4413                           ; 1 bytes @ 0x3
  4414                           
  4415                           
  4416                           ; 1 bytes @ 0x3
  4417  0023                     	ds	1
  4418  0024                     ??_set_leds_top:	
  4419  0024                     ??_ReadSavedSettings:	
  4420                           ; 1 bytes @ 0x4
  4421                           
  4422  0024                     ??___wmul:	
  4423                           ; 1 bytes @ 0x4
  4424                           
  4425  0024                     ??___awdiv:	
  4426                           ; 1 bytes @ 0x4
  4427                           
  4428  0024                     ___ftpack@sign:	
  4429                           ; 1 bytes @ 0x4
  4430                           
  4431  0024                     ___wmul@product:	
  4432                           ; 1 bytes @ 0x4
  4433                           
  4434  0024                     ___lmul@multiplicand:	
  4435                           ; 2 bytes @ 0x4
  4436                           
  4437                           
  4438                           ; 4 bytes @ 0x4
  4439  0024                     	ds	1
  4440  0025                     ??___ftpack:	
  4441  0025                     ___awdiv@counter:	
  4442                           ; 1 bytes @ 0x5
  4443                           
  4444                           
  4445                           ; 1 bytes @ 0x5
  4446  0025                     	ds	1
  4447  0026                     ?___aldiv:	
  4448  0026                     ___awdiv@sign:	
  4449                           ; 4 bytes @ 0x6
  4450                           
  4451  0026                     ___aldiv@divisor:	
  4452                           ; 1 bytes @ 0x6
  4453                           
  4454                           
  4455                           ; 4 bytes @ 0x6
  4456  0026                     	ds	1
  4457  0027                     ___awdiv@quotient:	
  4458                           
  4459                           ; 2 bytes @ 0x7
  4460  0027                     	ds	1
  4461  0028                     ??___lmul:	
  4462  0028                     ?___altoft:	
  4463                           ; 1 bytes @ 0x8
  4464                           
  4465  0028                     ?___awtoft:	
  4466                           ; 3 bytes @ 0x8
  4467                           
  4468  0028                     ?___ftadd:	
  4469                           ; 3 bytes @ 0x8
  4470                           
  4471  0028                     ___awtoft@c:	
  4472                           ; 3 bytes @ 0x8
  4473                           
  4474  0028                     ___ftadd@f1:	
  4475                           ; 2 bytes @ 0x8
  4476                           
  4477  0028                     ___lmul@product:	
  4478                           ; 3 bytes @ 0x8
  4479                           
  4480  0028                     ___altoft@c:	
  4481                           ; 4 bytes @ 0x8
  4482                           
  4483                           
  4484                           ; 4 bytes @ 0x8
  4485  0028                     	ds	2
  4486  002A                     ___aldiv@dividend:	
  4487                           
  4488                           ; 4 bytes @ 0xA
  4489  002A                     	ds	1
  4490  002B                     ??___awtoft:	
  4491  002B                     ___ftadd@f2:	
  4492                           ; 1 bytes @ 0xB
  4493                           
  4494                           
  4495                           ; 3 bytes @ 0xB
  4496  002B                     	ds	1
  4497  002C                     ?_wait_ms:	
  4498  002C                     ??___altoft:	
  4499                           ; 1 bytes @ 0xC
  4500                           
  4501  002C                     wait_ms@time:	
  4502                           ; 1 bytes @ 0xC
  4503                           
  4504                           
  4505                           ; 2 bytes @ 0xC
  4506  002C                     	ds	1
  4507  002D                     ___awtoft@sign:	
  4508                           
  4509                           ; 1 bytes @ 0xD
  4510  002D                     	ds	1
  4511  002E                     ??_read_bottom_tactile:	
  4512  002E                     ??_read_top_tactile:	
  4513                           ; 1 bytes @ 0xE
  4514                           
  4515  002E                     ??_star_tactiles:	
  4516                           ; 1 bytes @ 0xE
  4517                           
  4518  002E                     ??_solidring_tactiles:	
  4519                           ; 1 bytes @ 0xE
  4520                           
  4521  002E                     ?_setSwitchBypassState:	
  4522                           ; 1 bytes @ 0xE
  4523                           
  4524  002E                     ?_setFeedbackState:	
  4525                           ; 1 bytes @ 0xE
  4526                           
  4527  002E                     ??_wait_ms:	
  4528                           ; 1 bytes @ 0xE
  4529                           
  4530  002E                     ??___aldiv:	
  4531                           ; 1 bytes @ 0xE
  4532                           
  4533  002E                     ??___ftadd:	
  4534                           ; 1 bytes @ 0xE
  4535                           
  4536  002E                     ___altoft@exp:	
  4537                           ; 1 bytes @ 0xE
  4538                           
  4539  002E                     setSwitchBypassState@f_state:	
  4540                           ; 1 bytes @ 0xE
  4541                           
  4542  002E                     setFeedbackState@f_state:	
  4543                           ; 2 bytes @ 0xE
  4544                           
  4545                           
  4546                           ; 2 bytes @ 0xE
  4547  002E                     	ds	1
  4548  002F                     ___aldiv@counter:	
  4549  002F                     ___altoft@sign:	
  4550                           ; 1 bytes @ 0xF
  4551                           
  4552                           
  4553                           ; 1 bytes @ 0xF
  4554  002F                     	ds	1
  4555  0030                     ??_setSwitchBypassState:	
  4556  0030                     ??_setFeedbackState:	
  4557                           ; 1 bytes @ 0x10
  4558                           
  4559  0030                     star_tactiles@reverse:	
  4560                           ; 1 bytes @ 0x10
  4561                           
  4562  0030                     solidring_tactiles@ring_delay:	
  4563                           ; 1 bytes @ 0x10
  4564                           
  4565  0030                     ___aldiv@sign:	
  4566                           ; 1 bytes @ 0x10
  4567                           
  4568                           
  4569                           ; 1 bytes @ 0x10
  4570  0030                     	ds	1
  4571  0031                     star_tactiles@iLed:	
  4572  0031                     ___aldiv@quotient:	
  4573                           ; 2 bytes @ 0x11
  4574                           
  4575                           
  4576                           ; 4 bytes @ 0x11
  4577  0031                     	ds	1
  4578  0032                     ??_initSwitchBypass:	
  4579  0032                     ??_updateSwitchBypass:	
  4580                           ; 1 bytes @ 0x12
  4581                           
  4582  0032                     ___ftadd@sign:	
  4583                           ; 1 bytes @ 0x12
  4584                           
  4585  0032                     initSwitchBypass@initState:	
  4586                           ; 1 bytes @ 0x12
  4587                           
  4588                           
  4589                           ; 2 bytes @ 0x12
  4590  0032                     	ds	1
  4591  0033                     ___ftadd@exp2:	
  4592  0033                     star_tactiles@iLed_1383:	
  4593                           ; 1 bytes @ 0x13
  4594                           
  4595                           
  4596                           ; 2 bytes @ 0x13
  4597  0033                     	ds	1
  4598  0034                     ___ftadd@exp1:	
  4599                           
  4600                           ; 1 bytes @ 0x14
  4601  0034                     	ds	1
  4602  0035                     ??_showBootSequence:	
  4603  0035                     ??_updateSwitchTap:	
  4604                           ; 1 bytes @ 0x15
  4605                           
  4606  0035                     ?_modulation:	
  4607                           ; 1 bytes @ 0x15
  4608                           
  4609  0035                     ?___ftmul:	
  4610                           ; 2 bytes @ 0x15
  4611                           
  4612  0035                     modulation@x:	
  4613                           ; 3 bytes @ 0x15
  4614                           
  4615  0035                     ___ftmul@f1:	
  4616                           ; 2 bytes @ 0x15
  4617                           
  4618                           
  4619                           ; 3 bytes @ 0x15
  4620  0035                     	ds	2
  4621  0037                     modulation@y:	
  4622                           
  4623                           ; 2 bytes @ 0x17
  4624  0037                     	ds	1
  4625  0038                     ___ftmul@f2:	
  4626                           
  4627                           ; 3 bytes @ 0x18
  4628  0038                     	ds	1
  4629  0039                     ??_modulation:	
  4630                           
  4631                           ; 1 bytes @ 0x19
  4632  0039                     	ds	2
  4633  003B                     ??___ftmul:	
  4634  003B                     updateSwitchTap@tapCntDivisor:	
  4635                           ; 1 bytes @ 0x1B
  4636                           
  4637                           
  4638                           ; 2 bytes @ 0x1B
  4639  003B                     	ds	2
  4640  003D                     updateSwitchTap@iCnt:	
  4641                           
  4642                           ; 1 bytes @ 0x1D
  4643  003D                     	ds	2
  4644  003F                     ___ftmul@exp:	
  4645                           
  4646                           ; 1 bytes @ 0x1F
  4647  003F                     	ds	1
  4648  0040                     ___ftmul@f3_as_product:	
  4649                           
  4650                           ; 3 bytes @ 0x20
  4651  0040                     	ds	3
  4652  0043                     ___ftmul@cntr:	
  4653                           
  4654                           ; 1 bytes @ 0x23
  4655  0043                     	ds	1
  4656  0044                     ___ftmul@sign:	
  4657                           
  4658                           ; 1 bytes @ 0x24
  4659  0044                     	ds	1
  4660  0045                     ?___ftdiv:	
  4661  0045                     ___ftdiv@f2:	
  4662                           ; 3 bytes @ 0x25
  4663                           
  4664                           
  4665                           ; 3 bytes @ 0x25
  4666  0045                     	ds	3
  4667  0048                     ___ftdiv@f1:	
  4668                           
  4669                           ; 3 bytes @ 0x28
  4670  0048                     	ds	3
  4671  004B                     ??___ftdiv:	
  4672                           
  4673                           ; 1 bytes @ 0x2B
  4674  004B                     	ds	4
  4675  004F                     ___ftdiv@cntr:	
  4676                           
  4677                           ; 1 bytes @ 0x2F
  4678  004F                     	ds	1
  4679  0050                     ___ftdiv@f3:	
  4680                           
  4681                           ; 3 bytes @ 0x30
  4682  0050                     	ds	3
  4683  0053                     ___ftdiv@exp:	
  4684                           
  4685                           ; 1 bytes @ 0x33
  4686  0053                     	ds	1
  4687  0054                     ___ftdiv@sign:	
  4688                           
  4689                           ; 1 bytes @ 0x34
  4690  0054                     	ds	1
  4691  0055                     ?_map:	
  4692  0055                     map@x:	
  4693                           ; 3 bytes @ 0x35
  4694                           
  4695                           
  4696                           ; 3 bytes @ 0x35
  4697  0055                     	ds	3
  4698  0058                     map@in_min:	
  4699                           
  4700                           ; 3 bytes @ 0x38
  4701  0058                     	ds	3
  4702  005B                     map@in_max:	
  4703                           
  4704                           ; 3 bytes @ 0x3B
  4705  005B                     	ds	3
  4706  005E                     map@out_min:	
  4707                           
  4708                           ; 3 bytes @ 0x3E
  4709  005E                     	ds	3
  4710  0061                     map@out_max:	
  4711                           
  4712                           ; 3 bytes @ 0x41
  4713  0061                     	ds	3
  4714  0064                     ??_map:	
  4715  0064                     _map$1998:	
  4716                           ; 1 bytes @ 0x44
  4717                           
  4718                           
  4719                           ; 3 bytes @ 0x44
  4720  0064                     	ds	3
  4721  0067                     ?___fttol:	
  4722  0067                     ___fttol@f1:	
  4723                           ; 4 bytes @ 0x47
  4724                           
  4725                           
  4726                           ; 3 bytes @ 0x47
  4727  0067                     	ds	4
  4728  006B                     ??___fttol:	
  4729                           
  4730                           ; 1 bytes @ 0x4B
  4731  006B                     	ds	4
  4732  006F                     ??_set_subdivision:	
  4733                           
  4734                           	psect	maintext
  4735  0202                     __pmaintext:	
  4736                           ; 1 bytes @ 0x4F
  4737 ;;
  4738 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4739 ;;
  4740 ;; *************** function _main *****************
  4741 ;; Defined at:
  4742 ;;		line 82 in file "main.c"
  4743 ;; Parameters:    Size  Location     Type
  4744 ;;		None
  4745 ;; Auto vars:     Size  Location     Type
  4746 ;;  adjusted_pot    2   25[BANK1 ] int 
  4747 ;;  i               2   29[BANK1 ] int 
  4748 ;;  i               2   27[BANK1 ] int 
  4749 ;; Return value:  Size  Location     Type
  4750 ;;                  1    wreg      void 
  4751 ;; Registers used:
  4752 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4753 ;; Tracked objects:
  4754 ;;		On entry : B1F/0
  4755 ;;		On exit  : 0/0
  4756 ;;		Unchanged: 0/0
  4757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4759 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4760 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4761 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4762 ;;Total ram usage:       21 bytes
  4763 ;; Hardware stack levels required when called:    6
  4764 ;; This function calls:
  4765 ;;		_ConfigureOscillator
  4766 ;;		_InitApp
  4767 ;;		_InitializeTaps
  4768 ;;		_ReadSavedSettings
  4769 ;;		___altoft
  4770 ;;		___awdiv
  4771 ;;		___awtoft
  4772 ;;		___ftdiv
  4773 ;;		___fttol
  4774 ;;		_adc_convert
  4775 ;;		_initSwitchBypass
  4776 ;;		_map
  4777 ;;		_modulation
  4778 ;;		_read_bottom_tactile
  4779 ;;		_read_top_tactile
  4780 ;;		_set_subdivision
  4781 ;;		_showBootSequence
  4782 ;;		_updateSwitchBypass
  4783 ;;		_updateSwitchTap
  4784 ;;		_update_mode
  4785 ;; This function is called by:
  4786 ;;		Startup code after reset
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           
  4791                           ;psect for function _main
  4792  0202                     _main:	
  4793                           
  4794                           ;main.c: 83: ConfigureOscillator();
  4795                           
  4796                           ;incstack = 0
  4797                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4798  0202  319E  26DA  3182   	fcall	_ConfigureOscillator
  4799                           
  4800                           ;main.c: 84: InitApp();
  4801  0205  3190  205B  3182   	fcall	_InitApp
  4802                           
  4803                           ;main.c: 87: InitializeTaps();
  4804  0208  3190  200A  3182   	fcall	_InitializeTaps
  4805                           
  4806                           ;main.c: 88: initSwitchBypass();
  4807  020B  319F  2713  3182   	fcall	_initSwitchBypass
  4808                           
  4809                           ;main.c: 91: ReadSavedSettings();
  4810  020E  3195  2528  3182   	fcall	_ReadSavedSettings
  4811  0211                     l3991:	
  4812                           ;main.c: 93: while (1) {
  4813                           
  4814                           
  4815                           ;main.c: 96: read_bottom_tactile();
  4816  0211  3190  20EC  3182   	fcall	_read_bottom_tactile
  4817                           
  4818                           ;main.c: 97: read_top_tactile();
  4819  0214  3191  211D  3182   	fcall	_read_top_tactile
  4820                           
  4821                           ;main.c: 100: update_mode();
  4822  0217  3193  23B5  3182   	fcall	_update_mode
  4823                           
  4824                           ;main.c: 102: if (PORTDbits.RD7 == 0) {
  4825  021A  0020               	movlb	0	; select bank0
  4826  021B  1B8F               	btfsc	15,7	;volatile
  4827  021C  2A3B               	goto	l4005
  4828                           
  4829                           ;main.c: 103: debounce_mode1++;
  4830  021D  3001               	movlw	1
  4831  021E  0022               	movlb	2	; select bank2
  4832  021F  07B6               	addwf	_debounce_mode1^(0+256),f
  4833  0220  3000               	movlw	0
  4834  0221  3DB7               	addwfc	(_debounce_mode1+1)^(0+256),f
  4835                           
  4836                           ;main.c: 104: if (debounce_mode1 > 25) {
  4837  0222  0837               	movf	(_debounce_mode1+1)^(0+256),w
  4838  0223  3A80               	xorlw	128
  4839  0224  0021               	movlb	1	; select bank1
  4840  0225  00AA               	movwf	??_main^(0+128)
  4841  0226  3080               	movlw	128
  4842  0227  022A               	subwf	??_main^(0+128),w
  4843  0228  1D03               	skipz
  4844  0229  2A2D               	goto	u4015
  4845  022A  301A               	movlw	26
  4846  022B  0022               	movlb	2	; select bank2
  4847  022C  0236               	subwf	_debounce_mode1^(0+256),w
  4848  022D                     u4015:	
  4849  022D  1C03               	skipc
  4850  022E  2A3E               	goto	l4007
  4851                           
  4852                           ;main.c: 105: debounce_mode1 = 25;
  4853  022F  3019               	movlw	25
  4854  0230  0022               	movlb	2	; select bank2
  4855  0231  00B6               	movwf	_debounce_mode1^(0+256)
  4856  0232  3000               	movlw	0
  4857  0233  00B7               	movwf	(_debounce_mode1^(0+256)+1)
  4858                           
  4859                           ;main.c: 109: showBootSequence();
  4860  0234  3190  2030  3182   	fcall	_showBootSequence
  4861  0237                     l261:	
  4862                           ;main.c: 112: while (PORTDbits.RD7 == 0) {
  4863                           
  4864  0237  0020               	movlb	0	; select bank0
  4865  0238  1B8F               	btfsc	15,7	;volatile
  4866  0239  2A3E               	goto	l4007
  4867  023A  2A37               	goto	l261
  4868  023B                     l4005:	
  4869                           ;main.c: 113: }
  4870                           ;main.c: 114: }
  4871                           ;main.c: 115: } else {
  4872                           
  4873                           
  4874                           ;main.c: 116: debounce_mode1 = 0;
  4875  023B  0022               	movlb	2	; select bank2
  4876  023C  01B6               	clrf	_debounce_mode1^(0+256)
  4877  023D  01B7               	clrf	(_debounce_mode1+1)^(0+256)
  4878  023E                     l4007:	
  4879                           
  4880                           ;main.c: 117: }
  4881                           ;main.c: 119: updateSwitchBypass();
  4882  023E  3189  214A  3182   	fcall	_updateSwitchBypass
  4883                           
  4884                           ;main.c: 120: updateSwitchTap();
  4885  0241  318B  23A4  3182   	fcall	_updateSwitchTap
  4886                           
  4887                           ;main.c: 209: knob_1_pos = adc_convert(0);
  4888  0244  3000               	movlw	0
  4889  0245  319F  2789  3182   	fcall	_adc_convert
  4890  0248  0020               	movlb	0	; select bank0
  4891  0249  0821               	movf	?_adc_convert+1,w
  4892  024A  0021               	movlb	1	; select bank1
  4893  024B  00CA               	movwf	(_knob_1_pos+1)^(0+128)
  4894  024C  0020               	movlb	0	; select bank0
  4895  024D  0820               	movf	?_adc_convert,w
  4896  024E  0021               	movlb	1	; select bank1
  4897  024F  00C9               	movwf	_knob_1_pos^(0+128)
  4898                           
  4899                           ;main.c: 210: knob_2_pos = adc_convert(1);
  4900  0250  3001               	movlw	1
  4901  0251  319F  2789  3182   	fcall	_adc_convert
  4902  0254  0020               	movlb	0	; select bank0
  4903  0255  0821               	movf	?_adc_convert+1,w
  4904  0256  0021               	movlb	1	; select bank1
  4905  0257  00CC               	movwf	(_knob_2_pos+1)^(0+128)
  4906  0258  0020               	movlb	0	; select bank0
  4907  0259  0820               	movf	?_adc_convert,w
  4908  025A  0021               	movlb	1	; select bank1
  4909  025B  00CB               	movwf	_knob_2_pos^(0+128)
  4910                           
  4911                           ;main.c: 211: knob_3_pos = adc_convert(2);
  4912  025C  3002               	movlw	2
  4913  025D  319F  2789  3182   	fcall	_adc_convert
  4914  0260  0020               	movlb	0	; select bank0
  4915  0261  0821               	movf	?_adc_convert+1,w
  4916  0262  0021               	movlb	1	; select bank1
  4917  0263  00CE               	movwf	(_knob_3_pos+1)^(0+128)
  4918  0264  0020               	movlb	0	; select bank0
  4919  0265  0820               	movf	?_adc_convert,w
  4920  0266  0021               	movlb	1	; select bank1
  4921  0267  00CD               	movwf	_knob_3_pos^(0+128)
  4922                           
  4923                           ;main.c: 212: knob_4_pos = adc_convert(3);
  4924  0268  3003               	movlw	3
  4925  0269  319F  2789  3182   	fcall	_adc_convert
  4926  026C  0020               	movlb	0	; select bank0
  4927  026D  0821               	movf	?_adc_convert+1,w
  4928  026E  0022               	movlb	2	; select bank2
  4929  026F  00BF               	movwf	(_knob_4_pos+1)^(0+256)
  4930  0270  0020               	movlb	0	; select bank0
  4931  0271  0820               	movf	?_adc_convert,w
  4932  0272  0022               	movlb	2	; select bank2
  4933  0273  00BE               	movwf	_knob_4_pos^(0+256)
  4934                           
  4935                           ;main.c: 213: knob_5_pos = adc_convert(4);
  4936  0274  3004               	movlw	4
  4937  0275  319F  2789  3182   	fcall	_adc_convert
  4938  0278  0020               	movlb	0	; select bank0
  4939  0279  0821               	movf	?_adc_convert+1,w
  4940  027A  0022               	movlb	2	; select bank2
  4941  027B  00C1               	movwf	(_knob_5_pos+1)^(0+256)
  4942  027C  0020               	movlb	0	; select bank0
  4943  027D  0820               	movf	?_adc_convert,w
  4944  027E  0022               	movlb	2	; select bank2
  4945  027F  00C0               	movwf	_knob_5_pos^(0+256)
  4946                           
  4947                           ;main.c: 226: if (knob_1_pos - knob1_prev >= 4 || knob_1_pos - knob1_prev <= -4) {
  4948  0280  094F               	comf	_knob1_prev^(0+256),w
  4949  0281  0021               	movlb	1	; select bank1
  4950  0282  00AA               	movwf	??_main^(0+128)
  4951  0283  0022               	movlb	2	; select bank2
  4952  0284  0950               	comf	(_knob1_prev+1)^(0+256),w
  4953  0285  0021               	movlb	1	; select bank1
  4954  0286  00AB               	movwf	(??_main^(0+128)+1)
  4955  0287  0AAA               	incf	??_main^(0+128),f
  4956  0288  1903               	skipnz
  4957  0289  0AAB               	incf	(??_main^(0+128)+1),f
  4958  028A  0849               	movf	_knob_1_pos^(0+128),w
  4959  028B  072A               	addwf	??_main^(0+128),w
  4960  028C  00AC               	movwf	(??_main+2)^(0+128)
  4961  028D  084A               	movf	(_knob_1_pos+1)^(0+128),w
  4962  028E  3D2B               	addwfc	(??_main+1)^(0+128),w
  4963  028F  00AD               	movwf	(??_main+3)^(0+128)
  4964  0290  082D               	movf	(??_main+3)^(0+128),w
  4965  0291  3A80               	xorlw	128
  4966  0292  00AE               	movwf	(??_main+4)^(0+128)
  4967  0293  3080               	movlw	128
  4968  0294  022E               	subwf	(??_main+4)^(0+128),w
  4969  0295  1D03               	skipz
  4970  0296  2A99               	goto	u4035
  4971  0297  3004               	movlw	4
  4972  0298  022C               	subwf	(??_main+2)^(0+128),w
  4973  0299                     u4035:	
  4974  0299  1803               	skipnc
  4975  029A  2AB7               	goto	l4025
  4976  029B  0022               	movlb	2	; select bank2
  4977  029C  094F               	comf	_knob1_prev^(0+256),w
  4978  029D  0021               	movlb	1	; select bank1
  4979  029E  00AA               	movwf	??_main^(0+128)
  4980  029F  0022               	movlb	2	; select bank2
  4981  02A0  0950               	comf	(_knob1_prev+1)^(0+256),w
  4982  02A1  0021               	movlb	1	; select bank1
  4983  02A2  00AB               	movwf	(??_main^(0+128)+1)
  4984  02A3  0AAA               	incf	??_main^(0+128),f
  4985  02A4  1903               	skipnz
  4986  02A5  0AAB               	incf	(??_main^(0+128)+1),f
  4987  02A6  0849               	movf	_knob_1_pos^(0+128),w
  4988  02A7  072A               	addwf	??_main^(0+128),w
  4989  02A8  00AC               	movwf	(??_main+2)^(0+128)
  4990  02A9  084A               	movf	(_knob_1_pos+1)^(0+128),w
  4991  02AA  3D2B               	addwfc	(??_main+1)^(0+128),w
  4992  02AB  00AD               	movwf	(??_main+3)^(0+128)
  4993  02AC  082D               	movf	(??_main+3)^(0+128),w
  4994  02AD  3A80               	xorlw	128
  4995  02AE  00AE               	movwf	(??_main+4)^(0+128)
  4996  02AF  307F               	movlw	127
  4997  02B0  022E               	subwf	(??_main+4)^(0+128),w
  4998  02B1  1D03               	skipz
  4999  02B2  2AB5               	goto	u4045
  5000  02B3  30FD               	movlw	253
  5001  02B4  022C               	subwf	(??_main+2)^(0+128),w
  5002  02B5                     u4045:	
  5003  02B5  1803               	skipnc
  5004  02B6  2B0C               	goto	l4031
  5005  02B7                     l4025:	
  5006                           
  5007                           ;main.c: 227: knob1_prev = knob_1_pos;
  5008  02B7  0021               	movlb	1	; select bank1
  5009  02B8  084A               	movf	(_knob_1_pos+1)^(0+128),w
  5010  02B9  0022               	movlb	2	; select bank2
  5011  02BA  00D0               	movwf	(_knob1_prev+1)^(0+256)
  5012  02BB  0021               	movlb	1	; select bank1
  5013  02BC  0849               	movf	_knob_1_pos^(0+128),w
  5014  02BD  0022               	movlb	2	; select bank2
  5015  02BE  00CF               	movwf	_knob1_prev^(0+256)
  5016                           
  5017                           ;main.c: 229: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5018  02BF  3000               	movlw	0
  5019  02C0  0020               	movlb	0	; select bank0
  5020  02C1  00E1               	movwf	map@out_max
  5021  02C2  3048               	movlw	72
  5022  02C3  00E2               	movwf	map@out_max+1
  5023  02C4  3043               	movlw	67
  5024  02C5  00E3               	movwf	map@out_max+2
  5025  02C6  3080               	movlw	128
  5026  02C7  00DE               	movwf	map@out_min
  5027  02C8  3092               	movlw	146
  5028  02C9  00DF               	movwf	map@out_min+1
  5029  02CA  3044               	movlw	68
  5030  02CB  00E0               	movwf	map@out_min+2
  5031  02CC  30C0               	movlw	192
  5032  02CD  00DB               	movwf	map@in_max
  5033  02CE  307F               	movlw	127
  5034  02CF  00DC               	movwf	map@in_max+1
  5035  02D0  3044               	movlw	68
  5036  02D1  00DD               	movwf	map@in_max+2
  5037  02D2  3000               	movlw	0
  5038  02D3  00D8               	movwf	map@in_min
  5039  02D4  3000               	movlw	0
  5040  02D5  00D9               	movwf	map@in_min+1
  5041  02D6  3000               	movlw	0
  5042  02D7  00DA               	movwf	map@in_min+2
  5043  02D8  0022               	movlb	2	; select bank2
  5044  02D9  0850               	movf	(_knob1_prev+1)^(0+256),w
  5045  02DA  0020               	movlb	0	; select bank0
  5046  02DB  00A9               	movwf	___awtoft@c+1
  5047  02DC  0022               	movlb	2	; select bank2
  5048  02DD  084F               	movf	_knob1_prev^(0+256),w
  5049  02DE  0020               	movlb	0	; select bank0
  5050  02DF  00A8               	movwf	___awtoft@c
  5051  02E0  319F  27DE  3182   	fcall	___awtoft
  5052  02E3  0020               	movlb	0	; select bank0
  5053  02E4  0828               	movf	?___awtoft,w
  5054  02E5  00D5               	movwf	map@x
  5055  02E6  0829               	movf	?___awtoft+1,w
  5056  02E7  00D6               	movwf	map@x+1
  5057  02E8  082A               	movf	?___awtoft+2,w
  5058  02E9  00D7               	movwf	map@x+2
  5059  02EA  3197  2775  3182   	fcall	_map
  5060  02ED  0020               	movlb	0	; select bank0
  5061  02EE  0855               	movf	?_map,w
  5062  02EF  00E7               	movwf	___fttol@f1
  5063  02F0  0856               	movf	?_map+1,w
  5064  02F1  00E8               	movwf	___fttol@f1+1
  5065  02F2  0857               	movf	?_map+2,w
  5066  02F3  00E9               	movwf	___fttol@f1+2
  5067  02F4  3188  2002  3182   	fcall	___fttol
  5068  02F7  0020               	movlb	0	; select bank0
  5069  02F8  086A               	movf	?___fttol+3,w
  5070  02F9  0021               	movlb	1	; select bank1
  5071  02FA  00E0               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5072  02FB  0020               	movlb	0	; select bank0
  5073  02FC  0869               	movf	?___fttol+2,w
  5074  02FD  0021               	movlb	1	; select bank1
  5075  02FE  00DF               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5076  02FF  0020               	movlb	0	; select bank0
  5077  0300  0868               	movf	?___fttol+1,w
  5078  0301  0021               	movlb	1	; select bank1
  5079  0302  00DE               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5080  0303  0020               	movlb	0	; select bank0
  5081  0304  0867               	movf	?___fttol,w
  5082  0305  0021               	movlb	1	; select bank1
  5083  0306  00DD               	movwf	_baseline_delay_time^(0+128)	;volatile
  5084                           
  5085                           ;main.c: 230: delay_time_changed = 1;
  5086  0307  3001               	movlw	1
  5087  0308  0022               	movlb	2	; select bank2
  5088  0309  00CB               	movwf	_delay_time_changed^(0+256)
  5089  030A  3000               	movlw	0
  5090  030B  00CC               	movwf	(_delay_time_changed^(0+256)+1)
  5091  030C                     l4031:	
  5092                           
  5093                           ;main.c: 231: }
  5094                           ;main.c: 240: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5095  030C  0022               	movlb	2	; select bank2
  5096  030D  0951               	comf	_knob2_prev^(0+256),w
  5097  030E  0021               	movlb	1	; select bank1
  5098  030F  00AA               	movwf	??_main^(0+128)
  5099  0310  0022               	movlb	2	; select bank2
  5100  0311  0952               	comf	(_knob2_prev+1)^(0+256),w
  5101  0312  0021               	movlb	1	; select bank1
  5102  0313  00AB               	movwf	(??_main^(0+128)+1)
  5103  0314  0AAA               	incf	??_main^(0+128),f
  5104  0315  1903               	skipnz
  5105  0316  0AAB               	incf	(??_main^(0+128)+1),f
  5106  0317  084B               	movf	_knob_2_pos^(0+128),w
  5107  0318  072A               	addwf	??_main^(0+128),w
  5108  0319  00AC               	movwf	(??_main+2)^(0+128)
  5109  031A  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5110  031B  3D2B               	addwfc	(??_main+1)^(0+128),w
  5111  031C  00AD               	movwf	(??_main+3)^(0+128)
  5112  031D  082D               	movf	(??_main+3)^(0+128),w
  5113  031E  3A80               	xorlw	128
  5114  031F  00AE               	movwf	(??_main+4)^(0+128)
  5115  0320  3080               	movlw	128
  5116  0321  022E               	subwf	(??_main+4)^(0+128),w
  5117  0322  1D03               	skipz
  5118  0323  2B26               	goto	u4055
  5119  0324  3004               	movlw	4
  5120  0325  022C               	subwf	(??_main+2)^(0+128),w
  5121  0326                     u4055:	
  5122  0326  1803               	skipnc
  5123  0327  2B44               	goto	l4035
  5124  0328  0022               	movlb	2	; select bank2
  5125  0329  0951               	comf	_knob2_prev^(0+256),w
  5126  032A  0021               	movlb	1	; select bank1
  5127  032B  00AA               	movwf	??_main^(0+128)
  5128  032C  0022               	movlb	2	; select bank2
  5129  032D  0952               	comf	(_knob2_prev+1)^(0+256),w
  5130  032E  0021               	movlb	1	; select bank1
  5131  032F  00AB               	movwf	(??_main^(0+128)+1)
  5132  0330  0AAA               	incf	??_main^(0+128),f
  5133  0331  1903               	skipnz
  5134  0332  0AAB               	incf	(??_main^(0+128)+1),f
  5135  0333  084B               	movf	_knob_2_pos^(0+128),w
  5136  0334  072A               	addwf	??_main^(0+128),w
  5137  0335  00AC               	movwf	(??_main+2)^(0+128)
  5138  0336  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5139  0337  3D2B               	addwfc	(??_main+1)^(0+128),w
  5140  0338  00AD               	movwf	(??_main+3)^(0+128)
  5141  0339  082D               	movf	(??_main+3)^(0+128),w
  5142  033A  3A80               	xorlw	128
  5143  033B  00AE               	movwf	(??_main+4)^(0+128)
  5144  033C  307F               	movlw	127
  5145  033D  022E               	subwf	(??_main+4)^(0+128),w
  5146  033E  1D03               	skipz
  5147  033F  2B42               	goto	u4065
  5148  0340  30FD               	movlw	253
  5149  0341  022C               	subwf	(??_main+2)^(0+128),w
  5150  0342                     u4065:	
  5151  0342  1803               	skipnc
  5152  0343  2BA1               	goto	l4043
  5153  0344                     l4035:	
  5154                           
  5155                           ;main.c: 241: knob2_prev = knob_2_pos;
  5156  0344  0021               	movlb	1	; select bank1
  5157  0345  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5158  0346  0022               	movlb	2	; select bank2
  5159  0347  00D2               	movwf	(_knob2_prev+1)^(0+256)
  5160  0348  0021               	movlb	1	; select bank1
  5161  0349  084B               	movf	_knob_2_pos^(0+128),w
  5162  034A  0022               	movlb	2	; select bank2
  5163  034B  00D1               	movwf	_knob2_prev^(0+256)
  5164                           
  5165                           ;main.c: 242: int i = map(knob2_prev, 0, 1023, 0, 39);
  5166  034C  3000               	movlw	0
  5167  034D  0020               	movlb	0	; select bank0
  5168  034E  00E1               	movwf	map@out_max
  5169  034F  301C               	movlw	28
  5170  0350  00E2               	movwf	map@out_max+1
  5171  0351  3042               	movlw	66
  5172  0352  00E3               	movwf	map@out_max+2
  5173  0353  3000               	movlw	0
  5174  0354  00DE               	movwf	map@out_min
  5175  0355  3000               	movlw	0
  5176  0356  00DF               	movwf	map@out_min+1
  5177  0357  3000               	movlw	0
  5178  0358  00E0               	movwf	map@out_min+2
  5179  0359  30C0               	movlw	192
  5180  035A  00DB               	movwf	map@in_max
  5181  035B  307F               	movlw	127
  5182  035C  00DC               	movwf	map@in_max+1
  5183  035D  3044               	movlw	68
  5184  035E  00DD               	movwf	map@in_max+2
  5185  035F  3000               	movlw	0
  5186  0360  00D8               	movwf	map@in_min
  5187  0361  3000               	movlw	0
  5188  0362  00D9               	movwf	map@in_min+1
  5189  0363  3000               	movlw	0
  5190  0364  00DA               	movwf	map@in_min+2
  5191  0365  0022               	movlb	2	; select bank2
  5192  0366  0852               	movf	(_knob2_prev+1)^(0+256),w
  5193  0367  0020               	movlb	0	; select bank0
  5194  0368  00A9               	movwf	___awtoft@c+1
  5195  0369  0022               	movlb	2	; select bank2
  5196  036A  0851               	movf	_knob2_prev^(0+256),w
  5197  036B  0020               	movlb	0	; select bank0
  5198  036C  00A8               	movwf	___awtoft@c
  5199  036D  319F  27DE  3182   	fcall	___awtoft
  5200  0370  0020               	movlb	0	; select bank0
  5201  0371  0828               	movf	?___awtoft,w
  5202  0372  00D5               	movwf	map@x
  5203  0373  0829               	movf	?___awtoft+1,w
  5204  0374  00D6               	movwf	map@x+1
  5205  0375  082A               	movf	?___awtoft+2,w
  5206  0376  00D7               	movwf	map@x+2
  5207  0377  3197  2775  3182   	fcall	_map
  5208  037A  0020               	movlb	0	; select bank0
  5209  037B  0855               	movf	?_map,w
  5210  037C  00E7               	movwf	___fttol@f1
  5211  037D  0856               	movf	?_map+1,w
  5212  037E  00E8               	movwf	___fttol@f1+1
  5213  037F  0857               	movf	?_map+2,w
  5214  0380  00E9               	movwf	___fttol@f1+2
  5215  0381  3188  2002  3182   	fcall	___fttol
  5216  0384  0020               	movlb	0	; select bank0
  5217  0385  0868               	movf	?___fttol+1,w
  5218  0386  0021               	movlb	1	; select bank1
  5219  0387  00BC               	movwf	(main@i+1)^(0+128)
  5220  0388  0020               	movlb	0	; select bank0
  5221  0389  0867               	movf	?___fttol,w
  5222  038A  0021               	movlb	1	; select bank1
  5223  038B  00BB               	movwf	main@i^(0+128)
  5224                           
  5225                           ;main.c: 243: CCPR2 = iB25k[i];
  5226  038C  353B               	lslf	main@i^(0+128),w
  5227  038D  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5228  038E  0086               	movwf	6
  5229  038F  3004               	movlw	4	; select bank8/9
  5230  0390  0087               	movwf	7
  5231  0391  3F40               	moviw [0]fsr1
  5232  0392  0025               	movlb	5	; select bank5
  5233  0393  0098               	movwf	24	;volatile
  5234  0394  3F41               	moviw [1]fsr1
  5235  0395  0099               	movwf	25	;volatile
  5236                           
  5237                           ;main.c: 244: CCPR3 = B25k[i];
  5238  0396  0021               	movlb	1	; select bank1
  5239  0397  353B               	lslf	main@i^(0+128),w
  5240  0398  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5241  0399  0086               	movwf	6
  5242  039A  3003               	movlw	3	; select bank7/8
  5243  039B  0087               	movwf	7
  5244  039C  3F40               	moviw [0]fsr1
  5245  039D  0026               	movlb	6	; select bank6
  5246  039E  0091               	movwf	17	;volatile
  5247  039F  3F41               	moviw [1]fsr1
  5248  03A0  0092               	movwf	18	;volatile
  5249  03A1                     l4043:	
  5250                           
  5251                           ;main.c: 245: }
  5252                           ;main.c: 255: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5253  03A1  0022               	movlb	2	; select bank2
  5254  03A2  0953               	comf	_knob3_prev^(0+256),w
  5255  03A3  0021               	movlb	1	; select bank1
  5256  03A4  00AA               	movwf	??_main^(0+128)
  5257  03A5  0022               	movlb	2	; select bank2
  5258  03A6  0954               	comf	(_knob3_prev+1)^(0+256),w
  5259  03A7  0021               	movlb	1	; select bank1
  5260  03A8  00AB               	movwf	(??_main^(0+128)+1)
  5261  03A9  0AAA               	incf	??_main^(0+128),f
  5262  03AA  1903               	skipnz
  5263  03AB  0AAB               	incf	(??_main^(0+128)+1),f
  5264  03AC  084D               	movf	_knob_3_pos^(0+128),w
  5265  03AD  072A               	addwf	??_main^(0+128),w
  5266  03AE  00AC               	movwf	(??_main+2)^(0+128)
  5267  03AF  084E               	movf	(_knob_3_pos+1)^(0+128),w
  5268  03B0  3D2B               	addwfc	(??_main+1)^(0+128),w
  5269  03B1  00AD               	movwf	(??_main+3)^(0+128)
  5270  03B2  082D               	movf	(??_main+3)^(0+128),w
  5271  03B3  3A80               	xorlw	128
  5272  03B4  00AE               	movwf	(??_main+4)^(0+128)
  5273  03B5  3080               	movlw	128
  5274  03B6  022E               	subwf	(??_main+4)^(0+128),w
  5275  03B7  1D03               	skipz
  5276  03B8  2BBB               	goto	u4075
  5277  03B9  3004               	movlw	4
  5278  03BA  022C               	subwf	(??_main+2)^(0+128),w
  5279  03BB                     u4075:	
  5280  03BB  1803               	skipnc
  5281  03BC  2BD9               	goto	l4047
  5282  03BD  0022               	movlb	2	; select bank2
  5283  03BE  0953               	comf	_knob3_prev^(0+256),w
  5284  03BF  0021               	movlb	1	; select bank1
  5285  03C0  00AA               	movwf	??_main^(0+128)
  5286  03C1  0022               	movlb	2	; select bank2
  5287  03C2  0954               	comf	(_knob3_prev+1)^(0+256),w
  5288  03C3  0021               	movlb	1	; select bank1
  5289  03C4  00AB               	movwf	(??_main^(0+128)+1)
  5290  03C5  0AAA               	incf	??_main^(0+128),f
  5291  03C6  1903               	skipnz
  5292  03C7  0AAB               	incf	(??_main^(0+128)+1),f
  5293  03C8  084D               	movf	_knob_3_pos^(0+128),w
  5294  03C9  072A               	addwf	??_main^(0+128),w
  5295  03CA  00AC               	movwf	(??_main+2)^(0+128)
  5296  03CB  084E               	movf	(_knob_3_pos+1)^(0+128),w
  5297  03CC  3D2B               	addwfc	(??_main+1)^(0+128),w
  5298  03CD  00AD               	movwf	(??_main+3)^(0+128)
  5299  03CE  082D               	movf	(??_main+3)^(0+128),w
  5300  03CF  3A80               	xorlw	128
  5301  03D0  00AE               	movwf	(??_main+4)^(0+128)
  5302  03D1  307F               	movlw	127
  5303  03D2  022E               	subwf	(??_main+4)^(0+128),w
  5304  03D3  1D03               	skipz
  5305  03D4  2BD7               	goto	u4085
  5306  03D5  30FD               	movlw	253
  5307  03D6  022C               	subwf	(??_main+2)^(0+128),w
  5308  03D7                     u4085:	
  5309  03D7  1803               	skipnc
  5310  03D8  2C36               	goto	l4055
  5311  03D9                     l4047:	
  5312                           
  5313                           ;main.c: 256: knob3_prev = knob_3_pos;
  5314  03D9  0021               	movlb	1	; select bank1
  5315  03DA  084E               	movf	(_knob_3_pos+1)^(0+128),w
  5316  03DB  0022               	movlb	2	; select bank2
  5317  03DC  00D4               	movwf	(_knob3_prev+1)^(0+256)
  5318  03DD  0021               	movlb	1	; select bank1
  5319  03DE  084D               	movf	_knob_3_pos^(0+128),w
  5320  03DF  0022               	movlb	2	; select bank2
  5321  03E0  00D3               	movwf	_knob3_prev^(0+256)
  5322                           
  5323                           ;main.c: 257: int i = map(knob3_prev, 0, 1023, 16, 0);
  5324  03E1  3000               	movlw	0
  5325  03E2  0020               	movlb	0	; select bank0
  5326  03E3  00E1               	movwf	map@out_max
  5327  03E4  3000               	movlw	0
  5328  03E5  00E2               	movwf	map@out_max+1
  5329  03E6  3000               	movlw	0
  5330  03E7  00E3               	movwf	map@out_max+2
  5331  03E8  3000               	movlw	0
  5332  03E9  00DE               	movwf	map@out_min
  5333  03EA  3080               	movlw	128
  5334  03EB  00DF               	movwf	map@out_min+1
  5335  03EC  3041               	movlw	65
  5336  03ED  00E0               	movwf	map@out_min+2
  5337  03EE  30C0               	movlw	192
  5338  03EF  00DB               	movwf	map@in_max
  5339  03F0  307F               	movlw	127
  5340  03F1  00DC               	movwf	map@in_max+1
  5341  03F2  3044               	movlw	68
  5342  03F3  00DD               	movwf	map@in_max+2
  5343  03F4  3000               	movlw	0
  5344  03F5  00D8               	movwf	map@in_min
  5345  03F6  3000               	movlw	0
  5346  03F7  00D9               	movwf	map@in_min+1
  5347  03F8  3000               	movlw	0
  5348  03F9  00DA               	movwf	map@in_min+2
  5349  03FA  0022               	movlb	2	; select bank2
  5350  03FB  0854               	movf	(_knob3_prev+1)^(0+256),w
  5351  03FC  0020               	movlb	0	; select bank0
  5352  03FD  00A9               	movwf	___awtoft@c+1
  5353  03FE  0022               	movlb	2	; select bank2
  5354  03FF  0853               	movf	_knob3_prev^(0+256),w
  5355  0400  0020               	movlb	0	; select bank0
  5356  0401  00A8               	movwf	___awtoft@c
  5357  0402  319F  27DE  3182   	fcall	___awtoft
  5358  0405  0020               	movlb	0	; select bank0
  5359  0406  0828               	movf	?___awtoft,w
  5360  0407  00D5               	movwf	map@x
  5361  0408  0829               	movf	?___awtoft+1,w
  5362  0409  00D6               	movwf	map@x+1
  5363  040A  082A               	movf	?___awtoft+2,w
  5364  040B  00D7               	movwf	map@x+2
  5365  040C  3197  2775  3182   	fcall	_map
  5366  040F  0020               	movlb	0	; select bank0
  5367  0410  0855               	movf	?_map,w
  5368  0411  00E7               	movwf	___fttol@f1
  5369  0412  0856               	movf	?_map+1,w
  5370  0413  00E8               	movwf	___fttol@f1+1
  5371  0414  0857               	movf	?_map+2,w
  5372  0415  00E9               	movwf	___fttol@f1+2
  5373  0416  3188  2002  3182   	fcall	___fttol
  5374  0419  0020               	movlb	0	; select bank0
  5375  041A  0868               	movf	?___fttol+1,w
  5376  041B  0021               	movlb	1	; select bank1
  5377  041C  00BE               	movwf	(main@i_315+1)^(0+128)
  5378  041D  0020               	movlb	0	; select bank0
  5379  041E  0867               	movf	?___fttol,w
  5380  041F  0021               	movlb	1	; select bank1
  5381  0420  00BD               	movwf	main@i_315^(0+128)
  5382                           
  5383                           ;main.c: 258: CCPR4 = iB25k[i];
  5384  0421  353D               	lslf	main@i_315^(0+128),w
  5385  0422  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5386  0423  0086               	movwf	6
  5387  0424  3004               	movlw	4	; select bank8/9
  5388  0425  0087               	movwf	7
  5389  0426  3F40               	moviw [0]fsr1
  5390  0427  0026               	movlb	6	; select bank6
  5391  0428  0098               	movwf	24	;volatile
  5392  0429  3F41               	moviw [1]fsr1
  5393  042A  0099               	movwf	25	;volatile
  5394                           
  5395                           ;main.c: 259: CCPR5 = B25k[i];
  5396  042B  0021               	movlb	1	; select bank1
  5397  042C  353D               	lslf	main@i_315^(0+128),w
  5398  042D  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5399  042E  0086               	movwf	6
  5400  042F  3003               	movlw	3	; select bank7/8
  5401  0430  0087               	movwf	7
  5402  0431  3F40               	moviw [0]fsr1
  5403  0432  0026               	movlb	6	; select bank6
  5404  0433  009C               	movwf	28	;volatile
  5405  0434  3F41               	moviw [1]fsr1
  5406  0435  009D               	movwf	29	;volatile
  5407  0436                     l4055:	
  5408                           
  5409                           ;main.c: 260: }
  5410                           ;main.c: 270: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5411  0436  0022               	movlb	2	; select bank2
  5412  0437  0955               	comf	_knob4_prev^(0+256),w
  5413  0438  0021               	movlb	1	; select bank1
  5414  0439  00AA               	movwf	??_main^(0+128)
  5415  043A  0022               	movlb	2	; select bank2
  5416  043B  0956               	comf	(_knob4_prev+1)^(0+256),w
  5417  043C  0021               	movlb	1	; select bank1
  5418  043D  00AB               	movwf	(??_main^(0+128)+1)
  5419  043E  0AAA               	incf	??_main^(0+128),f
  5420  043F  1903               	skipnz
  5421  0440  0AAB               	incf	(??_main^(0+128)+1),f
  5422  0441  0022               	movlb	2	; select bank2
  5423  0442  083E               	movf	_knob_4_pos^(0+256),w
  5424  0443  0021               	movlb	1	; select bank1
  5425  0444  072A               	addwf	??_main^(0+128),w
  5426  0445  00AC               	movwf	(??_main+2)^(0+128)
  5427  0446  0022               	movlb	2	; select bank2
  5428  0447  083F               	movf	(_knob_4_pos+1)^(0+256),w
  5429  0448  0021               	movlb	1	; select bank1
  5430  0449  3D2B               	addwfc	(??_main+1)^(0+128),w
  5431  044A  00AD               	movwf	(??_main+3)^(0+128)
  5432  044B  082D               	movf	(??_main+3)^(0+128),w
  5433  044C  3A80               	xorlw	128
  5434  044D  00AE               	movwf	(??_main+4)^(0+128)
  5435  044E  3080               	movlw	128
  5436  044F  022E               	subwf	(??_main+4)^(0+128),w
  5437  0450  1D03               	skipz
  5438  0451  2C54               	goto	u4095
  5439  0452  3004               	movlw	4
  5440  0453  022C               	subwf	(??_main+2)^(0+128),w
  5441  0454                     u4095:	
  5442  0454  1803               	skipnc
  5443  0455  2C76               	goto	l4059
  5444  0456  0022               	movlb	2	; select bank2
  5445  0457  0955               	comf	_knob4_prev^(0+256),w
  5446  0458  0021               	movlb	1	; select bank1
  5447  0459  00AA               	movwf	??_main^(0+128)
  5448  045A  0022               	movlb	2	; select bank2
  5449  045B  0956               	comf	(_knob4_prev+1)^(0+256),w
  5450  045C  0021               	movlb	1	; select bank1
  5451  045D  00AB               	movwf	(??_main^(0+128)+1)
  5452  045E  0AAA               	incf	??_main^(0+128),f
  5453  045F  1903               	skipnz
  5454  0460  0AAB               	incf	(??_main^(0+128)+1),f
  5455  0461  0022               	movlb	2	; select bank2
  5456  0462  083E               	movf	_knob_4_pos^(0+256),w
  5457  0463  0021               	movlb	1	; select bank1
  5458  0464  072A               	addwf	??_main^(0+128),w
  5459  0465  00AC               	movwf	(??_main+2)^(0+128)
  5460  0466  0022               	movlb	2	; select bank2
  5461  0467  083F               	movf	(_knob_4_pos+1)^(0+256),w
  5462  0468  0021               	movlb	1	; select bank1
  5463  0469  3D2B               	addwfc	(??_main+1)^(0+128),w
  5464  046A  00AD               	movwf	(??_main+3)^(0+128)
  5465  046B  082D               	movf	(??_main+3)^(0+128),w
  5466  046C  3A80               	xorlw	128
  5467  046D  00AE               	movwf	(??_main+4)^(0+128)
  5468  046E  307F               	movlw	127
  5469  046F  022E               	subwf	(??_main+4)^(0+128),w
  5470  0470  1D03               	skipz
  5471  0471  2C74               	goto	u4105
  5472  0472  30FD               	movlw	253
  5473  0473  022C               	subwf	(??_main+2)^(0+128),w
  5474  0474                     u4105:	
  5475  0474  1803               	skipnc
  5476  0475  2CBB               	goto	l4063
  5477  0476                     l4059:	
  5478                           
  5479                           ;main.c: 271: knob4_prev = knob_4_pos;
  5480  0476  0022               	movlb	2	; select bank2
  5481  0477  083F               	movf	(_knob_4_pos+1)^(0+256),w
  5482  0478  00D6               	movwf	(_knob4_prev+1)^(0+256)
  5483  0479  083E               	movf	_knob_4_pos^(0+256),w
  5484  047A  00D5               	movwf	_knob4_prev^(0+256)
  5485                           
  5486                           ;main.c: 272: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5487  047B  3000               	movlw	0
  5488  047C  0020               	movlb	0	; select bank0
  5489  047D  00E1               	movwf	map@out_max
  5490  047E  307A               	movlw	122
  5491  047F  00E2               	movwf	map@out_max+1
  5492  0480  3044               	movlw	68
  5493  0481  00E3               	movwf	map@out_max+2
  5494  0482  3000               	movlw	0
  5495  0483  00DE               	movwf	map@out_min
  5496  0484  3070               	movlw	112
  5497  0485  00DF               	movwf	map@out_min+1
  5498  0486  3042               	movlw	66
  5499  0487  00E0               	movwf	map@out_min+2
  5500  0488  30C0               	movlw	192
  5501  0489  00DB               	movwf	map@in_max
  5502  048A  307F               	movlw	127
  5503  048B  00DC               	movwf	map@in_max+1
  5504  048C  3044               	movlw	68
  5505  048D  00DD               	movwf	map@in_max+2
  5506  048E  3000               	movlw	0
  5507  048F  00D8               	movwf	map@in_min
  5508  0490  3000               	movlw	0
  5509  0491  00D9               	movwf	map@in_min+1
  5510  0492  3000               	movlw	0
  5511  0493  00DA               	movwf	map@in_min+2
  5512  0494  0022               	movlb	2	; select bank2
  5513  0495  0856               	movf	(_knob4_prev+1)^(0+256),w
  5514  0496  0020               	movlb	0	; select bank0
  5515  0497  00A9               	movwf	___awtoft@c+1
  5516  0498  0022               	movlb	2	; select bank2
  5517  0499  0855               	movf	_knob4_prev^(0+256),w
  5518  049A  0020               	movlb	0	; select bank0
  5519  049B  00A8               	movwf	___awtoft@c
  5520  049C  319F  27DE  3182   	fcall	___awtoft
  5521  049F  0020               	movlb	0	; select bank0
  5522  04A0  0828               	movf	?___awtoft,w
  5523  04A1  00D5               	movwf	map@x
  5524  04A2  0829               	movf	?___awtoft+1,w
  5525  04A3  00D6               	movwf	map@x+1
  5526  04A4  082A               	movf	?___awtoft+2,w
  5527  04A5  00D7               	movwf	map@x+2
  5528  04A6  3197  2775  3182   	fcall	_map
  5529  04A9  0020               	movlb	0	; select bank0
  5530  04AA  0855               	movf	?_map,w
  5531  04AB  00E7               	movwf	___fttol@f1
  5532  04AC  0856               	movf	?_map+1,w
  5533  04AD  00E8               	movwf	___fttol@f1+1
  5534  04AE  0857               	movf	?_map+2,w
  5535  04AF  00E9               	movwf	___fttol@f1+2
  5536  04B0  3188  2002  3182   	fcall	___fttol
  5537  04B3  0020               	movlb	0	; select bank0
  5538  04B4  0868               	movf	?___fttol+1,w
  5539  04B5  0022               	movlb	2	; select bank2
  5540  04B6  00DA               	movwf	(_mod_delay_time+1)^(0+256)
  5541  04B7  0020               	movlb	0	; select bank0
  5542  04B8  0867               	movf	?___fttol,w
  5543  04B9  0022               	movlb	2	; select bank2
  5544  04BA  00D9               	movwf	_mod_delay_time^(0+256)
  5545  04BB                     l4063:	
  5546                           
  5547                           ;main.c: 273: }
  5548                           ;main.c: 281: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5549  04BB  0022               	movlb	2	; select bank2
  5550  04BC  0957               	comf	_knob5_prev^(0+256),w
  5551  04BD  0021               	movlb	1	; select bank1
  5552  04BE  00AA               	movwf	??_main^(0+128)
  5553  04BF  0022               	movlb	2	; select bank2
  5554  04C0  0958               	comf	(_knob5_prev+1)^(0+256),w
  5555  04C1  0021               	movlb	1	; select bank1
  5556  04C2  00AB               	movwf	(??_main^(0+128)+1)
  5557  04C3  0AAA               	incf	??_main^(0+128),f
  5558  04C4  1903               	skipnz
  5559  04C5  0AAB               	incf	(??_main^(0+128)+1),f
  5560  04C6  0022               	movlb	2	; select bank2
  5561  04C7  0840               	movf	_knob_5_pos^(0+256),w
  5562  04C8  0021               	movlb	1	; select bank1
  5563  04C9  072A               	addwf	??_main^(0+128),w
  5564  04CA  00AC               	movwf	(??_main+2)^(0+128)
  5565  04CB  0022               	movlb	2	; select bank2
  5566  04CC  0841               	movf	(_knob_5_pos+1)^(0+256),w
  5567  04CD  0021               	movlb	1	; select bank1
  5568  04CE  3D2B               	addwfc	(??_main+1)^(0+128),w
  5569  04CF  00AD               	movwf	(??_main+3)^(0+128)
  5570  04D0  082D               	movf	(??_main+3)^(0+128),w
  5571  04D1  3A80               	xorlw	128
  5572  04D2  00AE               	movwf	(??_main+4)^(0+128)
  5573  04D3  3080               	movlw	128
  5574  04D4  022E               	subwf	(??_main+4)^(0+128),w
  5575  04D5  1D03               	skipz
  5576  04D6  2CD9               	goto	u4115
  5577  04D7  3004               	movlw	4
  5578  04D8  022C               	subwf	(??_main+2)^(0+128),w
  5579  04D9                     u4115:	
  5580  04D9  1803               	skipnc
  5581  04DA  2CFB               	goto	l4067
  5582  04DB  0022               	movlb	2	; select bank2
  5583  04DC  0957               	comf	_knob5_prev^(0+256),w
  5584  04DD  0021               	movlb	1	; select bank1
  5585  04DE  00AA               	movwf	??_main^(0+128)
  5586  04DF  0022               	movlb	2	; select bank2
  5587  04E0  0958               	comf	(_knob5_prev+1)^(0+256),w
  5588  04E1  0021               	movlb	1	; select bank1
  5589  04E2  00AB               	movwf	(??_main^(0+128)+1)
  5590  04E3  0AAA               	incf	??_main^(0+128),f
  5591  04E4  1903               	skipnz
  5592  04E5  0AAB               	incf	(??_main^(0+128)+1),f
  5593  04E6  0022               	movlb	2	; select bank2
  5594  04E7  0840               	movf	_knob_5_pos^(0+256),w
  5595  04E8  0021               	movlb	1	; select bank1
  5596  04E9  072A               	addwf	??_main^(0+128),w
  5597  04EA  00AC               	movwf	(??_main+2)^(0+128)
  5598  04EB  0022               	movlb	2	; select bank2
  5599  04EC  0841               	movf	(_knob_5_pos+1)^(0+256),w
  5600  04ED  0021               	movlb	1	; select bank1
  5601  04EE  3D2B               	addwfc	(??_main+1)^(0+128),w
  5602  04EF  00AD               	movwf	(??_main+3)^(0+128)
  5603  04F0  082D               	movf	(??_main+3)^(0+128),w
  5604  04F1  3A80               	xorlw	128
  5605  04F2  00AE               	movwf	(??_main+4)^(0+128)
  5606  04F3  307F               	movlw	127
  5607  04F4  022E               	subwf	(??_main+4)^(0+128),w
  5608  04F5  1D03               	skipz
  5609  04F6  2CF9               	goto	u4125
  5610  04F7  30FD               	movlw	253
  5611  04F8  022C               	subwf	(??_main+2)^(0+128),w
  5612  04F9                     u4125:	
  5613  04F9  1803               	skipnc
  5614  04FA  2D00               	goto	l277
  5615  04FB                     l4067:	
  5616                           
  5617                           ;main.c: 282: knob5_prev = knob_5_pos;
  5618  04FB  0022               	movlb	2	; select bank2
  5619  04FC  0841               	movf	(_knob_5_pos+1)^(0+256),w
  5620  04FD  00D8               	movwf	(_knob5_prev+1)^(0+256)
  5621  04FE  0840               	movf	_knob_5_pos^(0+256),w
  5622  04FF  00D7               	movwf	_knob5_prev^(0+256)
  5623  0500                     l277:	
  5624                           
  5625                           ;main.c: 283: }
  5626                           ;main.c: 296: if (mod_timer >= mod_delay_time) {
  5627  0500  0022               	movlb	2	; select bank2
  5628  0501  0859               	movf	_mod_delay_time^(0+256),w
  5629  0502  0021               	movlb	1	; select bank1
  5630  0503  00AA               	movwf	??_main^(0+128)
  5631  0504  0022               	movlb	2	; select bank2
  5632  0505  085A               	movf	(_mod_delay_time+1)^(0+256),w
  5633  0506  0021               	movlb	1	; select bank1
  5634  0507  00AB               	movwf	(??_main^(0+128)+1)
  5635  0508  3000               	movlw	0
  5636  0509  1BAB               	btfsc	(??_main^(0+128)+1),7
  5637  050A  30FF               	movlw	255
  5638  050B  00AC               	movwf	(??_main^(0+128)+2)
  5639  050C  00AD               	movwf	(??_main^(0+128)+3)
  5640  050D  0022               	movlb	2	; select bank2
  5641  050E  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  5642  050F  3A80               	xorlw	128
  5643  0510  0021               	movlb	1	; select bank1
  5644  0511  00AE               	movwf	(??_main+4)^(0+128)
  5645  0512  082D               	movf	(??_main+3)^(0+128),w
  5646  0513  3A80               	xorlw	128
  5647  0514  022E               	subwf	(??_main+4)^(0+128),w
  5648  0515  0022               	movlb	2	; select bank2
  5649  0516  1D03               	skipz
  5650  0517  2D28               	goto	u4133
  5651  0518  0021               	movlb	1	; select bank1
  5652  0519  082C               	movf	(??_main+2)^(0+128),w
  5653  051A  0022               	movlb	2	; select bank2
  5654  051B  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  5655  051C  1D03               	skipz
  5656  051D  2D28               	goto	u4133
  5657  051E  0021               	movlb	1	; select bank1
  5658  051F  082B               	movf	(??_main+1)^(0+128),w
  5659  0520  0022               	movlb	2	; select bank2
  5660  0521  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  5661  0522  1D03               	skipz
  5662  0523  2D28               	goto	u4133
  5663  0524  0021               	movlb	1	; select bank1
  5664  0525  082A               	movf	??_main^(0+128),w
  5665  0526  0022               	movlb	2	; select bank2
  5666  0527  0224               	subwf	_mod_timer^(0+256),w	;volatile
  5667  0528                     u4133:	
  5668  0528  1C03               	skipc
  5669  0529  2E4D               	goto	l4121
  5670                           
  5671                           ;main.c: 298: mod_counter = mod_counter + 1;
  5672  052A  0021               	movlb	1	; select bank1
  5673  052B  0851               	movf	_mod_counter^(0+128),w
  5674  052C  3E01               	addlw	1
  5675  052D  00D1               	movwf	_mod_counter^(0+128)
  5676  052E  3000               	movlw	0
  5677  052F  3D52               	addwfc	(_mod_counter+1)^(0+128),w
  5678  0530  00D2               	movwf	(_mod_counter+1)^(0+128)
  5679                           
  5680                           ;main.c: 299: mod_timer = 0;
  5681  0531  3000               	movlw	0
  5682  0532  0022               	movlb	2	; select bank2
  5683  0533  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  5684  0534  3000               	movlw	0
  5685  0535  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  5686  0536  3000               	movlw	0
  5687  0537  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  5688  0538  3000               	movlw	0
  5689  0539  00A4               	movwf	_mod_timer^(0+256)	;volatile
  5690                           
  5691                           ;main.c: 301: if (bottom_push_state == 1 || bottom_push_state == 5) {
  5692  053A  0021               	movlb	1	; select bank1
  5693  053B  0365               	decf	_bottom_push_state^(0+128),w
  5694  053C  0466               	iorwf	(_bottom_push_state+1)^(0+128),w
  5695  053D  1903               	btfsc	3,2
  5696  053E  2D44               	goto	l4077
  5697  053F  3005               	movlw	5
  5698  0540  0665               	xorwf	_bottom_push_state^(0+128),w
  5699  0541  0466               	iorwf	(_bottom_push_state+1)^(0+128),w
  5700  0542  1D03               	btfss	3,2
  5701  0543  2D4D               	goto	l4081
  5702  0544                     l4077:	
  5703                           
  5704                           ;main.c: 302: if (mod_counter >= 61) {
  5705  0544  0852               	movf	(_mod_counter+1)^(0+128),w
  5706  0545  3A80               	xorlw	128
  5707  0546  00AA               	movwf	??_main^(0+128)
  5708  0547  3080               	movlw	128
  5709  0548  022A               	subwf	??_main^(0+128),w
  5710  0549  1D03               	skipz
  5711  054A  2D56               	goto	u4175
  5712  054B  303D               	movlw	61
  5713  054C  2D55               	goto	L1
  5714  054D                     l4081:	
  5715                           ;main.c: 304: }
  5716                           ;main.c: 305: } else {
  5717                           
  5718                           ;main.c: 303: mod_counter = 0;
  5719                           
  5720                           
  5721                           ;main.c: 306: if (mod_counter > 31) {
  5722  054D  0852               	movf	(_mod_counter+1)^(0+128),w
  5723  054E  3A80               	xorlw	128
  5724  054F  00AA               	movwf	??_main^(0+128)
  5725  0550  3080               	movlw	128
  5726  0551  022A               	subwf	??_main^(0+128),w
  5727  0552  1D03               	skipz
  5728  0553  2D56               	goto	u4175
  5729  0554  3020               	movlw	32
  5730  0555                     L1:	
  5731  0555  0251               	subwf	_mod_counter^(0+128),w
  5732  0556                     u4175:	
  5733  0556  1C03               	skipc
  5734  0557  2D5B               	goto	l4085
  5735                           
  5736                           ;main.c: 307: mod_counter = 0;
  5737  0558  0021               	movlb	1	; select bank1
  5738  0559  01D1               	clrf	_mod_counter^(0+128)
  5739  055A  01D2               	clrf	(_mod_counter+1)^(0+128)
  5740  055B                     l4085:	
  5741                           
  5742                           ;main.c: 308: }
  5743                           ;main.c: 309: }
  5744                           ;main.c: 312: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  5745  055B  3000               	movlw	0
  5746  055C  0020               	movlb	0	; select bank0
  5747  055D  00E1               	movwf	map@out_max
  5748  055E  3000               	movlw	0
  5749  055F  00E2               	movwf	map@out_max+1
  5750  0560  3000               	movlw	0
  5751  0561  00E3               	movwf	map@out_max+2
  5752  0562  3060               	movlw	96
  5753  0563  00DE               	movwf	map@out_min
  5754  0564  309F               	movlw	159
  5755  0565  00DF               	movwf	map@out_min+1
  5756  0566  3044               	movlw	68
  5757  0567  00E0               	movwf	map@out_min+2
  5758  0568  30C0               	movlw	192
  5759  0569  00DB               	movwf	map@in_max
  5760  056A  307F               	movlw	127
  5761  056B  00DC               	movwf	map@in_max+1
  5762  056C  3044               	movlw	68
  5763  056D  00DD               	movwf	map@in_max+2
  5764  056E  3000               	movlw	0
  5765  056F  00D8               	movwf	map@in_min
  5766  0570  3000               	movlw	0
  5767  0571  00D9               	movwf	map@in_min+1
  5768  0572  3000               	movlw	0
  5769  0573  00DA               	movwf	map@in_min+2
  5770  0574  0022               	movlb	2	; select bank2
  5771  0575  0858               	movf	(_knob5_prev+1)^(0+256),w
  5772  0576  0020               	movlb	0	; select bank0
  5773  0577  00A9               	movwf	___awtoft@c+1
  5774  0578  0022               	movlb	2	; select bank2
  5775  0579  0857               	movf	_knob5_prev^(0+256),w
  5776  057A  0020               	movlb	0	; select bank0
  5777  057B  00A8               	movwf	___awtoft@c
  5778  057C  319F  27DE  3182   	fcall	___awtoft
  5779  057F  0020               	movlb	0	; select bank0
  5780  0580  0828               	movf	?___awtoft,w
  5781  0581  00D5               	movwf	map@x
  5782  0582  0829               	movf	?___awtoft+1,w
  5783  0583  00D6               	movwf	map@x+1
  5784  0584  082A               	movf	?___awtoft+2,w
  5785  0585  00D7               	movwf	map@x+2
  5786  0586  3197  2775  3182   	fcall	_map
  5787  0589  0020               	movlb	0	; select bank0
  5788  058A  0855               	movf	?_map,w
  5789  058B  00E7               	movwf	___fttol@f1
  5790  058C  0856               	movf	?_map+1,w
  5791  058D  00E8               	movwf	___fttol@f1+1
  5792  058E  0857               	movf	?_map+2,w
  5793  058F  00E9               	movwf	___fttol@f1+2
  5794  0590  3188  2002  3182   	fcall	___fttol
  5795  0593  0020               	movlb	0	; select bank0
  5796  0594  0868               	movf	?___fttol+1,w
  5797  0595  0021               	movlb	1	; select bank1
  5798  0596  00BA               	movwf	(main@adjusted_pot_value+1)^(0+128)
  5799  0597  0020               	movlb	0	; select bank0
  5800  0598  0867               	movf	?___fttol,w
  5801  0599  0021               	movlb	1	; select bank1
  5802  059A  00B9               	movwf	main@adjusted_pot_value^(0+128)
  5803                           
  5804                           ;main.c: 313: switch (bottom_push_state) {
  5805  059B  2DF7               	goto	l4115
  5806  059C                     l4087:	
  5807                           ;main.c: 314: case 1:
  5808                           
  5809                           
  5810                           ;main.c: 315: mod_value = mod5[mod_counter];
  5811  059C  0852               	movf	(_mod_counter+1)^(0+128),w
  5812  059D  00AB               	movwf	(??_main^(0+128)+1)
  5813  059E  0851               	movf	_mod_counter^(0+128),w
  5814  059F  00AA               	movwf	??_main^(0+128)
  5815  05A0  35AA               	lslf	??_main^(0+128),f
  5816  05A1  0DAB               	rlf	(??_main^(0+128)+1),f
  5817  05A2  3078               	movlw	120
  5818  05A3  00AC               	movwf	(??_main+2)^(0+128)
  5819  05A4  3023               	movlw	35
  5820  05A5  00AD               	movwf	((??_main+2)^(0+128)+1)
  5821  05A6  082A               	movf	??_main^(0+128),w
  5822  05A7  072C               	addwf	(??_main+2)^(0+128),w
  5823  05A8  0086               	movwf	6
  5824  05A9  082B               	movf	(??_main+1)^(0+128),w
  5825  05AA  3D2D               	addwfc	(??_main+3)^(0+128),w
  5826  05AB  0087               	movwf	7
  5827  05AC  3F40               	moviw [0]fsr1
  5828  05AD  0022               	movlb	2	; select bank2
  5829  05AE  00C2               	movwf	_mod_value^(0+256)
  5830  05AF  3F41               	moviw [1]fsr1
  5831  05B0  2DD1               	goto	L4
  5832  05B1                     l4091:	
  5833                           ;main.c: 318: case 2:
  5834                           
  5835                           ;main.c: 317: break;
  5836                           
  5837                           ;main.c: 316: PORTCbits.RC4 = 0;
  5838                           
  5839                           
  5840                           ;main.c: 319: mod_value = mod2[mod_counter];
  5841  05B1  0021               	movlb	1	; select bank1
  5842  05B2  3551               	lslf	_mod_counter^(0+128),w
  5843  05B3  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  5844  05B4  0086               	movwf	6
  5845  05B5  3002               	movlw	2	; select bank4/5
  5846  05B6  0087               	movwf	7
  5847  05B7  3F40               	moviw [0]fsr1
  5848  05B8  0022               	movlb	2	; select bank2
  5849  05B9  00C2               	movwf	_mod_value^(0+256)
  5850  05BA  3F41               	moviw [1]fsr1
  5851  05BB  2DD1               	goto	L4
  5852  05BC                     l4095:	
  5853                           ;main.c: 322: case 3:
  5854                           
  5855                           ;main.c: 321: break;
  5856                           
  5857                           ;main.c: 320: PORTCbits.RC4 = 0;
  5858                           
  5859                           
  5860                           ;main.c: 323: mod_value = mod3[mod_counter];
  5861  05BC  0021               	movlb	1	; select bank1
  5862  05BD  3551               	lslf	_mod_counter^(0+128),w
  5863  05BE  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  5864  05BF  0086               	movwf	6
  5865  05C0  3002               	movlw	2	; select bank5/6
  5866  05C1  0087               	movwf	7
  5867  05C2  3F40               	moviw [0]fsr1
  5868  05C3  0022               	movlb	2	; select bank2
  5869  05C4  00C2               	movwf	_mod_value^(0+256)
  5870  05C5  3F41               	moviw [1]fsr1
  5871  05C6  2DD1               	goto	L4
  5872  05C7                     l4099:	
  5873                           ;main.c: 326: case 4:
  5874                           
  5875                           ;main.c: 325: break;
  5876                           
  5877                           ;main.c: 324: PORTCbits.RC4 = 0;
  5878                           
  5879                           
  5880                           ;main.c: 327: mod_value = mod4[mod_counter];
  5881  05C7  0021               	movlb	1	; select bank1
  5882  05C8  3551               	lslf	_mod_counter^(0+128),w
  5883  05C9  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  5884  05CA  0086               	movwf	6
  5885  05CB  3003               	movlw	3	; select bank6/7
  5886  05CC  0087               	movwf	7
  5887  05CD  3F40               	moviw [0]fsr1
  5888  05CE  0022               	movlb	2	; select bank2
  5889  05CF  00C2               	movwf	_mod_value^(0+256)
  5890  05D0  3F41               	moviw [1]fsr1
  5891  05D1                     L4:	
  5892  05D1  00C3               	movwf	(_mod_value+1)^(0+256)
  5893  05D2  2DF4               	goto	l4111
  5894  05D3                     l4103:	
  5895                           ;main.c: 330: case 5:
  5896                           
  5897                           ;main.c: 329: break;
  5898                           
  5899                           ;main.c: 328: PORTCbits.RC4 = 0;
  5900                           
  5901                           
  5902                           ;main.c: 331: mod_value = mod5[mod_counter];
  5903  05D3  0021               	movlb	1	; select bank1
  5904  05D4  0852               	movf	(_mod_counter+1)^(0+128),w
  5905  05D5  00AB               	movwf	(??_main^(0+128)+1)
  5906  05D6  0851               	movf	_mod_counter^(0+128),w
  5907  05D7  00AA               	movwf	??_main^(0+128)
  5908  05D8  35AA               	lslf	??_main^(0+128),f
  5909  05D9  0DAB               	rlf	(??_main^(0+128)+1),f
  5910  05DA  3078               	movlw	120
  5911  05DB  00AC               	movwf	(??_main+2)^(0+128)
  5912  05DC  3023               	movlw	35
  5913  05DD  00AD               	movwf	((??_main+2)^(0+128)+1)
  5914  05DE  082A               	movf	??_main^(0+128),w
  5915  05DF  072C               	addwf	(??_main+2)^(0+128),w
  5916  05E0  0086               	movwf	6
  5917  05E1  082B               	movf	(??_main+1)^(0+128),w
  5918  05E2  3D2D               	addwfc	(??_main+3)^(0+128),w
  5919  05E3  0087               	movwf	7
  5920  05E4  3F40               	moviw [0]fsr1
  5921  05E5  0022               	movlb	2	; select bank2
  5922  05E6  00C2               	movwf	_mod_value^(0+256)
  5923  05E7  3F41               	moviw [1]fsr1
  5924  05E8  00C3               	movwf	(_mod_value+1)^(0+256)
  5925                           
  5926                           ;main.c: 332: adjusted_pot_value = 1275;
  5927  05E9  30FB               	movlw	251
  5928  05EA  0021               	movlb	1	; select bank1
  5929  05EB  00B9               	movwf	main@adjusted_pot_value^(0+128)
  5930  05EC  3004               	movlw	4
  5931  05ED  00BA               	movwf	(main@adjusted_pot_value^(0+128)+1)
  5932                           
  5933                           ;main.c: 333: PORTCbits.RC4 = 1;
  5934  05EE  0020               	movlb	0	; select bank0
  5935  05EF  160E               	bsf	14,4	;volatile
  5936                           
  5937                           ;main.c: 334: break;
  5938  05F0  2E11               	goto	l4117
  5939  05F1                     l4109:	
  5940                           ;main.c: 335: case 6:
  5941                           
  5942                           
  5943                           ;main.c: 336: mod_value = 0;
  5944  05F1  0022               	movlb	2	; select bank2
  5945  05F2  01C2               	clrf	_mod_value^(0+256)
  5946  05F3  01C3               	clrf	(_mod_value+1)^(0+256)
  5947  05F4                     l4111:	
  5948                           
  5949                           ;main.c: 337: PORTCbits.RC4 = 0;
  5950  05F4  0020               	movlb	0	; select bank0
  5951  05F5  120E               	bcf	14,4	;volatile
  5952                           
  5953                           ;main.c: 339: }
  5954                           
  5955                           ;main.c: 338: break;
  5956  05F6  2E11               	goto	l4117
  5957  05F7                     l4115:	
  5958                           
  5959                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5960                           ; Switch size 1, requested type "space"
  5961                           ; Number of cases is 1, Range of values is 0 to 0
  5962                           ; switch strategies available:
  5963                           ; Name         Instructions Cycles
  5964                           ; simple_byte            4     3 (average)
  5965                           ; direct_byte            8     6 (fixed)
  5966                           ; jumptable            260     6 (fixed)
  5967                           ;	Chosen strategy is simple_byte
  5968  05F7  0021               	movlb	1	; select bank1
  5969  05F8  0866               	movf	(_bottom_push_state+1)^(0+128),w
  5970  05F9  3A00               	xorlw	0	; case 0
  5971  05FA  1903               	skipnz
  5972  05FB  2DFD               	goto	l4393
  5973  05FC  2E11               	goto	l4117
  5974  05FD                     l4393:	
  5975                           
  5976                           ; Switch size 1, requested type "space"
  5977                           ; Number of cases is 6, Range of values is 1 to 6
  5978                           ; switch strategies available:
  5979                           ; Name         Instructions Cycles
  5980                           ; simple_byte           19    10 (average)
  5981                           ; direct_byte           21     9 (fixed)
  5982                           ; jumptable            263     9 (fixed)
  5983                           ;	Chosen strategy is simple_byte
  5984  05FD  0865               	movf	_bottom_push_state^(0+128),w
  5985  05FE  3A01               	xorlw	1	; case 1
  5986  05FF  1903               	skipnz
  5987  0600  2D9C               	goto	l4087
  5988  0601  3A03               	xorlw	3	; case 2
  5989  0602  1903               	skipnz
  5990  0603  2DB1               	goto	l4091
  5991  0604  3A01               	xorlw	1	; case 3
  5992  0605  1903               	skipnz
  5993  0606  2DBC               	goto	l4095
  5994  0607  3A07               	xorlw	7	; case 4
  5995  0608  1903               	skipnz
  5996  0609  2DC7               	goto	l4099
  5997  060A  3A01               	xorlw	1	; case 5
  5998  060B  1903               	skipnz
  5999  060C  2DD3               	goto	l4103
  6000  060D  3A03               	xorlw	3	; case 6
  6001  060E  1903               	skipnz
  6002  060F  2DF1               	goto	l4109
  6003  0610  2E11               	goto	l4117
  6004  0611                     l4117:	
  6005                           
  6006                           ;main.c: 340: mod_value = modulation(mod_value, adjusted_pot_value);
  6007  0611  0022               	movlb	2	; select bank2
  6008  0612  0843               	movf	(_mod_value+1)^(0+256),w
  6009  0613  0020               	movlb	0	; select bank0
  6010  0614  00B6               	movwf	modulation@x+1
  6011  0615  0022               	movlb	2	; select bank2
  6012  0616  0842               	movf	_mod_value^(0+256),w
  6013  0617  0020               	movlb	0	; select bank0
  6014  0618  00B5               	movwf	modulation@x
  6015  0619  0021               	movlb	1	; select bank1
  6016  061A  083A               	movf	(main@adjusted_pot_value+1)^(0+128),w
  6017  061B  0020               	movlb	0	; select bank0
  6018  061C  00B8               	movwf	modulation@y+1
  6019  061D  0021               	movlb	1	; select bank1
  6020  061E  0839               	movf	main@adjusted_pot_value^(0+128),w
  6021  061F  0020               	movlb	0	; select bank0
  6022  0620  00B7               	movwf	modulation@y
  6023  0621  3192  22B7  3182   	fcall	_modulation
  6024  0624  0020               	movlb	0	; select bank0
  6025  0625  0836               	movf	?_modulation+1,w
  6026  0626  0022               	movlb	2	; select bank2
  6027  0627  00C3               	movwf	(_mod_value+1)^(0+256)
  6028  0628  0020               	movlb	0	; select bank0
  6029  0629  0835               	movf	?_modulation,w
  6030  062A  0022               	movlb	2	; select bank2
  6031  062B  00C2               	movwf	_mod_value^(0+256)
  6032                           
  6033                           ;main.c: 341: CCPR9 = mod_value / 2;
  6034  062C  3002               	movlw	2
  6035  062D  0020               	movlb	0	; select bank0
  6036  062E  00A0               	movwf	___awdiv@divisor
  6037  062F  3000               	movlw	0
  6038  0630  00A1               	movwf	___awdiv@divisor+1
  6039  0631  0022               	movlb	2	; select bank2
  6040  0632  0843               	movf	(_mod_value+1)^(0+256),w
  6041  0633  0020               	movlb	0	; select bank0
  6042  0634  00A3               	movwf	___awdiv@dividend+1
  6043  0635  0022               	movlb	2	; select bank2
  6044  0636  0842               	movf	_mod_value^(0+256),w
  6045  0637  0020               	movlb	0	; select bank0
  6046  0638  00A2               	movwf	___awdiv@dividend
  6047  0639  3195  2579  3182   	fcall	___awdiv
  6048  063C  0020               	movlb	0	; select bank0
  6049  063D  0821               	movf	?___awdiv+1,w
  6050  063E  002C               	movlb	12	; select bank12
  6051  063F  009B               	movwf	27	;volatile
  6052  0640  0020               	movlb	0	; select bank0
  6053  0641  0820               	movf	?___awdiv,w
  6054  0642  002C               	movlb	12	; select bank12
  6055  0643  009A               	movwf	26	;volatile
  6056                           
  6057                           ;main.c: 342: mod_timer = 0;
  6058  0644  3000               	movlw	0
  6059  0645  0022               	movlb	2	; select bank2
  6060  0646  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6061  0647  3000               	movlw	0
  6062  0648  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6063  0649  3000               	movlw	0
  6064  064A  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6065  064B  3000               	movlw	0
  6066  064C  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6067  064D                     l4121:	
  6068                           
  6069                           ;main.c: 343: }
  6070                           ;main.c: 348: if (delay_time_changed == 1) {
  6071  064D  034B               	decf	_delay_time_changed^(0+256),w
  6072  064E  044C               	iorwf	(_delay_time_changed+1)^(0+256),w
  6073  064F  1D03               	btfss	3,2
  6074  0650  2A11               	goto	l3991
  6075                           
  6076                           ;main.c: 349: delay_time = baseline_delay_time;
  6077  0651  0021               	movlb	1	; select bank1
  6078  0652  0860               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6079  0653  00E4               	movwf	(_delay_time+3)^(0+128)	;volatile
  6080  0654  085F               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6081  0655  00E3               	movwf	(_delay_time+2)^(0+128)	;volatile
  6082  0656  085E               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6083  0657  00E2               	movwf	(_delay_time+1)^(0+128)	;volatile
  6084  0658  085D               	movf	_baseline_delay_time^(0+128),w	;volatile
  6085  0659  00E1               	movwf	_delay_time^(0+128)	;volatile
  6086                           
  6087                           ;main.c: 350: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6088  065A  085E               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6089  065B  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  6090  065C  085D               	movf	_baseline_delay_time^(0+128),w	;volatile
  6091  065D  00A6               	movwf	set_subdivision@x^(0+128)
  6092  065E  086C               	movf	(_top_push_state+1)^(0+128),w
  6093  065F  00A9               	movwf	(set_subdivision@y+1)^(0+128)
  6094  0660  086B               	movf	_top_push_state^(0+128),w
  6095  0661  00A8               	movwf	set_subdivision@y^(0+128)
  6096  0662  3187  2707  3182   	fcall	_set_subdivision
  6097  0665  0021               	movlb	1	; select bank1
  6098  0666  0826               	movf	?_set_subdivision^(0+128),w
  6099  0667  00E1               	movwf	_delay_time^(0+128)	;volatile
  6100  0668  0827               	movf	(?_set_subdivision+1)^(0+128),w
  6101  0669  00E2               	movwf	(_delay_time+1)^(0+128)	;volatile
  6102  066A  0D89               	rlf	9,f
  6103  066B  3B89               	subwfb	9,f
  6104  066C  0989               	comf	9,f
  6105  066D  00E3               	movwf	(_delay_time+2)^(0+128)	;volatile
  6106  066E  00E4               	movwf	(_delay_time+3)^(0+128)	;volatile
  6107                           
  6108                           ;main.c: 351: delayfound = 0;
  6109  066F  0022               	movlb	2	; select bank2
  6110  0670  01BC               	clrf	_delayfound^(0+256)
  6111  0671  01BD               	clrf	(_delayfound+1)^(0+256)
  6112                           
  6113                           ;main.c: 352: delay_counter = 0;
  6114  0672  01BA               	clrf	_delay_counter^(0+256)
  6115  0673  01BB               	clrf	(_delay_counter+1)^(0+256)
  6116  0674                     l4137:	
  6117                           ;main.c: 353: while (delayfound == 0) {
  6118                           
  6119  0674  0022               	movlb	2	; select bank2
  6120  0675  083C               	movf	_delayfound^(0+256),w
  6121  0676  043D               	iorwf	(_delayfound+1)^(0+256),w
  6122  0677  1D03               	btfss	3,2
  6123  0678  2ECF               	goto	l4139
  6124                           
  6125                           ;main.c: 354: if (delay[delay_counter] <= delay_time * 2) {
  6126  0679  083B               	movf	(_delay_counter+1)^(0+256),w
  6127  067A  0021               	movlb	1	; select bank1
  6128  067B  00AB               	movwf	(??_main^(0+128)+1)
  6129  067C  0022               	movlb	2	; select bank2
  6130  067D  083A               	movf	_delay_counter^(0+256),w
  6131  067E  0021               	movlb	1	; select bank1
  6132  067F  00AA               	movwf	??_main^(0+128)
  6133  0680  35AA               	lslf	??_main^(0+128),f
  6134  0681  0DAB               	rlf	(??_main^(0+128)+1),f
  6135  0682  30F2               	movlw	242
  6136  0683  00AC               	movwf	(??_main+2)^(0+128)
  6137  0684  3023               	movlw	35
  6138  0685  00AD               	movwf	((??_main+2)^(0+128)+1)
  6139  0686  082A               	movf	??_main^(0+128),w
  6140  0687  072C               	addwf	(??_main+2)^(0+128),w
  6141  0688  0086               	movwf	6
  6142  0689  082B               	movf	(??_main+1)^(0+128),w
  6143  068A  3D2D               	addwfc	(??_main+3)^(0+128),w
  6144  068B  0087               	movwf	7
  6145  068C  3F40               	moviw [0]fsr1
  6146  068D  00AE               	movwf	(??_main+4)^(0+128)
  6147  068E  3F41               	moviw [1]fsr1
  6148  068F  00AF               	movwf	((??_main+4)^(0+128)+1)
  6149  0690  082E               	movf	(??_main+4)^(0+128),w
  6150  0691  00B0               	movwf	(??_main+6)^(0+128)
  6151  0692  082F               	movf	(??_main+5)^(0+128),w
  6152  0693  00B1               	movwf	((??_main+6)^(0+128)+1)
  6153  0694  3000               	movlw	0
  6154  0695  1BB1               	btfsc	((??_main+6)^(0+128)+1),7
  6155  0696  30FF               	movlw	255
  6156  0697  00B2               	movwf	((??_main+6)^(0+128)+2)
  6157  0698  00B3               	movwf	((??_main+6)^(0+128)+3)
  6158  0699  0861               	movf	_delay_time^(0+128),w	;volatile
  6159  069A  00B4               	movwf	(??_main+10)^(0+128)
  6160  069B  0862               	movf	(_delay_time+1)^(0+128),w	;volatile
  6161  069C  00B5               	movwf	((??_main+10)^(0+128)+1)
  6162  069D  0863               	movf	(_delay_time+2)^(0+128),w	;volatile
  6163  069E  00B6               	movwf	((??_main+10)^(0+128)+2)
  6164  069F  0864               	movf	(_delay_time+3)^(0+128),w	;volatile
  6165  06A0  00B7               	movwf	((??_main+10)^(0+128)+3)
  6166  06A1  3001               	movlw	1
  6167  06A2                     u4195:	
  6168  06A2  35B4               	lslf	(??_main+10)^(0+128),f
  6169  06A3  0DB5               	rlf	((??_main+10)^(0+128)+1),f
  6170  06A4  0DB6               	rlf	((??_main+10)^(0+128)+2),f
  6171  06A5  0DB7               	rlf	((??_main+10)^(0+128)+3),f
  6172  06A6  0B89               	decfsz	9,f
  6173  06A7  2EA2               	goto	u4195
  6174  06A8  0837               	movf	(??_main+13)^(0+128),w
  6175  06A9  3A80               	xorlw	128
  6176  06AA  00B8               	movwf	(??_main+14)^(0+128)
  6177  06AB  0833               	movf	(??_main+9)^(0+128),w
  6178  06AC  3A80               	xorlw	128
  6179  06AD  0238               	subwf	(??_main+14)^(0+128),w
  6180  06AE  1D03               	skipz
  6181  06AF  2EBA               	goto	u4203
  6182  06B0  0832               	movf	(??_main+8)^(0+128),w
  6183  06B1  0236               	subwf	(??_main+12)^(0+128),w
  6184  06B2  1D03               	skipz
  6185  06B3  2EBA               	goto	u4203
  6186  06B4  0831               	movf	(??_main+7)^(0+128),w
  6187  06B5  0235               	subwf	(??_main+11)^(0+128),w
  6188  06B6  1D03               	skipz
  6189  06B7  2EBA               	goto	u4203
  6190  06B8  0830               	movf	(??_main+6)^(0+128),w
  6191  06B9  0234               	subwf	(??_main+10)^(0+128),w
  6192  06BA                     u4203:	
  6193  06BA  1C03               	skipc
  6194  06BB  2EC9               	goto	l4135
  6195                           
  6196                           ;main.c: 355: delayfound = 1;
  6197  06BC  3001               	movlw	1
  6198  06BD  0022               	movlb	2	; select bank2
  6199  06BE  00BC               	movwf	_delayfound^(0+256)
  6200  06BF  3000               	movlw	0
  6201  06C0  00BD               	movwf	(_delayfound^(0+256)+1)
  6202                           
  6203                           ;main.c: 356: CCPR1 = delay_counter;
  6204  06C1  083B               	movf	(_delay_counter+1)^(0+256),w
  6205  06C2  0025               	movlb	5	; select bank5
  6206  06C3  0092               	movwf	18	;volatile
  6207  06C4  0022               	movlb	2	; select bank2
  6208  06C5  083A               	movf	_delay_counter^(0+256),w
  6209  06C6  0025               	movlb	5	; select bank5
  6210  06C7  0091               	movwf	17	;volatile
  6211                           
  6212                           ;main.c: 357: } else {
  6213  06C8  2E74               	goto	l4137
  6214  06C9                     l4135:	
  6215                           
  6216                           ;main.c: 358: delay_counter++;
  6217  06C9  3001               	movlw	1
  6218  06CA  0022               	movlb	2	; select bank2
  6219  06CB  07BA               	addwf	_delay_counter^(0+256),f
  6220  06CC  3000               	movlw	0
  6221  06CD  3DBB               	addwfc	(_delay_counter+1)^(0+256),f
  6222  06CE  2E74               	goto	l4137
  6223  06CF                     l4139:	
  6224                           
  6225                           ;main.c: 359: }
  6226                           ;main.c: 360: }
  6227                           ;main.c: 361: mod_delay_time = delay_time / 7.5;
  6228  06CF  0021               	movlb	1	; select bank1
  6229  06D0  0864               	movf	(_delay_time+3)^(0+128),w	;volatile
  6230  06D1  0020               	movlb	0	; select bank0
  6231  06D2  00AB               	movwf	___altoft@c+3
  6232  06D3  0021               	movlb	1	; select bank1
  6233  06D4  0863               	movf	(_delay_time+2)^(0+128),w	;volatile
  6234  06D5  0020               	movlb	0	; select bank0
  6235  06D6  00AA               	movwf	___altoft@c+2
  6236  06D7  0021               	movlb	1	; select bank1
  6237  06D8  0862               	movf	(_delay_time+1)^(0+128),w	;volatile
  6238  06D9  0020               	movlb	0	; select bank0
  6239  06DA  00A9               	movwf	___altoft@c+1
  6240  06DB  0021               	movlb	1	; select bank1
  6241  06DC  0861               	movf	_delay_time^(0+128),w	;volatile
  6242  06DD  0020               	movlb	0	; select bank0
  6243  06DE  00A8               	movwf	___altoft@c
  6244  06DF  3192  227A  3182   	fcall	___altoft
  6245  06E2  0020               	movlb	0	; select bank0
  6246  06E3  0828               	movf	?___altoft,w
  6247  06E4  00C8               	movwf	___ftdiv@f1
  6248  06E5  0829               	movf	?___altoft+1,w
  6249  06E6  00C9               	movwf	___ftdiv@f1+1
  6250  06E7  082A               	movf	?___altoft+2,w
  6251  06E8  00CA               	movwf	___ftdiv@f1+2
  6252  06E9  3000               	movlw	0
  6253  06EA  00C5               	movwf	___ftdiv@f2
  6254  06EB  30F0               	movlw	240
  6255  06EC  00C6               	movwf	___ftdiv@f2+1
  6256  06ED  3040               	movlw	64
  6257  06EE  00C7               	movwf	___ftdiv@f2+2
  6258  06EF  3188  20A1  3182   	fcall	___ftdiv
  6259  06F2  0020               	movlb	0	; select bank0
  6260  06F3  0845               	movf	?___ftdiv,w
  6261  06F4  00E7               	movwf	___fttol@f1
  6262  06F5  0846               	movf	?___ftdiv+1,w
  6263  06F6  00E8               	movwf	___fttol@f1+1
  6264  06F7  0847               	movf	?___ftdiv+2,w
  6265  06F8  00E9               	movwf	___fttol@f1+2
  6266  06F9  3188  2002  3182   	fcall	___fttol
  6267  06FC  0020               	movlb	0	; select bank0
  6268  06FD  0868               	movf	?___fttol+1,w
  6269  06FE  0022               	movlb	2	; select bank2
  6270  06FF  00DA               	movwf	(_mod_delay_time+1)^(0+256)
  6271  0700  0020               	movlb	0	; select bank0
  6272  0701  0867               	movf	?___fttol,w
  6273  0702  0022               	movlb	2	; select bank2
  6274  0703  00D9               	movwf	_mod_delay_time^(0+256)
  6275                           
  6276                           ;main.c: 363: delay_time_changed = 0;
  6277  0704  01CB               	clrf	_delay_time_changed^(0+256)
  6278  0705  01CC               	clrf	(_delay_time_changed+1)^(0+256)
  6279  0706  2A11               	goto	l3991
  6280  0707                     __end_of_main:	
  6281                           
  6282                           	psect	text1
  6283  13B5                     __ptext1:	
  6284 ;; *************** function _update_mode *****************
  6285 ;; Defined at:
  6286 ;;		line 58 in file "tactiles.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;                  1    wreg      void 
  6293 ;; Registers used:
  6294 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6302 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6303 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6304 ;;Total ram usage:        1 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; Hardware stack levels required when called:    2
  6307 ;; This function calls:
  6308 ;;		Nothing
  6309 ;; This function is called by:
  6310 ;;		_main
  6311 ;; This function uses a non-reentrant model
  6312 ;;
  6313                           
  6314                           
  6315                           ;psect for function _update_mode
  6316  13B5                     _update_mode:	
  6317                           
  6318                           ;tactiles.c: 63: if (PORTCbits.RC0 == 0) {
  6319                           
  6320                           ;incstack = 0
  6321                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6322  13B5  0020               	movlb	0	; select bank0
  6323  13B6  180E               	btfsc	14,0	;volatile
  6324  13B7  2BF6               	goto	l3587
  6325                           
  6326                           ;tactiles.c: 64: debounce_mode2++;
  6327  13B8  3001               	movlw	1
  6328  13B9  0022               	movlb	2	; select bank2
  6329  13BA  07B8               	addwf	_debounce_mode2^(0+256),f
  6330  13BB  3000               	movlw	0
  6331  13BC  3DB9               	addwfc	(_debounce_mode2+1)^(0+256),f
  6332                           
  6333                           ;tactiles.c: 65: if (debounce_mode2 > 25) {
  6334  13BD  0839               	movf	(_debounce_mode2+1)^(0+256),w
  6335  13BE  3A80               	xorlw	128
  6336  13BF  0020               	movlb	0	; select bank0
  6337  13C0  00A0               	movwf	??_update_mode
  6338  13C1  3080               	movlw	128
  6339  13C2  0220               	subwf	??_update_mode,w
  6340  13C3  1D03               	skipz
  6341  13C4  2BC8               	goto	u3305
  6342  13C5  301A               	movlw	26
  6343  13C6  0022               	movlb	2	; select bank2
  6344  13C7  0238               	subwf	_debounce_mode2^(0+256),w
  6345  13C8                     u3305:	
  6346  13C8  1C03               	skipc
  6347  13C9  0008               	return
  6348                           
  6349                           ;tactiles.c: 66: debounce_mode2 = 25;
  6350  13CA  3019               	movlw	25
  6351  13CB  0022               	movlb	2	; select bank2
  6352  13CC  00B8               	movwf	_debounce_mode2^(0+256)
  6353  13CD  3000               	movlw	0
  6354  13CE  00B9               	movwf	(_debounce_mode2^(0+256)+1)
  6355                           
  6356                           ;tactiles.c: 67: mode2_state++;
  6357  13CF  3001               	movlw	1
  6358  13D0  0020               	movlb	0	; select bank0
  6359  13D1  00A0               	movwf	??_update_mode
  6360  13D2  0820               	movf	??_update_mode,w
  6361  13D3  0021               	movlb	1	; select bank1
  6362  13D4  07D8               	addwf	_mode2_state^(0+128),f
  6363                           
  6364                           ;tactiles.c: 68: if (mode2_state > 2) {
  6365  13D5  3003               	movlw	3
  6366  13D6  0258               	subwf	_mode2_state^(0+128),w
  6367  13D7  1C03               	skipc
  6368  13D8  2BE6               	goto	l3585
  6369                           
  6370                           ;tactiles.c: 69: mode2_state = 0;
  6371  13D9  01D8               	clrf	_mode2_state^(0+128)
  6372                           
  6373                           ;tactiles.c: 70: }
  6374                           ;tactiles.c: 71: switch(mode2_state) {
  6375  13DA  2BE6               	goto	l3585
  6376  13DB                     l775:	
  6377                           ;tactiles.c: 72: case 0:
  6378                           
  6379                           
  6380                           ;tactiles.c: 73: LATBbits.LATB1 = 0;
  6381  13DB  0022               	movlb	2	; select bank2
  6382  13DC  108D               	bcf	13,1	;volatile
  6383  13DD  2BE4               	goto	L5
  6384  13DE                     l777:	
  6385                           ;tactiles.c: 76: case 1:
  6386                           
  6387                           ;tactiles.c: 75: break;
  6388                           
  6389                           ;tactiles.c: 74: LATBbits.LATB0 = 0;
  6390                           
  6391                           
  6392                           ;tactiles.c: 77: LATBbits.LATB1 = 0;
  6393  13DE  0022               	movlb	2	; select bank2
  6394  13DF  108D               	bcf	13,1	;volatile
  6395                           
  6396                           ;tactiles.c: 78: LATBbits.LATB0 = 1;
  6397  13E0  140D               	bsf	13,0	;volatile
  6398                           
  6399                           ;tactiles.c: 79: break;
  6400  13E1  2BF2               	goto	l779
  6401  13E2                     l778:	
  6402                           ;tactiles.c: 80: case 2:
  6403                           
  6404                           
  6405                           ;tactiles.c: 81: LATBbits.LATB1 = 1;
  6406  13E2  0022               	movlb	2	; select bank2
  6407  13E3  148D               	bsf	13,1	;volatile
  6408  13E4                     L5:	
  6409                           
  6410                           ;tactiles.c: 82: LATBbits.LATB0 = 0;
  6411  13E4  100D               	bcf	13,0	;volatile
  6412                           
  6413                           ;tactiles.c: 84: }
  6414                           
  6415                           ;tactiles.c: 83: break;
  6416  13E5  2BF2               	goto	l779
  6417  13E6                     l3585:	
  6418  13E6  0021               	movlb	1	; select bank1
  6419  13E7  0858               	movf	_mode2_state^(0+128),w
  6420                           
  6421                           ; Switch size 1, requested type "space"
  6422                           ; Number of cases is 3, Range of values is 0 to 2
  6423                           ; switch strategies available:
  6424                           ; Name         Instructions Cycles
  6425                           ; simple_byte           10     6 (average)
  6426                           ; direct_byte           12     6 (fixed)
  6427                           ; jumptable            260     6 (fixed)
  6428                           ;	Chosen strategy is simple_byte
  6429  13E8  3A00               	xorlw	0	; case 0
  6430  13E9  1903               	skipnz
  6431  13EA  2BDB               	goto	l775
  6432  13EB  3A01               	xorlw	1	; case 1
  6433  13EC  1903               	skipnz
  6434  13ED  2BDE               	goto	l777
  6435  13EE  3A03               	xorlw	3	; case 2
  6436  13EF  1903               	skipnz
  6437  13F0  2BE2               	goto	l778
  6438  13F1  2BF2               	goto	l779
  6439  13F2                     l779:	
  6440                           ;tactiles.c: 85: while (PORTCbits.RC0 == 0) {
  6441                           
  6442  13F2  0020               	movlb	0	; select bank0
  6443  13F3  180E               	btfsc	14,0	;volatile
  6444  13F4  0008               	return
  6445  13F5  2BF2               	goto	l779
  6446  13F6                     l3587:	
  6447                           ;tactiles.c: 86: }
  6448                           ;tactiles.c: 87: }
  6449                           ;tactiles.c: 88: } else {
  6450                           
  6451                           
  6452                           ;tactiles.c: 89: debounce_mode2 = 0;
  6453  13F6  0022               	movlb	2	; select bank2
  6454  13F7  01B8               	clrf	_debounce_mode2^(0+256)
  6455  13F8  01B9               	clrf	(_debounce_mode2+1)^(0+256)
  6456  13F9  0008               	return
  6457  13FA                     __end_of_update_mode:	
  6458                           
  6459                           	psect	text2
  6460  0BA4                     __ptext2:	
  6461 ;; *************** function _updateSwitchTap *****************
  6462 ;; Defined at:
  6463 ;;		line 58 in file "SwitchTap.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;		None
  6466 ;; Auto vars:     Size  Location     Type
  6467 ;;  tapCntDiviso    2   27[BANK0 ] int 
  6468 ;;  iCnt            1   29[BANK0 ] unsigned char 
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6479 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6480 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6481 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6482 ;;Total ram usage:        9 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    3
  6485 ;; This function calls:
  6486 ;;		___aldiv
  6487 ;;		_setLongTapState
  6488 ;; This function is called by:
  6489 ;;		_main
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function _updateSwitchTap
  6495  0BA4                     _updateSwitchTap:	
  6496                           
  6497                           ;SwitchTap.c: 59: uint8_t iCnt = 0;
  6498                           
  6499                           ;incstack = 0
  6500                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6501  0BA4  0020               	movlb	0	; select bank0
  6502  0BA5  01BD               	clrf	updateSwitchTap@iCnt
  6503                           
  6504                           ;SwitchTap.c: 65: if (PORTEbits.RE0 == 0) {
  6505  0BA6  1810               	btfsc	16,0	;volatile
  6506  0BA7  2BAF               	goto	l3693
  6507                           
  6508                           ;SwitchTap.c: 66: if (switchTap_pressed > 0) {
  6509  0BA8  0021               	movlb	1	; select bank1
  6510  0BA9  085C               	movf	_switchTap_pressed^(0+128),w
  6511  0BAA  1903               	btfsc	3,2
  6512  0BAB  2BBA               	goto	l1056
  6513                           
  6514                           ;SwitchTap.c: 67: switchTap_pressed--;
  6515  0BAC  3001               	movlw	1
  6516  0BAD  02DC               	subwf	_switchTap_pressed^(0+128),f
  6517                           
  6518                           ;SwitchTap.c: 68: }
  6519                           ;SwitchTap.c: 69: } else if (switchTap_pressed < 25) {
  6520  0BAE  2BBA               	goto	l1056
  6521  0BAF                     l3693:	
  6522  0BAF  3019               	movlw	25
  6523  0BB0  0021               	movlb	1	; select bank1
  6524  0BB1  025C               	subwf	_switchTap_pressed^(0+128),w
  6525  0BB2  1803               	skipnc
  6526  0BB3  2BBA               	goto	l1056
  6527                           
  6528                           ;SwitchTap.c: 70: switchTap_pressed++;
  6529  0BB4  3001               	movlw	1
  6530  0BB5  0020               	movlb	0	; select bank0
  6531  0BB6  00B5               	movwf	??_updateSwitchTap
  6532  0BB7  0835               	movf	??_updateSwitchTap,w
  6533  0BB8  0021               	movlb	1	; select bank1
  6534  0BB9  07DC               	addwf	_switchTap_pressed^(0+128),f
  6535  0BBA                     l1056:	
  6536                           
  6537                           ;SwitchTap.c: 71: }
  6538                           ;SwitchTap.c: 77: if (switchTap_pressed == 0) {
  6539  0BBA  085C               	movf	_switchTap_pressed^(0+128),w
  6540  0BBB  1D03               	btfss	3,2
  6541  0BBC  2D6B               	goto	l3783
  6542                           
  6543                           ;SwitchTap.c: 79: LATBbits.LATB0 = 0;
  6544  0BBD  0022               	movlb	2	; select bank2
  6545  0BBE  100D               	bcf	13,0	;volatile
  6546                           
  6547                           ;SwitchTap.c: 82: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6548  0BBF  0021               	movlb	1	; select bank1
  6549  0BC0  0868               	movf	(_long_press_limit+1)^(0+128),w
  6550  0BC1  0250               	subwf	(_longTap_timer+1)^(0+128),w	;volatile
  6551  0BC2  1D03               	skipz
  6552  0BC3  2BC6               	goto	u3505
  6553  0BC4  0867               	movf	_long_press_limit^(0+128),w
  6554  0BC5  024F               	subwf	_longTap_timer^(0+128),w	;volatile
  6555  0BC6                     u3505:	
  6556  0BC6  1C03               	skipc
  6557  0BC7  2BD9               	goto	l3709
  6558  0BC8  087D               	movf	_longTap_state,w	;volatile
  6559  0BC9  1D03               	btfss	3,2
  6560  0BCA  2BD9               	goto	l3709
  6561                           
  6562                           ;SwitchTap.c: 83: longTap_timer = long_press_limit;
  6563  0BCB  0868               	movf	(_long_press_limit+1)^(0+128),w
  6564  0BCC  00D0               	movwf	(_longTap_timer+1)^(0+128)	;volatile
  6565  0BCD  0867               	movf	_long_press_limit^(0+128),w
  6566  0BCE  00CF               	movwf	_longTap_timer^(0+128)	;volatile
  6567                           
  6568                           ;SwitchTap.c: 84: LATBbits.LATB4 = 0;
  6569  0BCF  0022               	movlb	2	; select bank2
  6570  0BD0  120D               	bcf	13,4	;volatile
  6571                           
  6572                           ;SwitchTap.c: 85: setLongTapState(1);
  6573  0BD1  3001               	movlw	1
  6574  0BD2  0020               	movlb	0	; select bank0
  6575  0BD3  00A0               	movwf	setLongTapState@f_state
  6576  0BD4  3000               	movlw	0
  6577  0BD5  00A1               	movwf	setLongTapState@f_state+1
  6578  0BD6  319F  2772  318B   	fcall	_setLongTapState
  6579  0BD9                     l3709:	
  6580                           
  6581                           ;SwitchTap.c: 86: }
  6582                           ;SwitchTap.c: 89: if (tap_timer >= 1563) {
  6583  0BD9  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6584  0BDA  2C44               	goto	l3743
  6585  0BDB  087C               	movf	_tap_timer+3,w	;volatile
  6586  0BDC  1D03               	btfss	3,2
  6587  0BDD  2BE7               	goto	l3711
  6588  0BDE  087B               	movf	_tap_timer+2,w	;volatile
  6589  0BDF  1D03               	btfss	3,2
  6590  0BE0  2BE7               	goto	l3711
  6591  0BE1  301B               	movlw	27
  6592  0BE2  0279               	subwf	_tap_timer,w	;volatile
  6593  0BE3  3006               	movlw	6
  6594  0BE4  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6595  0BE5  1C03               	btfss	3,0
  6596  0BE6  2C44               	goto	l3743
  6597  0BE7                     l3711:	
  6598                           
  6599                           ;SwitchTap.c: 90: LATBbits.LATB1 = 0;
  6600  0BE7  0022               	movlb	2	; select bank2
  6601  0BE8  108D               	bcf	13,1	;volatile
  6602                           
  6603                           ;SwitchTap.c: 91: tap_timer = 0;
  6604  0BE9  3000               	movlw	0
  6605  0BEA  00FC               	movwf	_tap_timer+3	;volatile
  6606  0BEB  3000               	movlw	0
  6607  0BEC  00FB               	movwf	_tap_timer+2	;volatile
  6608  0BED  3000               	movlw	0
  6609  0BEE  00FA               	movwf	_tap_timer+1	;volatile
  6610  0BEF  3000               	movlw	0
  6611  0BF0  00F9               	movwf	_tap_timer	;volatile
  6612                           
  6613                           ;SwitchTap.c: 92: tap_iteration = 1;
  6614  0BF1  3001               	movlw	1
  6615  0BF2  0021               	movlb	1	; select bank1
  6616  0BF3  00E9               	movwf	_tap_iteration^(0+128)
  6617  0BF4  3000               	movlw	0
  6618  0BF5  00EA               	movwf	(_tap_iteration^(0+128)+1)
  6619                           
  6620                           ;SwitchTap.c: 93: tap_total = 0;
  6621  0BF6  3000               	movlw	0
  6622  0BF7  0022               	movlb	2	; select bank2
  6623  0BF8  00AB               	movwf	(_tap_total+3)^(0+256)
  6624  0BF9  3000               	movlw	0
  6625  0BFA  00AA               	movwf	(_tap_total+2)^(0+256)
  6626  0BFB  3000               	movlw	0
  6627  0BFC  00A9               	movwf	(_tap_total+1)^(0+256)
  6628  0BFD  3000               	movlw	0
  6629  0BFE  00A8               	movwf	_tap_total^(0+256)
  6630                           
  6631                           ;SwitchTap.c: 94: delay_time_changed = 0;
  6632  0BFF  01CB               	clrf	_delay_time_changed^(0+256)
  6633  0C00  01CC               	clrf	(_delay_time_changed+1)^(0+256)
  6634                           
  6635                           ;SwitchTap.c: 96: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6636  0C01  0020               	movlb	0	; select bank0
  6637  0C02  01BD               	clrf	updateSwitchTap@iCnt
  6638  0C03  0ABD               	incf	updateSwitchTap@iCnt,f
  6639  0C04                     l3723:	
  6640  0C04  083D               	movf	updateSwitchTap@iCnt,w
  6641  0C05  0021               	movlb	1	; select bank1
  6642  0C06  026E               	subwf	_num_taps^(0+128),w
  6643  0C07  1C03               	btfss	3,0
  6644  0C08  2C21               	goto	l3725
  6645                           
  6646                           ;SwitchTap.c: 97: tap_history[iCnt] = 0;
  6647  0C09  0020               	movlb	0	; select bank0
  6648  0C0A  083D               	movf	updateSwitchTap@iCnt,w
  6649  0C0B  00B5               	movwf	??_updateSwitchTap
  6650  0C0C  3001               	movlw	1
  6651  0C0D                     u3535:	
  6652  0C0D  35B5               	lslf	??_updateSwitchTap,f
  6653  0C0E  3EFF               	addlw	-1
  6654  0C0F  1D03               	skipz
  6655  0C10  2C0D               	goto	u3535
  6656  0C11  3535               	lslf	??_updateSwitchTap,w
  6657  0C12  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6658  0C13  0086               	movwf	6
  6659  0C14  3001               	movlw	1	; select bank3/4
  6660  0C15  0087               	movwf	7
  6661  0C16  3000               	movlw	0
  6662  0C17  3FC0               	movwi [0]fsr1
  6663  0C18  3000               	movlw	0
  6664  0C19  3FC1               	movwi [1]fsr1
  6665  0C1A  3FC2               	movwi [2]fsr1
  6666  0C1B  3FC3               	movwi [3]fsr1
  6667  0C1C  3001               	movlw	1
  6668  0C1D  00B5               	movwf	??_updateSwitchTap
  6669  0C1E  0835               	movf	??_updateSwitchTap,w
  6670  0C1F  07BD               	addwf	updateSwitchTap@iCnt,f
  6671  0C20  2C04               	goto	l3723
  6672  0C21                     l3725:	
  6673                           
  6674                           ;SwitchTap.c: 98: }
  6675                           ;SwitchTap.c: 101: if (longTap_start == 0) {
  6676  0C21  0857               	movf	_longTap_start^(0+128),w
  6677  0C22  1D03               	btfss	3,2
  6678  0C23  2C29               	goto	l3731
  6679                           
  6680                           ;SwitchTap.c: 102: longTap_start = 1;
  6681  0C24  01D7               	clrf	_longTap_start^(0+128)
  6682  0C25  0AD7               	incf	_longTap_start^(0+128),f
  6683                           
  6684                           ;SwitchTap.c: 103: longTap_state = 0;
  6685  0C26  01FD               	clrf	_longTap_state	;volatile
  6686                           
  6687                           ;SwitchTap.c: 104: longTap_timer = 0;
  6688  0C27  01CF               	clrf	_longTap_timer^(0+128)	;volatile
  6689  0C28  01D0               	clrf	(_longTap_timer+1)^(0+128)	;volatile
  6690  0C29                     l3731:	
  6691                           
  6692                           ;SwitchTap.c: 105: }
  6693                           ;SwitchTap.c: 109: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6694  0C29  0868               	movf	(_long_press_limit+1)^(0+128),w
  6695  0C2A  0250               	subwf	(_longTap_timer+1)^(0+128),w	;volatile
  6696  0C2B  1D03               	skipz
  6697  0C2C  2C2F               	goto	u3565
  6698  0C2D  0867               	movf	_long_press_limit^(0+128),w
  6699  0C2E  024F               	subwf	_longTap_timer^(0+128),w	;volatile
  6700  0C2F                     u3565:	
  6701  0C2F  1C03               	skipc
  6702  0C30  0008               	return
  6703  0C31  087D               	movf	_longTap_state,w	;volatile
  6704  0C32  1D03               	btfss	3,2
  6705  0C33  0008               	return
  6706                           
  6707                           ;SwitchTap.c: 110: longTap_timer = long_press_limit;
  6708  0C34  0868               	movf	(_long_press_limit+1)^(0+128),w
  6709  0C35  00D0               	movwf	(_longTap_timer+1)^(0+128)	;volatile
  6710  0C36  0867               	movf	_long_press_limit^(0+128),w
  6711  0C37  00CF               	movwf	_longTap_timer^(0+128)	;volatile
  6712                           
  6713                           ;SwitchTap.c: 111: LATBbits.LATB4 = 0;
  6714  0C38  0022               	movlb	2	; select bank2
  6715  0C39  120D               	bcf	13,4	;volatile
  6716                           
  6717                           ;SwitchTap.c: 112: setLongTapState(1);
  6718  0C3A  3001               	movlw	1
  6719  0C3B  0020               	movlb	0	; select bank0
  6720  0C3C  00A0               	movwf	setLongTapState@f_state
  6721  0C3D  3000               	movlw	0
  6722  0C3E  00A1               	movwf	setLongTapState@f_state+1
  6723  0C3F  319F  2772         	fcall	_setLongTapState
  6724                           
  6725                           ;SwitchTap.c: 113: LATBbits.LATB0 = 1;
  6726  0C41  0022               	movlb	2	; select bank2
  6727  0C42  140D               	bsf	13,0	;volatile
  6728                           
  6729                           ;SwitchTap.c: 114: }
  6730                           ;SwitchTap.c: 116: } else if (tap_timer < 1563 && longTap_start == 0) {
  6731  0C43  0008               	return
  6732  0C44                     l3743:	
  6733  0C44  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6734  0C45  2C52               	goto	l3745
  6735  0C46  087C               	movf	_tap_timer+3,w	;volatile
  6736  0C47  1D03               	btfss	3,2
  6737  0C48  0008               	return
  6738  0C49  087B               	movf	_tap_timer+2,w	;volatile
  6739  0C4A  1D03               	btfss	3,2
  6740  0C4B  0008               	return
  6741  0C4C  301B               	movlw	27
  6742  0C4D  0279               	subwf	_tap_timer,w	;volatile
  6743  0C4E  3006               	movlw	6
  6744  0C4F  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6745  0C50  1803               	btfsc	3,0
  6746  0C51  0008               	return
  6747  0C52                     l3745:	
  6748  0C52  0021               	movlb	1	; select bank1
  6749  0C53  0857               	movf	_longTap_start^(0+128),w
  6750  0C54  1D03               	btfss	3,2
  6751  0C55  0008               	return
  6752                           
  6753                           ;SwitchTap.c: 117: LATBbits.LATB1 = 1;
  6754  0C56  0022               	movlb	2	; select bank2
  6755  0C57  148D               	bsf	13,1	;volatile
  6756                           
  6757                           ;SwitchTap.c: 118: if (tap_iteration <= 4) {
  6758  0C58  0021               	movlb	1	; select bank1
  6759  0C59  086A               	movf	(_tap_iteration+1)^(0+128),w
  6760  0C5A  3A80               	xorlw	128
  6761  0C5B  0020               	movlb	0	; select bank0
  6762  0C5C  00B5               	movwf	??_updateSwitchTap
  6763  0C5D  3080               	movlw	128
  6764  0C5E  0235               	subwf	??_updateSwitchTap,w
  6765  0C5F  1D03               	skipz
  6766  0C60  2C64               	goto	u3605
  6767  0C61  3005               	movlw	5
  6768  0C62  0021               	movlb	1	; select bank1
  6769  0C63  0269               	subwf	_tap_iteration^(0+128),w
  6770  0C64                     u3605:	
  6771  0C64  1803               	skipnc
  6772  0C65  0008               	return
  6773                           
  6774                           ;SwitchTap.c: 119: if (tap_timer >= 1172) {
  6775  0C66  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6776  0C67  2C7C               	goto	l1069
  6777  0C68  087C               	movf	_tap_timer+3,w	;volatile
  6778  0C69  1D03               	btfss	3,2
  6779  0C6A  2C74               	goto	l3753
  6780  0C6B  087B               	movf	_tap_timer+2,w	;volatile
  6781  0C6C  1D03               	btfss	3,2
  6782  0C6D  2C74               	goto	l3753
  6783  0C6E  3094               	movlw	148
  6784  0C6F  0279               	subwf	_tap_timer,w	;volatile
  6785  0C70  3004               	movlw	4
  6786  0C71  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6787  0C72  1C03               	btfss	3,0
  6788  0C73  2C7C               	goto	l1069
  6789  0C74                     l3753:	
  6790                           
  6791                           ;SwitchTap.c: 120: tap_timer = 1172;
  6792  0C74  3000               	movlw	0
  6793  0C75  00FC               	movwf	_tap_timer+3	;volatile
  6794  0C76  3000               	movlw	0
  6795  0C77  00FB               	movwf	_tap_timer+2	;volatile
  6796  0C78  3004               	movlw	4
  6797  0C79  00FA               	movwf	_tap_timer+1	;volatile
  6798  0C7A  3094               	movlw	148
  6799  0C7B  00F9               	movwf	_tap_timer	;volatile
  6800  0C7C                     l1069:	
  6801                           
  6802                           ;SwitchTap.c: 121: }
  6803                           ;SwitchTap.c: 122: int tapCntDivisor = num_taps;
  6804  0C7C  0021               	movlb	1	; select bank1
  6805  0C7D  086E               	movf	_num_taps^(0+128),w
  6806  0C7E  0020               	movlb	0	; select bank0
  6807  0C7F  00B5               	movwf	??_updateSwitchTap
  6808  0C80  01B6               	clrf	??_updateSwitchTap+1
  6809  0C81  0835               	movf	??_updateSwitchTap,w
  6810  0C82  00BB               	movwf	updateSwitchTap@tapCntDivisor
  6811  0C83  0836               	movf	??_updateSwitchTap+1,w
  6812  0C84  00BC               	movwf	updateSwitchTap@tapCntDivisor+1
  6813                           
  6814                           ;SwitchTap.c: 123: if (tap_iteration <= num_taps) {
  6815  0C85  0021               	movlb	1	; select bank1
  6816  0C86  086A               	movf	(_tap_iteration+1)^(0+128),w
  6817  0C87  3A80               	xorlw	128
  6818  0C88  3C80               	sublw	128
  6819  0C89  1D03               	skipz
  6820  0C8A  2C8D               	goto	u3625
  6821  0C8B  0869               	movf	_tap_iteration^(0+128),w
  6822  0C8C  026E               	subwf	_num_taps^(0+128),w
  6823  0C8D                     u3625:	
  6824  0C8D  1C03               	skipc
  6825  0C8E  2CB7               	goto	l3761
  6826                           
  6827                           ;SwitchTap.c: 124: tap_total += tap_timer;
  6828  0C8F  0879               	movf	_tap_timer,w	;volatile
  6829  0C90  0022               	movlb	2	; select bank2
  6830  0C91  07A8               	addwf	_tap_total^(0+256),f
  6831  0C92  087A               	movf	_tap_timer+1,w	;volatile
  6832  0C93  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  6833  0C94  087B               	movf	_tap_timer+2,w	;volatile
  6834  0C95  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  6835  0C96  087C               	movf	_tap_timer+3,w	;volatile
  6836  0C97  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  6837                           
  6838                           ;SwitchTap.c: 125: tap_history[tap_iteration] = tap_timer;
  6839  0C98  0021               	movlb	1	; select bank1
  6840  0C99  0869               	movf	_tap_iteration^(0+128),w
  6841  0C9A  0020               	movlb	0	; select bank0
  6842  0C9B  00B5               	movwf	??_updateSwitchTap
  6843  0C9C  3001               	movlw	1
  6844  0C9D                     u3635:	
  6845  0C9D  35B5               	lslf	??_updateSwitchTap,f
  6846  0C9E  3EFF               	addlw	-1
  6847  0C9F  1D03               	skipz
  6848  0CA0  2C9D               	goto	u3635
  6849  0CA1  3535               	lslf	??_updateSwitchTap,w
  6850  0CA2  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6851  0CA3  0086               	movwf	6
  6852  0CA4  3001               	movlw	1	; select bank3/4
  6853  0CA5  0087               	movwf	7
  6854  0CA6  0879               	movf	_tap_timer,w	;volatile
  6855  0CA7  3FC0               	movwi [0]fsr1
  6856  0CA8  087A               	movf	_tap_timer+1,w	;volatile
  6857  0CA9  3FC1               	movwi [1]fsr1
  6858  0CAA  087B               	movf	_tap_timer+2,w	;volatile
  6859  0CAB  3FC2               	movwi [2]fsr1
  6860  0CAC  087C               	movf	_tap_timer+3,w	;volatile
  6861  0CAD  3FC3               	movwi [3]fsr1
  6862                           
  6863                           ;SwitchTap.c: 126: tapCntDivisor = tap_iteration;
  6864  0CAE  0021               	movlb	1	; select bank1
  6865  0CAF  086A               	movf	(_tap_iteration+1)^(0+128),w
  6866  0CB0  0020               	movlb	0	; select bank0
  6867  0CB1  00BC               	movwf	updateSwitchTap@tapCntDivisor+1
  6868  0CB2  0021               	movlb	1	; select bank1
  6869  0CB3  0869               	movf	_tap_iteration^(0+128),w
  6870  0CB4  0020               	movlb	0	; select bank0
  6871  0CB5  00BB               	movwf	updateSwitchTap@tapCntDivisor
  6872                           
  6873                           ;SwitchTap.c: 127: } else {
  6874  0CB6  2D2C               	goto	l3775
  6875  0CB7                     l3761:	
  6876                           
  6877                           ;SwitchTap.c: 128: tap_total = 0;
  6878  0CB7  3000               	movlw	0
  6879  0CB8  0022               	movlb	2	; select bank2
  6880  0CB9  00AB               	movwf	(_tap_total+3)^(0+256)
  6881  0CBA  3000               	movlw	0
  6882  0CBB  00AA               	movwf	(_tap_total+2)^(0+256)
  6883  0CBC  3000               	movlw	0
  6884  0CBD  00A9               	movwf	(_tap_total+1)^(0+256)
  6885  0CBE  3000               	movlw	0
  6886  0CBF  00A8               	movwf	_tap_total^(0+256)
  6887                           
  6888                           ;SwitchTap.c: 129: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6889  0CC0  0020               	movlb	0	; select bank0
  6890  0CC1  01BD               	clrf	updateSwitchTap@iCnt
  6891  0CC2  0ABD               	incf	updateSwitchTap@iCnt,f
  6892  0CC3                     l3769:	
  6893  0CC3  0021               	movlb	1	; select bank1
  6894  0CC4  086E               	movf	_num_taps^(0+128),w
  6895  0CC5  0020               	movlb	0	; select bank0
  6896  0CC6  023D               	subwf	updateSwitchTap@iCnt,w
  6897  0CC7  1803               	btfsc	3,0
  6898  0CC8  2D0D               	goto	l3771
  6899                           
  6900                           ;SwitchTap.c: 130: tap_history[iCnt] = tap_history[iCnt + 1];
  6901  0CC9  083D               	movf	updateSwitchTap@iCnt,w
  6902  0CCA  00B5               	movwf	??_updateSwitchTap
  6903  0CCB  3001               	movlw	1
  6904  0CCC                     u3645:	
  6905  0CCC  35B5               	lslf	??_updateSwitchTap,f
  6906  0CCD  3EFF               	addlw	-1
  6907  0CCE  1D03               	skipz
  6908  0CCF  2CCC               	goto	u3645
  6909  0CD0  3535               	lslf	??_updateSwitchTap,w
  6910  0CD1  3E04               	addlw	4
  6911  0CD2  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6912  0CD3  0086               	movwf	6
  6913  0CD4  3001               	movlw	1	; select bank3/4
  6914  0CD5  0087               	movwf	7
  6915  0CD6  3F40               	moviw [0]fsr1
  6916  0CD7  00B6               	movwf	??_updateSwitchTap+1
  6917  0CD8  3F41               	moviw [1]fsr1
  6918  0CD9  00B7               	movwf	??_updateSwitchTap+2
  6919  0CDA  3F42               	moviw [2]fsr1
  6920  0CDB  00B8               	movwf	??_updateSwitchTap+3
  6921  0CDC  3F43               	moviw [3]fsr1
  6922  0CDD  00B9               	movwf	??_updateSwitchTap+4
  6923  0CDE  083D               	movf	updateSwitchTap@iCnt,w
  6924  0CDF  00BA               	movwf	??_updateSwitchTap+5
  6925  0CE0  3001               	movlw	1
  6926  0CE1                     u3655:	
  6927  0CE1  35BA               	lslf	??_updateSwitchTap+5,f
  6928  0CE2  3EFF               	addlw	-1
  6929  0CE3  1D03               	skipz
  6930  0CE4  2CE1               	goto	u3655
  6931  0CE5  353A               	lslf	??_updateSwitchTap+5,w
  6932  0CE6  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6933  0CE7  0086               	movwf	6
  6934  0CE8  3001               	movlw	1	; select bank3/4
  6935  0CE9  0087               	movwf	7
  6936  0CEA  0836               	movf	??_updateSwitchTap+1,w
  6937  0CEB  3FC0               	movwi [0]fsr1
  6938  0CEC  0837               	movf	??_updateSwitchTap+2,w
  6939  0CED  3FC1               	movwi [1]fsr1
  6940  0CEE  0838               	movf	??_updateSwitchTap+3,w
  6941  0CEF  3FC2               	movwi [2]fsr1
  6942  0CF0  0839               	movf	??_updateSwitchTap+4,w
  6943  0CF1  3FC3               	movwi [3]fsr1
  6944                           
  6945                           ;SwitchTap.c: 131: tap_total += tap_history[iCnt];
  6946  0CF2  083D               	movf	updateSwitchTap@iCnt,w
  6947  0CF3  00B5               	movwf	??_updateSwitchTap
  6948  0CF4  3001               	movlw	1
  6949  0CF5                     u3665:	
  6950  0CF5  35B5               	lslf	??_updateSwitchTap,f
  6951  0CF6  3EFF               	addlw	-1
  6952  0CF7  1D03               	skipz
  6953  0CF8  2CF5               	goto	u3665
  6954  0CF9  3535               	lslf	??_updateSwitchTap,w
  6955  0CFA  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6956  0CFB  0086               	movwf	6
  6957  0CFC  3001               	movlw	1	; select bank3/4
  6958  0CFD  0087               	movwf	7
  6959  0CFE  3F40               	moviw [0]fsr1
  6960  0CFF  0022               	movlb	2	; select bank2
  6961  0D00  07A8               	addwf	_tap_total^(0+256),f
  6962  0D01  3F41               	moviw [1]fsr1
  6963  0D02  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  6964  0D03  3F42               	moviw [2]fsr1
  6965  0D04  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  6966  0D05  3F43               	moviw [3]fsr1
  6967  0D06  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  6968  0D07  3001               	movlw	1
  6969  0D08  0020               	movlb	0	; select bank0
  6970  0D09  00B5               	movwf	??_updateSwitchTap
  6971  0D0A  0835               	movf	??_updateSwitchTap,w
  6972  0D0B  07BD               	addwf	updateSwitchTap@iCnt,f
  6973  0D0C  2CC3               	goto	l3769
  6974  0D0D                     l3771:	
  6975                           
  6976                           ;SwitchTap.c: 132: }
  6977                           ;SwitchTap.c: 133: tap_history[num_taps] = tap_timer;
  6978  0D0D  0021               	movlb	1	; select bank1
  6979  0D0E  086E               	movf	_num_taps^(0+128),w
  6980  0D0F  0020               	movlb	0	; select bank0
  6981  0D10  00B5               	movwf	??_updateSwitchTap
  6982  0D11  3001               	movlw	1
  6983  0D12                     u3685:	
  6984  0D12  35B5               	lslf	??_updateSwitchTap,f
  6985  0D13  3EFF               	addlw	-1
  6986  0D14  1D03               	skipz
  6987  0D15  2D12               	goto	u3685
  6988  0D16  3535               	lslf	??_updateSwitchTap,w
  6989  0D17  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6990  0D18  0086               	movwf	6
  6991  0D19  3001               	movlw	1	; select bank3/4
  6992  0D1A  0087               	movwf	7
  6993  0D1B  0879               	movf	_tap_timer,w	;volatile
  6994  0D1C  3FC0               	movwi [0]fsr1
  6995  0D1D  087A               	movf	_tap_timer+1,w	;volatile
  6996  0D1E  3FC1               	movwi [1]fsr1
  6997  0D1F  087B               	movf	_tap_timer+2,w	;volatile
  6998  0D20  3FC2               	movwi [2]fsr1
  6999  0D21  087C               	movf	_tap_timer+3,w	;volatile
  7000  0D22  3FC3               	movwi [3]fsr1
  7001                           
  7002                           ;SwitchTap.c: 134: tap_total += tap_timer;
  7003  0D23  0879               	movf	_tap_timer,w	;volatile
  7004  0D24  0022               	movlb	2	; select bank2
  7005  0D25  07A8               	addwf	_tap_total^(0+256),f
  7006  0D26  087A               	movf	_tap_timer+1,w	;volatile
  7007  0D27  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  7008  0D28  087B               	movf	_tap_timer+2,w	;volatile
  7009  0D29  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  7010  0D2A  087C               	movf	_tap_timer+3,w	;volatile
  7011  0D2B  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  7012  0D2C                     l3775:	
  7013                           
  7014                           ;SwitchTap.c: 135: }
  7015                           ;SwitchTap.c: 137: baseline_delay_time = tap_total / tapCntDivisor;
  7016  0D2C  0020               	movlb	0	; select bank0
  7017  0D2D  083B               	movf	updateSwitchTap@tapCntDivisor,w
  7018  0D2E  00A6               	movwf	___aldiv@divisor
  7019  0D2F  083C               	movf	updateSwitchTap@tapCntDivisor+1,w
  7020  0D30  00A7               	movwf	___aldiv@divisor+1
  7021  0D31  0D89               	rlf	9,f
  7022  0D32  3B89               	subwfb	9,f
  7023  0D33  0989               	comf	9,f
  7024  0D34  00A8               	movwf	___aldiv@divisor+2
  7025  0D35  00A9               	movwf	___aldiv@divisor+3
  7026  0D36  0022               	movlb	2	; select bank2
  7027  0D37  082B               	movf	(_tap_total+3)^(0+256),w
  7028  0D38  0020               	movlb	0	; select bank0
  7029  0D39  00AD               	movwf	___aldiv@dividend+3
  7030  0D3A  0022               	movlb	2	; select bank2
  7031  0D3B  082A               	movf	(_tap_total+2)^(0+256),w
  7032  0D3C  0020               	movlb	0	; select bank0
  7033  0D3D  00AC               	movwf	___aldiv@dividend+2
  7034  0D3E  0022               	movlb	2	; select bank2
  7035  0D3F  0829               	movf	(_tap_total+1)^(0+256),w
  7036  0D40  0020               	movlb	0	; select bank0
  7037  0D41  00AB               	movwf	___aldiv@dividend+1
  7038  0D42  0022               	movlb	2	; select bank2
  7039  0D43  0828               	movf	_tap_total^(0+256),w
  7040  0D44  0020               	movlb	0	; select bank0
  7041  0D45  00AA               	movwf	___aldiv@dividend
  7042  0D46  3196  26F3         	fcall	___aldiv
  7043  0D48  0020               	movlb	0	; select bank0
  7044  0D49  0829               	movf	?___aldiv+3,w
  7045  0D4A  0021               	movlb	1	; select bank1
  7046  0D4B  00E0               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7047  0D4C  0020               	movlb	0	; select bank0
  7048  0D4D  0828               	movf	?___aldiv+2,w
  7049  0D4E  0021               	movlb	1	; select bank1
  7050  0D4F  00DF               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7051  0D50  0020               	movlb	0	; select bank0
  7052  0D51  0827               	movf	?___aldiv+1,w
  7053  0D52  0021               	movlb	1	; select bank1
  7054  0D53  00DE               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7055  0D54  0020               	movlb	0	; select bank0
  7056  0D55  0826               	movf	?___aldiv,w
  7057  0D56  0021               	movlb	1	; select bank1
  7058  0D57  00DD               	movwf	_baseline_delay_time^(0+128)	;volatile
  7059                           
  7060                           ;SwitchTap.c: 138: delay_time_changed = 1;
  7061  0D58  3001               	movlw	1
  7062  0D59  0022               	movlb	2	; select bank2
  7063  0D5A  00CB               	movwf	_delay_time_changed^(0+256)
  7064  0D5B  3000               	movlw	0
  7065  0D5C  00CC               	movwf	(_delay_time_changed^(0+256)+1)
  7066                           
  7067                           ;SwitchTap.c: 139: tap_timer = 0;
  7068  0D5D  3000               	movlw	0
  7069  0D5E  00FC               	movwf	_tap_timer+3	;volatile
  7070  0D5F  3000               	movlw	0
  7071  0D60  00FB               	movwf	_tap_timer+2	;volatile
  7072  0D61  3000               	movlw	0
  7073  0D62  00FA               	movwf	_tap_timer+1	;volatile
  7074  0D63  3000               	movlw	0
  7075  0D64  00F9               	movwf	_tap_timer	;volatile
  7076                           
  7077                           ;SwitchTap.c: 141: tap_iteration++;
  7078  0D65  3001               	movlw	1
  7079  0D66  0021               	movlb	1	; select bank1
  7080  0D67  07E9               	addwf	_tap_iteration^(0+128),f
  7081  0D68  3000               	movlw	0
  7082  0D69  3DEA               	addwfc	(_tap_iteration+1)^(0+128),f
  7083                           
  7084                           ;SwitchTap.c: 142: }
  7085                           ;SwitchTap.c: 143: }
  7086                           ;SwitchTap.c: 145: } else if (switchTap_pressed >= 25) {
  7087  0D6A  0008               	return
  7088  0D6B                     l3783:	
  7089  0D6B  3019               	movlw	25
  7090  0D6C  025C               	subwf	_switchTap_pressed^(0+128),w
  7091  0D6D  1C03               	skipc
  7092  0D6E  0008               	return
  7093                           
  7094                           ;SwitchTap.c: 146: switchTap_state = 0;
  7095  0D6F  01EF               	clrf	_switchTap_state^(0+128)
  7096                           
  7097                           ;SwitchTap.c: 148: LATBbits.LATB5 = 0;
  7098  0D70  0022               	movlb	2	; select bank2
  7099  0D71  128D               	bcf	13,5	;volatile
  7100                           
  7101                           ;SwitchTap.c: 149: LATBbits.LATB0 = 1;
  7102  0D72  140D               	bsf	13,0	;volatile
  7103                           
  7104                           ;SwitchTap.c: 150: LATBbits.LATB1 = 0;
  7105  0D73  108D               	bcf	13,1	;volatile
  7106                           
  7107                           ;SwitchTap.c: 152: longTap_state = 0;
  7108  0D74  01FD               	clrf	_longTap_state	;volatile
  7109                           
  7110                           ;SwitchTap.c: 154: setLongTapState(0);
  7111  0D75  3000               	movlw	0
  7112  0D76  0020               	movlb	0	; select bank0
  7113  0D77  00A0               	movwf	setLongTapState@f_state
  7114  0D78  00A1               	movwf	setLongTapState@f_state+1
  7115  0D79  319F  2772         	fcall	_setLongTapState
  7116                           
  7117                           ;SwitchTap.c: 155: longTap_timer = 0;
  7118  0D7B  0021               	movlb	1	; select bank1
  7119  0D7C  01CF               	clrf	_longTap_timer^(0+128)	;volatile
  7120  0D7D  01D0               	clrf	(_longTap_timer+1)^(0+128)	;volatile
  7121                           
  7122                           ;SwitchTap.c: 156: longTap_start = 0;
  7123  0D7E  01D7               	clrf	_longTap_start^(0+128)
  7124                           
  7125                           ;SwitchTap.c: 157: switchTap_toggle = 0;
  7126  0D7F  0022               	movlb	2	; select bank2
  7127  0D80  01C8               	clrf	_switchTap_toggle^(0+256)
  7128                           
  7129                           ;SwitchTap.c: 158: switchTap_pressed = 25;
  7130  0D81  3019               	movlw	25
  7131  0D82  0020               	movlb	0	; select bank0
  7132  0D83  00B5               	movwf	??_updateSwitchTap
  7133  0D84  0835               	movf	??_updateSwitchTap,w
  7134  0D85  0021               	movlb	1	; select bank1
  7135  0D86  00DC               	movwf	_switchTap_pressed^(0+128)
  7136  0D87  0008               	return
  7137  0D88                     __end_of_updateSwitchTap:	
  7138                           
  7139                           	psect	text3
  7140  1F72                     __ptext3:	
  7141 ;; *************** function _setLongTapState *****************
  7142 ;; Defined at:
  7143 ;;		line 173 in file "SwitchTap.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  f_state         2    0[BANK0 ] int 
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;		None
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, status,0
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7161 ;;Total ram usage:        4 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    2
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_updateSwitchTap
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _setLongTapState
  7173  1F72                     _setLongTapState:	
  7174                           
  7175                           ;SwitchTap.c: 174: if (longTap_state == f_state) {return;}
  7176                           
  7177                           ;incstack = 0
  7178                           ; Regs used in _setLongTapState: [wreg+status,0]
  7179  1F72  087D               	movf	_longTap_state,w	;volatile
  7180  1F73  0020               	movlb	0	; select bank0
  7181  1F74  00A2               	movwf	??_setLongTapState
  7182  1F75  01A3               	clrf	??_setLongTapState+1
  7183  1F76  0821               	movf	setLongTapState@f_state+1,w
  7184  1F77  0623               	xorwf	??_setLongTapState+1,w
  7185  1F78  1D03               	skipz
  7186  1F79  2F7C               	goto	u2485
  7187  1F7A  0820               	movf	setLongTapState@f_state,w
  7188  1F7B  0622               	xorwf	??_setLongTapState,w
  7189  1F7C                     u2485:	
  7190  1F7C  1903               	btfsc	3,2
  7191  1F7D  0008               	return
  7192                           
  7193                           ;SwitchTap.c: 175: longTap_state = f_state;
  7194  1F7E  0820               	movf	setLongTapState@f_state,w
  7195  1F7F  00A2               	movwf	??_setLongTapState
  7196  1F80  0822               	movf	??_setLongTapState,w
  7197  1F81  00FD               	movwf	_longTap_state	;volatile
  7198                           
  7199                           ;SwitchTap.c: 176: LATBbits.LATB5 = f_state;
  7200  1F82  0C20               	rrf	setLongTapState@f_state,w
  7201  1F83  0022               	movlb	2	; select bank2
  7202  1F84  1C03               	skipc
  7203  1F85  128D               	bcf	13,5	;volatile
  7204  1F86  1803               	skipnc
  7205  1F87  168D               	bsf	13,5	;volatile
  7206  1F88  0008               	return
  7207  1F89                     __end_of_setLongTapState:	
  7208                           
  7209                           	psect	text4
  7210  094A                     __ptext4:	
  7211 ;; *************** function _updateSwitchBypass *****************
  7212 ;; Defined at:
  7213 ;;		line 34 in file "SwitchBypass.c"
  7214 ;; Parameters:    Size  Location     Type
  7215 ;;		None
  7216 ;; Auto vars:     Size  Location     Type
  7217 ;;		None
  7218 ;; Return value:  Size  Location     Type
  7219 ;;                  1    wreg      void 
  7220 ;; Registers used:
  7221 ;;		wreg, status,2, status,0, pclath, cstack
  7222 ;; Tracked objects:
  7223 ;;		On entry : 0/0
  7224 ;;		On exit  : 0/0
  7225 ;;		Unchanged: 0/0
  7226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7229 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7230 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7231 ;;Total ram usage:        1 bytes
  7232 ;; Hardware stack levels used:    1
  7233 ;; Hardware stack levels required when called:    5
  7234 ;; This function calls:
  7235 ;;		_setFeedbackState
  7236 ;;		_setSwitchBypassState
  7237 ;; This function is called by:
  7238 ;;		_main
  7239 ;; This function uses a non-reentrant model
  7240 ;;
  7241                           
  7242                           
  7243                           ;psect for function _updateSwitchBypass
  7244  094A                     _updateSwitchBypass:	
  7245                           
  7246                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7247                           
  7248                           ;incstack = 0
  7249                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7250  094A  0020               	movlb	0	; select bank0
  7251  094B  1890               	btfsc	16,1	;volatile
  7252  094C  2960               	goto	l3627
  7253                           
  7254                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7255  094D  0021               	movlb	1	; select bank1
  7256  094E  0854               	movf	(_switchBypass_pressed+1)^(0+128),w
  7257  094F  3A80               	xorlw	128
  7258  0950  0020               	movlb	0	; select bank0
  7259  0951  00B2               	movwf	??_updateSwitchBypass
  7260  0952  3080               	movlw	128
  7261  0953  0232               	subwf	??_updateSwitchBypass,w
  7262  0954  1D03               	skipz
  7263  0955  2959               	goto	u3345
  7264  0956  3001               	movlw	1
  7265  0957  0021               	movlb	1	; select bank1
  7266  0958  0253               	subwf	_switchBypass_pressed^(0+128),w
  7267  0959                     u3345:	
  7268  0959  1C03               	skipc
  7269  095A  2973               	goto	l3631
  7270                           
  7271                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7272  095B  30FF               	movlw	255
  7273  095C  0021               	movlb	1	; select bank1
  7274  095D  07D3               	addwf	_switchBypass_pressed^(0+128),f
  7275  095E  30FF               	movlw	255
  7276  095F  2972               	goto	L6
  7277  0960                     l3627:	
  7278                           ;SwitchBypass.c: 44: }
  7279                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7280                           
  7281  0960  0021               	movlb	1	; select bank1
  7282  0961  0854               	movf	(_switchBypass_pressed+1)^(0+128),w
  7283  0962  3A80               	xorlw	128
  7284  0963  0020               	movlb	0	; select bank0
  7285  0964  00B2               	movwf	??_updateSwitchBypass
  7286  0965  3080               	movlw	128
  7287  0966  0232               	subwf	??_updateSwitchBypass,w
  7288  0967  1D03               	skipz
  7289  0968  296C               	goto	u3355
  7290  0969  3019               	movlw	25
  7291  096A  0021               	movlb	1	; select bank1
  7292  096B  0253               	subwf	_switchBypass_pressed^(0+128),w
  7293  096C                     u3355:	
  7294  096C  1803               	skipnc
  7295  096D  2973               	goto	l3631
  7296                           
  7297                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7298  096E  3001               	movlw	1
  7299  096F  0021               	movlb	1	; select bank1
  7300  0970  07D3               	addwf	_switchBypass_pressed^(0+128),f
  7301  0971  3000               	movlw	0
  7302  0972                     L6:	
  7303  0972  3DD4               	addwfc	(_switchBypass_pressed+1)^(0+128),f
  7304  0973                     l3631:	
  7305                           
  7306                           ;SwitchBypass.c: 47: }
  7307                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7308  0973  0021               	movlb	1	; select bank1
  7309  0974  0853               	movf	_switchBypass_pressed^(0+128),w
  7310  0975  0454               	iorwf	(_switchBypass_pressed+1)^(0+128),w
  7311  0976  1D03               	btfss	3,2
  7312  0977  29BF               	goto	l3663
  7313                           
  7314                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7315  0978  0856               	movf	_feedback_start^(0+128),w
  7316  0979  1D03               	btfss	3,2
  7317  097A  297F               	goto	l3639
  7318                           
  7319                           ;SwitchBypass.c: 57: feedback_start = 1;
  7320  097B  01D6               	clrf	_feedback_start^(0+128)
  7321  097C  0AD6               	incf	_feedback_start^(0+128),f
  7322                           
  7323                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7324  097D  01C7               	clrf	_feedback_timer^(0+128)	;volatile
  7325  097E  01C8               	clrf	(_feedback_timer+1)^(0+128)	;volatile
  7326  097F                     l3639:	
  7327                           
  7328                           ;SwitchBypass.c: 59: }
  7329                           ;SwitchBypass.c: 60: if (switchBypass_state == 1) {
  7330  097F  0020               	movlb	0	; select bank0
  7331  0980  036F               	decf	_switchBypass_state,w
  7332  0981  1D03               	btfss	3,2
  7333  0982  29A9               	goto	l955
  7334                           
  7335                           ;SwitchBypass.c: 62: if (switchBypass_up == 1) {
  7336  0983  0022               	movlb	2	; select bank2
  7337  0984  035B               	decf	_switchBypass_up^(0+256),w
  7338  0985  045C               	iorwf	(_switchBypass_up+1)^(0+256),w
  7339  0986  1D03               	btfss	3,2
  7340  0987  298C               	goto	l956
  7341                           
  7342                           ;SwitchBypass.c: 63: switchBypass_toggle = 1;
  7343  0988  3001               	movlw	1
  7344  0989  00C4               	movwf	_switchBypass_toggle^(0+256)
  7345  098A  3000               	movlw	0
  7346  098B  00C5               	movwf	(_switchBypass_toggle^(0+256)+1)
  7347  098C                     l956:	
  7348                           
  7349                           ;SwitchBypass.c: 64: }
  7350                           ;SwitchBypass.c: 69: if (feedback_timer >= long_press_limit && feedback_state == 0 && by
      +                          pass_turning_on == 0) {
  7351  098C  0021               	movlb	1	; select bank1
  7352  098D  0868               	movf	(_long_press_limit+1)^(0+128),w
  7353  098E  0248               	subwf	(_feedback_timer+1)^(0+128),w	;volatile
  7354  098F  1D03               	skipz
  7355  0990  2993               	goto	u3405
  7356  0991  0867               	movf	_long_press_limit^(0+128),w
  7357  0992  0247               	subwf	_feedback_timer^(0+128),w	;volatile
  7358  0993                     u3405:	
  7359  0993  1C03               	skipc
  7360  0994  29BB               	goto	l3661
  7361  0995  0022               	movlb	2	; select bank2
  7362  0996  084D               	movf	_feedback_state^(0+256),w
  7363  0997  044E               	iorwf	(_feedback_state+1)^(0+256),w
  7364  0998  1D03               	btfss	3,2
  7365  0999  29BB               	goto	l3661
  7366  099A  0021               	movlb	1	; select bank1
  7367  099B  0855               	movf	_bypass_turning_on^(0+128),w
  7368  099C  1D03               	btfss	3,2
  7369  099D  29BB               	goto	l3661
  7370                           
  7371                           ;SwitchBypass.c: 71: LATBbits.LATB2 = 0;
  7372  099E  0022               	movlb	2	; select bank2
  7373  099F  110D               	bcf	13,2	;volatile
  7374                           
  7375                           ;SwitchBypass.c: 72: setFeedbackState(1);
  7376  09A0  3001               	movlw	1
  7377  09A1  0020               	movlb	0	; select bank0
  7378  09A2  00AE               	movwf	setFeedbackState@f_state
  7379  09A3  3000               	movlw	0
  7380  09A4  00AF               	movwf	setFeedbackState@f_state+1
  7381  09A5  3192  22F5  3189   	fcall	_setFeedbackState
  7382                           
  7383                           ;SwitchBypass.c: 73: }
  7384                           ;SwitchBypass.c: 74: } else {
  7385  09A8  29BB               	goto	l3661
  7386  09A9                     l955:	
  7387                           
  7388                           ;SwitchBypass.c: 76: bypass_turning_on = 1;
  7389  09A9  0021               	movlb	1	; select bank1
  7390  09AA  01D5               	clrf	_bypass_turning_on^(0+128)
  7391  09AB  0AD5               	incf	_bypass_turning_on^(0+128),f
  7392                           
  7393                           ;SwitchBypass.c: 77: switchBypass_toggle = 0;
  7394  09AC  0022               	movlb	2	; select bank2
  7395  09AD  01C4               	clrf	_switchBypass_toggle^(0+256)
  7396  09AE  01C5               	clrf	(_switchBypass_toggle+1)^(0+256)
  7397                           
  7398                           ;SwitchBypass.c: 78: setSwitchBypassState(1);
  7399  09AF  3001               	movlw	1
  7400  09B0  0020               	movlb	0	; select bank0
  7401  09B1  00AE               	movwf	setSwitchBypassState@f_state
  7402  09B2  3000               	movlw	0
  7403  09B3  00AF               	movwf	setSwitchBypassState@f_state+1
  7404  09B4  3193  23FA         	fcall	_setSwitchBypassState
  7405                           
  7406                           ;SwitchBypass.c: 79: feedback_state = 0;
  7407  09B6  0022               	movlb	2	; select bank2
  7408  09B7  01CD               	clrf	_feedback_state^(0+256)
  7409  09B8  01CE               	clrf	(_feedback_state+1)^(0+256)
  7410                           
  7411                           ;SwitchBypass.c: 80: feedback_start = 0;
  7412  09B9  0021               	movlb	1	; select bank1
  7413  09BA  01D6               	clrf	_feedback_start^(0+128)
  7414  09BB                     l3661:	
  7415                           
  7416                           ;SwitchBypass.c: 81: }
  7417                           ;SwitchBypass.c: 83: switchBypass_up = 0;
  7418  09BB  0022               	movlb	2	; select bank2
  7419  09BC  01DB               	clrf	_switchBypass_up^(0+256)
  7420  09BD  01DC               	clrf	(_switchBypass_up+1)^(0+256)
  7421                           
  7422                           ;SwitchBypass.c: 84: } else if (switchBypass_pressed >= 25) {
  7423  09BE  0008               	return
  7424  09BF                     l3663:	
  7425  09BF  0021               	movlb	1	; select bank1
  7426  09C0  0854               	movf	(_switchBypass_pressed+1)^(0+128),w
  7427  09C1  3A80               	xorlw	128
  7428  09C2  0020               	movlb	0	; select bank0
  7429  09C3  00B2               	movwf	??_updateSwitchBypass
  7430  09C4  3080               	movlw	128
  7431  09C5  0232               	subwf	??_updateSwitchBypass,w
  7432  09C6  1D03               	skipz
  7433  09C7  29CB               	goto	u3435
  7434  09C8  3019               	movlw	25
  7435  09C9  0021               	movlb	1	; select bank1
  7436  09CA  0253               	subwf	_switchBypass_pressed^(0+128),w
  7437  09CB                     u3435:	
  7438  09CB  1C03               	skipc
  7439  09CC  0008               	return
  7440                           
  7441                           ;SwitchBypass.c: 85: if (switchBypass_toggle == 1 && feedback_state == 0) {
  7442  09CD  0022               	movlb	2	; select bank2
  7443  09CE  0344               	decf	_switchBypass_toggle^(0+256),w
  7444  09CF  0445               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  7445  09D0  1D03               	btfss	3,2
  7446  09D1  29DD               	goto	l3671
  7447  09D2  084D               	movf	_feedback_state^(0+256),w
  7448  09D3  044E               	iorwf	(_feedback_state+1)^(0+256),w
  7449  09D4  1D03               	btfss	3,2
  7450  09D5  29DD               	goto	l3671
  7451                           
  7452                           ;SwitchBypass.c: 86: setSwitchBypassState(0);
  7453  09D6  3000               	movlw	0
  7454  09D7  0020               	movlb	0	; select bank0
  7455  09D8  00AE               	movwf	setSwitchBypassState@f_state
  7456  09D9  00AF               	movwf	setSwitchBypassState@f_state+1
  7457  09DA  3193  23FA  3189   	fcall	_setSwitchBypassState
  7458  09DD                     l3671:	
  7459                           
  7460                           ;SwitchBypass.c: 87: }
  7461                           ;SwitchBypass.c: 88: LATBbits.LATB2 = switchBypass_state;
  7462  09DD  0020               	movlb	0	; select bank0
  7463  09DE  0C6F               	rrf	_switchBypass_state,w
  7464  09DF  0022               	movlb	2	; select bank2
  7465  09E0  1C03               	skipc
  7466  09E1  110D               	bcf	13,2	;volatile
  7467  09E2  1803               	skipnc
  7468  09E3  150D               	bsf	13,2	;volatile
  7469                           
  7470                           ;SwitchBypass.c: 90: setFeedbackState(0);
  7471  09E4  3000               	movlw	0
  7472  09E5  0020               	movlb	0	; select bank0
  7473  09E6  00AE               	movwf	setFeedbackState@f_state
  7474  09E7  00AF               	movwf	setFeedbackState@f_state+1
  7475  09E8  3192  22F5         	fcall	_setFeedbackState
  7476                           
  7477                           ;SwitchBypass.c: 92: feedback_start = 0;
  7478  09EA  0021               	movlb	1	; select bank1
  7479  09EB  01D6               	clrf	_feedback_start^(0+128)
  7480                           
  7481                           ;SwitchBypass.c: 93: bypass_turning_on = 0;
  7482  09EC  01D5               	clrf	_bypass_turning_on^(0+128)
  7483                           
  7484                           ;SwitchBypass.c: 94: switchBypass_toggle = 0;
  7485  09ED  0022               	movlb	2	; select bank2
  7486  09EE  01C4               	clrf	_switchBypass_toggle^(0+256)
  7487  09EF  01C5               	clrf	(_switchBypass_toggle+1)^(0+256)
  7488                           
  7489                           ;SwitchBypass.c: 95: switchBypass_up = 1;
  7490  09F0  3001               	movlw	1
  7491  09F1  00DB               	movwf	_switchBypass_up^(0+256)
  7492  09F2  3000               	movlw	0
  7493  09F3  00DC               	movwf	(_switchBypass_up^(0+256)+1)
  7494                           
  7495                           ;SwitchBypass.c: 97: switchBypass_pressed = 25;
  7496  09F4  3019               	movlw	25
  7497  09F5  0021               	movlb	1	; select bank1
  7498  09F6  00D3               	movwf	_switchBypass_pressed^(0+128)
  7499  09F7  3000               	movlw	0
  7500  09F8  00D4               	movwf	(_switchBypass_pressed^(0+128)+1)
  7501  09F9  0008               	return
  7502  09FA                     __end_of_updateSwitchBypass:	
  7503                           
  7504                           	psect	text5
  7505  12F5                     __ptext5:	
  7506 ;; *************** function _setFeedbackState *****************
  7507 ;; Defined at:
  7508 ;;		line 121 in file "SwitchBypass.c"
  7509 ;; Parameters:    Size  Location     Type
  7510 ;;  f_state         2   14[BANK0 ] int 
  7511 ;; Auto vars:     Size  Location     Type
  7512 ;;		None
  7513 ;; Return value:  Size  Location     Type
  7514 ;;                  1    wreg      void 
  7515 ;; Registers used:
  7516 ;;		wreg, status,2, status,0, pclath, cstack
  7517 ;; Tracked objects:
  7518 ;;		On entry : 0/0
  7519 ;;		On exit  : 0/0
  7520 ;;		Unchanged: 0/0
  7521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7525 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7526 ;;Total ram usage:        2 bytes
  7527 ;; Hardware stack levels used:    1
  7528 ;; Hardware stack levels required when called:    4
  7529 ;; This function calls:
  7530 ;;		_wait_ms
  7531 ;; This function is called by:
  7532 ;;		_updateSwitchBypass
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           
  7537                           ;psect for function _setFeedbackState
  7538  12F5                     _setFeedbackState:	
  7539                           
  7540                           ;SwitchBypass.c: 122: if (feedback_state == f_state) {return;}
  7541                           
  7542                           ;incstack = 0
  7543                           ; Regs used in _setFeedbackState: [wreg+status,2+status,0+pclath+cstack]
  7544  12F5  0020               	movlb	0	; select bank0
  7545  12F6  082F               	movf	setFeedbackState@f_state+1,w
  7546  12F7  0022               	movlb	2	; select bank2
  7547  12F8  064E               	xorwf	(_feedback_state+1)^(0+256),w
  7548  12F9  1D03               	skipz
  7549  12FA  2AFF               	goto	u2455
  7550  12FB  0020               	movlb	0	; select bank0
  7551  12FC  082E               	movf	setFeedbackState@f_state,w
  7552  12FD  0022               	movlb	2	; select bank2
  7553  12FE  064D               	xorwf	_feedback_state^(0+256),w
  7554  12FF                     u2455:	
  7555  12FF  1903               	btfsc	3,2
  7556  1300  0008               	return
  7557                           
  7558                           ;SwitchBypass.c: 123: feedback_state = f_state;
  7559  1301  0020               	movlb	0	; select bank0
  7560  1302  082F               	movf	setFeedbackState@f_state+1,w
  7561  1303  0022               	movlb	2	; select bank2
  7562  1304  00CE               	movwf	(_feedback_state+1)^(0+256)
  7563  1305  0020               	movlb	0	; select bank0
  7564  1306  082E               	movf	setFeedbackState@f_state,w
  7565  1307  0022               	movlb	2	; select bank2
  7566  1308  00CD               	movwf	_feedback_state^(0+256)
  7567                           
  7568                           ;SwitchBypass.c: 124: LATBbits.LATB3 = f_state;
  7569  1309  0020               	movlb	0	; select bank0
  7570  130A  0C2E               	rrf	setFeedbackState@f_state,w
  7571  130B  0022               	movlb	2	; select bank2
  7572  130C  1C03               	skipc
  7573  130D  118D               	bcf	13,3	;volatile
  7574  130E  1803               	skipnc
  7575  130F  158D               	bsf	13,3	;volatile
  7576                           
  7577                           ;SwitchBypass.c: 126: LATGbits.LATG2 = f_state;
  7578  1310  0020               	movlb	0	; select bank0
  7579  1311  0C2E               	rrf	setFeedbackState@f_state,w
  7580  1312  0027               	movlb	7	; select bank7
  7581  1313  1C03               	skipc
  7582  1314  110D               	bcf	13,2	;volatile
  7583  1315  1803               	skipnc
  7584  1316  150D               	bsf	13,2	;volatile
  7585                           
  7586                           ;SwitchBypass.c: 127: LATGbits.LATG1 = !f_state;
  7587  1317  0020               	movlb	0	; select bank0
  7588  1318  082E               	movf	setFeedbackState@f_state,w
  7589  1319  042F               	iorwf	setFeedbackState@f_state+1,w
  7590  131A  1D03               	btfss	3,2
  7591  131B  2B1F               	goto	u2460
  7592  131C  0027               	movlb	7	; select bank7
  7593  131D  148D               	bsf	13,1	;volatile
  7594  131E  2B21               	goto	l3201
  7595  131F                     u2460:	
  7596  131F  0027               	movlb	7	; select bank7
  7597  1320  108D               	bcf	13,1	;volatile
  7598  1321                     l3201:	
  7599                           
  7600                           ;SwitchBypass.c: 129: wait_ms(20);
  7601  1321  3014               	movlw	20
  7602  1322  0020               	movlb	0	; select bank0
  7603  1323  00AC               	movwf	wait_ms@time
  7604  1324  3000               	movlw	0
  7605  1325  00AD               	movwf	wait_ms@time+1
  7606  1326  3190  20BB  3192   	fcall	_wait_ms
  7607                           
  7608                           ;SwitchBypass.c: 131: LATGbits.LATG2 = 0;
  7609  1329  0027               	movlb	7	; select bank7
  7610  132A  110D               	bcf	13,2	;volatile
  7611                           
  7612                           ;SwitchBypass.c: 132: LATGbits.LATG1 = 0;
  7613  132B  108D               	bcf	13,1	;volatile
  7614                           
  7615                           ;SwitchBypass.c: 134: wait_ms(20);
  7616  132C  3014               	movlw	20
  7617  132D  0020               	movlb	0	; select bank0
  7618  132E  00AC               	movwf	wait_ms@time
  7619  132F  3000               	movlw	0
  7620  1330  00AD               	movwf	wait_ms@time+1
  7621  1331  3190  20BB         	fcall	_wait_ms
  7622  1333  0008               	return
  7623  1334                     __end_of_setFeedbackState:	
  7624                           
  7625                           	psect	text6
  7626  1030                     __ptext6:	
  7627 ;; *************** function _showBootSequence *****************
  7628 ;; Defined at:
  7629 ;;		line 86 in file "LEDs.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;		None
  7632 ;; Auto vars:     Size  Location     Type
  7633 ;;		None
  7634 ;; Return value:  Size  Location     Type
  7635 ;;                  1    wreg      void 
  7636 ;; Registers used:
  7637 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7638 ;; Tracked objects:
  7639 ;;		On entry : 0/0
  7640 ;;		On exit  : 0/0
  7641 ;;		Unchanged: 0/0
  7642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7644 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7645 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7646 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7647 ;;Total ram usage:        1 bytes
  7648 ;; Hardware stack levels used:    1
  7649 ;; Hardware stack levels required when called:    5
  7650 ;; This function calls:
  7651 ;;		_getCurrentLEDState
  7652 ;;		_restoreLEDState
  7653 ;;		_solidring_tactiles
  7654 ;;		_star_tactiles
  7655 ;; This function is called by:
  7656 ;;		_main
  7657 ;; This function uses a non-reentrant model
  7658 ;;
  7659                           
  7660                           
  7661                           ;psect for function _showBootSequence
  7662  1030                     _showBootSequence:	
  7663                           
  7664                           ;LEDs.c: 87: getCurrentLEDState();
  7665                           
  7666                           ;incstack = 0
  7667                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7668  1030  319F  2722  3190   	fcall	_getCurrentLEDState
  7669                           
  7670                           ;LEDs.c: 88: suspend_blink = 1;
  7671  1033  3001               	movlw	1
  7672  1034  0020               	movlb	0	; select bank0
  7673  1035  00B5               	movwf	??_showBootSequence
  7674  1036  0835               	movf	??_showBootSequence,w
  7675  1037  0021               	movlb	1	; select bank1
  7676  1038  00DB               	movwf	_suspend_blink^(0+128)	;volatile
  7677                           
  7678                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  7679  1039  0022               	movlb	2	; select bank2
  7680  103A  120D               	bcf	13,4	;volatile
  7681                           
  7682                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  7683  103B  110D               	bcf	13,2	;volatile
  7684                           
  7685                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  7686  103C  128D               	bcf	13,5	;volatile
  7687                           
  7688                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  7689  103D  118D               	bcf	13,3	;volatile
  7690                           
  7691                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  7692  103E  100D               	bcf	13,0	;volatile
  7693                           
  7694                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  7695  103F  108D               	bcf	13,1	;volatile
  7696                           
  7697                           ;LEDs.c: 113: star_tactiles(0);
  7698  1040  3000               	movlw	0
  7699  1041  3196  2684  3190   	fcall	_star_tactiles
  7700                           
  7701                           ;LEDs.c: 114: star_tactiles(0);
  7702  1044  3000               	movlw	0
  7703  1045  3196  2684  3190   	fcall	_star_tactiles
  7704                           
  7705                           ;LEDs.c: 115: star_tactiles(1);
  7706  1048  3001               	movlw	1
  7707  1049  3196  2684  3190   	fcall	_star_tactiles
  7708                           
  7709                           ;LEDs.c: 116: star_tactiles(1);
  7710  104C  3001               	movlw	1
  7711  104D  3196  2684  3190   	fcall	_star_tactiles
  7712                           
  7713                           ;LEDs.c: 118: solidring_tactiles();
  7714  1050  3193  2334  3190   	fcall	_solidring_tactiles
  7715                           
  7716                           ;LEDs.c: 119: solidring_tactiles();
  7717  1053  3193  2334  3190   	fcall	_solidring_tactiles
  7718                           
  7719                           ;LEDs.c: 122: suspend_blink = 0;
  7720  1056  0021               	movlb	1	; select bank1
  7721  1057  01DB               	clrf	_suspend_blink^(0+128)	;volatile
  7722                           
  7723                           ;LEDs.c: 123: restoreLEDState();
  7724  1058  319F  275C         	fcall	_restoreLEDState
  7725  105A  0008               	return
  7726  105B                     __end_of_showBootSequence:	
  7727                           
  7728                           	psect	text7
  7729  1684                     __ptext7:	
  7730 ;; *************** function _star_tactiles *****************
  7731 ;; Defined at:
  7732 ;;		line 194 in file "LEDs.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  reverse         1    wreg     unsigned char 
  7735 ;; Auto vars:     Size  Location     Type
  7736 ;;  reverse         1   16[BANK0 ] unsigned char 
  7737 ;;  iLed            2   19[BANK0 ] int 
  7738 ;;  iLed            2   17[BANK0 ] int 
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  1    wreg      void 
  7741 ;; Registers used:
  7742 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7749 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7751 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7752 ;;Total ram usage:        7 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    4
  7755 ;; This function calls:
  7756 ;;		_set_leds_bottom
  7757 ;;		_set_leds_top
  7758 ;;		_wait_ms
  7759 ;; This function is called by:
  7760 ;;		_showBootSequence
  7761 ;; This function uses a non-reentrant model
  7762 ;;
  7763                           
  7764                           
  7765                           ;psect for function _star_tactiles
  7766  1684                     _star_tactiles:	
  7767                           
  7768                           ;incstack = 0
  7769                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7770                           ;star_tactiles@reverse stored from wreg
  7771  1684  0020               	movlb	0	; select bank0
  7772  1685  00B0               	movwf	star_tactiles@reverse
  7773                           
  7774                           ;LEDs.c: 195: if (reverse == 1) {
  7775  1686  0330               	decf	star_tactiles@reverse,w
  7776  1687  1D03               	btfss	3,2
  7777  1688  2EB9               	goto	l3133
  7778                           
  7779                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  7780  1689  3005               	movlw	5
  7781  168A  00B1               	movwf	star_tactiles@iLed
  7782  168B  3000               	movlw	0
  7783  168C  00B2               	movwf	star_tactiles@iLed+1
  7784  168D                     L7:	
  7785  168D  1BB2               	btfsc	star_tactiles@iLed+1,7
  7786  168E  0008               	return
  7787                           
  7788                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  7789  168F  0832               	movf	star_tactiles@iLed+1,w
  7790  1690  00A1               	movwf	set_leds_top@x+1
  7791  1691  0831               	movf	star_tactiles@iLed,w
  7792  1692  00A0               	movwf	set_leds_top@x
  7793  1693  3001               	movlw	1
  7794  1694  00A2               	movwf	set_leds_top@ledState
  7795  1695  3000               	movlw	0
  7796  1696  00A3               	movwf	set_leds_top@ledState+1
  7797  1697  3195  25CB  3196   	fcall	_set_leds_top
  7798                           
  7799                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  7800  169A  0020               	movlb	0	; select bank0
  7801  169B  0931               	comf	star_tactiles@iLed,w
  7802  169C  00AE               	movwf	??_star_tactiles
  7803  169D  0932               	comf	star_tactiles@iLed+1,w
  7804  169E  00AF               	movwf	??_star_tactiles+1
  7805  169F  0AAE               	incf	??_star_tactiles,f
  7806  16A0  1903               	skipnz
  7807  16A1  0AAF               	incf	??_star_tactiles+1,f
  7808  16A2  082E               	movf	??_star_tactiles,w
  7809  16A3  3E06               	addlw	6
  7810  16A4  00A0               	movwf	set_leds_bottom@x
  7811  16A5  3000               	movlw	0
  7812  16A6  3D2F               	addwfc	??_star_tactiles+1,w
  7813  16A7  00A1               	movwf	set_leds_bottom@x+1
  7814  16A8  3192  223F  3196   	fcall	_set_leds_bottom
  7815                           
  7816                           ;LEDs.c: 199: wait_ms(5);
  7817  16AB  3005               	movlw	5
  7818  16AC  0020               	movlb	0	; select bank0
  7819  16AD  00AC               	movwf	wait_ms@time
  7820  16AE  3000               	movlw	0
  7821  16AF  00AD               	movwf	wait_ms@time+1
  7822  16B0  3190  20BB  3196   	fcall	_wait_ms
  7823  16B3  30FF               	movlw	255
  7824  16B4  0020               	movlb	0	; select bank0
  7825  16B5  07B1               	addwf	star_tactiles@iLed,f
  7826  16B6  30FF               	movlw	255
  7827  16B7  3DB2               	addwfc	star_tactiles@iLed+1,f
  7828  16B8  2E8D               	goto	L7
  7829  16B9                     l3133:	
  7830                           ;LEDs.c: 200: }
  7831                           ;LEDs.c: 201: } else {
  7832                           
  7833                           
  7834                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  7835  16B9  3001               	movlw	1
  7836  16BA  00B3               	movwf	star_tactiles@iLed_1383
  7837  16BB  3000               	movlw	0
  7838  16BC  00B4               	movwf	star_tactiles@iLed_1383+1
  7839  16BD                     L8:	
  7840  16BD  0834               	movf	star_tactiles@iLed_1383+1,w
  7841  16BE  3A80               	xorlw	128
  7842  16BF  00AE               	movwf	??_star_tactiles
  7843  16C0  3080               	movlw	128
  7844  16C1  022E               	subwf	??_star_tactiles,w
  7845  16C2  1D03               	skipz
  7846  16C3  2EC6               	goto	u2405
  7847  16C4  3007               	movlw	7
  7848  16C5  0233               	subwf	star_tactiles@iLed_1383,w
  7849  16C6                     u2405:	
  7850  16C6  1803               	btfsc	3,0
  7851  16C7  0008               	return
  7852                           
  7853                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  7854  16C8  0020               	movlb	0	; select bank0
  7855  16C9  0834               	movf	star_tactiles@iLed_1383+1,w
  7856  16CA  00A1               	movwf	set_leds_top@x+1
  7857  16CB  0833               	movf	star_tactiles@iLed_1383,w
  7858  16CC  00A0               	movwf	set_leds_top@x
  7859  16CD  3001               	movlw	1
  7860  16CE  00A2               	movwf	set_leds_top@ledState
  7861  16CF  3000               	movlw	0
  7862  16D0  00A3               	movwf	set_leds_top@ledState+1
  7863  16D1  3195  25CB  3196   	fcall	_set_leds_top
  7864                           
  7865                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  7866  16D4  0020               	movlb	0	; select bank0
  7867  16D5  0933               	comf	star_tactiles@iLed_1383,w
  7868  16D6  00AE               	movwf	??_star_tactiles
  7869  16D7  0934               	comf	star_tactiles@iLed_1383+1,w
  7870  16D8  00AF               	movwf	??_star_tactiles+1
  7871  16D9  0AAE               	incf	??_star_tactiles,f
  7872  16DA  1903               	skipnz
  7873  16DB  0AAF               	incf	??_star_tactiles+1,f
  7874  16DC  082E               	movf	??_star_tactiles,w
  7875  16DD  3E06               	addlw	6
  7876  16DE  00A0               	movwf	set_leds_bottom@x
  7877  16DF  3000               	movlw	0
  7878  16E0  3D2F               	addwfc	??_star_tactiles+1,w
  7879  16E1  00A1               	movwf	set_leds_bottom@x+1
  7880  16E2  3192  223F  3196   	fcall	_set_leds_bottom
  7881                           
  7882                           ;LEDs.c: 205: wait_ms(5);
  7883  16E5  3005               	movlw	5
  7884  16E6  0020               	movlb	0	; select bank0
  7885  16E7  00AC               	movwf	wait_ms@time
  7886  16E8  3000               	movlw	0
  7887  16E9  00AD               	movwf	wait_ms@time+1
  7888  16EA  3190  20BB  3196   	fcall	_wait_ms
  7889  16ED  3001               	movlw	1
  7890  16EE  0020               	movlb	0	; select bank0
  7891  16EF  07B3               	addwf	star_tactiles@iLed_1383,f
  7892  16F0  3000               	movlw	0
  7893  16F1  3DB4               	addwfc	star_tactiles@iLed_1383+1,f
  7894  16F2  2EBD               	goto	L8
  7895  16F3                     __end_of_star_tactiles:	
  7896                           
  7897                           	psect	text8
  7898  1334                     __ptext8:	
  7899 ;; *************** function _solidring_tactiles *****************
  7900 ;; Defined at:
  7901 ;;		line 223 in file "LEDs.c"
  7902 ;; Parameters:    Size  Location     Type
  7903 ;;		None
  7904 ;; Auto vars:     Size  Location     Type
  7905 ;;  ring_delay      1   16[BANK0 ] unsigned char 
  7906 ;; Return value:  Size  Location     Type
  7907 ;;                  1    wreg      void 
  7908 ;; Registers used:
  7909 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7910 ;; Tracked objects:
  7911 ;;		On entry : 0/0
  7912 ;;		On exit  : 0/0
  7913 ;;		Unchanged: 0/0
  7914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7918 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7919 ;;Total ram usage:        3 bytes
  7920 ;; Hardware stack levels used:    1
  7921 ;; Hardware stack levels required when called:    4
  7922 ;; This function calls:
  7923 ;;		_set_leds_bottom
  7924 ;;		_set_leds_top
  7925 ;;		_wait_ms
  7926 ;; This function is called by:
  7927 ;;		_showBootSequence
  7928 ;;		_showSave
  7929 ;; This function uses a non-reentrant model
  7930 ;;
  7931                           
  7932                           
  7933                           ;psect for function _solidring_tactiles
  7934  1334                     _solidring_tactiles:	
  7935                           
  7936                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7940  1334  301E               	movlw	30
  7941  1335  0020               	movlb	0	; select bank0
  7942  1336  00AE               	movwf	??_solidring_tactiles
  7943  1337  082E               	movf	??_solidring_tactiles,w
  7944  1338  00B0               	movwf	solidring_tactiles@ring_delay
  7945                           
  7946                           ;LEDs.c: 225: set_leds_top(100, 1);
  7947  1339  3064               	movlw	100
  7948  133A  00A0               	movwf	set_leds_top@x
  7949  133B  3000               	movlw	0
  7950  133C  00A1               	movwf	set_leds_top@x+1
  7951  133D  3001               	movlw	1
  7952  133E  00A2               	movwf	set_leds_top@ledState
  7953  133F  3000               	movlw	0
  7954  1340  00A3               	movwf	set_leds_top@ledState+1
  7955  1341  3195  25CB  3193   	fcall	_set_leds_top
  7956                           
  7957                           ;LEDs.c: 226: set_leds_bottom(100);
  7958  1344  3064               	movlw	100
  7959  1345  0020               	movlb	0	; select bank0
  7960  1346  00A0               	movwf	set_leds_bottom@x
  7961  1347  3000               	movlw	0
  7962  1348  00A1               	movwf	set_leds_bottom@x+1
  7963  1349  3192  223F  3193   	fcall	_set_leds_bottom
  7964                           
  7965                           ;LEDs.c: 227: wait_ms(ring_delay);
  7966  134C  0020               	movlb	0	; select bank0
  7967  134D  0830               	movf	solidring_tactiles@ring_delay,w
  7968  134E  00AE               	movwf	??_solidring_tactiles
  7969  134F  01AF               	clrf	??_solidring_tactiles+1
  7970  1350  082E               	movf	??_solidring_tactiles,w
  7971  1351  00AC               	movwf	wait_ms@time
  7972  1352  082F               	movf	??_solidring_tactiles+1,w
  7973  1353  00AD               	movwf	wait_ms@time+1
  7974  1354  3190  20BB  3193   	fcall	_wait_ms
  7975                           
  7976                           ;LEDs.c: 229: set_leds_top(0, 1);
  7977  1357  3000               	movlw	0
  7978  1358  0020               	movlb	0	; select bank0
  7979  1359  00A0               	movwf	set_leds_top@x
  7980  135A  00A1               	movwf	set_leds_top@x+1
  7981  135B  3001               	movlw	1
  7982  135C  00A2               	movwf	set_leds_top@ledState
  7983  135D  3000               	movlw	0
  7984  135E  00A3               	movwf	set_leds_top@ledState+1
  7985  135F  3195  25CB  3193   	fcall	_set_leds_top
  7986                           
  7987                           ;LEDs.c: 230: set_leds_bottom(0);
  7988  1362  3000               	movlw	0
  7989  1363  0020               	movlb	0	; select bank0
  7990  1364  00A0               	movwf	set_leds_bottom@x
  7991  1365  00A1               	movwf	set_leds_bottom@x+1
  7992  1366  3192  223F  3193   	fcall	_set_leds_bottom
  7993                           
  7994                           ;LEDs.c: 231: wait_ms(ring_delay);
  7995  1369  0020               	movlb	0	; select bank0
  7996  136A  0830               	movf	solidring_tactiles@ring_delay,w
  7997  136B  00AE               	movwf	??_solidring_tactiles
  7998  136C  01AF               	clrf	??_solidring_tactiles+1
  7999  136D  082E               	movf	??_solidring_tactiles,w
  8000  136E  00AC               	movwf	wait_ms@time
  8001  136F  082F               	movf	??_solidring_tactiles+1,w
  8002  1370  00AD               	movwf	wait_ms@time+1
  8003  1371  3190  20BB         	fcall	_wait_ms
  8004  1373  0008               	return
  8005  1374                     __end_of_solidring_tactiles:	
  8006                           
  8007                           	psect	text9
  8008  1F5C                     __ptext9:	
  8009 ;; *************** function _restoreLEDState *****************
  8010 ;; Defined at:
  8011 ;;		line 89 in file "state_manager.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, status,0
  8020 ;; Tracked objects:
  8021 ;;		On entry : 0/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8029 ;;Total ram usage:        0 bytes
  8030 ;; Hardware stack levels used:    1
  8031 ;; Hardware stack levels required when called:    2
  8032 ;; This function calls:
  8033 ;;		Nothing
  8034 ;; This function is called by:
  8035 ;;		_showBootSequence
  8036 ;;		_showError_Alternating
  8037 ;;		_show_error
  8038 ;;		_show_cancel
  8039 ;; This function uses a non-reentrant model
  8040 ;;
  8041                           
  8042                           
  8043                           ;psect for function _restoreLEDState
  8044  1F5C                     _restoreLEDState:	
  8045                           
  8046                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8047                           
  8048                           ;incstack = 0
  8049                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8050  1F5C  0022               	movlb	2	; select bank2
  8051  1F5D  0C20               	rrf	_ledState^(0+256),w
  8052  1F5E  1C03               	skipc
  8053  1F5F  120D               	bcf	13,4	;volatile
  8054  1F60  1803               	skipnc
  8055  1F61  160D               	bsf	13,4	;volatile
  8056                           
  8057                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8058  1F62  0C22               	rrf	(_ledState^(0+256)+2),w
  8059  1F63  1C03               	skipc
  8060  1F64  110D               	bcf	13,2	;volatile
  8061  1F65  1803               	skipnc
  8062  1F66  150D               	bsf	13,2	;volatile
  8063                           
  8064                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8065  1F67  0C21               	rrf	(_ledState^(0+256)+1),w
  8066  1F68  1C03               	skipc
  8067  1F69  128D               	bcf	13,5	;volatile
  8068  1F6A  1803               	skipnc
  8069  1F6B  168D               	bsf	13,5	;volatile
  8070                           
  8071                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8072  1F6C  0C23               	rrf	(_ledState^(0+256)+3),w
  8073  1F6D  1C03               	skipc
  8074  1F6E  118D               	bcf	13,3	;volatile
  8075  1F6F  1803               	skipnc
  8076  1F70  158D               	bsf	13,3	;volatile
  8077  1F71  0008               	return
  8078  1F72                     __end_of_restoreLEDState:	
  8079                           
  8080                           	psect	text10
  8081  1F22                     __ptext10:	
  8082 ;; *************** function _getCurrentLEDState *****************
  8083 ;; Defined at:
  8084 ;;		line 83 in file "state_manager.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;		None
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;		None
  8089 ;; Return value:  Size  Location     Type
  8090 ;;                  1    wreg      void 
  8091 ;; Registers used:
  8092 ;;		wreg, status,2
  8093 ;; Tracked objects:
  8094 ;;		On entry : 0/0
  8095 ;;		On exit  : 0/0
  8096 ;;		Unchanged: 0/0
  8097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8102 ;;Total ram usage:        0 bytes
  8103 ;; Hardware stack levels used:    1
  8104 ;; Hardware stack levels required when called:    2
  8105 ;; This function calls:
  8106 ;;		Nothing
  8107 ;; This function is called by:
  8108 ;;		_showBootSequence
  8109 ;;		_showError_Alternating
  8110 ;;		_show_error
  8111 ;;		_show_cancel
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           
  8116                           ;psect for function _getCurrentLEDState
  8117  1F22                     _getCurrentLEDState:	
  8118                           
  8119                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8120                           
  8121                           ;incstack = 0
  8122                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8123  1F22  3000               	movlw	0
  8124  1F23  0022               	movlb	2	; select bank2
  8125  1F24  1A0D               	btfsc	13,4	;volatile
  8126  1F25  3001               	movlw	1
  8127  1F26  00A0               	movwf	_ledState^(0+256)
  8128                           
  8129                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8130  1F27  3000               	movlw	0
  8131  1F28  190D               	btfsc	13,2	;volatile
  8132  1F29  3001               	movlw	1
  8133  1F2A  00A2               	movwf	(_ledState^(0+256)+2)
  8134                           
  8135                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8136  1F2B  3000               	movlw	0
  8137  1F2C  1A8D               	btfsc	13,5	;volatile
  8138  1F2D  3001               	movlw	1
  8139  1F2E  00A1               	movwf	(_ledState^(0+256)+1)
  8140                           
  8141                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8142  1F2F  3000               	movlw	0
  8143  1F30  198D               	btfsc	13,3	;volatile
  8144  1F31  3001               	movlw	1
  8145  1F32  00A3               	movwf	(_ledState^(0+256)+3)
  8146  1F33  0008               	return
  8147  1F34                     __end_of_getCurrentLEDState:	
  8148                           
  8149                           	psect	text11
  8150  0707                     __ptext11:	
  8151 ;; *************** function _set_subdivision *****************
  8152 ;; Defined at:
  8153 ;;		line 77 in file "user.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  x               2    6[BANK1 ] int 
  8156 ;;  y               2    8[BANK1 ] int 
  8157 ;; Auto vars:     Size  Location     Type
  8158 ;;		None
  8159 ;; Return value:  Size  Location     Type
  8160 ;;                  2    6[BANK1 ] int 
  8161 ;; Registers used:
  8162 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8163 ;; Tracked objects:
  8164 ;;		On entry : 0/0
  8165 ;;		On exit  : 0/0
  8166 ;;		Unchanged: 0/0
  8167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8168 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8171 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8172 ;;Total ram usage:        4 bytes
  8173 ;; Hardware stack levels used:    1
  8174 ;; Hardware stack levels required when called:    4
  8175 ;; This function calls:
  8176 ;;		___awtoft
  8177 ;;		___ftmul
  8178 ;;		___fttol
  8179 ;; This function is called by:
  8180 ;;		_main
  8181 ;; This function uses a non-reentrant model
  8182 ;;
  8183                           
  8184                           
  8185                           ;psect for function _set_subdivision
  8186  0707                     _set_subdivision:	
  8187                           
  8188                           ;user.c: 80: switch (y) {
  8189                           
  8190                           ;incstack = 0
  8191                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8192  0707  2FE5               	goto	l3835
  8193  0708                     l3823:	
  8194                           ;user.c: 81: case 1:
  8195                           
  8196                           
  8197                           ;user.c: 82: x = x * .75;
  8198  0708  0021               	movlb	1	; select bank1
  8199  0709  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8200  070A  0020               	movlb	0	; select bank0
  8201  070B  00A9               	movwf	___awtoft@c+1
  8202  070C  0021               	movlb	1	; select bank1
  8203  070D  0826               	movf	set_subdivision@x^(0+128),w
  8204  070E  0020               	movlb	0	; select bank0
  8205  070F  00A8               	movwf	___awtoft@c
  8206  0710  319F  27DE  3187   	fcall	___awtoft
  8207  0713  0020               	movlb	0	; select bank0
  8208  0714  0828               	movf	?___awtoft,w
  8209  0715  00B8               	movwf	___ftmul@f2
  8210  0716  0829               	movf	?___awtoft+1,w
  8211  0717  00B9               	movwf	___ftmul@f2+1
  8212  0718  082A               	movf	?___awtoft+2,w
  8213  0719  00BA               	movwf	___ftmul@f2+2
  8214  071A  3000               	movlw	0
  8215  071B  00B5               	movwf	___ftmul@f1
  8216  071C  3040               	movlw	64
  8217  071D  00B6               	movwf	___ftmul@f1+1
  8218  071E  303F               	movlw	63
  8219  071F  00B7               	movwf	___ftmul@f1+2
  8220  0720  3189  21FA  3187   	fcall	___ftmul
  8221  0723  0020               	movlb	0	; select bank0
  8222  0724  0835               	movf	?___ftmul,w
  8223  0725  00E7               	movwf	___fttol@f1
  8224  0726  0836               	movf	?___ftmul+1,w
  8225  0727  00E8               	movwf	___fttol@f1+1
  8226  0728  0837               	movf	?___ftmul+2,w
  8227  0729  00E9               	movwf	___fttol@f1+2
  8228  072A  3188  2002         	fcall	___fttol
  8229  072C  0020               	movlb	0	; select bank0
  8230  072D  0868               	movf	?___fttol+1,w
  8231  072E  0021               	movlb	1	; select bank1
  8232  072F  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8233  0730  0020               	movlb	0	; select bank0
  8234  0731  0867               	movf	?___fttol,w
  8235  0732  0021               	movlb	1	; select bank1
  8236  0733  00A6               	movwf	set_subdivision@x^(0+128)
  8237                           
  8238                           ;user.c: 83: break;
  8239  0734  0008               	return
  8240  0735                     l3825:	
  8241                           ;user.c: 84: case 2:
  8242                           
  8243                           
  8244                           ;user.c: 85: x = x * .66666;
  8245  0735  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8246  0736  0020               	movlb	0	; select bank0
  8247  0737  00A9               	movwf	___awtoft@c+1
  8248  0738  0021               	movlb	1	; select bank1
  8249  0739  0826               	movf	set_subdivision@x^(0+128),w
  8250  073A  0020               	movlb	0	; select bank0
  8251  073B  00A8               	movwf	___awtoft@c
  8252  073C  319F  27DE  3187   	fcall	___awtoft
  8253  073F  0020               	movlb	0	; select bank0
  8254  0740  0828               	movf	?___awtoft,w
  8255  0741  00B8               	movwf	___ftmul@f2
  8256  0742  0829               	movf	?___awtoft+1,w
  8257  0743  00B9               	movwf	___ftmul@f2+1
  8258  0744  082A               	movf	?___awtoft+2,w
  8259  0745  00BA               	movwf	___ftmul@f2+2
  8260  0746  30AA               	movlw	170
  8261  0747  00B5               	movwf	___ftmul@f1
  8262  0748  302A               	movlw	42
  8263  0749  00B6               	movwf	___ftmul@f1+1
  8264  074A  303F               	movlw	63
  8265  074B  00B7               	movwf	___ftmul@f1+2
  8266  074C  3189  21FA  3187   	fcall	___ftmul
  8267  074F  0020               	movlb	0	; select bank0
  8268  0750  0835               	movf	?___ftmul,w
  8269  0751  00E7               	movwf	___fttol@f1
  8270  0752  0836               	movf	?___ftmul+1,w
  8271  0753  00E8               	movwf	___fttol@f1+1
  8272  0754  0837               	movf	?___ftmul+2,w
  8273  0755  00E9               	movwf	___fttol@f1+2
  8274  0756  3188  2002         	fcall	___fttol
  8275  0758  0020               	movlb	0	; select bank0
  8276  0759  0868               	movf	?___fttol+1,w
  8277  075A  0021               	movlb	1	; select bank1
  8278  075B  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8279  075C  0020               	movlb	0	; select bank0
  8280  075D  0867               	movf	?___fttol,w
  8281  075E  0021               	movlb	1	; select bank1
  8282  075F  00A6               	movwf	set_subdivision@x^(0+128)
  8283                           
  8284                           ;user.c: 86: break;
  8285  0760  0008               	return
  8286  0761                     l3827:	
  8287                           ;user.c: 87: case 3:
  8288                           
  8289                           
  8290                           ;user.c: 88: x = x * .5;
  8291  0761  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8292  0762  0020               	movlb	0	; select bank0
  8293  0763  00A9               	movwf	___awtoft@c+1
  8294  0764  0021               	movlb	1	; select bank1
  8295  0765  0826               	movf	set_subdivision@x^(0+128),w
  8296  0766  0020               	movlb	0	; select bank0
  8297  0767  00A8               	movwf	___awtoft@c
  8298  0768  319F  27DE  3187   	fcall	___awtoft
  8299  076B  0020               	movlb	0	; select bank0
  8300  076C  0828               	movf	?___awtoft,w
  8301  076D  00B8               	movwf	___ftmul@f2
  8302  076E  0829               	movf	?___awtoft+1,w
  8303  076F  00B9               	movwf	___ftmul@f2+1
  8304  0770  082A               	movf	?___awtoft+2,w
  8305  0771  00BA               	movwf	___ftmul@f2+2
  8306  0772  3000               	movlw	0
  8307  0773  00B5               	movwf	___ftmul@f1
  8308  0774  3000               	movlw	0
  8309  0775  00B6               	movwf	___ftmul@f1+1
  8310  0776  303F               	movlw	63
  8311  0777  00B7               	movwf	___ftmul@f1+2
  8312  0778  3189  21FA  3187   	fcall	___ftmul
  8313  077B  0020               	movlb	0	; select bank0
  8314  077C  0835               	movf	?___ftmul,w
  8315  077D  00E7               	movwf	___fttol@f1
  8316  077E  0836               	movf	?___ftmul+1,w
  8317  077F  00E8               	movwf	___fttol@f1+1
  8318  0780  0837               	movf	?___ftmul+2,w
  8319  0781  00E9               	movwf	___fttol@f1+2
  8320  0782  3188  2002         	fcall	___fttol
  8321  0784  0020               	movlb	0	; select bank0
  8322  0785  0868               	movf	?___fttol+1,w
  8323  0786  0021               	movlb	1	; select bank1
  8324  0787  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8325  0788  0020               	movlb	0	; select bank0
  8326  0789  0867               	movf	?___fttol,w
  8327  078A  0021               	movlb	1	; select bank1
  8328  078B  00A6               	movwf	set_subdivision@x^(0+128)
  8329                           
  8330                           ;user.c: 89: break;
  8331  078C  0008               	return
  8332  078D                     l3829:	
  8333                           ;user.c: 90: case 4:
  8334                           
  8335                           
  8336                           ;user.c: 91: x = x * .3333;
  8337  078D  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8338  078E  0020               	movlb	0	; select bank0
  8339  078F  00A9               	movwf	___awtoft@c+1
  8340  0790  0021               	movlb	1	; select bank1
  8341  0791  0826               	movf	set_subdivision@x^(0+128),w
  8342  0792  0020               	movlb	0	; select bank0
  8343  0793  00A8               	movwf	___awtoft@c
  8344  0794  319F  27DE  3187   	fcall	___awtoft
  8345  0797  0020               	movlb	0	; select bank0
  8346  0798  0828               	movf	?___awtoft,w
  8347  0799  00B8               	movwf	___ftmul@f2
  8348  079A  0829               	movf	?___awtoft+1,w
  8349  079B  00B9               	movwf	___ftmul@f2+1
  8350  079C  082A               	movf	?___awtoft+2,w
  8351  079D  00BA               	movwf	___ftmul@f2+2
  8352  079E  30A6               	movlw	166
  8353  079F  00B5               	movwf	___ftmul@f1
  8354  07A0  30AA               	movlw	170
  8355  07A1  00B6               	movwf	___ftmul@f1+1
  8356  07A2  303E               	movlw	62
  8357  07A3  00B7               	movwf	___ftmul@f1+2
  8358  07A4  3189  21FA  3187   	fcall	___ftmul
  8359  07A7  0020               	movlb	0	; select bank0
  8360  07A8  0835               	movf	?___ftmul,w
  8361  07A9  00E7               	movwf	___fttol@f1
  8362  07AA  0836               	movf	?___ftmul+1,w
  8363  07AB  00E8               	movwf	___fttol@f1+1
  8364  07AC  0837               	movf	?___ftmul+2,w
  8365  07AD  00E9               	movwf	___fttol@f1+2
  8366  07AE  3188  2002         	fcall	___fttol
  8367  07B0  0020               	movlb	0	; select bank0
  8368  07B1  0868               	movf	?___fttol+1,w
  8369  07B2  0021               	movlb	1	; select bank1
  8370  07B3  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8371  07B4  0020               	movlb	0	; select bank0
  8372  07B5  0867               	movf	?___fttol,w
  8373  07B6  0021               	movlb	1	; select bank1
  8374  07B7  00A6               	movwf	set_subdivision@x^(0+128)
  8375                           
  8376                           ;user.c: 92: break;
  8377  07B8  0008               	return
  8378  07B9                     l3831:	
  8379                           ;user.c: 93: case 5:
  8380                           
  8381                           
  8382                           ;user.c: 94: x = x * .25;
  8383  07B9  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8384  07BA  0020               	movlb	0	; select bank0
  8385  07BB  00A9               	movwf	___awtoft@c+1
  8386  07BC  0021               	movlb	1	; select bank1
  8387  07BD  0826               	movf	set_subdivision@x^(0+128),w
  8388  07BE  0020               	movlb	0	; select bank0
  8389  07BF  00A8               	movwf	___awtoft@c
  8390  07C0  319F  27DE  3187   	fcall	___awtoft
  8391  07C3  0020               	movlb	0	; select bank0
  8392  07C4  0828               	movf	?___awtoft,w
  8393  07C5  00B8               	movwf	___ftmul@f2
  8394  07C6  0829               	movf	?___awtoft+1,w
  8395  07C7  00B9               	movwf	___ftmul@f2+1
  8396  07C8  082A               	movf	?___awtoft+2,w
  8397  07C9  00BA               	movwf	___ftmul@f2+2
  8398  07CA  3000               	movlw	0
  8399  07CB  00B5               	movwf	___ftmul@f1
  8400  07CC  3080               	movlw	128
  8401  07CD  00B6               	movwf	___ftmul@f1+1
  8402  07CE  303E               	movlw	62
  8403  07CF  00B7               	movwf	___ftmul@f1+2
  8404  07D0  3189  21FA  3187   	fcall	___ftmul
  8405  07D3  0020               	movlb	0	; select bank0
  8406  07D4  0835               	movf	?___ftmul,w
  8407  07D5  00E7               	movwf	___fttol@f1
  8408  07D6  0836               	movf	?___ftmul+1,w
  8409  07D7  00E8               	movwf	___fttol@f1+1
  8410  07D8  0837               	movf	?___ftmul+2,w
  8411  07D9  00E9               	movwf	___fttol@f1+2
  8412  07DA  3188  2002         	fcall	___fttol
  8413  07DC  0020               	movlb	0	; select bank0
  8414  07DD  0868               	movf	?___fttol+1,w
  8415  07DE  0021               	movlb	1	; select bank1
  8416  07DF  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8417  07E0  0020               	movlb	0	; select bank0
  8418  07E1  0867               	movf	?___fttol,w
  8419  07E2  0021               	movlb	1	; select bank1
  8420  07E3  00A6               	movwf	set_subdivision@x^(0+128)
  8421                           
  8422                           ;user.c: 99: }
  8423                           
  8424                           ;user.c: 98: break;
  8425                           
  8426                           ;user.c: 96: case 6:
  8427                           
  8428                           ;user.c: 95: break;
  8429  07E4  0008               	return
  8430  07E5                     l3835:	
  8431                           
  8432                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8433                           ; Switch size 1, requested type "space"
  8434                           ; Number of cases is 1, Range of values is 0 to 0
  8435                           ; switch strategies available:
  8436                           ; Name         Instructions Cycles
  8437                           ; simple_byte            4     3 (average)
  8438                           ; direct_byte            8     6 (fixed)
  8439                           ; jumptable            260     6 (fixed)
  8440                           ;	Chosen strategy is simple_byte
  8441  07E5  0021               	movlb	1	; select bank1
  8442  07E6  0829               	movf	(set_subdivision@y+1)^(0+128),w
  8443  07E7  3A00               	xorlw	0	; case 0
  8444  07E8  1903               	skipnz
  8445  07E9  2FEB               	goto	l4395
  8446  07EA  2FFF               	goto	l468
  8447  07EB                     l4395:	
  8448                           
  8449                           ; Switch size 1, requested type "space"
  8450                           ; Number of cases is 6, Range of values is 1 to 6
  8451                           ; switch strategies available:
  8452                           ; Name         Instructions Cycles
  8453                           ; simple_byte           19    10 (average)
  8454                           ; direct_byte           21     9 (fixed)
  8455                           ; jumptable            263     9 (fixed)
  8456                           ;	Chosen strategy is simple_byte
  8457  07EB  0828               	movf	set_subdivision@y^(0+128),w
  8458  07EC  3A01               	xorlw	1	; case 1
  8459  07ED  1903               	skipnz
  8460  07EE  2F08               	goto	l3823
  8461  07EF  3A03               	xorlw	3	; case 2
  8462  07F0  1903               	skipnz
  8463  07F1  2F35               	goto	l3825
  8464  07F2  3A01               	xorlw	1	; case 3
  8465  07F3  1903               	skipnz
  8466  07F4  2F61               	goto	l3827
  8467  07F5  3A07               	xorlw	7	; case 4
  8468  07F6  1903               	skipnz
  8469  07F7  2F8D               	goto	l3829
  8470  07F8  3A01               	xorlw	1	; case 5
  8471  07F9  1903               	skipnz
  8472  07FA  2FB9               	goto	l3831
  8473  07FB  3A03               	xorlw	3	; case 6
  8474  07FC  1903               	skipnz
  8475  07FD  2FFF               	goto	l468
  8476  07FE  2FFF               	goto	l468
  8477  07FF                     l468:	
  8478                           
  8479                           ;user.c: 100: return x;
  8480  07FF  0008               	return
  8481  0800                     __end_of_set_subdivision:	
  8482                           
  8483                           	psect	text12
  8484  0802                     __ptext12:	
  8485 ;; *************** function ___fttol *****************
  8486 ;; Defined at:
  8487 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8488 ;; Parameters:    Size  Location     Type
  8489 ;;  f1              3   71[BANK0 ] float 
  8490 ;; Auto vars:     Size  Location     Type
  8491 ;;  lval            4    1[BANK1 ] unsigned long 
  8492 ;;  exp1            1    5[BANK1 ] unsigned char 
  8493 ;;  sign1           1    0[BANK1 ] unsigned char 
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  4   71[BANK0 ] long 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2, status,0
  8498 ;; Tracked objects:
  8499 ;;		On entry : 0/0
  8500 ;;		On exit  : 0/0
  8501 ;;		Unchanged: 0/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8503 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8504 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8505 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8506 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8507 ;;Total ram usage:       14 bytes
  8508 ;; Hardware stack levels used:    1
  8509 ;; Hardware stack levels required when called:    2
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_main
  8514 ;;		_set_subdivision
  8515 ;; This function uses a non-reentrant model
  8516 ;;
  8517                           
  8518                           
  8519                           ;psect for function ___fttol
  8520  0802                     ___fttol:	
  8521                           
  8522                           ;incstack = 0
  8523                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8524  0802  0020               	movlb	0	; select bank0
  8525  0803  0867               	movf	___fttol@f1,w
  8526  0804  00EB               	movwf	??___fttol
  8527  0805  0868               	movf	___fttol@f1+1,w
  8528  0806  00EC               	movwf	??___fttol+1
  8529  0807  0869               	movf	___fttol@f1+2,w
  8530  0808  00ED               	movwf	??___fttol+2
  8531  0809  1003               	clrc
  8532  080A  0D6C               	rlf	??___fttol+1,w
  8533  080B  0D6D               	rlf	??___fttol+2,w
  8534  080C  00EE               	movwf	??___fttol+3
  8535  080D  086E               	movf	??___fttol+3,w
  8536  080E  0021               	movlb	1	; select bank1
  8537  080F  00A5               	movwf	___fttol@exp1^(0+128)
  8538  0810  0825               	movf	___fttol@exp1^(0+128),w
  8539  0811  1D03               	btfss	3,2
  8540  0812  281D               	goto	l3459
  8541  0813  3000               	movlw	0
  8542  0814  0020               	movlb	0	; select bank0
  8543  0815  00EA               	movwf	?___fttol+3
  8544  0816  3000               	movlw	0
  8545  0817  00E9               	movwf	?___fttol+2
  8546  0818  3000               	movlw	0
  8547  0819  00E8               	movwf	?___fttol+1
  8548  081A  3000               	movlw	0
  8549  081B  00E7               	movwf	?___fttol
  8550  081C  0008               	return
  8551  081D                     l3459:	
  8552  081D  0020               	movlb	0	; select bank0
  8553  081E  0867               	movf	___fttol@f1,w
  8554  081F  00EB               	movwf	??___fttol
  8555  0820  0868               	movf	___fttol@f1+1,w
  8556  0821  00EC               	movwf	??___fttol+1
  8557  0822  0869               	movf	___fttol@f1+2,w
  8558  0823  00ED               	movwf	??___fttol+2
  8559  0824  3017               	movlw	23
  8560  0825                     u3095:	
  8561  0825  36ED               	lsrf	??___fttol+2,f
  8562  0826  0CEC               	rrf	??___fttol+1,f
  8563  0827  0CEB               	rrf	??___fttol,f
  8564  0828  0B89               	decfsz	9,f
  8565  0829  2825               	goto	u3095
  8566  082A  086B               	movf	??___fttol,w
  8567  082B  00EE               	movwf	??___fttol+3
  8568  082C  086E               	movf	??___fttol+3,w
  8569  082D  0021               	movlb	1	; select bank1
  8570  082E  00A0               	movwf	___fttol@sign1^(0+128)
  8571  082F  0020               	movlb	0	; select bank0
  8572  0830  17E8               	bsf	___fttol@f1+1,7
  8573  0831  30FF               	movlw	255
  8574  0832  05E7               	andwf	___fttol@f1,f
  8575  0833  30FF               	movlw	255
  8576  0834  05E8               	andwf	___fttol@f1+1,f
  8577  0835  3000               	movlw	0
  8578  0836  05E9               	andwf	___fttol@f1+2,f
  8579  0837  0867               	movf	___fttol@f1,w
  8580  0838  0021               	movlb	1	; select bank1
  8581  0839  00A1               	movwf	___fttol@lval^(0+128)
  8582  083A  0020               	movlb	0	; select bank0
  8583  083B  0868               	movf	___fttol@f1+1,w
  8584  083C  0021               	movlb	1	; select bank1
  8585  083D  00A2               	movwf	(___fttol@lval^(0+128)+1)
  8586  083E  0020               	movlb	0	; select bank0
  8587  083F  0869               	movf	___fttol@f1+2,w
  8588  0840  0021               	movlb	1	; select bank1
  8589  0841  00A3               	movwf	(___fttol@lval^(0+128)+2)
  8590  0842  01A4               	clrf	(___fttol@lval^(0+128)+3)
  8591  0843  308E               	movlw	142
  8592  0844  02A5               	subwf	___fttol@exp1^(0+128),f
  8593  0845  1FA5               	btfss	___fttol@exp1^(0+128),7
  8594  0846  2867               	goto	l3479
  8595  0847  0825               	movf	___fttol@exp1^(0+128),w
  8596  0848  3A80               	xorlw	128
  8597  0849  3E8F               	addlw	143
  8598  084A  1803               	skipnc
  8599  084B  2856               	goto	l3477
  8600  084C  3000               	movlw	0
  8601  084D  0020               	movlb	0	; select bank0
  8602  084E  00EA               	movwf	?___fttol+3
  8603  084F  3000               	movlw	0
  8604  0850  00E9               	movwf	?___fttol+2
  8605  0851  3000               	movlw	0
  8606  0852  00E8               	movwf	?___fttol+1
  8607  0853  3000               	movlw	0
  8608  0854  00E7               	movwf	?___fttol
  8609  0855  0008               	return
  8610  0856                     l3477:	
  8611  0856  3001               	movlw	1
  8612  0857                     u3125:	
  8613  0857  0021               	movlb	1	; select bank1
  8614  0858  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  8615  0859  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  8616  085A  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  8617  085B  0CA1               	rrf	___fttol@lval^(0+128),f
  8618  085C  0B89               	decfsz	9,f
  8619  085D  2857               	goto	u3125
  8620  085E  3001               	movlw	1
  8621  085F  0020               	movlb	0	; select bank0
  8622  0860  00EB               	movwf	??___fttol
  8623  0861  086B               	movf	??___fttol,w
  8624  0862  0021               	movlb	1	; select bank1
  8625  0863  07A5               	addwf	___fttol@exp1^(0+128),f
  8626  0864  1903               	btfsc	3,2
  8627  0865  2883               	goto	l3487
  8628  0866  2856               	goto	l3477
  8629  0867                     l3479:	
  8630  0867  3018               	movlw	24
  8631  0868  0225               	subwf	___fttol@exp1^(0+128),w
  8632  0869  1C03               	skipc
  8633  086A  287F               	goto	l1341
  8634  086B  3000               	movlw	0
  8635  086C  0020               	movlb	0	; select bank0
  8636  086D  00EA               	movwf	?___fttol+3
  8637  086E  3000               	movlw	0
  8638  086F  00E9               	movwf	?___fttol+2
  8639  0870  3000               	movlw	0
  8640  0871  00E8               	movwf	?___fttol+1
  8641  0872  3000               	movlw	0
  8642  0873  00E7               	movwf	?___fttol
  8643  0874  0008               	return
  8644  0875                     l3485:	
  8645  0875  3001               	movlw	1
  8646  0876                     u3155:	
  8647  0876  0021               	movlb	1	; select bank1
  8648  0877  35A1               	lslf	___fttol@lval^(0+128),f
  8649  0878  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  8650  0879  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  8651  087A  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  8652  087B  0B89               	decfsz	9,f
  8653  087C  2876               	goto	u3155
  8654  087D  3001               	movlw	1
  8655  087E  02A5               	subwf	___fttol@exp1^(0+128),f
  8656  087F                     l1341:	
  8657  087F  0021               	movlb	1	; select bank1
  8658  0880  0825               	movf	___fttol@exp1^(0+128),w
  8659  0881  1D03               	btfss	3,2
  8660  0882  2875               	goto	l3485
  8661  0883                     l3487:	
  8662  0883  0820               	movf	___fttol@sign1^(0+128),w
  8663  0884  1903               	btfsc	3,2
  8664  0885  2891               	goto	l3491
  8665  0886  09A1               	comf	___fttol@lval^(0+128),f
  8666  0887  09A2               	comf	(___fttol@lval+1)^(0+128),f
  8667  0888  09A3               	comf	(___fttol@lval+2)^(0+128),f
  8668  0889  09A4               	comf	(___fttol@lval+3)^(0+128),f
  8669  088A  0AA1               	incf	___fttol@lval^(0+128),f
  8670  088B  1903               	skipnz
  8671  088C  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  8672  088D  1903               	skipnz
  8673  088E  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  8674  088F  1903               	skipnz
  8675  0890  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  8676  0891                     l3491:	
  8677  0891  0824               	movf	(___fttol@lval+3)^(0+128),w
  8678  0892  0020               	movlb	0	; select bank0
  8679  0893  00EA               	movwf	?___fttol+3
  8680  0894  0021               	movlb	1	; select bank1
  8681  0895  0823               	movf	(___fttol@lval+2)^(0+128),w
  8682  0896  0020               	movlb	0	; select bank0
  8683  0897  00E9               	movwf	?___fttol+2
  8684  0898  0021               	movlb	1	; select bank1
  8685  0899  0822               	movf	(___fttol@lval+1)^(0+128),w
  8686  089A  0020               	movlb	0	; select bank0
  8687  089B  00E8               	movwf	?___fttol+1
  8688  089C  0021               	movlb	1	; select bank1
  8689  089D  0821               	movf	___fttol@lval^(0+128),w
  8690  089E  0020               	movlb	0	; select bank0
  8691  089F  00E7               	movwf	?___fttol
  8692  08A0  0008               	return
  8693  08A1                     __end_of___fttol:	
  8694                           
  8695                           	psect	text13
  8696  1FDE                     __ptext13:	
  8697 ;; *************** function ___awtoft *****************
  8698 ;; Defined at:
  8699 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  8700 ;; Parameters:    Size  Location     Type
  8701 ;;  c               2    8[BANK0 ] int 
  8702 ;; Auto vars:     Size  Location     Type
  8703 ;;  sign            1   13[BANK0 ] unsigned char 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  3    8[BANK0 ] float 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, pclath, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8713 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8715 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8716 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8717 ;;Total ram usage:        6 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    3
  8720 ;; This function calls:
  8721 ;;		___ftpack
  8722 ;; This function is called by:
  8723 ;;		_main
  8724 ;;		_set_subdivision
  8725 ;; This function uses a non-reentrant model
  8726 ;;
  8727                           
  8728                           
  8729                           ;psect for function ___awtoft
  8730  1FDE                     ___awtoft:	
  8731                           
  8732                           ;incstack = 0
  8733                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8734  1FDE  0020               	movlb	0	; select bank0
  8735  1FDF  01AD               	clrf	___awtoft@sign
  8736  1FE0  1FA9               	btfss	___awtoft@c+1,7
  8737  1FE1  2FE9               	goto	l3279
  8738  1FE2  09A8               	comf	___awtoft@c,f
  8739  1FE3  09A9               	comf	___awtoft@c+1,f
  8740  1FE4  0AA8               	incf	___awtoft@c,f
  8741  1FE5  1903               	skipnz
  8742  1FE6  0AA9               	incf	___awtoft@c+1,f
  8743  1FE7  01AD               	clrf	___awtoft@sign
  8744  1FE8  0AAD               	incf	___awtoft@sign,f
  8745  1FE9                     l3279:	
  8746  1FE9  0828               	movf	___awtoft@c,w
  8747  1FEA  00A0               	movwf	___ftpack@arg
  8748  1FEB  0829               	movf	___awtoft@c+1,w
  8749  1FEC  00A1               	movwf	___ftpack@arg+1
  8750  1FED  01A2               	clrf	___ftpack@arg+2
  8751  1FEE  308E               	movlw	142
  8752  1FEF  00AB               	movwf	??___awtoft
  8753  1FF0  082B               	movf	??___awtoft,w
  8754  1FF1  00A3               	movwf	___ftpack@exp
  8755  1FF2  082D               	movf	___awtoft@sign,w
  8756  1FF3  00AC               	movwf	??___awtoft+1
  8757  1FF4  082C               	movf	??___awtoft+1,w
  8758  1FF5  00A4               	movwf	___ftpack@sign
  8759  1FF6  3196  261F         	fcall	___ftpack
  8760  1FF8  0020               	movlb	0	; select bank0
  8761  1FF9  0820               	movf	?___ftpack,w
  8762  1FFA  00A8               	movwf	?___awtoft
  8763  1FFB  0821               	movf	?___ftpack+1,w
  8764  1FFC  00A9               	movwf	?___awtoft+1
  8765  1FFD  0822               	movf	?___ftpack+2,w
  8766  1FFE  00AA               	movwf	?___awtoft+2
  8767  1FFF  0008               	return
  8768  2000                     __end_of___awtoft:	
  8769                           
  8770                           	psect	text14
  8771  111D                     __ptext14:	
  8772 ;; *************** function _read_top_tactile *****************
  8773 ;; Defined at:
  8774 ;;		line 36 in file "tactiles.c"
  8775 ;; Parameters:    Size  Location     Type
  8776 ;;		None
  8777 ;; Auto vars:     Size  Location     Type
  8778 ;;		None
  8779 ;; Return value:  Size  Location     Type
  8780 ;;                  1    wreg      void 
  8781 ;; Registers used:
  8782 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8783 ;; Tracked objects:
  8784 ;;		On entry : 0/0
  8785 ;;		On exit  : 0/0
  8786 ;;		Unchanged: 0/0
  8787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8790 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8792 ;;Total ram usage:        1 bytes
  8793 ;; Hardware stack levels used:    1
  8794 ;; Hardware stack levels required when called:    4
  8795 ;; This function calls:
  8796 ;;		_set_leds_top
  8797 ;;		_wait_ms
  8798 ;; This function is called by:
  8799 ;;		_main
  8800 ;; This function uses a non-reentrant model
  8801 ;;
  8802                           
  8803                           
  8804                           ;psect for function _read_top_tactile
  8805  111D                     _read_top_tactile:	
  8806                           
  8807                           ;tactiles.c: 44: if (PORTDbits.RD5 == 0) {
  8808                           
  8809                           ;incstack = 0
  8810                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8811  111D  0020               	movlb	0	; select bank0
  8812  111E  1A8F               	btfsc	15,5	;volatile
  8813  111F  0008               	return
  8814                           
  8815                           ;tactiles.c: 45: top_push_state = top_push_state + 1;
  8816  1120  0021               	movlb	1	; select bank1
  8817  1121  086B               	movf	_top_push_state^(0+128),w
  8818  1122  3E01               	addlw	1
  8819  1123  00EB               	movwf	_top_push_state^(0+128)
  8820  1124  3000               	movlw	0
  8821  1125  3D6C               	addwfc	(_top_push_state+1)^(0+128),w
  8822  1126  00EC               	movwf	(_top_push_state+1)^(0+128)
  8823                           
  8824                           ;tactiles.c: 46: if (top_push_state >= 7) {
  8825  1127  086C               	movf	(_top_push_state+1)^(0+128),w
  8826  1128  3A80               	xorlw	128
  8827  1129  0020               	movlb	0	; select bank0
  8828  112A  00AE               	movwf	??_read_top_tactile
  8829  112B  3080               	movlw	128
  8830  112C  022E               	subwf	??_read_top_tactile,w
  8831  112D  1D03               	skipz
  8832  112E  2932               	goto	u3275
  8833  112F  3007               	movlw	7
  8834  1130  0021               	movlb	1	; select bank1
  8835  1131  026B               	subwf	_top_push_state^(0+128),w
  8836  1132                     u3275:	
  8837  1132  1C03               	skipc
  8838  1133  2939               	goto	l3565
  8839                           
  8840                           ;tactiles.c: 47: top_push_state = 1;
  8841  1134  3001               	movlw	1
  8842  1135  0021               	movlb	1	; select bank1
  8843  1136  00EB               	movwf	_top_push_state^(0+128)
  8844  1137  3000               	movlw	0
  8845  1138  00EC               	movwf	(_top_push_state^(0+128)+1)
  8846  1139                     l3565:	
  8847                           
  8848                           ;tactiles.c: 48: }
  8849                           ;tactiles.c: 49: set_leds_top(top_push_state, 1);
  8850  1139  0021               	movlb	1	; select bank1
  8851  113A  086C               	movf	(_top_push_state+1)^(0+128),w
  8852  113B  0020               	movlb	0	; select bank0
  8853  113C  00A1               	movwf	set_leds_top@x+1
  8854  113D  0021               	movlb	1	; select bank1
  8855  113E  086B               	movf	_top_push_state^(0+128),w
  8856  113F  0020               	movlb	0	; select bank0
  8857  1140  00A0               	movwf	set_leds_top@x
  8858  1141  3001               	movlw	1
  8859  1142  00A2               	movwf	set_leds_top@ledState
  8860  1143  3000               	movlw	0
  8861  1144  00A3               	movwf	set_leds_top@ledState+1
  8862  1145  3195  25CB  3191   	fcall	_set_leds_top
  8863                           
  8864                           ;tactiles.c: 50: delay_time_changed = 1;
  8865  1148  3001               	movlw	1
  8866  1149  0022               	movlb	2	; select bank2
  8867  114A  00CB               	movwf	_delay_time_changed^(0+256)
  8868  114B  3000               	movlw	0
  8869  114C  00CC               	movwf	(_delay_time_changed^(0+256)+1)
  8870  114D                     l765:	
  8871                           ;tactiles.c: 52: while (PORTDbits.RD5 == 0) {
  8872                           
  8873  114D  0020               	movlb	0	; select bank0
  8874  114E  1E8F               	btfss	15,5	;volatile
  8875  114F  294D               	goto	l765
  8876                           
  8877                           ;tactiles.c: 53: }
  8878                           ;tactiles.c: 54: wait_ms(20);
  8879  1150  3014               	movlw	20
  8880  1151  00AC               	movwf	wait_ms@time
  8881  1152  3000               	movlw	0
  8882  1153  00AD               	movwf	wait_ms@time+1
  8883  1154  3190  20BB         	fcall	_wait_ms
  8884  1156  0008               	return
  8885  1157                     __end_of_read_top_tactile:	
  8886                           
  8887                           	psect	text15
  8888  10EC                     __ptext15:	
  8889 ;; *************** function _read_bottom_tactile *****************
  8890 ;; Defined at:
  8891 ;;		line 16 in file "tactiles.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;		None
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;		None
  8896 ;; Return value:  Size  Location     Type
  8897 ;;                  1    wreg      void 
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8909 ;;Total ram usage:        1 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    4
  8912 ;; This function calls:
  8913 ;;		_set_leds_bottom
  8914 ;;		_wait_ms
  8915 ;; This function is called by:
  8916 ;;		_main
  8917 ;; This function uses a non-reentrant model
  8918 ;;
  8919                           
  8920                           
  8921                           ;psect for function _read_bottom_tactile
  8922  10EC                     _read_bottom_tactile:	
  8923                           
  8924                           ;tactiles.c: 23: if (PORTDbits.RD6 == 0) {
  8925                           
  8926                           ;incstack = 0
  8927                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8928  10EC  0020               	movlb	0	; select bank0
  8929  10ED  1B0F               	btfsc	15,6	;volatile
  8930  10EE  0008               	return
  8931                           
  8932                           ;tactiles.c: 24: bottom_push_state = bottom_push_state + 1;
  8933  10EF  0021               	movlb	1	; select bank1
  8934  10F0  0865               	movf	_bottom_push_state^(0+128),w
  8935  10F1  3E01               	addlw	1
  8936  10F2  00E5               	movwf	_bottom_push_state^(0+128)
  8937  10F3  3000               	movlw	0
  8938  10F4  3D66               	addwfc	(_bottom_push_state+1)^(0+128),w
  8939  10F5  00E6               	movwf	(_bottom_push_state+1)^(0+128)
  8940                           
  8941                           ;tactiles.c: 25: if (bottom_push_state > 6) {
  8942  10F6  0866               	movf	(_bottom_push_state+1)^(0+128),w
  8943  10F7  3A80               	xorlw	128
  8944  10F8  0020               	movlb	0	; select bank0
  8945  10F9  00AE               	movwf	??_read_bottom_tactile
  8946  10FA  3080               	movlw	128
  8947  10FB  022E               	subwf	??_read_bottom_tactile,w
  8948  10FC  1D03               	skipz
  8949  10FD  2901               	goto	u3245
  8950  10FE  3007               	movlw	7
  8951  10FF  0021               	movlb	1	; select bank1
  8952  1100  0265               	subwf	_bottom_push_state^(0+128),w
  8953  1101                     u3245:	
  8954  1101  1C03               	skipc
  8955  1102  2908               	goto	l3553
  8956                           
  8957                           ;tactiles.c: 26: bottom_push_state = 1;
  8958  1103  3001               	movlw	1
  8959  1104  0021               	movlb	1	; select bank1
  8960  1105  00E5               	movwf	_bottom_push_state^(0+128)
  8961  1106  3000               	movlw	0
  8962  1107  00E6               	movwf	(_bottom_push_state^(0+128)+1)
  8963  1108                     l3553:	
  8964                           
  8965                           ;tactiles.c: 27: }
  8966                           ;tactiles.c: 28: set_leds_bottom(bottom_push_state);
  8967  1108  0021               	movlb	1	; select bank1
  8968  1109  0866               	movf	(_bottom_push_state+1)^(0+128),w
  8969  110A  0020               	movlb	0	; select bank0
  8970  110B  00A1               	movwf	set_leds_bottom@x+1
  8971  110C  0021               	movlb	1	; select bank1
  8972  110D  0865               	movf	_bottom_push_state^(0+128),w
  8973  110E  0020               	movlb	0	; select bank0
  8974  110F  00A0               	movwf	set_leds_bottom@x
  8975  1110  3192  223F  3190   	fcall	_set_leds_bottom
  8976  1113                     l757:	
  8977                           ;tactiles.c: 30: while (PORTDbits.RD6 == 0) {
  8978                           
  8979  1113  0020               	movlb	0	; select bank0
  8980  1114  1F0F               	btfss	15,6	;volatile
  8981  1115  2913               	goto	l757
  8982                           
  8983                           ;tactiles.c: 31: }
  8984                           ;tactiles.c: 32: wait_ms(20);
  8985  1116  3014               	movlw	20
  8986  1117  00AC               	movwf	wait_ms@time
  8987  1118  3000               	movlw	0
  8988  1119  00AD               	movwf	wait_ms@time+1
  8989  111A  3190  20BB         	fcall	_wait_ms
  8990  111C  0008               	return
  8991  111D                     __end_of_read_bottom_tactile:	
  8992                           
  8993                           	psect	text16
  8994  12B7                     __ptext16:	
  8995 ;; *************** function _modulation *****************
  8996 ;; Defined at:
  8997 ;;		line 169 in file "user.c"
  8998 ;; Parameters:    Size  Location     Type
  8999 ;;  x               2   21[BANK0 ] int 
  9000 ;;  y               2   23[BANK0 ] int 
  9001 ;; Auto vars:     Size  Location     Type
  9002 ;;		None
  9003 ;; Return value:  Size  Location     Type
  9004 ;;                  2   21[BANK0 ] int 
  9005 ;; Registers used:
  9006 ;;		wreg, status,2, status,0, pclath, cstack
  9007 ;; Tracked objects:
  9008 ;;		On entry : 0/0
  9009 ;;		On exit  : 0/0
  9010 ;;		Unchanged: 0/0
  9011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9014 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9015 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9016 ;;Total ram usage:       12 bytes
  9017 ;; Hardware stack levels used:    1
  9018 ;; Hardware stack levels required when called:    3
  9019 ;; This function calls:
  9020 ;;		___aldiv
  9021 ;;		___wmul
  9022 ;; This function is called by:
  9023 ;;		_main
  9024 ;; This function uses a non-reentrant model
  9025 ;;
  9026                           
  9027                           
  9028                           ;psect for function _modulation
  9029  12B7                     _modulation:	
  9030                           
  9031                           ;user.c: 171: x = (127500 + (y * x)) / 1000;
  9032                           
  9033                           ;incstack = 0
  9034                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9035  12B7  3000               	movlw	0
  9036  12B8  0020               	movlb	0	; select bank0
  9037  12B9  00A9               	movwf	___aldiv@divisor+3
  9038  12BA  3000               	movlw	0
  9039  12BB  00A8               	movwf	___aldiv@divisor+2
  9040  12BC  3003               	movlw	3
  9041  12BD  00A7               	movwf	___aldiv@divisor+1
  9042  12BE  30E8               	movlw	232
  9043  12BF  00A6               	movwf	___aldiv@divisor
  9044  12C0  300C               	movlw	12
  9045  12C1  00B9               	movwf	??_modulation
  9046  12C2  30F2               	movlw	242
  9047  12C3  00BA               	movwf	??_modulation+1
  9048  12C4  3001               	movlw	1
  9049  12C5  00BB               	movwf	??_modulation+2
  9050  12C6  3000               	movlw	0
  9051  12C7  00BC               	movwf	??_modulation+3
  9052  12C8  0838               	movf	modulation@y+1,w
  9053  12C9  00A1               	movwf	___wmul@multiplier+1
  9054  12CA  0837               	movf	modulation@y,w
  9055  12CB  00A0               	movwf	___wmul@multiplier
  9056  12CC  0836               	movf	modulation@x+1,w
  9057  12CD  00A3               	movwf	___wmul@multiplicand+1
  9058  12CE  0835               	movf	modulation@x,w
  9059  12CF  00A2               	movwf	___wmul@multiplicand
  9060  12D0  319F  27A2  3192   	fcall	___wmul
  9061  12D3  0020               	movlb	0	; select bank0
  9062  12D4  0820               	movf	?___wmul,w
  9063  12D5  00BD               	movwf	??_modulation+4
  9064  12D6  0821               	movf	?___wmul+1,w
  9065  12D7  00BE               	movwf	??_modulation+5
  9066  12D8  3000               	movlw	0
  9067  12D9  1BBE               	btfsc	??_modulation+5,7
  9068  12DA  30FF               	movlw	255
  9069  12DB  00BF               	movwf	??_modulation+6
  9070  12DC  00C0               	movwf	??_modulation+7
  9071  12DD  083D               	movf	??_modulation+4,w
  9072  12DE  07B9               	addwf	??_modulation,f
  9073  12DF  083E               	movf	??_modulation+5,w
  9074  12E0  3DBA               	addwfc	??_modulation+1,f
  9075  12E1  083F               	movf	??_modulation+6,w
  9076  12E2  3DBB               	addwfc	??_modulation+2,f
  9077  12E3  0840               	movf	??_modulation+7,w
  9078  12E4  3DBC               	addwfc	??_modulation+3,f
  9079  12E5  083C               	movf	??_modulation+3,w
  9080  12E6  00AD               	movwf	___aldiv@dividend+3
  9081  12E7  083B               	movf	??_modulation+2,w
  9082  12E8  00AC               	movwf	___aldiv@dividend+2
  9083  12E9  083A               	movf	??_modulation+1,w
  9084  12EA  00AB               	movwf	___aldiv@dividend+1
  9085  12EB  0839               	movf	??_modulation,w
  9086  12EC  00AA               	movwf	___aldiv@dividend
  9087  12ED  3196  26F3         	fcall	___aldiv
  9088  12EF  0020               	movlb	0	; select bank0
  9089  12F0  0827               	movf	?___aldiv+1,w
  9090  12F1  00B6               	movwf	modulation@x+1
  9091  12F2  0826               	movf	?___aldiv,w
  9092  12F3  00B5               	movwf	modulation@x
  9093                           
  9094                           ;user.c: 172: return x;
  9095  12F4  0008               	return
  9096  12F5                     __end_of_modulation:	
  9097                           
  9098                           	psect	text17
  9099  1FA2                     __ptext17:	
  9100 ;; *************** function ___wmul *****************
  9101 ;; Defined at:
  9102 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9105 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9106 ;; Auto vars:     Size  Location     Type
  9107 ;;  product         2    4[BANK0 ] unsigned int 
  9108 ;; Return value:  Size  Location     Type
  9109 ;;                  2    0[BANK0 ] unsigned int 
  9110 ;; Registers used:
  9111 ;;		wreg, status,2, status,0
  9112 ;; Tracked objects:
  9113 ;;		On entry : 0/0
  9114 ;;		On exit  : 0/0
  9115 ;;		Unchanged: 0/0
  9116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9117 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9118 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9120 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9121 ;;Total ram usage:        6 bytes
  9122 ;; Hardware stack levels used:    1
  9123 ;; Hardware stack levels required when called:    2
  9124 ;; This function calls:
  9125 ;;		Nothing
  9126 ;; This function is called by:
  9127 ;;		_modulation
  9128 ;; This function uses a non-reentrant model
  9129 ;;
  9130                           
  9131                           
  9132                           ;psect for function ___wmul
  9133  1FA2                     ___wmul:	
  9134                           
  9135                           ;incstack = 0
  9136                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9137  1FA2  0020               	movlb	0	; select bank0
  9138  1FA3  01A4               	clrf	___wmul@product
  9139  1FA4  01A5               	clrf	___wmul@product+1
  9140  1FA5                     l3219:	
  9141  1FA5  1C20               	btfss	___wmul@multiplier,0
  9142  1FA6  2FAB               	goto	l1089
  9143  1FA7  0822               	movf	___wmul@multiplicand,w
  9144  1FA8  07A4               	addwf	___wmul@product,f
  9145  1FA9  0823               	movf	___wmul@multiplicand+1,w
  9146  1FAA  3DA5               	addwfc	___wmul@product+1,f
  9147  1FAB                     l1089:	
  9148  1FAB  3001               	movlw	1
  9149  1FAC                     u2505:	
  9150  1FAC  35A2               	lslf	___wmul@multiplicand,f
  9151  1FAD  0DA3               	rlf	___wmul@multiplicand+1,f
  9152  1FAE  0B89               	decfsz	9,f
  9153  1FAF  2FAC               	goto	u2505
  9154  1FB0  3001               	movlw	1
  9155  1FB1                     u2515:	
  9156  1FB1  36A1               	lsrf	___wmul@multiplier+1,f
  9157  1FB2  0CA0               	rrf	___wmul@multiplier,f
  9158  1FB3  0B89               	decfsz	9,f
  9159  1FB4  2FB1               	goto	u2515
  9160  1FB5  0820               	movf	___wmul@multiplier,w
  9161  1FB6  0421               	iorwf	___wmul@multiplier+1,w
  9162  1FB7  1D03               	btfss	3,2
  9163  1FB8  2FA5               	goto	l3219
  9164  1FB9  0825               	movf	___wmul@product+1,w
  9165  1FBA  00A1               	movwf	?___wmul+1
  9166  1FBB  0824               	movf	___wmul@product,w
  9167  1FBC  00A0               	movwf	?___wmul
  9168  1FBD  0008               	return
  9169  1FBE                     __end_of___wmul:	
  9170                           
  9171                           	psect	text18
  9172  16F3                     __ptext18:	
  9173 ;; *************** function ___aldiv *****************
  9174 ;; Defined at:
  9175 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9176 ;; Parameters:    Size  Location     Type
  9177 ;;  divisor         4    6[BANK0 ] long 
  9178 ;;  dividend        4   10[BANK0 ] long 
  9179 ;; Auto vars:     Size  Location     Type
  9180 ;;  quotient        4   17[BANK0 ] long 
  9181 ;;  sign            1   16[BANK0 ] unsigned char 
  9182 ;;  counter         1   15[BANK0 ] unsigned char 
  9183 ;; Return value:  Size  Location     Type
  9184 ;;                  4    6[BANK0 ] long 
  9185 ;; Registers used:
  9186 ;;		wreg, status,2, status,0
  9187 ;; Tracked objects:
  9188 ;;		On entry : 0/0
  9189 ;;		On exit  : 0/0
  9190 ;;		Unchanged: 0/0
  9191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9192 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9193 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9195 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9196 ;;Total ram usage:       15 bytes
  9197 ;; Hardware stack levels used:    1
  9198 ;; Hardware stack levels required when called:    2
  9199 ;; This function calls:
  9200 ;;		Nothing
  9201 ;; This function is called by:
  9202 ;;		_modulation
  9203 ;;		_updateSwitchTap
  9204 ;; This function uses a non-reentrant model
  9205 ;;
  9206                           
  9207                           
  9208                           ;psect for function ___aldiv
  9209  16F3                     ___aldiv:	
  9210                           
  9211                           ;incstack = 0
  9212                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9213  16F3  0020               	movlb	0	; select bank0
  9214  16F4  01B0               	clrf	___aldiv@sign
  9215  16F5  1FA9               	btfss	___aldiv@divisor+3,7
  9216  16F6  2F04               	goto	l1144
  9217  16F7  09A6               	comf	___aldiv@divisor,f
  9218  16F8  09A7               	comf	___aldiv@divisor+1,f
  9219  16F9  09A8               	comf	___aldiv@divisor+2,f
  9220  16FA  09A9               	comf	___aldiv@divisor+3,f
  9221  16FB  0AA6               	incf	___aldiv@divisor,f
  9222  16FC  1903               	skipnz
  9223  16FD  0AA7               	incf	___aldiv@divisor+1,f
  9224  16FE  1903               	skipnz
  9225  16FF  0AA8               	incf	___aldiv@divisor+2,f
  9226  1700  1903               	skipnz
  9227  1701  0AA9               	incf	___aldiv@divisor+3,f
  9228  1702  01B0               	clrf	___aldiv@sign
  9229  1703  0AB0               	incf	___aldiv@sign,f
  9230  1704                     l1144:	
  9231  1704  1FAD               	btfss	___aldiv@dividend+3,7
  9232  1705  2F15               	goto	l3241
  9233  1706  09AA               	comf	___aldiv@dividend,f
  9234  1707  09AB               	comf	___aldiv@dividend+1,f
  9235  1708  09AC               	comf	___aldiv@dividend+2,f
  9236  1709  09AD               	comf	___aldiv@dividend+3,f
  9237  170A  0AAA               	incf	___aldiv@dividend,f
  9238  170B  1903               	skipnz
  9239  170C  0AAB               	incf	___aldiv@dividend+1,f
  9240  170D  1903               	skipnz
  9241  170E  0AAC               	incf	___aldiv@dividend+2,f
  9242  170F  1903               	skipnz
  9243  1710  0AAD               	incf	___aldiv@dividend+3,f
  9244  1711  3001               	movlw	1
  9245  1712  00AE               	movwf	??___aldiv
  9246  1713  082E               	movf	??___aldiv,w
  9247  1714  06B0               	xorwf	___aldiv@sign,f
  9248  1715                     l3241:	
  9249  1715  3000               	movlw	0
  9250  1716  00B4               	movwf	___aldiv@quotient+3
  9251  1717  3000               	movlw	0
  9252  1718  00B3               	movwf	___aldiv@quotient+2
  9253  1719  3000               	movlw	0
  9254  171A  00B2               	movwf	___aldiv@quotient+1
  9255  171B  3000               	movlw	0
  9256  171C  00B1               	movwf	___aldiv@quotient
  9257  171D  0829               	movf	___aldiv@divisor+3,w
  9258  171E  0428               	iorwf	___aldiv@divisor+2,w
  9259  171F  0427               	iorwf	___aldiv@divisor+1,w
  9260  1720  0426               	iorwf	___aldiv@divisor,w
  9261  1721  1903               	skipnz
  9262  1722  2F5E               	goto	l3263
  9263  1723  01AF               	clrf	___aldiv@counter
  9264  1724  0AAF               	incf	___aldiv@counter,f
  9265  1725                     l3249:	
  9266  1725  1BA9               	btfsc	___aldiv@divisor+3,7
  9267  1726  2F33               	goto	l3251
  9268  1727  3001               	movlw	1
  9269  1728                     u2565:	
  9270  1728  35A6               	lslf	___aldiv@divisor,f
  9271  1729  0DA7               	rlf	___aldiv@divisor+1,f
  9272  172A  0DA8               	rlf	___aldiv@divisor+2,f
  9273  172B  0DA9               	rlf	___aldiv@divisor+3,f
  9274  172C  0B89               	decfsz	9,f
  9275  172D  2F28               	goto	u2565
  9276  172E  3001               	movlw	1
  9277  172F  00AE               	movwf	??___aldiv
  9278  1730  082E               	movf	??___aldiv,w
  9279  1731  07AF               	addwf	___aldiv@counter,f
  9280  1732  2F25               	goto	l3249
  9281  1733                     l3251:	
  9282  1733  3001               	movlw	1
  9283  1734                     u2585:	
  9284  1734  35B1               	lslf	___aldiv@quotient,f
  9285  1735  0DB2               	rlf	___aldiv@quotient+1,f
  9286  1736  0DB3               	rlf	___aldiv@quotient+2,f
  9287  1737  0DB4               	rlf	___aldiv@quotient+3,f
  9288  1738  0B89               	decfsz	9,f
  9289  1739  2F34               	goto	u2585
  9290  173A  0829               	movf	___aldiv@divisor+3,w
  9291  173B  022D               	subwf	___aldiv@dividend+3,w
  9292  173C  1D03               	skipz
  9293  173D  2F48               	goto	u2595
  9294  173E  0828               	movf	___aldiv@divisor+2,w
  9295  173F  022C               	subwf	___aldiv@dividend+2,w
  9296  1740  1D03               	skipz
  9297  1741  2F48               	goto	u2595
  9298  1742  0827               	movf	___aldiv@divisor+1,w
  9299  1743  022B               	subwf	___aldiv@dividend+1,w
  9300  1744  1D03               	skipz
  9301  1745  2F48               	goto	u2595
  9302  1746  0826               	movf	___aldiv@divisor,w
  9303  1747  022A               	subwf	___aldiv@dividend,w
  9304  1748                     u2595:	
  9305  1748  1C03               	skipc
  9306  1749  2F53               	goto	l3259
  9307  174A  0826               	movf	___aldiv@divisor,w
  9308  174B  02AA               	subwf	___aldiv@dividend,f
  9309  174C  0827               	movf	___aldiv@divisor+1,w
  9310  174D  3BAB               	subwfb	___aldiv@dividend+1,f
  9311  174E  0828               	movf	___aldiv@divisor+2,w
  9312  174F  3BAC               	subwfb	___aldiv@dividend+2,f
  9313  1750  0829               	movf	___aldiv@divisor+3,w
  9314  1751  3BAD               	subwfb	___aldiv@dividend+3,f
  9315  1752  1431               	bsf	___aldiv@quotient,0
  9316  1753                     l3259:	
  9317  1753  3001               	movlw	1
  9318  1754                     u2605:	
  9319  1754  36A9               	lsrf	___aldiv@divisor+3,f
  9320  1755  0CA8               	rrf	___aldiv@divisor+2,f
  9321  1756  0CA7               	rrf	___aldiv@divisor+1,f
  9322  1757  0CA6               	rrf	___aldiv@divisor,f
  9323  1758  0B89               	decfsz	9,f
  9324  1759  2F54               	goto	u2605
  9325  175A  3001               	movlw	1
  9326  175B  02AF               	subwf	___aldiv@counter,f
  9327  175C  1D03               	btfss	3,2
  9328  175D  2F33               	goto	l3251
  9329  175E                     l3263:	
  9330  175E  0830               	movf	___aldiv@sign,w
  9331  175F  1903               	btfsc	3,2
  9332  1760  2F6C               	goto	l3267
  9333  1761  09B1               	comf	___aldiv@quotient,f
  9334  1762  09B2               	comf	___aldiv@quotient+1,f
  9335  1763  09B3               	comf	___aldiv@quotient+2,f
  9336  1764  09B4               	comf	___aldiv@quotient+3,f
  9337  1765  0AB1               	incf	___aldiv@quotient,f
  9338  1766  1903               	skipnz
  9339  1767  0AB2               	incf	___aldiv@quotient+1,f
  9340  1768  1903               	skipnz
  9341  1769  0AB3               	incf	___aldiv@quotient+2,f
  9342  176A  1903               	skipnz
  9343  176B  0AB4               	incf	___aldiv@quotient+3,f
  9344  176C                     l3267:	
  9345  176C  0834               	movf	___aldiv@quotient+3,w
  9346  176D  00A9               	movwf	?___aldiv+3
  9347  176E  0833               	movf	___aldiv@quotient+2,w
  9348  176F  00A8               	movwf	?___aldiv+2
  9349  1770  0832               	movf	___aldiv@quotient+1,w
  9350  1771  00A7               	movwf	?___aldiv+1
  9351  1772  0831               	movf	___aldiv@quotient,w
  9352  1773  00A6               	movwf	?___aldiv
  9353  1774  0008               	return
  9354  1775                     __end_of___aldiv:	
  9355                           
  9356                           	psect	text19
  9357  1775                     __ptext19:	
  9358 ;; *************** function _map *****************
  9359 ;; Defined at:
  9360 ;;		line 165 in file "user.c"
  9361 ;; Parameters:    Size  Location     Type
  9362 ;;  x               3   53[BANK0 ] float 
  9363 ;;  in_min          3   56[BANK0 ] float 
  9364 ;;  in_max          3   59[BANK0 ] float 
  9365 ;;  out_min         3   62[BANK0 ] float 
  9366 ;;  out_max         3   65[BANK0 ] float 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;		None
  9369 ;; Return value:  Size  Location     Type
  9370 ;;                  3   53[BANK0 ] float 
  9371 ;; Registers used:
  9372 ;;		wreg, status,2, status,0, pclath, cstack
  9373 ;; Tracked objects:
  9374 ;;		On entry : 0/0
  9375 ;;		On exit  : 0/0
  9376 ;;		Unchanged: 0/0
  9377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9378 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9379 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9381 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9382 ;;Total ram usage:       18 bytes
  9383 ;; Hardware stack levels used:    1
  9384 ;; Hardware stack levels required when called:    4
  9385 ;; This function calls:
  9386 ;;		___ftadd
  9387 ;;		___ftdiv
  9388 ;;		___ftmul
  9389 ;;		___ftneg
  9390 ;; This function is called by:
  9391 ;;		_main
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _map
  9397  1775                     _map:	
  9398                           
  9399                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9400                           
  9401                           ;incstack = 0
  9402                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9403  1775  0020               	movlb	0	; select bank0
  9404  1776  085B               	movf	map@in_max,w
  9405  1777  00A8               	movwf	___ftadd@f1
  9406  1778  085C               	movf	map@in_max+1,w
  9407  1779  00A9               	movwf	___ftadd@f1+1
  9408  177A  085D               	movf	map@in_max+2,w
  9409  177B  00AA               	movwf	___ftadd@f1+2
  9410  177C  0858               	movf	map@in_min,w
  9411  177D  00A0               	movwf	___ftneg@f1
  9412  177E  0859               	movf	map@in_min+1,w
  9413  177F  00A1               	movwf	___ftneg@f1+1
  9414  1780  085A               	movf	map@in_min+2,w
  9415  1781  00A2               	movwf	___ftneg@f1+2
  9416  1782  319E  26F2  3197   	fcall	___ftneg
  9417  1785  0020               	movlb	0	; select bank0
  9418  1786  0820               	movf	?___ftneg,w
  9419  1787  00AB               	movwf	___ftadd@f2
  9420  1788  0821               	movf	?___ftneg+1,w
  9421  1789  00AC               	movwf	___ftadd@f2+1
  9422  178A  0822               	movf	?___ftneg+2,w
  9423  178B  00AD               	movwf	___ftadd@f2+2
  9424  178C  318A  22AE  3197   	fcall	___ftadd
  9425  178F  0020               	movlb	0	; select bank0
  9426  1790  0828               	movf	?___ftadd,w
  9427  1791  00C5               	movwf	___ftdiv@f2
  9428  1792  0829               	movf	?___ftadd+1,w
  9429  1793  00C6               	movwf	___ftdiv@f2+1
  9430  1794  082A               	movf	?___ftadd+2,w
  9431  1795  00C7               	movwf	___ftdiv@f2+2
  9432  1796  0861               	movf	map@out_max,w
  9433  1797  00A8               	movwf	___ftadd@f1
  9434  1798  0862               	movf	map@out_max+1,w
  9435  1799  00A9               	movwf	___ftadd@f1+1
  9436  179A  0863               	movf	map@out_max+2,w
  9437  179B  00AA               	movwf	___ftadd@f1+2
  9438  179C  085E               	movf	map@out_min,w
  9439  179D  00A0               	movwf	___ftneg@f1
  9440  179E  085F               	movf	map@out_min+1,w
  9441  179F  00A1               	movwf	___ftneg@f1+1
  9442  17A0  0860               	movf	map@out_min+2,w
  9443  17A1  00A2               	movwf	___ftneg@f1+2
  9444  17A2  319E  26F2  3197   	fcall	___ftneg
  9445  17A5  0020               	movlb	0	; select bank0
  9446  17A6  0820               	movf	?___ftneg,w
  9447  17A7  00AB               	movwf	___ftadd@f2
  9448  17A8  0821               	movf	?___ftneg+1,w
  9449  17A9  00AC               	movwf	___ftadd@f2+1
  9450  17AA  0822               	movf	?___ftneg+2,w
  9451  17AB  00AD               	movwf	___ftadd@f2+2
  9452  17AC  318A  22AE  3197   	fcall	___ftadd
  9453  17AF  0020               	movlb	0	; select bank0
  9454  17B0  0828               	movf	?___ftadd,w
  9455  17B1  00B5               	movwf	___ftmul@f1
  9456  17B2  0829               	movf	?___ftadd+1,w
  9457  17B3  00B6               	movwf	___ftmul@f1+1
  9458  17B4  082A               	movf	?___ftadd+2,w
  9459  17B5  00B7               	movwf	___ftmul@f1+2
  9460  17B6  0855               	movf	map@x,w
  9461  17B7  00A8               	movwf	___ftadd@f1
  9462  17B8  0856               	movf	map@x+1,w
  9463  17B9  00A9               	movwf	___ftadd@f1+1
  9464  17BA  0857               	movf	map@x+2,w
  9465  17BB  00AA               	movwf	___ftadd@f1+2
  9466  17BC  0858               	movf	map@in_min,w
  9467  17BD  00A0               	movwf	___ftneg@f1
  9468  17BE  0859               	movf	map@in_min+1,w
  9469  17BF  00A1               	movwf	___ftneg@f1+1
  9470  17C0  085A               	movf	map@in_min+2,w
  9471  17C1  00A2               	movwf	___ftneg@f1+2
  9472  17C2  319E  26F2  3197   	fcall	___ftneg
  9473  17C5  0020               	movlb	0	; select bank0
  9474  17C6  0820               	movf	?___ftneg,w
  9475  17C7  00AB               	movwf	___ftadd@f2
  9476  17C8  0821               	movf	?___ftneg+1,w
  9477  17C9  00AC               	movwf	___ftadd@f2+1
  9478  17CA  0822               	movf	?___ftneg+2,w
  9479  17CB  00AD               	movwf	___ftadd@f2+2
  9480  17CC  318A  22AE  3197   	fcall	___ftadd
  9481  17CF  0020               	movlb	0	; select bank0
  9482  17D0  0828               	movf	?___ftadd,w
  9483  17D1  00B8               	movwf	___ftmul@f2
  9484  17D2  0829               	movf	?___ftadd+1,w
  9485  17D3  00B9               	movwf	___ftmul@f2+1
  9486  17D4  082A               	movf	?___ftadd+2,w
  9487  17D5  00BA               	movwf	___ftmul@f2+2
  9488  17D6  3189  21FA  3197   	fcall	___ftmul
  9489  17D9  0020               	movlb	0	; select bank0
  9490  17DA  0835               	movf	?___ftmul,w
  9491  17DB  00C8               	movwf	___ftdiv@f1
  9492  17DC  0836               	movf	?___ftmul+1,w
  9493  17DD  00C9               	movwf	___ftdiv@f1+1
  9494  17DE  0837               	movf	?___ftmul+2,w
  9495  17DF  00CA               	movwf	___ftdiv@f1+2
  9496  17E0  3188  20A1  3197   	fcall	___ftdiv
  9497  17E3  0020               	movlb	0	; select bank0
  9498  17E4  0845               	movf	?___ftdiv,w
  9499  17E5  00E4               	movwf	_map$1998
  9500  17E6  0846               	movf	?___ftdiv+1,w
  9501  17E7  00E5               	movwf	_map$1998+1
  9502  17E8  0847               	movf	?___ftdiv+2,w
  9503  17E9  00E6               	movwf	_map$1998+2
  9504                           
  9505                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9506  17EA  085E               	movf	map@out_min,w
  9507  17EB  00A8               	movwf	___ftadd@f1
  9508  17EC  085F               	movf	map@out_min+1,w
  9509  17ED  00A9               	movwf	___ftadd@f1+1
  9510  17EE  0860               	movf	map@out_min+2,w
  9511  17EF  00AA               	movwf	___ftadd@f1+2
  9512  17F0  0864               	movf	_map$1998,w
  9513  17F1  00AB               	movwf	___ftadd@f2
  9514  17F2  0865               	movf	_map$1998+1,w
  9515  17F3  00AC               	movwf	___ftadd@f2+1
  9516  17F4  0866               	movf	_map$1998+2,w
  9517  17F5  00AD               	movwf	___ftadd@f2+2
  9518  17F6  318A  22AE         	fcall	___ftadd
  9519  17F8  0020               	movlb	0	; select bank0
  9520  17F9  0828               	movf	?___ftadd,w
  9521  17FA  00D5               	movwf	?_map
  9522  17FB  0829               	movf	?___ftadd+1,w
  9523  17FC  00D6               	movwf	?_map+1
  9524  17FD  082A               	movf	?___ftadd+2,w
  9525  17FE  00D7               	movwf	?_map+2
  9526  17FF  0008               	return
  9527  1800                     __end_of_map:	
  9528                           
  9529                           	psect	text20
  9530  1EF2                     __ptext20:	
  9531 ;; *************** function ___ftneg *****************
  9532 ;; Defined at:
  9533 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;  f1              3    0[BANK0 ] float 
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;		None
  9538 ;; Return value:  Size  Location     Type
  9539 ;;                  3    0[BANK0 ] float 
  9540 ;; Registers used:
  9541 ;;		wreg
  9542 ;; Tracked objects:
  9543 ;;		On entry : 0/0
  9544 ;;		On exit  : 0/0
  9545 ;;		Unchanged: 0/0
  9546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9547 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9550 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9551 ;;Total ram usage:        3 bytes
  9552 ;; Hardware stack levels used:    1
  9553 ;; Hardware stack levels required when called:    2
  9554 ;; This function calls:
  9555 ;;		Nothing
  9556 ;; This function is called by:
  9557 ;;		_map
  9558 ;; This function uses a non-reentrant model
  9559 ;;
  9560                           
  9561                           
  9562                           ;psect for function ___ftneg
  9563  1EF2                     ___ftneg:	
  9564                           
  9565                           ;incstack = 0
  9566                           ; Regs used in ___ftneg: [wreg]
  9567  1EF2  0020               	movlb	0	; select bank0
  9568  1EF3  0822               	movf	___ftneg@f1+2,w
  9569  1EF4  0421               	iorwf	___ftneg@f1+1,w
  9570  1EF5  0420               	iorwf	___ftneg@f1,w
  9571  1EF6  1903               	skipnz
  9572  1EF7  0008               	return
  9573  1EF8  3080               	movlw	128
  9574  1EF9  06A2               	xorwf	___ftneg@f1+2,f
  9575  1EFA  0008               	return
  9576  1EFB                     __end_of___ftneg:	
  9577                           
  9578                           	psect	text21
  9579  09FA                     __ptext21:	
  9580 ;; *************** function ___ftmul *****************
  9581 ;; Defined at:
  9582 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;  f1              3   21[BANK0 ] float 
  9585 ;;  f2              3   24[BANK0 ] float 
  9586 ;; Auto vars:     Size  Location     Type
  9587 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  9588 ;;  sign            1   36[BANK0 ] unsigned char 
  9589 ;;  cntr            1   35[BANK0 ] unsigned char 
  9590 ;;  exp             1   31[BANK0 ] unsigned char 
  9591 ;; Return value:  Size  Location     Type
  9592 ;;                  3   21[BANK0 ] float 
  9593 ;; Registers used:
  9594 ;;		wreg, status,2, status,0, pclath, cstack
  9595 ;; Tracked objects:
  9596 ;;		On entry : 0/0
  9597 ;;		On exit  : 0/0
  9598 ;;		Unchanged: 0/0
  9599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9600 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9601 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9602 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9603 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9604 ;;Total ram usage:       16 bytes
  9605 ;; Hardware stack levels used:    1
  9606 ;; Hardware stack levels required when called:    3
  9607 ;; This function calls:
  9608 ;;		___ftpack
  9609 ;; This function is called by:
  9610 ;;		_set_subdivision
  9611 ;;		_map
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function ___ftmul
  9617  09FA                     ___ftmul:	
  9618                           
  9619                           ;incstack = 0
  9620                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9621  09FA  0020               	movlb	0	; select bank0
  9622  09FB  0835               	movf	___ftmul@f1,w
  9623  09FC  00BB               	movwf	??___ftmul
  9624  09FD  0836               	movf	___ftmul@f1+1,w
  9625  09FE  00BC               	movwf	??___ftmul+1
  9626  09FF  0837               	movf	___ftmul@f1+2,w
  9627  0A00  00BD               	movwf	??___ftmul+2
  9628  0A01  1003               	clrc
  9629  0A02  0D3C               	rlf	??___ftmul+1,w
  9630  0A03  0D3D               	rlf	??___ftmul+2,w
  9631  0A04  00BE               	movwf	??___ftmul+3
  9632  0A05  083E               	movf	??___ftmul+3,w
  9633  0A06  00BF               	movwf	___ftmul@exp
  9634  0A07  083F               	movf	___ftmul@exp,w
  9635  0A08  1D03               	btfss	3,2
  9636  0A09  2A11               	goto	l3401
  9637  0A0A  3000               	movlw	0
  9638  0A0B  00B5               	movwf	?___ftmul
  9639  0A0C  3000               	movlw	0
  9640  0A0D  00B6               	movwf	?___ftmul+1
  9641  0A0E  3000               	movlw	0
  9642  0A0F  00B7               	movwf	?___ftmul+2
  9643  0A10  0008               	return
  9644  0A11                     l3401:	
  9645  0A11  0838               	movf	___ftmul@f2,w
  9646  0A12  00BB               	movwf	??___ftmul
  9647  0A13  0839               	movf	___ftmul@f2+1,w
  9648  0A14  00BC               	movwf	??___ftmul+1
  9649  0A15  083A               	movf	___ftmul@f2+2,w
  9650  0A16  00BD               	movwf	??___ftmul+2
  9651  0A17  1003               	clrc
  9652  0A18  0D3C               	rlf	??___ftmul+1,w
  9653  0A19  0D3D               	rlf	??___ftmul+2,w
  9654  0A1A  00BE               	movwf	??___ftmul+3
  9655  0A1B  083E               	movf	??___ftmul+3,w
  9656  0A1C  00C4               	movwf	___ftmul@sign
  9657  0A1D  0844               	movf	___ftmul@sign,w
  9658  0A1E  1D03               	btfss	3,2
  9659  0A1F  2A27               	goto	l3407
  9660  0A20  3000               	movlw	0
  9661  0A21  00B5               	movwf	?___ftmul
  9662  0A22  3000               	movlw	0
  9663  0A23  00B6               	movwf	?___ftmul+1
  9664  0A24  3000               	movlw	0
  9665  0A25  00B7               	movwf	?___ftmul+2
  9666  0A26  0008               	return
  9667  0A27                     l3407:	
  9668  0A27  0844               	movf	___ftmul@sign,w
  9669  0A28  3E7B               	addlw	123
  9670  0A29  00BB               	movwf	??___ftmul
  9671  0A2A  083B               	movf	??___ftmul,w
  9672  0A2B  07BF               	addwf	___ftmul@exp,f
  9673  0A2C  0835               	movf	___ftmul@f1,w
  9674  0A2D  00BB               	movwf	??___ftmul
  9675  0A2E  0836               	movf	___ftmul@f1+1,w
  9676  0A2F  00BC               	movwf	??___ftmul+1
  9677  0A30  0837               	movf	___ftmul@f1+2,w
  9678  0A31  00BD               	movwf	??___ftmul+2
  9679  0A32  3010               	movlw	16
  9680  0A33                     u2975:	
  9681  0A33  36BD               	lsrf	??___ftmul+2,f
  9682  0A34  0CBC               	rrf	??___ftmul+1,f
  9683  0A35  0CBB               	rrf	??___ftmul,f
  9684  0A36  0B89               	decfsz	9,f
  9685  0A37  2A33               	goto	u2975
  9686  0A38  083B               	movf	??___ftmul,w
  9687  0A39  00BE               	movwf	??___ftmul+3
  9688  0A3A  083E               	movf	??___ftmul+3,w
  9689  0A3B  00C4               	movwf	___ftmul@sign
  9690  0A3C  0838               	movf	___ftmul@f2,w
  9691  0A3D  00BB               	movwf	??___ftmul
  9692  0A3E  0839               	movf	___ftmul@f2+1,w
  9693  0A3F  00BC               	movwf	??___ftmul+1
  9694  0A40  083A               	movf	___ftmul@f2+2,w
  9695  0A41  00BD               	movwf	??___ftmul+2
  9696  0A42  3010               	movlw	16
  9697  0A43                     u2985:	
  9698  0A43  36BD               	lsrf	??___ftmul+2,f
  9699  0A44  0CBC               	rrf	??___ftmul+1,f
  9700  0A45  0CBB               	rrf	??___ftmul,f
  9701  0A46  0B89               	decfsz	9,f
  9702  0A47  2A43               	goto	u2985
  9703  0A48  083B               	movf	??___ftmul,w
  9704  0A49  00BE               	movwf	??___ftmul+3
  9705  0A4A  083E               	movf	??___ftmul+3,w
  9706  0A4B  06C4               	xorwf	___ftmul@sign,f
  9707  0A4C  3080               	movlw	128
  9708  0A4D  00BB               	movwf	??___ftmul
  9709  0A4E  083B               	movf	??___ftmul,w
  9710  0A4F  05C4               	andwf	___ftmul@sign,f
  9711  0A50  17B6               	bsf	___ftmul@f1+1,7
  9712  0A51  17B9               	bsf	___ftmul@f2+1,7
  9713  0A52  30FF               	movlw	255
  9714  0A53  05B8               	andwf	___ftmul@f2,f
  9715  0A54  30FF               	movlw	255
  9716  0A55  05B9               	andwf	___ftmul@f2+1,f
  9717  0A56  3000               	movlw	0
  9718  0A57  05BA               	andwf	___ftmul@f2+2,f
  9719  0A58  3000               	movlw	0
  9720  0A59  00C0               	movwf	___ftmul@f3_as_product
  9721  0A5A  3000               	movlw	0
  9722  0A5B  00C1               	movwf	___ftmul@f3_as_product+1
  9723  0A5C  3000               	movlw	0
  9724  0A5D  00C2               	movwf	___ftmul@f3_as_product+2
  9725  0A5E  3007               	movlw	7
  9726  0A5F  00BB               	movwf	??___ftmul
  9727  0A60  083B               	movf	??___ftmul,w
  9728  0A61  00C3               	movwf	___ftmul@cntr
  9729  0A62                     l3419:	
  9730  0A62  1C35               	btfss	___ftmul@f1,0
  9731  0A63  2A6A               	goto	l3423
  9732  0A64  0838               	movf	___ftmul@f2,w
  9733  0A65  07C0               	addwf	___ftmul@f3_as_product,f
  9734  0A66  0839               	movf	___ftmul@f2+1,w
  9735  0A67  3DC1               	addwfc	___ftmul@f3_as_product+1,f
  9736  0A68  083A               	movf	___ftmul@f2+2,w
  9737  0A69  3DC2               	addwfc	___ftmul@f3_as_product+2,f
  9738  0A6A                     l3423:	
  9739  0A6A  3001               	movlw	1
  9740  0A6B                     u3005:	
  9741  0A6B  36B7               	lsrf	___ftmul@f1+2,f
  9742  0A6C  0CB6               	rrf	___ftmul@f1+1,f
  9743  0A6D  0CB5               	rrf	___ftmul@f1,f
  9744  0A6E  0B89               	decfsz	9,f
  9745  0A6F  2A6B               	goto	u3005
  9746  0A70  3001               	movlw	1
  9747  0A71                     u3015:	
  9748  0A71  35B8               	lslf	___ftmul@f2,f
  9749  0A72  0DB9               	rlf	___ftmul@f2+1,f
  9750  0A73  0DBA               	rlf	___ftmul@f2+2,f
  9751  0A74  0B89               	decfsz	9,f
  9752  0A75  2A71               	goto	u3015
  9753  0A76  3001               	movlw	1
  9754  0A77  02C3               	subwf	___ftmul@cntr,f
  9755  0A78  1D03               	btfss	3,2
  9756  0A79  2A62               	goto	l3419
  9757  0A7A  3009               	movlw	9
  9758  0A7B  00BB               	movwf	??___ftmul
  9759  0A7C  083B               	movf	??___ftmul,w
  9760  0A7D  00C3               	movwf	___ftmul@cntr
  9761  0A7E                     l3431:	
  9762  0A7E  1C35               	btfss	___ftmul@f1,0
  9763  0A7F  2A86               	goto	l3435
  9764  0A80  0838               	movf	___ftmul@f2,w
  9765  0A81  07C0               	addwf	___ftmul@f3_as_product,f
  9766  0A82  0839               	movf	___ftmul@f2+1,w
  9767  0A83  3DC1               	addwfc	___ftmul@f3_as_product+1,f
  9768  0A84  083A               	movf	___ftmul@f2+2,w
  9769  0A85  3DC2               	addwfc	___ftmul@f3_as_product+2,f
  9770  0A86                     l3435:	
  9771  0A86  3001               	movlw	1
  9772  0A87                     u3045:	
  9773  0A87  36B7               	lsrf	___ftmul@f1+2,f
  9774  0A88  0CB6               	rrf	___ftmul@f1+1,f
  9775  0A89  0CB5               	rrf	___ftmul@f1,f
  9776  0A8A  0B89               	decfsz	9,f
  9777  0A8B  2A87               	goto	u3045
  9778  0A8C  3001               	movlw	1
  9779  0A8D                     u3055:	
  9780  0A8D  36C2               	lsrf	___ftmul@f3_as_product+2,f
  9781  0A8E  0CC1               	rrf	___ftmul@f3_as_product+1,f
  9782  0A8F  0CC0               	rrf	___ftmul@f3_as_product,f
  9783  0A90  0B89               	decfsz	9,f
  9784  0A91  2A8D               	goto	u3055
  9785  0A92  3001               	movlw	1
  9786  0A93  02C3               	subwf	___ftmul@cntr,f
  9787  0A94  1D03               	btfss	3,2
  9788  0A95  2A7E               	goto	l3431
  9789  0A96  0840               	movf	___ftmul@f3_as_product,w
  9790  0A97  00A0               	movwf	___ftpack@arg
  9791  0A98  0841               	movf	___ftmul@f3_as_product+1,w
  9792  0A99  00A1               	movwf	___ftpack@arg+1
  9793  0A9A  0842               	movf	___ftmul@f3_as_product+2,w
  9794  0A9B  00A2               	movwf	___ftpack@arg+2
  9795  0A9C  083F               	movf	___ftmul@exp,w
  9796  0A9D  00BB               	movwf	??___ftmul
  9797  0A9E  083B               	movf	??___ftmul,w
  9798  0A9F  00A3               	movwf	___ftpack@exp
  9799  0AA0  0844               	movf	___ftmul@sign,w
  9800  0AA1  00BC               	movwf	??___ftmul+1
  9801  0AA2  083C               	movf	??___ftmul+1,w
  9802  0AA3  00A4               	movwf	___ftpack@sign
  9803  0AA4  3196  261F         	fcall	___ftpack
  9804  0AA6  0020               	movlb	0	; select bank0
  9805  0AA7  0820               	movf	?___ftpack,w
  9806  0AA8  00B5               	movwf	?___ftmul
  9807  0AA9  0821               	movf	?___ftpack+1,w
  9808  0AAA  00B6               	movwf	?___ftmul+1
  9809  0AAB  0822               	movf	?___ftpack+2,w
  9810  0AAC  00B7               	movwf	?___ftmul+2
  9811  0AAD  0008               	return
  9812  0AAE                     __end_of___ftmul:	
  9813                           
  9814                           	psect	text22
  9815  08A1                     __ptext22:	
  9816 ;; *************** function ___ftdiv *****************
  9817 ;; Defined at:
  9818 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;  f2              3   37[BANK0 ] float 
  9821 ;;  f1              3   40[BANK0 ] float 
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;  f3              3   48[BANK0 ] float 
  9824 ;;  sign            1   52[BANK0 ] unsigned char 
  9825 ;;  exp             1   51[BANK0 ] unsigned char 
  9826 ;;  cntr            1   47[BANK0 ] unsigned char 
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  3   37[BANK0 ] float 
  9829 ;; Registers used:
  9830 ;;		wreg, status,2, status,0, pclath, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9836 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9837 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9838 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9839 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9840 ;;Total ram usage:       16 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    3
  9843 ;; This function calls:
  9844 ;;		___ftpack
  9845 ;; This function is called by:
  9846 ;;		_main
  9847 ;;		_map
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function ___ftdiv
  9853  08A1                     ___ftdiv:	
  9854                           
  9855                           ;incstack = 0
  9856                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9857  08A1  0020               	movlb	0	; select bank0
  9858  08A2  0848               	movf	___ftdiv@f1,w
  9859  08A3  00CB               	movwf	??___ftdiv
  9860  08A4  0849               	movf	___ftdiv@f1+1,w
  9861  08A5  00CC               	movwf	??___ftdiv+1
  9862  08A6  084A               	movf	___ftdiv@f1+2,w
  9863  08A7  00CD               	movwf	??___ftdiv+2
  9864  08A8  1003               	clrc
  9865  08A9  0D4C               	rlf	??___ftdiv+1,w
  9866  08AA  0D4D               	rlf	??___ftdiv+2,w
  9867  08AB  00CE               	movwf	??___ftdiv+3
  9868  08AC  084E               	movf	??___ftdiv+3,w
  9869  08AD  00D3               	movwf	___ftdiv@exp
  9870  08AE  0853               	movf	___ftdiv@exp,w
  9871  08AF  1D03               	btfss	3,2
  9872  08B0  28B8               	goto	l3359
  9873  08B1  3000               	movlw	0
  9874  08B2  00C5               	movwf	?___ftdiv
  9875  08B3  3000               	movlw	0
  9876  08B4  00C6               	movwf	?___ftdiv+1
  9877  08B5  3000               	movlw	0
  9878  08B6  00C7               	movwf	?___ftdiv+2
  9879  08B7  0008               	return
  9880  08B8                     l3359:	
  9881  08B8  0845               	movf	___ftdiv@f2,w
  9882  08B9  00CB               	movwf	??___ftdiv
  9883  08BA  0846               	movf	___ftdiv@f2+1,w
  9884  08BB  00CC               	movwf	??___ftdiv+1
  9885  08BC  0847               	movf	___ftdiv@f2+2,w
  9886  08BD  00CD               	movwf	??___ftdiv+2
  9887  08BE  1003               	clrc
  9888  08BF  0D4C               	rlf	??___ftdiv+1,w
  9889  08C0  0D4D               	rlf	??___ftdiv+2,w
  9890  08C1  00CE               	movwf	??___ftdiv+3
  9891  08C2  084E               	movf	??___ftdiv+3,w
  9892  08C3  00D4               	movwf	___ftdiv@sign
  9893  08C4  0854               	movf	___ftdiv@sign,w
  9894  08C5  1D03               	btfss	3,2
  9895  08C6  28CE               	goto	l3365
  9896  08C7  3000               	movlw	0
  9897  08C8  00C5               	movwf	?___ftdiv
  9898  08C9  3000               	movlw	0
  9899  08CA  00C6               	movwf	?___ftdiv+1
  9900  08CB  3000               	movlw	0
  9901  08CC  00C7               	movwf	?___ftdiv+2
  9902  08CD  0008               	return
  9903  08CE                     l3365:	
  9904  08CE  3000               	movlw	0
  9905  08CF  00D0               	movwf	___ftdiv@f3
  9906  08D0  3000               	movlw	0
  9907  08D1  00D1               	movwf	___ftdiv@f3+1
  9908  08D2  3000               	movlw	0
  9909  08D3  00D2               	movwf	___ftdiv@f3+2
  9910  08D4  3089               	movlw	137
  9911  08D5  0754               	addwf	___ftdiv@sign,w
  9912  08D6  00CB               	movwf	??___ftdiv
  9913  08D7  084B               	movf	??___ftdiv,w
  9914  08D8  02D3               	subwf	___ftdiv@exp,f
  9915  08D9  0848               	movf	___ftdiv@f1,w
  9916  08DA  00CB               	movwf	??___ftdiv
  9917  08DB  0849               	movf	___ftdiv@f1+1,w
  9918  08DC  00CC               	movwf	??___ftdiv+1
  9919  08DD  084A               	movf	___ftdiv@f1+2,w
  9920  08DE  00CD               	movwf	??___ftdiv+2
  9921  08DF  3010               	movlw	16
  9922  08E0                     u2895:	
  9923  08E0  36CD               	lsrf	??___ftdiv+2,f
  9924  08E1  0CCC               	rrf	??___ftdiv+1,f
  9925  08E2  0CCB               	rrf	??___ftdiv,f
  9926  08E3  0B89               	decfsz	9,f
  9927  08E4  28E0               	goto	u2895
  9928  08E5  084B               	movf	??___ftdiv,w
  9929  08E6  00CE               	movwf	??___ftdiv+3
  9930  08E7  084E               	movf	??___ftdiv+3,w
  9931  08E8  00D4               	movwf	___ftdiv@sign
  9932  08E9  0845               	movf	___ftdiv@f2,w
  9933  08EA  00CB               	movwf	??___ftdiv
  9934  08EB  0846               	movf	___ftdiv@f2+1,w
  9935  08EC  00CC               	movwf	??___ftdiv+1
  9936  08ED  0847               	movf	___ftdiv@f2+2,w
  9937  08EE  00CD               	movwf	??___ftdiv+2
  9938  08EF  3010               	movlw	16
  9939  08F0                     u2905:	
  9940  08F0  36CD               	lsrf	??___ftdiv+2,f
  9941  08F1  0CCC               	rrf	??___ftdiv+1,f
  9942  08F2  0CCB               	rrf	??___ftdiv,f
  9943  08F3  0B89               	decfsz	9,f
  9944  08F4  28F0               	goto	u2905
  9945  08F5  084B               	movf	??___ftdiv,w
  9946  08F6  00CE               	movwf	??___ftdiv+3
  9947  08F7  084E               	movf	??___ftdiv+3,w
  9948  08F8  06D4               	xorwf	___ftdiv@sign,f
  9949  08F9  3080               	movlw	128
  9950  08FA  00CB               	movwf	??___ftdiv
  9951  08FB  084B               	movf	??___ftdiv,w
  9952  08FC  05D4               	andwf	___ftdiv@sign,f
  9953  08FD  17C9               	bsf	___ftdiv@f1+1,7
  9954  08FE  30FF               	movlw	255
  9955  08FF  05C8               	andwf	___ftdiv@f1,f
  9956  0900  30FF               	movlw	255
  9957  0901  05C9               	andwf	___ftdiv@f1+1,f
  9958  0902  3000               	movlw	0
  9959  0903  05CA               	andwf	___ftdiv@f1+2,f
  9960  0904  17C6               	bsf	___ftdiv@f2+1,7
  9961  0905  30FF               	movlw	255
  9962  0906  05C5               	andwf	___ftdiv@f2,f
  9963  0907  30FF               	movlw	255
  9964  0908  05C6               	andwf	___ftdiv@f2+1,f
  9965  0909  3000               	movlw	0
  9966  090A  05C7               	andwf	___ftdiv@f2+2,f
  9967  090B  3018               	movlw	24
  9968  090C  00CB               	movwf	??___ftdiv
  9969  090D  084B               	movf	??___ftdiv,w
  9970  090E  00CF               	movwf	___ftdiv@cntr
  9971  090F                     l3379:	
  9972  090F  3001               	movlw	1
  9973  0910                     u2915:	
  9974  0910  35D0               	lslf	___ftdiv@f3,f
  9975  0911  0DD1               	rlf	___ftdiv@f3+1,f
  9976  0912  0DD2               	rlf	___ftdiv@f3+2,f
  9977  0913  0B89               	decfsz	9,f
  9978  0914  2910               	goto	u2915
  9979  0915  0847               	movf	___ftdiv@f2+2,w
  9980  0916  024A               	subwf	___ftdiv@f1+2,w
  9981  0917  1D03               	skipz
  9982  0918  291F               	goto	u2925
  9983  0919  0846               	movf	___ftdiv@f2+1,w
  9984  091A  0249               	subwf	___ftdiv@f1+1,w
  9985  091B  1D03               	skipz
  9986  091C  291F               	goto	u2925
  9987  091D  0845               	movf	___ftdiv@f2,w
  9988  091E  0248               	subwf	___ftdiv@f1,w
  9989  091F                     u2925:	
  9990  091F  1C03               	skipc
  9991  0920  2928               	goto	l3387
  9992  0921  0845               	movf	___ftdiv@f2,w
  9993  0922  02C8               	subwf	___ftdiv@f1,f
  9994  0923  0846               	movf	___ftdiv@f2+1,w
  9995  0924  3BC9               	subwfb	___ftdiv@f1+1,f
  9996  0925  0847               	movf	___ftdiv@f2+2,w
  9997  0926  3BCA               	subwfb	___ftdiv@f1+2,f
  9998  0927  1450               	bsf	___ftdiv@f3,0
  9999  0928                     l3387:	
 10000  0928  3001               	movlw	1
 10001  0929                     u2935:	
 10002  0929  35C8               	lslf	___ftdiv@f1,f
 10003  092A  0DC9               	rlf	___ftdiv@f1+1,f
 10004  092B  0DCA               	rlf	___ftdiv@f1+2,f
 10005  092C  0B89               	decfsz	9,f
 10006  092D  2929               	goto	u2935
 10007  092E  3001               	movlw	1
 10008  092F  02CF               	subwf	___ftdiv@cntr,f
 10009  0930  1D03               	btfss	3,2
 10010  0931  290F               	goto	l3379
 10011  0932  0850               	movf	___ftdiv@f3,w
 10012  0933  00A0               	movwf	___ftpack@arg
 10013  0934  0851               	movf	___ftdiv@f3+1,w
 10014  0935  00A1               	movwf	___ftpack@arg+1
 10015  0936  0852               	movf	___ftdiv@f3+2,w
 10016  0937  00A2               	movwf	___ftpack@arg+2
 10017  0938  0853               	movf	___ftdiv@exp,w
 10018  0939  00CB               	movwf	??___ftdiv
 10019  093A  084B               	movf	??___ftdiv,w
 10020  093B  00A3               	movwf	___ftpack@exp
 10021  093C  0854               	movf	___ftdiv@sign,w
 10022  093D  00CC               	movwf	??___ftdiv+1
 10023  093E  084C               	movf	??___ftdiv+1,w
 10024  093F  00A4               	movwf	___ftpack@sign
 10025  0940  3196  261F         	fcall	___ftpack
 10026  0942  0020               	movlb	0	; select bank0
 10027  0943  0820               	movf	?___ftpack,w
 10028  0944  00C5               	movwf	?___ftdiv
 10029  0945  0821               	movf	?___ftpack+1,w
 10030  0946  00C6               	movwf	?___ftdiv+1
 10031  0947  0822               	movf	?___ftpack+2,w
 10032  0948  00C7               	movwf	?___ftdiv+2
 10033  0949  0008               	return
 10034  094A                     __end_of___ftdiv:	
 10035                           
 10036                           	psect	text23
 10037  0AAE                     __ptext23:	
 10038 ;; *************** function ___ftadd *****************
 10039 ;; Defined at:
 10040 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10041 ;; Parameters:    Size  Location     Type
 10042 ;;  f1              3    8[BANK0 ] float 
 10043 ;;  f2              3   11[BANK0 ] float 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;  exp1            1   20[BANK0 ] unsigned char 
 10046 ;;  exp2            1   19[BANK0 ] unsigned char 
 10047 ;;  sign            1   18[BANK0 ] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  3    8[BANK0 ] float 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0, pclath, cstack
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10057 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10058 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10059 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10060 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10061 ;;Total ram usage:       13 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    3
 10064 ;; This function calls:
 10065 ;;		___ftpack
 10066 ;; This function is called by:
 10067 ;;		_map
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           
 10072                           ;psect for function ___ftadd
 10073  0AAE                     ___ftadd:	
 10074                           
 10075                           ;incstack = 0
 10076                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10077  0AAE  0020               	movlb	0	; select bank0
 10078  0AAF  0828               	movf	___ftadd@f1,w
 10079  0AB0  00AE               	movwf	??___ftadd
 10080  0AB1  0829               	movf	___ftadd@f1+1,w
 10081  0AB2  00AF               	movwf	??___ftadd+1
 10082  0AB3  082A               	movf	___ftadd@f1+2,w
 10083  0AB4  00B0               	movwf	??___ftadd+2
 10084  0AB5  1003               	clrc
 10085  0AB6  0D2F               	rlf	??___ftadd+1,w
 10086  0AB7  0D30               	rlf	??___ftadd+2,w
 10087  0AB8  00B1               	movwf	??___ftadd+3
 10088  0AB9  0831               	movf	??___ftadd+3,w
 10089  0ABA  00B4               	movwf	___ftadd@exp1
 10090  0ABB  082B               	movf	___ftadd@f2,w
 10091  0ABC  00AE               	movwf	??___ftadd
 10092  0ABD  082C               	movf	___ftadd@f2+1,w
 10093  0ABE  00AF               	movwf	??___ftadd+1
 10094  0ABF  082D               	movf	___ftadd@f2+2,w
 10095  0AC0  00B0               	movwf	??___ftadd+2
 10096  0AC1  1003               	clrc
 10097  0AC2  0D2F               	rlf	??___ftadd+1,w
 10098  0AC3  0D30               	rlf	??___ftadd+2,w
 10099  0AC4  00B1               	movwf	??___ftadd+3
 10100  0AC5  0831               	movf	??___ftadd+3,w
 10101  0AC6  00B3               	movwf	___ftadd@exp2
 10102  0AC7  0834               	movf	___ftadd@exp1,w
 10103  0AC8  1903               	btfsc	3,2
 10104  0AC9  2AD6               	goto	l3289
 10105  0ACA  0833               	movf	___ftadd@exp2,w
 10106  0ACB  0234               	subwf	___ftadd@exp1,w
 10107  0ACC  1803               	skipnc
 10108  0ACD  2ADD               	goto	l3293
 10109  0ACE  0334               	decf	___ftadd@exp1,w
 10110  0ACF  3AFF               	xorlw	255
 10111  0AD0  0733               	addwf	___ftadd@exp2,w
 10112  0AD1  00AE               	movwf	??___ftadd
 10113  0AD2  3019               	movlw	25
 10114  0AD3  022E               	subwf	??___ftadd,w
 10115  0AD4  1C03               	skipc
 10116  0AD5  2ADD               	goto	l3293
 10117  0AD6                     l3289:	
 10118  0AD6  082B               	movf	___ftadd@f2,w
 10119  0AD7  00A8               	movwf	?___ftadd
 10120  0AD8  082C               	movf	___ftadd@f2+1,w
 10121  0AD9  00A9               	movwf	?___ftadd+1
 10122  0ADA  082D               	movf	___ftadd@f2+2,w
 10123  0ADB  00AA               	movwf	?___ftadd+2
 10124  0ADC  0008               	return
 10125  0ADD                     l3293:	
 10126  0ADD  0833               	movf	___ftadd@exp2,w
 10127  0ADE  1903               	btfsc	3,2
 10128  0ADF  0008               	return
 10129  0AE0  0834               	movf	___ftadd@exp1,w
 10130  0AE1  0233               	subwf	___ftadd@exp2,w
 10131  0AE2  1803               	skipnc
 10132  0AE3  2AEC               	goto	l3299
 10133  0AE4  0333               	decf	___ftadd@exp2,w
 10134  0AE5  3AFF               	xorlw	255
 10135  0AE6  0734               	addwf	___ftadd@exp1,w
 10136  0AE7  00AE               	movwf	??___ftadd
 10137  0AE8  3019               	movlw	25
 10138  0AE9  022E               	subwf	??___ftadd,w
 10139  0AEA  1803               	btfsc	3,0
 10140  0AEB  0008               	return
 10141  0AEC                     l3299:	
 10142  0AEC  3006               	movlw	6
 10143  0AED  00AE               	movwf	??___ftadd
 10144  0AEE  082E               	movf	??___ftadd,w
 10145  0AEF  00B2               	movwf	___ftadd@sign
 10146  0AF0  1BAA               	btfsc	___ftadd@f1+2,7
 10147  0AF1  17B2               	bsf	___ftadd@sign,7
 10148  0AF2  1BAD               	btfsc	___ftadd@f2+2,7
 10149  0AF3  1732               	bsf	___ftadd@sign,6
 10150  0AF4  17A9               	bsf	___ftadd@f1+1,7
 10151  0AF5  30FF               	movlw	255
 10152  0AF6  05A8               	andwf	___ftadd@f1,f
 10153  0AF7  30FF               	movlw	255
 10154  0AF8  05A9               	andwf	___ftadd@f1+1,f
 10155  0AF9  3000               	movlw	0
 10156  0AFA  05AA               	andwf	___ftadd@f1+2,f
 10157  0AFB  17AC               	bsf	___ftadd@f2+1,7
 10158  0AFC  30FF               	movlw	255
 10159  0AFD  05AB               	andwf	___ftadd@f2,f
 10160  0AFE  30FF               	movlw	255
 10161  0AFF  05AC               	andwf	___ftadd@f2+1,f
 10162  0B00  3000               	movlw	0
 10163  0B01  05AD               	andwf	___ftadd@f2+2,f
 10164  0B02  0833               	movf	___ftadd@exp2,w
 10165  0B03  0234               	subwf	___ftadd@exp1,w
 10166  0B04  1803               	skipnc
 10167  0B05  2B28               	goto	l3321
 10168  0B06                     l3311:	
 10169  0B06  3001               	movlw	1
 10170  0B07                     u2735:	
 10171  0B07  35AB               	lslf	___ftadd@f2,f
 10172  0B08  0DAC               	rlf	___ftadd@f2+1,f
 10173  0B09  0DAD               	rlf	___ftadd@f2+2,f
 10174  0B0A  0B89               	decfsz	9,f
 10175  0B0B  2B07               	goto	u2735
 10176  0B0C  3001               	movlw	1
 10177  0B0D  02B3               	subwf	___ftadd@exp2,f
 10178  0B0E  0833               	movf	___ftadd@exp2,w
 10179  0B0F  0634               	xorwf	___ftadd@exp1,w
 10180  0B10  1903               	skipnz
 10181  0B11  2B23               	goto	l3319
 10182  0B12  3001               	movlw	1
 10183  0B13  02B2               	subwf	___ftadd@sign,f
 10184  0B14  0832               	movf	___ftadd@sign,w
 10185  0B15  3907               	andlw	7
 10186  0B16  1903               	btfsc	3,2
 10187  0B17  2B23               	goto	l3319
 10188  0B18  2B06               	goto	l3311
 10189  0B19                     l3317:	
 10190  0B19  3001               	movlw	1
 10191  0B1A                     u2765:	
 10192  0B1A  36AA               	lsrf	___ftadd@f1+2,f
 10193  0B1B  0CA9               	rrf	___ftadd@f1+1,f
 10194  0B1C  0CA8               	rrf	___ftadd@f1,f
 10195  0B1D  0B89               	decfsz	9,f
 10196  0B1E  2B1A               	goto	u2765
 10197  0B1F  3001               	movlw	1
 10198  0B20  00AE               	movwf	??___ftadd
 10199  0B21  082E               	movf	??___ftadd,w
 10200  0B22  07B4               	addwf	___ftadd@exp1,f
 10201  0B23                     l3319:	
 10202  0B23  0834               	movf	___ftadd@exp1,w
 10203  0B24  0633               	xorwf	___ftadd@exp2,w
 10204  0B25  1903               	btfsc	3,2
 10205  0B26  2B4D               	goto	l1281
 10206  0B27  2B19               	goto	l3317
 10207  0B28                     l3321:	
 10208  0B28  0834               	movf	___ftadd@exp1,w
 10209  0B29  0233               	subwf	___ftadd@exp2,w
 10210  0B2A  1803               	skipnc
 10211  0B2B  2B4D               	goto	l1281
 10212  0B2C                     l3323:	
 10213  0B2C  3001               	movlw	1
 10214  0B2D                     u2795:	
 10215  0B2D  35A8               	lslf	___ftadd@f1,f
 10216  0B2E  0DA9               	rlf	___ftadd@f1+1,f
 10217  0B2F  0DAA               	rlf	___ftadd@f1+2,f
 10218  0B30  0B89               	decfsz	9,f
 10219  0B31  2B2D               	goto	u2795
 10220  0B32  3001               	movlw	1
 10221  0B33  02B4               	subwf	___ftadd@exp1,f
 10222  0B34  0833               	movf	___ftadd@exp2,w
 10223  0B35  0634               	xorwf	___ftadd@exp1,w
 10224  0B36  1903               	skipnz
 10225  0B37  2B49               	goto	l3331
 10226  0B38  3001               	movlw	1
 10227  0B39  02B2               	subwf	___ftadd@sign,f
 10228  0B3A  0832               	movf	___ftadd@sign,w
 10229  0B3B  3907               	andlw	7
 10230  0B3C  1903               	btfsc	3,2
 10231  0B3D  2B49               	goto	l3331
 10232  0B3E  2B2C               	goto	l3323
 10233  0B3F                     l3329:	
 10234  0B3F  3001               	movlw	1
 10235  0B40                     u2825:	
 10236  0B40  36AD               	lsrf	___ftadd@f2+2,f
 10237  0B41  0CAC               	rrf	___ftadd@f2+1,f
 10238  0B42  0CAB               	rrf	___ftadd@f2,f
 10239  0B43  0B89               	decfsz	9,f
 10240  0B44  2B40               	goto	u2825
 10241  0B45  3001               	movlw	1
 10242  0B46  00AE               	movwf	??___ftadd
 10243  0B47  082E               	movf	??___ftadd,w
 10244  0B48  07B3               	addwf	___ftadd@exp2,f
 10245  0B49                     l3331:	
 10246  0B49  0834               	movf	___ftadd@exp1,w
 10247  0B4A  0633               	xorwf	___ftadd@exp2,w
 10248  0B4B  1D03               	skipz
 10249  0B4C  2B3F               	goto	l3329
 10250  0B4D                     l1281:	
 10251  0B4D  1FB2               	btfss	___ftadd@sign,7
 10252  0B4E  2B5F               	goto	l3335
 10253  0B4F  30FF               	movlw	255
 10254  0B50  06A8               	xorwf	___ftadd@f1,f
 10255  0B51  30FF               	movlw	255
 10256  0B52  06A9               	xorwf	___ftadd@f1+1,f
 10257  0B53  30FF               	movlw	255
 10258  0B54  06AA               	xorwf	___ftadd@f1+2,f
 10259  0B55  3001               	movlw	1
 10260  0B56  07A8               	addwf	___ftadd@f1,f
 10261  0B57  3000               	movlw	0
 10262  0B58  1803               	skipnc
 10263  0B59  3001               	movlw	1
 10264  0B5A  07A9               	addwf	___ftadd@f1+1,f
 10265  0B5B  3000               	movlw	0
 10266  0B5C  1803               	skipnc
 10267  0B5D  3001               	movlw	1
 10268  0B5E  07AA               	addwf	___ftadd@f1+2,f
 10269  0B5F                     l3335:	
 10270  0B5F  1F32               	btfss	___ftadd@sign,6
 10271  0B60  2B71               	goto	l3339
 10272  0B61  30FF               	movlw	255
 10273  0B62  06AB               	xorwf	___ftadd@f2,f
 10274  0B63  30FF               	movlw	255
 10275  0B64  06AC               	xorwf	___ftadd@f2+1,f
 10276  0B65  30FF               	movlw	255
 10277  0B66  06AD               	xorwf	___ftadd@f2+2,f
 10278  0B67  3001               	movlw	1
 10279  0B68  07AB               	addwf	___ftadd@f2,f
 10280  0B69  3000               	movlw	0
 10281  0B6A  1803               	skipnc
 10282  0B6B  3001               	movlw	1
 10283  0B6C  07AC               	addwf	___ftadd@f2+1,f
 10284  0B6D  3000               	movlw	0
 10285  0B6E  1803               	skipnc
 10286  0B6F  3001               	movlw	1
 10287  0B70  07AD               	addwf	___ftadd@f2+2,f
 10288  0B71                     l3339:	
 10289  0B71  01B2               	clrf	___ftadd@sign
 10290  0B72  0828               	movf	___ftadd@f1,w
 10291  0B73  07AB               	addwf	___ftadd@f2,f
 10292  0B74  0829               	movf	___ftadd@f1+1,w
 10293  0B75  3DAC               	addwfc	___ftadd@f2+1,f
 10294  0B76  082A               	movf	___ftadd@f1+2,w
 10295  0B77  3DAD               	addwfc	___ftadd@f2+2,f
 10296  0B78  1FAD               	btfss	___ftadd@f2+2,7
 10297  0B79  2B8C               	goto	l3349
 10298  0B7A  30FF               	movlw	255
 10299  0B7B  06AB               	xorwf	___ftadd@f2,f
 10300  0B7C  30FF               	movlw	255
 10301  0B7D  06AC               	xorwf	___ftadd@f2+1,f
 10302  0B7E  30FF               	movlw	255
 10303  0B7F  06AD               	xorwf	___ftadd@f2+2,f
 10304  0B80  3001               	movlw	1
 10305  0B81  07AB               	addwf	___ftadd@f2,f
 10306  0B82  3000               	movlw	0
 10307  0B83  1803               	skipnc
 10308  0B84  3001               	movlw	1
 10309  0B85  07AC               	addwf	___ftadd@f2+1,f
 10310  0B86  3000               	movlw	0
 10311  0B87  1803               	skipnc
 10312  0B88  3001               	movlw	1
 10313  0B89  07AD               	addwf	___ftadd@f2+2,f
 10314  0B8A  01B2               	clrf	___ftadd@sign
 10315  0B8B  0AB2               	incf	___ftadd@sign,f
 10316  0B8C                     l3349:	
 10317  0B8C  082B               	movf	___ftadd@f2,w
 10318  0B8D  00A0               	movwf	___ftpack@arg
 10319  0B8E  082C               	movf	___ftadd@f2+1,w
 10320  0B8F  00A1               	movwf	___ftpack@arg+1
 10321  0B90  082D               	movf	___ftadd@f2+2,w
 10322  0B91  00A2               	movwf	___ftpack@arg+2
 10323  0B92  0834               	movf	___ftadd@exp1,w
 10324  0B93  00AE               	movwf	??___ftadd
 10325  0B94  082E               	movf	??___ftadd,w
 10326  0B95  00A3               	movwf	___ftpack@exp
 10327  0B96  0832               	movf	___ftadd@sign,w
 10328  0B97  00AF               	movwf	??___ftadd+1
 10329  0B98  082F               	movf	??___ftadd+1,w
 10330  0B99  00A4               	movwf	___ftpack@sign
 10331  0B9A  3196  261F         	fcall	___ftpack
 10332  0B9C  0020               	movlb	0	; select bank0
 10333  0B9D  0820               	movf	?___ftpack,w
 10334  0B9E  00A8               	movwf	?___ftadd
 10335  0B9F  0821               	movf	?___ftpack+1,w
 10336  0BA0  00A9               	movwf	?___ftadd+1
 10337  0BA1  0822               	movf	?___ftpack+2,w
 10338  0BA2  00AA               	movwf	?___ftadd+2
 10339  0BA3  0008               	return
 10340  0BA4                     __end_of___ftadd:	
 10341                           
 10342                           	psect	text24
 10343  1F13                     __ptext24:	
 10344 ;; *************** function _initSwitchBypass *****************
 10345 ;; Defined at:
 10346 ;;		line 29 in file "SwitchBypass.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;		None
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;  initState       2   18[BANK0 ] int 
 10351 ;; Return value:  Size  Location     Type
 10352 ;;                  1    wreg      void 
 10353 ;; Registers used:
 10354 ;;		wreg, status,2, status,0, pclath, cstack
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10361 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10363 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10364 ;;Total ram usage:        2 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    5
 10367 ;; This function calls:
 10368 ;;		_getSwitchBypassState
 10369 ;;		_setSwitchBypassState
 10370 ;; This function is called by:
 10371 ;;		_main
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function _initSwitchBypass
 10377  1F13                     _initSwitchBypass:	
 10378                           
 10379                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10380                           
 10381                           ;incstack = 0
 10382                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10383  1F13  319E  26DE  319F   	fcall	_getSwitchBypassState
 10384  1F16  0020               	movlb	0	; select bank0
 10385  1F17  0821               	movf	?_getSwitchBypassState+1,w
 10386  1F18  00B3               	movwf	initSwitchBypass@initState+1
 10387  1F19  0820               	movf	?_getSwitchBypassState,w
 10388  1F1A  00B2               	movwf	initSwitchBypass@initState
 10389                           
 10390                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10391  1F1B  0833               	movf	initSwitchBypass@initState+1,w
 10392  1F1C  00AF               	movwf	setSwitchBypassState@f_state+1
 10393  1F1D  0832               	movf	initSwitchBypass@initState,w
 10394  1F1E  00AE               	movwf	setSwitchBypassState@f_state
 10395  1F1F  3193  23FA         	fcall	_setSwitchBypassState
 10396  1F21  0008               	return
 10397  1F22                     __end_of_initSwitchBypass:	
 10398                           
 10399                           	psect	text25
 10400  13FA                     __ptext25:	
 10401 ;; *************** function _setSwitchBypassState *****************
 10402 ;; Defined at:
 10403 ;;		line 104 in file "SwitchBypass.c"
 10404 ;; Parameters:    Size  Location     Type
 10405 ;;  f_state         2   14[BANK0 ] int 
 10406 ;; Auto vars:     Size  Location     Type
 10407 ;;		None
 10408 ;; Return value:  Size  Location     Type
 10409 ;;                  1    wreg      void 
 10410 ;; Registers used:
 10411 ;;		wreg, status,2, status,0, pclath, cstack
 10412 ;; Tracked objects:
 10413 ;;		On entry : 0/0
 10414 ;;		On exit  : 0/0
 10415 ;;		Unchanged: 0/0
 10416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10417 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10420 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10421 ;;Total ram usage:        4 bytes
 10422 ;; Hardware stack levels used:    1
 10423 ;; Hardware stack levels required when called:    4
 10424 ;; This function calls:
 10425 ;;		_updateSwitchBypassState
 10426 ;;		_wait_ms
 10427 ;; This function is called by:
 10428 ;;		_initSwitchBypass
 10429 ;;		_updateSwitchBypass
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           
 10434                           ;psect for function _setSwitchBypassState
 10435  13FA                     _setSwitchBypassState:	
 10436                           
 10437                           ;SwitchBypass.c: 105: if (switchBypass_state == f_state) {return;}
 10438                           
 10439                           ;incstack = 0
 10440                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10441  13FA  0020               	movlb	0	; select bank0
 10442  13FB  086F               	movf	_switchBypass_state,w
 10443  13FC  00B0               	movwf	??_setSwitchBypassState
 10444  13FD  01B1               	clrf	??_setSwitchBypassState+1
 10445  13FE  082F               	movf	setSwitchBypassState@f_state+1,w
 10446  13FF  0631               	xorwf	??_setSwitchBypassState+1,w
 10447  1400  1D03               	skipz
 10448  1401  2C04               	goto	u2425
 10449  1402  082E               	movf	setSwitchBypassState@f_state,w
 10450  1403  0630               	xorwf	??_setSwitchBypassState,w
 10451  1404                     u2425:	
 10452  1404  1903               	btfsc	3,2
 10453  1405  0008               	return
 10454                           
 10455                           ;SwitchBypass.c: 106: switchBypass_state = f_state;
 10456  1406  082E               	movf	setSwitchBypassState@f_state,w
 10457  1407  00B0               	movwf	??_setSwitchBypassState
 10458  1408  0830               	movf	??_setSwitchBypassState,w
 10459  1409  00EF               	movwf	_switchBypass_state
 10460                           
 10461                           ;SwitchBypass.c: 107: LATBbits.LATB2 = f_state;
 10462  140A  0C2E               	rrf	setSwitchBypassState@f_state,w
 10463  140B  0022               	movlb	2	; select bank2
 10464  140C  1C03               	skipc
 10465  140D  110D               	bcf	13,2	;volatile
 10466  140E  1803               	skipnc
 10467  140F  150D               	bsf	13,2	;volatile
 10468                           
 10469                           ;SwitchBypass.c: 108: LATBbits.LATB3 = 0;
 10470  1410  118D               	bcf	13,3	;volatile
 10471                           
 10472                           ;SwitchBypass.c: 109: LATGbits.LATG2 = f_state;
 10473  1411  0020               	movlb	0	; select bank0
 10474  1412  0C2E               	rrf	setSwitchBypassState@f_state,w
 10475  1413  0027               	movlb	7	; select bank7
 10476  1414  1C03               	skipc
 10477  1415  110D               	bcf	13,2	;volatile
 10478  1416  1803               	skipnc
 10479  1417  150D               	bsf	13,2	;volatile
 10480                           
 10481                           ;SwitchBypass.c: 110: LATGbits.LATG1 = !f_state;
 10482  1418  0020               	movlb	0	; select bank0
 10483  1419  082E               	movf	setSwitchBypassState@f_state,w
 10484  141A  042F               	iorwf	setSwitchBypassState@f_state+1,w
 10485  141B  1D03               	btfss	3,2
 10486  141C  2C20               	goto	u2430
 10487  141D  0027               	movlb	7	; select bank7
 10488  141E  148D               	bsf	13,1	;volatile
 10489  141F  2C22               	goto	l3179
 10490  1420                     u2430:	
 10491  1420  0027               	movlb	7	; select bank7
 10492  1421  108D               	bcf	13,1	;volatile
 10493  1422                     l3179:	
 10494                           
 10495                           ;SwitchBypass.c: 112: wait_ms(20);
 10496  1422  3014               	movlw	20
 10497  1423  0020               	movlb	0	; select bank0
 10498  1424  00AC               	movwf	wait_ms@time
 10499  1425  3000               	movlw	0
 10500  1426  00AD               	movwf	wait_ms@time+1
 10501  1427  3190  20BB  3193   	fcall	_wait_ms
 10502                           
 10503                           ;SwitchBypass.c: 114: LATGbits.LATG2 = 0;
 10504  142A  0027               	movlb	7	; select bank7
 10505  142B  110D               	bcf	13,2	;volatile
 10506                           
 10507                           ;SwitchBypass.c: 115: LATGbits.LATG1 = 0;
 10508  142C  108D               	bcf	13,1	;volatile
 10509                           
 10510                           ;SwitchBypass.c: 117: updateSwitchBypassState(switchBypass_state);
 10511  142D  0020               	movlb	0	; select bank0
 10512  142E  086F               	movf	_switchBypass_state,w
 10513  142F  00B0               	movwf	??_setSwitchBypassState
 10514  1430  01B1               	clrf	??_setSwitchBypassState+1
 10515  1431  0830               	movf	??_setSwitchBypassState,w
 10516  1432  00A0               	movwf	updateSwitchBypassState@state
 10517  1433  0831               	movf	??_setSwitchBypassState+1,w
 10518  1434  00A1               	movwf	updateSwitchBypassState@state+1
 10519  1435  3188  2001  3193   	fcall	_updateSwitchBypassState
 10520                           
 10521                           ;SwitchBypass.c: 118: wait_ms(20);
 10522  1438  3014               	movlw	20
 10523  1439  0020               	movlb	0	; select bank0
 10524  143A  00AC               	movwf	wait_ms@time
 10525  143B  3000               	movlw	0
 10526  143C  00AD               	movwf	wait_ms@time+1
 10527  143D  3190  20BB         	fcall	_wait_ms
 10528  143F  0008               	return
 10529  1440                     __end_of_setSwitchBypassState:	
 10530                           
 10531                           	psect	text26
 10532  10BB                     __ptext26:	
 10533 ;; *************** function _wait_ms *****************
 10534 ;; Defined at:
 10535 ;;		line 23 in file "system.c"
 10536 ;; Parameters:    Size  Location     Type
 10537 ;;  time            2   12[BANK0 ] unsigned int 
 10538 ;; Auto vars:     Size  Location     Type
 10539 ;;		None
 10540 ;; Return value:  Size  Location     Type
 10541 ;;                  1    wreg      void 
 10542 ;; Registers used:
 10543 ;;		wreg, status,2, status,0, pclath, cstack
 10544 ;; Tracked objects:
 10545 ;;		On entry : 0/0
 10546 ;;		On exit  : 0/0
 10547 ;;		Unchanged: 0/0
 10548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10549 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10552 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10553 ;;Total ram usage:        2 bytes
 10554 ;; Hardware stack levels used:    1
 10555 ;; Hardware stack levels required when called:    3
 10556 ;; This function calls:
 10557 ;;		___lmul
 10558 ;; This function is called by:
 10559 ;;		_star_tactiles
 10560 ;;		_solidring_tactiles
 10561 ;;		_read_bottom_tactile
 10562 ;;		_read_top_tactile
 10563 ;;		_setSwitchBypassState
 10564 ;;		_setFeedbackState
 10565 ;;		_showError_Alternating
 10566 ;;		_show_error
 10567 ;;		_show_cancel
 10568 ;;		_ring_tactiles
 10569 ;; This function uses a non-reentrant model
 10570 ;;
 10571                           
 10572                           
 10573                           ;psect for function _wait_ms
 10574  10BB                     _wait_ms:	
 10575                           
 10576                           ;system.c: 25: static long timel = 0;
 10577                           ;system.c: 26: timel = time * 1000l;
 10578                           
 10579                           ;incstack = 0
 10580                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10581  10BB  0020               	movlb	0	; select bank0
 10582  10BC  082C               	movf	wait_ms@time,w
 10583  10BD  00A0               	movwf	___lmul@multiplier
 10584  10BE  082D               	movf	wait_ms@time+1,w
 10585  10BF  00A1               	movwf	___lmul@multiplier+1
 10586  10C0  01A2               	clrf	___lmul@multiplier+2
 10587  10C1  01A3               	clrf	___lmul@multiplier+3
 10588  10C2  3000               	movlw	0
 10589  10C3  00A7               	movwf	___lmul@multiplicand+3
 10590  10C4  3000               	movlw	0
 10591  10C5  00A6               	movwf	___lmul@multiplicand+2
 10592  10C6  3003               	movlw	3
 10593  10C7  00A5               	movwf	___lmul@multiplicand+1
 10594  10C8  30E8               	movlw	232
 10595  10C9  00A4               	movwf	___lmul@multiplicand
 10596  10CA  3190  208B  3190   	fcall	___lmul
 10597  10CD  0020               	movlb	0	; select bank0
 10598  10CE  0823               	movf	?___lmul+3,w
 10599  10CF  0022               	movlb	2	; select bank2
 10600  10D0  00AF               	movwf	(wait_ms@timel+3)^(0+256)
 10601  10D1  0020               	movlb	0	; select bank0
 10602  10D2  0822               	movf	?___lmul+2,w
 10603  10D3  0022               	movlb	2	; select bank2
 10604  10D4  00AE               	movwf	(wait_ms@timel+2)^(0+256)
 10605  10D5  0020               	movlb	0	; select bank0
 10606  10D6  0821               	movf	?___lmul+1,w
 10607  10D7  0022               	movlb	2	; select bank2
 10608  10D8  00AD               	movwf	(wait_ms@timel+1)^(0+256)
 10609  10D9  0020               	movlb	0	; select bank0
 10610  10DA  0820               	movf	?___lmul,w
 10611  10DB  0022               	movlb	2	; select bank2
 10612  10DC  00AC               	movwf	wait_ms@timel^(0+256)
 10613  10DD                     l313:	
 10614                           ;system.c: 27: for( ; timel; timel--);
 10615                           
 10616  10DD  082F               	movf	(wait_ms@timel+3)^(0+256),w
 10617  10DE  042E               	iorwf	(wait_ms@timel+2)^(0+256),w
 10618  10DF  042D               	iorwf	(wait_ms@timel+1)^(0+256),w
 10619  10E0  042C               	iorwf	wait_ms@timel^(0+256),w
 10620  10E1  1903               	btfsc	3,2
 10621  10E2  0008               	return
 10622  10E3  30FF               	movlw	255
 10623  10E4  07AC               	addwf	wait_ms@timel^(0+256),f
 10624  10E5  30FF               	movlw	255
 10625  10E6  3DAD               	addwfc	(wait_ms@timel+1)^(0+256),f
 10626  10E7  30FF               	movlw	255
 10627  10E8  3DAE               	addwfc	(wait_ms@timel+2)^(0+256),f
 10628  10E9  30FF               	movlw	255
 10629  10EA  3DAF               	addwfc	(wait_ms@timel+3)^(0+256),f
 10630  10EB  28DD               	goto	l313
 10631  10EC                     __end_of_wait_ms:	
 10632                           
 10633                           	psect	text27
 10634  108B                     __ptext27:	
 10635 ;; *************** function ___lmul *****************
 10636 ;; Defined at:
 10637 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10638 ;; Parameters:    Size  Location     Type
 10639 ;;  multiplier      4    0[BANK0 ] unsigned long 
 10640 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 10641 ;; Auto vars:     Size  Location     Type
 10642 ;;  product         4    8[BANK0 ] unsigned long 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  4    0[BANK0 ] unsigned long 
 10645 ;; Registers used:
 10646 ;;		wreg, status,2, status,0
 10647 ;; Tracked objects:
 10648 ;;		On entry : 0/0
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10652 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10653 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10655 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10656 ;;Total ram usage:       12 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    2
 10659 ;; This function calls:
 10660 ;;		Nothing
 10661 ;; This function is called by:
 10662 ;;		_wait_ms
 10663 ;; This function uses a non-reentrant model
 10664 ;;
 10665                           
 10666                           
 10667                           ;psect for function ___lmul
 10668  108B                     ___lmul:	
 10669                           
 10670                           ;incstack = 0
 10671                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10672  108B  3000               	movlw	0
 10673  108C  0020               	movlb	0	; select bank0
 10674  108D  00AB               	movwf	___lmul@product+3
 10675  108E  3000               	movlw	0
 10676  108F  00AA               	movwf	___lmul@product+2
 10677  1090  3000               	movlw	0
 10678  1091  00A9               	movwf	___lmul@product+1
 10679  1092  3000               	movlw	0
 10680  1093  00A8               	movwf	___lmul@product
 10681  1094                     l2979:	
 10682  1094  1C20               	btfss	___lmul@multiplier,0
 10683  1095  289E               	goto	l2983
 10684  1096  0824               	movf	___lmul@multiplicand,w
 10685  1097  07A8               	addwf	___lmul@product,f
 10686  1098  0825               	movf	___lmul@multiplicand+1,w
 10687  1099  3DA9               	addwfc	___lmul@product+1,f
 10688  109A  0826               	movf	___lmul@multiplicand+2,w
 10689  109B  3DAA               	addwfc	___lmul@product+2,f
 10690  109C  0827               	movf	___lmul@multiplicand+3,w
 10691  109D  3DAB               	addwfc	___lmul@product+3,f
 10692  109E                     l2983:	
 10693  109E  3001               	movlw	1
 10694  109F                     u2215:	
 10695  109F  35A4               	lslf	___lmul@multiplicand,f
 10696  10A0  0DA5               	rlf	___lmul@multiplicand+1,f
 10697  10A1  0DA6               	rlf	___lmul@multiplicand+2,f
 10698  10A2  0DA7               	rlf	___lmul@multiplicand+3,f
 10699  10A3  0B89               	decfsz	9,f
 10700  10A4  289F               	goto	u2215
 10701  10A5  3001               	movlw	1
 10702  10A6                     u2225:	
 10703  10A6  36A3               	lsrf	___lmul@multiplier+3,f
 10704  10A7  0CA2               	rrf	___lmul@multiplier+2,f
 10705  10A8  0CA1               	rrf	___lmul@multiplier+1,f
 10706  10A9  0CA0               	rrf	___lmul@multiplier,f
 10707  10AA  0B89               	decfsz	9,f
 10708  10AB  28A6               	goto	u2225
 10709  10AC  0823               	movf	___lmul@multiplier+3,w
 10710  10AD  0422               	iorwf	___lmul@multiplier+2,w
 10711  10AE  0421               	iorwf	___lmul@multiplier+1,w
 10712  10AF  0420               	iorwf	___lmul@multiplier,w
 10713  10B0  1D03               	skipz
 10714  10B1  2894               	goto	l2979
 10715  10B2  082B               	movf	___lmul@product+3,w
 10716  10B3  00A3               	movwf	?___lmul+3
 10717  10B4  082A               	movf	___lmul@product+2,w
 10718  10B5  00A2               	movwf	?___lmul+2
 10719  10B6  0829               	movf	___lmul@product+1,w
 10720  10B7  00A1               	movwf	?___lmul+1
 10721  10B8  0828               	movf	___lmul@product,w
 10722  10B9  00A0               	movwf	?___lmul
 10723  10BA  0008               	return
 10724  10BB                     __end_of___lmul:	
 10725                           
 10726                           	psect	text28
 10727  0801                     __ptext28:	
 10728 ;; *************** function _updateSwitchBypassState *****************
 10729 ;; Defined at:
 10730 ;;		line 96 in file "state_manager.c"
 10731 ;; Parameters:    Size  Location     Type
 10732 ;;  state           2    0[BANK0 ] int 
 10733 ;; Auto vars:     Size  Location     Type
 10734 ;;		None
 10735 ;; Return value:  Size  Location     Type
 10736 ;;                  1    wreg      void 
 10737 ;; Registers used:
 10738 ;;		None
 10739 ;; Tracked objects:
 10740 ;;		On entry : 0/0
 10741 ;;		On exit  : 0/0
 10742 ;;		Unchanged: 0/0
 10743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10744 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10747 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10748 ;;Total ram usage:        2 bytes
 10749 ;; Hardware stack levels used:    1
 10750 ;; Hardware stack levels required when called:    2
 10751 ;; This function calls:
 10752 ;;		Nothing
 10753 ;; This function is called by:
 10754 ;;		_setSwitchBypassState
 10755 ;; This function uses a non-reentrant model
 10756 ;;
 10757                           
 10758                           
 10759                           ;psect for function _updateSwitchBypassState
 10760  0801                     _updateSwitchBypassState:	
 10761                           
 10762                           ;incstack = 0
 10763                           ; Regs used in _updateSwitchBypassState: []
 10764  0801  0008               	return
 10765  0802                     __end_of_updateSwitchBypassState:	
 10766                           
 10767                           	psect	text29
 10768  1EDE                     __ptext29:	
 10769 ;; *************** function _getSwitchBypassState *****************
 10770 ;; Defined at:
 10771 ;;		line 103 in file "state_manager.c"
 10772 ;; Parameters:    Size  Location     Type
 10773 ;;		None
 10774 ;; Auto vars:     Size  Location     Type
 10775 ;;		None
 10776 ;; Return value:  Size  Location     Type
 10777 ;;                  2    0[BANK0 ] int 
 10778 ;; Registers used:
 10779 ;;		status,2
 10780 ;; Tracked objects:
 10781 ;;		On entry : 0/0
 10782 ;;		On exit  : 0/0
 10783 ;;		Unchanged: 0/0
 10784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10785 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10788 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10789 ;;Total ram usage:        2 bytes
 10790 ;; Hardware stack levels used:    1
 10791 ;; Hardware stack levels required when called:    2
 10792 ;; This function calls:
 10793 ;;		Nothing
 10794 ;; This function is called by:
 10795 ;;		_initSwitchBypass
 10796 ;; This function uses a non-reentrant model
 10797 ;;
 10798                           
 10799                           
 10800                           ;psect for function _getSwitchBypassState
 10801  1EDE                     _getSwitchBypassState:	
 10802                           
 10803                           ;state_manager.c: 108: return 0;
 10804                           
 10805                           ;incstack = 0
 10806                           ; Regs used in _getSwitchBypassState: [status,2]
 10807  1EDE  0020               	movlb	0	; select bank0
 10808  1EDF  01A0               	clrf	?_getSwitchBypassState
 10809  1EE0  01A1               	clrf	?_getSwitchBypassState+1
 10810  1EE1  0008               	return
 10811  1EE2                     __end_of_getSwitchBypassState:	
 10812                           
 10813                           	psect	text30
 10814  1F89                     __ptext30:	
 10815 ;; *************** function _adc_convert *****************
 10816 ;; Defined at:
 10817 ;;		line 110 in file "user.c"
 10818 ;; Parameters:    Size  Location     Type
 10819 ;;  channel         1    wreg     unsigned char 
 10820 ;; Auto vars:     Size  Location     Type
 10821 ;;  channel         1    3[BANK0 ] unsigned char 
 10822 ;; Return value:  Size  Location     Type
 10823 ;;                  2    0[BANK0 ] unsigned int 
 10824 ;; Registers used:
 10825 ;;		wreg, status,2, status,0
 10826 ;; Tracked objects:
 10827 ;;		On entry : 0/0
 10828 ;;		On exit  : 0/0
 10829 ;;		Unchanged: 0/0
 10830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10831 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10833 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10834 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10835 ;;Total ram usage:        4 bytes
 10836 ;; Hardware stack levels used:    1
 10837 ;; Hardware stack levels required when called:    2
 10838 ;; This function calls:
 10839 ;;		Nothing
 10840 ;; This function is called by:
 10841 ;;		_main
 10842 ;; This function uses a non-reentrant model
 10843 ;;
 10844                           
 10845                           
 10846                           ;psect for function _adc_convert
 10847  1F89                     _adc_convert:	
 10848                           
 10849                           ;incstack = 0
 10850                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 10851                           ;adc_convert@channel stored from wreg
 10852  1F89  0020               	movlb	0	; select bank0
 10853  1F8A  00A3               	movwf	adc_convert@channel
 10854                           
 10855                           ;user.c: 111: ADCON0bits.CHS = channel;
 10856  1F8B  0823               	movf	adc_convert@channel,w
 10857  1F8C  00A2               	movwf	??_adc_convert
 10858  1F8D  0DA2               	rlf	??_adc_convert,f
 10859  1F8E  0DA2               	rlf	??_adc_convert,f
 10860  1F8F  0021               	movlb	1	; select bank1
 10861  1F90  081D               	movf	29,w	;volatile
 10862  1F91  0020               	movlb	0	; select bank0
 10863  1F92  0622               	xorwf	??_adc_convert,w
 10864  1F93  3983               	andlw	-125
 10865  1F94  0622               	xorwf	??_adc_convert,w
 10866  1F95  0021               	movlb	1	; select bank1
 10867  1F96  009D               	movwf	29	;volatile
 10868                           
 10869                           ;user.c: 112: ADCON0bits.GO = 0b1;
 10870  1F97  149D               	bsf	29,1	;volatile
 10871  1F98                     l480:	
 10872                           ;user.c: 113: while (ADCON0bits.GO_nDONE);
 10873                           
 10874  1F98  189D               	btfsc	29,1	;volatile
 10875  1F99  2F98               	goto	l480
 10876                           
 10877                           ;user.c: 114: return (ADRESH << 8) | ADRESL;
 10878  1F9A  081C               	movf	28,w	;volatile
 10879  1F9B  0020               	movlb	0	; select bank0
 10880  1F9C  00A1               	movwf	?_adc_convert+1
 10881  1F9D  0021               	movlb	1	; select bank1
 10882  1F9E  081B               	movf	27,w	;volatile
 10883  1F9F  0020               	movlb	0	; select bank0
 10884  1FA0  00A0               	movwf	?_adc_convert
 10885  1FA1  0008               	return
 10886  1FA2                     __end_of_adc_convert:	
 10887                           
 10888                           	psect	text31
 10889  1579                     __ptext31:	
 10890 ;; *************** function ___awdiv *****************
 10891 ;; Defined at:
 10892 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;  divisor         2    0[BANK0 ] int 
 10895 ;;  dividend        2    2[BANK0 ] int 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  quotient        2    7[BANK0 ] int 
 10898 ;;  sign            1    6[BANK0 ] unsigned char 
 10899 ;;  counter         1    5[BANK0 ] unsigned char 
 10900 ;; Return value:  Size  Location     Type
 10901 ;;                  2    0[BANK0 ] int 
 10902 ;; Registers used:
 10903 ;;		wreg, status,2, status,0
 10904 ;; Tracked objects:
 10905 ;;		On entry : 0/0
 10906 ;;		On exit  : 0/0
 10907 ;;		Unchanged: 0/0
 10908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10909 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10910 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10911 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10912 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10913 ;;Total ram usage:        9 bytes
 10914 ;; Hardware stack levels used:    1
 10915 ;; Hardware stack levels required when called:    2
 10916 ;; This function calls:
 10917 ;;		Nothing
 10918 ;; This function is called by:
 10919 ;;		_main
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           
 10924                           ;psect for function ___awdiv
 10925  1579                     ___awdiv:	
 10926                           
 10927                           ;incstack = 0
 10928                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10929  1579  0020               	movlb	0	; select bank0
 10930  157A  01A6               	clrf	___awdiv@sign
 10931  157B  1FA1               	btfss	___awdiv@divisor+1,7
 10932  157C  2D84               	goto	l3865
 10933  157D  09A0               	comf	___awdiv@divisor,f
 10934  157E  09A1               	comf	___awdiv@divisor+1,f
 10935  157F  0AA0               	incf	___awdiv@divisor,f
 10936  1580  1903               	skipnz
 10937  1581  0AA1               	incf	___awdiv@divisor+1,f
 10938  1582  01A6               	clrf	___awdiv@sign
 10939  1583  0AA6               	incf	___awdiv@sign,f
 10940  1584                     l3865:	
 10941  1584  1FA3               	btfss	___awdiv@dividend+1,7
 10942  1585  2D8F               	goto	l3871
 10943  1586  09A2               	comf	___awdiv@dividend,f
 10944  1587  09A3               	comf	___awdiv@dividend+1,f
 10945  1588  0AA2               	incf	___awdiv@dividend,f
 10946  1589  1903               	skipnz
 10947  158A  0AA3               	incf	___awdiv@dividend+1,f
 10948  158B  3001               	movlw	1
 10949  158C  00A4               	movwf	??___awdiv
 10950  158D  0824               	movf	??___awdiv,w
 10951  158E  06A6               	xorwf	___awdiv@sign,f
 10952  158F                     l3871:	
 10953  158F  01A7               	clrf	___awdiv@quotient
 10954  1590  01A8               	clrf	___awdiv@quotient+1
 10955  1591  0820               	movf	___awdiv@divisor,w
 10956  1592  0421               	iorwf	___awdiv@divisor+1,w
 10957  1593  1903               	btfsc	3,2
 10958  1594  2DBE               	goto	l3893
 10959  1595  01A5               	clrf	___awdiv@counter
 10960  1596  0AA5               	incf	___awdiv@counter,f
 10961  1597                     l3881:	
 10962  1597  1BA1               	btfsc	___awdiv@divisor+1,7
 10963  1598  2DA3               	goto	l3883
 10964  1599  3001               	movlw	1
 10965  159A                     u3775:	
 10966  159A  35A0               	lslf	___awdiv@divisor,f
 10967  159B  0DA1               	rlf	___awdiv@divisor+1,f
 10968  159C  0B89               	decfsz	9,f
 10969  159D  2D9A               	goto	u3775
 10970  159E  3001               	movlw	1
 10971  159F  00A4               	movwf	??___awdiv
 10972  15A0  0824               	movf	??___awdiv,w
 10973  15A1  07A5               	addwf	___awdiv@counter,f
 10974  15A2  2D97               	goto	l3881
 10975  15A3                     l3883:	
 10976  15A3  3001               	movlw	1
 10977  15A4                     u3795:	
 10978  15A4  35A7               	lslf	___awdiv@quotient,f
 10979  15A5  0DA8               	rlf	___awdiv@quotient+1,f
 10980  15A6  0B89               	decfsz	9,f
 10981  15A7  2DA4               	goto	u3795
 10982  15A8  0821               	movf	___awdiv@divisor+1,w
 10983  15A9  0223               	subwf	___awdiv@dividend+1,w
 10984  15AA  1D03               	skipz
 10985  15AB  2DAE               	goto	u3805
 10986  15AC  0820               	movf	___awdiv@divisor,w
 10987  15AD  0222               	subwf	___awdiv@dividend,w
 10988  15AE                     u3805:	
 10989  15AE  1C03               	skipc
 10990  15AF  2DB5               	goto	l3889
 10991  15B0  0820               	movf	___awdiv@divisor,w
 10992  15B1  02A2               	subwf	___awdiv@dividend,f
 10993  15B2  0821               	movf	___awdiv@divisor+1,w
 10994  15B3  3BA3               	subwfb	___awdiv@dividend+1,f
 10995  15B4  1427               	bsf	___awdiv@quotient,0
 10996  15B5                     l3889:	
 10997  15B5  3001               	movlw	1
 10998  15B6                     u3815:	
 10999  15B6  36A1               	lsrf	___awdiv@divisor+1,f
 11000  15B7  0CA0               	rrf	___awdiv@divisor,f
 11001  15B8  0B89               	decfsz	9,f
 11002  15B9  2DB6               	goto	u3815
 11003  15BA  3001               	movlw	1
 11004  15BB  02A5               	subwf	___awdiv@counter,f
 11005  15BC  1D03               	btfss	3,2
 11006  15BD  2DA3               	goto	l3883
 11007  15BE                     l3893:	
 11008  15BE  0826               	movf	___awdiv@sign,w
 11009  15BF  1903               	btfsc	3,2
 11010  15C0  2DC6               	goto	l3897
 11011  15C1  09A7               	comf	___awdiv@quotient,f
 11012  15C2  09A8               	comf	___awdiv@quotient+1,f
 11013  15C3  0AA7               	incf	___awdiv@quotient,f
 11014  15C4  1903               	skipnz
 11015  15C5  0AA8               	incf	___awdiv@quotient+1,f
 11016  15C6                     l3897:	
 11017  15C6  0828               	movf	___awdiv@quotient+1,w
 11018  15C7  00A1               	movwf	?___awdiv+1
 11019  15C8  0827               	movf	___awdiv@quotient,w
 11020  15C9  00A0               	movwf	?___awdiv
 11021  15CA  0008               	return
 11022  15CB                     __end_of___awdiv:	
 11023                           
 11024                           	psect	text32
 11025  127A                     __ptext32:	
 11026 ;; *************** function ___altoft *****************
 11027 ;; Defined at:
 11028 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11029 ;; Parameters:    Size  Location     Type
 11030 ;;  c               4    8[BANK0 ] long 
 11031 ;; Auto vars:     Size  Location     Type
 11032 ;;  sign            1   15[BANK0 ] unsigned char 
 11033 ;;  exp             1   14[BANK0 ] unsigned char 
 11034 ;; Return value:  Size  Location     Type
 11035 ;;                  3    8[BANK0 ] float 
 11036 ;; Registers used:
 11037 ;;		wreg, status,2, status,0, pclath, cstack
 11038 ;; Tracked objects:
 11039 ;;		On entry : 0/0
 11040 ;;		On exit  : 0/0
 11041 ;;		Unchanged: 0/0
 11042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11044 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11046 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11047 ;;Total ram usage:        8 bytes
 11048 ;; Hardware stack levels used:    1
 11049 ;; Hardware stack levels required when called:    3
 11050 ;; This function calls:
 11051 ;;		___ftpack
 11052 ;; This function is called by:
 11053 ;;		_main
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           
 11058                           ;psect for function ___altoft
 11059  127A                     ___altoft:	
 11060                           
 11061                           ;incstack = 0
 11062                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11063  127A  0020               	movlb	0	; select bank0
 11064  127B  01AF               	clrf	___altoft@sign
 11065  127C  308E               	movlw	142
 11066  127D  00AC               	movwf	??___altoft
 11067  127E  082C               	movf	??___altoft,w
 11068  127F  00AE               	movwf	___altoft@exp
 11069  1280  1FAB               	btfss	___altoft@c+3,7
 11070  1281  2A8F               	goto	l3851
 11071  1282  09A8               	comf	___altoft@c,f
 11072  1283  09A9               	comf	___altoft@c+1,f
 11073  1284  09AA               	comf	___altoft@c+2,f
 11074  1285  09AB               	comf	___altoft@c+3,f
 11075  1286  0AA8               	incf	___altoft@c,f
 11076  1287  1903               	skipnz
 11077  1288  0AA9               	incf	___altoft@c+1,f
 11078  1289  1903               	skipnz
 11079  128A  0AAA               	incf	___altoft@c+2,f
 11080  128B  1903               	skipnz
 11081  128C  0AAB               	incf	___altoft@c+3,f
 11082  128D  01AF               	clrf	___altoft@sign
 11083  128E  0AAF               	incf	___altoft@sign,f
 11084  128F                     l3851:	
 11085  128F  30FF               	movlw	255
 11086  1290  052B               	andwf	___altoft@c+3,w
 11087  1291  1903               	btfsc	3,2
 11088  1292  2A9F               	goto	l3853
 11089  1293  3001               	movlw	1
 11090  1294                     u3725:	
 11091  1294  36AB               	lsrf	___altoft@c+3,f
 11092  1295  0CAA               	rrf	___altoft@c+2,f
 11093  1296  0CA9               	rrf	___altoft@c+1,f
 11094  1297  0CA8               	rrf	___altoft@c,f
 11095  1298  0B89               	decfsz	9,f
 11096  1299  2A94               	goto	u3725
 11097  129A  3001               	movlw	1
 11098  129B  00AC               	movwf	??___altoft
 11099  129C  082C               	movf	??___altoft,w
 11100  129D  07AE               	addwf	___altoft@exp,f
 11101  129E  2A8F               	goto	l3851
 11102  129F                     l3853:	
 11103  129F  0828               	movf	___altoft@c,w
 11104  12A0  00A0               	movwf	___ftpack@arg
 11105  12A1  0829               	movf	___altoft@c+1,w
 11106  12A2  00A1               	movwf	___ftpack@arg+1
 11107  12A3  082A               	movf	___altoft@c+2,w
 11108  12A4  00A2               	movwf	___ftpack@arg+2
 11109  12A5  082E               	movf	___altoft@exp,w
 11110  12A6  00AC               	movwf	??___altoft
 11111  12A7  082C               	movf	??___altoft,w
 11112  12A8  00A3               	movwf	___ftpack@exp
 11113  12A9  082F               	movf	___altoft@sign,w
 11114  12AA  00AD               	movwf	??___altoft+1
 11115  12AB  082D               	movf	??___altoft+1,w
 11116  12AC  00A4               	movwf	___ftpack@sign
 11117  12AD  3196  261F         	fcall	___ftpack
 11118  12AF  0020               	movlb	0	; select bank0
 11119  12B0  0820               	movf	?___ftpack,w
 11120  12B1  00A8               	movwf	?___altoft
 11121  12B2  0821               	movf	?___ftpack+1,w
 11122  12B3  00A9               	movwf	?___altoft+1
 11123  12B4  0822               	movf	?___ftpack+2,w
 11124  12B5  00AA               	movwf	?___altoft+2
 11125  12B6  0008               	return
 11126  12B7                     __end_of___altoft:	
 11127                           
 11128                           	psect	text33
 11129  161F                     __ptext33:	
 11130 ;; *************** function ___ftpack *****************
 11131 ;; Defined at:
 11132 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11133 ;; Parameters:    Size  Location     Type
 11134 ;;  arg             3    0[BANK0 ] unsigned um
 11135 ;;  exp             1    3[BANK0 ] unsigned char 
 11136 ;;  sign            1    4[BANK0 ] unsigned char 
 11137 ;; Auto vars:     Size  Location     Type
 11138 ;;		None
 11139 ;; Return value:  Size  Location     Type
 11140 ;;                  3    0[BANK0 ] float 
 11141 ;; Registers used:
 11142 ;;		wreg, status,2, status,0
 11143 ;; Tracked objects:
 11144 ;;		On entry : 0/0
 11145 ;;		On exit  : 0/0
 11146 ;;		Unchanged: 0/0
 11147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11148 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11150 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11151 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11152 ;;Total ram usage:        8 bytes
 11153 ;; Hardware stack levels used:    1
 11154 ;; Hardware stack levels required when called:    2
 11155 ;; This function calls:
 11156 ;;		Nothing
 11157 ;; This function is called by:
 11158 ;;		___altoft
 11159 ;;		___awtoft
 11160 ;;		___ftadd
 11161 ;;		___ftdiv
 11162 ;;		___ftmul
 11163 ;; This function uses a non-reentrant model
 11164 ;;
 11165                           
 11166                           
 11167                           ;psect for function ___ftpack
 11168  161F                     ___ftpack:	
 11169                           
 11170                           ;incstack = 0
 11171                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11172  161F  0020               	movlb	0	; select bank0
 11173  1620  0823               	movf	___ftpack@exp,w
 11174  1621  1903               	btfsc	3,2
 11175  1622  2E28               	goto	l3037
 11176  1623  0822               	movf	___ftpack@arg+2,w
 11177  1624  0421               	iorwf	___ftpack@arg+1,w
 11178  1625  0420               	iorwf	___ftpack@arg,w
 11179  1626  1D03               	skipz
 11180  1627  2E39               	goto	l3043
 11181  1628                     l3037:	
 11182  1628  3000               	movlw	0
 11183  1629  00A0               	movwf	?___ftpack
 11184  162A  3000               	movlw	0
 11185  162B  00A1               	movwf	?___ftpack+1
 11186  162C  3000               	movlw	0
 11187  162D  00A2               	movwf	?___ftpack+2
 11188  162E  0008               	return
 11189  162F                     l3041:	
 11190  162F  3001               	movlw	1
 11191  1630  00A5               	movwf	??___ftpack
 11192  1631  0825               	movf	??___ftpack,w
 11193  1632  07A3               	addwf	___ftpack@exp,f
 11194  1633  3001               	movlw	1
 11195  1634                     u2275:	
 11196  1634  36A2               	lsrf	___ftpack@arg+2,f
 11197  1635  0CA1               	rrf	___ftpack@arg+1,f
 11198  1636  0CA0               	rrf	___ftpack@arg,f
 11199  1637  0B89               	decfsz	9,f
 11200  1638  2E34               	goto	u2275
 11201  1639                     l3043:	
 11202  1639  30FE               	movlw	254
 11203  163A  0522               	andwf	___ftpack@arg+2,w
 11204  163B  1903               	btfsc	3,2
 11205  163C  2E52               	goto	l1250
 11206  163D  2E2F               	goto	l3041
 11207  163E                     l3045:	
 11208  163E  3001               	movlw	1
 11209  163F  00A5               	movwf	??___ftpack
 11210  1640  0825               	movf	??___ftpack,w
 11211  1641  07A3               	addwf	___ftpack@exp,f
 11212  1642  3001               	movlw	1
 11213  1643  07A0               	addwf	___ftpack@arg,f
 11214  1644  3000               	movlw	0
 11215  1645  1803               	skipnc
 11216  1646  3001               	movlw	1
 11217  1647  07A1               	addwf	___ftpack@arg+1,f
 11218  1648  3000               	movlw	0
 11219  1649  1803               	skipnc
 11220  164A  3001               	movlw	1
 11221  164B  07A2               	addwf	___ftpack@arg+2,f
 11222  164C  3001               	movlw	1
 11223  164D                     u2295:	
 11224  164D  36A2               	lsrf	___ftpack@arg+2,f
 11225  164E  0CA1               	rrf	___ftpack@arg+1,f
 11226  164F  0CA0               	rrf	___ftpack@arg,f
 11227  1650  0B89               	decfsz	9,f
 11228  1651  2E4D               	goto	u2295
 11229  1652                     l1250:	
 11230  1652  30FF               	movlw	255
 11231  1653  0522               	andwf	___ftpack@arg+2,w
 11232  1654  1903               	btfsc	3,2
 11233  1655  2E5F               	goto	l3053
 11234  1656  2E3E               	goto	l3045
 11235  1657                     l3051:	
 11236  1657  3001               	movlw	1
 11237  1658  02A3               	subwf	___ftpack@exp,f
 11238  1659  3001               	movlw	1
 11239  165A                     u2315:	
 11240  165A  35A0               	lslf	___ftpack@arg,f
 11241  165B  0DA1               	rlf	___ftpack@arg+1,f
 11242  165C  0DA2               	rlf	___ftpack@arg+2,f
 11243  165D  0B89               	decfsz	9,f
 11244  165E  2E5A               	goto	u2315
 11245  165F                     l3053:	
 11246  165F  1BA1               	btfsc	___ftpack@arg+1,7
 11247  1660  2E65               	goto	l1257
 11248  1661  3002               	movlw	2
 11249  1662  0223               	subwf	___ftpack@exp,w
 11250  1663  1803               	skipnc
 11251  1664  2E57               	goto	l3051
 11252  1665                     l1257:	
 11253  1665  1823               	btfsc	___ftpack@exp,0
 11254  1666  2E6D               	goto	l1258
 11255  1667  30FF               	movlw	255
 11256  1668  05A0               	andwf	___ftpack@arg,f
 11257  1669  307F               	movlw	127
 11258  166A  05A1               	andwf	___ftpack@arg+1,f
 11259  166B  30FF               	movlw	255
 11260  166C  05A2               	andwf	___ftpack@arg+2,f
 11261  166D                     l1258:	
 11262  166D  1003               	clrc
 11263  166E  0CA3               	rrf	___ftpack@exp,f
 11264  166F  0823               	movf	___ftpack@exp,w
 11265  1670  00A5               	movwf	??___ftpack
 11266  1671  01A6               	clrf	??___ftpack+1
 11267  1672  01A7               	clrf	??___ftpack+2
 11268  1673  3010               	movlw	16
 11269  1674                     u2355:	
 11270  1674  35A5               	lslf	??___ftpack,f
 11271  1675  0DA6               	rlf	??___ftpack+1,f
 11272  1676  0DA7               	rlf	??___ftpack+2,f
 11273  1677  0B89               	decfsz	9,f
 11274  1678  2E74               	goto	u2355
 11275  1679  0825               	movf	??___ftpack,w
 11276  167A  04A0               	iorwf	___ftpack@arg,f
 11277  167B  0826               	movf	??___ftpack+1,w
 11278  167C  04A1               	iorwf	___ftpack@arg+1,f
 11279  167D  0827               	movf	??___ftpack+2,w
 11280  167E  04A2               	iorwf	___ftpack@arg+2,f
 11281  167F  0824               	movf	___ftpack@sign,w
 11282  1680  1903               	btfsc	3,2
 11283  1681  0008               	return
 11284  1682  17A2               	bsf	___ftpack@arg+2,7
 11285  1683  0008               	return
 11286  1684                     __end_of___ftpack:	
 11287                           
 11288                           	psect	text34
 11289  1528                     __ptext34:	
 11290 ;; *************** function _ReadSavedSettings *****************
 11291 ;; Defined at:
 11292 ;;		line 181 in file "user.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;		None
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;		None
 11297 ;; Return value:  Size  Location     Type
 11298 ;;                  1    wreg      void 
 11299 ;; Registers used:
 11300 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11310 ;;Total ram usage:        0 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; Hardware stack levels required when called:    3
 11313 ;; This function calls:
 11314 ;;		_FLASH_ReadWord
 11315 ;;		_set_leds_bottom
 11316 ;;		_set_leds_top
 11317 ;; This function is called by:
 11318 ;;		_main
 11319 ;; This function uses a non-reentrant model
 11320 ;;
 11321                           
 11322                           
 11323                           ;psect for function _ReadSavedSettings
 11324  1528                     _ReadSavedSettings:	
 11325                           
 11326                           ;user.c: 183: top_push_state = FLASH_ReadWord(0x1F81);
 11327                           
 11328                           ;incstack = 0
 11329                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11330  1528  3081               	movlw	129
 11331  1529  0020               	movlb	0	; select bank0
 11332  152A  00A0               	movwf	FLASH_ReadWord@flashAddr
 11333  152B  301F               	movlw	31
 11334  152C  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11335  152D  319F  27BE  3195   	fcall	_FLASH_ReadWord
 11336  1530  0020               	movlb	0	; select bank0
 11337  1531  0821               	movf	?_FLASH_ReadWord+1,w
 11338  1532  0021               	movlb	1	; select bank1
 11339  1533  00EC               	movwf	(_top_push_state+1)^(0+128)
 11340  1534  0020               	movlb	0	; select bank0
 11341  1535  0820               	movf	?_FLASH_ReadWord,w
 11342  1536  0021               	movlb	1	; select bank1
 11343  1537  00EB               	movwf	_top_push_state^(0+128)
 11344                           
 11345                           ;user.c: 184: bottom_push_state = FLASH_ReadWord(0x1F82);
 11346  1538  3082               	movlw	130
 11347  1539  0020               	movlb	0	; select bank0
 11348  153A  00A0               	movwf	FLASH_ReadWord@flashAddr
 11349  153B  301F               	movlw	31
 11350  153C  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11351  153D  319F  27BE  3195   	fcall	_FLASH_ReadWord
 11352  1540  0020               	movlb	0	; select bank0
 11353  1541  0821               	movf	?_FLASH_ReadWord+1,w
 11354  1542  0021               	movlb	1	; select bank1
 11355  1543  00E6               	movwf	(_bottom_push_state+1)^(0+128)
 11356  1544  0020               	movlb	0	; select bank0
 11357  1545  0820               	movf	?_FLASH_ReadWord,w
 11358  1546  0021               	movlb	1	; select bank1
 11359  1547  00E5               	movwf	_bottom_push_state^(0+128)
 11360                           
 11361                           ;user.c: 187: LATGbits.LATG1 = !switchBypass_state;
 11362  1548  0020               	movlb	0	; select bank0
 11363  1549  086F               	movf	_switchBypass_state,w
 11364  154A  1D03               	btfss	3,2
 11365  154B  2D4F               	goto	u3210
 11366  154C  0027               	movlb	7	; select bank7
 11367  154D  148D               	bsf	13,1	;volatile
 11368  154E  2D51               	goto	l3527
 11369  154F                     u3210:	
 11370  154F  0027               	movlb	7	; select bank7
 11371  1550  108D               	bcf	13,1	;volatile
 11372  1551                     l3527:	
 11373                           
 11374                           ;user.c: 188: LATGbits.LATG2 = switchBypass_state;
 11375  1551  0020               	movlb	0	; select bank0
 11376  1552  0C6F               	rrf	_switchBypass_state,w
 11377  1553  0027               	movlb	7	; select bank7
 11378  1554  1C03               	skipc
 11379  1555  110D               	bcf	13,2	;volatile
 11380  1556  1803               	skipnc
 11381  1557  150D               	bsf	13,2	;volatile
 11382                           
 11383                           ;user.c: 189: LATBbits.LATB2 = 0;
 11384  1558  0022               	movlb	2	; select bank2
 11385  1559  110D               	bcf	13,2	;volatile
 11386                           
 11387                           ;user.c: 190: LATBbits.LATB3 = 0;
 11388  155A  118D               	bcf	13,3	;volatile
 11389                           
 11390                           ;user.c: 192: LATBbits.LATB4 = 0;
 11391  155B  120D               	bcf	13,4	;volatile
 11392                           
 11393                           ;user.c: 193: LATBbits.LATB5 = 0;
 11394  155C  128D               	bcf	13,5	;volatile
 11395                           
 11396                           ;user.c: 195: LATBbits.LATB1 = 0;
 11397  155D  108D               	bcf	13,1	;volatile
 11398                           
 11399                           ;user.c: 196: LATBbits.LATB0 = 0;
 11400  155E  100D               	bcf	13,0	;volatile
 11401                           
 11402                           ;user.c: 199: set_leds_top(top_push_state, 1);
 11403  155F  0021               	movlb	1	; select bank1
 11404  1560  086C               	movf	(_top_push_state+1)^(0+128),w
 11405  1561  0020               	movlb	0	; select bank0
 11406  1562  00A1               	movwf	set_leds_top@x+1
 11407  1563  0021               	movlb	1	; select bank1
 11408  1564  086B               	movf	_top_push_state^(0+128),w
 11409  1565  0020               	movlb	0	; select bank0
 11410  1566  00A0               	movwf	set_leds_top@x
 11411  1567  3001               	movlw	1
 11412  1568  00A2               	movwf	set_leds_top@ledState
 11413  1569  3000               	movlw	0
 11414  156A  00A3               	movwf	set_leds_top@ledState+1
 11415  156B  3195  25CB  3195   	fcall	_set_leds_top
 11416                           
 11417                           ;user.c: 200: set_leds_bottom(bottom_push_state);
 11418  156E  0021               	movlb	1	; select bank1
 11419  156F  0866               	movf	(_bottom_push_state+1)^(0+128),w
 11420  1570  0020               	movlb	0	; select bank0
 11421  1571  00A1               	movwf	set_leds_bottom@x+1
 11422  1572  0021               	movlb	1	; select bank1
 11423  1573  0865               	movf	_bottom_push_state^(0+128),w
 11424  1574  0020               	movlb	0	; select bank0
 11425  1575  00A0               	movwf	set_leds_bottom@x
 11426  1576  3192  223F         	fcall	_set_leds_bottom
 11427  1578  0008               	return
 11428  1579                     __end_of_ReadSavedSettings:	
 11429                           
 11430                           	psect	text35
 11431  15CB                     __ptext35:	
 11432 ;; *************** function _set_leds_top *****************
 11433 ;; Defined at:
 11434 ;;		line 16 in file "LEDs.c"
 11435 ;; Parameters:    Size  Location     Type
 11436 ;;  x               2    0[BANK0 ] int 
 11437 ;;  ledState        2    2[BANK0 ] int 
 11438 ;; Auto vars:     Size  Location     Type
 11439 ;;		None
 11440 ;; Return value:  Size  Location     Type
 11441 ;;                  1    wreg      void 
 11442 ;; Registers used:
 11443 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11444 ;; Tracked objects:
 11445 ;;		On entry : 0/0
 11446 ;;		On exit  : 0/0
 11447 ;;		Unchanged: 0/0
 11448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11449 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11450 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11453 ;;Total ram usage:        4 bytes
 11454 ;; Hardware stack levels used:    1
 11455 ;; Hardware stack levels required when called:    2
 11456 ;; This function calls:
 11457 ;;		Nothing
 11458 ;; This function is called by:
 11459 ;;		_ReadSavedSettings
 11460 ;;		_star_tactiles
 11461 ;;		_solidring_tactiles
 11462 ;;		_read_top_tactile
 11463 ;;		_ring_tactiles
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           
 11468                           ;psect for function _set_leds_top
 11469  15CB                     _set_leds_top:	
 11470                           
 11471                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11472                           
 11473                           ;incstack = 0
 11474                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11475  15CB  0027               	movlb	7	; select bank7
 11476  15CC  100C               	bcf	12,0	;volatile
 11477                           
 11478                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11479  15CD  108C               	bcf	12,1	;volatile
 11480                           
 11481                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11482  15CE  110C               	bcf	12,2	;volatile
 11483                           
 11484                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11485  15CF  118C               	bcf	12,3	;volatile
 11486                           
 11487                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11488  15D0  120C               	bcf	12,4	;volatile
 11489                           
 11490                           ;LEDs.c: 22: switch (x) {
 11491  15D1  2E01               	goto	l3005
 11492  15D2                     l2993:	
 11493                           ;LEDs.c: 23: case 1:
 11494                           
 11495                           
 11496                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11497  15D2  0020               	movlb	0	; select bank0
 11498  15D3  0C22               	rrf	set_leds_top@ledState,w
 11499  15D4  0027               	movlb	7	; select bank7
 11500  15D5  1C03               	skipc
 11501  15D6  100C               	bcf	12,0	;volatile
 11502  15D7  1803               	skipnc
 11503  15D8  140C               	bsf	12,0	;volatile
 11504                           
 11505                           ;LEDs.c: 25: break;
 11506  15D9  0008               	return
 11507  15DA                     l2995:	
 11508                           ;LEDs.c: 26: case 2:
 11509                           
 11510                           
 11511                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11512  15DA  0020               	movlb	0	; select bank0
 11513  15DB  0C22               	rrf	set_leds_top@ledState,w
 11514  15DC  0027               	movlb	7	; select bank7
 11515  15DD  1C03               	skipc
 11516  15DE  108C               	bcf	12,1	;volatile
 11517  15DF  1803               	skipnc
 11518  15E0  148C               	bsf	12,1	;volatile
 11519                           
 11520                           ;LEDs.c: 28: break;
 11521  15E1  0008               	return
 11522  15E2                     l2997:	
 11523                           ;LEDs.c: 29: case 3:
 11524                           
 11525                           
 11526                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11527  15E2  0020               	movlb	0	; select bank0
 11528  15E3  0C22               	rrf	set_leds_top@ledState,w
 11529  15E4  0027               	movlb	7	; select bank7
 11530  15E5  1C03               	skipc
 11531  15E6  110C               	bcf	12,2	;volatile
 11532  15E7  1803               	skipnc
 11533  15E8  150C               	bsf	12,2	;volatile
 11534                           
 11535                           ;LEDs.c: 31: break;
 11536  15E9  0008               	return
 11537  15EA                     l2999:	
 11538                           ;LEDs.c: 32: case 4:
 11539                           
 11540                           
 11541                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11542  15EA  0020               	movlb	0	; select bank0
 11543  15EB  0C22               	rrf	set_leds_top@ledState,w
 11544  15EC  0027               	movlb	7	; select bank7
 11545  15ED  1C03               	skipc
 11546  15EE  118C               	bcf	12,3	;volatile
 11547  15EF  1803               	skipnc
 11548  15F0  158C               	bsf	12,3	;volatile
 11549                           
 11550                           ;LEDs.c: 34: break;
 11551  15F1  0008               	return
 11552  15F2                     l3001:	
 11553                           ;LEDs.c: 35: case 5:
 11554                           
 11555                           
 11556                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11557  15F2  0020               	movlb	0	; select bank0
 11558  15F3  0C22               	rrf	set_leds_top@ledState,w
 11559  15F4  0027               	movlb	7	; select bank7
 11560  15F5  1C03               	skipc
 11561  15F6  120C               	bcf	12,4	;volatile
 11562  15F7  1803               	skipnc
 11563  15F8  160C               	bsf	12,4	;volatile
 11564                           
 11565                           ;LEDs.c: 39: break;
 11566                           
 11567                           ;LEDs.c: 38: case 6:
 11568                           
 11569                           ;LEDs.c: 37: break;
 11570  15F9  0008               	return
 11571  15FA                     l631:	
 11572                           ;LEDs.c: 40: case 100:
 11573                           
 11574                           
 11575                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11576  15FA  0027               	movlb	7	; select bank7
 11577  15FB  140C               	bsf	12,0	;volatile
 11578                           
 11579                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11580  15FC  148C               	bsf	12,1	;volatile
 11581                           
 11582                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11583  15FD  150C               	bsf	12,2	;volatile
 11584                           
 11585                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11586  15FE  158C               	bsf	12,3	;volatile
 11587                           
 11588                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11589  15FF  160C               	bsf	12,4	;volatile
 11590                           
 11591                           ;LEDs.c: 47: }
 11592                           
 11593                           ;LEDs.c: 46: break;
 11594  1600  0008               	return
 11595  1601                     l3005:	
 11596                           
 11597                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11598                           ; Switch size 1, requested type "space"
 11599                           ; Number of cases is 1, Range of values is 0 to 0
 11600                           ; switch strategies available:
 11601                           ; Name         Instructions Cycles
 11602                           ; simple_byte            4     3 (average)
 11603                           ; direct_byte            8     6 (fixed)
 11604                           ; jumptable            260     6 (fixed)
 11605                           ;	Chosen strategy is simple_byte
 11606  1601  0020               	movlb	0	; select bank0
 11607  1602  0821               	movf	set_leds_top@x+1,w
 11608  1603  3A00               	xorlw	0	; case 0
 11609  1604  1903               	skipnz
 11610  1605  2E07               	goto	l4397
 11611  1606  2E1E               	goto	l632
 11612  1607                     l4397:	
 11613                           
 11614                           ; Switch size 1, requested type "space"
 11615                           ; Number of cases is 7, Range of values is 1 to 100
 11616                           ; switch strategies available:
 11617                           ; Name         Instructions Cycles
 11618                           ; simple_byte           22    12 (average)
 11619                           ; direct_byte          209     9 (fixed)
 11620                           ; jumptable            263     9 (fixed)
 11621                           ;	Chosen strategy is simple_byte
 11622  1607  0820               	movf	set_leds_top@x,w
 11623  1608  3A01               	xorlw	1	; case 1
 11624  1609  1903               	skipnz
 11625  160A  2DD2               	goto	l2993
 11626  160B  3A03               	xorlw	3	; case 2
 11627  160C  1903               	skipnz
 11628  160D  2DDA               	goto	l2995
 11629  160E  3A01               	xorlw	1	; case 3
 11630  160F  1903               	skipnz
 11631  1610  2DE2               	goto	l2997
 11632  1611  3A07               	xorlw	7	; case 4
 11633  1612  1903               	skipnz
 11634  1613  2DEA               	goto	l2999
 11635  1614  3A01               	xorlw	1	; case 5
 11636  1615  1903               	skipnz
 11637  1616  2DF2               	goto	l3001
 11638  1617  3A03               	xorlw	3	; case 6
 11639  1618  1903               	skipnz
 11640  1619  2E1E               	goto	l632
 11641  161A  3A62               	xorlw	98	; case 100
 11642  161B  1903               	skipnz
 11643  161C  2DFA               	goto	l631
 11644  161D  2E1E               	goto	l632
 11645  161E                     l632:	
 11646  161E  0008               	return
 11647  161F                     __end_of_set_leds_top:	
 11648                           
 11649                           	psect	text36
 11650  123F                     __ptext36:	
 11651 ;; *************** function _set_leds_bottom *****************
 11652 ;; Defined at:
 11653 ;;		line 51 in file "LEDs.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;  x               2    0[BANK0 ] int 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;		None
 11658 ;; Return value:  Size  Location     Type
 11659 ;;                  1    wreg      void 
 11660 ;; Registers used:
 11661 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11662 ;; Tracked objects:
 11663 ;;		On entry : 0/0
 11664 ;;		On exit  : 0/0
 11665 ;;		Unchanged: 0/0
 11666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11667 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11670 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11671 ;;Total ram usage:        2 bytes
 11672 ;; Hardware stack levels used:    1
 11673 ;; Hardware stack levels required when called:    2
 11674 ;; This function calls:
 11675 ;;		Nothing
 11676 ;; This function is called by:
 11677 ;;		_ReadSavedSettings
 11678 ;;		_star_tactiles
 11679 ;;		_solidring_tactiles
 11680 ;;		_read_bottom_tactile
 11681 ;;		_ring_tactiles
 11682 ;; This function uses a non-reentrant model
 11683 ;;
 11684                           
 11685                           
 11686                           ;psect for function _set_leds_bottom
 11687  123F                     _set_leds_bottom:	
 11688                           
 11689                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11690                           
 11691                           ;incstack = 0
 11692                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11693  123F  0022               	movlb	2	; select bank2
 11694  1240  100F               	bcf	15,0	;volatile
 11695                           
 11696                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11697  1241  108F               	bcf	15,1	;volatile
 11698                           
 11699                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11700  1242  110F               	bcf	15,2	;volatile
 11701                           
 11702                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11703  1243  118F               	bcf	15,3	;volatile
 11704                           
 11705                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11706  1244  120F               	bcf	15,4	;volatile
 11707                           
 11708                           ;LEDs.c: 57: switch (x) {
 11709  1245  2A5C               	goto	l3027
 11710  1246                     l636:	
 11711                           ;LEDs.c: 58: case 1:
 11712                           
 11713                           
 11714                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11715  1246  0022               	movlb	2	; select bank2
 11716  1247  140F               	bsf	15,0	;volatile
 11717                           
 11718                           ;LEDs.c: 60: break;
 11719  1248  0008               	return
 11720  1249                     l638:	
 11721                           ;LEDs.c: 61: case 2:
 11722                           
 11723                           
 11724                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11725  1249  0022               	movlb	2	; select bank2
 11726  124A  148F               	bsf	15,1	;volatile
 11727                           
 11728                           ;LEDs.c: 63: break;
 11729  124B  0008               	return
 11730  124C                     l639:	
 11731                           ;LEDs.c: 64: case 3:
 11732                           
 11733                           
 11734                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11735  124C  0022               	movlb	2	; select bank2
 11736  124D  150F               	bsf	15,2	;volatile
 11737                           
 11738                           ;LEDs.c: 66: break;
 11739  124E  0008               	return
 11740  124F                     l640:	
 11741                           ;LEDs.c: 67: case 4:
 11742                           
 11743                           
 11744                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11745  124F  0022               	movlb	2	; select bank2
 11746  1250  158F               	bsf	15,3	;volatile
 11747                           
 11748                           ;LEDs.c: 69: break;
 11749  1251  0008               	return
 11750  1252                     l641:	
 11751                           ;LEDs.c: 70: case 5:
 11752                           
 11753                           
 11754                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11755  1252  0022               	movlb	2	; select bank2
 11756  1253  160F               	bsf	15,4	;volatile
 11757                           
 11758                           ;LEDs.c: 74: break;
 11759                           
 11760                           ;LEDs.c: 73: case 6:
 11761                           
 11762                           ;LEDs.c: 72: break;
 11763  1254  0008               	return
 11764  1255                     l643:	
 11765                           ;LEDs.c: 75: case 100:
 11766                           
 11767                           
 11768                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11769  1255  0022               	movlb	2	; select bank2
 11770  1256  140F               	bsf	15,0	;volatile
 11771                           
 11772                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11773  1257  148F               	bsf	15,1	;volatile
 11774                           
 11775                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11776  1258  150F               	bsf	15,2	;volatile
 11777                           
 11778                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11779  1259  158F               	bsf	15,3	;volatile
 11780                           
 11781                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11782  125A  160F               	bsf	15,4	;volatile
 11783                           
 11784                           ;LEDs.c: 82: }
 11785                           
 11786                           ;LEDs.c: 81: break;
 11787  125B  0008               	return
 11788  125C                     l3027:	
 11789                           
 11790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11791                           ; Switch size 1, requested type "space"
 11792                           ; Number of cases is 1, Range of values is 0 to 0
 11793                           ; switch strategies available:
 11794                           ; Name         Instructions Cycles
 11795                           ; simple_byte            4     3 (average)
 11796                           ; direct_byte            8     6 (fixed)
 11797                           ; jumptable            260     6 (fixed)
 11798                           ;	Chosen strategy is simple_byte
 11799  125C  0020               	movlb	0	; select bank0
 11800  125D  0821               	movf	set_leds_bottom@x+1,w
 11801  125E  3A00               	xorlw	0	; case 0
 11802  125F  1903               	skipnz
 11803  1260  2A62               	goto	l4399
 11804  1261  2A79               	goto	l644
 11805  1262                     l4399:	
 11806                           
 11807                           ; Switch size 1, requested type "space"
 11808                           ; Number of cases is 7, Range of values is 1 to 100
 11809                           ; switch strategies available:
 11810                           ; Name         Instructions Cycles
 11811                           ; simple_byte           22    12 (average)
 11812                           ; direct_byte          209     9 (fixed)
 11813                           ; jumptable            263     9 (fixed)
 11814                           ;	Chosen strategy is simple_byte
 11815  1262  0820               	movf	set_leds_bottom@x,w
 11816  1263  3A01               	xorlw	1	; case 1
 11817  1264  1903               	skipnz
 11818  1265  2A46               	goto	l636
 11819  1266  3A03               	xorlw	3	; case 2
 11820  1267  1903               	skipnz
 11821  1268  2A49               	goto	l638
 11822  1269  3A01               	xorlw	1	; case 3
 11823  126A  1903               	skipnz
 11824  126B  2A4C               	goto	l639
 11825  126C  3A07               	xorlw	7	; case 4
 11826  126D  1903               	skipnz
 11827  126E  2A4F               	goto	l640
 11828  126F  3A01               	xorlw	1	; case 5
 11829  1270  1903               	skipnz
 11830  1271  2A52               	goto	l641
 11831  1272  3A03               	xorlw	3	; case 6
 11832  1273  1903               	skipnz
 11833  1274  2A79               	goto	l644
 11834  1275  3A62               	xorlw	98	; case 100
 11835  1276  1903               	skipnz
 11836  1277  2A55               	goto	l643
 11837  1278  2A79               	goto	l644
 11838  1279                     l644:	
 11839  1279  0008               	return
 11840  127A                     __end_of_set_leds_bottom:	
 11841                           
 11842                           	psect	text37
 11843  1FBE                     __ptext37:	
 11844 ;; *************** function _FLASH_ReadWord *****************
 11845 ;; Defined at:
 11846 ;;		line 58 in file "memory.c"
 11847 ;; Parameters:    Size  Location     Type
 11848 ;;  flashAddr       2    0[BANK0 ] unsigned int 
 11849 ;; Auto vars:     Size  Location     Type
 11850 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 11851 ;; Return value:  Size  Location     Type
 11852 ;;                  2    0[BANK0 ] unsigned int 
 11853 ;; Registers used:
 11854 ;;		wreg, status,2, status,0
 11855 ;; Tracked objects:
 11856 ;;		On entry : 0/0
 11857 ;;		On exit  : 0/0
 11858 ;;		Unchanged: 0/0
 11859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11860 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11861 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11863 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11864 ;;Total ram usage:        3 bytes
 11865 ;; Hardware stack levels used:    1
 11866 ;; Hardware stack levels required when called:    2
 11867 ;; This function calls:
 11868 ;;		Nothing
 11869 ;; This function is called by:
 11870 ;;		_ReadSavedSettings
 11871 ;;		_FLASH_WriteWord
 11872 ;; This function uses a non-reentrant model
 11873 ;;
 11874                           
 11875                           
 11876                           ;psect for function _FLASH_ReadWord
 11877  1FBE                     _FLASH_ReadWord:	
 11878                           
 11879                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11880                           
 11881                           ;incstack = 0
 11882                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11883  1FBE  3000               	movlw	0
 11884  1FBF  1B8B               	btfsc	11,7	;volatile
 11885  1FC0  3001               	movlw	1
 11886  1FC1  0020               	movlb	0	; select bank0
 11887  1FC2  00A2               	movwf	FLASH_ReadWord@GIEBitValue
 11888                           
 11889                           ;memory.c: 61: INTCONbits.GIE = 0;
 11890  1FC3  138B               	bcf	11,7	;volatile
 11891                           
 11892                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11893  1FC4  0820               	movf	FLASH_ReadWord@flashAddr,w
 11894  1FC5  0023               	movlb	3	; select bank3
 11895  1FC6  0091               	movwf	17	;volatile
 11896                           
 11897                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11898  1FC7  0020               	movlb	0	; select bank0
 11899  1FC8  0821               	movf	FLASH_ReadWord@flashAddr+1,w
 11900  1FC9  0023               	movlb	3	; select bank3
 11901  1FCA  0092               	movwf	18	;volatile
 11902                           
 11903                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11904  1FCB  1315               	bcf	21,6	;volatile
 11905                           
 11906                           ;memory.c: 66: PMCON1bits.RD = 1;
 11907  1FCC  1415               	bsf	21,0	;volatile
 11908                           
 11909                           ;memory.c: 67: __nop();
 11910  1FCD  0000               	nop
 11911                           
 11912                           ;memory.c: 68: __nop();
 11913  1FCE  0000               	nop
 11914                           
 11915                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11916  1FCF  0020               	movlb	0	; select bank0
 11917  1FD0  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
 11918  1FD1  1C03               	skipc
 11919  1FD2  138B               	bcf	11,7	;volatile
 11920  1FD3  1803               	skipnc
 11921  1FD4  178B               	bsf	11,7	;volatile
 11922                           
 11923                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11924  1FD5  0023               	movlb	3	; select bank3
 11925  1FD6  0814               	movf	20,w	;volatile
 11926  1FD7  0020               	movlb	0	; select bank0
 11927  1FD8  00A1               	movwf	?_FLASH_ReadWord+1
 11928  1FD9  0023               	movlb	3	; select bank3
 11929  1FDA  0813               	movf	19,w	;volatile
 11930  1FDB  0020               	movlb	0	; select bank0
 11931  1FDC  00A0               	movwf	?_FLASH_ReadWord
 11932  1FDD  0008               	return
 11933  1FDE                     __end_of_FLASH_ReadWord:	
 11934                           
 11935                           	psect	text38
 11936  100A                     __ptext38:	
 11937 ;; *************** function _InitializeTaps *****************
 11938 ;; Defined at:
 11939 ;;		line 175 in file "user.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;		None
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;  itap            2    1[BANK0 ] int 
 11944 ;; Return value:  Size  Location     Type
 11945 ;;                  1    wreg      void 
 11946 ;; Registers used:
 11947 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11954 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11955 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11956 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11957 ;;Total ram usage:        3 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    2
 11960 ;; This function calls:
 11961 ;;		Nothing
 11962 ;; This function is called by:
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _InitializeTaps
 11969  100A                     _InitializeTaps:	
 11970                           
 11971                           ;user.c: 176: for (int itap = 0; itap < 12; itap++) {
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11975  100A  0020               	movlb	0	; select bank0
 11976  100B  01A1               	clrf	InitializeTaps@itap
 11977  100C  01A2               	clrf	InitializeTaps@itap+1
 11978  100D                     L9:	
 11979  100D  0822               	movf	InitializeTaps@itap+1,w
 11980  100E  3A80               	xorlw	128
 11981  100F  00A0               	movwf	??_InitializeTaps
 11982  1010  3080               	movlw	128
 11983  1011  0220               	subwf	??_InitializeTaps,w
 11984  1012  1D03               	skipz
 11985  1013  2816               	goto	u3185
 11986  1014  300C               	movlw	12
 11987  1015  0221               	subwf	InitializeTaps@itap,w
 11988  1016                     u3185:	
 11989  1016  1803               	btfsc	3,0
 11990  1017  0008               	return
 11991                           
 11992                           ;user.c: 177: tap[itap] = 0;
 11993  1018  0020               	movlb	0	; select bank0
 11994  1019  0821               	movf	InitializeTaps@itap,w
 11995  101A  00A0               	movwf	??_InitializeTaps
 11996  101B  3001               	movlw	1
 11997  101C                     u3195:	
 11998  101C  35A0               	lslf	??_InitializeTaps,f
 11999  101D  3EFF               	addlw	-1
 12000  101E  1D03               	skipz
 12001  101F  281C               	goto	u3195
 12002  1020  3520               	lslf	??_InitializeTaps,w
 12003  1021  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12004  1022  0086               	movwf	6
 12005  1023  3001               	movlw	1	; select bank3/4
 12006  1024  0087               	movwf	7
 12007  1025  3000               	movlw	0
 12008  1026  3FC0               	movwi [0]fsr1
 12009  1027  3000               	movlw	0
 12010  1028  3FC1               	movwi [1]fsr1
 12011  1029  3FC2               	movwi [2]fsr1
 12012  102A  3FC3               	movwi [3]fsr1
 12013  102B  3001               	movlw	1
 12014  102C  07A1               	addwf	InitializeTaps@itap,f
 12015  102D  3000               	movlw	0
 12016  102E  3DA2               	addwfc	InitializeTaps@itap+1,f
 12017  102F  280D               	goto	L9
 12018  1030                     __end_of_InitializeTaps:	
 12019                           
 12020                           	psect	text39
 12021  105B                     __ptext39:	
 12022 ;; *************** function _InitApp *****************
 12023 ;; Defined at:
 12024 ;;		line 23 in file "user.c"
 12025 ;; Parameters:    Size  Location     Type
 12026 ;;		None
 12027 ;; Auto vars:     Size  Location     Type
 12028 ;;		None
 12029 ;; Return value:  Size  Location     Type
 12030 ;;                  1    wreg      void 
 12031 ;; Registers used:
 12032 ;;		wreg, status,2, status,0, pclath, cstack
 12033 ;; Tracked objects:
 12034 ;;		On entry : 0/0
 12035 ;;		On exit  : 0/0
 12036 ;;		Unchanged: 0/0
 12037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12039 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12040 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12041 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12042 ;;Total ram usage:        0 bytes
 12043 ;; Hardware stack levels used:    1
 12044 ;; Hardware stack levels required when called:    4
 12045 ;; This function calls:
 12046 ;;		_init_adc
 12047 ;;		_init_pwm
 12048 ;; This function is called by:
 12049 ;;		_main
 12050 ;; This function uses a non-reentrant model
 12051 ;;
 12052                           
 12053                           
 12054                           ;psect for function _InitApp
 12055  105B                     _InitApp:	
 12056                           
 12057                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12058                           
 12059                           ;incstack = 0
 12060                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12061  105B  0021               	movlb	1	; select bank1
 12062  105C  100D               	bcf	13,0	;volatile
 12063                           
 12064                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12065  105D  108D               	bcf	13,1	;volatile
 12066                           
 12067                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12068  105E  110D               	bcf	13,2	;volatile
 12069                           
 12070                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12071  105F  118D               	bcf	13,3	;volatile
 12072                           
 12073                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12074  1060  120D               	bcf	13,4	;volatile
 12075                           
 12076                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12077  1061  128D               	bcf	13,5	;volatile
 12078                           
 12079                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12080  1062  140E               	bsf	14,0	;volatile
 12081                           
 12082                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12083  1063  120E               	bcf	14,4	;volatile
 12084                           
 12085                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12086  1064  128E               	bcf	14,5	;volatile
 12087                           
 12088                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12089  1065  100F               	bcf	15,0	;volatile
 12090                           
 12091                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12092  1066  108F               	bcf	15,1	;volatile
 12093                           
 12094                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12095  1067  110F               	bcf	15,2	;volatile
 12096                           
 12097                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12098  1068  118F               	bcf	15,3	;volatile
 12099                           
 12100                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12101  1069  120F               	bcf	15,4	;volatile
 12102                           
 12103                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12104  106A  168F               	bsf	15,5	;volatile
 12105                           
 12106                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12107  106B  170F               	bsf	15,6	;volatile
 12108                           
 12109                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12110  106C  178F               	bsf	15,7	;volatile
 12111                           
 12112                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12113  106D  1410               	bsf	16,0	;volatile
 12114                           
 12115                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12116  106E  1490               	bsf	16,1	;volatile
 12117                           
 12118                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12119  106F  0023               	movlb	3	; select bank3
 12120  1070  1010               	bcf	16,0	;volatile
 12121                           
 12122                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12123  1071  1090               	bcf	16,1	;volatile
 12124                           
 12125                           ;user.c: 53: PORTEbits.RE0 = 0;
 12126  1072  0020               	movlb	0	; select bank0
 12127  1073  1010               	bcf	16,0	;volatile
 12128                           
 12129                           ;user.c: 54: PORTEbits.RE1 = 0;
 12130  1074  1090               	bcf	16,1	;volatile
 12131                           
 12132                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12133  1075  0026               	movlb	6	; select bank6
 12134  1076  100C               	bcf	12,0	;volatile
 12135                           
 12136                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12137  1077  108C               	bcf	12,1	;volatile
 12138                           
 12139                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12140  1078  110C               	bcf	12,2	;volatile
 12141                           
 12142                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12143  1079  118C               	bcf	12,3	;volatile
 12144                           
 12145                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12146  107A  120C               	bcf	12,4	;volatile
 12147                           
 12148                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12149  107B  128C               	bcf	12,5	;volatile
 12150                           
 12151                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12152  107C  170C               	bsf	12,6	;volatile
 12153                           
 12154                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12155  107D  0028               	movlb	8	; select bank8
 12156  107E  130C               	bcf	12,6	;volatile
 12157                           
 12158                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12159  107F  0026               	movlb	6	; select bank6
 12160  1080  108D               	bcf	13,1	;volatile
 12161                           
 12162                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12163  1081  110D               	bcf	13,2	;volatile
 12164                           
 12165                           ;user.c: 68: init_adc();
 12166  1082  3190  2000  3190   	fcall	_init_adc
 12167                           
 12168                           ;user.c: 69: init_pwm();
 12169  1085  3193  2374         	fcall	_init_pwm
 12170                           
 12171                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12172  1087  178B               	bsf	11,7	;volatile
 12173                           
 12174                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12175  1088  168B               	bsf	11,5	;volatile
 12176                           
 12177                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12178  1089  110B               	bcf	11,2	;volatile
 12179  108A  0008               	return
 12180  108B                     __end_of_InitApp:	
 12181                           
 12182                           	psect	text40
 12183  1374                     __ptext40:	
 12184 ;; *************** function _init_pwm *****************
 12185 ;; Defined at:
 12186 ;;		line 117 in file "user.c"
 12187 ;; Parameters:    Size  Location     Type
 12188 ;;		None
 12189 ;; Auto vars:     Size  Location     Type
 12190 ;;		None
 12191 ;; Return value:  Size  Location     Type
 12192 ;;                  1    wreg      void 
 12193 ;; Registers used:
 12194 ;;		wreg, status,2, status,0, pclath, cstack
 12195 ;; Tracked objects:
 12196 ;;		On entry : 0/0
 12197 ;;		On exit  : 0/0
 12198 ;;		Unchanged: 0/0
 12199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12203 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12204 ;;Total ram usage:        0 bytes
 12205 ;; Hardware stack levels used:    1
 12206 ;; Hardware stack levels required when called:    3
 12207 ;; This function calls:
 12208 ;;		_init_timer0
 12209 ;;		_init_timer2
 12210 ;; This function is called by:
 12211 ;;		_InitApp
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           
 12216                           ;psect for function _init_pwm
 12217  1374                     _init_pwm:	
 12218                           
 12219                           ;user.c: 118: APFCONbits.CCP2SEL = 0;
 12220                           
 12221                           ;incstack = 0
 12222                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12223  1374  0022               	movlb	2	; select bank2
 12224  1375  101D               	bcf	29,0	;volatile
 12225                           
 12226                           ;user.c: 119: TRISCbits.TRISC2 = 0;
 12227  1376  0021               	movlb	1	; select bank1
 12228  1377  110E               	bcf	14,2	;volatile
 12229                           
 12230                           ;user.c: 120: TRISCbits.TRISC1 = 0;
 12231  1378  108E               	bcf	14,1	;volatile
 12232                           
 12233                           ;user.c: 121: TRISGbits.TRISG0 = 0;
 12234  1379  0026               	movlb	6	; select bank6
 12235  137A  100D               	bcf	13,0	;volatile
 12236                           
 12237                           ;user.c: 122: TRISGbits.TRISG3 = 0;
 12238  137B  118D               	bcf	13,3	;volatile
 12239                           
 12240                           ;user.c: 123: TRISGbits.TRISG4 = 0;
 12241  137C  120D               	bcf	13,4	;volatile
 12242                           
 12243                           ;user.c: 124: TRISEbits.TRISE6 = 0;
 12244  137D  0021               	movlb	1	; select bank1
 12245  137E  1310               	bcf	16,6	;volatile
 12246                           
 12247                           ;user.c: 125: TRISEbits.TRISE5 = 0;
 12248  137F  1290               	bcf	16,5	;volatile
 12249                           
 12250                           ;user.c: 126: TRISEbits.TRISE4 = 0;
 12251  1380  1210               	bcf	16,4	;volatile
 12252                           
 12253                           ;user.c: 127: TRISEbits.TRISE3 = 0;
 12254  1381  1190               	bcf	16,3	;volatile
 12255                           
 12256                           ;user.c: 128: TRISEbits.TRISE2 = 0;
 12257  1382  1110               	bcf	16,2	;volatile
 12258                           
 12259                           ;user.c: 129: CCP1CONbits.CCP1M = 0b1111;
 12260  1383  300F               	movlw	15
 12261  1384  0025               	movlb	5	; select bank5
 12262  1385  0493               	iorwf	19,f	;volatile
 12263                           
 12264                           ;user.c: 130: CCP2CONbits.CCP2M = 0b1111;
 12265  1386  300F               	movlw	15
 12266  1387  049A               	iorwf	26,f	;volatile
 12267                           
 12268                           ;user.c: 131: CCP3CONbits.CCP3M = 0b1111;
 12269  1388  300F               	movlw	15
 12270  1389  0026               	movlb	6	; select bank6
 12271  138A  0493               	iorwf	19,f	;volatile
 12272                           
 12273                           ;user.c: 132: CCP4CONbits.CCP4M = 0b1111;
 12274  138B  300F               	movlw	15
 12275  138C  049A               	iorwf	26,f	;volatile
 12276                           
 12277                           ;user.c: 133: CCP5CONbits.CCP5M = 0b1111;
 12278  138D  300F               	movlw	15
 12279  138E  049E               	iorwf	30,f	;volatile
 12280                           
 12281                           ;user.c: 134: CCP6CONbits.CCP6M = 0b1111;
 12282  138F  300F               	movlw	15
 12283  1390  002C               	movlb	12	; select bank12
 12284  1391  0493               	iorwf	19,f	;volatile
 12285                           
 12286                           ;user.c: 135: CCP7CONbits.CCP7M = 0b1111;
 12287  1392  300F               	movlw	15
 12288  1393  0496               	iorwf	22,f	;volatile
 12289                           
 12290                           ;user.c: 136: CCP8CONbits.CCP8M = 0b1111;
 12291  1394  300F               	movlw	15
 12292  1395  0499               	iorwf	25,f	;volatile
 12293                           
 12294                           ;user.c: 137: CCP9CONbits.CCP9M = 0b1111;
 12295  1396  300F               	movlw	15
 12296  1397  049C               	iorwf	28,f	;volatile
 12297                           
 12298                           ;user.c: 138: CCP10CONbits.CCP10M = 0b1111;
 12299  1398  300F               	movlw	15
 12300  1399  049F               	iorwf	31,f	;volatile
 12301                           
 12302                           ;user.c: 139: CCPTMRS0 = 0b00000000;
 12303  139A  0025               	movlb	5	; select bank5
 12304  139B  019D               	clrf	29	;volatile
 12305                           
 12306                           ;user.c: 140: CCPTMRS1 = 0b00000000;
 12307  139C  019E               	clrf	30	;volatile
 12308                           
 12309                           ;user.c: 141: CCPTMRS2 = 0b00000000;
 12310  139D  019F               	clrf	31	;volatile
 12311                           
 12312                           ;user.c: 142: CCPR1 = 50;
 12313  139E  3000               	movlw	0
 12314  139F  0092               	movwf	18	;volatile
 12315  13A0  3032               	movlw	50
 12316  13A1  0091               	movwf	17	;volatile
 12317                           
 12318                           ;user.c: 143: CCPR2 = 100;
 12319  13A2  3000               	movlw	0
 12320  13A3  0099               	movwf	25	;volatile
 12321  13A4  3064               	movlw	100
 12322  13A5  0098               	movwf	24	;volatile
 12323                           
 12324                           ;user.c: 144: CCPR3 = 150;
 12325  13A6  3000               	movlw	0
 12326  13A7  0026               	movlb	6	; select bank6
 12327  13A8  0092               	movwf	18	;volatile
 12328  13A9  3096               	movlw	150
 12329  13AA  0091               	movwf	17	;volatile
 12330                           
 12331                           ;user.c: 145: CCPR4 = 200;
 12332  13AB  3000               	movlw	0
 12333  13AC  0099               	movwf	25	;volatile
 12334  13AD  30C8               	movlw	200
 12335  13AE  0098               	movwf	24	;volatile
 12336                           
 12337                           ;user.c: 146: init_timer2();
 12338  13AF  319E  26E9  3193   	fcall	_init_timer2
 12339                           
 12340                           ;user.c: 147: init_timer0();
 12341  13B2  319E  26E2         	fcall	_init_timer0
 12342  13B4  0008               	return
 12343  13B5                     __end_of_init_pwm:	
 12344                           
 12345                           	psect	text41
 12346  1EE9                     __ptext41:	
 12347 ;; *************** function _init_timer2 *****************
 12348 ;; Defined at:
 12349 ;;		line 150 in file "user.c"
 12350 ;; Parameters:    Size  Location     Type
 12351 ;;		None
 12352 ;; Auto vars:     Size  Location     Type
 12353 ;;		None
 12354 ;; Return value:  Size  Location     Type
 12355 ;;                  1    wreg      void 
 12356 ;; Registers used:
 12357 ;;		wreg, status,2, status,0
 12358 ;; Tracked objects:
 12359 ;;		On entry : 0/0
 12360 ;;		On exit  : 0/0
 12361 ;;		Unchanged: 0/0
 12362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12367 ;;Total ram usage:        0 bytes
 12368 ;; Hardware stack levels used:    1
 12369 ;; Hardware stack levels required when called:    2
 12370 ;; This function calls:
 12371 ;;		Nothing
 12372 ;; This function is called by:
 12373 ;;		_init_pwm
 12374 ;; This function uses a non-reentrant model
 12375 ;;
 12376                           
 12377                           
 12378                           ;psect for function _init_timer2
 12379  1EE9                     _init_timer2:	
 12380                           
 12381                           ;user.c: 151: T2CONbits.T2OUTPS = 0b0000;
 12382                           
 12383                           ;incstack = 0
 12384                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12385  1EE9  3087               	movlw	-121
 12386  1EEA  0020               	movlb	0	; select bank0
 12387  1EEB  059C               	andwf	28,f	;volatile
 12388                           
 12389                           ;user.c: 152: T2CONbits.T2CKPS = 0b00;
 12390  1EEC  30FC               	movlw	-4
 12391  1EED  059C               	andwf	28,f	;volatile
 12392                           
 12393                           ;user.c: 153: PR2 = 0xFF;
 12394  1EEE  30FF               	movlw	255
 12395  1EEF  009B               	movwf	27	;volatile
 12396                           
 12397                           ;user.c: 154: T2CONbits.TMR2ON = 1;
 12398  1EF0  151C               	bsf	28,2	;volatile
 12399  1EF1  0008               	return
 12400  1EF2                     __end_of_init_timer2:	
 12401                           
 12402                           	psect	text42
 12403  1EE2                     __ptext42:	
 12404 ;; *************** function _init_timer0 *****************
 12405 ;; Defined at:
 12406 ;;		line 157 in file "user.c"
 12407 ;; Parameters:    Size  Location     Type
 12408 ;;		None
 12409 ;; Auto vars:     Size  Location     Type
 12410 ;;		None
 12411 ;; Return value:  Size  Location     Type
 12412 ;;                  1    wreg      void 
 12413 ;; Registers used:
 12414 ;;		None
 12415 ;; Tracked objects:
 12416 ;;		On entry : 0/0
 12417 ;;		On exit  : 0/0
 12418 ;;		Unchanged: 0/0
 12419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12424 ;;Total ram usage:        0 bytes
 12425 ;; Hardware stack levels used:    1
 12426 ;; Hardware stack levels required when called:    2
 12427 ;; This function calls:
 12428 ;;		Nothing
 12429 ;; This function is called by:
 12430 ;;		_init_pwm
 12431 ;; This function uses a non-reentrant model
 12432 ;;
 12433                           
 12434                           
 12435                           ;psect for function _init_timer0
 12436  1EE2                     _init_timer0:	
 12437                           
 12438                           ;user.c: 158: OPTION_REGbits.TMR0CS = 0b0;
 12439                           
 12440                           ;incstack = 0
 12441                           ; Regs used in _init_timer0: []
 12442  1EE2  0021               	movlb	1	; select bank1
 12443  1EE3  1295               	bcf	21,5	;volatile
 12444                           
 12445                           ;user.c: 159: OPTION_REGbits.PSA = 0b0;
 12446  1EE4  1195               	bcf	21,3	;volatile
 12447                           
 12448                           ;user.c: 160: OPTION_REGbits.PS0 = 0b0;
 12449  1EE5  1015               	bcf	21,0	;volatile
 12450                           
 12451                           ;user.c: 161: OPTION_REGbits.PS1 = 0b1;
 12452  1EE6  1495               	bsf	21,1	;volatile
 12453                           
 12454                           ;user.c: 162: OPTION_REGbits.PS2 = 0b0;
 12455  1EE7  1115               	bcf	21,2	;volatile
 12456  1EE8  0008               	return
 12457  1EE9                     __end_of_init_timer0:	
 12458                           
 12459                           	psect	text43
 12460  1000                     __ptext43:	
 12461 ;; *************** function _init_adc *****************
 12462 ;; Defined at:
 12463 ;;		line 103 in file "user.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;		None
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;		None
 12468 ;; Return value:  Size  Location     Type
 12469 ;;                  1    wreg      void 
 12470 ;; Registers used:
 12471 ;;		wreg, status,2, status,0
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12481 ;;Total ram usage:        0 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    2
 12484 ;; This function calls:
 12485 ;;		Nothing
 12486 ;; This function is called by:
 12487 ;;		_InitApp
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           
 12492                           ;psect for function _init_adc
 12493  1000                     _init_adc:	
 12494                           
 12495                           ;user.c: 104: ADCON1bits.ADFM = 0b1;
 12496                           
 12497                           ;incstack = 0
 12498                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12499  1000  0021               	movlb	1	; select bank1
 12500  1001  179E               	bsf	30,7	;volatile
 12501                           
 12502                           ;user.c: 105: ADCON1bits.ADCS = 0b110;
 12503  1002  081E               	movf	30,w	;volatile
 12504  1003  398F               	andlw	-113
 12505  1004  3860               	iorlw	96
 12506  1005  009E               	movwf	30	;volatile
 12507                           
 12508                           ;user.c: 106: ADCON1bits.ADPREF = 0b00;
 12509  1006  30FC               	movlw	-4
 12510  1007  059E               	andwf	30,f	;volatile
 12511                           
 12512                           ;user.c: 107: ADCON0bits.ADON = 0b1;
 12513  1008  141D               	bsf	29,0	;volatile
 12514  1009  0008               	return
 12515  100A                     __end_of_init_adc:	
 12516                           
 12517                           	psect	text44
 12518  1EDA                     __ptext44:	
 12519 ;; *************** function _ConfigureOscillator *****************
 12520 ;; Defined at:
 12521 ;;		line 18 in file "system.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;		None
 12524 ;; Auto vars:     Size  Location     Type
 12525 ;;		None
 12526 ;; Return value:  Size  Location     Type
 12527 ;;                  1    wreg      void 
 12528 ;; Registers used:
 12529 ;;		wreg, status,2, status,0
 12530 ;; Tracked objects:
 12531 ;;		On entry : 0/0
 12532 ;;		On exit  : 0/0
 12533 ;;		Unchanged: 0/0
 12534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12539 ;;Total ram usage:        0 bytes
 12540 ;; Hardware stack levels used:    1
 12541 ;; Hardware stack levels required when called:    2
 12542 ;; This function calls:
 12543 ;;		Nothing
 12544 ;; This function is called by:
 12545 ;;		_main
 12546 ;; This function uses a non-reentrant model
 12547 ;;
 12548                           
 12549                           
 12550                           ;psect for function _ConfigureOscillator
 12551  1EDA                     _ConfigureOscillator:	
 12552                           
 12553                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12554                           
 12555                           ;incstack = 0
 12556                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12557  1EDA  30FC               	movlw	-4
 12558  1EDB  0021               	movlb	1	; select bank1
 12559  1EDC  0599               	andwf	25,f	;volatile
 12560  1EDD  0008               	return
 12561  1EDE                     __end_of_ConfigureOscillator:	
 12562                           
 12563                           	psect	intentry
 12564  0004                     __pintentry:	
 12565 ;; *************** function _isr *****************
 12566 ;; Defined at:
 12567 ;;		line 23 in file "interrupts.c"
 12568 ;; Parameters:    Size  Location     Type
 12569 ;;		None
 12570 ;; Auto vars:     Size  Location     Type
 12571 ;;		None
 12572 ;; Return value:  Size  Location     Type
 12573 ;;                  1    wreg      void 
 12574 ;; Registers used:
 12575 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12576 ;; Tracked objects:
 12577 ;;		On entry : 0/0
 12578 ;;		On exit  : 0/0
 12579 ;;		Unchanged: 0/0
 12580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12583 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12584 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12585 ;;Total ram usage:        5 bytes
 12586 ;; Hardware stack levels used:    1
 12587 ;; Hardware stack levels required when called:    1
 12588 ;; This function calls:
 12589 ;;		i1_set_leds_top
 12590 ;; This function is called by:
 12591 ;;		Interrupt level 1
 12592 ;; This function uses a non-reentrant model
 12593 ;;
 12594                           
 12595  0004                     _isr:	
 12596                           
 12597                           ;incstack = 0
 12598                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12599  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12600  0005  3180               	pagesel	$
 12601  0006  0020               	movlb	0	; select bank0
 12602  0007  087F               	movf	127,w
 12603  0008  00F8               	movwf	??_isr+4
 12604                           
 12605                           ;interrupts.c: 24: extern volatile long timer;
 12606                           ;interrupts.c: 25: extern volatile long sub_timer;
 12607                           ;interrupts.c: 26: extern volatile long tap_timer;
 12608                           ;interrupts.c: 27: extern volatile long mod_timer;
 12609                           ;interrupts.c: 28: extern volatile long baseline_delay_time;
 12610                           ;interrupts.c: 29: extern volatile long delay_time;
 12611                           ;interrupts.c: 30: extern int top_push_state;
 12612                           ;interrupts.c: 31: extern uint8_t feedback_start;
 12613                           ;interrupts.c: 33: if (INTCONbits.TMR0IF == 1) {
 12614  0009  1D0B               	btfss	11,2	;volatile
 12615  000A  2895               	goto	i1l3939
 12616                           
 12617                           ;interrupts.c: 34: timer = timer + 1;
 12618  000B  3001               	movlw	1
 12619  000C  00F4               	movwf	??_isr
 12620  000D  3000               	movlw	0
 12621  000E  00F5               	movwf	??_isr+1
 12622  000F  3000               	movlw	0
 12623  0010  00F6               	movwf	??_isr+2
 12624  0011  3000               	movlw	0
 12625  0012  00F7               	movwf	??_isr+3
 12626  0013  0021               	movlb	1	; select bank1
 12627  0014  0843               	movf	_timer^(0+128),w	;volatile
 12628  0015  07F4               	addwf	??_isr,f
 12629  0016  0844               	movf	(_timer+1)^(0+128),w	;volatile
 12630  0017  3DF5               	addwfc	??_isr+1,f
 12631  0018  0845               	movf	(_timer+2)^(0+128),w	;volatile
 12632  0019  3DF6               	addwfc	??_isr+2,f
 12633  001A  0846               	movf	(_timer+3)^(0+128),w	;volatile
 12634  001B  3DF7               	addwfc	??_isr+3,f
 12635  001C  0877               	movf	??_isr+3,w
 12636  001D  00C6               	movwf	(_timer+3)^(0+128)	;volatile
 12637  001E  0876               	movf	??_isr+2,w
 12638  001F  00C5               	movwf	(_timer+2)^(0+128)	;volatile
 12639  0020  0875               	movf	??_isr+1,w
 12640  0021  00C4               	movwf	(_timer+1)^(0+128)	;volatile
 12641  0022  0874               	movf	??_isr,w
 12642  0023  00C3               	movwf	_timer^(0+128)	;volatile
 12643                           
 12644                           ;interrupts.c: 35: sub_timer = sub_timer + 1;
 12645  0024  3001               	movlw	1
 12646  0025  00F4               	movwf	??_isr
 12647  0026  3000               	movlw	0
 12648  0027  00F5               	movwf	??_isr+1
 12649  0028  3000               	movlw	0
 12650  0029  00F6               	movwf	??_isr+2
 12651  002A  3000               	movlw	0
 12652  002B  00F7               	movwf	??_isr+3
 12653  002C  083F               	movf	_sub_timer^(0+128),w	;volatile
 12654  002D  07F4               	addwf	??_isr,f
 12655  002E  0840               	movf	(_sub_timer+1)^(0+128),w	;volatile
 12656  002F  3DF5               	addwfc	??_isr+1,f
 12657  0030  0841               	movf	(_sub_timer+2)^(0+128),w	;volatile
 12658  0031  3DF6               	addwfc	??_isr+2,f
 12659  0032  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12660  0033  3DF7               	addwfc	??_isr+3,f
 12661  0034  0877               	movf	??_isr+3,w
 12662  0035  00C2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 12663  0036  0876               	movf	??_isr+2,w
 12664  0037  00C1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 12665  0038  0875               	movf	??_isr+1,w
 12666  0039  00C0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 12667  003A  0874               	movf	??_isr,w
 12668  003B  00BF               	movwf	_sub_timer^(0+128)	;volatile
 12669                           
 12670                           ;interrupts.c: 36: tap_timer = tap_timer + 1;
 12671  003C  3001               	movlw	1
 12672  003D  00F4               	movwf	??_isr
 12673  003E  3000               	movlw	0
 12674  003F  00F5               	movwf	??_isr+1
 12675  0040  3000               	movlw	0
 12676  0041  00F6               	movwf	??_isr+2
 12677  0042  3000               	movlw	0
 12678  0043  00F7               	movwf	??_isr+3
 12679  0044  0879               	movf	_tap_timer,w	;volatile
 12680  0045  07F4               	addwf	??_isr,f
 12681  0046  087A               	movf	_tap_timer+1,w	;volatile
 12682  0047  3DF5               	addwfc	??_isr+1,f
 12683  0048  087B               	movf	_tap_timer+2,w	;volatile
 12684  0049  3DF6               	addwfc	??_isr+2,f
 12685  004A  087C               	movf	_tap_timer+3,w	;volatile
 12686  004B  3DF7               	addwfc	??_isr+3,f
 12687  004C  0877               	movf	??_isr+3,w
 12688  004D  00FC               	movwf	_tap_timer+3	;volatile
 12689  004E  0876               	movf	??_isr+2,w
 12690  004F  00FB               	movwf	_tap_timer+2	;volatile
 12691  0050  0875               	movf	??_isr+1,w
 12692  0051  00FA               	movwf	_tap_timer+1	;volatile
 12693  0052  0874               	movf	??_isr,w
 12694  0053  00F9               	movwf	_tap_timer	;volatile
 12695                           
 12696                           ;interrupts.c: 37: mod_timer = mod_timer + 1;
 12697  0054  3001               	movlw	1
 12698  0055  00F4               	movwf	??_isr
 12699  0056  3000               	movlw	0
 12700  0057  00F5               	movwf	??_isr+1
 12701  0058  3000               	movlw	0
 12702  0059  00F6               	movwf	??_isr+2
 12703  005A  3000               	movlw	0
 12704  005B  00F7               	movwf	??_isr+3
 12705  005C  0022               	movlb	2	; select bank2
 12706  005D  0824               	movf	_mod_timer^(0+256),w	;volatile
 12707  005E  07F4               	addwf	??_isr,f
 12708  005F  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 12709  0060  3DF5               	addwfc	??_isr+1,f
 12710  0061  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 12711  0062  3DF6               	addwfc	??_isr+2,f
 12712  0063  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 12713  0064  3DF7               	addwfc	??_isr+3,f
 12714  0065  0877               	movf	??_isr+3,w
 12715  0066  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12716  0067  0876               	movf	??_isr+2,w
 12717  0068  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12718  0069  0875               	movf	??_isr+1,w
 12719  006A  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12720  006B  0874               	movf	??_isr,w
 12721  006C  00A4               	movwf	_mod_timer^(0+256)	;volatile
 12722                           
 12723                           ;interrupts.c: 38: if (feedback_start == 1) {
 12724  006D  0021               	movlb	1	; select bank1
 12725  006E  0356               	decf	_feedback_start^(0+128),w
 12726  006F  1D03               	btfss	3,2
 12727  0070  2881               	goto	i1l3931
 12728                           
 12729                           ;interrupts.c: 39: feedback_timer++;
 12730  0071  3001               	movlw	1
 12731  0072  07C7               	addwf	_feedback_timer^(0+128),f	;volatile
 12732  0073  3000               	movlw	0
 12733  0074  3DC8               	addwfc	(_feedback_timer+1)^(0+128),f	;volatile
 12734                           
 12735                           ;interrupts.c: 40: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 12736  0075  0848               	movf	(_feedback_timer+1)^(0+128),w	;volatile
 12737  0076  0268               	subwf	(_long_press_limit+1)^(0+128),w
 12738  0077  1D03               	skipz
 12739  0078  287B               	goto	u386_25
 12740  0079  0847               	movf	_feedback_timer^(0+128),w	;volatile
 12741  007A  0267               	subwf	_long_press_limit^(0+128),w
 12742  007B                     u386_25:	
 12743  007B  1803               	skipnc
 12744  007C  2881               	goto	i1l3931
 12745  007D  0868               	movf	(_long_press_limit+1)^(0+128),w
 12746  007E  00C8               	movwf	(_feedback_timer+1)^(0+128)	;volatile
 12747  007F  0867               	movf	_long_press_limit^(0+128),w
 12748  0080  00C7               	movwf	_feedback_timer^(0+128)	;volatile
 12749  0081                     i1l3931:	
 12750                           
 12751                           ;interrupts.c: 41: }
 12752                           ;interrupts.c: 42: if (longTap_start == 1) {
 12753  0081  0357               	decf	_longTap_start^(0+128),w
 12754  0082  1D03               	btfss	3,2
 12755  0083  2894               	goto	i1l3937
 12756                           
 12757                           ;interrupts.c: 43: longTap_timer++;
 12758  0084  3001               	movlw	1
 12759  0085  07CF               	addwf	_longTap_timer^(0+128),f	;volatile
 12760  0086  3000               	movlw	0
 12761  0087  3DD0               	addwfc	(_longTap_timer+1)^(0+128),f	;volatile
 12762                           
 12763                           ;interrupts.c: 44: if (longTap_timer > long_press_limit) {
 12764  0088  0850               	movf	(_longTap_timer+1)^(0+128),w	;volatile
 12765  0089  0268               	subwf	(_long_press_limit+1)^(0+128),w
 12766  008A  1D03               	skipz
 12767  008B  288E               	goto	u388_25
 12768  008C  084F               	movf	_longTap_timer^(0+128),w	;volatile
 12769  008D  0267               	subwf	_long_press_limit^(0+128),w
 12770  008E                     u388_25:	
 12771  008E  1803               	skipnc
 12772  008F  2894               	goto	i1l3937
 12773                           
 12774                           ;interrupts.c: 45: longTap_timer = long_press_limit;
 12775  0090  0868               	movf	(_long_press_limit+1)^(0+128),w
 12776  0091  00D0               	movwf	(_longTap_timer+1)^(0+128)	;volatile
 12777  0092  0867               	movf	_long_press_limit^(0+128),w
 12778  0093  00CF               	movwf	_longTap_timer^(0+128)	;volatile
 12779  0094                     i1l3937:	
 12780                           
 12781                           ;interrupts.c: 46: }
 12782                           ;interrupts.c: 47: }
 12783                           ;interrupts.c: 49: INTCONbits.TMR0IF = 0;
 12784  0094  110B               	bcf	11,2	;volatile
 12785  0095                     i1l3939:	
 12786                           
 12787                           ;interrupts.c: 50: }
 12788                           ;interrupts.c: 52: if (longTap_state < 1) {
 12789  0095  087D               	movf	_longTap_state,w	;volatile
 12790  0096  1D03               	btfss	3,2
 12791  0097  28C9               	goto	i1l3951
 12792                           
 12793                           ;interrupts.c: 54: if (timer >= baseline_delay_time) {
 12794  0098  0021               	movlb	1	; select bank1
 12795  0099  0846               	movf	(_timer+3)^(0+128),w	;volatile
 12796  009A  3A80               	xorlw	128
 12797  009B  00F4               	movwf	??_isr
 12798  009C  0860               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 12799  009D  3A80               	xorlw	128
 12800  009E  0274               	subwf	??_isr,w
 12801  009F  1D03               	skipz
 12802  00A0  28AB               	goto	u390_23
 12803  00A1  085F               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 12804  00A2  0245               	subwf	(_timer+2)^(0+128),w	;volatile
 12805  00A3  1D03               	skipz
 12806  00A4  28AB               	goto	u390_23
 12807  00A5  085E               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 12808  00A6  0244               	subwf	(_timer+1)^(0+128),w	;volatile
 12809  00A7  1D03               	skipz
 12810  00A8  28AB               	goto	u390_23
 12811  00A9  085D               	movf	_baseline_delay_time^(0+128),w	;volatile
 12812  00AA  0243               	subwf	_timer^(0+128),w	;volatile
 12813  00AB                     u390_23:	
 12814  00AB  1C03               	skipc
 12815  00AC  28B8               	goto	i1l3947
 12816                           
 12817                           ;interrupts.c: 57: LATBbits.LATB4 = 1;
 12818  00AD  0022               	movlb	2	; select bank2
 12819  00AE  160D               	bsf	13,4	;volatile
 12820                           
 12821                           ;interrupts.c: 59: timer = 0;
 12822  00AF  3000               	movlw	0
 12823  00B0  0021               	movlb	1	; select bank1
 12824  00B1  00C6               	movwf	(_timer+3)^(0+128)	;volatile
 12825  00B2  3000               	movlw	0
 12826  00B3  00C5               	movwf	(_timer+2)^(0+128)	;volatile
 12827  00B4  3000               	movlw	0
 12828  00B5  00C4               	movwf	(_timer+1)^(0+128)	;volatile
 12829  00B6  3000               	movlw	0
 12830  00B7  00C3               	movwf	_timer^(0+128)	;volatile
 12831  00B8                     i1l3947:	
 12832                           
 12833                           ;interrupts.c: 60: }
 12834                           ;interrupts.c: 62: if (timer >= 20) {
 12835  00B8  1BC6               	btfsc	(_timer+3)^(0+128),7	;volatile
 12836  00B9  28C9               	goto	i1l3951
 12837  00BA  0846               	movf	(_timer+3)^(0+128),w	;volatile
 12838  00BB  1D03               	btfss	3,2
 12839  00BC  28C7               	goto	i1l3949
 12840  00BD  0845               	movf	(_timer+2)^(0+128),w	;volatile
 12841  00BE  1D03               	btfss	3,2
 12842  00BF  28C7               	goto	i1l3949
 12843  00C0  0844               	movf	(_timer+1)^(0+128),w	;volatile
 12844  00C1  1D03               	btfss	3,2
 12845  00C2  28C7               	goto	i1l3949
 12846  00C3  3014               	movlw	20
 12847  00C4  0243               	subwf	_timer^(0+128),w	;volatile
 12848  00C5  1C03               	btfss	3,0
 12849  00C6  28C9               	goto	i1l3951
 12850  00C7                     i1l3949:	
 12851                           
 12852                           ;interrupts.c: 64: LATBbits.LATB4 = 0;
 12853  00C7  0022               	movlb	2	; select bank2
 12854  00C8  120D               	bcf	13,4	;volatile
 12855  00C9                     i1l3951:	
 12856                           
 12857                           ;interrupts.c: 66: }
 12858                           ;interrupts.c: 67: }
 12859                           ;interrupts.c: 70: if (sub_timer >= delay_time) {
 12860  00C9  0021               	movlb	1	; select bank1
 12861  00CA  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12862  00CB  3A80               	xorlw	128
 12863  00CC  00F4               	movwf	??_isr
 12864  00CD  0864               	movf	(_delay_time+3)^(0+128),w	;volatile
 12865  00CE  3A80               	xorlw	128
 12866  00CF  0274               	subwf	??_isr,w
 12867  00D0  1D03               	skipz
 12868  00D1  28DC               	goto	u392_23
 12869  00D2  0863               	movf	(_delay_time+2)^(0+128),w	;volatile
 12870  00D3  0241               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 12871  00D4  1D03               	skipz
 12872  00D5  28DC               	goto	u392_23
 12873  00D6  0862               	movf	(_delay_time+1)^(0+128),w	;volatile
 12874  00D7  0240               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 12875  00D8  1D03               	skipz
 12876  00D9  28DC               	goto	u392_23
 12877  00DA  0861               	movf	_delay_time^(0+128),w	;volatile
 12878  00DB  023F               	subwf	_sub_timer^(0+128),w	;volatile
 12879  00DC                     u392_23:	
 12880  00DC  1C03               	skipc
 12881  00DD  28F5               	goto	i1l3959
 12882                           
 12883                           ;interrupts.c: 71: if (suspend_blink == 0) {
 12884  00DE  085B               	movf	_suspend_blink^(0+128),w	;volatile
 12885  00DF  1D03               	btfss	3,2
 12886  00E0  28EC               	goto	i1l3957
 12887                           
 12888                           ;interrupts.c: 72: set_leds_top(top_push_state, 1);
 12889  00E1  086C               	movf	(_top_push_state+1)^(0+128),w
 12890  00E2  00F1               	movwf	i1set_leds_top@x+1
 12891  00E3  086B               	movf	_top_push_state^(0+128),w
 12892  00E4  00F0               	movwf	i1set_leds_top@x
 12893  00E5  3001               	movlw	1
 12894  00E6  00F2               	movwf	i1set_leds_top@ledState
 12895  00E7  3000               	movlw	0
 12896  00E8  00F3               	movwf	i1set_leds_top@ledState+1
 12897  00E9  3194  2440  3180   	fcall	i1_set_leds_top
 12898  00EC                     i1l3957:	
 12899                           
 12900                           ;interrupts.c: 73: }
 12901                           ;interrupts.c: 74: sub_timer = 0;
 12902  00EC  3000               	movlw	0
 12903  00ED  0021               	movlb	1	; select bank1
 12904  00EE  00C2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 12905  00EF  3000               	movlw	0
 12906  00F0  00C1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 12907  00F1  3000               	movlw	0
 12908  00F2  00C0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 12909  00F3  3000               	movlw	0
 12910  00F4  00BF               	movwf	_sub_timer^(0+128)	;volatile
 12911  00F5                     i1l3959:	
 12912                           
 12913                           ;interrupts.c: 75: }
 12914                           ;interrupts.c: 77: if (sub_timer >= 20) {
 12915  00F5  1BC2               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 12916  00F6  2911               	goto	i1l3965
 12917  00F7  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12918  00F8  1D03               	btfss	3,2
 12919  00F9  2904               	goto	i1l3961
 12920  00FA  0841               	movf	(_sub_timer+2)^(0+128),w	;volatile
 12921  00FB  1D03               	btfss	3,2
 12922  00FC  2904               	goto	i1l3961
 12923  00FD  0840               	movf	(_sub_timer+1)^(0+128),w	;volatile
 12924  00FE  1D03               	btfss	3,2
 12925  00FF  2904               	goto	i1l3961
 12926  0100  3014               	movlw	20
 12927  0101  023F               	subwf	_sub_timer^(0+128),w	;volatile
 12928  0102  1C03               	btfss	3,0
 12929  0103  2911               	goto	i1l3965
 12930  0104                     i1l3961:	
 12931                           
 12932                           ;interrupts.c: 78: if (suspend_blink == 0) {
 12933  0104  085B               	movf	_suspend_blink^(0+128),w	;volatile
 12934  0105  1D03               	btfss	3,2
 12935  0106  2911               	goto	i1l3965
 12936                           
 12937                           ;interrupts.c: 79: set_leds_top(top_push_state, 0);
 12938  0107  086C               	movf	(_top_push_state+1)^(0+128),w
 12939  0108  00F1               	movwf	i1set_leds_top@x+1
 12940  0109  086B               	movf	_top_push_state^(0+128),w
 12941  010A  00F0               	movwf	i1set_leds_top@x
 12942  010B  3000               	movlw	0
 12943  010C  00F2               	movwf	i1set_leds_top@ledState
 12944  010D  00F3               	movwf	i1set_leds_top@ledState+1
 12945  010E  3194  2440  3180   	fcall	i1_set_leds_top
 12946  0111                     i1l3965:	
 12947                           
 12948                           ;interrupts.c: 80: }
 12949                           ;interrupts.c: 81: }
 12950                           ;interrupts.c: 84: if (preset_programmning_on == 1) {
 12951  0111  0021               	movlb	1	; select bank1
 12952  0112  035A               	decf	_preset_programmning_on^(0+128),w
 12953  0113  1D03               	btfss	3,2
 12954  0114  293B               	goto	i1l3977
 12955                           
 12956                           ;interrupts.c: 85: preset_blink++;
 12957  0115  3001               	movlw	1
 12958  0116  00F4               	movwf	??_isr
 12959  0117  0874               	movf	??_isr,w
 12960  0118  07D9               	addwf	_preset_blink^(0+128),f
 12961                           
 12962                           ;interrupts.c: 87: if (preset_blink >= blink_delay) {
 12963  0119  0022               	movlb	2	; select bank2
 12964  011A  084A               	movf	(_blink_delay+1)^(0+256),w
 12965  011B  3A80               	xorlw	128
 12966  011C  3C80               	sublw	128
 12967  011D  1D03               	skipz
 12968  011E  2922               	goto	u397_25
 12969  011F  0849               	movf	_blink_delay^(0+256),w
 12970  0120  0021               	movlb	1	; select bank1
 12971  0121  0259               	subwf	_preset_blink^(0+128),w
 12972  0122                     u397_25:	
 12973  0122  1C03               	skipc
 12974  0123  2940               	goto	i1l3981
 12975                           
 12976                           ;interrupts.c: 88: LATBbits.LATB1 = 1;
 12977  0124  0022               	movlb	2	; select bank2
 12978  0125  148D               	bsf	13,1	;volatile
 12979                           
 12980                           ;interrupts.c: 89: if (preset_blink > blink_delay*2) {
 12981  0126  084A               	movf	(_blink_delay+1)^(0+256),w
 12982  0127  00F5               	movwf	??_isr+1
 12983  0128  0849               	movf	_blink_delay^(0+256),w
 12984  0129  00F4               	movwf	??_isr
 12985  012A  35F4               	lslf	??_isr,f
 12986  012B  0DF5               	rlf	??_isr+1,f
 12987  012C  0875               	movf	??_isr+1,w
 12988  012D  3A80               	xorlw	128
 12989  012E  00F6               	movwf	??_isr+2
 12990  012F  3080               	movlw	128
 12991  0130  0276               	subwf	??_isr+2,w
 12992  0131  1D03               	skipz
 12993  0132  2936               	goto	u398_25
 12994  0133  0021               	movlb	1	; select bank1
 12995  0134  0859               	movf	_preset_blink^(0+128),w
 12996  0135  0274               	subwf	??_isr,w
 12997  0136                     u398_25:	
 12998  0136  1803               	skipnc
 12999  0137  2942               	goto	i1l99
 13000                           
 13001                           ;interrupts.c: 90: preset_blink = 0;
 13002  0138  0021               	movlb	1	; select bank1
 13003  0139  01D9               	clrf	_preset_blink^(0+128)
 13004                           
 13005                           ;interrupts.c: 91: }
 13006                           ;interrupts.c: 93: } else {
 13007  013A  2942               	goto	i1l99
 13008  013B                     i1l3977:	
 13009                           ;interrupts.c: 95: }
 13010                           ;interrupts.c: 97: } else {
 13011                           
 13012                           ;interrupts.c: 94: LATBbits.LATB1 = 0;
 13013                           
 13014                           
 13015                           ;interrupts.c: 98: if (preset_blink > 0) {
 13016  013B  0021               	movlb	1	; select bank1
 13017  013C  0859               	movf	_preset_blink^(0+128),w
 13018  013D  1903               	btfsc	3,2
 13019  013E  2942               	goto	i1l99
 13020                           
 13021                           ;interrupts.c: 99: preset_blink = 0;
 13022  013F  01D9               	clrf	_preset_blink^(0+128)
 13023  0140                     i1l3981:	
 13024                           
 13025                           ;interrupts.c: 100: LATBbits.LATB1 = 0;
 13026  0140  0022               	movlb	2	; select bank2
 13027  0141  108D               	bcf	13,1	;volatile
 13028  0142                     i1l99:	
 13029  0142  0878               	movf	??_isr+4,w
 13030  0143  0020               	movlb	0	; select bank0
 13031  0144  00FF               	movwf	127
 13032  0145  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13033  0146  0009               	retfie
 13034  0147                     __end_of_isr:	
 13035                           
 13036                           	psect	text46
 13037  1440                     __ptext46:	
 13038 ;; *************** function i1_set_leds_top *****************
 13039 ;; Defined at:
 13040 ;;		line 16 in file "LEDs.c"
 13041 ;; Parameters:    Size  Location     Type
 13042 ;;  x               2    0[COMMON] int 
 13043 ;;  ledState        2    2[COMMON] int 
 13044 ;; Auto vars:     Size  Location     Type
 13045 ;;		None
 13046 ;; Return value:  Size  Location     Type
 13047 ;;                  1    wreg      void 
 13048 ;; Registers used:
 13049 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13050 ;; Tracked objects:
 13051 ;;		On entry : 0/0
 13052 ;;		On exit  : 0/0
 13053 ;;		Unchanged: 0/0
 13054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13055 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13058 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13059 ;;Total ram usage:        4 bytes
 13060 ;; Hardware stack levels used:    1
 13061 ;; This function calls:
 13062 ;;		Nothing
 13063 ;; This function is called by:
 13064 ;;		_isr
 13065 ;; This function uses a non-reentrant model
 13066 ;;
 13067                           
 13068                           
 13069                           ;psect for function i1_set_leds_top
 13070  1440                     i1_set_leds_top:	
 13071                           
 13072                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13073                           
 13074                           ;incstack = 0
 13075                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13076  1440  0027               	movlb	7	; select bank7
 13077  1441  100C               	bcf	12,0	;volatile
 13078                           
 13079                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13080  1442  108C               	bcf	12,1	;volatile
 13081                           
 13082                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13083  1443  110C               	bcf	12,2	;volatile
 13084                           
 13085                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13086  1444  118C               	bcf	12,3	;volatile
 13087                           
 13088                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13089  1445  120C               	bcf	12,4	;volatile
 13090                           
 13091                           ;LEDs.c: 22: switch (x) {
 13092  1446  2C6B               	goto	i1l3915
 13093  1447                     i1l3903:	
 13094                           ;LEDs.c: 23: case 1:
 13095                           
 13096                           
 13097                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13098  1447  0C72               	rrf	i1set_leds_top@ledState,w
 13099  1448  1C03               	skipc
 13100  1449  100C               	bcf	12,0	;volatile
 13101  144A  1803               	skipnc
 13102  144B  140C               	bsf	12,0	;volatile
 13103                           
 13104                           ;LEDs.c: 25: break;
 13105  144C  0008               	return
 13106  144D                     i1l3905:	
 13107                           ;LEDs.c: 26: case 2:
 13108                           
 13109                           
 13110                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13111  144D  0C72               	rrf	i1set_leds_top@ledState,w
 13112  144E  1C03               	skipc
 13113  144F  108C               	bcf	12,1	;volatile
 13114  1450  1803               	skipnc
 13115  1451  148C               	bsf	12,1	;volatile
 13116                           
 13117                           ;LEDs.c: 28: break;
 13118  1452  0008               	return
 13119  1453                     i1l3907:	
 13120                           ;LEDs.c: 29: case 3:
 13121                           
 13122                           
 13123                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13124  1453  0C72               	rrf	i1set_leds_top@ledState,w
 13125  1454  1C03               	skipc
 13126  1455  110C               	bcf	12,2	;volatile
 13127  1456  1803               	skipnc
 13128  1457  150C               	bsf	12,2	;volatile
 13129                           
 13130                           ;LEDs.c: 31: break;
 13131  1458  0008               	return
 13132  1459                     i1l3909:	
 13133                           ;LEDs.c: 32: case 4:
 13134                           
 13135                           
 13136                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13137  1459  0C72               	rrf	i1set_leds_top@ledState,w
 13138  145A  1C03               	skipc
 13139  145B  118C               	bcf	12,3	;volatile
 13140  145C  1803               	skipnc
 13141  145D  158C               	bsf	12,3	;volatile
 13142                           
 13143                           ;LEDs.c: 34: break;
 13144  145E  0008               	return
 13145  145F                     i1l3911:	
 13146                           ;LEDs.c: 35: case 5:
 13147                           
 13148                           
 13149                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13150  145F  0C72               	rrf	i1set_leds_top@ledState,w
 13151  1460  1C03               	skipc
 13152  1461  120C               	bcf	12,4	;volatile
 13153  1462  1803               	skipnc
 13154  1463  160C               	bsf	12,4	;volatile
 13155                           
 13156                           ;LEDs.c: 39: break;
 13157                           
 13158                           ;LEDs.c: 38: case 6:
 13159                           
 13160                           ;LEDs.c: 37: break;
 13161  1464  0008               	return
 13162  1465                     i1l631:	
 13163                           ;LEDs.c: 40: case 100:
 13164                           
 13165                           
 13166                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13167  1465  140C               	bsf	12,0	;volatile
 13168                           
 13169                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13170  1466  148C               	bsf	12,1	;volatile
 13171                           
 13172                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13173  1467  150C               	bsf	12,2	;volatile
 13174                           
 13175                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13176  1468  158C               	bsf	12,3	;volatile
 13177                           
 13178                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13179  1469  160C               	bsf	12,4	;volatile
 13180                           
 13181                           ;LEDs.c: 47: }
 13182                           
 13183                           ;LEDs.c: 46: break;
 13184  146A  0008               	return
 13185  146B                     i1l3915:	
 13186                           
 13187                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13188                           ; Switch size 1, requested type "space"
 13189                           ; Number of cases is 1, Range of values is 0 to 0
 13190                           ; switch strategies available:
 13191                           ; Name         Instructions Cycles
 13192                           ; simple_byte            4     3 (average)
 13193                           ; direct_byte            8     6 (fixed)
 13194                           ; jumptable            260     6 (fixed)
 13195                           ;	Chosen strategy is simple_byte
 13196  146B  0871               	movf	i1set_leds_top@x+1,w
 13197  146C  3A00               	xorlw	0	; case 0
 13198  146D  1903               	skipnz
 13199  146E  2C70               	goto	i1l4401
 13200  146F  2C87               	goto	i1l632
 13201  1470                     i1l4401:	
 13202                           
 13203                           ; Switch size 1, requested type "space"
 13204                           ; Number of cases is 7, Range of values is 1 to 100
 13205                           ; switch strategies available:
 13206                           ; Name         Instructions Cycles
 13207                           ; simple_byte           22    12 (average)
 13208                           ; direct_byte          209     9 (fixed)
 13209                           ; jumptable            263     9 (fixed)
 13210                           ;	Chosen strategy is simple_byte
 13211  1470  0870               	movf	i1set_leds_top@x,w
 13212  1471  3A01               	xorlw	1	; case 1
 13213  1472  1903               	skipnz
 13214  1473  2C47               	goto	i1l3903
 13215  1474  3A03               	xorlw	3	; case 2
 13216  1475  1903               	skipnz
 13217  1476  2C4D               	goto	i1l3905
 13218  1477  3A01               	xorlw	1	; case 3
 13219  1478  1903               	skipnz
 13220  1479  2C53               	goto	i1l3907
 13221  147A  3A07               	xorlw	7	; case 4
 13222  147B  1903               	skipnz
 13223  147C  2C59               	goto	i1l3909
 13224  147D  3A01               	xorlw	1	; case 5
 13225  147E  1903               	skipnz
 13226  147F  2C5F               	goto	i1l3911
 13227  1480  3A03               	xorlw	3	; case 6
 13228  1481  1903               	skipnz
 13229  1482  2C87               	goto	i1l632
 13230  1483  3A62               	xorlw	98	; case 100
 13231  1484  1903               	skipnz
 13232  1485  2C65               	goto	i1l631
 13233  1486  2C87               	goto	i1l632
 13234  1487                     i1l632:	
 13235  1487  0008               	return
 13236  1488                     __end_ofi1_set_leds_top:	
 13237  007E                     btemp	set	126	;btemp
 13238  007E                     int$flags	set	126
 13239  007E                     wtemp	set	126
 13240  007E                     wtemp0	set	126
 13241  0080                     wtemp1	set	128
 13242  0082                     wtemp2	set	130
 13243  0084                     wtemp3	set	132
 13244  0086                     wtemp4	set	134
 13245  0088                     wtemp5	set	136
 13246  007F                     wtemp6	set	127
 13247  007E                     ttemp	set	126
 13248  007E                     ttemp0	set	126
 13249  0081                     ttemp1	set	129
 13250  0084                     ttemp2	set	132
 13251  0087                     ttemp3	set	135
 13252  007F                     ttemp4	set	127
 13253  007E                     ltemp	set	126
 13254  007E                     ltemp0	set	126
 13255  0082                     ltemp1	set	130
 13256  0086                     ltemp2	set	134
 13257  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1066
    BSS         203
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     79      80
    BANK1            80     31      80
    BANK2            80      0      62
    BANK3            80      0      64
    BANK4            80      0      58
    BANK5            80      0      58
    BANK6            80      0      58
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0      58
    BANK10           80      0      64
    BANK11            8      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->___fttol
    _updateSwitchTap->___aldiv
    _updateSwitchBypass->_setSwitchBypassState
    _setFeedbackState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   47898
                                             10 BANK1     21    21      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0     975
                                             21 BANK0      9     9      0
                            ___aldiv
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     258
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   1     1      0    3392
                                             18 BANK0      1     1      0
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     2     0      2    1632
                                             14 BANK0      2     0      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    6335
                                             21 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    3246
                                             14 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3089
                                             14 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      4     0      4    7286
                                              6 BANK1      4     0      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     956
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2840
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    2574
                                             14 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    1864
                                             14 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4     971
                                             21 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     556
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   11425
                                             53 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3203
                                             21 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             37 BANK0     16    10      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3563
                                              8 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    1783
                                             18 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    1760
                                             14 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2    1394
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      64
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2311
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    0     0      0    1909
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1180
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     470
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0     236
                                              4 COMMON     5     5      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setFeedbackState
       _wait_ms
         ___lmul
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___wmul (ARG)
     _setLongTapState
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3E       9       77.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3A      13       72.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3A      15       72.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2F4      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3A      18       72.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      50      20      100.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3A      24       72.5%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      40      26       80.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2F4      28        0.0%
BANK11               8      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Oct 19 22:16:54 2016

                     _update_mode 13B5                      ___altoft@exp 002E                       __CFG_CP$OFF 0000  
                   ___altoft@sign 002F                      ___awdiv@sign 0026               ___wmul@multiplicand 0022  
                 _updateSwitchTap 0BA4                      ___ftadd@exp1 0034                      ___ftadd@exp2 0033  
                    ___ftadd@sign 0032                               l313 10DD                               l261 0237  
                             l277 0500                               l631 15FA                               l640 124F  
                             l632 161E                               l480 1F98                               l641 1252  
                             l643 1255              __size_of_adc_convert 0019                               l644 1279  
                             l636 1246                               l468 07FF                               l638 1249  
                             l639 124C                               l757 1113                               l765 114D  
                             l775 13DB                               l777 13DE                               l778 13E2  
                             l955 09A9                               l779 13F2                               l956 098C  
                             _PR2 001B      solidring_tactiles@ring_delay 0030                               _map 1775  
                             _isr 0004                               _tap 01A0                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
         __end_of_set_leds_bottom 127A                      __CFG_LVP$OFF 0000                      ___ftdiv@cntr 004F  
                    ___ftdiv@sign 0054                              _B25k 03A0                              l1144 1704  
                            l1056 0BBA                              l3001 15F2                              l1250 1652  
                            l3005 1601                              l1341 087F                              l1069 0C7C  
                            l1257 1665                              l3041 162F                              l1281 0B4D  
                            l1089 1FAB                              l3201 1321                              l1258 166D  
                            l3027 125C                              l3051 1657                              l3043 1639  
                            l3053 165F                              l3045 163E                              l3037 1628  
                            l3133 16B9                              l4005 023B                              l3311 0B06  
                            l4111 05F4                              l4103 05D3                              l4031 030C  
                            l4007 023E                              l3321 0B28                              l3401 0A11  
                            l3241 1715                              l4121 064D                              l4025 02B7  
                            l3331 0B49                              l3323 0B2C                              l3251 1733  
                            l3219 1FA5                              l4115 05F7                              l4043 03A1  
                            l4035 0344                              l3317 0B19                              l4109 05F1  
                            l4117 0611                              l3335 0B5F                              l3319 0B23  
                            l3431 0A7E                              l3423 0A6A                              l3407 0A27  
                            l3263 175E                              l4135 06C9                              l4063 04BB  
                            l4055 0436                              l4047 03D9                              l3329 0B3F  
                            l3249 1725                              l4137 0674                              l4081 054D  
                            l3179 1422                              l3339 0B71                              l3435 0A86  
                            l3419 0A62                              l3267 176C                              l3259 1753  
                            l4139 06CF                              l4091 05B1                              l4067 04FB  
                            l4059 0476                              l3349 0B8C                              l3293 0ADD  
                            l3365 08CE                              l4085 055B                              l4077 0544  
                            l3527 1551                              l3359 08B8                              l3279 1FE9  
                            l3631 0973                              l3711 0BE7                              l4095 05BC  
                            l4087 059C                              l3289 0AD6                              l3553 1108  
                            l3299 0AEC                              l3387 0928                              l3379 090F  
                            l3491 0891                              l3459 081D                              l3627 0960  
                            l3731 0C29                              l3723 0C04                              l4099 05C7  
                            l3565 1139                              l3485 0875                              l3477 0856  
                            l3661 09BB                              l3725 0C21                              l3709 0BD9  
                            ?_map 0055                              l3487 0883                              l3479 0867  
                            l3831 07B9                              l3823 0708                              l3671 09DD  
                            l3639 097F                              l3663 09BF                              l3743 0C44  
                            l3825 0735                              l3761 0CB7                              l3753 0C74  
                            l3745 0C52                              l3585 13E6                              l4393 05FD  
                            l3851 128F                              l4395 07EB                              l3827 0761  
                            l3835 07E5                              l3771 0D0D                              l3587 13F6  
                            l4397 1607                              l3853 129F                              l3829 078D  
                            l3693 0BAF                              l4399 1262                              l3871 158F  
                            l2983 109E                              l3775 0D2C                              l3783 0D6B  
                            l2993 15D2                              l3881 1597                              l3865 1584  
                            l3769 0CC3                              l2995 15DA                              l3883 15A3  
                            l2979 1094                              l2997 15E2                              l3893 15BE  
                            l2999 15EA                              l3991 0211                              l3897 15C6  
                            l3889 15B5                              ?_isr 0070                              u3005 0A6B  
                            u2215 109F                              u3015 0A71                              u2225 10A6  
                            u3210 154F                              u2315 165A                              u3045 0A87  
                            u3125 0857                              u2405 16C6                              u2430 1420  
                            u3055 0A8D                              u4015 022D                              u2425 1404  
                            u2505 1FAC                              u3305 13C8                              u4105 0474  
                            u2355 1674                              u2275 1634                              u2515 1FB1  
                            u3155 0876                              u4203 06BA                              u4115 04D9  
                            u4035 0299                              u2460 131F                              u2605 1754  
                            u3245 1101                              u3405 0993                              u4133 0528  
                            u4125 04F9                              u4045 02B5                              u2295 164D  
                            u3095 0825                              u2455 12FF                              u4055 0326  
                            u3185 1016                              u3345 0959                              u3505 0BC6  
                            u4065 0342                              u3195 101C                              u3275 1132  
                            u3435 09CB                              u3355 096C                              u4075 03BB  
                            u2565 1728                              u2485 1F7C                              u3605 0C64  
                            u4085 03D7                              u2735 0B07                              u3535 0C0D  
                            u4175 0556                              u4095 0454                              u2825 0B40  
                            u2905 08F0                              u2585 1734                              u3625 0C8D  
                            u2915 0910                              u2595 1748                              u3635 0C9D  
                            u4195 06A2                              u3725 1294                              u3805 15AE  
                            u2765 0B1A                              u2925 091F                              u3645 0CCC  
                            u3565 0C2F                              u3815 15B6                              u2935 0929  
                            u3655 0CE1                              u3665 0CF5                              u2795 0B2D  
                            u3685 0D12                              u3775 159A                              u2895 08E0  
                            u2975 0A33                              u2985 0A43                              u3795 15A4  
                            i1l99 0142                     _star_tactiles 1684                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000                              _iCnt 0146                              _mod1 04A0  
                            _mod2 0220                              _mod3 02A0                              _mod4 0320  
                            _mod5 2378                              _main 0202                      ___ftpack@arg 0020  
                    ___ftpack@exp 0023                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              fsr1l 0006  
                            map@x 0055                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E          __end_of_setFeedbackState 1334                              start 0147  
                            ttemp 007E                              wtemp 007E      __end_of_getSwitchBypassState 1EE2  
    updateSwitchTap@tapCntDivisor 003B      __end_of_setSwitchBypassState 1440                   ?i1_set_leds_top 0070  
                   __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0043                      ___ftmul@sign 0044  
                 __end_of_InitApp 108B                 ??_restoreLEDState 0020                      ___fttol@exp1 00A5  
                           ??_map 0064                      ___fttol@lval 00A1                             ??_isr 0074  
                 _switchBypass_up 015B         __size_of_initSwitchBypass 000F                   __end_of___aldiv 1775  
                           ?_main 0070                   __end_of___awdiv 15CB                   __end_of___ftadd 0BA4  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                             _CCPR9 061A  
                   __CFG_WDTE$OFF 0000                   __end_of___ftdiv 094A                   __end_of___ftneg 1EFB  
                 __end_of___ftmul 0AAE                   ___awdiv@divisor 0020                   __end_of___fttol 08A1  
                           i1l631 1465                             i1l632 1487                   ___awdiv@counter 0025  
                           _iB25k 0420               _ConfigureOscillator 1EDA                      ?_init_timer0 0070  
                    ?_init_timer2 0070               ___lmul@multiplicand 0024                   _switchTap_state 00EF  
               ??_setLongTapState 0022                     ___awtoft@sign 002D                             _delay 23F2  
                           _myBuf 0520                     ___ftpack@sign 0024                             _timer 00C3  
                  ?_star_tactiles 0070                             main@i 00BB                             ltemp0 007E  
                           ltemp1 0082                             ltemp2 0086                             ltemp3 0080  
                 __end_of_wait_ms 10EC                             ttemp0 007E                             ttemp1 0081  
                           ttemp2 0084                             ttemp3 0087                             ttemp4 007F  
                           status 0003       __end_of_read_bottom_tactile 111D                             wtemp0 007E  
                           wtemp1 0080                             wtemp2 0082                             wtemp3 0084  
                           wtemp4 0086                             wtemp5 0088                             wtemp6 007F  
            ?_ConfigureOscillator 0070                _getCurrentLEDState 1F22                _updateSwitchBypass 094A  
         __end_of_updateSwitchTap 0D88                   __initialization 0149           _updateSwitchBypassState 0801  
                    __end_of_main 0707           __size_of_InitializeTaps 0026               ?_getCurrentLEDState 0070  
             ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000                   _set_subdivision 0707  
                          ??_main 00AA                     ___fttol@sign1 00A0           __size_of_FLASH_ReadWord 0020  
      __end_of_solidring_tactiles 1374                    _feedback_timer 00C7                    _feedback_state 014D  
                  _feedback_start 00D6                  ?_set_leds_bottom 0020                  __end_of___altoft 12B7  
                          _ADRESH 009C                            _ADRESL 009B                  ___awdiv@dividend 0022  
             _baseline_delay_time 00DD              ??_getCurrentLEDState 0020                  __end_of___awtoft 2000  
                __end_of___ftpack 1684              ??_updateSwitchBypass 0032                            i1l4401 1470  
                          i1l3911 145F                            i1l3903 1447                            i1l3905 144D  
                          i1l3907 1453                            i1l3915 146B                            i1l3931 0081  
                          i1l3909 1459                            i1l3951 00C9                            i1l3961 0104  
                          i1l3937 0094                            i1l3947 00B8                            i1l3939 0095  
                          i1l3981 0140                            i1l3965 0111                            i1l3957 00EC  
                          i1l3949 00C7                            i1l3959 00F5                            i1l3977 013B  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON2 0196                            u390_23 00AB  
                          u392_23 00DC                            u386_25 007B                            u388_25 008E  
                          u397_25 0122                            u398_25 0136                    _debounce_count 0134  
                  _debounce_mode1 0136                    _debounce_mode2 0138                         ??_InitApp 0020  
           ??_ConfigureOscillator 0020          __end_of_read_top_tactile 1157                    __CFG_PWRTE$OFF 0000  
                          ___lmul 108B                         ??___aldiv 002E                  _switchTap_toggle 0148  
                          ___wmul 1FA2                         ??___awdiv 0024                         ??___ftadd 002E  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 004B                         ??___ftneg 0023  
                       ??___ftmul 003B                         ??___fttol 006B                  __end_of_init_adc 100A  
                __end_of_init_pwm 13B5         __size_of_showBootSequence 002B                  ___awdiv@quotient 0027  
           ___ftmul@f3_as_product 0040                      __pdataBIGRAM 2378           FLASH_ReadWord@flashAddr 0020  
                    __pdataCOMMON 007D              _getSwitchBypassState 1EDE                         ??_wait_ms 002E  
            _setSwitchBypassState 13FA                   ??_star_tactiles 002E            setLongTapState@f_state 0020  
         __end_of__initialization 01FE                        ___altoft@c 0028                        ___ftadd@f1 0028  
                      ___ftadd@f2 002B                 _bypass_turning_on 00D5                        ___ftdiv@f1 0048  
                      ___ftdiv@f2 0045                        ___ftdiv@f3 0050                    _top_push_state 00EB  
       ??_updateSwitchBypassState 0022                        ___ftneg@f1 0020               _switchBypass_toggle 0144  
                      ___awtoft@c 0028           __end_of_set_subdivision 0800                        ___ftmul@f1 0035  
                      ___ftmul@f2 0038                        ___fttol@f1 0067                  ?_updateSwitchTap 0070  
                    ?_update_mode 0070                    __pcstackCOMMON 0070                      __pidataBANK0 0002  
                    __pidataBANK1 1F34                      __pidataBANK2 1F47                      __pidataBANK4 1205  
                    __pidataBANK5 11CB                      __pidataBANK6 1191                      __pidataBANK7 14D8  
                    __pidataBANK8 1488                      __pidataBANK9 1157                  _initSwitchBypass 1F13  
                  _OPTION_REGbits 0095             ?_getSwitchBypassState 0020             ?_setSwitchBypassState 002E  
            __size_of_init_timer0 0007              __size_of_init_timer2 0009                        __pbssBANK1 00BF  
                      __pbssBANK2 0120                        __pbssBANK3 01A0                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1F5C                   __CFG_VCAPEN$OFF 0000                 ?_setFeedbackState 002E  
                      _delay_time 00E1                  _long_press_limit 00E7                        _delayfound 013C  
                      __pmaintext 0202                ??_setFeedbackState 0030                    _InitializeTaps 100A  
                         ?___lmul 0020                           ?___wmul 0020                        __pintentry 0004  
                      _blink_rate 00ED                     ??_adc_convert 0022                         ?___altoft 0028  
                  ___lmul@product 0028                   _setLongTapState 1F72                         ?___awtoft 0028  
                       ?___ftpack 0020                    _FLASH_ReadWord 1FBE   __end_of_updateSwitchBypassState 0802  
                     modulation@x 0035                       modulation@y 0037                   _debounce_bypass 0132  
                   _suspend_blink 00DB                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 105B            __end_of_InitializeTaps 1030                     ?_set_leds_top 0020  
                      _knob1_prev 014F                        _knob2_prev 0151                        _knob3_prev 0153  
                      _knob4_prev 0155                        _knob5_prev 0157                  ?_set_subdivision 00A6  
                         ___aldiv 16F3                           ___awdiv 1579                   __size_of___lmul 0030  
                         ___ftadd 0AAE                           ___ftdiv 08A1                           ___ftneg 1EF2  
                      _knob_1_pos 00C9                        _knob_2_pos 00CB                   __size_of___wmul 001C  
                         ___ftmul 09FA                        _knob_3_pos 00CD                           ___fttol 0802  
                      _knob_4_pos 013E                        _knob_5_pos 0140                 _switchTap_pressed 00DC  
                      ??___altoft 002C                  _showBootSequence 1030            __end_of_FLASH_ReadWord 1FDE  
                      ??___awtoft 002B                        ??___ftpack 0025                InitializeTaps@itap 0021  
                         __ptext1 13B5                           __ptext2 0BA4                           __ptext3 1F72  
                         __ptext4 094A                           __ptext5 12F5                           __ptext6 1030  
                         __ptext7 1684                           __ptext8 1334                           __ptext9 1F5C  
          ??_getSwitchBypassState 0022                         _T2CONbits 001C                      __size_of_map 008B  
                    __size_of_isr 0143            ??_setSwitchBypassState 0030               __end_of_adc_convert 1FA2  
                ___aldiv@dividend 002A                           _wait_ms 10BB           __end_of_restoreLEDState 1F72  
                         clrloop0 1F08              end_of_initialization 01FE                        _modulation 12B7  
                         init_ram 1EFB                        ??_init_adc 0020                           initloop 1EFC  
                      ??_init_pwm 0020      updateSwitchBypassState@state 0020                _solidring_tactiles 1334  
                   _longTap_timer 00CF                     _longTap_state 007D                     _longTap_start 00D7  
                  ??_set_leds_top 0024                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1F89            i1set_leds_top@ledState 0072                ??_read_top_tactile 002E  
                ___aldiv@quotient 0031      __size_of_read_bottom_tactile 0031               ?_solidring_tactiles 0070  
                     wait_ms@time 002C         FLASH_ReadWord@GIEBitValue 0022              __size_of_update_mode 0045  
                 ?_FLASH_ReadWord 0020                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010              star_tactiles@reverse 0030                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         _SPI_Value 0130  
         setFeedbackState@f_state 002E              ??_solidring_tactiles 002E       __end_of_ConfigureOscillator 1EDE  
     __size_of_getCurrentLEDState 0012                        map@out_max 0061                        map@out_min 005E  
     __size_of_updateSwitchBypass 00B0          __end_of_initSwitchBypass 1F22                       _CCP1CONbits 0293  
                     ___ftdiv@exp 0053          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 00D3                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 003F                adc_convert@channel 0023                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 0022                    __end_of___lmul 10BB  
                   __pidataBIGRAM 0D88                    __end_of___wmul 1FBE                       _adc_convert 1F89  
                   __pidataCOMMON 0003               start_initialization 0149                       __end_of_map 1800  
                     __end_of_isr 0147                  ?_restoreLEDState 0070             __end_of_star_tactiles 16F3  
                     ?_modulation 0035                  ?_setLongTapState 0020                          ??___lmul 0028  
                        ??___wmul 0024                       __pdataBANK0 006F                       __pdataBANK1 00DD  
                     __pdataBANK2 0149                       __pdataBANK4 0220                       __pdataBANK5 02A0  
                     __pdataBANK6 0320                       __pdataBANK7 03A0                       __pdataBANK8 0420  
                     __pdataBANK9 04A0                     _tap_iteration 00E9          __size_of_updateSwitchTap 01E4  
               __size_of___altoft 003D                       __pbssBANK10 0520         __size_of_setFeedbackState 003F  
               __size_of___awtoft 0022                 __size_of___ftpack 0065                     ??_init_timer0 0020  
                   ??_init_timer2 0020                       __pbssCOMMON 0079              __end_of_set_leds_top 161F  
                       ___latbits 0003                _switchBypass_state 006F                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     _delay_counter 013A          __end_of_showBootSequence 105B  
        ?_updateSwitchBypassState 0020                          ?_InitApp 0070                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 0026                 ??_set_leds_bottom 0022  
                        ?___awdiv 0020                          ?___ftadd 0028                          ?___ftdiv 0045  
                        ?___ftneg 0020                          ?___ftmul 0035                          ?___fttol 0067  
                     _blink_delay 0149               __size_of_modulation 003E                       _blink_state 015D  
                        _CCPTMRS0 029D                          _CCPTMRS1 029E                          _CCPTMRS2 029F  
                        ?_wait_ms 002C               _read_bottom_tactile 10EC               __end_of_init_timer0 1EE9  
             __end_of_init_timer2 1EF2                         _mod_value 0142                         _mod_timer 0124  
                ??_InitializeTaps 0020                   ___aldiv@divisor 0026                   ___aldiv@counter 002F  
                  ___wmul@product 0024                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 0159  
                       clear_ram0 1F07                         _tap_timer 0079                         _tap_total 0128  
                   set_leds_top@x 0020                  ??_FLASH_ReadWord 0022              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 0032                         map@in_max 005B  
                       map@in_min 0058                         _sub_timer 00BF                        _ADCON0bits 009D  
                      _ADCON1bits 009E                         main@i_315 00BD          __size_of_set_subdivision 00F9  
               ___wmul@multiplier 0020                  set_subdivision@x 00A6                  set_subdivision@y 00A8  
       __size_of_read_top_tactile 003A     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0046  
               ??_updateSwitchTap 0035                 ___lmul@multiplier 0020                 _ReadSavedSettings 1528  
               ?_initSwitchBypass 0070                ?_ReadSavedSettings 0070       setSwitchBypassState@f_state 002E  
              ??_initSwitchBypass 0032                  __size_of_InitApp 0030                       _mode1_state 0147  
                   ??_update_mode 0020                       _mode2_state 00D8             ??_read_bottom_tactile 002E  
             updateSwitchTap@iCnt 003D               ??_ReadSavedSettings 0024                        _APFCONbits 011D  
               star_tactiles@iLed 0031                  __size_of___aldiv 0082                  __size_of___awdiv 0052  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 0020  
                __size_of___ftneg 0009                          ___altoft 127A                  __size_of___ftmul 00B4  
                __size_of___fttol 009F                          ___awtoft 1FDE             __size_of_set_leds_top 0054  
                        ___ftpack 161F                          _map$1998 0064            _preset_programmning_on 00DA  
          star_tactiles@iLed_1383 0033                        _ANSELEbits 0190                        _ANSELFbits 040C  
                set_leds_bottom@x 0020                  _setFeedbackState 12F5                       _init_timer0 1EE2  
                     _init_timer2 1EE9                _delay_time_changed 014B        __end_of_getCurrentLEDState 1F34  
      __end_of_updateSwitchBypass 09FA                          __ptext10 1F22                          __ptext11 0707  
                        __ptext20 1EF2                          __ptext12 0802                          __ptext21 09FA  
                        __ptext13 1FDE                          __ptext30 1F89                          __ptext22 08A1  
                        __ptext14 111D                          __ptext31 1579                          __ptext23 0AAE  
                        __ptext15 10EC                          __ptext40 1374                          __ptext32 127A  
                        __ptext24 1F13                          __ptext16 12B7                          __ptext41 1EE9  
                        __ptext33 161F                          __ptext25 13FA                          __ptext17 1FA2  
                        __ptext42 1EE2                          __ptext34 1528                          __ptext26 10BB  
                        __ptext18 16F3                          __ptext43 1000                          __ptext35 15CB  
                        __ptext27 108B                          __ptext19 1775                          __ptext44 1EDA  
                        __ptext36 123F                          __ptext28 0801                          __ptext37 1FBE  
                        __ptext29 1EDE                          __ptext46 1440                          __ptext38 100A  
                        __ptext39 105B         __end_of_ReadSavedSettings 1579                  __size_of_wait_ms 0031  
     __size_of_solidring_tactiles 0040                          _ledState 0120                      ??_modulation 0039  
                     _mod_counter 00D1                          _init_adc 1000                     __size_of_main 0505  
                        _init_pwm 1374      __size_of_ConfigureOscillator 0004                      _set_leds_top 15CB  
                        _num_taps 00EE                          int$flags 007E                   i1set_leds_top@x 0070  
             __end_of_update_mode 13FA                __end_of_modulation 12F5                        _INTCONbits 000B  
                     _tap_history 01CC                 ??_set_subdivision 006F                          intlevel1 0000  
                 _set_leds_bottom 123F                        _PMCON1bits 0195                 ?_showBootSequence 0070  
               __CFG_CLKOUTEN$OFF 0000          __size_of_restoreLEDState 0016                ??_showBootSequence 0035  
                      _OSCCONbits 0099                      _preset_blink 00D9                    i1_set_leds_top 1440  
__size_of_updateSwitchBypassState 0001                      wait_ms@timel 012C            __size_of_star_tactiles 006F  
        __size_of_setLongTapState 0017                  _read_top_tactile 111D                      ___aldiv@sign 0030  
      __size_of_ReadSavedSettings 0051            main@adjusted_pot_value 00B9                      _CCP10CONbits 061F  
               _bottom_push_state 00E5            __end_ofi1_set_leds_top 1488  
