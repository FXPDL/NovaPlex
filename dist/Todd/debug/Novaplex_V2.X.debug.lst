

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Mon Nov 07 21:31:25 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK4,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK9,global,class=CODE,delta=2
    13                           	psect	idataBIGRAM,global,class=CODE,delta=2
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	dataBIGRAM,global,delta=1
    16                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    21                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    24                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    25                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    26                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    27                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    28                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    29                           	psect	bssBANK10,global,class=BANK10,space=1,delta=1
    30                           	psect	clrtext,global,class=CODE,delta=2
    31                           	psect	inittext,global,class=CODE,delta=2
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	text45,local,class=CODE,merge=1,delta=2
    81                           	psect	intentry,global,class=CODE,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	dabs	1,0x920,80
    84                           	dabs	1,0x8A0,80
    85                           	dabs	1,0x820,80
    86                           	dabs	1,0x7A0,80
    87                           	dabs	1,0x720,80
    88                           	dabs	1,0x6A0,80
    89                           	dabs	1,0x652,30
    90                           	dabs	1,0x620,50
    91                           	dabs	1,0x5A8,72
    92                           	dabs	1,0x23F2,0,_delay
    93                           	dabs	1,0x2378,0,_mod5
    94                           	dabs	1,0x7E,2
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0110                     	;# 
   149  0116                     	;# 
   150  0117                     	;# 
   151  011D                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  018F                     	;# 
   155  0190                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0194                     	;# 
   162  0195                     	;# 
   163  0196                     	;# 
   164  0197                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  020D                     	;# 
   189  020F                     	;# 
   190  0210                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0216                     	;# 
   203  0216                     	;# 
   204  0217                     	;# 
   205  0217                     	;# 
   206  0219                     	;# 
   207  021A                     	;# 
   208  021B                     	;# 
   209  021C                     	;# 
   210  021D                     	;# 
   211  021E                     	;# 
   212  021F                     	;# 
   213  028C                     	;# 
   214  028D                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029F                     	;# 
   226  030C                     	;# 
   227  030D                     	;# 
   228  0311                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0318                     	;# 
   233  0318                     	;# 
   234  0319                     	;# 
   235  031A                     	;# 
   236  031C                     	;# 
   237  031C                     	;# 
   238  031D                     	;# 
   239  031E                     	;# 
   240  038C                     	;# 
   241  038D                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  040C                     	;# 
   246  040D                     	;# 
   247  0411                     	;# 
   248  0411                     	;# 
   249  0412                     	;# 
   250  0413                     	;# 
   251  0414                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  0418                     	;# 
   256  0418                     	;# 
   257  0419                     	;# 
   258  041A                     	;# 
   259  041B                     	;# 
   260  041C                     	;# 
   261  041D                     	;# 
   262  041E                     	;# 
   263  048D                     	;# 
   264  0491                     	;# 
   265  0491                     	;# 
   266  0492                     	;# 
   267  0492                     	;# 
   268  0493                     	;# 
   269  0493                     	;# 
   270  0493                     	;# 
   271  0494                     	;# 
   272  0494                     	;# 
   273  0495                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  0496                     	;# 
   277  0497                     	;# 
   278  0497                     	;# 
   279  0595                     	;# 
   280  0596                     	;# 
   281  0597                     	;# 
   282  059C                     	;# 
   283  059D                     	;# 
   284  059E                     	;# 
   285  0611                     	;# 
   286  0611                     	;# 
   287  0612                     	;# 
   288  0613                     	;# 
   289  0614                     	;# 
   290  0614                     	;# 
   291  0615                     	;# 
   292  0616                     	;# 
   293  0617                     	;# 
   294  0617                     	;# 
   295  0618                     	;# 
   296  0619                     	;# 
   297  061A                     	;# 
   298  061A                     	;# 
   299  061B                     	;# 
   300  061C                     	;# 
   301  061D                     	;# 
   302  061D                     	;# 
   303  061E                     	;# 
   304  061F                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0110                     	;# 
   370  0116                     	;# 
   371  0117                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  018F                     	;# 
   376  0190                     	;# 
   377  0191                     	;# 
   378  0191                     	;# 
   379  0192                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0197                     	;# 
   386  0199                     	;# 
   387  0199                     	;# 
   388  0199                     	;# 
   389  019A                     	;# 
   390  019A                     	;# 
   391  019A                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019C                     	;# 
   398  019C                     	;# 
   399  019C                     	;# 
   400  019D                     	;# 
   401  019D                     	;# 
   402  019D                     	;# 
   403  019E                     	;# 
   404  019E                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  020D                     	;# 
   410  020F                     	;# 
   411  0210                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0219                     	;# 
   428  021A                     	;# 
   429  021B                     	;# 
   430  021C                     	;# 
   431  021D                     	;# 
   432  021E                     	;# 
   433  021F                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  0291                     	;# 
   437  0291                     	;# 
   438  0292                     	;# 
   439  0293                     	;# 
   440  0298                     	;# 
   441  0298                     	;# 
   442  0299                     	;# 
   443  029A                     	;# 
   444  029D                     	;# 
   445  029E                     	;# 
   446  029F                     	;# 
   447  030C                     	;# 
   448  030D                     	;# 
   449  0311                     	;# 
   450  0311                     	;# 
   451  0312                     	;# 
   452  0313                     	;# 
   453  0318                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  040C                     	;# 
   467  040D                     	;# 
   468  0411                     	;# 
   469  0411                     	;# 
   470  0412                     	;# 
   471  0413                     	;# 
   472  0414                     	;# 
   473  0415                     	;# 
   474  0416                     	;# 
   475  0417                     	;# 
   476  0418                     	;# 
   477  0418                     	;# 
   478  0419                     	;# 
   479  041A                     	;# 
   480  041B                     	;# 
   481  041C                     	;# 
   482  041D                     	;# 
   483  041E                     	;# 
   484  048D                     	;# 
   485  0491                     	;# 
   486  0491                     	;# 
   487  0492                     	;# 
   488  0492                     	;# 
   489  0493                     	;# 
   490  0493                     	;# 
   491  0493                     	;# 
   492  0494                     	;# 
   493  0494                     	;# 
   494  0495                     	;# 
   495  0495                     	;# 
   496  0496                     	;# 
   497  0496                     	;# 
   498  0497                     	;# 
   499  0497                     	;# 
   500  0595                     	;# 
   501  0596                     	;# 
   502  0597                     	;# 
   503  059C                     	;# 
   504  059D                     	;# 
   505  059E                     	;# 
   506  0611                     	;# 
   507  0611                     	;# 
   508  0612                     	;# 
   509  0613                     	;# 
   510  0614                     	;# 
   511  0614                     	;# 
   512  0615                     	;# 
   513  0616                     	;# 
   514  0617                     	;# 
   515  0617                     	;# 
   516  0618                     	;# 
   517  0619                     	;# 
   518  061A                     	;# 
   519  061A                     	;# 
   520  061B                     	;# 
   521  061C                     	;# 
   522  061D                     	;# 
   523  061D                     	;# 
   524  061E                     	;# 
   525  061F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  000F                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0013                     	;# 
   557  0014                     	;# 
   558  0015                     	;# 
   559  0016                     	;# 
   560  0016                     	;# 
   561  0017                     	;# 
   562  0018                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001C                     	;# 
   567  008C                     	;# 
   568  008D                     	;# 
   569  008E                     	;# 
   570  008F                     	;# 
   571  0090                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0095                     	;# 
   577  0096                     	;# 
   578  0097                     	;# 
   579  0099                     	;# 
   580  009A                     	;# 
   581  009B                     	;# 
   582  009B                     	;# 
   583  009C                     	;# 
   584  009D                     	;# 
   585  009E                     	;# 
   586  010C                     	;# 
   587  010D                     	;# 
   588  010E                     	;# 
   589  010F                     	;# 
   590  0110                     	;# 
   591  0116                     	;# 
   592  0117                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596  018F                     	;# 
   597  0190                     	;# 
   598  0191                     	;# 
   599  0191                     	;# 
   600  0192                     	;# 
   601  0193                     	;# 
   602  0193                     	;# 
   603  0194                     	;# 
   604  0195                     	;# 
   605  0196                     	;# 
   606  0197                     	;# 
   607  0199                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019B                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019C                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019D                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  020D                     	;# 
   631  020F                     	;# 
   632  0210                     	;# 
   633  0211                     	;# 
   634  0211                     	;# 
   635  0212                     	;# 
   636  0212                     	;# 
   637  0213                     	;# 
   638  0213                     	;# 
   639  0214                     	;# 
   640  0214                     	;# 
   641  0215                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0216                     	;# 
   645  0216                     	;# 
   646  0217                     	;# 
   647  0217                     	;# 
   648  0219                     	;# 
   649  021A                     	;# 
   650  021B                     	;# 
   651  021C                     	;# 
   652  021D                     	;# 
   653  021E                     	;# 
   654  021F                     	;# 
   655  028C                     	;# 
   656  028D                     	;# 
   657  0291                     	;# 
   658  0291                     	;# 
   659  0292                     	;# 
   660  0293                     	;# 
   661  0298                     	;# 
   662  0298                     	;# 
   663  0299                     	;# 
   664  029A                     	;# 
   665  029D                     	;# 
   666  029E                     	;# 
   667  029F                     	;# 
   668  030C                     	;# 
   669  030D                     	;# 
   670  0311                     	;# 
   671  0311                     	;# 
   672  0312                     	;# 
   673  0313                     	;# 
   674  0318                     	;# 
   675  0318                     	;# 
   676  0319                     	;# 
   677  031A                     	;# 
   678  031C                     	;# 
   679  031C                     	;# 
   680  031D                     	;# 
   681  031E                     	;# 
   682  038C                     	;# 
   683  038D                     	;# 
   684  0394                     	;# 
   685  0395                     	;# 
   686  0396                     	;# 
   687  040C                     	;# 
   688  040D                     	;# 
   689  0411                     	;# 
   690  0411                     	;# 
   691  0412                     	;# 
   692  0413                     	;# 
   693  0414                     	;# 
   694  0415                     	;# 
   695  0416                     	;# 
   696  0417                     	;# 
   697  0418                     	;# 
   698  0418                     	;# 
   699  0419                     	;# 
   700  041A                     	;# 
   701  041B                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  048D                     	;# 
   706  0491                     	;# 
   707  0491                     	;# 
   708  0492                     	;# 
   709  0492                     	;# 
   710  0493                     	;# 
   711  0493                     	;# 
   712  0493                     	;# 
   713  0494                     	;# 
   714  0494                     	;# 
   715  0495                     	;# 
   716  0495                     	;# 
   717  0496                     	;# 
   718  0496                     	;# 
   719  0497                     	;# 
   720  0497                     	;# 
   721  0595                     	;# 
   722  0596                     	;# 
   723  0597                     	;# 
   724  059C                     	;# 
   725  059D                     	;# 
   726  059E                     	;# 
   727  0611                     	;# 
   728  0611                     	;# 
   729  0612                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0614                     	;# 
   733  0615                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0617                     	;# 
   737  0618                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061A                     	;# 
   741  061B                     	;# 
   742  061C                     	;# 
   743  061D                     	;# 
   744  061D                     	;# 
   745  061E                     	;# 
   746  061F                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  000F                     	;# 
   774  0010                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0014                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  008F                     	;# 
   792  0090                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0094                     	;# 
   797  0095                     	;# 
   798  0096                     	;# 
   799  0097                     	;# 
   800  0099                     	;# 
   801  009A                     	;# 
   802  009B                     	;# 
   803  009B                     	;# 
   804  009C                     	;# 
   805  009D                     	;# 
   806  009E                     	;# 
   807  010C                     	;# 
   808  010D                     	;# 
   809  010E                     	;# 
   810  010F                     	;# 
   811  0110                     	;# 
   812  0116                     	;# 
   813  0117                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018D                     	;# 
   817  018F                     	;# 
   818  0190                     	;# 
   819  0191                     	;# 
   820  0191                     	;# 
   821  0192                     	;# 
   822  0193                     	;# 
   823  0193                     	;# 
   824  0194                     	;# 
   825  0195                     	;# 
   826  0196                     	;# 
   827  0197                     	;# 
   828  0199                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  019A                     	;# 
   832  019A                     	;# 
   833  019A                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019C                     	;# 
   840  019C                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019D                     	;# 
   844  019D                     	;# 
   845  019E                     	;# 
   846  019E                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  020D                     	;# 
   852  020F                     	;# 
   853  0210                     	;# 
   854  0211                     	;# 
   855  0211                     	;# 
   856  0212                     	;# 
   857  0212                     	;# 
   858  0213                     	;# 
   859  0213                     	;# 
   860  0214                     	;# 
   861  0214                     	;# 
   862  0215                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0216                     	;# 
   866  0216                     	;# 
   867  0217                     	;# 
   868  0217                     	;# 
   869  0219                     	;# 
   870  021A                     	;# 
   871  021B                     	;# 
   872  021C                     	;# 
   873  021D                     	;# 
   874  021E                     	;# 
   875  021F                     	;# 
   876  028C                     	;# 
   877  028D                     	;# 
   878  0291                     	;# 
   879  0291                     	;# 
   880  0292                     	;# 
   881  0293                     	;# 
   882  0298                     	;# 
   883  0298                     	;# 
   884  0299                     	;# 
   885  029A                     	;# 
   886  029D                     	;# 
   887  029E                     	;# 
   888  029F                     	;# 
   889  030C                     	;# 
   890  030D                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0318                     	;# 
   896  0318                     	;# 
   897  0319                     	;# 
   898  031A                     	;# 
   899  031C                     	;# 
   900  031C                     	;# 
   901  031D                     	;# 
   902  031E                     	;# 
   903  038C                     	;# 
   904  038D                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  040C                     	;# 
   909  040D                     	;# 
   910  0411                     	;# 
   911  0411                     	;# 
   912  0412                     	;# 
   913  0413                     	;# 
   914  0414                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  0418                     	;# 
   919  0418                     	;# 
   920  0419                     	;# 
   921  041A                     	;# 
   922  041B                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  048D                     	;# 
   927  0491                     	;# 
   928  0491                     	;# 
   929  0492                     	;# 
   930  0492                     	;# 
   931  0493                     	;# 
   932  0493                     	;# 
   933  0493                     	;# 
   934  0494                     	;# 
   935  0494                     	;# 
   936  0495                     	;# 
   937  0495                     	;# 
   938  0496                     	;# 
   939  0496                     	;# 
   940  0497                     	;# 
   941  0497                     	;# 
   942  0595                     	;# 
   943  0596                     	;# 
   944  0597                     	;# 
   945  059C                     	;# 
   946  059D                     	;# 
   947  059E                     	;# 
   948  0611                     	;# 
   949  0611                     	;# 
   950  0612                     	;# 
   951  0613                     	;# 
   952  0614                     	;# 
   953  0614                     	;# 
   954  0615                     	;# 
   955  0616                     	;# 
   956  0617                     	;# 
   957  0617                     	;# 
   958  0618                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061A                     	;# 
   962  061B                     	;# 
   963  061C                     	;# 
   964  061D                     	;# 
   965  061D                     	;# 
   966  061E                     	;# 
   967  061F                     	;# 
   968  0FE4                     	;# 
   969  0FE5                     	;# 
   970  0FE6                     	;# 
   971  0FE7                     	;# 
   972  0FE8                     	;# 
   973  0FE9                     	;# 
   974  0FEA                     	;# 
   975  0FEB                     	;# 
   976  0FED                     	;# 
   977  0FEE                     	;# 
   978  0FEF                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0008                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  000F                     	;# 
   995  0010                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0014                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  008F                     	;# 
  1013  0090                     	;# 
  1014  0091                     	;# 
  1015  0092                     	;# 
  1016  0093                     	;# 
  1017  0094                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0099                     	;# 
  1022  009A                     	;# 
  1023  009B                     	;# 
  1024  009B                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010E                     	;# 
  1031  010F                     	;# 
  1032  0110                     	;# 
  1033  0116                     	;# 
  1034  0117                     	;# 
  1035  011D                     	;# 
  1036  018C                     	;# 
  1037  018D                     	;# 
  1038  018F                     	;# 
  1039  0190                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0194                     	;# 
  1046  0195                     	;# 
  1047  0196                     	;# 
  1048  0197                     	;# 
  1049  0199                     	;# 
  1050  0199                     	;# 
  1051  0199                     	;# 
  1052  019A                     	;# 
  1053  019A                     	;# 
  1054  019A                     	;# 
  1055  019B                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019C                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019D                     	;# 
  1064  019D                     	;# 
  1065  019D                     	;# 
  1066  019E                     	;# 
  1067  019E                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  020D                     	;# 
  1073  020F                     	;# 
  1074  0210                     	;# 
  1075  0211                     	;# 
  1076  0211                     	;# 
  1077  0212                     	;# 
  1078  0212                     	;# 
  1079  0213                     	;# 
  1080  0213                     	;# 
  1081  0214                     	;# 
  1082  0214                     	;# 
  1083  0215                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0216                     	;# 
  1087  0216                     	;# 
  1088  0217                     	;# 
  1089  0217                     	;# 
  1090  0219                     	;# 
  1091  021A                     	;# 
  1092  021B                     	;# 
  1093  021C                     	;# 
  1094  021D                     	;# 
  1095  021E                     	;# 
  1096  021F                     	;# 
  1097  028C                     	;# 
  1098  028D                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0298                     	;# 
  1104  0298                     	;# 
  1105  0299                     	;# 
  1106  029A                     	;# 
  1107  029D                     	;# 
  1108  029E                     	;# 
  1109  029F                     	;# 
  1110  030C                     	;# 
  1111  030D                     	;# 
  1112  0311                     	;# 
  1113  0311                     	;# 
  1114  0312                     	;# 
  1115  0313                     	;# 
  1116  0318                     	;# 
  1117  0318                     	;# 
  1118  0319                     	;# 
  1119  031A                     	;# 
  1120  031C                     	;# 
  1121  031C                     	;# 
  1122  031D                     	;# 
  1123  031E                     	;# 
  1124  038C                     	;# 
  1125  038D                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  040C                     	;# 
  1130  040D                     	;# 
  1131  0411                     	;# 
  1132  0411                     	;# 
  1133  0412                     	;# 
  1134  0413                     	;# 
  1135  0414                     	;# 
  1136  0415                     	;# 
  1137  0416                     	;# 
  1138  0417                     	;# 
  1139  0418                     	;# 
  1140  0418                     	;# 
  1141  0419                     	;# 
  1142  041A                     	;# 
  1143  041B                     	;# 
  1144  041C                     	;# 
  1145  041D                     	;# 
  1146  041E                     	;# 
  1147  048D                     	;# 
  1148  0491                     	;# 
  1149  0491                     	;# 
  1150  0492                     	;# 
  1151  0492                     	;# 
  1152  0493                     	;# 
  1153  0493                     	;# 
  1154  0493                     	;# 
  1155  0494                     	;# 
  1156  0494                     	;# 
  1157  0495                     	;# 
  1158  0495                     	;# 
  1159  0496                     	;# 
  1160  0496                     	;# 
  1161  0497                     	;# 
  1162  0497                     	;# 
  1163  0595                     	;# 
  1164  0596                     	;# 
  1165  0597                     	;# 
  1166  059C                     	;# 
  1167  059D                     	;# 
  1168  059E                     	;# 
  1169  0611                     	;# 
  1170  0611                     	;# 
  1171  0612                     	;# 
  1172  0613                     	;# 
  1173  0614                     	;# 
  1174  0614                     	;# 
  1175  0615                     	;# 
  1176  0616                     	;# 
  1177  0617                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061D                     	;# 
  1186  061D                     	;# 
  1187  061E                     	;# 
  1188  061F                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  000E                     	;# 
  1215  000F                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0014                     	;# 
  1221  0015                     	;# 
  1222  0016                     	;# 
  1223  0016                     	;# 
  1224  0017                     	;# 
  1225  0018                     	;# 
  1226  0019                     	;# 
  1227  001A                     	;# 
  1228  001B                     	;# 
  1229  001C                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  008E                     	;# 
  1233  008F                     	;# 
  1234  0090                     	;# 
  1235  0091                     	;# 
  1236  0092                     	;# 
  1237  0093                     	;# 
  1238  0094                     	;# 
  1239  0095                     	;# 
  1240  0096                     	;# 
  1241  0097                     	;# 
  1242  0099                     	;# 
  1243  009A                     	;# 
  1244  009B                     	;# 
  1245  009B                     	;# 
  1246  009C                     	;# 
  1247  009D                     	;# 
  1248  009E                     	;# 
  1249  010C                     	;# 
  1250  010D                     	;# 
  1251  010E                     	;# 
  1252  010F                     	;# 
  1253  0110                     	;# 
  1254  0116                     	;# 
  1255  0117                     	;# 
  1256  011D                     	;# 
  1257  018C                     	;# 
  1258  018D                     	;# 
  1259  018F                     	;# 
  1260  0190                     	;# 
  1261  0191                     	;# 
  1262  0191                     	;# 
  1263  0192                     	;# 
  1264  0193                     	;# 
  1265  0193                     	;# 
  1266  0194                     	;# 
  1267  0195                     	;# 
  1268  0196                     	;# 
  1269  0197                     	;# 
  1270  0199                     	;# 
  1271  0199                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019A                     	;# 
  1275  019A                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019C                     	;# 
  1282  019C                     	;# 
  1283  019C                     	;# 
  1284  019D                     	;# 
  1285  019D                     	;# 
  1286  019D                     	;# 
  1287  019E                     	;# 
  1288  019E                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  020D                     	;# 
  1294  020F                     	;# 
  1295  0210                     	;# 
  1296  0211                     	;# 
  1297  0211                     	;# 
  1298  0212                     	;# 
  1299  0212                     	;# 
  1300  0213                     	;# 
  1301  0213                     	;# 
  1302  0214                     	;# 
  1303  0214                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0216                     	;# 
  1308  0216                     	;# 
  1309  0217                     	;# 
  1310  0217                     	;# 
  1311  0219                     	;# 
  1312  021A                     	;# 
  1313  021B                     	;# 
  1314  021C                     	;# 
  1315  021D                     	;# 
  1316  021E                     	;# 
  1317  021F                     	;# 
  1318  028C                     	;# 
  1319  028D                     	;# 
  1320  0291                     	;# 
  1321  0291                     	;# 
  1322  0292                     	;# 
  1323  0293                     	;# 
  1324  0298                     	;# 
  1325  0298                     	;# 
  1326  0299                     	;# 
  1327  029A                     	;# 
  1328  029D                     	;# 
  1329  029E                     	;# 
  1330  029F                     	;# 
  1331  030C                     	;# 
  1332  030D                     	;# 
  1333  0311                     	;# 
  1334  0311                     	;# 
  1335  0312                     	;# 
  1336  0313                     	;# 
  1337  0318                     	;# 
  1338  0318                     	;# 
  1339  0319                     	;# 
  1340  031A                     	;# 
  1341  031C                     	;# 
  1342  031C                     	;# 
  1343  031D                     	;# 
  1344  031E                     	;# 
  1345  038C                     	;# 
  1346  038D                     	;# 
  1347  0394                     	;# 
  1348  0395                     	;# 
  1349  0396                     	;# 
  1350  040C                     	;# 
  1351  040D                     	;# 
  1352  0411                     	;# 
  1353  0411                     	;# 
  1354  0412                     	;# 
  1355  0413                     	;# 
  1356  0414                     	;# 
  1357  0415                     	;# 
  1358  0416                     	;# 
  1359  0417                     	;# 
  1360  0418                     	;# 
  1361  0418                     	;# 
  1362  0419                     	;# 
  1363  041A                     	;# 
  1364  041B                     	;# 
  1365  041C                     	;# 
  1366  041D                     	;# 
  1367  041E                     	;# 
  1368  048D                     	;# 
  1369  0491                     	;# 
  1370  0491                     	;# 
  1371  0492                     	;# 
  1372  0492                     	;# 
  1373  0493                     	;# 
  1374  0493                     	;# 
  1375  0493                     	;# 
  1376  0494                     	;# 
  1377  0494                     	;# 
  1378  0495                     	;# 
  1379  0495                     	;# 
  1380  0496                     	;# 
  1381  0496                     	;# 
  1382  0497                     	;# 
  1383  0497                     	;# 
  1384  0595                     	;# 
  1385  0596                     	;# 
  1386  0597                     	;# 
  1387  059C                     	;# 
  1388  059D                     	;# 
  1389  059E                     	;# 
  1390  0611                     	;# 
  1391  0611                     	;# 
  1392  0612                     	;# 
  1393  0613                     	;# 
  1394  0614                     	;# 
  1395  0614                     	;# 
  1396  0615                     	;# 
  1397  0616                     	;# 
  1398  0617                     	;# 
  1399  0617                     	;# 
  1400  0618                     	;# 
  1401  0619                     	;# 
  1402  061A                     	;# 
  1403  061A                     	;# 
  1404  061B                     	;# 
  1405  061C                     	;# 
  1406  061D                     	;# 
  1407  061D                     	;# 
  1408  061E                     	;# 
  1409  061F                     	;# 
  1410  0FE4                     	;# 
  1411  0FE5                     	;# 
  1412  0FE6                     	;# 
  1413  0FE7                     	;# 
  1414  0FE8                     	;# 
  1415  0FE9                     	;# 
  1416  0FEA                     	;# 
  1417  0FEB                     	;# 
  1418  0FED                     	;# 
  1419  0FEE                     	;# 
  1420  0FEF                     	;# 
  1421  0000                     	;# 
  1422  0001                     	;# 
  1423  0002                     	;# 
  1424  0003                     	;# 
  1425  0004                     	;# 
  1426  0005                     	;# 
  1427  0006                     	;# 
  1428  0007                     	;# 
  1429  0008                     	;# 
  1430  0009                     	;# 
  1431  000A                     	;# 
  1432  000B                     	;# 
  1433  000C                     	;# 
  1434  000D                     	;# 
  1435  000E                     	;# 
  1436  000F                     	;# 
  1437  0010                     	;# 
  1438  0011                     	;# 
  1439  0012                     	;# 
  1440  0013                     	;# 
  1441  0014                     	;# 
  1442  0015                     	;# 
  1443  0016                     	;# 
  1444  0016                     	;# 
  1445  0017                     	;# 
  1446  0018                     	;# 
  1447  0019                     	;# 
  1448  001A                     	;# 
  1449  001B                     	;# 
  1450  001C                     	;# 
  1451  008C                     	;# 
  1452  008D                     	;# 
  1453  008E                     	;# 
  1454  008F                     	;# 
  1455  0090                     	;# 
  1456  0091                     	;# 
  1457  0092                     	;# 
  1458  0093                     	;# 
  1459  0094                     	;# 
  1460  0095                     	;# 
  1461  0096                     	;# 
  1462  0097                     	;# 
  1463  0099                     	;# 
  1464  009A                     	;# 
  1465  009B                     	;# 
  1466  009B                     	;# 
  1467  009C                     	;# 
  1468  009D                     	;# 
  1469  009E                     	;# 
  1470  010C                     	;# 
  1471  010D                     	;# 
  1472  010E                     	;# 
  1473  010F                     	;# 
  1474  0110                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  011D                     	;# 
  1478  018C                     	;# 
  1479  018D                     	;# 
  1480  018F                     	;# 
  1481  0190                     	;# 
  1482  0191                     	;# 
  1483  0191                     	;# 
  1484  0192                     	;# 
  1485  0193                     	;# 
  1486  0193                     	;# 
  1487  0194                     	;# 
  1488  0195                     	;# 
  1489  0196                     	;# 
  1490  0197                     	;# 
  1491  0199                     	;# 
  1492  0199                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019A                     	;# 
  1496  019A                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019C                     	;# 
  1503  019C                     	;# 
  1504  019C                     	;# 
  1505  019D                     	;# 
  1506  019D                     	;# 
  1507  019D                     	;# 
  1508  019E                     	;# 
  1509  019E                     	;# 
  1510  019E                     	;# 
  1511  019F                     	;# 
  1512  019F                     	;# 
  1513  019F                     	;# 
  1514  020D                     	;# 
  1515  020F                     	;# 
  1516  0210                     	;# 
  1517  0211                     	;# 
  1518  0211                     	;# 
  1519  0212                     	;# 
  1520  0212                     	;# 
  1521  0213                     	;# 
  1522  0213                     	;# 
  1523  0214                     	;# 
  1524  0214                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0216                     	;# 
  1529  0216                     	;# 
  1530  0217                     	;# 
  1531  0217                     	;# 
  1532  0219                     	;# 
  1533  021A                     	;# 
  1534  021B                     	;# 
  1535  021C                     	;# 
  1536  021D                     	;# 
  1537  021E                     	;# 
  1538  021F                     	;# 
  1539  028C                     	;# 
  1540  028D                     	;# 
  1541  0291                     	;# 
  1542  0291                     	;# 
  1543  0292                     	;# 
  1544  0293                     	;# 
  1545  0298                     	;# 
  1546  0298                     	;# 
  1547  0299                     	;# 
  1548  029A                     	;# 
  1549  029D                     	;# 
  1550  029E                     	;# 
  1551  029F                     	;# 
  1552  030C                     	;# 
  1553  030D                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  031C                     	;# 
  1563  031C                     	;# 
  1564  031D                     	;# 
  1565  031E                     	;# 
  1566  038C                     	;# 
  1567  038D                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  040C                     	;# 
  1572  040D                     	;# 
  1573  0411                     	;# 
  1574  0411                     	;# 
  1575  0412                     	;# 
  1576  0413                     	;# 
  1577  0414                     	;# 
  1578  0415                     	;# 
  1579  0416                     	;# 
  1580  0417                     	;# 
  1581  0418                     	;# 
  1582  0418                     	;# 
  1583  0419                     	;# 
  1584  041A                     	;# 
  1585  041B                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  048D                     	;# 
  1590  0491                     	;# 
  1591  0491                     	;# 
  1592  0492                     	;# 
  1593  0492                     	;# 
  1594  0493                     	;# 
  1595  0493                     	;# 
  1596  0493                     	;# 
  1597  0494                     	;# 
  1598  0494                     	;# 
  1599  0495                     	;# 
  1600  0495                     	;# 
  1601  0496                     	;# 
  1602  0496                     	;# 
  1603  0497                     	;# 
  1604  0497                     	;# 
  1605  0595                     	;# 
  1606  0596                     	;# 
  1607  0597                     	;# 
  1608  059C                     	;# 
  1609  059D                     	;# 
  1610  059E                     	;# 
  1611  0611                     	;# 
  1612  0611                     	;# 
  1613  0612                     	;# 
  1614  0613                     	;# 
  1615  0614                     	;# 
  1616  0614                     	;# 
  1617  0615                     	;# 
  1618  0616                     	;# 
  1619  0617                     	;# 
  1620  0617                     	;# 
  1621  0618                     	;# 
  1622  0619                     	;# 
  1623  061A                     	;# 
  1624  061A                     	;# 
  1625  061B                     	;# 
  1626  061C                     	;# 
  1627  061D                     	;# 
  1628  061D                     	;# 
  1629  061E                     	;# 
  1630  061F                     	;# 
  1631  0FE4                     	;# 
  1632  0FE5                     	;# 
  1633  0FE6                     	;# 
  1634  0FE7                     	;# 
  1635  0FE8                     	;# 
  1636  0FE9                     	;# 
  1637  0FEA                     	;# 
  1638  0FEB                     	;# 
  1639  0FED                     	;# 
  1640  0FEE                     	;# 
  1641  0FEF                     	;# 
  1642  0000                     	;# 
  1643  0001                     	;# 
  1644  0002                     	;# 
  1645  0003                     	;# 
  1646  0004                     	;# 
  1647  0005                     	;# 
  1648  0006                     	;# 
  1649  0007                     	;# 
  1650  0008                     	;# 
  1651  0009                     	;# 
  1652  000A                     	;# 
  1653  000B                     	;# 
  1654  000C                     	;# 
  1655  000D                     	;# 
  1656  000E                     	;# 
  1657  000F                     	;# 
  1658  0010                     	;# 
  1659  0011                     	;# 
  1660  0012                     	;# 
  1661  0013                     	;# 
  1662  0014                     	;# 
  1663  0015                     	;# 
  1664  0016                     	;# 
  1665  0016                     	;# 
  1666  0017                     	;# 
  1667  0018                     	;# 
  1668  0019                     	;# 
  1669  001A                     	;# 
  1670  001B                     	;# 
  1671  001C                     	;# 
  1672  008C                     	;# 
  1673  008D                     	;# 
  1674  008E                     	;# 
  1675  008F                     	;# 
  1676  0090                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0093                     	;# 
  1680  0094                     	;# 
  1681  0095                     	;# 
  1682  0096                     	;# 
  1683  0097                     	;# 
  1684  0099                     	;# 
  1685  009A                     	;# 
  1686  009B                     	;# 
  1687  009B                     	;# 
  1688  009C                     	;# 
  1689  009D                     	;# 
  1690  009E                     	;# 
  1691  010C                     	;# 
  1692  010D                     	;# 
  1693  010E                     	;# 
  1694  010F                     	;# 
  1695  0110                     	;# 
  1696  0116                     	;# 
  1697  0117                     	;# 
  1698  011D                     	;# 
  1699  018C                     	;# 
  1700  018D                     	;# 
  1701  018F                     	;# 
  1702  0190                     	;# 
  1703  0191                     	;# 
  1704  0191                     	;# 
  1705  0192                     	;# 
  1706  0193                     	;# 
  1707  0193                     	;# 
  1708  0194                     	;# 
  1709  0195                     	;# 
  1710  0196                     	;# 
  1711  0197                     	;# 
  1712  0199                     	;# 
  1713  0199                     	;# 
  1714  0199                     	;# 
  1715  019A                     	;# 
  1716  019A                     	;# 
  1717  019A                     	;# 
  1718  019B                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019C                     	;# 
  1724  019C                     	;# 
  1725  019C                     	;# 
  1726  019D                     	;# 
  1727  019D                     	;# 
  1728  019D                     	;# 
  1729  019E                     	;# 
  1730  019E                     	;# 
  1731  019E                     	;# 
  1732  019F                     	;# 
  1733  019F                     	;# 
  1734  019F                     	;# 
  1735  020D                     	;# 
  1736  020F                     	;# 
  1737  0210                     	;# 
  1738  0211                     	;# 
  1739  0211                     	;# 
  1740  0212                     	;# 
  1741  0212                     	;# 
  1742  0213                     	;# 
  1743  0213                     	;# 
  1744  0214                     	;# 
  1745  0214                     	;# 
  1746  0215                     	;# 
  1747  0215                     	;# 
  1748  0215                     	;# 
  1749  0216                     	;# 
  1750  0216                     	;# 
  1751  0217                     	;# 
  1752  0217                     	;# 
  1753  0219                     	;# 
  1754  021A                     	;# 
  1755  021B                     	;# 
  1756  021C                     	;# 
  1757  021D                     	;# 
  1758  021E                     	;# 
  1759  021F                     	;# 
  1760  028C                     	;# 
  1761  028D                     	;# 
  1762  0291                     	;# 
  1763  0291                     	;# 
  1764  0292                     	;# 
  1765  0293                     	;# 
  1766  0298                     	;# 
  1767  0298                     	;# 
  1768  0299                     	;# 
  1769  029A                     	;# 
  1770  029D                     	;# 
  1771  029E                     	;# 
  1772  029F                     	;# 
  1773  030C                     	;# 
  1774  030D                     	;# 
  1775  0311                     	;# 
  1776  0311                     	;# 
  1777  0312                     	;# 
  1778  0313                     	;# 
  1779  0318                     	;# 
  1780  0318                     	;# 
  1781  0319                     	;# 
  1782  031A                     	;# 
  1783  031C                     	;# 
  1784  031C                     	;# 
  1785  031D                     	;# 
  1786  031E                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  040C                     	;# 
  1793  040D                     	;# 
  1794  0411                     	;# 
  1795  0411                     	;# 
  1796  0412                     	;# 
  1797  0413                     	;# 
  1798  0414                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041B                     	;# 
  1807  041C                     	;# 
  1808  041D                     	;# 
  1809  041E                     	;# 
  1810  048D                     	;# 
  1811  0491                     	;# 
  1812  0491                     	;# 
  1813  0492                     	;# 
  1814  0492                     	;# 
  1815  0493                     	;# 
  1816  0493                     	;# 
  1817  0493                     	;# 
  1818  0494                     	;# 
  1819  0494                     	;# 
  1820  0495                     	;# 
  1821  0495                     	;# 
  1822  0496                     	;# 
  1823  0496                     	;# 
  1824  0497                     	;# 
  1825  0497                     	;# 
  1826  0595                     	;# 
  1827  0596                     	;# 
  1828  0597                     	;# 
  1829  059C                     	;# 
  1830  059D                     	;# 
  1831  059E                     	;# 
  1832  0611                     	;# 
  1833  0611                     	;# 
  1834  0612                     	;# 
  1835  0613                     	;# 
  1836  0614                     	;# 
  1837  0614                     	;# 
  1838  0615                     	;# 
  1839  0616                     	;# 
  1840  0617                     	;# 
  1841  0617                     	;# 
  1842  0618                     	;# 
  1843  0619                     	;# 
  1844  061A                     	;# 
  1845  061A                     	;# 
  1846  061B                     	;# 
  1847  061C                     	;# 
  1848  061D                     	;# 
  1849  061D                     	;# 
  1850  061E                     	;# 
  1851  061F                     	;# 
  1852  0FE4                     	;# 
  1853  0FE5                     	;# 
  1854  0FE6                     	;# 
  1855  0FE7                     	;# 
  1856  0FE8                     	;# 
  1857  0FE9                     	;# 
  1858  0FEA                     	;# 
  1859  0FEB                     	;# 
  1860  0FED                     	;# 
  1861  0FEE                     	;# 
  1862  0FEF                     	;# 
  1863  0000                     	;# 
  1864  0001                     	;# 
  1865  0002                     	;# 
  1866  0003                     	;# 
  1867  0004                     	;# 
  1868  0005                     	;# 
  1869  0006                     	;# 
  1870  0007                     	;# 
  1871  0008                     	;# 
  1872  0009                     	;# 
  1873  000A                     	;# 
  1874  000B                     	;# 
  1875  000C                     	;# 
  1876  000D                     	;# 
  1877  000E                     	;# 
  1878  000F                     	;# 
  1879  0010                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0013                     	;# 
  1883  0014                     	;# 
  1884  0015                     	;# 
  1885  0016                     	;# 
  1886  0016                     	;# 
  1887  0017                     	;# 
  1888  0018                     	;# 
  1889  0019                     	;# 
  1890  001A                     	;# 
  1891  001B                     	;# 
  1892  001C                     	;# 
  1893  008C                     	;# 
  1894  008D                     	;# 
  1895  008E                     	;# 
  1896  008F                     	;# 
  1897  0090                     	;# 
  1898  0091                     	;# 
  1899  0092                     	;# 
  1900  0093                     	;# 
  1901  0094                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0097                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  010F                     	;# 
  1916  0110                     	;# 
  1917  0116                     	;# 
  1918  0117                     	;# 
  1919  011D                     	;# 
  1920  018C                     	;# 
  1921  018D                     	;# 
  1922  018F                     	;# 
  1923  0190                     	;# 
  1924  0191                     	;# 
  1925  0191                     	;# 
  1926  0192                     	;# 
  1927  0193                     	;# 
  1928  0193                     	;# 
  1929  0194                     	;# 
  1930  0195                     	;# 
  1931  0196                     	;# 
  1932  0197                     	;# 
  1933  0199                     	;# 
  1934  0199                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019A                     	;# 
  1938  019A                     	;# 
  1939  019B                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019C                     	;# 
  1945  019C                     	;# 
  1946  019C                     	;# 
  1947  019D                     	;# 
  1948  019D                     	;# 
  1949  019D                     	;# 
  1950  019E                     	;# 
  1951  019E                     	;# 
  1952  019E                     	;# 
  1953  019F                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  020D                     	;# 
  1957  020F                     	;# 
  1958  0210                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0219                     	;# 
  1975  021A                     	;# 
  1976  021B                     	;# 
  1977  021C                     	;# 
  1978  021D                     	;# 
  1979  021E                     	;# 
  1980  021F                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  0291                     	;# 
  1984  0291                     	;# 
  1985  0292                     	;# 
  1986  0293                     	;# 
  1987  0298                     	;# 
  1988  0298                     	;# 
  1989  0299                     	;# 
  1990  029A                     	;# 
  1991  029D                     	;# 
  1992  029E                     	;# 
  1993  029F                     	;# 
  1994  030C                     	;# 
  1995  030D                     	;# 
  1996  0311                     	;# 
  1997  0311                     	;# 
  1998  0312                     	;# 
  1999  0313                     	;# 
  2000  0318                     	;# 
  2001  0318                     	;# 
  2002  0319                     	;# 
  2003  031A                     	;# 
  2004  031C                     	;# 
  2005  031C                     	;# 
  2006  031D                     	;# 
  2007  031E                     	;# 
  2008  038C                     	;# 
  2009  038D                     	;# 
  2010  0394                     	;# 
  2011  0395                     	;# 
  2012  0396                     	;# 
  2013  040C                     	;# 
  2014  040D                     	;# 
  2015  0411                     	;# 
  2016  0411                     	;# 
  2017  0412                     	;# 
  2018  0413                     	;# 
  2019  0414                     	;# 
  2020  0415                     	;# 
  2021  0416                     	;# 
  2022  0417                     	;# 
  2023  0418                     	;# 
  2024  0418                     	;# 
  2025  0419                     	;# 
  2026  041A                     	;# 
  2027  041B                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  048D                     	;# 
  2032  0491                     	;# 
  2033  0491                     	;# 
  2034  0492                     	;# 
  2035  0492                     	;# 
  2036  0493                     	;# 
  2037  0493                     	;# 
  2038  0493                     	;# 
  2039  0494                     	;# 
  2040  0494                     	;# 
  2041  0495                     	;# 
  2042  0495                     	;# 
  2043  0496                     	;# 
  2044  0496                     	;# 
  2045  0497                     	;# 
  2046  0497                     	;# 
  2047  0595                     	;# 
  2048  0596                     	;# 
  2049  0597                     	;# 
  2050  059C                     	;# 
  2051  059D                     	;# 
  2052  059E                     	;# 
  2053  0611                     	;# 
  2054  0611                     	;# 
  2055  0612                     	;# 
  2056  0613                     	;# 
  2057  0614                     	;# 
  2058  0614                     	;# 
  2059  0615                     	;# 
  2060  0616                     	;# 
  2061  0617                     	;# 
  2062  0617                     	;# 
  2063  0618                     	;# 
  2064  0619                     	;# 
  2065  061A                     	;# 
  2066  061A                     	;# 
  2067  061B                     	;# 
  2068  061C                     	;# 
  2069  061D                     	;# 
  2070  061D                     	;# 
  2071  061E                     	;# 
  2072  061F                     	;# 
  2073  0FE4                     	;# 
  2074  0FE5                     	;# 
  2075  0FE6                     	;# 
  2076  0FE7                     	;# 
  2077  0FE8                     	;# 
  2078  0FE9                     	;# 
  2079  0FEA                     	;# 
  2080  0FEB                     	;# 
  2081  0FED                     	;# 
  2082  0FEE                     	;# 
  2083  0FEF                     	;# 
  2084  0000                     	;# 
  2085  0001                     	;# 
  2086  0002                     	;# 
  2087  0003                     	;# 
  2088  0004                     	;# 
  2089  0005                     	;# 
  2090  0006                     	;# 
  2091  0007                     	;# 
  2092  0008                     	;# 
  2093  0009                     	;# 
  2094  000A                     	;# 
  2095  000B                     	;# 
  2096  000C                     	;# 
  2097  000D                     	;# 
  2098  000E                     	;# 
  2099  000F                     	;# 
  2100  0010                     	;# 
  2101  0011                     	;# 
  2102  0012                     	;# 
  2103  0013                     	;# 
  2104  0014                     	;# 
  2105  0015                     	;# 
  2106  0016                     	;# 
  2107  0016                     	;# 
  2108  0017                     	;# 
  2109  0018                     	;# 
  2110  0019                     	;# 
  2111  001A                     	;# 
  2112  001B                     	;# 
  2113  001C                     	;# 
  2114  008C                     	;# 
  2115  008D                     	;# 
  2116  008E                     	;# 
  2117  008F                     	;# 
  2118  0090                     	;# 
  2119  0091                     	;# 
  2120  0092                     	;# 
  2121  0093                     	;# 
  2122  0094                     	;# 
  2123  0095                     	;# 
  2124  0096                     	;# 
  2125  0097                     	;# 
  2126  0099                     	;# 
  2127  009A                     	;# 
  2128  009B                     	;# 
  2129  009B                     	;# 
  2130  009C                     	;# 
  2131  009D                     	;# 
  2132  009E                     	;# 
  2133  010C                     	;# 
  2134  010D                     	;# 
  2135  010E                     	;# 
  2136  010F                     	;# 
  2137  0110                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  011D                     	;# 
  2141  018C                     	;# 
  2142  018D                     	;# 
  2143  018F                     	;# 
  2144  0190                     	;# 
  2145  0191                     	;# 
  2146  0191                     	;# 
  2147  0192                     	;# 
  2148  0193                     	;# 
  2149  0193                     	;# 
  2150  0194                     	;# 
  2151  0195                     	;# 
  2152  0196                     	;# 
  2153  0197                     	;# 
  2154  0199                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  019A                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019C                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019D                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019E                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019F                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  020D                     	;# 
  2178  020F                     	;# 
  2179  0210                     	;# 
  2180  0211                     	;# 
  2181  0211                     	;# 
  2182  0212                     	;# 
  2183  0212                     	;# 
  2184  0213                     	;# 
  2185  0213                     	;# 
  2186  0214                     	;# 
  2187  0214                     	;# 
  2188  0215                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0216                     	;# 
  2192  0216                     	;# 
  2193  0217                     	;# 
  2194  0217                     	;# 
  2195  0219                     	;# 
  2196  021A                     	;# 
  2197  021B                     	;# 
  2198  021C                     	;# 
  2199  021D                     	;# 
  2200  021E                     	;# 
  2201  021F                     	;# 
  2202  028C                     	;# 
  2203  028D                     	;# 
  2204  0291                     	;# 
  2205  0291                     	;# 
  2206  0292                     	;# 
  2207  0293                     	;# 
  2208  0298                     	;# 
  2209  0298                     	;# 
  2210  0299                     	;# 
  2211  029A                     	;# 
  2212  029D                     	;# 
  2213  029E                     	;# 
  2214  029F                     	;# 
  2215  030C                     	;# 
  2216  030D                     	;# 
  2217  0311                     	;# 
  2218  0311                     	;# 
  2219  0312                     	;# 
  2220  0313                     	;# 
  2221  0318                     	;# 
  2222  0318                     	;# 
  2223  0319                     	;# 
  2224  031A                     	;# 
  2225  031C                     	;# 
  2226  031C                     	;# 
  2227  031D                     	;# 
  2228  031E                     	;# 
  2229  038C                     	;# 
  2230  038D                     	;# 
  2231  0394                     	;# 
  2232  0395                     	;# 
  2233  0396                     	;# 
  2234  040C                     	;# 
  2235  040D                     	;# 
  2236  0411                     	;# 
  2237  0411                     	;# 
  2238  0412                     	;# 
  2239  0413                     	;# 
  2240  0414                     	;# 
  2241  0415                     	;# 
  2242  0416                     	;# 
  2243  0417                     	;# 
  2244  0418                     	;# 
  2245  0418                     	;# 
  2246  0419                     	;# 
  2247  041A                     	;# 
  2248  041B                     	;# 
  2249  041C                     	;# 
  2250  041D                     	;# 
  2251  041E                     	;# 
  2252  048D                     	;# 
  2253  0491                     	;# 
  2254  0491                     	;# 
  2255  0492                     	;# 
  2256  0492                     	;# 
  2257  0493                     	;# 
  2258  0493                     	;# 
  2259  0493                     	;# 
  2260  0494                     	;# 
  2261  0494                     	;# 
  2262  0495                     	;# 
  2263  0495                     	;# 
  2264  0496                     	;# 
  2265  0496                     	;# 
  2266  0497                     	;# 
  2267  0497                     	;# 
  2268  0595                     	;# 
  2269  0596                     	;# 
  2270  0597                     	;# 
  2271  059C                     	;# 
  2272  059D                     	;# 
  2273  059E                     	;# 
  2274  0611                     	;# 
  2275  0611                     	;# 
  2276  0612                     	;# 
  2277  0613                     	;# 
  2278  0614                     	;# 
  2279  0614                     	;# 
  2280  0615                     	;# 
  2281  0616                     	;# 
  2282  0617                     	;# 
  2283  0617                     	;# 
  2284  0618                     	;# 
  2285  0619                     	;# 
  2286  061A                     	;# 
  2287  061A                     	;# 
  2288  061B                     	;# 
  2289  061C                     	;# 
  2290  061D                     	;# 
  2291  061D                     	;# 
  2292  061E                     	;# 
  2293  061F                     	;# 
  2294  0FE4                     	;# 
  2295  0FE5                     	;# 
  2296  0FE6                     	;# 
  2297  0FE7                     	;# 
  2298  0FE8                     	;# 
  2299  0FE9                     	;# 
  2300  0FEA                     	;# 
  2301  0FEB                     	;# 
  2302  0FED                     	;# 
  2303  0FEE                     	;# 
  2304  0FEF                     	;# 
  2305  0000                     	;# 
  2306  0001                     	;# 
  2307  0002                     	;# 
  2308  0003                     	;# 
  2309  0004                     	;# 
  2310  0005                     	;# 
  2311  0006                     	;# 
  2312  0007                     	;# 
  2313  0008                     	;# 
  2314  0009                     	;# 
  2315  000A                     	;# 
  2316  000B                     	;# 
  2317  000C                     	;# 
  2318  000D                     	;# 
  2319  000E                     	;# 
  2320  000F                     	;# 
  2321  0010                     	;# 
  2322  0011                     	;# 
  2323  0012                     	;# 
  2324  0013                     	;# 
  2325  0014                     	;# 
  2326  0015                     	;# 
  2327  0016                     	;# 
  2328  0016                     	;# 
  2329  0017                     	;# 
  2330  0018                     	;# 
  2331  0019                     	;# 
  2332  001A                     	;# 
  2333  001B                     	;# 
  2334  001C                     	;# 
  2335  008C                     	;# 
  2336  008D                     	;# 
  2337  008E                     	;# 
  2338  008F                     	;# 
  2339  0090                     	;# 
  2340  0091                     	;# 
  2341  0092                     	;# 
  2342  0093                     	;# 
  2343  0094                     	;# 
  2344  0095                     	;# 
  2345  0096                     	;# 
  2346  0097                     	;# 
  2347  0099                     	;# 
  2348  009A                     	;# 
  2349  009B                     	;# 
  2350  009B                     	;# 
  2351  009C                     	;# 
  2352  009D                     	;# 
  2353  009E                     	;# 
  2354  010C                     	;# 
  2355  010D                     	;# 
  2356  010E                     	;# 
  2357  010F                     	;# 
  2358  0110                     	;# 
  2359  0116                     	;# 
  2360  0117                     	;# 
  2361  011D                     	;# 
  2362  018C                     	;# 
  2363  018D                     	;# 
  2364  018F                     	;# 
  2365  0190                     	;# 
  2366  0191                     	;# 
  2367  0191                     	;# 
  2368  0192                     	;# 
  2369  0193                     	;# 
  2370  0193                     	;# 
  2371  0194                     	;# 
  2372  0195                     	;# 
  2373  0196                     	;# 
  2374  0197                     	;# 
  2375  0199                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  019A                     	;# 
  2379  019A                     	;# 
  2380  019A                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019C                     	;# 
  2387  019C                     	;# 
  2388  019C                     	;# 
  2389  019D                     	;# 
  2390  019D                     	;# 
  2391  019D                     	;# 
  2392  019E                     	;# 
  2393  019E                     	;# 
  2394  019E                     	;# 
  2395  019F                     	;# 
  2396  019F                     	;# 
  2397  019F                     	;# 
  2398  020D                     	;# 
  2399  020F                     	;# 
  2400  0210                     	;# 
  2401  0211                     	;# 
  2402  0211                     	;# 
  2403  0212                     	;# 
  2404  0212                     	;# 
  2405  0213                     	;# 
  2406  0213                     	;# 
  2407  0214                     	;# 
  2408  0214                     	;# 
  2409  0215                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0216                     	;# 
  2413  0216                     	;# 
  2414  0217                     	;# 
  2415  0217                     	;# 
  2416  0219                     	;# 
  2417  021A                     	;# 
  2418  021B                     	;# 
  2419  021C                     	;# 
  2420  021D                     	;# 
  2421  021E                     	;# 
  2422  021F                     	;# 
  2423  028C                     	;# 
  2424  028D                     	;# 
  2425  0291                     	;# 
  2426  0291                     	;# 
  2427  0292                     	;# 
  2428  0293                     	;# 
  2429  0298                     	;# 
  2430  0298                     	;# 
  2431  0299                     	;# 
  2432  029A                     	;# 
  2433  029D                     	;# 
  2434  029E                     	;# 
  2435  029F                     	;# 
  2436  030C                     	;# 
  2437  030D                     	;# 
  2438  0311                     	;# 
  2439  0311                     	;# 
  2440  0312                     	;# 
  2441  0313                     	;# 
  2442  0318                     	;# 
  2443  0318                     	;# 
  2444  0319                     	;# 
  2445  031A                     	;# 
  2446  031C                     	;# 
  2447  031C                     	;# 
  2448  031D                     	;# 
  2449  031E                     	;# 
  2450  038C                     	;# 
  2451  038D                     	;# 
  2452  0394                     	;# 
  2453  0395                     	;# 
  2454  0396                     	;# 
  2455  040C                     	;# 
  2456  040D                     	;# 
  2457  0411                     	;# 
  2458  0411                     	;# 
  2459  0412                     	;# 
  2460  0413                     	;# 
  2461  0414                     	;# 
  2462  0415                     	;# 
  2463  0416                     	;# 
  2464  0417                     	;# 
  2465  0418                     	;# 
  2466  0418                     	;# 
  2467  0419                     	;# 
  2468  041A                     	;# 
  2469  041B                     	;# 
  2470  041C                     	;# 
  2471  041D                     	;# 
  2472  041E                     	;# 
  2473  048D                     	;# 
  2474  0491                     	;# 
  2475  0491                     	;# 
  2476  0492                     	;# 
  2477  0492                     	;# 
  2478  0493                     	;# 
  2479  0493                     	;# 
  2480  0493                     	;# 
  2481  0494                     	;# 
  2482  0494                     	;# 
  2483  0495                     	;# 
  2484  0495                     	;# 
  2485  0496                     	;# 
  2486  0496                     	;# 
  2487  0497                     	;# 
  2488  0497                     	;# 
  2489  0595                     	;# 
  2490  0596                     	;# 
  2491  0597                     	;# 
  2492  059C                     	;# 
  2493  059D                     	;# 
  2494  059E                     	;# 
  2495  0611                     	;# 
  2496  0611                     	;# 
  2497  0612                     	;# 
  2498  0613                     	;# 
  2499  0614                     	;# 
  2500  0614                     	;# 
  2501  0615                     	;# 
  2502  0616                     	;# 
  2503  0617                     	;# 
  2504  0617                     	;# 
  2505  0618                     	;# 
  2506  0619                     	;# 
  2507  061A                     	;# 
  2508  061A                     	;# 
  2509  061B                     	;# 
  2510  061C                     	;# 
  2511  061D                     	;# 
  2512  061D                     	;# 
  2513  061E                     	;# 
  2514  061F                     	;# 
  2515  0FE4                     	;# 
  2516  0FE5                     	;# 
  2517  0FE6                     	;# 
  2518  0FE7                     	;# 
  2519  0FE8                     	;# 
  2520  0FE9                     	;# 
  2521  0FEA                     	;# 
  2522  0FEB                     	;# 
  2523  0FED                     	;# 
  2524  0FEE                     	;# 
  2525  0FEF                     	;# 
  2526  0000                     	;# 
  2527  0001                     	;# 
  2528  0002                     	;# 
  2529  0003                     	;# 
  2530  0004                     	;# 
  2531  0005                     	;# 
  2532  0006                     	;# 
  2533  0007                     	;# 
  2534  0008                     	;# 
  2535  0009                     	;# 
  2536  000A                     	;# 
  2537  000B                     	;# 
  2538  000C                     	;# 
  2539  000D                     	;# 
  2540  000E                     	;# 
  2541  000F                     	;# 
  2542  0010                     	;# 
  2543  0011                     	;# 
  2544  0012                     	;# 
  2545  0013                     	;# 
  2546  0014                     	;# 
  2547  0015                     	;# 
  2548  0016                     	;# 
  2549  0016                     	;# 
  2550  0017                     	;# 
  2551  0018                     	;# 
  2552  0019                     	;# 
  2553  001A                     	;# 
  2554  001B                     	;# 
  2555  001C                     	;# 
  2556  008C                     	;# 
  2557  008D                     	;# 
  2558  008E                     	;# 
  2559  008F                     	;# 
  2560  0090                     	;# 
  2561  0091                     	;# 
  2562  0092                     	;# 
  2563  0093                     	;# 
  2564  0094                     	;# 
  2565  0095                     	;# 
  2566  0096                     	;# 
  2567  0097                     	;# 
  2568  0099                     	;# 
  2569  009A                     	;# 
  2570  009B                     	;# 
  2571  009B                     	;# 
  2572  009C                     	;# 
  2573  009D                     	;# 
  2574  009E                     	;# 
  2575  010C                     	;# 
  2576  010D                     	;# 
  2577  010E                     	;# 
  2578  010F                     	;# 
  2579  0110                     	;# 
  2580  0116                     	;# 
  2581  0117                     	;# 
  2582  011D                     	;# 
  2583  018C                     	;# 
  2584  018D                     	;# 
  2585  018F                     	;# 
  2586  0190                     	;# 
  2587  0191                     	;# 
  2588  0191                     	;# 
  2589  0192                     	;# 
  2590  0193                     	;# 
  2591  0193                     	;# 
  2592  0194                     	;# 
  2593  0195                     	;# 
  2594  0196                     	;# 
  2595  0197                     	;# 
  2596  0199                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  019A                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019B                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019C                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019D                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019E                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019F                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  020D                     	;# 
  2620  020F                     	;# 
  2621  0210                     	;# 
  2622  0211                     	;# 
  2623  0211                     	;# 
  2624  0212                     	;# 
  2625  0212                     	;# 
  2626  0213                     	;# 
  2627  0213                     	;# 
  2628  0214                     	;# 
  2629  0214                     	;# 
  2630  0215                     	;# 
  2631  0215                     	;# 
  2632  0215                     	;# 
  2633  0216                     	;# 
  2634  0216                     	;# 
  2635  0217                     	;# 
  2636  0217                     	;# 
  2637  0219                     	;# 
  2638  021A                     	;# 
  2639  021B                     	;# 
  2640  021C                     	;# 
  2641  021D                     	;# 
  2642  021E                     	;# 
  2643  021F                     	;# 
  2644  028C                     	;# 
  2645  028D                     	;# 
  2646  0291                     	;# 
  2647  0291                     	;# 
  2648  0292                     	;# 
  2649  0293                     	;# 
  2650  0298                     	;# 
  2651  0298                     	;# 
  2652  0299                     	;# 
  2653  029A                     	;# 
  2654  029D                     	;# 
  2655  029E                     	;# 
  2656  029F                     	;# 
  2657  030C                     	;# 
  2658  030D                     	;# 
  2659  0311                     	;# 
  2660  0311                     	;# 
  2661  0312                     	;# 
  2662  0313                     	;# 
  2663  0318                     	;# 
  2664  0318                     	;# 
  2665  0319                     	;# 
  2666  031A                     	;# 
  2667  031C                     	;# 
  2668  031C                     	;# 
  2669  031D                     	;# 
  2670  031E                     	;# 
  2671  038C                     	;# 
  2672  038D                     	;# 
  2673  0394                     	;# 
  2674  0395                     	;# 
  2675  0396                     	;# 
  2676  040C                     	;# 
  2677  040D                     	;# 
  2678  0411                     	;# 
  2679  0411                     	;# 
  2680  0412                     	;# 
  2681  0413                     	;# 
  2682  0414                     	;# 
  2683  0415                     	;# 
  2684  0416                     	;# 
  2685  0417                     	;# 
  2686  0418                     	;# 
  2687  0418                     	;# 
  2688  0419                     	;# 
  2689  041A                     	;# 
  2690  041B                     	;# 
  2691  041C                     	;# 
  2692  041D                     	;# 
  2693  041E                     	;# 
  2694  048D                     	;# 
  2695  0491                     	;# 
  2696  0491                     	;# 
  2697  0492                     	;# 
  2698  0492                     	;# 
  2699  0493                     	;# 
  2700  0493                     	;# 
  2701  0493                     	;# 
  2702  0494                     	;# 
  2703  0494                     	;# 
  2704  0495                     	;# 
  2705  0495                     	;# 
  2706  0496                     	;# 
  2707  0496                     	;# 
  2708  0497                     	;# 
  2709  0497                     	;# 
  2710  0595                     	;# 
  2711  0596                     	;# 
  2712  0597                     	;# 
  2713  059C                     	;# 
  2714  059D                     	;# 
  2715  059E                     	;# 
  2716  0611                     	;# 
  2717  0611                     	;# 
  2718  0612                     	;# 
  2719  0613                     	;# 
  2720  0614                     	;# 
  2721  0614                     	;# 
  2722  0615                     	;# 
  2723  0616                     	;# 
  2724  0617                     	;# 
  2725  0617                     	;# 
  2726  0618                     	;# 
  2727  0619                     	;# 
  2728  061A                     	;# 
  2729  061A                     	;# 
  2730  061B                     	;# 
  2731  061C                     	;# 
  2732  061D                     	;# 
  2733  061D                     	;# 
  2734  061E                     	;# 
  2735  061F                     	;# 
  2736  0FE4                     	;# 
  2737  0FE5                     	;# 
  2738  0FE6                     	;# 
  2739  0FE7                     	;# 
  2740  0FE8                     	;# 
  2741  0FE9                     	;# 
  2742  0FEA                     	;# 
  2743  0FEB                     	;# 
  2744  0FED                     	;# 
  2745  0FEE                     	;# 
  2746  0FEF                     	;_mod5
  2747                           
  2748                           	psect	idataBANK0
  2749  07FE                     __pidataBANK0:	
  2750                           
  2751                           ;initializer for _feedback_state
  2752  07FE  34FF               	retlw	255
  2753                           
  2754                           	psect	idataBANK1
  2755  1EFF                     __pidataBANK1:	
  2756                           
  2757                           ;initializer for _baseline_delay_time
  2758  1EFF  34D0               	retlw	208
  2759  1F00  3407               	retlw	7
  2760  1F01  3400               	retlw	0
  2761  1F02  3400               	retlw	0
  2762                           
  2763                           ;initializer for _delay_time
  2764  1F03  34D0               	retlw	208
  2765  1F04  3407               	retlw	7
  2766  1F05  3400               	retlw	0
  2767  1F06  3400               	retlw	0
  2768                           
  2769                           ;initializer for _bottom_push_state
  2770  1F07  3406               	retlw	6
  2771  1F08  3400               	retlw	0
  2772                           
  2773                           ;initializer for _long_press_limit
  2774  1F09  34E8               	retlw	232
  2775  1F0A  3403               	retlw	3
  2776                           
  2777                           ;initializer for _top_push_state
  2778  1F0B  3406               	retlw	6
  2779  1F0C  3400               	retlw	0
  2780                           
  2781                           ;initializer for _blink_rate
  2782  1F0D  3414               	retlw	20
  2783                           
  2784                           ;initializer for _currentBypassState
  2785  1F0E  34FF               	retlw	255
  2786                           
  2787                           ;initializer for _longTap_state
  2788  1F0F  34FF               	retlw	255
  2789                           
  2790                           ;initializer for _num_taps
  2791  1F10  3404               	retlw	4
  2792                           
  2793                           ;initializer for _switchBypass_state
  2794  1F11  34FF               	retlw	255
  2795                           
  2796                           ;initializer for _switchTap_state
  2797  1F12  34FF               	retlw	255
  2798                           
  2799                           	psect	idataBANK2
  2800  1000                     __pidataBANK2:	
  2801                           
  2802                           ;initializer for _blink_delay
  2803  1000  3464               	retlw	100
  2804  1001  3400               	retlw	0
  2805                           
  2806                           ;initializer for _delay_time_changed
  2807  1002  3401               	retlw	1
  2808  1003  3400               	retlw	0
  2809                           
  2810                           ;initializer for _knob1_prev
  2811  1004  34D0               	retlw	208
  2812  1005  3407               	retlw	7
  2813                           
  2814                           ;initializer for _knob2_prev
  2815  1006  34D0               	retlw	208
  2816  1007  3407               	retlw	7
  2817                           
  2818                           ;initializer for _knob3_prev
  2819  1008  34D0               	retlw	208
  2820  1009  3407               	retlw	7
  2821                           
  2822                           ;initializer for _knob4_prev
  2823  100A  34D0               	retlw	208
  2824  100B  3407               	retlw	7
  2825                           
  2826                           ;initializer for _knob5_prev
  2827  100C  34D0               	retlw	208
  2828  100D  3407               	retlw	7
  2829                           
  2830                           ;initializer for _mod_delay_time
  2831  100E  34D0               	retlw	208
  2832  100F  3407               	retlw	7
  2833                           
  2834                           ;initializer for _switchBypass_up
  2835  1010  3401               	retlw	1
  2836  1011  3400               	retlw	0
  2837                           
  2838                           ;initializer for _tap_iteration
  2839  1012  3401               	retlw	1
  2840  1013  3400               	retlw	0
  2841                           
  2842                           ;initializer for _blink_state
  2843  1014  3401               	retlw	1
  2844                           
  2845                           	psect	idataBANK4
  2846  11EC                     __pidataBANK4:	
  2847                           
  2848                           ;initializer for _mod2
  2849  11EC  3400               	retlw	0
  2850  11ED  3400               	retlw	0
  2851  11EE  340D               	retlw	13
  2852  11EF  3400               	retlw	0
  2853  11F0  341B               	retlw	27
  2854  11F1  3400               	retlw	0
  2855  11F2  3428               	retlw	40
  2856  11F3  3400               	retlw	0
  2857  11F4  3435               	retlw	53
  2858  11F5  3400               	retlw	0
  2859  11F6  3443               	retlw	67
  2860  11F7  3400               	retlw	0
  2861  11F8  3450               	retlw	80
  2862  11F9  3400               	retlw	0
  2863  11FA  345D               	retlw	93
  2864  11FB  3400               	retlw	0
  2865  11FC  345D               	retlw	93
  2866  11FD  3400               	retlw	0
  2867  11FE  3450               	retlw	80
  2868  11FF  3400               	retlw	0
  2869  1200  3443               	retlw	67
  2870  1201  3400               	retlw	0
  2871  1202  3435               	retlw	53
  2872  1203  3400               	retlw	0
  2873  1204  3428               	retlw	40
  2874  1205  3400               	retlw	0
  2875  1206  341B               	retlw	27
  2876  1207  3400               	retlw	0
  2877  1208  340D               	retlw	13
  2878  1209  3400               	retlw	0
  2879  120A  3400               	retlw	0
  2880  120B  3400               	retlw	0
  2881  120C  34F3               	retlw	243
  2882  120D  34FF               	retlw	255
  2883  120E  34E5               	retlw	229
  2884  120F  34FF               	retlw	255
  2885  1210  34D8               	retlw	216
  2886  1211  34FF               	retlw	255
  2887  1212  34CB               	retlw	203
  2888  1213  34FF               	retlw	255
  2889  1214  34BD               	retlw	189
  2890  1215  34FF               	retlw	255
  2891  1216  34B0               	retlw	176
  2892  1217  34FF               	retlw	255
  2893  1218  34A3               	retlw	163
  2894  1219  34FF               	retlw	255
  2895  121A  34A3               	retlw	163
  2896  121B  34FF               	retlw	255
  2897  121C  34B0               	retlw	176
  2898  121D  34FF               	retlw	255
  2899  121E  34BD               	retlw	189
  2900  121F  34FF               	retlw	255
  2901  1220  34CB               	retlw	203
  2902  1221  34FF               	retlw	255
  2903  1222  34D8               	retlw	216
  2904  1223  34FF               	retlw	255
  2905  1224  34E5               	retlw	229
  2906  1225  34FF               	retlw	255
  2907                           
  2908                           	psect	idataBANK5
  2909  11B2                     __pidataBANK5:	
  2910                           
  2911                           ;initializer for _mod3
  2912  11B2  3400               	retlw	0
  2913  11B3  3400               	retlw	0
  2914  11B4  3407               	retlw	7
  2915  11B5  3400               	retlw	0
  2916  11B6  340D               	retlw	13
  2917  11B7  3400               	retlw	0
  2918  11B8  3414               	retlw	20
  2919  11B9  3400               	retlw	0
  2920  11BA  341B               	retlw	27
  2921  11BB  3400               	retlw	0
  2922  11BC  3421               	retlw	33
  2923  11BD  3400               	retlw	0
  2924  11BE  3428               	retlw	40
  2925  11BF  3400               	retlw	0
  2926  11C0  342F               	retlw	47
  2927  11C1  3400               	retlw	0
  2928  11C2  3435               	retlw	53
  2929  11C3  3400               	retlw	0
  2930  11C4  343C               	retlw	60
  2931  11C5  3400               	retlw	0
  2932  11C6  3443               	retlw	67
  2933  11C7  3400               	retlw	0
  2934  11C8  3449               	retlw	73
  2935  11C9  3400               	retlw	0
  2936  11CA  3450               	retlw	80
  2937  11CB  3400               	retlw	0
  2938  11CC  3457               	retlw	87
  2939  11CD  3400               	retlw	0
  2940  11CE  345D               	retlw	93
  2941  11CF  3400               	retlw	0
  2942  11D0  349C               	retlw	156
  2943  11D1  34FF               	retlw	255
  2944  11D2  34A3               	retlw	163
  2945  11D3  34FF               	retlw	255
  2946  11D4  34A9               	retlw	169
  2947  11D5  34FF               	retlw	255
  2948  11D6  34B0               	retlw	176
  2949  11D7  34FF               	retlw	255
  2950  11D8  34B7               	retlw	183
  2951  11D9  34FF               	retlw	255
  2952  11DA  34BD               	retlw	189
  2953  11DB  34FF               	retlw	255
  2954  11DC  34C4               	retlw	196
  2955  11DD  34FF               	retlw	255
  2956  11DE  34CB               	retlw	203
  2957  11DF  34FF               	retlw	255
  2958  11E0  34D1               	retlw	209
  2959  11E1  34FF               	retlw	255
  2960  11E2  34D8               	retlw	216
  2961  11E3  34FF               	retlw	255
  2962  11E4  34DF               	retlw	223
  2963  11E5  34FF               	retlw	255
  2964  11E6  34E5               	retlw	229
  2965  11E7  34FF               	retlw	255
  2966  11E8  34EC               	retlw	236
  2967  11E9  34FF               	retlw	255
  2968  11EA  34F3               	retlw	243
  2969  11EB  34FF               	retlw	255
  2970                           
  2971                           	psect	idataBANK6
  2972  1178                     __pidataBANK6:	
  2973                           
  2974                           ;initializer for _mod4
  2975  1178  3464               	retlw	100
  2976  1179  3400               	retlw	0
  2977  117A  3464               	retlw	100
  2978  117B  3400               	retlw	0
  2979  117C  3464               	retlw	100
  2980  117D  3400               	retlw	0
  2981  117E  3464               	retlw	100
  2982  117F  3400               	retlw	0
  2983  1180  3464               	retlw	100
  2984  1181  3400               	retlw	0
  2985  1182  3464               	retlw	100
  2986  1183  3400               	retlw	0
  2987  1184  3464               	retlw	100
  2988  1185  3400               	retlw	0
  2989  1186  3464               	retlw	100
  2990  1187  3400               	retlw	0
  2991  1188  3464               	retlw	100
  2992  1189  3400               	retlw	0
  2993  118A  3464               	retlw	100
  2994  118B  3400               	retlw	0
  2995  118C  3464               	retlw	100
  2996  118D  3400               	retlw	0
  2997  118E  3464               	retlw	100
  2998  118F  3400               	retlw	0
  2999  1190  3464               	retlw	100
  3000  1191  3400               	retlw	0
  3001  1192  3464               	retlw	100
  3002  1193  3400               	retlw	0
  3003  1194  3464               	retlw	100
  3004  1195  3400               	retlw	0
  3005  1196  349C               	retlw	156
  3006  1197  34FF               	retlw	255
  3007  1198  349C               	retlw	156
  3008  1199  34FF               	retlw	255
  3009  119A  349C               	retlw	156
  3010  119B  34FF               	retlw	255
  3011  119C  349C               	retlw	156
  3012  119D  34FF               	retlw	255
  3013  119E  349C               	retlw	156
  3014  119F  34FF               	retlw	255
  3015  11A0  349C               	retlw	156
  3016  11A1  34FF               	retlw	255
  3017  11A2  349C               	retlw	156
  3018  11A3  34FF               	retlw	255
  3019  11A4  349C               	retlw	156
  3020  11A5  34FF               	retlw	255
  3021  11A6  349C               	retlw	156
  3022  11A7  34FF               	retlw	255
  3023  11A8  349C               	retlw	156
  3024  11A9  34FF               	retlw	255
  3025  11AA  349C               	retlw	156
  3026  11AB  34FF               	retlw	255
  3027  11AC  349C               	retlw	156
  3028  11AD  34FF               	retlw	255
  3029  11AE  349C               	retlw	156
  3030  11AF  34FF               	retlw	255
  3031  11B0  349C               	retlw	156
  3032  11B1  34FF               	retlw	255
  3033                           
  3034                           	psect	idataBANK7
  3035  148A                     __pidataBANK7:	
  3036                           
  3037                           ;initializer for _B25k
  3038  148A  34FF               	retlw	255
  3039  148B  3400               	retlw	0
  3040  148C  34FF               	retlw	255
  3041  148D  3400               	retlw	0
  3042  148E  34FF               	retlw	255
  3043  148F  3400               	retlw	0
  3044  1490  34DF               	retlw	223
  3045  1491  3400               	retlw	0
  3046  1492  34AE               	retlw	174
  3047  1493  3400               	retlw	0
  3048  1494  348E               	retlw	142
  3049  1495  3400               	retlw	0
  3050  1496  3478               	retlw	120
  3051  1497  3400               	retlw	0
  3052  1498  3467               	retlw	103
  3053  1499  3400               	retlw	0
  3054  149A  345B               	retlw	91
  3055  149B  3400               	retlw	0
  3056  149C  3450               	retlw	80
  3057  149D  3400               	retlw	0
  3058  149E  3448               	retlw	72
  3059  149F  3400               	retlw	0
  3060  14A0  3442               	retlw	66
  3061  14A1  3400               	retlw	0
  3062  14A2  343C               	retlw	60
  3063  14A3  3400               	retlw	0
  3064  14A4  3437               	retlw	55
  3065  14A5  3400               	retlw	0
  3066  14A6  3433               	retlw	51
  3067  14A7  3400               	retlw	0
  3068  14A8  3430               	retlw	48
  3069  14A9  3400               	retlw	0
  3070  14AA  342D               	retlw	45
  3071  14AB  3400               	retlw	0
  3072  14AC  342A               	retlw	42
  3073  14AD  3400               	retlw	0
  3074  14AE  3427               	retlw	39
  3075  14AF  3400               	retlw	0
  3076  14B0  3425               	retlw	37
  3077  14B1  3400               	retlw	0
  3078  14B2  3423               	retlw	35
  3079  14B3  3400               	retlw	0
  3080  14B4  3421               	retlw	33
  3081  14B5  3400               	retlw	0
  3082  14B6  3420               	retlw	32
  3083  14B7  3400               	retlw	0
  3084  14B8  341E               	retlw	30
  3085  14B9  3400               	retlw	0
  3086  14BA  341D               	retlw	29
  3087  14BB  3400               	retlw	0
  3088  14BC  341C               	retlw	28
  3089  14BD  3400               	retlw	0
  3090  14BE  341B               	retlw	27
  3091  14BF  3400               	retlw	0
  3092  14C0  341A               	retlw	26
  3093  14C1  3400               	retlw	0
  3094  14C2  3419               	retlw	25
  3095  14C3  3400               	retlw	0
  3096  14C4  3418               	retlw	24
  3097  14C5  3400               	retlw	0
  3098  14C6  3417               	retlw	23
  3099  14C7  3400               	retlw	0
  3100  14C8  3416               	retlw	22
  3101  14C9  3400               	retlw	0
  3102  14CA  3415               	retlw	21
  3103  14CB  3400               	retlw	0
  3104  14CC  3415               	retlw	21
  3105  14CD  3400               	retlw	0
  3106  14CE  3414               	retlw	20
  3107  14CF  3400               	retlw	0
  3108  14D0  3413               	retlw	19
  3109  14D1  3400               	retlw	0
  3110  14D2  340F               	retlw	15
  3111  14D3  3400               	retlw	0
  3112  14D4  340B               	retlw	11
  3113  14D5  3400               	retlw	0
  3114  14D6  3407               	retlw	7
  3115  14D7  3400               	retlw	0
  3116  14D8  3407               	retlw	7
  3117  14D9  3400               	retlw	0
  3118                           
  3119                           	psect	idataBANK8
  3120  143A                     __pidataBANK8:	
  3121                           
  3122                           ;initializer for _iB25k
  3123  143A  3407               	retlw	7
  3124  143B  3400               	retlw	0
  3125  143C  3407               	retlw	7
  3126  143D  3400               	retlw	0
  3127  143E  340B               	retlw	11
  3128  143F  3400               	retlw	0
  3129  1440  340F               	retlw	15
  3130  1441  3400               	retlw	0
  3131  1442  3413               	retlw	19
  3132  1443  3400               	retlw	0
  3133  1444  3414               	retlw	20
  3134  1445  3400               	retlw	0
  3135  1446  3415               	retlw	21
  3136  1447  3400               	retlw	0
  3137  1448  3415               	retlw	21
  3138  1449  3400               	retlw	0
  3139  144A  3416               	retlw	22
  3140  144B  3400               	retlw	0
  3141  144C  3417               	retlw	23
  3142  144D  3400               	retlw	0
  3143  144E  3418               	retlw	24
  3144  144F  3400               	retlw	0
  3145  1450  3419               	retlw	25
  3146  1451  3400               	retlw	0
  3147  1452  341A               	retlw	26
  3148  1453  3400               	retlw	0
  3149  1454  341B               	retlw	27
  3150  1455  3400               	retlw	0
  3151  1456  341C               	retlw	28
  3152  1457  3400               	retlw	0
  3153  1458  341D               	retlw	29
  3154  1459  3400               	retlw	0
  3155  145A  341E               	retlw	30
  3156  145B  3400               	retlw	0
  3157  145C  3420               	retlw	32
  3158  145D  3400               	retlw	0
  3159  145E  3421               	retlw	33
  3160  145F  3400               	retlw	0
  3161  1460  3423               	retlw	35
  3162  1461  3400               	retlw	0
  3163  1462  3425               	retlw	37
  3164  1463  3400               	retlw	0
  3165  1464  3427               	retlw	39
  3166  1465  3400               	retlw	0
  3167  1466  342A               	retlw	42
  3168  1467  3400               	retlw	0
  3169  1468  342D               	retlw	45
  3170  1469  3400               	retlw	0
  3171  146A  3430               	retlw	48
  3172  146B  3400               	retlw	0
  3173  146C  3433               	retlw	51
  3174  146D  3400               	retlw	0
  3175  146E  3437               	retlw	55
  3176  146F  3400               	retlw	0
  3177  1470  343C               	retlw	60
  3178  1471  3400               	retlw	0
  3179  1472  3442               	retlw	66
  3180  1473  3400               	retlw	0
  3181  1474  3448               	retlw	72
  3182  1475  3400               	retlw	0
  3183  1476  3450               	retlw	80
  3184  1477  3400               	retlw	0
  3185  1478  345B               	retlw	91
  3186  1479  3400               	retlw	0
  3187  147A  3467               	retlw	103
  3188  147B  3400               	retlw	0
  3189  147C  3478               	retlw	120
  3190  147D  3400               	retlw	0
  3191  147E  348E               	retlw	142
  3192  147F  3400               	retlw	0
  3193  1480  34AE               	retlw	174
  3194  1481  3400               	retlw	0
  3195  1482  34DF               	retlw	223
  3196  1483  3400               	retlw	0
  3197  1484  34FF               	retlw	255
  3198  1485  3400               	retlw	0
  3199  1486  34FF               	retlw	255
  3200  1487  3400               	retlw	0
  3201  1488  34FF               	retlw	255
  3202  1489  3400               	retlw	0
  3203                           
  3204                           	psect	idataBANK9
  3205  113E                     __pidataBANK9:	
  3206                           
  3207                           ;initializer for _mod1
  3208  113E  3400               	retlw	0
  3209  113F  3400               	retlw	0
  3210  1140  3415               	retlw	21
  3211  1141  3400               	retlw	0
  3212  1142  3428               	retlw	40
  3213  1143  3400               	retlw	0
  3214  1144  343B               	retlw	59
  3215  1145  3400               	retlw	0
  3216  1146  344A               	retlw	74
  3217  1147  3400               	retlw	0
  3218  1148  3456               	retlw	86
  3219  1149  3400               	retlw	0
  3220  114A  345F               	retlw	95
  3221  114B  3400               	retlw	0
  3222  114C  3463               	retlw	99
  3223  114D  3400               	retlw	0
  3224  114E  3464               	retlw	100
  3225  114F  3400               	retlw	0
  3226  1150  345F               	retlw	95
  3227  1151  3400               	retlw	0
  3228  1152  3457               	retlw	87
  3229  1153  3400               	retlw	0
  3230  1154  344B               	retlw	75
  3231  1155  3400               	retlw	0
  3232  1156  343C               	retlw	60
  3233  1157  3400               	retlw	0
  3234  1158  342A               	retlw	42
  3235  1159  3400               	retlw	0
  3236  115A  3416               	retlw	22
  3237  115B  3400               	retlw	0
  3238  115C  3402               	retlw	2
  3239  115D  3400               	retlw	0
  3240  115E  34ED               	retlw	237
  3241  115F  34FF               	retlw	255
  3242  1160  34D9               	retlw	217
  3243  1161  34FF               	retlw	255
  3244  1162  34C7               	retlw	199
  3245  1163  34FF               	retlw	255
  3246  1164  34B7               	retlw	183
  3247  1165  34FF               	retlw	255
  3248  1166  34AB               	retlw	171
  3249  1167  34FF               	retlw	255
  3250  1168  34A2               	retlw	162
  3251  1169  34FF               	retlw	255
  3252  116A  349D               	retlw	157
  3253  116B  34FF               	retlw	255
  3254  116C  349C               	retlw	156
  3255  116D  34FF               	retlw	255
  3256  116E  34A8               	retlw	168
  3257  116F  34FF               	retlw	255
  3258  1170  34B4               	retlw	180
  3259  1171  34FF               	retlw	255
  3260  1172  34C3               	retlw	195
  3261  1173  34FF               	retlw	255
  3262  1174  34D5               	retlw	213
  3263  1175  34FF               	retlw	255
  3264  1176  34E8               	retlw	232
  3265  1177  34FF               	retlw	255
  3266                           
  3267                           	psect	idataBIGRAM
  3268  0D88                     __pidataBIGRAM:	
  3269                           
  3270                           ;initializer for _delay
  3271  0D88  3422               	retlw	34
  3272  0D89  3408               	retlw	8
  3273  0D8A  34FC               	retlw	252
  3274  0D8B  3407               	retlw	7
  3275  0D8C  34D8               	retlw	216
  3276  0D8D  3407               	retlw	7
  3277  0D8E  34B5               	retlw	181
  3278  0D8F  3407               	retlw	7
  3279  0D90  3493               	retlw	147
  3280  0D91  3407               	retlw	7
  3281  0D92  3472               	retlw	114
  3282  0D93  3407               	retlw	7
  3283  0D94  3452               	retlw	82
  3284  0D95  3407               	retlw	7
  3285  0D96  3434               	retlw	52
  3286  0D97  3407               	retlw	7
  3287  0D98  3416               	retlw	22
  3288  0D99  3407               	retlw	7
  3289  0D9A  34F9               	retlw	249
  3290  0D9B  3406               	retlw	6
  3291  0D9C  34DD               	retlw	221
  3292  0D9D  3406               	retlw	6
  3293  0D9E  34C2               	retlw	194
  3294  0D9F  3406               	retlw	6
  3295  0DA0  34A8               	retlw	168
  3296  0DA1  3406               	retlw	6
  3297  0DA2  348F               	retlw	143
  3298  0DA3  3406               	retlw	6
  3299  0DA4  3476               	retlw	118
  3300  0DA5  3406               	retlw	6
  3301  0DA6  345E               	retlw	94
  3302  0DA7  3406               	retlw	6
  3303  0DA8  3447               	retlw	71
  3304  0DA9  3406               	retlw	6
  3305  0DAA  3430               	retlw	48
  3306  0DAB  3406               	retlw	6
  3307  0DAC  341A               	retlw	26
  3308  0DAD  3406               	retlw	6
  3309  0DAE  3405               	retlw	5
  3310  0DAF  3406               	retlw	6
  3311  0DB0  34F0               	retlw	240
  3312  0DB1  3405               	retlw	5
  3313  0DB2  34DC               	retlw	220
  3314  0DB3  3405               	retlw	5
  3315  0DB4  34C8               	retlw	200
  3316  0DB5  3405               	retlw	5
  3317  0DB6  34B5               	retlw	181
  3318  0DB7  3405               	retlw	5
  3319  0DB8  34A3               	retlw	163
  3320  0DB9  3405               	retlw	5
  3321  0DBA  3490               	retlw	144
  3322  0DBB  3405               	retlw	5
  3323  0DBC  347F               	retlw	127
  3324  0DBD  3405               	retlw	5
  3325  0DBE  346D               	retlw	109
  3326  0DBF  3405               	retlw	5
  3327  0DC0  345C               	retlw	92
  3328  0DC1  3405               	retlw	5
  3329  0DC2  344C               	retlw	76
  3330  0DC3  3405               	retlw	5
  3331  0DC4  343C               	retlw	60
  3332  0DC5  3405               	retlw	5
  3333  0DC6  342C               	retlw	44
  3334  0DC7  3405               	retlw	5
  3335  0DC8  341D               	retlw	29
  3336  0DC9  3405               	retlw	5
  3337  0DCA  340E               	retlw	14
  3338  0DCB  3405               	retlw	5
  3339  0DCC  34FF               	retlw	255
  3340  0DCD  3404               	retlw	4
  3341  0DCE  34F1               	retlw	241
  3342  0DCF  3404               	retlw	4
  3343  0DD0  34E2               	retlw	226
  3344  0DD1  3404               	retlw	4
  3345  0DD2  34D5               	retlw	213
  3346  0DD3  3404               	retlw	4
  3347  0DD4  34C7               	retlw	199
  3348  0DD5  3404               	retlw	4
  3349  0DD6  34BA               	retlw	186
  3350  0DD7  3404               	retlw	4
  3351  0DD8  34AD               	retlw	173
  3352  0DD9  3404               	retlw	4
  3353  0DDA  34A1               	retlw	161
  3354  0DDB  3404               	retlw	4
  3355  0DDC  3494               	retlw	148
  3356  0DDD  3404               	retlw	4
  3357  0DDE  3488               	retlw	136
  3358  0DDF  3404               	retlw	4
  3359  0DE0  347D               	retlw	125
  3360  0DE1  3404               	retlw	4
  3361  0DE2  3471               	retlw	113
  3362  0DE3  3404               	retlw	4
  3363  0DE4  3466               	retlw	102
  3364  0DE5  3404               	retlw	4
  3365  0DE6  345A               	retlw	90
  3366  0DE7  3404               	retlw	4
  3367  0DE8  3450               	retlw	80
  3368  0DE9  3404               	retlw	4
  3369  0DEA  3445               	retlw	69
  3370  0DEB  3404               	retlw	4
  3371  0DEC  343A               	retlw	58
  3372  0DED  3404               	retlw	4
  3373  0DEE  3430               	retlw	48
  3374  0DEF  3404               	retlw	4
  3375  0DF0  3426               	retlw	38
  3376  0DF1  3404               	retlw	4
  3377  0DF2  341C               	retlw	28
  3378  0DF3  3404               	retlw	4
  3379  0DF4  3412               	retlw	18
  3380  0DF5  3404               	retlw	4
  3381  0DF6  3409               	retlw	9
  3382  0DF7  3404               	retlw	4
  3383  0DF8  34FF               	retlw	255
  3384  0DF9  3403               	retlw	3
  3385  0DFA  34F6               	retlw	246
  3386  0DFB  3403               	retlw	3
  3387  0DFC  34ED               	retlw	237
  3388  0DFD  3403               	retlw	3
  3389  0DFE  34E4               	retlw	228
  3390  0DFF  3403               	retlw	3
  3391  0E00  34DC               	retlw	220
  3392  0E01  3403               	retlw	3
  3393  0E02  34D3               	retlw	211
  3394  0E03  3403               	retlw	3
  3395  0E04  34CB               	retlw	203
  3396  0E05  3403               	retlw	3
  3397  0E06  34C2               	retlw	194
  3398  0E07  3403               	retlw	3
  3399  0E08  34BA               	retlw	186
  3400  0E09  3403               	retlw	3
  3401  0E0A  34B2               	retlw	178
  3402  0E0B  3403               	retlw	3
  3403  0E0C  34AA               	retlw	170
  3404  0E0D  3403               	retlw	3
  3405  0E0E  34A2               	retlw	162
  3406  0E0F  3403               	retlw	3
  3407  0E10  349B               	retlw	155
  3408  0E11  3403               	retlw	3
  3409  0E12  3493               	retlw	147
  3410  0E13  3403               	retlw	3
  3411  0E14  348C               	retlw	140
  3412  0E15  3403               	retlw	3
  3413  0E16  3485               	retlw	133
  3414  0E17  3403               	retlw	3
  3415  0E18  347E               	retlw	126
  3416  0E19  3403               	retlw	3
  3417  0E1A  3477               	retlw	119
  3418  0E1B  3403               	retlw	3
  3419  0E1C  3470               	retlw	112
  3420  0E1D  3403               	retlw	3
  3421  0E1E  3469               	retlw	105
  3422  0E1F  3403               	retlw	3
  3423  0E20  3462               	retlw	98
  3424  0E21  3403               	retlw	3
  3425  0E22  345C               	retlw	92
  3426  0E23  3403               	retlw	3
  3427  0E24  3455               	retlw	85
  3428  0E25  3403               	retlw	3
  3429  0E26  344F               	retlw	79
  3430  0E27  3403               	retlw	3
  3431  0E28  3448               	retlw	72
  3432  0E29  3403               	retlw	3
  3433  0E2A  3442               	retlw	66
  3434  0E2B  3403               	retlw	3
  3435  0E2C  343C               	retlw	60
  3436  0E2D  3403               	retlw	3
  3437  0E2E  3436               	retlw	54
  3438  0E2F  3403               	retlw	3
  3439  0E30  3430               	retlw	48
  3440  0E31  3403               	retlw	3
  3441  0E32  342A               	retlw	42
  3442  0E33  3403               	retlw	3
  3443  0E34  3424               	retlw	36
  3444  0E35  3403               	retlw	3
  3445  0E36  341F               	retlw	31
  3446  0E37  3403               	retlw	3
  3447  0E38  3419               	retlw	25
  3448  0E39  3403               	retlw	3
  3449  0E3A  3413               	retlw	19
  3450  0E3B  3403               	retlw	3
  3451  0E3C  340E               	retlw	14
  3452  0E3D  3403               	retlw	3
  3453  0E3E  3409               	retlw	9
  3454  0E3F  3403               	retlw	3
  3455  0E40  3403               	retlw	3
  3456  0E41  3403               	retlw	3
  3457  0E42  34FE               	retlw	254
  3458  0E43  3402               	retlw	2
  3459  0E44  34F9               	retlw	249
  3460  0E45  3402               	retlw	2
  3461  0E46  34F4               	retlw	244
  3462  0E47  3402               	retlw	2
  3463  0E48  34EF               	retlw	239
  3464  0E49  3402               	retlw	2
  3465  0E4A  34EA               	retlw	234
  3466  0E4B  3402               	retlw	2
  3467  0E4C  34E5               	retlw	229
  3468  0E4D  3402               	retlw	2
  3469  0E4E  34E0               	retlw	224
  3470  0E4F  3402               	retlw	2
  3471  0E50  34DB               	retlw	219
  3472  0E51  3402               	retlw	2
  3473  0E52  34D7               	retlw	215
  3474  0E53  3402               	retlw	2
  3475  0E54  34D2               	retlw	210
  3476  0E55  3402               	retlw	2
  3477  0E56  34CD               	retlw	205
  3478  0E57  3402               	retlw	2
  3479  0E58  34C9               	retlw	201
  3480  0E59  3402               	retlw	2
  3481  0E5A  34C4               	retlw	196
  3482  0E5B  3402               	retlw	2
  3483  0E5C  34C0               	retlw	192
  3484  0E5D  3402               	retlw	2
  3485  0E5E  34BC               	retlw	188
  3486  0E5F  3402               	retlw	2
  3487  0E60  34B7               	retlw	183
  3488  0E61  3402               	retlw	2
  3489  0E62  34B3               	retlw	179
  3490  0E63  3402               	retlw	2
  3491  0E64  34AF               	retlw	175
  3492  0E65  3402               	retlw	2
  3493  0E66  34AB               	retlw	171
  3494  0E67  3402               	retlw	2
  3495  0E68  34A6               	retlw	166
  3496  0E69  3402               	retlw	2
  3497  0E6A  34A2               	retlw	162
  3498  0E6B  3402               	retlw	2
  3499  0E6C  349E               	retlw	158
  3500  0E6D  3402               	retlw	2
  3501  0E6E  349A               	retlw	154
  3502  0E6F  3402               	retlw	2
  3503  0E70  3497               	retlw	151
  3504  0E71  3402               	retlw	2
  3505  0E72  3493               	retlw	147
  3506  0E73  3402               	retlw	2
  3507  0E74  348F               	retlw	143
  3508  0E75  3402               	retlw	2
  3509  0E76  348B               	retlw	139
  3510  0E77  3402               	retlw	2
  3511  0E78  3487               	retlw	135
  3512  0E79  3402               	retlw	2
  3513  0E7A  3484               	retlw	132
  3514  0E7B  3402               	retlw	2
  3515  0E7C  3480               	retlw	128
  3516  0E7D  3402               	retlw	2
  3517  0E7E  347C               	retlw	124
  3518  0E7F  3402               	retlw	2
  3519  0E80  3479               	retlw	121
  3520  0E81  3402               	retlw	2
  3521  0E82  3475               	retlw	117
  3522  0E83  3402               	retlw	2
  3523  0E84  3472               	retlw	114
  3524  0E85  3402               	retlw	2
  3525  0E86  346E               	retlw	110
  3526  0E87  3402               	retlw	2
  3527  0E88  346B               	retlw	107
  3528  0E89  3402               	retlw	2
  3529  0E8A  3467               	retlw	103
  3530  0E8B  3402               	retlw	2
  3531  0E8C  3464               	retlw	100
  3532  0E8D  3402               	retlw	2
  3533  0E8E  3461               	retlw	97
  3534  0E8F  3402               	retlw	2
  3535  0E90  345E               	retlw	94
  3536  0E91  3402               	retlw	2
  3537  0E92  345A               	retlw	90
  3538  0E93  3402               	retlw	2
  3539  0E94  3457               	retlw	87
  3540  0E95  3402               	retlw	2
  3541  0E96  3454               	retlw	84
  3542  0E97  3402               	retlw	2
  3543  0E98  3451               	retlw	81
  3544  0E99  3402               	retlw	2
  3545  0E9A  344E               	retlw	78
  3546  0E9B  3402               	retlw	2
  3547  0E9C  344B               	retlw	75
  3548  0E9D  3402               	retlw	2
  3549  0E9E  3448               	retlw	72
  3550  0E9F  3402               	retlw	2
  3551  0EA0  3445               	retlw	69
  3552  0EA1  3402               	retlw	2
  3553  0EA2  3442               	retlw	66
  3554  0EA3  3402               	retlw	2
  3555  0EA4  343F               	retlw	63
  3556  0EA5  3402               	retlw	2
  3557  0EA6  343C               	retlw	60
  3558  0EA7  3402               	retlw	2
  3559  0EA8  3439               	retlw	57
  3560  0EA9  3402               	retlw	2
  3561  0EAA  3436               	retlw	54
  3562  0EAB  3402               	retlw	2
  3563  0EAC  3433               	retlw	51
  3564  0EAD  3402               	retlw	2
  3565  0EAE  3430               	retlw	48
  3566  0EAF  3402               	retlw	2
  3567  0EB0  342E               	retlw	46
  3568  0EB1  3402               	retlw	2
  3569  0EB2  342B               	retlw	43
  3570  0EB3  3402               	retlw	2
  3571  0EB4  3428               	retlw	40
  3572  0EB5  3402               	retlw	2
  3573  0EB6  3425               	retlw	37
  3574  0EB7  3402               	retlw	2
  3575  0EB8  3423               	retlw	35
  3576  0EB9  3402               	retlw	2
  3577  0EBA  3420               	retlw	32
  3578  0EBB  3402               	retlw	2
  3579  0EBC  341E               	retlw	30
  3580  0EBD  3402               	retlw	2
  3581  0EBE  341B               	retlw	27
  3582  0EBF  3402               	retlw	2
  3583  0EC0  3418               	retlw	24
  3584  0EC1  3402               	retlw	2
  3585  0EC2  3416               	retlw	22
  3586  0EC3  3402               	retlw	2
  3587  0EC4  3413               	retlw	19
  3588  0EC5  3402               	retlw	2
  3589  0EC6  3411               	retlw	17
  3590  0EC7  3402               	retlw	2
  3591  0EC8  340E               	retlw	14
  3592  0EC9  3402               	retlw	2
  3593  0ECA  340C               	retlw	12
  3594  0ECB  3402               	retlw	2
  3595  0ECC  340A               	retlw	10
  3596  0ECD  3402               	retlw	2
  3597  0ECE  3407               	retlw	7
  3598  0ECF  3402               	retlw	2
  3599  0ED0  3405               	retlw	5
  3600  0ED1  3402               	retlw	2
  3601  0ED2  3402               	retlw	2
  3602  0ED3  3402               	retlw	2
  3603  0ED4  3400               	retlw	0
  3604  0ED5  3402               	retlw	2
  3605  0ED6  34FE               	retlw	254
  3606  0ED7  3401               	retlw	1
  3607  0ED8  34FB               	retlw	251
  3608  0ED9  3401               	retlw	1
  3609  0EDA  34F9               	retlw	249
  3610  0EDB  3401               	retlw	1
  3611  0EDC  34F7               	retlw	247
  3612  0EDD  3401               	retlw	1
  3613  0EDE  34F5               	retlw	245
  3614  0EDF  3401               	retlw	1
  3615  0EE0  34F2               	retlw	242
  3616  0EE1  3401               	retlw	1
  3617  0EE2  34F0               	retlw	240
  3618  0EE3  3401               	retlw	1
  3619  0EE4  34EE               	retlw	238
  3620  0EE5  3401               	retlw	1
  3621  0EE6  34EC               	retlw	236
  3622  0EE7  3401               	retlw	1
  3623  0EE8  34EA               	retlw	234
  3624  0EE9  3401               	retlw	1
  3625  0EEA  34E8               	retlw	232
  3626  0EEB  3401               	retlw	1
  3627  0EEC  34E6               	retlw	230
  3628  0EED  3401               	retlw	1
  3629  0EEE  34E3               	retlw	227
  3630  0EEF  3401               	retlw	1
  3631  0EF0  34E1               	retlw	225
  3632  0EF1  3401               	retlw	1
  3633  0EF2  34DF               	retlw	223
  3634  0EF3  3401               	retlw	1
  3635  0EF4  34DD               	retlw	221
  3636  0EF5  3401               	retlw	1
  3637  0EF6  34DB               	retlw	219
  3638  0EF7  3401               	retlw	1
  3639  0EF8  34D9               	retlw	217
  3640  0EF9  3401               	retlw	1
  3641  0EFA  34D7               	retlw	215
  3642  0EFB  3401               	retlw	1
  3643  0EFC  34D5               	retlw	213
  3644  0EFD  3401               	retlw	1
  3645  0EFE  34D3               	retlw	211
  3646  0EFF  3401               	retlw	1
  3647  0F00  34D2               	retlw	210
  3648  0F01  3401               	retlw	1
  3649  0F02  34D0               	retlw	208
  3650  0F03  3401               	retlw	1
  3651  0F04  34CE               	retlw	206
  3652  0F05  3401               	retlw	1
  3653  0F06  34CC               	retlw	204
  3654  0F07  3401               	retlw	1
  3655  0F08  34CA               	retlw	202
  3656  0F09  3401               	retlw	1
  3657  0F0A  34C8               	retlw	200
  3658  0F0B  3401               	retlw	1
  3659  0F0C  34C6               	retlw	198
  3660  0F0D  3401               	retlw	1
  3661  0F0E  34C4               	retlw	196
  3662  0F0F  3401               	retlw	1
  3663  0F10  34C3               	retlw	195
  3664  0F11  3401               	retlw	1
  3665  0F12  34C1               	retlw	193
  3666  0F13  3401               	retlw	1
  3667  0F14  34BF               	retlw	191
  3668  0F15  3401               	retlw	1
  3669  0F16  34BD               	retlw	189
  3670  0F17  3401               	retlw	1
  3671  0F18  34BC               	retlw	188
  3672  0F19  3401               	retlw	1
  3673  0F1A  34BA               	retlw	186
  3674  0F1B  3401               	retlw	1
  3675  0F1C  34B8               	retlw	184
  3676  0F1D  3401               	retlw	1
  3677  0F1E  34B6               	retlw	182
  3678  0F1F  3401               	retlw	1
  3679  0F20  34B5               	retlw	181
  3680  0F21  3401               	retlw	1
  3681  0F22  34B3               	retlw	179
  3682  0F23  3401               	retlw	1
  3683  0F24  34B1               	retlw	177
  3684  0F25  3401               	retlw	1
  3685  0F26  34B0               	retlw	176
  3686  0F27  3401               	retlw	1
  3687  0F28  34AE               	retlw	174
  3688  0F29  3401               	retlw	1
  3689  0F2A  34AC               	retlw	172
  3690  0F2B  3401               	retlw	1
  3691  0F2C  34AB               	retlw	171
  3692  0F2D  3401               	retlw	1
  3693  0F2E  34A9               	retlw	169
  3694  0F2F  3401               	retlw	1
  3695  0F30  34A8               	retlw	168
  3696  0F31  3401               	retlw	1
  3697  0F32  34A6               	retlw	166
  3698  0F33  3401               	retlw	1
  3699  0F34  34A4               	retlw	164
  3700  0F35  3401               	retlw	1
  3701  0F36  34A3               	retlw	163
  3702  0F37  3401               	retlw	1
  3703  0F38  34A1               	retlw	161
  3704  0F39  3401               	retlw	1
  3705  0F3A  34A0               	retlw	160
  3706  0F3B  3401               	retlw	1
  3707  0F3C  349E               	retlw	158
  3708  0F3D  3401               	retlw	1
  3709  0F3E  349D               	retlw	157
  3710  0F3F  3401               	retlw	1
  3711  0F40  349B               	retlw	155
  3712  0F41  3401               	retlw	1
  3713  0F42  349A               	retlw	154
  3714  0F43  3401               	retlw	1
  3715  0F44  3498               	retlw	152
  3716  0F45  3401               	retlw	1
  3717  0F46  3497               	retlw	151
  3718  0F47  3401               	retlw	1
  3719  0F48  3495               	retlw	149
  3720  0F49  3401               	retlw	1
  3721  0F4A  3494               	retlw	148
  3722  0F4B  3401               	retlw	1
  3723  0F4C  3492               	retlw	146
  3724  0F4D  3401               	retlw	1
  3725  0F4E  3491               	retlw	145
  3726  0F4F  3401               	retlw	1
  3727  0F50  3490               	retlw	144
  3728  0F51  3401               	retlw	1
  3729  0F52  348E               	retlw	142
  3730  0F53  3401               	retlw	1
  3731  0F54  348D               	retlw	141
  3732  0F55  3401               	retlw	1
  3733  0F56  348B               	retlw	139
  3734  0F57  3401               	retlw	1
  3735  0F58  348A               	retlw	138
  3736  0F59  3401               	retlw	1
  3737  0F5A  3489               	retlw	137
  3738  0F5B  3401               	retlw	1
  3739  0F5C  3487               	retlw	135
  3740  0F5D  3401               	retlw	1
  3741  0F5E  3486               	retlw	134
  3742  0F5F  3401               	retlw	1
  3743  0F60  3485               	retlw	133
  3744  0F61  3401               	retlw	1
  3745  0F62  3483               	retlw	131
  3746  0F63  3401               	retlw	1
  3747  0F64  3482               	retlw	130
  3748  0F65  3401               	retlw	1
  3749  0F66  3481               	retlw	129
  3750  0F67  3401               	retlw	1
  3751  0F68  347F               	retlw	127
  3752  0F69  3401               	retlw	1
  3753  0F6A  347E               	retlw	126
  3754  0F6B  3401               	retlw	1
  3755  0F6C  347D               	retlw	125
  3756  0F6D  3401               	retlw	1
  3757  0F6E  347B               	retlw	123
  3758  0F6F  3401               	retlw	1
  3759  0F70  347A               	retlw	122
  3760  0F71  3401               	retlw	1
  3761  0F72  3479               	retlw	121
  3762  0F73  3401               	retlw	1
  3763  0F74  3478               	retlw	120
  3764  0F75  3401               	retlw	1
  3765  0F76  3476               	retlw	118
  3766  0F77  3401               	retlw	1
  3767  0F78  3475               	retlw	117
  3768  0F79  3401               	retlw	1
  3769  0F7A  3474               	retlw	116
  3770  0F7B  3401               	retlw	1
  3771  0F7C  3473               	retlw	115
  3772  0F7D  3401               	retlw	1
  3773  0F7E  3471               	retlw	113
  3774  0F7F  3401               	retlw	1
  3775  0F80  3470               	retlw	112
  3776  0F81  3401               	retlw	1
  3777  0F82  346F               	retlw	111
  3778  0F83  3401               	retlw	1
  3779  0F84  346E               	retlw	110
  3780  0F85  3401               	retlw	1
  3781                           
  3782                           ;initializer for _mod5
  3783  0F86  3400               	retlw	0
  3784  0F87  3400               	retlw	0
  3785  0F88  340A               	retlw	10
  3786  0F89  3400               	retlw	0
  3787  0F8A  3414               	retlw	20
  3788  0F8B  3400               	retlw	0
  3789  0F8C  341E               	retlw	30
  3790  0F8D  3400               	retlw	0
  3791  0F8E  3428               	retlw	40
  3792  0F8F  3400               	retlw	0
  3793  0F90  3432               	retlw	50
  3794  0F91  3400               	retlw	0
  3795  0F92  343A               	retlw	58
  3796  0F93  3400               	retlw	0
  3797  0F94  3442               	retlw	66
  3798  0F95  3400               	retlw	0
  3799  0F96  344A               	retlw	74
  3800  0F97  3400               	retlw	0
  3801  0F98  3450               	retlw	80
  3802  0F99  3400               	retlw	0
  3803  0F9A  3456               	retlw	86
  3804  0F9B  3400               	retlw	0
  3805  0F9C  345B               	retlw	91
  3806  0F9D  3400               	retlw	0
  3807  0F9E  345F               	retlw	95
  3808  0F9F  3400               	retlw	0
  3809  0FA0  3461               	retlw	97
  3810  0FA1  3400               	retlw	0
  3811  0FA2  3463               	retlw	99
  3812  0FA3  3400               	retlw	0
  3813  0FA4  3464               	retlw	100
  3814  0FA5  3400               	retlw	0
  3815  0FA6  3463               	retlw	99
  3816  0FA7  3400               	retlw	0
  3817  0FA8  3461               	retlw	97
  3818  0FA9  3400               	retlw	0
  3819  0FAA  345F               	retlw	95
  3820  0FAB  3400               	retlw	0
  3821  0FAC  345B               	retlw	91
  3822  0FAD  3400               	retlw	0
  3823  0FAE  3456               	retlw	86
  3824  0FAF  3400               	retlw	0
  3825  0FB0  3450               	retlw	80
  3826  0FB1  3400               	retlw	0
  3827  0FB2  344A               	retlw	74
  3828  0FB3  3400               	retlw	0
  3829  0FB4  3442               	retlw	66
  3830  0FB5  3400               	retlw	0
  3831  0FB6  343A               	retlw	58
  3832  0FB7  3400               	retlw	0
  3833  0FB8  3432               	retlw	50
  3834  0FB9  3400               	retlw	0
  3835  0FBA  3428               	retlw	40
  3836  0FBB  3400               	retlw	0
  3837  0FBC  341E               	retlw	30
  3838  0FBD  3400               	retlw	0
  3839  0FBE  3414               	retlw	20
  3840  0FBF  3400               	retlw	0
  3841  0FC0  340A               	retlw	10
  3842  0FC1  3400               	retlw	0
  3843  0FC2  3400               	retlw	0
  3844  0FC3  3400               	retlw	0
  3845  0FC4  34F6               	retlw	246
  3846  0FC5  34FF               	retlw	255
  3847  0FC6  34EC               	retlw	236
  3848  0FC7  34FF               	retlw	255
  3849  0FC8  34E2               	retlw	226
  3850  0FC9  34FF               	retlw	255
  3851  0FCA  34D8               	retlw	216
  3852  0FCB  34FF               	retlw	255
  3853  0FCC  34CE               	retlw	206
  3854  0FCD  34FF               	retlw	255
  3855  0FCE  34C6               	retlw	198
  3856  0FCF  34FF               	retlw	255
  3857  0FD0  34BE               	retlw	190
  3858  0FD1  34FF               	retlw	255
  3859  0FD2  34B6               	retlw	182
  3860  0FD3  34FF               	retlw	255
  3861  0FD4  34B0               	retlw	176
  3862  0FD5  34FF               	retlw	255
  3863  0FD6  34AA               	retlw	170
  3864  0FD7  34FF               	retlw	255
  3865  0FD8  34A5               	retlw	165
  3866  0FD9  34FF               	retlw	255
  3867  0FDA  34A1               	retlw	161
  3868  0FDB  34FF               	retlw	255
  3869  0FDC  349F               	retlw	159
  3870  0FDD  34FF               	retlw	255
  3871  0FDE  349D               	retlw	157
  3872  0FDF  34FF               	retlw	255
  3873  0FE0  349C               	retlw	156
  3874  0FE1  34FF               	retlw	255
  3875  0FE2  349D               	retlw	157
  3876  0FE3  34FF               	retlw	255
  3877  0FE4  349F               	retlw	159
  3878  0FE5  34FF               	retlw	255
  3879  0FE6  34A1               	retlw	161
  3880  0FE7  34FF               	retlw	255
  3881  0FE8  34A5               	retlw	165
  3882  0FE9  34FF               	retlw	255
  3883  0FEA  34AA               	retlw	170
  3884  0FEB  34FF               	retlw	255
  3885  0FEC  34B0               	retlw	176
  3886  0FED  34FF               	retlw	255
  3887  0FEE  34B6               	retlw	182
  3888  0FEF  34FF               	retlw	255
  3889  0FF0  34BE               	retlw	190
  3890  0FF1  34FF               	retlw	255
  3891  0FF2  34C6               	retlw	198
  3892  0FF3  34FF               	retlw	255
  3893  0FF4  34CE               	retlw	206
  3894  0FF5  34FF               	retlw	255
  3895  0FF6  34D8               	retlw	216
  3896  0FF7  34FF               	retlw	255
  3897  0FF8  34E2               	retlw	226
  3898  0FF9  34FF               	retlw	255
  3899  0FFA  34EC               	retlw	236
  3900  0FFB  34FF               	retlw	255
  3901  0FFC  34F6               	retlw	246
  3902  0FFD  34FF               	retlw	255
  3903  0FFE  3400               	retlw	0
  3904  0FFF  3400               	retlw	0
  3905  000B                     _INTCONbits	set	11
  3906  000E                     _PORTCbits	set	14
  3907  000F                     _PORTDbits	set	15
  3908  0010                     _PORTEbits	set	16
  3909  001B                     _PR2	set	27
  3910  001C                     _T2CONbits	set	28
  3911  009D                     _ADCON0bits	set	157
  3912  009E                     _ADCON1bits	set	158
  3913  009C                     _ADRESH	set	156
  3914  009B                     _ADRESL	set	155
  3915  0095                     _OPTION_REGbits	set	149
  3916  0099                     _OSCCONbits	set	153
  3917  008D                     _TRISBbits	set	141
  3918  008E                     _TRISCbits	set	142
  3919  008F                     _TRISDbits	set	143
  3920  0090                     _TRISEbits	set	144
  3921  011D                     _APFCONbits	set	285
  3922  010D                     _LATBbits	set	269
  3923  010F                     _LATDbits	set	271
  3924  0190                     _ANSELEbits	set	400
  3925  0192                     _PMADRH	set	402
  3926  0191                     _PMADRL	set	401
  3927  0195                     _PMCON1bits	set	405
  3928  0196                     _PMCON2	set	406
  3929  0194                     _PMDATH	set	404
  3930  0193                     _PMDATL	set	403
  3931  0291                     _CCPR1	set	657
  3932  0298                     _CCPR2	set	664
  3933  0293                     _CCP1CONbits	set	659
  3934  029A                     _CCP2CONbits	set	666
  3935  029D                     _CCPTMRS0	set	669
  3936  029E                     _CCPTMRS1	set	670
  3937  029F                     _CCPTMRS2	set	671
  3938  0311                     _CCPR3	set	785
  3939  0318                     _CCPR4	set	792
  3940  031C                     _CCPR5	set	796
  3941  0313                     _CCP3CONbits	set	787
  3942  031A                     _CCP4CONbits	set	794
  3943  031E                     _CCP5CONbits	set	798
  3944  030C                     _TRISFbits	set	780
  3945  030D                     _TRISGbits	set	781
  3946  038C                     _LATFbits	set	908
  3947  038D                     _LATGbits	set	909
  3948  040C                     _ANSELFbits	set	1036
  3949  061A                     _CCPR9	set	1562
  3950  061F                     _CCP10CONbits	set	1567
  3951  0613                     _CCP6CONbits	set	1555
  3952  0616                     _CCP7CONbits	set	1558
  3953  0619                     _CCP8CONbits	set	1561
  3954  061C                     _CCP9CONbits	set	1564
  3955                           
  3956                           ; #config settings
  3957  0000                     
  3958                           	psect	cinit
  3959  0161                     start_initialization:	
  3960  0161                     __initialization:		;BIGRAM
  3961                           
  3962                           ; Clear objects allocated to COMMON
  3963  0161  01F9               	clrf	__pbssCOMMON& (0+127)
  3964  0162  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3965  0163  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  3966  0164  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  3967  0165  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
  3968                           
  3969                           ; Clear objects allocated to BANK1
  3970  0166  30BF               	movlw	low __pbssBANK1
  3971  0167  0084               	movwf	4
  3972  0168  3000               	movlw	high __pbssBANK1
  3973  0169  0085               	movwf	5
  3974  016A  301D               	movlw	29
  3975  016B  00FE               	movwf	btemp
  3976  016C  3000               	movlw	0
  3977  016D  00FF               	movwf	btemp+1
  3978  016E  319E  26D2  3181   	fcall	clear_ram0
  3979                           
  3980                           ; Clear objects allocated to BANK2
  3981  0171  3020               	movlw	low __pbssBANK2
  3982  0172  0084               	movwf	4
  3983  0173  3001               	movlw	high __pbssBANK2
  3984  0174  0085               	movwf	5
  3985  0175  302A               	movlw	42
  3986  0176  00FE               	movwf	btemp
  3987  0177  3000               	movlw	0
  3988  0178  00FF               	movwf	btemp+1
  3989  0179  319E  26D2  3181   	fcall	clear_ram0
  3990                           
  3991                           ; Clear objects allocated to BANK3
  3992  017C  30A0               	movlw	low __pbssBANK3
  3993  017D  0084               	movwf	4
  3994  017E  3001               	movlw	high __pbssBANK3
  3995  017F  0085               	movwf	5
  3996  0180  3040               	movlw	64
  3997  0181  00FE               	movwf	btemp
  3998  0182  3000               	movlw	0
  3999  0183  00FF               	movwf	btemp+1
  4000  0184  319E  26D2  3181   	fcall	clear_ram0
  4001                           
  4002                           ; Clear objects allocated to BANK10
  4003  0187  3020               	movlw	low __pbssBANK10
  4004  0188  0084               	movwf	4
  4005  0189  3005               	movlw	high __pbssBANK10
  4006  018A  0085               	movwf	5
  4007  018B  3040               	movlw	64
  4008  018C  00FE               	movwf	btemp
  4009  018D  3000               	movlw	0
  4010  018E  00FF               	movwf	btemp+1
  4011  018F  319E  26D2  3181   	fcall	clear_ram0
  4012                           
  4013                           ; Initialize objects allocated to BIGRAM
  4014  0192  3088               	movlw	low __pidataBIGRAM
  4015  0193  0084               	movwf	4
  4016  0194  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  4017  0195  0085               	movwf	5
  4018  0196  3078               	movlw	low (0+9080)
  4019  0197  0086               	movwf	6
  4020  0198  3023               	movlw	high (0+9080)
  4021  0199  0087               	movwf	7
  4022  019A  3002               	movlw	2
  4023  019B  00FF               	movwf	btemp+1
  4024  019C  3078               	movlw	120
  4025  019D  319E  26C6  3181   	fcall	init_ram
  4026                           
  4027                           ; Initialize objects allocated to BANK0
  4028  01A0  3187  27FE  3181   	fcall	__pidataBANK0	;fetch initializer
  4029  01A3  00EF               	movwf	__pdataBANK0& (0+127)
  4030                           
  4031                           ; Initialize objects allocated to BANK1
  4032  01A4  30FF               	movlw	low __pidataBANK1
  4033  01A5  0084               	movwf	4
  4034  01A6  309E               	movlw	(high __pidataBANK1)| (0+128)
  4035  01A7  0085               	movwf	5
  4036  01A8  30DC               	movlw	low __pdataBANK1
  4037  01A9  0086               	movwf	6
  4038  01AA  3000               	movlw	high __pdataBANK1
  4039  01AB  0087               	movwf	7
  4040  01AC  3000               	movlw	0
  4041  01AD  00FF               	movwf	btemp+1
  4042  01AE  3014               	movlw	20
  4043  01AF  319E  26C6  3181   	fcall	init_ram
  4044                           
  4045                           ; Initialize objects allocated to BANK2
  4046  01B2  3000               	movlw	low __pidataBANK2
  4047  01B3  0084               	movwf	4
  4048  01B4  3090               	movlw	(high __pidataBANK2)| (0+128)
  4049  01B5  0085               	movwf	5
  4050  01B6  304A               	movlw	low __pdataBANK2
  4051  01B7  0086               	movwf	6
  4052  01B8  3001               	movlw	high __pdataBANK2
  4053  01B9  0087               	movwf	7
  4054  01BA  3000               	movlw	0
  4055  01BB  00FF               	movwf	btemp+1
  4056  01BC  3015               	movlw	21
  4057  01BD  319E  26C6  3181   	fcall	init_ram
  4058                           
  4059                           ; Initialize objects allocated to BANK4
  4060  01C0  30EC               	movlw	low __pidataBANK4
  4061  01C1  0084               	movwf	4
  4062  01C2  3091               	movlw	(high __pidataBANK4)| (0+128)
  4063  01C3  0085               	movwf	5
  4064  01C4  3020               	movlw	low __pdataBANK4
  4065  01C5  0086               	movwf	6
  4066  01C6  3002               	movlw	high __pdataBANK4
  4067  01C7  0087               	movwf	7
  4068  01C8  3000               	movlw	0
  4069  01C9  00FF               	movwf	btemp+1
  4070  01CA  303A               	movlw	58
  4071  01CB  319E  26C6  3181   	fcall	init_ram
  4072                           
  4073                           ; Initialize objects allocated to BANK5
  4074  01CE  30B2               	movlw	low __pidataBANK5
  4075  01CF  0084               	movwf	4
  4076  01D0  3091               	movlw	(high __pidataBANK5)| (0+128)
  4077  01D1  0085               	movwf	5
  4078  01D2  30A0               	movlw	low __pdataBANK5
  4079  01D3  0086               	movwf	6
  4080  01D4  3002               	movlw	high __pdataBANK5
  4081  01D5  0087               	movwf	7
  4082  01D6  3000               	movlw	0
  4083  01D7  00FF               	movwf	btemp+1
  4084  01D8  303A               	movlw	58
  4085  01D9  319E  26C6  3181   	fcall	init_ram
  4086                           
  4087                           ; Initialize objects allocated to BANK6
  4088  01DC  3078               	movlw	low __pidataBANK6
  4089  01DD  0084               	movwf	4
  4090  01DE  3091               	movlw	(high __pidataBANK6)| (0+128)
  4091  01DF  0085               	movwf	5
  4092  01E0  3020               	movlw	low __pdataBANK6
  4093  01E1  0086               	movwf	6
  4094  01E2  3003               	movlw	high __pdataBANK6
  4095  01E3  0087               	movwf	7
  4096  01E4  3000               	movlw	0
  4097  01E5  00FF               	movwf	btemp+1
  4098  01E6  303A               	movlw	58
  4099  01E7  319E  26C6  3181   	fcall	init_ram
  4100                           
  4101                           ; Initialize objects allocated to BANK7
  4102  01EA  308A               	movlw	low __pidataBANK7
  4103  01EB  0084               	movwf	4
  4104  01EC  3094               	movlw	(high __pidataBANK7)| (0+128)
  4105  01ED  0085               	movwf	5
  4106  01EE  30A0               	movlw	low __pdataBANK7
  4107  01EF  0086               	movwf	6
  4108  01F0  3003               	movlw	high __pdataBANK7
  4109  01F1  0087               	movwf	7
  4110  01F2  3000               	movlw	0
  4111  01F3  00FF               	movwf	btemp+1
  4112  01F4  3050               	movlw	80
  4113  01F5  319E  26C6  3181   	fcall	init_ram
  4114                           
  4115                           ; Initialize objects allocated to BANK8
  4116  01F8  303A               	movlw	low __pidataBANK8
  4117  01F9  0084               	movwf	4
  4118  01FA  3094               	movlw	(high __pidataBANK8)| (0+128)
  4119  01FB  0085               	movwf	5
  4120  01FC  3020               	movlw	low __pdataBANK8
  4121  01FD  0086               	movwf	6
  4122  01FE  3004               	movlw	high __pdataBANK8
  4123  01FF  0087               	movwf	7
  4124  0200  3000               	movlw	0
  4125  0201  00FF               	movwf	btemp+1
  4126  0202  3050               	movlw	80
  4127  0203  319E  26C6  3181   	fcall	init_ram
  4128                           
  4129                           ; Initialize objects allocated to BANK9
  4130  0206  303E               	movlw	low __pidataBANK9
  4131  0207  0084               	movwf	4
  4132  0208  3091               	movlw	(high __pidataBANK9)| (0+128)
  4133  0209  0085               	movwf	5
  4134  020A  30A0               	movlw	low __pdataBANK9
  4135  020B  0086               	movwf	6
  4136  020C  3004               	movlw	high __pdataBANK9
  4137  020D  0087               	movwf	7
  4138  020E  3000               	movlw	0
  4139  020F  00FF               	movwf	btemp+1
  4140  0210  303A               	movlw	58
  4141  0211  319E  26C6         	fcall	init_ram
  4142  0213                     end_of_initialization:	
  4143                           ;End of C runtime variable initialization code
  4144                           
  4145  0213                     __end_of__initialization:	
  4146  0213  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4147  0214  0020               	movlb	0
  4148  0215  3182  2A17         	ljmp	_main	;jump to C main() function
  4149                           
  4150                           	psect	bssCOMMON
  4151  0079                     __pbssCOMMON:	
  4152  0079                     _tap_timer:	
  4153  0079                     	ds	4
  4154  007D                     _doubleTap_state:	
  4155  007D                     	ds	1
  4156                           
  4157                           	psect	dataBANK0
  4158  006F                     __pdataBANK0:	
  4159  006F                     _feedback_state:	
  4160  006F                     	ds	1
  4161                           
  4162                           	psect	bssBANK1
  4163  00BF                     __pbssBANK1:	
  4164  00BF                     _sub_timer:	
  4165  00BF                     	ds	4
  4166  00C3                     _timer:	
  4167  00C3                     	ds	4
  4168  00C7                     _feedback_timer:	
  4169  00C7                     	ds	2
  4170  00C9                     _knob_1_pos:	
  4171  00C9                     	ds	2
  4172  00CB                     _knob_2_pos:	
  4173  00CB                     	ds	2
  4174  00CD                     _longTap_timer:	
  4175  00CD                     	ds	2
  4176  00CF                     _mod_counter:	
  4177  00CF                     	ds	2
  4178  00D1                     _switchBypass_pressed:	
  4179  00D1                     	ds	2
  4180  00D3                     _bypass_turning_on:	
  4181  00D3                     	ds	1
  4182  00D4                     _feedback_start:	
  4183  00D4                     	ds	1
  4184  00D5                     _longTap_start:	
  4185  00D5                     	ds	1
  4186  00D6                     _mode2_state:	
  4187  00D6                     	ds	1
  4188  00D7                     _preset_blink:	
  4189  00D7                     	ds	1
  4190  00D8                     _preset_programmning_on:	
  4191  00D8                     	ds	1
  4192  00D9                     _suspend_blink:	
  4193  00D9                     	ds	1
  4194  00DA                     _switchTap_down:	
  4195  00DA                     	ds	1
  4196  00DB                     _switchTap_pressed:	
  4197  00DB                     	ds	1
  4198                           
  4199                           	psect	dataBANK1
  4200  00DC                     __pdataBANK1:	
  4201  00DC                     _baseline_delay_time:	
  4202  00DC                     	ds	4
  4203  00E0                     _delay_time:	
  4204  00E0                     	ds	4
  4205  00E4                     _bottom_push_state:	
  4206  00E4                     	ds	2
  4207  00E6                     _long_press_limit:	
  4208  00E6                     	ds	2
  4209  00E8                     _top_push_state:	
  4210  00E8                     	ds	2
  4211  00EA                     _blink_rate:	
  4212  00EA                     	ds	1
  4213  00EB                     _currentBypassState:	
  4214  00EB                     	ds	1
  4215  00EC                     _longTap_state:	
  4216  00EC                     	ds	1
  4217  00ED                     _num_taps:	
  4218  00ED                     	ds	1
  4219  00EE                     _switchBypass_state:	
  4220  00EE                     	ds	1
  4221  00EF                     _switchTap_state:	
  4222  00EF                     	ds	1
  4223                           
  4224                           	psect	bssBANK2
  4225  0120                     __pbssBANK2:	
  4226  0120                     _ledState:	
  4227  0120                     	ds	4
  4228  0124                     _mod_timer:	
  4229  0124                     	ds	4
  4230  0128                     _tap_total:	
  4231  0128                     	ds	4
  4232  012C                     wait_ms@timel:	
  4233  012C                     	ds	4
  4234  0130                     _SPI_Value:	
  4235  0130                     	ds	2
  4236  0132                     _debounce_bypass:	
  4237  0132                     	ds	2
  4238  0134                     _debounce_count:	
  4239  0134                     	ds	2
  4240  0136                     _debounce_mode1:	
  4241  0136                     	ds	2
  4242  0138                     _debounce_mode2:	
  4243  0138                     	ds	2
  4244  013A                     _delay_counter:	
  4245  013A                     	ds	2
  4246  013C                     _delayfound:	
  4247  013C                     	ds	2
  4248  013E                     _knob_3_pos:	
  4249  013E                     	ds	2
  4250  0140                     _knob_4_pos:	
  4251  0140                     	ds	2
  4252  0142                     _knob_5_pos:	
  4253  0142                     	ds	2
  4254  0144                     _mod_value:	
  4255  0144                     	ds	2
  4256  0146                     _switchBypass_toggle:	
  4257  0146                     	ds	2
  4258  0148                     _iCnt:	
  4259  0148                     	ds	1
  4260  0149                     _mode1_state:	
  4261  0149                     	ds	1
  4262                           
  4263                           	psect	dataBANK2
  4264  014A                     __pdataBANK2:	
  4265  014A                     _blink_delay:	
  4266  014A                     	ds	2
  4267  014C                     _delay_time_changed:	
  4268  014C                     	ds	2
  4269  014E                     _knob1_prev:	
  4270  014E                     	ds	2
  4271  0150                     _knob2_prev:	
  4272  0150                     	ds	2
  4273  0152                     _knob3_prev:	
  4274  0152                     	ds	2
  4275  0154                     _knob4_prev:	
  4276  0154                     	ds	2
  4277  0156                     _knob5_prev:	
  4278  0156                     	ds	2
  4279  0158                     _mod_delay_time:	
  4280  0158                     	ds	2
  4281  015A                     _switchBypass_up:	
  4282  015A                     	ds	2
  4283  015C                     _tap_iteration:	
  4284  015C                     	ds	2
  4285  015E                     _blink_state:	
  4286  015E                     	ds	1
  4287                           
  4288                           	psect	bssBANK3
  4289  01A0                     __pbssBANK3:	
  4290  01A0                     _tap:	
  4291  01A0                     	ds	44
  4292  01CC                     _tap_history:	
  4293  01CC                     	ds	20
  4294                           
  4295                           	psect	dataBANK4
  4296  0220                     __pdataBANK4:	
  4297  0220                     _mod2:	
  4298  0220                     	ds	58
  4299                           
  4300                           	psect	dataBANK5
  4301  02A0                     __pdataBANK5:	
  4302  02A0                     _mod3:	
  4303  02A0                     	ds	58
  4304                           
  4305                           	psect	dataBANK6
  4306  0320                     __pdataBANK6:	
  4307  0320                     _mod4:	
  4308  0320                     	ds	58
  4309                           
  4310                           	psect	dataBANK7
  4311  03A0                     __pdataBANK7:	
  4312  03A0                     _B25k:	
  4313  03A0                     	ds	80
  4314                           
  4315                           	psect	dataBANK8
  4316  0420                     __pdataBANK8:	
  4317  0420                     _iB25k:	
  4318  0420                     	ds	80
  4319                           
  4320                           	psect	dataBANK9
  4321  04A0                     __pdataBANK9:	
  4322  04A0                     _mod1:	
  4323  04A0                     	ds	58
  4324                           
  4325                           	psect	bssBANK10
  4326  0520                     __pbssBANK10:	
  4327  0520                     _myBuf:	
  4328  0520                     	ds	64
  4329                           
  4330                           	psect	clrtext
  4331  1ED2                     clear_ram0:	
  4332                           ;	Called with FSR0 containing the base address, and
  4333                           ;	btemp/btemp+1 has the size to clear
  4334                           
  4335  1ED2  0064               	clrwdt	;clear the watchdog before getting into this loop
  4336  1ED3                     clrloop0:	
  4337  1ED3  0180               	clrf	0	;clear RAM location pointed to by FSR
  4338  1ED4  3101               	addfsr 0,1
  4339  1ED5  3001               	movlw	1
  4340  1ED6  02FE               	subwf	126,f
  4341  1ED7  3000               	movlw	0
  4342  1ED8  3BFF               	subwfb	127,f
  4343  1ED9  087F               	movf	127,w
  4344  1EDA  047E               	iorwf	126,w
  4345  1EDB  1903               	btfsc	3,2
  4346  1EDC  3400               	retlw	0	;all done for this memory range, return
  4347  1EDD  2ED3               	goto	clrloop0	;have we reached the end yet?
  4348                           
  4349                           	psect	inittext
  4350  1EC6                     init_ram:	
  4351  1EC6  00FE               	movwf	126
  4352  1EC7                     initloop:	
  4353  1EC7  0012               	moviw fsr0++
  4354  1EC8  001E               	movwi fsr1++
  4355  1EC9  3001               	movlw	1
  4356  1ECA  02FE               	subwf	126,f
  4357  1ECB  3000               	movlw	0
  4358  1ECC  3BFF               	subwfb	127,f
  4359  1ECD  087F               	movf	127,w
  4360  1ECE  047E               	iorwf	126,w
  4361  1ECF  1903               	btfsc	3,2
  4362  1ED0  3400               	retlw	0
  4363  1ED1  2EC7               	goto	initloop
  4364                           
  4365                           	psect	cstackBANK1
  4366  00A0                     __pcstackBANK1:	
  4367  00A0                     ___fttol@sign1:	
  4368                           
  4369                           ; 1 bytes @ 0x0
  4370  00A0                     	ds	1
  4371  00A1                     ___fttol@lval:	
  4372                           
  4373                           ; 4 bytes @ 0x1
  4374  00A1                     	ds	4
  4375  00A5                     ___fttol@exp1:	
  4376                           
  4377                           ; 1 bytes @ 0x5
  4378  00A5                     	ds	1
  4379  00A6                     ?_set_subdivision:	
  4380  00A6                     set_subdivision@x:	
  4381                           ; 2 bytes @ 0x6
  4382                           
  4383                           
  4384                           ; 2 bytes @ 0x6
  4385  00A6                     	ds	2
  4386  00A8                     set_subdivision@y:	
  4387                           
  4388                           ; 2 bytes @ 0x8
  4389  00A8                     	ds	2
  4390  00AA                     ??_main:	
  4391                           
  4392                           ; 1 bytes @ 0xA
  4393  00AA                     	ds	15
  4394  00B9                     main@adjusted_pot_value:	
  4395                           
  4396                           ; 2 bytes @ 0x19
  4397  00B9                     	ds	2
  4398  00BB                     main@i:	
  4399                           
  4400                           ; 2 bytes @ 0x1B
  4401  00BB                     	ds	2
  4402  00BD                     main@i_356:	
  4403                           
  4404                           ; 2 bytes @ 0x1D
  4405  00BD                     	ds	2
  4406                           
  4407                           	psect	cstackCOMMON
  4408  0070                     __pcstackCOMMON:	
  4409  0070                     ?_ConfigureOscillator:	
  4410  0070                     ?_InitApp:	
  4411                           ; 1 bytes @ 0x0
  4412                           
  4413  0070                     ?_InitializeTaps:	
  4414                           ; 1 bytes @ 0x0
  4415                           
  4416  0070                     ?_initSwitchBypass:	
  4417                           ; 1 bytes @ 0x0
  4418                           
  4419  0070                     ?_ReadSavedSettings:	
  4420                           ; 1 bytes @ 0x0
  4421                           
  4422  0070                     ?_read_bottom_tactile:	
  4423                           ; 1 bytes @ 0x0
  4424                           
  4425  0070                     ?_read_top_tactile:	
  4426                           ; 1 bytes @ 0x0
  4427                           
  4428  0070                     ?_update_mode:	
  4429                           ; 1 bytes @ 0x0
  4430                           
  4431  0070                     ?_showBootSequence:	
  4432                           ; 1 bytes @ 0x0
  4433                           
  4434  0070                     ?_updateSwitchBypass:	
  4435                           ; 1 bytes @ 0x0
  4436                           
  4437  0070                     ?_updateSwitchTap:	
  4438                           ; 1 bytes @ 0x0
  4439                           
  4440  0070                     ?_init_adc:	
  4441                           ; 1 bytes @ 0x0
  4442                           
  4443  0070                     ?_init_pwm:	
  4444                           ; 1 bytes @ 0x0
  4445                           
  4446  0070                     ?_init_timer2:	
  4447                           ; 1 bytes @ 0x0
  4448                           
  4449  0070                     ?_init_timer0:	
  4450                           ; 1 bytes @ 0x0
  4451                           
  4452  0070                     ?_getCurrentLEDState:	
  4453                           ; 1 bytes @ 0x0
  4454                           
  4455  0070                     ?_star_tactiles:	
  4456                           ; 1 bytes @ 0x0
  4457                           
  4458  0070                     ?_solidring_tactiles:	
  4459                           ; 1 bytes @ 0x0
  4460                           
  4461  0070                     ?_restoreLEDState:	
  4462                           ; 1 bytes @ 0x0
  4463                           
  4464  0070                     ?_isr:	
  4465                           ; 1 bytes @ 0x0
  4466                           
  4467  0070                     ?_main:	
  4468                           ; 1 bytes @ 0x0
  4469                           
  4470  0070                     ?i1_set_leds_top:	
  4471                           ; 1 bytes @ 0x0
  4472                           
  4473  0070                     i1set_leds_top@x:	
  4474                           ; 1 bytes @ 0x0
  4475                           
  4476                           
  4477                           ; 2 bytes @ 0x0
  4478  0070                     	ds	2
  4479  0072                     i1set_leds_top@ledState:	
  4480                           
  4481                           ; 2 bytes @ 0x2
  4482  0072                     	ds	2
  4483  0074                     ??_isr:	
  4484  0074                     ??i1_set_leds_top:	
  4485                           ; 1 bytes @ 0x4
  4486                           
  4487                           
  4488                           ; 1 bytes @ 0x4
  4489  0074                     	ds	5
  4490                           
  4491                           	psect	cstackBANK0
  4492  0020                     __pcstackBANK0:	
  4493  0020                     ?_set_leds_top:	
  4494  0020                     ??_ConfigureOscillator:	
  4495                           ; 1 bytes @ 0x0
  4496                           
  4497  0020                     ??_InitApp:	
  4498                           ; 1 bytes @ 0x0
  4499                           
  4500  0020                     ??_InitializeTaps:	
  4501                           ; 1 bytes @ 0x0
  4502                           
  4503  0020                     ??_update_mode:	
  4504                           ; 1 bytes @ 0x0
  4505                           
  4506  0020                     ??_init_adc:	
  4507                           ; 1 bytes @ 0x0
  4508                           
  4509  0020                     ??_init_pwm:	
  4510                           ; 1 bytes @ 0x0
  4511                           
  4512  0020                     ??_init_timer2:	
  4513                           ; 1 bytes @ 0x0
  4514                           
  4515  0020                     ??_init_timer0:	
  4516                           ; 1 bytes @ 0x0
  4517                           
  4518  0020                     ?_set_leds_bottom:	
  4519                           ; 1 bytes @ 0x0
  4520                           
  4521  0020                     ??_getCurrentLEDState:	
  4522                           ; 1 bytes @ 0x0
  4523                           
  4524  0020                     ??_restoreLEDState:	
  4525                           ; 1 bytes @ 0x0
  4526                           
  4527  0020                     ?_setFeedbackState:	
  4528                           ; 1 bytes @ 0x0
  4529                           
  4530  0020                     ?_setLongTapState:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0020                     ?_updateSwitchBypassState:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0020                     ?_adc_convert:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0020                     ?_FLASH_ReadWord:	
  4540                           ; 2 bytes @ 0x0
  4541                           
  4542  0020                     ?_getSwitchBypassState:	
  4543                           ; 2 bytes @ 0x0
  4544                           
  4545  0020                     ?___wmul:	
  4546                           ; 2 bytes @ 0x0
  4547                           
  4548  0020                     ?___awdiv:	
  4549                           ; 2 bytes @ 0x0
  4550                           
  4551  0020                     ?___ftpack:	
  4552                           ; 2 bytes @ 0x0
  4553                           
  4554  0020                     ?___ftneg:	
  4555                           ; 3 bytes @ 0x0
  4556                           
  4557  0020                     ?___lmul:	
  4558                           ; 3 bytes @ 0x0
  4559                           
  4560  0020                     FLASH_ReadWord@flashAddr:	
  4561                           ; 4 bytes @ 0x0
  4562                           
  4563  0020                     set_leds_top@x:	
  4564                           ; 2 bytes @ 0x0
  4565                           
  4566  0020                     set_leds_bottom@x:	
  4567                           ; 2 bytes @ 0x0
  4568                           
  4569  0020                     updateSwitchBypassState@state:	
  4570                           ; 2 bytes @ 0x0
  4571                           
  4572  0020                     setFeedbackState@f_state:	
  4573                           ; 2 bytes @ 0x0
  4574                           
  4575  0020                     setLongTapState@f_state:	
  4576                           ; 2 bytes @ 0x0
  4577                           
  4578  0020                     ___wmul@multiplier:	
  4579                           ; 2 bytes @ 0x0
  4580                           
  4581  0020                     ___awdiv@divisor:	
  4582                           ; 2 bytes @ 0x0
  4583                           
  4584  0020                     ___ftpack@arg:	
  4585                           ; 2 bytes @ 0x0
  4586                           
  4587  0020                     ___ftneg@f1:	
  4588                           ; 3 bytes @ 0x0
  4589                           
  4590  0020                     ___lmul@multiplier:	
  4591                           ; 3 bytes @ 0x0
  4592                           
  4593                           
  4594                           ; 4 bytes @ 0x0
  4595  0020                     	ds	1
  4596  0021                     InitializeTaps@itap:	
  4597                           
  4598                           ; 2 bytes @ 0x1
  4599  0021                     	ds	1
  4600  0022                     ??_adc_convert:	
  4601  0022                     ??_FLASH_ReadWord:	
  4602                           ; 1 bytes @ 0x2
  4603                           
  4604  0022                     ??_set_leds_bottom:	
  4605                           ; 1 bytes @ 0x2
  4606                           
  4607  0022                     ??_setFeedbackState:	
  4608                           ; 1 bytes @ 0x2
  4609                           
  4610  0022                     ??_setLongTapState:	
  4611                           ; 1 bytes @ 0x2
  4612                           
  4613  0022                     ??_updateSwitchBypassState:	
  4614                           ; 1 bytes @ 0x2
  4615                           
  4616  0022                     ??_getSwitchBypassState:	
  4617                           ; 1 bytes @ 0x2
  4618                           
  4619  0022                     FLASH_ReadWord@GIEBitValue:	
  4620                           ; 1 bytes @ 0x2
  4621                           
  4622  0022                     set_leds_top@ledState:	
  4623                           ; 1 bytes @ 0x2
  4624                           
  4625  0022                     ___wmul@multiplicand:	
  4626                           ; 2 bytes @ 0x2
  4627                           
  4628  0022                     ___awdiv@dividend:	
  4629                           ; 2 bytes @ 0x2
  4630                           
  4631                           
  4632                           ; 2 bytes @ 0x2
  4633  0022                     	ds	1
  4634  0023                     ??___ftneg:	
  4635  0023                     adc_convert@channel:	
  4636                           ; 1 bytes @ 0x3
  4637                           
  4638  0023                     ___ftpack@exp:	
  4639                           ; 1 bytes @ 0x3
  4640                           
  4641                           
  4642                           ; 1 bytes @ 0x3
  4643  0023                     	ds	1
  4644  0024                     ??_set_leds_top:	
  4645  0024                     ??_ReadSavedSettings:	
  4646                           ; 1 bytes @ 0x4
  4647                           
  4648  0024                     ??___wmul:	
  4649                           ; 1 bytes @ 0x4
  4650                           
  4651  0024                     ??___awdiv:	
  4652                           ; 1 bytes @ 0x4
  4653                           
  4654  0024                     ___ftpack@sign:	
  4655                           ; 1 bytes @ 0x4
  4656                           
  4657  0024                     ___wmul@product:	
  4658                           ; 1 bytes @ 0x4
  4659                           
  4660  0024                     ___lmul@multiplicand:	
  4661                           ; 2 bytes @ 0x4
  4662                           
  4663                           
  4664                           ; 4 bytes @ 0x4
  4665  0024                     	ds	1
  4666  0025                     ??___ftpack:	
  4667  0025                     ___awdiv@counter:	
  4668                           ; 1 bytes @ 0x5
  4669                           
  4670                           
  4671                           ; 1 bytes @ 0x5
  4672  0025                     	ds	1
  4673  0026                     ?___aldiv:	
  4674  0026                     ___awdiv@sign:	
  4675                           ; 4 bytes @ 0x6
  4676                           
  4677  0026                     ___aldiv@divisor:	
  4678                           ; 1 bytes @ 0x6
  4679                           
  4680                           
  4681                           ; 4 bytes @ 0x6
  4682  0026                     	ds	1
  4683  0027                     ___awdiv@quotient:	
  4684                           
  4685                           ; 2 bytes @ 0x7
  4686  0027                     	ds	1
  4687  0028                     ??___lmul:	
  4688  0028                     ?___altoft:	
  4689                           ; 1 bytes @ 0x8
  4690                           
  4691  0028                     ?___awtoft:	
  4692                           ; 3 bytes @ 0x8
  4693                           
  4694  0028                     ?___ftadd:	
  4695                           ; 3 bytes @ 0x8
  4696                           
  4697  0028                     ___awtoft@c:	
  4698                           ; 3 bytes @ 0x8
  4699                           
  4700  0028                     ___ftadd@f1:	
  4701                           ; 2 bytes @ 0x8
  4702                           
  4703  0028                     ___lmul@product:	
  4704                           ; 3 bytes @ 0x8
  4705                           
  4706  0028                     ___altoft@c:	
  4707                           ; 4 bytes @ 0x8
  4708                           
  4709                           
  4710                           ; 4 bytes @ 0x8
  4711  0028                     	ds	2
  4712  002A                     ___aldiv@dividend:	
  4713                           
  4714                           ; 4 bytes @ 0xA
  4715  002A                     	ds	1
  4716  002B                     ??___awtoft:	
  4717  002B                     ___ftadd@f2:	
  4718                           ; 1 bytes @ 0xB
  4719                           
  4720                           
  4721                           ; 3 bytes @ 0xB
  4722  002B                     	ds	1
  4723  002C                     ?_wait_ms:	
  4724  002C                     ??___altoft:	
  4725                           ; 1 bytes @ 0xC
  4726                           
  4727  002C                     wait_ms@time:	
  4728                           ; 1 bytes @ 0xC
  4729                           
  4730                           
  4731                           ; 2 bytes @ 0xC
  4732  002C                     	ds	1
  4733  002D                     ___awtoft@sign:	
  4734                           
  4735                           ; 1 bytes @ 0xD
  4736  002D                     	ds	1
  4737  002E                     ??_read_bottom_tactile:	
  4738  002E                     ??_read_top_tactile:	
  4739                           ; 1 bytes @ 0xE
  4740                           
  4741  002E                     ??_star_tactiles:	
  4742                           ; 1 bytes @ 0xE
  4743                           
  4744  002E                     ??_solidring_tactiles:	
  4745                           ; 1 bytes @ 0xE
  4746                           
  4747  002E                     ?_setSwitchBypassState:	
  4748                           ; 1 bytes @ 0xE
  4749                           
  4750  002E                     ?_setDoublePressState:	
  4751                           ; 1 bytes @ 0xE
  4752                           
  4753  002E                     ??_wait_ms:	
  4754                           ; 1 bytes @ 0xE
  4755                           
  4756  002E                     ??___aldiv:	
  4757                           ; 1 bytes @ 0xE
  4758                           
  4759  002E                     ??___ftadd:	
  4760                           ; 1 bytes @ 0xE
  4761                           
  4762  002E                     ___altoft@exp:	
  4763                           ; 1 bytes @ 0xE
  4764                           
  4765  002E                     setSwitchBypassState@f_state:	
  4766                           ; 1 bytes @ 0xE
  4767                           
  4768  002E                     setDoublePressState@f_state:	
  4769                           ; 2 bytes @ 0xE
  4770                           
  4771                           
  4772                           ; 2 bytes @ 0xE
  4773  002E                     	ds	1
  4774  002F                     ___aldiv@counter:	
  4775  002F                     ___altoft@sign:	
  4776                           ; 1 bytes @ 0xF
  4777                           
  4778                           
  4779                           ; 1 bytes @ 0xF
  4780  002F                     	ds	1
  4781  0030                     ??_setSwitchBypassState:	
  4782  0030                     ??_setDoublePressState:	
  4783                           ; 1 bytes @ 0x10
  4784                           
  4785  0030                     star_tactiles@reverse:	
  4786                           ; 1 bytes @ 0x10
  4787                           
  4788  0030                     solidring_tactiles@ring_delay:	
  4789                           ; 1 bytes @ 0x10
  4790                           
  4791  0030                     ___aldiv@sign:	
  4792                           ; 1 bytes @ 0x10
  4793                           
  4794                           
  4795                           ; 1 bytes @ 0x10
  4796  0030                     	ds	1
  4797  0031                     star_tactiles@iLed:	
  4798  0031                     ___aldiv@quotient:	
  4799                           ; 2 bytes @ 0x11
  4800                           
  4801                           
  4802                           ; 4 bytes @ 0x11
  4803  0031                     	ds	1
  4804  0032                     ??_initSwitchBypass:	
  4805  0032                     ??_updateSwitchBypass:	
  4806                           ; 1 bytes @ 0x12
  4807                           
  4808  0032                     ___ftadd@sign:	
  4809                           ; 1 bytes @ 0x12
  4810                           
  4811  0032                     initSwitchBypass@initState:	
  4812                           ; 1 bytes @ 0x12
  4813                           
  4814                           
  4815                           ; 2 bytes @ 0x12
  4816  0032                     	ds	1
  4817  0033                     ___ftadd@exp2:	
  4818  0033                     star_tactiles@iLed_1403:	
  4819                           ; 1 bytes @ 0x13
  4820                           
  4821                           
  4822                           ; 2 bytes @ 0x13
  4823  0033                     	ds	1
  4824  0034                     ___ftadd@exp1:	
  4825                           
  4826                           ; 1 bytes @ 0x14
  4827  0034                     	ds	1
  4828  0035                     ??_showBootSequence:	
  4829  0035                     ??_updateSwitchTap:	
  4830                           ; 1 bytes @ 0x15
  4831                           
  4832  0035                     ?_modulation:	
  4833                           ; 1 bytes @ 0x15
  4834                           
  4835  0035                     ?___ftmul:	
  4836                           ; 2 bytes @ 0x15
  4837                           
  4838  0035                     modulation@x:	
  4839                           ; 3 bytes @ 0x15
  4840                           
  4841  0035                     ___ftmul@f1:	
  4842                           ; 2 bytes @ 0x15
  4843                           
  4844                           
  4845                           ; 3 bytes @ 0x15
  4846  0035                     	ds	2
  4847  0037                     modulation@y:	
  4848                           
  4849                           ; 2 bytes @ 0x17
  4850  0037                     	ds	1
  4851  0038                     ___ftmul@f2:	
  4852                           
  4853                           ; 3 bytes @ 0x18
  4854  0038                     	ds	1
  4855  0039                     ??_modulation:	
  4856                           
  4857                           ; 1 bytes @ 0x19
  4858  0039                     	ds	2
  4859  003B                     ??___ftmul:	
  4860  003B                     updateSwitchTap@tapCntDivisor:	
  4861                           ; 1 bytes @ 0x1B
  4862                           
  4863                           
  4864                           ; 2 bytes @ 0x1B
  4865  003B                     	ds	2
  4866  003D                     updateSwitchTap@iCnt:	
  4867                           
  4868                           ; 1 bytes @ 0x1D
  4869  003D                     	ds	2
  4870  003F                     ___ftmul@exp:	
  4871                           
  4872                           ; 1 bytes @ 0x1F
  4873  003F                     	ds	1
  4874  0040                     ___ftmul@f3_as_product:	
  4875                           
  4876                           ; 3 bytes @ 0x20
  4877  0040                     	ds	3
  4878  0043                     ___ftmul@cntr:	
  4879                           
  4880                           ; 1 bytes @ 0x23
  4881  0043                     	ds	1
  4882  0044                     ___ftmul@sign:	
  4883                           
  4884                           ; 1 bytes @ 0x24
  4885  0044                     	ds	1
  4886  0045                     ?___ftdiv:	
  4887  0045                     ___ftdiv@f2:	
  4888                           ; 3 bytes @ 0x25
  4889                           
  4890                           
  4891                           ; 3 bytes @ 0x25
  4892  0045                     	ds	3
  4893  0048                     ___ftdiv@f1:	
  4894                           
  4895                           ; 3 bytes @ 0x28
  4896  0048                     	ds	3
  4897  004B                     ??___ftdiv:	
  4898                           
  4899                           ; 1 bytes @ 0x2B
  4900  004B                     	ds	4
  4901  004F                     ___ftdiv@cntr:	
  4902                           
  4903                           ; 1 bytes @ 0x2F
  4904  004F                     	ds	1
  4905  0050                     ___ftdiv@f3:	
  4906                           
  4907                           ; 3 bytes @ 0x30
  4908  0050                     	ds	3
  4909  0053                     ___ftdiv@exp:	
  4910                           
  4911                           ; 1 bytes @ 0x33
  4912  0053                     	ds	1
  4913  0054                     ___ftdiv@sign:	
  4914                           
  4915                           ; 1 bytes @ 0x34
  4916  0054                     	ds	1
  4917  0055                     ?_map:	
  4918  0055                     map@x:	
  4919                           ; 3 bytes @ 0x35
  4920                           
  4921                           
  4922                           ; 3 bytes @ 0x35
  4923  0055                     	ds	3
  4924  0058                     map@in_min:	
  4925                           
  4926                           ; 3 bytes @ 0x38
  4927  0058                     	ds	3
  4928  005B                     map@in_max:	
  4929                           
  4930                           ; 3 bytes @ 0x3B
  4931  005B                     	ds	3
  4932  005E                     map@out_min:	
  4933                           
  4934                           ; 3 bytes @ 0x3E
  4935  005E                     	ds	3
  4936  0061                     map@out_max:	
  4937                           
  4938                           ; 3 bytes @ 0x41
  4939  0061                     	ds	3
  4940  0064                     ??_map:	
  4941  0064                     _map$2078:	
  4942                           ; 1 bytes @ 0x44
  4943                           
  4944                           
  4945                           ; 3 bytes @ 0x44
  4946  0064                     	ds	3
  4947  0067                     ?___fttol:	
  4948  0067                     ___fttol@f1:	
  4949                           ; 4 bytes @ 0x47
  4950                           
  4951                           
  4952                           ; 3 bytes @ 0x47
  4953  0067                     	ds	4
  4954  006B                     ??___fttol:	
  4955                           
  4956                           ; 1 bytes @ 0x4B
  4957  006B                     	ds	4
  4958  006F                     ??_set_subdivision:	
  4959                           
  4960                           	psect	maintext
  4961  0217                     __pmaintext:	
  4962                           ; 1 bytes @ 0x4F
  4963 ;;
  4964 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4965 ;;
  4966 ;; *************** function _main *****************
  4967 ;; Defined at:
  4968 ;;		line 82 in file "main.c"
  4969 ;; Parameters:    Size  Location     Type
  4970 ;;		None
  4971 ;; Auto vars:     Size  Location     Type
  4972 ;;  adjusted_pot    2   25[BANK1 ] int 
  4973 ;;  i               2   29[BANK1 ] int 
  4974 ;;  i               2   27[BANK1 ] int 
  4975 ;; Return value:  Size  Location     Type
  4976 ;;                  1    wreg      void 
  4977 ;; Registers used:
  4978 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4979 ;; Tracked objects:
  4980 ;;		On entry : B1F/0
  4981 ;;		On exit  : 0/0
  4982 ;;		Unchanged: 0/0
  4983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4985 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4986 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4987 ;;      Totals:         0       0      21       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4988 ;;Total ram usage:       21 bytes
  4989 ;; Hardware stack levels required when called:    6
  4990 ;; This function calls:
  4991 ;;		_ConfigureOscillator
  4992 ;;		_InitApp
  4993 ;;		_InitializeTaps
  4994 ;;		_ReadSavedSettings
  4995 ;;		___altoft
  4996 ;;		___awdiv
  4997 ;;		___awtoft
  4998 ;;		___ftdiv
  4999 ;;		___fttol
  5000 ;;		_adc_convert
  5001 ;;		_initSwitchBypass
  5002 ;;		_map
  5003 ;;		_modulation
  5004 ;;		_read_bottom_tactile
  5005 ;;		_read_top_tactile
  5006 ;;		_set_subdivision
  5007 ;;		_showBootSequence
  5008 ;;		_updateSwitchBypass
  5009 ;;		_updateSwitchTap
  5010 ;;		_update_mode
  5011 ;; This function is called by:
  5012 ;;		Startup code after reset
  5013 ;; This function uses a non-reentrant model
  5014 ;;
  5015                           
  5016                           
  5017                           ;psect for function _main
  5018  0217                     _main:	
  5019                           
  5020                           ;main.c: 83: ConfigureOscillator();
  5021                           
  5022                           ;incstack = 0
  5023                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5024  0217  319E  269B  3182   	fcall	_ConfigureOscillator
  5025                           
  5026                           ;main.c: 84: InitApp();
  5027  021A  3190  2042  3182   	fcall	_InitApp
  5028                           
  5029                           ;main.c: 86: PORTEbits.RE0 = 1;
  5030  021D  0020               	movlb	0	; select bank0
  5031  021E  1410               	bsf	16,0	;volatile
  5032                           
  5033                           ;main.c: 87: PORTEbits.RE1 = 1;
  5034  021F  1490               	bsf	16,1	;volatile
  5035                           
  5036                           ;main.c: 88: PORTDbits.RD6 = 1;
  5037  0220  170F               	bsf	15,6	;volatile
  5038                           
  5039                           ;main.c: 89: PORTDbits.RD5 = 1;
  5040  0221  168F               	bsf	15,5	;volatile
  5041                           
  5042                           ;main.c: 90: PORTCbits.RC0 = 1;
  5043  0222  140E               	bsf	14,0	;volatile
  5044                           
  5045                           ;main.c: 91: PORTDbits.RD7 = 1;
  5046  0223  178F               	bsf	15,7	;volatile
  5047                           
  5048                           ;main.c: 93: InitializeTaps();
  5049  0224  319F  27AF  3182   	fcall	_InitializeTaps
  5050                           
  5051                           ;main.c: 94: initSwitchBypass();
  5052  0227  319E  26DE  3182   	fcall	_initSwitchBypass
  5053                           
  5054                           ;main.c: 97: ReadSavedSettings();
  5055  022A  3193  23EA  3182   	fcall	_ReadSavedSettings
  5056  022D                     l4160:	
  5057                           ;main.c: 99: while (1) {
  5058                           
  5059                           
  5060                           ;main.c: 102: read_bottom_tactile();
  5061  022D  3190  20D3  3182   	fcall	_read_bottom_tactile
  5062                           
  5063                           ;main.c: 103: read_top_tactile();
  5064  0230  3191  2104  3182   	fcall	_read_top_tactile
  5065                           
  5066                           ;main.c: 106: update_mode();
  5067  0233  3193  235D  3182   	fcall	_update_mode
  5068                           
  5069                           ;main.c: 108: if (PORTDbits.RD7 == 0) {
  5070  0236  0020               	movlb	0	; select bank0
  5071  0237  1B8F               	btfsc	15,7	;volatile
  5072  0238  2A57               	goto	l4174
  5073                           
  5074                           ;main.c: 109: debounce_mode1++;
  5075  0239  3001               	movlw	1
  5076  023A  0022               	movlb	2	; select bank2
  5077  023B  07B6               	addwf	_debounce_mode1^(0+256),f
  5078  023C  3000               	movlw	0
  5079  023D  3DB7               	addwfc	(_debounce_mode1+1)^(0+256),f
  5080                           
  5081                           ;main.c: 110: if (debounce_mode1 > 25) {
  5082  023E  0837               	movf	(_debounce_mode1+1)^(0+256),w
  5083  023F  3A80               	xorlw	128
  5084  0240  0021               	movlb	1	; select bank1
  5085  0241  00AA               	movwf	??_main^(0+128)
  5086  0242  3080               	movlw	128
  5087  0243  022A               	subwf	??_main^(0+128),w
  5088  0244  1D03               	skipz
  5089  0245  2A49               	goto	u4195
  5090  0246  301A               	movlw	26
  5091  0247  0022               	movlb	2	; select bank2
  5092  0248  0236               	subwf	_debounce_mode1^(0+256),w
  5093  0249                     u4195:	
  5094  0249  1C03               	skipc
  5095  024A  2A5A               	goto	l4176
  5096                           
  5097                           ;main.c: 111: debounce_mode1 = 25;
  5098  024B  3019               	movlw	25
  5099  024C  0022               	movlb	2	; select bank2
  5100  024D  00B6               	movwf	_debounce_mode1^(0+256)
  5101  024E  3000               	movlw	0
  5102  024F  00B7               	movwf	(_debounce_mode1^(0+256)+1)
  5103                           
  5104                           ;main.c: 115: showBootSequence();
  5105  0250  319F  27D5  3182   	fcall	_showBootSequence
  5106  0253                     l273:	
  5107                           ;main.c: 118: while (PORTDbits.RD7 == 0) {
  5108                           
  5109  0253  0020               	movlb	0	; select bank0
  5110  0254  1B8F               	btfsc	15,7	;volatile
  5111  0255  2A5A               	goto	l4176
  5112  0256  2A53               	goto	l273
  5113  0257                     l4174:	
  5114                           ;main.c: 119: }
  5115                           ;main.c: 120: }
  5116                           ;main.c: 121: } else {
  5117                           
  5118                           
  5119                           ;main.c: 122: debounce_mode1 = 0;
  5120  0257  0022               	movlb	2	; select bank2
  5121  0258  01B6               	clrf	_debounce_mode1^(0+256)
  5122  0259  01B7               	clrf	(_debounce_mode1+1)^(0+256)
  5123  025A                     l4176:	
  5124                           
  5125                           ;main.c: 123: }
  5126                           ;main.c: 125: updateSwitchBypass();
  5127  025A  3188  20F6  3182   	fcall	_updateSwitchBypass
  5128                           
  5129                           ;main.c: 126: updateSwitchTap();
  5130  025D  318B  23C8  3182   	fcall	_updateSwitchTap
  5131                           
  5132                           ;main.c: 215: knob_1_pos = adc_convert(0);
  5133  0260  3000               	movlw	0
  5134  0261  319F  2740  3182   	fcall	_adc_convert
  5135  0264  0020               	movlb	0	; select bank0
  5136  0265  0821               	movf	?_adc_convert+1,w
  5137  0266  0021               	movlb	1	; select bank1
  5138  0267  00CA               	movwf	(_knob_1_pos+1)^(0+128)
  5139  0268  0020               	movlb	0	; select bank0
  5140  0269  0820               	movf	?_adc_convert,w
  5141  026A  0021               	movlb	1	; select bank1
  5142  026B  00C9               	movwf	_knob_1_pos^(0+128)
  5143                           
  5144                           ;main.c: 216: knob_2_pos = adc_convert(1);
  5145  026C  3001               	movlw	1
  5146  026D  319F  2740  3182   	fcall	_adc_convert
  5147  0270  0020               	movlb	0	; select bank0
  5148  0271  0821               	movf	?_adc_convert+1,w
  5149  0272  0021               	movlb	1	; select bank1
  5150  0273  00CC               	movwf	(_knob_2_pos+1)^(0+128)
  5151  0274  0020               	movlb	0	; select bank0
  5152  0275  0820               	movf	?_adc_convert,w
  5153  0276  0021               	movlb	1	; select bank1
  5154  0277  00CB               	movwf	_knob_2_pos^(0+128)
  5155                           
  5156                           ;main.c: 217: knob_3_pos = adc_convert(2);
  5157  0278  3002               	movlw	2
  5158  0279  319F  2740  3182   	fcall	_adc_convert
  5159  027C  0020               	movlb	0	; select bank0
  5160  027D  0821               	movf	?_adc_convert+1,w
  5161  027E  0022               	movlb	2	; select bank2
  5162  027F  00BF               	movwf	(_knob_3_pos+1)^(0+256)
  5163  0280  0020               	movlb	0	; select bank0
  5164  0281  0820               	movf	?_adc_convert,w
  5165  0282  0022               	movlb	2	; select bank2
  5166  0283  00BE               	movwf	_knob_3_pos^(0+256)
  5167                           
  5168                           ;main.c: 218: knob_4_pos = adc_convert(3);
  5169  0284  3003               	movlw	3
  5170  0285  319F  2740  3182   	fcall	_adc_convert
  5171  0288  0020               	movlb	0	; select bank0
  5172  0289  0821               	movf	?_adc_convert+1,w
  5173  028A  0022               	movlb	2	; select bank2
  5174  028B  00C1               	movwf	(_knob_4_pos+1)^(0+256)
  5175  028C  0020               	movlb	0	; select bank0
  5176  028D  0820               	movf	?_adc_convert,w
  5177  028E  0022               	movlb	2	; select bank2
  5178  028F  00C0               	movwf	_knob_4_pos^(0+256)
  5179                           
  5180                           ;main.c: 219: knob_5_pos = adc_convert(4);
  5181  0290  3004               	movlw	4
  5182  0291  319F  2740  3182   	fcall	_adc_convert
  5183  0294  0020               	movlb	0	; select bank0
  5184  0295  0821               	movf	?_adc_convert+1,w
  5185  0296  0022               	movlb	2	; select bank2
  5186  0297  00C3               	movwf	(_knob_5_pos+1)^(0+256)
  5187  0298  0020               	movlb	0	; select bank0
  5188  0299  0820               	movf	?_adc_convert,w
  5189  029A  0022               	movlb	2	; select bank2
  5190  029B  00C2               	movwf	_knob_5_pos^(0+256)
  5191                           
  5192                           ;main.c: 232: if (knob_1_pos - knob1_prev >= 4 || knob_1_pos - knob1_prev <= -4) {
  5193  029C  094E               	comf	_knob1_prev^(0+256),w
  5194  029D  0021               	movlb	1	; select bank1
  5195  029E  00AA               	movwf	??_main^(0+128)
  5196  029F  0022               	movlb	2	; select bank2
  5197  02A0  094F               	comf	(_knob1_prev+1)^(0+256),w
  5198  02A1  0021               	movlb	1	; select bank1
  5199  02A2  00AB               	movwf	(??_main^(0+128)+1)
  5200  02A3  0AAA               	incf	??_main^(0+128),f
  5201  02A4  1903               	skipnz
  5202  02A5  0AAB               	incf	(??_main^(0+128)+1),f
  5203  02A6  0849               	movf	_knob_1_pos^(0+128),w
  5204  02A7  072A               	addwf	??_main^(0+128),w
  5205  02A8  00AC               	movwf	(??_main+2)^(0+128)
  5206  02A9  084A               	movf	(_knob_1_pos+1)^(0+128),w
  5207  02AA  3D2B               	addwfc	(??_main+1)^(0+128),w
  5208  02AB  00AD               	movwf	(??_main+3)^(0+128)
  5209  02AC  082D               	movf	(??_main+3)^(0+128),w
  5210  02AD  3A80               	xorlw	128
  5211  02AE  00AE               	movwf	(??_main+4)^(0+128)
  5212  02AF  3080               	movlw	128
  5213  02B0  022E               	subwf	(??_main+4)^(0+128),w
  5214  02B1  1D03               	skipz
  5215  02B2  2AB5               	goto	u4215
  5216  02B3  3004               	movlw	4
  5217  02B4  022C               	subwf	(??_main+2)^(0+128),w
  5218  02B5                     u4215:	
  5219  02B5  1803               	skipnc
  5220  02B6  2AD3               	goto	l4194
  5221  02B7  0022               	movlb	2	; select bank2
  5222  02B8  094E               	comf	_knob1_prev^(0+256),w
  5223  02B9  0021               	movlb	1	; select bank1
  5224  02BA  00AA               	movwf	??_main^(0+128)
  5225  02BB  0022               	movlb	2	; select bank2
  5226  02BC  094F               	comf	(_knob1_prev+1)^(0+256),w
  5227  02BD  0021               	movlb	1	; select bank1
  5228  02BE  00AB               	movwf	(??_main^(0+128)+1)
  5229  02BF  0AAA               	incf	??_main^(0+128),f
  5230  02C0  1903               	skipnz
  5231  02C1  0AAB               	incf	(??_main^(0+128)+1),f
  5232  02C2  0849               	movf	_knob_1_pos^(0+128),w
  5233  02C3  072A               	addwf	??_main^(0+128),w
  5234  02C4  00AC               	movwf	(??_main+2)^(0+128)
  5235  02C5  084A               	movf	(_knob_1_pos+1)^(0+128),w
  5236  02C6  3D2B               	addwfc	(??_main+1)^(0+128),w
  5237  02C7  00AD               	movwf	(??_main+3)^(0+128)
  5238  02C8  082D               	movf	(??_main+3)^(0+128),w
  5239  02C9  3A80               	xorlw	128
  5240  02CA  00AE               	movwf	(??_main+4)^(0+128)
  5241  02CB  307F               	movlw	127
  5242  02CC  022E               	subwf	(??_main+4)^(0+128),w
  5243  02CD  1D03               	skipz
  5244  02CE  2AD1               	goto	u4225
  5245  02CF  30FD               	movlw	253
  5246  02D0  022C               	subwf	(??_main+2)^(0+128),w
  5247  02D1                     u4225:	
  5248  02D1  1803               	skipnc
  5249  02D2  2B28               	goto	l4200
  5250  02D3                     l4194:	
  5251                           
  5252                           ;main.c: 233: knob1_prev = knob_1_pos;
  5253  02D3  0021               	movlb	1	; select bank1
  5254  02D4  084A               	movf	(_knob_1_pos+1)^(0+128),w
  5255  02D5  0022               	movlb	2	; select bank2
  5256  02D6  00CF               	movwf	(_knob1_prev+1)^(0+256)
  5257  02D7  0021               	movlb	1	; select bank1
  5258  02D8  0849               	movf	_knob_1_pos^(0+128),w
  5259  02D9  0022               	movlb	2	; select bank2
  5260  02DA  00CE               	movwf	_knob1_prev^(0+256)
  5261                           
  5262                           ;main.c: 234: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5263  02DB  3000               	movlw	0
  5264  02DC  0020               	movlb	0	; select bank0
  5265  02DD  00E1               	movwf	map@out_max
  5266  02DE  3048               	movlw	72
  5267  02DF  00E2               	movwf	map@out_max+1
  5268  02E0  3043               	movlw	67
  5269  02E1  00E3               	movwf	map@out_max+2
  5270  02E2  3080               	movlw	128
  5271  02E3  00DE               	movwf	map@out_min
  5272  02E4  3092               	movlw	146
  5273  02E5  00DF               	movwf	map@out_min+1
  5274  02E6  3044               	movlw	68
  5275  02E7  00E0               	movwf	map@out_min+2
  5276  02E8  30C0               	movlw	192
  5277  02E9  00DB               	movwf	map@in_max
  5278  02EA  307F               	movlw	127
  5279  02EB  00DC               	movwf	map@in_max+1
  5280  02EC  3044               	movlw	68
  5281  02ED  00DD               	movwf	map@in_max+2
  5282  02EE  3000               	movlw	0
  5283  02EF  00D8               	movwf	map@in_min
  5284  02F0  3000               	movlw	0
  5285  02F1  00D9               	movwf	map@in_min+1
  5286  02F2  3000               	movlw	0
  5287  02F3  00DA               	movwf	map@in_min+2
  5288  02F4  0022               	movlb	2	; select bank2
  5289  02F5  084F               	movf	(_knob1_prev+1)^(0+256),w
  5290  02F6  0020               	movlb	0	; select bank0
  5291  02F7  00A9               	movwf	___awtoft@c+1
  5292  02F8  0022               	movlb	2	; select bank2
  5293  02F9  084E               	movf	_knob1_prev^(0+256),w
  5294  02FA  0020               	movlb	0	; select bank0
  5295  02FB  00A8               	movwf	___awtoft@c
  5296  02FC  3187  27DC  3182   	fcall	___awtoft
  5297  02FF  0020               	movlb	0	; select bank0
  5298  0300  0828               	movf	?___awtoft,w
  5299  0301  00D5               	movwf	map@x
  5300  0302  0829               	movf	?___awtoft+1,w
  5301  0303  00D6               	movwf	map@x+1
  5302  0304  082A               	movf	?___awtoft+2,w
  5303  0305  00D7               	movwf	map@x+2
  5304  0306  3196  26D6  3182   	fcall	_map
  5305  0309  0020               	movlb	0	; select bank0
  5306  030A  0855               	movf	?_map,w
  5307  030B  00E7               	movwf	___fttol@f1
  5308  030C  0856               	movf	?_map+1,w
  5309  030D  00E8               	movwf	___fttol@f1+1
  5310  030E  0857               	movf	?_map+2,w
  5311  030F  00E9               	movwf	___fttol@f1+2
  5312  0310  3197  2761  3182   	fcall	___fttol
  5313  0313  0020               	movlb	0	; select bank0
  5314  0314  086A               	movf	?___fttol+3,w
  5315  0315  0021               	movlb	1	; select bank1
  5316  0316  00DF               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5317  0317  0020               	movlb	0	; select bank0
  5318  0318  0869               	movf	?___fttol+2,w
  5319  0319  0021               	movlb	1	; select bank1
  5320  031A  00DE               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5321  031B  0020               	movlb	0	; select bank0
  5322  031C  0868               	movf	?___fttol+1,w
  5323  031D  0021               	movlb	1	; select bank1
  5324  031E  00DD               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5325  031F  0020               	movlb	0	; select bank0
  5326  0320  0867               	movf	?___fttol,w
  5327  0321  0021               	movlb	1	; select bank1
  5328  0322  00DC               	movwf	_baseline_delay_time^(0+128)	;volatile
  5329                           
  5330                           ;main.c: 235: delay_time_changed = 1;
  5331  0323  3001               	movlw	1
  5332  0324  0022               	movlb	2	; select bank2
  5333  0325  00CC               	movwf	_delay_time_changed^(0+256)
  5334  0326  3000               	movlw	0
  5335  0327  00CD               	movwf	(_delay_time_changed^(0+256)+1)
  5336  0328                     l4200:	
  5337                           
  5338                           ;main.c: 236: }
  5339                           ;main.c: 245: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5340  0328  0022               	movlb	2	; select bank2
  5341  0329  0950               	comf	_knob2_prev^(0+256),w
  5342  032A  0021               	movlb	1	; select bank1
  5343  032B  00AA               	movwf	??_main^(0+128)
  5344  032C  0022               	movlb	2	; select bank2
  5345  032D  0951               	comf	(_knob2_prev+1)^(0+256),w
  5346  032E  0021               	movlb	1	; select bank1
  5347  032F  00AB               	movwf	(??_main^(0+128)+1)
  5348  0330  0AAA               	incf	??_main^(0+128),f
  5349  0331  1903               	skipnz
  5350  0332  0AAB               	incf	(??_main^(0+128)+1),f
  5351  0333  084B               	movf	_knob_2_pos^(0+128),w
  5352  0334  072A               	addwf	??_main^(0+128),w
  5353  0335  00AC               	movwf	(??_main+2)^(0+128)
  5354  0336  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5355  0337  3D2B               	addwfc	(??_main+1)^(0+128),w
  5356  0338  00AD               	movwf	(??_main+3)^(0+128)
  5357  0339  082D               	movf	(??_main+3)^(0+128),w
  5358  033A  3A80               	xorlw	128
  5359  033B  00AE               	movwf	(??_main+4)^(0+128)
  5360  033C  3080               	movlw	128
  5361  033D  022E               	subwf	(??_main+4)^(0+128),w
  5362  033E  1D03               	skipz
  5363  033F  2B42               	goto	u4235
  5364  0340  3004               	movlw	4
  5365  0341  022C               	subwf	(??_main+2)^(0+128),w
  5366  0342                     u4235:	
  5367  0342  1803               	skipnc
  5368  0343  2B60               	goto	l4204
  5369  0344  0022               	movlb	2	; select bank2
  5370  0345  0950               	comf	_knob2_prev^(0+256),w
  5371  0346  0021               	movlb	1	; select bank1
  5372  0347  00AA               	movwf	??_main^(0+128)
  5373  0348  0022               	movlb	2	; select bank2
  5374  0349  0951               	comf	(_knob2_prev+1)^(0+256),w
  5375  034A  0021               	movlb	1	; select bank1
  5376  034B  00AB               	movwf	(??_main^(0+128)+1)
  5377  034C  0AAA               	incf	??_main^(0+128),f
  5378  034D  1903               	skipnz
  5379  034E  0AAB               	incf	(??_main^(0+128)+1),f
  5380  034F  084B               	movf	_knob_2_pos^(0+128),w
  5381  0350  072A               	addwf	??_main^(0+128),w
  5382  0351  00AC               	movwf	(??_main+2)^(0+128)
  5383  0352  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5384  0353  3D2B               	addwfc	(??_main+1)^(0+128),w
  5385  0354  00AD               	movwf	(??_main+3)^(0+128)
  5386  0355  082D               	movf	(??_main+3)^(0+128),w
  5387  0356  3A80               	xorlw	128
  5388  0357  00AE               	movwf	(??_main+4)^(0+128)
  5389  0358  307F               	movlw	127
  5390  0359  022E               	subwf	(??_main+4)^(0+128),w
  5391  035A  1D03               	skipz
  5392  035B  2B5E               	goto	u4245
  5393  035C  30FD               	movlw	253
  5394  035D  022C               	subwf	(??_main+2)^(0+128),w
  5395  035E                     u4245:	
  5396  035E  1803               	skipnc
  5397  035F  2BBD               	goto	l4212
  5398  0360                     l4204:	
  5399                           
  5400                           ;main.c: 246: knob2_prev = knob_2_pos;
  5401  0360  0021               	movlb	1	; select bank1
  5402  0361  084C               	movf	(_knob_2_pos+1)^(0+128),w
  5403  0362  0022               	movlb	2	; select bank2
  5404  0363  00D1               	movwf	(_knob2_prev+1)^(0+256)
  5405  0364  0021               	movlb	1	; select bank1
  5406  0365  084B               	movf	_knob_2_pos^(0+128),w
  5407  0366  0022               	movlb	2	; select bank2
  5408  0367  00D0               	movwf	_knob2_prev^(0+256)
  5409                           
  5410                           ;main.c: 247: int i = map(knob2_prev, 0, 1023, 0, 39);
  5411  0368  3000               	movlw	0
  5412  0369  0020               	movlb	0	; select bank0
  5413  036A  00E1               	movwf	map@out_max
  5414  036B  301C               	movlw	28
  5415  036C  00E2               	movwf	map@out_max+1
  5416  036D  3042               	movlw	66
  5417  036E  00E3               	movwf	map@out_max+2
  5418  036F  3000               	movlw	0
  5419  0370  00DE               	movwf	map@out_min
  5420  0371  3000               	movlw	0
  5421  0372  00DF               	movwf	map@out_min+1
  5422  0373  3000               	movlw	0
  5423  0374  00E0               	movwf	map@out_min+2
  5424  0375  30C0               	movlw	192
  5425  0376  00DB               	movwf	map@in_max
  5426  0377  307F               	movlw	127
  5427  0378  00DC               	movwf	map@in_max+1
  5428  0379  3044               	movlw	68
  5429  037A  00DD               	movwf	map@in_max+2
  5430  037B  3000               	movlw	0
  5431  037C  00D8               	movwf	map@in_min
  5432  037D  3000               	movlw	0
  5433  037E  00D9               	movwf	map@in_min+1
  5434  037F  3000               	movlw	0
  5435  0380  00DA               	movwf	map@in_min+2
  5436  0381  0022               	movlb	2	; select bank2
  5437  0382  0851               	movf	(_knob2_prev+1)^(0+256),w
  5438  0383  0020               	movlb	0	; select bank0
  5439  0384  00A9               	movwf	___awtoft@c+1
  5440  0385  0022               	movlb	2	; select bank2
  5441  0386  0850               	movf	_knob2_prev^(0+256),w
  5442  0387  0020               	movlb	0	; select bank0
  5443  0388  00A8               	movwf	___awtoft@c
  5444  0389  3187  27DC  3182   	fcall	___awtoft
  5445  038C  0020               	movlb	0	; select bank0
  5446  038D  0828               	movf	?___awtoft,w
  5447  038E  00D5               	movwf	map@x
  5448  038F  0829               	movf	?___awtoft+1,w
  5449  0390  00D6               	movwf	map@x+1
  5450  0391  082A               	movf	?___awtoft+2,w
  5451  0392  00D7               	movwf	map@x+2
  5452  0393  3196  26D6  3182   	fcall	_map
  5453  0396  0020               	movlb	0	; select bank0
  5454  0397  0855               	movf	?_map,w
  5455  0398  00E7               	movwf	___fttol@f1
  5456  0399  0856               	movf	?_map+1,w
  5457  039A  00E8               	movwf	___fttol@f1+1
  5458  039B  0857               	movf	?_map+2,w
  5459  039C  00E9               	movwf	___fttol@f1+2
  5460  039D  3197  2761  3182   	fcall	___fttol
  5461  03A0  0020               	movlb	0	; select bank0
  5462  03A1  0868               	movf	?___fttol+1,w
  5463  03A2  0021               	movlb	1	; select bank1
  5464  03A3  00BC               	movwf	(main@i+1)^(0+128)
  5465  03A4  0020               	movlb	0	; select bank0
  5466  03A5  0867               	movf	?___fttol,w
  5467  03A6  0021               	movlb	1	; select bank1
  5468  03A7  00BB               	movwf	main@i^(0+128)
  5469                           
  5470                           ;main.c: 248: CCPR2 = iB25k[i];
  5471  03A8  353B               	lslf	main@i^(0+128),w
  5472  03A9  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5473  03AA  0086               	movwf	6
  5474  03AB  3004               	movlw	4	; select bank8/9
  5475  03AC  0087               	movwf	7
  5476  03AD  3F40               	moviw [0]fsr1
  5477  03AE  0025               	movlb	5	; select bank5
  5478  03AF  0098               	movwf	24	;volatile
  5479  03B0  3F41               	moviw [1]fsr1
  5480  03B1  0099               	movwf	25	;volatile
  5481                           
  5482                           ;main.c: 249: CCPR3 = B25k[i];
  5483  03B2  0021               	movlb	1	; select bank1
  5484  03B3  353B               	lslf	main@i^(0+128),w
  5485  03B4  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5486  03B5  0086               	movwf	6
  5487  03B6  3003               	movlw	3	; select bank7/8
  5488  03B7  0087               	movwf	7
  5489  03B8  3F40               	moviw [0]fsr1
  5490  03B9  0026               	movlb	6	; select bank6
  5491  03BA  0091               	movwf	17	;volatile
  5492  03BB  3F41               	moviw [1]fsr1
  5493  03BC  0092               	movwf	18	;volatile
  5494  03BD                     l4212:	
  5495                           
  5496                           ;main.c: 250: }
  5497                           ;main.c: 260: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5498  03BD  0022               	movlb	2	; select bank2
  5499  03BE  0952               	comf	_knob3_prev^(0+256),w
  5500  03BF  0021               	movlb	1	; select bank1
  5501  03C0  00AA               	movwf	??_main^(0+128)
  5502  03C1  0022               	movlb	2	; select bank2
  5503  03C2  0953               	comf	(_knob3_prev+1)^(0+256),w
  5504  03C3  0021               	movlb	1	; select bank1
  5505  03C4  00AB               	movwf	(??_main^(0+128)+1)
  5506  03C5  0AAA               	incf	??_main^(0+128),f
  5507  03C6  1903               	skipnz
  5508  03C7  0AAB               	incf	(??_main^(0+128)+1),f
  5509  03C8  0022               	movlb	2	; select bank2
  5510  03C9  083E               	movf	_knob_3_pos^(0+256),w
  5511  03CA  0021               	movlb	1	; select bank1
  5512  03CB  072A               	addwf	??_main^(0+128),w
  5513  03CC  00AC               	movwf	(??_main+2)^(0+128)
  5514  03CD  0022               	movlb	2	; select bank2
  5515  03CE  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5516  03CF  0021               	movlb	1	; select bank1
  5517  03D0  3D2B               	addwfc	(??_main+1)^(0+128),w
  5518  03D1  00AD               	movwf	(??_main+3)^(0+128)
  5519  03D2  082D               	movf	(??_main+3)^(0+128),w
  5520  03D3  3A80               	xorlw	128
  5521  03D4  00AE               	movwf	(??_main+4)^(0+128)
  5522  03D5  3080               	movlw	128
  5523  03D6  022E               	subwf	(??_main+4)^(0+128),w
  5524  03D7  1D03               	skipz
  5525  03D8  2BDB               	goto	u4255
  5526  03D9  3004               	movlw	4
  5527  03DA  022C               	subwf	(??_main+2)^(0+128),w
  5528  03DB                     u4255:	
  5529  03DB  1803               	skipnc
  5530  03DC  2BFD               	goto	l4216
  5531  03DD  0022               	movlb	2	; select bank2
  5532  03DE  0952               	comf	_knob3_prev^(0+256),w
  5533  03DF  0021               	movlb	1	; select bank1
  5534  03E0  00AA               	movwf	??_main^(0+128)
  5535  03E1  0022               	movlb	2	; select bank2
  5536  03E2  0953               	comf	(_knob3_prev+1)^(0+256),w
  5537  03E3  0021               	movlb	1	; select bank1
  5538  03E4  00AB               	movwf	(??_main^(0+128)+1)
  5539  03E5  0AAA               	incf	??_main^(0+128),f
  5540  03E6  1903               	skipnz
  5541  03E7  0AAB               	incf	(??_main^(0+128)+1),f
  5542  03E8  0022               	movlb	2	; select bank2
  5543  03E9  083E               	movf	_knob_3_pos^(0+256),w
  5544  03EA  0021               	movlb	1	; select bank1
  5545  03EB  072A               	addwf	??_main^(0+128),w
  5546  03EC  00AC               	movwf	(??_main+2)^(0+128)
  5547  03ED  0022               	movlb	2	; select bank2
  5548  03EE  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5549  03EF  0021               	movlb	1	; select bank1
  5550  03F0  3D2B               	addwfc	(??_main+1)^(0+128),w
  5551  03F1  00AD               	movwf	(??_main+3)^(0+128)
  5552  03F2  082D               	movf	(??_main+3)^(0+128),w
  5553  03F3  3A80               	xorlw	128
  5554  03F4  00AE               	movwf	(??_main+4)^(0+128)
  5555  03F5  307F               	movlw	127
  5556  03F6  022E               	subwf	(??_main+4)^(0+128),w
  5557  03F7  1D03               	skipz
  5558  03F8  2BFB               	goto	u4265
  5559  03F9  30FD               	movlw	253
  5560  03FA  022C               	subwf	(??_main+2)^(0+128),w
  5561  03FB                     u4265:	
  5562  03FB  1803               	skipnc
  5563  03FC  2C57               	goto	l4224
  5564  03FD                     l4216:	
  5565                           
  5566                           ;main.c: 261: knob3_prev = knob_3_pos;
  5567  03FD  0022               	movlb	2	; select bank2
  5568  03FE  083F               	movf	(_knob_3_pos+1)^(0+256),w
  5569  03FF  00D3               	movwf	(_knob3_prev+1)^(0+256)
  5570  0400  083E               	movf	_knob_3_pos^(0+256),w
  5571  0401  00D2               	movwf	_knob3_prev^(0+256)
  5572                           
  5573                           ;main.c: 262: int i = map(knob3_prev, 0, 1023, 16, 0);
  5574  0402  3000               	movlw	0
  5575  0403  0020               	movlb	0	; select bank0
  5576  0404  00E1               	movwf	map@out_max
  5577  0405  3000               	movlw	0
  5578  0406  00E2               	movwf	map@out_max+1
  5579  0407  3000               	movlw	0
  5580  0408  00E3               	movwf	map@out_max+2
  5581  0409  3000               	movlw	0
  5582  040A  00DE               	movwf	map@out_min
  5583  040B  3080               	movlw	128
  5584  040C  00DF               	movwf	map@out_min+1
  5585  040D  3041               	movlw	65
  5586  040E  00E0               	movwf	map@out_min+2
  5587  040F  30C0               	movlw	192
  5588  0410  00DB               	movwf	map@in_max
  5589  0411  307F               	movlw	127
  5590  0412  00DC               	movwf	map@in_max+1
  5591  0413  3044               	movlw	68
  5592  0414  00DD               	movwf	map@in_max+2
  5593  0415  3000               	movlw	0
  5594  0416  00D8               	movwf	map@in_min
  5595  0417  3000               	movlw	0
  5596  0418  00D9               	movwf	map@in_min+1
  5597  0419  3000               	movlw	0
  5598  041A  00DA               	movwf	map@in_min+2
  5599  041B  0022               	movlb	2	; select bank2
  5600  041C  0853               	movf	(_knob3_prev+1)^(0+256),w
  5601  041D  0020               	movlb	0	; select bank0
  5602  041E  00A9               	movwf	___awtoft@c+1
  5603  041F  0022               	movlb	2	; select bank2
  5604  0420  0852               	movf	_knob3_prev^(0+256),w
  5605  0421  0020               	movlb	0	; select bank0
  5606  0422  00A8               	movwf	___awtoft@c
  5607  0423  3187  27DC  3182   	fcall	___awtoft
  5608  0426  0020               	movlb	0	; select bank0
  5609  0427  0828               	movf	?___awtoft,w
  5610  0428  00D5               	movwf	map@x
  5611  0429  0829               	movf	?___awtoft+1,w
  5612  042A  00D6               	movwf	map@x+1
  5613  042B  082A               	movf	?___awtoft+2,w
  5614  042C  00D7               	movwf	map@x+2
  5615  042D  3196  26D6  3182   	fcall	_map
  5616  0430  0020               	movlb	0	; select bank0
  5617  0431  0855               	movf	?_map,w
  5618  0432  00E7               	movwf	___fttol@f1
  5619  0433  0856               	movf	?_map+1,w
  5620  0434  00E8               	movwf	___fttol@f1+1
  5621  0435  0857               	movf	?_map+2,w
  5622  0436  00E9               	movwf	___fttol@f1+2
  5623  0437  3197  2761  3182   	fcall	___fttol
  5624  043A  0020               	movlb	0	; select bank0
  5625  043B  0868               	movf	?___fttol+1,w
  5626  043C  0021               	movlb	1	; select bank1
  5627  043D  00BE               	movwf	(main@i_356+1)^(0+128)
  5628  043E  0020               	movlb	0	; select bank0
  5629  043F  0867               	movf	?___fttol,w
  5630  0440  0021               	movlb	1	; select bank1
  5631  0441  00BD               	movwf	main@i_356^(0+128)
  5632                           
  5633                           ;main.c: 263: CCPR4 = iB25k[i];
  5634  0442  353D               	lslf	main@i_356^(0+128),w
  5635  0443  3E20               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5636  0444  0086               	movwf	6
  5637  0445  3004               	movlw	4	; select bank8/9
  5638  0446  0087               	movwf	7
  5639  0447  3F40               	moviw [0]fsr1
  5640  0448  0026               	movlb	6	; select bank6
  5641  0449  0098               	movwf	24	;volatile
  5642  044A  3F41               	moviw [1]fsr1
  5643  044B  0099               	movwf	25	;volatile
  5644                           
  5645                           ;main.c: 264: CCPR5 = B25k[i];
  5646  044C  0021               	movlb	1	; select bank1
  5647  044D  353D               	lslf	main@i_356^(0+128),w
  5648  044E  3EA0               	addlw	(low (_B25k| (0+768)))& (0+255)
  5649  044F  0086               	movwf	6
  5650  0450  3003               	movlw	3	; select bank7/8
  5651  0451  0087               	movwf	7
  5652  0452  3F40               	moviw [0]fsr1
  5653  0453  0026               	movlb	6	; select bank6
  5654  0454  009C               	movwf	28	;volatile
  5655  0455  3F41               	moviw [1]fsr1
  5656  0456  009D               	movwf	29	;volatile
  5657  0457                     l4224:	
  5658                           
  5659                           ;main.c: 265: }
  5660                           ;main.c: 275: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5661  0457  0022               	movlb	2	; select bank2
  5662  0458  0954               	comf	_knob4_prev^(0+256),w
  5663  0459  0021               	movlb	1	; select bank1
  5664  045A  00AA               	movwf	??_main^(0+128)
  5665  045B  0022               	movlb	2	; select bank2
  5666  045C  0955               	comf	(_knob4_prev+1)^(0+256),w
  5667  045D  0021               	movlb	1	; select bank1
  5668  045E  00AB               	movwf	(??_main^(0+128)+1)
  5669  045F  0AAA               	incf	??_main^(0+128),f
  5670  0460  1903               	skipnz
  5671  0461  0AAB               	incf	(??_main^(0+128)+1),f
  5672  0462  0022               	movlb	2	; select bank2
  5673  0463  0840               	movf	_knob_4_pos^(0+256),w
  5674  0464  0021               	movlb	1	; select bank1
  5675  0465  072A               	addwf	??_main^(0+128),w
  5676  0466  00AC               	movwf	(??_main+2)^(0+128)
  5677  0467  0022               	movlb	2	; select bank2
  5678  0468  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5679  0469  0021               	movlb	1	; select bank1
  5680  046A  3D2B               	addwfc	(??_main+1)^(0+128),w
  5681  046B  00AD               	movwf	(??_main+3)^(0+128)
  5682  046C  082D               	movf	(??_main+3)^(0+128),w
  5683  046D  3A80               	xorlw	128
  5684  046E  00AE               	movwf	(??_main+4)^(0+128)
  5685  046F  3080               	movlw	128
  5686  0470  022E               	subwf	(??_main+4)^(0+128),w
  5687  0471  1D03               	skipz
  5688  0472  2C75               	goto	u4275
  5689  0473  3004               	movlw	4
  5690  0474  022C               	subwf	(??_main+2)^(0+128),w
  5691  0475                     u4275:	
  5692  0475  1803               	skipnc
  5693  0476  2C97               	goto	l4228
  5694  0477  0022               	movlb	2	; select bank2
  5695  0478  0954               	comf	_knob4_prev^(0+256),w
  5696  0479  0021               	movlb	1	; select bank1
  5697  047A  00AA               	movwf	??_main^(0+128)
  5698  047B  0022               	movlb	2	; select bank2
  5699  047C  0955               	comf	(_knob4_prev+1)^(0+256),w
  5700  047D  0021               	movlb	1	; select bank1
  5701  047E  00AB               	movwf	(??_main^(0+128)+1)
  5702  047F  0AAA               	incf	??_main^(0+128),f
  5703  0480  1903               	skipnz
  5704  0481  0AAB               	incf	(??_main^(0+128)+1),f
  5705  0482  0022               	movlb	2	; select bank2
  5706  0483  0840               	movf	_knob_4_pos^(0+256),w
  5707  0484  0021               	movlb	1	; select bank1
  5708  0485  072A               	addwf	??_main^(0+128),w
  5709  0486  00AC               	movwf	(??_main+2)^(0+128)
  5710  0487  0022               	movlb	2	; select bank2
  5711  0488  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5712  0489  0021               	movlb	1	; select bank1
  5713  048A  3D2B               	addwfc	(??_main+1)^(0+128),w
  5714  048B  00AD               	movwf	(??_main+3)^(0+128)
  5715  048C  082D               	movf	(??_main+3)^(0+128),w
  5716  048D  3A80               	xorlw	128
  5717  048E  00AE               	movwf	(??_main+4)^(0+128)
  5718  048F  307F               	movlw	127
  5719  0490  022E               	subwf	(??_main+4)^(0+128),w
  5720  0491  1D03               	skipz
  5721  0492  2C95               	goto	u4285
  5722  0493  30FD               	movlw	253
  5723  0494  022C               	subwf	(??_main+2)^(0+128),w
  5724  0495                     u4285:	
  5725  0495  1803               	skipnc
  5726  0496  2CDC               	goto	l4232
  5727  0497                     l4228:	
  5728                           
  5729                           ;main.c: 276: knob4_prev = knob_4_pos;
  5730  0497  0022               	movlb	2	; select bank2
  5731  0498  0841               	movf	(_knob_4_pos+1)^(0+256),w
  5732  0499  00D5               	movwf	(_knob4_prev+1)^(0+256)
  5733  049A  0840               	movf	_knob_4_pos^(0+256),w
  5734  049B  00D4               	movwf	_knob4_prev^(0+256)
  5735                           
  5736                           ;main.c: 277: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  5737  049C  3000               	movlw	0
  5738  049D  0020               	movlb	0	; select bank0
  5739  049E  00E1               	movwf	map@out_max
  5740  049F  307A               	movlw	122
  5741  04A0  00E2               	movwf	map@out_max+1
  5742  04A1  3044               	movlw	68
  5743  04A2  00E3               	movwf	map@out_max+2
  5744  04A3  3000               	movlw	0
  5745  04A4  00DE               	movwf	map@out_min
  5746  04A5  3070               	movlw	112
  5747  04A6  00DF               	movwf	map@out_min+1
  5748  04A7  3042               	movlw	66
  5749  04A8  00E0               	movwf	map@out_min+2
  5750  04A9  30C0               	movlw	192
  5751  04AA  00DB               	movwf	map@in_max
  5752  04AB  307F               	movlw	127
  5753  04AC  00DC               	movwf	map@in_max+1
  5754  04AD  3044               	movlw	68
  5755  04AE  00DD               	movwf	map@in_max+2
  5756  04AF  3000               	movlw	0
  5757  04B0  00D8               	movwf	map@in_min
  5758  04B1  3000               	movlw	0
  5759  04B2  00D9               	movwf	map@in_min+1
  5760  04B3  3000               	movlw	0
  5761  04B4  00DA               	movwf	map@in_min+2
  5762  04B5  0022               	movlb	2	; select bank2
  5763  04B6  0855               	movf	(_knob4_prev+1)^(0+256),w
  5764  04B7  0020               	movlb	0	; select bank0
  5765  04B8  00A9               	movwf	___awtoft@c+1
  5766  04B9  0022               	movlb	2	; select bank2
  5767  04BA  0854               	movf	_knob4_prev^(0+256),w
  5768  04BB  0020               	movlb	0	; select bank0
  5769  04BC  00A8               	movwf	___awtoft@c
  5770  04BD  3187  27DC  3182   	fcall	___awtoft
  5771  04C0  0020               	movlb	0	; select bank0
  5772  04C1  0828               	movf	?___awtoft,w
  5773  04C2  00D5               	movwf	map@x
  5774  04C3  0829               	movf	?___awtoft+1,w
  5775  04C4  00D6               	movwf	map@x+1
  5776  04C5  082A               	movf	?___awtoft+2,w
  5777  04C6  00D7               	movwf	map@x+2
  5778  04C7  3196  26D6  3182   	fcall	_map
  5779  04CA  0020               	movlb	0	; select bank0
  5780  04CB  0855               	movf	?_map,w
  5781  04CC  00E7               	movwf	___fttol@f1
  5782  04CD  0856               	movf	?_map+1,w
  5783  04CE  00E8               	movwf	___fttol@f1+1
  5784  04CF  0857               	movf	?_map+2,w
  5785  04D0  00E9               	movwf	___fttol@f1+2
  5786  04D1  3197  2761  3182   	fcall	___fttol
  5787  04D4  0020               	movlb	0	; select bank0
  5788  04D5  0868               	movf	?___fttol+1,w
  5789  04D6  0022               	movlb	2	; select bank2
  5790  04D7  00D9               	movwf	(_mod_delay_time+1)^(0+256)
  5791  04D8  0020               	movlb	0	; select bank0
  5792  04D9  0867               	movf	?___fttol,w
  5793  04DA  0022               	movlb	2	; select bank2
  5794  04DB  00D8               	movwf	_mod_delay_time^(0+256)
  5795  04DC                     l4232:	
  5796                           
  5797                           ;main.c: 278: }
  5798                           ;main.c: 286: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5799  04DC  0022               	movlb	2	; select bank2
  5800  04DD  0956               	comf	_knob5_prev^(0+256),w
  5801  04DE  0021               	movlb	1	; select bank1
  5802  04DF  00AA               	movwf	??_main^(0+128)
  5803  04E0  0022               	movlb	2	; select bank2
  5804  04E1  0957               	comf	(_knob5_prev+1)^(0+256),w
  5805  04E2  0021               	movlb	1	; select bank1
  5806  04E3  00AB               	movwf	(??_main^(0+128)+1)
  5807  04E4  0AAA               	incf	??_main^(0+128),f
  5808  04E5  1903               	skipnz
  5809  04E6  0AAB               	incf	(??_main^(0+128)+1),f
  5810  04E7  0022               	movlb	2	; select bank2
  5811  04E8  0842               	movf	_knob_5_pos^(0+256),w
  5812  04E9  0021               	movlb	1	; select bank1
  5813  04EA  072A               	addwf	??_main^(0+128),w
  5814  04EB  00AC               	movwf	(??_main+2)^(0+128)
  5815  04EC  0022               	movlb	2	; select bank2
  5816  04ED  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5817  04EE  0021               	movlb	1	; select bank1
  5818  04EF  3D2B               	addwfc	(??_main+1)^(0+128),w
  5819  04F0  00AD               	movwf	(??_main+3)^(0+128)
  5820  04F1  082D               	movf	(??_main+3)^(0+128),w
  5821  04F2  3A80               	xorlw	128
  5822  04F3  00AE               	movwf	(??_main+4)^(0+128)
  5823  04F4  3080               	movlw	128
  5824  04F5  022E               	subwf	(??_main+4)^(0+128),w
  5825  04F6  1D03               	skipz
  5826  04F7  2CFA               	goto	u4295
  5827  04F8  3004               	movlw	4
  5828  04F9  022C               	subwf	(??_main+2)^(0+128),w
  5829  04FA                     u4295:	
  5830  04FA  1803               	skipnc
  5831  04FB  2D1C               	goto	l4236
  5832  04FC  0022               	movlb	2	; select bank2
  5833  04FD  0956               	comf	_knob5_prev^(0+256),w
  5834  04FE  0021               	movlb	1	; select bank1
  5835  04FF  00AA               	movwf	??_main^(0+128)
  5836  0500  0022               	movlb	2	; select bank2
  5837  0501  0957               	comf	(_knob5_prev+1)^(0+256),w
  5838  0502  0021               	movlb	1	; select bank1
  5839  0503  00AB               	movwf	(??_main^(0+128)+1)
  5840  0504  0AAA               	incf	??_main^(0+128),f
  5841  0505  1903               	skipnz
  5842  0506  0AAB               	incf	(??_main^(0+128)+1),f
  5843  0507  0022               	movlb	2	; select bank2
  5844  0508  0842               	movf	_knob_5_pos^(0+256),w
  5845  0509  0021               	movlb	1	; select bank1
  5846  050A  072A               	addwf	??_main^(0+128),w
  5847  050B  00AC               	movwf	(??_main+2)^(0+128)
  5848  050C  0022               	movlb	2	; select bank2
  5849  050D  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5850  050E  0021               	movlb	1	; select bank1
  5851  050F  3D2B               	addwfc	(??_main+1)^(0+128),w
  5852  0510  00AD               	movwf	(??_main+3)^(0+128)
  5853  0511  082D               	movf	(??_main+3)^(0+128),w
  5854  0512  3A80               	xorlw	128
  5855  0513  00AE               	movwf	(??_main+4)^(0+128)
  5856  0514  307F               	movlw	127
  5857  0515  022E               	subwf	(??_main+4)^(0+128),w
  5858  0516  1D03               	skipz
  5859  0517  2D1A               	goto	u4305
  5860  0518  30FD               	movlw	253
  5861  0519  022C               	subwf	(??_main+2)^(0+128),w
  5862  051A                     u4305:	
  5863  051A  1803               	skipnc
  5864  051B  2D21               	goto	l289
  5865  051C                     l4236:	
  5866                           
  5867                           ;main.c: 287: knob5_prev = knob_5_pos;
  5868  051C  0022               	movlb	2	; select bank2
  5869  051D  0843               	movf	(_knob_5_pos+1)^(0+256),w
  5870  051E  00D7               	movwf	(_knob5_prev+1)^(0+256)
  5871  051F  0842               	movf	_knob_5_pos^(0+256),w
  5872  0520  00D6               	movwf	_knob5_prev^(0+256)
  5873  0521                     l289:	
  5874                           
  5875                           ;main.c: 288: }
  5876                           ;main.c: 301: if (mod_timer >= mod_delay_time) {
  5877  0521  0022               	movlb	2	; select bank2
  5878  0522  0858               	movf	_mod_delay_time^(0+256),w
  5879  0523  0021               	movlb	1	; select bank1
  5880  0524  00AA               	movwf	??_main^(0+128)
  5881  0525  0022               	movlb	2	; select bank2
  5882  0526  0859               	movf	(_mod_delay_time+1)^(0+256),w
  5883  0527  0021               	movlb	1	; select bank1
  5884  0528  00AB               	movwf	(??_main^(0+128)+1)
  5885  0529  3000               	movlw	0
  5886  052A  1BAB               	btfsc	(??_main^(0+128)+1),7
  5887  052B  30FF               	movlw	255
  5888  052C  00AC               	movwf	(??_main^(0+128)+2)
  5889  052D  00AD               	movwf	(??_main^(0+128)+3)
  5890  052E  0022               	movlb	2	; select bank2
  5891  052F  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
  5892  0530  3A80               	xorlw	128
  5893  0531  0021               	movlb	1	; select bank1
  5894  0532  00AE               	movwf	(??_main+4)^(0+128)
  5895  0533  082D               	movf	(??_main+3)^(0+128),w
  5896  0534  3A80               	xorlw	128
  5897  0535  022E               	subwf	(??_main+4)^(0+128),w
  5898  0536  0022               	movlb	2	; select bank2
  5899  0537  1D03               	skipz
  5900  0538  2D49               	goto	u4313
  5901  0539  0021               	movlb	1	; select bank1
  5902  053A  082C               	movf	(??_main+2)^(0+128),w
  5903  053B  0022               	movlb	2	; select bank2
  5904  053C  0226               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  5905  053D  1D03               	skipz
  5906  053E  2D49               	goto	u4313
  5907  053F  0021               	movlb	1	; select bank1
  5908  0540  082B               	movf	(??_main+1)^(0+128),w
  5909  0541  0022               	movlb	2	; select bank2
  5910  0542  0225               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  5911  0543  1D03               	skipz
  5912  0544  2D49               	goto	u4313
  5913  0545  0021               	movlb	1	; select bank1
  5914  0546  082A               	movf	??_main^(0+128),w
  5915  0547  0022               	movlb	2	; select bank2
  5916  0548  0224               	subwf	_mod_timer^(0+256),w	;volatile
  5917  0549                     u4313:	
  5918  0549  1C03               	skipc
  5919  054A  2E6E               	goto	l4290
  5920                           
  5921                           ;main.c: 303: mod_counter = mod_counter + 1;
  5922  054B  0021               	movlb	1	; select bank1
  5923  054C  084F               	movf	_mod_counter^(0+128),w
  5924  054D  3E01               	addlw	1
  5925  054E  00CF               	movwf	_mod_counter^(0+128)
  5926  054F  3000               	movlw	0
  5927  0550  3D50               	addwfc	(_mod_counter+1)^(0+128),w
  5928  0551  00D0               	movwf	(_mod_counter+1)^(0+128)
  5929                           
  5930                           ;main.c: 304: mod_timer = 0;
  5931  0552  3000               	movlw	0
  5932  0553  0022               	movlb	2	; select bank2
  5933  0554  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  5934  0555  3000               	movlw	0
  5935  0556  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  5936  0557  3000               	movlw	0
  5937  0558  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  5938  0559  3000               	movlw	0
  5939  055A  00A4               	movwf	_mod_timer^(0+256)	;volatile
  5940                           
  5941                           ;main.c: 306: if (bottom_push_state == 1 || bottom_push_state == 5) {
  5942  055B  0021               	movlb	1	; select bank1
  5943  055C  0364               	decf	_bottom_push_state^(0+128),w
  5944  055D  0465               	iorwf	(_bottom_push_state+1)^(0+128),w
  5945  055E  1903               	btfsc	3,2
  5946  055F  2D65               	goto	l4246
  5947  0560  3005               	movlw	5
  5948  0561  0664               	xorwf	_bottom_push_state^(0+128),w
  5949  0562  0465               	iorwf	(_bottom_push_state+1)^(0+128),w
  5950  0563  1D03               	btfss	3,2
  5951  0564  2D6E               	goto	l4250
  5952  0565                     l4246:	
  5953                           
  5954                           ;main.c: 307: if (mod_counter >= 61) {
  5955  0565  0850               	movf	(_mod_counter+1)^(0+128),w
  5956  0566  3A80               	xorlw	128
  5957  0567  00AA               	movwf	??_main^(0+128)
  5958  0568  3080               	movlw	128
  5959  0569  022A               	subwf	??_main^(0+128),w
  5960  056A  1D03               	skipz
  5961  056B  2D77               	goto	u4355
  5962  056C  303D               	movlw	61
  5963  056D  2D76               	goto	L1
  5964  056E                     l4250:	
  5965                           ;main.c: 309: }
  5966                           ;main.c: 310: } else {
  5967                           
  5968                           ;main.c: 308: mod_counter = 0;
  5969                           
  5970                           
  5971                           ;main.c: 311: if (mod_counter > 31) {
  5972  056E  0850               	movf	(_mod_counter+1)^(0+128),w
  5973  056F  3A80               	xorlw	128
  5974  0570  00AA               	movwf	??_main^(0+128)
  5975  0571  3080               	movlw	128
  5976  0572  022A               	subwf	??_main^(0+128),w
  5977  0573  1D03               	skipz
  5978  0574  2D77               	goto	u4355
  5979  0575  3020               	movlw	32
  5980  0576                     L1:	
  5981  0576  024F               	subwf	_mod_counter^(0+128),w
  5982  0577                     u4355:	
  5983  0577  1C03               	skipc
  5984  0578  2D7C               	goto	l4254
  5985                           
  5986                           ;main.c: 312: mod_counter = 0;
  5987  0579  0021               	movlb	1	; select bank1
  5988  057A  01CF               	clrf	_mod_counter^(0+128)
  5989  057B  01D0               	clrf	(_mod_counter+1)^(0+128)
  5990  057C                     l4254:	
  5991                           
  5992                           ;main.c: 313: }
  5993                           ;main.c: 314: }
  5994                           ;main.c: 317: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  5995  057C  3000               	movlw	0
  5996  057D  0020               	movlb	0	; select bank0
  5997  057E  00E1               	movwf	map@out_max
  5998  057F  3000               	movlw	0
  5999  0580  00E2               	movwf	map@out_max+1
  6000  0581  3000               	movlw	0
  6001  0582  00E3               	movwf	map@out_max+2
  6002  0583  3060               	movlw	96
  6003  0584  00DE               	movwf	map@out_min
  6004  0585  309F               	movlw	159
  6005  0586  00DF               	movwf	map@out_min+1
  6006  0587  3044               	movlw	68
  6007  0588  00E0               	movwf	map@out_min+2
  6008  0589  30C0               	movlw	192
  6009  058A  00DB               	movwf	map@in_max
  6010  058B  307F               	movlw	127
  6011  058C  00DC               	movwf	map@in_max+1
  6012  058D  3044               	movlw	68
  6013  058E  00DD               	movwf	map@in_max+2
  6014  058F  3000               	movlw	0
  6015  0590  00D8               	movwf	map@in_min
  6016  0591  3000               	movlw	0
  6017  0592  00D9               	movwf	map@in_min+1
  6018  0593  3000               	movlw	0
  6019  0594  00DA               	movwf	map@in_min+2
  6020  0595  0022               	movlb	2	; select bank2
  6021  0596  0857               	movf	(_knob5_prev+1)^(0+256),w
  6022  0597  0020               	movlb	0	; select bank0
  6023  0598  00A9               	movwf	___awtoft@c+1
  6024  0599  0022               	movlb	2	; select bank2
  6025  059A  0856               	movf	_knob5_prev^(0+256),w
  6026  059B  0020               	movlb	0	; select bank0
  6027  059C  00A8               	movwf	___awtoft@c
  6028  059D  3187  27DC  3182   	fcall	___awtoft
  6029  05A0  0020               	movlb	0	; select bank0
  6030  05A1  0828               	movf	?___awtoft,w
  6031  05A2  00D5               	movwf	map@x
  6032  05A3  0829               	movf	?___awtoft+1,w
  6033  05A4  00D6               	movwf	map@x+1
  6034  05A5  082A               	movf	?___awtoft+2,w
  6035  05A6  00D7               	movwf	map@x+2
  6036  05A7  3196  26D6  3182   	fcall	_map
  6037  05AA  0020               	movlb	0	; select bank0
  6038  05AB  0855               	movf	?_map,w
  6039  05AC  00E7               	movwf	___fttol@f1
  6040  05AD  0856               	movf	?_map+1,w
  6041  05AE  00E8               	movwf	___fttol@f1+1
  6042  05AF  0857               	movf	?_map+2,w
  6043  05B0  00E9               	movwf	___fttol@f1+2
  6044  05B1  3197  2761  3182   	fcall	___fttol
  6045  05B4  0020               	movlb	0	; select bank0
  6046  05B5  0868               	movf	?___fttol+1,w
  6047  05B6  0021               	movlb	1	; select bank1
  6048  05B7  00BA               	movwf	(main@adjusted_pot_value+1)^(0+128)
  6049  05B8  0020               	movlb	0	; select bank0
  6050  05B9  0867               	movf	?___fttol,w
  6051  05BA  0021               	movlb	1	; select bank1
  6052  05BB  00B9               	movwf	main@adjusted_pot_value^(0+128)
  6053                           
  6054                           ;main.c: 318: switch (bottom_push_state) {
  6055  05BC  2E18               	goto	l4284
  6056  05BD                     l4256:	
  6057                           ;main.c: 319: case 1:
  6058                           
  6059                           
  6060                           ;main.c: 320: mod_value = mod5[mod_counter];
  6061  05BD  0850               	movf	(_mod_counter+1)^(0+128),w
  6062  05BE  00AB               	movwf	(??_main^(0+128)+1)
  6063  05BF  084F               	movf	_mod_counter^(0+128),w
  6064  05C0  00AA               	movwf	??_main^(0+128)
  6065  05C1  35AA               	lslf	??_main^(0+128),f
  6066  05C2  0DAB               	rlf	(??_main^(0+128)+1),f
  6067  05C3  3078               	movlw	120
  6068  05C4  00AC               	movwf	(??_main+2)^(0+128)
  6069  05C5  3023               	movlw	35
  6070  05C6  00AD               	movwf	((??_main+2)^(0+128)+1)
  6071  05C7  082A               	movf	??_main^(0+128),w
  6072  05C8  072C               	addwf	(??_main+2)^(0+128),w
  6073  05C9  0086               	movwf	6
  6074  05CA  082B               	movf	(??_main+1)^(0+128),w
  6075  05CB  3D2D               	addwfc	(??_main+3)^(0+128),w
  6076  05CC  0087               	movwf	7
  6077  05CD  3F40               	moviw [0]fsr1
  6078  05CE  0022               	movlb	2	; select bank2
  6079  05CF  00C4               	movwf	_mod_value^(0+256)
  6080  05D0  3F41               	moviw [1]fsr1
  6081  05D1  2DF2               	goto	L4
  6082  05D2                     l4260:	
  6083                           ;main.c: 323: case 2:
  6084                           
  6085                           ;main.c: 322: break;
  6086                           
  6087                           ;main.c: 321: PORTCbits.RC4 = 0;
  6088                           
  6089                           
  6090                           ;main.c: 324: mod_value = mod2[mod_counter];
  6091  05D2  0021               	movlb	1	; select bank1
  6092  05D3  354F               	lslf	_mod_counter^(0+128),w
  6093  05D4  3E20               	addlw	(low (_mod2| (0+512)))& (0+255)
  6094  05D5  0086               	movwf	6
  6095  05D6  3002               	movlw	2	; select bank4/5
  6096  05D7  0087               	movwf	7
  6097  05D8  3F40               	moviw [0]fsr1
  6098  05D9  0022               	movlb	2	; select bank2
  6099  05DA  00C4               	movwf	_mod_value^(0+256)
  6100  05DB  3F41               	moviw [1]fsr1
  6101  05DC  2DF2               	goto	L4
  6102  05DD                     l4264:	
  6103                           ;main.c: 327: case 3:
  6104                           
  6105                           ;main.c: 326: break;
  6106                           
  6107                           ;main.c: 325: PORTCbits.RC4 = 0;
  6108                           
  6109                           
  6110                           ;main.c: 328: mod_value = mod3[mod_counter];
  6111  05DD  0021               	movlb	1	; select bank1
  6112  05DE  354F               	lslf	_mod_counter^(0+128),w
  6113  05DF  3EA0               	addlw	(low (_mod3| (0+512)))& (0+255)
  6114  05E0  0086               	movwf	6
  6115  05E1  3002               	movlw	2	; select bank5/6
  6116  05E2  0087               	movwf	7
  6117  05E3  3F40               	moviw [0]fsr1
  6118  05E4  0022               	movlb	2	; select bank2
  6119  05E5  00C4               	movwf	_mod_value^(0+256)
  6120  05E6  3F41               	moviw [1]fsr1
  6121  05E7  2DF2               	goto	L4
  6122  05E8                     l4268:	
  6123                           ;main.c: 331: case 4:
  6124                           
  6125                           ;main.c: 330: break;
  6126                           
  6127                           ;main.c: 329: PORTCbits.RC4 = 0;
  6128                           
  6129                           
  6130                           ;main.c: 332: mod_value = mod4[mod_counter];
  6131  05E8  0021               	movlb	1	; select bank1
  6132  05E9  354F               	lslf	_mod_counter^(0+128),w
  6133  05EA  3E20               	addlw	(low (_mod4| (0+768)))& (0+255)
  6134  05EB  0086               	movwf	6
  6135  05EC  3003               	movlw	3	; select bank6/7
  6136  05ED  0087               	movwf	7
  6137  05EE  3F40               	moviw [0]fsr1
  6138  05EF  0022               	movlb	2	; select bank2
  6139  05F0  00C4               	movwf	_mod_value^(0+256)
  6140  05F1  3F41               	moviw [1]fsr1
  6141  05F2                     L4:	
  6142  05F2  00C5               	movwf	(_mod_value+1)^(0+256)
  6143  05F3  2E15               	goto	l4280
  6144  05F4                     l4272:	
  6145                           ;main.c: 335: case 5:
  6146                           
  6147                           ;main.c: 334: break;
  6148                           
  6149                           ;main.c: 333: PORTCbits.RC4 = 0;
  6150                           
  6151                           
  6152                           ;main.c: 336: mod_value = mod5[mod_counter];
  6153  05F4  0021               	movlb	1	; select bank1
  6154  05F5  0850               	movf	(_mod_counter+1)^(0+128),w
  6155  05F6  00AB               	movwf	(??_main^(0+128)+1)
  6156  05F7  084F               	movf	_mod_counter^(0+128),w
  6157  05F8  00AA               	movwf	??_main^(0+128)
  6158  05F9  35AA               	lslf	??_main^(0+128),f
  6159  05FA  0DAB               	rlf	(??_main^(0+128)+1),f
  6160  05FB  3078               	movlw	120
  6161  05FC  00AC               	movwf	(??_main+2)^(0+128)
  6162  05FD  3023               	movlw	35
  6163  05FE  00AD               	movwf	((??_main+2)^(0+128)+1)
  6164  05FF  082A               	movf	??_main^(0+128),w
  6165  0600  072C               	addwf	(??_main+2)^(0+128),w
  6166  0601  0086               	movwf	6
  6167  0602  082B               	movf	(??_main+1)^(0+128),w
  6168  0603  3D2D               	addwfc	(??_main+3)^(0+128),w
  6169  0604  0087               	movwf	7
  6170  0605  3F40               	moviw [0]fsr1
  6171  0606  0022               	movlb	2	; select bank2
  6172  0607  00C4               	movwf	_mod_value^(0+256)
  6173  0608  3F41               	moviw [1]fsr1
  6174  0609  00C5               	movwf	(_mod_value+1)^(0+256)
  6175                           
  6176                           ;main.c: 337: adjusted_pot_value = 1275;
  6177  060A  30FB               	movlw	251
  6178  060B  0021               	movlb	1	; select bank1
  6179  060C  00B9               	movwf	main@adjusted_pot_value^(0+128)
  6180  060D  3004               	movlw	4
  6181  060E  00BA               	movwf	(main@adjusted_pot_value^(0+128)+1)
  6182                           
  6183                           ;main.c: 338: PORTCbits.RC4 = 1;
  6184  060F  0020               	movlb	0	; select bank0
  6185  0610  160E               	bsf	14,4	;volatile
  6186                           
  6187                           ;main.c: 339: break;
  6188  0611  2E32               	goto	l4286
  6189  0612                     l4278:	
  6190                           ;main.c: 340: case 6:
  6191                           
  6192                           
  6193                           ;main.c: 341: mod_value = 0;
  6194  0612  0022               	movlb	2	; select bank2
  6195  0613  01C4               	clrf	_mod_value^(0+256)
  6196  0614  01C5               	clrf	(_mod_value+1)^(0+256)
  6197  0615                     l4280:	
  6198                           
  6199                           ;main.c: 342: PORTCbits.RC4 = 0;
  6200  0615  0020               	movlb	0	; select bank0
  6201  0616  120E               	bcf	14,4	;volatile
  6202                           
  6203                           ;main.c: 344: }
  6204                           
  6205                           ;main.c: 343: break;
  6206  0617  2E32               	goto	l4286
  6207  0618                     l4284:	
  6208                           
  6209                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6210                           ; Switch size 1, requested type "space"
  6211                           ; Number of cases is 1, Range of values is 0 to 0
  6212                           ; switch strategies available:
  6213                           ; Name         Instructions Cycles
  6214                           ; simple_byte            4     3 (average)
  6215                           ; direct_byte            8     6 (fixed)
  6216                           ; jumptable            260     6 (fixed)
  6217                           ;	Chosen strategy is simple_byte
  6218  0618  0021               	movlb	1	; select bank1
  6219  0619  0865               	movf	(_bottom_push_state+1)^(0+128),w
  6220  061A  3A00               	xorlw	0	; case 0
  6221  061B  1903               	skipnz
  6222  061C  2E1E               	goto	l4562
  6223  061D  2E32               	goto	l4286
  6224  061E                     l4562:	
  6225                           
  6226                           ; Switch size 1, requested type "space"
  6227                           ; Number of cases is 6, Range of values is 1 to 6
  6228                           ; switch strategies available:
  6229                           ; Name         Instructions Cycles
  6230                           ; simple_byte           19    10 (average)
  6231                           ; direct_byte           21     9 (fixed)
  6232                           ; jumptable            263     9 (fixed)
  6233                           ;	Chosen strategy is simple_byte
  6234  061E  0864               	movf	_bottom_push_state^(0+128),w
  6235  061F  3A01               	xorlw	1	; case 1
  6236  0620  1903               	skipnz
  6237  0621  2DBD               	goto	l4256
  6238  0622  3A03               	xorlw	3	; case 2
  6239  0623  1903               	skipnz
  6240  0624  2DD2               	goto	l4260
  6241  0625  3A01               	xorlw	1	; case 3
  6242  0626  1903               	skipnz
  6243  0627  2DDD               	goto	l4264
  6244  0628  3A07               	xorlw	7	; case 4
  6245  0629  1903               	skipnz
  6246  062A  2DE8               	goto	l4268
  6247  062B  3A01               	xorlw	1	; case 5
  6248  062C  1903               	skipnz
  6249  062D  2DF4               	goto	l4272
  6250  062E  3A03               	xorlw	3	; case 6
  6251  062F  1903               	skipnz
  6252  0630  2E12               	goto	l4278
  6253  0631  2E32               	goto	l4286
  6254  0632                     l4286:	
  6255                           
  6256                           ;main.c: 345: mod_value = modulation(mod_value, adjusted_pot_value);
  6257  0632  0022               	movlb	2	; select bank2
  6258  0633  0845               	movf	(_mod_value+1)^(0+256),w
  6259  0634  0020               	movlb	0	; select bank0
  6260  0635  00B6               	movwf	modulation@x+1
  6261  0636  0022               	movlb	2	; select bank2
  6262  0637  0844               	movf	_mod_value^(0+256),w
  6263  0638  0020               	movlb	0	; select bank0
  6264  0639  00B5               	movwf	modulation@x
  6265  063A  0021               	movlb	1	; select bank1
  6266  063B  083A               	movf	(main@adjusted_pot_value+1)^(0+128),w
  6267  063C  0020               	movlb	0	; select bank0
  6268  063D  00B8               	movwf	modulation@y+1
  6269  063E  0021               	movlb	1	; select bank1
  6270  063F  0839               	movf	main@adjusted_pot_value^(0+128),w
  6271  0640  0020               	movlb	0	; select bank0
  6272  0641  00B7               	movwf	modulation@y
  6273  0642  3192  229E  3182   	fcall	_modulation
  6274  0645  0020               	movlb	0	; select bank0
  6275  0646  0836               	movf	?_modulation+1,w
  6276  0647  0022               	movlb	2	; select bank2
  6277  0648  00C5               	movwf	(_mod_value+1)^(0+256)
  6278  0649  0020               	movlb	0	; select bank0
  6279  064A  0835               	movf	?_modulation,w
  6280  064B  0022               	movlb	2	; select bank2
  6281  064C  00C4               	movwf	_mod_value^(0+256)
  6282                           
  6283                           ;main.c: 346: CCPR9 = mod_value / 2;
  6284  064D  3002               	movlw	2
  6285  064E  0020               	movlb	0	; select bank0
  6286  064F  00A0               	movwf	___awdiv@divisor
  6287  0650  3000               	movlw	0
  6288  0651  00A1               	movwf	___awdiv@divisor+1
  6289  0652  0022               	movlb	2	; select bank2
  6290  0653  0845               	movf	(_mod_value+1)^(0+256),w
  6291  0654  0020               	movlb	0	; select bank0
  6292  0655  00A3               	movwf	___awdiv@dividend+1
  6293  0656  0022               	movlb	2	; select bank2
  6294  0657  0844               	movf	_mod_value^(0+256),w
  6295  0658  0020               	movlb	0	; select bank0
  6296  0659  00A2               	movwf	___awdiv@dividend
  6297  065A  3194  24DA  3182   	fcall	___awdiv
  6298  065D  0020               	movlb	0	; select bank0
  6299  065E  0821               	movf	?___awdiv+1,w
  6300  065F  002C               	movlb	12	; select bank12
  6301  0660  009B               	movwf	27	;volatile
  6302  0661  0020               	movlb	0	; select bank0
  6303  0662  0820               	movf	?___awdiv,w
  6304  0663  002C               	movlb	12	; select bank12
  6305  0664  009A               	movwf	26	;volatile
  6306                           
  6307                           ;main.c: 347: mod_timer = 0;
  6308  0665  3000               	movlw	0
  6309  0666  0022               	movlb	2	; select bank2
  6310  0667  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6311  0668  3000               	movlw	0
  6312  0669  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6313  066A  3000               	movlw	0
  6314  066B  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6315  066C  3000               	movlw	0
  6316  066D  00A4               	movwf	_mod_timer^(0+256)	;volatile
  6317  066E                     l4290:	
  6318                           
  6319                           ;main.c: 348: }
  6320                           ;main.c: 353: if (delay_time_changed == 1) {
  6321  066E  034C               	decf	_delay_time_changed^(0+256),w
  6322  066F  044D               	iorwf	(_delay_time_changed+1)^(0+256),w
  6323  0670  1D03               	btfss	3,2
  6324  0671  2A2D               	goto	l4160
  6325                           
  6326                           ;main.c: 354: delay_time = baseline_delay_time;
  6327  0672  0021               	movlb	1	; select bank1
  6328  0673  085F               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6329  0674  00E3               	movwf	(_delay_time+3)^(0+128)	;volatile
  6330  0675  085E               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6331  0676  00E2               	movwf	(_delay_time+2)^(0+128)	;volatile
  6332  0677  085D               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6333  0678  00E1               	movwf	(_delay_time+1)^(0+128)	;volatile
  6334  0679  085C               	movf	_baseline_delay_time^(0+128),w	;volatile
  6335  067A  00E0               	movwf	_delay_time^(0+128)	;volatile
  6336                           
  6337                           ;main.c: 355: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6338  067B  085D               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6339  067C  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  6340  067D  085C               	movf	_baseline_delay_time^(0+128),w	;volatile
  6341  067E  00A6               	movwf	set_subdivision@x^(0+128)
  6342  067F  0869               	movf	(_top_push_state+1)^(0+128),w
  6343  0680  00A9               	movwf	(set_subdivision@y+1)^(0+128)
  6344  0681  0868               	movf	_top_push_state^(0+128),w
  6345  0682  00A8               	movwf	set_subdivision@y^(0+128)
  6346  0683  318A  22CF  3182   	fcall	_set_subdivision
  6347  0686  0021               	movlb	1	; select bank1
  6348  0687  0826               	movf	?_set_subdivision^(0+128),w
  6349  0688  00E0               	movwf	_delay_time^(0+128)	;volatile
  6350  0689  0827               	movf	(?_set_subdivision+1)^(0+128),w
  6351  068A  00E1               	movwf	(_delay_time+1)^(0+128)	;volatile
  6352  068B  0D89               	rlf	9,f
  6353  068C  3B89               	subwfb	9,f
  6354  068D  0989               	comf	9,f
  6355  068E  00E2               	movwf	(_delay_time+2)^(0+128)	;volatile
  6356  068F  00E3               	movwf	(_delay_time+3)^(0+128)	;volatile
  6357                           
  6358                           ;main.c: 356: delayfound = 0;
  6359  0690  0022               	movlb	2	; select bank2
  6360  0691  01BC               	clrf	_delayfound^(0+256)
  6361  0692  01BD               	clrf	(_delayfound+1)^(0+256)
  6362                           
  6363                           ;main.c: 357: delay_counter = 0;
  6364  0693  01BA               	clrf	_delay_counter^(0+256)
  6365  0694  01BB               	clrf	(_delay_counter+1)^(0+256)
  6366  0695                     l4306:	
  6367                           ;main.c: 358: while (delayfound == 0) {
  6368                           
  6369  0695  0022               	movlb	2	; select bank2
  6370  0696  083C               	movf	_delayfound^(0+256),w
  6371  0697  043D               	iorwf	(_delayfound+1)^(0+256),w
  6372  0698  1D03               	btfss	3,2
  6373  0699  2EF0               	goto	l4308
  6374                           
  6375                           ;main.c: 359: if (delay[delay_counter] <= delay_time * 2) {
  6376  069A  083B               	movf	(_delay_counter+1)^(0+256),w
  6377  069B  0021               	movlb	1	; select bank1
  6378  069C  00AB               	movwf	(??_main^(0+128)+1)
  6379  069D  0022               	movlb	2	; select bank2
  6380  069E  083A               	movf	_delay_counter^(0+256),w
  6381  069F  0021               	movlb	1	; select bank1
  6382  06A0  00AA               	movwf	??_main^(0+128)
  6383  06A1  35AA               	lslf	??_main^(0+128),f
  6384  06A2  0DAB               	rlf	(??_main^(0+128)+1),f
  6385  06A3  30F2               	movlw	242
  6386  06A4  00AC               	movwf	(??_main+2)^(0+128)
  6387  06A5  3023               	movlw	35
  6388  06A6  00AD               	movwf	((??_main+2)^(0+128)+1)
  6389  06A7  082A               	movf	??_main^(0+128),w
  6390  06A8  072C               	addwf	(??_main+2)^(0+128),w
  6391  06A9  0086               	movwf	6
  6392  06AA  082B               	movf	(??_main+1)^(0+128),w
  6393  06AB  3D2D               	addwfc	(??_main+3)^(0+128),w
  6394  06AC  0087               	movwf	7
  6395  06AD  3F40               	moviw [0]fsr1
  6396  06AE  00AE               	movwf	(??_main+4)^(0+128)
  6397  06AF  3F41               	moviw [1]fsr1
  6398  06B0  00AF               	movwf	((??_main+4)^(0+128)+1)
  6399  06B1  082E               	movf	(??_main+4)^(0+128),w
  6400  06B2  00B0               	movwf	(??_main+6)^(0+128)
  6401  06B3  082F               	movf	(??_main+5)^(0+128),w
  6402  06B4  00B1               	movwf	((??_main+6)^(0+128)+1)
  6403  06B5  3000               	movlw	0
  6404  06B6  1BB1               	btfsc	((??_main+6)^(0+128)+1),7
  6405  06B7  30FF               	movlw	255
  6406  06B8  00B2               	movwf	((??_main+6)^(0+128)+2)
  6407  06B9  00B3               	movwf	((??_main+6)^(0+128)+3)
  6408  06BA  0860               	movf	_delay_time^(0+128),w	;volatile
  6409  06BB  00B4               	movwf	(??_main+10)^(0+128)
  6410  06BC  0861               	movf	(_delay_time+1)^(0+128),w	;volatile
  6411  06BD  00B5               	movwf	((??_main+10)^(0+128)+1)
  6412  06BE  0862               	movf	(_delay_time+2)^(0+128),w	;volatile
  6413  06BF  00B6               	movwf	((??_main+10)^(0+128)+2)
  6414  06C0  0863               	movf	(_delay_time+3)^(0+128),w	;volatile
  6415  06C1  00B7               	movwf	((??_main+10)^(0+128)+3)
  6416  06C2  3001               	movlw	1
  6417  06C3                     u4375:	
  6418  06C3  35B4               	lslf	(??_main+10)^(0+128),f
  6419  06C4  0DB5               	rlf	((??_main+10)^(0+128)+1),f
  6420  06C5  0DB6               	rlf	((??_main+10)^(0+128)+2),f
  6421  06C6  0DB7               	rlf	((??_main+10)^(0+128)+3),f
  6422  06C7  0B89               	decfsz	9,f
  6423  06C8  2EC3               	goto	u4375
  6424  06C9  0837               	movf	(??_main+13)^(0+128),w
  6425  06CA  3A80               	xorlw	128
  6426  06CB  00B8               	movwf	(??_main+14)^(0+128)
  6427  06CC  0833               	movf	(??_main+9)^(0+128),w
  6428  06CD  3A80               	xorlw	128
  6429  06CE  0238               	subwf	(??_main+14)^(0+128),w
  6430  06CF  1D03               	skipz
  6431  06D0  2EDB               	goto	u4383
  6432  06D1  0832               	movf	(??_main+8)^(0+128),w
  6433  06D2  0236               	subwf	(??_main+12)^(0+128),w
  6434  06D3  1D03               	skipz
  6435  06D4  2EDB               	goto	u4383
  6436  06D5  0831               	movf	(??_main+7)^(0+128),w
  6437  06D6  0235               	subwf	(??_main+11)^(0+128),w
  6438  06D7  1D03               	skipz
  6439  06D8  2EDB               	goto	u4383
  6440  06D9  0830               	movf	(??_main+6)^(0+128),w
  6441  06DA  0234               	subwf	(??_main+10)^(0+128),w
  6442  06DB                     u4383:	
  6443  06DB  1C03               	skipc
  6444  06DC  2EEA               	goto	l4304
  6445                           
  6446                           ;main.c: 360: delayfound = 1;
  6447  06DD  3001               	movlw	1
  6448  06DE  0022               	movlb	2	; select bank2
  6449  06DF  00BC               	movwf	_delayfound^(0+256)
  6450  06E0  3000               	movlw	0
  6451  06E1  00BD               	movwf	(_delayfound^(0+256)+1)
  6452                           
  6453                           ;main.c: 361: CCPR1 = delay_counter;
  6454  06E2  083B               	movf	(_delay_counter+1)^(0+256),w
  6455  06E3  0025               	movlb	5	; select bank5
  6456  06E4  0092               	movwf	18	;volatile
  6457  06E5  0022               	movlb	2	; select bank2
  6458  06E6  083A               	movf	_delay_counter^(0+256),w
  6459  06E7  0025               	movlb	5	; select bank5
  6460  06E8  0091               	movwf	17	;volatile
  6461                           
  6462                           ;main.c: 362: } else {
  6463  06E9  2E95               	goto	l4306
  6464  06EA                     l4304:	
  6465                           
  6466                           ;main.c: 363: delay_counter++;
  6467  06EA  3001               	movlw	1
  6468  06EB  0022               	movlb	2	; select bank2
  6469  06EC  07BA               	addwf	_delay_counter^(0+256),f
  6470  06ED  3000               	movlw	0
  6471  06EE  3DBB               	addwfc	(_delay_counter+1)^(0+256),f
  6472  06EF  2E95               	goto	l4306
  6473  06F0                     l4308:	
  6474                           
  6475                           ;main.c: 364: }
  6476                           ;main.c: 365: }
  6477                           ;main.c: 366: mod_delay_time = delay_time / 7.5;
  6478  06F0  0021               	movlb	1	; select bank1
  6479  06F1  0863               	movf	(_delay_time+3)^(0+128),w	;volatile
  6480  06F2  0020               	movlb	0	; select bank0
  6481  06F3  00AB               	movwf	___altoft@c+3
  6482  06F4  0021               	movlb	1	; select bank1
  6483  06F5  0862               	movf	(_delay_time+2)^(0+128),w	;volatile
  6484  06F6  0020               	movlb	0	; select bank0
  6485  06F7  00AA               	movwf	___altoft@c+2
  6486  06F8  0021               	movlb	1	; select bank1
  6487  06F9  0861               	movf	(_delay_time+1)^(0+128),w	;volatile
  6488  06FA  0020               	movlb	0	; select bank0
  6489  06FB  00A9               	movwf	___altoft@c+1
  6490  06FC  0021               	movlb	1	; select bank1
  6491  06FD  0860               	movf	_delay_time^(0+128),w	;volatile
  6492  06FE  0020               	movlb	0	; select bank0
  6493  06FF  00A8               	movwf	___altoft@c
  6494  0700  3192  2261  3182   	fcall	___altoft
  6495  0703  0020               	movlb	0	; select bank0
  6496  0704  0828               	movf	?___altoft,w
  6497  0705  00C8               	movwf	___ftdiv@f1
  6498  0706  0829               	movf	?___altoft+1,w
  6499  0707  00C9               	movwf	___ftdiv@f1+1
  6500  0708  082A               	movf	?___altoft+2,w
  6501  0709  00CA               	movwf	___ftdiv@f1+2
  6502  070A  3000               	movlw	0
  6503  070B  00C5               	movwf	___ftdiv@f2
  6504  070C  30F0               	movlw	240
  6505  070D  00C6               	movwf	___ftdiv@f2+1
  6506  070E  3040               	movlw	64
  6507  070F  00C7               	movwf	___ftdiv@f2+2
  6508  0710  3188  204D  3182   	fcall	___ftdiv
  6509  0713  0020               	movlb	0	; select bank0
  6510  0714  0845               	movf	?___ftdiv,w
  6511  0715  00E7               	movwf	___fttol@f1
  6512  0716  0846               	movf	?___ftdiv+1,w
  6513  0717  00E8               	movwf	___fttol@f1+1
  6514  0718  0847               	movf	?___ftdiv+2,w
  6515  0719  00E9               	movwf	___fttol@f1+2
  6516  071A  3197  2761  3182   	fcall	___fttol
  6517  071D  0020               	movlb	0	; select bank0
  6518  071E  0868               	movf	?___fttol+1,w
  6519  071F  0022               	movlb	2	; select bank2
  6520  0720  00D9               	movwf	(_mod_delay_time+1)^(0+256)
  6521  0721  0020               	movlb	0	; select bank0
  6522  0722  0867               	movf	?___fttol,w
  6523  0723  0022               	movlb	2	; select bank2
  6524  0724  00D8               	movwf	_mod_delay_time^(0+256)
  6525                           
  6526                           ;main.c: 368: delay_time_changed = 0;
  6527  0725  01CC               	clrf	_delay_time_changed^(0+256)
  6528  0726  01CD               	clrf	(_delay_time_changed+1)^(0+256)
  6529  0727  2A2D               	goto	l4160
  6530  0728                     __end_of_main:	
  6531                           
  6532                           	psect	text1
  6533  135D                     __ptext1:	
  6534 ;; *************** function _update_mode *****************
  6535 ;; Defined at:
  6536 ;;		line 58 in file "tactiles.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;		None
  6539 ;; Auto vars:     Size  Location     Type
  6540 ;;		None
  6541 ;; Return value:  Size  Location     Type
  6542 ;;                  1    wreg      void 
  6543 ;; Registers used:
  6544 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6545 ;; Tracked objects:
  6546 ;;		On entry : 0/0
  6547 ;;		On exit  : 0/0
  6548 ;;		Unchanged: 0/0
  6549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6554 ;;Total ram usage:        1 bytes
  6555 ;; Hardware stack levels used:    1
  6556 ;; Hardware stack levels required when called:    2
  6557 ;; This function calls:
  6558 ;;		Nothing
  6559 ;; This function is called by:
  6560 ;;		_main
  6561 ;; This function uses a non-reentrant model
  6562 ;;
  6563                           
  6564                           
  6565                           ;psect for function _update_mode
  6566  135D                     _update_mode:	
  6567                           
  6568                           ;tactiles.c: 63: if (PORTCbits.RC0 == 0) {
  6569                           
  6570                           ;incstack = 0
  6571                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6572  135D  0020               	movlb	0	; select bank0
  6573  135E  180E               	btfsc	14,0	;volatile
  6574  135F  2B9E               	goto	l3734
  6575                           
  6576                           ;tactiles.c: 64: debounce_mode2++;
  6577  1360  3001               	movlw	1
  6578  1361  0022               	movlb	2	; select bank2
  6579  1362  07B8               	addwf	_debounce_mode2^(0+256),f
  6580  1363  3000               	movlw	0
  6581  1364  3DB9               	addwfc	(_debounce_mode2+1)^(0+256),f
  6582                           
  6583                           ;tactiles.c: 65: if (debounce_mode2 > 25) {
  6584  1365  0839               	movf	(_debounce_mode2+1)^(0+256),w
  6585  1366  3A80               	xorlw	128
  6586  1367  0020               	movlb	0	; select bank0
  6587  1368  00A0               	movwf	??_update_mode
  6588  1369  3080               	movlw	128
  6589  136A  0220               	subwf	??_update_mode,w
  6590  136B  1D03               	skipz
  6591  136C  2B70               	goto	u3395
  6592  136D  301A               	movlw	26
  6593  136E  0022               	movlb	2	; select bank2
  6594  136F  0238               	subwf	_debounce_mode2^(0+256),w
  6595  1370                     u3395:	
  6596  1370  1C03               	skipc
  6597  1371  0008               	return
  6598                           
  6599                           ;tactiles.c: 66: debounce_mode2 = 25;
  6600  1372  3019               	movlw	25
  6601  1373  0022               	movlb	2	; select bank2
  6602  1374  00B8               	movwf	_debounce_mode2^(0+256)
  6603  1375  3000               	movlw	0
  6604  1376  00B9               	movwf	(_debounce_mode2^(0+256)+1)
  6605                           
  6606                           ;tactiles.c: 67: mode2_state++;
  6607  1377  3001               	movlw	1
  6608  1378  0020               	movlb	0	; select bank0
  6609  1379  00A0               	movwf	??_update_mode
  6610  137A  0820               	movf	??_update_mode,w
  6611  137B  0021               	movlb	1	; select bank1
  6612  137C  07D6               	addwf	_mode2_state^(0+128),f
  6613                           
  6614                           ;tactiles.c: 68: if (mode2_state > 2) {
  6615  137D  3003               	movlw	3
  6616  137E  0256               	subwf	_mode2_state^(0+128),w
  6617  137F  1C03               	skipc
  6618  1380  2B8E               	goto	l3732
  6619                           
  6620                           ;tactiles.c: 69: mode2_state = 0;
  6621  1381  01D6               	clrf	_mode2_state^(0+128)
  6622                           
  6623                           ;tactiles.c: 70: }
  6624                           ;tactiles.c: 71: switch(mode2_state) {
  6625  1382  2B8E               	goto	l3732
  6626  1383                     l799:	
  6627                           ;tactiles.c: 72: case 0:
  6628                           
  6629                           
  6630                           ;tactiles.c: 73: LATBbits.LATB1 = 0;
  6631  1383  0022               	movlb	2	; select bank2
  6632  1384  108D               	bcf	13,1	;volatile
  6633  1385  2B8C               	goto	L5
  6634  1386                     l801:	
  6635                           ;tactiles.c: 76: case 1:
  6636                           
  6637                           ;tactiles.c: 75: break;
  6638                           
  6639                           ;tactiles.c: 74: LATBbits.LATB0 = 0;
  6640                           
  6641                           
  6642                           ;tactiles.c: 77: LATBbits.LATB1 = 0;
  6643  1386  0022               	movlb	2	; select bank2
  6644  1387  108D               	bcf	13,1	;volatile
  6645                           
  6646                           ;tactiles.c: 78: LATBbits.LATB0 = 1;
  6647  1388  140D               	bsf	13,0	;volatile
  6648                           
  6649                           ;tactiles.c: 79: break;
  6650  1389  2B9A               	goto	l803
  6651  138A                     l802:	
  6652                           ;tactiles.c: 80: case 2:
  6653                           
  6654                           
  6655                           ;tactiles.c: 81: LATBbits.LATB1 = 1;
  6656  138A  0022               	movlb	2	; select bank2
  6657  138B  148D               	bsf	13,1	;volatile
  6658  138C                     L5:	
  6659                           
  6660                           ;tactiles.c: 82: LATBbits.LATB0 = 0;
  6661  138C  100D               	bcf	13,0	;volatile
  6662                           
  6663                           ;tactiles.c: 84: }
  6664                           
  6665                           ;tactiles.c: 83: break;
  6666  138D  2B9A               	goto	l803
  6667  138E                     l3732:	
  6668  138E  0021               	movlb	1	; select bank1
  6669  138F  0856               	movf	_mode2_state^(0+128),w
  6670                           
  6671                           ; Switch size 1, requested type "space"
  6672                           ; Number of cases is 3, Range of values is 0 to 2
  6673                           ; switch strategies available:
  6674                           ; Name         Instructions Cycles
  6675                           ; simple_byte           10     6 (average)
  6676                           ; direct_byte           12     6 (fixed)
  6677                           ; jumptable            260     6 (fixed)
  6678                           ;	Chosen strategy is simple_byte
  6679  1390  3A00               	xorlw	0	; case 0
  6680  1391  1903               	skipnz
  6681  1392  2B83               	goto	l799
  6682  1393  3A01               	xorlw	1	; case 1
  6683  1394  1903               	skipnz
  6684  1395  2B86               	goto	l801
  6685  1396  3A03               	xorlw	3	; case 2
  6686  1397  1903               	skipnz
  6687  1398  2B8A               	goto	l802
  6688  1399  2B9A               	goto	l803
  6689  139A                     l803:	
  6690                           ;tactiles.c: 85: while (PORTCbits.RC0 == 0) {
  6691                           
  6692  139A  0020               	movlb	0	; select bank0
  6693  139B  180E               	btfsc	14,0	;volatile
  6694  139C  0008               	return
  6695  139D  2B9A               	goto	l803
  6696  139E                     l3734:	
  6697                           ;tactiles.c: 86: }
  6698                           ;tactiles.c: 87: }
  6699                           ;tactiles.c: 88: } else {
  6700                           
  6701                           
  6702                           ;tactiles.c: 89: debounce_mode2 = 0;
  6703  139E  0022               	movlb	2	; select bank2
  6704  139F  01B8               	clrf	_debounce_mode2^(0+256)
  6705  13A0  01B9               	clrf	(_debounce_mode2+1)^(0+256)
  6706  13A1  0008               	return
  6707  13A2                     __end_of_update_mode:	
  6708                           
  6709                           	psect	text2
  6710  0BC8                     __ptext2:	
  6711 ;; *************** function _updateSwitchTap *****************
  6712 ;; Defined at:
  6713 ;;		line 48 in file "SwitchTap.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  tapCntDiviso    2   27[BANK0 ] int 
  6718 ;;  iCnt            1   29[BANK0 ] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6729 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6730 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6731 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6732 ;;Total ram usage:        9 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    5
  6735 ;; This function calls:
  6736 ;;		___aldiv
  6737 ;;		_setDoublePressState
  6738 ;;		_setLongTapState
  6739 ;;		_wait_ms
  6740 ;; This function is called by:
  6741 ;;		_main
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _updateSwitchTap
  6747  0BC8                     _updateSwitchTap:	
  6748                           
  6749                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6750                           
  6751                           ;incstack = 0
  6752                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6753  0BC8  0020               	movlb	0	; select bank0
  6754  0BC9  01BD               	clrf	updateSwitchTap@iCnt
  6755                           
  6756                           ;SwitchTap.c: 55: if (PORTEbits.RE0 == 0) {
  6757  0BCA  1810               	btfsc	16,0	;volatile
  6758  0BCB  2BD3               	goto	l3862
  6759                           
  6760                           ;SwitchTap.c: 56: if (switchTap_pressed > 0) {
  6761  0BCC  0021               	movlb	1	; select bank1
  6762  0BCD  085B               	movf	_switchTap_pressed^(0+128),w
  6763  0BCE  1903               	btfsc	3,2
  6764  0BCF  2BDD               	goto	l1108
  6765                           
  6766                           ;SwitchTap.c: 57: switchTap_pressed--;
  6767  0BD0  3001               	movlw	1
  6768  0BD1  02DB               	subwf	_switchTap_pressed^(0+128),f
  6769                           
  6770                           ;SwitchTap.c: 58: }
  6771                           ;SwitchTap.c: 59: } else if (switchTap_pressed < 1) {
  6772  0BD2  2BDD               	goto	l1108
  6773  0BD3                     l3862:	
  6774  0BD3  0021               	movlb	1	; select bank1
  6775  0BD4  085B               	movf	_switchTap_pressed^(0+128),w
  6776  0BD5  1D03               	btfss	3,2
  6777  0BD6  2BDD               	goto	l1108
  6778                           
  6779                           ;SwitchTap.c: 60: switchTap_pressed++;
  6780  0BD7  3001               	movlw	1
  6781  0BD8  0020               	movlb	0	; select bank0
  6782  0BD9  00B5               	movwf	??_updateSwitchTap
  6783  0BDA  0835               	movf	??_updateSwitchTap,w
  6784  0BDB  0021               	movlb	1	; select bank1
  6785  0BDC  07DB               	addwf	_switchTap_pressed^(0+128),f
  6786  0BDD                     l1108:	
  6787                           
  6788                           ;SwitchTap.c: 61: }
  6789                           ;SwitchTap.c: 67: if (switchTap_pressed == 0) {
  6790  0BDD  085B               	movf	_switchTap_pressed^(0+128),w
  6791  0BDE  1D03               	btfss	3,2
  6792  0BDF  2D75               	goto	l3942
  6793                           
  6794                           ;SwitchTap.c: 71: if (tap_timer >= 1563) {
  6795  0BE0  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6796  0BE1  2C54               	goto	l3902
  6797  0BE2  087C               	movf	_tap_timer+3,w	;volatile
  6798  0BE3  1D03               	btfss	3,2
  6799  0BE4  2BEE               	goto	l3868
  6800  0BE5  087B               	movf	_tap_timer+2,w	;volatile
  6801  0BE6  1D03               	btfss	3,2
  6802  0BE7  2BEE               	goto	l3868
  6803  0BE8  301B               	movlw	27
  6804  0BE9  0279               	subwf	_tap_timer,w	;volatile
  6805  0BEA  3006               	movlw	6
  6806  0BEB  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6807  0BEC  1C03               	btfss	3,0
  6808  0BED  2C54               	goto	l3902
  6809  0BEE                     l3868:	
  6810                           
  6811                           ;SwitchTap.c: 74: switchTap_down = 1;
  6812  0BEE  01DA               	clrf	_switchTap_down^(0+128)
  6813  0BEF  0ADA               	incf	_switchTap_down^(0+128),f
  6814                           
  6815                           ;SwitchTap.c: 75: tap_timer = 0;
  6816  0BF0  3000               	movlw	0
  6817  0BF1  00FC               	movwf	_tap_timer+3	;volatile
  6818  0BF2  3000               	movlw	0
  6819  0BF3  00FB               	movwf	_tap_timer+2	;volatile
  6820  0BF4  3000               	movlw	0
  6821  0BF5  00FA               	movwf	_tap_timer+1	;volatile
  6822  0BF6  3000               	movlw	0
  6823  0BF7  00F9               	movwf	_tap_timer	;volatile
  6824                           
  6825                           ;SwitchTap.c: 76: tap_iteration = 1;
  6826  0BF8  3001               	movlw	1
  6827  0BF9  0022               	movlb	2	; select bank2
  6828  0BFA  00DC               	movwf	_tap_iteration^(0+256)
  6829  0BFB  3000               	movlw	0
  6830  0BFC  00DD               	movwf	(_tap_iteration^(0+256)+1)
  6831                           
  6832                           ;SwitchTap.c: 77: tap_total = 0;
  6833  0BFD  3000               	movlw	0
  6834  0BFE  00AB               	movwf	(_tap_total+3)^(0+256)
  6835  0BFF  3000               	movlw	0
  6836  0C00  00AA               	movwf	(_tap_total+2)^(0+256)
  6837  0C01  3000               	movlw	0
  6838  0C02  00A9               	movwf	(_tap_total+1)^(0+256)
  6839  0C03  3000               	movlw	0
  6840  0C04  00A8               	movwf	_tap_total^(0+256)
  6841                           
  6842                           ;SwitchTap.c: 78: delay_time_changed = 0;
  6843  0C05  01CC               	clrf	_delay_time_changed^(0+256)
  6844  0C06  01CD               	clrf	(_delay_time_changed+1)^(0+256)
  6845                           
  6846                           ;SwitchTap.c: 80: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6847  0C07  0020               	movlb	0	; select bank0
  6848  0C08  01BD               	clrf	updateSwitchTap@iCnt
  6849  0C09  0ABD               	incf	updateSwitchTap@iCnt,f
  6850  0C0A                     l3880:	
  6851  0C0A  083D               	movf	updateSwitchTap@iCnt,w
  6852  0C0B  0021               	movlb	1	; select bank1
  6853  0C0C  026D               	subwf	_num_taps^(0+128),w
  6854  0C0D  1C03               	btfss	3,0
  6855  0C0E  2C27               	goto	l3882
  6856                           
  6857                           ;SwitchTap.c: 81: tap_history[iCnt] = 0;
  6858  0C0F  0020               	movlb	0	; select bank0
  6859  0C10  083D               	movf	updateSwitchTap@iCnt,w
  6860  0C11  00B5               	movwf	??_updateSwitchTap
  6861  0C12  3001               	movlw	1
  6862  0C13                     u3685:	
  6863  0C13  35B5               	lslf	??_updateSwitchTap,f
  6864  0C14  3EFF               	addlw	-1
  6865  0C15  1D03               	skipz
  6866  0C16  2C13               	goto	u3685
  6867  0C17  3535               	lslf	??_updateSwitchTap,w
  6868  0C18  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6869  0C19  0086               	movwf	6
  6870  0C1A  3001               	movlw	1	; select bank3/4
  6871  0C1B  0087               	movwf	7
  6872  0C1C  3000               	movlw	0
  6873  0C1D  3FC0               	movwi [0]fsr1
  6874  0C1E  3000               	movlw	0
  6875  0C1F  3FC1               	movwi [1]fsr1
  6876  0C20  3FC2               	movwi [2]fsr1
  6877  0C21  3FC3               	movwi [3]fsr1
  6878  0C22  3001               	movlw	1
  6879  0C23  00B5               	movwf	??_updateSwitchTap
  6880  0C24  0835               	movf	??_updateSwitchTap,w
  6881  0C25  07BD               	addwf	updateSwitchTap@iCnt,f
  6882  0C26  2C0A               	goto	l3880
  6883  0C27                     l3882:	
  6884                           
  6885                           ;SwitchTap.c: 82: }
  6886                           ;SwitchTap.c: 85: if (longTap_start == 0) {
  6887  0C27  0855               	movf	_longTap_start^(0+128),w
  6888  0C28  1D03               	btfss	3,2
  6889  0C29  2C2F               	goto	l3888
  6890                           
  6891                           ;SwitchTap.c: 86: longTap_start = 1;
  6892  0C2A  01D5               	clrf	_longTap_start^(0+128)
  6893  0C2B  0AD5               	incf	_longTap_start^(0+128),f
  6894                           
  6895                           ;SwitchTap.c: 87: longTap_state = 0;
  6896  0C2C  01EC               	clrf	_longTap_state^(0+128)	;volatile
  6897                           
  6898                           ;SwitchTap.c: 88: longTap_timer = 0;
  6899  0C2D  01CD               	clrf	_longTap_timer^(0+128)	;volatile
  6900  0C2E  01CE               	clrf	(_longTap_timer+1)^(0+128)	;volatile
  6901  0C2F                     l3888:	
  6902                           
  6903                           ;SwitchTap.c: 89: }
  6904                           ;SwitchTap.c: 93: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6905  0C2F  0867               	movf	(_long_press_limit+1)^(0+128),w
  6906  0C30  024E               	subwf	(_longTap_timer+1)^(0+128),w	;volatile
  6907  0C31  1D03               	skipz
  6908  0C32  2C35               	goto	u3715
  6909  0C33  0866               	movf	_long_press_limit^(0+128),w
  6910  0C34  024D               	subwf	_longTap_timer^(0+128),w	;volatile
  6911  0C35                     u3715:	
  6912  0C35  1C03               	skipc
  6913  0C36  0008               	return
  6914  0C37  086C               	movf	_longTap_state^(0+128),w	;volatile
  6915  0C38  1D03               	btfss	3,2
  6916  0C39  0008               	return
  6917                           
  6918                           ;SwitchTap.c: 95: longTap_timer = long_press_limit;
  6919  0C3A  0867               	movf	(_long_press_limit+1)^(0+128),w
  6920  0C3B  00CE               	movwf	(_longTap_timer+1)^(0+128)	;volatile
  6921  0C3C  0866               	movf	_long_press_limit^(0+128),w
  6922  0C3D  00CD               	movwf	_longTap_timer^(0+128)	;volatile
  6923                           
  6924                           ;SwitchTap.c: 96: LATBbits.LATB4 = 0;
  6925  0C3E  0022               	movlb	2	; select bank2
  6926  0C3F  120D               	bcf	13,4	;volatile
  6927                           
  6928                           ;SwitchTap.c: 98: if (feedback_start != 1) {
  6929  0C40  0021               	movlb	1	; select bank1
  6930  0C41  0354               	decf	_feedback_start^(0+128),w
  6931  0C42  1903               	btfsc	3,2
  6932  0C43  2C4C               	goto	l3900
  6933                           
  6934                           ;SwitchTap.c: 99: setLongTapState(1);
  6935  0C44  3001               	movlw	1
  6936  0C45  0020               	movlb	0	; select bank0
  6937  0C46  00A0               	movwf	setLongTapState@f_state
  6938  0C47  3000               	movlw	0
  6939  0C48  00A1               	movwf	setLongTapState@f_state+1
  6940  0C49  319F  2759         	fcall	_setLongTapState
  6941                           
  6942                           ;SwitchTap.c: 100: } else {
  6943  0C4B  0008               	return
  6944  0C4C                     l3900:	
  6945                           
  6946                           ;SwitchTap.c: 101: setDoublePressState(1);
  6947  0C4C  3001               	movlw	1
  6948  0C4D  0020               	movlb	0	; select bank0
  6949  0C4E  00AE               	movwf	setDoublePressState@f_state
  6950  0C4F  3000               	movlw	0
  6951  0C50  00AF               	movwf	setDoublePressState@f_state+1
  6952  0C51  3190  2015         	fcall	_setDoublePressState
  6953                           
  6954                           ;SwitchTap.c: 102: }
  6955                           ;SwitchTap.c: 103: }
  6956                           ;SwitchTap.c: 105: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6957  0C53  0008               	return
  6958  0C54                     l3902:	
  6959  0C54  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6960  0C55  2C62               	goto	l3904
  6961  0C56  087C               	movf	_tap_timer+3,w	;volatile
  6962  0C57  1D03               	btfss	3,2
  6963  0C58  0008               	return
  6964  0C59  087B               	movf	_tap_timer+2,w	;volatile
  6965  0C5A  1D03               	btfss	3,2
  6966  0C5B  0008               	return
  6967  0C5C  301B               	movlw	27
  6968  0C5D  0279               	subwf	_tap_timer,w	;volatile
  6969  0C5E  3006               	movlw	6
  6970  0C5F  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6971  0C60  1803               	btfsc	3,0
  6972  0C61  0008               	return
  6973  0C62                     l3904:	
  6974  0C62  0021               	movlb	1	; select bank1
  6975  0C63  086C               	movf	_longTap_state^(0+128),w	;volatile
  6976  0C64  1D03               	btfss	3,2
  6977  0C65  0008               	return
  6978  0C66  035A               	decf	_switchTap_down^(0+128),w
  6979  0C67  1903               	btfsc	3,2
  6980  0C68  0008               	return
  6981                           
  6982                           ;SwitchTap.c: 109: if (tap_timer >= 1172) {
  6983  0C69  1BFC               	btfsc	_tap_timer+3,7	;volatile
  6984  0C6A  2C7F               	goto	l1121
  6985  0C6B  087C               	movf	_tap_timer+3,w	;volatile
  6986  0C6C  1D03               	btfss	3,2
  6987  0C6D  2C77               	goto	l3910
  6988  0C6E  087B               	movf	_tap_timer+2,w	;volatile
  6989  0C6F  1D03               	btfss	3,2
  6990  0C70  2C77               	goto	l3910
  6991  0C71  3094               	movlw	148
  6992  0C72  0279               	subwf	_tap_timer,w	;volatile
  6993  0C73  3004               	movlw	4
  6994  0C74  3B7A               	subwfb	_tap_timer+1,w	;volatile
  6995  0C75  1C03               	btfss	3,0
  6996  0C76  2C7F               	goto	l1121
  6997  0C77                     l3910:	
  6998                           
  6999                           ;SwitchTap.c: 110: tap_timer = 1172;
  7000  0C77  3000               	movlw	0
  7001  0C78  00FC               	movwf	_tap_timer+3	;volatile
  7002  0C79  3000               	movlw	0
  7003  0C7A  00FB               	movwf	_tap_timer+2	;volatile
  7004  0C7B  3004               	movlw	4
  7005  0C7C  00FA               	movwf	_tap_timer+1	;volatile
  7006  0C7D  3094               	movlw	148
  7007  0C7E  00F9               	movwf	_tap_timer	;volatile
  7008  0C7F                     l1121:	
  7009                           
  7010                           ;SwitchTap.c: 111: }
  7011                           ;SwitchTap.c: 112: int tapCntDivisor = num_taps;
  7012  0C7F  086D               	movf	_num_taps^(0+128),w
  7013  0C80  0020               	movlb	0	; select bank0
  7014  0C81  00B5               	movwf	??_updateSwitchTap
  7015  0C82  01B6               	clrf	??_updateSwitchTap+1
  7016  0C83  0835               	movf	??_updateSwitchTap,w
  7017  0C84  00BB               	movwf	updateSwitchTap@tapCntDivisor
  7018  0C85  0836               	movf	??_updateSwitchTap+1,w
  7019  0C86  00BC               	movwf	updateSwitchTap@tapCntDivisor+1
  7020                           
  7021                           ;SwitchTap.c: 113: if (tap_iteration <= num_taps) {
  7022  0C87  0022               	movlb	2	; select bank2
  7023  0C88  085D               	movf	(_tap_iteration+1)^(0+256),w
  7024  0C89  3A80               	xorlw	128
  7025  0C8A  3C80               	sublw	128
  7026  0C8B  1D03               	skipz
  7027  0C8C  2C90               	goto	u3785
  7028  0C8D  085C               	movf	_tap_iteration^(0+256),w
  7029  0C8E  0021               	movlb	1	; select bank1
  7030  0C8F  026D               	subwf	_num_taps^(0+128),w
  7031  0C90                     u3785:	
  7032  0C90  1C03               	skipc
  7033  0C91  2CB9               	goto	l3918
  7034                           
  7035                           ;SwitchTap.c: 114: tap_total += tap_timer;
  7036  0C92  0879               	movf	_tap_timer,w	;volatile
  7037  0C93  0022               	movlb	2	; select bank2
  7038  0C94  07A8               	addwf	_tap_total^(0+256),f
  7039  0C95  087A               	movf	_tap_timer+1,w	;volatile
  7040  0C96  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  7041  0C97  087B               	movf	_tap_timer+2,w	;volatile
  7042  0C98  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  7043  0C99  087C               	movf	_tap_timer+3,w	;volatile
  7044  0C9A  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  7045                           
  7046                           ;SwitchTap.c: 115: tap_history[tap_iteration] = tap_timer;
  7047  0C9B  085C               	movf	_tap_iteration^(0+256),w
  7048  0C9C  0020               	movlb	0	; select bank0
  7049  0C9D  00B5               	movwf	??_updateSwitchTap
  7050  0C9E  3001               	movlw	1
  7051  0C9F                     u3795:	
  7052  0C9F  35B5               	lslf	??_updateSwitchTap,f
  7053  0CA0  3EFF               	addlw	-1
  7054  0CA1  1D03               	skipz
  7055  0CA2  2C9F               	goto	u3795
  7056  0CA3  3535               	lslf	??_updateSwitchTap,w
  7057  0CA4  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7058  0CA5  0086               	movwf	6
  7059  0CA6  3001               	movlw	1	; select bank3/4
  7060  0CA7  0087               	movwf	7
  7061  0CA8  0879               	movf	_tap_timer,w	;volatile
  7062  0CA9  3FC0               	movwi [0]fsr1
  7063  0CAA  087A               	movf	_tap_timer+1,w	;volatile
  7064  0CAB  3FC1               	movwi [1]fsr1
  7065  0CAC  087B               	movf	_tap_timer+2,w	;volatile
  7066  0CAD  3FC2               	movwi [2]fsr1
  7067  0CAE  087C               	movf	_tap_timer+3,w	;volatile
  7068  0CAF  3FC3               	movwi [3]fsr1
  7069                           
  7070                           ;SwitchTap.c: 116: tapCntDivisor = tap_iteration;
  7071  0CB0  0022               	movlb	2	; select bank2
  7072  0CB1  085D               	movf	(_tap_iteration+1)^(0+256),w
  7073  0CB2  0020               	movlb	0	; select bank0
  7074  0CB3  00BC               	movwf	updateSwitchTap@tapCntDivisor+1
  7075  0CB4  0022               	movlb	2	; select bank2
  7076  0CB5  085C               	movf	_tap_iteration^(0+256),w
  7077  0CB6  0020               	movlb	0	; select bank0
  7078  0CB7  00BB               	movwf	updateSwitchTap@tapCntDivisor
  7079                           
  7080                           ;SwitchTap.c: 117: } else {
  7081  0CB8  2D2E               	goto	l3932
  7082  0CB9                     l3918:	
  7083                           
  7084                           ;SwitchTap.c: 118: tap_total = 0;
  7085  0CB9  3000               	movlw	0
  7086  0CBA  0022               	movlb	2	; select bank2
  7087  0CBB  00AB               	movwf	(_tap_total+3)^(0+256)
  7088  0CBC  3000               	movlw	0
  7089  0CBD  00AA               	movwf	(_tap_total+2)^(0+256)
  7090  0CBE  3000               	movlw	0
  7091  0CBF  00A9               	movwf	(_tap_total+1)^(0+256)
  7092  0CC0  3000               	movlw	0
  7093  0CC1  00A8               	movwf	_tap_total^(0+256)
  7094                           
  7095                           ;SwitchTap.c: 119: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  7096  0CC2  0020               	movlb	0	; select bank0
  7097  0CC3  01BD               	clrf	updateSwitchTap@iCnt
  7098  0CC4  0ABD               	incf	updateSwitchTap@iCnt,f
  7099  0CC5                     l3926:	
  7100  0CC5  0021               	movlb	1	; select bank1
  7101  0CC6  086D               	movf	_num_taps^(0+128),w
  7102  0CC7  0020               	movlb	0	; select bank0
  7103  0CC8  023D               	subwf	updateSwitchTap@iCnt,w
  7104  0CC9  1803               	btfsc	3,0
  7105  0CCA  2D0F               	goto	l3928
  7106                           
  7107                           ;SwitchTap.c: 120: tap_history[iCnt] = tap_history[iCnt + 1];
  7108  0CCB  083D               	movf	updateSwitchTap@iCnt,w
  7109  0CCC  00B5               	movwf	??_updateSwitchTap
  7110  0CCD  3001               	movlw	1
  7111  0CCE                     u3805:	
  7112  0CCE  35B5               	lslf	??_updateSwitchTap,f
  7113  0CCF  3EFF               	addlw	-1
  7114  0CD0  1D03               	skipz
  7115  0CD1  2CCE               	goto	u3805
  7116  0CD2  3535               	lslf	??_updateSwitchTap,w
  7117  0CD3  3E04               	addlw	4
  7118  0CD4  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7119  0CD5  0086               	movwf	6
  7120  0CD6  3001               	movlw	1	; select bank3/4
  7121  0CD7  0087               	movwf	7
  7122  0CD8  3F40               	moviw [0]fsr1
  7123  0CD9  00B6               	movwf	??_updateSwitchTap+1
  7124  0CDA  3F41               	moviw [1]fsr1
  7125  0CDB  00B7               	movwf	??_updateSwitchTap+2
  7126  0CDC  3F42               	moviw [2]fsr1
  7127  0CDD  00B8               	movwf	??_updateSwitchTap+3
  7128  0CDE  3F43               	moviw [3]fsr1
  7129  0CDF  00B9               	movwf	??_updateSwitchTap+4
  7130  0CE0  083D               	movf	updateSwitchTap@iCnt,w
  7131  0CE1  00BA               	movwf	??_updateSwitchTap+5
  7132  0CE2  3001               	movlw	1
  7133  0CE3                     u3815:	
  7134  0CE3  35BA               	lslf	??_updateSwitchTap+5,f
  7135  0CE4  3EFF               	addlw	-1
  7136  0CE5  1D03               	skipz
  7137  0CE6  2CE3               	goto	u3815
  7138  0CE7  353A               	lslf	??_updateSwitchTap+5,w
  7139  0CE8  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7140  0CE9  0086               	movwf	6
  7141  0CEA  3001               	movlw	1	; select bank3/4
  7142  0CEB  0087               	movwf	7
  7143  0CEC  0836               	movf	??_updateSwitchTap+1,w
  7144  0CED  3FC0               	movwi [0]fsr1
  7145  0CEE  0837               	movf	??_updateSwitchTap+2,w
  7146  0CEF  3FC1               	movwi [1]fsr1
  7147  0CF0  0838               	movf	??_updateSwitchTap+3,w
  7148  0CF1  3FC2               	movwi [2]fsr1
  7149  0CF2  0839               	movf	??_updateSwitchTap+4,w
  7150  0CF3  3FC3               	movwi [3]fsr1
  7151                           
  7152                           ;SwitchTap.c: 121: tap_total += tap_history[iCnt];
  7153  0CF4  083D               	movf	updateSwitchTap@iCnt,w
  7154  0CF5  00B5               	movwf	??_updateSwitchTap
  7155  0CF6  3001               	movlw	1
  7156  0CF7                     u3825:	
  7157  0CF7  35B5               	lslf	??_updateSwitchTap,f
  7158  0CF8  3EFF               	addlw	-1
  7159  0CF9  1D03               	skipz
  7160  0CFA  2CF7               	goto	u3825
  7161  0CFB  3535               	lslf	??_updateSwitchTap,w
  7162  0CFC  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7163  0CFD  0086               	movwf	6
  7164  0CFE  3001               	movlw	1	; select bank3/4
  7165  0CFF  0087               	movwf	7
  7166  0D00  3F40               	moviw [0]fsr1
  7167  0D01  0022               	movlb	2	; select bank2
  7168  0D02  07A8               	addwf	_tap_total^(0+256),f
  7169  0D03  3F41               	moviw [1]fsr1
  7170  0D04  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  7171  0D05  3F42               	moviw [2]fsr1
  7172  0D06  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  7173  0D07  3F43               	moviw [3]fsr1
  7174  0D08  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  7175  0D09  3001               	movlw	1
  7176  0D0A  0020               	movlb	0	; select bank0
  7177  0D0B  00B5               	movwf	??_updateSwitchTap
  7178  0D0C  0835               	movf	??_updateSwitchTap,w
  7179  0D0D  07BD               	addwf	updateSwitchTap@iCnt,f
  7180  0D0E  2CC5               	goto	l3926
  7181  0D0F                     l3928:	
  7182                           
  7183                           ;SwitchTap.c: 122: }
  7184                           ;SwitchTap.c: 123: tap_history[num_taps] = tap_timer;
  7185  0D0F  0021               	movlb	1	; select bank1
  7186  0D10  086D               	movf	_num_taps^(0+128),w
  7187  0D11  0020               	movlb	0	; select bank0
  7188  0D12  00B5               	movwf	??_updateSwitchTap
  7189  0D13  3001               	movlw	1
  7190  0D14                     u3845:	
  7191  0D14  35B5               	lslf	??_updateSwitchTap,f
  7192  0D15  3EFF               	addlw	-1
  7193  0D16  1D03               	skipz
  7194  0D17  2D14               	goto	u3845
  7195  0D18  3535               	lslf	??_updateSwitchTap,w
  7196  0D19  3ECC               	addlw	(low (_tap_history| (0+256)))& (0+255)
  7197  0D1A  0086               	movwf	6
  7198  0D1B  3001               	movlw	1	; select bank3/4
  7199  0D1C  0087               	movwf	7
  7200  0D1D  0879               	movf	_tap_timer,w	;volatile
  7201  0D1E  3FC0               	movwi [0]fsr1
  7202  0D1F  087A               	movf	_tap_timer+1,w	;volatile
  7203  0D20  3FC1               	movwi [1]fsr1
  7204  0D21  087B               	movf	_tap_timer+2,w	;volatile
  7205  0D22  3FC2               	movwi [2]fsr1
  7206  0D23  087C               	movf	_tap_timer+3,w	;volatile
  7207  0D24  3FC3               	movwi [3]fsr1
  7208                           
  7209                           ;SwitchTap.c: 124: tap_total += tap_timer;
  7210  0D25  0879               	movf	_tap_timer,w	;volatile
  7211  0D26  0022               	movlb	2	; select bank2
  7212  0D27  07A8               	addwf	_tap_total^(0+256),f
  7213  0D28  087A               	movf	_tap_timer+1,w	;volatile
  7214  0D29  3DA9               	addwfc	(_tap_total+1)^(0+256),f
  7215  0D2A  087B               	movf	_tap_timer+2,w	;volatile
  7216  0D2B  3DAA               	addwfc	(_tap_total+2)^(0+256),f
  7217  0D2C  087C               	movf	_tap_timer+3,w	;volatile
  7218  0D2D  3DAB               	addwfc	(_tap_total+3)^(0+256),f
  7219  0D2E                     l3932:	
  7220                           
  7221                           ;SwitchTap.c: 125: }
  7222                           ;SwitchTap.c: 129: baseline_delay_time = tap_total / tapCntDivisor;
  7223  0D2E  0020               	movlb	0	; select bank0
  7224  0D2F  083B               	movf	updateSwitchTap@tapCntDivisor,w
  7225  0D30  00A6               	movwf	___aldiv@divisor
  7226  0D31  083C               	movf	updateSwitchTap@tapCntDivisor+1,w
  7227  0D32  00A7               	movwf	___aldiv@divisor+1
  7228  0D33  0D89               	rlf	9,f
  7229  0D34  3B89               	subwfb	9,f
  7230  0D35  0989               	comf	9,f
  7231  0D36  00A8               	movwf	___aldiv@divisor+2
  7232  0D37  00A9               	movwf	___aldiv@divisor+3
  7233  0D38  0022               	movlb	2	; select bank2
  7234  0D39  082B               	movf	(_tap_total+3)^(0+256),w
  7235  0D3A  0020               	movlb	0	; select bank0
  7236  0D3B  00AD               	movwf	___aldiv@dividend+3
  7237  0D3C  0022               	movlb	2	; select bank2
  7238  0D3D  082A               	movf	(_tap_total+2)^(0+256),w
  7239  0D3E  0020               	movlb	0	; select bank0
  7240  0D3F  00AC               	movwf	___aldiv@dividend+2
  7241  0D40  0022               	movlb	2	; select bank2
  7242  0D41  0829               	movf	(_tap_total+1)^(0+256),w
  7243  0D42  0020               	movlb	0	; select bank0
  7244  0D43  00AB               	movwf	___aldiv@dividend+1
  7245  0D44  0022               	movlb	2	; select bank2
  7246  0D45  0828               	movf	_tap_total^(0+256),w
  7247  0D46  0020               	movlb	0	; select bank0
  7248  0D47  00AA               	movwf	___aldiv@dividend
  7249  0D48  3196  2654  318B   	fcall	___aldiv
  7250  0D4B  0020               	movlb	0	; select bank0
  7251  0D4C  0829               	movf	?___aldiv+3,w
  7252  0D4D  0021               	movlb	1	; select bank1
  7253  0D4E  00DF               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  7254  0D4F  0020               	movlb	0	; select bank0
  7255  0D50  0828               	movf	?___aldiv+2,w
  7256  0D51  0021               	movlb	1	; select bank1
  7257  0D52  00DE               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  7258  0D53  0020               	movlb	0	; select bank0
  7259  0D54  0827               	movf	?___aldiv+1,w
  7260  0D55  0021               	movlb	1	; select bank1
  7261  0D56  00DD               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  7262  0D57  0020               	movlb	0	; select bank0
  7263  0D58  0826               	movf	?___aldiv,w
  7264  0D59  0021               	movlb	1	; select bank1
  7265  0D5A  00DC               	movwf	_baseline_delay_time^(0+128)	;volatile
  7266                           
  7267                           ;SwitchTap.c: 130: delay_time_changed = 1;
  7268  0D5B  3001               	movlw	1
  7269  0D5C  0022               	movlb	2	; select bank2
  7270  0D5D  00CC               	movwf	_delay_time_changed^(0+256)
  7271  0D5E  3000               	movlw	0
  7272  0D5F  00CD               	movwf	(_delay_time_changed^(0+256)+1)
  7273                           
  7274                           ;SwitchTap.c: 132: tap_timer = 0;
  7275  0D60  3000               	movlw	0
  7276  0D61  00FC               	movwf	_tap_timer+3	;volatile
  7277  0D62  3000               	movlw	0
  7278  0D63  00FB               	movwf	_tap_timer+2	;volatile
  7279  0D64  3000               	movlw	0
  7280  0D65  00FA               	movwf	_tap_timer+1	;volatile
  7281  0D66  3000               	movlw	0
  7282  0D67  00F9               	movwf	_tap_timer	;volatile
  7283                           
  7284                           ;SwitchTap.c: 133: wait_ms(20/2);
  7285  0D68  300A               	movlw	10
  7286  0D69  0020               	movlb	0	; select bank0
  7287  0D6A  00AC               	movwf	wait_ms@time
  7288  0D6B  3000               	movlw	0
  7289  0D6C  00AD               	movwf	wait_ms@time+1
  7290  0D6D  3190  20A2         	fcall	_wait_ms
  7291                           
  7292                           ;SwitchTap.c: 137: tap_iteration++;
  7293  0D6F  3001               	movlw	1
  7294  0D70  0022               	movlb	2	; select bank2
  7295  0D71  07DC               	addwf	_tap_iteration^(0+256),f
  7296  0D72  3000               	movlw	0
  7297  0D73  3DDD               	addwfc	(_tap_iteration+1)^(0+256),f
  7298                           
  7299                           ;SwitchTap.c: 139: }
  7300                           ;SwitchTap.c: 141: } else if (switchTap_pressed >= 1) {
  7301  0D74  0008               	return
  7302  0D75                     l3942:	
  7303  0D75  0021               	movlb	1	; select bank1
  7304  0D76  085B               	movf	_switchTap_pressed^(0+128),w
  7305  0D77  1903               	btfsc	3,2
  7306  0D78  0008               	return
  7307                           
  7308                           ;SwitchTap.c: 142: switchTap_down = 0;
  7309  0D79  01DA               	clrf	_switchTap_down^(0+128)
  7310                           
  7311                           ;SwitchTap.c: 143: switchTap_state = 0;
  7312  0D7A  01EF               	clrf	_switchTap_state^(0+128)
  7313                           
  7314                           ;SwitchTap.c: 149: setLongTapState(0);
  7315  0D7B  3000               	movlw	0
  7316  0D7C  0020               	movlb	0	; select bank0
  7317  0D7D  00A0               	movwf	setLongTapState@f_state
  7318  0D7E  00A1               	movwf	setLongTapState@f_state+1
  7319  0D7F  319F  2759         	fcall	_setLongTapState
  7320                           
  7321                           ;SwitchTap.c: 151: longTap_timer = 0;
  7322  0D81  0021               	movlb	1	; select bank1
  7323  0D82  01CD               	clrf	_longTap_timer^(0+128)	;volatile
  7324  0D83  01CE               	clrf	(_longTap_timer+1)^(0+128)	;volatile
  7325                           
  7326                           ;SwitchTap.c: 152: longTap_start = 0;
  7327  0D84  01D5               	clrf	_longTap_start^(0+128)
  7328                           
  7329                           ;SwitchTap.c: 154: switchTap_pressed = 1;
  7330  0D85  01DB               	clrf	_switchTap_pressed^(0+128)
  7331  0D86  0ADB               	incf	_switchTap_pressed^(0+128),f
  7332  0D87  0008               	return
  7333  0D88                     __end_of_updateSwitchTap:	
  7334                           
  7335                           	psect	text3
  7336  1F59                     __ptext3:	
  7337 ;; *************** function _setLongTapState *****************
  7338 ;; Defined at:
  7339 ;;		line 169 in file "SwitchTap.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  f_state         2    0[BANK0 ] int 
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      void 
  7346 ;; Registers used:
  7347 ;;		wreg, status,0
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7355 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7357 ;;Total ram usage:        4 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    2
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_updateSwitchTap
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           
  7368                           ;psect for function _setLongTapState
  7369  1F59                     _setLongTapState:	
  7370                           
  7371                           ;SwitchTap.c: 170: if (longTap_state == f_state) {return;}
  7372                           
  7373                           ;incstack = 0
  7374                           ; Regs used in _setLongTapState: [wreg+status,0]
  7375  1F59  0021               	movlb	1	; select bank1
  7376  1F5A  086C               	movf	_longTap_state^(0+128),w	;volatile
  7377  1F5B  0020               	movlb	0	; select bank0
  7378  1F5C  00A2               	movwf	??_setLongTapState
  7379  1F5D  01A3               	clrf	??_setLongTapState+1
  7380  1F5E  0821               	movf	setLongTapState@f_state+1,w
  7381  1F5F  0623               	xorwf	??_setLongTapState+1,w
  7382  1F60  1D03               	skipz
  7383  1F61  2F64               	goto	u2575
  7384  1F62  0820               	movf	setLongTapState@f_state,w
  7385  1F63  0622               	xorwf	??_setLongTapState,w
  7386  1F64                     u2575:	
  7387  1F64  1903               	btfsc	3,2
  7388  1F65  0008               	return
  7389                           
  7390                           ;SwitchTap.c: 171: longTap_state = f_state;
  7391  1F66  0820               	movf	setLongTapState@f_state,w
  7392  1F67  00A2               	movwf	??_setLongTapState
  7393  1F68  0822               	movf	??_setLongTapState,w
  7394  1F69  0021               	movlb	1	; select bank1
  7395  1F6A  00EC               	movwf	_longTap_state^(0+128)	;volatile
  7396                           
  7397                           ;SwitchTap.c: 172: LATBbits.LATB5 = f_state;
  7398  1F6B  0020               	movlb	0	; select bank0
  7399  1F6C  0C20               	rrf	setLongTapState@f_state,w
  7400  1F6D  0022               	movlb	2	; select bank2
  7401  1F6E  1C03               	skipc
  7402  1F6F  128D               	bcf	13,5	;volatile
  7403  1F70  1803               	skipnc
  7404  1F71  168D               	bsf	13,5	;volatile
  7405  1F72  0008               	return
  7406  1F73                     __end_of_setLongTapState:	
  7407                           
  7408                           	psect	text4
  7409  08F6                     __ptext4:	
  7410 ;; *************** function _updateSwitchBypass *****************
  7411 ;; Defined at:
  7412 ;;		line 34 in file "SwitchBypass.c"
  7413 ;; Parameters:    Size  Location     Type
  7414 ;;		None
  7415 ;; Auto vars:     Size  Location     Type
  7416 ;;		None
  7417 ;; Return value:  Size  Location     Type
  7418 ;;                  1    wreg      void 
  7419 ;; Registers used:
  7420 ;;		wreg, status,2, status,0, pclath, cstack
  7421 ;; Tracked objects:
  7422 ;;		On entry : 0/0
  7423 ;;		On exit  : 0/0
  7424 ;;		Unchanged: 0/0
  7425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7428 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7429 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7430 ;;Total ram usage:        2 bytes
  7431 ;; Hardware stack levels used:    1
  7432 ;; Hardware stack levels required when called:    5
  7433 ;; This function calls:
  7434 ;;		_setDoublePressState
  7435 ;;		_setFeedbackState
  7436 ;;		_setSwitchBypassState
  7437 ;; This function is called by:
  7438 ;;		_main
  7439 ;; This function uses a non-reentrant model
  7440 ;;
  7441                           
  7442                           
  7443                           ;psect for function _updateSwitchBypass
  7444  08F6                     _updateSwitchBypass:	
  7445                           
  7446                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7447                           
  7448                           ;incstack = 0
  7449                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7450  08F6  0020               	movlb	0	; select bank0
  7451  08F7  1890               	btfsc	16,1	;volatile
  7452  08F8  290C               	goto	l3774
  7453                           
  7454                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7455  08F9  0021               	movlb	1	; select bank1
  7456  08FA  0852               	movf	(_switchBypass_pressed+1)^(0+128),w
  7457  08FB  3A80               	xorlw	128
  7458  08FC  0020               	movlb	0	; select bank0
  7459  08FD  00B2               	movwf	??_updateSwitchBypass
  7460  08FE  3080               	movlw	128
  7461  08FF  0232               	subwf	??_updateSwitchBypass,w
  7462  0900  1D03               	skipz
  7463  0901  2905               	goto	u3435
  7464  0902  3001               	movlw	1
  7465  0903  0021               	movlb	1	; select bank1
  7466  0904  0251               	subwf	_switchBypass_pressed^(0+128),w
  7467  0905                     u3435:	
  7468  0905  1C03               	skipc
  7469  0906  291F               	goto	l3778
  7470                           
  7471                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7472  0907  30FF               	movlw	255
  7473  0908  0021               	movlb	1	; select bank1
  7474  0909  07D1               	addwf	_switchBypass_pressed^(0+128),f
  7475  090A  30FF               	movlw	255
  7476  090B  291E               	goto	L6
  7477  090C                     l3774:	
  7478                           ;SwitchBypass.c: 44: }
  7479                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 1) {
  7480                           
  7481  090C  0021               	movlb	1	; select bank1
  7482  090D  0852               	movf	(_switchBypass_pressed+1)^(0+128),w
  7483  090E  3A80               	xorlw	128
  7484  090F  0020               	movlb	0	; select bank0
  7485  0910  00B2               	movwf	??_updateSwitchBypass
  7486  0911  3080               	movlw	128
  7487  0912  0232               	subwf	??_updateSwitchBypass,w
  7488  0913  1D03               	skipz
  7489  0914  2918               	goto	u3445
  7490  0915  3001               	movlw	1
  7491  0916  0021               	movlb	1	; select bank1
  7492  0917  0251               	subwf	_switchBypass_pressed^(0+128),w
  7493  0918                     u3445:	
  7494  0918  1803               	skipnc
  7495  0919  291F               	goto	l3778
  7496                           
  7497                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7498  091A  3001               	movlw	1
  7499  091B  0021               	movlb	1	; select bank1
  7500  091C  07D1               	addwf	_switchBypass_pressed^(0+128),f
  7501  091D  3000               	movlw	0
  7502  091E                     L6:	
  7503  091E  3DD2               	addwfc	(_switchBypass_pressed+1)^(0+128),f
  7504  091F                     l3778:	
  7505                           
  7506                           ;SwitchBypass.c: 47: }
  7507                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7508  091F  0021               	movlb	1	; select bank1
  7509  0920  0851               	movf	_switchBypass_pressed^(0+128),w
  7510  0921  0452               	iorwf	(_switchBypass_pressed+1)^(0+128),w
  7511  0922  1D03               	btfss	3,2
  7512  0923  297C               	goto	l3818
  7513                           
  7514                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7515  0924  0854               	movf	_feedback_start^(0+128),w
  7516  0925  1D03               	btfss	3,2
  7517  0926  292B               	goto	l3786
  7518                           
  7519                           ;SwitchBypass.c: 57: feedback_start = 1;
  7520  0927  01D4               	clrf	_feedback_start^(0+128)
  7521  0928  0AD4               	incf	_feedback_start^(0+128),f
  7522                           
  7523                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7524  0929  01C7               	clrf	_feedback_timer^(0+128)	;volatile
  7525  092A  01C8               	clrf	(_feedback_timer+1)^(0+128)	;volatile
  7526  092B                     l3786:	
  7527                           
  7528                           ;SwitchBypass.c: 59: }
  7529                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7530  092B  0867               	movf	(_long_press_limit+1)^(0+128),w
  7531  092C  0248               	subwf	(_feedback_timer+1)^(0+128),w	;volatile
  7532  092D  1D03               	skipz
  7533  092E  2931               	goto	u3475
  7534  092F  0866               	movf	_long_press_limit^(0+128),w
  7535  0930  0247               	subwf	_feedback_timer^(0+128),w	;volatile
  7536  0931                     u3475:	
  7537  0931  1C03               	skipc
  7538  0932  2951               	goto	l3800
  7539  0933  0020               	movlb	0	; select bank0
  7540  0934  086F               	movf	_feedback_state,w	;volatile
  7541  0935  1D03               	btfss	3,2
  7542  0936  2951               	goto	l3800
  7543  0937  087D               	movf	_doubleTap_state,w	;volatile
  7544  0938  1D03               	btfss	3,2
  7545  0939  2951               	goto	l3800
  7546                           
  7547                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7548  093A  0022               	movlb	2	; select bank2
  7549  093B  110D               	bcf	13,2	;volatile
  7550                           
  7551                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7552  093C  0021               	movlb	1	; select bank1
  7553  093D  0355               	decf	_longTap_start^(0+128),w
  7554  093E  1903               	btfsc	3,2
  7555  093F  2949               	goto	l3798
  7556                           
  7557                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7558  0940  3001               	movlw	1
  7559  0941  0020               	movlb	0	; select bank0
  7560  0942  00A0               	movwf	setFeedbackState@f_state
  7561  0943  3000               	movlw	0
  7562  0944  00A1               	movwf	setFeedbackState@f_state+1
  7563  0945  319F  2729  3188   	fcall	_setFeedbackState
  7564                           
  7565                           ;SwitchBypass.c: 67: } else {
  7566  0948  2951               	goto	l3800
  7567  0949                     l3798:	
  7568                           
  7569                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7570  0949  3001               	movlw	1
  7571  094A  0020               	movlb	0	; select bank0
  7572  094B  00AE               	movwf	setDoublePressState@f_state
  7573  094C  3000               	movlw	0
  7574  094D  00AF               	movwf	setDoublePressState@f_state+1
  7575  094E  3190  2015  3188   	fcall	_setDoublePressState
  7576  0951                     l3800:	
  7577                           
  7578                           ;SwitchBypass.c: 69: }
  7579                           ;SwitchBypass.c: 70: }
  7580                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7581  0951  087D               	movf	_doubleTap_state,w	;volatile
  7582  0952  1D03               	btfss	3,2
  7583  0953  2978               	goto	l992
  7584  0954  0020               	movlb	0	; select bank0
  7585  0955  086F               	movf	_feedback_state,w	;volatile
  7586  0956  1D03               	btfss	3,2
  7587  0957  2978               	goto	l992
  7588                           
  7589                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7590  0958  0021               	movlb	1	; select bank1
  7591  0959  036E               	decf	_switchBypass_state^(0+128),w
  7592  095A  1D03               	btfss	3,2
  7593  095B  296A               	goto	l3812
  7594                           
  7595                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7596  095C  0022               	movlb	2	; select bank2
  7597  095D  035A               	decf	_switchBypass_up^(0+256),w
  7598  095E  045B               	iorwf	(_switchBypass_up+1)^(0+256),w
  7599  095F  1D03               	btfss	3,2
  7600  0960  2978               	goto	l992
  7601                           
  7602                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7603  0961  0021               	movlb	1	; select bank1
  7604  0962  01EB               	clrf	_currentBypassState^(0+128)
  7605  0963  0AEB               	incf	_currentBypassState^(0+128),f
  7606                           
  7607                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7608  0964  3001               	movlw	1
  7609  0965  0022               	movlb	2	; select bank2
  7610  0966  00C6               	movwf	_switchBypass_toggle^(0+256)
  7611  0967  3000               	movlw	0
  7612  0968  00C7               	movwf	(_switchBypass_toggle^(0+256)+1)
  7613                           
  7614                           ;SwitchBypass.c: 78: }
  7615                           ;SwitchBypass.c: 93: } else {
  7616  0969  2978               	goto	l992
  7617  096A                     l3812:	
  7618                           
  7619                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7620  096A  0021               	movlb	1	; select bank1
  7621  096B  0353               	decf	_bypass_turning_on^(0+128),w
  7622  096C  1903               	btfsc	3,2
  7623  096D  2978               	goto	l992
  7624                           
  7625                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7626  096E  01EB               	clrf	_currentBypassState^(0+128)
  7627                           
  7628                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7629  096F  01D3               	clrf	_bypass_turning_on^(0+128)
  7630  0970  0AD3               	incf	_bypass_turning_on^(0+128),f
  7631                           
  7632                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7633  0971  0022               	movlb	2	; select bank2
  7634  0972  01C6               	clrf	_switchBypass_toggle^(0+256)
  7635  0973  01C7               	clrf	(_switchBypass_toggle+1)^(0+256)
  7636                           
  7637                           ;SwitchBypass.c: 101: feedback_state = 0;
  7638  0974  0020               	movlb	0	; select bank0
  7639  0975  01EF               	clrf	_feedback_state	;volatile
  7640                           
  7641                           ;SwitchBypass.c: 102: feedback_start = 0;
  7642  0976  0021               	movlb	1	; select bank1
  7643  0977  01D4               	clrf	_feedback_start^(0+128)
  7644  0978                     l992:	
  7645                           
  7646                           ;SwitchBypass.c: 103: }
  7647                           ;SwitchBypass.c: 104: }
  7648                           ;SwitchBypass.c: 106: }
  7649                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7650  0978  0022               	movlb	2	; select bank2
  7651  0979  01DA               	clrf	_switchBypass_up^(0+256)
  7652  097A  01DB               	clrf	(_switchBypass_up+1)^(0+256)
  7653                           
  7654                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 1) {
  7655  097B  0008               	return
  7656  097C                     l3818:	
  7657  097C  0021               	movlb	1	; select bank1
  7658  097D  0852               	movf	(_switchBypass_pressed+1)^(0+128),w
  7659  097E  3A80               	xorlw	128
  7660  097F  0020               	movlb	0	; select bank0
  7661  0980  00B2               	movwf	??_updateSwitchBypass
  7662  0981  3080               	movlw	128
  7663  0982  0232               	subwf	??_updateSwitchBypass,w
  7664  0983  1D03               	skipz
  7665  0984  2988               	goto	u3565
  7666  0985  3001               	movlw	1
  7667  0986  0021               	movlb	1	; select bank1
  7668  0987  0251               	subwf	_switchBypass_pressed^(0+128),w
  7669  0988                     u3565:	
  7670  0988  1C03               	skipc
  7671  0989  0008               	return
  7672                           
  7673                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7674  098A  037D               	decf	_doubleTap_state,w	;volatile
  7675  098B  1D03               	btfss	3,2
  7676  098C  2996               	goto	l3824
  7677                           
  7678                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7679  098D  0021               	movlb	1	; select bank1
  7680  098E  086B               	movf	_currentBypassState^(0+128),w
  7681  098F  0020               	movlb	0	; select bank0
  7682  0990  00B2               	movwf	??_updateSwitchBypass
  7683  0991  01B3               	clrf	??_updateSwitchBypass+1
  7684  0992  0832               	movf	??_updateSwitchBypass,w
  7685  0993  00AE               	movwf	setSwitchBypassState@f_state
  7686  0994  0833               	movf	??_updateSwitchBypass+1,w
  7687  0995  29B1               	goto	L7
  7688  0996                     l3824:	
  7689                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7690                           
  7691  0996  0021               	movlb	1	; select bank1
  7692  0997  0353               	decf	_bypass_turning_on^(0+128),w
  7693  0998  1903               	btfsc	3,2
  7694  0999  299E               	goto	l3828
  7695  099A  0020               	movlb	0	; select bank0
  7696  099B  036F               	decf	_feedback_state,w	;volatile
  7697  099C  1D03               	btfss	3,2
  7698  099D  29A3               	goto	l3830
  7699  099E                     l3828:	
  7700                           
  7701                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7702  099E  3001               	movlw	1
  7703  099F  0020               	movlb	0	; select bank0
  7704  09A0  00AE               	movwf	setSwitchBypassState@f_state
  7705  09A1  3000               	movlw	0
  7706  09A2  29B1               	goto	L7
  7707  09A3                     l3830:	
  7708                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7709                           
  7710  09A3  0022               	movlb	2	; select bank2
  7711  09A4  0346               	decf	_switchBypass_toggle^(0+256),w
  7712  09A5  0447               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  7713  09A6  1D03               	btfss	3,2
  7714  09A7  29B5               	goto	l3838
  7715  09A8  0020               	movlb	0	; select bank0
  7716  09A9  086F               	movf	_feedback_state,w	;volatile
  7717  09AA  1D03               	btfss	3,2
  7718  09AB  29B5               	goto	l3838
  7719  09AC  087D               	movf	_doubleTap_state,w	;volatile
  7720  09AD  1D03               	btfss	3,2
  7721  09AE  29B5               	goto	l3838
  7722                           
  7723                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7724  09AF  3000               	movlw	0
  7725  09B0  00AE               	movwf	setSwitchBypassState@f_state
  7726  09B1                     L7:	
  7727  09B1  00AF               	movwf	setSwitchBypassState@f_state+1
  7728  09B2  3188  2003  3188   	fcall	_setSwitchBypassState
  7729  09B5                     l3838:	
  7730                           
  7731                           ;SwitchBypass.c: 115: }
  7732                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7733  09B5  0021               	movlb	1	; select bank1
  7734  09B6  0C6E               	rrf	_switchBypass_state^(0+128),w
  7735  09B7  0022               	movlb	2	; select bank2
  7736  09B8  1C03               	skipc
  7737  09B9  110D               	bcf	13,2	;volatile
  7738  09BA  1803               	skipnc
  7739  09BB  150D               	bsf	13,2	;volatile
  7740                           
  7741                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7742  09BC  3000               	movlw	0
  7743  09BD  0020               	movlb	0	; select bank0
  7744  09BE  00A0               	movwf	setFeedbackState@f_state
  7745  09BF  00A1               	movwf	setFeedbackState@f_state+1
  7746  09C0  319F  2729  3188   	fcall	_setFeedbackState
  7747                           
  7748                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7749  09C3  3000               	movlw	0
  7750  09C4  0020               	movlb	0	; select bank0
  7751  09C5  00AE               	movwf	setDoublePressState@f_state
  7752  09C6  00AF               	movwf	setDoublePressState@f_state+1
  7753  09C7  3190  2015         	fcall	_setDoublePressState
  7754                           
  7755                           ;SwitchBypass.c: 122: feedback_start = 0;
  7756  09C9  0021               	movlb	1	; select bank1
  7757  09CA  01D4               	clrf	_feedback_start^(0+128)
  7758                           
  7759                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7760  09CB  01D3               	clrf	_bypass_turning_on^(0+128)
  7761                           
  7762                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7763  09CC  0022               	movlb	2	; select bank2
  7764  09CD  01C6               	clrf	_switchBypass_toggle^(0+256)
  7765  09CE  01C7               	clrf	(_switchBypass_toggle+1)^(0+256)
  7766                           
  7767                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7768  09CF  3001               	movlw	1
  7769  09D0  00DA               	movwf	_switchBypass_up^(0+256)
  7770  09D1  3000               	movlw	0
  7771  09D2  00DB               	movwf	(_switchBypass_up^(0+256)+1)
  7772                           
  7773                           ;SwitchBypass.c: 127: switchBypass_pressed = 1;
  7774  09D3  3001               	movlw	1
  7775  09D4  0021               	movlb	1	; select bank1
  7776  09D5  00D1               	movwf	_switchBypass_pressed^(0+128)
  7777  09D6  3000               	movlw	0
  7778  09D7  00D2               	movwf	(_switchBypass_pressed^(0+128)+1)
  7779  09D8  0008               	return
  7780  09D9                     __end_of_updateSwitchBypass:	
  7781                           
  7782                           	psect	text5
  7783  1F29                     __ptext5:	
  7784 ;; *************** function _setFeedbackState *****************
  7785 ;; Defined at:
  7786 ;;		line 151 in file "SwitchBypass.c"
  7787 ;; Parameters:    Size  Location     Type
  7788 ;;  f_state         2    0[BANK0 ] int 
  7789 ;; Auto vars:     Size  Location     Type
  7790 ;;		None
  7791 ;; Return value:  Size  Location     Type
  7792 ;;                  1    wreg      void 
  7793 ;; Registers used:
  7794 ;;		wreg, status,0
  7795 ;; Tracked objects:
  7796 ;;		On entry : 0/0
  7797 ;;		On exit  : 0/0
  7798 ;;		Unchanged: 0/0
  7799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7800 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7802 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7803 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7804 ;;Total ram usage:        4 bytes
  7805 ;; Hardware stack levels used:    1
  7806 ;; Hardware stack levels required when called:    2
  7807 ;; This function calls:
  7808 ;;		Nothing
  7809 ;; This function is called by:
  7810 ;;		_updateSwitchBypass
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           
  7815                           ;psect for function _setFeedbackState
  7816  1F29                     _setFeedbackState:	
  7817                           
  7818                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7819                           
  7820                           ;incstack = 0
  7821                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7822  1F29  0020               	movlb	0	; select bank0
  7823  1F2A  086F               	movf	_feedback_state,w	;volatile
  7824  1F2B  00A2               	movwf	??_setFeedbackState
  7825  1F2C  01A3               	clrf	??_setFeedbackState+1
  7826  1F2D  0821               	movf	setFeedbackState@f_state+1,w
  7827  1F2E  0623               	xorwf	??_setFeedbackState+1,w
  7828  1F2F  1D03               	skipz
  7829  1F30  2F33               	goto	u2545
  7830  1F31  0820               	movf	setFeedbackState@f_state,w
  7831  1F32  0622               	xorwf	??_setFeedbackState,w
  7832  1F33                     u2545:	
  7833  1F33  1903               	btfsc	3,2
  7834  1F34  0008               	return
  7835                           
  7836                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7837  1F35  0820               	movf	setFeedbackState@f_state,w
  7838  1F36  00A2               	movwf	??_setFeedbackState
  7839  1F37  0822               	movf	??_setFeedbackState,w
  7840  1F38  00EF               	movwf	_feedback_state	;volatile
  7841                           
  7842                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7843  1F39  0C20               	rrf	setFeedbackState@f_state,w
  7844  1F3A  0022               	movlb	2	; select bank2
  7845  1F3B  1C03               	skipc
  7846  1F3C  118D               	bcf	13,3	;volatile
  7847  1F3D  1803               	skipnc
  7848  1F3E  158D               	bsf	13,3	;volatile
  7849  1F3F  0008               	return
  7850  1F40                     __end_of_setFeedbackState:	
  7851                           
  7852                           	psect	text6
  7853  1015                     __ptext6:	
  7854 ;; *************** function _setDoublePressState *****************
  7855 ;; Defined at:
  7856 ;;		line 20 in file "preset_programming.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  f_state         2   14[BANK0 ] int 
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;		None
  7861 ;; Return value:  Size  Location     Type
  7862 ;;                  1    wreg      void 
  7863 ;; Registers used:
  7864 ;;		wreg, status,2, status,0, pclath, cstack
  7865 ;; Tracked objects:
  7866 ;;		On entry : 0/0
  7867 ;;		On exit  : 0/0
  7868 ;;		Unchanged: 0/0
  7869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7870 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7872 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7873 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7874 ;;Total ram usage:        4 bytes
  7875 ;; Hardware stack levels used:    1
  7876 ;; Hardware stack levels required when called:    4
  7877 ;; This function calls:
  7878 ;;		_wait_ms
  7879 ;; This function is called by:
  7880 ;;		_updateSwitchBypass
  7881 ;;		_updateSwitchTap
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _setDoublePressState
  7887  1015                     _setDoublePressState:	
  7888                           
  7889                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  7890                           
  7891                           ;incstack = 0
  7892                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  7893  1015  087D               	movf	_doubleTap_state,w	;volatile
  7894  1016  0020               	movlb	0	; select bank0
  7895  1017  00B0               	movwf	??_setDoublePressState
  7896  1018  01B1               	clrf	??_setDoublePressState+1
  7897  1019  082F               	movf	setDoublePressState@f_state+1,w
  7898  101A  0631               	xorwf	??_setDoublePressState+1,w
  7899  101B  1D03               	skipz
  7900  101C  281F               	goto	u2555
  7901  101D  082E               	movf	setDoublePressState@f_state,w
  7902  101E  0630               	xorwf	??_setDoublePressState,w
  7903  101F                     u2555:	
  7904  101F  1903               	btfsc	3,2
  7905  1020  0008               	return
  7906                           
  7907                           ;preset_programming.c: 22: doubleTap_state = f_state;
  7908  1021  082E               	movf	setDoublePressState@f_state,w
  7909  1022  00B0               	movwf	??_setDoublePressState
  7910  1023  0830               	movf	??_setDoublePressState,w
  7911  1024  00FD               	movwf	_doubleTap_state	;volatile
  7912                           
  7913                           ;preset_programming.c: 23: if (f_state == 1) {
  7914  1025  032E               	decf	setDoublePressState@f_state,w
  7915  1026  042F               	iorwf	setDoublePressState@f_state+1,w
  7916  1027  1D03               	btfss	3,2
  7917  1028  282C               	goto	l3352
  7918                           
  7919                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  7920  1029  0022               	movlb	2	; select bank2
  7921  102A  120D               	bcf	13,4	;volatile
  7922                           
  7923                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  7924  102B  110D               	bcf	13,2	;volatile
  7925  102C                     l3352:	
  7926                           
  7927                           ;preset_programming.c: 26: }
  7928                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  7929  102C  0020               	movlb	0	; select bank0
  7930  102D  0C2E               	rrf	setDoublePressState@f_state,w
  7931  102E  0022               	movlb	2	; select bank2
  7932  102F  1C03               	skipc
  7933  1030  108D               	bcf	13,1	;volatile
  7934  1031  1803               	skipnc
  7935  1032  148D               	bsf	13,1	;volatile
  7936                           
  7937                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  7938  1033  0020               	movlb	0	; select bank0
  7939  1034  0C2E               	rrf	setDoublePressState@f_state,w
  7940  1035  0022               	movlb	2	; select bank2
  7941  1036  1C03               	skipc
  7942  1037  100D               	bcf	13,0	;volatile
  7943  1038  1803               	skipnc
  7944  1039  140D               	bsf	13,0	;volatile
  7945                           
  7946                           ;preset_programming.c: 31: wait_ms(20);
  7947  103A  3014               	movlw	20
  7948  103B  0020               	movlb	0	; select bank0
  7949  103C  00AC               	movwf	wait_ms@time
  7950  103D  3000               	movlw	0
  7951  103E  00AD               	movwf	wait_ms@time+1
  7952  103F  3190  20A2         	fcall	_wait_ms
  7953  1041  0008               	return
  7954  1042                     __end_of_setDoublePressState:	
  7955                           
  7956                           	psect	text7
  7957  1FD5                     __ptext7:	
  7958 ;; *************** function _showBootSequence *****************
  7959 ;; Defined at:
  7960 ;;		line 86 in file "LEDs.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;		None
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;		None
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7977 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7978 ;;Total ram usage:        1 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    5
  7981 ;; This function calls:
  7982 ;;		_getCurrentLEDState
  7983 ;;		_restoreLEDState
  7984 ;;		_solidring_tactiles
  7985 ;;		_star_tactiles
  7986 ;; This function is called by:
  7987 ;;		_main
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           
  7992                           ;psect for function _showBootSequence
  7993  1FD5                     _showBootSequence:	
  7994                           
  7995                           ;LEDs.c: 87: getCurrentLEDState();
  7996                           
  7997                           ;incstack = 0
  7998                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7999  1FD5  319E  26ED  319F   	fcall	_getCurrentLEDState
  8000                           
  8001                           ;LEDs.c: 88: suspend_blink = 1;
  8002  1FD8  3001               	movlw	1
  8003  1FD9  0020               	movlb	0	; select bank0
  8004  1FDA  00B5               	movwf	??_showBootSequence
  8005  1FDB  0835               	movf	??_showBootSequence,w
  8006  1FDC  0021               	movlb	1	; select bank1
  8007  1FDD  00D9               	movwf	_suspend_blink^(0+128)	;volatile
  8008                           
  8009                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8010  1FDE  0022               	movlb	2	; select bank2
  8011  1FDF  120D               	bcf	13,4	;volatile
  8012                           
  8013                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8014  1FE0  110D               	bcf	13,2	;volatile
  8015                           
  8016                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8017  1FE1  128D               	bcf	13,5	;volatile
  8018                           
  8019                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8020  1FE2  118D               	bcf	13,3	;volatile
  8021                           
  8022                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8023  1FE3  100D               	bcf	13,0	;volatile
  8024                           
  8025                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8026  1FE4  108D               	bcf	13,1	;volatile
  8027                           
  8028                           ;LEDs.c: 113: star_tactiles(0);
  8029  1FE5  3000               	movlw	0
  8030  1FE6  3195  25E5  319F   	fcall	_star_tactiles
  8031                           
  8032                           ;LEDs.c: 114: star_tactiles(0);
  8033  1FE9  3000               	movlw	0
  8034  1FEA  3195  25E5  319F   	fcall	_star_tactiles
  8035                           
  8036                           ;LEDs.c: 115: star_tactiles(1);
  8037  1FED  3001               	movlw	1
  8038  1FEE  3195  25E5  319F   	fcall	_star_tactiles
  8039                           
  8040                           ;LEDs.c: 116: star_tactiles(1);
  8041  1FF1  3001               	movlw	1
  8042  1FF2  3195  25E5  319F   	fcall	_star_tactiles
  8043                           
  8044                           ;LEDs.c: 118: solidring_tactiles();
  8045  1FF5  3192  22DC  319F   	fcall	_solidring_tactiles
  8046                           
  8047                           ;LEDs.c: 119: solidring_tactiles();
  8048  1FF8  3192  22DC  319F   	fcall	_solidring_tactiles
  8049                           
  8050                           ;LEDs.c: 122: suspend_blink = 0;
  8051  1FFB  0021               	movlb	1	; select bank1
  8052  1FFC  01D9               	clrf	_suspend_blink^(0+128)	;volatile
  8053                           
  8054                           ;LEDs.c: 123: restoreLEDState();
  8055  1FFD  319F  2713         	fcall	_restoreLEDState
  8056  1FFF  0008               	return
  8057  2000                     __end_of_showBootSequence:	
  8058                           
  8059                           	psect	text8
  8060  15E5                     __ptext8:	
  8061 ;; *************** function _star_tactiles *****************
  8062 ;; Defined at:
  8063 ;;		line 194 in file "LEDs.c"
  8064 ;; Parameters:    Size  Location     Type
  8065 ;;  reverse         1    wreg     unsigned char 
  8066 ;; Auto vars:     Size  Location     Type
  8067 ;;  reverse         1   16[BANK0 ] unsigned char 
  8068 ;;  iLed            2   19[BANK0 ] int 
  8069 ;;  iLed            2   17[BANK0 ] int 
  8070 ;; Return value:  Size  Location     Type
  8071 ;;                  1    wreg      void 
  8072 ;; Registers used:
  8073 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8074 ;; Tracked objects:
  8075 ;;		On entry : 0/0
  8076 ;;		On exit  : 0/0
  8077 ;;		Unchanged: 0/0
  8078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8080 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8082 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8083 ;;Total ram usage:        7 bytes
  8084 ;; Hardware stack levels used:    1
  8085 ;; Hardware stack levels required when called:    4
  8086 ;; This function calls:
  8087 ;;		_set_leds_bottom
  8088 ;;		_set_leds_top
  8089 ;;		_wait_ms
  8090 ;; This function is called by:
  8091 ;;		_showBootSequence
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           
  8096                           ;psect for function _star_tactiles
  8097  15E5                     _star_tactiles:	
  8098                           
  8099                           ;incstack = 0
  8100                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8101                           ;star_tactiles@reverse stored from wreg
  8102  15E5  0020               	movlb	0	; select bank0
  8103  15E6  00B0               	movwf	star_tactiles@reverse
  8104                           
  8105                           ;LEDs.c: 195: if (reverse == 1) {
  8106  15E7  0330               	decf	star_tactiles@reverse,w
  8107  15E8  1D03               	btfss	3,2
  8108  15E9  2E1A               	goto	l3278
  8109                           
  8110                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8111  15EA  3005               	movlw	5
  8112  15EB  00B1               	movwf	star_tactiles@iLed
  8113  15EC  3000               	movlw	0
  8114  15ED  00B2               	movwf	star_tactiles@iLed+1
  8115  15EE                     L8:	
  8116  15EE  1BB2               	btfsc	star_tactiles@iLed+1,7
  8117  15EF  0008               	return
  8118                           
  8119                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8120  15F0  0832               	movf	star_tactiles@iLed+1,w
  8121  15F1  00A1               	movwf	set_leds_top@x+1
  8122  15F2  0831               	movf	star_tactiles@iLed,w
  8123  15F3  00A0               	movwf	set_leds_top@x
  8124  15F4  3001               	movlw	1
  8125  15F5  00A2               	movwf	set_leds_top@ledState
  8126  15F6  3000               	movlw	0
  8127  15F7  00A3               	movwf	set_leds_top@ledState+1
  8128  15F8  3195  252C  3195   	fcall	_set_leds_top
  8129                           
  8130                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8131  15FB  0020               	movlb	0	; select bank0
  8132  15FC  0931               	comf	star_tactiles@iLed,w
  8133  15FD  00AE               	movwf	??_star_tactiles
  8134  15FE  0932               	comf	star_tactiles@iLed+1,w
  8135  15FF  00AF               	movwf	??_star_tactiles+1
  8136  1600  0AAE               	incf	??_star_tactiles,f
  8137  1601  1903               	skipnz
  8138  1602  0AAF               	incf	??_star_tactiles+1,f
  8139  1603  082E               	movf	??_star_tactiles,w
  8140  1604  3E06               	addlw	6
  8141  1605  00A0               	movwf	set_leds_bottom@x
  8142  1606  3000               	movlw	0
  8143  1607  3D2F               	addwfc	??_star_tactiles+1,w
  8144  1608  00A1               	movwf	set_leds_bottom@x+1
  8145  1609  3192  2226  3195   	fcall	_set_leds_bottom
  8146                           
  8147                           ;LEDs.c: 199: wait_ms(5);
  8148  160C  3005               	movlw	5
  8149  160D  0020               	movlb	0	; select bank0
  8150  160E  00AC               	movwf	wait_ms@time
  8151  160F  3000               	movlw	0
  8152  1610  00AD               	movwf	wait_ms@time+1
  8153  1611  3190  20A2  3195   	fcall	_wait_ms
  8154  1614  30FF               	movlw	255
  8155  1615  0020               	movlb	0	; select bank0
  8156  1616  07B1               	addwf	star_tactiles@iLed,f
  8157  1617  30FF               	movlw	255
  8158  1618  3DB2               	addwfc	star_tactiles@iLed+1,f
  8159  1619  2DEE               	goto	L8
  8160  161A                     l3278:	
  8161                           ;LEDs.c: 200: }
  8162                           ;LEDs.c: 201: } else {
  8163                           
  8164                           
  8165                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8166  161A  3001               	movlw	1
  8167  161B  00B3               	movwf	star_tactiles@iLed_1403
  8168  161C  3000               	movlw	0
  8169  161D  00B4               	movwf	star_tactiles@iLed_1403+1
  8170  161E                     L9:	
  8171  161E  0834               	movf	star_tactiles@iLed_1403+1,w
  8172  161F  3A80               	xorlw	128
  8173  1620  00AE               	movwf	??_star_tactiles
  8174  1621  3080               	movlw	128
  8175  1622  022E               	subwf	??_star_tactiles,w
  8176  1623  1D03               	skipz
  8177  1624  2E27               	goto	u2495
  8178  1625  3007               	movlw	7
  8179  1626  0233               	subwf	star_tactiles@iLed_1403,w
  8180  1627                     u2495:	
  8181  1627  1803               	btfsc	3,0
  8182  1628  0008               	return
  8183                           
  8184                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8185  1629  0020               	movlb	0	; select bank0
  8186  162A  0834               	movf	star_tactiles@iLed_1403+1,w
  8187  162B  00A1               	movwf	set_leds_top@x+1
  8188  162C  0833               	movf	star_tactiles@iLed_1403,w
  8189  162D  00A0               	movwf	set_leds_top@x
  8190  162E  3001               	movlw	1
  8191  162F  00A2               	movwf	set_leds_top@ledState
  8192  1630  3000               	movlw	0
  8193  1631  00A3               	movwf	set_leds_top@ledState+1
  8194  1632  3195  252C  3195   	fcall	_set_leds_top
  8195                           
  8196                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8197  1635  0020               	movlb	0	; select bank0
  8198  1636  0933               	comf	star_tactiles@iLed_1403,w
  8199  1637  00AE               	movwf	??_star_tactiles
  8200  1638  0934               	comf	star_tactiles@iLed_1403+1,w
  8201  1639  00AF               	movwf	??_star_tactiles+1
  8202  163A  0AAE               	incf	??_star_tactiles,f
  8203  163B  1903               	skipnz
  8204  163C  0AAF               	incf	??_star_tactiles+1,f
  8205  163D  082E               	movf	??_star_tactiles,w
  8206  163E  3E06               	addlw	6
  8207  163F  00A0               	movwf	set_leds_bottom@x
  8208  1640  3000               	movlw	0
  8209  1641  3D2F               	addwfc	??_star_tactiles+1,w
  8210  1642  00A1               	movwf	set_leds_bottom@x+1
  8211  1643  3192  2226  3195   	fcall	_set_leds_bottom
  8212                           
  8213                           ;LEDs.c: 205: wait_ms(5);
  8214  1646  3005               	movlw	5
  8215  1647  0020               	movlb	0	; select bank0
  8216  1648  00AC               	movwf	wait_ms@time
  8217  1649  3000               	movlw	0
  8218  164A  00AD               	movwf	wait_ms@time+1
  8219  164B  3190  20A2  3195   	fcall	_wait_ms
  8220  164E  3001               	movlw	1
  8221  164F  0020               	movlb	0	; select bank0
  8222  1650  07B3               	addwf	star_tactiles@iLed_1403,f
  8223  1651  3000               	movlw	0
  8224  1652  3DB4               	addwfc	star_tactiles@iLed_1403+1,f
  8225  1653  2E1E               	goto	L9
  8226  1654                     __end_of_star_tactiles:	
  8227                           
  8228                           	psect	text9
  8229  12DC                     __ptext9:	
  8230 ;; *************** function _solidring_tactiles *****************
  8231 ;; Defined at:
  8232 ;;		line 223 in file "LEDs.c"
  8233 ;; Parameters:    Size  Location     Type
  8234 ;;		None
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;  ring_delay      1   16[BANK0 ] unsigned char 
  8237 ;; Return value:  Size  Location     Type
  8238 ;;                  1    wreg      void 
  8239 ;; Registers used:
  8240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8241 ;; Tracked objects:
  8242 ;;		On entry : 0/0
  8243 ;;		On exit  : 0/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8249 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8250 ;;Total ram usage:        3 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:    4
  8253 ;; This function calls:
  8254 ;;		_set_leds_bottom
  8255 ;;		_set_leds_top
  8256 ;;		_wait_ms
  8257 ;; This function is called by:
  8258 ;;		_showBootSequence
  8259 ;;		_showSave
  8260 ;; This function uses a non-reentrant model
  8261 ;;
  8262                           
  8263                           
  8264                           ;psect for function _solidring_tactiles
  8265  12DC                     _solidring_tactiles:	
  8266                           
  8267                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8268                           
  8269                           ;incstack = 0
  8270                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8271  12DC  301E               	movlw	30
  8272  12DD  0020               	movlb	0	; select bank0
  8273  12DE  00AE               	movwf	??_solidring_tactiles
  8274  12DF  082E               	movf	??_solidring_tactiles,w
  8275  12E0  00B0               	movwf	solidring_tactiles@ring_delay
  8276                           
  8277                           ;LEDs.c: 225: set_leds_top(100, 1);
  8278  12E1  3064               	movlw	100
  8279  12E2  00A0               	movwf	set_leds_top@x
  8280  12E3  3000               	movlw	0
  8281  12E4  00A1               	movwf	set_leds_top@x+1
  8282  12E5  3001               	movlw	1
  8283  12E6  00A2               	movwf	set_leds_top@ledState
  8284  12E7  3000               	movlw	0
  8285  12E8  00A3               	movwf	set_leds_top@ledState+1
  8286  12E9  3195  252C  3192   	fcall	_set_leds_top
  8287                           
  8288                           ;LEDs.c: 226: set_leds_bottom(100);
  8289  12EC  3064               	movlw	100
  8290  12ED  0020               	movlb	0	; select bank0
  8291  12EE  00A0               	movwf	set_leds_bottom@x
  8292  12EF  3000               	movlw	0
  8293  12F0  00A1               	movwf	set_leds_bottom@x+1
  8294  12F1  3192  2226  3192   	fcall	_set_leds_bottom
  8295                           
  8296                           ;LEDs.c: 227: wait_ms(ring_delay);
  8297  12F4  0020               	movlb	0	; select bank0
  8298  12F5  0830               	movf	solidring_tactiles@ring_delay,w
  8299  12F6  00AE               	movwf	??_solidring_tactiles
  8300  12F7  01AF               	clrf	??_solidring_tactiles+1
  8301  12F8  082E               	movf	??_solidring_tactiles,w
  8302  12F9  00AC               	movwf	wait_ms@time
  8303  12FA  082F               	movf	??_solidring_tactiles+1,w
  8304  12FB  00AD               	movwf	wait_ms@time+1
  8305  12FC  3190  20A2  3192   	fcall	_wait_ms
  8306                           
  8307                           ;LEDs.c: 229: set_leds_top(0, 1);
  8308  12FF  3000               	movlw	0
  8309  1300  0020               	movlb	0	; select bank0
  8310  1301  00A0               	movwf	set_leds_top@x
  8311  1302  00A1               	movwf	set_leds_top@x+1
  8312  1303  3001               	movlw	1
  8313  1304  00A2               	movwf	set_leds_top@ledState
  8314  1305  3000               	movlw	0
  8315  1306  00A3               	movwf	set_leds_top@ledState+1
  8316  1307  3195  252C  3192   	fcall	_set_leds_top
  8317                           
  8318                           ;LEDs.c: 230: set_leds_bottom(0);
  8319  130A  3000               	movlw	0
  8320  130B  0020               	movlb	0	; select bank0
  8321  130C  00A0               	movwf	set_leds_bottom@x
  8322  130D  00A1               	movwf	set_leds_bottom@x+1
  8323  130E  3192  2226  3192   	fcall	_set_leds_bottom
  8324                           
  8325                           ;LEDs.c: 231: wait_ms(ring_delay);
  8326  1311  0020               	movlb	0	; select bank0
  8327  1312  0830               	movf	solidring_tactiles@ring_delay,w
  8328  1313  00AE               	movwf	??_solidring_tactiles
  8329  1314  01AF               	clrf	??_solidring_tactiles+1
  8330  1315  082E               	movf	??_solidring_tactiles,w
  8331  1316  00AC               	movwf	wait_ms@time
  8332  1317  082F               	movf	??_solidring_tactiles+1,w
  8333  1318  00AD               	movwf	wait_ms@time+1
  8334  1319  3190  20A2         	fcall	_wait_ms
  8335  131B  0008               	return
  8336  131C                     __end_of_solidring_tactiles:	
  8337                           
  8338                           	psect	text10
  8339  1F13                     __ptext10:	
  8340 ;; *************** function _restoreLEDState *****************
  8341 ;; Defined at:
  8342 ;;		line 89 in file "state_manager.c"
  8343 ;; Parameters:    Size  Location     Type
  8344 ;;		None
  8345 ;; Auto vars:     Size  Location     Type
  8346 ;;		None
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  1    wreg      void 
  8349 ;; Registers used:
  8350 ;;		wreg, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8360 ;;Total ram usage:        0 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    2
  8363 ;; This function calls:
  8364 ;;		Nothing
  8365 ;; This function is called by:
  8366 ;;		_showBootSequence
  8367 ;;		_showError_Alternating
  8368 ;;		_show_error
  8369 ;;		_show_cancel
  8370 ;; This function uses a non-reentrant model
  8371 ;;
  8372                           
  8373                           
  8374                           ;psect for function _restoreLEDState
  8375  1F13                     _restoreLEDState:	
  8376                           
  8377                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8378                           
  8379                           ;incstack = 0
  8380                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8381  1F13  0022               	movlb	2	; select bank2
  8382  1F14  0C20               	rrf	_ledState^(0+256),w
  8383  1F15  1C03               	skipc
  8384  1F16  120D               	bcf	13,4	;volatile
  8385  1F17  1803               	skipnc
  8386  1F18  160D               	bsf	13,4	;volatile
  8387                           
  8388                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8389  1F19  0C22               	rrf	(_ledState^(0+256)+2),w
  8390  1F1A  1C03               	skipc
  8391  1F1B  110D               	bcf	13,2	;volatile
  8392  1F1C  1803               	skipnc
  8393  1F1D  150D               	bsf	13,2	;volatile
  8394                           
  8395                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8396  1F1E  0C21               	rrf	(_ledState^(0+256)+1),w
  8397  1F1F  1C03               	skipc
  8398  1F20  128D               	bcf	13,5	;volatile
  8399  1F21  1803               	skipnc
  8400  1F22  168D               	bsf	13,5	;volatile
  8401                           
  8402                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8403  1F23  0C23               	rrf	(_ledState^(0+256)+3),w
  8404  1F24  1C03               	skipc
  8405  1F25  118D               	bcf	13,3	;volatile
  8406  1F26  1803               	skipnc
  8407  1F27  158D               	bsf	13,3	;volatile
  8408  1F28  0008               	return
  8409  1F29                     __end_of_restoreLEDState:	
  8410                           
  8411                           	psect	text11
  8412  1EED                     __ptext11:	
  8413 ;; *************** function _getCurrentLEDState *****************
  8414 ;; Defined at:
  8415 ;;		line 83 in file "state_manager.c"
  8416 ;; Parameters:    Size  Location     Type
  8417 ;;		None
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;		None
  8420 ;; Return value:  Size  Location     Type
  8421 ;;                  1    wreg      void 
  8422 ;; Registers used:
  8423 ;;		wreg, status,2
  8424 ;; Tracked objects:
  8425 ;;		On entry : 0/0
  8426 ;;		On exit  : 0/0
  8427 ;;		Unchanged: 0/0
  8428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8433 ;;Total ram usage:        0 bytes
  8434 ;; Hardware stack levels used:    1
  8435 ;; Hardware stack levels required when called:    2
  8436 ;; This function calls:
  8437 ;;		Nothing
  8438 ;; This function is called by:
  8439 ;;		_showBootSequence
  8440 ;;		_showError_Alternating
  8441 ;;		_show_error
  8442 ;;		_show_cancel
  8443 ;; This function uses a non-reentrant model
  8444 ;;
  8445                           
  8446                           
  8447                           ;psect for function _getCurrentLEDState
  8448  1EED                     _getCurrentLEDState:	
  8449                           
  8450                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8451                           
  8452                           ;incstack = 0
  8453                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8454  1EED  3000               	movlw	0
  8455  1EEE  0022               	movlb	2	; select bank2
  8456  1EEF  1A0D               	btfsc	13,4	;volatile
  8457  1EF0  3001               	movlw	1
  8458  1EF1  00A0               	movwf	_ledState^(0+256)
  8459                           
  8460                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8461  1EF2  3000               	movlw	0
  8462  1EF3  190D               	btfsc	13,2	;volatile
  8463  1EF4  3001               	movlw	1
  8464  1EF5  00A2               	movwf	(_ledState^(0+256)+2)
  8465                           
  8466                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8467  1EF6  3000               	movlw	0
  8468  1EF7  1A8D               	btfsc	13,5	;volatile
  8469  1EF8  3001               	movlw	1
  8470  1EF9  00A1               	movwf	(_ledState^(0+256)+1)
  8471                           
  8472                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8473  1EFA  3000               	movlw	0
  8474  1EFB  198D               	btfsc	13,3	;volatile
  8475  1EFC  3001               	movlw	1
  8476  1EFD  00A3               	movwf	(_ledState^(0+256)+3)
  8477  1EFE  0008               	return
  8478  1EFF                     __end_of_getCurrentLEDState:	
  8479                           
  8480                           	psect	text12
  8481  0ACF                     __ptext12:	
  8482 ;; *************** function _set_subdivision *****************
  8483 ;; Defined at:
  8484 ;;		line 77 in file "user.c"
  8485 ;; Parameters:    Size  Location     Type
  8486 ;;  x               2    6[BANK1 ] int 
  8487 ;;  y               2    8[BANK1 ] int 
  8488 ;; Auto vars:     Size  Location     Type
  8489 ;;		None
  8490 ;; Return value:  Size  Location     Type
  8491 ;;                  2    6[BANK1 ] int 
  8492 ;; Registers used:
  8493 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8494 ;; Tracked objects:
  8495 ;;		On entry : 0/0
  8496 ;;		On exit  : 0/0
  8497 ;;		Unchanged: 0/0
  8498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8499 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8502 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8503 ;;Total ram usage:        4 bytes
  8504 ;; Hardware stack levels used:    1
  8505 ;; Hardware stack levels required when called:    4
  8506 ;; This function calls:
  8507 ;;		___awtoft
  8508 ;;		___ftmul
  8509 ;;		___fttol
  8510 ;; This function is called by:
  8511 ;;		_main
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function _set_subdivision
  8517  0ACF                     _set_subdivision:	
  8518                           
  8519                           ;user.c: 80: switch (y) {
  8520                           
  8521                           ;incstack = 0
  8522                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8523  0ACF  2BAD               	goto	l3986
  8524  0AD0                     l3974:	
  8525                           ;user.c: 81: case 1:
  8526                           
  8527                           
  8528                           ;user.c: 82: x = x * .75;
  8529  0AD0  0021               	movlb	1	; select bank1
  8530  0AD1  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8531  0AD2  0020               	movlb	0	; select bank0
  8532  0AD3  00A9               	movwf	___awtoft@c+1
  8533  0AD4  0021               	movlb	1	; select bank1
  8534  0AD5  0826               	movf	set_subdivision@x^(0+128),w
  8535  0AD6  0020               	movlb	0	; select bank0
  8536  0AD7  00A8               	movwf	___awtoft@c
  8537  0AD8  3187  27DC  318A   	fcall	___awtoft
  8538  0ADB  0020               	movlb	0	; select bank0
  8539  0ADC  0828               	movf	?___awtoft,w
  8540  0ADD  00B8               	movwf	___ftmul@f2
  8541  0ADE  0829               	movf	?___awtoft+1,w
  8542  0ADF  00B9               	movwf	___ftmul@f2+1
  8543  0AE0  082A               	movf	?___awtoft+2,w
  8544  0AE1  00BA               	movwf	___ftmul@f2+2
  8545  0AE2  3000               	movlw	0
  8546  0AE3  00B5               	movwf	___ftmul@f1
  8547  0AE4  3040               	movlw	64
  8548  0AE5  00B6               	movwf	___ftmul@f1+1
  8549  0AE6  303F               	movlw	63
  8550  0AE7  00B7               	movwf	___ftmul@f1+2
  8551  0AE8  3187  2728  318A   	fcall	___ftmul
  8552  0AEB  0020               	movlb	0	; select bank0
  8553  0AEC  0835               	movf	?___ftmul,w
  8554  0AED  00E7               	movwf	___fttol@f1
  8555  0AEE  0836               	movf	?___ftmul+1,w
  8556  0AEF  00E8               	movwf	___fttol@f1+1
  8557  0AF0  0837               	movf	?___ftmul+2,w
  8558  0AF1  00E9               	movwf	___fttol@f1+2
  8559  0AF2  3197  2761         	fcall	___fttol
  8560  0AF4  0020               	movlb	0	; select bank0
  8561  0AF5  0868               	movf	?___fttol+1,w
  8562  0AF6  0021               	movlb	1	; select bank1
  8563  0AF7  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8564  0AF8  0020               	movlb	0	; select bank0
  8565  0AF9  0867               	movf	?___fttol,w
  8566  0AFA  0021               	movlb	1	; select bank1
  8567  0AFB  00A6               	movwf	set_subdivision@x^(0+128)
  8568                           
  8569                           ;user.c: 83: break;
  8570  0AFC  0008               	return
  8571  0AFD                     l3976:	
  8572                           ;user.c: 84: case 2:
  8573                           
  8574                           
  8575                           ;user.c: 85: x = x * .66666;
  8576  0AFD  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8577  0AFE  0020               	movlb	0	; select bank0
  8578  0AFF  00A9               	movwf	___awtoft@c+1
  8579  0B00  0021               	movlb	1	; select bank1
  8580  0B01  0826               	movf	set_subdivision@x^(0+128),w
  8581  0B02  0020               	movlb	0	; select bank0
  8582  0B03  00A8               	movwf	___awtoft@c
  8583  0B04  3187  27DC  318A   	fcall	___awtoft
  8584  0B07  0020               	movlb	0	; select bank0
  8585  0B08  0828               	movf	?___awtoft,w
  8586  0B09  00B8               	movwf	___ftmul@f2
  8587  0B0A  0829               	movf	?___awtoft+1,w
  8588  0B0B  00B9               	movwf	___ftmul@f2+1
  8589  0B0C  082A               	movf	?___awtoft+2,w
  8590  0B0D  00BA               	movwf	___ftmul@f2+2
  8591  0B0E  30AA               	movlw	170
  8592  0B0F  00B5               	movwf	___ftmul@f1
  8593  0B10  302A               	movlw	42
  8594  0B11  00B6               	movwf	___ftmul@f1+1
  8595  0B12  303F               	movlw	63
  8596  0B13  00B7               	movwf	___ftmul@f1+2
  8597  0B14  3187  2728  318A   	fcall	___ftmul
  8598  0B17  0020               	movlb	0	; select bank0
  8599  0B18  0835               	movf	?___ftmul,w
  8600  0B19  00E7               	movwf	___fttol@f1
  8601  0B1A  0836               	movf	?___ftmul+1,w
  8602  0B1B  00E8               	movwf	___fttol@f1+1
  8603  0B1C  0837               	movf	?___ftmul+2,w
  8604  0B1D  00E9               	movwf	___fttol@f1+2
  8605  0B1E  3197  2761         	fcall	___fttol
  8606  0B20  0020               	movlb	0	; select bank0
  8607  0B21  0868               	movf	?___fttol+1,w
  8608  0B22  0021               	movlb	1	; select bank1
  8609  0B23  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8610  0B24  0020               	movlb	0	; select bank0
  8611  0B25  0867               	movf	?___fttol,w
  8612  0B26  0021               	movlb	1	; select bank1
  8613  0B27  00A6               	movwf	set_subdivision@x^(0+128)
  8614                           
  8615                           ;user.c: 86: break;
  8616  0B28  0008               	return
  8617  0B29                     l3978:	
  8618                           ;user.c: 87: case 3:
  8619                           
  8620                           
  8621                           ;user.c: 88: x = x * .5;
  8622  0B29  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8623  0B2A  0020               	movlb	0	; select bank0
  8624  0B2B  00A9               	movwf	___awtoft@c+1
  8625  0B2C  0021               	movlb	1	; select bank1
  8626  0B2D  0826               	movf	set_subdivision@x^(0+128),w
  8627  0B2E  0020               	movlb	0	; select bank0
  8628  0B2F  00A8               	movwf	___awtoft@c
  8629  0B30  3187  27DC  318A   	fcall	___awtoft
  8630  0B33  0020               	movlb	0	; select bank0
  8631  0B34  0828               	movf	?___awtoft,w
  8632  0B35  00B8               	movwf	___ftmul@f2
  8633  0B36  0829               	movf	?___awtoft+1,w
  8634  0B37  00B9               	movwf	___ftmul@f2+1
  8635  0B38  082A               	movf	?___awtoft+2,w
  8636  0B39  00BA               	movwf	___ftmul@f2+2
  8637  0B3A  3000               	movlw	0
  8638  0B3B  00B5               	movwf	___ftmul@f1
  8639  0B3C  3000               	movlw	0
  8640  0B3D  00B6               	movwf	___ftmul@f1+1
  8641  0B3E  303F               	movlw	63
  8642  0B3F  00B7               	movwf	___ftmul@f1+2
  8643  0B40  3187  2728  318A   	fcall	___ftmul
  8644  0B43  0020               	movlb	0	; select bank0
  8645  0B44  0835               	movf	?___ftmul,w
  8646  0B45  00E7               	movwf	___fttol@f1
  8647  0B46  0836               	movf	?___ftmul+1,w
  8648  0B47  00E8               	movwf	___fttol@f1+1
  8649  0B48  0837               	movf	?___ftmul+2,w
  8650  0B49  00E9               	movwf	___fttol@f1+2
  8651  0B4A  3197  2761         	fcall	___fttol
  8652  0B4C  0020               	movlb	0	; select bank0
  8653  0B4D  0868               	movf	?___fttol+1,w
  8654  0B4E  0021               	movlb	1	; select bank1
  8655  0B4F  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8656  0B50  0020               	movlb	0	; select bank0
  8657  0B51  0867               	movf	?___fttol,w
  8658  0B52  0021               	movlb	1	; select bank1
  8659  0B53  00A6               	movwf	set_subdivision@x^(0+128)
  8660                           
  8661                           ;user.c: 89: break;
  8662  0B54  0008               	return
  8663  0B55                     l3980:	
  8664                           ;user.c: 90: case 4:
  8665                           
  8666                           
  8667                           ;user.c: 91: x = x * .3333;
  8668  0B55  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8669  0B56  0020               	movlb	0	; select bank0
  8670  0B57  00A9               	movwf	___awtoft@c+1
  8671  0B58  0021               	movlb	1	; select bank1
  8672  0B59  0826               	movf	set_subdivision@x^(0+128),w
  8673  0B5A  0020               	movlb	0	; select bank0
  8674  0B5B  00A8               	movwf	___awtoft@c
  8675  0B5C  3187  27DC  318A   	fcall	___awtoft
  8676  0B5F  0020               	movlb	0	; select bank0
  8677  0B60  0828               	movf	?___awtoft,w
  8678  0B61  00B8               	movwf	___ftmul@f2
  8679  0B62  0829               	movf	?___awtoft+1,w
  8680  0B63  00B9               	movwf	___ftmul@f2+1
  8681  0B64  082A               	movf	?___awtoft+2,w
  8682  0B65  00BA               	movwf	___ftmul@f2+2
  8683  0B66  30A6               	movlw	166
  8684  0B67  00B5               	movwf	___ftmul@f1
  8685  0B68  30AA               	movlw	170
  8686  0B69  00B6               	movwf	___ftmul@f1+1
  8687  0B6A  303E               	movlw	62
  8688  0B6B  00B7               	movwf	___ftmul@f1+2
  8689  0B6C  3187  2728  318A   	fcall	___ftmul
  8690  0B6F  0020               	movlb	0	; select bank0
  8691  0B70  0835               	movf	?___ftmul,w
  8692  0B71  00E7               	movwf	___fttol@f1
  8693  0B72  0836               	movf	?___ftmul+1,w
  8694  0B73  00E8               	movwf	___fttol@f1+1
  8695  0B74  0837               	movf	?___ftmul+2,w
  8696  0B75  00E9               	movwf	___fttol@f1+2
  8697  0B76  3197  2761         	fcall	___fttol
  8698  0B78  0020               	movlb	0	; select bank0
  8699  0B79  0868               	movf	?___fttol+1,w
  8700  0B7A  0021               	movlb	1	; select bank1
  8701  0B7B  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8702  0B7C  0020               	movlb	0	; select bank0
  8703  0B7D  0867               	movf	?___fttol,w
  8704  0B7E  0021               	movlb	1	; select bank1
  8705  0B7F  00A6               	movwf	set_subdivision@x^(0+128)
  8706                           
  8707                           ;user.c: 92: break;
  8708  0B80  0008               	return
  8709  0B81                     l3982:	
  8710                           ;user.c: 93: case 5:
  8711                           
  8712                           
  8713                           ;user.c: 94: x = x * .25;
  8714  0B81  0827               	movf	(set_subdivision@x+1)^(0+128),w
  8715  0B82  0020               	movlb	0	; select bank0
  8716  0B83  00A9               	movwf	___awtoft@c+1
  8717  0B84  0021               	movlb	1	; select bank1
  8718  0B85  0826               	movf	set_subdivision@x^(0+128),w
  8719  0B86  0020               	movlb	0	; select bank0
  8720  0B87  00A8               	movwf	___awtoft@c
  8721  0B88  3187  27DC  318A   	fcall	___awtoft
  8722  0B8B  0020               	movlb	0	; select bank0
  8723  0B8C  0828               	movf	?___awtoft,w
  8724  0B8D  00B8               	movwf	___ftmul@f2
  8725  0B8E  0829               	movf	?___awtoft+1,w
  8726  0B8F  00B9               	movwf	___ftmul@f2+1
  8727  0B90  082A               	movf	?___awtoft+2,w
  8728  0B91  00BA               	movwf	___ftmul@f2+2
  8729  0B92  3000               	movlw	0
  8730  0B93  00B5               	movwf	___ftmul@f1
  8731  0B94  3080               	movlw	128
  8732  0B95  00B6               	movwf	___ftmul@f1+1
  8733  0B96  303E               	movlw	62
  8734  0B97  00B7               	movwf	___ftmul@f1+2
  8735  0B98  3187  2728  318A   	fcall	___ftmul
  8736  0B9B  0020               	movlb	0	; select bank0
  8737  0B9C  0835               	movf	?___ftmul,w
  8738  0B9D  00E7               	movwf	___fttol@f1
  8739  0B9E  0836               	movf	?___ftmul+1,w
  8740  0B9F  00E8               	movwf	___fttol@f1+1
  8741  0BA0  0837               	movf	?___ftmul+2,w
  8742  0BA1  00E9               	movwf	___fttol@f1+2
  8743  0BA2  3197  2761         	fcall	___fttol
  8744  0BA4  0020               	movlb	0	; select bank0
  8745  0BA5  0868               	movf	?___fttol+1,w
  8746  0BA6  0021               	movlb	1	; select bank1
  8747  0BA7  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  8748  0BA8  0020               	movlb	0	; select bank0
  8749  0BA9  0867               	movf	?___fttol,w
  8750  0BAA  0021               	movlb	1	; select bank1
  8751  0BAB  00A6               	movwf	set_subdivision@x^(0+128)
  8752                           
  8753                           ;user.c: 99: }
  8754                           
  8755                           ;user.c: 98: break;
  8756                           
  8757                           ;user.c: 96: case 6:
  8758                           
  8759                           ;user.c: 95: break;
  8760  0BAC  0008               	return
  8761  0BAD                     l3986:	
  8762                           
  8763                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8764                           ; Switch size 1, requested type "space"
  8765                           ; Number of cases is 1, Range of values is 0 to 0
  8766                           ; switch strategies available:
  8767                           ; Name         Instructions Cycles
  8768                           ; simple_byte            4     3 (average)
  8769                           ; direct_byte            8     6 (fixed)
  8770                           ; jumptable            260     6 (fixed)
  8771                           ;	Chosen strategy is simple_byte
  8772  0BAD  0021               	movlb	1	; select bank1
  8773  0BAE  0829               	movf	(set_subdivision@y+1)^(0+128),w
  8774  0BAF  3A00               	xorlw	0	; case 0
  8775  0BB0  1903               	skipnz
  8776  0BB1  2BB3               	goto	l4564
  8777  0BB2  2BC7               	goto	l484
  8778  0BB3                     l4564:	
  8779                           
  8780                           ; Switch size 1, requested type "space"
  8781                           ; Number of cases is 6, Range of values is 1 to 6
  8782                           ; switch strategies available:
  8783                           ; Name         Instructions Cycles
  8784                           ; simple_byte           19    10 (average)
  8785                           ; direct_byte           21     9 (fixed)
  8786                           ; jumptable            263     9 (fixed)
  8787                           ;	Chosen strategy is simple_byte
  8788  0BB3  0828               	movf	set_subdivision@y^(0+128),w
  8789  0BB4  3A01               	xorlw	1	; case 1
  8790  0BB5  1903               	skipnz
  8791  0BB6  2AD0               	goto	l3974
  8792  0BB7  3A03               	xorlw	3	; case 2
  8793  0BB8  1903               	skipnz
  8794  0BB9  2AFD               	goto	l3976
  8795  0BBA  3A01               	xorlw	1	; case 3
  8796  0BBB  1903               	skipnz
  8797  0BBC  2B29               	goto	l3978
  8798  0BBD  3A07               	xorlw	7	; case 4
  8799  0BBE  1903               	skipnz
  8800  0BBF  2B55               	goto	l3980
  8801  0BC0  3A01               	xorlw	1	; case 5
  8802  0BC1  1903               	skipnz
  8803  0BC2  2B81               	goto	l3982
  8804  0BC3  3A03               	xorlw	3	; case 6
  8805  0BC4  1903               	skipnz
  8806  0BC5  2BC7               	goto	l484
  8807  0BC6  2BC7               	goto	l484
  8808  0BC7                     l484:	
  8809                           
  8810                           ;user.c: 100: return x;
  8811  0BC7  0008               	return
  8812  0BC8                     __end_of_set_subdivision:	
  8813                           
  8814                           	psect	text13
  8815  1761                     __ptext13:	
  8816 ;; *************** function ___fttol *****************
  8817 ;; Defined at:
  8818 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8819 ;; Parameters:    Size  Location     Type
  8820 ;;  f1              3   71[BANK0 ] float 
  8821 ;; Auto vars:     Size  Location     Type
  8822 ;;  lval            4    1[BANK1 ] unsigned long 
  8823 ;;  exp1            1    5[BANK1 ] unsigned char 
  8824 ;;  sign1           1    0[BANK1 ] unsigned char 
  8825 ;; Return value:  Size  Location     Type
  8826 ;;                  4   71[BANK0 ] long 
  8827 ;; Registers used:
  8828 ;;		wreg, status,2, status,0
  8829 ;; Tracked objects:
  8830 ;;		On entry : 0/0
  8831 ;;		On exit  : 0/0
  8832 ;;		Unchanged: 0/0
  8833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8834 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8835 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8836 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8837 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8838 ;;Total ram usage:       14 bytes
  8839 ;; Hardware stack levels used:    1
  8840 ;; Hardware stack levels required when called:    2
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_main
  8845 ;;		_set_subdivision
  8846 ;; This function uses a non-reentrant model
  8847 ;;
  8848                           
  8849                           
  8850                           ;psect for function ___fttol
  8851  1761                     ___fttol:	
  8852                           
  8853                           ;incstack = 0
  8854                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8855  1761  0020               	movlb	0	; select bank0
  8856  1762  0867               	movf	___fttol@f1,w
  8857  1763  00EB               	movwf	??___fttol
  8858  1764  0868               	movf	___fttol@f1+1,w
  8859  1765  00EC               	movwf	??___fttol+1
  8860  1766  0869               	movf	___fttol@f1+2,w
  8861  1767  00ED               	movwf	??___fttol+2
  8862  1768  1003               	clrc
  8863  1769  0D6C               	rlf	??___fttol+1,w
  8864  176A  0D6D               	rlf	??___fttol+2,w
  8865  176B  00EE               	movwf	??___fttol+3
  8866  176C  086E               	movf	??___fttol+3,w
  8867  176D  0021               	movlb	1	; select bank1
  8868  176E  00A5               	movwf	___fttol@exp1^(0+128)
  8869  176F  0825               	movf	___fttol@exp1^(0+128),w
  8870  1770  1D03               	btfss	3,2
  8871  1771  2F7C               	goto	l3606
  8872  1772  3000               	movlw	0
  8873  1773  0020               	movlb	0	; select bank0
  8874  1774  00EA               	movwf	?___fttol+3
  8875  1775  3000               	movlw	0
  8876  1776  00E9               	movwf	?___fttol+2
  8877  1777  3000               	movlw	0
  8878  1778  00E8               	movwf	?___fttol+1
  8879  1779  3000               	movlw	0
  8880  177A  00E7               	movwf	?___fttol
  8881  177B  0008               	return
  8882  177C                     l3606:	
  8883  177C  0020               	movlb	0	; select bank0
  8884  177D  0867               	movf	___fttol@f1,w
  8885  177E  00EB               	movwf	??___fttol
  8886  177F  0868               	movf	___fttol@f1+1,w
  8887  1780  00EC               	movwf	??___fttol+1
  8888  1781  0869               	movf	___fttol@f1+2,w
  8889  1782  00ED               	movwf	??___fttol+2
  8890  1783  3017               	movlw	23
  8891  1784                     u3185:	
  8892  1784  36ED               	lsrf	??___fttol+2,f
  8893  1785  0CEC               	rrf	??___fttol+1,f
  8894  1786  0CEB               	rrf	??___fttol,f
  8895  1787  0B89               	decfsz	9,f
  8896  1788  2F84               	goto	u3185
  8897  1789  086B               	movf	??___fttol,w
  8898  178A  00EE               	movwf	??___fttol+3
  8899  178B  086E               	movf	??___fttol+3,w
  8900  178C  0021               	movlb	1	; select bank1
  8901  178D  00A0               	movwf	___fttol@sign1^(0+128)
  8902  178E  0020               	movlb	0	; select bank0
  8903  178F  17E8               	bsf	___fttol@f1+1,7
  8904  1790  30FF               	movlw	255
  8905  1791  05E7               	andwf	___fttol@f1,f
  8906  1792  30FF               	movlw	255
  8907  1793  05E8               	andwf	___fttol@f1+1,f
  8908  1794  3000               	movlw	0
  8909  1795  05E9               	andwf	___fttol@f1+2,f
  8910  1796  0867               	movf	___fttol@f1,w
  8911  1797  0021               	movlb	1	; select bank1
  8912  1798  00A1               	movwf	___fttol@lval^(0+128)
  8913  1799  0020               	movlb	0	; select bank0
  8914  179A  0868               	movf	___fttol@f1+1,w
  8915  179B  0021               	movlb	1	; select bank1
  8916  179C  00A2               	movwf	(___fttol@lval^(0+128)+1)
  8917  179D  0020               	movlb	0	; select bank0
  8918  179E  0869               	movf	___fttol@f1+2,w
  8919  179F  0021               	movlb	1	; select bank1
  8920  17A0  00A3               	movwf	(___fttol@lval^(0+128)+2)
  8921  17A1  01A4               	clrf	(___fttol@lval^(0+128)+3)
  8922  17A2  308E               	movlw	142
  8923  17A3  02A5               	subwf	___fttol@exp1^(0+128),f
  8924  17A4  1FA5               	btfss	___fttol@exp1^(0+128),7
  8925  17A5  2FC6               	goto	l3626
  8926  17A6  0825               	movf	___fttol@exp1^(0+128),w
  8927  17A7  3A80               	xorlw	128
  8928  17A8  3E8F               	addlw	143
  8929  17A9  1803               	skipnc
  8930  17AA  2FB5               	goto	l3624
  8931  17AB  3000               	movlw	0
  8932  17AC  0020               	movlb	0	; select bank0
  8933  17AD  00EA               	movwf	?___fttol+3
  8934  17AE  3000               	movlw	0
  8935  17AF  00E9               	movwf	?___fttol+2
  8936  17B0  3000               	movlw	0
  8937  17B1  00E8               	movwf	?___fttol+1
  8938  17B2  3000               	movlw	0
  8939  17B3  00E7               	movwf	?___fttol
  8940  17B4  0008               	return
  8941  17B5                     l3624:	
  8942  17B5  3001               	movlw	1
  8943  17B6                     u3215:	
  8944  17B6  0021               	movlb	1	; select bank1
  8945  17B7  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  8946  17B8  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  8947  17B9  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  8948  17BA  0CA1               	rrf	___fttol@lval^(0+128),f
  8949  17BB  0B89               	decfsz	9,f
  8950  17BC  2FB6               	goto	u3215
  8951  17BD  3001               	movlw	1
  8952  17BE  0020               	movlb	0	; select bank0
  8953  17BF  00EB               	movwf	??___fttol
  8954  17C0  086B               	movf	??___fttol,w
  8955  17C1  0021               	movlb	1	; select bank1
  8956  17C2  07A5               	addwf	___fttol@exp1^(0+128),f
  8957  17C3  1903               	btfsc	3,2
  8958  17C4  2FE2               	goto	l3634
  8959  17C5  2FB5               	goto	l3624
  8960  17C6                     l3626:	
  8961  17C6  3018               	movlw	24
  8962  17C7  0225               	subwf	___fttol@exp1^(0+128),w
  8963  17C8  1C03               	skipc
  8964  17C9  2FDE               	goto	l1462
  8965  17CA  3000               	movlw	0
  8966  17CB  0020               	movlb	0	; select bank0
  8967  17CC  00EA               	movwf	?___fttol+3
  8968  17CD  3000               	movlw	0
  8969  17CE  00E9               	movwf	?___fttol+2
  8970  17CF  3000               	movlw	0
  8971  17D0  00E8               	movwf	?___fttol+1
  8972  17D1  3000               	movlw	0
  8973  17D2  00E7               	movwf	?___fttol
  8974  17D3  0008               	return
  8975  17D4                     l3632:	
  8976  17D4  3001               	movlw	1
  8977  17D5                     u3245:	
  8978  17D5  0021               	movlb	1	; select bank1
  8979  17D6  35A1               	lslf	___fttol@lval^(0+128),f
  8980  17D7  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  8981  17D8  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  8982  17D9  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  8983  17DA  0B89               	decfsz	9,f
  8984  17DB  2FD5               	goto	u3245
  8985  17DC  3001               	movlw	1
  8986  17DD  02A5               	subwf	___fttol@exp1^(0+128),f
  8987  17DE                     l1462:	
  8988  17DE  0021               	movlb	1	; select bank1
  8989  17DF  0825               	movf	___fttol@exp1^(0+128),w
  8990  17E0  1D03               	btfss	3,2
  8991  17E1  2FD4               	goto	l3632
  8992  17E2                     l3634:	
  8993  17E2  0820               	movf	___fttol@sign1^(0+128),w
  8994  17E3  1903               	btfsc	3,2
  8995  17E4  2FF0               	goto	l3638
  8996  17E5  09A1               	comf	___fttol@lval^(0+128),f
  8997  17E6  09A2               	comf	(___fttol@lval+1)^(0+128),f
  8998  17E7  09A3               	comf	(___fttol@lval+2)^(0+128),f
  8999  17E8  09A4               	comf	(___fttol@lval+3)^(0+128),f
  9000  17E9  0AA1               	incf	___fttol@lval^(0+128),f
  9001  17EA  1903               	skipnz
  9002  17EB  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  9003  17EC  1903               	skipnz
  9004  17ED  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  9005  17EE  1903               	skipnz
  9006  17EF  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  9007  17F0                     l3638:	
  9008  17F0  0824               	movf	(___fttol@lval+3)^(0+128),w
  9009  17F1  0020               	movlb	0	; select bank0
  9010  17F2  00EA               	movwf	?___fttol+3
  9011  17F3  0021               	movlb	1	; select bank1
  9012  17F4  0823               	movf	(___fttol@lval+2)^(0+128),w
  9013  17F5  0020               	movlb	0	; select bank0
  9014  17F6  00E9               	movwf	?___fttol+2
  9015  17F7  0021               	movlb	1	; select bank1
  9016  17F8  0822               	movf	(___fttol@lval+1)^(0+128),w
  9017  17F9  0020               	movlb	0	; select bank0
  9018  17FA  00E8               	movwf	?___fttol+1
  9019  17FB  0021               	movlb	1	; select bank1
  9020  17FC  0821               	movf	___fttol@lval^(0+128),w
  9021  17FD  0020               	movlb	0	; select bank0
  9022  17FE  00E7               	movwf	?___fttol
  9023  17FF  0008               	return
  9024  1800                     __end_of___fttol:	
  9025                           
  9026                           	psect	text14
  9027  07DC                     __ptext14:	
  9028 ;; *************** function ___awtoft *****************
  9029 ;; Defined at:
  9030 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9031 ;; Parameters:    Size  Location     Type
  9032 ;;  c               2    8[BANK0 ] int 
  9033 ;; Auto vars:     Size  Location     Type
  9034 ;;  sign            1   13[BANK0 ] unsigned char 
  9035 ;; Return value:  Size  Location     Type
  9036 ;;                  3    8[BANK0 ] float 
  9037 ;; Registers used:
  9038 ;;		wreg, status,2, status,0, pclath, cstack
  9039 ;; Tracked objects:
  9040 ;;		On entry : 0/0
  9041 ;;		On exit  : 0/0
  9042 ;;		Unchanged: 0/0
  9043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9044 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9045 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9046 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9047 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9048 ;;Total ram usage:        6 bytes
  9049 ;; Hardware stack levels used:    1
  9050 ;; Hardware stack levels required when called:    3
  9051 ;; This function calls:
  9052 ;;		___ftpack
  9053 ;; This function is called by:
  9054 ;;		_main
  9055 ;;		_set_subdivision
  9056 ;; This function uses a non-reentrant model
  9057 ;;
  9058                           
  9059                           
  9060                           ;psect for function ___awtoft
  9061  07DC                     ___awtoft:	
  9062                           
  9063                           ;incstack = 0
  9064                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9065  07DC  0020               	movlb	0	; select bank0
  9066  07DD  01AD               	clrf	___awtoft@sign
  9067  07DE  1FA9               	btfss	___awtoft@c+1,7
  9068  07DF  2FE7               	goto	l3426
  9069  07E0  09A8               	comf	___awtoft@c,f
  9070  07E1  09A9               	comf	___awtoft@c+1,f
  9071  07E2  0AA8               	incf	___awtoft@c,f
  9072  07E3  1903               	skipnz
  9073  07E4  0AA9               	incf	___awtoft@c+1,f
  9074  07E5  01AD               	clrf	___awtoft@sign
  9075  07E6  0AAD               	incf	___awtoft@sign,f
  9076  07E7                     l3426:	
  9077  07E7  0828               	movf	___awtoft@c,w
  9078  07E8  00A0               	movwf	___ftpack@arg
  9079  07E9  0829               	movf	___awtoft@c+1,w
  9080  07EA  00A1               	movwf	___ftpack@arg+1
  9081  07EB  01A2               	clrf	___ftpack@arg+2
  9082  07EC  308E               	movlw	142
  9083  07ED  00AB               	movwf	??___awtoft
  9084  07EE  082B               	movf	??___awtoft,w
  9085  07EF  00A3               	movwf	___ftpack@exp
  9086  07F0  082D               	movf	___awtoft@sign,w
  9087  07F1  00AC               	movwf	??___awtoft+1
  9088  07F2  082C               	movf	??___awtoft+1,w
  9089  07F3  00A4               	movwf	___ftpack@sign
  9090  07F4  3195  2580         	fcall	___ftpack
  9091  07F6  0020               	movlb	0	; select bank0
  9092  07F7  0820               	movf	?___ftpack,w
  9093  07F8  00A8               	movwf	?___awtoft
  9094  07F9  0821               	movf	?___ftpack+1,w
  9095  07FA  00A9               	movwf	?___awtoft+1
  9096  07FB  0822               	movf	?___ftpack+2,w
  9097  07FC  00AA               	movwf	?___awtoft+2
  9098  07FD  0008               	return
  9099  07FE                     __end_of___awtoft:	
  9100                           
  9101                           	psect	text15
  9102  1104                     __ptext15:	
  9103 ;; *************** function _read_top_tactile *****************
  9104 ;; Defined at:
  9105 ;;		line 36 in file "tactiles.c"
  9106 ;; Parameters:    Size  Location     Type
  9107 ;;		None
  9108 ;; Auto vars:     Size  Location     Type
  9109 ;;		None
  9110 ;; Return value:  Size  Location     Type
  9111 ;;                  1    wreg      void 
  9112 ;; Registers used:
  9113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9114 ;; Tracked objects:
  9115 ;;		On entry : 0/0
  9116 ;;		On exit  : 0/0
  9117 ;;		Unchanged: 0/0
  9118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9121 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9122 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9123 ;;Total ram usage:        1 bytes
  9124 ;; Hardware stack levels used:    1
  9125 ;; Hardware stack levels required when called:    4
  9126 ;; This function calls:
  9127 ;;		_set_leds_top
  9128 ;;		_wait_ms
  9129 ;; This function is called by:
  9130 ;;		_main
  9131 ;; This function uses a non-reentrant model
  9132 ;;
  9133                           
  9134                           
  9135                           ;psect for function _read_top_tactile
  9136  1104                     _read_top_tactile:	
  9137                           
  9138                           ;tactiles.c: 44: if (PORTDbits.RD5 == 0) {
  9139                           
  9140                           ;incstack = 0
  9141                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9142  1104  0020               	movlb	0	; select bank0
  9143  1105  1A8F               	btfsc	15,5	;volatile
  9144  1106  0008               	return
  9145                           
  9146                           ;tactiles.c: 45: top_push_state = top_push_state + 1;
  9147  1107  0021               	movlb	1	; select bank1
  9148  1108  0868               	movf	_top_push_state^(0+128),w
  9149  1109  3E01               	addlw	1
  9150  110A  00E8               	movwf	_top_push_state^(0+128)
  9151  110B  3000               	movlw	0
  9152  110C  3D69               	addwfc	(_top_push_state+1)^(0+128),w
  9153  110D  00E9               	movwf	(_top_push_state+1)^(0+128)
  9154                           
  9155                           ;tactiles.c: 46: if (top_push_state >= 7) {
  9156  110E  0869               	movf	(_top_push_state+1)^(0+128),w
  9157  110F  3A80               	xorlw	128
  9158  1110  0020               	movlb	0	; select bank0
  9159  1111  00AE               	movwf	??_read_top_tactile
  9160  1112  3080               	movlw	128
  9161  1113  022E               	subwf	??_read_top_tactile,w
  9162  1114  1D03               	skipz
  9163  1115  2919               	goto	u3365
  9164  1116  3007               	movlw	7
  9165  1117  0021               	movlb	1	; select bank1
  9166  1118  0268               	subwf	_top_push_state^(0+128),w
  9167  1119                     u3365:	
  9168  1119  1C03               	skipc
  9169  111A  2920               	goto	l3712
  9170                           
  9171                           ;tactiles.c: 47: top_push_state = 1;
  9172  111B  3001               	movlw	1
  9173  111C  0021               	movlb	1	; select bank1
  9174  111D  00E8               	movwf	_top_push_state^(0+128)
  9175  111E  3000               	movlw	0
  9176  111F  00E9               	movwf	(_top_push_state^(0+128)+1)
  9177  1120                     l3712:	
  9178                           
  9179                           ;tactiles.c: 48: }
  9180                           ;tactiles.c: 49: set_leds_top(top_push_state, 1);
  9181  1120  0021               	movlb	1	; select bank1
  9182  1121  0869               	movf	(_top_push_state+1)^(0+128),w
  9183  1122  0020               	movlb	0	; select bank0
  9184  1123  00A1               	movwf	set_leds_top@x+1
  9185  1124  0021               	movlb	1	; select bank1
  9186  1125  0868               	movf	_top_push_state^(0+128),w
  9187  1126  0020               	movlb	0	; select bank0
  9188  1127  00A0               	movwf	set_leds_top@x
  9189  1128  3001               	movlw	1
  9190  1129  00A2               	movwf	set_leds_top@ledState
  9191  112A  3000               	movlw	0
  9192  112B  00A3               	movwf	set_leds_top@ledState+1
  9193  112C  3195  252C  3191   	fcall	_set_leds_top
  9194                           
  9195                           ;tactiles.c: 50: delay_time_changed = 1;
  9196  112F  3001               	movlw	1
  9197  1130  0022               	movlb	2	; select bank2
  9198  1131  00CC               	movwf	_delay_time_changed^(0+256)
  9199  1132  3000               	movlw	0
  9200  1133  00CD               	movwf	(_delay_time_changed^(0+256)+1)
  9201  1134                     l789:	
  9202                           ;tactiles.c: 52: while (PORTDbits.RD5 == 0) {
  9203                           
  9204  1134  0020               	movlb	0	; select bank0
  9205  1135  1E8F               	btfss	15,5	;volatile
  9206  1136  2934               	goto	l789
  9207                           
  9208                           ;tactiles.c: 53: }
  9209                           ;tactiles.c: 54: wait_ms(20);
  9210  1137  3014               	movlw	20
  9211  1138  00AC               	movwf	wait_ms@time
  9212  1139  3000               	movlw	0
  9213  113A  00AD               	movwf	wait_ms@time+1
  9214  113B  3190  20A2         	fcall	_wait_ms
  9215  113D  0008               	return
  9216  113E                     __end_of_read_top_tactile:	
  9217                           
  9218                           	psect	text16
  9219  10D3                     __ptext16:	
  9220 ;; *************** function _read_bottom_tactile *****************
  9221 ;; Defined at:
  9222 ;;		line 16 in file "tactiles.c"
  9223 ;; Parameters:    Size  Location     Type
  9224 ;;		None
  9225 ;; Auto vars:     Size  Location     Type
  9226 ;;		None
  9227 ;; Return value:  Size  Location     Type
  9228 ;;                  1    wreg      void 
  9229 ;; Registers used:
  9230 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9231 ;; Tracked objects:
  9232 ;;		On entry : 0/0
  9233 ;;		On exit  : 0/0
  9234 ;;		Unchanged: 0/0
  9235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9238 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9239 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9240 ;;Total ram usage:        1 bytes
  9241 ;; Hardware stack levels used:    1
  9242 ;; Hardware stack levels required when called:    4
  9243 ;; This function calls:
  9244 ;;		_set_leds_bottom
  9245 ;;		_wait_ms
  9246 ;; This function is called by:
  9247 ;;		_main
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function _read_bottom_tactile
  9253  10D3                     _read_bottom_tactile:	
  9254                           
  9255                           ;tactiles.c: 23: if (PORTDbits.RD6 == 0) {
  9256                           
  9257                           ;incstack = 0
  9258                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9259  10D3  0020               	movlb	0	; select bank0
  9260  10D4  1B0F               	btfsc	15,6	;volatile
  9261  10D5  0008               	return
  9262                           
  9263                           ;tactiles.c: 24: bottom_push_state = bottom_push_state + 1;
  9264  10D6  0021               	movlb	1	; select bank1
  9265  10D7  0864               	movf	_bottom_push_state^(0+128),w
  9266  10D8  3E01               	addlw	1
  9267  10D9  00E4               	movwf	_bottom_push_state^(0+128)
  9268  10DA  3000               	movlw	0
  9269  10DB  3D65               	addwfc	(_bottom_push_state+1)^(0+128),w
  9270  10DC  00E5               	movwf	(_bottom_push_state+1)^(0+128)
  9271                           
  9272                           ;tactiles.c: 25: if (bottom_push_state > 6) {
  9273  10DD  0865               	movf	(_bottom_push_state+1)^(0+128),w
  9274  10DE  3A80               	xorlw	128
  9275  10DF  0020               	movlb	0	; select bank0
  9276  10E0  00AE               	movwf	??_read_bottom_tactile
  9277  10E1  3080               	movlw	128
  9278  10E2  022E               	subwf	??_read_bottom_tactile,w
  9279  10E3  1D03               	skipz
  9280  10E4  28E8               	goto	u3335
  9281  10E5  3007               	movlw	7
  9282  10E6  0021               	movlb	1	; select bank1
  9283  10E7  0264               	subwf	_bottom_push_state^(0+128),w
  9284  10E8                     u3335:	
  9285  10E8  1C03               	skipc
  9286  10E9  28EF               	goto	l3700
  9287                           
  9288                           ;tactiles.c: 26: bottom_push_state = 1;
  9289  10EA  3001               	movlw	1
  9290  10EB  0021               	movlb	1	; select bank1
  9291  10EC  00E4               	movwf	_bottom_push_state^(0+128)
  9292  10ED  3000               	movlw	0
  9293  10EE  00E5               	movwf	(_bottom_push_state^(0+128)+1)
  9294  10EF                     l3700:	
  9295                           
  9296                           ;tactiles.c: 27: }
  9297                           ;tactiles.c: 28: set_leds_bottom(bottom_push_state);
  9298  10EF  0021               	movlb	1	; select bank1
  9299  10F0  0865               	movf	(_bottom_push_state+1)^(0+128),w
  9300  10F1  0020               	movlb	0	; select bank0
  9301  10F2  00A1               	movwf	set_leds_bottom@x+1
  9302  10F3  0021               	movlb	1	; select bank1
  9303  10F4  0864               	movf	_bottom_push_state^(0+128),w
  9304  10F5  0020               	movlb	0	; select bank0
  9305  10F6  00A0               	movwf	set_leds_bottom@x
  9306  10F7  3192  2226  3190   	fcall	_set_leds_bottom
  9307  10FA                     l781:	
  9308                           ;tactiles.c: 30: while (PORTDbits.RD6 == 0) {
  9309                           
  9310  10FA  0020               	movlb	0	; select bank0
  9311  10FB  1F0F               	btfss	15,6	;volatile
  9312  10FC  28FA               	goto	l781
  9313                           
  9314                           ;tactiles.c: 31: }
  9315                           ;tactiles.c: 32: wait_ms(20);
  9316  10FD  3014               	movlw	20
  9317  10FE  00AC               	movwf	wait_ms@time
  9318  10FF  3000               	movlw	0
  9319  1100  00AD               	movwf	wait_ms@time+1
  9320  1101  3190  20A2         	fcall	_wait_ms
  9321  1103  0008               	return
  9322  1104                     __end_of_read_bottom_tactile:	
  9323                           
  9324                           	psect	text17
  9325  129E                     __ptext17:	
  9326 ;; *************** function _modulation *****************
  9327 ;; Defined at:
  9328 ;;		line 169 in file "user.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  x               2   21[BANK0 ] int 
  9331 ;;  y               2   23[BANK0 ] int 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;		None
  9334 ;; Return value:  Size  Location     Type
  9335 ;;                  2   21[BANK0 ] int 
  9336 ;; Registers used:
  9337 ;;		wreg, status,2, status,0, pclath, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9345 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9346 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9347 ;;Total ram usage:       12 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    3
  9350 ;; This function calls:
  9351 ;;		___aldiv
  9352 ;;		___wmul
  9353 ;; This function is called by:
  9354 ;;		_main
  9355 ;; This function uses a non-reentrant model
  9356 ;;
  9357                           
  9358                           
  9359                           ;psect for function _modulation
  9360  129E                     _modulation:	
  9361                           
  9362                           ;user.c: 171: x = (127500 + (y * x)) / 1000;
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9366  129E  3000               	movlw	0
  9367  129F  0020               	movlb	0	; select bank0
  9368  12A0  00A9               	movwf	___aldiv@divisor+3
  9369  12A1  3000               	movlw	0
  9370  12A2  00A8               	movwf	___aldiv@divisor+2
  9371  12A3  3003               	movlw	3
  9372  12A4  00A7               	movwf	___aldiv@divisor+1
  9373  12A5  30E8               	movlw	232
  9374  12A6  00A6               	movwf	___aldiv@divisor
  9375  12A7  300C               	movlw	12
  9376  12A8  00B9               	movwf	??_modulation
  9377  12A9  30F2               	movlw	242
  9378  12AA  00BA               	movwf	??_modulation+1
  9379  12AB  3001               	movlw	1
  9380  12AC  00BB               	movwf	??_modulation+2
  9381  12AD  3000               	movlw	0
  9382  12AE  00BC               	movwf	??_modulation+3
  9383  12AF  0838               	movf	modulation@y+1,w
  9384  12B0  00A1               	movwf	___wmul@multiplier+1
  9385  12B1  0837               	movf	modulation@y,w
  9386  12B2  00A0               	movwf	___wmul@multiplier
  9387  12B3  0836               	movf	modulation@x+1,w
  9388  12B4  00A3               	movwf	___wmul@multiplicand+1
  9389  12B5  0835               	movf	modulation@x,w
  9390  12B6  00A2               	movwf	___wmul@multiplicand
  9391  12B7  319F  2773  3192   	fcall	___wmul
  9392  12BA  0020               	movlb	0	; select bank0
  9393  12BB  0820               	movf	?___wmul,w
  9394  12BC  00BD               	movwf	??_modulation+4
  9395  12BD  0821               	movf	?___wmul+1,w
  9396  12BE  00BE               	movwf	??_modulation+5
  9397  12BF  3000               	movlw	0
  9398  12C0  1BBE               	btfsc	??_modulation+5,7
  9399  12C1  30FF               	movlw	255
  9400  12C2  00BF               	movwf	??_modulation+6
  9401  12C3  00C0               	movwf	??_modulation+7
  9402  12C4  083D               	movf	??_modulation+4,w
  9403  12C5  07B9               	addwf	??_modulation,f
  9404  12C6  083E               	movf	??_modulation+5,w
  9405  12C7  3DBA               	addwfc	??_modulation+1,f
  9406  12C8  083F               	movf	??_modulation+6,w
  9407  12C9  3DBB               	addwfc	??_modulation+2,f
  9408  12CA  0840               	movf	??_modulation+7,w
  9409  12CB  3DBC               	addwfc	??_modulation+3,f
  9410  12CC  083C               	movf	??_modulation+3,w
  9411  12CD  00AD               	movwf	___aldiv@dividend+3
  9412  12CE  083B               	movf	??_modulation+2,w
  9413  12CF  00AC               	movwf	___aldiv@dividend+2
  9414  12D0  083A               	movf	??_modulation+1,w
  9415  12D1  00AB               	movwf	___aldiv@dividend+1
  9416  12D2  0839               	movf	??_modulation,w
  9417  12D3  00AA               	movwf	___aldiv@dividend
  9418  12D4  3196  2654         	fcall	___aldiv
  9419  12D6  0020               	movlb	0	; select bank0
  9420  12D7  0827               	movf	?___aldiv+1,w
  9421  12D8  00B6               	movwf	modulation@x+1
  9422  12D9  0826               	movf	?___aldiv,w
  9423  12DA  00B5               	movwf	modulation@x
  9424                           
  9425                           ;user.c: 172: return x;
  9426  12DB  0008               	return
  9427  12DC                     __end_of_modulation:	
  9428                           
  9429                           	psect	text18
  9430  1F73                     __ptext18:	
  9431 ;; *************** function ___wmul *****************
  9432 ;; Defined at:
  9433 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9436 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  product         2    4[BANK0 ] unsigned int 
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  2    0[BANK0 ] unsigned int 
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9448 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9451 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9452 ;;Total ram usage:        6 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    2
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_modulation
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           
  9463                           ;psect for function ___wmul
  9464  1F73                     ___wmul:	
  9465                           
  9466                           ;incstack = 0
  9467                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9468  1F73  0020               	movlb	0	; select bank0
  9469  1F74  01A4               	clrf	___wmul@product
  9470  1F75  01A5               	clrf	___wmul@product+1
  9471  1F76                     l3366:	
  9472  1F76  1C20               	btfss	___wmul@multiplier,0
  9473  1F77  2F7C               	goto	l1210
  9474  1F78  0822               	movf	___wmul@multiplicand,w
  9475  1F79  07A4               	addwf	___wmul@product,f
  9476  1F7A  0823               	movf	___wmul@multiplicand+1,w
  9477  1F7B  3DA5               	addwfc	___wmul@product+1,f
  9478  1F7C                     l1210:	
  9479  1F7C  3001               	movlw	1
  9480  1F7D                     u2595:	
  9481  1F7D  35A2               	lslf	___wmul@multiplicand,f
  9482  1F7E  0DA3               	rlf	___wmul@multiplicand+1,f
  9483  1F7F  0B89               	decfsz	9,f
  9484  1F80  2F7D               	goto	u2595
  9485  1F81  3001               	movlw	1
  9486  1F82                     u2605:	
  9487  1F82  36A1               	lsrf	___wmul@multiplier+1,f
  9488  1F83  0CA0               	rrf	___wmul@multiplier,f
  9489  1F84  0B89               	decfsz	9,f
  9490  1F85  2F82               	goto	u2605
  9491  1F86  0820               	movf	___wmul@multiplier,w
  9492  1F87  0421               	iorwf	___wmul@multiplier+1,w
  9493  1F88  1D03               	btfss	3,2
  9494  1F89  2F76               	goto	l3366
  9495  1F8A  0825               	movf	___wmul@product+1,w
  9496  1F8B  00A1               	movwf	?___wmul+1
  9497  1F8C  0824               	movf	___wmul@product,w
  9498  1F8D  00A0               	movwf	?___wmul
  9499  1F8E  0008               	return
  9500  1F8F                     __end_of___wmul:	
  9501                           
  9502                           	psect	text19
  9503  1654                     __ptext19:	
  9504 ;; *************** function ___aldiv *****************
  9505 ;; Defined at:
  9506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9507 ;; Parameters:    Size  Location     Type
  9508 ;;  divisor         4    6[BANK0 ] long 
  9509 ;;  dividend        4   10[BANK0 ] long 
  9510 ;; Auto vars:     Size  Location     Type
  9511 ;;  quotient        4   17[BANK0 ] long 
  9512 ;;  sign            1   16[BANK0 ] unsigned char 
  9513 ;;  counter         1   15[BANK0 ] unsigned char 
  9514 ;; Return value:  Size  Location     Type
  9515 ;;                  4    6[BANK0 ] long 
  9516 ;; Registers used:
  9517 ;;		wreg, status,2, status,0
  9518 ;; Tracked objects:
  9519 ;;		On entry : 0/0
  9520 ;;		On exit  : 0/0
  9521 ;;		Unchanged: 0/0
  9522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9523 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9524 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9525 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9526 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9527 ;;Total ram usage:       15 bytes
  9528 ;; Hardware stack levels used:    1
  9529 ;; Hardware stack levels required when called:    2
  9530 ;; This function calls:
  9531 ;;		Nothing
  9532 ;; This function is called by:
  9533 ;;		_modulation
  9534 ;;		_updateSwitchTap
  9535 ;; This function uses a non-reentrant model
  9536 ;;
  9537                           
  9538                           
  9539                           ;psect for function ___aldiv
  9540  1654                     ___aldiv:	
  9541                           
  9542                           ;incstack = 0
  9543                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9544  1654  0020               	movlb	0	; select bank0
  9545  1655  01B0               	clrf	___aldiv@sign
  9546  1656  1FA9               	btfss	___aldiv@divisor+3,7
  9547  1657  2E65               	goto	l1265
  9548  1658  09A6               	comf	___aldiv@divisor,f
  9549  1659  09A7               	comf	___aldiv@divisor+1,f
  9550  165A  09A8               	comf	___aldiv@divisor+2,f
  9551  165B  09A9               	comf	___aldiv@divisor+3,f
  9552  165C  0AA6               	incf	___aldiv@divisor,f
  9553  165D  1903               	skipnz
  9554  165E  0AA7               	incf	___aldiv@divisor+1,f
  9555  165F  1903               	skipnz
  9556  1660  0AA8               	incf	___aldiv@divisor+2,f
  9557  1661  1903               	skipnz
  9558  1662  0AA9               	incf	___aldiv@divisor+3,f
  9559  1663  01B0               	clrf	___aldiv@sign
  9560  1664  0AB0               	incf	___aldiv@sign,f
  9561  1665                     l1265:	
  9562  1665  1FAD               	btfss	___aldiv@dividend+3,7
  9563  1666  2E76               	goto	l3388
  9564  1667  09AA               	comf	___aldiv@dividend,f
  9565  1668  09AB               	comf	___aldiv@dividend+1,f
  9566  1669  09AC               	comf	___aldiv@dividend+2,f
  9567  166A  09AD               	comf	___aldiv@dividend+3,f
  9568  166B  0AAA               	incf	___aldiv@dividend,f
  9569  166C  1903               	skipnz
  9570  166D  0AAB               	incf	___aldiv@dividend+1,f
  9571  166E  1903               	skipnz
  9572  166F  0AAC               	incf	___aldiv@dividend+2,f
  9573  1670  1903               	skipnz
  9574  1671  0AAD               	incf	___aldiv@dividend+3,f
  9575  1672  3001               	movlw	1
  9576  1673  00AE               	movwf	??___aldiv
  9577  1674  082E               	movf	??___aldiv,w
  9578  1675  06B0               	xorwf	___aldiv@sign,f
  9579  1676                     l3388:	
  9580  1676  3000               	movlw	0
  9581  1677  00B4               	movwf	___aldiv@quotient+3
  9582  1678  3000               	movlw	0
  9583  1679  00B3               	movwf	___aldiv@quotient+2
  9584  167A  3000               	movlw	0
  9585  167B  00B2               	movwf	___aldiv@quotient+1
  9586  167C  3000               	movlw	0
  9587  167D  00B1               	movwf	___aldiv@quotient
  9588  167E  0829               	movf	___aldiv@divisor+3,w
  9589  167F  0428               	iorwf	___aldiv@divisor+2,w
  9590  1680  0427               	iorwf	___aldiv@divisor+1,w
  9591  1681  0426               	iorwf	___aldiv@divisor,w
  9592  1682  1903               	skipnz
  9593  1683  2EBF               	goto	l3410
  9594  1684  01AF               	clrf	___aldiv@counter
  9595  1685  0AAF               	incf	___aldiv@counter,f
  9596  1686                     l3396:	
  9597  1686  1BA9               	btfsc	___aldiv@divisor+3,7
  9598  1687  2E94               	goto	l3398
  9599  1688  3001               	movlw	1
  9600  1689                     u2655:	
  9601  1689  35A6               	lslf	___aldiv@divisor,f
  9602  168A  0DA7               	rlf	___aldiv@divisor+1,f
  9603  168B  0DA8               	rlf	___aldiv@divisor+2,f
  9604  168C  0DA9               	rlf	___aldiv@divisor+3,f
  9605  168D  0B89               	decfsz	9,f
  9606  168E  2E89               	goto	u2655
  9607  168F  3001               	movlw	1
  9608  1690  00AE               	movwf	??___aldiv
  9609  1691  082E               	movf	??___aldiv,w
  9610  1692  07AF               	addwf	___aldiv@counter,f
  9611  1693  2E86               	goto	l3396
  9612  1694                     l3398:	
  9613  1694  3001               	movlw	1
  9614  1695                     u2675:	
  9615  1695  35B1               	lslf	___aldiv@quotient,f
  9616  1696  0DB2               	rlf	___aldiv@quotient+1,f
  9617  1697  0DB3               	rlf	___aldiv@quotient+2,f
  9618  1698  0DB4               	rlf	___aldiv@quotient+3,f
  9619  1699  0B89               	decfsz	9,f
  9620  169A  2E95               	goto	u2675
  9621  169B  0829               	movf	___aldiv@divisor+3,w
  9622  169C  022D               	subwf	___aldiv@dividend+3,w
  9623  169D  1D03               	skipz
  9624  169E  2EA9               	goto	u2685
  9625  169F  0828               	movf	___aldiv@divisor+2,w
  9626  16A0  022C               	subwf	___aldiv@dividend+2,w
  9627  16A1  1D03               	skipz
  9628  16A2  2EA9               	goto	u2685
  9629  16A3  0827               	movf	___aldiv@divisor+1,w
  9630  16A4  022B               	subwf	___aldiv@dividend+1,w
  9631  16A5  1D03               	skipz
  9632  16A6  2EA9               	goto	u2685
  9633  16A7  0826               	movf	___aldiv@divisor,w
  9634  16A8  022A               	subwf	___aldiv@dividend,w
  9635  16A9                     u2685:	
  9636  16A9  1C03               	skipc
  9637  16AA  2EB4               	goto	l3406
  9638  16AB  0826               	movf	___aldiv@divisor,w
  9639  16AC  02AA               	subwf	___aldiv@dividend,f
  9640  16AD  0827               	movf	___aldiv@divisor+1,w
  9641  16AE  3BAB               	subwfb	___aldiv@dividend+1,f
  9642  16AF  0828               	movf	___aldiv@divisor+2,w
  9643  16B0  3BAC               	subwfb	___aldiv@dividend+2,f
  9644  16B1  0829               	movf	___aldiv@divisor+3,w
  9645  16B2  3BAD               	subwfb	___aldiv@dividend+3,f
  9646  16B3  1431               	bsf	___aldiv@quotient,0
  9647  16B4                     l3406:	
  9648  16B4  3001               	movlw	1
  9649  16B5                     u2695:	
  9650  16B5  36A9               	lsrf	___aldiv@divisor+3,f
  9651  16B6  0CA8               	rrf	___aldiv@divisor+2,f
  9652  16B7  0CA7               	rrf	___aldiv@divisor+1,f
  9653  16B8  0CA6               	rrf	___aldiv@divisor,f
  9654  16B9  0B89               	decfsz	9,f
  9655  16BA  2EB5               	goto	u2695
  9656  16BB  3001               	movlw	1
  9657  16BC  02AF               	subwf	___aldiv@counter,f
  9658  16BD  1D03               	btfss	3,2
  9659  16BE  2E94               	goto	l3398
  9660  16BF                     l3410:	
  9661  16BF  0830               	movf	___aldiv@sign,w
  9662  16C0  1903               	btfsc	3,2
  9663  16C1  2ECD               	goto	l3414
  9664  16C2  09B1               	comf	___aldiv@quotient,f
  9665  16C3  09B2               	comf	___aldiv@quotient+1,f
  9666  16C4  09B3               	comf	___aldiv@quotient+2,f
  9667  16C5  09B4               	comf	___aldiv@quotient+3,f
  9668  16C6  0AB1               	incf	___aldiv@quotient,f
  9669  16C7  1903               	skipnz
  9670  16C8  0AB2               	incf	___aldiv@quotient+1,f
  9671  16C9  1903               	skipnz
  9672  16CA  0AB3               	incf	___aldiv@quotient+2,f
  9673  16CB  1903               	skipnz
  9674  16CC  0AB4               	incf	___aldiv@quotient+3,f
  9675  16CD                     l3414:	
  9676  16CD  0834               	movf	___aldiv@quotient+3,w
  9677  16CE  00A9               	movwf	?___aldiv+3
  9678  16CF  0833               	movf	___aldiv@quotient+2,w
  9679  16D0  00A8               	movwf	?___aldiv+2
  9680  16D1  0832               	movf	___aldiv@quotient+1,w
  9681  16D2  00A7               	movwf	?___aldiv+1
  9682  16D3  0831               	movf	___aldiv@quotient,w
  9683  16D4  00A6               	movwf	?___aldiv
  9684  16D5  0008               	return
  9685  16D6                     __end_of___aldiv:	
  9686                           
  9687                           	psect	text20
  9688  16D6                     __ptext20:	
  9689 ;; *************** function _map *****************
  9690 ;; Defined at:
  9691 ;;		line 165 in file "user.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  x               3   53[BANK0 ] float 
  9694 ;;  in_min          3   56[BANK0 ] float 
  9695 ;;  in_max          3   59[BANK0 ] float 
  9696 ;;  out_min         3   62[BANK0 ] float 
  9697 ;;  out_max         3   65[BANK0 ] float 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  3   53[BANK0 ] float 
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, status,0, pclath, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9709 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9710 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9712 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9713 ;;Total ram usage:       18 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    4
  9716 ;; This function calls:
  9717 ;;		___ftadd
  9718 ;;		___ftdiv
  9719 ;;		___ftmul
  9720 ;;		___ftneg
  9721 ;; This function is called by:
  9722 ;;		_main
  9723 ;; This function uses a non-reentrant model
  9724 ;;
  9725                           
  9726                           
  9727                           ;psect for function _map
  9728  16D6                     _map:	
  9729                           
  9730                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9731                           
  9732                           ;incstack = 0
  9733                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9734  16D6  0020               	movlb	0	; select bank0
  9735  16D7  085B               	movf	map@in_max,w
  9736  16D8  00A8               	movwf	___ftadd@f1
  9737  16D9  085C               	movf	map@in_max+1,w
  9738  16DA  00A9               	movwf	___ftadd@f1+1
  9739  16DB  085D               	movf	map@in_max+2,w
  9740  16DC  00AA               	movwf	___ftadd@f1+2
  9741  16DD  0858               	movf	map@in_min,w
  9742  16DE  00A0               	movwf	___ftneg@f1
  9743  16DF  0859               	movf	map@in_min+1,w
  9744  16E0  00A1               	movwf	___ftneg@f1+1
  9745  16E1  085A               	movf	map@in_min+2,w
  9746  16E2  00A2               	movwf	___ftneg@f1+2
  9747  16E3  319E  26B3  3196   	fcall	___ftneg
  9748  16E6  0020               	movlb	0	; select bank0
  9749  16E7  0820               	movf	?___ftneg,w
  9750  16E8  00AB               	movwf	___ftadd@f2
  9751  16E9  0821               	movf	?___ftneg+1,w
  9752  16EA  00AC               	movwf	___ftadd@f2+1
  9753  16EB  0822               	movf	?___ftneg+2,w
  9754  16EC  00AD               	movwf	___ftadd@f2+2
  9755  16ED  3189  21D9  3196   	fcall	___ftadd
  9756  16F0  0020               	movlb	0	; select bank0
  9757  16F1  0828               	movf	?___ftadd,w
  9758  16F2  00C5               	movwf	___ftdiv@f2
  9759  16F3  0829               	movf	?___ftadd+1,w
  9760  16F4  00C6               	movwf	___ftdiv@f2+1
  9761  16F5  082A               	movf	?___ftadd+2,w
  9762  16F6  00C7               	movwf	___ftdiv@f2+2
  9763  16F7  0861               	movf	map@out_max,w
  9764  16F8  00A8               	movwf	___ftadd@f1
  9765  16F9  0862               	movf	map@out_max+1,w
  9766  16FA  00A9               	movwf	___ftadd@f1+1
  9767  16FB  0863               	movf	map@out_max+2,w
  9768  16FC  00AA               	movwf	___ftadd@f1+2
  9769  16FD  085E               	movf	map@out_min,w
  9770  16FE  00A0               	movwf	___ftneg@f1
  9771  16FF  085F               	movf	map@out_min+1,w
  9772  1700  00A1               	movwf	___ftneg@f1+1
  9773  1701  0860               	movf	map@out_min+2,w
  9774  1702  00A2               	movwf	___ftneg@f1+2
  9775  1703  319E  26B3  3196   	fcall	___ftneg
  9776  1706  0020               	movlb	0	; select bank0
  9777  1707  0820               	movf	?___ftneg,w
  9778  1708  00AB               	movwf	___ftadd@f2
  9779  1709  0821               	movf	?___ftneg+1,w
  9780  170A  00AC               	movwf	___ftadd@f2+1
  9781  170B  0822               	movf	?___ftneg+2,w
  9782  170C  00AD               	movwf	___ftadd@f2+2
  9783  170D  3189  21D9  3196   	fcall	___ftadd
  9784  1710  0020               	movlb	0	; select bank0
  9785  1711  0828               	movf	?___ftadd,w
  9786  1712  00B5               	movwf	___ftmul@f1
  9787  1713  0829               	movf	?___ftadd+1,w
  9788  1714  00B6               	movwf	___ftmul@f1+1
  9789  1715  082A               	movf	?___ftadd+2,w
  9790  1716  00B7               	movwf	___ftmul@f1+2
  9791  1717  0855               	movf	map@x,w
  9792  1718  00A8               	movwf	___ftadd@f1
  9793  1719  0856               	movf	map@x+1,w
  9794  171A  00A9               	movwf	___ftadd@f1+1
  9795  171B  0857               	movf	map@x+2,w
  9796  171C  00AA               	movwf	___ftadd@f1+2
  9797  171D  0858               	movf	map@in_min,w
  9798  171E  00A0               	movwf	___ftneg@f1
  9799  171F  0859               	movf	map@in_min+1,w
  9800  1720  00A1               	movwf	___ftneg@f1+1
  9801  1721  085A               	movf	map@in_min+2,w
  9802  1722  00A2               	movwf	___ftneg@f1+2
  9803  1723  319E  26B3  3196   	fcall	___ftneg
  9804  1726  0020               	movlb	0	; select bank0
  9805  1727  0820               	movf	?___ftneg,w
  9806  1728  00AB               	movwf	___ftadd@f2
  9807  1729  0821               	movf	?___ftneg+1,w
  9808  172A  00AC               	movwf	___ftadd@f2+1
  9809  172B  0822               	movf	?___ftneg+2,w
  9810  172C  00AD               	movwf	___ftadd@f2+2
  9811  172D  3189  21D9  3196   	fcall	___ftadd
  9812  1730  0020               	movlb	0	; select bank0
  9813  1731  0828               	movf	?___ftadd,w
  9814  1732  00B8               	movwf	___ftmul@f2
  9815  1733  0829               	movf	?___ftadd+1,w
  9816  1734  00B9               	movwf	___ftmul@f2+1
  9817  1735  082A               	movf	?___ftadd+2,w
  9818  1736  00BA               	movwf	___ftmul@f2+2
  9819  1737  3187  2728  3196   	fcall	___ftmul
  9820  173A  0020               	movlb	0	; select bank0
  9821  173B  0835               	movf	?___ftmul,w
  9822  173C  00C8               	movwf	___ftdiv@f1
  9823  173D  0836               	movf	?___ftmul+1,w
  9824  173E  00C9               	movwf	___ftdiv@f1+1
  9825  173F  0837               	movf	?___ftmul+2,w
  9826  1740  00CA               	movwf	___ftdiv@f1+2
  9827  1741  3188  204D  3196   	fcall	___ftdiv
  9828  1744  0020               	movlb	0	; select bank0
  9829  1745  0845               	movf	?___ftdiv,w
  9830  1746  00E4               	movwf	_map$2078
  9831  1747  0846               	movf	?___ftdiv+1,w
  9832  1748  00E5               	movwf	_map$2078+1
  9833  1749  0847               	movf	?___ftdiv+2,w
  9834  174A  00E6               	movwf	_map$2078+2
  9835                           
  9836                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9837  174B  085E               	movf	map@out_min,w
  9838  174C  00A8               	movwf	___ftadd@f1
  9839  174D  085F               	movf	map@out_min+1,w
  9840  174E  00A9               	movwf	___ftadd@f1+1
  9841  174F  0860               	movf	map@out_min+2,w
  9842  1750  00AA               	movwf	___ftadd@f1+2
  9843  1751  0864               	movf	_map$2078,w
  9844  1752  00AB               	movwf	___ftadd@f2
  9845  1753  0865               	movf	_map$2078+1,w
  9846  1754  00AC               	movwf	___ftadd@f2+1
  9847  1755  0866               	movf	_map$2078+2,w
  9848  1756  00AD               	movwf	___ftadd@f2+2
  9849  1757  3189  21D9         	fcall	___ftadd
  9850  1759  0020               	movlb	0	; select bank0
  9851  175A  0828               	movf	?___ftadd,w
  9852  175B  00D5               	movwf	?_map
  9853  175C  0829               	movf	?___ftadd+1,w
  9854  175D  00D6               	movwf	?_map+1
  9855  175E  082A               	movf	?___ftadd+2,w
  9856  175F  00D7               	movwf	?_map+2
  9857  1760  0008               	return
  9858  1761                     __end_of_map:	
  9859                           
  9860                           	psect	text21
  9861  1EB3                     __ptext21:	
  9862 ;; *************** function ___ftneg *****************
  9863 ;; Defined at:
  9864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  f1              3    0[BANK0 ] float 
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;		None
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  3    0[BANK0 ] float 
  9871 ;; Registers used:
  9872 ;;		wreg
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9878 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9881 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9882 ;;Total ram usage:        3 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:    2
  9885 ;; This function calls:
  9886 ;;		Nothing
  9887 ;; This function is called by:
  9888 ;;		_map
  9889 ;; This function uses a non-reentrant model
  9890 ;;
  9891                           
  9892                           
  9893                           ;psect for function ___ftneg
  9894  1EB3                     ___ftneg:	
  9895                           
  9896                           ;incstack = 0
  9897                           ; Regs used in ___ftneg: [wreg]
  9898  1EB3  0020               	movlb	0	; select bank0
  9899  1EB4  0822               	movf	___ftneg@f1+2,w
  9900  1EB5  0421               	iorwf	___ftneg@f1+1,w
  9901  1EB6  0420               	iorwf	___ftneg@f1,w
  9902  1EB7  1903               	skipnz
  9903  1EB8  0008               	return
  9904  1EB9  3080               	movlw	128
  9905  1EBA  06A2               	xorwf	___ftneg@f1+2,f
  9906  1EBB  0008               	return
  9907  1EBC                     __end_of___ftneg:	
  9908                           
  9909                           	psect	text22
  9910  0728                     __ptext22:	
  9911 ;; *************** function ___ftmul *****************
  9912 ;; Defined at:
  9913 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  f1              3   21[BANK0 ] float 
  9916 ;;  f2              3   24[BANK0 ] float 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  9919 ;;  sign            1   36[BANK0 ] unsigned char 
  9920 ;;  cntr            1   35[BANK0 ] unsigned char 
  9921 ;;  exp             1   31[BANK0 ] unsigned char 
  9922 ;; Return value:  Size  Location     Type
  9923 ;;                  3   21[BANK0 ] float 
  9924 ;; Registers used:
  9925 ;;		wreg, status,2, status,0, pclath, cstack
  9926 ;; Tracked objects:
  9927 ;;		On entry : 0/0
  9928 ;;		On exit  : 0/0
  9929 ;;		Unchanged: 0/0
  9930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9931 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9932 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9933 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9934 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9935 ;;Total ram usage:       16 bytes
  9936 ;; Hardware stack levels used:    1
  9937 ;; Hardware stack levels required when called:    3
  9938 ;; This function calls:
  9939 ;;		___ftpack
  9940 ;; This function is called by:
  9941 ;;		_set_subdivision
  9942 ;;		_map
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function ___ftmul
  9948  0728                     ___ftmul:	
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9952  0728  0020               	movlb	0	; select bank0
  9953  0729  0835               	movf	___ftmul@f1,w
  9954  072A  00BB               	movwf	??___ftmul
  9955  072B  0836               	movf	___ftmul@f1+1,w
  9956  072C  00BC               	movwf	??___ftmul+1
  9957  072D  0837               	movf	___ftmul@f1+2,w
  9958  072E  00BD               	movwf	??___ftmul+2
  9959  072F  1003               	clrc
  9960  0730  0D3C               	rlf	??___ftmul+1,w
  9961  0731  0D3D               	rlf	??___ftmul+2,w
  9962  0732  00BE               	movwf	??___ftmul+3
  9963  0733  083E               	movf	??___ftmul+3,w
  9964  0734  00BF               	movwf	___ftmul@exp
  9965  0735  083F               	movf	___ftmul@exp,w
  9966  0736  1D03               	btfss	3,2
  9967  0737  2F3F               	goto	l3548
  9968  0738  3000               	movlw	0
  9969  0739  00B5               	movwf	?___ftmul
  9970  073A  3000               	movlw	0
  9971  073B  00B6               	movwf	?___ftmul+1
  9972  073C  3000               	movlw	0
  9973  073D  00B7               	movwf	?___ftmul+2
  9974  073E  0008               	return
  9975  073F                     l3548:	
  9976  073F  0838               	movf	___ftmul@f2,w
  9977  0740  00BB               	movwf	??___ftmul
  9978  0741  0839               	movf	___ftmul@f2+1,w
  9979  0742  00BC               	movwf	??___ftmul+1
  9980  0743  083A               	movf	___ftmul@f2+2,w
  9981  0744  00BD               	movwf	??___ftmul+2
  9982  0745  1003               	clrc
  9983  0746  0D3C               	rlf	??___ftmul+1,w
  9984  0747  0D3D               	rlf	??___ftmul+2,w
  9985  0748  00BE               	movwf	??___ftmul+3
  9986  0749  083E               	movf	??___ftmul+3,w
  9987  074A  00C4               	movwf	___ftmul@sign
  9988  074B  0844               	movf	___ftmul@sign,w
  9989  074C  1D03               	btfss	3,2
  9990  074D  2F55               	goto	l3554
  9991  074E  3000               	movlw	0
  9992  074F  00B5               	movwf	?___ftmul
  9993  0750  3000               	movlw	0
  9994  0751  00B6               	movwf	?___ftmul+1
  9995  0752  3000               	movlw	0
  9996  0753  00B7               	movwf	?___ftmul+2
  9997  0754  0008               	return
  9998  0755                     l3554:	
  9999  0755  0844               	movf	___ftmul@sign,w
 10000  0756  3E7B               	addlw	123
 10001  0757  00BB               	movwf	??___ftmul
 10002  0758  083B               	movf	??___ftmul,w
 10003  0759  07BF               	addwf	___ftmul@exp,f
 10004  075A  0835               	movf	___ftmul@f1,w
 10005  075B  00BB               	movwf	??___ftmul
 10006  075C  0836               	movf	___ftmul@f1+1,w
 10007  075D  00BC               	movwf	??___ftmul+1
 10008  075E  0837               	movf	___ftmul@f1+2,w
 10009  075F  00BD               	movwf	??___ftmul+2
 10010  0760  3010               	movlw	16
 10011  0761                     u3065:	
 10012  0761  36BD               	lsrf	??___ftmul+2,f
 10013  0762  0CBC               	rrf	??___ftmul+1,f
 10014  0763  0CBB               	rrf	??___ftmul,f
 10015  0764  0B89               	decfsz	9,f
 10016  0765  2F61               	goto	u3065
 10017  0766  083B               	movf	??___ftmul,w
 10018  0767  00BE               	movwf	??___ftmul+3
 10019  0768  083E               	movf	??___ftmul+3,w
 10020  0769  00C4               	movwf	___ftmul@sign
 10021  076A  0838               	movf	___ftmul@f2,w
 10022  076B  00BB               	movwf	??___ftmul
 10023  076C  0839               	movf	___ftmul@f2+1,w
 10024  076D  00BC               	movwf	??___ftmul+1
 10025  076E  083A               	movf	___ftmul@f2+2,w
 10026  076F  00BD               	movwf	??___ftmul+2
 10027  0770  3010               	movlw	16
 10028  0771                     u3075:	
 10029  0771  36BD               	lsrf	??___ftmul+2,f
 10030  0772  0CBC               	rrf	??___ftmul+1,f
 10031  0773  0CBB               	rrf	??___ftmul,f
 10032  0774  0B89               	decfsz	9,f
 10033  0775  2F71               	goto	u3075
 10034  0776  083B               	movf	??___ftmul,w
 10035  0777  00BE               	movwf	??___ftmul+3
 10036  0778  083E               	movf	??___ftmul+3,w
 10037  0779  06C4               	xorwf	___ftmul@sign,f
 10038  077A  3080               	movlw	128
 10039  077B  00BB               	movwf	??___ftmul
 10040  077C  083B               	movf	??___ftmul,w
 10041  077D  05C4               	andwf	___ftmul@sign,f
 10042  077E  17B6               	bsf	___ftmul@f1+1,7
 10043  077F  17B9               	bsf	___ftmul@f2+1,7
 10044  0780  30FF               	movlw	255
 10045  0781  05B8               	andwf	___ftmul@f2,f
 10046  0782  30FF               	movlw	255
 10047  0783  05B9               	andwf	___ftmul@f2+1,f
 10048  0784  3000               	movlw	0
 10049  0785  05BA               	andwf	___ftmul@f2+2,f
 10050  0786  3000               	movlw	0
 10051  0787  00C0               	movwf	___ftmul@f3_as_product
 10052  0788  3000               	movlw	0
 10053  0789  00C1               	movwf	___ftmul@f3_as_product+1
 10054  078A  3000               	movlw	0
 10055  078B  00C2               	movwf	___ftmul@f3_as_product+2
 10056  078C  3007               	movlw	7
 10057  078D  00BB               	movwf	??___ftmul
 10058  078E  083B               	movf	??___ftmul,w
 10059  078F  00C3               	movwf	___ftmul@cntr
 10060  0790                     l3566:	
 10061  0790  1C35               	btfss	___ftmul@f1,0
 10062  0791  2F98               	goto	l3570
 10063  0792  0838               	movf	___ftmul@f2,w
 10064  0793  07C0               	addwf	___ftmul@f3_as_product,f
 10065  0794  0839               	movf	___ftmul@f2+1,w
 10066  0795  3DC1               	addwfc	___ftmul@f3_as_product+1,f
 10067  0796  083A               	movf	___ftmul@f2+2,w
 10068  0797  3DC2               	addwfc	___ftmul@f3_as_product+2,f
 10069  0798                     l3570:	
 10070  0798  3001               	movlw	1
 10071  0799                     u3095:	
 10072  0799  36B7               	lsrf	___ftmul@f1+2,f
 10073  079A  0CB6               	rrf	___ftmul@f1+1,f
 10074  079B  0CB5               	rrf	___ftmul@f1,f
 10075  079C  0B89               	decfsz	9,f
 10076  079D  2F99               	goto	u3095
 10077  079E  3001               	movlw	1
 10078  079F                     u3105:	
 10079  079F  35B8               	lslf	___ftmul@f2,f
 10080  07A0  0DB9               	rlf	___ftmul@f2+1,f
 10081  07A1  0DBA               	rlf	___ftmul@f2+2,f
 10082  07A2  0B89               	decfsz	9,f
 10083  07A3  2F9F               	goto	u3105
 10084  07A4  3001               	movlw	1
 10085  07A5  02C3               	subwf	___ftmul@cntr,f
 10086  07A6  1D03               	btfss	3,2
 10087  07A7  2F90               	goto	l3566
 10088  07A8  3009               	movlw	9
 10089  07A9  00BB               	movwf	??___ftmul
 10090  07AA  083B               	movf	??___ftmul,w
 10091  07AB  00C3               	movwf	___ftmul@cntr
 10092  07AC                     l3578:	
 10093  07AC  1C35               	btfss	___ftmul@f1,0
 10094  07AD  2FB4               	goto	l3582
 10095  07AE  0838               	movf	___ftmul@f2,w
 10096  07AF  07C0               	addwf	___ftmul@f3_as_product,f
 10097  07B0  0839               	movf	___ftmul@f2+1,w
 10098  07B1  3DC1               	addwfc	___ftmul@f3_as_product+1,f
 10099  07B2  083A               	movf	___ftmul@f2+2,w
 10100  07B3  3DC2               	addwfc	___ftmul@f3_as_product+2,f
 10101  07B4                     l3582:	
 10102  07B4  3001               	movlw	1
 10103  07B5                     u3135:	
 10104  07B5  36B7               	lsrf	___ftmul@f1+2,f
 10105  07B6  0CB6               	rrf	___ftmul@f1+1,f
 10106  07B7  0CB5               	rrf	___ftmul@f1,f
 10107  07B8  0B89               	decfsz	9,f
 10108  07B9  2FB5               	goto	u3135
 10109  07BA  3001               	movlw	1
 10110  07BB                     u3145:	
 10111  07BB  36C2               	lsrf	___ftmul@f3_as_product+2,f
 10112  07BC  0CC1               	rrf	___ftmul@f3_as_product+1,f
 10113  07BD  0CC0               	rrf	___ftmul@f3_as_product,f
 10114  07BE  0B89               	decfsz	9,f
 10115  07BF  2FBB               	goto	u3145
 10116  07C0  3001               	movlw	1
 10117  07C1  02C3               	subwf	___ftmul@cntr,f
 10118  07C2  1D03               	btfss	3,2
 10119  07C3  2FAC               	goto	l3578
 10120  07C4  0840               	movf	___ftmul@f3_as_product,w
 10121  07C5  00A0               	movwf	___ftpack@arg
 10122  07C6  0841               	movf	___ftmul@f3_as_product+1,w
 10123  07C7  00A1               	movwf	___ftpack@arg+1
 10124  07C8  0842               	movf	___ftmul@f3_as_product+2,w
 10125  07C9  00A2               	movwf	___ftpack@arg+2
 10126  07CA  083F               	movf	___ftmul@exp,w
 10127  07CB  00BB               	movwf	??___ftmul
 10128  07CC  083B               	movf	??___ftmul,w
 10129  07CD  00A3               	movwf	___ftpack@exp
 10130  07CE  0844               	movf	___ftmul@sign,w
 10131  07CF  00BC               	movwf	??___ftmul+1
 10132  07D0  083C               	movf	??___ftmul+1,w
 10133  07D1  00A4               	movwf	___ftpack@sign
 10134  07D2  3195  2580         	fcall	___ftpack
 10135  07D4  0020               	movlb	0	; select bank0
 10136  07D5  0820               	movf	?___ftpack,w
 10137  07D6  00B5               	movwf	?___ftmul
 10138  07D7  0821               	movf	?___ftpack+1,w
 10139  07D8  00B6               	movwf	?___ftmul+1
 10140  07D9  0822               	movf	?___ftpack+2,w
 10141  07DA  00B7               	movwf	?___ftmul+2
 10142  07DB  0008               	return
 10143  07DC                     __end_of___ftmul:	
 10144                           
 10145                           	psect	text23
 10146  084D                     __ptext23:	
 10147 ;; *************** function ___ftdiv *****************
 10148 ;; Defined at:
 10149 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;  f2              3   37[BANK0 ] float 
 10152 ;;  f1              3   40[BANK0 ] float 
 10153 ;; Auto vars:     Size  Location     Type
 10154 ;;  f3              3   48[BANK0 ] float 
 10155 ;;  sign            1   52[BANK0 ] unsigned char 
 10156 ;;  exp             1   51[BANK0 ] unsigned char 
 10157 ;;  cntr            1   47[BANK0 ] unsigned char 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  3   37[BANK0 ] float 
 10160 ;; Registers used:
 10161 ;;		wreg, status,2, status,0, pclath, cstack
 10162 ;; Tracked objects:
 10163 ;;		On entry : 0/0
 10164 ;;		On exit  : 0/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10167 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10168 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10169 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10170 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10171 ;;Total ram usage:       16 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    3
 10174 ;; This function calls:
 10175 ;;		___ftpack
 10176 ;; This function is called by:
 10177 ;;		_main
 10178 ;;		_map
 10179 ;; This function uses a non-reentrant model
 10180 ;;
 10181                           
 10182                           
 10183                           ;psect for function ___ftdiv
 10184  084D                     ___ftdiv:	
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 10188  084D  0020               	movlb	0	; select bank0
 10189  084E  0848               	movf	___ftdiv@f1,w
 10190  084F  00CB               	movwf	??___ftdiv
 10191  0850  0849               	movf	___ftdiv@f1+1,w
 10192  0851  00CC               	movwf	??___ftdiv+1
 10193  0852  084A               	movf	___ftdiv@f1+2,w
 10194  0853  00CD               	movwf	??___ftdiv+2
 10195  0854  1003               	clrc
 10196  0855  0D4C               	rlf	??___ftdiv+1,w
 10197  0856  0D4D               	rlf	??___ftdiv+2,w
 10198  0857  00CE               	movwf	??___ftdiv+3
 10199  0858  084E               	movf	??___ftdiv+3,w
 10200  0859  00D3               	movwf	___ftdiv@exp
 10201  085A  0853               	movf	___ftdiv@exp,w
 10202  085B  1D03               	btfss	3,2
 10203  085C  2864               	goto	l3506
 10204  085D  3000               	movlw	0
 10205  085E  00C5               	movwf	?___ftdiv
 10206  085F  3000               	movlw	0
 10207  0860  00C6               	movwf	?___ftdiv+1
 10208  0861  3000               	movlw	0
 10209  0862  00C7               	movwf	?___ftdiv+2
 10210  0863  0008               	return
 10211  0864                     l3506:	
 10212  0864  0845               	movf	___ftdiv@f2,w
 10213  0865  00CB               	movwf	??___ftdiv
 10214  0866  0846               	movf	___ftdiv@f2+1,w
 10215  0867  00CC               	movwf	??___ftdiv+1
 10216  0868  0847               	movf	___ftdiv@f2+2,w
 10217  0869  00CD               	movwf	??___ftdiv+2
 10218  086A  1003               	clrc
 10219  086B  0D4C               	rlf	??___ftdiv+1,w
 10220  086C  0D4D               	rlf	??___ftdiv+2,w
 10221  086D  00CE               	movwf	??___ftdiv+3
 10222  086E  084E               	movf	??___ftdiv+3,w
 10223  086F  00D4               	movwf	___ftdiv@sign
 10224  0870  0854               	movf	___ftdiv@sign,w
 10225  0871  1D03               	btfss	3,2
 10226  0872  287A               	goto	l3512
 10227  0873  3000               	movlw	0
 10228  0874  00C5               	movwf	?___ftdiv
 10229  0875  3000               	movlw	0
 10230  0876  00C6               	movwf	?___ftdiv+1
 10231  0877  3000               	movlw	0
 10232  0878  00C7               	movwf	?___ftdiv+2
 10233  0879  0008               	return
 10234  087A                     l3512:	
 10235  087A  3000               	movlw	0
 10236  087B  00D0               	movwf	___ftdiv@f3
 10237  087C  3000               	movlw	0
 10238  087D  00D1               	movwf	___ftdiv@f3+1
 10239  087E  3000               	movlw	0
 10240  087F  00D2               	movwf	___ftdiv@f3+2
 10241  0880  3089               	movlw	137
 10242  0881  0754               	addwf	___ftdiv@sign,w
 10243  0882  00CB               	movwf	??___ftdiv
 10244  0883  084B               	movf	??___ftdiv,w
 10245  0884  02D3               	subwf	___ftdiv@exp,f
 10246  0885  0848               	movf	___ftdiv@f1,w
 10247  0886  00CB               	movwf	??___ftdiv
 10248  0887  0849               	movf	___ftdiv@f1+1,w
 10249  0888  00CC               	movwf	??___ftdiv+1
 10250  0889  084A               	movf	___ftdiv@f1+2,w
 10251  088A  00CD               	movwf	??___ftdiv+2
 10252  088B  3010               	movlw	16
 10253  088C                     u2985:	
 10254  088C  36CD               	lsrf	??___ftdiv+2,f
 10255  088D  0CCC               	rrf	??___ftdiv+1,f
 10256  088E  0CCB               	rrf	??___ftdiv,f
 10257  088F  0B89               	decfsz	9,f
 10258  0890  288C               	goto	u2985
 10259  0891  084B               	movf	??___ftdiv,w
 10260  0892  00CE               	movwf	??___ftdiv+3
 10261  0893  084E               	movf	??___ftdiv+3,w
 10262  0894  00D4               	movwf	___ftdiv@sign
 10263  0895  0845               	movf	___ftdiv@f2,w
 10264  0896  00CB               	movwf	??___ftdiv
 10265  0897  0846               	movf	___ftdiv@f2+1,w
 10266  0898  00CC               	movwf	??___ftdiv+1
 10267  0899  0847               	movf	___ftdiv@f2+2,w
 10268  089A  00CD               	movwf	??___ftdiv+2
 10269  089B  3010               	movlw	16
 10270  089C                     u2995:	
 10271  089C  36CD               	lsrf	??___ftdiv+2,f
 10272  089D  0CCC               	rrf	??___ftdiv+1,f
 10273  089E  0CCB               	rrf	??___ftdiv,f
 10274  089F  0B89               	decfsz	9,f
 10275  08A0  289C               	goto	u2995
 10276  08A1  084B               	movf	??___ftdiv,w
 10277  08A2  00CE               	movwf	??___ftdiv+3
 10278  08A3  084E               	movf	??___ftdiv+3,w
 10279  08A4  06D4               	xorwf	___ftdiv@sign,f
 10280  08A5  3080               	movlw	128
 10281  08A6  00CB               	movwf	??___ftdiv
 10282  08A7  084B               	movf	??___ftdiv,w
 10283  08A8  05D4               	andwf	___ftdiv@sign,f
 10284  08A9  17C9               	bsf	___ftdiv@f1+1,7
 10285  08AA  30FF               	movlw	255
 10286  08AB  05C8               	andwf	___ftdiv@f1,f
 10287  08AC  30FF               	movlw	255
 10288  08AD  05C9               	andwf	___ftdiv@f1+1,f
 10289  08AE  3000               	movlw	0
 10290  08AF  05CA               	andwf	___ftdiv@f1+2,f
 10291  08B0  17C6               	bsf	___ftdiv@f2+1,7
 10292  08B1  30FF               	movlw	255
 10293  08B2  05C5               	andwf	___ftdiv@f2,f
 10294  08B3  30FF               	movlw	255
 10295  08B4  05C6               	andwf	___ftdiv@f2+1,f
 10296  08B5  3000               	movlw	0
 10297  08B6  05C7               	andwf	___ftdiv@f2+2,f
 10298  08B7  3018               	movlw	24
 10299  08B8  00CB               	movwf	??___ftdiv
 10300  08B9  084B               	movf	??___ftdiv,w
 10301  08BA  00CF               	movwf	___ftdiv@cntr
 10302  08BB                     l3526:	
 10303  08BB  3001               	movlw	1
 10304  08BC                     u3005:	
 10305  08BC  35D0               	lslf	___ftdiv@f3,f
 10306  08BD  0DD1               	rlf	___ftdiv@f3+1,f
 10307  08BE  0DD2               	rlf	___ftdiv@f3+2,f
 10308  08BF  0B89               	decfsz	9,f
 10309  08C0  28BC               	goto	u3005
 10310  08C1  0847               	movf	___ftdiv@f2+2,w
 10311  08C2  024A               	subwf	___ftdiv@f1+2,w
 10312  08C3  1D03               	skipz
 10313  08C4  28CB               	goto	u3015
 10314  08C5  0846               	movf	___ftdiv@f2+1,w
 10315  08C6  0249               	subwf	___ftdiv@f1+1,w
 10316  08C7  1D03               	skipz
 10317  08C8  28CB               	goto	u3015
 10318  08C9  0845               	movf	___ftdiv@f2,w
 10319  08CA  0248               	subwf	___ftdiv@f1,w
 10320  08CB                     u3015:	
 10321  08CB  1C03               	skipc
 10322  08CC  28D4               	goto	l3534
 10323  08CD  0845               	movf	___ftdiv@f2,w
 10324  08CE  02C8               	subwf	___ftdiv@f1,f
 10325  08CF  0846               	movf	___ftdiv@f2+1,w
 10326  08D0  3BC9               	subwfb	___ftdiv@f1+1,f
 10327  08D1  0847               	movf	___ftdiv@f2+2,w
 10328  08D2  3BCA               	subwfb	___ftdiv@f1+2,f
 10329  08D3  1450               	bsf	___ftdiv@f3,0
 10330  08D4                     l3534:	
 10331  08D4  3001               	movlw	1
 10332  08D5                     u3025:	
 10333  08D5  35C8               	lslf	___ftdiv@f1,f
 10334  08D6  0DC9               	rlf	___ftdiv@f1+1,f
 10335  08D7  0DCA               	rlf	___ftdiv@f1+2,f
 10336  08D8  0B89               	decfsz	9,f
 10337  08D9  28D5               	goto	u3025
 10338  08DA  3001               	movlw	1
 10339  08DB  02CF               	subwf	___ftdiv@cntr,f
 10340  08DC  1D03               	btfss	3,2
 10341  08DD  28BB               	goto	l3526
 10342  08DE  0850               	movf	___ftdiv@f3,w
 10343  08DF  00A0               	movwf	___ftpack@arg
 10344  08E0  0851               	movf	___ftdiv@f3+1,w
 10345  08E1  00A1               	movwf	___ftpack@arg+1
 10346  08E2  0852               	movf	___ftdiv@f3+2,w
 10347  08E3  00A2               	movwf	___ftpack@arg+2
 10348  08E4  0853               	movf	___ftdiv@exp,w
 10349  08E5  00CB               	movwf	??___ftdiv
 10350  08E6  084B               	movf	??___ftdiv,w
 10351  08E7  00A3               	movwf	___ftpack@exp
 10352  08E8  0854               	movf	___ftdiv@sign,w
 10353  08E9  00CC               	movwf	??___ftdiv+1
 10354  08EA  084C               	movf	??___ftdiv+1,w
 10355  08EB  00A4               	movwf	___ftpack@sign
 10356  08EC  3195  2580         	fcall	___ftpack
 10357  08EE  0020               	movlb	0	; select bank0
 10358  08EF  0820               	movf	?___ftpack,w
 10359  08F0  00C5               	movwf	?___ftdiv
 10360  08F1  0821               	movf	?___ftpack+1,w
 10361  08F2  00C6               	movwf	?___ftdiv+1
 10362  08F3  0822               	movf	?___ftpack+2,w
 10363  08F4  00C7               	movwf	?___ftdiv+2
 10364  08F5  0008               	return
 10365  08F6                     __end_of___ftdiv:	
 10366                           
 10367                           	psect	text24
 10368  09D9                     __ptext24:	
 10369 ;; *************** function ___ftadd *****************
 10370 ;; Defined at:
 10371 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10372 ;; Parameters:    Size  Location     Type
 10373 ;;  f1              3    8[BANK0 ] float 
 10374 ;;  f2              3   11[BANK0 ] float 
 10375 ;; Auto vars:     Size  Location     Type
 10376 ;;  exp1            1   20[BANK0 ] unsigned char 
 10377 ;;  exp2            1   19[BANK0 ] unsigned char 
 10378 ;;  sign            1   18[BANK0 ] unsigned char 
 10379 ;; Return value:  Size  Location     Type
 10380 ;;                  3    8[BANK0 ] float 
 10381 ;; Registers used:
 10382 ;;		wreg, status,2, status,0, pclath, cstack
 10383 ;; Tracked objects:
 10384 ;;		On entry : 0/0
 10385 ;;		On exit  : 0/0
 10386 ;;		Unchanged: 0/0
 10387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10388 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10389 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10390 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10391 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10392 ;;Total ram usage:       13 bytes
 10393 ;; Hardware stack levels used:    1
 10394 ;; Hardware stack levels required when called:    3
 10395 ;; This function calls:
 10396 ;;		___ftpack
 10397 ;; This function is called by:
 10398 ;;		_map
 10399 ;; This function uses a non-reentrant model
 10400 ;;
 10401                           
 10402                           
 10403                           ;psect for function ___ftadd
 10404  09D9                     ___ftadd:	
 10405                           
 10406                           ;incstack = 0
 10407                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10408  09D9  0020               	movlb	0	; select bank0
 10409  09DA  0828               	movf	___ftadd@f1,w
 10410  09DB  00AE               	movwf	??___ftadd
 10411  09DC  0829               	movf	___ftadd@f1+1,w
 10412  09DD  00AF               	movwf	??___ftadd+1
 10413  09DE  082A               	movf	___ftadd@f1+2,w
 10414  09DF  00B0               	movwf	??___ftadd+2
 10415  09E0  1003               	clrc
 10416  09E1  0D2F               	rlf	??___ftadd+1,w
 10417  09E2  0D30               	rlf	??___ftadd+2,w
 10418  09E3  00B1               	movwf	??___ftadd+3
 10419  09E4  0831               	movf	??___ftadd+3,w
 10420  09E5  00B4               	movwf	___ftadd@exp1
 10421  09E6  082B               	movf	___ftadd@f2,w
 10422  09E7  00AE               	movwf	??___ftadd
 10423  09E8  082C               	movf	___ftadd@f2+1,w
 10424  09E9  00AF               	movwf	??___ftadd+1
 10425  09EA  082D               	movf	___ftadd@f2+2,w
 10426  09EB  00B0               	movwf	??___ftadd+2
 10427  09EC  1003               	clrc
 10428  09ED  0D2F               	rlf	??___ftadd+1,w
 10429  09EE  0D30               	rlf	??___ftadd+2,w
 10430  09EF  00B1               	movwf	??___ftadd+3
 10431  09F0  0831               	movf	??___ftadd+3,w
 10432  09F1  00B3               	movwf	___ftadd@exp2
 10433  09F2  0834               	movf	___ftadd@exp1,w
 10434  09F3  1903               	btfsc	3,2
 10435  09F4  2A01               	goto	l3436
 10436  09F5  0833               	movf	___ftadd@exp2,w
 10437  09F6  0234               	subwf	___ftadd@exp1,w
 10438  09F7  1803               	skipnc
 10439  09F8  2A08               	goto	l3440
 10440  09F9  0334               	decf	___ftadd@exp1,w
 10441  09FA  3AFF               	xorlw	255
 10442  09FB  0733               	addwf	___ftadd@exp2,w
 10443  09FC  00AE               	movwf	??___ftadd
 10444  09FD  3019               	movlw	25
 10445  09FE  022E               	subwf	??___ftadd,w
 10446  09FF  1C03               	skipc
 10447  0A00  2A08               	goto	l3440
 10448  0A01                     l3436:	
 10449  0A01  082B               	movf	___ftadd@f2,w
 10450  0A02  00A8               	movwf	?___ftadd
 10451  0A03  082C               	movf	___ftadd@f2+1,w
 10452  0A04  00A9               	movwf	?___ftadd+1
 10453  0A05  082D               	movf	___ftadd@f2+2,w
 10454  0A06  00AA               	movwf	?___ftadd+2
 10455  0A07  0008               	return
 10456  0A08                     l3440:	
 10457  0A08  0833               	movf	___ftadd@exp2,w
 10458  0A09  1903               	btfsc	3,2
 10459  0A0A  0008               	return
 10460  0A0B  0834               	movf	___ftadd@exp1,w
 10461  0A0C  0233               	subwf	___ftadd@exp2,w
 10462  0A0D  1803               	skipnc
 10463  0A0E  2A17               	goto	l3446
 10464  0A0F  0333               	decf	___ftadd@exp2,w
 10465  0A10  3AFF               	xorlw	255
 10466  0A11  0734               	addwf	___ftadd@exp1,w
 10467  0A12  00AE               	movwf	??___ftadd
 10468  0A13  3019               	movlw	25
 10469  0A14  022E               	subwf	??___ftadd,w
 10470  0A15  1803               	btfsc	3,0
 10471  0A16  0008               	return
 10472  0A17                     l3446:	
 10473  0A17  3006               	movlw	6
 10474  0A18  00AE               	movwf	??___ftadd
 10475  0A19  082E               	movf	??___ftadd,w
 10476  0A1A  00B2               	movwf	___ftadd@sign
 10477  0A1B  1BAA               	btfsc	___ftadd@f1+2,7
 10478  0A1C  17B2               	bsf	___ftadd@sign,7
 10479  0A1D  1BAD               	btfsc	___ftadd@f2+2,7
 10480  0A1E  1732               	bsf	___ftadd@sign,6
 10481  0A1F  17A9               	bsf	___ftadd@f1+1,7
 10482  0A20  30FF               	movlw	255
 10483  0A21  05A8               	andwf	___ftadd@f1,f
 10484  0A22  30FF               	movlw	255
 10485  0A23  05A9               	andwf	___ftadd@f1+1,f
 10486  0A24  3000               	movlw	0
 10487  0A25  05AA               	andwf	___ftadd@f1+2,f
 10488  0A26  17AC               	bsf	___ftadd@f2+1,7
 10489  0A27  30FF               	movlw	255
 10490  0A28  05AB               	andwf	___ftadd@f2,f
 10491  0A29  30FF               	movlw	255
 10492  0A2A  05AC               	andwf	___ftadd@f2+1,f
 10493  0A2B  3000               	movlw	0
 10494  0A2C  05AD               	andwf	___ftadd@f2+2,f
 10495  0A2D  0833               	movf	___ftadd@exp2,w
 10496  0A2E  0234               	subwf	___ftadd@exp1,w
 10497  0A2F  1803               	skipnc
 10498  0A30  2A53               	goto	l3468
 10499  0A31                     l3458:	
 10500  0A31  3001               	movlw	1
 10501  0A32                     u2825:	
 10502  0A32  35AB               	lslf	___ftadd@f2,f
 10503  0A33  0DAC               	rlf	___ftadd@f2+1,f
 10504  0A34  0DAD               	rlf	___ftadd@f2+2,f
 10505  0A35  0B89               	decfsz	9,f
 10506  0A36  2A32               	goto	u2825
 10507  0A37  3001               	movlw	1
 10508  0A38  02B3               	subwf	___ftadd@exp2,f
 10509  0A39  0833               	movf	___ftadd@exp2,w
 10510  0A3A  0634               	xorwf	___ftadd@exp1,w
 10511  0A3B  1903               	skipnz
 10512  0A3C  2A4E               	goto	l3466
 10513  0A3D  3001               	movlw	1
 10514  0A3E  02B2               	subwf	___ftadd@sign,f
 10515  0A3F  0832               	movf	___ftadd@sign,w
 10516  0A40  3907               	andlw	7
 10517  0A41  1903               	btfsc	3,2
 10518  0A42  2A4E               	goto	l3466
 10519  0A43  2A31               	goto	l3458
 10520  0A44                     l3464:	
 10521  0A44  3001               	movlw	1
 10522  0A45                     u2855:	
 10523  0A45  36AA               	lsrf	___ftadd@f1+2,f
 10524  0A46  0CA9               	rrf	___ftadd@f1+1,f
 10525  0A47  0CA8               	rrf	___ftadd@f1,f
 10526  0A48  0B89               	decfsz	9,f
 10527  0A49  2A45               	goto	u2855
 10528  0A4A  3001               	movlw	1
 10529  0A4B  00AE               	movwf	??___ftadd
 10530  0A4C  082E               	movf	??___ftadd,w
 10531  0A4D  07B4               	addwf	___ftadd@exp1,f
 10532  0A4E                     l3466:	
 10533  0A4E  0834               	movf	___ftadd@exp1,w
 10534  0A4F  0633               	xorwf	___ftadd@exp2,w
 10535  0A50  1903               	btfsc	3,2
 10536  0A51  2A78               	goto	l1402
 10537  0A52  2A44               	goto	l3464
 10538  0A53                     l3468:	
 10539  0A53  0834               	movf	___ftadd@exp1,w
 10540  0A54  0233               	subwf	___ftadd@exp2,w
 10541  0A55  1803               	skipnc
 10542  0A56  2A78               	goto	l1402
 10543  0A57                     l3470:	
 10544  0A57  3001               	movlw	1
 10545  0A58                     u2885:	
 10546  0A58  35A8               	lslf	___ftadd@f1,f
 10547  0A59  0DA9               	rlf	___ftadd@f1+1,f
 10548  0A5A  0DAA               	rlf	___ftadd@f1+2,f
 10549  0A5B  0B89               	decfsz	9,f
 10550  0A5C  2A58               	goto	u2885
 10551  0A5D  3001               	movlw	1
 10552  0A5E  02B4               	subwf	___ftadd@exp1,f
 10553  0A5F  0833               	movf	___ftadd@exp2,w
 10554  0A60  0634               	xorwf	___ftadd@exp1,w
 10555  0A61  1903               	skipnz
 10556  0A62  2A74               	goto	l3478
 10557  0A63  3001               	movlw	1
 10558  0A64  02B2               	subwf	___ftadd@sign,f
 10559  0A65  0832               	movf	___ftadd@sign,w
 10560  0A66  3907               	andlw	7
 10561  0A67  1903               	btfsc	3,2
 10562  0A68  2A74               	goto	l3478
 10563  0A69  2A57               	goto	l3470
 10564  0A6A                     l3476:	
 10565  0A6A  3001               	movlw	1
 10566  0A6B                     u2915:	
 10567  0A6B  36AD               	lsrf	___ftadd@f2+2,f
 10568  0A6C  0CAC               	rrf	___ftadd@f2+1,f
 10569  0A6D  0CAB               	rrf	___ftadd@f2,f
 10570  0A6E  0B89               	decfsz	9,f
 10571  0A6F  2A6B               	goto	u2915
 10572  0A70  3001               	movlw	1
 10573  0A71  00AE               	movwf	??___ftadd
 10574  0A72  082E               	movf	??___ftadd,w
 10575  0A73  07B3               	addwf	___ftadd@exp2,f
 10576  0A74                     l3478:	
 10577  0A74  0834               	movf	___ftadd@exp1,w
 10578  0A75  0633               	xorwf	___ftadd@exp2,w
 10579  0A76  1D03               	skipz
 10580  0A77  2A6A               	goto	l3476
 10581  0A78                     l1402:	
 10582  0A78  1FB2               	btfss	___ftadd@sign,7
 10583  0A79  2A8A               	goto	l3482
 10584  0A7A  30FF               	movlw	255
 10585  0A7B  06A8               	xorwf	___ftadd@f1,f
 10586  0A7C  30FF               	movlw	255
 10587  0A7D  06A9               	xorwf	___ftadd@f1+1,f
 10588  0A7E  30FF               	movlw	255
 10589  0A7F  06AA               	xorwf	___ftadd@f1+2,f
 10590  0A80  3001               	movlw	1
 10591  0A81  07A8               	addwf	___ftadd@f1,f
 10592  0A82  3000               	movlw	0
 10593  0A83  1803               	skipnc
 10594  0A84  3001               	movlw	1
 10595  0A85  07A9               	addwf	___ftadd@f1+1,f
 10596  0A86  3000               	movlw	0
 10597  0A87  1803               	skipnc
 10598  0A88  3001               	movlw	1
 10599  0A89  07AA               	addwf	___ftadd@f1+2,f
 10600  0A8A                     l3482:	
 10601  0A8A  1F32               	btfss	___ftadd@sign,6
 10602  0A8B  2A9C               	goto	l3486
 10603  0A8C  30FF               	movlw	255
 10604  0A8D  06AB               	xorwf	___ftadd@f2,f
 10605  0A8E  30FF               	movlw	255
 10606  0A8F  06AC               	xorwf	___ftadd@f2+1,f
 10607  0A90  30FF               	movlw	255
 10608  0A91  06AD               	xorwf	___ftadd@f2+2,f
 10609  0A92  3001               	movlw	1
 10610  0A93  07AB               	addwf	___ftadd@f2,f
 10611  0A94  3000               	movlw	0
 10612  0A95  1803               	skipnc
 10613  0A96  3001               	movlw	1
 10614  0A97  07AC               	addwf	___ftadd@f2+1,f
 10615  0A98  3000               	movlw	0
 10616  0A99  1803               	skipnc
 10617  0A9A  3001               	movlw	1
 10618  0A9B  07AD               	addwf	___ftadd@f2+2,f
 10619  0A9C                     l3486:	
 10620  0A9C  01B2               	clrf	___ftadd@sign
 10621  0A9D  0828               	movf	___ftadd@f1,w
 10622  0A9E  07AB               	addwf	___ftadd@f2,f
 10623  0A9F  0829               	movf	___ftadd@f1+1,w
 10624  0AA0  3DAC               	addwfc	___ftadd@f2+1,f
 10625  0AA1  082A               	movf	___ftadd@f1+2,w
 10626  0AA2  3DAD               	addwfc	___ftadd@f2+2,f
 10627  0AA3  1FAD               	btfss	___ftadd@f2+2,7
 10628  0AA4  2AB7               	goto	l3496
 10629  0AA5  30FF               	movlw	255
 10630  0AA6  06AB               	xorwf	___ftadd@f2,f
 10631  0AA7  30FF               	movlw	255
 10632  0AA8  06AC               	xorwf	___ftadd@f2+1,f
 10633  0AA9  30FF               	movlw	255
 10634  0AAA  06AD               	xorwf	___ftadd@f2+2,f
 10635  0AAB  3001               	movlw	1
 10636  0AAC  07AB               	addwf	___ftadd@f2,f
 10637  0AAD  3000               	movlw	0
 10638  0AAE  1803               	skipnc
 10639  0AAF  3001               	movlw	1
 10640  0AB0  07AC               	addwf	___ftadd@f2+1,f
 10641  0AB1  3000               	movlw	0
 10642  0AB2  1803               	skipnc
 10643  0AB3  3001               	movlw	1
 10644  0AB4  07AD               	addwf	___ftadd@f2+2,f
 10645  0AB5  01B2               	clrf	___ftadd@sign
 10646  0AB6  0AB2               	incf	___ftadd@sign,f
 10647  0AB7                     l3496:	
 10648  0AB7  082B               	movf	___ftadd@f2,w
 10649  0AB8  00A0               	movwf	___ftpack@arg
 10650  0AB9  082C               	movf	___ftadd@f2+1,w
 10651  0ABA  00A1               	movwf	___ftpack@arg+1
 10652  0ABB  082D               	movf	___ftadd@f2+2,w
 10653  0ABC  00A2               	movwf	___ftpack@arg+2
 10654  0ABD  0834               	movf	___ftadd@exp1,w
 10655  0ABE  00AE               	movwf	??___ftadd
 10656  0ABF  082E               	movf	??___ftadd,w
 10657  0AC0  00A3               	movwf	___ftpack@exp
 10658  0AC1  0832               	movf	___ftadd@sign,w
 10659  0AC2  00AF               	movwf	??___ftadd+1
 10660  0AC3  082F               	movf	??___ftadd+1,w
 10661  0AC4  00A4               	movwf	___ftpack@sign
 10662  0AC5  3195  2580         	fcall	___ftpack
 10663  0AC7  0020               	movlb	0	; select bank0
 10664  0AC8  0820               	movf	?___ftpack,w
 10665  0AC9  00A8               	movwf	?___ftadd
 10666  0ACA  0821               	movf	?___ftpack+1,w
 10667  0ACB  00A9               	movwf	?___ftadd+1
 10668  0ACC  0822               	movf	?___ftpack+2,w
 10669  0ACD  00AA               	movwf	?___ftadd+2
 10670  0ACE  0008               	return
 10671  0ACF                     __end_of___ftadd:	
 10672                           
 10673                           	psect	text25
 10674  1EDE                     __ptext25:	
 10675 ;; *************** function _initSwitchBypass *****************
 10676 ;; Defined at:
 10677 ;;		line 29 in file "SwitchBypass.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;  initState       2   18[BANK0 ] int 
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  1    wreg      void 
 10684 ;; Registers used:
 10685 ;;		wreg, status,2, status,0, pclath, cstack
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10692 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10695 ;;Total ram usage:        2 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; Hardware stack levels required when called:    5
 10698 ;; This function calls:
 10699 ;;		_getSwitchBypassState
 10700 ;;		_setSwitchBypassState
 10701 ;; This function is called by:
 10702 ;;		_main
 10703 ;; This function uses a non-reentrant model
 10704 ;;
 10705                           
 10706                           
 10707                           ;psect for function _initSwitchBypass
 10708  1EDE                     _initSwitchBypass:	
 10709                           
 10710                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10711                           
 10712                           ;incstack = 0
 10713                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10714  1EDE  319E  269F  319E   	fcall	_getSwitchBypassState
 10715  1EE1  0020               	movlb	0	; select bank0
 10716  1EE2  0821               	movf	?_getSwitchBypassState+1,w
 10717  1EE3  00B3               	movwf	initSwitchBypass@initState+1
 10718  1EE4  0820               	movf	?_getSwitchBypassState,w
 10719  1EE5  00B2               	movwf	initSwitchBypass@initState
 10720                           
 10721                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10722  1EE6  0833               	movf	initSwitchBypass@initState+1,w
 10723  1EE7  00AF               	movwf	setSwitchBypassState@f_state+1
 10724  1EE8  0832               	movf	initSwitchBypass@initState,w
 10725  1EE9  00AE               	movwf	setSwitchBypassState@f_state
 10726  1EEA  3188  2003         	fcall	_setSwitchBypassState
 10727  1EEC  0008               	return
 10728  1EED                     __end_of_initSwitchBypass:	
 10729                           
 10730                           	psect	text26
 10731  0803                     __ptext26:	
 10732 ;; *************** function _setSwitchBypassState *****************
 10733 ;; Defined at:
 10734 ;;		line 134 in file "SwitchBypass.c"
 10735 ;; Parameters:    Size  Location     Type
 10736 ;;  f_state         2   14[BANK0 ] int 
 10737 ;; Auto vars:     Size  Location     Type
 10738 ;;		None
 10739 ;; Return value:  Size  Location     Type
 10740 ;;                  1    wreg      void 
 10741 ;; Registers used:
 10742 ;;		wreg, status,2, status,0, pclath, cstack
 10743 ;; Tracked objects:
 10744 ;;		On entry : 0/0
 10745 ;;		On exit  : 0/0
 10746 ;;		Unchanged: 0/0
 10747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10750 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10751 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10752 ;;Total ram usage:        4 bytes
 10753 ;; Hardware stack levels used:    1
 10754 ;; Hardware stack levels required when called:    4
 10755 ;; This function calls:
 10756 ;;		_updateSwitchBypassState
 10757 ;;		_wait_ms
 10758 ;; This function is called by:
 10759 ;;		_initSwitchBypass
 10760 ;;		_updateSwitchBypass
 10761 ;; This function uses a non-reentrant model
 10762 ;;
 10763                           
 10764                           
 10765                           ;psect for function _setSwitchBypassState
 10766  0803                     _setSwitchBypassState:	
 10767                           
 10768                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10769                           
 10770                           ;incstack = 0
 10771                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10772  0803  0021               	movlb	1	; select bank1
 10773  0804  086E               	movf	_switchBypass_state^(0+128),w
 10774  0805  0020               	movlb	0	; select bank0
 10775  0806  00B0               	movwf	??_setSwitchBypassState
 10776  0807  01B1               	clrf	??_setSwitchBypassState+1
 10777  0808  082F               	movf	setSwitchBypassState@f_state+1,w
 10778  0809  0631               	xorwf	??_setSwitchBypassState+1,w
 10779  080A  1D03               	skipz
 10780  080B  280E               	goto	u2515
 10781  080C  082E               	movf	setSwitchBypassState@f_state,w
 10782  080D  0630               	xorwf	??_setSwitchBypassState,w
 10783  080E                     u2515:	
 10784  080E  1903               	btfsc	3,2
 10785  080F  0008               	return
 10786                           
 10787                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10788  0810  082E               	movf	setSwitchBypassState@f_state,w
 10789  0811  00B0               	movwf	??_setSwitchBypassState
 10790  0812  0830               	movf	??_setSwitchBypassState,w
 10791  0813  0021               	movlb	1	; select bank1
 10792  0814  00EE               	movwf	_switchBypass_state^(0+128)
 10793                           
 10794                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10795  0815  0020               	movlb	0	; select bank0
 10796  0816  0C2E               	rrf	setSwitchBypassState@f_state,w
 10797  0817  0022               	movlb	2	; select bank2
 10798  0818  1C03               	skipc
 10799  0819  110D               	bcf	13,2	;volatile
 10800  081A  1803               	skipnc
 10801  081B  150D               	bsf	13,2	;volatile
 10802                           
 10803                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10804  081C  118D               	bcf	13,3	;volatile
 10805                           
 10806                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10807  081D  0020               	movlb	0	; select bank0
 10808  081E  0C2E               	rrf	setSwitchBypassState@f_state,w
 10809  081F  0027               	movlb	7	; select bank7
 10810  0820  1C03               	skipc
 10811  0821  110D               	bcf	13,2	;volatile
 10812  0822  1803               	skipnc
 10813  0823  150D               	bsf	13,2	;volatile
 10814                           
 10815                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10816  0824  0020               	movlb	0	; select bank0
 10817  0825  082E               	movf	setSwitchBypassState@f_state,w
 10818  0826  042F               	iorwf	setSwitchBypassState@f_state+1,w
 10819  0827  1D03               	btfss	3,2
 10820  0828  282C               	goto	u2520
 10821  0829  0027               	movlb	7	; select bank7
 10822  082A  148D               	bsf	13,1	;volatile
 10823  082B  282E               	goto	l3324
 10824  082C                     u2520:	
 10825  082C  0027               	movlb	7	; select bank7
 10826  082D  108D               	bcf	13,1	;volatile
 10827  082E                     l3324:	
 10828                           
 10829                           ;SwitchBypass.c: 142: wait_ms(20);
 10830  082E  3014               	movlw	20
 10831  082F  0020               	movlb	0	; select bank0
 10832  0830  00AC               	movwf	wait_ms@time
 10833  0831  3000               	movlw	0
 10834  0832  00AD               	movwf	wait_ms@time+1
 10835  0833  3190  20A2  3188   	fcall	_wait_ms
 10836                           
 10837                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10838  0836  0027               	movlb	7	; select bank7
 10839  0837  110D               	bcf	13,2	;volatile
 10840                           
 10841                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10842  0838  108D               	bcf	13,1	;volatile
 10843                           
 10844                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10845  0839  0021               	movlb	1	; select bank1
 10846  083A  086E               	movf	_switchBypass_state^(0+128),w
 10847  083B  0020               	movlb	0	; select bank0
 10848  083C  00B0               	movwf	??_setSwitchBypassState
 10849  083D  01B1               	clrf	??_setSwitchBypassState+1
 10850  083E  0830               	movf	??_setSwitchBypassState,w
 10851  083F  00A0               	movwf	updateSwitchBypassState@state
 10852  0840  0831               	movf	??_setSwitchBypassState+1,w
 10853  0841  00A1               	movwf	updateSwitchBypassState@state+1
 10854  0842  3187  27FF  3188   	fcall	_updateSwitchBypassState
 10855                           
 10856                           ;SwitchBypass.c: 148: wait_ms(20);
 10857  0845  3014               	movlw	20
 10858  0846  0020               	movlb	0	; select bank0
 10859  0847  00AC               	movwf	wait_ms@time
 10860  0848  3000               	movlw	0
 10861  0849  00AD               	movwf	wait_ms@time+1
 10862  084A  3190  20A2         	fcall	_wait_ms
 10863  084C  0008               	return
 10864  084D                     __end_of_setSwitchBypassState:	
 10865                           
 10866                           	psect	text27
 10867  10A2                     __ptext27:	
 10868 ;; *************** function _wait_ms *****************
 10869 ;; Defined at:
 10870 ;;		line 23 in file "system.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;  time            2   12[BANK0 ] unsigned int 
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;		None
 10875 ;; Return value:  Size  Location     Type
 10876 ;;                  1    wreg      void 
 10877 ;; Registers used:
 10878 ;;		wreg, status,2, status,0, pclath, cstack
 10879 ;; Tracked objects:
 10880 ;;		On entry : 0/0
 10881 ;;		On exit  : 0/0
 10882 ;;		Unchanged: 0/0
 10883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10884 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10887 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10888 ;;Total ram usage:        2 bytes
 10889 ;; Hardware stack levels used:    1
 10890 ;; Hardware stack levels required when called:    3
 10891 ;; This function calls:
 10892 ;;		___lmul
 10893 ;; This function is called by:
 10894 ;;		_star_tactiles
 10895 ;;		_solidring_tactiles
 10896 ;;		_read_bottom_tactile
 10897 ;;		_read_top_tactile
 10898 ;;		_setSwitchBypassState
 10899 ;;		_updateSwitchTap
 10900 ;;		_setDoublePressState
 10901 ;;		_showError_Alternating
 10902 ;;		_show_error
 10903 ;;		_show_cancel
 10904 ;;		_ring_tactiles
 10905 ;; This function uses a non-reentrant model
 10906 ;;
 10907                           
 10908                           
 10909                           ;psect for function _wait_ms
 10910  10A2                     _wait_ms:	
 10911                           
 10912                           ;system.c: 25: static long timel = 0;
 10913                           ;system.c: 26: timel = time * 1000l;
 10914                           
 10915                           ;incstack = 0
 10916                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10917  10A2  0020               	movlb	0	; select bank0
 10918  10A3  082C               	movf	wait_ms@time,w
 10919  10A4  00A0               	movwf	___lmul@multiplier
 10920  10A5  082D               	movf	wait_ms@time+1,w
 10921  10A6  00A1               	movwf	___lmul@multiplier+1
 10922  10A7  01A2               	clrf	___lmul@multiplier+2
 10923  10A8  01A3               	clrf	___lmul@multiplier+3
 10924  10A9  3000               	movlw	0
 10925  10AA  00A7               	movwf	___lmul@multiplicand+3
 10926  10AB  3000               	movlw	0
 10927  10AC  00A6               	movwf	___lmul@multiplicand+2
 10928  10AD  3003               	movlw	3
 10929  10AE  00A5               	movwf	___lmul@multiplicand+1
 10930  10AF  30E8               	movlw	232
 10931  10B0  00A4               	movwf	___lmul@multiplicand
 10932  10B1  3190  2072  3190   	fcall	___lmul
 10933  10B4  0020               	movlb	0	; select bank0
 10934  10B5  0823               	movf	?___lmul+3,w
 10935  10B6  0022               	movlb	2	; select bank2
 10936  10B7  00AF               	movwf	(wait_ms@timel+3)^(0+256)
 10937  10B8  0020               	movlb	0	; select bank0
 10938  10B9  0822               	movf	?___lmul+2,w
 10939  10BA  0022               	movlb	2	; select bank2
 10940  10BB  00AE               	movwf	(wait_ms@timel+2)^(0+256)
 10941  10BC  0020               	movlb	0	; select bank0
 10942  10BD  0821               	movf	?___lmul+1,w
 10943  10BE  0022               	movlb	2	; select bank2
 10944  10BF  00AD               	movwf	(wait_ms@timel+1)^(0+256)
 10945  10C0  0020               	movlb	0	; select bank0
 10946  10C1  0820               	movf	?___lmul,w
 10947  10C2  0022               	movlb	2	; select bank2
 10948  10C3  00AC               	movwf	wait_ms@timel^(0+256)
 10949  10C4                     l325:	
 10950                           ;system.c: 27: for( ; timel; timel--);
 10951                           
 10952  10C4  082F               	movf	(wait_ms@timel+3)^(0+256),w
 10953  10C5  042E               	iorwf	(wait_ms@timel+2)^(0+256),w
 10954  10C6  042D               	iorwf	(wait_ms@timel+1)^(0+256),w
 10955  10C7  042C               	iorwf	wait_ms@timel^(0+256),w
 10956  10C8  1903               	btfsc	3,2
 10957  10C9  0008               	return
 10958  10CA  30FF               	movlw	255
 10959  10CB  07AC               	addwf	wait_ms@timel^(0+256),f
 10960  10CC  30FF               	movlw	255
 10961  10CD  3DAD               	addwfc	(wait_ms@timel+1)^(0+256),f
 10962  10CE  30FF               	movlw	255
 10963  10CF  3DAE               	addwfc	(wait_ms@timel+2)^(0+256),f
 10964  10D0  30FF               	movlw	255
 10965  10D1  3DAF               	addwfc	(wait_ms@timel+3)^(0+256),f
 10966  10D2  28C4               	goto	l325
 10967  10D3                     __end_of_wait_ms:	
 10968                           
 10969                           	psect	text28
 10970  1072                     __ptext28:	
 10971 ;; *************** function ___lmul *****************
 10972 ;; Defined at:
 10973 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  multiplier      4    0[BANK0 ] unsigned long 
 10976 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 10977 ;; Auto vars:     Size  Location     Type
 10978 ;;  product         4    8[BANK0 ] unsigned long 
 10979 ;; Return value:  Size  Location     Type
 10980 ;;                  4    0[BANK0 ] unsigned long 
 10981 ;; Registers used:
 10982 ;;		wreg, status,2, status,0
 10983 ;; Tracked objects:
 10984 ;;		On entry : 0/0
 10985 ;;		On exit  : 0/0
 10986 ;;		Unchanged: 0/0
 10987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10988 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10989 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10991 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10992 ;;Total ram usage:       12 bytes
 10993 ;; Hardware stack levels used:    1
 10994 ;; Hardware stack levels required when called:    2
 10995 ;; This function calls:
 10996 ;;		Nothing
 10997 ;; This function is called by:
 10998 ;;		_wait_ms
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           
 11003                           ;psect for function ___lmul
 11004  1072                     ___lmul:	
 11005                           
 11006                           ;incstack = 0
 11007                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 11008  1072  3000               	movlw	0
 11009  1073  0020               	movlb	0	; select bank0
 11010  1074  00AB               	movwf	___lmul@product+3
 11011  1075  3000               	movlw	0
 11012  1076  00AA               	movwf	___lmul@product+2
 11013  1077  3000               	movlw	0
 11014  1078  00A9               	movwf	___lmul@product+1
 11015  1079  3000               	movlw	0
 11016  107A  00A8               	movwf	___lmul@product
 11017  107B                     l3124:	
 11018  107B  1C20               	btfss	___lmul@multiplier,0
 11019  107C  2885               	goto	l3128
 11020  107D  0824               	movf	___lmul@multiplicand,w
 11021  107E  07A8               	addwf	___lmul@product,f
 11022  107F  0825               	movf	___lmul@multiplicand+1,w
 11023  1080  3DA9               	addwfc	___lmul@product+1,f
 11024  1081  0826               	movf	___lmul@multiplicand+2,w
 11025  1082  3DAA               	addwfc	___lmul@product+2,f
 11026  1083  0827               	movf	___lmul@multiplicand+3,w
 11027  1084  3DAB               	addwfc	___lmul@product+3,f
 11028  1085                     l3128:	
 11029  1085  3001               	movlw	1
 11030  1086                     u2305:	
 11031  1086  35A4               	lslf	___lmul@multiplicand,f
 11032  1087  0DA5               	rlf	___lmul@multiplicand+1,f
 11033  1088  0DA6               	rlf	___lmul@multiplicand+2,f
 11034  1089  0DA7               	rlf	___lmul@multiplicand+3,f
 11035  108A  0B89               	decfsz	9,f
 11036  108B  2886               	goto	u2305
 11037  108C  3001               	movlw	1
 11038  108D                     u2315:	
 11039  108D  36A3               	lsrf	___lmul@multiplier+3,f
 11040  108E  0CA2               	rrf	___lmul@multiplier+2,f
 11041  108F  0CA1               	rrf	___lmul@multiplier+1,f
 11042  1090  0CA0               	rrf	___lmul@multiplier,f
 11043  1091  0B89               	decfsz	9,f
 11044  1092  288D               	goto	u2315
 11045  1093  0823               	movf	___lmul@multiplier+3,w
 11046  1094  0422               	iorwf	___lmul@multiplier+2,w
 11047  1095  0421               	iorwf	___lmul@multiplier+1,w
 11048  1096  0420               	iorwf	___lmul@multiplier,w
 11049  1097  1D03               	skipz
 11050  1098  287B               	goto	l3124
 11051  1099  082B               	movf	___lmul@product+3,w
 11052  109A  00A3               	movwf	?___lmul+3
 11053  109B  082A               	movf	___lmul@product+2,w
 11054  109C  00A2               	movwf	?___lmul+2
 11055  109D  0829               	movf	___lmul@product+1,w
 11056  109E  00A1               	movwf	?___lmul+1
 11057  109F  0828               	movf	___lmul@product,w
 11058  10A0  00A0               	movwf	?___lmul
 11059  10A1  0008               	return
 11060  10A2                     __end_of___lmul:	
 11061                           
 11062                           	psect	text29
 11063  07FF                     __ptext29:	
 11064 ;; *************** function _updateSwitchBypassState *****************
 11065 ;; Defined at:
 11066 ;;		line 96 in file "state_manager.c"
 11067 ;; Parameters:    Size  Location     Type
 11068 ;;  state           2    0[BANK0 ] int 
 11069 ;; Auto vars:     Size  Location     Type
 11070 ;;		None
 11071 ;; Return value:  Size  Location     Type
 11072 ;;                  1    wreg      void 
 11073 ;; Registers used:
 11074 ;;		None
 11075 ;; Tracked objects:
 11076 ;;		On entry : 0/0
 11077 ;;		On exit  : 0/0
 11078 ;;		Unchanged: 0/0
 11079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11080 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11083 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11084 ;;Total ram usage:        2 bytes
 11085 ;; Hardware stack levels used:    1
 11086 ;; Hardware stack levels required when called:    2
 11087 ;; This function calls:
 11088 ;;		Nothing
 11089 ;; This function is called by:
 11090 ;;		_setSwitchBypassState
 11091 ;; This function uses a non-reentrant model
 11092 ;;
 11093                           
 11094                           
 11095                           ;psect for function _updateSwitchBypassState
 11096  07FF                     _updateSwitchBypassState:	
 11097                           
 11098                           ;incstack = 0
 11099                           ; Regs used in _updateSwitchBypassState: []
 11100  07FF  0008               	return
 11101  0800                     __end_of_updateSwitchBypassState:	
 11102                           
 11103                           	psect	text30
 11104  1E9F                     __ptext30:	
 11105 ;; *************** function _getSwitchBypassState *****************
 11106 ;; Defined at:
 11107 ;;		line 103 in file "state_manager.c"
 11108 ;; Parameters:    Size  Location     Type
 11109 ;;		None
 11110 ;; Auto vars:     Size  Location     Type
 11111 ;;		None
 11112 ;; Return value:  Size  Location     Type
 11113 ;;                  2    0[BANK0 ] int 
 11114 ;; Registers used:
 11115 ;;		status,2
 11116 ;; Tracked objects:
 11117 ;;		On entry : 0/0
 11118 ;;		On exit  : 0/0
 11119 ;;		Unchanged: 0/0
 11120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11124 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11125 ;;Total ram usage:        2 bytes
 11126 ;; Hardware stack levels used:    1
 11127 ;; Hardware stack levels required when called:    2
 11128 ;; This function calls:
 11129 ;;		Nothing
 11130 ;; This function is called by:
 11131 ;;		_initSwitchBypass
 11132 ;; This function uses a non-reentrant model
 11133 ;;
 11134                           
 11135                           
 11136                           ;psect for function _getSwitchBypassState
 11137  1E9F                     _getSwitchBypassState:	
 11138                           
 11139                           ;state_manager.c: 108: return 0;
 11140                           
 11141                           ;incstack = 0
 11142                           ; Regs used in _getSwitchBypassState: [status,2]
 11143  1E9F  0020               	movlb	0	; select bank0
 11144  1EA0  01A0               	clrf	?_getSwitchBypassState
 11145  1EA1  01A1               	clrf	?_getSwitchBypassState+1
 11146  1EA2  0008               	return
 11147  1EA3                     __end_of_getSwitchBypassState:	
 11148                           
 11149                           	psect	text31
 11150  1F40                     __ptext31:	
 11151 ;; *************** function _adc_convert *****************
 11152 ;; Defined at:
 11153 ;;		line 110 in file "user.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  channel         1    wreg     unsigned char 
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  channel         1    3[BANK0 ] unsigned char 
 11158 ;; Return value:  Size  Location     Type
 11159 ;;                  2    0[BANK0 ] unsigned int 
 11160 ;; Registers used:
 11161 ;;		wreg, status,2, status,0
 11162 ;; Tracked objects:
 11163 ;;		On entry : 0/0
 11164 ;;		On exit  : 0/0
 11165 ;;		Unchanged: 0/0
 11166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11167 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11169 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11170 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11171 ;;Total ram usage:        4 bytes
 11172 ;; Hardware stack levels used:    1
 11173 ;; Hardware stack levels required when called:    2
 11174 ;; This function calls:
 11175 ;;		Nothing
 11176 ;; This function is called by:
 11177 ;;		_main
 11178 ;; This function uses a non-reentrant model
 11179 ;;
 11180                           
 11181                           
 11182                           ;psect for function _adc_convert
 11183  1F40                     _adc_convert:	
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11187                           ;adc_convert@channel stored from wreg
 11188  1F40  0020               	movlb	0	; select bank0
 11189  1F41  00A3               	movwf	adc_convert@channel
 11190                           
 11191                           ;user.c: 111: ADCON0bits.CHS = channel;
 11192  1F42  0823               	movf	adc_convert@channel,w
 11193  1F43  00A2               	movwf	??_adc_convert
 11194  1F44  0DA2               	rlf	??_adc_convert,f
 11195  1F45  0DA2               	rlf	??_adc_convert,f
 11196  1F46  0021               	movlb	1	; select bank1
 11197  1F47  081D               	movf	29,w	;volatile
 11198  1F48  0020               	movlb	0	; select bank0
 11199  1F49  0622               	xorwf	??_adc_convert,w
 11200  1F4A  3983               	andlw	-125
 11201  1F4B  0622               	xorwf	??_adc_convert,w
 11202  1F4C  0021               	movlb	1	; select bank1
 11203  1F4D  009D               	movwf	29	;volatile
 11204                           
 11205                           ;user.c: 112: ADCON0bits.GO = 0b1;
 11206  1F4E  149D               	bsf	29,1	;volatile
 11207  1F4F                     l496:	
 11208                           ;user.c: 113: while (ADCON0bits.GO_nDONE);
 11209                           
 11210  1F4F  189D               	btfsc	29,1	;volatile
 11211  1F50  2F4F               	goto	l496
 11212                           
 11213                           ;user.c: 114: return (ADRESH << 8) | ADRESL;
 11214  1F51  081C               	movf	28,w	;volatile
 11215  1F52  0020               	movlb	0	; select bank0
 11216  1F53  00A1               	movwf	?_adc_convert+1
 11217  1F54  0021               	movlb	1	; select bank1
 11218  1F55  081B               	movf	27,w	;volatile
 11219  1F56  0020               	movlb	0	; select bank0
 11220  1F57  00A0               	movwf	?_adc_convert
 11221  1F58  0008               	return
 11222  1F59                     __end_of_adc_convert:	
 11223                           
 11224                           	psect	text32
 11225  14DA                     __ptext32:	
 11226 ;; *************** function ___awdiv *****************
 11227 ;; Defined at:
 11228 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 11229 ;; Parameters:    Size  Location     Type
 11230 ;;  divisor         2    0[BANK0 ] int 
 11231 ;;  dividend        2    2[BANK0 ] int 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  quotient        2    7[BANK0 ] int 
 11234 ;;  sign            1    6[BANK0 ] unsigned char 
 11235 ;;  counter         1    5[BANK0 ] unsigned char 
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  2    0[BANK0 ] int 
 11238 ;; Registers used:
 11239 ;;		wreg, status,2, status,0
 11240 ;; Tracked objects:
 11241 ;;		On entry : 0/0
 11242 ;;		On exit  : 0/0
 11243 ;;		Unchanged: 0/0
 11244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11245 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11246 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11248 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11249 ;;Total ram usage:        9 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    2
 11252 ;; This function calls:
 11253 ;;		Nothing
 11254 ;; This function is called by:
 11255 ;;		_main
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function ___awdiv
 11261  14DA                     ___awdiv:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 11265  14DA  0020               	movlb	0	; select bank0
 11266  14DB  01A6               	clrf	___awdiv@sign
 11267  14DC  1FA1               	btfss	___awdiv@divisor+1,7
 11268  14DD  2CE5               	goto	l4016
 11269  14DE  09A0               	comf	___awdiv@divisor,f
 11270  14DF  09A1               	comf	___awdiv@divisor+1,f
 11271  14E0  0AA0               	incf	___awdiv@divisor,f
 11272  14E1  1903               	skipnz
 11273  14E2  0AA1               	incf	___awdiv@divisor+1,f
 11274  14E3  01A6               	clrf	___awdiv@sign
 11275  14E4  0AA6               	incf	___awdiv@sign,f
 11276  14E5                     l4016:	
 11277  14E5  1FA3               	btfss	___awdiv@dividend+1,7
 11278  14E6  2CF0               	goto	l4022
 11279  14E7  09A2               	comf	___awdiv@dividend,f
 11280  14E8  09A3               	comf	___awdiv@dividend+1,f
 11281  14E9  0AA2               	incf	___awdiv@dividend,f
 11282  14EA  1903               	skipnz
 11283  14EB  0AA3               	incf	___awdiv@dividend+1,f
 11284  14EC  3001               	movlw	1
 11285  14ED  00A4               	movwf	??___awdiv
 11286  14EE  0824               	movf	??___awdiv,w
 11287  14EF  06A6               	xorwf	___awdiv@sign,f
 11288  14F0                     l4022:	
 11289  14F0  01A7               	clrf	___awdiv@quotient
 11290  14F1  01A8               	clrf	___awdiv@quotient+1
 11291  14F2  0820               	movf	___awdiv@divisor,w
 11292  14F3  0421               	iorwf	___awdiv@divisor+1,w
 11293  14F4  1903               	btfsc	3,2
 11294  14F5  2D1F               	goto	l4044
 11295  14F6  01A5               	clrf	___awdiv@counter
 11296  14F7  0AA5               	incf	___awdiv@counter,f
 11297  14F8                     l4032:	
 11298  14F8  1BA1               	btfsc	___awdiv@divisor+1,7
 11299  14F9  2D04               	goto	l4034
 11300  14FA  3001               	movlw	1
 11301  14FB                     u3935:	
 11302  14FB  35A0               	lslf	___awdiv@divisor,f
 11303  14FC  0DA1               	rlf	___awdiv@divisor+1,f
 11304  14FD  0B89               	decfsz	9,f
 11305  14FE  2CFB               	goto	u3935
 11306  14FF  3001               	movlw	1
 11307  1500  00A4               	movwf	??___awdiv
 11308  1501  0824               	movf	??___awdiv,w
 11309  1502  07A5               	addwf	___awdiv@counter,f
 11310  1503  2CF8               	goto	l4032
 11311  1504                     l4034:	
 11312  1504  3001               	movlw	1
 11313  1505                     u3955:	
 11314  1505  35A7               	lslf	___awdiv@quotient,f
 11315  1506  0DA8               	rlf	___awdiv@quotient+1,f
 11316  1507  0B89               	decfsz	9,f
 11317  1508  2D05               	goto	u3955
 11318  1509  0821               	movf	___awdiv@divisor+1,w
 11319  150A  0223               	subwf	___awdiv@dividend+1,w
 11320  150B  1D03               	skipz
 11321  150C  2D0F               	goto	u3965
 11322  150D  0820               	movf	___awdiv@divisor,w
 11323  150E  0222               	subwf	___awdiv@dividend,w
 11324  150F                     u3965:	
 11325  150F  1C03               	skipc
 11326  1510  2D16               	goto	l4040
 11327  1511  0820               	movf	___awdiv@divisor,w
 11328  1512  02A2               	subwf	___awdiv@dividend,f
 11329  1513  0821               	movf	___awdiv@divisor+1,w
 11330  1514  3BA3               	subwfb	___awdiv@dividend+1,f
 11331  1515  1427               	bsf	___awdiv@quotient,0
 11332  1516                     l4040:	
 11333  1516  3001               	movlw	1
 11334  1517                     u3975:	
 11335  1517  36A1               	lsrf	___awdiv@divisor+1,f
 11336  1518  0CA0               	rrf	___awdiv@divisor,f
 11337  1519  0B89               	decfsz	9,f
 11338  151A  2D17               	goto	u3975
 11339  151B  3001               	movlw	1
 11340  151C  02A5               	subwf	___awdiv@counter,f
 11341  151D  1D03               	btfss	3,2
 11342  151E  2D04               	goto	l4034
 11343  151F                     l4044:	
 11344  151F  0826               	movf	___awdiv@sign,w
 11345  1520  1903               	btfsc	3,2
 11346  1521  2D27               	goto	l4048
 11347  1522  09A7               	comf	___awdiv@quotient,f
 11348  1523  09A8               	comf	___awdiv@quotient+1,f
 11349  1524  0AA7               	incf	___awdiv@quotient,f
 11350  1525  1903               	skipnz
 11351  1526  0AA8               	incf	___awdiv@quotient+1,f
 11352  1527                     l4048:	
 11353  1527  0828               	movf	___awdiv@quotient+1,w
 11354  1528  00A1               	movwf	?___awdiv+1
 11355  1529  0827               	movf	___awdiv@quotient,w
 11356  152A  00A0               	movwf	?___awdiv
 11357  152B  0008               	return
 11358  152C                     __end_of___awdiv:	
 11359                           
 11360                           	psect	text33
 11361  1261                     __ptext33:	
 11362 ;; *************** function ___altoft *****************
 11363 ;; Defined at:
 11364 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  c               4    8[BANK0 ] long 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;  sign            1   15[BANK0 ] unsigned char 
 11369 ;;  exp             1   14[BANK0 ] unsigned char 
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  3    8[BANK0 ] float 
 11372 ;; Registers used:
 11373 ;;		wreg, status,2, status,0, pclath, cstack
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11382 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11383 ;;Total ram usage:        8 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    3
 11386 ;; This function calls:
 11387 ;;		___ftpack
 11388 ;; This function is called by:
 11389 ;;		_main
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           
 11394                           ;psect for function ___altoft
 11395  1261                     ___altoft:	
 11396                           
 11397                           ;incstack = 0
 11398                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11399  1261  0020               	movlb	0	; select bank0
 11400  1262  01AF               	clrf	___altoft@sign
 11401  1263  308E               	movlw	142
 11402  1264  00AC               	movwf	??___altoft
 11403  1265  082C               	movf	??___altoft,w
 11404  1266  00AE               	movwf	___altoft@exp
 11405  1267  1FAB               	btfss	___altoft@c+3,7
 11406  1268  2A76               	goto	l4002
 11407  1269  09A8               	comf	___altoft@c,f
 11408  126A  09A9               	comf	___altoft@c+1,f
 11409  126B  09AA               	comf	___altoft@c+2,f
 11410  126C  09AB               	comf	___altoft@c+3,f
 11411  126D  0AA8               	incf	___altoft@c,f
 11412  126E  1903               	skipnz
 11413  126F  0AA9               	incf	___altoft@c+1,f
 11414  1270  1903               	skipnz
 11415  1271  0AAA               	incf	___altoft@c+2,f
 11416  1272  1903               	skipnz
 11417  1273  0AAB               	incf	___altoft@c+3,f
 11418  1274  01AF               	clrf	___altoft@sign
 11419  1275  0AAF               	incf	___altoft@sign,f
 11420  1276                     l4002:	
 11421  1276  30FF               	movlw	255
 11422  1277  052B               	andwf	___altoft@c+3,w
 11423  1278  1903               	btfsc	3,2
 11424  1279  2A86               	goto	l4004
 11425  127A  3001               	movlw	1
 11426  127B                     u3885:	
 11427  127B  36AB               	lsrf	___altoft@c+3,f
 11428  127C  0CAA               	rrf	___altoft@c+2,f
 11429  127D  0CA9               	rrf	___altoft@c+1,f
 11430  127E  0CA8               	rrf	___altoft@c,f
 11431  127F  0B89               	decfsz	9,f
 11432  1280  2A7B               	goto	u3885
 11433  1281  3001               	movlw	1
 11434  1282  00AC               	movwf	??___altoft
 11435  1283  082C               	movf	??___altoft,w
 11436  1284  07AE               	addwf	___altoft@exp,f
 11437  1285  2A76               	goto	l4002
 11438  1286                     l4004:	
 11439  1286  0828               	movf	___altoft@c,w
 11440  1287  00A0               	movwf	___ftpack@arg
 11441  1288  0829               	movf	___altoft@c+1,w
 11442  1289  00A1               	movwf	___ftpack@arg+1
 11443  128A  082A               	movf	___altoft@c+2,w
 11444  128B  00A2               	movwf	___ftpack@arg+2
 11445  128C  082E               	movf	___altoft@exp,w
 11446  128D  00AC               	movwf	??___altoft
 11447  128E  082C               	movf	??___altoft,w
 11448  128F  00A3               	movwf	___ftpack@exp
 11449  1290  082F               	movf	___altoft@sign,w
 11450  1291  00AD               	movwf	??___altoft+1
 11451  1292  082D               	movf	??___altoft+1,w
 11452  1293  00A4               	movwf	___ftpack@sign
 11453  1294  3195  2580         	fcall	___ftpack
 11454  1296  0020               	movlb	0	; select bank0
 11455  1297  0820               	movf	?___ftpack,w
 11456  1298  00A8               	movwf	?___altoft
 11457  1299  0821               	movf	?___ftpack+1,w
 11458  129A  00A9               	movwf	?___altoft+1
 11459  129B  0822               	movf	?___ftpack+2,w
 11460  129C  00AA               	movwf	?___altoft+2
 11461  129D  0008               	return
 11462  129E                     __end_of___altoft:	
 11463                           
 11464                           	psect	text34
 11465  1580                     __ptext34:	
 11466 ;; *************** function ___ftpack *****************
 11467 ;; Defined at:
 11468 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11469 ;; Parameters:    Size  Location     Type
 11470 ;;  arg             3    0[BANK0 ] unsigned um
 11471 ;;  exp             1    3[BANK0 ] unsigned char 
 11472 ;;  sign            1    4[BANK0 ] unsigned char 
 11473 ;; Auto vars:     Size  Location     Type
 11474 ;;		None
 11475 ;; Return value:  Size  Location     Type
 11476 ;;                  3    0[BANK0 ] float 
 11477 ;; Registers used:
 11478 ;;		wreg, status,2, status,0
 11479 ;; Tracked objects:
 11480 ;;		On entry : 0/0
 11481 ;;		On exit  : 0/0
 11482 ;;		Unchanged: 0/0
 11483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11484 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11486 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11488 ;;Total ram usage:        8 bytes
 11489 ;; Hardware stack levels used:    1
 11490 ;; Hardware stack levels required when called:    2
 11491 ;; This function calls:
 11492 ;;		Nothing
 11493 ;; This function is called by:
 11494 ;;		___altoft
 11495 ;;		___awtoft
 11496 ;;		___ftadd
 11497 ;;		___ftdiv
 11498 ;;		___ftmul
 11499 ;; This function uses a non-reentrant model
 11500 ;;
 11501                           
 11502                           
 11503                           ;psect for function ___ftpack
 11504  1580                     ___ftpack:	
 11505                           
 11506                           ;incstack = 0
 11507                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11508  1580  0020               	movlb	0	; select bank0
 11509  1581  0823               	movf	___ftpack@exp,w
 11510  1582  1903               	btfsc	3,2
 11511  1583  2D89               	goto	l3182
 11512  1584  0822               	movf	___ftpack@arg+2,w
 11513  1585  0421               	iorwf	___ftpack@arg+1,w
 11514  1586  0420               	iorwf	___ftpack@arg,w
 11515  1587  1D03               	skipz
 11516  1588  2D9A               	goto	l3188
 11517  1589                     l3182:	
 11518  1589  3000               	movlw	0
 11519  158A  00A0               	movwf	?___ftpack
 11520  158B  3000               	movlw	0
 11521  158C  00A1               	movwf	?___ftpack+1
 11522  158D  3000               	movlw	0
 11523  158E  00A2               	movwf	?___ftpack+2
 11524  158F  0008               	return
 11525  1590                     l3186:	
 11526  1590  3001               	movlw	1
 11527  1591  00A5               	movwf	??___ftpack
 11528  1592  0825               	movf	??___ftpack,w
 11529  1593  07A3               	addwf	___ftpack@exp,f
 11530  1594  3001               	movlw	1
 11531  1595                     u2365:	
 11532  1595  36A2               	lsrf	___ftpack@arg+2,f
 11533  1596  0CA1               	rrf	___ftpack@arg+1,f
 11534  1597  0CA0               	rrf	___ftpack@arg,f
 11535  1598  0B89               	decfsz	9,f
 11536  1599  2D95               	goto	u2365
 11537  159A                     l3188:	
 11538  159A  30FE               	movlw	254
 11539  159B  0522               	andwf	___ftpack@arg+2,w
 11540  159C  1903               	btfsc	3,2
 11541  159D  2DB3               	goto	l1371
 11542  159E  2D90               	goto	l3186
 11543  159F                     l3190:	
 11544  159F  3001               	movlw	1
 11545  15A0  00A5               	movwf	??___ftpack
 11546  15A1  0825               	movf	??___ftpack,w
 11547  15A2  07A3               	addwf	___ftpack@exp,f
 11548  15A3  3001               	movlw	1
 11549  15A4  07A0               	addwf	___ftpack@arg,f
 11550  15A5  3000               	movlw	0
 11551  15A6  1803               	skipnc
 11552  15A7  3001               	movlw	1
 11553  15A8  07A1               	addwf	___ftpack@arg+1,f
 11554  15A9  3000               	movlw	0
 11555  15AA  1803               	skipnc
 11556  15AB  3001               	movlw	1
 11557  15AC  07A2               	addwf	___ftpack@arg+2,f
 11558  15AD  3001               	movlw	1
 11559  15AE                     u2385:	
 11560  15AE  36A2               	lsrf	___ftpack@arg+2,f
 11561  15AF  0CA1               	rrf	___ftpack@arg+1,f
 11562  15B0  0CA0               	rrf	___ftpack@arg,f
 11563  15B1  0B89               	decfsz	9,f
 11564  15B2  2DAE               	goto	u2385
 11565  15B3                     l1371:	
 11566  15B3  30FF               	movlw	255
 11567  15B4  0522               	andwf	___ftpack@arg+2,w
 11568  15B5  1903               	btfsc	3,2
 11569  15B6  2DC0               	goto	l3198
 11570  15B7  2D9F               	goto	l3190
 11571  15B8                     l3196:	
 11572  15B8  3001               	movlw	1
 11573  15B9  02A3               	subwf	___ftpack@exp,f
 11574  15BA  3001               	movlw	1
 11575  15BB                     u2405:	
 11576  15BB  35A0               	lslf	___ftpack@arg,f
 11577  15BC  0DA1               	rlf	___ftpack@arg+1,f
 11578  15BD  0DA2               	rlf	___ftpack@arg+2,f
 11579  15BE  0B89               	decfsz	9,f
 11580  15BF  2DBB               	goto	u2405
 11581  15C0                     l3198:	
 11582  15C0  1BA1               	btfsc	___ftpack@arg+1,7
 11583  15C1  2DC6               	goto	l1378
 11584  15C2  3002               	movlw	2
 11585  15C3  0223               	subwf	___ftpack@exp,w
 11586  15C4  1803               	skipnc
 11587  15C5  2DB8               	goto	l3196
 11588  15C6                     l1378:	
 11589  15C6  1823               	btfsc	___ftpack@exp,0
 11590  15C7  2DCE               	goto	l1379
 11591  15C8  30FF               	movlw	255
 11592  15C9  05A0               	andwf	___ftpack@arg,f
 11593  15CA  307F               	movlw	127
 11594  15CB  05A1               	andwf	___ftpack@arg+1,f
 11595  15CC  30FF               	movlw	255
 11596  15CD  05A2               	andwf	___ftpack@arg+2,f
 11597  15CE                     l1379:	
 11598  15CE  1003               	clrc
 11599  15CF  0CA3               	rrf	___ftpack@exp,f
 11600  15D0  0823               	movf	___ftpack@exp,w
 11601  15D1  00A5               	movwf	??___ftpack
 11602  15D2  01A6               	clrf	??___ftpack+1
 11603  15D3  01A7               	clrf	??___ftpack+2
 11604  15D4  3010               	movlw	16
 11605  15D5                     u2445:	
 11606  15D5  35A5               	lslf	??___ftpack,f
 11607  15D6  0DA6               	rlf	??___ftpack+1,f
 11608  15D7  0DA7               	rlf	??___ftpack+2,f
 11609  15D8  0B89               	decfsz	9,f
 11610  15D9  2DD5               	goto	u2445
 11611  15DA  0825               	movf	??___ftpack,w
 11612  15DB  04A0               	iorwf	___ftpack@arg,f
 11613  15DC  0826               	movf	??___ftpack+1,w
 11614  15DD  04A1               	iorwf	___ftpack@arg+1,f
 11615  15DE  0827               	movf	??___ftpack+2,w
 11616  15DF  04A2               	iorwf	___ftpack@arg+2,f
 11617  15E0  0824               	movf	___ftpack@sign,w
 11618  15E1  1903               	btfsc	3,2
 11619  15E2  0008               	return
 11620  15E3  17A2               	bsf	___ftpack@arg+2,7
 11621  15E4  0008               	return
 11622  15E5                     __end_of___ftpack:	
 11623                           
 11624                           	psect	text35
 11625  13EA                     __ptext35:	
 11626 ;; *************** function _ReadSavedSettings *****************
 11627 ;; Defined at:
 11628 ;;		line 181 in file "user.c"
 11629 ;; Parameters:    Size  Location     Type
 11630 ;;		None
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;		None
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  1    wreg      void 
 11635 ;; Registers used:
 11636 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11646 ;;Total ram usage:        0 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    3
 11649 ;; This function calls:
 11650 ;;		_FLASH_ReadWord
 11651 ;;		_set_leds_bottom
 11652 ;;		_set_leds_top
 11653 ;; This function is called by:
 11654 ;;		_main
 11655 ;; This function uses a non-reentrant model
 11656 ;;
 11657                           
 11658                           
 11659                           ;psect for function _ReadSavedSettings
 11660  13EA                     _ReadSavedSettings:	
 11661                           
 11662                           ;user.c: 183: top_push_state = FLASH_ReadWord(0x1F81);
 11663                           
 11664                           ;incstack = 0
 11665                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11666  13EA  3081               	movlw	129
 11667  13EB  0020               	movlb	0	; select bank0
 11668  13EC  00A0               	movwf	FLASH_ReadWord@flashAddr
 11669  13ED  301F               	movlw	31
 11670  13EE  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11671  13EF  319F  278F  3193   	fcall	_FLASH_ReadWord
 11672  13F2  0020               	movlb	0	; select bank0
 11673  13F3  0821               	movf	?_FLASH_ReadWord+1,w
 11674  13F4  0021               	movlb	1	; select bank1
 11675  13F5  00E9               	movwf	(_top_push_state+1)^(0+128)
 11676  13F6  0020               	movlb	0	; select bank0
 11677  13F7  0820               	movf	?_FLASH_ReadWord,w
 11678  13F8  0021               	movlb	1	; select bank1
 11679  13F9  00E8               	movwf	_top_push_state^(0+128)
 11680                           
 11681                           ;user.c: 184: bottom_push_state = FLASH_ReadWord(0x1F82);
 11682  13FA  3082               	movlw	130
 11683  13FB  0020               	movlb	0	; select bank0
 11684  13FC  00A0               	movwf	FLASH_ReadWord@flashAddr
 11685  13FD  301F               	movlw	31
 11686  13FE  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11687  13FF  319F  278F  3193   	fcall	_FLASH_ReadWord
 11688  1402  0020               	movlb	0	; select bank0
 11689  1403  0821               	movf	?_FLASH_ReadWord+1,w
 11690  1404  0021               	movlb	1	; select bank1
 11691  1405  00E5               	movwf	(_bottom_push_state+1)^(0+128)
 11692  1406  0020               	movlb	0	; select bank0
 11693  1407  0820               	movf	?_FLASH_ReadWord,w
 11694  1408  0021               	movlb	1	; select bank1
 11695  1409  00E4               	movwf	_bottom_push_state^(0+128)
 11696                           
 11697                           ;user.c: 187: LATGbits.LATG1 = !switchBypass_state;
 11698  140A  086E               	movf	_switchBypass_state^(0+128),w
 11699  140B  1D03               	btfss	3,2
 11700  140C  2C10               	goto	u3300
 11701  140D  0027               	movlb	7	; select bank7
 11702  140E  148D               	bsf	13,1	;volatile
 11703  140F  2C12               	goto	l3674
 11704  1410                     u3300:	
 11705  1410  0027               	movlb	7	; select bank7
 11706  1411  108D               	bcf	13,1	;volatile
 11707  1412                     l3674:	
 11708                           
 11709                           ;user.c: 188: LATGbits.LATG2 = switchBypass_state;
 11710  1412  0021               	movlb	1	; select bank1
 11711  1413  0C6E               	rrf	_switchBypass_state^(0+128),w
 11712  1414  0027               	movlb	7	; select bank7
 11713  1415  1C03               	skipc
 11714  1416  110D               	bcf	13,2	;volatile
 11715  1417  1803               	skipnc
 11716  1418  150D               	bsf	13,2	;volatile
 11717                           
 11718                           ;user.c: 189: LATBbits.LATB2 = 0;
 11719  1419  0022               	movlb	2	; select bank2
 11720  141A  110D               	bcf	13,2	;volatile
 11721                           
 11722                           ;user.c: 190: LATBbits.LATB3 = 0;
 11723  141B  118D               	bcf	13,3	;volatile
 11724                           
 11725                           ;user.c: 192: LATBbits.LATB4 = 0;
 11726  141C  120D               	bcf	13,4	;volatile
 11727                           
 11728                           ;user.c: 193: LATBbits.LATB5 = 0;
 11729  141D  128D               	bcf	13,5	;volatile
 11730                           
 11731                           ;user.c: 195: LATBbits.LATB1 = 0;
 11732  141E  108D               	bcf	13,1	;volatile
 11733                           
 11734                           ;user.c: 196: LATBbits.LATB0 = 0;
 11735  141F  100D               	bcf	13,0	;volatile
 11736                           
 11737                           ;user.c: 199: set_leds_top(top_push_state, 1);
 11738  1420  0021               	movlb	1	; select bank1
 11739  1421  0869               	movf	(_top_push_state+1)^(0+128),w
 11740  1422  0020               	movlb	0	; select bank0
 11741  1423  00A1               	movwf	set_leds_top@x+1
 11742  1424  0021               	movlb	1	; select bank1
 11743  1425  0868               	movf	_top_push_state^(0+128),w
 11744  1426  0020               	movlb	0	; select bank0
 11745  1427  00A0               	movwf	set_leds_top@x
 11746  1428  3001               	movlw	1
 11747  1429  00A2               	movwf	set_leds_top@ledState
 11748  142A  3000               	movlw	0
 11749  142B  00A3               	movwf	set_leds_top@ledState+1
 11750  142C  3195  252C  3193   	fcall	_set_leds_top
 11751                           
 11752                           ;user.c: 200: set_leds_bottom(bottom_push_state);
 11753  142F  0021               	movlb	1	; select bank1
 11754  1430  0865               	movf	(_bottom_push_state+1)^(0+128),w
 11755  1431  0020               	movlb	0	; select bank0
 11756  1432  00A1               	movwf	set_leds_bottom@x+1
 11757  1433  0021               	movlb	1	; select bank1
 11758  1434  0864               	movf	_bottom_push_state^(0+128),w
 11759  1435  0020               	movlb	0	; select bank0
 11760  1436  00A0               	movwf	set_leds_bottom@x
 11761  1437  3192  2226         	fcall	_set_leds_bottom
 11762  1439  0008               	return
 11763  143A                     __end_of_ReadSavedSettings:	
 11764                           
 11765                           	psect	text36
 11766  152C                     __ptext36:	
 11767 ;; *************** function _set_leds_top *****************
 11768 ;; Defined at:
 11769 ;;		line 16 in file "LEDs.c"
 11770 ;; Parameters:    Size  Location     Type
 11771 ;;  x               2    0[BANK0 ] int 
 11772 ;;  ledState        2    2[BANK0 ] int 
 11773 ;; Auto vars:     Size  Location     Type
 11774 ;;		None
 11775 ;; Return value:  Size  Location     Type
 11776 ;;                  1    wreg      void 
 11777 ;; Registers used:
 11778 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11779 ;; Tracked objects:
 11780 ;;		On entry : 0/0
 11781 ;;		On exit  : 0/0
 11782 ;;		Unchanged: 0/0
 11783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11784 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11787 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11788 ;;Total ram usage:        4 bytes
 11789 ;; Hardware stack levels used:    1
 11790 ;; Hardware stack levels required when called:    2
 11791 ;; This function calls:
 11792 ;;		Nothing
 11793 ;; This function is called by:
 11794 ;;		_ReadSavedSettings
 11795 ;;		_star_tactiles
 11796 ;;		_solidring_tactiles
 11797 ;;		_read_top_tactile
 11798 ;;		_ring_tactiles
 11799 ;; This function uses a non-reentrant model
 11800 ;;
 11801                           
 11802                           
 11803                           ;psect for function _set_leds_top
 11804  152C                     _set_leds_top:	
 11805                           
 11806                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11807                           
 11808                           ;incstack = 0
 11809                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11810  152C  0027               	movlb	7	; select bank7
 11811  152D  100C               	bcf	12,0	;volatile
 11812                           
 11813                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11814  152E  108C               	bcf	12,1	;volatile
 11815                           
 11816                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11817  152F  110C               	bcf	12,2	;volatile
 11818                           
 11819                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11820  1530  118C               	bcf	12,3	;volatile
 11821                           
 11822                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11823  1531  120C               	bcf	12,4	;volatile
 11824                           
 11825                           ;LEDs.c: 22: switch (x) {
 11826  1532  2D62               	goto	l3150
 11827  1533                     l3138:	
 11828                           ;LEDs.c: 23: case 1:
 11829                           
 11830                           
 11831                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11832  1533  0020               	movlb	0	; select bank0
 11833  1534  0C22               	rrf	set_leds_top@ledState,w
 11834  1535  0027               	movlb	7	; select bank7
 11835  1536  1C03               	skipc
 11836  1537  100C               	bcf	12,0	;volatile
 11837  1538  1803               	skipnc
 11838  1539  140C               	bsf	12,0	;volatile
 11839                           
 11840                           ;LEDs.c: 25: break;
 11841  153A  0008               	return
 11842  153B                     l3140:	
 11843                           ;LEDs.c: 26: case 2:
 11844                           
 11845                           
 11846                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11847  153B  0020               	movlb	0	; select bank0
 11848  153C  0C22               	rrf	set_leds_top@ledState,w
 11849  153D  0027               	movlb	7	; select bank7
 11850  153E  1C03               	skipc
 11851  153F  108C               	bcf	12,1	;volatile
 11852  1540  1803               	skipnc
 11853  1541  148C               	bsf	12,1	;volatile
 11854                           
 11855                           ;LEDs.c: 28: break;
 11856  1542  0008               	return
 11857  1543                     l3142:	
 11858                           ;LEDs.c: 29: case 3:
 11859                           
 11860                           
 11861                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11862  1543  0020               	movlb	0	; select bank0
 11863  1544  0C22               	rrf	set_leds_top@ledState,w
 11864  1545  0027               	movlb	7	; select bank7
 11865  1546  1C03               	skipc
 11866  1547  110C               	bcf	12,2	;volatile
 11867  1548  1803               	skipnc
 11868  1549  150C               	bsf	12,2	;volatile
 11869                           
 11870                           ;LEDs.c: 31: break;
 11871  154A  0008               	return
 11872  154B                     l3144:	
 11873                           ;LEDs.c: 32: case 4:
 11874                           
 11875                           
 11876                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11877  154B  0020               	movlb	0	; select bank0
 11878  154C  0C22               	rrf	set_leds_top@ledState,w
 11879  154D  0027               	movlb	7	; select bank7
 11880  154E  1C03               	skipc
 11881  154F  118C               	bcf	12,3	;volatile
 11882  1550  1803               	skipnc
 11883  1551  158C               	bsf	12,3	;volatile
 11884                           
 11885                           ;LEDs.c: 34: break;
 11886  1552  0008               	return
 11887  1553                     l3146:	
 11888                           ;LEDs.c: 35: case 5:
 11889                           
 11890                           
 11891                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11892  1553  0020               	movlb	0	; select bank0
 11893  1554  0C22               	rrf	set_leds_top@ledState,w
 11894  1555  0027               	movlb	7	; select bank7
 11895  1556  1C03               	skipc
 11896  1557  120C               	bcf	12,4	;volatile
 11897  1558  1803               	skipnc
 11898  1559  160C               	bsf	12,4	;volatile
 11899                           
 11900                           ;LEDs.c: 39: break;
 11901                           
 11902                           ;LEDs.c: 38: case 6:
 11903                           
 11904                           ;LEDs.c: 37: break;
 11905  155A  0008               	return
 11906  155B                     l651:	
 11907                           ;LEDs.c: 40: case 100:
 11908                           
 11909                           
 11910                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11911  155B  0027               	movlb	7	; select bank7
 11912  155C  140C               	bsf	12,0	;volatile
 11913                           
 11914                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11915  155D  148C               	bsf	12,1	;volatile
 11916                           
 11917                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11918  155E  150C               	bsf	12,2	;volatile
 11919                           
 11920                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11921  155F  158C               	bsf	12,3	;volatile
 11922                           
 11923                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11924  1560  160C               	bsf	12,4	;volatile
 11925                           
 11926                           ;LEDs.c: 47: }
 11927                           
 11928                           ;LEDs.c: 46: break;
 11929  1561  0008               	return
 11930  1562                     l3150:	
 11931                           
 11932                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11933                           ; Switch size 1, requested type "space"
 11934                           ; Number of cases is 1, Range of values is 0 to 0
 11935                           ; switch strategies available:
 11936                           ; Name         Instructions Cycles
 11937                           ; simple_byte            4     3 (average)
 11938                           ; direct_byte            8     6 (fixed)
 11939                           ; jumptable            260     6 (fixed)
 11940                           ;	Chosen strategy is simple_byte
 11941  1562  0020               	movlb	0	; select bank0
 11942  1563  0821               	movf	set_leds_top@x+1,w
 11943  1564  3A00               	xorlw	0	; case 0
 11944  1565  1903               	skipnz
 11945  1566  2D68               	goto	l4566
 11946  1567  2D7F               	goto	l652
 11947  1568                     l4566:	
 11948                           
 11949                           ; Switch size 1, requested type "space"
 11950                           ; Number of cases is 7, Range of values is 1 to 100
 11951                           ; switch strategies available:
 11952                           ; Name         Instructions Cycles
 11953                           ; simple_byte           22    12 (average)
 11954                           ; direct_byte          209     9 (fixed)
 11955                           ; jumptable            263     9 (fixed)
 11956                           ;	Chosen strategy is simple_byte
 11957  1568  0820               	movf	set_leds_top@x,w
 11958  1569  3A01               	xorlw	1	; case 1
 11959  156A  1903               	skipnz
 11960  156B  2D33               	goto	l3138
 11961  156C  3A03               	xorlw	3	; case 2
 11962  156D  1903               	skipnz
 11963  156E  2D3B               	goto	l3140
 11964  156F  3A01               	xorlw	1	; case 3
 11965  1570  1903               	skipnz
 11966  1571  2D43               	goto	l3142
 11967  1572  3A07               	xorlw	7	; case 4
 11968  1573  1903               	skipnz
 11969  1574  2D4B               	goto	l3144
 11970  1575  3A01               	xorlw	1	; case 5
 11971  1576  1903               	skipnz
 11972  1577  2D53               	goto	l3146
 11973  1578  3A03               	xorlw	3	; case 6
 11974  1579  1903               	skipnz
 11975  157A  2D7F               	goto	l652
 11976  157B  3A62               	xorlw	98	; case 100
 11977  157C  1903               	skipnz
 11978  157D  2D5B               	goto	l651
 11979  157E  2D7F               	goto	l652
 11980  157F                     l652:	
 11981  157F  0008               	return
 11982  1580                     __end_of_set_leds_top:	
 11983                           
 11984                           	psect	text37
 11985  1226                     __ptext37:	
 11986 ;; *************** function _set_leds_bottom *****************
 11987 ;; Defined at:
 11988 ;;		line 51 in file "LEDs.c"
 11989 ;; Parameters:    Size  Location     Type
 11990 ;;  x               2    0[BANK0 ] int 
 11991 ;; Auto vars:     Size  Location     Type
 11992 ;;		None
 11993 ;; Return value:  Size  Location     Type
 11994 ;;                  1    wreg      void 
 11995 ;; Registers used:
 11996 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11997 ;; Tracked objects:
 11998 ;;		On entry : 0/0
 11999 ;;		On exit  : 0/0
 12000 ;;		Unchanged: 0/0
 12001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12002 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12006 ;;Total ram usage:        2 bytes
 12007 ;; Hardware stack levels used:    1
 12008 ;; Hardware stack levels required when called:    2
 12009 ;; This function calls:
 12010 ;;		Nothing
 12011 ;; This function is called by:
 12012 ;;		_ReadSavedSettings
 12013 ;;		_star_tactiles
 12014 ;;		_solidring_tactiles
 12015 ;;		_read_bottom_tactile
 12016 ;;		_ring_tactiles
 12017 ;; This function uses a non-reentrant model
 12018 ;;
 12019                           
 12020                           
 12021                           ;psect for function _set_leds_bottom
 12022  1226                     _set_leds_bottom:	
 12023                           
 12024                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 12025                           
 12026                           ;incstack = 0
 12027                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 12028  1226  0022               	movlb	2	; select bank2
 12029  1227  100F               	bcf	15,0	;volatile
 12030                           
 12031                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 12032  1228  108F               	bcf	15,1	;volatile
 12033                           
 12034                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 12035  1229  110F               	bcf	15,2	;volatile
 12036                           
 12037                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 12038  122A  118F               	bcf	15,3	;volatile
 12039                           
 12040                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 12041  122B  120F               	bcf	15,4	;volatile
 12042                           
 12043                           ;LEDs.c: 57: switch (x) {
 12044  122C  2A43               	goto	l3172
 12045  122D                     l656:	
 12046                           ;LEDs.c: 58: case 1:
 12047                           
 12048                           
 12049                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 12050  122D  0022               	movlb	2	; select bank2
 12051  122E  140F               	bsf	15,0	;volatile
 12052                           
 12053                           ;LEDs.c: 60: break;
 12054  122F  0008               	return
 12055  1230                     l658:	
 12056                           ;LEDs.c: 61: case 2:
 12057                           
 12058                           
 12059                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 12060  1230  0022               	movlb	2	; select bank2
 12061  1231  148F               	bsf	15,1	;volatile
 12062                           
 12063                           ;LEDs.c: 63: break;
 12064  1232  0008               	return
 12065  1233                     l659:	
 12066                           ;LEDs.c: 64: case 3:
 12067                           
 12068                           
 12069                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 12070  1233  0022               	movlb	2	; select bank2
 12071  1234  150F               	bsf	15,2	;volatile
 12072                           
 12073                           ;LEDs.c: 66: break;
 12074  1235  0008               	return
 12075  1236                     l660:	
 12076                           ;LEDs.c: 67: case 4:
 12077                           
 12078                           
 12079                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 12080  1236  0022               	movlb	2	; select bank2
 12081  1237  158F               	bsf	15,3	;volatile
 12082                           
 12083                           ;LEDs.c: 69: break;
 12084  1238  0008               	return
 12085  1239                     l661:	
 12086                           ;LEDs.c: 70: case 5:
 12087                           
 12088                           
 12089                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 12090  1239  0022               	movlb	2	; select bank2
 12091  123A  160F               	bsf	15,4	;volatile
 12092                           
 12093                           ;LEDs.c: 74: break;
 12094                           
 12095                           ;LEDs.c: 73: case 6:
 12096                           
 12097                           ;LEDs.c: 72: break;
 12098  123B  0008               	return
 12099  123C                     l663:	
 12100                           ;LEDs.c: 75: case 100:
 12101                           
 12102                           
 12103                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 12104  123C  0022               	movlb	2	; select bank2
 12105  123D  140F               	bsf	15,0	;volatile
 12106                           
 12107                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 12108  123E  148F               	bsf	15,1	;volatile
 12109                           
 12110                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 12111  123F  150F               	bsf	15,2	;volatile
 12112                           
 12113                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 12114  1240  158F               	bsf	15,3	;volatile
 12115                           
 12116                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 12117  1241  160F               	bsf	15,4	;volatile
 12118                           
 12119                           ;LEDs.c: 82: }
 12120                           
 12121                           ;LEDs.c: 81: break;
 12122  1242  0008               	return
 12123  1243                     l3172:	
 12124                           
 12125                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12126                           ; Switch size 1, requested type "space"
 12127                           ; Number of cases is 1, Range of values is 0 to 0
 12128                           ; switch strategies available:
 12129                           ; Name         Instructions Cycles
 12130                           ; simple_byte            4     3 (average)
 12131                           ; direct_byte            8     6 (fixed)
 12132                           ; jumptable            260     6 (fixed)
 12133                           ;	Chosen strategy is simple_byte
 12134  1243  0020               	movlb	0	; select bank0
 12135  1244  0821               	movf	set_leds_bottom@x+1,w
 12136  1245  3A00               	xorlw	0	; case 0
 12137  1246  1903               	skipnz
 12138  1247  2A49               	goto	l4568
 12139  1248  2A60               	goto	l664
 12140  1249                     l4568:	
 12141                           
 12142                           ; Switch size 1, requested type "space"
 12143                           ; Number of cases is 7, Range of values is 1 to 100
 12144                           ; switch strategies available:
 12145                           ; Name         Instructions Cycles
 12146                           ; simple_byte           22    12 (average)
 12147                           ; direct_byte          209     9 (fixed)
 12148                           ; jumptable            263     9 (fixed)
 12149                           ;	Chosen strategy is simple_byte
 12150  1249  0820               	movf	set_leds_bottom@x,w
 12151  124A  3A01               	xorlw	1	; case 1
 12152  124B  1903               	skipnz
 12153  124C  2A2D               	goto	l656
 12154  124D  3A03               	xorlw	3	; case 2
 12155  124E  1903               	skipnz
 12156  124F  2A30               	goto	l658
 12157  1250  3A01               	xorlw	1	; case 3
 12158  1251  1903               	skipnz
 12159  1252  2A33               	goto	l659
 12160  1253  3A07               	xorlw	7	; case 4
 12161  1254  1903               	skipnz
 12162  1255  2A36               	goto	l660
 12163  1256  3A01               	xorlw	1	; case 5
 12164  1257  1903               	skipnz
 12165  1258  2A39               	goto	l661
 12166  1259  3A03               	xorlw	3	; case 6
 12167  125A  1903               	skipnz
 12168  125B  2A60               	goto	l664
 12169  125C  3A62               	xorlw	98	; case 100
 12170  125D  1903               	skipnz
 12171  125E  2A3C               	goto	l663
 12172  125F  2A60               	goto	l664
 12173  1260                     l664:	
 12174  1260  0008               	return
 12175  1261                     __end_of_set_leds_bottom:	
 12176                           
 12177                           	psect	text38
 12178  1F8F                     __ptext38:	
 12179 ;; *************** function _FLASH_ReadWord *****************
 12180 ;; Defined at:
 12181 ;;		line 58 in file "memory.c"
 12182 ;; Parameters:    Size  Location     Type
 12183 ;;  flashAddr       2    0[BANK0 ] unsigned int 
 12184 ;; Auto vars:     Size  Location     Type
 12185 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  2    0[BANK0 ] unsigned int 
 12188 ;; Registers used:
 12189 ;;		wreg, status,2, status,0
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12195 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12196 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12198 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12199 ;;Total ram usage:        3 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    2
 12202 ;; This function calls:
 12203 ;;		Nothing
 12204 ;; This function is called by:
 12205 ;;		_ReadSavedSettings
 12206 ;;		_FLASH_WriteWord
 12207 ;; This function uses a non-reentrant model
 12208 ;;
 12209                           
 12210                           
 12211                           ;psect for function _FLASH_ReadWord
 12212  1F8F                     _FLASH_ReadWord:	
 12213                           
 12214                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 12215                           
 12216                           ;incstack = 0
 12217                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 12218  1F8F  3000               	movlw	0
 12219  1F90  1B8B               	btfsc	11,7	;volatile
 12220  1F91  3001               	movlw	1
 12221  1F92  0020               	movlb	0	; select bank0
 12222  1F93  00A2               	movwf	FLASH_ReadWord@GIEBitValue
 12223                           
 12224                           ;memory.c: 61: INTCONbits.GIE = 0;
 12225  1F94  138B               	bcf	11,7	;volatile
 12226                           
 12227                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 12228  1F95  0820               	movf	FLASH_ReadWord@flashAddr,w
 12229  1F96  0023               	movlb	3	; select bank3
 12230  1F97  0091               	movwf	17	;volatile
 12231                           
 12232                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 12233  1F98  0020               	movlb	0	; select bank0
 12234  1F99  0821               	movf	FLASH_ReadWord@flashAddr+1,w
 12235  1F9A  0023               	movlb	3	; select bank3
 12236  1F9B  0092               	movwf	18	;volatile
 12237                           
 12238                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 12239  1F9C  1315               	bcf	21,6	;volatile
 12240                           
 12241                           ;memory.c: 66: PMCON1bits.RD = 1;
 12242  1F9D  1415               	bsf	21,0	;volatile
 12243                           
 12244                           ;memory.c: 67: __nop();
 12245  1F9E  0000               	nop
 12246                           
 12247                           ;memory.c: 68: __nop();
 12248  1F9F  0000               	nop
 12249                           
 12250                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 12251  1FA0  0020               	movlb	0	; select bank0
 12252  1FA1  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
 12253  1FA2  1C03               	skipc
 12254  1FA3  138B               	bcf	11,7	;volatile
 12255  1FA4  1803               	skipnc
 12256  1FA5  178B               	bsf	11,7	;volatile
 12257                           
 12258                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 12259  1FA6  0023               	movlb	3	; select bank3
 12260  1FA7  0814               	movf	20,w	;volatile
 12261  1FA8  0020               	movlb	0	; select bank0
 12262  1FA9  00A1               	movwf	?_FLASH_ReadWord+1
 12263  1FAA  0023               	movlb	3	; select bank3
 12264  1FAB  0813               	movf	19,w	;volatile
 12265  1FAC  0020               	movlb	0	; select bank0
 12266  1FAD  00A0               	movwf	?_FLASH_ReadWord
 12267  1FAE  0008               	return
 12268  1FAF                     __end_of_FLASH_ReadWord:	
 12269                           
 12270                           	psect	text39
 12271  1FAF                     __ptext39:	
 12272 ;; *************** function _InitializeTaps *****************
 12273 ;; Defined at:
 12274 ;;		line 175 in file "user.c"
 12275 ;; Parameters:    Size  Location     Type
 12276 ;;		None
 12277 ;; Auto vars:     Size  Location     Type
 12278 ;;  itap            2    1[BANK0 ] int 
 12279 ;; Return value:  Size  Location     Type
 12280 ;;                  1    wreg      void 
 12281 ;; Registers used:
 12282 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12283 ;; Tracked objects:
 12284 ;;		On entry : 0/0
 12285 ;;		On exit  : 0/0
 12286 ;;		Unchanged: 0/0
 12287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12289 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12290 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12292 ;;Total ram usage:        3 bytes
 12293 ;; Hardware stack levels used:    1
 12294 ;; Hardware stack levels required when called:    2
 12295 ;; This function calls:
 12296 ;;		Nothing
 12297 ;; This function is called by:
 12298 ;;		_main
 12299 ;; This function uses a non-reentrant model
 12300 ;;
 12301                           
 12302                           
 12303                           ;psect for function _InitializeTaps
 12304  1FAF                     _InitializeTaps:	
 12305                           
 12306                           ;user.c: 176: for (int itap = 0; itap < 12; itap++) {
 12307                           
 12308                           ;incstack = 0
 12309                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 12310  1FAF  0020               	movlb	0	; select bank0
 12311  1FB0  01A1               	clrf	InitializeTaps@itap
 12312  1FB1  01A2               	clrf	InitializeTaps@itap+1
 12313  1FB2                     L10:	
 12314  1FB2  0822               	movf	InitializeTaps@itap+1,w
 12315  1FB3  3A80               	xorlw	128
 12316  1FB4  00A0               	movwf	??_InitializeTaps
 12317  1FB5  3080               	movlw	128
 12318  1FB6  0220               	subwf	??_InitializeTaps,w
 12319  1FB7  1D03               	skipz
 12320  1FB8  2FBB               	goto	u3275
 12321  1FB9  300C               	movlw	12
 12322  1FBA  0221               	subwf	InitializeTaps@itap,w
 12323  1FBB                     u3275:	
 12324  1FBB  1803               	btfsc	3,0
 12325  1FBC  0008               	return
 12326                           
 12327                           ;user.c: 177: tap[itap] = 0;
 12328  1FBD  0020               	movlb	0	; select bank0
 12329  1FBE  0821               	movf	InitializeTaps@itap,w
 12330  1FBF  00A0               	movwf	??_InitializeTaps
 12331  1FC0  3001               	movlw	1
 12332  1FC1                     u3285:	
 12333  1FC1  35A0               	lslf	??_InitializeTaps,f
 12334  1FC2  3EFF               	addlw	-1
 12335  1FC3  1D03               	skipz
 12336  1FC4  2FC1               	goto	u3285
 12337  1FC5  3520               	lslf	??_InitializeTaps,w
 12338  1FC6  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12339  1FC7  0086               	movwf	6
 12340  1FC8  3001               	movlw	1	; select bank3/4
 12341  1FC9  0087               	movwf	7
 12342  1FCA  3000               	movlw	0
 12343  1FCB  3FC0               	movwi [0]fsr1
 12344  1FCC  3000               	movlw	0
 12345  1FCD  3FC1               	movwi [1]fsr1
 12346  1FCE  3FC2               	movwi [2]fsr1
 12347  1FCF  3FC3               	movwi [3]fsr1
 12348  1FD0  3001               	movlw	1
 12349  1FD1  07A1               	addwf	InitializeTaps@itap,f
 12350  1FD2  3000               	movlw	0
 12351  1FD3  3DA2               	addwfc	InitializeTaps@itap+1,f
 12352  1FD4  2FB2               	goto	L10
 12353  1FD5                     __end_of_InitializeTaps:	
 12354                           
 12355                           	psect	text40
 12356  1042                     __ptext40:	
 12357 ;; *************** function _InitApp *****************
 12358 ;; Defined at:
 12359 ;;		line 23 in file "user.c"
 12360 ;; Parameters:    Size  Location     Type
 12361 ;;		None
 12362 ;; Auto vars:     Size  Location     Type
 12363 ;;		None
 12364 ;; Return value:  Size  Location     Type
 12365 ;;                  1    wreg      void 
 12366 ;; Registers used:
 12367 ;;		wreg, status,2, status,0, pclath, cstack
 12368 ;; Tracked objects:
 12369 ;;		On entry : 0/0
 12370 ;;		On exit  : 0/0
 12371 ;;		Unchanged: 0/0
 12372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12377 ;;Total ram usage:        0 bytes
 12378 ;; Hardware stack levels used:    1
 12379 ;; Hardware stack levels required when called:    4
 12380 ;; This function calls:
 12381 ;;		_init_adc
 12382 ;;		_init_pwm
 12383 ;; This function is called by:
 12384 ;;		_main
 12385 ;; This function uses a non-reentrant model
 12386 ;;
 12387                           
 12388                           
 12389                           ;psect for function _InitApp
 12390  1042                     _InitApp:	
 12391                           
 12392                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12393                           
 12394                           ;incstack = 0
 12395                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12396  1042  0021               	movlb	1	; select bank1
 12397  1043  100D               	bcf	13,0	;volatile
 12398                           
 12399                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12400  1044  108D               	bcf	13,1	;volatile
 12401                           
 12402                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12403  1045  110D               	bcf	13,2	;volatile
 12404                           
 12405                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12406  1046  118D               	bcf	13,3	;volatile
 12407                           
 12408                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12409  1047  120D               	bcf	13,4	;volatile
 12410                           
 12411                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12412  1048  128D               	bcf	13,5	;volatile
 12413                           
 12414                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12415  1049  140E               	bsf	14,0	;volatile
 12416                           
 12417                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12418  104A  120E               	bcf	14,4	;volatile
 12419                           
 12420                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12421  104B  128E               	bcf	14,5	;volatile
 12422                           
 12423                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12424  104C  100F               	bcf	15,0	;volatile
 12425                           
 12426                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12427  104D  108F               	bcf	15,1	;volatile
 12428                           
 12429                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12430  104E  110F               	bcf	15,2	;volatile
 12431                           
 12432                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12433  104F  118F               	bcf	15,3	;volatile
 12434                           
 12435                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12436  1050  120F               	bcf	15,4	;volatile
 12437                           
 12438                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12439  1051  168F               	bsf	15,5	;volatile
 12440                           
 12441                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12442  1052  170F               	bsf	15,6	;volatile
 12443                           
 12444                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12445  1053  178F               	bsf	15,7	;volatile
 12446                           
 12447                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12448  1054  1410               	bsf	16,0	;volatile
 12449                           
 12450                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12451  1055  1490               	bsf	16,1	;volatile
 12452                           
 12453                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12454  1056  0023               	movlb	3	; select bank3
 12455  1057  1010               	bcf	16,0	;volatile
 12456                           
 12457                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12458  1058  1090               	bcf	16,1	;volatile
 12459                           
 12460                           ;user.c: 53: PORTEbits.RE0 = 0;
 12461  1059  0020               	movlb	0	; select bank0
 12462  105A  1010               	bcf	16,0	;volatile
 12463                           
 12464                           ;user.c: 54: PORTEbits.RE1 = 0;
 12465  105B  1090               	bcf	16,1	;volatile
 12466                           
 12467                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12468  105C  0026               	movlb	6	; select bank6
 12469  105D  100C               	bcf	12,0	;volatile
 12470                           
 12471                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12472  105E  108C               	bcf	12,1	;volatile
 12473                           
 12474                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12475  105F  110C               	bcf	12,2	;volatile
 12476                           
 12477                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12478  1060  118C               	bcf	12,3	;volatile
 12479                           
 12480                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12481  1061  120C               	bcf	12,4	;volatile
 12482                           
 12483                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12484  1062  128C               	bcf	12,5	;volatile
 12485                           
 12486                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12487  1063  170C               	bsf	12,6	;volatile
 12488                           
 12489                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12490  1064  0028               	movlb	8	; select bank8
 12491  1065  130C               	bcf	12,6	;volatile
 12492                           
 12493                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12494  1066  0026               	movlb	6	; select bank6
 12495  1067  108D               	bcf	13,1	;volatile
 12496                           
 12497                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12498  1068  110D               	bcf	13,2	;volatile
 12499                           
 12500                           ;user.c: 68: init_adc();
 12501  1069  319E  26BC  3190   	fcall	_init_adc
 12502                           
 12503                           ;user.c: 69: init_pwm();
 12504  106C  3193  231C         	fcall	_init_pwm
 12505                           
 12506                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12507  106E  178B               	bsf	11,7	;volatile
 12508                           
 12509                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12510  106F  168B               	bsf	11,5	;volatile
 12511                           
 12512                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12513  1070  110B               	bcf	11,2	;volatile
 12514  1071  0008               	return
 12515  1072                     __end_of_InitApp:	
 12516                           
 12517                           	psect	text41
 12518  131C                     __ptext41:	
 12519 ;; *************** function _init_pwm *****************
 12520 ;; Defined at:
 12521 ;;		line 117 in file "user.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;		None
 12524 ;; Auto vars:     Size  Location     Type
 12525 ;;		None
 12526 ;; Return value:  Size  Location     Type
 12527 ;;                  1    wreg      void 
 12528 ;; Registers used:
 12529 ;;		wreg, status,2, status,0, pclath, cstack
 12530 ;; Tracked objects:
 12531 ;;		On entry : 0/0
 12532 ;;		On exit  : 0/0
 12533 ;;		Unchanged: 0/0
 12534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12539 ;;Total ram usage:        0 bytes
 12540 ;; Hardware stack levels used:    1
 12541 ;; Hardware stack levels required when called:    3
 12542 ;; This function calls:
 12543 ;;		_init_timer0
 12544 ;;		_init_timer2
 12545 ;; This function is called by:
 12546 ;;		_InitApp
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550                           
 12551                           ;psect for function _init_pwm
 12552  131C                     _init_pwm:	
 12553                           
 12554                           ;user.c: 118: APFCONbits.CCP2SEL = 0;
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12558  131C  0022               	movlb	2	; select bank2
 12559  131D  101D               	bcf	29,0	;volatile
 12560                           
 12561                           ;user.c: 119: TRISCbits.TRISC2 = 0;
 12562  131E  0021               	movlb	1	; select bank1
 12563  131F  110E               	bcf	14,2	;volatile
 12564                           
 12565                           ;user.c: 120: TRISCbits.TRISC1 = 0;
 12566  1320  108E               	bcf	14,1	;volatile
 12567                           
 12568                           ;user.c: 121: TRISGbits.TRISG0 = 0;
 12569  1321  0026               	movlb	6	; select bank6
 12570  1322  100D               	bcf	13,0	;volatile
 12571                           
 12572                           ;user.c: 122: TRISGbits.TRISG3 = 0;
 12573  1323  118D               	bcf	13,3	;volatile
 12574                           
 12575                           ;user.c: 123: TRISGbits.TRISG4 = 0;
 12576  1324  120D               	bcf	13,4	;volatile
 12577                           
 12578                           ;user.c: 124: TRISEbits.TRISE6 = 0;
 12579  1325  0021               	movlb	1	; select bank1
 12580  1326  1310               	bcf	16,6	;volatile
 12581                           
 12582                           ;user.c: 125: TRISEbits.TRISE5 = 0;
 12583  1327  1290               	bcf	16,5	;volatile
 12584                           
 12585                           ;user.c: 126: TRISEbits.TRISE4 = 0;
 12586  1328  1210               	bcf	16,4	;volatile
 12587                           
 12588                           ;user.c: 127: TRISEbits.TRISE3 = 0;
 12589  1329  1190               	bcf	16,3	;volatile
 12590                           
 12591                           ;user.c: 128: TRISEbits.TRISE2 = 0;
 12592  132A  1110               	bcf	16,2	;volatile
 12593                           
 12594                           ;user.c: 129: CCP1CONbits.CCP1M = 0b1111;
 12595  132B  300F               	movlw	15
 12596  132C  0025               	movlb	5	; select bank5
 12597  132D  0493               	iorwf	19,f	;volatile
 12598                           
 12599                           ;user.c: 130: CCP2CONbits.CCP2M = 0b1111;
 12600  132E  300F               	movlw	15
 12601  132F  049A               	iorwf	26,f	;volatile
 12602                           
 12603                           ;user.c: 131: CCP3CONbits.CCP3M = 0b1111;
 12604  1330  300F               	movlw	15
 12605  1331  0026               	movlb	6	; select bank6
 12606  1332  0493               	iorwf	19,f	;volatile
 12607                           
 12608                           ;user.c: 132: CCP4CONbits.CCP4M = 0b1111;
 12609  1333  300F               	movlw	15
 12610  1334  049A               	iorwf	26,f	;volatile
 12611                           
 12612                           ;user.c: 133: CCP5CONbits.CCP5M = 0b1111;
 12613  1335  300F               	movlw	15
 12614  1336  049E               	iorwf	30,f	;volatile
 12615                           
 12616                           ;user.c: 134: CCP6CONbits.CCP6M = 0b1111;
 12617  1337  300F               	movlw	15
 12618  1338  002C               	movlb	12	; select bank12
 12619  1339  0493               	iorwf	19,f	;volatile
 12620                           
 12621                           ;user.c: 135: CCP7CONbits.CCP7M = 0b1111;
 12622  133A  300F               	movlw	15
 12623  133B  0496               	iorwf	22,f	;volatile
 12624                           
 12625                           ;user.c: 136: CCP8CONbits.CCP8M = 0b1111;
 12626  133C  300F               	movlw	15
 12627  133D  0499               	iorwf	25,f	;volatile
 12628                           
 12629                           ;user.c: 137: CCP9CONbits.CCP9M = 0b1111;
 12630  133E  300F               	movlw	15
 12631  133F  049C               	iorwf	28,f	;volatile
 12632                           
 12633                           ;user.c: 138: CCP10CONbits.CCP10M = 0b1111;
 12634  1340  300F               	movlw	15
 12635  1341  049F               	iorwf	31,f	;volatile
 12636                           
 12637                           ;user.c: 139: CCPTMRS0 = 0b00000000;
 12638  1342  0025               	movlb	5	; select bank5
 12639  1343  019D               	clrf	29	;volatile
 12640                           
 12641                           ;user.c: 140: CCPTMRS1 = 0b00000000;
 12642  1344  019E               	clrf	30	;volatile
 12643                           
 12644                           ;user.c: 141: CCPTMRS2 = 0b00000000;
 12645  1345  019F               	clrf	31	;volatile
 12646                           
 12647                           ;user.c: 142: CCPR1 = 50;
 12648  1346  3000               	movlw	0
 12649  1347  0092               	movwf	18	;volatile
 12650  1348  3032               	movlw	50
 12651  1349  0091               	movwf	17	;volatile
 12652                           
 12653                           ;user.c: 143: CCPR2 = 100;
 12654  134A  3000               	movlw	0
 12655  134B  0099               	movwf	25	;volatile
 12656  134C  3064               	movlw	100
 12657  134D  0098               	movwf	24	;volatile
 12658                           
 12659                           ;user.c: 144: CCPR3 = 150;
 12660  134E  3000               	movlw	0
 12661  134F  0026               	movlb	6	; select bank6
 12662  1350  0092               	movwf	18	;volatile
 12663  1351  3096               	movlw	150
 12664  1352  0091               	movwf	17	;volatile
 12665                           
 12666                           ;user.c: 145: CCPR4 = 200;
 12667  1353  3000               	movlw	0
 12668  1354  0099               	movwf	25	;volatile
 12669  1355  30C8               	movlw	200
 12670  1356  0098               	movwf	24	;volatile
 12671                           
 12672                           ;user.c: 146: init_timer2();
 12673  1357  319E  26AA  3193   	fcall	_init_timer2
 12674                           
 12675                           ;user.c: 147: init_timer0();
 12676  135A  319E  26A3         	fcall	_init_timer0
 12677  135C  0008               	return
 12678  135D                     __end_of_init_pwm:	
 12679                           
 12680                           	psect	text42
 12681  1EAA                     __ptext42:	
 12682 ;; *************** function _init_timer2 *****************
 12683 ;; Defined at:
 12684 ;;		line 150 in file "user.c"
 12685 ;; Parameters:    Size  Location     Type
 12686 ;;		None
 12687 ;; Auto vars:     Size  Location     Type
 12688 ;;		None
 12689 ;; Return value:  Size  Location     Type
 12690 ;;                  1    wreg      void 
 12691 ;; Registers used:
 12692 ;;		wreg, status,2, status,0
 12693 ;; Tracked objects:
 12694 ;;		On entry : 0/0
 12695 ;;		On exit  : 0/0
 12696 ;;		Unchanged: 0/0
 12697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12702 ;;Total ram usage:        0 bytes
 12703 ;; Hardware stack levels used:    1
 12704 ;; Hardware stack levels required when called:    2
 12705 ;; This function calls:
 12706 ;;		Nothing
 12707 ;; This function is called by:
 12708 ;;		_init_pwm
 12709 ;; This function uses a non-reentrant model
 12710 ;;
 12711                           
 12712                           
 12713                           ;psect for function _init_timer2
 12714  1EAA                     _init_timer2:	
 12715                           
 12716                           ;user.c: 151: T2CONbits.T2OUTPS = 0b0000;
 12717                           
 12718                           ;incstack = 0
 12719                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12720  1EAA  3087               	movlw	-121
 12721  1EAB  0020               	movlb	0	; select bank0
 12722  1EAC  059C               	andwf	28,f	;volatile
 12723                           
 12724                           ;user.c: 152: T2CONbits.T2CKPS = 0b00;
 12725  1EAD  30FC               	movlw	-4
 12726  1EAE  059C               	andwf	28,f	;volatile
 12727                           
 12728                           ;user.c: 153: PR2 = 0xFF;
 12729  1EAF  30FF               	movlw	255
 12730  1EB0  009B               	movwf	27	;volatile
 12731                           
 12732                           ;user.c: 154: T2CONbits.TMR2ON = 1;
 12733  1EB1  151C               	bsf	28,2	;volatile
 12734  1EB2  0008               	return
 12735  1EB3                     __end_of_init_timer2:	
 12736                           
 12737                           	psect	text43
 12738  1EA3                     __ptext43:	
 12739 ;; *************** function _init_timer0 *****************
 12740 ;; Defined at:
 12741 ;;		line 157 in file "user.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;		None
 12744 ;; Auto vars:     Size  Location     Type
 12745 ;;		None
 12746 ;; Return value:  Size  Location     Type
 12747 ;;                  1    wreg      void 
 12748 ;; Registers used:
 12749 ;;		None
 12750 ;; Tracked objects:
 12751 ;;		On entry : 0/0
 12752 ;;		On exit  : 0/0
 12753 ;;		Unchanged: 0/0
 12754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12759 ;;Total ram usage:        0 bytes
 12760 ;; Hardware stack levels used:    1
 12761 ;; Hardware stack levels required when called:    2
 12762 ;; This function calls:
 12763 ;;		Nothing
 12764 ;; This function is called by:
 12765 ;;		_init_pwm
 12766 ;; This function uses a non-reentrant model
 12767 ;;
 12768                           
 12769                           
 12770                           ;psect for function _init_timer0
 12771  1EA3                     _init_timer0:	
 12772                           
 12773                           ;user.c: 158: OPTION_REGbits.TMR0CS = 0b0;
 12774                           
 12775                           ;incstack = 0
 12776                           ; Regs used in _init_timer0: []
 12777  1EA3  0021               	movlb	1	; select bank1
 12778  1EA4  1295               	bcf	21,5	;volatile
 12779                           
 12780                           ;user.c: 159: OPTION_REGbits.PSA = 0b0;
 12781  1EA5  1195               	bcf	21,3	;volatile
 12782                           
 12783                           ;user.c: 160: OPTION_REGbits.PS0 = 0b0;
 12784  1EA6  1015               	bcf	21,0	;volatile
 12785                           
 12786                           ;user.c: 161: OPTION_REGbits.PS1 = 0b1;
 12787  1EA7  1495               	bsf	21,1	;volatile
 12788                           
 12789                           ;user.c: 162: OPTION_REGbits.PS2 = 0b0;
 12790  1EA8  1115               	bcf	21,2	;volatile
 12791  1EA9  0008               	return
 12792  1EAA                     __end_of_init_timer0:	
 12793                           
 12794                           	psect	text44
 12795  1EBC                     __ptext44:	
 12796 ;; *************** function _init_adc *****************
 12797 ;; Defined at:
 12798 ;;		line 103 in file "user.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;		None
 12801 ;; Auto vars:     Size  Location     Type
 12802 ;;		None
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      void 
 12805 ;; Registers used:
 12806 ;;		wreg, status,2, status,0
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12816 ;;Total ram usage:        0 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    2
 12819 ;; This function calls:
 12820 ;;		Nothing
 12821 ;; This function is called by:
 12822 ;;		_InitApp
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function _init_adc
 12828  1EBC                     _init_adc:	
 12829                           
 12830                           ;user.c: 104: ADCON1bits.ADFM = 0b1;
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12834  1EBC  0021               	movlb	1	; select bank1
 12835  1EBD  179E               	bsf	30,7	;volatile
 12836                           
 12837                           ;user.c: 105: ADCON1bits.ADCS = 0b110;
 12838  1EBE  081E               	movf	30,w	;volatile
 12839  1EBF  398F               	andlw	-113
 12840  1EC0  3860               	iorlw	96
 12841  1EC1  009E               	movwf	30	;volatile
 12842                           
 12843                           ;user.c: 106: ADCON1bits.ADPREF = 0b00;
 12844  1EC2  30FC               	movlw	-4
 12845  1EC3  059E               	andwf	30,f	;volatile
 12846                           
 12847                           ;user.c: 107: ADCON0bits.ADON = 0b1;
 12848  1EC4  141D               	bsf	29,0	;volatile
 12849  1EC5  0008               	return
 12850  1EC6                     __end_of_init_adc:	
 12851                           
 12852                           	psect	text45
 12853  1E9B                     __ptext45:	
 12854 ;; *************** function _ConfigureOscillator *****************
 12855 ;; Defined at:
 12856 ;;		line 18 in file "system.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;		None
 12859 ;; Auto vars:     Size  Location     Type
 12860 ;;		None
 12861 ;; Return value:  Size  Location     Type
 12862 ;;                  1    wreg      void 
 12863 ;; Registers used:
 12864 ;;		wreg, status,2, status,0
 12865 ;; Tracked objects:
 12866 ;;		On entry : 0/0
 12867 ;;		On exit  : 0/0
 12868 ;;		Unchanged: 0/0
 12869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12874 ;;Total ram usage:        0 bytes
 12875 ;; Hardware stack levels used:    1
 12876 ;; Hardware stack levels required when called:    2
 12877 ;; This function calls:
 12878 ;;		Nothing
 12879 ;; This function is called by:
 12880 ;;		_main
 12881 ;; This function uses a non-reentrant model
 12882 ;;
 12883                           
 12884                           
 12885                           ;psect for function _ConfigureOscillator
 12886  1E9B                     _ConfigureOscillator:	
 12887                           
 12888                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12889                           
 12890                           ;incstack = 0
 12891                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12892  1E9B  30FC               	movlw	-4
 12893  1E9C  0021               	movlb	1	; select bank1
 12894  1E9D  0599               	andwf	25,f	;volatile
 12895  1E9E  0008               	return
 12896  1E9F                     __end_of_ConfigureOscillator:	
 12897                           
 12898                           	psect	intentry
 12899  0004                     __pintentry:	
 12900 ;; *************** function _isr *****************
 12901 ;; Defined at:
 12902 ;;		line 23 in file "interrupts.c"
 12903 ;; Parameters:    Size  Location     Type
 12904 ;;		None
 12905 ;; Auto vars:     Size  Location     Type
 12906 ;;		None
 12907 ;; Return value:  Size  Location     Type
 12908 ;;                  1    wreg      void 
 12909 ;; Registers used:
 12910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12911 ;; Tracked objects:
 12912 ;;		On entry : 0/0
 12913 ;;		On exit  : 0/0
 12914 ;;		Unchanged: 0/0
 12915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12918 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12919 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12920 ;;Total ram usage:        5 bytes
 12921 ;; Hardware stack levels used:    1
 12922 ;; Hardware stack levels required when called:    1
 12923 ;; This function calls:
 12924 ;;		i1_set_leds_top
 12925 ;; This function is called by:
 12926 ;;		Interrupt level 1
 12927 ;; This function uses a non-reentrant model
 12928 ;;
 12929                           
 12930  0004                     _isr:	
 12931                           
 12932                           ;incstack = 0
 12933                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12934  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12935  0005  3180               	pagesel	$
 12936  0006  0020               	movlb	0	; select bank0
 12937  0007  087F               	movf	127,w
 12938  0008  00F8               	movwf	??_isr+4
 12939                           
 12940                           ;interrupts.c: 24: extern volatile long timer;
 12941                           ;interrupts.c: 25: extern volatile long sub_timer;
 12942                           ;interrupts.c: 26: extern volatile long tap_timer;
 12943                           ;interrupts.c: 27: extern volatile long mod_timer;
 12944                           ;interrupts.c: 28: extern volatile long baseline_delay_time;
 12945                           ;interrupts.c: 29: extern volatile long delay_time;
 12946                           ;interrupts.c: 30: extern int top_push_state;
 12947                           ;interrupts.c: 31: extern uint8_t feedback_start;
 12948                           ;interrupts.c: 33: if (INTCONbits.TMR0IF == 1) {
 12949  0009  1D0B               	btfss	11,2	;volatile
 12950  000A  2895               	goto	i1l4090
 12951                           
 12952                           ;interrupts.c: 34: timer = timer + 1;
 12953  000B  3001               	movlw	1
 12954  000C  00F4               	movwf	??_isr
 12955  000D  3000               	movlw	0
 12956  000E  00F5               	movwf	??_isr+1
 12957  000F  3000               	movlw	0
 12958  0010  00F6               	movwf	??_isr+2
 12959  0011  3000               	movlw	0
 12960  0012  00F7               	movwf	??_isr+3
 12961  0013  0021               	movlb	1	; select bank1
 12962  0014  0843               	movf	_timer^(0+128),w	;volatile
 12963  0015  07F4               	addwf	??_isr,f
 12964  0016  0844               	movf	(_timer+1)^(0+128),w	;volatile
 12965  0017  3DF5               	addwfc	??_isr+1,f
 12966  0018  0845               	movf	(_timer+2)^(0+128),w	;volatile
 12967  0019  3DF6               	addwfc	??_isr+2,f
 12968  001A  0846               	movf	(_timer+3)^(0+128),w	;volatile
 12969  001B  3DF7               	addwfc	??_isr+3,f
 12970  001C  0877               	movf	??_isr+3,w
 12971  001D  00C6               	movwf	(_timer+3)^(0+128)	;volatile
 12972  001E  0876               	movf	??_isr+2,w
 12973  001F  00C5               	movwf	(_timer+2)^(0+128)	;volatile
 12974  0020  0875               	movf	??_isr+1,w
 12975  0021  00C4               	movwf	(_timer+1)^(0+128)	;volatile
 12976  0022  0874               	movf	??_isr,w
 12977  0023  00C3               	movwf	_timer^(0+128)	;volatile
 12978                           
 12979                           ;interrupts.c: 35: sub_timer = sub_timer + 1;
 12980  0024  3001               	movlw	1
 12981  0025  00F4               	movwf	??_isr
 12982  0026  3000               	movlw	0
 12983  0027  00F5               	movwf	??_isr+1
 12984  0028  3000               	movlw	0
 12985  0029  00F6               	movwf	??_isr+2
 12986  002A  3000               	movlw	0
 12987  002B  00F7               	movwf	??_isr+3
 12988  002C  083F               	movf	_sub_timer^(0+128),w	;volatile
 12989  002D  07F4               	addwf	??_isr,f
 12990  002E  0840               	movf	(_sub_timer+1)^(0+128),w	;volatile
 12991  002F  3DF5               	addwfc	??_isr+1,f
 12992  0030  0841               	movf	(_sub_timer+2)^(0+128),w	;volatile
 12993  0031  3DF6               	addwfc	??_isr+2,f
 12994  0032  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12995  0033  3DF7               	addwfc	??_isr+3,f
 12996  0034  0877               	movf	??_isr+3,w
 12997  0035  00C2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 12998  0036  0876               	movf	??_isr+2,w
 12999  0037  00C1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13000  0038  0875               	movf	??_isr+1,w
 13001  0039  00C0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13002  003A  0874               	movf	??_isr,w
 13003  003B  00BF               	movwf	_sub_timer^(0+128)	;volatile
 13004                           
 13005                           ;interrupts.c: 36: tap_timer = tap_timer + 1;
 13006  003C  3001               	movlw	1
 13007  003D  00F4               	movwf	??_isr
 13008  003E  3000               	movlw	0
 13009  003F  00F5               	movwf	??_isr+1
 13010  0040  3000               	movlw	0
 13011  0041  00F6               	movwf	??_isr+2
 13012  0042  3000               	movlw	0
 13013  0043  00F7               	movwf	??_isr+3
 13014  0044  0879               	movf	_tap_timer,w	;volatile
 13015  0045  07F4               	addwf	??_isr,f
 13016  0046  087A               	movf	_tap_timer+1,w	;volatile
 13017  0047  3DF5               	addwfc	??_isr+1,f
 13018  0048  087B               	movf	_tap_timer+2,w	;volatile
 13019  0049  3DF6               	addwfc	??_isr+2,f
 13020  004A  087C               	movf	_tap_timer+3,w	;volatile
 13021  004B  3DF7               	addwfc	??_isr+3,f
 13022  004C  0877               	movf	??_isr+3,w
 13023  004D  00FC               	movwf	_tap_timer+3	;volatile
 13024  004E  0876               	movf	??_isr+2,w
 13025  004F  00FB               	movwf	_tap_timer+2	;volatile
 13026  0050  0875               	movf	??_isr+1,w
 13027  0051  00FA               	movwf	_tap_timer+1	;volatile
 13028  0052  0874               	movf	??_isr,w
 13029  0053  00F9               	movwf	_tap_timer	;volatile
 13030                           
 13031                           ;interrupts.c: 37: mod_timer = mod_timer + 1;
 13032  0054  3001               	movlw	1
 13033  0055  00F4               	movwf	??_isr
 13034  0056  3000               	movlw	0
 13035  0057  00F5               	movwf	??_isr+1
 13036  0058  3000               	movlw	0
 13037  0059  00F6               	movwf	??_isr+2
 13038  005A  3000               	movlw	0
 13039  005B  00F7               	movwf	??_isr+3
 13040  005C  0022               	movlb	2	; select bank2
 13041  005D  0824               	movf	_mod_timer^(0+256),w	;volatile
 13042  005E  07F4               	addwf	??_isr,f
 13043  005F  0825               	movf	(_mod_timer+1)^(0+256),w	;volatile
 13044  0060  3DF5               	addwfc	??_isr+1,f
 13045  0061  0826               	movf	(_mod_timer+2)^(0+256),w	;volatile
 13046  0062  3DF6               	addwfc	??_isr+2,f
 13047  0063  0827               	movf	(_mod_timer+3)^(0+256),w	;volatile
 13048  0064  3DF7               	addwfc	??_isr+3,f
 13049  0065  0877               	movf	??_isr+3,w
 13050  0066  00A7               	movwf	(_mod_timer+3)^(0+256)	;volatile
 13051  0067  0876               	movf	??_isr+2,w
 13052  0068  00A6               	movwf	(_mod_timer+2)^(0+256)	;volatile
 13053  0069  0875               	movf	??_isr+1,w
 13054  006A  00A5               	movwf	(_mod_timer+1)^(0+256)	;volatile
 13055  006B  0874               	movf	??_isr,w
 13056  006C  00A4               	movwf	_mod_timer^(0+256)	;volatile
 13057                           
 13058                           ;interrupts.c: 38: if (feedback_start == 1) {
 13059  006D  0021               	movlb	1	; select bank1
 13060  006E  0354               	decf	_feedback_start^(0+128),w
 13061  006F  1D03               	btfss	3,2
 13062  0070  2881               	goto	i1l4082
 13063                           
 13064                           ;interrupts.c: 39: feedback_timer++;
 13065  0071  3001               	movlw	1
 13066  0072  07C7               	addwf	_feedback_timer^(0+128),f	;volatile
 13067  0073  3000               	movlw	0
 13068  0074  3DC8               	addwfc	(_feedback_timer+1)^(0+128),f	;volatile
 13069                           
 13070                           ;interrupts.c: 40: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 13071  0075  0848               	movf	(_feedback_timer+1)^(0+128),w	;volatile
 13072  0076  0267               	subwf	(_long_press_limit+1)^(0+128),w
 13073  0077  1D03               	skipz
 13074  0078  287B               	goto	u402_25
 13075  0079  0847               	movf	_feedback_timer^(0+128),w	;volatile
 13076  007A  0266               	subwf	_long_press_limit^(0+128),w
 13077  007B                     u402_25:	
 13078  007B  1803               	skipnc
 13079  007C  2881               	goto	i1l4082
 13080  007D  0867               	movf	(_long_press_limit+1)^(0+128),w
 13081  007E  00C8               	movwf	(_feedback_timer+1)^(0+128)	;volatile
 13082  007F  0866               	movf	_long_press_limit^(0+128),w
 13083  0080  00C7               	movwf	_feedback_timer^(0+128)	;volatile
 13084  0081                     i1l4082:	
 13085                           
 13086                           ;interrupts.c: 41: }
 13087                           ;interrupts.c: 42: if (longTap_start == 1) {
 13088  0081  0355               	decf	_longTap_start^(0+128),w
 13089  0082  1D03               	btfss	3,2
 13090  0083  2894               	goto	i1l4088
 13091                           
 13092                           ;interrupts.c: 43: longTap_timer++;
 13093  0084  3001               	movlw	1
 13094  0085  07CD               	addwf	_longTap_timer^(0+128),f	;volatile
 13095  0086  3000               	movlw	0
 13096  0087  3DCE               	addwfc	(_longTap_timer+1)^(0+128),f	;volatile
 13097                           
 13098                           ;interrupts.c: 44: if (longTap_timer > long_press_limit) {
 13099  0088  084E               	movf	(_longTap_timer+1)^(0+128),w	;volatile
 13100  0089  0267               	subwf	(_long_press_limit+1)^(0+128),w
 13101  008A  1D03               	skipz
 13102  008B  288E               	goto	u404_25
 13103  008C  084D               	movf	_longTap_timer^(0+128),w	;volatile
 13104  008D  0266               	subwf	_long_press_limit^(0+128),w
 13105  008E                     u404_25:	
 13106  008E  1803               	skipnc
 13107  008F  2894               	goto	i1l4088
 13108                           
 13109                           ;interrupts.c: 45: longTap_timer = long_press_limit;
 13110  0090  0867               	movf	(_long_press_limit+1)^(0+128),w
 13111  0091  00CE               	movwf	(_longTap_timer+1)^(0+128)	;volatile
 13112  0092  0866               	movf	_long_press_limit^(0+128),w
 13113  0093  00CD               	movwf	_longTap_timer^(0+128)	;volatile
 13114  0094                     i1l4088:	
 13115                           
 13116                           ;interrupts.c: 46: }
 13117                           ;interrupts.c: 47: }
 13118                           ;interrupts.c: 49: INTCONbits.TMR0IF = 0;
 13119  0094  110B               	bcf	11,2	;volatile
 13120  0095                     i1l4090:	
 13121                           
 13122                           ;interrupts.c: 50: }
 13123                           ;interrupts.c: 54: if (longTap_state < 1 && doubleTap_state < 1) {
 13124  0095  0021               	movlb	1	; select bank1
 13125  0096  086C               	movf	_longTap_state^(0+128),w	;volatile
 13126  0097  1D03               	btfss	3,2
 13127  0098  28E1               	goto	i1l4108
 13128  0099  087D               	movf	_doubleTap_state,w	;volatile
 13129  009A  1D03               	btfss	3,2
 13130  009B  28E1               	goto	i1l4108
 13131                           
 13132                           ;interrupts.c: 56: if (timer >= baseline_delay_time) {
 13133  009C  0846               	movf	(_timer+3)^(0+128),w	;volatile
 13134  009D  3A80               	xorlw	128
 13135  009E  00F4               	movwf	??_isr
 13136  009F  085F               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13137  00A0  3A80               	xorlw	128
 13138  00A1  0274               	subwf	??_isr,w
 13139  00A2  1D03               	skipz
 13140  00A3  28AE               	goto	u407_23
 13141  00A4  085E               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13142  00A5  0245               	subwf	(_timer+2)^(0+128),w	;volatile
 13143  00A6  1D03               	skipz
 13144  00A7  28AE               	goto	u407_23
 13145  00A8  085D               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13146  00A9  0244               	subwf	(_timer+1)^(0+128),w	;volatile
 13147  00AA  1D03               	skipz
 13148  00AB  28AE               	goto	u407_23
 13149  00AC  085C               	movf	_baseline_delay_time^(0+128),w	;volatile
 13150  00AD  0243               	subwf	_timer^(0+128),w	;volatile
 13151  00AE                     u407_23:	
 13152  00AE  1C03               	skipc
 13153  00AF  28BB               	goto	i1l4100
 13154                           
 13155                           ;interrupts.c: 59: LATBbits.LATB4 = 1;
 13156  00B0  0022               	movlb	2	; select bank2
 13157  00B1  160D               	bsf	13,4	;volatile
 13158                           
 13159                           ;interrupts.c: 61: timer = 0;
 13160  00B2  3000               	movlw	0
 13161  00B3  0021               	movlb	1	; select bank1
 13162  00B4  00C6               	movwf	(_timer+3)^(0+128)	;volatile
 13163  00B5  3000               	movlw	0
 13164  00B6  00C5               	movwf	(_timer+2)^(0+128)	;volatile
 13165  00B7  3000               	movlw	0
 13166  00B8  00C4               	movwf	(_timer+1)^(0+128)	;volatile
 13167  00B9  3000               	movlw	0
 13168  00BA  00C3               	movwf	_timer^(0+128)	;volatile
 13169  00BB                     i1l4100:	
 13170                           
 13171                           ;interrupts.c: 62: }
 13172                           ;interrupts.c: 64: if (baseline_delay_time < 20) {
 13173  00BB  1BDF               	btfsc	(_baseline_delay_time+3)^(0+128),7	;volatile
 13174  00BC  28CA               	goto	i1l4102
 13175  00BD  085F               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 13176  00BE  1D03               	btfss	3,2
 13177  00BF  28CD               	goto	i1l92
 13178  00C0  085E               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 13179  00C1  1D03               	btfss	3,2
 13180  00C2  28CD               	goto	i1l92
 13181  00C3  085D               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 13182  00C4  1D03               	btfss	3,2
 13183  00C5  28CD               	goto	i1l92
 13184  00C6  3014               	movlw	20
 13185  00C7  025C               	subwf	_baseline_delay_time^(0+128),w	;volatile
 13186  00C8  1803               	btfsc	3,0
 13187  00C9  28CD               	goto	i1l92
 13188  00CA                     i1l4102:	
 13189                           
 13190                           ;interrupts.c: 65: LATBbits.LATB1 = 1;
 13191  00CA  0022               	movlb	2	; select bank2
 13192  00CB  148D               	bsf	13,1	;volatile
 13193                           
 13194                           ;interrupts.c: 66: } else {
 13195  00CC  28CF               	goto	i1l4104
 13196  00CD                     i1l92:	
 13197                           
 13198                           ;interrupts.c: 67: LATBbits.LATB1 = 0;
 13199  00CD  0022               	movlb	2	; select bank2
 13200  00CE  108D               	bcf	13,1	;volatile
 13201  00CF                     i1l4104:	
 13202                           
 13203                           ;interrupts.c: 68: }
 13204                           ;interrupts.c: 71: if (timer >= 20) {
 13205  00CF  0021               	movlb	1	; select bank1
 13206  00D0  1BC6               	btfsc	(_timer+3)^(0+128),7	;volatile
 13207  00D1  28E1               	goto	i1l4108
 13208  00D2  0846               	movf	(_timer+3)^(0+128),w	;volatile
 13209  00D3  1D03               	btfss	3,2
 13210  00D4  28DF               	goto	i1l4106
 13211  00D5  0845               	movf	(_timer+2)^(0+128),w	;volatile
 13212  00D6  1D03               	btfss	3,2
 13213  00D7  28DF               	goto	i1l4106
 13214  00D8  0844               	movf	(_timer+1)^(0+128),w	;volatile
 13215  00D9  1D03               	btfss	3,2
 13216  00DA  28DF               	goto	i1l4106
 13217  00DB  3014               	movlw	20
 13218  00DC  0243               	subwf	_timer^(0+128),w	;volatile
 13219  00DD  1C03               	btfss	3,0
 13220  00DE  28E1               	goto	i1l4108
 13221  00DF                     i1l4106:	
 13222                           
 13223                           ;interrupts.c: 73: LATBbits.LATB4 = 0;
 13224  00DF  0022               	movlb	2	; select bank2
 13225  00E0  120D               	bcf	13,4	;volatile
 13226  00E1                     i1l4108:	
 13227                           
 13228                           ;interrupts.c: 75: }
 13229                           ;interrupts.c: 76: }
 13230                           ;interrupts.c: 79: if (sub_timer >= delay_time) {
 13231  00E1  0021               	movlb	1	; select bank1
 13232  00E2  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13233  00E3  3A80               	xorlw	128
 13234  00E4  00F4               	movwf	??_isr
 13235  00E5  0863               	movf	(_delay_time+3)^(0+128),w	;volatile
 13236  00E6  3A80               	xorlw	128
 13237  00E7  0274               	subwf	??_isr,w
 13238  00E8  1D03               	skipz
 13239  00E9  28F4               	goto	u410_23
 13240  00EA  0862               	movf	(_delay_time+2)^(0+128),w	;volatile
 13241  00EB  0241               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 13242  00EC  1D03               	skipz
 13243  00ED  28F4               	goto	u410_23
 13244  00EE  0861               	movf	(_delay_time+1)^(0+128),w	;volatile
 13245  00EF  0240               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 13246  00F0  1D03               	skipz
 13247  00F1  28F4               	goto	u410_23
 13248  00F2  0860               	movf	_delay_time^(0+128),w	;volatile
 13249  00F3  023F               	subwf	_sub_timer^(0+128),w	;volatile
 13250  00F4                     u410_23:	
 13251  00F4  1C03               	skipc
 13252  00F5  290D               	goto	i1l4116
 13253                           
 13254                           ;interrupts.c: 80: if (suspend_blink == 0) {
 13255  00F6  0859               	movf	_suspend_blink^(0+128),w	;volatile
 13256  00F7  1D03               	btfss	3,2
 13257  00F8  2904               	goto	i1l4114
 13258                           
 13259                           ;interrupts.c: 81: set_leds_top(top_push_state, 1);
 13260  00F9  0869               	movf	(_top_push_state+1)^(0+128),w
 13261  00FA  00F1               	movwf	i1set_leds_top@x+1
 13262  00FB  0868               	movf	_top_push_state^(0+128),w
 13263  00FC  00F0               	movwf	i1set_leds_top@x
 13264  00FD  3001               	movlw	1
 13265  00FE  00F2               	movwf	i1set_leds_top@ledState
 13266  00FF  3000               	movlw	0
 13267  0100  00F3               	movwf	i1set_leds_top@ledState+1
 13268  0101  3193  23A2  3180   	fcall	i1_set_leds_top
 13269  0104                     i1l4114:	
 13270                           
 13271                           ;interrupts.c: 82: }
 13272                           ;interrupts.c: 83: sub_timer = 0;
 13273  0104  3000               	movlw	0
 13274  0105  0021               	movlb	1	; select bank1
 13275  0106  00C2               	movwf	(_sub_timer+3)^(0+128)	;volatile
 13276  0107  3000               	movlw	0
 13277  0108  00C1               	movwf	(_sub_timer+2)^(0+128)	;volatile
 13278  0109  3000               	movlw	0
 13279  010A  00C0               	movwf	(_sub_timer+1)^(0+128)	;volatile
 13280  010B  3000               	movlw	0
 13281  010C  00BF               	movwf	_sub_timer^(0+128)	;volatile
 13282  010D                     i1l4116:	
 13283                           
 13284                           ;interrupts.c: 84: }
 13285                           ;interrupts.c: 86: if (sub_timer >= 20) {
 13286  010D  1BC2               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 13287  010E  2929               	goto	i1l4122
 13288  010F  0842               	movf	(_sub_timer+3)^(0+128),w	;volatile
 13289  0110  1D03               	btfss	3,2
 13290  0111  291C               	goto	i1l4118
 13291  0112  0841               	movf	(_sub_timer+2)^(0+128),w	;volatile
 13292  0113  1D03               	btfss	3,2
 13293  0114  291C               	goto	i1l4118
 13294  0115  0840               	movf	(_sub_timer+1)^(0+128),w	;volatile
 13295  0116  1D03               	btfss	3,2
 13296  0117  291C               	goto	i1l4118
 13297  0118  3014               	movlw	20
 13298  0119  023F               	subwf	_sub_timer^(0+128),w	;volatile
 13299  011A  1C03               	btfss	3,0
 13300  011B  2929               	goto	i1l4122
 13301  011C                     i1l4118:	
 13302                           
 13303                           ;interrupts.c: 87: if (suspend_blink == 0) {
 13304  011C  0859               	movf	_suspend_blink^(0+128),w	;volatile
 13305  011D  1D03               	btfss	3,2
 13306  011E  2929               	goto	i1l4122
 13307                           
 13308                           ;interrupts.c: 88: set_leds_top(top_push_state, 0);
 13309  011F  0869               	movf	(_top_push_state+1)^(0+128),w
 13310  0120  00F1               	movwf	i1set_leds_top@x+1
 13311  0121  0868               	movf	_top_push_state^(0+128),w
 13312  0122  00F0               	movwf	i1set_leds_top@x
 13313  0123  3000               	movlw	0
 13314  0124  00F2               	movwf	i1set_leds_top@ledState
 13315  0125  00F3               	movwf	i1set_leds_top@ledState+1
 13316  0126  3193  23A2  3180   	fcall	i1_set_leds_top
 13317  0129                     i1l4122:	
 13318                           
 13319                           ;interrupts.c: 89: }
 13320                           ;interrupts.c: 90: }
 13321                           ;interrupts.c: 93: if (preset_programmning_on == 1) {
 13322  0129  0021               	movlb	1	; select bank1
 13323  012A  0358               	decf	_preset_programmning_on^(0+128),w
 13324  012B  1D03               	btfss	3,2
 13325  012C  2953               	goto	i1l4134
 13326                           
 13327                           ;interrupts.c: 94: preset_blink++;
 13328  012D  3001               	movlw	1
 13329  012E  00F4               	movwf	??_isr
 13330  012F  0874               	movf	??_isr,w
 13331  0130  07D7               	addwf	_preset_blink^(0+128),f
 13332                           
 13333                           ;interrupts.c: 96: if (preset_blink >= blink_delay) {
 13334  0131  0022               	movlb	2	; select bank2
 13335  0132  084B               	movf	(_blink_delay+1)^(0+256),w
 13336  0133  3A80               	xorlw	128
 13337  0134  3C80               	sublw	128
 13338  0135  1D03               	skipz
 13339  0136  293A               	goto	u415_25
 13340  0137  084A               	movf	_blink_delay^(0+256),w
 13341  0138  0021               	movlb	1	; select bank1
 13342  0139  0257               	subwf	_preset_blink^(0+128),w
 13343  013A                     u415_25:	
 13344  013A  1C03               	skipc
 13345  013B  2958               	goto	i1l4138
 13346                           
 13347                           ;interrupts.c: 97: LATBbits.LATB1 = 1;
 13348  013C  0022               	movlb	2	; select bank2
 13349  013D  148D               	bsf	13,1	;volatile
 13350                           
 13351                           ;interrupts.c: 98: if (preset_blink > blink_delay*2) {
 13352  013E  084B               	movf	(_blink_delay+1)^(0+256),w
 13353  013F  00F5               	movwf	??_isr+1
 13354  0140  084A               	movf	_blink_delay^(0+256),w
 13355  0141  00F4               	movwf	??_isr
 13356  0142  35F4               	lslf	??_isr,f
 13357  0143  0DF5               	rlf	??_isr+1,f
 13358  0144  0875               	movf	??_isr+1,w
 13359  0145  3A80               	xorlw	128
 13360  0146  00F6               	movwf	??_isr+2
 13361  0147  3080               	movlw	128
 13362  0148  0276               	subwf	??_isr+2,w
 13363  0149  1D03               	skipz
 13364  014A  294E               	goto	u416_25
 13365  014B  0021               	movlb	1	; select bank1
 13366  014C  0857               	movf	_preset_blink^(0+128),w
 13367  014D  0274               	subwf	??_isr,w
 13368  014E                     u416_25:	
 13369  014E  1803               	skipnc
 13370  014F  295A               	goto	i1l105
 13371                           
 13372                           ;interrupts.c: 99: preset_blink = 0;
 13373  0150  0021               	movlb	1	; select bank1
 13374  0151  01D7               	clrf	_preset_blink^(0+128)
 13375                           
 13376                           ;interrupts.c: 100: }
 13377                           ;interrupts.c: 102: } else {
 13378  0152  295A               	goto	i1l105
 13379  0153                     i1l4134:	
 13380                           ;interrupts.c: 104: }
 13381                           ;interrupts.c: 106: } else {
 13382                           
 13383                           ;interrupts.c: 103: LATBbits.LATB1 = 0;
 13384                           
 13385                           
 13386                           ;interrupts.c: 107: if (preset_blink > 0) {
 13387  0153  0021               	movlb	1	; select bank1
 13388  0154  0857               	movf	_preset_blink^(0+128),w
 13389  0155  1903               	btfsc	3,2
 13390  0156  295A               	goto	i1l105
 13391                           
 13392                           ;interrupts.c: 108: preset_blink = 0;
 13393  0157  01D7               	clrf	_preset_blink^(0+128)
 13394  0158                     i1l4138:	
 13395                           
 13396                           ;interrupts.c: 109: LATBbits.LATB1 = 0;
 13397  0158  0022               	movlb	2	; select bank2
 13398  0159  108D               	bcf	13,1	;volatile
 13399  015A                     i1l105:	
 13400  015A  0878               	movf	??_isr+4,w
 13401  015B  0020               	movlb	0	; select bank0
 13402  015C  00FF               	movwf	127
 13403  015D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13404  015E  0009               	retfie
 13405  015F                     __end_of_isr:	
 13406                           
 13407                           	psect	text47
 13408  13A2                     __ptext47:	
 13409 ;; *************** function i1_set_leds_top *****************
 13410 ;; Defined at:
 13411 ;;		line 16 in file "LEDs.c"
 13412 ;; Parameters:    Size  Location     Type
 13413 ;;  x               2    0[COMMON] int 
 13414 ;;  ledState        2    2[COMMON] int 
 13415 ;; Auto vars:     Size  Location     Type
 13416 ;;		None
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  1    wreg      void 
 13419 ;; Registers used:
 13420 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13421 ;; Tracked objects:
 13422 ;;		On entry : 0/0
 13423 ;;		On exit  : 0/0
 13424 ;;		Unchanged: 0/0
 13425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13429 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13430 ;;Total ram usage:        4 bytes
 13431 ;; Hardware stack levels used:    1
 13432 ;; This function calls:
 13433 ;;		Nothing
 13434 ;; This function is called by:
 13435 ;;		_isr
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function i1_set_leds_top
 13441  13A2                     i1_set_leds_top:	
 13442                           
 13443                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13444                           
 13445                           ;incstack = 0
 13446                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13447  13A2  0027               	movlb	7	; select bank7
 13448  13A3  100C               	bcf	12,0	;volatile
 13449                           
 13450                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13451  13A4  108C               	bcf	12,1	;volatile
 13452                           
 13453                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13454  13A5  110C               	bcf	12,2	;volatile
 13455                           
 13456                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13457  13A6  118C               	bcf	12,3	;volatile
 13458                           
 13459                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13460  13A7  120C               	bcf	12,4	;volatile
 13461                           
 13462                           ;LEDs.c: 22: switch (x) {
 13463  13A8  2BCD               	goto	i1l4066
 13464  13A9                     i1l4054:	
 13465                           ;LEDs.c: 23: case 1:
 13466                           
 13467                           
 13468                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13469  13A9  0C72               	rrf	i1set_leds_top@ledState,w
 13470  13AA  1C03               	skipc
 13471  13AB  100C               	bcf	12,0	;volatile
 13472  13AC  1803               	skipnc
 13473  13AD  140C               	bsf	12,0	;volatile
 13474                           
 13475                           ;LEDs.c: 25: break;
 13476  13AE  0008               	return
 13477  13AF                     i1l4056:	
 13478                           ;LEDs.c: 26: case 2:
 13479                           
 13480                           
 13481                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13482  13AF  0C72               	rrf	i1set_leds_top@ledState,w
 13483  13B0  1C03               	skipc
 13484  13B1  108C               	bcf	12,1	;volatile
 13485  13B2  1803               	skipnc
 13486  13B3  148C               	bsf	12,1	;volatile
 13487                           
 13488                           ;LEDs.c: 28: break;
 13489  13B4  0008               	return
 13490  13B5                     i1l4058:	
 13491                           ;LEDs.c: 29: case 3:
 13492                           
 13493                           
 13494                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13495  13B5  0C72               	rrf	i1set_leds_top@ledState,w
 13496  13B6  1C03               	skipc
 13497  13B7  110C               	bcf	12,2	;volatile
 13498  13B8  1803               	skipnc
 13499  13B9  150C               	bsf	12,2	;volatile
 13500                           
 13501                           ;LEDs.c: 31: break;
 13502  13BA  0008               	return
 13503  13BB                     i1l4060:	
 13504                           ;LEDs.c: 32: case 4:
 13505                           
 13506                           
 13507                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13508  13BB  0C72               	rrf	i1set_leds_top@ledState,w
 13509  13BC  1C03               	skipc
 13510  13BD  118C               	bcf	12,3	;volatile
 13511  13BE  1803               	skipnc
 13512  13BF  158C               	bsf	12,3	;volatile
 13513                           
 13514                           ;LEDs.c: 34: break;
 13515  13C0  0008               	return
 13516  13C1                     i1l4062:	
 13517                           ;LEDs.c: 35: case 5:
 13518                           
 13519                           
 13520                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13521  13C1  0C72               	rrf	i1set_leds_top@ledState,w
 13522  13C2  1C03               	skipc
 13523  13C3  120C               	bcf	12,4	;volatile
 13524  13C4  1803               	skipnc
 13525  13C5  160C               	bsf	12,4	;volatile
 13526                           
 13527                           ;LEDs.c: 39: break;
 13528                           
 13529                           ;LEDs.c: 38: case 6:
 13530                           
 13531                           ;LEDs.c: 37: break;
 13532  13C6  0008               	return
 13533  13C7                     i1l651:	
 13534                           ;LEDs.c: 40: case 100:
 13535                           
 13536                           
 13537                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13538  13C7  140C               	bsf	12,0	;volatile
 13539                           
 13540                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13541  13C8  148C               	bsf	12,1	;volatile
 13542                           
 13543                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13544  13C9  150C               	bsf	12,2	;volatile
 13545                           
 13546                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13547  13CA  158C               	bsf	12,3	;volatile
 13548                           
 13549                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13550  13CB  160C               	bsf	12,4	;volatile
 13551                           
 13552                           ;LEDs.c: 47: }
 13553                           
 13554                           ;LEDs.c: 46: break;
 13555  13CC  0008               	return
 13556  13CD                     i1l4066:	
 13557                           
 13558                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13559                           ; Switch size 1, requested type "space"
 13560                           ; Number of cases is 1, Range of values is 0 to 0
 13561                           ; switch strategies available:
 13562                           ; Name         Instructions Cycles
 13563                           ; simple_byte            4     3 (average)
 13564                           ; direct_byte            8     6 (fixed)
 13565                           ; jumptable            260     6 (fixed)
 13566                           ;	Chosen strategy is simple_byte
 13567  13CD  0871               	movf	i1set_leds_top@x+1,w
 13568  13CE  3A00               	xorlw	0	; case 0
 13569  13CF  1903               	skipnz
 13570  13D0  2BD2               	goto	i1l4570
 13571  13D1  2BE9               	goto	i1l652
 13572  13D2                     i1l4570:	
 13573                           
 13574                           ; Switch size 1, requested type "space"
 13575                           ; Number of cases is 7, Range of values is 1 to 100
 13576                           ; switch strategies available:
 13577                           ; Name         Instructions Cycles
 13578                           ; simple_byte           22    12 (average)
 13579                           ; direct_byte          209     9 (fixed)
 13580                           ; jumptable            263     9 (fixed)
 13581                           ;	Chosen strategy is simple_byte
 13582  13D2  0870               	movf	i1set_leds_top@x,w
 13583  13D3  3A01               	xorlw	1	; case 1
 13584  13D4  1903               	skipnz
 13585  13D5  2BA9               	goto	i1l4054
 13586  13D6  3A03               	xorlw	3	; case 2
 13587  13D7  1903               	skipnz
 13588  13D8  2BAF               	goto	i1l4056
 13589  13D9  3A01               	xorlw	1	; case 3
 13590  13DA  1903               	skipnz
 13591  13DB  2BB5               	goto	i1l4058
 13592  13DC  3A07               	xorlw	7	; case 4
 13593  13DD  1903               	skipnz
 13594  13DE  2BBB               	goto	i1l4060
 13595  13DF  3A01               	xorlw	1	; case 5
 13596  13E0  1903               	skipnz
 13597  13E1  2BC1               	goto	i1l4062
 13598  13E2  3A03               	xorlw	3	; case 6
 13599  13E3  1903               	skipnz
 13600  13E4  2BE9               	goto	i1l652
 13601  13E5  3A62               	xorlw	98	; case 100
 13602  13E6  1903               	skipnz
 13603  13E7  2BC7               	goto	i1l651
 13604  13E8  2BE9               	goto	i1l652
 13605  13E9                     i1l652:	
 13606  13E9  0008               	return
 13607  13EA                     __end_ofi1_set_leds_top:	
 13608  007E                     btemp	set	126	;btemp
 13609  007E                     int$flags	set	126
 13610  007E                     wtemp	set	126
 13611  007E                     wtemp0	set	126
 13612  0080                     wtemp1	set	128
 13613  0082                     wtemp2	set	130
 13614  0084                     wtemp3	set	132
 13615  0086                     wtemp4	set	134
 13616  0088                     wtemp5	set	136
 13617  007F                     wtemp6	set	127
 13618  007E                     ttemp	set	126
 13619  007E                     ttemp0	set	126
 13620  0081                     ttemp1	set	129
 13621  0084                     ttemp2	set	132
 13622  0087                     ttemp3	set	135
 13623  007F                     ttemp4	set	127
 13624  007E                     ltemp	set	126
 13625  007E                     ltemp0	set	126
 13626  0082                     ltemp1	set	130
 13627  0086                     ltemp2	set	134
 13628  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1066
    BSS         204
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     79      80
    BANK1            80     31      80
    BANK2            80      0      63
    BANK3            80      0      64
    BANK4            80      0      58
    BANK5            80      0      58
    BANK6            80      0      58
    BANK7            80      0      80
    BANK8            80      0      80
    BANK9            80      0      58
    BANK10           80      0      64
    BANK11            8      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->___fttol
    _updateSwitchTap->___aldiv
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   51310
                                             10 BANK1     21    21      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    4001
                                             21 BANK0      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    3714
                                             18 BANK0      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     194
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    1696
                                             14 BANK0      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    6335
                                             21 BANK0      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    3246
                                             14 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3089
                                             14 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      4     0      4    7286
                                              6 BANK1      4     0      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     956
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2840
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    2574
                                             14 BANK0      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    1864
                                             14 BANK0      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4     971
                                             21 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     556
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   11425
                                             53 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3203
                                             21 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             37 BANK0     16    10      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3563
                                              8 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    1847
                                             18 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    1824
                                             14 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _wait_ms                                              2     0      2    1394
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      64
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2311
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    0     0      0    1909
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1180
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     470
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0     236
                                              4 COMMON     5     5      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
       ___wmul (ARG)
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
     _wait_ms
       ___lmul
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1F      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      3F       9       78.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      3A      13       72.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3A      15       72.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2F5      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3A      18       72.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      50      20      100.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      3A      24       72.5%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      40      26       80.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2F5      28        0.0%
BANK11               8      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Mon Nov 07 21:31:25 2016

                     _update_mode 135D                      ___altoft@exp 002E                       __CFG_CP$OFF 0000  
                   ___altoft@sign 002F                      ___awdiv@sign 0026        setDoublePressState@f_state 002E  
             ___wmul@multiplicand 0022                   _updateSwitchTap 0BC8                      ___ftadd@exp1 0034  
                    ___ftadd@exp2 0033                      ___ftadd@sign 0032                               l325 10C4  
                             l273 0253                               l801 1386                               l289 0521  
                             l802 138A                               l651 155B              __size_of_adc_convert 0019  
                             l803 139A                               l660 1236                               l652 157F  
                             l484 0BC7                               l661 1239                               l663 123C  
                             l664 1260                               l656 122D                               l496 1F4F  
                             l658 1230                               l659 1233                               l781 10FA  
                             l789 1134                               l799 1383                               l992 0978  
                             _PR2 001B      solidring_tactiles@ring_delay 0030                               _map 16D6  
                             _isr 0004                               _tap 01A0                      __CFG_BORV$LO 0000  
                             wreg 0009                      __CFG_IESO$ON 0000                      __CFG_FOSC$HS 0000  
         __end_of_set_leds_bottom 1261                      __CFG_LVP$OFF 0000                      ___ftdiv@cntr 004F  
                    ___ftdiv@sign 0054                              _B25k 03A0                              l1121 0C7F  
                            l1210 1F7C                              l1108 0BDD                              l1402 0A78  
                            l1265 1665                              l4002 1276                              l1371 15B3  
                            l3140 153B                              l4004 1286                              l3124 107B  
                            l3142 1543                              l3150 1562                              l4022 14F0  
                            l1462 17DE                              l3144 154B                              l4040 1516  
                            l4032 14F8                              l4016 14E5                              l3128 1085  
                            l4200 0328                              l3146 1553                              l3138 1533  
                            l1378 15C6                              l4034 1504                              l3410 16BF  
                            l1379 15CE                              l3172 1243                              l4044 151F  
                            l3324 082E                              l4212 03BD                              l4204 0360  
                            l3190 159F                              l3182 1589                              l3414 16CD  
                            l3406 16B4                              l4048 1527                              l3440 0A08  
                            l3512 087A                              l3352 102C                              l4304 06EA  
                            l4232 04DC                              l4224 0457                              l4216 03FD  
                            l4160 022D                              l3186 1590                              l3506 0864  
                            l3426 07E7                              l4306 0695                              l4250 056E  
                            l3196 15B8                              l3188 159A                              l3436 0A01  
                            l3700 10EF                              l4308 06F0                              l4260 05D2  
                            l4236 051C                              l4228 0497                              l3198 15C0  
                            l3470 0A57                              l3446 0A17                              l3534 08D4  
                            l3526 08BB                              l3366 1F76                              l3606 177C  
                            l3278 161A                              l4254 057C                              l4246 0565  
                            l4174 0257                              l3464 0A44                              l3712 1120  
                            l3632 17D4                              l3624 17B5                              l3800 0951  
                            l4280 0615                              l4272 05F4                              l4264 05DD  
                            l4256 05BD                              l4176 025A                              l3482 0A8A  
                            l3466 0A4E                              l3458 0A31                              l3570 0798  
                            l3554 0755                              l3634 17E2                              l3626 17C6  
                            l4290 066E                              l4194 02D3                              l3476 0A6A  
                            l3468 0A53                              l3548 073F                              l3396 1686  
                            l3388 1676                              l3812 096A                              l3900 0C4C  
                            l3732 138E                              l4268 05E8                              l4284 0618  
                            l3486 0A9C                              l3478 0A74                              l3582 07B4  
                            l3566 0790                              l3398 1694                              l3638 17F0  
                            l3830 09A3                              l3910 0C77                              l3902 0C54  
                            l3734 139E                              l4278 0612                              l4286 0632  
                            ?_map 0055                              l3496 0AB7                              l3824 0996  
                            l3904 0C62                              l3674 1412                              l3578 07AC  
                            l3818 097C                              l4562 061E                              l4564 0BB3  
                            l3828 099E                              l3932 0D2E                              l4566 1568  
                            l3838 09B5                              l3774 090C                              l3926 0CC5  
                            l3918 0CB9                              l3942 0D75                              l3862 0BD3  
                            l4568 1249                              l3928 0D0F                              l3880 0C0A  
                            l3786 092B                              l3778 091F                              l3882 0C27  
                            l3980 0B55                              l3868 0BEE                              l3982 0B81  
                            l3974 0AD0                              l3798 0949                              l3976 0AFD  
                            l3888 0C2F                              l3978 0B29                              l3986 0BAD  
                            ?_isr 0070                              u3005 08BC                              u3015 08CB  
                            u2305 1086                              u3025 08D5                              u3105 079F  
                            u2315 108D                              u3300 1410                              u2405 15BB  
                            u3135 07B5                              u3215 17B6                              u2520 082C  
                            u3145 07BB                              u3065 0761                              u2515 080E  
                            u3075 0771                              u2445 15D5                              u2365 1595  
                            u2605 1F82                              u3245 17D5                              u3095 0799  
                            u3335 10E8                              u4215 02B5                              u2385 15AE  
                            u3185 1784                              u2545 1F33                              u4313 0549  
                            u4305 051A                              u4225 02D1                              u3275 1FBB  
                            u2555 101F                              u3435 0905                              u4235 0342  
                            u3285 1FC1                              u3365 1119                              u3445 0918  
                            u4245 035E                              u2655 1689                              u2495 1627  
                            u2575 1F64                              u4255 03DB                              u2825 0A32  
                            u4265 03FB                              u2915 0A6B                              u2675 1695  
                            u2595 1F7D                              u3475 0931                              u3715 0C35  
                            u3395 1370                              u4355 0577                              u4275 0475  
                            u4195 0249                              u2685 16A9                              u3565 0988  
                            u3805 0CCE                              u4285 0495                              u2855 0A45  
                            u2695 16B5                              u3815 0CE3                              u4383 06DB  
                            u4375 06C3                              u4295 04FA                              u3825 0CF7  
                            u2885 0A58                              u3845 0D14                              u3685 0C13  
                            u3935 14FB                              u2985 088C                              u3785 0C90  
                            u3955 1505                              u2995 089C                              u3795 0C9F  
                            i1l92 00CD                              u3885 127B                              u3965 150F  
                            u3975 1517                     _star_tactiles 15E5                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000                              _iCnt 0148                              _mod1 04A0  
                            _mod2 0220                              _mod3 02A0                              _mod4 0320  
                            _mod5 2378                              _main 0217                      ___ftpack@arg 0020  
                    ___ftpack@exp 0023                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              fsr1l 0006  
                            map@x 0055                              btemp 007E                     __CFG_BOREN$ON 0000  
                            ltemp 007E          __end_of_setFeedbackState 1F40                              start 015F  
                            ttemp 007E                              wtemp 007E      __end_of_getSwitchBypassState 1EA3  
    updateSwitchTap@tapCntDivisor 003B      __end_of_setSwitchBypassState 084D                   ?i1_set_leds_top 0070  
                   __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0043                      ___ftmul@sign 0044  
                 __end_of_InitApp 1072                 ??_restoreLEDState 0020                      ___fttol@exp1 00A5  
                           ??_map 0064                      ___fttol@lval 00A1                             ??_isr 0074  
                 _switchBypass_up 015A         __size_of_initSwitchBypass 000F                   __end_of___aldiv 16D6  
                           ?_main 0070                   __end_of___awdiv 152C                   __end_of___ftadd 0ACF  
                           _CCPR1 0291                             _CCPR2 0298                             _CCPR3 0311  
                           _CCPR4 0318                             _CCPR5 031C                             _CCPR9 061A  
                   __CFG_WDTE$OFF 0000                   __end_of___ftdiv 08F6                   __end_of___ftneg 1EBC  
                 __end_of___ftmul 07DC                   ___awdiv@divisor 0020                   __end_of___fttol 1800  
                           i1l105 015A                             i1l651 13C7                             i1l652 13E9  
                 ___awdiv@counter 0025                             _iB25k 0420               _ConfigureOscillator 1E9B  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 0024  
                 _switchTap_state 00EF                 ??_setLongTapState 0022                     ___awtoft@sign 002D  
                           _delay 23F2                             _myBuf 0520                     ___ftpack@sign 0024  
                           _timer 00C3                    ?_star_tactiles 0070                             main@i 00BB  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 10D3                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 1104  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F              ?_ConfigureOscillator 0070                _getCurrentLEDState 1EED  
              _updateSwitchBypass 08F6           __end_of_updateSwitchTap 0D88                   __initialization 0161  
         _updateSwitchBypassState 07FF                      __end_of_main 0728           __size_of_InitializeTaps 0026  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 0ACF                            ??_main 00AA                     ___fttol@sign1 00A0  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 131C                    _feedback_timer 00C7  
                  _feedback_state 006F                    _feedback_start 00D4                  ?_set_leds_bottom 0020  
                __end_of___altoft 129E                            _ADRESH 009C                            _ADRESL 009B  
                ___awdiv@dividend 0022               _baseline_delay_time 00DC              ??_getCurrentLEDState 0020  
                __end_of___awtoft 07FE                  __end_of___ftpack 15E5              ??_updateSwitchBypass 0032  
                          i1l4100 00BB                            i1l4102 00CA                            i1l4104 00CF  
                          i1l4122 0129                            i1l4114 0104                            i1l4106 00DF  
                          i1l4060 13BB                            i1l4116 010D                            i1l4108 00E1  
                          i1l4062 13C1                            i1l4054 13A9                            i1l4134 0153  
                          i1l4118 011C                            i1l4056 13AF                            i1l4058 13B5  
                          i1l4066 13CD                            i1l4138 0158                            i1l4082 0081  
                          i1l4090 0095                            i1l4088 0094                            i1l4570 13D2  
                          u410_23 00F4                            u402_25 007B                            u404_25 008E  
                          u407_23 00AE                            u415_25 013A                            _PMADRH 0192  
                          u416_25 014E                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON2 0196                    _debounce_count 0134  
                  _debounce_mode1 0136                    _debounce_mode2 0138                         ??_InitApp 0020  
           ??_ConfigureOscillator 0020          __end_of_read_top_tactile 113E                    __CFG_PWRTE$OFF 0000  
                          ___lmul 1072                         ??___aldiv 002E                            ___wmul 1F73  
                       ??___awdiv 0024                         ??___ftadd 002E                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 004B                         ??___ftneg 0023                         ??___ftmul 003B  
                       ??___fttol 006B                  __end_of_init_adc 1EC6                  __end_of_init_pwm 135D  
       __size_of_showBootSequence 002B                  ___awdiv@quotient 0027             ___ftmul@f3_as_product 0040  
                    __pdataBIGRAM 2378           FLASH_ReadWord@flashAddr 0020              _getSwitchBypassState 1E9F  
                       ??_wait_ms 002E              _setSwitchBypassState 0803                   ??_star_tactiles 002E  
          setLongTapState@f_state 0020           __end_of__initialization 0213                        ___altoft@c 0028  
                      ___ftadd@f1 0028                        ___ftadd@f2 002B                 _bypass_turning_on 00D3  
                      ___ftdiv@f1 0048                        ___ftdiv@f2 0045                        ___ftdiv@f3 0050  
                  _top_push_state 00E8         ??_updateSwitchBypassState 0022                        ___ftneg@f1 0020  
             _switchBypass_toggle 0146                        ___awtoft@c 0028           __end_of_set_subdivision 0BC8  
                      ___ftmul@f1 0035                        ___ftmul@f2 0038                        ___fttol@f1 0067  
                ?_updateSwitchTap 0070                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK0 07FE                      __pidataBANK1 1EFF                      __pidataBANK2 1000  
                    __pidataBANK4 11EC                      __pidataBANK5 11B2                      __pidataBANK6 1178  
                    __pidataBANK7 148A                      __pidataBANK8 143A                      __pidataBANK9 113E  
                _initSwitchBypass 1EDE                   _doubleTap_state 007D                    _OPTION_REGbits 0095  
           ?_getSwitchBypassState 0020             ?_setSwitchBypassState 002E              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                        __pbssBANK1 00BF                        __pbssBANK2 0120  
                      __pbssBANK3 01A0                  ??i1_set_leds_top 0074                   _restoreLEDState 1F13  
                 __CFG_VCAPEN$OFF 0000                 ?_setFeedbackState 0020                        _delay_time 00E0  
                _long_press_limit 00E6      __size_of_setDoublePressState 002D                        _delayfound 013C  
                      __pmaintext 0217                ??_setFeedbackState 0022                    _InitializeTaps 1FAF  
                         ?___lmul 0020                           ?___wmul 0020                        __pintentry 0004  
                      _blink_rate 00EA                     ??_adc_convert 0022                         ?___altoft 0028  
                  ___lmul@product 0028                   _setLongTapState 1F59                         ?___awtoft 0028  
                       ?___ftpack 0020                    _FLASH_ReadWord 1F8F   __end_of_updateSwitchBypassState 0800  
                     modulation@x 0035                       modulation@y 0037                   _debounce_bypass 0132  
                   _suspend_blink 00D9                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1042            __end_of_InitializeTaps 1FD5                     ?_set_leds_top 0020  
                      _knob1_prev 014E                        _knob2_prev 0150                        _knob3_prev 0152  
                      _knob4_prev 0154                        _knob5_prev 0156                  ?_set_subdivision 00A6  
                         ___aldiv 1654                           ___awdiv 14DA                   __size_of___lmul 0030  
                         ___ftadd 09D9                           ___ftdiv 084D                           ___ftneg 1EB3  
                      _knob_1_pos 00C9                        _knob_2_pos 00CB                   __size_of___wmul 001C  
                         ___ftmul 0728                        _knob_3_pos 013E                           ___fttol 1761  
                      _knob_4_pos 0140                        _knob_5_pos 0142                 _switchTap_pressed 00DB  
                      ??___altoft 002C                  _showBootSequence 1FD5            __end_of_FLASH_ReadWord 1FAF  
                      ??___awtoft 002B                        ??___ftpack 0025                InitializeTaps@itap 0021  
                         __ptext1 135D                           __ptext2 0BC8                           __ptext3 1F59  
                         __ptext4 08F6                           __ptext5 1F29                           __ptext6 1015  
                         __ptext7 1FD5                           __ptext8 15E5                           __ptext9 12DC  
          ??_getSwitchBypassState 0022                         _T2CONbits 001C                      __size_of_map 008B  
                    __size_of_isr 015B            ??_setSwitchBypassState 0030               __end_of_adc_convert 1F59  
                ___aldiv@dividend 002A                           _wait_ms 10A2           __end_of_restoreLEDState 1F29  
                         clrloop0 1ED3              end_of_initialization 0213                        _modulation 129E  
                         init_ram 1EC6                        ??_init_adc 0020                           initloop 1EC7  
                      ??_init_pwm 0020      updateSwitchBypassState@state 0020                _solidring_tactiles 12DC  
                   _longTap_timer 00CD                     _longTap_state 00EC                     _longTap_start 00D5  
                  ??_set_leds_top 0024                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1F73            i1set_leds_top@ledState 0072                ??_read_top_tactile 002E  
                ___aldiv@quotient 0031      __size_of_read_bottom_tactile 0031               ?_solidring_tactiles 0070  
                     wait_ms@time 002C         FLASH_ReadWord@GIEBitValue 0022              __size_of_update_mode 0045  
                 ?_FLASH_ReadWord 0020                         _PORTCbits 000E                         _PORTDbits 000F  
                       _PORTEbits 0010              star_tactiles@reverse 0030                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         _SPI_Value 0130  
         setFeedbackState@f_state 0020              ??_solidring_tactiles 002E       __end_of_ConfigureOscillator 1E9F  
     __size_of_getCurrentLEDState 0012                        map@out_max 0061                        map@out_min 005E  
     __size_of_updateSwitchBypass 00E3          __end_of_initSwitchBypass 1EED                       _CCP1CONbits 0293  
                     ___ftdiv@exp 0053          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 00D1                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 003F                adc_convert@channel 0023                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 0022                    __end_of___lmul 10A2  
                   __pidataBIGRAM 0D88                    __end_of___wmul 1F8F                       _adc_convert 1F40  
                  _switchTap_down 00DA               start_initialization 0161               _setDoublePressState 1015  
                     __end_of_map 1761                       __end_of_isr 015F                  ?_restoreLEDState 0070  
           __end_of_star_tactiles 1654                       ?_modulation 0035              ?_setDoublePressState 002E  
                ?_setLongTapState 0020                          ??___lmul 0028                          ??___wmul 0024  
                     __pdataBANK0 006F                       __pdataBANK1 00DC                       __pdataBANK2 014A  
                     __pdataBANK4 0220                       __pdataBANK5 02A0                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                       __pdataBANK9 04A0  
                   _tap_iteration 015C          __size_of_updateSwitchTap 01C0                 __size_of___altoft 003D  
                     __pbssBANK10 0520         __size_of_setFeedbackState 0017                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 0020                     ??_init_timer2 0020  
                     __pbssCOMMON 0079              __end_of_set_leds_top 1580                         ___latbits 0003  
              _switchBypass_state 00EE                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                   _delay_counter 013A          __end_of_showBootSequence 2000          ?_updateSwitchBypassState 0020  
                        ?_InitApp 0070             ??_setDoublePressState 0030                 __size_of_init_adc 000A  
               __size_of_init_pwm 0041                          ?___aldiv 0026                 ??_set_leds_bottom 0022  
              _currentBypassState 00EB                          ?___awdiv 0020                          ?___ftadd 0028  
                        ?___ftdiv 0045                          ?___ftneg 0020                          ?___ftmul 0035  
                        ?___fttol 0067                       _blink_delay 014A               __size_of_modulation 003E  
                     _blink_state 015E                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                          ?_wait_ms 002C               _read_bottom_tactile 10D3  
             __end_of_init_timer0 1EAA               __end_of_init_timer2 1EB3                         _mod_value 0144  
                       _mod_timer 0124                  ??_InitializeTaps 0020                   ___aldiv@divisor 0026  
                 ___aldiv@counter 002F                    ___wmul@product 0024                          _LATBbits 010D  
                        _LATDbits 010F                          _LATFbits 038C                          _LATGbits 038D  
                  _mod_delay_time 0158                         clear_ram0 1ED2                         _tap_timer 0079  
                       _tap_total 0128                     set_leds_top@x 0020                  ??_FLASH_ReadWord 0022  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 0032  
                       map@in_max 005B                         map@in_min 0058                         _sub_timer 00BF  
                      _ADCON0bits 009D                        _ADCON1bits 009E                         main@i_356 00BD  
        __size_of_set_subdivision 00F9                 ___wmul@multiplier 0020                  set_subdivision@x 00A6  
                set_subdivision@y 00A8         __size_of_read_top_tactile 003A     __size_of_getSwitchBypassState 0004  
   __size_of_setSwitchBypassState 004A                 ??_updateSwitchTap 0035                 ___lmul@multiplier 0020  
               _ReadSavedSettings 13EA                 ?_initSwitchBypass 0070                ?_ReadSavedSettings 0070  
     setSwitchBypassState@f_state 002E                ??_initSwitchBypass 0032                  __size_of_InitApp 0030  
                     _mode1_state 0149                     ??_update_mode 0020                       _mode2_state 00D6  
           ??_read_bottom_tactile 002E               updateSwitchTap@iCnt 003D               ??_ReadSavedSettings 0024  
                      _APFCONbits 011D                 star_tactiles@iLed 0031                  __size_of___aldiv 0082  
                __size_of___awdiv 0052                  __size_of___ftadd 00F6                  __size_of___ftdiv 00A9  
                    ?_adc_convert 0020                  __size_of___ftneg 0009                          ___altoft 1261  
                __size_of___ftmul 00B4                  __size_of___fttol 009F                          ___awtoft 07DC  
           __size_of_set_leds_top 0054                          ___ftpack 1580                          _map$2078 0064  
          _preset_programmning_on 00D8            star_tactiles@iLed_1403 0033                        _ANSELEbits 0190  
                      _ANSELFbits 040C                  set_leds_bottom@x 0020                  _setFeedbackState 1F29  
                     _init_timer0 1EA3                       _init_timer2 1EAA                _delay_time_changed 014C  
      __end_of_getCurrentLEDState 1EFF        __end_of_updateSwitchBypass 09D9                          __ptext10 1F13  
                        __ptext11 1EED                          __ptext20 16D6                          __ptext12 0ACF  
                        __ptext21 1EB3                          __ptext13 1761                          __ptext30 1E9F  
                        __ptext22 0728                          __ptext14 07DC                          __ptext31 1F40  
                        __ptext23 084D                          __ptext15 1104                          __ptext40 1042  
                        __ptext32 14DA                          __ptext24 09D9                          __ptext16 10D3  
                        __ptext41 131C                          __ptext33 1261                          __ptext25 1EDE  
                        __ptext17 129E                          __ptext42 1EAA                          __ptext34 1580  
                        __ptext26 0803                          __ptext18 1F73                          __ptext43 1EA3  
                        __ptext35 13EA                          __ptext27 10A2                          __ptext19 1654  
                        __ptext44 1EBC                          __ptext36 152C                          __ptext28 1072  
                        __ptext45 1E9B                          __ptext37 1226                          __ptext29 07FF  
                        __ptext38 1F8F                          __ptext47 13A2                          __ptext39 1FAF  
       __end_of_ReadSavedSettings 143A                  __size_of_wait_ms 0031       __size_of_solidring_tactiles 0040  
                        _ledState 0120                      ??_modulation 0039                       _mod_counter 00CF  
                        _init_adc 1EBC                     __size_of_main 0511                          _init_pwm 131C  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 152C                          _num_taps 00ED  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 13A2  
              __end_of_modulation 12DC                        _INTCONbits 000B                       _tap_history 01CC  
               ??_set_subdivision 006F                          intlevel1 0000                   _set_leds_bottom 1226  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 0016                ??_showBootSequence 0035                        _OSCCONbits 0099  
                    _preset_blink 00D7                    i1_set_leds_top 13A2  __size_of_updateSwitchBypassState 0001  
                    wait_ms@timel 012C            __size_of_star_tactiles 006F          __size_of_setLongTapState 001A  
                _read_top_tactile 1104                      ___aldiv@sign 0030        __size_of_ReadSavedSettings 0050  
          main@adjusted_pot_value 00B9       __end_of_setDoublePressState 1042                      _CCP10CONbits 061F  
               _bottom_push_state 00E4            __end_ofi1_set_leds_top 13EA  
