

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sun Oct 16 22:40:26 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK1,global,class=CODE,delta=2
     7                           	psect	idataBANK2,global,class=CODE,delta=2
     8                           	psect	idataBANK5,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBANK9,global,class=CODE,delta=2
    13                           	psect	idataBANK10,global,class=CODE,delta=2
    14                           	psect	idataBIGRAM,global,class=CODE,delta=2
    15                           	psect	cinit,global,class=CODE,merge=1,delta=2
    16                           	psect	dataBIGRAM,global,delta=1
    17                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    21                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    22                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    23                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    24                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    25                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    26                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    27                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    28                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    29                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    30                           	psect	dataBANK9,global,class=BANK9,space=1,delta=1
    31                           	psect	dataBANK10,global,class=BANK10,space=1,delta=1
    32                           	psect	clrtext,global,class=CODE,delta=2
    33                           	psect	inittext,global,class=CODE,delta=2
    34                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    35                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    36                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    37                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    38                           	psect	text1,local,class=CODE,merge=1,delta=2
    39                           	psect	text2,local,class=CODE,merge=1,delta=2
    40                           	psect	text3,local,class=CODE,merge=1,delta=2
    41                           	psect	text4,local,class=CODE,merge=1,delta=2
    42                           	psect	text5,local,class=CODE,merge=1,delta=2
    43                           	psect	text6,local,class=CODE,merge=1,delta=2
    44                           	psect	text7,local,class=CODE,merge=1,delta=2
    45                           	psect	text8,local,class=CODE,merge=1,delta=2
    46                           	psect	text9,local,class=CODE,merge=1,delta=2
    47                           	psect	text10,local,class=CODE,merge=1,delta=2
    48                           	psect	text11,local,class=CODE,merge=1,delta=2
    49                           	psect	text12,local,class=CODE,merge=1,delta=2
    50                           	psect	text13,local,class=CODE,merge=1,delta=2
    51                           	psect	text14,local,class=CODE,merge=1,delta=2
    52                           	psect	text15,local,class=CODE,merge=1,delta=2
    53                           	psect	text16,local,class=CODE,merge=1,delta=2
    54                           	psect	text17,local,class=CODE,merge=1,delta=2
    55                           	psect	text18,local,class=CODE,merge=1,delta=2
    56                           	psect	text19,local,class=CODE,merge=1,delta=2
    57                           	psect	text20,local,class=CODE,merge=1,delta=2
    58                           	psect	text21,local,class=CODE,merge=1,delta=2
    59                           	psect	text22,local,class=CODE,merge=1,delta=2
    60                           	psect	text23,local,class=CODE,merge=1,delta=2
    61                           	psect	text24,local,class=CODE,merge=1,delta=2
    62                           	psect	text25,local,class=CODE,merge=1,delta=2
    63                           	psect	text26,local,class=CODE,merge=1,delta=2
    64                           	psect	text27,local,class=CODE,merge=1,delta=2
    65                           	psect	text28,local,class=CODE,merge=1,delta=2
    66                           	psect	text29,local,class=CODE,merge=1,delta=2
    67                           	psect	text30,local,class=CODE,merge=1,delta=2
    68                           	psect	text31,local,class=CODE,merge=1,delta=2
    69                           	psect	text32,local,class=CODE,merge=1,delta=2
    70                           	psect	text33,local,class=CODE,merge=1,delta=2
    71                           	psect	text34,local,class=CODE,merge=1,delta=2
    72                           	psect	text35,local,class=CODE,merge=1,delta=2
    73                           	psect	text36,local,class=CODE,merge=1,delta=2
    74                           	psect	text37,local,class=CODE,merge=1,delta=2
    75                           	psect	text38,local,class=CODE,merge=1,delta=2
    76                           	psect	text39,local,class=CODE,merge=1,delta=2
    77                           	psect	text40,local,class=CODE,merge=1,delta=2
    78                           	psect	text41,local,class=CODE,merge=1,delta=2
    79                           	psect	text42,local,class=CODE,merge=1,delta=2
    80                           	psect	text43,local,class=CODE,merge=1,delta=2
    81                           	psect	text44,local,class=CODE,merge=1,delta=2
    82                           	psect	intentry,global,class=CODE,delta=2
    83                           	psect	text46,local,class=CODE,merge=1,delta=2
    84                           	dabs	1,0x920,80
    85                           	dabs	1,0x8A0,80
    86                           	dabs	1,0x820,80
    87                           	dabs	1,0x7A0,80
    88                           	dabs	1,0x720,80
    89                           	dabs	1,0x6A0,80
    90                           	dabs	1,0x652,30
    91                           	dabs	1,0x620,50
    92                           	dabs	1,0x5A8,72
    93                           	dabs	1,0x23F2,0,_delay
    94                           	dabs	1,0x2378,0,_mod5
    95                           	dabs	1,0x7E,2
    96  0000                     	;# 
    97  0001                     	;# 
    98  0002                     	;# 
    99  0003                     	;# 
   100  0004                     	;# 
   101  0005                     	;# 
   102  0006                     	;# 
   103  0007                     	;# 
   104  0008                     	;# 
   105  0009                     	;# 
   106  000A                     	;# 
   107  000B                     	;# 
   108  000C                     	;# 
   109  000D                     	;# 
   110  000E                     	;# 
   111  000F                     	;# 
   112  0010                     	;# 
   113  0011                     	;# 
   114  0012                     	;# 
   115  0013                     	;# 
   116  0014                     	;# 
   117  0015                     	;# 
   118  0016                     	;# 
   119  0016                     	;# 
   120  0017                     	;# 
   121  0018                     	;# 
   122  0019                     	;# 
   123  001A                     	;# 
   124  001B                     	;# 
   125  001C                     	;# 
   126  008C                     	;# 
   127  008D                     	;# 
   128  008E                     	;# 
   129  008F                     	;# 
   130  0090                     	;# 
   131  0091                     	;# 
   132  0092                     	;# 
   133  0093                     	;# 
   134  0094                     	;# 
   135  0095                     	;# 
   136  0096                     	;# 
   137  0097                     	;# 
   138  0099                     	;# 
   139  009A                     	;# 
   140  009B                     	;# 
   141  009B                     	;# 
   142  009C                     	;# 
   143  009D                     	;# 
   144  009E                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0110                     	;# 
   150  0116                     	;# 
   151  0117                     	;# 
   152  011D                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  018F                     	;# 
   156  0190                     	;# 
   157  0191                     	;# 
   158  0191                     	;# 
   159  0192                     	;# 
   160  0193                     	;# 
   161  0193                     	;# 
   162  0194                     	;# 
   163  0195                     	;# 
   164  0196                     	;# 
   165  0197                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  0199                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019A                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019B                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019C                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019D                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019E                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  019F                     	;# 
   189  020D                     	;# 
   190  020F                     	;# 
   191  0210                     	;# 
   192  0211                     	;# 
   193  0211                     	;# 
   194  0212                     	;# 
   195  0212                     	;# 
   196  0213                     	;# 
   197  0213                     	;# 
   198  0214                     	;# 
   199  0214                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0215                     	;# 
   203  0216                     	;# 
   204  0216                     	;# 
   205  0217                     	;# 
   206  0217                     	;# 
   207  0219                     	;# 
   208  021A                     	;# 
   209  021B                     	;# 
   210  021C                     	;# 
   211  021D                     	;# 
   212  021E                     	;# 
   213  021F                     	;# 
   214  028C                     	;# 
   215  028D                     	;# 
   216  0291                     	;# 
   217  0291                     	;# 
   218  0292                     	;# 
   219  0293                     	;# 
   220  0298                     	;# 
   221  0298                     	;# 
   222  0299                     	;# 
   223  029A                     	;# 
   224  029D                     	;# 
   225  029E                     	;# 
   226  029F                     	;# 
   227  030C                     	;# 
   228  030D                     	;# 
   229  0311                     	;# 
   230  0311                     	;# 
   231  0312                     	;# 
   232  0313                     	;# 
   233  0318                     	;# 
   234  0318                     	;# 
   235  0319                     	;# 
   236  031A                     	;# 
   237  031C                     	;# 
   238  031C                     	;# 
   239  031D                     	;# 
   240  031E                     	;# 
   241  038C                     	;# 
   242  038D                     	;# 
   243  0394                     	;# 
   244  0395                     	;# 
   245  0396                     	;# 
   246  040C                     	;# 
   247  040D                     	;# 
   248  0411                     	;# 
   249  0411                     	;# 
   250  0412                     	;# 
   251  0413                     	;# 
   252  0414                     	;# 
   253  0415                     	;# 
   254  0416                     	;# 
   255  0417                     	;# 
   256  0418                     	;# 
   257  0418                     	;# 
   258  0419                     	;# 
   259  041A                     	;# 
   260  041B                     	;# 
   261  041C                     	;# 
   262  041D                     	;# 
   263  041E                     	;# 
   264  048D                     	;# 
   265  0491                     	;# 
   266  0491                     	;# 
   267  0492                     	;# 
   268  0492                     	;# 
   269  0493                     	;# 
   270  0493                     	;# 
   271  0493                     	;# 
   272  0494                     	;# 
   273  0494                     	;# 
   274  0495                     	;# 
   275  0495                     	;# 
   276  0496                     	;# 
   277  0496                     	;# 
   278  0497                     	;# 
   279  0497                     	;# 
   280  0595                     	;# 
   281  0596                     	;# 
   282  0597                     	;# 
   283  059C                     	;# 
   284  059D                     	;# 
   285  059E                     	;# 
   286  0611                     	;# 
   287  0611                     	;# 
   288  0612                     	;# 
   289  0613                     	;# 
   290  0614                     	;# 
   291  0614                     	;# 
   292  0615                     	;# 
   293  0616                     	;# 
   294  0617                     	;# 
   295  0617                     	;# 
   296  0618                     	;# 
   297  0619                     	;# 
   298  061A                     	;# 
   299  061A                     	;# 
   300  061B                     	;# 
   301  061C                     	;# 
   302  061D                     	;# 
   303  061D                     	;# 
   304  061E                     	;# 
   305  061F                     	;# 
   306  0FE4                     	;# 
   307  0FE5                     	;# 
   308  0FE6                     	;# 
   309  0FE7                     	;# 
   310  0FE8                     	;# 
   311  0FE9                     	;# 
   312  0FEA                     	;# 
   313  0FEB                     	;# 
   314  0FED                     	;# 
   315  0FEE                     	;# 
   316  0FEF                     	;# 
   317  0000                     	;# 
   318  0001                     	;# 
   319  0002                     	;# 
   320  0003                     	;# 
   321  0004                     	;# 
   322  0005                     	;# 
   323  0006                     	;# 
   324  0007                     	;# 
   325  0008                     	;# 
   326  0009                     	;# 
   327  000A                     	;# 
   328  000B                     	;# 
   329  000C                     	;# 
   330  000D                     	;# 
   331  000E                     	;# 
   332  000F                     	;# 
   333  0010                     	;# 
   334  0011                     	;# 
   335  0012                     	;# 
   336  0013                     	;# 
   337  0014                     	;# 
   338  0015                     	;# 
   339  0016                     	;# 
   340  0016                     	;# 
   341  0017                     	;# 
   342  0018                     	;# 
   343  0019                     	;# 
   344  001A                     	;# 
   345  001B                     	;# 
   346  001C                     	;# 
   347  008C                     	;# 
   348  008D                     	;# 
   349  008E                     	;# 
   350  008F                     	;# 
   351  0090                     	;# 
   352  0091                     	;# 
   353  0092                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0099                     	;# 
   360  009A                     	;# 
   361  009B                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  010C                     	;# 
   367  010D                     	;# 
   368  010E                     	;# 
   369  010F                     	;# 
   370  0110                     	;# 
   371  0116                     	;# 
   372  0117                     	;# 
   373  011D                     	;# 
   374  018C                     	;# 
   375  018D                     	;# 
   376  018F                     	;# 
   377  0190                     	;# 
   378  0191                     	;# 
   379  0191                     	;# 
   380  0192                     	;# 
   381  0193                     	;# 
   382  0193                     	;# 
   383  0194                     	;# 
   384  0195                     	;# 
   385  0196                     	;# 
   386  0197                     	;# 
   387  0199                     	;# 
   388  0199                     	;# 
   389  0199                     	;# 
   390  019A                     	;# 
   391  019A                     	;# 
   392  019A                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019B                     	;# 
   398  019C                     	;# 
   399  019C                     	;# 
   400  019C                     	;# 
   401  019D                     	;# 
   402  019D                     	;# 
   403  019D                     	;# 
   404  019E                     	;# 
   405  019E                     	;# 
   406  019E                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  019F                     	;# 
   410  020D                     	;# 
   411  020F                     	;# 
   412  0210                     	;# 
   413  0211                     	;# 
   414  0211                     	;# 
   415  0212                     	;# 
   416  0212                     	;# 
   417  0213                     	;# 
   418  0213                     	;# 
   419  0214                     	;# 
   420  0214                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0215                     	;# 
   424  0216                     	;# 
   425  0216                     	;# 
   426  0217                     	;# 
   427  0217                     	;# 
   428  0219                     	;# 
   429  021A                     	;# 
   430  021B                     	;# 
   431  021C                     	;# 
   432  021D                     	;# 
   433  021E                     	;# 
   434  021F                     	;# 
   435  028C                     	;# 
   436  028D                     	;# 
   437  0291                     	;# 
   438  0291                     	;# 
   439  0292                     	;# 
   440  0293                     	;# 
   441  0298                     	;# 
   442  0298                     	;# 
   443  0299                     	;# 
   444  029A                     	;# 
   445  029D                     	;# 
   446  029E                     	;# 
   447  029F                     	;# 
   448  030C                     	;# 
   449  030D                     	;# 
   450  0311                     	;# 
   451  0311                     	;# 
   452  0312                     	;# 
   453  0313                     	;# 
   454  0318                     	;# 
   455  0318                     	;# 
   456  0319                     	;# 
   457  031A                     	;# 
   458  031C                     	;# 
   459  031C                     	;# 
   460  031D                     	;# 
   461  031E                     	;# 
   462  038C                     	;# 
   463  038D                     	;# 
   464  0394                     	;# 
   465  0395                     	;# 
   466  0396                     	;# 
   467  040C                     	;# 
   468  040D                     	;# 
   469  0411                     	;# 
   470  0411                     	;# 
   471  0412                     	;# 
   472  0413                     	;# 
   473  0414                     	;# 
   474  0415                     	;# 
   475  0416                     	;# 
   476  0417                     	;# 
   477  0418                     	;# 
   478  0418                     	;# 
   479  0419                     	;# 
   480  041A                     	;# 
   481  041B                     	;# 
   482  041C                     	;# 
   483  041D                     	;# 
   484  041E                     	;# 
   485  048D                     	;# 
   486  0491                     	;# 
   487  0491                     	;# 
   488  0492                     	;# 
   489  0492                     	;# 
   490  0493                     	;# 
   491  0493                     	;# 
   492  0493                     	;# 
   493  0494                     	;# 
   494  0494                     	;# 
   495  0495                     	;# 
   496  0495                     	;# 
   497  0496                     	;# 
   498  0496                     	;# 
   499  0497                     	;# 
   500  0497                     	;# 
   501  0595                     	;# 
   502  0596                     	;# 
   503  0597                     	;# 
   504  059C                     	;# 
   505  059D                     	;# 
   506  059E                     	;# 
   507  0611                     	;# 
   508  0611                     	;# 
   509  0612                     	;# 
   510  0613                     	;# 
   511  0614                     	;# 
   512  0614                     	;# 
   513  0615                     	;# 
   514  0616                     	;# 
   515  0617                     	;# 
   516  0617                     	;# 
   517  0618                     	;# 
   518  0619                     	;# 
   519  061A                     	;# 
   520  061A                     	;# 
   521  061B                     	;# 
   522  061C                     	;# 
   523  061D                     	;# 
   524  061D                     	;# 
   525  061E                     	;# 
   526  061F                     	;# 
   527  0FE4                     	;# 
   528  0FE5                     	;# 
   529  0FE6                     	;# 
   530  0FE7                     	;# 
   531  0FE8                     	;# 
   532  0FE9                     	;# 
   533  0FEA                     	;# 
   534  0FEB                     	;# 
   535  0FED                     	;# 
   536  0FEE                     	;# 
   537  0FEF                     	;# 
   538  0000                     	;# 
   539  0001                     	;# 
   540  0002                     	;# 
   541  0003                     	;# 
   542  0004                     	;# 
   543  0005                     	;# 
   544  0006                     	;# 
   545  0007                     	;# 
   546  0008                     	;# 
   547  0009                     	;# 
   548  000A                     	;# 
   549  000B                     	;# 
   550  000C                     	;# 
   551  000D                     	;# 
   552  000E                     	;# 
   553  000F                     	;# 
   554  0010                     	;# 
   555  0011                     	;# 
   556  0012                     	;# 
   557  0013                     	;# 
   558  0014                     	;# 
   559  0015                     	;# 
   560  0016                     	;# 
   561  0016                     	;# 
   562  0017                     	;# 
   563  0018                     	;# 
   564  0019                     	;# 
   565  001A                     	;# 
   566  001B                     	;# 
   567  001C                     	;# 
   568  008C                     	;# 
   569  008D                     	;# 
   570  008E                     	;# 
   571  008F                     	;# 
   572  0090                     	;# 
   573  0091                     	;# 
   574  0092                     	;# 
   575  0093                     	;# 
   576  0094                     	;# 
   577  0095                     	;# 
   578  0096                     	;# 
   579  0097                     	;# 
   580  0099                     	;# 
   581  009A                     	;# 
   582  009B                     	;# 
   583  009B                     	;# 
   584  009C                     	;# 
   585  009D                     	;# 
   586  009E                     	;# 
   587  010C                     	;# 
   588  010D                     	;# 
   589  010E                     	;# 
   590  010F                     	;# 
   591  0110                     	;# 
   592  0116                     	;# 
   593  0117                     	;# 
   594  011D                     	;# 
   595  018C                     	;# 
   596  018D                     	;# 
   597  018F                     	;# 
   598  0190                     	;# 
   599  0191                     	;# 
   600  0191                     	;# 
   601  0192                     	;# 
   602  0193                     	;# 
   603  0193                     	;# 
   604  0194                     	;# 
   605  0195                     	;# 
   606  0196                     	;# 
   607  0197                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  0199                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019A                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019B                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019C                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019D                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019E                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  019F                     	;# 
   631  020D                     	;# 
   632  020F                     	;# 
   633  0210                     	;# 
   634  0211                     	;# 
   635  0211                     	;# 
   636  0212                     	;# 
   637  0212                     	;# 
   638  0213                     	;# 
   639  0213                     	;# 
   640  0214                     	;# 
   641  0214                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0215                     	;# 
   645  0216                     	;# 
   646  0216                     	;# 
   647  0217                     	;# 
   648  0217                     	;# 
   649  0219                     	;# 
   650  021A                     	;# 
   651  021B                     	;# 
   652  021C                     	;# 
   653  021D                     	;# 
   654  021E                     	;# 
   655  021F                     	;# 
   656  028C                     	;# 
   657  028D                     	;# 
   658  0291                     	;# 
   659  0291                     	;# 
   660  0292                     	;# 
   661  0293                     	;# 
   662  0298                     	;# 
   663  0298                     	;# 
   664  0299                     	;# 
   665  029A                     	;# 
   666  029D                     	;# 
   667  029E                     	;# 
   668  029F                     	;# 
   669  030C                     	;# 
   670  030D                     	;# 
   671  0311                     	;# 
   672  0311                     	;# 
   673  0312                     	;# 
   674  0313                     	;# 
   675  0318                     	;# 
   676  0318                     	;# 
   677  0319                     	;# 
   678  031A                     	;# 
   679  031C                     	;# 
   680  031C                     	;# 
   681  031D                     	;# 
   682  031E                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  0394                     	;# 
   686  0395                     	;# 
   687  0396                     	;# 
   688  040C                     	;# 
   689  040D                     	;# 
   690  0411                     	;# 
   691  0411                     	;# 
   692  0412                     	;# 
   693  0413                     	;# 
   694  0414                     	;# 
   695  0415                     	;# 
   696  0416                     	;# 
   697  0417                     	;# 
   698  0418                     	;# 
   699  0418                     	;# 
   700  0419                     	;# 
   701  041A                     	;# 
   702  041B                     	;# 
   703  041C                     	;# 
   704  041D                     	;# 
   705  041E                     	;# 
   706  048D                     	;# 
   707  0491                     	;# 
   708  0491                     	;# 
   709  0492                     	;# 
   710  0492                     	;# 
   711  0493                     	;# 
   712  0493                     	;# 
   713  0493                     	;# 
   714  0494                     	;# 
   715  0494                     	;# 
   716  0495                     	;# 
   717  0495                     	;# 
   718  0496                     	;# 
   719  0496                     	;# 
   720  0497                     	;# 
   721  0497                     	;# 
   722  0595                     	;# 
   723  0596                     	;# 
   724  0597                     	;# 
   725  059C                     	;# 
   726  059D                     	;# 
   727  059E                     	;# 
   728  0611                     	;# 
   729  0611                     	;# 
   730  0612                     	;# 
   731  0613                     	;# 
   732  0614                     	;# 
   733  0614                     	;# 
   734  0615                     	;# 
   735  0616                     	;# 
   736  0617                     	;# 
   737  0617                     	;# 
   738  0618                     	;# 
   739  0619                     	;# 
   740  061A                     	;# 
   741  061A                     	;# 
   742  061B                     	;# 
   743  061C                     	;# 
   744  061D                     	;# 
   745  061D                     	;# 
   746  061E                     	;# 
   747  061F                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  000F                     	;# 
   775  0010                     	;# 
   776  0011                     	;# 
   777  0012                     	;# 
   778  0013                     	;# 
   779  0014                     	;# 
   780  0015                     	;# 
   781  0016                     	;# 
   782  0016                     	;# 
   783  0017                     	;# 
   784  0018                     	;# 
   785  0019                     	;# 
   786  001A                     	;# 
   787  001B                     	;# 
   788  001C                     	;# 
   789  008C                     	;# 
   790  008D                     	;# 
   791  008E                     	;# 
   792  008F                     	;# 
   793  0090                     	;# 
   794  0091                     	;# 
   795  0092                     	;# 
   796  0093                     	;# 
   797  0094                     	;# 
   798  0095                     	;# 
   799  0096                     	;# 
   800  0097                     	;# 
   801  0099                     	;# 
   802  009A                     	;# 
   803  009B                     	;# 
   804  009B                     	;# 
   805  009C                     	;# 
   806  009D                     	;# 
   807  009E                     	;# 
   808  010C                     	;# 
   809  010D                     	;# 
   810  010E                     	;# 
   811  010F                     	;# 
   812  0110                     	;# 
   813  0116                     	;# 
   814  0117                     	;# 
   815  011D                     	;# 
   816  018C                     	;# 
   817  018D                     	;# 
   818  018F                     	;# 
   819  0190                     	;# 
   820  0191                     	;# 
   821  0191                     	;# 
   822  0192                     	;# 
   823  0193                     	;# 
   824  0193                     	;# 
   825  0194                     	;# 
   826  0195                     	;# 
   827  0196                     	;# 
   828  0197                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  0199                     	;# 
   832  019A                     	;# 
   833  019A                     	;# 
   834  019A                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019B                     	;# 
   840  019C                     	;# 
   841  019C                     	;# 
   842  019C                     	;# 
   843  019D                     	;# 
   844  019D                     	;# 
   845  019D                     	;# 
   846  019E                     	;# 
   847  019E                     	;# 
   848  019E                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  019F                     	;# 
   852  020D                     	;# 
   853  020F                     	;# 
   854  0210                     	;# 
   855  0211                     	;# 
   856  0211                     	;# 
   857  0212                     	;# 
   858  0212                     	;# 
   859  0213                     	;# 
   860  0213                     	;# 
   861  0214                     	;# 
   862  0214                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0215                     	;# 
   866  0216                     	;# 
   867  0216                     	;# 
   868  0217                     	;# 
   869  0217                     	;# 
   870  0219                     	;# 
   871  021A                     	;# 
   872  021B                     	;# 
   873  021C                     	;# 
   874  021D                     	;# 
   875  021E                     	;# 
   876  021F                     	;# 
   877  028C                     	;# 
   878  028D                     	;# 
   879  0291                     	;# 
   880  0291                     	;# 
   881  0292                     	;# 
   882  0293                     	;# 
   883  0298                     	;# 
   884  0298                     	;# 
   885  0299                     	;# 
   886  029A                     	;# 
   887  029D                     	;# 
   888  029E                     	;# 
   889  029F                     	;# 
   890  030C                     	;# 
   891  030D                     	;# 
   892  0311                     	;# 
   893  0311                     	;# 
   894  0312                     	;# 
   895  0313                     	;# 
   896  0318                     	;# 
   897  0318                     	;# 
   898  0319                     	;# 
   899  031A                     	;# 
   900  031C                     	;# 
   901  031C                     	;# 
   902  031D                     	;# 
   903  031E                     	;# 
   904  038C                     	;# 
   905  038D                     	;# 
   906  0394                     	;# 
   907  0395                     	;# 
   908  0396                     	;# 
   909  040C                     	;# 
   910  040D                     	;# 
   911  0411                     	;# 
   912  0411                     	;# 
   913  0412                     	;# 
   914  0413                     	;# 
   915  0414                     	;# 
   916  0415                     	;# 
   917  0416                     	;# 
   918  0417                     	;# 
   919  0418                     	;# 
   920  0418                     	;# 
   921  0419                     	;# 
   922  041A                     	;# 
   923  041B                     	;# 
   924  041C                     	;# 
   925  041D                     	;# 
   926  041E                     	;# 
   927  048D                     	;# 
   928  0491                     	;# 
   929  0491                     	;# 
   930  0492                     	;# 
   931  0492                     	;# 
   932  0493                     	;# 
   933  0493                     	;# 
   934  0493                     	;# 
   935  0494                     	;# 
   936  0494                     	;# 
   937  0495                     	;# 
   938  0495                     	;# 
   939  0496                     	;# 
   940  0496                     	;# 
   941  0497                     	;# 
   942  0497                     	;# 
   943  0595                     	;# 
   944  0596                     	;# 
   945  0597                     	;# 
   946  059C                     	;# 
   947  059D                     	;# 
   948  059E                     	;# 
   949  0611                     	;# 
   950  0611                     	;# 
   951  0612                     	;# 
   952  0613                     	;# 
   953  0614                     	;# 
   954  0614                     	;# 
   955  0615                     	;# 
   956  0616                     	;# 
   957  0617                     	;# 
   958  0617                     	;# 
   959  0618                     	;# 
   960  0619                     	;# 
   961  061A                     	;# 
   962  061A                     	;# 
   963  061B                     	;# 
   964  061C                     	;# 
   965  061D                     	;# 
   966  061D                     	;# 
   967  061E                     	;# 
   968  061F                     	;# 
   969  0FE4                     	;# 
   970  0FE5                     	;# 
   971  0FE6                     	;# 
   972  0FE7                     	;# 
   973  0FE8                     	;# 
   974  0FE9                     	;# 
   975  0FEA                     	;# 
   976  0FEB                     	;# 
   977  0FED                     	;# 
   978  0FEE                     	;# 
   979  0FEF                     	;# 
   980  0000                     	;# 
   981  0001                     	;# 
   982  0002                     	;# 
   983  0003                     	;# 
   984  0004                     	;# 
   985  0005                     	;# 
   986  0006                     	;# 
   987  0007                     	;# 
   988  0008                     	;# 
   989  0009                     	;# 
   990  000A                     	;# 
   991  000B                     	;# 
   992  000C                     	;# 
   993  000D                     	;# 
   994  000E                     	;# 
   995  000F                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0013                     	;# 
  1000  0014                     	;# 
  1001  0015                     	;# 
  1002  0016                     	;# 
  1003  0016                     	;# 
  1004  0017                     	;# 
  1005  0018                     	;# 
  1006  0019                     	;# 
  1007  001A                     	;# 
  1008  001B                     	;# 
  1009  001C                     	;# 
  1010  008C                     	;# 
  1011  008D                     	;# 
  1012  008E                     	;# 
  1013  008F                     	;# 
  1014  0090                     	;# 
  1015  0091                     	;# 
  1016  0092                     	;# 
  1017  0093                     	;# 
  1018  0094                     	;# 
  1019  0095                     	;# 
  1020  0096                     	;# 
  1021  0097                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  010C                     	;# 
  1030  010D                     	;# 
  1031  010E                     	;# 
  1032  010F                     	;# 
  1033  0110                     	;# 
  1034  0116                     	;# 
  1035  0117                     	;# 
  1036  011D                     	;# 
  1037  018C                     	;# 
  1038  018D                     	;# 
  1039  018F                     	;# 
  1040  0190                     	;# 
  1041  0191                     	;# 
  1042  0191                     	;# 
  1043  0192                     	;# 
  1044  0193                     	;# 
  1045  0193                     	;# 
  1046  0194                     	;# 
  1047  0195                     	;# 
  1048  0196                     	;# 
  1049  0197                     	;# 
  1050  0199                     	;# 
  1051  0199                     	;# 
  1052  0199                     	;# 
  1053  019A                     	;# 
  1054  019A                     	;# 
  1055  019A                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019C                     	;# 
  1064  019D                     	;# 
  1065  019D                     	;# 
  1066  019D                     	;# 
  1067  019E                     	;# 
  1068  019E                     	;# 
  1069  019E                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  019F                     	;# 
  1073  020D                     	;# 
  1074  020F                     	;# 
  1075  0210                     	;# 
  1076  0211                     	;# 
  1077  0211                     	;# 
  1078  0212                     	;# 
  1079  0212                     	;# 
  1080  0213                     	;# 
  1081  0213                     	;# 
  1082  0214                     	;# 
  1083  0214                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0215                     	;# 
  1087  0216                     	;# 
  1088  0216                     	;# 
  1089  0217                     	;# 
  1090  0217                     	;# 
  1091  0219                     	;# 
  1092  021A                     	;# 
  1093  021B                     	;# 
  1094  021C                     	;# 
  1095  021D                     	;# 
  1096  021E                     	;# 
  1097  021F                     	;# 
  1098  028C                     	;# 
  1099  028D                     	;# 
  1100  0291                     	;# 
  1101  0291                     	;# 
  1102  0292                     	;# 
  1103  0293                     	;# 
  1104  0298                     	;# 
  1105  0298                     	;# 
  1106  0299                     	;# 
  1107  029A                     	;# 
  1108  029D                     	;# 
  1109  029E                     	;# 
  1110  029F                     	;# 
  1111  030C                     	;# 
  1112  030D                     	;# 
  1113  0311                     	;# 
  1114  0311                     	;# 
  1115  0312                     	;# 
  1116  0313                     	;# 
  1117  0318                     	;# 
  1118  0318                     	;# 
  1119  0319                     	;# 
  1120  031A                     	;# 
  1121  031C                     	;# 
  1122  031C                     	;# 
  1123  031D                     	;# 
  1124  031E                     	;# 
  1125  038C                     	;# 
  1126  038D                     	;# 
  1127  0394                     	;# 
  1128  0395                     	;# 
  1129  0396                     	;# 
  1130  040C                     	;# 
  1131  040D                     	;# 
  1132  0411                     	;# 
  1133  0411                     	;# 
  1134  0412                     	;# 
  1135  0413                     	;# 
  1136  0414                     	;# 
  1137  0415                     	;# 
  1138  0416                     	;# 
  1139  0417                     	;# 
  1140  0418                     	;# 
  1141  0418                     	;# 
  1142  0419                     	;# 
  1143  041A                     	;# 
  1144  041B                     	;# 
  1145  041C                     	;# 
  1146  041D                     	;# 
  1147  041E                     	;# 
  1148  048D                     	;# 
  1149  0491                     	;# 
  1150  0491                     	;# 
  1151  0492                     	;# 
  1152  0492                     	;# 
  1153  0493                     	;# 
  1154  0493                     	;# 
  1155  0493                     	;# 
  1156  0494                     	;# 
  1157  0494                     	;# 
  1158  0495                     	;# 
  1159  0495                     	;# 
  1160  0496                     	;# 
  1161  0496                     	;# 
  1162  0497                     	;# 
  1163  0497                     	;# 
  1164  0595                     	;# 
  1165  0596                     	;# 
  1166  0597                     	;# 
  1167  059C                     	;# 
  1168  059D                     	;# 
  1169  059E                     	;# 
  1170  0611                     	;# 
  1171  0611                     	;# 
  1172  0612                     	;# 
  1173  0613                     	;# 
  1174  0614                     	;# 
  1175  0614                     	;# 
  1176  0615                     	;# 
  1177  0616                     	;# 
  1178  0617                     	;# 
  1179  0617                     	;# 
  1180  0618                     	;# 
  1181  0619                     	;# 
  1182  061A                     	;# 
  1183  061A                     	;# 
  1184  061B                     	;# 
  1185  061C                     	;# 
  1186  061D                     	;# 
  1187  061D                     	;# 
  1188  061E                     	;# 
  1189  061F                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  000E                     	;# 
  1216  000F                     	;# 
  1217  0010                     	;# 
  1218  0011                     	;# 
  1219  0012                     	;# 
  1220  0013                     	;# 
  1221  0014                     	;# 
  1222  0015                     	;# 
  1223  0016                     	;# 
  1224  0016                     	;# 
  1225  0017                     	;# 
  1226  0018                     	;# 
  1227  0019                     	;# 
  1228  001A                     	;# 
  1229  001B                     	;# 
  1230  001C                     	;# 
  1231  008C                     	;# 
  1232  008D                     	;# 
  1233  008E                     	;# 
  1234  008F                     	;# 
  1235  0090                     	;# 
  1236  0091                     	;# 
  1237  0092                     	;# 
  1238  0093                     	;# 
  1239  0094                     	;# 
  1240  0095                     	;# 
  1241  0096                     	;# 
  1242  0097                     	;# 
  1243  0099                     	;# 
  1244  009A                     	;# 
  1245  009B                     	;# 
  1246  009B                     	;# 
  1247  009C                     	;# 
  1248  009D                     	;# 
  1249  009E                     	;# 
  1250  010C                     	;# 
  1251  010D                     	;# 
  1252  010E                     	;# 
  1253  010F                     	;# 
  1254  0110                     	;# 
  1255  0116                     	;# 
  1256  0117                     	;# 
  1257  011D                     	;# 
  1258  018C                     	;# 
  1259  018D                     	;# 
  1260  018F                     	;# 
  1261  0190                     	;# 
  1262  0191                     	;# 
  1263  0191                     	;# 
  1264  0192                     	;# 
  1265  0193                     	;# 
  1266  0193                     	;# 
  1267  0194                     	;# 
  1268  0195                     	;# 
  1269  0196                     	;# 
  1270  0197                     	;# 
  1271  0199                     	;# 
  1272  0199                     	;# 
  1273  0199                     	;# 
  1274  019A                     	;# 
  1275  019A                     	;# 
  1276  019A                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019B                     	;# 
  1282  019C                     	;# 
  1283  019C                     	;# 
  1284  019C                     	;# 
  1285  019D                     	;# 
  1286  019D                     	;# 
  1287  019D                     	;# 
  1288  019E                     	;# 
  1289  019E                     	;# 
  1290  019E                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  019F                     	;# 
  1294  020D                     	;# 
  1295  020F                     	;# 
  1296  0210                     	;# 
  1297  0211                     	;# 
  1298  0211                     	;# 
  1299  0212                     	;# 
  1300  0212                     	;# 
  1301  0213                     	;# 
  1302  0213                     	;# 
  1303  0214                     	;# 
  1304  0214                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0215                     	;# 
  1308  0216                     	;# 
  1309  0216                     	;# 
  1310  0217                     	;# 
  1311  0217                     	;# 
  1312  0219                     	;# 
  1313  021A                     	;# 
  1314  021B                     	;# 
  1315  021C                     	;# 
  1316  021D                     	;# 
  1317  021E                     	;# 
  1318  021F                     	;# 
  1319  028C                     	;# 
  1320  028D                     	;# 
  1321  0291                     	;# 
  1322  0291                     	;# 
  1323  0292                     	;# 
  1324  0293                     	;# 
  1325  0298                     	;# 
  1326  0298                     	;# 
  1327  0299                     	;# 
  1328  029A                     	;# 
  1329  029D                     	;# 
  1330  029E                     	;# 
  1331  029F                     	;# 
  1332  030C                     	;# 
  1333  030D                     	;# 
  1334  0311                     	;# 
  1335  0311                     	;# 
  1336  0312                     	;# 
  1337  0313                     	;# 
  1338  0318                     	;# 
  1339  0318                     	;# 
  1340  0319                     	;# 
  1341  031A                     	;# 
  1342  031C                     	;# 
  1343  031C                     	;# 
  1344  031D                     	;# 
  1345  031E                     	;# 
  1346  038C                     	;# 
  1347  038D                     	;# 
  1348  0394                     	;# 
  1349  0395                     	;# 
  1350  0396                     	;# 
  1351  040C                     	;# 
  1352  040D                     	;# 
  1353  0411                     	;# 
  1354  0411                     	;# 
  1355  0412                     	;# 
  1356  0413                     	;# 
  1357  0414                     	;# 
  1358  0415                     	;# 
  1359  0416                     	;# 
  1360  0417                     	;# 
  1361  0418                     	;# 
  1362  0418                     	;# 
  1363  0419                     	;# 
  1364  041A                     	;# 
  1365  041B                     	;# 
  1366  041C                     	;# 
  1367  041D                     	;# 
  1368  041E                     	;# 
  1369  048D                     	;# 
  1370  0491                     	;# 
  1371  0491                     	;# 
  1372  0492                     	;# 
  1373  0492                     	;# 
  1374  0493                     	;# 
  1375  0493                     	;# 
  1376  0493                     	;# 
  1377  0494                     	;# 
  1378  0494                     	;# 
  1379  0495                     	;# 
  1380  0495                     	;# 
  1381  0496                     	;# 
  1382  0496                     	;# 
  1383  0497                     	;# 
  1384  0497                     	;# 
  1385  0595                     	;# 
  1386  0596                     	;# 
  1387  0597                     	;# 
  1388  059C                     	;# 
  1389  059D                     	;# 
  1390  059E                     	;# 
  1391  0611                     	;# 
  1392  0611                     	;# 
  1393  0612                     	;# 
  1394  0613                     	;# 
  1395  0614                     	;# 
  1396  0614                     	;# 
  1397  0615                     	;# 
  1398  0616                     	;# 
  1399  0617                     	;# 
  1400  0617                     	;# 
  1401  0618                     	;# 
  1402  0619                     	;# 
  1403  061A                     	;# 
  1404  061A                     	;# 
  1405  061B                     	;# 
  1406  061C                     	;# 
  1407  061D                     	;# 
  1408  061D                     	;# 
  1409  061E                     	;# 
  1410  061F                     	;# 
  1411  0FE4                     	;# 
  1412  0FE5                     	;# 
  1413  0FE6                     	;# 
  1414  0FE7                     	;# 
  1415  0FE8                     	;# 
  1416  0FE9                     	;# 
  1417  0FEA                     	;# 
  1418  0FEB                     	;# 
  1419  0FED                     	;# 
  1420  0FEE                     	;# 
  1421  0FEF                     	;# 
  1422  0000                     	;# 
  1423  0001                     	;# 
  1424  0002                     	;# 
  1425  0003                     	;# 
  1426  0004                     	;# 
  1427  0005                     	;# 
  1428  0006                     	;# 
  1429  0007                     	;# 
  1430  0008                     	;# 
  1431  0009                     	;# 
  1432  000A                     	;# 
  1433  000B                     	;# 
  1434  000C                     	;# 
  1435  000D                     	;# 
  1436  000E                     	;# 
  1437  000F                     	;# 
  1438  0010                     	;# 
  1439  0011                     	;# 
  1440  0012                     	;# 
  1441  0013                     	;# 
  1442  0014                     	;# 
  1443  0015                     	;# 
  1444  0016                     	;# 
  1445  0016                     	;# 
  1446  0017                     	;# 
  1447  0018                     	;# 
  1448  0019                     	;# 
  1449  001A                     	;# 
  1450  001B                     	;# 
  1451  001C                     	;# 
  1452  008C                     	;# 
  1453  008D                     	;# 
  1454  008E                     	;# 
  1455  008F                     	;# 
  1456  0090                     	;# 
  1457  0091                     	;# 
  1458  0092                     	;# 
  1459  0093                     	;# 
  1460  0094                     	;# 
  1461  0095                     	;# 
  1462  0096                     	;# 
  1463  0097                     	;# 
  1464  0099                     	;# 
  1465  009A                     	;# 
  1466  009B                     	;# 
  1467  009B                     	;# 
  1468  009C                     	;# 
  1469  009D                     	;# 
  1470  009E                     	;# 
  1471  010C                     	;# 
  1472  010D                     	;# 
  1473  010E                     	;# 
  1474  010F                     	;# 
  1475  0110                     	;# 
  1476  0116                     	;# 
  1477  0117                     	;# 
  1478  011D                     	;# 
  1479  018C                     	;# 
  1480  018D                     	;# 
  1481  018F                     	;# 
  1482  0190                     	;# 
  1483  0191                     	;# 
  1484  0191                     	;# 
  1485  0192                     	;# 
  1486  0193                     	;# 
  1487  0193                     	;# 
  1488  0194                     	;# 
  1489  0195                     	;# 
  1490  0196                     	;# 
  1491  0197                     	;# 
  1492  0199                     	;# 
  1493  0199                     	;# 
  1494  0199                     	;# 
  1495  019A                     	;# 
  1496  019A                     	;# 
  1497  019A                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019B                     	;# 
  1503  019C                     	;# 
  1504  019C                     	;# 
  1505  019C                     	;# 
  1506  019D                     	;# 
  1507  019D                     	;# 
  1508  019D                     	;# 
  1509  019E                     	;# 
  1510  019E                     	;# 
  1511  019E                     	;# 
  1512  019F                     	;# 
  1513  019F                     	;# 
  1514  019F                     	;# 
  1515  020D                     	;# 
  1516  020F                     	;# 
  1517  0210                     	;# 
  1518  0211                     	;# 
  1519  0211                     	;# 
  1520  0212                     	;# 
  1521  0212                     	;# 
  1522  0213                     	;# 
  1523  0213                     	;# 
  1524  0214                     	;# 
  1525  0214                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0215                     	;# 
  1529  0216                     	;# 
  1530  0216                     	;# 
  1531  0217                     	;# 
  1532  0217                     	;# 
  1533  0219                     	;# 
  1534  021A                     	;# 
  1535  021B                     	;# 
  1536  021C                     	;# 
  1537  021D                     	;# 
  1538  021E                     	;# 
  1539  021F                     	;# 
  1540  028C                     	;# 
  1541  028D                     	;# 
  1542  0291                     	;# 
  1543  0291                     	;# 
  1544  0292                     	;# 
  1545  0293                     	;# 
  1546  0298                     	;# 
  1547  0298                     	;# 
  1548  0299                     	;# 
  1549  029A                     	;# 
  1550  029D                     	;# 
  1551  029E                     	;# 
  1552  029F                     	;# 
  1553  030C                     	;# 
  1554  030D                     	;# 
  1555  0311                     	;# 
  1556  0311                     	;# 
  1557  0312                     	;# 
  1558  0313                     	;# 
  1559  0318                     	;# 
  1560  0318                     	;# 
  1561  0319                     	;# 
  1562  031A                     	;# 
  1563  031C                     	;# 
  1564  031C                     	;# 
  1565  031D                     	;# 
  1566  031E                     	;# 
  1567  038C                     	;# 
  1568  038D                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  040C                     	;# 
  1573  040D                     	;# 
  1574  0411                     	;# 
  1575  0411                     	;# 
  1576  0412                     	;# 
  1577  0413                     	;# 
  1578  0414                     	;# 
  1579  0415                     	;# 
  1580  0416                     	;# 
  1581  0417                     	;# 
  1582  0418                     	;# 
  1583  0418                     	;# 
  1584  0419                     	;# 
  1585  041A                     	;# 
  1586  041B                     	;# 
  1587  041C                     	;# 
  1588  041D                     	;# 
  1589  041E                     	;# 
  1590  048D                     	;# 
  1591  0491                     	;# 
  1592  0491                     	;# 
  1593  0492                     	;# 
  1594  0492                     	;# 
  1595  0493                     	;# 
  1596  0493                     	;# 
  1597  0493                     	;# 
  1598  0494                     	;# 
  1599  0494                     	;# 
  1600  0495                     	;# 
  1601  0495                     	;# 
  1602  0496                     	;# 
  1603  0496                     	;# 
  1604  0497                     	;# 
  1605  0497                     	;# 
  1606  0595                     	;# 
  1607  0596                     	;# 
  1608  0597                     	;# 
  1609  059C                     	;# 
  1610  059D                     	;# 
  1611  059E                     	;# 
  1612  0611                     	;# 
  1613  0611                     	;# 
  1614  0612                     	;# 
  1615  0613                     	;# 
  1616  0614                     	;# 
  1617  0614                     	;# 
  1618  0615                     	;# 
  1619  0616                     	;# 
  1620  0617                     	;# 
  1621  0617                     	;# 
  1622  0618                     	;# 
  1623  0619                     	;# 
  1624  061A                     	;# 
  1625  061A                     	;# 
  1626  061B                     	;# 
  1627  061C                     	;# 
  1628  061D                     	;# 
  1629  061D                     	;# 
  1630  061E                     	;# 
  1631  061F                     	;# 
  1632  0FE4                     	;# 
  1633  0FE5                     	;# 
  1634  0FE6                     	;# 
  1635  0FE7                     	;# 
  1636  0FE8                     	;# 
  1637  0FE9                     	;# 
  1638  0FEA                     	;# 
  1639  0FEB                     	;# 
  1640  0FED                     	;# 
  1641  0FEE                     	;# 
  1642  0FEF                     	;# 
  1643  0000                     	;# 
  1644  0001                     	;# 
  1645  0002                     	;# 
  1646  0003                     	;# 
  1647  0004                     	;# 
  1648  0005                     	;# 
  1649  0006                     	;# 
  1650  0007                     	;# 
  1651  0008                     	;# 
  1652  0009                     	;# 
  1653  000A                     	;# 
  1654  000B                     	;# 
  1655  000C                     	;# 
  1656  000D                     	;# 
  1657  000E                     	;# 
  1658  000F                     	;# 
  1659  0010                     	;# 
  1660  0011                     	;# 
  1661  0012                     	;# 
  1662  0013                     	;# 
  1663  0014                     	;# 
  1664  0015                     	;# 
  1665  0016                     	;# 
  1666  0016                     	;# 
  1667  0017                     	;# 
  1668  0018                     	;# 
  1669  0019                     	;# 
  1670  001A                     	;# 
  1671  001B                     	;# 
  1672  001C                     	;# 
  1673  008C                     	;# 
  1674  008D                     	;# 
  1675  008E                     	;# 
  1676  008F                     	;# 
  1677  0090                     	;# 
  1678  0091                     	;# 
  1679  0092                     	;# 
  1680  0093                     	;# 
  1681  0094                     	;# 
  1682  0095                     	;# 
  1683  0096                     	;# 
  1684  0097                     	;# 
  1685  0099                     	;# 
  1686  009A                     	;# 
  1687  009B                     	;# 
  1688  009B                     	;# 
  1689  009C                     	;# 
  1690  009D                     	;# 
  1691  009E                     	;# 
  1692  010C                     	;# 
  1693  010D                     	;# 
  1694  010E                     	;# 
  1695  010F                     	;# 
  1696  0110                     	;# 
  1697  0116                     	;# 
  1698  0117                     	;# 
  1699  011D                     	;# 
  1700  018C                     	;# 
  1701  018D                     	;# 
  1702  018F                     	;# 
  1703  0190                     	;# 
  1704  0191                     	;# 
  1705  0191                     	;# 
  1706  0192                     	;# 
  1707  0193                     	;# 
  1708  0193                     	;# 
  1709  0194                     	;# 
  1710  0195                     	;# 
  1711  0196                     	;# 
  1712  0197                     	;# 
  1713  0199                     	;# 
  1714  0199                     	;# 
  1715  0199                     	;# 
  1716  019A                     	;# 
  1717  019A                     	;# 
  1718  019A                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019B                     	;# 
  1724  019C                     	;# 
  1725  019C                     	;# 
  1726  019C                     	;# 
  1727  019D                     	;# 
  1728  019D                     	;# 
  1729  019D                     	;# 
  1730  019E                     	;# 
  1731  019E                     	;# 
  1732  019E                     	;# 
  1733  019F                     	;# 
  1734  019F                     	;# 
  1735  019F                     	;# 
  1736  020D                     	;# 
  1737  020F                     	;# 
  1738  0210                     	;# 
  1739  0211                     	;# 
  1740  0211                     	;# 
  1741  0212                     	;# 
  1742  0212                     	;# 
  1743  0213                     	;# 
  1744  0213                     	;# 
  1745  0214                     	;# 
  1746  0214                     	;# 
  1747  0215                     	;# 
  1748  0215                     	;# 
  1749  0215                     	;# 
  1750  0216                     	;# 
  1751  0216                     	;# 
  1752  0217                     	;# 
  1753  0217                     	;# 
  1754  0219                     	;# 
  1755  021A                     	;# 
  1756  021B                     	;# 
  1757  021C                     	;# 
  1758  021D                     	;# 
  1759  021E                     	;# 
  1760  021F                     	;# 
  1761  028C                     	;# 
  1762  028D                     	;# 
  1763  0291                     	;# 
  1764  0291                     	;# 
  1765  0292                     	;# 
  1766  0293                     	;# 
  1767  0298                     	;# 
  1768  0298                     	;# 
  1769  0299                     	;# 
  1770  029A                     	;# 
  1771  029D                     	;# 
  1772  029E                     	;# 
  1773  029F                     	;# 
  1774  030C                     	;# 
  1775  030D                     	;# 
  1776  0311                     	;# 
  1777  0311                     	;# 
  1778  0312                     	;# 
  1779  0313                     	;# 
  1780  0318                     	;# 
  1781  0318                     	;# 
  1782  0319                     	;# 
  1783  031A                     	;# 
  1784  031C                     	;# 
  1785  031C                     	;# 
  1786  031D                     	;# 
  1787  031E                     	;# 
  1788  038C                     	;# 
  1789  038D                     	;# 
  1790  0394                     	;# 
  1791  0395                     	;# 
  1792  0396                     	;# 
  1793  040C                     	;# 
  1794  040D                     	;# 
  1795  0411                     	;# 
  1796  0411                     	;# 
  1797  0412                     	;# 
  1798  0413                     	;# 
  1799  0414                     	;# 
  1800  0415                     	;# 
  1801  0416                     	;# 
  1802  0417                     	;# 
  1803  0418                     	;# 
  1804  0418                     	;# 
  1805  0419                     	;# 
  1806  041A                     	;# 
  1807  041B                     	;# 
  1808  041C                     	;# 
  1809  041D                     	;# 
  1810  041E                     	;# 
  1811  048D                     	;# 
  1812  0491                     	;# 
  1813  0491                     	;# 
  1814  0492                     	;# 
  1815  0492                     	;# 
  1816  0493                     	;# 
  1817  0493                     	;# 
  1818  0493                     	;# 
  1819  0494                     	;# 
  1820  0494                     	;# 
  1821  0495                     	;# 
  1822  0495                     	;# 
  1823  0496                     	;# 
  1824  0496                     	;# 
  1825  0497                     	;# 
  1826  0497                     	;# 
  1827  0595                     	;# 
  1828  0596                     	;# 
  1829  0597                     	;# 
  1830  059C                     	;# 
  1831  059D                     	;# 
  1832  059E                     	;# 
  1833  0611                     	;# 
  1834  0611                     	;# 
  1835  0612                     	;# 
  1836  0613                     	;# 
  1837  0614                     	;# 
  1838  0614                     	;# 
  1839  0615                     	;# 
  1840  0616                     	;# 
  1841  0617                     	;# 
  1842  0617                     	;# 
  1843  0618                     	;# 
  1844  0619                     	;# 
  1845  061A                     	;# 
  1846  061A                     	;# 
  1847  061B                     	;# 
  1848  061C                     	;# 
  1849  061D                     	;# 
  1850  061D                     	;# 
  1851  061E                     	;# 
  1852  061F                     	;# 
  1853  0FE4                     	;# 
  1854  0FE5                     	;# 
  1855  0FE6                     	;# 
  1856  0FE7                     	;# 
  1857  0FE8                     	;# 
  1858  0FE9                     	;# 
  1859  0FEA                     	;# 
  1860  0FEB                     	;# 
  1861  0FED                     	;# 
  1862  0FEE                     	;# 
  1863  0FEF                     	;# 
  1864  0000                     	;# 
  1865  0001                     	;# 
  1866  0002                     	;# 
  1867  0003                     	;# 
  1868  0004                     	;# 
  1869  0005                     	;# 
  1870  0006                     	;# 
  1871  0007                     	;# 
  1872  0008                     	;# 
  1873  0009                     	;# 
  1874  000A                     	;# 
  1875  000B                     	;# 
  1876  000C                     	;# 
  1877  000D                     	;# 
  1878  000E                     	;# 
  1879  000F                     	;# 
  1880  0010                     	;# 
  1881  0011                     	;# 
  1882  0012                     	;# 
  1883  0013                     	;# 
  1884  0014                     	;# 
  1885  0015                     	;# 
  1886  0016                     	;# 
  1887  0016                     	;# 
  1888  0017                     	;# 
  1889  0018                     	;# 
  1890  0019                     	;# 
  1891  001A                     	;# 
  1892  001B                     	;# 
  1893  001C                     	;# 
  1894  008C                     	;# 
  1895  008D                     	;# 
  1896  008E                     	;# 
  1897  008F                     	;# 
  1898  0090                     	;# 
  1899  0091                     	;# 
  1900  0092                     	;# 
  1901  0093                     	;# 
  1902  0094                     	;# 
  1903  0095                     	;# 
  1904  0096                     	;# 
  1905  0097                     	;# 
  1906  0099                     	;# 
  1907  009A                     	;# 
  1908  009B                     	;# 
  1909  009B                     	;# 
  1910  009C                     	;# 
  1911  009D                     	;# 
  1912  009E                     	;# 
  1913  010C                     	;# 
  1914  010D                     	;# 
  1915  010E                     	;# 
  1916  010F                     	;# 
  1917  0110                     	;# 
  1918  0116                     	;# 
  1919  0117                     	;# 
  1920  011D                     	;# 
  1921  018C                     	;# 
  1922  018D                     	;# 
  1923  018F                     	;# 
  1924  0190                     	;# 
  1925  0191                     	;# 
  1926  0191                     	;# 
  1927  0192                     	;# 
  1928  0193                     	;# 
  1929  0193                     	;# 
  1930  0194                     	;# 
  1931  0195                     	;# 
  1932  0196                     	;# 
  1933  0197                     	;# 
  1934  0199                     	;# 
  1935  0199                     	;# 
  1936  0199                     	;# 
  1937  019A                     	;# 
  1938  019A                     	;# 
  1939  019A                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019B                     	;# 
  1945  019C                     	;# 
  1946  019C                     	;# 
  1947  019C                     	;# 
  1948  019D                     	;# 
  1949  019D                     	;# 
  1950  019D                     	;# 
  1951  019E                     	;# 
  1952  019E                     	;# 
  1953  019E                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  019F                     	;# 
  1957  020D                     	;# 
  1958  020F                     	;# 
  1959  0210                     	;# 
  1960  0211                     	;# 
  1961  0211                     	;# 
  1962  0212                     	;# 
  1963  0212                     	;# 
  1964  0213                     	;# 
  1965  0213                     	;# 
  1966  0214                     	;# 
  1967  0214                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0215                     	;# 
  1971  0216                     	;# 
  1972  0216                     	;# 
  1973  0217                     	;# 
  1974  0217                     	;# 
  1975  0219                     	;# 
  1976  021A                     	;# 
  1977  021B                     	;# 
  1978  021C                     	;# 
  1979  021D                     	;# 
  1980  021E                     	;# 
  1981  021F                     	;# 
  1982  028C                     	;# 
  1983  028D                     	;# 
  1984  0291                     	;# 
  1985  0291                     	;# 
  1986  0292                     	;# 
  1987  0293                     	;# 
  1988  0298                     	;# 
  1989  0298                     	;# 
  1990  0299                     	;# 
  1991  029A                     	;# 
  1992  029D                     	;# 
  1993  029E                     	;# 
  1994  029F                     	;# 
  1995  030C                     	;# 
  1996  030D                     	;# 
  1997  0311                     	;# 
  1998  0311                     	;# 
  1999  0312                     	;# 
  2000  0313                     	;# 
  2001  0318                     	;# 
  2002  0318                     	;# 
  2003  0319                     	;# 
  2004  031A                     	;# 
  2005  031C                     	;# 
  2006  031C                     	;# 
  2007  031D                     	;# 
  2008  031E                     	;# 
  2009  038C                     	;# 
  2010  038D                     	;# 
  2011  0394                     	;# 
  2012  0395                     	;# 
  2013  0396                     	;# 
  2014  040C                     	;# 
  2015  040D                     	;# 
  2016  0411                     	;# 
  2017  0411                     	;# 
  2018  0412                     	;# 
  2019  0413                     	;# 
  2020  0414                     	;# 
  2021  0415                     	;# 
  2022  0416                     	;# 
  2023  0417                     	;# 
  2024  0418                     	;# 
  2025  0418                     	;# 
  2026  0419                     	;# 
  2027  041A                     	;# 
  2028  041B                     	;# 
  2029  041C                     	;# 
  2030  041D                     	;# 
  2031  041E                     	;# 
  2032  048D                     	;# 
  2033  0491                     	;# 
  2034  0491                     	;# 
  2035  0492                     	;# 
  2036  0492                     	;# 
  2037  0493                     	;# 
  2038  0493                     	;# 
  2039  0493                     	;# 
  2040  0494                     	;# 
  2041  0494                     	;# 
  2042  0495                     	;# 
  2043  0495                     	;# 
  2044  0496                     	;# 
  2045  0496                     	;# 
  2046  0497                     	;# 
  2047  0497                     	;# 
  2048  0595                     	;# 
  2049  0596                     	;# 
  2050  0597                     	;# 
  2051  059C                     	;# 
  2052  059D                     	;# 
  2053  059E                     	;# 
  2054  0611                     	;# 
  2055  0611                     	;# 
  2056  0612                     	;# 
  2057  0613                     	;# 
  2058  0614                     	;# 
  2059  0614                     	;# 
  2060  0615                     	;# 
  2061  0616                     	;# 
  2062  0617                     	;# 
  2063  0617                     	;# 
  2064  0618                     	;# 
  2065  0619                     	;# 
  2066  061A                     	;# 
  2067  061A                     	;# 
  2068  061B                     	;# 
  2069  061C                     	;# 
  2070  061D                     	;# 
  2071  061D                     	;# 
  2072  061E                     	;# 
  2073  061F                     	;# 
  2074  0FE4                     	;# 
  2075  0FE5                     	;# 
  2076  0FE6                     	;# 
  2077  0FE7                     	;# 
  2078  0FE8                     	;# 
  2079  0FE9                     	;# 
  2080  0FEA                     	;# 
  2081  0FEB                     	;# 
  2082  0FED                     	;# 
  2083  0FEE                     	;# 
  2084  0FEF                     	;# 
  2085  0000                     	;# 
  2086  0001                     	;# 
  2087  0002                     	;# 
  2088  0003                     	;# 
  2089  0004                     	;# 
  2090  0005                     	;# 
  2091  0006                     	;# 
  2092  0007                     	;# 
  2093  0008                     	;# 
  2094  0009                     	;# 
  2095  000A                     	;# 
  2096  000B                     	;# 
  2097  000C                     	;# 
  2098  000D                     	;# 
  2099  000E                     	;# 
  2100  000F                     	;# 
  2101  0010                     	;# 
  2102  0011                     	;# 
  2103  0012                     	;# 
  2104  0013                     	;# 
  2105  0014                     	;# 
  2106  0015                     	;# 
  2107  0016                     	;# 
  2108  0016                     	;# 
  2109  0017                     	;# 
  2110  0018                     	;# 
  2111  0019                     	;# 
  2112  001A                     	;# 
  2113  001B                     	;# 
  2114  001C                     	;# 
  2115  008C                     	;# 
  2116  008D                     	;# 
  2117  008E                     	;# 
  2118  008F                     	;# 
  2119  0090                     	;# 
  2120  0091                     	;# 
  2121  0092                     	;# 
  2122  0093                     	;# 
  2123  0094                     	;# 
  2124  0095                     	;# 
  2125  0096                     	;# 
  2126  0097                     	;# 
  2127  0099                     	;# 
  2128  009A                     	;# 
  2129  009B                     	;# 
  2130  009B                     	;# 
  2131  009C                     	;# 
  2132  009D                     	;# 
  2133  009E                     	;# 
  2134  010C                     	;# 
  2135  010D                     	;# 
  2136  010E                     	;# 
  2137  010F                     	;# 
  2138  0110                     	;# 
  2139  0116                     	;# 
  2140  0117                     	;# 
  2141  011D                     	;# 
  2142  018C                     	;# 
  2143  018D                     	;# 
  2144  018F                     	;# 
  2145  0190                     	;# 
  2146  0191                     	;# 
  2147  0191                     	;# 
  2148  0192                     	;# 
  2149  0193                     	;# 
  2150  0193                     	;# 
  2151  0194                     	;# 
  2152  0195                     	;# 
  2153  0196                     	;# 
  2154  0197                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  0199                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019A                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019B                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019C                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019D                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019E                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  019F                     	;# 
  2178  020D                     	;# 
  2179  020F                     	;# 
  2180  0210                     	;# 
  2181  0211                     	;# 
  2182  0211                     	;# 
  2183  0212                     	;# 
  2184  0212                     	;# 
  2185  0213                     	;# 
  2186  0213                     	;# 
  2187  0214                     	;# 
  2188  0214                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0215                     	;# 
  2192  0216                     	;# 
  2193  0216                     	;# 
  2194  0217                     	;# 
  2195  0217                     	;# 
  2196  0219                     	;# 
  2197  021A                     	;# 
  2198  021B                     	;# 
  2199  021C                     	;# 
  2200  021D                     	;# 
  2201  021E                     	;# 
  2202  021F                     	;# 
  2203  028C                     	;# 
  2204  028D                     	;# 
  2205  0291                     	;# 
  2206  0291                     	;# 
  2207  0292                     	;# 
  2208  0293                     	;# 
  2209  0298                     	;# 
  2210  0298                     	;# 
  2211  0299                     	;# 
  2212  029A                     	;# 
  2213  029D                     	;# 
  2214  029E                     	;# 
  2215  029F                     	;# 
  2216  030C                     	;# 
  2217  030D                     	;# 
  2218  0311                     	;# 
  2219  0311                     	;# 
  2220  0312                     	;# 
  2221  0313                     	;# 
  2222  0318                     	;# 
  2223  0318                     	;# 
  2224  0319                     	;# 
  2225  031A                     	;# 
  2226  031C                     	;# 
  2227  031C                     	;# 
  2228  031D                     	;# 
  2229  031E                     	;# 
  2230  038C                     	;# 
  2231  038D                     	;# 
  2232  0394                     	;# 
  2233  0395                     	;# 
  2234  0396                     	;# 
  2235  040C                     	;# 
  2236  040D                     	;# 
  2237  0411                     	;# 
  2238  0411                     	;# 
  2239  0412                     	;# 
  2240  0413                     	;# 
  2241  0414                     	;# 
  2242  0415                     	;# 
  2243  0416                     	;# 
  2244  0417                     	;# 
  2245  0418                     	;# 
  2246  0418                     	;# 
  2247  0419                     	;# 
  2248  041A                     	;# 
  2249  041B                     	;# 
  2250  041C                     	;# 
  2251  041D                     	;# 
  2252  041E                     	;# 
  2253  048D                     	;# 
  2254  0491                     	;# 
  2255  0491                     	;# 
  2256  0492                     	;# 
  2257  0492                     	;# 
  2258  0493                     	;# 
  2259  0493                     	;# 
  2260  0493                     	;# 
  2261  0494                     	;# 
  2262  0494                     	;# 
  2263  0495                     	;# 
  2264  0495                     	;# 
  2265  0496                     	;# 
  2266  0496                     	;# 
  2267  0497                     	;# 
  2268  0497                     	;# 
  2269  0595                     	;# 
  2270  0596                     	;# 
  2271  0597                     	;# 
  2272  059C                     	;# 
  2273  059D                     	;# 
  2274  059E                     	;# 
  2275  0611                     	;# 
  2276  0611                     	;# 
  2277  0612                     	;# 
  2278  0613                     	;# 
  2279  0614                     	;# 
  2280  0614                     	;# 
  2281  0615                     	;# 
  2282  0616                     	;# 
  2283  0617                     	;# 
  2284  0617                     	;# 
  2285  0618                     	;# 
  2286  0619                     	;# 
  2287  061A                     	;# 
  2288  061A                     	;# 
  2289  061B                     	;# 
  2290  061C                     	;# 
  2291  061D                     	;# 
  2292  061D                     	;# 
  2293  061E                     	;# 
  2294  061F                     	;# 
  2295  0FE4                     	;# 
  2296  0FE5                     	;# 
  2297  0FE6                     	;# 
  2298  0FE7                     	;# 
  2299  0FE8                     	;# 
  2300  0FE9                     	;# 
  2301  0FEA                     	;# 
  2302  0FEB                     	;# 
  2303  0FED                     	;# 
  2304  0FEE                     	;# 
  2305  0FEF                     	;# 
  2306  0000                     	;# 
  2307  0001                     	;# 
  2308  0002                     	;# 
  2309  0003                     	;# 
  2310  0004                     	;# 
  2311  0005                     	;# 
  2312  0006                     	;# 
  2313  0007                     	;# 
  2314  0008                     	;# 
  2315  0009                     	;# 
  2316  000A                     	;# 
  2317  000B                     	;# 
  2318  000C                     	;# 
  2319  000D                     	;# 
  2320  000E                     	;# 
  2321  000F                     	;# 
  2322  0010                     	;# 
  2323  0011                     	;# 
  2324  0012                     	;# 
  2325  0013                     	;# 
  2326  0014                     	;# 
  2327  0015                     	;# 
  2328  0016                     	;# 
  2329  0016                     	;# 
  2330  0017                     	;# 
  2331  0018                     	;# 
  2332  0019                     	;# 
  2333  001A                     	;# 
  2334  001B                     	;# 
  2335  001C                     	;# 
  2336  008C                     	;# 
  2337  008D                     	;# 
  2338  008E                     	;# 
  2339  008F                     	;# 
  2340  0090                     	;# 
  2341  0091                     	;# 
  2342  0092                     	;# 
  2343  0093                     	;# 
  2344  0094                     	;# 
  2345  0095                     	;# 
  2346  0096                     	;# 
  2347  0097                     	;# 
  2348  0099                     	;# 
  2349  009A                     	;# 
  2350  009B                     	;# 
  2351  009B                     	;# 
  2352  009C                     	;# 
  2353  009D                     	;# 
  2354  009E                     	;# 
  2355  010C                     	;# 
  2356  010D                     	;# 
  2357  010E                     	;# 
  2358  010F                     	;# 
  2359  0110                     	;# 
  2360  0116                     	;# 
  2361  0117                     	;# 
  2362  011D                     	;# 
  2363  018C                     	;# 
  2364  018D                     	;# 
  2365  018F                     	;# 
  2366  0190                     	;# 
  2367  0191                     	;# 
  2368  0191                     	;# 
  2369  0192                     	;# 
  2370  0193                     	;# 
  2371  0193                     	;# 
  2372  0194                     	;# 
  2373  0195                     	;# 
  2374  0196                     	;# 
  2375  0197                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  0199                     	;# 
  2379  019A                     	;# 
  2380  019A                     	;# 
  2381  019A                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019B                     	;# 
  2387  019C                     	;# 
  2388  019C                     	;# 
  2389  019C                     	;# 
  2390  019D                     	;# 
  2391  019D                     	;# 
  2392  019D                     	;# 
  2393  019E                     	;# 
  2394  019E                     	;# 
  2395  019E                     	;# 
  2396  019F                     	;# 
  2397  019F                     	;# 
  2398  019F                     	;# 
  2399  020D                     	;# 
  2400  020F                     	;# 
  2401  0210                     	;# 
  2402  0211                     	;# 
  2403  0211                     	;# 
  2404  0212                     	;# 
  2405  0212                     	;# 
  2406  0213                     	;# 
  2407  0213                     	;# 
  2408  0214                     	;# 
  2409  0214                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0215                     	;# 
  2413  0216                     	;# 
  2414  0216                     	;# 
  2415  0217                     	;# 
  2416  0217                     	;# 
  2417  0219                     	;# 
  2418  021A                     	;# 
  2419  021B                     	;# 
  2420  021C                     	;# 
  2421  021D                     	;# 
  2422  021E                     	;# 
  2423  021F                     	;# 
  2424  028C                     	;# 
  2425  028D                     	;# 
  2426  0291                     	;# 
  2427  0291                     	;# 
  2428  0292                     	;# 
  2429  0293                     	;# 
  2430  0298                     	;# 
  2431  0298                     	;# 
  2432  0299                     	;# 
  2433  029A                     	;# 
  2434  029D                     	;# 
  2435  029E                     	;# 
  2436  029F                     	;# 
  2437  030C                     	;# 
  2438  030D                     	;# 
  2439  0311                     	;# 
  2440  0311                     	;# 
  2441  0312                     	;# 
  2442  0313                     	;# 
  2443  0318                     	;# 
  2444  0318                     	;# 
  2445  0319                     	;# 
  2446  031A                     	;# 
  2447  031C                     	;# 
  2448  031C                     	;# 
  2449  031D                     	;# 
  2450  031E                     	;# 
  2451  038C                     	;# 
  2452  038D                     	;# 
  2453  0394                     	;# 
  2454  0395                     	;# 
  2455  0396                     	;# 
  2456  040C                     	;# 
  2457  040D                     	;# 
  2458  0411                     	;# 
  2459  0411                     	;# 
  2460  0412                     	;# 
  2461  0413                     	;# 
  2462  0414                     	;# 
  2463  0415                     	;# 
  2464  0416                     	;# 
  2465  0417                     	;# 
  2466  0418                     	;# 
  2467  0418                     	;# 
  2468  0419                     	;# 
  2469  041A                     	;# 
  2470  041B                     	;# 
  2471  041C                     	;# 
  2472  041D                     	;# 
  2473  041E                     	;# 
  2474  048D                     	;# 
  2475  0491                     	;# 
  2476  0491                     	;# 
  2477  0492                     	;# 
  2478  0492                     	;# 
  2479  0493                     	;# 
  2480  0493                     	;# 
  2481  0493                     	;# 
  2482  0494                     	;# 
  2483  0494                     	;# 
  2484  0495                     	;# 
  2485  0495                     	;# 
  2486  0496                     	;# 
  2487  0496                     	;# 
  2488  0497                     	;# 
  2489  0497                     	;# 
  2490  0595                     	;# 
  2491  0596                     	;# 
  2492  0597                     	;# 
  2493  059C                     	;# 
  2494  059D                     	;# 
  2495  059E                     	;# 
  2496  0611                     	;# 
  2497  0611                     	;# 
  2498  0612                     	;# 
  2499  0613                     	;# 
  2500  0614                     	;# 
  2501  0614                     	;# 
  2502  0615                     	;# 
  2503  0616                     	;# 
  2504  0617                     	;# 
  2505  0617                     	;# 
  2506  0618                     	;# 
  2507  0619                     	;# 
  2508  061A                     	;# 
  2509  061A                     	;# 
  2510  061B                     	;# 
  2511  061C                     	;# 
  2512  061D                     	;# 
  2513  061D                     	;# 
  2514  061E                     	;# 
  2515  061F                     	;# 
  2516  0FE4                     	;# 
  2517  0FE5                     	;# 
  2518  0FE6                     	;# 
  2519  0FE7                     	;# 
  2520  0FE8                     	;# 
  2521  0FE9                     	;# 
  2522  0FEA                     	;# 
  2523  0FEB                     	;# 
  2524  0FED                     	;# 
  2525  0FEE                     	;# 
  2526  0FEF                     	;_mod5
  2527                           
  2528                           	psect	idataCOMMON
  2529  0003                     __pidataCOMMON:	
  2530                           
  2531                           ;initializer for _top_push_state
  2532  0003  3406               	retlw	6
  2533                           
  2534                           	psect	idataBANK0
  2535  0002                     __pidataBANK0:	
  2536                           
  2537                           ;initializer for _blink_rate
  2538  0002  3414               	retlw	20
  2539                           
  2540                           	psect	idataBANK1
  2541  1F44                     __pidataBANK1:	
  2542                           
  2543                           ;initializer for _baseline_delay_time
  2544  1F44  34D0               	retlw	208
  2545  1F45  3407               	retlw	7
  2546  1F46  3400               	retlw	0
  2547  1F47  3400               	retlw	0
  2548                           
  2549                           ;initializer for _delay_time
  2550  1F48  34D0               	retlw	208
  2551  1F49  3407               	retlw	7
  2552  1F4A  3400               	retlw	0
  2553  1F4B  3400               	retlw	0
  2554                           
  2555                           ;initializer for _knob1_prev
  2556  1F4C  34D0               	retlw	208
  2557  1F4D  3407               	retlw	7
  2558                           
  2559                           ;initializer for _num_taps
  2560  1F4E  3404               	retlw	4
  2561  1F4F  3400               	retlw	0
  2562                           
  2563                           ;initializer for _tap_iteration
  2564  1F50  3401               	retlw	1
  2565  1F51  3400               	retlw	0
  2566                           
  2567                           ;initializer for _bottom_push_state
  2568  1F52  3406               	retlw	6
  2569                           
  2570                           ;initializer for _suspend_blink
  2571  1F53  3401               	retlw	1
  2572                           
  2573                           ;initializer for _switchBypass_state
  2574  1F54  34FF               	retlw	255
  2575                           
  2576                           ;initializer for _switchTap_state
  2577  1F55  34FF               	retlw	255
  2578                           
  2579                           	psect	idataBANK2
  2580  1F56                     __pidataBANK2:	
  2581                           
  2582                           ;initializer for _blink_delay
  2583  1F56  3464               	retlw	100
  2584  1F57  3400               	retlw	0
  2585                           
  2586                           ;initializer for _delay_time_changed
  2587  1F58  3401               	retlw	1
  2588  1F59  3400               	retlw	0
  2589                           
  2590                           ;initializer for _knob2_prev
  2591  1F5A  34D0               	retlw	208
  2592  1F5B  3407               	retlw	7
  2593                           
  2594                           ;initializer for _knob3_prev
  2595  1F5C  34D0               	retlw	208
  2596  1F5D  3407               	retlw	7
  2597                           
  2598                           ;initializer for _knob4_prev
  2599  1F5E  34D0               	retlw	208
  2600  1F5F  3407               	retlw	7
  2601                           
  2602                           ;initializer for _knob5_prev
  2603  1F60  34D0               	retlw	208
  2604  1F61  3407               	retlw	7
  2605                           
  2606                           ;initializer for _mod_delay_time
  2607  1F62  34D0               	retlw	208
  2608  1F63  3407               	retlw	7
  2609                           
  2610                           ;initializer for _switchBypass_up
  2611  1F64  3401               	retlw	1
  2612  1F65  3400               	retlw	0
  2613                           
  2614                           ;initializer for _switchTap_up
  2615  1F66  3401               	retlw	1
  2616  1F67  3400               	retlw	0
  2617                           
  2618                           ;initializer for _blink_state
  2619  1F68  3401               	retlw	1
  2620                           
  2621                           	psect	idataBANK5
  2622  1188                     __pidataBANK5:	
  2623                           
  2624                           ;initializer for _mod2
  2625  1188  3400               	retlw	0
  2626  1189  3400               	retlw	0
  2627  118A  340D               	retlw	13
  2628  118B  3400               	retlw	0
  2629  118C  341B               	retlw	27
  2630  118D  3400               	retlw	0
  2631  118E  3428               	retlw	40
  2632  118F  3400               	retlw	0
  2633  1190  3435               	retlw	53
  2634  1191  3400               	retlw	0
  2635  1192  3443               	retlw	67
  2636  1193  3400               	retlw	0
  2637  1194  3450               	retlw	80
  2638  1195  3400               	retlw	0
  2639  1196  345D               	retlw	93
  2640  1197  3400               	retlw	0
  2641  1198  345D               	retlw	93
  2642  1199  3400               	retlw	0
  2643  119A  3450               	retlw	80
  2644  119B  3400               	retlw	0
  2645  119C  3443               	retlw	67
  2646  119D  3400               	retlw	0
  2647  119E  3435               	retlw	53
  2648  119F  3400               	retlw	0
  2649  11A0  3428               	retlw	40
  2650  11A1  3400               	retlw	0
  2651  11A2  341B               	retlw	27
  2652  11A3  3400               	retlw	0
  2653  11A4  340D               	retlw	13
  2654  11A5  3400               	retlw	0
  2655  11A6  3400               	retlw	0
  2656  11A7  3400               	retlw	0
  2657  11A8  34F3               	retlw	243
  2658  11A9  34FF               	retlw	255
  2659  11AA  34E5               	retlw	229
  2660  11AB  34FF               	retlw	255
  2661  11AC  34D8               	retlw	216
  2662  11AD  34FF               	retlw	255
  2663  11AE  34CB               	retlw	203
  2664  11AF  34FF               	retlw	255
  2665  11B0  34BD               	retlw	189
  2666  11B1  34FF               	retlw	255
  2667  11B2  34B0               	retlw	176
  2668  11B3  34FF               	retlw	255
  2669  11B4  34A3               	retlw	163
  2670  11B5  34FF               	retlw	255
  2671  11B6  34A3               	retlw	163
  2672  11B7  34FF               	retlw	255
  2673  11B8  34B0               	retlw	176
  2674  11B9  34FF               	retlw	255
  2675  11BA  34BD               	retlw	189
  2676  11BB  34FF               	retlw	255
  2677  11BC  34CB               	retlw	203
  2678  11BD  34FF               	retlw	255
  2679  11BE  34D8               	retlw	216
  2680  11BF  34FF               	retlw	255
  2681  11C0  34E5               	retlw	229
  2682  11C1  34FF               	retlw	255
  2683                           
  2684                           	psect	idataBANK6
  2685  114E                     __pidataBANK6:	
  2686                           
  2687                           ;initializer for _mod3
  2688  114E  3400               	retlw	0
  2689  114F  3400               	retlw	0
  2690  1150  3407               	retlw	7
  2691  1151  3400               	retlw	0
  2692  1152  340D               	retlw	13
  2693  1153  3400               	retlw	0
  2694  1154  3414               	retlw	20
  2695  1155  3400               	retlw	0
  2696  1156  341B               	retlw	27
  2697  1157  3400               	retlw	0
  2698  1158  3421               	retlw	33
  2699  1159  3400               	retlw	0
  2700  115A  3428               	retlw	40
  2701  115B  3400               	retlw	0
  2702  115C  342F               	retlw	47
  2703  115D  3400               	retlw	0
  2704  115E  3435               	retlw	53
  2705  115F  3400               	retlw	0
  2706  1160  343C               	retlw	60
  2707  1161  3400               	retlw	0
  2708  1162  3443               	retlw	67
  2709  1163  3400               	retlw	0
  2710  1164  3449               	retlw	73
  2711  1165  3400               	retlw	0
  2712  1166  3450               	retlw	80
  2713  1167  3400               	retlw	0
  2714  1168  3457               	retlw	87
  2715  1169  3400               	retlw	0
  2716  116A  345D               	retlw	93
  2717  116B  3400               	retlw	0
  2718  116C  349C               	retlw	156
  2719  116D  34FF               	retlw	255
  2720  116E  34A3               	retlw	163
  2721  116F  34FF               	retlw	255
  2722  1170  34A9               	retlw	169
  2723  1171  34FF               	retlw	255
  2724  1172  34B0               	retlw	176
  2725  1173  34FF               	retlw	255
  2726  1174  34B7               	retlw	183
  2727  1175  34FF               	retlw	255
  2728  1176  34BD               	retlw	189
  2729  1177  34FF               	retlw	255
  2730  1178  34C4               	retlw	196
  2731  1179  34FF               	retlw	255
  2732  117A  34CB               	retlw	203
  2733  117B  34FF               	retlw	255
  2734  117C  34D1               	retlw	209
  2735  117D  34FF               	retlw	255
  2736  117E  34D8               	retlw	216
  2737  117F  34FF               	retlw	255
  2738  1180  34DF               	retlw	223
  2739  1181  34FF               	retlw	255
  2740  1182  34E5               	retlw	229
  2741  1183  34FF               	retlw	255
  2742  1184  34EC               	retlw	236
  2743  1185  34FF               	retlw	255
  2744  1186  34F3               	retlw	243
  2745  1187  34FF               	retlw	255
  2746                           
  2747                           	psect	idataBANK7
  2748  1114                     __pidataBANK7:	
  2749                           
  2750                           ;initializer for _mod4
  2751  1114  3464               	retlw	100
  2752  1115  3400               	retlw	0
  2753  1116  3464               	retlw	100
  2754  1117  3400               	retlw	0
  2755  1118  3464               	retlw	100
  2756  1119  3400               	retlw	0
  2757  111A  3464               	retlw	100
  2758  111B  3400               	retlw	0
  2759  111C  3464               	retlw	100
  2760  111D  3400               	retlw	0
  2761  111E  3464               	retlw	100
  2762  111F  3400               	retlw	0
  2763  1120  3464               	retlw	100
  2764  1121  3400               	retlw	0
  2765  1122  3464               	retlw	100
  2766  1123  3400               	retlw	0
  2767  1124  3464               	retlw	100
  2768  1125  3400               	retlw	0
  2769  1126  3464               	retlw	100
  2770  1127  3400               	retlw	0
  2771  1128  3464               	retlw	100
  2772  1129  3400               	retlw	0
  2773  112A  3464               	retlw	100
  2774  112B  3400               	retlw	0
  2775  112C  3464               	retlw	100
  2776  112D  3400               	retlw	0
  2777  112E  3464               	retlw	100
  2778  112F  3400               	retlw	0
  2779  1130  3464               	retlw	100
  2780  1131  3400               	retlw	0
  2781  1132  349C               	retlw	156
  2782  1133  34FF               	retlw	255
  2783  1134  349C               	retlw	156
  2784  1135  34FF               	retlw	255
  2785  1136  349C               	retlw	156
  2786  1137  34FF               	retlw	255
  2787  1138  349C               	retlw	156
  2788  1139  34FF               	retlw	255
  2789  113A  349C               	retlw	156
  2790  113B  34FF               	retlw	255
  2791  113C  349C               	retlw	156
  2792  113D  34FF               	retlw	255
  2793  113E  349C               	retlw	156
  2794  113F  34FF               	retlw	255
  2795  1140  349C               	retlw	156
  2796  1141  34FF               	retlw	255
  2797  1142  349C               	retlw	156
  2798  1143  34FF               	retlw	255
  2799  1144  349C               	retlw	156
  2800  1145  34FF               	retlw	255
  2801  1146  349C               	retlw	156
  2802  1147  34FF               	retlw	255
  2803  1148  349C               	retlw	156
  2804  1149  34FF               	retlw	255
  2805  114A  349C               	retlw	156
  2806  114B  34FF               	retlw	255
  2807  114C  349C               	retlw	156
  2808  114D  34FF               	retlw	255
  2809                           
  2810                           	psect	idataBANK8
  2811  152E                     __pidataBANK8:	
  2812                           
  2813                           ;initializer for _B25k
  2814  152E  34FF               	retlw	255
  2815  152F  3400               	retlw	0
  2816  1530  34FF               	retlw	255
  2817  1531  3400               	retlw	0
  2818  1532  34FF               	retlw	255
  2819  1533  3400               	retlw	0
  2820  1534  34DF               	retlw	223
  2821  1535  3400               	retlw	0
  2822  1536  34AE               	retlw	174
  2823  1537  3400               	retlw	0
  2824  1538  348E               	retlw	142
  2825  1539  3400               	retlw	0
  2826  153A  3478               	retlw	120
  2827  153B  3400               	retlw	0
  2828  153C  3467               	retlw	103
  2829  153D  3400               	retlw	0
  2830  153E  345B               	retlw	91
  2831  153F  3400               	retlw	0
  2832  1540  3450               	retlw	80
  2833  1541  3400               	retlw	0
  2834  1542  3448               	retlw	72
  2835  1543  3400               	retlw	0
  2836  1544  3442               	retlw	66
  2837  1545  3400               	retlw	0
  2838  1546  343C               	retlw	60
  2839  1547  3400               	retlw	0
  2840  1548  3437               	retlw	55
  2841  1549  3400               	retlw	0
  2842  154A  3433               	retlw	51
  2843  154B  3400               	retlw	0
  2844  154C  3430               	retlw	48
  2845  154D  3400               	retlw	0
  2846  154E  342D               	retlw	45
  2847  154F  3400               	retlw	0
  2848  1550  342A               	retlw	42
  2849  1551  3400               	retlw	0
  2850  1552  3427               	retlw	39
  2851  1553  3400               	retlw	0
  2852  1554  3425               	retlw	37
  2853  1555  3400               	retlw	0
  2854  1556  3423               	retlw	35
  2855  1557  3400               	retlw	0
  2856  1558  3421               	retlw	33
  2857  1559  3400               	retlw	0
  2858  155A  3420               	retlw	32
  2859  155B  3400               	retlw	0
  2860  155C  341E               	retlw	30
  2861  155D  3400               	retlw	0
  2862  155E  341D               	retlw	29
  2863  155F  3400               	retlw	0
  2864  1560  341C               	retlw	28
  2865  1561  3400               	retlw	0
  2866  1562  341B               	retlw	27
  2867  1563  3400               	retlw	0
  2868  1564  341A               	retlw	26
  2869  1565  3400               	retlw	0
  2870  1566  3419               	retlw	25
  2871  1567  3400               	retlw	0
  2872  1568  3418               	retlw	24
  2873  1569  3400               	retlw	0
  2874  156A  3417               	retlw	23
  2875  156B  3400               	retlw	0
  2876  156C  3416               	retlw	22
  2877  156D  3400               	retlw	0
  2878  156E  3415               	retlw	21
  2879  156F  3400               	retlw	0
  2880  1570  3415               	retlw	21
  2881  1571  3400               	retlw	0
  2882  1572  3414               	retlw	20
  2883  1573  3400               	retlw	0
  2884  1574  3413               	retlw	19
  2885  1575  3400               	retlw	0
  2886  1576  340F               	retlw	15
  2887  1577  3400               	retlw	0
  2888  1578  340B               	retlw	11
  2889  1579  3400               	retlw	0
  2890  157A  3407               	retlw	7
  2891  157B  3400               	retlw	0
  2892  157C  3407               	retlw	7
  2893  157D  3400               	retlw	0
  2894                           
  2895                           	psect	idataBANK9
  2896  14DE                     __pidataBANK9:	
  2897                           
  2898                           ;initializer for _iB25k
  2899  14DE  3407               	retlw	7
  2900  14DF  3400               	retlw	0
  2901  14E0  3407               	retlw	7
  2902  14E1  3400               	retlw	0
  2903  14E2  340B               	retlw	11
  2904  14E3  3400               	retlw	0
  2905  14E4  340F               	retlw	15
  2906  14E5  3400               	retlw	0
  2907  14E6  3413               	retlw	19
  2908  14E7  3400               	retlw	0
  2909  14E8  3414               	retlw	20
  2910  14E9  3400               	retlw	0
  2911  14EA  3415               	retlw	21
  2912  14EB  3400               	retlw	0
  2913  14EC  3415               	retlw	21
  2914  14ED  3400               	retlw	0
  2915  14EE  3416               	retlw	22
  2916  14EF  3400               	retlw	0
  2917  14F0  3417               	retlw	23
  2918  14F1  3400               	retlw	0
  2919  14F2  3418               	retlw	24
  2920  14F3  3400               	retlw	0
  2921  14F4  3419               	retlw	25
  2922  14F5  3400               	retlw	0
  2923  14F6  341A               	retlw	26
  2924  14F7  3400               	retlw	0
  2925  14F8  341B               	retlw	27
  2926  14F9  3400               	retlw	0
  2927  14FA  341C               	retlw	28
  2928  14FB  3400               	retlw	0
  2929  14FC  341D               	retlw	29
  2930  14FD  3400               	retlw	0
  2931  14FE  341E               	retlw	30
  2932  14FF  3400               	retlw	0
  2933  1500  3420               	retlw	32
  2934  1501  3400               	retlw	0
  2935  1502  3421               	retlw	33
  2936  1503  3400               	retlw	0
  2937  1504  3423               	retlw	35
  2938  1505  3400               	retlw	0
  2939  1506  3425               	retlw	37
  2940  1507  3400               	retlw	0
  2941  1508  3427               	retlw	39
  2942  1509  3400               	retlw	0
  2943  150A  342A               	retlw	42
  2944  150B  3400               	retlw	0
  2945  150C  342D               	retlw	45
  2946  150D  3400               	retlw	0
  2947  150E  3430               	retlw	48
  2948  150F  3400               	retlw	0
  2949  1510  3433               	retlw	51
  2950  1511  3400               	retlw	0
  2951  1512  3437               	retlw	55
  2952  1513  3400               	retlw	0
  2953  1514  343C               	retlw	60
  2954  1515  3400               	retlw	0
  2955  1516  3442               	retlw	66
  2956  1517  3400               	retlw	0
  2957  1518  3448               	retlw	72
  2958  1519  3400               	retlw	0
  2959  151A  3450               	retlw	80
  2960  151B  3400               	retlw	0
  2961  151C  345B               	retlw	91
  2962  151D  3400               	retlw	0
  2963  151E  3467               	retlw	103
  2964  151F  3400               	retlw	0
  2965  1520  3478               	retlw	120
  2966  1521  3400               	retlw	0
  2967  1522  348E               	retlw	142
  2968  1523  3400               	retlw	0
  2969  1524  34AE               	retlw	174
  2970  1525  3400               	retlw	0
  2971  1526  34DF               	retlw	223
  2972  1527  3400               	retlw	0
  2973  1528  34FF               	retlw	255
  2974  1529  3400               	retlw	0
  2975  152A  34FF               	retlw	255
  2976  152B  3400               	retlw	0
  2977  152C  34FF               	retlw	255
  2978  152D  3400               	retlw	0
  2979                           
  2980                           	psect	idataBANK10
  2981  10DA                     __pidataBANK10:	
  2982                           
  2983                           ;initializer for _mod1
  2984  10DA  3400               	retlw	0
  2985  10DB  3400               	retlw	0
  2986  10DC  3415               	retlw	21
  2987  10DD  3400               	retlw	0
  2988  10DE  3428               	retlw	40
  2989  10DF  3400               	retlw	0
  2990  10E0  343B               	retlw	59
  2991  10E1  3400               	retlw	0
  2992  10E2  344A               	retlw	74
  2993  10E3  3400               	retlw	0
  2994  10E4  3456               	retlw	86
  2995  10E5  3400               	retlw	0
  2996  10E6  345F               	retlw	95
  2997  10E7  3400               	retlw	0
  2998  10E8  3463               	retlw	99
  2999  10E9  3400               	retlw	0
  3000  10EA  3464               	retlw	100
  3001  10EB  3400               	retlw	0
  3002  10EC  345F               	retlw	95
  3003  10ED  3400               	retlw	0
  3004  10EE  3457               	retlw	87
  3005  10EF  3400               	retlw	0
  3006  10F0  344B               	retlw	75
  3007  10F1  3400               	retlw	0
  3008  10F2  343C               	retlw	60
  3009  10F3  3400               	retlw	0
  3010  10F4  342A               	retlw	42
  3011  10F5  3400               	retlw	0
  3012  10F6  3416               	retlw	22
  3013  10F7  3400               	retlw	0
  3014  10F8  3402               	retlw	2
  3015  10F9  3400               	retlw	0
  3016  10FA  34ED               	retlw	237
  3017  10FB  34FF               	retlw	255
  3018  10FC  34D9               	retlw	217
  3019  10FD  34FF               	retlw	255
  3020  10FE  34C7               	retlw	199
  3021  10FF  34FF               	retlw	255
  3022  1100  34B7               	retlw	183
  3023  1101  34FF               	retlw	255
  3024  1102  34AB               	retlw	171
  3025  1103  34FF               	retlw	255
  3026  1104  34A2               	retlw	162
  3027  1105  34FF               	retlw	255
  3028  1106  349D               	retlw	157
  3029  1107  34FF               	retlw	255
  3030  1108  349C               	retlw	156
  3031  1109  34FF               	retlw	255
  3032  110A  34A8               	retlw	168
  3033  110B  34FF               	retlw	255
  3034  110C  34B4               	retlw	180
  3035  110D  34FF               	retlw	255
  3036  110E  34C3               	retlw	195
  3037  110F  34FF               	retlw	255
  3038  1110  34D5               	retlw	213
  3039  1111  34FF               	retlw	255
  3040  1112  34E8               	retlw	232
  3041  1113  34FF               	retlw	255
  3042                           
  3043                           	psect	idataBIGRAM
  3044  01DE                     __pidataBIGRAM:	
  3045                           
  3046                           ;initializer for _delay
  3047  01DE  3422               	retlw	34
  3048  01DF  3408               	retlw	8
  3049  01E0  34FC               	retlw	252
  3050  01E1  3407               	retlw	7
  3051  01E2  34D8               	retlw	216
  3052  01E3  3407               	retlw	7
  3053  01E4  34B5               	retlw	181
  3054  01E5  3407               	retlw	7
  3055  01E6  3493               	retlw	147
  3056  01E7  3407               	retlw	7
  3057  01E8  3472               	retlw	114
  3058  01E9  3407               	retlw	7
  3059  01EA  3452               	retlw	82
  3060  01EB  3407               	retlw	7
  3061  01EC  3434               	retlw	52
  3062  01ED  3407               	retlw	7
  3063  01EE  3416               	retlw	22
  3064  01EF  3407               	retlw	7
  3065  01F0  34F9               	retlw	249
  3066  01F1  3406               	retlw	6
  3067  01F2  34DD               	retlw	221
  3068  01F3  3406               	retlw	6
  3069  01F4  34C2               	retlw	194
  3070  01F5  3406               	retlw	6
  3071  01F6  34A8               	retlw	168
  3072  01F7  3406               	retlw	6
  3073  01F8  348F               	retlw	143
  3074  01F9  3406               	retlw	6
  3075  01FA  3476               	retlw	118
  3076  01FB  3406               	retlw	6
  3077  01FC  345E               	retlw	94
  3078  01FD  3406               	retlw	6
  3079  01FE  3447               	retlw	71
  3080  01FF  3406               	retlw	6
  3081  0200  3430               	retlw	48
  3082  0201  3406               	retlw	6
  3083  0202  341A               	retlw	26
  3084  0203  3406               	retlw	6
  3085  0204  3405               	retlw	5
  3086  0205  3406               	retlw	6
  3087  0206  34F0               	retlw	240
  3088  0207  3405               	retlw	5
  3089  0208  34DC               	retlw	220
  3090  0209  3405               	retlw	5
  3091  020A  34C8               	retlw	200
  3092  020B  3405               	retlw	5
  3093  020C  34B5               	retlw	181
  3094  020D  3405               	retlw	5
  3095  020E  34A3               	retlw	163
  3096  020F  3405               	retlw	5
  3097  0210  3490               	retlw	144
  3098  0211  3405               	retlw	5
  3099  0212  347F               	retlw	127
  3100  0213  3405               	retlw	5
  3101  0214  346D               	retlw	109
  3102  0215  3405               	retlw	5
  3103  0216  345C               	retlw	92
  3104  0217  3405               	retlw	5
  3105  0218  344C               	retlw	76
  3106  0219  3405               	retlw	5
  3107  021A  343C               	retlw	60
  3108  021B  3405               	retlw	5
  3109  021C  342C               	retlw	44
  3110  021D  3405               	retlw	5
  3111  021E  341D               	retlw	29
  3112  021F  3405               	retlw	5
  3113  0220  340E               	retlw	14
  3114  0221  3405               	retlw	5
  3115  0222  34FF               	retlw	255
  3116  0223  3404               	retlw	4
  3117  0224  34F1               	retlw	241
  3118  0225  3404               	retlw	4
  3119  0226  34E2               	retlw	226
  3120  0227  3404               	retlw	4
  3121  0228  34D5               	retlw	213
  3122  0229  3404               	retlw	4
  3123  022A  34C7               	retlw	199
  3124  022B  3404               	retlw	4
  3125  022C  34BA               	retlw	186
  3126  022D  3404               	retlw	4
  3127  022E  34AD               	retlw	173
  3128  022F  3404               	retlw	4
  3129  0230  34A1               	retlw	161
  3130  0231  3404               	retlw	4
  3131  0232  3494               	retlw	148
  3132  0233  3404               	retlw	4
  3133  0234  3488               	retlw	136
  3134  0235  3404               	retlw	4
  3135  0236  347D               	retlw	125
  3136  0237  3404               	retlw	4
  3137  0238  3471               	retlw	113
  3138  0239  3404               	retlw	4
  3139  023A  3466               	retlw	102
  3140  023B  3404               	retlw	4
  3141  023C  345A               	retlw	90
  3142  023D  3404               	retlw	4
  3143  023E  3450               	retlw	80
  3144  023F  3404               	retlw	4
  3145  0240  3445               	retlw	69
  3146  0241  3404               	retlw	4
  3147  0242  343A               	retlw	58
  3148  0243  3404               	retlw	4
  3149  0244  3430               	retlw	48
  3150  0245  3404               	retlw	4
  3151  0246  3426               	retlw	38
  3152  0247  3404               	retlw	4
  3153  0248  341C               	retlw	28
  3154  0249  3404               	retlw	4
  3155  024A  3412               	retlw	18
  3156  024B  3404               	retlw	4
  3157  024C  3409               	retlw	9
  3158  024D  3404               	retlw	4
  3159  024E  34FF               	retlw	255
  3160  024F  3403               	retlw	3
  3161  0250  34F6               	retlw	246
  3162  0251  3403               	retlw	3
  3163  0252  34ED               	retlw	237
  3164  0253  3403               	retlw	3
  3165  0254  34E4               	retlw	228
  3166  0255  3403               	retlw	3
  3167  0256  34DC               	retlw	220
  3168  0257  3403               	retlw	3
  3169  0258  34D3               	retlw	211
  3170  0259  3403               	retlw	3
  3171  025A  34CB               	retlw	203
  3172  025B  3403               	retlw	3
  3173  025C  34C2               	retlw	194
  3174  025D  3403               	retlw	3
  3175  025E  34BA               	retlw	186
  3176  025F  3403               	retlw	3
  3177  0260  34B2               	retlw	178
  3178  0261  3403               	retlw	3
  3179  0262  34AA               	retlw	170
  3180  0263  3403               	retlw	3
  3181  0264  34A2               	retlw	162
  3182  0265  3403               	retlw	3
  3183  0266  349B               	retlw	155
  3184  0267  3403               	retlw	3
  3185  0268  3493               	retlw	147
  3186  0269  3403               	retlw	3
  3187  026A  348C               	retlw	140
  3188  026B  3403               	retlw	3
  3189  026C  3485               	retlw	133
  3190  026D  3403               	retlw	3
  3191  026E  347E               	retlw	126
  3192  026F  3403               	retlw	3
  3193  0270  3477               	retlw	119
  3194  0271  3403               	retlw	3
  3195  0272  3470               	retlw	112
  3196  0273  3403               	retlw	3
  3197  0274  3469               	retlw	105
  3198  0275  3403               	retlw	3
  3199  0276  3462               	retlw	98
  3200  0277  3403               	retlw	3
  3201  0278  345C               	retlw	92
  3202  0279  3403               	retlw	3
  3203  027A  3455               	retlw	85
  3204  027B  3403               	retlw	3
  3205  027C  344F               	retlw	79
  3206  027D  3403               	retlw	3
  3207  027E  3448               	retlw	72
  3208  027F  3403               	retlw	3
  3209  0280  3442               	retlw	66
  3210  0281  3403               	retlw	3
  3211  0282  343C               	retlw	60
  3212  0283  3403               	retlw	3
  3213  0284  3436               	retlw	54
  3214  0285  3403               	retlw	3
  3215  0286  3430               	retlw	48
  3216  0287  3403               	retlw	3
  3217  0288  342A               	retlw	42
  3218  0289  3403               	retlw	3
  3219  028A  3424               	retlw	36
  3220  028B  3403               	retlw	3
  3221  028C  341F               	retlw	31
  3222  028D  3403               	retlw	3
  3223  028E  3419               	retlw	25
  3224  028F  3403               	retlw	3
  3225  0290  3413               	retlw	19
  3226  0291  3403               	retlw	3
  3227  0292  340E               	retlw	14
  3228  0293  3403               	retlw	3
  3229  0294  3409               	retlw	9
  3230  0295  3403               	retlw	3
  3231  0296  3403               	retlw	3
  3232  0297  3403               	retlw	3
  3233  0298  34FE               	retlw	254
  3234  0299  3402               	retlw	2
  3235  029A  34F9               	retlw	249
  3236  029B  3402               	retlw	2
  3237  029C  34F4               	retlw	244
  3238  029D  3402               	retlw	2
  3239  029E  34EF               	retlw	239
  3240  029F  3402               	retlw	2
  3241  02A0  34EA               	retlw	234
  3242  02A1  3402               	retlw	2
  3243  02A2  34E5               	retlw	229
  3244  02A3  3402               	retlw	2
  3245  02A4  34E0               	retlw	224
  3246  02A5  3402               	retlw	2
  3247  02A6  34DB               	retlw	219
  3248  02A7  3402               	retlw	2
  3249  02A8  34D7               	retlw	215
  3250  02A9  3402               	retlw	2
  3251  02AA  34D2               	retlw	210
  3252  02AB  3402               	retlw	2
  3253  02AC  34CD               	retlw	205
  3254  02AD  3402               	retlw	2
  3255  02AE  34C9               	retlw	201
  3256  02AF  3402               	retlw	2
  3257  02B0  34C4               	retlw	196
  3258  02B1  3402               	retlw	2
  3259  02B2  34C0               	retlw	192
  3260  02B3  3402               	retlw	2
  3261  02B4  34BC               	retlw	188
  3262  02B5  3402               	retlw	2
  3263  02B6  34B7               	retlw	183
  3264  02B7  3402               	retlw	2
  3265  02B8  34B3               	retlw	179
  3266  02B9  3402               	retlw	2
  3267  02BA  34AF               	retlw	175
  3268  02BB  3402               	retlw	2
  3269  02BC  34AB               	retlw	171
  3270  02BD  3402               	retlw	2
  3271  02BE  34A6               	retlw	166
  3272  02BF  3402               	retlw	2
  3273  02C0  34A2               	retlw	162
  3274  02C1  3402               	retlw	2
  3275  02C2  349E               	retlw	158
  3276  02C3  3402               	retlw	2
  3277  02C4  349A               	retlw	154
  3278  02C5  3402               	retlw	2
  3279  02C6  3497               	retlw	151
  3280  02C7  3402               	retlw	2
  3281  02C8  3493               	retlw	147
  3282  02C9  3402               	retlw	2
  3283  02CA  348F               	retlw	143
  3284  02CB  3402               	retlw	2
  3285  02CC  348B               	retlw	139
  3286  02CD  3402               	retlw	2
  3287  02CE  3487               	retlw	135
  3288  02CF  3402               	retlw	2
  3289  02D0  3484               	retlw	132
  3290  02D1  3402               	retlw	2
  3291  02D2  3480               	retlw	128
  3292  02D3  3402               	retlw	2
  3293  02D4  347C               	retlw	124
  3294  02D5  3402               	retlw	2
  3295  02D6  3479               	retlw	121
  3296  02D7  3402               	retlw	2
  3297  02D8  3475               	retlw	117
  3298  02D9  3402               	retlw	2
  3299  02DA  3472               	retlw	114
  3300  02DB  3402               	retlw	2
  3301  02DC  346E               	retlw	110
  3302  02DD  3402               	retlw	2
  3303  02DE  346B               	retlw	107
  3304  02DF  3402               	retlw	2
  3305  02E0  3467               	retlw	103
  3306  02E1  3402               	retlw	2
  3307  02E2  3464               	retlw	100
  3308  02E3  3402               	retlw	2
  3309  02E4  3461               	retlw	97
  3310  02E5  3402               	retlw	2
  3311  02E6  345E               	retlw	94
  3312  02E7  3402               	retlw	2
  3313  02E8  345A               	retlw	90
  3314  02E9  3402               	retlw	2
  3315  02EA  3457               	retlw	87
  3316  02EB  3402               	retlw	2
  3317  02EC  3454               	retlw	84
  3318  02ED  3402               	retlw	2
  3319  02EE  3451               	retlw	81
  3320  02EF  3402               	retlw	2
  3321  02F0  344E               	retlw	78
  3322  02F1  3402               	retlw	2
  3323  02F2  344B               	retlw	75
  3324  02F3  3402               	retlw	2
  3325  02F4  3448               	retlw	72
  3326  02F5  3402               	retlw	2
  3327  02F6  3445               	retlw	69
  3328  02F7  3402               	retlw	2
  3329  02F8  3442               	retlw	66
  3330  02F9  3402               	retlw	2
  3331  02FA  343F               	retlw	63
  3332  02FB  3402               	retlw	2
  3333  02FC  343C               	retlw	60
  3334  02FD  3402               	retlw	2
  3335  02FE  3439               	retlw	57
  3336  02FF  3402               	retlw	2
  3337  0300  3436               	retlw	54
  3338  0301  3402               	retlw	2
  3339  0302  3433               	retlw	51
  3340  0303  3402               	retlw	2
  3341  0304  3430               	retlw	48
  3342  0305  3402               	retlw	2
  3343  0306  342E               	retlw	46
  3344  0307  3402               	retlw	2
  3345  0308  342B               	retlw	43
  3346  0309  3402               	retlw	2
  3347  030A  3428               	retlw	40
  3348  030B  3402               	retlw	2
  3349  030C  3425               	retlw	37
  3350  030D  3402               	retlw	2
  3351  030E  3423               	retlw	35
  3352  030F  3402               	retlw	2
  3353  0310  3420               	retlw	32
  3354  0311  3402               	retlw	2
  3355  0312  341E               	retlw	30
  3356  0313  3402               	retlw	2
  3357  0314  341B               	retlw	27
  3358  0315  3402               	retlw	2
  3359  0316  3418               	retlw	24
  3360  0317  3402               	retlw	2
  3361  0318  3416               	retlw	22
  3362  0319  3402               	retlw	2
  3363  031A  3413               	retlw	19
  3364  031B  3402               	retlw	2
  3365  031C  3411               	retlw	17
  3366  031D  3402               	retlw	2
  3367  031E  340E               	retlw	14
  3368  031F  3402               	retlw	2
  3369  0320  340C               	retlw	12
  3370  0321  3402               	retlw	2
  3371  0322  340A               	retlw	10
  3372  0323  3402               	retlw	2
  3373  0324  3407               	retlw	7
  3374  0325  3402               	retlw	2
  3375  0326  3405               	retlw	5
  3376  0327  3402               	retlw	2
  3377  0328  3402               	retlw	2
  3378  0329  3402               	retlw	2
  3379  032A  3400               	retlw	0
  3380  032B  3402               	retlw	2
  3381  032C  34FE               	retlw	254
  3382  032D  3401               	retlw	1
  3383  032E  34FB               	retlw	251
  3384  032F  3401               	retlw	1
  3385  0330  34F9               	retlw	249
  3386  0331  3401               	retlw	1
  3387  0332  34F7               	retlw	247
  3388  0333  3401               	retlw	1
  3389  0334  34F5               	retlw	245
  3390  0335  3401               	retlw	1
  3391  0336  34F2               	retlw	242
  3392  0337  3401               	retlw	1
  3393  0338  34F0               	retlw	240
  3394  0339  3401               	retlw	1
  3395  033A  34EE               	retlw	238
  3396  033B  3401               	retlw	1
  3397  033C  34EC               	retlw	236
  3398  033D  3401               	retlw	1
  3399  033E  34EA               	retlw	234
  3400  033F  3401               	retlw	1
  3401  0340  34E8               	retlw	232
  3402  0341  3401               	retlw	1
  3403  0342  34E6               	retlw	230
  3404  0343  3401               	retlw	1
  3405  0344  34E3               	retlw	227
  3406  0345  3401               	retlw	1
  3407  0346  34E1               	retlw	225
  3408  0347  3401               	retlw	1
  3409  0348  34DF               	retlw	223
  3410  0349  3401               	retlw	1
  3411  034A  34DD               	retlw	221
  3412  034B  3401               	retlw	1
  3413  034C  34DB               	retlw	219
  3414  034D  3401               	retlw	1
  3415  034E  34D9               	retlw	217
  3416  034F  3401               	retlw	1
  3417  0350  34D7               	retlw	215
  3418  0351  3401               	retlw	1
  3419  0352  34D5               	retlw	213
  3420  0353  3401               	retlw	1
  3421  0354  34D3               	retlw	211
  3422  0355  3401               	retlw	1
  3423  0356  34D2               	retlw	210
  3424  0357  3401               	retlw	1
  3425  0358  34D0               	retlw	208
  3426  0359  3401               	retlw	1
  3427  035A  34CE               	retlw	206
  3428  035B  3401               	retlw	1
  3429  035C  34CC               	retlw	204
  3430  035D  3401               	retlw	1
  3431  035E  34CA               	retlw	202
  3432  035F  3401               	retlw	1
  3433  0360  34C8               	retlw	200
  3434  0361  3401               	retlw	1
  3435  0362  34C6               	retlw	198
  3436  0363  3401               	retlw	1
  3437  0364  34C4               	retlw	196
  3438  0365  3401               	retlw	1
  3439  0366  34C3               	retlw	195
  3440  0367  3401               	retlw	1
  3441  0368  34C1               	retlw	193
  3442  0369  3401               	retlw	1
  3443  036A  34BF               	retlw	191
  3444  036B  3401               	retlw	1
  3445  036C  34BD               	retlw	189
  3446  036D  3401               	retlw	1
  3447  036E  34BC               	retlw	188
  3448  036F  3401               	retlw	1
  3449  0370  34BA               	retlw	186
  3450  0371  3401               	retlw	1
  3451  0372  34B8               	retlw	184
  3452  0373  3401               	retlw	1
  3453  0374  34B6               	retlw	182
  3454  0375  3401               	retlw	1
  3455  0376  34B5               	retlw	181
  3456  0377  3401               	retlw	1
  3457  0378  34B3               	retlw	179
  3458  0379  3401               	retlw	1
  3459  037A  34B1               	retlw	177
  3460  037B  3401               	retlw	1
  3461  037C  34B0               	retlw	176
  3462  037D  3401               	retlw	1
  3463  037E  34AE               	retlw	174
  3464  037F  3401               	retlw	1
  3465  0380  34AC               	retlw	172
  3466  0381  3401               	retlw	1
  3467  0382  34AB               	retlw	171
  3468  0383  3401               	retlw	1
  3469  0384  34A9               	retlw	169
  3470  0385  3401               	retlw	1
  3471  0386  34A8               	retlw	168
  3472  0387  3401               	retlw	1
  3473  0388  34A6               	retlw	166
  3474  0389  3401               	retlw	1
  3475  038A  34A4               	retlw	164
  3476  038B  3401               	retlw	1
  3477  038C  34A3               	retlw	163
  3478  038D  3401               	retlw	1
  3479  038E  34A1               	retlw	161
  3480  038F  3401               	retlw	1
  3481  0390  34A0               	retlw	160
  3482  0391  3401               	retlw	1
  3483  0392  349E               	retlw	158
  3484  0393  3401               	retlw	1
  3485  0394  349D               	retlw	157
  3486  0395  3401               	retlw	1
  3487  0396  349B               	retlw	155
  3488  0397  3401               	retlw	1
  3489  0398  349A               	retlw	154
  3490  0399  3401               	retlw	1
  3491  039A  3498               	retlw	152
  3492  039B  3401               	retlw	1
  3493  039C  3497               	retlw	151
  3494  039D  3401               	retlw	1
  3495  039E  3495               	retlw	149
  3496  039F  3401               	retlw	1
  3497  03A0  3494               	retlw	148
  3498  03A1  3401               	retlw	1
  3499  03A2  3492               	retlw	146
  3500  03A3  3401               	retlw	1
  3501  03A4  3491               	retlw	145
  3502  03A5  3401               	retlw	1
  3503  03A6  3490               	retlw	144
  3504  03A7  3401               	retlw	1
  3505  03A8  348E               	retlw	142
  3506  03A9  3401               	retlw	1
  3507  03AA  348D               	retlw	141
  3508  03AB  3401               	retlw	1
  3509  03AC  348B               	retlw	139
  3510  03AD  3401               	retlw	1
  3511  03AE  348A               	retlw	138
  3512  03AF  3401               	retlw	1
  3513  03B0  3489               	retlw	137
  3514  03B1  3401               	retlw	1
  3515  03B2  3487               	retlw	135
  3516  03B3  3401               	retlw	1
  3517  03B4  3486               	retlw	134
  3518  03B5  3401               	retlw	1
  3519  03B6  3485               	retlw	133
  3520  03B7  3401               	retlw	1
  3521  03B8  3483               	retlw	131
  3522  03B9  3401               	retlw	1
  3523  03BA  3482               	retlw	130
  3524  03BB  3401               	retlw	1
  3525  03BC  3481               	retlw	129
  3526  03BD  3401               	retlw	1
  3527  03BE  347F               	retlw	127
  3528  03BF  3401               	retlw	1
  3529  03C0  347E               	retlw	126
  3530  03C1  3401               	retlw	1
  3531  03C2  347D               	retlw	125
  3532  03C3  3401               	retlw	1
  3533  03C4  347B               	retlw	123
  3534  03C5  3401               	retlw	1
  3535  03C6  347A               	retlw	122
  3536  03C7  3401               	retlw	1
  3537  03C8  3479               	retlw	121
  3538  03C9  3401               	retlw	1
  3539  03CA  3478               	retlw	120
  3540  03CB  3401               	retlw	1
  3541  03CC  3476               	retlw	118
  3542  03CD  3401               	retlw	1
  3543  03CE  3475               	retlw	117
  3544  03CF  3401               	retlw	1
  3545  03D0  3474               	retlw	116
  3546  03D1  3401               	retlw	1
  3547  03D2  3473               	retlw	115
  3548  03D3  3401               	retlw	1
  3549  03D4  3471               	retlw	113
  3550  03D5  3401               	retlw	1
  3551  03D6  3470               	retlw	112
  3552  03D7  3401               	retlw	1
  3553  03D8  346F               	retlw	111
  3554  03D9  3401               	retlw	1
  3555  03DA  346E               	retlw	110
  3556  03DB  3401               	retlw	1
  3557                           
  3558                           ;initializer for _mod5
  3559  03DC  3400               	retlw	0
  3560  03DD  3400               	retlw	0
  3561  03DE  340A               	retlw	10
  3562  03DF  3400               	retlw	0
  3563  03E0  3414               	retlw	20
  3564  03E1  3400               	retlw	0
  3565  03E2  341E               	retlw	30
  3566  03E3  3400               	retlw	0
  3567  03E4  3428               	retlw	40
  3568  03E5  3400               	retlw	0
  3569  03E6  3432               	retlw	50
  3570  03E7  3400               	retlw	0
  3571  03E8  343A               	retlw	58
  3572  03E9  3400               	retlw	0
  3573  03EA  3442               	retlw	66
  3574  03EB  3400               	retlw	0
  3575  03EC  344A               	retlw	74
  3576  03ED  3400               	retlw	0
  3577  03EE  3450               	retlw	80
  3578  03EF  3400               	retlw	0
  3579  03F0  3456               	retlw	86
  3580  03F1  3400               	retlw	0
  3581  03F2  345B               	retlw	91
  3582  03F3  3400               	retlw	0
  3583  03F4  345F               	retlw	95
  3584  03F5  3400               	retlw	0
  3585  03F6  3461               	retlw	97
  3586  03F7  3400               	retlw	0
  3587  03F8  3463               	retlw	99
  3588  03F9  3400               	retlw	0
  3589  03FA  3464               	retlw	100
  3590  03FB  3400               	retlw	0
  3591  03FC  3463               	retlw	99
  3592  03FD  3400               	retlw	0
  3593  03FE  3461               	retlw	97
  3594  03FF  3400               	retlw	0
  3595  0400  345F               	retlw	95
  3596  0401  3400               	retlw	0
  3597  0402  345B               	retlw	91
  3598  0403  3400               	retlw	0
  3599  0404  3456               	retlw	86
  3600  0405  3400               	retlw	0
  3601  0406  3450               	retlw	80
  3602  0407  3400               	retlw	0
  3603  0408  344A               	retlw	74
  3604  0409  3400               	retlw	0
  3605  040A  3442               	retlw	66
  3606  040B  3400               	retlw	0
  3607  040C  343A               	retlw	58
  3608  040D  3400               	retlw	0
  3609  040E  3432               	retlw	50
  3610  040F  3400               	retlw	0
  3611  0410  3428               	retlw	40
  3612  0411  3400               	retlw	0
  3613  0412  341E               	retlw	30
  3614  0413  3400               	retlw	0
  3615  0414  3414               	retlw	20
  3616  0415  3400               	retlw	0
  3617  0416  340A               	retlw	10
  3618  0417  3400               	retlw	0
  3619  0418  3400               	retlw	0
  3620  0419  3400               	retlw	0
  3621  041A  34F6               	retlw	246
  3622  041B  34FF               	retlw	255
  3623  041C  34EC               	retlw	236
  3624  041D  34FF               	retlw	255
  3625  041E  34E2               	retlw	226
  3626  041F  34FF               	retlw	255
  3627  0420  34D8               	retlw	216
  3628  0421  34FF               	retlw	255
  3629  0422  34CE               	retlw	206
  3630  0423  34FF               	retlw	255
  3631  0424  34C6               	retlw	198
  3632  0425  34FF               	retlw	255
  3633  0426  34BE               	retlw	190
  3634  0427  34FF               	retlw	255
  3635  0428  34B6               	retlw	182
  3636  0429  34FF               	retlw	255
  3637  042A  34B0               	retlw	176
  3638  042B  34FF               	retlw	255
  3639  042C  34AA               	retlw	170
  3640  042D  34FF               	retlw	255
  3641  042E  34A5               	retlw	165
  3642  042F  34FF               	retlw	255
  3643  0430  34A1               	retlw	161
  3644  0431  34FF               	retlw	255
  3645  0432  349F               	retlw	159
  3646  0433  34FF               	retlw	255
  3647  0434  349D               	retlw	157
  3648  0435  34FF               	retlw	255
  3649  0436  349C               	retlw	156
  3650  0437  34FF               	retlw	255
  3651  0438  349D               	retlw	157
  3652  0439  34FF               	retlw	255
  3653  043A  349F               	retlw	159
  3654  043B  34FF               	retlw	255
  3655  043C  34A1               	retlw	161
  3656  043D  34FF               	retlw	255
  3657  043E  34A5               	retlw	165
  3658  043F  34FF               	retlw	255
  3659  0440  34AA               	retlw	170
  3660  0441  34FF               	retlw	255
  3661  0442  34B0               	retlw	176
  3662  0443  34FF               	retlw	255
  3663  0444  34B6               	retlw	182
  3664  0445  34FF               	retlw	255
  3665  0446  34BE               	retlw	190
  3666  0447  34FF               	retlw	255
  3667  0448  34C6               	retlw	198
  3668  0449  34FF               	retlw	255
  3669  044A  34CE               	retlw	206
  3670  044B  34FF               	retlw	255
  3671  044C  34D8               	retlw	216
  3672  044D  34FF               	retlw	255
  3673  044E  34E2               	retlw	226
  3674  044F  34FF               	retlw	255
  3675  0450  34EC               	retlw	236
  3676  0451  34FF               	retlw	255
  3677  0452  34F6               	retlw	246
  3678  0453  34FF               	retlw	255
  3679  0454  3400               	retlw	0
  3680  0455  3400               	retlw	0
  3681  000B                     _INTCONbits	set	11
  3682  000E                     _PORTCbits	set	14
  3683  000F                     _PORTDbits	set	15
  3684  0010                     _PORTEbits	set	16
  3685  001B                     _PR2	set	27
  3686  001C                     _T2CONbits	set	28
  3687  009D                     _ADCON0bits	set	157
  3688  009E                     _ADCON1bits	set	158
  3689  009C                     _ADRESH	set	156
  3690  009B                     _ADRESL	set	155
  3691  0095                     _OPTION_REGbits	set	149
  3692  0099                     _OSCCONbits	set	153
  3693  008D                     _TRISBbits	set	141
  3694  008E                     _TRISCbits	set	142
  3695  008F                     _TRISDbits	set	143
  3696  0090                     _TRISEbits	set	144
  3697  011D                     _APFCONbits	set	285
  3698  010D                     _LATBbits	set	269
  3699  010F                     _LATDbits	set	271
  3700  0190                     _ANSELEbits	set	400
  3701  0192                     _PMADRH	set	402
  3702  0191                     _PMADRL	set	401
  3703  0195                     _PMCON1bits	set	405
  3704  0196                     _PMCON2	set	406
  3705  0194                     _PMDATH	set	404
  3706  0193                     _PMDATL	set	403
  3707  0291                     _CCPR1	set	657
  3708  0298                     _CCPR2	set	664
  3709  0293                     _CCP1CONbits	set	659
  3710  029A                     _CCP2CONbits	set	666
  3711  029D                     _CCPTMRS0	set	669
  3712  029E                     _CCPTMRS1	set	670
  3713  029F                     _CCPTMRS2	set	671
  3714  0311                     _CCPR3	set	785
  3715  0318                     _CCPR4	set	792
  3716  031C                     _CCPR5	set	796
  3717  0313                     _CCP3CONbits	set	787
  3718  031A                     _CCP4CONbits	set	794
  3719  031E                     _CCP5CONbits	set	798
  3720  030C                     _TRISFbits	set	780
  3721  030D                     _TRISGbits	set	781
  3722  038C                     _LATFbits	set	908
  3723  038D                     _LATGbits	set	909
  3724  040C                     _ANSELFbits	set	1036
  3725  061A                     _CCPR9	set	1562
  3726  061F                     _CCP10CONbits	set	1567
  3727  0613                     _CCP6CONbits	set	1555
  3728  0616                     _CCP7CONbits	set	1558
  3729  0619                     _CCP8CONbits	set	1561
  3730  061C                     _CCP9CONbits	set	1564
  3731                           
  3732                           ; #config settings
  3733  0000                     
  3734                           	psect	cinit
  3735  0125                     start_initialization:	
  3736  0125                     __initialization:		;BIGRAM
  3737                           
  3738                           ; Clear objects allocated to COMMON
  3739  0125  01F9               	clrf	__pbssCOMMON& (0+127)
  3740  0126  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  3741  0127  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  3742  0128  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  3743                           
  3744                           ; Clear objects allocated to BANK1
  3745  0129  30C3               	movlw	low __pbssBANK1
  3746  012A  0084               	movwf	4
  3747  012B  3000               	movlw	high __pbssBANK1
  3748  012C  0085               	movwf	5
  3749  012D  301B               	movlw	27
  3750  012E  00FE               	movwf	btemp
  3751  012F  3000               	movlw	0
  3752  0130  00FF               	movwf	btemp+1
  3753  0131  319F  2717  3181   	fcall	clear_ram0
  3754                           
  3755                           ; Clear objects allocated to BANK2
  3756  0134  3020               	movlw	low __pbssBANK2
  3757  0135  0084               	movwf	4
  3758  0136  3001               	movlw	high __pbssBANK2
  3759  0137  0085               	movwf	5
  3760  0138  303A               	movlw	58
  3761  0139  00FE               	movwf	btemp
  3762  013A  3000               	movlw	0
  3763  013B  00FF               	movwf	btemp+1
  3764  013C  319F  2717  3181   	fcall	clear_ram0
  3765                           
  3766                           ; Clear objects allocated to BANK3
  3767  013F  30A0               	movlw	low __pbssBANK3
  3768  0140  0084               	movwf	4
  3769  0141  3001               	movlw	high __pbssBANK3
  3770  0142  0085               	movwf	5
  3771  0143  302C               	movlw	44
  3772  0144  00FE               	movwf	btemp
  3773  0145  3000               	movlw	0
  3774  0146  00FF               	movwf	btemp+1
  3775  0147  319F  2717  3181   	fcall	clear_ram0
  3776                           
  3777                           ; Clear objects allocated to BANK4
  3778  014A  3020               	movlw	low __pbssBANK4
  3779  014B  0084               	movwf	4
  3780  014C  3002               	movlw	high __pbssBANK4
  3781  014D  0085               	movwf	5
  3782  014E  3040               	movlw	64
  3783  014F  00FE               	movwf	btemp
  3784  0150  3000               	movlw	0
  3785  0151  00FF               	movwf	btemp+1
  3786  0152  319F  2717  3181   	fcall	clear_ram0
  3787                           
  3788                           ; Initialize objects allocated to BIGRAM
  3789  0155  30DE               	movlw	low __pidataBIGRAM
  3790  0156  0084               	movwf	4
  3791  0157  3081               	movlw	(high __pidataBIGRAM)| (0+128)
  3792  0158  0085               	movwf	5
  3793  0159  3078               	movlw	low (0+9080)
  3794  015A  0086               	movwf	6
  3795  015B  3023               	movlw	high (0+9080)
  3796  015C  0087               	movwf	7
  3797  015D  3002               	movlw	2
  3798  015E  00FF               	movwf	btemp+1
  3799  015F  3078               	movlw	120
  3800  0160  319F  270B  3181   	fcall	init_ram
  3801                           
  3802                           ; Initialize objects allocated to COMMON
  3803  0163  3180  2003  3181   	fcall	__pidataCOMMON	;fetch initializer
  3804  0166  00FD               	movwf	__pdataCOMMON& (0+127)
  3805                           
  3806                           ; Initialize objects allocated to BANK0
  3807  0167  3180  2002  3181   	fcall	__pidataBANK0	;fetch initializer
  3808  016A  00EF               	movwf	__pdataBANK0& (0+127)
  3809                           
  3810                           ; Initialize objects allocated to BANK1
  3811  016B  3044               	movlw	low __pidataBANK1
  3812  016C  0084               	movwf	4
  3813  016D  309F               	movlw	(high __pidataBANK1)| (0+128)
  3814  016E  0085               	movwf	5
  3815  016F  30DE               	movlw	low __pdataBANK1
  3816  0170  0086               	movwf	6
  3817  0171  3000               	movlw	high __pdataBANK1
  3818  0172  0087               	movwf	7
  3819  0173  3000               	movlw	0
  3820  0174  00FF               	movwf	btemp+1
  3821  0175  3012               	movlw	18
  3822  0176  319F  270B  3181   	fcall	init_ram
  3823                           
  3824                           ; Initialize objects allocated to BANK2
  3825  0179  3056               	movlw	low __pidataBANK2
  3826  017A  0084               	movwf	4
  3827  017B  309F               	movlw	(high __pidataBANK2)| (0+128)
  3828  017C  0085               	movwf	5
  3829  017D  305A               	movlw	low __pdataBANK2
  3830  017E  0086               	movwf	6
  3831  017F  3001               	movlw	high __pdataBANK2
  3832  0180  0087               	movwf	7
  3833  0181  3000               	movlw	0
  3834  0182  00FF               	movwf	btemp+1
  3835  0183  3013               	movlw	19
  3836  0184  319F  270B  3181   	fcall	init_ram
  3837                           
  3838                           ; Initialize objects allocated to BANK5
  3839  0187  3088               	movlw	low __pidataBANK5
  3840  0188  0084               	movwf	4
  3841  0189  3091               	movlw	(high __pidataBANK5)| (0+128)
  3842  018A  0085               	movwf	5
  3843  018B  30A0               	movlw	low __pdataBANK5
  3844  018C  0086               	movwf	6
  3845  018D  3002               	movlw	high __pdataBANK5
  3846  018E  0087               	movwf	7
  3847  018F  3000               	movlw	0
  3848  0190  00FF               	movwf	btemp+1
  3849  0191  303A               	movlw	58
  3850  0192  319F  270B  3181   	fcall	init_ram
  3851                           
  3852                           ; Initialize objects allocated to BANK6
  3853  0195  304E               	movlw	low __pidataBANK6
  3854  0196  0084               	movwf	4
  3855  0197  3091               	movlw	(high __pidataBANK6)| (0+128)
  3856  0198  0085               	movwf	5
  3857  0199  3020               	movlw	low __pdataBANK6
  3858  019A  0086               	movwf	6
  3859  019B  3003               	movlw	high __pdataBANK6
  3860  019C  0087               	movwf	7
  3861  019D  3000               	movlw	0
  3862  019E  00FF               	movwf	btemp+1
  3863  019F  303A               	movlw	58
  3864  01A0  319F  270B  3181   	fcall	init_ram
  3865                           
  3866                           ; Initialize objects allocated to BANK7
  3867  01A3  3014               	movlw	low __pidataBANK7
  3868  01A4  0084               	movwf	4
  3869  01A5  3091               	movlw	(high __pidataBANK7)| (0+128)
  3870  01A6  0085               	movwf	5
  3871  01A7  30A0               	movlw	low __pdataBANK7
  3872  01A8  0086               	movwf	6
  3873  01A9  3003               	movlw	high __pdataBANK7
  3874  01AA  0087               	movwf	7
  3875  01AB  3000               	movlw	0
  3876  01AC  00FF               	movwf	btemp+1
  3877  01AD  303A               	movlw	58
  3878  01AE  319F  270B  3181   	fcall	init_ram
  3879                           
  3880                           ; Initialize objects allocated to BANK8
  3881  01B1  302E               	movlw	low __pidataBANK8
  3882  01B2  0084               	movwf	4
  3883  01B3  3095               	movlw	(high __pidataBANK8)| (0+128)
  3884  01B4  0085               	movwf	5
  3885  01B5  3020               	movlw	low __pdataBANK8
  3886  01B6  0086               	movwf	6
  3887  01B7  3004               	movlw	high __pdataBANK8
  3888  01B8  0087               	movwf	7
  3889  01B9  3000               	movlw	0
  3890  01BA  00FF               	movwf	btemp+1
  3891  01BB  3050               	movlw	80
  3892  01BC  319F  270B  3181   	fcall	init_ram
  3893                           
  3894                           ; Initialize objects allocated to BANK9
  3895  01BF  30DE               	movlw	low __pidataBANK9
  3896  01C0  0084               	movwf	4
  3897  01C1  3094               	movlw	(high __pidataBANK9)| (0+128)
  3898  01C2  0085               	movwf	5
  3899  01C3  30A0               	movlw	low __pdataBANK9
  3900  01C4  0086               	movwf	6
  3901  01C5  3004               	movlw	high __pdataBANK9
  3902  01C6  0087               	movwf	7
  3903  01C7  3000               	movlw	0
  3904  01C8  00FF               	movwf	btemp+1
  3905  01C9  3050               	movlw	80
  3906  01CA  319F  270B  3181   	fcall	init_ram
  3907                           
  3908                           ; Initialize objects allocated to BANK10
  3909  01CD  30DA               	movlw	low __pidataBANK10
  3910  01CE  0084               	movwf	4
  3911  01CF  3090               	movlw	(high __pidataBANK10)| (0+128)
  3912  01D0  0085               	movwf	5
  3913  01D1  3020               	movlw	low __pdataBANK10
  3914  01D2  0086               	movwf	6
  3915  01D3  3005               	movlw	high __pdataBANK10
  3916  01D4  0087               	movwf	7
  3917  01D5  3000               	movlw	0
  3918  01D6  00FF               	movwf	btemp+1
  3919  01D7  303A               	movlw	58
  3920  01D8  319F  270B         	fcall	init_ram
  3921  01DA                     end_of_initialization:	
  3922                           ;End of C runtime variable initialization code
  3923                           
  3924  01DA                     __end_of__initialization:	
  3925  01DA  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3926  01DB  0020               	movlb	0
  3927  01DC  3189  2945         	ljmp	_main	;jump to C main() function
  3928                           
  3929                           	psect	bssCOMMON
  3930  0079                     __pbssCOMMON:	
  3931  0079                     _tap_timer:	
  3932  0079                     	ds	4
  3933                           
  3934                           	psect	dataCOMMON
  3935  007D                     __pdataCOMMON:	
  3936  007D                     _top_push_state:	
  3937  007D                     	ds	1
  3938                           
  3939                           	psect	dataBANK0
  3940  006F                     __pdataBANK0:	
  3941  006F                     _blink_rate:	
  3942  006F                     	ds	1
  3943                           
  3944                           	psect	bssBANK1
  3945  00C3                     __pbssBANK1:	
  3946  00C3                     _sub_timer:	
  3947  00C3                     	ds	4
  3948  00C7                     _timer:	
  3949  00C7                     	ds	4
  3950  00CB                     _knob_1_pos:	
  3951  00CB                     	ds	2
  3952  00CD                     _knob_2_pos:	
  3953  00CD                     	ds	2
  3954  00CF                     _knob_3_pos:	
  3955  00CF                     	ds	2
  3956  00D1                     _knob_4_pos:	
  3957  00D1                     	ds	2
  3958  00D3                     _mod_counter:	
  3959  00D3                     	ds	2
  3960  00D5                     _switchBypass_pressed:	
  3961  00D5                     	ds	2
  3962  00D7                     _switchTap_pressed:	
  3963  00D7                     	ds	2
  3964  00D9                     _iCnt:	
  3965  00D9                     	ds	1
  3966  00DA                     _mode1_state:	
  3967  00DA                     	ds	1
  3968  00DB                     _mode2_state:	
  3969  00DB                     	ds	1
  3970  00DC                     _preset_blink:	
  3971  00DC                     	ds	1
  3972  00DD                     _preset_programmning_on:	
  3973  00DD                     	ds	1
  3974                           
  3975                           	psect	dataBANK1
  3976  00DE                     __pdataBANK1:	
  3977  00DE                     _baseline_delay_time:	
  3978  00DE                     	ds	4
  3979  00E2                     _delay_time:	
  3980  00E2                     	ds	4
  3981  00E6                     _knob1_prev:	
  3982  00E6                     	ds	2
  3983  00E8                     _num_taps:	
  3984  00E8                     	ds	2
  3985  00EA                     _tap_iteration:	
  3986  00EA                     	ds	2
  3987  00EC                     _bottom_push_state:	
  3988  00EC                     	ds	1
  3989  00ED                     _suspend_blink:	
  3990  00ED                     	ds	1
  3991  00EE                     _switchBypass_state:	
  3992  00EE                     	ds	1
  3993  00EF                     _switchTap_state:	
  3994  00EF                     	ds	1
  3995                           
  3996                           	psect	bssBANK2
  3997  0120                     __pbssBANK2:	
  3998  0120                     _tap_history:	
  3999  0120                     	ds	20
  4000  0134                     _ledState:	
  4001  0134                     	ds	4
  4002  0138                     _mod_timer:	
  4003  0138                     	ds	4
  4004  013C                     _tap_total:	
  4005  013C                     	ds	4
  4006  0140                     wait_ms@timel:	
  4007  0140                     	ds	4
  4008  0144                     _SPI_Value:	
  4009  0144                     	ds	2
  4010  0146                     _debounce_bypass:	
  4011  0146                     	ds	2
  4012  0148                     _debounce_count:	
  4013  0148                     	ds	2
  4014  014A                     _debounce_mode1:	
  4015  014A                     	ds	2
  4016  014C                     _debounce_mode2:	
  4017  014C                     	ds	2
  4018  014E                     _delay_counter:	
  4019  014E                     	ds	2
  4020  0150                     _delayfound:	
  4021  0150                     	ds	2
  4022  0152                     _knob_5_pos:	
  4023  0152                     	ds	2
  4024  0154                     _mod_value:	
  4025  0154                     	ds	2
  4026  0156                     _switchBypass_toggle:	
  4027  0156                     	ds	2
  4028  0158                     _switchTap_toggle:	
  4029  0158                     	ds	2
  4030                           
  4031                           	psect	dataBANK2
  4032  015A                     __pdataBANK2:	
  4033  015A                     _blink_delay:	
  4034  015A                     	ds	2
  4035  015C                     _delay_time_changed:	
  4036  015C                     	ds	2
  4037  015E                     _knob2_prev:	
  4038  015E                     	ds	2
  4039  0160                     _knob3_prev:	
  4040  0160                     	ds	2
  4041  0162                     _knob4_prev:	
  4042  0162                     	ds	2
  4043  0164                     _knob5_prev:	
  4044  0164                     	ds	2
  4045  0166                     _mod_delay_time:	
  4046  0166                     	ds	2
  4047  0168                     _switchBypass_up:	
  4048  0168                     	ds	2
  4049  016A                     _switchTap_up:	
  4050  016A                     	ds	2
  4051  016C                     _blink_state:	
  4052  016C                     	ds	1
  4053                           
  4054                           	psect	bssBANK3
  4055  01A0                     __pbssBANK3:	
  4056  01A0                     _tap:	
  4057  01A0                     	ds	44
  4058                           
  4059                           	psect	bssBANK4
  4060  0220                     __pbssBANK4:	
  4061  0220                     _myBuf:	
  4062  0220                     	ds	64
  4063                           
  4064                           	psect	dataBANK5
  4065  02A0                     __pdataBANK5:	
  4066  02A0                     _mod2:	
  4067  02A0                     	ds	58
  4068                           
  4069                           	psect	dataBANK6
  4070  0320                     __pdataBANK6:	
  4071  0320                     _mod3:	
  4072  0320                     	ds	58
  4073                           
  4074                           	psect	dataBANK7
  4075  03A0                     __pdataBANK7:	
  4076  03A0                     _mod4:	
  4077  03A0                     	ds	58
  4078                           
  4079                           	psect	dataBANK8
  4080  0420                     __pdataBANK8:	
  4081  0420                     _B25k:	
  4082  0420                     	ds	80
  4083                           
  4084                           	psect	dataBANK9
  4085  04A0                     __pdataBANK9:	
  4086  04A0                     _iB25k:	
  4087  04A0                     	ds	80
  4088                           
  4089                           	psect	dataBANK10
  4090  0520                     __pdataBANK10:	
  4091  0520                     _mod1:	
  4092  0520                     	ds	58
  4093                           
  4094                           	psect	clrtext
  4095  1F17                     clear_ram0:	
  4096                           ;	Called with FSR0 containing the base address, and
  4097                           ;	btemp/btemp+1 has the size to clear
  4098                           
  4099  1F17  0064               	clrwdt	;clear the watchdog before getting into this loop
  4100  1F18                     clrloop0:	
  4101  1F18  0180               	clrf	0	;clear RAM location pointed to by FSR
  4102  1F19  3101               	addfsr 0,1
  4103  1F1A  3001               	movlw	1
  4104  1F1B  02FE               	subwf	126,f
  4105  1F1C  3000               	movlw	0
  4106  1F1D  3BFF               	subwfb	127,f
  4107  1F1E  087F               	movf	127,w
  4108  1F1F  047E               	iorwf	126,w
  4109  1F20  1903               	btfsc	3,2
  4110  1F21  3400               	retlw	0	;all done for this memory range, return
  4111  1F22  2F18               	goto	clrloop0	;have we reached the end yet?
  4112                           
  4113                           	psect	inittext
  4114  1F0B                     init_ram:	
  4115  1F0B  00FE               	movwf	126
  4116  1F0C                     initloop:	
  4117  1F0C  0012               	moviw fsr0++
  4118  1F0D  001E               	movwi fsr1++
  4119  1F0E  3001               	movlw	1
  4120  1F0F  02FE               	subwf	126,f
  4121  1F10  3000               	movlw	0
  4122  1F11  3BFF               	subwfb	127,f
  4123  1F12  087F               	movf	127,w
  4124  1F13  047E               	iorwf	126,w
  4125  1F14  1903               	btfsc	3,2
  4126  1F15  3400               	retlw	0
  4127  1F16  2F0C               	goto	initloop
  4128                           
  4129                           	psect	cstackBANK1
  4130  00A0                     __pcstackBANK1:	
  4131  00A0                     ___fttol@sign1:	
  4132                           
  4133                           ; 1 bytes @ 0x0
  4134  00A0                     	ds	1
  4135  00A1                     ___fttol@lval:	
  4136                           
  4137                           ; 4 bytes @ 0x1
  4138  00A1                     	ds	4
  4139  00A5                     ___fttol@exp1:	
  4140                           
  4141                           ; 1 bytes @ 0x5
  4142  00A5                     	ds	1
  4143  00A6                     ?_set_subdivision:	
  4144  00A6                     set_subdivision@x:	
  4145                           ; 2 bytes @ 0x6
  4146                           
  4147                           
  4148                           ; 2 bytes @ 0x6
  4149  00A6                     	ds	2
  4150  00A8                     set_subdivision@y:	
  4151                           
  4152                           ; 2 bytes @ 0x8
  4153  00A8                     	ds	2
  4154  00AA                     ??_main:	
  4155                           
  4156                           ; 1 bytes @ 0xA
  4157  00AA                     	ds	15
  4158  00B9                     main@i:	
  4159                           
  4160                           ; 2 bytes @ 0x19
  4161  00B9                     	ds	2
  4162  00BB                     main@tapCntDivisor:	
  4163                           
  4164                           ; 2 bytes @ 0x1B
  4165  00BB                     	ds	2
  4166  00BD                     main@adjusted_pot_value:	
  4167                           
  4168                           ; 2 bytes @ 0x1D
  4169  00BD                     	ds	2
  4170  00BF                     main@i_335:	
  4171                           
  4172                           ; 2 bytes @ 0x1F
  4173  00BF                     	ds	2
  4174  00C1                     main@i_336:	
  4175                           
  4176                           ; 2 bytes @ 0x21
  4177  00C1                     	ds	2
  4178                           
  4179                           	psect	cstackCOMMON
  4180  0070                     __pcstackCOMMON:	
  4181  0070                     ?_ConfigureOscillator:	
  4182  0070                     ?_InitApp:	
  4183                           ; 1 bytes @ 0x0
  4184                           
  4185  0070                     ?_InitializeTaps:	
  4186                           ; 1 bytes @ 0x0
  4187                           
  4188  0070                     ?_initSwitchBypass:	
  4189                           ; 1 bytes @ 0x0
  4190                           
  4191  0070                     ?_ReadSavedSettings:	
  4192                           ; 1 bytes @ 0x0
  4193                           
  4194  0070                     ?_read_bottom_tactile:	
  4195                           ; 1 bytes @ 0x0
  4196                           
  4197  0070                     ?_read_top_tactile:	
  4198                           ; 1 bytes @ 0x0
  4199                           
  4200  0070                     ?_update_mode:	
  4201                           ; 1 bytes @ 0x0
  4202                           
  4203  0070                     ?_showBootSequence:	
  4204                           ; 1 bytes @ 0x0
  4205                           
  4206  0070                     ?_updateSwitchBypass:	
  4207                           ; 1 bytes @ 0x0
  4208                           
  4209  0070                     ?_init_adc:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_init_pwm:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_init_timer2:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ?_init_timer0:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_getCurrentLEDState:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_star_tactiles:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_solidring_tactiles:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ?_restoreLEDState:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_isr:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ?_main:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?i1_set_leds_top:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     i1set_leds_top@x:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245                           
  4246                           ; 2 bytes @ 0x0
  4247  0070                     	ds	2
  4248  0072                     i1set_leds_top@ledState:	
  4249                           
  4250                           ; 2 bytes @ 0x2
  4251  0072                     	ds	2
  4252  0074                     ??_isr:	
  4253  0074                     ??i1_set_leds_top:	
  4254                           ; 1 bytes @ 0x4
  4255                           
  4256                           
  4257                           ; 1 bytes @ 0x4
  4258  0074                     	ds	5
  4259                           
  4260                           	psect	cstackBANK0
  4261  0020                     __pcstackBANK0:	
  4262  0020                     ?_set_leds_top:	
  4263  0020                     ??_ConfigureOscillator:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0020                     ??_InitApp:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0020                     ??_InitializeTaps:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0020                     ??_update_mode:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0020                     ??_init_adc:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0020                     ??_init_pwm:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0020                     ??_init_timer2:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0020                     ??_init_timer0:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0020                     ?_set_leds_bottom:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0020                     ?_FLASH_EraseBlock:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0020                     ??_getCurrentLEDState:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0020                     ??_restoreLEDState:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0020                     ?_updateSwitchBypassState:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0020                     ?_adc_convert:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0020                     ?_FLASH_ReadWord:	
  4306                           ; 2 bytes @ 0x0
  4307                           
  4308  0020                     ?_getSwitchBypassState:	
  4309                           ; 2 bytes @ 0x0
  4310                           
  4311  0020                     ?___wmul:	
  4312                           ; 2 bytes @ 0x0
  4313                           
  4314  0020                     ?___awdiv:	
  4315                           ; 2 bytes @ 0x0
  4316                           
  4317  0020                     ?___ftpack:	
  4318                           ; 2 bytes @ 0x0
  4319                           
  4320  0020                     ?___ftneg:	
  4321                           ; 3 bytes @ 0x0
  4322                           
  4323  0020                     ?___lmul:	
  4324                           ; 3 bytes @ 0x0
  4325                           
  4326  0020                     FLASH_ReadWord@flashAddr:	
  4327                           ; 4 bytes @ 0x0
  4328                           
  4329  0020                     FLASH_EraseBlock@startAddr:	
  4330                           ; 2 bytes @ 0x0
  4331                           
  4332  0020                     set_leds_top@x:	
  4333                           ; 2 bytes @ 0x0
  4334                           
  4335  0020                     set_leds_bottom@x:	
  4336                           ; 2 bytes @ 0x0
  4337                           
  4338  0020                     updateSwitchBypassState@state:	
  4339                           ; 2 bytes @ 0x0
  4340                           
  4341  0020                     ___wmul@multiplier:	
  4342                           ; 2 bytes @ 0x0
  4343                           
  4344  0020                     ___awdiv@divisor:	
  4345                           ; 2 bytes @ 0x0
  4346                           
  4347  0020                     ___ftpack@arg:	
  4348                           ; 2 bytes @ 0x0
  4349                           
  4350  0020                     ___ftneg@f1:	
  4351                           ; 3 bytes @ 0x0
  4352                           
  4353  0020                     ___lmul@multiplier:	
  4354                           ; 3 bytes @ 0x0
  4355                           
  4356                           
  4357                           ; 4 bytes @ 0x0
  4358  0020                     	ds	1
  4359  0021                     InitializeTaps@itap:	
  4360                           
  4361                           ; 2 bytes @ 0x1
  4362  0021                     	ds	1
  4363  0022                     ??_adc_convert:	
  4364  0022                     ??_FLASH_ReadWord:	
  4365                           ; 1 bytes @ 0x2
  4366                           
  4367  0022                     ??_set_leds_bottom:	
  4368                           ; 1 bytes @ 0x2
  4369                           
  4370  0022                     ??_FLASH_EraseBlock:	
  4371                           ; 1 bytes @ 0x2
  4372                           
  4373  0022                     ??_updateSwitchBypassState:	
  4374                           ; 1 bytes @ 0x2
  4375                           
  4376  0022                     ??_getSwitchBypassState:	
  4377                           ; 1 bytes @ 0x2
  4378                           
  4379  0022                     FLASH_ReadWord@GIEBitValue:	
  4380                           ; 1 bytes @ 0x2
  4381                           
  4382  0022                     FLASH_EraseBlock@GIEBitValue:	
  4383                           ; 1 bytes @ 0x2
  4384                           
  4385  0022                     set_leds_top@ledState:	
  4386                           ; 1 bytes @ 0x2
  4387                           
  4388  0022                     ___wmul@multiplicand:	
  4389                           ; 2 bytes @ 0x2
  4390                           
  4391  0022                     ___awdiv@dividend:	
  4392                           ; 2 bytes @ 0x2
  4393                           
  4394                           
  4395                           ; 2 bytes @ 0x2
  4396  0022                     	ds	1
  4397  0023                     ?_FLASH_WriteBlock:	
  4398  0023                     ??___ftneg:	
  4399                           ; 1 bytes @ 0x3
  4400                           
  4401  0023                     adc_convert@channel:	
  4402                           ; 1 bytes @ 0x3
  4403                           
  4404  0023                     ___ftpack@exp:	
  4405                           ; 1 bytes @ 0x3
  4406                           
  4407  0023                     FLASH_WriteBlock@writeAddr:	
  4408                           ; 1 bytes @ 0x3
  4409                           
  4410                           
  4411                           ; 2 bytes @ 0x3
  4412  0023                     	ds	1
  4413  0024                     ??_set_leds_top:	
  4414  0024                     ??_ReadSavedSettings:	
  4415                           ; 1 bytes @ 0x4
  4416                           
  4417  0024                     ??___wmul:	
  4418                           ; 1 bytes @ 0x4
  4419                           
  4420  0024                     ??___awdiv:	
  4421                           ; 1 bytes @ 0x4
  4422                           
  4423  0024                     ___ftpack@sign:	
  4424                           ; 1 bytes @ 0x4
  4425                           
  4426  0024                     ___wmul@product:	
  4427                           ; 1 bytes @ 0x4
  4428                           
  4429  0024                     ___lmul@multiplicand:	
  4430                           ; 2 bytes @ 0x4
  4431                           
  4432                           
  4433                           ; 4 bytes @ 0x4
  4434  0024                     	ds	1
  4435  0025                     ??___ftpack:	
  4436  0025                     FLASH_WriteBlock@flashWordArray:	
  4437                           ; 1 bytes @ 0x5
  4438                           
  4439  0025                     ___awdiv@counter:	
  4440                           ; 1 bytes @ 0x5
  4441                           
  4442                           
  4443                           ; 1 bytes @ 0x5
  4444  0025                     	ds	1
  4445  0026                     ??_FLASH_WriteBlock:	
  4446  0026                     ?___aldiv:	
  4447                           ; 1 bytes @ 0x6
  4448                           
  4449  0026                     ___awdiv@sign:	
  4450                           ; 4 bytes @ 0x6
  4451                           
  4452  0026                     ___aldiv@divisor:	
  4453                           ; 1 bytes @ 0x6
  4454                           
  4455                           
  4456                           ; 4 bytes @ 0x6
  4457  0026                     	ds	1
  4458  0027                     ___awdiv@quotient:	
  4459                           
  4460                           ; 2 bytes @ 0x7
  4461  0027                     	ds	1
  4462  0028                     ??___lmul:	
  4463  0028                     ?___altoft:	
  4464                           ; 1 bytes @ 0x8
  4465                           
  4466  0028                     ?___awtoft:	
  4467                           ; 3 bytes @ 0x8
  4468                           
  4469  0028                     ?___ftadd:	
  4470                           ; 3 bytes @ 0x8
  4471                           
  4472  0028                     ___awtoft@c:	
  4473                           ; 3 bytes @ 0x8
  4474                           
  4475  0028                     ___ftadd@f1:	
  4476                           ; 2 bytes @ 0x8
  4477                           
  4478  0028                     ___lmul@product:	
  4479                           ; 3 bytes @ 0x8
  4480                           
  4481  0028                     ___altoft@c:	
  4482                           ; 4 bytes @ 0x8
  4483                           
  4484                           
  4485                           ; 4 bytes @ 0x8
  4486  0028                     	ds	1
  4487  0029                     FLASH_WriteBlock@blockStartAddr:	
  4488                           
  4489                           ; 2 bytes @ 0x9
  4490  0029                     	ds	1
  4491  002A                     ___aldiv@dividend:	
  4492                           
  4493                           ; 4 bytes @ 0xA
  4494  002A                     	ds	1
  4495  002B                     ??___awtoft:	
  4496  002B                     FLASH_WriteBlock@GIEBitValue:	
  4497                           ; 1 bytes @ 0xB
  4498                           
  4499  002B                     ___ftadd@f2:	
  4500                           ; 1 bytes @ 0xB
  4501                           
  4502                           
  4503                           ; 3 bytes @ 0xB
  4504  002B                     	ds	1
  4505  002C                     ?_wait_ms:	
  4506  002C                     ??___altoft:	
  4507                           ; 1 bytes @ 0xC
  4508                           
  4509  002C                     FLASH_WriteBlock@i:	
  4510                           ; 1 bytes @ 0xC
  4511                           
  4512  002C                     wait_ms@time:	
  4513                           ; 1 bytes @ 0xC
  4514                           
  4515                           
  4516                           ; 2 bytes @ 0xC
  4517  002C                     	ds	1
  4518  002D                     ?_FLASH_WriteWord:	
  4519  002D                     ___awtoft@sign:	
  4520                           ; 1 bytes @ 0xD
  4521                           
  4522  002D                     FLASH_WriteWord@flashAddr:	
  4523                           ; 1 bytes @ 0xD
  4524                           
  4525                           
  4526                           ; 2 bytes @ 0xD
  4527  002D                     	ds	1
  4528  002E                     ??_star_tactiles:	
  4529  002E                     ??_solidring_tactiles:	
  4530                           ; 1 bytes @ 0xE
  4531                           
  4532  002E                     ?_setSwitchBypassState:	
  4533                           ; 1 bytes @ 0xE
  4534                           
  4535  002E                     ??_wait_ms:	
  4536                           ; 1 bytes @ 0xE
  4537                           
  4538  002E                     ??___aldiv:	
  4539                           ; 1 bytes @ 0xE
  4540                           
  4541  002E                     ??___ftadd:	
  4542                           ; 1 bytes @ 0xE
  4543                           
  4544  002E                     ___altoft@exp:	
  4545                           ; 1 bytes @ 0xE
  4546                           
  4547  002E                     setSwitchBypassState@f_state:	
  4548                           ; 1 bytes @ 0xE
  4549                           
  4550                           
  4551                           ; 2 bytes @ 0xE
  4552  002E                     	ds	1
  4553  002F                     FLASH_WriteWord@ramBuf:	
  4554  002F                     ___aldiv@counter:	
  4555                           ; 1 bytes @ 0xF
  4556                           
  4557  002F                     ___altoft@sign:	
  4558                           ; 1 bytes @ 0xF
  4559                           
  4560                           
  4561                           ; 1 bytes @ 0xF
  4562  002F                     	ds	1
  4563  0030                     ??_setSwitchBypassState:	
  4564  0030                     star_tactiles@reverse:	
  4565                           ; 1 bytes @ 0x10
  4566                           
  4567  0030                     solidring_tactiles@ring_delay:	
  4568                           ; 1 bytes @ 0x10
  4569                           
  4570  0030                     ___aldiv@sign:	
  4571                           ; 1 bytes @ 0x10
  4572                           
  4573  0030                     FLASH_WriteWord@word:	
  4574                           ; 1 bytes @ 0x10
  4575                           
  4576                           
  4577                           ; 2 bytes @ 0x10
  4578  0030                     	ds	1
  4579  0031                     star_tactiles@iLed:	
  4580  0031                     ___aldiv@quotient:	
  4581                           ; 2 bytes @ 0x11
  4582                           
  4583                           
  4584                           ; 4 bytes @ 0x11
  4585  0031                     	ds	1
  4586  0032                     ??_initSwitchBypass:	
  4587  0032                     ??_updateSwitchBypass:	
  4588                           ; 1 bytes @ 0x12
  4589                           
  4590  0032                     ??_FLASH_WriteWord:	
  4591                           ; 1 bytes @ 0x12
  4592                           
  4593  0032                     ___ftadd@sign:	
  4594                           ; 1 bytes @ 0x12
  4595                           
  4596  0032                     initSwitchBypass@initState:	
  4597                           ; 1 bytes @ 0x12
  4598                           
  4599                           
  4600                           ; 2 bytes @ 0x12
  4601  0032                     	ds	1
  4602  0033                     FLASH_WriteWord@offset:	
  4603  0033                     ___ftadd@exp2:	
  4604                           ; 1 bytes @ 0x13
  4605                           
  4606  0033                     star_tactiles@iLed_1375:	
  4607                           ; 1 bytes @ 0x13
  4608                           
  4609                           
  4610                           ; 2 bytes @ 0x13
  4611  0033                     	ds	1
  4612  0034                     ___ftadd@exp1:	
  4613  0034                     FLASH_WriteWord@blockStartAddr:	
  4614                           ; 1 bytes @ 0x14
  4615                           
  4616                           
  4617                           ; 2 bytes @ 0x14
  4618  0034                     	ds	1
  4619  0035                     ??_showBootSequence:	
  4620  0035                     ?_modulation:	
  4621                           ; 1 bytes @ 0x15
  4622                           
  4623  0035                     ?___ftmul:	
  4624                           ; 2 bytes @ 0x15
  4625                           
  4626  0035                     modulation@x:	
  4627                           ; 3 bytes @ 0x15
  4628                           
  4629  0035                     ___ftmul@f1:	
  4630                           ; 2 bytes @ 0x15
  4631                           
  4632                           
  4633                           ; 3 bytes @ 0x15
  4634  0035                     	ds	1
  4635  0036                     FLASH_WriteWord@i:	
  4636                           
  4637                           ; 1 bytes @ 0x16
  4638  0036                     	ds	1
  4639  0037                     ??_read_bottom_tactile:	
  4640  0037                     ??_read_top_tactile:	
  4641                           ; 1 bytes @ 0x17
  4642                           
  4643  0037                     modulation@y:	
  4644                           ; 1 bytes @ 0x17
  4645                           
  4646                           
  4647                           ; 2 bytes @ 0x17
  4648  0037                     	ds	1
  4649  0038                     ___ftmul@f2:	
  4650                           
  4651                           ; 3 bytes @ 0x18
  4652  0038                     	ds	1
  4653  0039                     ??_modulation:	
  4654                           
  4655                           ; 1 bytes @ 0x19
  4656  0039                     	ds	2
  4657  003B                     ??___ftmul:	
  4658                           
  4659                           ; 1 bytes @ 0x1B
  4660  003B                     	ds	4
  4661  003F                     ___ftmul@exp:	
  4662                           
  4663                           ; 1 bytes @ 0x1F
  4664  003F                     	ds	1
  4665  0040                     ___ftmul@f3_as_product:	
  4666                           
  4667                           ; 3 bytes @ 0x20
  4668  0040                     	ds	3
  4669  0043                     ___ftmul@cntr:	
  4670                           
  4671                           ; 1 bytes @ 0x23
  4672  0043                     	ds	1
  4673  0044                     ___ftmul@sign:	
  4674                           
  4675                           ; 1 bytes @ 0x24
  4676  0044                     	ds	1
  4677  0045                     ?___ftdiv:	
  4678  0045                     ___ftdiv@f2:	
  4679                           ; 3 bytes @ 0x25
  4680                           
  4681                           
  4682                           ; 3 bytes @ 0x25
  4683  0045                     	ds	3
  4684  0048                     ___ftdiv@f1:	
  4685                           
  4686                           ; 3 bytes @ 0x28
  4687  0048                     	ds	3
  4688  004B                     ??___ftdiv:	
  4689                           
  4690                           ; 1 bytes @ 0x2B
  4691  004B                     	ds	4
  4692  004F                     ___ftdiv@cntr:	
  4693                           
  4694                           ; 1 bytes @ 0x2F
  4695  004F                     	ds	1
  4696  0050                     ___ftdiv@f3:	
  4697                           
  4698                           ; 3 bytes @ 0x30
  4699  0050                     	ds	3
  4700  0053                     ___ftdiv@exp:	
  4701                           
  4702                           ; 1 bytes @ 0x33
  4703  0053                     	ds	1
  4704  0054                     ___ftdiv@sign:	
  4705                           
  4706                           ; 1 bytes @ 0x34
  4707  0054                     	ds	1
  4708  0055                     ?_map:	
  4709  0055                     map@x:	
  4710                           ; 3 bytes @ 0x35
  4711                           
  4712                           
  4713                           ; 3 bytes @ 0x35
  4714  0055                     	ds	3
  4715  0058                     map@in_min:	
  4716                           
  4717                           ; 3 bytes @ 0x38
  4718  0058                     	ds	3
  4719  005B                     map@in_max:	
  4720                           
  4721                           ; 3 bytes @ 0x3B
  4722  005B                     	ds	3
  4723  005E                     map@out_min:	
  4724                           
  4725                           ; 3 bytes @ 0x3E
  4726  005E                     	ds	3
  4727  0061                     map@out_max:	
  4728                           
  4729                           ; 3 bytes @ 0x41
  4730  0061                     	ds	3
  4731  0064                     ??_map:	
  4732  0064                     _map$1955:	
  4733                           ; 1 bytes @ 0x44
  4734                           
  4735                           
  4736                           ; 3 bytes @ 0x44
  4737  0064                     	ds	3
  4738  0067                     ?___fttol:	
  4739  0067                     ___fttol@f1:	
  4740                           ; 4 bytes @ 0x47
  4741                           
  4742                           
  4743                           ; 3 bytes @ 0x47
  4744  0067                     	ds	4
  4745  006B                     ??___fttol:	
  4746                           
  4747                           ; 1 bytes @ 0x4B
  4748  006B                     	ds	4
  4749  006F                     ??_set_subdivision:	
  4750                           
  4751                           	psect	maintext
  4752  0945                     __pmaintext:	
  4753                           ; 1 bytes @ 0x4F
  4754 ;;
  4755 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4756 ;;
  4757 ;; *************** function _main *****************
  4758 ;; Defined at:
  4759 ;;		line 82 in file "main.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;		None
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  tapCntDiviso    2   27[BANK1 ] int 
  4764 ;;  adjusted_pot    2   29[BANK1 ] int 
  4765 ;;  i               2   33[BANK1 ] int 
  4766 ;;  i               2   31[BANK1 ] int 
  4767 ;;  i               2   25[BANK1 ] int 
  4768 ;; Return value:  Size  Location     Type
  4769 ;;                  1    wreg      void 
  4770 ;; Registers used:
  4771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4772 ;; Tracked objects:
  4773 ;;		On entry : B1F/0
  4774 ;;		On exit  : 0/0
  4775 ;;		Unchanged: 0/0
  4776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4778 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4779 ;;      Temps:          0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4780 ;;      Totals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4781 ;;Total ram usage:       25 bytes
  4782 ;; Hardware stack levels required when called:    6
  4783 ;; This function calls:
  4784 ;;		_ConfigureOscillator
  4785 ;;		_InitApp
  4786 ;;		_InitializeTaps
  4787 ;;		_ReadSavedSettings
  4788 ;;		___aldiv
  4789 ;;		___altoft
  4790 ;;		___awdiv
  4791 ;;		___awtoft
  4792 ;;		___ftdiv
  4793 ;;		___fttol
  4794 ;;		_adc_convert
  4795 ;;		_initSwitchBypass
  4796 ;;		_map
  4797 ;;		_modulation
  4798 ;;		_read_bottom_tactile
  4799 ;;		_read_top_tactile
  4800 ;;		_set_subdivision
  4801 ;;		_showBootSequence
  4802 ;;		_updateSwitchBypass
  4803 ;;		_update_mode
  4804 ;; This function is called by:
  4805 ;;		Startup code after reset
  4806 ;; This function uses a non-reentrant model
  4807 ;;
  4808                           
  4809                           
  4810                           ;psect for function _main
  4811  0945                     _main:	
  4812                           
  4813                           ;main.c: 83: ConfigureOscillator();
  4814                           
  4815                           ;incstack = 0
  4816                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4817  0945  319E  26EA  3189   	fcall	_ConfigureOscillator
  4818                           
  4819                           ;main.c: 84: InitApp();
  4820  0948  3190  2049  3189   	fcall	_InitApp
  4821                           
  4822                           ;main.c: 87: InitializeTaps();
  4823  094B  3190  2023  3189   	fcall	_InitializeTaps
  4824                           
  4825                           ;main.c: 88: initSwitchBypass();
  4826  094E  319F  2723  3189   	fcall	_initSwitchBypass
  4827                           
  4828                           ;main.c: 91: ReadSavedSettings();
  4829  0951  3194  2493  3189   	fcall	_ReadSavedSettings
  4830  0954                     l3724:	
  4831                           ;main.c: 93: while (1) {
  4832                           
  4833                           
  4834                           ;main.c: 95: read_bottom_tactile();
  4835  0954  3192  2278  3189   	fcall	_read_bottom_tactile
  4836                           
  4837                           ;main.c: 96: read_top_tactile();
  4838  0957  3192  22B7  3189   	fcall	_read_top_tactile
  4839                           
  4840                           ;main.c: 99: update_mode();
  4841  095A  3193  23BD  3189   	fcall	_update_mode
  4842                           
  4843                           ;main.c: 101: if (PORTDbits.RD7 == 0) {
  4844  095D  0020               	movlb	0	; select bank0
  4845  095E  1B8F               	btfsc	15,7	;volatile
  4846  095F  297E               	goto	l3738
  4847                           
  4848                           ;main.c: 102: debounce_mode1++;
  4849  0960  3001               	movlw	1
  4850  0961  0022               	movlb	2	; select bank2
  4851  0962  07CA               	addwf	_debounce_mode1^(0+256),f
  4852  0963  3000               	movlw	0
  4853  0964  3DCB               	addwfc	(_debounce_mode1+1)^(0+256),f
  4854                           
  4855                           ;main.c: 103: if (debounce_mode1 > 25) {
  4856  0965  084B               	movf	(_debounce_mode1+1)^(0+256),w
  4857  0966  3A80               	xorlw	128
  4858  0967  0021               	movlb	1	; select bank1
  4859  0968  00AA               	movwf	??_main^(0+128)
  4860  0969  3080               	movlw	128
  4861  096A  022A               	subwf	??_main^(0+128),w
  4862  096B  1D03               	skipz
  4863  096C  2970               	goto	u3695
  4864  096D  301A               	movlw	26
  4865  096E  0022               	movlb	2	; select bank2
  4866  096F  024A               	subwf	_debounce_mode1^(0+256),w
  4867  0970                     u3695:	
  4868  0970  1C03               	skipc
  4869  0971  2981               	goto	l3740
  4870                           
  4871                           ;main.c: 104: debounce_mode1 = 25;
  4872  0972  3019               	movlw	25
  4873  0973  0022               	movlb	2	; select bank2
  4874  0974  00CA               	movwf	_debounce_mode1^(0+256)
  4875  0975  3000               	movlw	0
  4876  0976  00CB               	movwf	(_debounce_mode1^(0+256)+1)
  4877                           
  4878                           ;main.c: 108: showBootSequence();
  4879  0977  319F  27DB  3189   	fcall	_showBootSequence
  4880  097A                     l244:	
  4881                           ;main.c: 111: while (PORTDbits.RD7 == 0) {
  4882                           
  4883  097A  0020               	movlb	0	; select bank0
  4884  097B  1B8F               	btfsc	15,7	;volatile
  4885  097C  2981               	goto	l3740
  4886  097D  297A               	goto	l244
  4887  097E                     l3738:	
  4888                           ;main.c: 112: }
  4889                           ;main.c: 113: }
  4890                           ;main.c: 114: } else {
  4891                           
  4892                           
  4893                           ;main.c: 115: debounce_mode1 = 0;
  4894  097E  0022               	movlb	2	; select bank2
  4895  097F  01CA               	clrf	_debounce_mode1^(0+256)
  4896  0980  01CB               	clrf	(_debounce_mode1+1)^(0+256)
  4897  0981                     l3740:	
  4898                           
  4899                           ;main.c: 116: }
  4900                           ;main.c: 118: updateSwitchBypass();
  4901  0981  3197  270F  3189   	fcall	_updateSwitchBypass
  4902                           
  4903                           ;main.c: 157: if (PORTEbits.RE0 == 0) {
  4904  0984  0020               	movlb	0	; select bank0
  4905  0985  1810               	btfsc	16,0	;volatile
  4906  0986  2B0B               	goto	l3796
  4907                           
  4908                           ;main.c: 158: debounce_count++;
  4909  0987  3001               	movlw	1
  4910  0988  0022               	movlb	2	; select bank2
  4911  0989  07C8               	addwf	_debounce_count^(0+256),f
  4912  098A  3000               	movlw	0
  4913  098B  3DC9               	addwfc	(_debounce_count+1)^(0+256),f
  4914                           
  4915                           ;main.c: 159: if (debounce_count > 25) {
  4916  098C  0849               	movf	(_debounce_count+1)^(0+256),w
  4917  098D  3A80               	xorlw	128
  4918  098E  0021               	movlb	1	; select bank1
  4919  098F  00AA               	movwf	??_main^(0+128)
  4920  0990  3080               	movlw	128
  4921  0991  022A               	subwf	??_main^(0+128),w
  4922  0992  1D03               	skipz
  4923  0993  2997               	goto	u3725
  4924  0994  301A               	movlw	26
  4925  0995  0022               	movlb	2	; select bank2
  4926  0996  0248               	subwf	_debounce_count^(0+256),w
  4927  0997                     u3725:	
  4928  0997  1C03               	skipc
  4929  0998  2B0E               	goto	l3798
  4930                           
  4931                           ;main.c: 160: if (tap_timer >= 1563) {
  4932  0999  1BFC               	btfsc	_tap_timer+3,7	;volatile
  4933  099A  29E9               	goto	l3760
  4934  099B  087C               	movf	_tap_timer+3,w	;volatile
  4935  099C  1D03               	btfss	3,2
  4936  099D  29A7               	goto	l3748
  4937  099E  087B               	movf	_tap_timer+2,w	;volatile
  4938  099F  1D03               	btfss	3,2
  4939  09A0  29A7               	goto	l3748
  4940  09A1  301B               	movlw	27
  4941  09A2  0279               	subwf	_tap_timer,w	;volatile
  4942  09A3  3006               	movlw	6
  4943  09A4  3B7A               	subwfb	_tap_timer+1,w	;volatile
  4944  09A5  1C03               	btfss	3,0
  4945  09A6  29E9               	goto	l3760
  4946  09A7                     l3748:	
  4947                           
  4948                           ;main.c: 161: tap_timer = 0;
  4949  09A7  3000               	movlw	0
  4950  09A8  00FC               	movwf	_tap_timer+3	;volatile
  4951  09A9  3000               	movlw	0
  4952  09AA  00FB               	movwf	_tap_timer+2	;volatile
  4953  09AB  3000               	movlw	0
  4954  09AC  00FA               	movwf	_tap_timer+1	;volatile
  4955  09AD  3000               	movlw	0
  4956  09AE  00F9               	movwf	_tap_timer	;volatile
  4957                           
  4958                           ;main.c: 162: tap_iteration = 1;
  4959  09AF  3001               	movlw	1
  4960  09B0  0021               	movlb	1	; select bank1
  4961  09B1  00EA               	movwf	_tap_iteration^(0+128)
  4962  09B2  3000               	movlw	0
  4963  09B3  00EB               	movwf	(_tap_iteration^(0+128)+1)
  4964                           
  4965                           ;main.c: 163: tap_total = 0;
  4966  09B4  3000               	movlw	0
  4967  09B5  0022               	movlb	2	; select bank2
  4968  09B6  00BF               	movwf	(_tap_total+3)^(0+256)
  4969  09B7  3000               	movlw	0
  4970  09B8  00BE               	movwf	(_tap_total+2)^(0+256)
  4971  09B9  3000               	movlw	0
  4972  09BA  00BD               	movwf	(_tap_total+1)^(0+256)
  4973  09BB  3000               	movlw	0
  4974  09BC  00BC               	movwf	_tap_total^(0+256)
  4975                           
  4976                           ;main.c: 164: delay_time_changed = 0;
  4977  09BD  01DC               	clrf	_delay_time_changed^(0+256)
  4978  09BE  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  4979                           
  4980                           ;main.c: 167: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  4981  09BF  0021               	movlb	1	; select bank1
  4982  09C0  01D9               	clrf	_iCnt^(0+128)
  4983  09C1  0AD9               	incf	_iCnt^(0+128),f
  4984  09C2                     l3758:	
  4985  09C2  0869               	movf	(_num_taps+1)^(0+128),w
  4986  09C3  3A80               	xorlw	128
  4987  09C4  00AA               	movwf	??_main^(0+128)
  4988  09C5  3080               	movlw	128
  4989  09C6  022A               	subwf	??_main^(0+128),w
  4990  09C7  1D03               	skipz
  4991  09C8  29CB               	goto	u3755
  4992  09C9  0859               	movf	_iCnt^(0+128),w
  4993  09CA  0268               	subwf	_num_taps^(0+128),w
  4994  09CB                     u3755:	
  4995  09CB  1C03               	btfss	3,0
  4996  09CC  29E5               	goto	l254
  4997                           
  4998                           ;main.c: 168: tap_history[iCnt] = 0;
  4999  09CD  0021               	movlb	1	; select bank1
  5000  09CE  0859               	movf	_iCnt^(0+128),w
  5001  09CF  00AA               	movwf	??_main^(0+128)
  5002  09D0  3001               	movlw	1
  5003  09D1                     u3745:	
  5004  09D1  35AA               	lslf	??_main^(0+128),f
  5005  09D2  3EFF               	addlw	-1
  5006  09D3  1D03               	skipz
  5007  09D4  29D1               	goto	u3745
  5008  09D5  352A               	lslf	??_main^(0+128),w
  5009  09D6  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5010  09D7  0086               	movwf	6
  5011  09D8  3001               	movlw	1	; select bank2/3
  5012  09D9  0087               	movwf	7
  5013  09DA  3000               	movlw	0
  5014  09DB  3FC0               	movwi [0]fsr1
  5015  09DC  3000               	movlw	0
  5016  09DD  3FC1               	movwi [1]fsr1
  5017  09DE  3FC2               	movwi [2]fsr1
  5018  09DF  3FC3               	movwi [3]fsr1
  5019  09E0  3001               	movlw	1
  5020  09E1  00AA               	movwf	??_main^(0+128)
  5021  09E2  082A               	movf	??_main^(0+128),w
  5022  09E3  07D9               	addwf	_iCnt^(0+128),f
  5023  09E4  29C2               	goto	l3758
  5024  09E5                     l254:	
  5025                           ;main.c: 169: }
  5026                           ;main.c: 170: while (PORTEbits.RE0 == 0) {
  5027                           
  5028  09E5  0020               	movlb	0	; select bank0
  5029  09E6  1810               	btfsc	16,0	;volatile
  5030  09E7  2B0E               	goto	l3798
  5031  09E8  29E5               	goto	l254
  5032  09E9                     l3760:	
  5033                           ;main.c: 171: }
  5034                           ;main.c: 172: } else if (tap_timer < 1563) {
  5035                           
  5036  09E9  1BFC               	btfsc	_tap_timer+3,7	;volatile
  5037  09EA  29F7               	goto	l3762
  5038  09EB  087C               	movf	_tap_timer+3,w	;volatile
  5039  09EC  1D03               	btfss	3,2
  5040  09ED  2B0E               	goto	l3798
  5041  09EE  087B               	movf	_tap_timer+2,w	;volatile
  5042  09EF  1D03               	btfss	3,2
  5043  09F0  2B0E               	goto	l3798
  5044  09F1  301B               	movlw	27
  5045  09F2  0279               	subwf	_tap_timer,w	;volatile
  5046  09F3  3006               	movlw	6
  5047  09F4  3B7A               	subwfb	_tap_timer+1,w	;volatile
  5048  09F5  1803               	btfsc	3,0
  5049  09F6  2B0E               	goto	l3798
  5050  09F7                     l3762:	
  5051                           
  5052                           ;main.c: 173: if (tap_iteration <= 4) {
  5053  09F7  0021               	movlb	1	; select bank1
  5054  09F8  086B               	movf	(_tap_iteration+1)^(0+128),w
  5055  09F9  3A80               	xorlw	128
  5056  09FA  00AA               	movwf	??_main^(0+128)
  5057  09FB  3080               	movlw	128
  5058  09FC  022A               	subwf	??_main^(0+128),w
  5059  09FD  1D03               	skipz
  5060  09FE  2A01               	goto	u3785
  5061  09FF  3005               	movlw	5
  5062  0A00  026A               	subwf	_tap_iteration^(0+128),w
  5063  0A01                     u3785:	
  5064  0A01  1803               	skipnc
  5065  0A02  2B07               	goto	l266
  5066                           
  5067                           ;main.c: 174: if (tap_timer >= 1172) {
  5068  0A03  1BFC               	btfsc	_tap_timer+3,7	;volatile
  5069  0A04  2A19               	goto	l260
  5070  0A05  087C               	movf	_tap_timer+3,w	;volatile
  5071  0A06  1D03               	btfss	3,2
  5072  0A07  2A11               	goto	l3766
  5073  0A08  087B               	movf	_tap_timer+2,w	;volatile
  5074  0A09  1D03               	btfss	3,2
  5075  0A0A  2A11               	goto	l3766
  5076  0A0B  3094               	movlw	148
  5077  0A0C  0279               	subwf	_tap_timer,w	;volatile
  5078  0A0D  3004               	movlw	4
  5079  0A0E  3B7A               	subwfb	_tap_timer+1,w	;volatile
  5080  0A0F  1C03               	btfss	3,0
  5081  0A10  2A19               	goto	l260
  5082  0A11                     l3766:	
  5083                           
  5084                           ;main.c: 175: tap_timer = 1172;
  5085  0A11  3000               	movlw	0
  5086  0A12  00FC               	movwf	_tap_timer+3	;volatile
  5087  0A13  3000               	movlw	0
  5088  0A14  00FB               	movwf	_tap_timer+2	;volatile
  5089  0A15  3004               	movlw	4
  5090  0A16  00FA               	movwf	_tap_timer+1	;volatile
  5091  0A17  3094               	movlw	148
  5092  0A18  00F9               	movwf	_tap_timer	;volatile
  5093  0A19                     l260:	
  5094                           
  5095                           ;main.c: 176: }
  5096                           ;main.c: 177: int tapCntDivisor = num_taps;
  5097  0A19  0021               	movlb	1	; select bank1
  5098  0A1A  0869               	movf	(_num_taps+1)^(0+128),w
  5099  0A1B  00BC               	movwf	(main@tapCntDivisor+1)^(0+128)
  5100  0A1C  0868               	movf	_num_taps^(0+128),w
  5101  0A1D  00BB               	movwf	main@tapCntDivisor^(0+128)
  5102                           
  5103                           ;main.c: 178: if (tap_iteration <= num_taps) {
  5104  0A1E  0869               	movf	(_num_taps+1)^(0+128),w
  5105  0A1F  3A80               	xorlw	128
  5106  0A20  00AA               	movwf	??_main^(0+128)
  5107  0A21  086B               	movf	(_tap_iteration+1)^(0+128),w
  5108  0A22  3A80               	xorlw	128
  5109  0A23  022A               	subwf	??_main^(0+128),w
  5110  0A24  1D03               	skipz
  5111  0A25  2A28               	goto	u3805
  5112  0A26  086A               	movf	_tap_iteration^(0+128),w
  5113  0A27  0268               	subwf	_num_taps^(0+128),w
  5114  0A28                     u3805:	
  5115  0A28  1C03               	skipc
  5116  0A29  2A4D               	goto	l3774
  5117                           
  5118                           ;main.c: 179: tap_total += tap_timer;
  5119  0A2A  0879               	movf	_tap_timer,w	;volatile
  5120  0A2B  0022               	movlb	2	; select bank2
  5121  0A2C  07BC               	addwf	_tap_total^(0+256),f
  5122  0A2D  087A               	movf	_tap_timer+1,w	;volatile
  5123  0A2E  3DBD               	addwfc	(_tap_total+1)^(0+256),f
  5124  0A2F  087B               	movf	_tap_timer+2,w	;volatile
  5125  0A30  3DBE               	addwfc	(_tap_total+2)^(0+256),f
  5126  0A31  087C               	movf	_tap_timer+3,w	;volatile
  5127  0A32  3DBF               	addwfc	(_tap_total+3)^(0+256),f
  5128                           
  5129                           ;main.c: 180: tap_history[tap_iteration] = tap_timer;
  5130  0A33  0021               	movlb	1	; select bank1
  5131  0A34  086A               	movf	_tap_iteration^(0+128),w
  5132  0A35  00AA               	movwf	??_main^(0+128)
  5133  0A36  3001               	movlw	1
  5134  0A37                     u3815:	
  5135  0A37  35AA               	lslf	??_main^(0+128),f
  5136  0A38  3EFF               	addlw	-1
  5137  0A39  1D03               	skipz
  5138  0A3A  2A37               	goto	u3815
  5139  0A3B  352A               	lslf	??_main^(0+128),w
  5140  0A3C  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5141  0A3D  0086               	movwf	6
  5142  0A3E  3001               	movlw	1	; select bank2/3
  5143  0A3F  0087               	movwf	7
  5144  0A40  0879               	movf	_tap_timer,w	;volatile
  5145  0A41  3FC0               	movwi [0]fsr1
  5146  0A42  087A               	movf	_tap_timer+1,w	;volatile
  5147  0A43  3FC1               	movwi [1]fsr1
  5148  0A44  087B               	movf	_tap_timer+2,w	;volatile
  5149  0A45  3FC2               	movwi [2]fsr1
  5150  0A46  087C               	movf	_tap_timer+3,w	;volatile
  5151  0A47  3FC3               	movwi [3]fsr1
  5152                           
  5153                           ;main.c: 181: tapCntDivisor = tap_iteration;
  5154  0A48  086B               	movf	(_tap_iteration+1)^(0+128),w
  5155  0A49  00BC               	movwf	(main@tapCntDivisor+1)^(0+128)
  5156  0A4A  086A               	movf	_tap_iteration^(0+128),w
  5157  0A4B  00BB               	movwf	main@tapCntDivisor^(0+128)
  5158                           
  5159                           ;main.c: 182: } else {
  5160  0A4C  2AC5               	goto	l3788
  5161  0A4D                     l3774:	
  5162                           
  5163                           ;main.c: 183: tap_total = 0;
  5164  0A4D  3000               	movlw	0
  5165  0A4E  0022               	movlb	2	; select bank2
  5166  0A4F  00BF               	movwf	(_tap_total+3)^(0+256)
  5167  0A50  3000               	movlw	0
  5168  0A51  00BE               	movwf	(_tap_total+2)^(0+256)
  5169  0A52  3000               	movlw	0
  5170  0A53  00BD               	movwf	(_tap_total+1)^(0+256)
  5171  0A54  3000               	movlw	0
  5172  0A55  00BC               	movwf	_tap_total^(0+256)
  5173                           
  5174                           ;main.c: 184: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  5175  0A56  0021               	movlb	1	; select bank1
  5176  0A57  01D9               	clrf	_iCnt^(0+128)
  5177  0A58  0AD9               	incf	_iCnt^(0+128),f
  5178  0A59                     l3782:	
  5179  0A59  0869               	movf	(_num_taps+1)^(0+128),w
  5180  0A5A  3A80               	xorlw	128
  5181  0A5B  3C80               	sublw	128
  5182  0A5C  1D03               	skipz
  5183  0A5D  2A60               	goto	u3855
  5184  0A5E  0868               	movf	_num_taps^(0+128),w
  5185  0A5F  0259               	subwf	_iCnt^(0+128),w
  5186  0A60                     u3855:	
  5187  0A60  1803               	btfsc	3,0
  5188  0A61  2AA7               	goto	l3784
  5189                           
  5190                           ;main.c: 185: tap_history[iCnt] = tap_history[iCnt + 1];
  5191  0A62  0021               	movlb	1	; select bank1
  5192  0A63  0859               	movf	_iCnt^(0+128),w
  5193  0A64  00AA               	movwf	??_main^(0+128)
  5194  0A65  3001               	movlw	1
  5195  0A66                     u3825:	
  5196  0A66  35AA               	lslf	??_main^(0+128),f
  5197  0A67  3EFF               	addlw	-1
  5198  0A68  1D03               	skipz
  5199  0A69  2A66               	goto	u3825
  5200  0A6A  352A               	lslf	??_main^(0+128),w
  5201  0A6B  3E04               	addlw	4
  5202  0A6C  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5203  0A6D  0086               	movwf	6
  5204  0A6E  3001               	movlw	1	; select bank2/3
  5205  0A6F  0087               	movwf	7
  5206  0A70  3F40               	moviw [0]fsr1
  5207  0A71  00AB               	movwf	(??_main+1)^(0+128)
  5208  0A72  3F41               	moviw [1]fsr1
  5209  0A73  00AC               	movwf	((??_main+1)^(0+128)+1)
  5210  0A74  3F42               	moviw [2]fsr1
  5211  0A75  00AD               	movwf	((??_main+1)^(0+128)+2)
  5212  0A76  3F43               	moviw [3]fsr1
  5213  0A77  00AE               	movwf	((??_main+1)^(0+128)+3)
  5214  0A78  0859               	movf	_iCnt^(0+128),w
  5215  0A79  00AF               	movwf	(??_main+5)^(0+128)
  5216  0A7A  3001               	movlw	1
  5217  0A7B                     u3835:	
  5218  0A7B  35AF               	lslf	(??_main+5)^(0+128),f
  5219  0A7C  3EFF               	addlw	-1
  5220  0A7D  1D03               	skipz
  5221  0A7E  2A7B               	goto	u3835
  5222  0A7F  352F               	lslf	(??_main+5)^(0+128),w
  5223  0A80  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5224  0A81  0086               	movwf	6
  5225  0A82  3001               	movlw	1	; select bank2/3
  5226  0A83  0087               	movwf	7
  5227  0A84  082B               	movf	(??_main+1)^(0+128),w
  5228  0A85  3FC0               	movwi [0]fsr1
  5229  0A86  082C               	movf	(??_main+2)^(0+128),w
  5230  0A87  3FC1               	movwi [1]fsr1
  5231  0A88  082D               	movf	(??_main+3)^(0+128),w
  5232  0A89  3FC2               	movwi [2]fsr1
  5233  0A8A  082E               	movf	(??_main+4)^(0+128),w
  5234  0A8B  3FC3               	movwi [3]fsr1
  5235                           
  5236                           ;main.c: 186: tap_total += tap_history[iCnt];
  5237  0A8C  0859               	movf	_iCnt^(0+128),w
  5238  0A8D  00AA               	movwf	??_main^(0+128)
  5239  0A8E  3001               	movlw	1
  5240  0A8F                     u3845:	
  5241  0A8F  35AA               	lslf	??_main^(0+128),f
  5242  0A90  3EFF               	addlw	-1
  5243  0A91  1D03               	skipz
  5244  0A92  2A8F               	goto	u3845
  5245  0A93  352A               	lslf	??_main^(0+128),w
  5246  0A94  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5247  0A95  0086               	movwf	6
  5248  0A96  3001               	movlw	1	; select bank2/3
  5249  0A97  0087               	movwf	7
  5250  0A98  3F40               	moviw [0]fsr1
  5251  0A99  0022               	movlb	2	; select bank2
  5252  0A9A  07BC               	addwf	_tap_total^(0+256),f
  5253  0A9B  3F41               	moviw [1]fsr1
  5254  0A9C  3DBD               	addwfc	(_tap_total+1)^(0+256),f
  5255  0A9D  3F42               	moviw [2]fsr1
  5256  0A9E  3DBE               	addwfc	(_tap_total+2)^(0+256),f
  5257  0A9F  3F43               	moviw [3]fsr1
  5258  0AA0  3DBF               	addwfc	(_tap_total+3)^(0+256),f
  5259  0AA1  3001               	movlw	1
  5260  0AA2  0021               	movlb	1	; select bank1
  5261  0AA3  00AA               	movwf	??_main^(0+128)
  5262  0AA4  082A               	movf	??_main^(0+128),w
  5263  0AA5  07D9               	addwf	_iCnt^(0+128),f
  5264  0AA6  2A59               	goto	l3782
  5265  0AA7                     l3784:	
  5266                           
  5267                           ;main.c: 187: }
  5268                           ;main.c: 188: tap_history[num_taps] = tap_timer;
  5269  0AA7  0021               	movlb	1	; select bank1
  5270  0AA8  0868               	movf	_num_taps^(0+128),w
  5271  0AA9  00AA               	movwf	??_main^(0+128)
  5272  0AAA  3001               	movlw	1
  5273  0AAB                     u3865:	
  5274  0AAB  35AA               	lslf	??_main^(0+128),f
  5275  0AAC  3EFF               	addlw	-1
  5276  0AAD  1D03               	skipz
  5277  0AAE  2AAB               	goto	u3865
  5278  0AAF  352A               	lslf	??_main^(0+128),w
  5279  0AB0  3E20               	addlw	(low (_tap_history| (0+256)))& (0+255)
  5280  0AB1  0086               	movwf	6
  5281  0AB2  3001               	movlw	1	; select bank2/3
  5282  0AB3  0087               	movwf	7
  5283  0AB4  0879               	movf	_tap_timer,w	;volatile
  5284  0AB5  3FC0               	movwi [0]fsr1
  5285  0AB6  087A               	movf	_tap_timer+1,w	;volatile
  5286  0AB7  3FC1               	movwi [1]fsr1
  5287  0AB8  087B               	movf	_tap_timer+2,w	;volatile
  5288  0AB9  3FC2               	movwi [2]fsr1
  5289  0ABA  087C               	movf	_tap_timer+3,w	;volatile
  5290  0ABB  3FC3               	movwi [3]fsr1
  5291                           
  5292                           ;main.c: 189: tap_total += tap_timer;
  5293  0ABC  0879               	movf	_tap_timer,w	;volatile
  5294  0ABD  0022               	movlb	2	; select bank2
  5295  0ABE  07BC               	addwf	_tap_total^(0+256),f
  5296  0ABF  087A               	movf	_tap_timer+1,w	;volatile
  5297  0AC0  3DBD               	addwfc	(_tap_total+1)^(0+256),f
  5298  0AC1  087B               	movf	_tap_timer+2,w	;volatile
  5299  0AC2  3DBE               	addwfc	(_tap_total+2)^(0+256),f
  5300  0AC3  087C               	movf	_tap_timer+3,w	;volatile
  5301  0AC4  3DBF               	addwfc	(_tap_total+3)^(0+256),f
  5302  0AC5                     l3788:	
  5303                           
  5304                           ;main.c: 190: }
  5305                           ;main.c: 192: baseline_delay_time = tap_total / tapCntDivisor;
  5306  0AC5  0021               	movlb	1	; select bank1
  5307  0AC6  083B               	movf	main@tapCntDivisor^(0+128),w
  5308  0AC7  0020               	movlb	0	; select bank0
  5309  0AC8  00A6               	movwf	___aldiv@divisor
  5310  0AC9  0021               	movlb	1	; select bank1
  5311  0ACA  083C               	movf	(main@tapCntDivisor+1)^(0+128),w
  5312  0ACB  0020               	movlb	0	; select bank0
  5313  0ACC  00A7               	movwf	___aldiv@divisor+1
  5314  0ACD  0D89               	rlf	9,f
  5315  0ACE  3B89               	subwfb	9,f
  5316  0ACF  0989               	comf	9,f
  5317  0AD0  00A8               	movwf	___aldiv@divisor+2
  5318  0AD1  00A9               	movwf	___aldiv@divisor+3
  5319  0AD2  0022               	movlb	2	; select bank2
  5320  0AD3  083F               	movf	(_tap_total+3)^(0+256),w
  5321  0AD4  0020               	movlb	0	; select bank0
  5322  0AD5  00AD               	movwf	___aldiv@dividend+3
  5323  0AD6  0022               	movlb	2	; select bank2
  5324  0AD7  083E               	movf	(_tap_total+2)^(0+256),w
  5325  0AD8  0020               	movlb	0	; select bank0
  5326  0AD9  00AC               	movwf	___aldiv@dividend+2
  5327  0ADA  0022               	movlb	2	; select bank2
  5328  0ADB  083D               	movf	(_tap_total+1)^(0+256),w
  5329  0ADC  0020               	movlb	0	; select bank0
  5330  0ADD  00AB               	movwf	___aldiv@dividend+1
  5331  0ADE  0022               	movlb	2	; select bank2
  5332  0ADF  083C               	movf	_tap_total^(0+256),w
  5333  0AE0  0020               	movlb	0	; select bank0
  5334  0AE1  00AA               	movwf	___aldiv@dividend
  5335  0AE2  3197  277E  3189   	fcall	___aldiv
  5336  0AE5  0020               	movlb	0	; select bank0
  5337  0AE6  0829               	movf	?___aldiv+3,w
  5338  0AE7  0021               	movlb	1	; select bank1
  5339  0AE8  00E1               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5340  0AE9  0020               	movlb	0	; select bank0
  5341  0AEA  0828               	movf	?___aldiv+2,w
  5342  0AEB  0021               	movlb	1	; select bank1
  5343  0AEC  00E0               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5344  0AED  0020               	movlb	0	; select bank0
  5345  0AEE  0827               	movf	?___aldiv+1,w
  5346  0AEF  0021               	movlb	1	; select bank1
  5347  0AF0  00DF               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5348  0AF1  0020               	movlb	0	; select bank0
  5349  0AF2  0826               	movf	?___aldiv,w
  5350  0AF3  0021               	movlb	1	; select bank1
  5351  0AF4  00DE               	movwf	_baseline_delay_time^(0+128)	;volatile
  5352                           
  5353                           ;main.c: 193: delay_time_changed = 1;
  5354  0AF5  3001               	movlw	1
  5355  0AF6  0022               	movlb	2	; select bank2
  5356  0AF7  00DC               	movwf	_delay_time_changed^(0+256)
  5357  0AF8  3000               	movlw	0
  5358  0AF9  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  5359                           
  5360                           ;main.c: 194: tap_timer = 0;
  5361  0AFA  3000               	movlw	0
  5362  0AFB  00FC               	movwf	_tap_timer+3	;volatile
  5363  0AFC  3000               	movlw	0
  5364  0AFD  00FB               	movwf	_tap_timer+2	;volatile
  5365  0AFE  3000               	movlw	0
  5366  0AFF  00FA               	movwf	_tap_timer+1	;volatile
  5367  0B00  3000               	movlw	0
  5368  0B01  00F9               	movwf	_tap_timer	;volatile
  5369                           
  5370                           ;main.c: 196: tap_iteration++;
  5371  0B02  3001               	movlw	1
  5372  0B03  0021               	movlb	1	; select bank1
  5373  0B04  07EA               	addwf	_tap_iteration^(0+128),f
  5374  0B05  3000               	movlw	0
  5375  0B06  3DEB               	addwfc	(_tap_iteration+1)^(0+128),f
  5376  0B07                     l266:	
  5377                           ;main.c: 197: }
  5378                           ;main.c: 198: while (PORTEbits.RE0 == 0) {
  5379                           
  5380  0B07  0020               	movlb	0	; select bank0
  5381  0B08  1810               	btfsc	16,0	;volatile
  5382  0B09  2B0E               	goto	l3798
  5383  0B0A  2B07               	goto	l266
  5384  0B0B                     l3796:	
  5385                           ;main.c: 199: }
  5386                           ;main.c: 200: }
  5387                           ;main.c: 201: }
  5388                           ;main.c: 202: } else {
  5389                           
  5390                           
  5391                           ;main.c: 203: debounce_count = 0;
  5392  0B0B  0022               	movlb	2	; select bank2
  5393  0B0C  01C8               	clrf	_debounce_count^(0+256)
  5394  0B0D  01C9               	clrf	(_debounce_count+1)^(0+256)
  5395  0B0E                     l3798:	
  5396                           
  5397                           ;main.c: 204: }
  5398                           ;main.c: 209: knob_1_pos = adc_convert(0);
  5399  0B0E  3000               	movlw	0
  5400  0B0F  3188  2002  3189   	fcall	_adc_convert
  5401  0B12  0020               	movlb	0	; select bank0
  5402  0B13  0821               	movf	?_adc_convert+1,w
  5403  0B14  0021               	movlb	1	; select bank1
  5404  0B15  00CC               	movwf	(_knob_1_pos+1)^(0+128)
  5405  0B16  0020               	movlb	0	; select bank0
  5406  0B17  0820               	movf	?_adc_convert,w
  5407  0B18  0021               	movlb	1	; select bank1
  5408  0B19  00CB               	movwf	_knob_1_pos^(0+128)
  5409                           
  5410                           ;main.c: 210: knob_2_pos = adc_convert(1);
  5411  0B1A  3001               	movlw	1
  5412  0B1B  3188  2002  3189   	fcall	_adc_convert
  5413  0B1E  0020               	movlb	0	; select bank0
  5414  0B1F  0821               	movf	?_adc_convert+1,w
  5415  0B20  0021               	movlb	1	; select bank1
  5416  0B21  00CE               	movwf	(_knob_2_pos+1)^(0+128)
  5417  0B22  0020               	movlb	0	; select bank0
  5418  0B23  0820               	movf	?_adc_convert,w
  5419  0B24  0021               	movlb	1	; select bank1
  5420  0B25  00CD               	movwf	_knob_2_pos^(0+128)
  5421                           
  5422                           ;main.c: 211: knob_3_pos = adc_convert(2);
  5423  0B26  3002               	movlw	2
  5424  0B27  3188  2002  3189   	fcall	_adc_convert
  5425  0B2A  0020               	movlb	0	; select bank0
  5426  0B2B  0821               	movf	?_adc_convert+1,w
  5427  0B2C  0021               	movlb	1	; select bank1
  5428  0B2D  00D0               	movwf	(_knob_3_pos+1)^(0+128)
  5429  0B2E  0020               	movlb	0	; select bank0
  5430  0B2F  0820               	movf	?_adc_convert,w
  5431  0B30  0021               	movlb	1	; select bank1
  5432  0B31  00CF               	movwf	_knob_3_pos^(0+128)
  5433                           
  5434                           ;main.c: 212: knob_4_pos = adc_convert(3);
  5435  0B32  3003               	movlw	3
  5436  0B33  3188  2002  3189   	fcall	_adc_convert
  5437  0B36  0020               	movlb	0	; select bank0
  5438  0B37  0821               	movf	?_adc_convert+1,w
  5439  0B38  0021               	movlb	1	; select bank1
  5440  0B39  00D2               	movwf	(_knob_4_pos+1)^(0+128)
  5441  0B3A  0020               	movlb	0	; select bank0
  5442  0B3B  0820               	movf	?_adc_convert,w
  5443  0B3C  0021               	movlb	1	; select bank1
  5444  0B3D  00D1               	movwf	_knob_4_pos^(0+128)
  5445                           
  5446                           ;main.c: 213: knob_5_pos = adc_convert(4);
  5447  0B3E  3004               	movlw	4
  5448  0B3F  3188  2002  3189   	fcall	_adc_convert
  5449  0B42  0020               	movlb	0	; select bank0
  5450  0B43  0821               	movf	?_adc_convert+1,w
  5451  0B44  0022               	movlb	2	; select bank2
  5452  0B45  00D3               	movwf	(_knob_5_pos+1)^(0+256)
  5453  0B46  0020               	movlb	0	; select bank0
  5454  0B47  0820               	movf	?_adc_convert,w
  5455  0B48  0022               	movlb	2	; select bank2
  5456  0B49  00D2               	movwf	_knob_5_pos^(0+256)
  5457                           
  5458                           ;main.c: 226: if (knob_1_pos - knob1_prev >= 4 || knob_1_pos - knob1_prev <= -4) {
  5459  0B4A  0021               	movlb	1	; select bank1
  5460  0B4B  0966               	comf	_knob1_prev^(0+128),w
  5461  0B4C  00AA               	movwf	??_main^(0+128)
  5462  0B4D  0967               	comf	(_knob1_prev+1)^(0+128),w
  5463  0B4E  00AB               	movwf	(??_main^(0+128)+1)
  5464  0B4F  0AAA               	incf	??_main^(0+128),f
  5465  0B50  1903               	skipnz
  5466  0B51  0AAB               	incf	(??_main^(0+128)+1),f
  5467  0B52  084B               	movf	_knob_1_pos^(0+128),w
  5468  0B53  072A               	addwf	??_main^(0+128),w
  5469  0B54  00AC               	movwf	(??_main+2)^(0+128)
  5470  0B55  084C               	movf	(_knob_1_pos+1)^(0+128),w
  5471  0B56  3D2B               	addwfc	(??_main+1)^(0+128),w
  5472  0B57  00AD               	movwf	(??_main+3)^(0+128)
  5473  0B58  082D               	movf	(??_main+3)^(0+128),w
  5474  0B59  3A80               	xorlw	128
  5475  0B5A  00AE               	movwf	(??_main+4)^(0+128)
  5476  0B5B  3080               	movlw	128
  5477  0B5C  022E               	subwf	(??_main+4)^(0+128),w
  5478  0B5D  1D03               	skipz
  5479  0B5E  2B61               	goto	u3885
  5480  0B5F  3004               	movlw	4
  5481  0B60  022C               	subwf	(??_main+2)^(0+128),w
  5482  0B61                     u3885:	
  5483  0B61  1803               	skipnc
  5484  0B62  2B7C               	goto	l3812
  5485  0B63  0021               	movlb	1	; select bank1
  5486  0B64  0966               	comf	_knob1_prev^(0+128),w
  5487  0B65  00AA               	movwf	??_main^(0+128)
  5488  0B66  0967               	comf	(_knob1_prev+1)^(0+128),w
  5489  0B67  00AB               	movwf	(??_main^(0+128)+1)
  5490  0B68  0AAA               	incf	??_main^(0+128),f
  5491  0B69  1903               	skipnz
  5492  0B6A  0AAB               	incf	(??_main^(0+128)+1),f
  5493  0B6B  084B               	movf	_knob_1_pos^(0+128),w
  5494  0B6C  072A               	addwf	??_main^(0+128),w
  5495  0B6D  00AC               	movwf	(??_main+2)^(0+128)
  5496  0B6E  084C               	movf	(_knob_1_pos+1)^(0+128),w
  5497  0B6F  3D2B               	addwfc	(??_main+1)^(0+128),w
  5498  0B70  00AD               	movwf	(??_main+3)^(0+128)
  5499  0B71  082D               	movf	(??_main+3)^(0+128),w
  5500  0B72  3A80               	xorlw	128
  5501  0B73  00AE               	movwf	(??_main+4)^(0+128)
  5502  0B74  307F               	movlw	127
  5503  0B75  022E               	subwf	(??_main+4)^(0+128),w
  5504  0B76  1D03               	skipz
  5505  0B77  2B7A               	goto	u3895
  5506  0B78  30FD               	movlw	253
  5507  0B79  022C               	subwf	(??_main+2)^(0+128),w
  5508  0B7A                     u3895:	
  5509  0B7A  1803               	skipnc
  5510  0B7B  2C0E               	goto	l3818
  5511  0B7C                     l3812:	
  5512                           
  5513                           ;main.c: 227: knob1_prev = knob_1_pos;
  5514  0B7C  0021               	movlb	1	; select bank1
  5515  0B7D  084C               	movf	(_knob_1_pos+1)^(0+128),w
  5516  0B7E  00E7               	movwf	(_knob1_prev+1)^(0+128)
  5517  0B7F  084B               	movf	_knob_1_pos^(0+128),w
  5518  0B80  00E6               	movwf	_knob1_prev^(0+128)
  5519                           
  5520                           ;main.c: 228: int i = map(knob1_prev, 0, 1023, 0, 255);
  5521  0B81  3000               	movlw	0
  5522  0B82  0020               	movlb	0	; select bank0
  5523  0B83  00E1               	movwf	map@out_max
  5524  0B84  307F               	movlw	127
  5525  0B85  00E2               	movwf	map@out_max+1
  5526  0B86  3043               	movlw	67
  5527  0B87  00E3               	movwf	map@out_max+2
  5528  0B88  3000               	movlw	0
  5529  0B89  00DE               	movwf	map@out_min
  5530  0B8A  3000               	movlw	0
  5531  0B8B  00DF               	movwf	map@out_min+1
  5532  0B8C  3000               	movlw	0
  5533  0B8D  00E0               	movwf	map@out_min+2
  5534  0B8E  30C0               	movlw	192
  5535  0B8F  00DB               	movwf	map@in_max
  5536  0B90  307F               	movlw	127
  5537  0B91  00DC               	movwf	map@in_max+1
  5538  0B92  3044               	movlw	68
  5539  0B93  00DD               	movwf	map@in_max+2
  5540  0B94  3000               	movlw	0
  5541  0B95  00D8               	movwf	map@in_min
  5542  0B96  3000               	movlw	0
  5543  0B97  00D9               	movwf	map@in_min+1
  5544  0B98  3000               	movlw	0
  5545  0B99  00DA               	movwf	map@in_min+2
  5546  0B9A  0021               	movlb	1	; select bank1
  5547  0B9B  0867               	movf	(_knob1_prev+1)^(0+128),w
  5548  0B9C  0020               	movlb	0	; select bank0
  5549  0B9D  00A9               	movwf	___awtoft@c+1
  5550  0B9E  0021               	movlb	1	; select bank1
  5551  0B9F  0866               	movf	_knob1_prev^(0+128),w
  5552  0BA0  0020               	movlb	0	; select bank0
  5553  0BA1  00A8               	movwf	___awtoft@c
  5554  0BA2  3190  2001  3189   	fcall	___awtoft
  5555  0BA5  0020               	movlb	0	; select bank0
  5556  0BA6  0828               	movf	?___awtoft,w
  5557  0BA7  00D5               	movwf	map@x
  5558  0BA8  0829               	movf	?___awtoft+1,w
  5559  0BA9  00D6               	movwf	map@x+1
  5560  0BAA  082A               	movf	?___awtoft+2,w
  5561  0BAB  00D7               	movwf	map@x+2
  5562  0BAC  3188  201B  3189   	fcall	_map
  5563  0BAF  0020               	movlb	0	; select bank0
  5564  0BB0  0855               	movf	?_map,w
  5565  0BB1  00E7               	movwf	___fttol@f1
  5566  0BB2  0856               	movf	?_map+1,w
  5567  0BB3  00E8               	movwf	___fttol@f1+1
  5568  0BB4  0857               	movf	?_map+2,w
  5569  0BB5  00E9               	movwf	___fttol@f1+2
  5570  0BB6  3188  20A6  3189   	fcall	___fttol
  5571  0BB9  0020               	movlb	0	; select bank0
  5572  0BBA  0868               	movf	?___fttol+1,w
  5573  0BBB  0021               	movlb	1	; select bank1
  5574  0BBC  00BA               	movwf	(main@i+1)^(0+128)
  5575  0BBD  0020               	movlb	0	; select bank0
  5576  0BBE  0867               	movf	?___fttol,w
  5577  0BBF  0021               	movlb	1	; select bank1
  5578  0BC0  00B9               	movwf	main@i^(0+128)
  5579                           
  5580                           ;main.c: 229: baseline_delay_time = map(knob1_prev, 0, 1023, 1172, 200);
  5581  0BC1  3000               	movlw	0
  5582  0BC2  0020               	movlb	0	; select bank0
  5583  0BC3  00E1               	movwf	map@out_max
  5584  0BC4  3048               	movlw	72
  5585  0BC5  00E2               	movwf	map@out_max+1
  5586  0BC6  3043               	movlw	67
  5587  0BC7  00E3               	movwf	map@out_max+2
  5588  0BC8  3080               	movlw	128
  5589  0BC9  00DE               	movwf	map@out_min
  5590  0BCA  3092               	movlw	146
  5591  0BCB  00DF               	movwf	map@out_min+1
  5592  0BCC  3044               	movlw	68
  5593  0BCD  00E0               	movwf	map@out_min+2
  5594  0BCE  30C0               	movlw	192
  5595  0BCF  00DB               	movwf	map@in_max
  5596  0BD0  307F               	movlw	127
  5597  0BD1  00DC               	movwf	map@in_max+1
  5598  0BD2  3044               	movlw	68
  5599  0BD3  00DD               	movwf	map@in_max+2
  5600  0BD4  3000               	movlw	0
  5601  0BD5  00D8               	movwf	map@in_min
  5602  0BD6  3000               	movlw	0
  5603  0BD7  00D9               	movwf	map@in_min+1
  5604  0BD8  3000               	movlw	0
  5605  0BD9  00DA               	movwf	map@in_min+2
  5606  0BDA  0021               	movlb	1	; select bank1
  5607  0BDB  0867               	movf	(_knob1_prev+1)^(0+128),w
  5608  0BDC  0020               	movlb	0	; select bank0
  5609  0BDD  00A9               	movwf	___awtoft@c+1
  5610  0BDE  0021               	movlb	1	; select bank1
  5611  0BDF  0866               	movf	_knob1_prev^(0+128),w
  5612  0BE0  0020               	movlb	0	; select bank0
  5613  0BE1  00A8               	movwf	___awtoft@c
  5614  0BE2  3190  2001  3189   	fcall	___awtoft
  5615  0BE5  0020               	movlb	0	; select bank0
  5616  0BE6  0828               	movf	?___awtoft,w
  5617  0BE7  00D5               	movwf	map@x
  5618  0BE8  0829               	movf	?___awtoft+1,w
  5619  0BE9  00D6               	movwf	map@x+1
  5620  0BEA  082A               	movf	?___awtoft+2,w
  5621  0BEB  00D7               	movwf	map@x+2
  5622  0BEC  3188  201B  3189   	fcall	_map
  5623  0BEF  0020               	movlb	0	; select bank0
  5624  0BF0  0855               	movf	?_map,w
  5625  0BF1  00E7               	movwf	___fttol@f1
  5626  0BF2  0856               	movf	?_map+1,w
  5627  0BF3  00E8               	movwf	___fttol@f1+1
  5628  0BF4  0857               	movf	?_map+2,w
  5629  0BF5  00E9               	movwf	___fttol@f1+2
  5630  0BF6  3188  20A6  3189   	fcall	___fttol
  5631  0BF9  0020               	movlb	0	; select bank0
  5632  0BFA  086A               	movf	?___fttol+3,w
  5633  0BFB  0021               	movlb	1	; select bank1
  5634  0BFC  00E1               	movwf	(_baseline_delay_time+3)^(0+128)	;volatile
  5635  0BFD  0020               	movlb	0	; select bank0
  5636  0BFE  0869               	movf	?___fttol+2,w
  5637  0BFF  0021               	movlb	1	; select bank1
  5638  0C00  00E0               	movwf	(_baseline_delay_time+2)^(0+128)	;volatile
  5639  0C01  0020               	movlb	0	; select bank0
  5640  0C02  0868               	movf	?___fttol+1,w
  5641  0C03  0021               	movlb	1	; select bank1
  5642  0C04  00DF               	movwf	(_baseline_delay_time+1)^(0+128)	;volatile
  5643  0C05  0020               	movlb	0	; select bank0
  5644  0C06  0867               	movf	?___fttol,w
  5645  0C07  0021               	movlb	1	; select bank1
  5646  0C08  00DE               	movwf	_baseline_delay_time^(0+128)	;volatile
  5647                           
  5648                           ;main.c: 230: delay_time_changed = 1;
  5649  0C09  3001               	movlw	1
  5650  0C0A  0022               	movlb	2	; select bank2
  5651  0C0B  00DC               	movwf	_delay_time_changed^(0+256)
  5652  0C0C  3000               	movlw	0
  5653  0C0D  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  5654  0C0E                     l3818:	
  5655                           
  5656                           ;main.c: 231: }
  5657                           ;main.c: 240: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5658  0C0E  0022               	movlb	2	; select bank2
  5659  0C0F  095E               	comf	_knob2_prev^(0+256),w
  5660  0C10  0021               	movlb	1	; select bank1
  5661  0C11  00AA               	movwf	??_main^(0+128)
  5662  0C12  0022               	movlb	2	; select bank2
  5663  0C13  095F               	comf	(_knob2_prev+1)^(0+256),w
  5664  0C14  0021               	movlb	1	; select bank1
  5665  0C15  00AB               	movwf	(??_main^(0+128)+1)
  5666  0C16  0AAA               	incf	??_main^(0+128),f
  5667  0C17  1903               	skipnz
  5668  0C18  0AAB               	incf	(??_main^(0+128)+1),f
  5669  0C19  084D               	movf	_knob_2_pos^(0+128),w
  5670  0C1A  072A               	addwf	??_main^(0+128),w
  5671  0C1B  00AC               	movwf	(??_main+2)^(0+128)
  5672  0C1C  084E               	movf	(_knob_2_pos+1)^(0+128),w
  5673  0C1D  3D2B               	addwfc	(??_main+1)^(0+128),w
  5674  0C1E  00AD               	movwf	(??_main+3)^(0+128)
  5675  0C1F  082D               	movf	(??_main+3)^(0+128),w
  5676  0C20  3A80               	xorlw	128
  5677  0C21  00AE               	movwf	(??_main+4)^(0+128)
  5678  0C22  3080               	movlw	128
  5679  0C23  022E               	subwf	(??_main+4)^(0+128),w
  5680  0C24  1D03               	skipz
  5681  0C25  2C28               	goto	u3905
  5682  0C26  3004               	movlw	4
  5683  0C27  022C               	subwf	(??_main+2)^(0+128),w
  5684  0C28                     u3905:	
  5685  0C28  1803               	skipnc
  5686  0C29  2C46               	goto	l3822
  5687  0C2A  0022               	movlb	2	; select bank2
  5688  0C2B  095E               	comf	_knob2_prev^(0+256),w
  5689  0C2C  0021               	movlb	1	; select bank1
  5690  0C2D  00AA               	movwf	??_main^(0+128)
  5691  0C2E  0022               	movlb	2	; select bank2
  5692  0C2F  095F               	comf	(_knob2_prev+1)^(0+256),w
  5693  0C30  0021               	movlb	1	; select bank1
  5694  0C31  00AB               	movwf	(??_main^(0+128)+1)
  5695  0C32  0AAA               	incf	??_main^(0+128),f
  5696  0C33  1903               	skipnz
  5697  0C34  0AAB               	incf	(??_main^(0+128)+1),f
  5698  0C35  084D               	movf	_knob_2_pos^(0+128),w
  5699  0C36  072A               	addwf	??_main^(0+128),w
  5700  0C37  00AC               	movwf	(??_main+2)^(0+128)
  5701  0C38  084E               	movf	(_knob_2_pos+1)^(0+128),w
  5702  0C39  3D2B               	addwfc	(??_main+1)^(0+128),w
  5703  0C3A  00AD               	movwf	(??_main+3)^(0+128)
  5704  0C3B  082D               	movf	(??_main+3)^(0+128),w
  5705  0C3C  3A80               	xorlw	128
  5706  0C3D  00AE               	movwf	(??_main+4)^(0+128)
  5707  0C3E  307F               	movlw	127
  5708  0C3F  022E               	subwf	(??_main+4)^(0+128),w
  5709  0C40  1D03               	skipz
  5710  0C41  2C44               	goto	u3915
  5711  0C42  30FD               	movlw	253
  5712  0C43  022C               	subwf	(??_main+2)^(0+128),w
  5713  0C44                     u3915:	
  5714  0C44  1803               	skipnc
  5715  0C45  2CA3               	goto	l3830
  5716  0C46                     l3822:	
  5717                           
  5718                           ;main.c: 241: knob2_prev = knob_2_pos;
  5719  0C46  0021               	movlb	1	; select bank1
  5720  0C47  084E               	movf	(_knob_2_pos+1)^(0+128),w
  5721  0C48  0022               	movlb	2	; select bank2
  5722  0C49  00DF               	movwf	(_knob2_prev+1)^(0+256)
  5723  0C4A  0021               	movlb	1	; select bank1
  5724  0C4B  084D               	movf	_knob_2_pos^(0+128),w
  5725  0C4C  0022               	movlb	2	; select bank2
  5726  0C4D  00DE               	movwf	_knob2_prev^(0+256)
  5727                           
  5728                           ;main.c: 242: int i = map(knob2_prev, 0, 1023, 0, 39);
  5729  0C4E  3000               	movlw	0
  5730  0C4F  0020               	movlb	0	; select bank0
  5731  0C50  00E1               	movwf	map@out_max
  5732  0C51  301C               	movlw	28
  5733  0C52  00E2               	movwf	map@out_max+1
  5734  0C53  3042               	movlw	66
  5735  0C54  00E3               	movwf	map@out_max+2
  5736  0C55  3000               	movlw	0
  5737  0C56  00DE               	movwf	map@out_min
  5738  0C57  3000               	movlw	0
  5739  0C58  00DF               	movwf	map@out_min+1
  5740  0C59  3000               	movlw	0
  5741  0C5A  00E0               	movwf	map@out_min+2
  5742  0C5B  30C0               	movlw	192
  5743  0C5C  00DB               	movwf	map@in_max
  5744  0C5D  307F               	movlw	127
  5745  0C5E  00DC               	movwf	map@in_max+1
  5746  0C5F  3044               	movlw	68
  5747  0C60  00DD               	movwf	map@in_max+2
  5748  0C61  3000               	movlw	0
  5749  0C62  00D8               	movwf	map@in_min
  5750  0C63  3000               	movlw	0
  5751  0C64  00D9               	movwf	map@in_min+1
  5752  0C65  3000               	movlw	0
  5753  0C66  00DA               	movwf	map@in_min+2
  5754  0C67  0022               	movlb	2	; select bank2
  5755  0C68  085F               	movf	(_knob2_prev+1)^(0+256),w
  5756  0C69  0020               	movlb	0	; select bank0
  5757  0C6A  00A9               	movwf	___awtoft@c+1
  5758  0C6B  0022               	movlb	2	; select bank2
  5759  0C6C  085E               	movf	_knob2_prev^(0+256),w
  5760  0C6D  0020               	movlb	0	; select bank0
  5761  0C6E  00A8               	movwf	___awtoft@c
  5762  0C6F  3190  2001  3189   	fcall	___awtoft
  5763  0C72  0020               	movlb	0	; select bank0
  5764  0C73  0828               	movf	?___awtoft,w
  5765  0C74  00D5               	movwf	map@x
  5766  0C75  0829               	movf	?___awtoft+1,w
  5767  0C76  00D6               	movwf	map@x+1
  5768  0C77  082A               	movf	?___awtoft+2,w
  5769  0C78  00D7               	movwf	map@x+2
  5770  0C79  3188  201B  3189   	fcall	_map
  5771  0C7C  0020               	movlb	0	; select bank0
  5772  0C7D  0855               	movf	?_map,w
  5773  0C7E  00E7               	movwf	___fttol@f1
  5774  0C7F  0856               	movf	?_map+1,w
  5775  0C80  00E8               	movwf	___fttol@f1+1
  5776  0C81  0857               	movf	?_map+2,w
  5777  0C82  00E9               	movwf	___fttol@f1+2
  5778  0C83  3188  20A6  3189   	fcall	___fttol
  5779  0C86  0020               	movlb	0	; select bank0
  5780  0C87  0868               	movf	?___fttol+1,w
  5781  0C88  0021               	movlb	1	; select bank1
  5782  0C89  00C0               	movwf	(main@i_335+1)^(0+128)
  5783  0C8A  0020               	movlb	0	; select bank0
  5784  0C8B  0867               	movf	?___fttol,w
  5785  0C8C  0021               	movlb	1	; select bank1
  5786  0C8D  00BF               	movwf	main@i_335^(0+128)
  5787                           
  5788                           ;main.c: 243: CCPR2 = iB25k[i];
  5789  0C8E  353F               	lslf	main@i_335^(0+128),w
  5790  0C8F  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5791  0C90  0086               	movwf	6
  5792  0C91  3004               	movlw	4	; select bank9/10
  5793  0C92  0087               	movwf	7
  5794  0C93  3F40               	moviw [0]fsr1
  5795  0C94  0025               	movlb	5	; select bank5
  5796  0C95  0098               	movwf	24	;volatile
  5797  0C96  3F41               	moviw [1]fsr1
  5798  0C97  0099               	movwf	25	;volatile
  5799                           
  5800                           ;main.c: 244: CCPR3 = B25k[i];
  5801  0C98  0021               	movlb	1	; select bank1
  5802  0C99  353F               	lslf	main@i_335^(0+128),w
  5803  0C9A  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
  5804  0C9B  0086               	movwf	6
  5805  0C9C  3004               	movlw	4	; select bank8/9
  5806  0C9D  0087               	movwf	7
  5807  0C9E  3F40               	moviw [0]fsr1
  5808  0C9F  0026               	movlb	6	; select bank6
  5809  0CA0  0091               	movwf	17	;volatile
  5810  0CA1  3F41               	moviw [1]fsr1
  5811  0CA2  0092               	movwf	18	;volatile
  5812  0CA3                     l3830:	
  5813                           
  5814                           ;main.c: 245: }
  5815                           ;main.c: 255: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5816  0CA3  0022               	movlb	2	; select bank2
  5817  0CA4  0960               	comf	_knob3_prev^(0+256),w
  5818  0CA5  0021               	movlb	1	; select bank1
  5819  0CA6  00AA               	movwf	??_main^(0+128)
  5820  0CA7  0022               	movlb	2	; select bank2
  5821  0CA8  0961               	comf	(_knob3_prev+1)^(0+256),w
  5822  0CA9  0021               	movlb	1	; select bank1
  5823  0CAA  00AB               	movwf	(??_main^(0+128)+1)
  5824  0CAB  0AAA               	incf	??_main^(0+128),f
  5825  0CAC  1903               	skipnz
  5826  0CAD  0AAB               	incf	(??_main^(0+128)+1),f
  5827  0CAE  084F               	movf	_knob_3_pos^(0+128),w
  5828  0CAF  072A               	addwf	??_main^(0+128),w
  5829  0CB0  00AC               	movwf	(??_main+2)^(0+128)
  5830  0CB1  0850               	movf	(_knob_3_pos+1)^(0+128),w
  5831  0CB2  3D2B               	addwfc	(??_main+1)^(0+128),w
  5832  0CB3  00AD               	movwf	(??_main+3)^(0+128)
  5833  0CB4  082D               	movf	(??_main+3)^(0+128),w
  5834  0CB5  3A80               	xorlw	128
  5835  0CB6  00AE               	movwf	(??_main+4)^(0+128)
  5836  0CB7  3080               	movlw	128
  5837  0CB8  022E               	subwf	(??_main+4)^(0+128),w
  5838  0CB9  1D03               	skipz
  5839  0CBA  2CBD               	goto	u3925
  5840  0CBB  3004               	movlw	4
  5841  0CBC  022C               	subwf	(??_main+2)^(0+128),w
  5842  0CBD                     u3925:	
  5843  0CBD  1803               	skipnc
  5844  0CBE  2CDB               	goto	l3834
  5845  0CBF  0022               	movlb	2	; select bank2
  5846  0CC0  0960               	comf	_knob3_prev^(0+256),w
  5847  0CC1  0021               	movlb	1	; select bank1
  5848  0CC2  00AA               	movwf	??_main^(0+128)
  5849  0CC3  0022               	movlb	2	; select bank2
  5850  0CC4  0961               	comf	(_knob3_prev+1)^(0+256),w
  5851  0CC5  0021               	movlb	1	; select bank1
  5852  0CC6  00AB               	movwf	(??_main^(0+128)+1)
  5853  0CC7  0AAA               	incf	??_main^(0+128),f
  5854  0CC8  1903               	skipnz
  5855  0CC9  0AAB               	incf	(??_main^(0+128)+1),f
  5856  0CCA  084F               	movf	_knob_3_pos^(0+128),w
  5857  0CCB  072A               	addwf	??_main^(0+128),w
  5858  0CCC  00AC               	movwf	(??_main+2)^(0+128)
  5859  0CCD  0850               	movf	(_knob_3_pos+1)^(0+128),w
  5860  0CCE  3D2B               	addwfc	(??_main+1)^(0+128),w
  5861  0CCF  00AD               	movwf	(??_main+3)^(0+128)
  5862  0CD0  082D               	movf	(??_main+3)^(0+128),w
  5863  0CD1  3A80               	xorlw	128
  5864  0CD2  00AE               	movwf	(??_main+4)^(0+128)
  5865  0CD3  307F               	movlw	127
  5866  0CD4  022E               	subwf	(??_main+4)^(0+128),w
  5867  0CD5  1D03               	skipz
  5868  0CD6  2CD9               	goto	u3935
  5869  0CD7  30FD               	movlw	253
  5870  0CD8  022C               	subwf	(??_main+2)^(0+128),w
  5871  0CD9                     u3935:	
  5872  0CD9  1803               	skipnc
  5873  0CDA  2D38               	goto	l3842
  5874  0CDB                     l3834:	
  5875                           
  5876                           ;main.c: 256: knob3_prev = knob_3_pos;
  5877  0CDB  0021               	movlb	1	; select bank1
  5878  0CDC  0850               	movf	(_knob_3_pos+1)^(0+128),w
  5879  0CDD  0022               	movlb	2	; select bank2
  5880  0CDE  00E1               	movwf	(_knob3_prev+1)^(0+256)
  5881  0CDF  0021               	movlb	1	; select bank1
  5882  0CE0  084F               	movf	_knob_3_pos^(0+128),w
  5883  0CE1  0022               	movlb	2	; select bank2
  5884  0CE2  00E0               	movwf	_knob3_prev^(0+256)
  5885                           
  5886                           ;main.c: 257: int i = map(knob3_prev, 0, 1023, 16, 0);
  5887  0CE3  3000               	movlw	0
  5888  0CE4  0020               	movlb	0	; select bank0
  5889  0CE5  00E1               	movwf	map@out_max
  5890  0CE6  3000               	movlw	0
  5891  0CE7  00E2               	movwf	map@out_max+1
  5892  0CE8  3000               	movlw	0
  5893  0CE9  00E3               	movwf	map@out_max+2
  5894  0CEA  3000               	movlw	0
  5895  0CEB  00DE               	movwf	map@out_min
  5896  0CEC  3080               	movlw	128
  5897  0CED  00DF               	movwf	map@out_min+1
  5898  0CEE  3041               	movlw	65
  5899  0CEF  00E0               	movwf	map@out_min+2
  5900  0CF0  30C0               	movlw	192
  5901  0CF1  00DB               	movwf	map@in_max
  5902  0CF2  307F               	movlw	127
  5903  0CF3  00DC               	movwf	map@in_max+1
  5904  0CF4  3044               	movlw	68
  5905  0CF5  00DD               	movwf	map@in_max+2
  5906  0CF6  3000               	movlw	0
  5907  0CF7  00D8               	movwf	map@in_min
  5908  0CF8  3000               	movlw	0
  5909  0CF9  00D9               	movwf	map@in_min+1
  5910  0CFA  3000               	movlw	0
  5911  0CFB  00DA               	movwf	map@in_min+2
  5912  0CFC  0022               	movlb	2	; select bank2
  5913  0CFD  0861               	movf	(_knob3_prev+1)^(0+256),w
  5914  0CFE  0020               	movlb	0	; select bank0
  5915  0CFF  00A9               	movwf	___awtoft@c+1
  5916  0D00  0022               	movlb	2	; select bank2
  5917  0D01  0860               	movf	_knob3_prev^(0+256),w
  5918  0D02  0020               	movlb	0	; select bank0
  5919  0D03  00A8               	movwf	___awtoft@c
  5920  0D04  3190  2001  3189   	fcall	___awtoft
  5921  0D07  0020               	movlb	0	; select bank0
  5922  0D08  0828               	movf	?___awtoft,w
  5923  0D09  00D5               	movwf	map@x
  5924  0D0A  0829               	movf	?___awtoft+1,w
  5925  0D0B  00D6               	movwf	map@x+1
  5926  0D0C  082A               	movf	?___awtoft+2,w
  5927  0D0D  00D7               	movwf	map@x+2
  5928  0D0E  3188  201B  3189   	fcall	_map
  5929  0D11  0020               	movlb	0	; select bank0
  5930  0D12  0855               	movf	?_map,w
  5931  0D13  00E7               	movwf	___fttol@f1
  5932  0D14  0856               	movf	?_map+1,w
  5933  0D15  00E8               	movwf	___fttol@f1+1
  5934  0D16  0857               	movf	?_map+2,w
  5935  0D17  00E9               	movwf	___fttol@f1+2
  5936  0D18  3188  20A6  3189   	fcall	___fttol
  5937  0D1B  0020               	movlb	0	; select bank0
  5938  0D1C  0868               	movf	?___fttol+1,w
  5939  0D1D  0021               	movlb	1	; select bank1
  5940  0D1E  00C2               	movwf	(main@i_336+1)^(0+128)
  5941  0D1F  0020               	movlb	0	; select bank0
  5942  0D20  0867               	movf	?___fttol,w
  5943  0D21  0021               	movlb	1	; select bank1
  5944  0D22  00C1               	movwf	main@i_336^(0+128)
  5945                           
  5946                           ;main.c: 258: CCPR4 = iB25k[i];
  5947  0D23  3541               	lslf	main@i_336^(0+128),w
  5948  0D24  3EA0               	addlw	(low (_iB25k| (0+1024)))& (0+255)
  5949  0D25  0086               	movwf	6
  5950  0D26  3004               	movlw	4	; select bank9/10
  5951  0D27  0087               	movwf	7
  5952  0D28  3F40               	moviw [0]fsr1
  5953  0D29  0026               	movlb	6	; select bank6
  5954  0D2A  0098               	movwf	24	;volatile
  5955  0D2B  3F41               	moviw [1]fsr1
  5956  0D2C  0099               	movwf	25	;volatile
  5957                           
  5958                           ;main.c: 259: CCPR5 = B25k[i];
  5959  0D2D  0021               	movlb	1	; select bank1
  5960  0D2E  3541               	lslf	main@i_336^(0+128),w
  5961  0D2F  3E20               	addlw	(low (_B25k| (0+1024)))& (0+255)
  5962  0D30  0086               	movwf	6
  5963  0D31  3004               	movlw	4	; select bank8/9
  5964  0D32  0087               	movwf	7
  5965  0D33  3F40               	moviw [0]fsr1
  5966  0D34  0026               	movlb	6	; select bank6
  5967  0D35  009C               	movwf	28	;volatile
  5968  0D36  3F41               	moviw [1]fsr1
  5969  0D37  009D               	movwf	29	;volatile
  5970  0D38                     l3842:	
  5971                           
  5972                           ;main.c: 260: }
  5973                           ;main.c: 270: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5974  0D38  0022               	movlb	2	; select bank2
  5975  0D39  0962               	comf	_knob4_prev^(0+256),w
  5976  0D3A  0021               	movlb	1	; select bank1
  5977  0D3B  00AA               	movwf	??_main^(0+128)
  5978  0D3C  0022               	movlb	2	; select bank2
  5979  0D3D  0963               	comf	(_knob4_prev+1)^(0+256),w
  5980  0D3E  0021               	movlb	1	; select bank1
  5981  0D3F  00AB               	movwf	(??_main^(0+128)+1)
  5982  0D40  0AAA               	incf	??_main^(0+128),f
  5983  0D41  1903               	skipnz
  5984  0D42  0AAB               	incf	(??_main^(0+128)+1),f
  5985  0D43  0851               	movf	_knob_4_pos^(0+128),w
  5986  0D44  072A               	addwf	??_main^(0+128),w
  5987  0D45  00AC               	movwf	(??_main+2)^(0+128)
  5988  0D46  0852               	movf	(_knob_4_pos+1)^(0+128),w
  5989  0D47  3D2B               	addwfc	(??_main+1)^(0+128),w
  5990  0D48  00AD               	movwf	(??_main+3)^(0+128)
  5991  0D49  082D               	movf	(??_main+3)^(0+128),w
  5992  0D4A  3A80               	xorlw	128
  5993  0D4B  00AE               	movwf	(??_main+4)^(0+128)
  5994  0D4C  3080               	movlw	128
  5995  0D4D  022E               	subwf	(??_main+4)^(0+128),w
  5996  0D4E  1D03               	skipz
  5997  0D4F  2D52               	goto	u3945
  5998  0D50  3004               	movlw	4
  5999  0D51  022C               	subwf	(??_main+2)^(0+128),w
  6000  0D52                     u3945:	
  6001  0D52  1803               	skipnc
  6002  0D53  2D70               	goto	l3846
  6003  0D54  0022               	movlb	2	; select bank2
  6004  0D55  0962               	comf	_knob4_prev^(0+256),w
  6005  0D56  0021               	movlb	1	; select bank1
  6006  0D57  00AA               	movwf	??_main^(0+128)
  6007  0D58  0022               	movlb	2	; select bank2
  6008  0D59  0963               	comf	(_knob4_prev+1)^(0+256),w
  6009  0D5A  0021               	movlb	1	; select bank1
  6010  0D5B  00AB               	movwf	(??_main^(0+128)+1)
  6011  0D5C  0AAA               	incf	??_main^(0+128),f
  6012  0D5D  1903               	skipnz
  6013  0D5E  0AAB               	incf	(??_main^(0+128)+1),f
  6014  0D5F  0851               	movf	_knob_4_pos^(0+128),w
  6015  0D60  072A               	addwf	??_main^(0+128),w
  6016  0D61  00AC               	movwf	(??_main+2)^(0+128)
  6017  0D62  0852               	movf	(_knob_4_pos+1)^(0+128),w
  6018  0D63  3D2B               	addwfc	(??_main+1)^(0+128),w
  6019  0D64  00AD               	movwf	(??_main+3)^(0+128)
  6020  0D65  082D               	movf	(??_main+3)^(0+128),w
  6021  0D66  3A80               	xorlw	128
  6022  0D67  00AE               	movwf	(??_main+4)^(0+128)
  6023  0D68  307F               	movlw	127
  6024  0D69  022E               	subwf	(??_main+4)^(0+128),w
  6025  0D6A  1D03               	skipz
  6026  0D6B  2D6E               	goto	u3955
  6027  0D6C  30FD               	movlw	253
  6028  0D6D  022C               	subwf	(??_main+2)^(0+128),w
  6029  0D6E                     u3955:	
  6030  0D6E  1803               	skipnc
  6031  0D6F  2DB8               	goto	l3850
  6032  0D70                     l3846:	
  6033                           
  6034                           ;main.c: 271: knob4_prev = knob_4_pos;
  6035  0D70  0021               	movlb	1	; select bank1
  6036  0D71  0852               	movf	(_knob_4_pos+1)^(0+128),w
  6037  0D72  0022               	movlb	2	; select bank2
  6038  0D73  00E3               	movwf	(_knob4_prev+1)^(0+256)
  6039  0D74  0021               	movlb	1	; select bank1
  6040  0D75  0851               	movf	_knob_4_pos^(0+128),w
  6041  0D76  0022               	movlb	2	; select bank2
  6042  0D77  00E2               	movwf	_knob4_prev^(0+256)
  6043                           
  6044                           ;main.c: 272: mod_delay_time = map(knob4_prev, 0, 1023, 60, 1000);
  6045  0D78  3000               	movlw	0
  6046  0D79  0020               	movlb	0	; select bank0
  6047  0D7A  00E1               	movwf	map@out_max
  6048  0D7B  307A               	movlw	122
  6049  0D7C  00E2               	movwf	map@out_max+1
  6050  0D7D  3044               	movlw	68
  6051  0D7E  00E3               	movwf	map@out_max+2
  6052  0D7F  3000               	movlw	0
  6053  0D80  00DE               	movwf	map@out_min
  6054  0D81  3070               	movlw	112
  6055  0D82  00DF               	movwf	map@out_min+1
  6056  0D83  3042               	movlw	66
  6057  0D84  00E0               	movwf	map@out_min+2
  6058  0D85  30C0               	movlw	192
  6059  0D86  00DB               	movwf	map@in_max
  6060  0D87  307F               	movlw	127
  6061  0D88  00DC               	movwf	map@in_max+1
  6062  0D89  3044               	movlw	68
  6063  0D8A  00DD               	movwf	map@in_max+2
  6064  0D8B  3000               	movlw	0
  6065  0D8C  00D8               	movwf	map@in_min
  6066  0D8D  3000               	movlw	0
  6067  0D8E  00D9               	movwf	map@in_min+1
  6068  0D8F  3000               	movlw	0
  6069  0D90  00DA               	movwf	map@in_min+2
  6070  0D91  0022               	movlb	2	; select bank2
  6071  0D92  0863               	movf	(_knob4_prev+1)^(0+256),w
  6072  0D93  0020               	movlb	0	; select bank0
  6073  0D94  00A9               	movwf	___awtoft@c+1
  6074  0D95  0022               	movlb	2	; select bank2
  6075  0D96  0862               	movf	_knob4_prev^(0+256),w
  6076  0D97  0020               	movlb	0	; select bank0
  6077  0D98  00A8               	movwf	___awtoft@c
  6078  0D99  3190  2001  3189   	fcall	___awtoft
  6079  0D9C  0020               	movlb	0	; select bank0
  6080  0D9D  0828               	movf	?___awtoft,w
  6081  0D9E  00D5               	movwf	map@x
  6082  0D9F  0829               	movf	?___awtoft+1,w
  6083  0DA0  00D6               	movwf	map@x+1
  6084  0DA1  082A               	movf	?___awtoft+2,w
  6085  0DA2  00D7               	movwf	map@x+2
  6086  0DA3  3188  201B  3189   	fcall	_map
  6087  0DA6  0020               	movlb	0	; select bank0
  6088  0DA7  0855               	movf	?_map,w
  6089  0DA8  00E7               	movwf	___fttol@f1
  6090  0DA9  0856               	movf	?_map+1,w
  6091  0DAA  00E8               	movwf	___fttol@f1+1
  6092  0DAB  0857               	movf	?_map+2,w
  6093  0DAC  00E9               	movwf	___fttol@f1+2
  6094  0DAD  3188  20A6  3189   	fcall	___fttol
  6095  0DB0  0020               	movlb	0	; select bank0
  6096  0DB1  0868               	movf	?___fttol+1,w
  6097  0DB2  0022               	movlb	2	; select bank2
  6098  0DB3  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  6099  0DB4  0020               	movlb	0	; select bank0
  6100  0DB5  0867               	movf	?___fttol,w
  6101  0DB6  0022               	movlb	2	; select bank2
  6102  0DB7  00E6               	movwf	_mod_delay_time^(0+256)
  6103  0DB8                     l3850:	
  6104                           
  6105                           ;main.c: 273: }
  6106                           ;main.c: 281: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  6107  0DB8  0022               	movlb	2	; select bank2
  6108  0DB9  0964               	comf	_knob5_prev^(0+256),w
  6109  0DBA  0021               	movlb	1	; select bank1
  6110  0DBB  00AA               	movwf	??_main^(0+128)
  6111  0DBC  0022               	movlb	2	; select bank2
  6112  0DBD  0965               	comf	(_knob5_prev+1)^(0+256),w
  6113  0DBE  0021               	movlb	1	; select bank1
  6114  0DBF  00AB               	movwf	(??_main^(0+128)+1)
  6115  0DC0  0AAA               	incf	??_main^(0+128),f
  6116  0DC1  1903               	skipnz
  6117  0DC2  0AAB               	incf	(??_main^(0+128)+1),f
  6118  0DC3  0022               	movlb	2	; select bank2
  6119  0DC4  0852               	movf	_knob_5_pos^(0+256),w
  6120  0DC5  0021               	movlb	1	; select bank1
  6121  0DC6  072A               	addwf	??_main^(0+128),w
  6122  0DC7  00AC               	movwf	(??_main+2)^(0+128)
  6123  0DC8  0022               	movlb	2	; select bank2
  6124  0DC9  0853               	movf	(_knob_5_pos+1)^(0+256),w
  6125  0DCA  0021               	movlb	1	; select bank1
  6126  0DCB  3D2B               	addwfc	(??_main+1)^(0+128),w
  6127  0DCC  00AD               	movwf	(??_main+3)^(0+128)
  6128  0DCD  082D               	movf	(??_main+3)^(0+128),w
  6129  0DCE  3A80               	xorlw	128
  6130  0DCF  00AE               	movwf	(??_main+4)^(0+128)
  6131  0DD0  3080               	movlw	128
  6132  0DD1  022E               	subwf	(??_main+4)^(0+128),w
  6133  0DD2  1D03               	skipz
  6134  0DD3  2DD6               	goto	u3965
  6135  0DD4  3004               	movlw	4
  6136  0DD5  022C               	subwf	(??_main+2)^(0+128),w
  6137  0DD6                     u3965:	
  6138  0DD6  1803               	skipnc
  6139  0DD7  2DF8               	goto	l3854
  6140  0DD8  0022               	movlb	2	; select bank2
  6141  0DD9  0964               	comf	_knob5_prev^(0+256),w
  6142  0DDA  0021               	movlb	1	; select bank1
  6143  0DDB  00AA               	movwf	??_main^(0+128)
  6144  0DDC  0022               	movlb	2	; select bank2
  6145  0DDD  0965               	comf	(_knob5_prev+1)^(0+256),w
  6146  0DDE  0021               	movlb	1	; select bank1
  6147  0DDF  00AB               	movwf	(??_main^(0+128)+1)
  6148  0DE0  0AAA               	incf	??_main^(0+128),f
  6149  0DE1  1903               	skipnz
  6150  0DE2  0AAB               	incf	(??_main^(0+128)+1),f
  6151  0DE3  0022               	movlb	2	; select bank2
  6152  0DE4  0852               	movf	_knob_5_pos^(0+256),w
  6153  0DE5  0021               	movlb	1	; select bank1
  6154  0DE6  072A               	addwf	??_main^(0+128),w
  6155  0DE7  00AC               	movwf	(??_main+2)^(0+128)
  6156  0DE8  0022               	movlb	2	; select bank2
  6157  0DE9  0853               	movf	(_knob_5_pos+1)^(0+256),w
  6158  0DEA  0021               	movlb	1	; select bank1
  6159  0DEB  3D2B               	addwfc	(??_main+1)^(0+128),w
  6160  0DEC  00AD               	movwf	(??_main+3)^(0+128)
  6161  0DED  082D               	movf	(??_main+3)^(0+128),w
  6162  0DEE  3A80               	xorlw	128
  6163  0DEF  00AE               	movwf	(??_main+4)^(0+128)
  6164  0DF0  307F               	movlw	127
  6165  0DF1  022E               	subwf	(??_main+4)^(0+128),w
  6166  0DF2  1D03               	skipz
  6167  0DF3  2DF6               	goto	u3975
  6168  0DF4  30FD               	movlw	253
  6169  0DF5  022C               	subwf	(??_main+2)^(0+128),w
  6170  0DF6                     u3975:	
  6171  0DF6  1803               	skipnc
  6172  0DF7  2DFD               	goto	l282
  6173  0DF8                     l3854:	
  6174                           
  6175                           ;main.c: 282: knob5_prev = knob_5_pos;
  6176  0DF8  0022               	movlb	2	; select bank2
  6177  0DF9  0853               	movf	(_knob_5_pos+1)^(0+256),w
  6178  0DFA  00E5               	movwf	(_knob5_prev+1)^(0+256)
  6179  0DFB  0852               	movf	_knob_5_pos^(0+256),w
  6180  0DFC  00E4               	movwf	_knob5_prev^(0+256)
  6181  0DFD                     l282:	
  6182                           
  6183                           ;main.c: 283: }
  6184                           ;main.c: 296: if (mod_timer >= mod_delay_time) {
  6185  0DFD  0022               	movlb	2	; select bank2
  6186  0DFE  0866               	movf	_mod_delay_time^(0+256),w
  6187  0DFF  0021               	movlb	1	; select bank1
  6188  0E00  00AA               	movwf	??_main^(0+128)
  6189  0E01  0022               	movlb	2	; select bank2
  6190  0E02  0867               	movf	(_mod_delay_time+1)^(0+256),w
  6191  0E03  0021               	movlb	1	; select bank1
  6192  0E04  00AB               	movwf	(??_main^(0+128)+1)
  6193  0E05  3000               	movlw	0
  6194  0E06  1BAB               	btfsc	(??_main^(0+128)+1),7
  6195  0E07  30FF               	movlw	255
  6196  0E08  00AC               	movwf	(??_main^(0+128)+2)
  6197  0E09  00AD               	movwf	(??_main^(0+128)+3)
  6198  0E0A  0022               	movlb	2	; select bank2
  6199  0E0B  083B               	movf	(_mod_timer+3)^(0+256),w	;volatile
  6200  0E0C  3A80               	xorlw	128
  6201  0E0D  0021               	movlb	1	; select bank1
  6202  0E0E  00AE               	movwf	(??_main+4)^(0+128)
  6203  0E0F  082D               	movf	(??_main+3)^(0+128),w
  6204  0E10  3A80               	xorlw	128
  6205  0E11  022E               	subwf	(??_main+4)^(0+128),w
  6206  0E12  0022               	movlb	2	; select bank2
  6207  0E13  1D03               	skipz
  6208  0E14  2E25               	goto	u3983
  6209  0E15  0021               	movlb	1	; select bank1
  6210  0E16  082C               	movf	(??_main+2)^(0+128),w
  6211  0E17  0022               	movlb	2	; select bank2
  6212  0E18  023A               	subwf	(_mod_timer+2)^(0+256),w	;volatile
  6213  0E19  1D03               	skipz
  6214  0E1A  2E25               	goto	u3983
  6215  0E1B  0021               	movlb	1	; select bank1
  6216  0E1C  082B               	movf	(??_main+1)^(0+128),w
  6217  0E1D  0022               	movlb	2	; select bank2
  6218  0E1E  0239               	subwf	(_mod_timer+1)^(0+256),w	;volatile
  6219  0E1F  1D03               	skipz
  6220  0E20  2E25               	goto	u3983
  6221  0E21  0021               	movlb	1	; select bank1
  6222  0E22  082A               	movf	??_main^(0+128),w
  6223  0E23  0022               	movlb	2	; select bank2
  6224  0E24  0238               	subwf	_mod_timer^(0+256),w	;volatile
  6225  0E25                     u3983:	
  6226  0E25  1C03               	skipc
  6227  0E26  2F43               	goto	l3908
  6228                           
  6229                           ;main.c: 298: mod_counter = mod_counter + 1;
  6230  0E27  0021               	movlb	1	; select bank1
  6231  0E28  0853               	movf	_mod_counter^(0+128),w
  6232  0E29  3E01               	addlw	1
  6233  0E2A  00D3               	movwf	_mod_counter^(0+128)
  6234  0E2B  3000               	movlw	0
  6235  0E2C  3D54               	addwfc	(_mod_counter+1)^(0+128),w
  6236  0E2D  00D4               	movwf	(_mod_counter+1)^(0+128)
  6237                           
  6238                           ;main.c: 299: mod_timer = 0;
  6239  0E2E  3000               	movlw	0
  6240  0E2F  0022               	movlb	2	; select bank2
  6241  0E30  00BB               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6242  0E31  3000               	movlw	0
  6243  0E32  00BA               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6244  0E33  3000               	movlw	0
  6245  0E34  00B9               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6246  0E35  3000               	movlw	0
  6247  0E36  00B8               	movwf	_mod_timer^(0+256)	;volatile
  6248                           
  6249                           ;main.c: 301: if (bottom_push_state == 1 || bottom_push_state == 5) {
  6250  0E37  0021               	movlb	1	; select bank1
  6251  0E38  036C               	decf	_bottom_push_state^(0+128),w	;volatile
  6252  0E39  1903               	btfsc	3,2
  6253  0E3A  2E3F               	goto	l3864
  6254  0E3B  3005               	movlw	5
  6255  0E3C  066C               	xorwf	_bottom_push_state^(0+128),w	;volatile
  6256  0E3D  1D03               	btfss	3,2
  6257  0E3E  2E48               	goto	l3868
  6258  0E3F                     l3864:	
  6259                           
  6260                           ;main.c: 302: if (mod_counter >= 61) {
  6261  0E3F  0854               	movf	(_mod_counter+1)^(0+128),w
  6262  0E40  3A80               	xorlw	128
  6263  0E41  00AA               	movwf	??_main^(0+128)
  6264  0E42  3080               	movlw	128
  6265  0E43  022A               	subwf	??_main^(0+128),w
  6266  0E44  1D03               	skipz
  6267  0E45  2E51               	goto	u4025
  6268  0E46  303D               	movlw	61
  6269  0E47  2E50               	goto	L1
  6270  0E48                     l3868:	
  6271                           ;main.c: 304: }
  6272                           ;main.c: 305: } else {
  6273                           
  6274                           ;main.c: 303: mod_counter = 0;
  6275                           
  6276                           
  6277                           ;main.c: 306: if (mod_counter > 31) {
  6278  0E48  0854               	movf	(_mod_counter+1)^(0+128),w
  6279  0E49  3A80               	xorlw	128
  6280  0E4A  00AA               	movwf	??_main^(0+128)
  6281  0E4B  3080               	movlw	128
  6282  0E4C  022A               	subwf	??_main^(0+128),w
  6283  0E4D  1D03               	skipz
  6284  0E4E  2E51               	goto	u4025
  6285  0E4F  3020               	movlw	32
  6286  0E50                     L1:	
  6287  0E50  0253               	subwf	_mod_counter^(0+128),w
  6288  0E51                     u4025:	
  6289  0E51  1C03               	skipc
  6290  0E52  2E56               	goto	l3872
  6291                           
  6292                           ;main.c: 307: mod_counter = 0;
  6293  0E53  0021               	movlb	1	; select bank1
  6294  0E54  01D3               	clrf	_mod_counter^(0+128)
  6295  0E55  01D4               	clrf	(_mod_counter+1)^(0+128)
  6296  0E56                     l3872:	
  6297                           
  6298                           ;main.c: 308: }
  6299                           ;main.c: 309: }
  6300                           ;main.c: 312: signed int adjusted_pot_value = map(knob5_prev, 0, 1023, 1275, 0);
  6301  0E56  3000               	movlw	0
  6302  0E57  0020               	movlb	0	; select bank0
  6303  0E58  00E1               	movwf	map@out_max
  6304  0E59  3000               	movlw	0
  6305  0E5A  00E2               	movwf	map@out_max+1
  6306  0E5B  3000               	movlw	0
  6307  0E5C  00E3               	movwf	map@out_max+2
  6308  0E5D  3060               	movlw	96
  6309  0E5E  00DE               	movwf	map@out_min
  6310  0E5F  309F               	movlw	159
  6311  0E60  00DF               	movwf	map@out_min+1
  6312  0E61  3044               	movlw	68
  6313  0E62  00E0               	movwf	map@out_min+2
  6314  0E63  30C0               	movlw	192
  6315  0E64  00DB               	movwf	map@in_max
  6316  0E65  307F               	movlw	127
  6317  0E66  00DC               	movwf	map@in_max+1
  6318  0E67  3044               	movlw	68
  6319  0E68  00DD               	movwf	map@in_max+2
  6320  0E69  3000               	movlw	0
  6321  0E6A  00D8               	movwf	map@in_min
  6322  0E6B  3000               	movlw	0
  6323  0E6C  00D9               	movwf	map@in_min+1
  6324  0E6D  3000               	movlw	0
  6325  0E6E  00DA               	movwf	map@in_min+2
  6326  0E6F  0022               	movlb	2	; select bank2
  6327  0E70  0865               	movf	(_knob5_prev+1)^(0+256),w
  6328  0E71  0020               	movlb	0	; select bank0
  6329  0E72  00A9               	movwf	___awtoft@c+1
  6330  0E73  0022               	movlb	2	; select bank2
  6331  0E74  0864               	movf	_knob5_prev^(0+256),w
  6332  0E75  0020               	movlb	0	; select bank0
  6333  0E76  00A8               	movwf	___awtoft@c
  6334  0E77  3190  2001  3189   	fcall	___awtoft
  6335  0E7A  0020               	movlb	0	; select bank0
  6336  0E7B  0828               	movf	?___awtoft,w
  6337  0E7C  00D5               	movwf	map@x
  6338  0E7D  0829               	movf	?___awtoft+1,w
  6339  0E7E  00D6               	movwf	map@x+1
  6340  0E7F  082A               	movf	?___awtoft+2,w
  6341  0E80  00D7               	movwf	map@x+2
  6342  0E81  3188  201B  3189   	fcall	_map
  6343  0E84  0020               	movlb	0	; select bank0
  6344  0E85  0855               	movf	?_map,w
  6345  0E86  00E7               	movwf	___fttol@f1
  6346  0E87  0856               	movf	?_map+1,w
  6347  0E88  00E8               	movwf	___fttol@f1+1
  6348  0E89  0857               	movf	?_map+2,w
  6349  0E8A  00E9               	movwf	___fttol@f1+2
  6350  0E8B  3188  20A6  3189   	fcall	___fttol
  6351  0E8E  0020               	movlb	0	; select bank0
  6352  0E8F  0868               	movf	?___fttol+1,w
  6353  0E90  0021               	movlb	1	; select bank1
  6354  0E91  00BE               	movwf	(main@adjusted_pot_value+1)^(0+128)
  6355  0E92  0020               	movlb	0	; select bank0
  6356  0E93  0867               	movf	?___fttol,w
  6357  0E94  0021               	movlb	1	; select bank1
  6358  0E95  00BD               	movwf	main@adjusted_pot_value^(0+128)
  6359                           
  6360                           ;main.c: 313: switch (bottom_push_state) {
  6361  0E96  2EF2               	goto	l3902
  6362  0E97                     l3874:	
  6363                           ;main.c: 314: case 1:
  6364                           
  6365                           
  6366                           ;main.c: 315: mod_value = mod5[mod_counter];
  6367  0E97  0854               	movf	(_mod_counter+1)^(0+128),w
  6368  0E98  00AB               	movwf	(??_main^(0+128)+1)
  6369  0E99  0853               	movf	_mod_counter^(0+128),w
  6370  0E9A  00AA               	movwf	??_main^(0+128)
  6371  0E9B  35AA               	lslf	??_main^(0+128),f
  6372  0E9C  0DAB               	rlf	(??_main^(0+128)+1),f
  6373  0E9D  3078               	movlw	120
  6374  0E9E  00AC               	movwf	(??_main+2)^(0+128)
  6375  0E9F  3023               	movlw	35
  6376  0EA0  00AD               	movwf	((??_main+2)^(0+128)+1)
  6377  0EA1  082A               	movf	??_main^(0+128),w
  6378  0EA2  072C               	addwf	(??_main+2)^(0+128),w
  6379  0EA3  0086               	movwf	6
  6380  0EA4  082B               	movf	(??_main+1)^(0+128),w
  6381  0EA5  3D2D               	addwfc	(??_main+3)^(0+128),w
  6382  0EA6  0087               	movwf	7
  6383  0EA7  3F40               	moviw [0]fsr1
  6384  0EA8  0022               	movlb	2	; select bank2
  6385  0EA9  00D4               	movwf	_mod_value^(0+256)
  6386  0EAA  3F41               	moviw [1]fsr1
  6387  0EAB  2ECC               	goto	L4
  6388  0EAC                     l3878:	
  6389                           ;main.c: 318: case 2:
  6390                           
  6391                           ;main.c: 317: break;
  6392                           
  6393                           ;main.c: 316: PORTCbits.RC4 = 0;
  6394                           
  6395                           
  6396                           ;main.c: 319: mod_value = mod2[mod_counter];
  6397  0EAC  0021               	movlb	1	; select bank1
  6398  0EAD  3553               	lslf	_mod_counter^(0+128),w
  6399  0EAE  3EA0               	addlw	(low (_mod2| (0+512)))& (0+255)
  6400  0EAF  0086               	movwf	6
  6401  0EB0  3002               	movlw	2	; select bank5/6
  6402  0EB1  0087               	movwf	7
  6403  0EB2  3F40               	moviw [0]fsr1
  6404  0EB3  0022               	movlb	2	; select bank2
  6405  0EB4  00D4               	movwf	_mod_value^(0+256)
  6406  0EB5  3F41               	moviw [1]fsr1
  6407  0EB6  2ECC               	goto	L4
  6408  0EB7                     l3882:	
  6409                           ;main.c: 322: case 3:
  6410                           
  6411                           ;main.c: 321: break;
  6412                           
  6413                           ;main.c: 320: PORTCbits.RC4 = 0;
  6414                           
  6415                           
  6416                           ;main.c: 323: mod_value = mod3[mod_counter];
  6417  0EB7  0021               	movlb	1	; select bank1
  6418  0EB8  3553               	lslf	_mod_counter^(0+128),w
  6419  0EB9  3E20               	addlw	(low (_mod3| (0+768)))& (0+255)
  6420  0EBA  0086               	movwf	6
  6421  0EBB  3003               	movlw	3	; select bank6/7
  6422  0EBC  0087               	movwf	7
  6423  0EBD  3F40               	moviw [0]fsr1
  6424  0EBE  0022               	movlb	2	; select bank2
  6425  0EBF  00D4               	movwf	_mod_value^(0+256)
  6426  0EC0  3F41               	moviw [1]fsr1
  6427  0EC1  2ECC               	goto	L4
  6428  0EC2                     l3886:	
  6429                           ;main.c: 326: case 4:
  6430                           
  6431                           ;main.c: 325: break;
  6432                           
  6433                           ;main.c: 324: PORTCbits.RC4 = 0;
  6434                           
  6435                           
  6436                           ;main.c: 327: mod_value = mod4[mod_counter];
  6437  0EC2  0021               	movlb	1	; select bank1
  6438  0EC3  3553               	lslf	_mod_counter^(0+128),w
  6439  0EC4  3EA0               	addlw	(low (_mod4| (0+768)))& (0+255)
  6440  0EC5  0086               	movwf	6
  6441  0EC6  3003               	movlw	3	; select bank7/8
  6442  0EC7  0087               	movwf	7
  6443  0EC8  3F40               	moviw [0]fsr1
  6444  0EC9  0022               	movlb	2	; select bank2
  6445  0ECA  00D4               	movwf	_mod_value^(0+256)
  6446  0ECB  3F41               	moviw [1]fsr1
  6447  0ECC                     L4:	
  6448  0ECC  00D5               	movwf	(_mod_value+1)^(0+256)
  6449  0ECD  2EEF               	goto	l3898
  6450  0ECE                     l3890:	
  6451                           ;main.c: 330: case 5:
  6452                           
  6453                           ;main.c: 329: break;
  6454                           
  6455                           ;main.c: 328: PORTCbits.RC4 = 0;
  6456                           
  6457                           
  6458                           ;main.c: 331: mod_value = mod5[mod_counter];
  6459  0ECE  0021               	movlb	1	; select bank1
  6460  0ECF  0854               	movf	(_mod_counter+1)^(0+128),w
  6461  0ED0  00AB               	movwf	(??_main^(0+128)+1)
  6462  0ED1  0853               	movf	_mod_counter^(0+128),w
  6463  0ED2  00AA               	movwf	??_main^(0+128)
  6464  0ED3  35AA               	lslf	??_main^(0+128),f
  6465  0ED4  0DAB               	rlf	(??_main^(0+128)+1),f
  6466  0ED5  3078               	movlw	120
  6467  0ED6  00AC               	movwf	(??_main+2)^(0+128)
  6468  0ED7  3023               	movlw	35
  6469  0ED8  00AD               	movwf	((??_main+2)^(0+128)+1)
  6470  0ED9  082A               	movf	??_main^(0+128),w
  6471  0EDA  072C               	addwf	(??_main+2)^(0+128),w
  6472  0EDB  0086               	movwf	6
  6473  0EDC  082B               	movf	(??_main+1)^(0+128),w
  6474  0EDD  3D2D               	addwfc	(??_main+3)^(0+128),w
  6475  0EDE  0087               	movwf	7
  6476  0EDF  3F40               	moviw [0]fsr1
  6477  0EE0  0022               	movlb	2	; select bank2
  6478  0EE1  00D4               	movwf	_mod_value^(0+256)
  6479  0EE2  3F41               	moviw [1]fsr1
  6480  0EE3  00D5               	movwf	(_mod_value+1)^(0+256)
  6481                           
  6482                           ;main.c: 332: adjusted_pot_value = 1275;
  6483  0EE4  30FB               	movlw	251
  6484  0EE5  0021               	movlb	1	; select bank1
  6485  0EE6  00BD               	movwf	main@adjusted_pot_value^(0+128)
  6486  0EE7  3004               	movlw	4
  6487  0EE8  00BE               	movwf	(main@adjusted_pot_value^(0+128)+1)
  6488                           
  6489                           ;main.c: 333: PORTCbits.RC4 = 1;
  6490  0EE9  0020               	movlb	0	; select bank0
  6491  0EEA  160E               	bsf	14,4	;volatile
  6492                           
  6493                           ;main.c: 334: break;
  6494  0EEB  2F07               	goto	l3904
  6495  0EEC                     l3896:	
  6496                           ;main.c: 335: case 6:
  6497                           
  6498                           
  6499                           ;main.c: 336: mod_value = 0;
  6500  0EEC  0022               	movlb	2	; select bank2
  6501  0EED  01D4               	clrf	_mod_value^(0+256)
  6502  0EEE  01D5               	clrf	(_mod_value+1)^(0+256)
  6503  0EEF                     l3898:	
  6504                           
  6505                           ;main.c: 337: PORTCbits.RC4 = 0;
  6506  0EEF  0020               	movlb	0	; select bank0
  6507  0EF0  120E               	bcf	14,4	;volatile
  6508                           
  6509                           ;main.c: 339: }
  6510                           
  6511                           ;main.c: 338: break;
  6512  0EF1  2F07               	goto	l3904
  6513  0EF2                     l3902:	
  6514  0EF2  0021               	movlb	1	; select bank1
  6515  0EF3  086C               	movf	_bottom_push_state^(0+128),w	;volatile
  6516                           
  6517                           ; Switch size 1, requested type "space"
  6518                           ; Number of cases is 6, Range of values is 1 to 6
  6519                           ; switch strategies available:
  6520                           ; Name         Instructions Cycles
  6521                           ; simple_byte           19    10 (average)
  6522                           ; direct_byte           21     9 (fixed)
  6523                           ; jumptable            263     9 (fixed)
  6524                           ;	Chosen strategy is simple_byte
  6525  0EF4  3A01               	xorlw	1	; case 1
  6526  0EF5  1903               	skipnz
  6527  0EF6  2E97               	goto	l3874
  6528  0EF7  3A03               	xorlw	3	; case 2
  6529  0EF8  1903               	skipnz
  6530  0EF9  2EAC               	goto	l3878
  6531  0EFA  3A01               	xorlw	1	; case 3
  6532  0EFB  1903               	skipnz
  6533  0EFC  2EB7               	goto	l3882
  6534  0EFD  3A07               	xorlw	7	; case 4
  6535  0EFE  1903               	skipnz
  6536  0EFF  2EC2               	goto	l3886
  6537  0F00  3A01               	xorlw	1	; case 5
  6538  0F01  1903               	skipnz
  6539  0F02  2ECE               	goto	l3890
  6540  0F03  3A03               	xorlw	3	; case 6
  6541  0F04  1903               	skipnz
  6542  0F05  2EEC               	goto	l3896
  6543  0F06  2F07               	goto	l3904
  6544  0F07                     l3904:	
  6545                           
  6546                           ;main.c: 340: mod_value = modulation(mod_value, adjusted_pot_value);
  6547  0F07  0022               	movlb	2	; select bank2
  6548  0F08  0855               	movf	(_mod_value+1)^(0+256),w
  6549  0F09  0020               	movlb	0	; select bank0
  6550  0F0A  00B6               	movwf	modulation@x+1
  6551  0F0B  0022               	movlb	2	; select bank2
  6552  0F0C  0854               	movf	_mod_value^(0+256),w
  6553  0F0D  0020               	movlb	0	; select bank0
  6554  0F0E  00B5               	movwf	modulation@x
  6555  0F0F  0021               	movlb	1	; select bank1
  6556  0F10  083E               	movf	(main@adjusted_pot_value+1)^(0+128),w
  6557  0F11  0020               	movlb	0	; select bank0
  6558  0F12  00B8               	movwf	modulation@y+1
  6559  0F13  0021               	movlb	1	; select bank1
  6560  0F14  083D               	movf	main@adjusted_pot_value^(0+128),w
  6561  0F15  0020               	movlb	0	; select bank0
  6562  0F16  00B7               	movwf	modulation@y
  6563  0F17  3192  223A  3189   	fcall	_modulation
  6564  0F1A  0020               	movlb	0	; select bank0
  6565  0F1B  0836               	movf	?_modulation+1,w
  6566  0F1C  0022               	movlb	2	; select bank2
  6567  0F1D  00D5               	movwf	(_mod_value+1)^(0+256)
  6568  0F1E  0020               	movlb	0	; select bank0
  6569  0F1F  0835               	movf	?_modulation,w
  6570  0F20  0022               	movlb	2	; select bank2
  6571  0F21  00D4               	movwf	_mod_value^(0+256)
  6572                           
  6573                           ;main.c: 341: CCPR9 = mod_value / 2;
  6574  0F22  3002               	movlw	2
  6575  0F23  0020               	movlb	0	; select bank0
  6576  0F24  00A0               	movwf	___awdiv@divisor
  6577  0F25  3000               	movlw	0
  6578  0F26  00A1               	movwf	___awdiv@divisor+1
  6579  0F27  0022               	movlb	2	; select bank2
  6580  0F28  0855               	movf	(_mod_value+1)^(0+256),w
  6581  0F29  0020               	movlb	0	; select bank0
  6582  0F2A  00A3               	movwf	___awdiv@dividend+1
  6583  0F2B  0022               	movlb	2	; select bank2
  6584  0F2C  0854               	movf	_mod_value^(0+256),w
  6585  0F2D  0020               	movlb	0	; select bank0
  6586  0F2E  00A2               	movwf	___awdiv@dividend
  6587  0F2F  3195  257E  3189   	fcall	___awdiv
  6588  0F32  0020               	movlb	0	; select bank0
  6589  0F33  0821               	movf	?___awdiv+1,w
  6590  0F34  002C               	movlb	12	; select bank12
  6591  0F35  009B               	movwf	27	;volatile
  6592  0F36  0020               	movlb	0	; select bank0
  6593  0F37  0820               	movf	?___awdiv,w
  6594  0F38  002C               	movlb	12	; select bank12
  6595  0F39  009A               	movwf	26	;volatile
  6596                           
  6597                           ;main.c: 342: mod_timer = 0;
  6598  0F3A  3000               	movlw	0
  6599  0F3B  0022               	movlb	2	; select bank2
  6600  0F3C  00BB               	movwf	(_mod_timer+3)^(0+256)	;volatile
  6601  0F3D  3000               	movlw	0
  6602  0F3E  00BA               	movwf	(_mod_timer+2)^(0+256)	;volatile
  6603  0F3F  3000               	movlw	0
  6604  0F40  00B9               	movwf	(_mod_timer+1)^(0+256)	;volatile
  6605  0F41  3000               	movlw	0
  6606  0F42  00B8               	movwf	_mod_timer^(0+256)	;volatile
  6607  0F43                     l3908:	
  6608                           
  6609                           ;main.c: 343: }
  6610                           ;main.c: 348: if (delay_time_changed == 1) {
  6611  0F43  035C               	decf	_delay_time_changed^(0+256),w
  6612  0F44  045D               	iorwf	(_delay_time_changed+1)^(0+256),w
  6613  0F45  1D03               	btfss	3,2
  6614  0F46  2954               	goto	l3724
  6615                           
  6616                           ;main.c: 349: delay_time = baseline_delay_time;
  6617  0F47  0021               	movlb	1	; select bank1
  6618  0F48  0861               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
  6619  0F49  00E5               	movwf	(_delay_time+3)^(0+128)	;volatile
  6620  0F4A  0860               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
  6621  0F4B  00E4               	movwf	(_delay_time+2)^(0+128)	;volatile
  6622  0F4C  085F               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6623  0F4D  00E3               	movwf	(_delay_time+1)^(0+128)	;volatile
  6624  0F4E  085E               	movf	_baseline_delay_time^(0+128),w	;volatile
  6625  0F4F  00E2               	movwf	_delay_time^(0+128)	;volatile
  6626                           
  6627                           ;main.c: 350: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  6628  0F50  085F               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
  6629  0F51  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  6630  0F52  085E               	movf	_baseline_delay_time^(0+128),w	;volatile
  6631  0F53  00A6               	movwf	set_subdivision@x^(0+128)
  6632  0F54  087D               	movf	_top_push_state,w	;volatile
  6633  0F55  00AA               	movwf	??_main^(0+128)
  6634  0F56  01AB               	clrf	(??_main^(0+128)+1)
  6635  0F57  082A               	movf	??_main^(0+128),w
  6636  0F58  00A8               	movwf	set_subdivision@y^(0+128)
  6637  0F59  082B               	movf	(??_main+1)^(0+128),w
  6638  0F5A  00A9               	movwf	(set_subdivision@y+1)^(0+128)
  6639  0F5B  3184  2456  3189   	fcall	_set_subdivision
  6640  0F5E  0021               	movlb	1	; select bank1
  6641  0F5F  0826               	movf	?_set_subdivision^(0+128),w
  6642  0F60  00E2               	movwf	_delay_time^(0+128)	;volatile
  6643  0F61  0827               	movf	(?_set_subdivision+1)^(0+128),w
  6644  0F62  00E3               	movwf	(_delay_time+1)^(0+128)	;volatile
  6645  0F63  0D89               	rlf	9,f
  6646  0F64  3B89               	subwfb	9,f
  6647  0F65  0989               	comf	9,f
  6648  0F66  00E4               	movwf	(_delay_time+2)^(0+128)	;volatile
  6649  0F67  00E5               	movwf	(_delay_time+3)^(0+128)	;volatile
  6650                           
  6651                           ;main.c: 351: delayfound = 0;
  6652  0F68  0022               	movlb	2	; select bank2
  6653  0F69  01D0               	clrf	_delayfound^(0+256)
  6654  0F6A  01D1               	clrf	(_delayfound+1)^(0+256)
  6655                           
  6656                           ;main.c: 352: delay_counter = 0;
  6657  0F6B  01CE               	clrf	_delay_counter^(0+256)
  6658  0F6C  01CF               	clrf	(_delay_counter+1)^(0+256)
  6659  0F6D                     l3924:	
  6660                           ;main.c: 353: while (delayfound == 0) {
  6661                           
  6662  0F6D  0022               	movlb	2	; select bank2
  6663  0F6E  0850               	movf	_delayfound^(0+256),w
  6664  0F6F  0451               	iorwf	(_delayfound+1)^(0+256),w
  6665  0F70  1D03               	btfss	3,2
  6666  0F71  2FC8               	goto	l3926
  6667                           
  6668                           ;main.c: 354: if (delay[delay_counter] <= delay_time * 2) {
  6669  0F72  084F               	movf	(_delay_counter+1)^(0+256),w
  6670  0F73  0021               	movlb	1	; select bank1
  6671  0F74  00AB               	movwf	(??_main^(0+128)+1)
  6672  0F75  0022               	movlb	2	; select bank2
  6673  0F76  084E               	movf	_delay_counter^(0+256),w
  6674  0F77  0021               	movlb	1	; select bank1
  6675  0F78  00AA               	movwf	??_main^(0+128)
  6676  0F79  35AA               	lslf	??_main^(0+128),f
  6677  0F7A  0DAB               	rlf	(??_main^(0+128)+1),f
  6678  0F7B  30F2               	movlw	242
  6679  0F7C  00AC               	movwf	(??_main+2)^(0+128)
  6680  0F7D  3023               	movlw	35
  6681  0F7E  00AD               	movwf	((??_main+2)^(0+128)+1)
  6682  0F7F  082A               	movf	??_main^(0+128),w
  6683  0F80  072C               	addwf	(??_main+2)^(0+128),w
  6684  0F81  0086               	movwf	6
  6685  0F82  082B               	movf	(??_main+1)^(0+128),w
  6686  0F83  3D2D               	addwfc	(??_main+3)^(0+128),w
  6687  0F84  0087               	movwf	7
  6688  0F85  3F40               	moviw [0]fsr1
  6689  0F86  00AE               	movwf	(??_main+4)^(0+128)
  6690  0F87  3F41               	moviw [1]fsr1
  6691  0F88  00AF               	movwf	((??_main+4)^(0+128)+1)
  6692  0F89  082E               	movf	(??_main+4)^(0+128),w
  6693  0F8A  00B0               	movwf	(??_main+6)^(0+128)
  6694  0F8B  082F               	movf	(??_main+5)^(0+128),w
  6695  0F8C  00B1               	movwf	((??_main+6)^(0+128)+1)
  6696  0F8D  3000               	movlw	0
  6697  0F8E  1BB1               	btfsc	((??_main+6)^(0+128)+1),7
  6698  0F8F  30FF               	movlw	255
  6699  0F90  00B2               	movwf	((??_main+6)^(0+128)+2)
  6700  0F91  00B3               	movwf	((??_main+6)^(0+128)+3)
  6701  0F92  0862               	movf	_delay_time^(0+128),w	;volatile
  6702  0F93  00B4               	movwf	(??_main+10)^(0+128)
  6703  0F94  0863               	movf	(_delay_time+1)^(0+128),w	;volatile
  6704  0F95  00B5               	movwf	((??_main+10)^(0+128)+1)
  6705  0F96  0864               	movf	(_delay_time+2)^(0+128),w	;volatile
  6706  0F97  00B6               	movwf	((??_main+10)^(0+128)+2)
  6707  0F98  0865               	movf	(_delay_time+3)^(0+128),w	;volatile
  6708  0F99  00B7               	movwf	((??_main+10)^(0+128)+3)
  6709  0F9A  3001               	movlw	1
  6710  0F9B                     u4045:	
  6711  0F9B  35B4               	lslf	(??_main+10)^(0+128),f
  6712  0F9C  0DB5               	rlf	((??_main+10)^(0+128)+1),f
  6713  0F9D  0DB6               	rlf	((??_main+10)^(0+128)+2),f
  6714  0F9E  0DB7               	rlf	((??_main+10)^(0+128)+3),f
  6715  0F9F  0B89               	decfsz	9,f
  6716  0FA0  2F9B               	goto	u4045
  6717  0FA1  0837               	movf	(??_main+13)^(0+128),w
  6718  0FA2  3A80               	xorlw	128
  6719  0FA3  00B8               	movwf	(??_main+14)^(0+128)
  6720  0FA4  0833               	movf	(??_main+9)^(0+128),w
  6721  0FA5  3A80               	xorlw	128
  6722  0FA6  0238               	subwf	(??_main+14)^(0+128),w
  6723  0FA7  1D03               	skipz
  6724  0FA8  2FB3               	goto	u4053
  6725  0FA9  0832               	movf	(??_main+8)^(0+128),w
  6726  0FAA  0236               	subwf	(??_main+12)^(0+128),w
  6727  0FAB  1D03               	skipz
  6728  0FAC  2FB3               	goto	u4053
  6729  0FAD  0831               	movf	(??_main+7)^(0+128),w
  6730  0FAE  0235               	subwf	(??_main+11)^(0+128),w
  6731  0FAF  1D03               	skipz
  6732  0FB0  2FB3               	goto	u4053
  6733  0FB1  0830               	movf	(??_main+6)^(0+128),w
  6734  0FB2  0234               	subwf	(??_main+10)^(0+128),w
  6735  0FB3                     u4053:	
  6736  0FB3  1C03               	skipc
  6737  0FB4  2FC2               	goto	l3922
  6738                           
  6739                           ;main.c: 355: delayfound = 1;
  6740  0FB5  3001               	movlw	1
  6741  0FB6  0022               	movlb	2	; select bank2
  6742  0FB7  00D0               	movwf	_delayfound^(0+256)
  6743  0FB8  3000               	movlw	0
  6744  0FB9  00D1               	movwf	(_delayfound^(0+256)+1)
  6745                           
  6746                           ;main.c: 356: CCPR1 = delay_counter;
  6747  0FBA  084F               	movf	(_delay_counter+1)^(0+256),w
  6748  0FBB  0025               	movlb	5	; select bank5
  6749  0FBC  0092               	movwf	18	;volatile
  6750  0FBD  0022               	movlb	2	; select bank2
  6751  0FBE  084E               	movf	_delay_counter^(0+256),w
  6752  0FBF  0025               	movlb	5	; select bank5
  6753  0FC0  0091               	movwf	17	;volatile
  6754                           
  6755                           ;main.c: 357: } else {
  6756  0FC1  2F6D               	goto	l3924
  6757  0FC2                     l3922:	
  6758                           
  6759                           ;main.c: 358: delay_counter++;
  6760  0FC2  3001               	movlw	1
  6761  0FC3  0022               	movlb	2	; select bank2
  6762  0FC4  07CE               	addwf	_delay_counter^(0+256),f
  6763  0FC5  3000               	movlw	0
  6764  0FC6  3DCF               	addwfc	(_delay_counter+1)^(0+256),f
  6765  0FC7  2F6D               	goto	l3924
  6766  0FC8                     l3926:	
  6767                           
  6768                           ;main.c: 359: }
  6769                           ;main.c: 360: }
  6770                           ;main.c: 361: mod_delay_time = delay_time / 7.5;
  6771  0FC8  0021               	movlb	1	; select bank1
  6772  0FC9  0865               	movf	(_delay_time+3)^(0+128),w	;volatile
  6773  0FCA  0020               	movlb	0	; select bank0
  6774  0FCB  00AB               	movwf	___altoft@c+3
  6775  0FCC  0021               	movlb	1	; select bank1
  6776  0FCD  0864               	movf	(_delay_time+2)^(0+128),w	;volatile
  6777  0FCE  0020               	movlb	0	; select bank0
  6778  0FCF  00AA               	movwf	___altoft@c+2
  6779  0FD0  0021               	movlb	1	; select bank1
  6780  0FD1  0863               	movf	(_delay_time+1)^(0+128),w	;volatile
  6781  0FD2  0020               	movlb	0	; select bank0
  6782  0FD3  00A9               	movwf	___altoft@c+1
  6783  0FD4  0021               	movlb	1	; select bank1
  6784  0FD5  0862               	movf	_delay_time^(0+128),w	;volatile
  6785  0FD6  0020               	movlb	0	; select bank0
  6786  0FD7  00A8               	movwf	___altoft@c
  6787  0FD8  3191  21FD  3189   	fcall	___altoft
  6788  0FDB  0020               	movlb	0	; select bank0
  6789  0FDC  0828               	movf	?___altoft,w
  6790  0FDD  00C8               	movwf	___ftdiv@f1
  6791  0FDE  0829               	movf	?___altoft+1,w
  6792  0FDF  00C9               	movwf	___ftdiv@f1+1
  6793  0FE0  082A               	movf	?___altoft+2,w
  6794  0FE1  00CA               	movwf	___ftdiv@f1+2
  6795  0FE2  3000               	movlw	0
  6796  0FE3  00C5               	movwf	___ftdiv@f2
  6797  0FE4  30F0               	movlw	240
  6798  0FE5  00C6               	movwf	___ftdiv@f2+1
  6799  0FE6  3040               	movlw	64
  6800  0FE7  00C7               	movwf	___ftdiv@f2+2
  6801  0FE8  3186  26F9  3189   	fcall	___ftdiv
  6802  0FEB  0020               	movlb	0	; select bank0
  6803  0FEC  0845               	movf	?___ftdiv,w
  6804  0FED  00E7               	movwf	___fttol@f1
  6805  0FEE  0846               	movf	?___ftdiv+1,w
  6806  0FEF  00E8               	movwf	___fttol@f1+1
  6807  0FF0  0847               	movf	?___ftdiv+2,w
  6808  0FF1  00E9               	movwf	___fttol@f1+2
  6809  0FF2  3188  20A6  3189   	fcall	___fttol
  6810  0FF5  0020               	movlb	0	; select bank0
  6811  0FF6  0868               	movf	?___fttol+1,w
  6812  0FF7  0022               	movlb	2	; select bank2
  6813  0FF8  00E7               	movwf	(_mod_delay_time+1)^(0+256)
  6814  0FF9  0020               	movlb	0	; select bank0
  6815  0FFA  0867               	movf	?___fttol,w
  6816  0FFB  0022               	movlb	2	; select bank2
  6817  0FFC  00E6               	movwf	_mod_delay_time^(0+256)
  6818                           
  6819                           ;main.c: 363: delay_time_changed = 0;
  6820  0FFD  01DC               	clrf	_delay_time_changed^(0+256)
  6821  0FFE  01DD               	clrf	(_delay_time_changed+1)^(0+256)
  6822  0FFF  2954               	goto	l3724
  6823  1000                     __end_of_main:	
  6824                           
  6825                           	psect	text1
  6826  13BD                     __ptext1:	
  6827 ;; *************** function _update_mode *****************
  6828 ;; Defined at:
  6829 ;;		line 60 in file "tactiles.c"
  6830 ;; Parameters:    Size  Location     Type
  6831 ;;		None
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;		None
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  1    wreg      void 
  6836 ;; Registers used:
  6837 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6845 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6847 ;;Total ram usage:        1 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; Hardware stack levels required when called:    2
  6850 ;; This function calls:
  6851 ;;		Nothing
  6852 ;; This function is called by:
  6853 ;;		_main
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           
  6858                           ;psect for function _update_mode
  6859  13BD                     _update_mode:	
  6860                           
  6861                           ;tactiles.c: 65: if (PORTCbits.RC0 == 0) {
  6862                           
  6863                           ;incstack = 0
  6864                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  6865  13BD  0020               	movlb	0	; select bank0
  6866  13BE  180E               	btfsc	14,0	;volatile
  6867  13BF  2BFE               	goto	l3484
  6868                           
  6869                           ;tactiles.c: 66: debounce_mode2++;
  6870  13C0  3001               	movlw	1
  6871  13C1  0022               	movlb	2	; select bank2
  6872  13C2  07CC               	addwf	_debounce_mode2^(0+256),f
  6873  13C3  3000               	movlw	0
  6874  13C4  3DCD               	addwfc	(_debounce_mode2+1)^(0+256),f
  6875                           
  6876                           ;tactiles.c: 67: if (debounce_mode2 > 25) {
  6877  13C5  084D               	movf	(_debounce_mode2+1)^(0+256),w
  6878  13C6  3A80               	xorlw	128
  6879  13C7  0020               	movlb	0	; select bank0
  6880  13C8  00A0               	movwf	??_update_mode
  6881  13C9  3080               	movlw	128
  6882  13CA  0220               	subwf	??_update_mode,w
  6883  13CB  1D03               	skipz
  6884  13CC  2BD0               	goto	u3325
  6885  13CD  301A               	movlw	26
  6886  13CE  0022               	movlb	2	; select bank2
  6887  13CF  024C               	subwf	_debounce_mode2^(0+256),w
  6888  13D0                     u3325:	
  6889  13D0  1C03               	skipc
  6890  13D1  0008               	return
  6891                           
  6892                           ;tactiles.c: 68: debounce_mode2 = 25;
  6893  13D2  3019               	movlw	25
  6894  13D3  0022               	movlb	2	; select bank2
  6895  13D4  00CC               	movwf	_debounce_mode2^(0+256)
  6896  13D5  3000               	movlw	0
  6897  13D6  00CD               	movwf	(_debounce_mode2^(0+256)+1)
  6898                           
  6899                           ;tactiles.c: 69: mode2_state++;
  6900  13D7  3001               	movlw	1
  6901  13D8  0020               	movlb	0	; select bank0
  6902  13D9  00A0               	movwf	??_update_mode
  6903  13DA  0820               	movf	??_update_mode,w
  6904  13DB  0021               	movlb	1	; select bank1
  6905  13DC  07DB               	addwf	_mode2_state^(0+128),f
  6906                           
  6907                           ;tactiles.c: 70: if (mode2_state > 2) {
  6908  13DD  3003               	movlw	3
  6909  13DE  025B               	subwf	_mode2_state^(0+128),w
  6910  13DF  1C03               	skipc
  6911  13E0  2BEE               	goto	l3482
  6912                           
  6913                           ;tactiles.c: 71: mode2_state = 0;
  6914  13E1  01DB               	clrf	_mode2_state^(0+128)
  6915                           
  6916                           ;tactiles.c: 72: }
  6917                           ;tactiles.c: 73: switch(mode2_state) {
  6918  13E2  2BEE               	goto	l3482
  6919  13E3                     l746:	
  6920                           ;tactiles.c: 74: case 0:
  6921                           
  6922                           
  6923                           ;tactiles.c: 75: LATBbits.LATB1 = 0;
  6924  13E3  0022               	movlb	2	; select bank2
  6925  13E4  108D               	bcf	13,1	;volatile
  6926  13E5  2BE8               	goto	L5
  6927  13E6                     l748:	
  6928                           ;tactiles.c: 78: case 1:
  6929                           
  6930                           ;tactiles.c: 77: break;
  6931                           
  6932                           ;tactiles.c: 76: LATBbits.LATB0 = 0;
  6933                           
  6934                           
  6935                           ;tactiles.c: 79: LATBbits.LATB1 = 1;
  6936  13E6  0022               	movlb	2	; select bank2
  6937  13E7  148D               	bsf	13,1	;volatile
  6938  13E8                     L5:	
  6939                           
  6940                           ;tactiles.c: 80: LATBbits.LATB0 = 0;
  6941  13E8  100D               	bcf	13,0	;volatile
  6942                           
  6943                           ;tactiles.c: 81: break;
  6944  13E9  2BFA               	goto	l750
  6945  13EA                     l749:	
  6946                           ;tactiles.c: 82: case 2:
  6947                           
  6948                           
  6949                           ;tactiles.c: 83: LATBbits.LATB1 = 0;
  6950  13EA  0022               	movlb	2	; select bank2
  6951  13EB  108D               	bcf	13,1	;volatile
  6952                           
  6953                           ;tactiles.c: 84: LATBbits.LATB0 = 1;
  6954  13EC  140D               	bsf	13,0	;volatile
  6955                           
  6956                           ;tactiles.c: 86: }
  6957                           
  6958                           ;tactiles.c: 85: break;
  6959  13ED  2BFA               	goto	l750
  6960  13EE                     l3482:	
  6961  13EE  0021               	movlb	1	; select bank1
  6962  13EF  085B               	movf	_mode2_state^(0+128),w
  6963                           
  6964                           ; Switch size 1, requested type "space"
  6965                           ; Number of cases is 3, Range of values is 0 to 2
  6966                           ; switch strategies available:
  6967                           ; Name         Instructions Cycles
  6968                           ; simple_byte           10     6 (average)
  6969                           ; direct_byte           12     6 (fixed)
  6970                           ; jumptable            260     6 (fixed)
  6971                           ;	Chosen strategy is simple_byte
  6972  13F0  3A00               	xorlw	0	; case 0
  6973  13F1  1903               	skipnz
  6974  13F2  2BE3               	goto	l746
  6975  13F3  3A01               	xorlw	1	; case 1
  6976  13F4  1903               	skipnz
  6977  13F5  2BE6               	goto	l748
  6978  13F6  3A03               	xorlw	3	; case 2
  6979  13F7  1903               	skipnz
  6980  13F8  2BEA               	goto	l749
  6981  13F9  2BFA               	goto	l750
  6982  13FA                     l750:	
  6983                           ;tactiles.c: 87: while (PORTCbits.RC0 == 0) {
  6984                           
  6985  13FA  0020               	movlb	0	; select bank0
  6986  13FB  180E               	btfsc	14,0	;volatile
  6987  13FC  0008               	return
  6988  13FD  2BFA               	goto	l750
  6989  13FE                     l3484:	
  6990                           ;tactiles.c: 88: }
  6991                           ;tactiles.c: 89: }
  6992                           ;tactiles.c: 90: } else {
  6993                           
  6994                           
  6995                           ;tactiles.c: 91: debounce_mode2 = 0;
  6996  13FE  0022               	movlb	2	; select bank2
  6997  13FF  01CC               	clrf	_debounce_mode2^(0+256)
  6998  1400  01CD               	clrf	(_debounce_mode2+1)^(0+256)
  6999  1401  0008               	return
  7000  1402                     __end_of_update_mode:	
  7001                           
  7002                           	psect	text2
  7003  170F                     __ptext2:	
  7004 ;; *************** function _updateSwitchBypass *****************
  7005 ;; Defined at:
  7006 ;;		line 27 in file "SwitchBypass.c"
  7007 ;; Parameters:    Size  Location     Type
  7008 ;;		None
  7009 ;; Auto vars:     Size  Location     Type
  7010 ;;		None
  7011 ;; Return value:  Size  Location     Type
  7012 ;;                  1    wreg      void 
  7013 ;; Registers used:
  7014 ;;		wreg, status,2, status,0, pclath, cstack
  7015 ;; Tracked objects:
  7016 ;;		On entry : 0/0
  7017 ;;		On exit  : 0/0
  7018 ;;		Unchanged: 0/0
  7019 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7022 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7023 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7024 ;;Total ram usage:        1 bytes
  7025 ;; Hardware stack levels used:    1
  7026 ;; Hardware stack levels required when called:    5
  7027 ;; This function calls:
  7028 ;;		_setSwitchBypassState
  7029 ;; This function is called by:
  7030 ;;		_main
  7031 ;; This function uses a non-reentrant model
  7032 ;;
  7033                           
  7034                           
  7035                           ;psect for function _updateSwitchBypass
  7036  170F                     _updateSwitchBypass:	
  7037                           
  7038                           ;SwitchBypass.c: 34: if (PORTEbits.RE1 == 0) {
  7039                           
  7040                           ;incstack = 0
  7041                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7042  170F  0020               	movlb	0	; select bank0
  7043  1710  1890               	btfsc	16,1	;volatile
  7044  1711  2F25               	goto	l3522
  7045                           
  7046                           ;SwitchBypass.c: 35: if (switchBypass_pressed > 0) {
  7047  1712  0021               	movlb	1	; select bank1
  7048  1713  0856               	movf	(_switchBypass_pressed+1)^(0+128),w
  7049  1714  3A80               	xorlw	128
  7050  1715  0020               	movlb	0	; select bank0
  7051  1716  00B2               	movwf	??_updateSwitchBypass
  7052  1717  3080               	movlw	128
  7053  1718  0232               	subwf	??_updateSwitchBypass,w
  7054  1719  1D03               	skipz
  7055  171A  2F1E               	goto	u3365
  7056  171B  3001               	movlw	1
  7057  171C  0021               	movlb	1	; select bank1
  7058  171D  0255               	subwf	_switchBypass_pressed^(0+128),w
  7059  171E                     u3365:	
  7060  171E  1C03               	skipc
  7061  171F  2F38               	goto	l3526
  7062                           
  7063                           ;SwitchBypass.c: 36: switchBypass_pressed--;
  7064  1720  30FF               	movlw	255
  7065  1721  0021               	movlb	1	; select bank1
  7066  1722  07D5               	addwf	_switchBypass_pressed^(0+128),f
  7067  1723  30FF               	movlw	255
  7068  1724  2F37               	goto	L6
  7069  1725                     l3522:	
  7070                           ;SwitchBypass.c: 37: }
  7071                           ;SwitchBypass.c: 38: } else if (switchBypass_pressed < 25) {
  7072                           
  7073  1725  0021               	movlb	1	; select bank1
  7074  1726  0856               	movf	(_switchBypass_pressed+1)^(0+128),w
  7075  1727  3A80               	xorlw	128
  7076  1728  0020               	movlb	0	; select bank0
  7077  1729  00B2               	movwf	??_updateSwitchBypass
  7078  172A  3080               	movlw	128
  7079  172B  0232               	subwf	??_updateSwitchBypass,w
  7080  172C  1D03               	skipz
  7081  172D  2F31               	goto	u3375
  7082  172E  3019               	movlw	25
  7083  172F  0021               	movlb	1	; select bank1
  7084  1730  0255               	subwf	_switchBypass_pressed^(0+128),w
  7085  1731                     u3375:	
  7086  1731  1803               	skipnc
  7087  1732  2F38               	goto	l3526
  7088                           
  7089                           ;SwitchBypass.c: 39: switchBypass_pressed++;
  7090  1733  3001               	movlw	1
  7091  1734  0021               	movlb	1	; select bank1
  7092  1735  07D5               	addwf	_switchBypass_pressed^(0+128),f
  7093  1736  3000               	movlw	0
  7094  1737                     L6:	
  7095  1737  3DD6               	addwfc	(_switchBypass_pressed+1)^(0+128),f
  7096  1738                     l3526:	
  7097                           
  7098                           ;SwitchBypass.c: 40: }
  7099                           ;SwitchBypass.c: 46: if (switchBypass_pressed == 0) {
  7100  1738  0021               	movlb	1	; select bank1
  7101  1739  0855               	movf	_switchBypass_pressed^(0+128),w
  7102  173A  0456               	iorwf	(_switchBypass_pressed+1)^(0+128),w
  7103  173B  1D03               	btfss	3,2
  7104  173C  2F58               	goto	l3540
  7105                           
  7106                           ;SwitchBypass.c: 48: if (switchBypass_state == 1) {
  7107  173D  036E               	decf	_switchBypass_state^(0+128),w
  7108  173E  1D03               	btfss	3,2
  7109  173F  2F4A               	goto	l3534
  7110                           
  7111                           ;SwitchBypass.c: 50: if (switchBypass_up == 1) {
  7112  1740  0022               	movlb	2	; select bank2
  7113  1741  0368               	decf	_switchBypass_up^(0+256),w
  7114  1742  0469               	iorwf	(_switchBypass_up+1)^(0+256),w
  7115  1743  1D03               	btfss	3,2
  7116  1744  2F54               	goto	l3538
  7117                           
  7118                           ;SwitchBypass.c: 51: switchBypass_toggle = 1;
  7119  1745  3001               	movlw	1
  7120  1746  00D6               	movwf	_switchBypass_toggle^(0+256)
  7121  1747  3000               	movlw	0
  7122  1748  00D7               	movwf	(_switchBypass_toggle^(0+256)+1)
  7123                           
  7124                           ;SwitchBypass.c: 52: }
  7125                           ;SwitchBypass.c: 53: } else {
  7126  1749  2F54               	goto	l3538
  7127  174A                     l3534:	
  7128                           
  7129                           ;SwitchBypass.c: 55: switchBypass_toggle = 0;
  7130  174A  0022               	movlb	2	; select bank2
  7131  174B  01D6               	clrf	_switchBypass_toggle^(0+256)
  7132  174C  01D7               	clrf	(_switchBypass_toggle+1)^(0+256)
  7133                           
  7134                           ;SwitchBypass.c: 56: setSwitchBypassState(1);
  7135  174D  3001               	movlw	1
  7136  174E  0020               	movlb	0	; select bank0
  7137  174F  00AE               	movwf	setSwitchBypassState@f_state
  7138  1750  3000               	movlw	0
  7139  1751  00AF               	movwf	setSwitchBypassState@f_state+1
  7140  1752  3194  244A         	fcall	_setSwitchBypassState
  7141  1754                     l3538:	
  7142                           
  7143                           ;SwitchBypass.c: 57: }
  7144                           ;SwitchBypass.c: 59: switchBypass_up = 0;
  7145  1754  0022               	movlb	2	; select bank2
  7146  1755  01E8               	clrf	_switchBypass_up^(0+256)
  7147  1756  01E9               	clrf	(_switchBypass_up+1)^(0+256)
  7148                           
  7149                           ;SwitchBypass.c: 60: } else if (switchBypass_pressed >= 25) {
  7150  1757  0008               	return
  7151  1758                     l3540:	
  7152  1758  0021               	movlb	1	; select bank1
  7153  1759  0856               	movf	(_switchBypass_pressed+1)^(0+128),w
  7154  175A  3A80               	xorlw	128
  7155  175B  0020               	movlb	0	; select bank0
  7156  175C  00B2               	movwf	??_updateSwitchBypass
  7157  175D  3080               	movlw	128
  7158  175E  0232               	subwf	??_updateSwitchBypass,w
  7159  175F  1D03               	skipz
  7160  1760  2F64               	goto	u3415
  7161  1761  3019               	movlw	25
  7162  1762  0021               	movlb	1	; select bank1
  7163  1763  0255               	subwf	_switchBypass_pressed^(0+128),w
  7164  1764                     u3415:	
  7165  1764  1C03               	skipc
  7166  1765  0008               	return
  7167                           
  7168                           ;SwitchBypass.c: 61: if (switchBypass_toggle == 1) {
  7169  1766  0022               	movlb	2	; select bank2
  7170  1767  0356               	decf	_switchBypass_toggle^(0+256),w
  7171  1768  0457               	iorwf	(_switchBypass_toggle+1)^(0+256),w
  7172  1769  1D03               	btfss	3,2
  7173  176A  2F71               	goto	l3546
  7174                           
  7175                           ;SwitchBypass.c: 62: setSwitchBypassState(0);
  7176  176B  3000               	movlw	0
  7177  176C  0020               	movlb	0	; select bank0
  7178  176D  00AE               	movwf	setSwitchBypassState@f_state
  7179  176E  00AF               	movwf	setSwitchBypassState@f_state+1
  7180  176F  3194  244A         	fcall	_setSwitchBypassState
  7181  1771                     l3546:	
  7182                           
  7183                           ;SwitchBypass.c: 63: }
  7184                           ;SwitchBypass.c: 64: switchBypass_toggle = 0;
  7185  1771  0022               	movlb	2	; select bank2
  7186  1772  01D6               	clrf	_switchBypass_toggle^(0+256)
  7187  1773  01D7               	clrf	(_switchBypass_toggle+1)^(0+256)
  7188                           
  7189                           ;SwitchBypass.c: 65: switchBypass_up = 1;
  7190  1774  3001               	movlw	1
  7191  1775  00E8               	movwf	_switchBypass_up^(0+256)
  7192  1776  3000               	movlw	0
  7193  1777  00E9               	movwf	(_switchBypass_up^(0+256)+1)
  7194                           
  7195                           ;SwitchBypass.c: 66: switchBypass_pressed = 25;
  7196  1778  3019               	movlw	25
  7197  1779  0021               	movlb	1	; select bank1
  7198  177A  00D5               	movwf	_switchBypass_pressed^(0+128)
  7199  177B  3000               	movlw	0
  7200  177C  00D6               	movwf	(_switchBypass_pressed^(0+128)+1)
  7201  177D  0008               	return
  7202  177E                     __end_of_updateSwitchBypass:	
  7203                           
  7204                           	psect	text3
  7205  1FDB                     __ptext3:	
  7206 ;; *************** function _showBootSequence *****************
  7207 ;; Defined at:
  7208 ;;		line 86 in file "LEDs.c"
  7209 ;; Parameters:    Size  Location     Type
  7210 ;;		None
  7211 ;; Auto vars:     Size  Location     Type
  7212 ;;		None
  7213 ;; Return value:  Size  Location     Type
  7214 ;;                  1    wreg      void 
  7215 ;; Registers used:
  7216 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7225 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7226 ;;Total ram usage:        0 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    5
  7229 ;; This function calls:
  7230 ;;		_getCurrentLEDState
  7231 ;;		_restoreLEDState
  7232 ;;		_solidring_tactiles
  7233 ;;		_star_tactiles
  7234 ;; This function is called by:
  7235 ;;		_main
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           
  7240                           ;psect for function _showBootSequence
  7241  1FDB                     _showBootSequence:	
  7242                           
  7243                           ;LEDs.c: 87: getCurrentLEDState();
  7244                           
  7245                           ;incstack = 0
  7246                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7247  1FDB  319F  2732  319F   	fcall	_getCurrentLEDState
  7248                           
  7249                           ;LEDs.c: 88: suspend_blink = 0;
  7250  1FDE  0021               	movlb	1	; select bank1
  7251  1FDF  01ED               	clrf	_suspend_blink^(0+128)
  7252                           
  7253                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  7254  1FE0  0022               	movlb	2	; select bank2
  7255  1FE1  120D               	bcf	13,4	;volatile
  7256                           
  7257                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  7258  1FE2  110D               	bcf	13,2	;volatile
  7259                           
  7260                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  7261  1FE3  128D               	bcf	13,5	;volatile
  7262                           
  7263                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  7264  1FE4  118D               	bcf	13,3	;volatile
  7265                           
  7266                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  7267  1FE5  100D               	bcf	13,0	;volatile
  7268                           
  7269                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  7270  1FE6  108D               	bcf	13,1	;volatile
  7271                           
  7272                           ;LEDs.c: 113: star_tactiles(0);
  7273  1FE7  3000               	movlw	0
  7274  1FE8  3196  26A0  319F   	fcall	_star_tactiles
  7275                           
  7276                           ;LEDs.c: 114: star_tactiles(0);
  7277  1FEB  3000               	movlw	0
  7278  1FEC  3196  26A0  319F   	fcall	_star_tactiles
  7279                           
  7280                           ;LEDs.c: 115: star_tactiles(1);
  7281  1FEF  3001               	movlw	1
  7282  1FF0  3196  26A0  319F   	fcall	_star_tactiles
  7283                           
  7284                           ;LEDs.c: 116: star_tactiles(1);
  7285  1FF3  3001               	movlw	1
  7286  1FF4  3196  26A0  319F   	fcall	_star_tactiles
  7287                           
  7288                           ;LEDs.c: 118: solidring_tactiles();
  7289  1FF7  3192  22F7  319F   	fcall	_solidring_tactiles
  7290                           
  7291                           ;LEDs.c: 119: solidring_tactiles();
  7292  1FFA  3192  22F7  319F   	fcall	_solidring_tactiles
  7293                           
  7294                           ;LEDs.c: 123: restoreLEDState();
  7295  1FFD  319F  2769         	fcall	_restoreLEDState
  7296  1FFF  0008               	return
  7297  2000                     __end_of_showBootSequence:	
  7298                           
  7299                           	psect	text4
  7300  16A0                     __ptext4:	
  7301 ;; *************** function _star_tactiles *****************
  7302 ;; Defined at:
  7303 ;;		line 194 in file "LEDs.c"
  7304 ;; Parameters:    Size  Location     Type
  7305 ;;  reverse         1    wreg     unsigned char 
  7306 ;; Auto vars:     Size  Location     Type
  7307 ;;  reverse         1   16[BANK0 ] unsigned char 
  7308 ;;  iLed            2   19[BANK0 ] int 
  7309 ;;  iLed            2   17[BANK0 ] int 
  7310 ;; Return value:  Size  Location     Type
  7311 ;;                  1    wreg      void 
  7312 ;; Registers used:
  7313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7314 ;; Tracked objects:
  7315 ;;		On entry : 0/0
  7316 ;;		On exit  : 0/0
  7317 ;;		Unchanged: 0/0
  7318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7320 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7321 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7322 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7323 ;;Total ram usage:        7 bytes
  7324 ;; Hardware stack levels used:    1
  7325 ;; Hardware stack levels required when called:    4
  7326 ;; This function calls:
  7327 ;;		_set_leds_bottom
  7328 ;;		_set_leds_top
  7329 ;;		_wait_ms
  7330 ;; This function is called by:
  7331 ;;		_showBootSequence
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _star_tactiles
  7337  16A0                     _star_tactiles:	
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7341                           ;star_tactiles@reverse stored from wreg
  7342  16A0  0020               	movlb	0	; select bank0
  7343  16A1  00B0               	movwf	star_tactiles@reverse
  7344                           
  7345                           ;LEDs.c: 195: if (reverse == 1) {
  7346  16A2  0330               	decf	star_tactiles@reverse,w
  7347  16A3  1D03               	btfss	3,2
  7348  16A4  2ED5               	goto	l3056
  7349                           
  7350                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  7351  16A5  3005               	movlw	5
  7352  16A6  00B1               	movwf	star_tactiles@iLed
  7353  16A7  3000               	movlw	0
  7354  16A8  00B2               	movwf	star_tactiles@iLed+1
  7355  16A9                     L7:	
  7356  16A9  1BB2               	btfsc	star_tactiles@iLed+1,7
  7357  16AA  0008               	return
  7358                           
  7359                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  7360  16AB  0832               	movf	star_tactiles@iLed+1,w
  7361  16AC  00A1               	movwf	set_leds_top@x+1
  7362  16AD  0831               	movf	star_tactiles@iLed,w
  7363  16AE  00A0               	movwf	set_leds_top@x
  7364  16AF  3001               	movlw	1
  7365  16B0  00A2               	movwf	set_leds_top@ledState
  7366  16B1  3000               	movlw	0
  7367  16B2  00A3               	movwf	set_leds_top@ledState+1
  7368  16B3  3187  27A2  3196   	fcall	_set_leds_top
  7369                           
  7370                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  7371  16B6  0020               	movlb	0	; select bank0
  7372  16B7  0931               	comf	star_tactiles@iLed,w
  7373  16B8  00AE               	movwf	??_star_tactiles
  7374  16B9  0932               	comf	star_tactiles@iLed+1,w
  7375  16BA  00AF               	movwf	??_star_tactiles+1
  7376  16BB  0AAE               	incf	??_star_tactiles,f
  7377  16BC  1903               	skipnz
  7378  16BD  0AAF               	incf	??_star_tactiles+1,f
  7379  16BE  082E               	movf	??_star_tactiles,w
  7380  16BF  3E06               	addlw	6
  7381  16C0  00A0               	movwf	set_leds_bottom@x
  7382  16C1  3000               	movlw	0
  7383  16C2  3D2F               	addwfc	??_star_tactiles+1,w
  7384  16C3  00A1               	movwf	set_leds_bottom@x+1
  7385  16C4  3191  21C2  3196   	fcall	_set_leds_bottom
  7386                           
  7387                           ;LEDs.c: 199: wait_ms(5);
  7388  16C7  3005               	movlw	5
  7389  16C8  0020               	movlb	0	; select bank0
  7390  16C9  00AC               	movwf	wait_ms@time
  7391  16CA  3000               	movlw	0
  7392  16CB  00AD               	movwf	wait_ms@time+1
  7393  16CC  3190  20A9  3196   	fcall	_wait_ms
  7394  16CF  30FF               	movlw	255
  7395  16D0  0020               	movlb	0	; select bank0
  7396  16D1  07B1               	addwf	star_tactiles@iLed,f
  7397  16D2  30FF               	movlw	255
  7398  16D3  3DB2               	addwfc	star_tactiles@iLed+1,f
  7399  16D4  2EA9               	goto	L7
  7400  16D5                     l3056:	
  7401                           ;LEDs.c: 200: }
  7402                           ;LEDs.c: 201: } else {
  7403                           
  7404                           
  7405                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  7406  16D5  3001               	movlw	1
  7407  16D6  00B3               	movwf	star_tactiles@iLed_1375
  7408  16D7  3000               	movlw	0
  7409  16D8  00B4               	movwf	star_tactiles@iLed_1375+1
  7410  16D9                     L8:	
  7411  16D9  0834               	movf	star_tactiles@iLed_1375+1,w
  7412  16DA  3A80               	xorlw	128
  7413  16DB  00AE               	movwf	??_star_tactiles
  7414  16DC  3080               	movlw	128
  7415  16DD  022E               	subwf	??_star_tactiles,w
  7416  16DE  1D03               	skipz
  7417  16DF  2EE2               	goto	u2465
  7418  16E0  3007               	movlw	7
  7419  16E1  0233               	subwf	star_tactiles@iLed_1375,w
  7420  16E2                     u2465:	
  7421  16E2  1803               	btfsc	3,0
  7422  16E3  0008               	return
  7423                           
  7424                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  7425  16E4  0020               	movlb	0	; select bank0
  7426  16E5  0834               	movf	star_tactiles@iLed_1375+1,w
  7427  16E6  00A1               	movwf	set_leds_top@x+1
  7428  16E7  0833               	movf	star_tactiles@iLed_1375,w
  7429  16E8  00A0               	movwf	set_leds_top@x
  7430  16E9  3001               	movlw	1
  7431  16EA  00A2               	movwf	set_leds_top@ledState
  7432  16EB  3000               	movlw	0
  7433  16EC  00A3               	movwf	set_leds_top@ledState+1
  7434  16ED  3187  27A2  3196   	fcall	_set_leds_top
  7435                           
  7436                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  7437  16F0  0020               	movlb	0	; select bank0
  7438  16F1  0933               	comf	star_tactiles@iLed_1375,w
  7439  16F2  00AE               	movwf	??_star_tactiles
  7440  16F3  0934               	comf	star_tactiles@iLed_1375+1,w
  7441  16F4  00AF               	movwf	??_star_tactiles+1
  7442  16F5  0AAE               	incf	??_star_tactiles,f
  7443  16F6  1903               	skipnz
  7444  16F7  0AAF               	incf	??_star_tactiles+1,f
  7445  16F8  082E               	movf	??_star_tactiles,w
  7446  16F9  3E06               	addlw	6
  7447  16FA  00A0               	movwf	set_leds_bottom@x
  7448  16FB  3000               	movlw	0
  7449  16FC  3D2F               	addwfc	??_star_tactiles+1,w
  7450  16FD  00A1               	movwf	set_leds_bottom@x+1
  7451  16FE  3191  21C2  3196   	fcall	_set_leds_bottom
  7452                           
  7453                           ;LEDs.c: 205: wait_ms(5);
  7454  1701  3005               	movlw	5
  7455  1702  0020               	movlb	0	; select bank0
  7456  1703  00AC               	movwf	wait_ms@time
  7457  1704  3000               	movlw	0
  7458  1705  00AD               	movwf	wait_ms@time+1
  7459  1706  3190  20A9  3196   	fcall	_wait_ms
  7460  1709  3001               	movlw	1
  7461  170A  0020               	movlb	0	; select bank0
  7462  170B  07B3               	addwf	star_tactiles@iLed_1375,f
  7463  170C  3000               	movlw	0
  7464  170D  3DB4               	addwfc	star_tactiles@iLed_1375+1,f
  7465  170E  2ED9               	goto	L8
  7466  170F                     __end_of_star_tactiles:	
  7467                           
  7468                           	psect	text5
  7469  12F7                     __ptext5:	
  7470 ;; *************** function _solidring_tactiles *****************
  7471 ;; Defined at:
  7472 ;;		line 223 in file "LEDs.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;		None
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  ring_delay      1   16[BANK0 ] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;                  1    wreg      void 
  7479 ;; Registers used:
  7480 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7487 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7488 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7489 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7490 ;;Total ram usage:        3 bytes
  7491 ;; Hardware stack levels used:    1
  7492 ;; Hardware stack levels required when called:    4
  7493 ;; This function calls:
  7494 ;;		_set_leds_bottom
  7495 ;;		_set_leds_top
  7496 ;;		_wait_ms
  7497 ;; This function is called by:
  7498 ;;		_showBootSequence
  7499 ;;		_showSave
  7500 ;; This function uses a non-reentrant model
  7501 ;;
  7502                           
  7503                           
  7504                           ;psect for function _solidring_tactiles
  7505  12F7                     _solidring_tactiles:	
  7506                           
  7507                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  7508                           
  7509                           ;incstack = 0
  7510                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7511  12F7  301E               	movlw	30
  7512  12F8  0020               	movlb	0	; select bank0
  7513  12F9  00AE               	movwf	??_solidring_tactiles
  7514  12FA  082E               	movf	??_solidring_tactiles,w
  7515  12FB  00B0               	movwf	solidring_tactiles@ring_delay
  7516                           
  7517                           ;LEDs.c: 225: set_leds_top(100, 1);
  7518  12FC  3064               	movlw	100
  7519  12FD  00A0               	movwf	set_leds_top@x
  7520  12FE  3000               	movlw	0
  7521  12FF  00A1               	movwf	set_leds_top@x+1
  7522  1300  3001               	movlw	1
  7523  1301  00A2               	movwf	set_leds_top@ledState
  7524  1302  3000               	movlw	0
  7525  1303  00A3               	movwf	set_leds_top@ledState+1
  7526  1304  3187  27A2  3192   	fcall	_set_leds_top
  7527                           
  7528                           ;LEDs.c: 226: set_leds_bottom(100);
  7529  1307  3064               	movlw	100
  7530  1308  0020               	movlb	0	; select bank0
  7531  1309  00A0               	movwf	set_leds_bottom@x
  7532  130A  3000               	movlw	0
  7533  130B  00A1               	movwf	set_leds_bottom@x+1
  7534  130C  3191  21C2  3192   	fcall	_set_leds_bottom
  7535                           
  7536                           ;LEDs.c: 227: wait_ms(ring_delay);
  7537  130F  0020               	movlb	0	; select bank0
  7538  1310  0830               	movf	solidring_tactiles@ring_delay,w
  7539  1311  00AE               	movwf	??_solidring_tactiles
  7540  1312  01AF               	clrf	??_solidring_tactiles+1
  7541  1313  082E               	movf	??_solidring_tactiles,w
  7542  1314  00AC               	movwf	wait_ms@time
  7543  1315  082F               	movf	??_solidring_tactiles+1,w
  7544  1316  00AD               	movwf	wait_ms@time+1
  7545  1317  3190  20A9  3192   	fcall	_wait_ms
  7546                           
  7547                           ;LEDs.c: 229: set_leds_top(0, 1);
  7548  131A  3000               	movlw	0
  7549  131B  0020               	movlb	0	; select bank0
  7550  131C  00A0               	movwf	set_leds_top@x
  7551  131D  00A1               	movwf	set_leds_top@x+1
  7552  131E  3001               	movlw	1
  7553  131F  00A2               	movwf	set_leds_top@ledState
  7554  1320  3000               	movlw	0
  7555  1321  00A3               	movwf	set_leds_top@ledState+1
  7556  1322  3187  27A2  3192   	fcall	_set_leds_top
  7557                           
  7558                           ;LEDs.c: 230: set_leds_bottom(0);
  7559  1325  3000               	movlw	0
  7560  1326  0020               	movlb	0	; select bank0
  7561  1327  00A0               	movwf	set_leds_bottom@x
  7562  1328  00A1               	movwf	set_leds_bottom@x+1
  7563  1329  3191  21C2  3192   	fcall	_set_leds_bottom
  7564                           
  7565                           ;LEDs.c: 231: wait_ms(ring_delay);
  7566  132C  0020               	movlb	0	; select bank0
  7567  132D  0830               	movf	solidring_tactiles@ring_delay,w
  7568  132E  00AE               	movwf	??_solidring_tactiles
  7569  132F  01AF               	clrf	??_solidring_tactiles+1
  7570  1330  082E               	movf	??_solidring_tactiles,w
  7571  1331  00AC               	movwf	wait_ms@time
  7572  1332  082F               	movf	??_solidring_tactiles+1,w
  7573  1333  00AD               	movwf	wait_ms@time+1
  7574  1334  3190  20A9         	fcall	_wait_ms
  7575  1336  0008               	return
  7576  1337                     __end_of_solidring_tactiles:	
  7577                           
  7578                           	psect	text6
  7579  1F69                     __ptext6:	
  7580 ;; *************** function _restoreLEDState *****************
  7581 ;; Defined at:
  7582 ;;		line 89 in file "state_manager.c"
  7583 ;; Parameters:    Size  Location     Type
  7584 ;;		None
  7585 ;; Auto vars:     Size  Location     Type
  7586 ;;		None
  7587 ;; Return value:  Size  Location     Type
  7588 ;;                  1    wreg      void 
  7589 ;; Registers used:
  7590 ;;		wreg, status,0
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7600 ;;Total ram usage:        0 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    2
  7603 ;; This function calls:
  7604 ;;		Nothing
  7605 ;; This function is called by:
  7606 ;;		_showBootSequence
  7607 ;;		_showError_Alternating
  7608 ;;		_show_error
  7609 ;;		_show_cancel
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           
  7614                           ;psect for function _restoreLEDState
  7615  1F69                     _restoreLEDState:	
  7616                           
  7617                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  7618                           
  7619                           ;incstack = 0
  7620                           ; Regs used in _restoreLEDState: [wreg+status,0]
  7621  1F69  0022               	movlb	2	; select bank2
  7622  1F6A  0C34               	rrf	_ledState^(0+256),w
  7623  1F6B  1C03               	skipc
  7624  1F6C  120D               	bcf	13,4	;volatile
  7625  1F6D  1803               	skipnc
  7626  1F6E  160D               	bsf	13,4	;volatile
  7627                           
  7628                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  7629  1F6F  0C36               	rrf	(_ledState^(0+256)+2),w
  7630  1F70  1C03               	skipc
  7631  1F71  110D               	bcf	13,2	;volatile
  7632  1F72  1803               	skipnc
  7633  1F73  150D               	bsf	13,2	;volatile
  7634                           
  7635                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  7636  1F74  0C35               	rrf	(_ledState^(0+256)+1),w
  7637  1F75  1C03               	skipc
  7638  1F76  128D               	bcf	13,5	;volatile
  7639  1F77  1803               	skipnc
  7640  1F78  168D               	bsf	13,5	;volatile
  7641                           
  7642                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  7643  1F79  0C37               	rrf	(_ledState^(0+256)+3),w
  7644  1F7A  1C03               	skipc
  7645  1F7B  118D               	bcf	13,3	;volatile
  7646  1F7C  1803               	skipnc
  7647  1F7D  158D               	bsf	13,3	;volatile
  7648  1F7E  0008               	return
  7649  1F7F                     __end_of_restoreLEDState:	
  7650                           
  7651                           	psect	text7
  7652  1F32                     __ptext7:	
  7653 ;; *************** function _getCurrentLEDState *****************
  7654 ;; Defined at:
  7655 ;;		line 83 in file "state_manager.c"
  7656 ;; Parameters:    Size  Location     Type
  7657 ;;		None
  7658 ;; Auto vars:     Size  Location     Type
  7659 ;;		None
  7660 ;; Return value:  Size  Location     Type
  7661 ;;                  1    wreg      void 
  7662 ;; Registers used:
  7663 ;;		wreg, status,2
  7664 ;; Tracked objects:
  7665 ;;		On entry : 0/0
  7666 ;;		On exit  : 0/0
  7667 ;;		Unchanged: 0/0
  7668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7670 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7671 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7672 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7673 ;;Total ram usage:        0 bytes
  7674 ;; Hardware stack levels used:    1
  7675 ;; Hardware stack levels required when called:    2
  7676 ;; This function calls:
  7677 ;;		Nothing
  7678 ;; This function is called by:
  7679 ;;		_showBootSequence
  7680 ;;		_showError_Alternating
  7681 ;;		_show_error
  7682 ;;		_show_cancel
  7683 ;; This function uses a non-reentrant model
  7684 ;;
  7685                           
  7686                           
  7687                           ;psect for function _getCurrentLEDState
  7688  1F32                     _getCurrentLEDState:	
  7689                           
  7690                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  7691                           
  7692                           ;incstack = 0
  7693                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  7694  1F32  3000               	movlw	0
  7695  1F33  0022               	movlb	2	; select bank2
  7696  1F34  1A0D               	btfsc	13,4	;volatile
  7697  1F35  3001               	movlw	1
  7698  1F36  00B4               	movwf	_ledState^(0+256)
  7699                           
  7700                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  7701  1F37  3000               	movlw	0
  7702  1F38  190D               	btfsc	13,2	;volatile
  7703  1F39  3001               	movlw	1
  7704  1F3A  00B6               	movwf	(_ledState^(0+256)+2)
  7705                           
  7706                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  7707  1F3B  3000               	movlw	0
  7708  1F3C  1A8D               	btfsc	13,5	;volatile
  7709  1F3D  3001               	movlw	1
  7710  1F3E  00B5               	movwf	(_ledState^(0+256)+1)
  7711                           
  7712                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  7713  1F3F  3000               	movlw	0
  7714  1F40  198D               	btfsc	13,3	;volatile
  7715  1F41  3001               	movlw	1
  7716  1F42  00B7               	movwf	(_ledState^(0+256)+3)
  7717  1F43  0008               	return
  7718  1F44                     __end_of_getCurrentLEDState:	
  7719                           
  7720                           	psect	text8
  7721  0456                     __ptext8:	
  7722 ;; *************** function _set_subdivision *****************
  7723 ;; Defined at:
  7724 ;;		line 77 in file "user.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  x               2    6[BANK1 ] int 
  7727 ;;  y               2    8[BANK1 ] int 
  7728 ;; Auto vars:     Size  Location     Type
  7729 ;;		None
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  2    6[BANK1 ] int 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7739 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7742 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7743 ;;Total ram usage:        4 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    4
  7746 ;; This function calls:
  7747 ;;		___awtoft
  7748 ;;		___ftmul
  7749 ;;		___fttol
  7750 ;; This function is called by:
  7751 ;;		_main
  7752 ;; This function uses a non-reentrant model
  7753 ;;
  7754                           
  7755                           
  7756                           ;psect for function _set_subdivision
  7757  0456                     _set_subdivision:	
  7758                           
  7759                           ;user.c: 80: switch (y) {
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7763  0456  2D34               	goto	l3584
  7764  0457                     l3572:	
  7765                           ;user.c: 81: case 1:
  7766                           
  7767                           
  7768                           ;user.c: 82: x = x * .75;
  7769  0457  0021               	movlb	1	; select bank1
  7770  0458  0827               	movf	(set_subdivision@x+1)^(0+128),w
  7771  0459  0020               	movlb	0	; select bank0
  7772  045A  00A9               	movwf	___awtoft@c+1
  7773  045B  0021               	movlb	1	; select bank1
  7774  045C  0826               	movf	set_subdivision@x^(0+128),w
  7775  045D  0020               	movlb	0	; select bank0
  7776  045E  00A8               	movwf	___awtoft@c
  7777  045F  3190  2001  3184   	fcall	___awtoft
  7778  0462  0020               	movlb	0	; select bank0
  7779  0463  0828               	movf	?___awtoft,w
  7780  0464  00B8               	movwf	___ftmul@f2
  7781  0465  0829               	movf	?___awtoft+1,w
  7782  0466  00B9               	movwf	___ftmul@f2+1
  7783  0467  082A               	movf	?___awtoft+2,w
  7784  0468  00BA               	movwf	___ftmul@f2+2
  7785  0469  3000               	movlw	0
  7786  046A  00B5               	movwf	___ftmul@f1
  7787  046B  3040               	movlw	64
  7788  046C  00B6               	movwf	___ftmul@f1+1
  7789  046D  303F               	movlw	63
  7790  046E  00B7               	movwf	___ftmul@f1+2
  7791  046F  3186  2645  3184   	fcall	___ftmul
  7792  0472  0020               	movlb	0	; select bank0
  7793  0473  0835               	movf	?___ftmul,w
  7794  0474  00E7               	movwf	___fttol@f1
  7795  0475  0836               	movf	?___ftmul+1,w
  7796  0476  00E8               	movwf	___fttol@f1+1
  7797  0477  0837               	movf	?___ftmul+2,w
  7798  0478  00E9               	movwf	___fttol@f1+2
  7799  0479  3188  20A6         	fcall	___fttol
  7800  047B  0020               	movlb	0	; select bank0
  7801  047C  0868               	movf	?___fttol+1,w
  7802  047D  0021               	movlb	1	; select bank1
  7803  047E  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  7804  047F  0020               	movlb	0	; select bank0
  7805  0480  0867               	movf	?___fttol,w
  7806  0481  0021               	movlb	1	; select bank1
  7807  0482  00A6               	movwf	set_subdivision@x^(0+128)
  7808                           
  7809                           ;user.c: 83: break;
  7810  0483  0008               	return
  7811  0484                     l3574:	
  7812                           ;user.c: 84: case 2:
  7813                           
  7814                           
  7815                           ;user.c: 85: x = x * .66666;
  7816  0484  0827               	movf	(set_subdivision@x+1)^(0+128),w
  7817  0485  0020               	movlb	0	; select bank0
  7818  0486  00A9               	movwf	___awtoft@c+1
  7819  0487  0021               	movlb	1	; select bank1
  7820  0488  0826               	movf	set_subdivision@x^(0+128),w
  7821  0489  0020               	movlb	0	; select bank0
  7822  048A  00A8               	movwf	___awtoft@c
  7823  048B  3190  2001  3184   	fcall	___awtoft
  7824  048E  0020               	movlb	0	; select bank0
  7825  048F  0828               	movf	?___awtoft,w
  7826  0490  00B8               	movwf	___ftmul@f2
  7827  0491  0829               	movf	?___awtoft+1,w
  7828  0492  00B9               	movwf	___ftmul@f2+1
  7829  0493  082A               	movf	?___awtoft+2,w
  7830  0494  00BA               	movwf	___ftmul@f2+2
  7831  0495  30AA               	movlw	170
  7832  0496  00B5               	movwf	___ftmul@f1
  7833  0497  302A               	movlw	42
  7834  0498  00B6               	movwf	___ftmul@f1+1
  7835  0499  303F               	movlw	63
  7836  049A  00B7               	movwf	___ftmul@f1+2
  7837  049B  3186  2645  3184   	fcall	___ftmul
  7838  049E  0020               	movlb	0	; select bank0
  7839  049F  0835               	movf	?___ftmul,w
  7840  04A0  00E7               	movwf	___fttol@f1
  7841  04A1  0836               	movf	?___ftmul+1,w
  7842  04A2  00E8               	movwf	___fttol@f1+1
  7843  04A3  0837               	movf	?___ftmul+2,w
  7844  04A4  00E9               	movwf	___fttol@f1+2
  7845  04A5  3188  20A6         	fcall	___fttol
  7846  04A7  0020               	movlb	0	; select bank0
  7847  04A8  0868               	movf	?___fttol+1,w
  7848  04A9  0021               	movlb	1	; select bank1
  7849  04AA  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  7850  04AB  0020               	movlb	0	; select bank0
  7851  04AC  0867               	movf	?___fttol,w
  7852  04AD  0021               	movlb	1	; select bank1
  7853  04AE  00A6               	movwf	set_subdivision@x^(0+128)
  7854                           
  7855                           ;user.c: 86: break;
  7856  04AF  0008               	return
  7857  04B0                     l3576:	
  7858                           ;user.c: 87: case 3:
  7859                           
  7860                           
  7861                           ;user.c: 88: x = x * .5;
  7862  04B0  0827               	movf	(set_subdivision@x+1)^(0+128),w
  7863  04B1  0020               	movlb	0	; select bank0
  7864  04B2  00A9               	movwf	___awtoft@c+1
  7865  04B3  0021               	movlb	1	; select bank1
  7866  04B4  0826               	movf	set_subdivision@x^(0+128),w
  7867  04B5  0020               	movlb	0	; select bank0
  7868  04B6  00A8               	movwf	___awtoft@c
  7869  04B7  3190  2001  3184   	fcall	___awtoft
  7870  04BA  0020               	movlb	0	; select bank0
  7871  04BB  0828               	movf	?___awtoft,w
  7872  04BC  00B8               	movwf	___ftmul@f2
  7873  04BD  0829               	movf	?___awtoft+1,w
  7874  04BE  00B9               	movwf	___ftmul@f2+1
  7875  04BF  082A               	movf	?___awtoft+2,w
  7876  04C0  00BA               	movwf	___ftmul@f2+2
  7877  04C1  3000               	movlw	0
  7878  04C2  00B5               	movwf	___ftmul@f1
  7879  04C3  3000               	movlw	0
  7880  04C4  00B6               	movwf	___ftmul@f1+1
  7881  04C5  303F               	movlw	63
  7882  04C6  00B7               	movwf	___ftmul@f1+2
  7883  04C7  3186  2645  3184   	fcall	___ftmul
  7884  04CA  0020               	movlb	0	; select bank0
  7885  04CB  0835               	movf	?___ftmul,w
  7886  04CC  00E7               	movwf	___fttol@f1
  7887  04CD  0836               	movf	?___ftmul+1,w
  7888  04CE  00E8               	movwf	___fttol@f1+1
  7889  04CF  0837               	movf	?___ftmul+2,w
  7890  04D0  00E9               	movwf	___fttol@f1+2
  7891  04D1  3188  20A6         	fcall	___fttol
  7892  04D3  0020               	movlb	0	; select bank0
  7893  04D4  0868               	movf	?___fttol+1,w
  7894  04D5  0021               	movlb	1	; select bank1
  7895  04D6  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  7896  04D7  0020               	movlb	0	; select bank0
  7897  04D8  0867               	movf	?___fttol,w
  7898  04D9  0021               	movlb	1	; select bank1
  7899  04DA  00A6               	movwf	set_subdivision@x^(0+128)
  7900                           
  7901                           ;user.c: 89: break;
  7902  04DB  0008               	return
  7903  04DC                     l3578:	
  7904                           ;user.c: 90: case 4:
  7905                           
  7906                           
  7907                           ;user.c: 91: x = x * .3333;
  7908  04DC  0827               	movf	(set_subdivision@x+1)^(0+128),w
  7909  04DD  0020               	movlb	0	; select bank0
  7910  04DE  00A9               	movwf	___awtoft@c+1
  7911  04DF  0021               	movlb	1	; select bank1
  7912  04E0  0826               	movf	set_subdivision@x^(0+128),w
  7913  04E1  0020               	movlb	0	; select bank0
  7914  04E2  00A8               	movwf	___awtoft@c
  7915  04E3  3190  2001  3184   	fcall	___awtoft
  7916  04E6  0020               	movlb	0	; select bank0
  7917  04E7  0828               	movf	?___awtoft,w
  7918  04E8  00B8               	movwf	___ftmul@f2
  7919  04E9  0829               	movf	?___awtoft+1,w
  7920  04EA  00B9               	movwf	___ftmul@f2+1
  7921  04EB  082A               	movf	?___awtoft+2,w
  7922  04EC  00BA               	movwf	___ftmul@f2+2
  7923  04ED  30A6               	movlw	166
  7924  04EE  00B5               	movwf	___ftmul@f1
  7925  04EF  30AA               	movlw	170
  7926  04F0  00B6               	movwf	___ftmul@f1+1
  7927  04F1  303E               	movlw	62
  7928  04F2  00B7               	movwf	___ftmul@f1+2
  7929  04F3  3186  2645  3184   	fcall	___ftmul
  7930  04F6  0020               	movlb	0	; select bank0
  7931  04F7  0835               	movf	?___ftmul,w
  7932  04F8  00E7               	movwf	___fttol@f1
  7933  04F9  0836               	movf	?___ftmul+1,w
  7934  04FA  00E8               	movwf	___fttol@f1+1
  7935  04FB  0837               	movf	?___ftmul+2,w
  7936  04FC  00E9               	movwf	___fttol@f1+2
  7937  04FD  3188  20A6         	fcall	___fttol
  7938  04FF  0020               	movlb	0	; select bank0
  7939  0500  0868               	movf	?___fttol+1,w
  7940  0501  0021               	movlb	1	; select bank1
  7941  0502  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  7942  0503  0020               	movlb	0	; select bank0
  7943  0504  0867               	movf	?___fttol,w
  7944  0505  0021               	movlb	1	; select bank1
  7945  0506  00A6               	movwf	set_subdivision@x^(0+128)
  7946                           
  7947                           ;user.c: 92: break;
  7948  0507  0008               	return
  7949  0508                     l3580:	
  7950                           ;user.c: 93: case 5:
  7951                           
  7952                           
  7953                           ;user.c: 94: x = x * .25;
  7954  0508  0827               	movf	(set_subdivision@x+1)^(0+128),w
  7955  0509  0020               	movlb	0	; select bank0
  7956  050A  00A9               	movwf	___awtoft@c+1
  7957  050B  0021               	movlb	1	; select bank1
  7958  050C  0826               	movf	set_subdivision@x^(0+128),w
  7959  050D  0020               	movlb	0	; select bank0
  7960  050E  00A8               	movwf	___awtoft@c
  7961  050F  3190  2001  3184   	fcall	___awtoft
  7962  0512  0020               	movlb	0	; select bank0
  7963  0513  0828               	movf	?___awtoft,w
  7964  0514  00B8               	movwf	___ftmul@f2
  7965  0515  0829               	movf	?___awtoft+1,w
  7966  0516  00B9               	movwf	___ftmul@f2+1
  7967  0517  082A               	movf	?___awtoft+2,w
  7968  0518  00BA               	movwf	___ftmul@f2+2
  7969  0519  3000               	movlw	0
  7970  051A  00B5               	movwf	___ftmul@f1
  7971  051B  3080               	movlw	128
  7972  051C  00B6               	movwf	___ftmul@f1+1
  7973  051D  303E               	movlw	62
  7974  051E  00B7               	movwf	___ftmul@f1+2
  7975  051F  3186  2645  3184   	fcall	___ftmul
  7976  0522  0020               	movlb	0	; select bank0
  7977  0523  0835               	movf	?___ftmul,w
  7978  0524  00E7               	movwf	___fttol@f1
  7979  0525  0836               	movf	?___ftmul+1,w
  7980  0526  00E8               	movwf	___fttol@f1+1
  7981  0527  0837               	movf	?___ftmul+2,w
  7982  0528  00E9               	movwf	___fttol@f1+2
  7983  0529  3188  20A6         	fcall	___fttol
  7984  052B  0020               	movlb	0	; select bank0
  7985  052C  0868               	movf	?___fttol+1,w
  7986  052D  0021               	movlb	1	; select bank1
  7987  052E  00A7               	movwf	(set_subdivision@x+1)^(0+128)
  7988  052F  0020               	movlb	0	; select bank0
  7989  0530  0867               	movf	?___fttol,w
  7990  0531  0021               	movlb	1	; select bank1
  7991  0532  00A6               	movwf	set_subdivision@x^(0+128)
  7992                           
  7993                           ;user.c: 99: }
  7994                           
  7995                           ;user.c: 98: break;
  7996                           
  7997                           ;user.c: 96: case 6:
  7998                           
  7999                           ;user.c: 95: break;
  8000  0533  0008               	return
  8001  0534                     l3584:	
  8002                           
  8003                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8004                           ; Switch size 1, requested type "space"
  8005                           ; Number of cases is 1, Range of values is 0 to 0
  8006                           ; switch strategies available:
  8007                           ; Name         Instructions Cycles
  8008                           ; simple_byte            4     3 (average)
  8009                           ; direct_byte            8     6 (fixed)
  8010                           ; jumptable            260     6 (fixed)
  8011                           ;	Chosen strategy is simple_byte
  8012  0534  0021               	movlb	1	; select bank1
  8013  0535  0829               	movf	(set_subdivision@y+1)^(0+128),w
  8014  0536  3A00               	xorlw	0	; case 0
  8015  0537  1903               	skipnz
  8016  0538  2D3A               	goto	l4218
  8017  0539  2D4E               	goto	l461
  8018  053A                     l4218:	
  8019                           
  8020                           ; Switch size 1, requested type "space"
  8021                           ; Number of cases is 6, Range of values is 1 to 6
  8022                           ; switch strategies available:
  8023                           ; Name         Instructions Cycles
  8024                           ; simple_byte           19    10 (average)
  8025                           ; direct_byte           21     9 (fixed)
  8026                           ; jumptable            263     9 (fixed)
  8027                           ;	Chosen strategy is simple_byte
  8028  053A  0828               	movf	set_subdivision@y^(0+128),w
  8029  053B  3A01               	xorlw	1	; case 1
  8030  053C  1903               	skipnz
  8031  053D  2C57               	goto	l3572
  8032  053E  3A03               	xorlw	3	; case 2
  8033  053F  1903               	skipnz
  8034  0540  2C84               	goto	l3574
  8035  0541  3A01               	xorlw	1	; case 3
  8036  0542  1903               	skipnz
  8037  0543  2CB0               	goto	l3576
  8038  0544  3A07               	xorlw	7	; case 4
  8039  0545  1903               	skipnz
  8040  0546  2CDC               	goto	l3578
  8041  0547  3A01               	xorlw	1	; case 5
  8042  0548  1903               	skipnz
  8043  0549  2D08               	goto	l3580
  8044  054A  3A03               	xorlw	3	; case 6
  8045  054B  1903               	skipnz
  8046  054C  2D4E               	goto	l461
  8047  054D  2D4E               	goto	l461
  8048  054E                     l461:	
  8049                           
  8050                           ;user.c: 100: return x;
  8051  054E  0008               	return
  8052  054F                     __end_of_set_subdivision:	
  8053                           
  8054                           	psect	text9
  8055  08A6                     __ptext9:	
  8056 ;; *************** function ___fttol *****************
  8057 ;; Defined at:
  8058 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  f1              3   71[BANK0 ] float 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  lval            4    1[BANK1 ] unsigned long 
  8063 ;;  exp1            1    5[BANK1 ] unsigned char 
  8064 ;;  sign1           1    0[BANK1 ] unsigned char 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  4   71[BANK0 ] long 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8074 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8076 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8077 ;;      Totals:         0       8       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8078 ;;Total ram usage:       14 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    2
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		_main
  8085 ;;		_set_subdivision
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function ___fttol
  8091  08A6                     ___fttol:	
  8092                           
  8093                           ;incstack = 0
  8094                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8095  08A6  0020               	movlb	0	; select bank0
  8096  08A7  0867               	movf	___fttol@f1,w
  8097  08A8  00EB               	movwf	??___fttol
  8098  08A9  0868               	movf	___fttol@f1+1,w
  8099  08AA  00EC               	movwf	??___fttol+1
  8100  08AB  0869               	movf	___fttol@f1+2,w
  8101  08AC  00ED               	movwf	??___fttol+2
  8102  08AD  1003               	clrc
  8103  08AE  0D6C               	rlf	??___fttol+1,w
  8104  08AF  0D6D               	rlf	??___fttol+2,w
  8105  08B0  00EE               	movwf	??___fttol+3
  8106  08B1  086E               	movf	??___fttol+3,w
  8107  08B2  0021               	movlb	1	; select bank1
  8108  08B3  00A5               	movwf	___fttol@exp1^(0+128)
  8109  08B4  0825               	movf	___fttol@exp1^(0+128),w
  8110  08B5  1D03               	btfss	3,2
  8111  08B6  28C1               	goto	l3352
  8112  08B7  3000               	movlw	0
  8113  08B8  0020               	movlb	0	; select bank0
  8114  08B9  00EA               	movwf	?___fttol+3
  8115  08BA  3000               	movlw	0
  8116  08BB  00E9               	movwf	?___fttol+2
  8117  08BC  3000               	movlw	0
  8118  08BD  00E8               	movwf	?___fttol+1
  8119  08BE  3000               	movlw	0
  8120  08BF  00E7               	movwf	?___fttol
  8121  08C0  0008               	return
  8122  08C1                     l3352:	
  8123  08C1  0020               	movlb	0	; select bank0
  8124  08C2  0867               	movf	___fttol@f1,w
  8125  08C3  00EB               	movwf	??___fttol
  8126  08C4  0868               	movf	___fttol@f1+1,w
  8127  08C5  00EC               	movwf	??___fttol+1
  8128  08C6  0869               	movf	___fttol@f1+2,w
  8129  08C7  00ED               	movwf	??___fttol+2
  8130  08C8  3017               	movlw	23
  8131  08C9                     u3115:	
  8132  08C9  36ED               	lsrf	??___fttol+2,f
  8133  08CA  0CEC               	rrf	??___fttol+1,f
  8134  08CB  0CEB               	rrf	??___fttol,f
  8135  08CC  0B89               	decfsz	9,f
  8136  08CD  28C9               	goto	u3115
  8137  08CE  086B               	movf	??___fttol,w
  8138  08CF  00EE               	movwf	??___fttol+3
  8139  08D0  086E               	movf	??___fttol+3,w
  8140  08D1  0021               	movlb	1	; select bank1
  8141  08D2  00A0               	movwf	___fttol@sign1^(0+128)
  8142  08D3  0020               	movlb	0	; select bank0
  8143  08D4  17E8               	bsf	___fttol@f1+1,7
  8144  08D5  30FF               	movlw	255
  8145  08D6  05E7               	andwf	___fttol@f1,f
  8146  08D7  30FF               	movlw	255
  8147  08D8  05E8               	andwf	___fttol@f1+1,f
  8148  08D9  3000               	movlw	0
  8149  08DA  05E9               	andwf	___fttol@f1+2,f
  8150  08DB  0867               	movf	___fttol@f1,w
  8151  08DC  0021               	movlb	1	; select bank1
  8152  08DD  00A1               	movwf	___fttol@lval^(0+128)
  8153  08DE  0020               	movlb	0	; select bank0
  8154  08DF  0868               	movf	___fttol@f1+1,w
  8155  08E0  0021               	movlb	1	; select bank1
  8156  08E1  00A2               	movwf	(___fttol@lval^(0+128)+1)
  8157  08E2  0020               	movlb	0	; select bank0
  8158  08E3  0869               	movf	___fttol@f1+2,w
  8159  08E4  0021               	movlb	1	; select bank1
  8160  08E5  00A3               	movwf	(___fttol@lval^(0+128)+2)
  8161  08E6  01A4               	clrf	(___fttol@lval^(0+128)+3)
  8162  08E7  308E               	movlw	142
  8163  08E8  02A5               	subwf	___fttol@exp1^(0+128),f
  8164  08E9  1FA5               	btfss	___fttol@exp1^(0+128),7
  8165  08EA  290B               	goto	l3372
  8166  08EB  0825               	movf	___fttol@exp1^(0+128),w
  8167  08EC  3A80               	xorlw	128
  8168  08ED  3E8F               	addlw	143
  8169  08EE  1803               	skipnc
  8170  08EF  28FA               	goto	l3370
  8171  08F0  3000               	movlw	0
  8172  08F1  0020               	movlb	0	; select bank0
  8173  08F2  00EA               	movwf	?___fttol+3
  8174  08F3  3000               	movlw	0
  8175  08F4  00E9               	movwf	?___fttol+2
  8176  08F5  3000               	movlw	0
  8177  08F6  00E8               	movwf	?___fttol+1
  8178  08F7  3000               	movlw	0
  8179  08F8  00E7               	movwf	?___fttol
  8180  08F9  0008               	return
  8181  08FA                     l3370:	
  8182  08FA  3001               	movlw	1
  8183  08FB                     u3145:	
  8184  08FB  0021               	movlb	1	; select bank1
  8185  08FC  36A4               	lsrf	(___fttol@lval+3)^(0+128),f
  8186  08FD  0CA3               	rrf	(___fttol@lval+2)^(0+128),f
  8187  08FE  0CA2               	rrf	(___fttol@lval+1)^(0+128),f
  8188  08FF  0CA1               	rrf	___fttol@lval^(0+128),f
  8189  0900  0B89               	decfsz	9,f
  8190  0901  28FB               	goto	u3145
  8191  0902  3001               	movlw	1
  8192  0903  0020               	movlb	0	; select bank0
  8193  0904  00EB               	movwf	??___fttol
  8194  0905  086B               	movf	??___fttol,w
  8195  0906  0021               	movlb	1	; select bank1
  8196  0907  07A5               	addwf	___fttol@exp1^(0+128),f
  8197  0908  1903               	btfsc	3,2
  8198  0909  2927               	goto	l3380
  8199  090A  28FA               	goto	l3370
  8200  090B                     l3372:	
  8201  090B  3018               	movlw	24
  8202  090C  0225               	subwf	___fttol@exp1^(0+128),w
  8203  090D  1C03               	skipc
  8204  090E  2923               	goto	l1262
  8205  090F  3000               	movlw	0
  8206  0910  0020               	movlb	0	; select bank0
  8207  0911  00EA               	movwf	?___fttol+3
  8208  0912  3000               	movlw	0
  8209  0913  00E9               	movwf	?___fttol+2
  8210  0914  3000               	movlw	0
  8211  0915  00E8               	movwf	?___fttol+1
  8212  0916  3000               	movlw	0
  8213  0917  00E7               	movwf	?___fttol
  8214  0918  0008               	return
  8215  0919                     l3378:	
  8216  0919  3001               	movlw	1
  8217  091A                     u3175:	
  8218  091A  0021               	movlb	1	; select bank1
  8219  091B  35A1               	lslf	___fttol@lval^(0+128),f
  8220  091C  0DA2               	rlf	(___fttol@lval+1)^(0+128),f
  8221  091D  0DA3               	rlf	(___fttol@lval+2)^(0+128),f
  8222  091E  0DA4               	rlf	(___fttol@lval+3)^(0+128),f
  8223  091F  0B89               	decfsz	9,f
  8224  0920  291A               	goto	u3175
  8225  0921  3001               	movlw	1
  8226  0922  02A5               	subwf	___fttol@exp1^(0+128),f
  8227  0923                     l1262:	
  8228  0923  0021               	movlb	1	; select bank1
  8229  0924  0825               	movf	___fttol@exp1^(0+128),w
  8230  0925  1D03               	btfss	3,2
  8231  0926  2919               	goto	l3378
  8232  0927                     l3380:	
  8233  0927  0820               	movf	___fttol@sign1^(0+128),w
  8234  0928  1903               	btfsc	3,2
  8235  0929  2935               	goto	l3384
  8236  092A  09A1               	comf	___fttol@lval^(0+128),f
  8237  092B  09A2               	comf	(___fttol@lval+1)^(0+128),f
  8238  092C  09A3               	comf	(___fttol@lval+2)^(0+128),f
  8239  092D  09A4               	comf	(___fttol@lval+3)^(0+128),f
  8240  092E  0AA1               	incf	___fttol@lval^(0+128),f
  8241  092F  1903               	skipnz
  8242  0930  0AA2               	incf	(___fttol@lval+1)^(0+128),f
  8243  0931  1903               	skipnz
  8244  0932  0AA3               	incf	(___fttol@lval+2)^(0+128),f
  8245  0933  1903               	skipnz
  8246  0934  0AA4               	incf	(___fttol@lval+3)^(0+128),f
  8247  0935                     l3384:	
  8248  0935  0824               	movf	(___fttol@lval+3)^(0+128),w
  8249  0936  0020               	movlb	0	; select bank0
  8250  0937  00EA               	movwf	?___fttol+3
  8251  0938  0021               	movlb	1	; select bank1
  8252  0939  0823               	movf	(___fttol@lval+2)^(0+128),w
  8253  093A  0020               	movlb	0	; select bank0
  8254  093B  00E9               	movwf	?___fttol+2
  8255  093C  0021               	movlb	1	; select bank1
  8256  093D  0822               	movf	(___fttol@lval+1)^(0+128),w
  8257  093E  0020               	movlb	0	; select bank0
  8258  093F  00E8               	movwf	?___fttol+1
  8259  0940  0021               	movlb	1	; select bank1
  8260  0941  0821               	movf	___fttol@lval^(0+128),w
  8261  0942  0020               	movlb	0	; select bank0
  8262  0943  00E7               	movwf	?___fttol
  8263  0944  0008               	return
  8264  0945                     __end_of___fttol:	
  8265                           
  8266                           	psect	text10
  8267  1001                     __ptext10:	
  8268 ;; *************** function ___awtoft *****************
  8269 ;; Defined at:
  8270 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  8271 ;; Parameters:    Size  Location     Type
  8272 ;;  c               2    8[BANK0 ] int 
  8273 ;; Auto vars:     Size  Location     Type
  8274 ;;  sign            1   13[BANK0 ] unsigned char 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  3    8[BANK0 ] float 
  8277 ;; Registers used:
  8278 ;;		wreg, status,2, status,0, pclath, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8284 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8286 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8288 ;;Total ram usage:        6 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; Hardware stack levels required when called:    3
  8291 ;; This function calls:
  8292 ;;		___ftpack
  8293 ;; This function is called by:
  8294 ;;		_main
  8295 ;;		_set_subdivision
  8296 ;; This function uses a non-reentrant model
  8297 ;;
  8298                           
  8299                           
  8300                           ;psect for function ___awtoft
  8301  1001                     ___awtoft:	
  8302                           
  8303                           ;incstack = 0
  8304                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  8305  1001  0020               	movlb	0	; select bank0
  8306  1002  01AD               	clrf	___awtoft@sign
  8307  1003  1FA9               	btfss	___awtoft@c+1,7
  8308  1004  280C               	goto	l3172
  8309  1005  09A8               	comf	___awtoft@c,f
  8310  1006  09A9               	comf	___awtoft@c+1,f
  8311  1007  0AA8               	incf	___awtoft@c,f
  8312  1008  1903               	skipnz
  8313  1009  0AA9               	incf	___awtoft@c+1,f
  8314  100A  01AD               	clrf	___awtoft@sign
  8315  100B  0AAD               	incf	___awtoft@sign,f
  8316  100C                     l3172:	
  8317  100C  0828               	movf	___awtoft@c,w
  8318  100D  00A0               	movwf	___ftpack@arg
  8319  100E  0829               	movf	___awtoft@c+1,w
  8320  100F  00A1               	movwf	___ftpack@arg+1
  8321  1010  01A2               	clrf	___ftpack@arg+2
  8322  1011  308E               	movlw	142
  8323  1012  00AB               	movwf	??___awtoft
  8324  1013  082B               	movf	??___awtoft,w
  8325  1014  00A3               	movwf	___ftpack@exp
  8326  1015  082D               	movf	___awtoft@sign,w
  8327  1016  00AC               	movwf	??___awtoft+1
  8328  1017  082C               	movf	??___awtoft+1,w
  8329  1018  00A4               	movwf	___ftpack@sign
  8330  1019  3195  25D0         	fcall	___ftpack
  8331  101B  0020               	movlb	0	; select bank0
  8332  101C  0820               	movf	?___ftpack,w
  8333  101D  00A8               	movwf	?___awtoft
  8334  101E  0821               	movf	?___ftpack+1,w
  8335  101F  00A9               	movwf	?___awtoft+1
  8336  1020  0822               	movf	?___ftpack+2,w
  8337  1021  00AA               	movwf	?___awtoft+2
  8338  1022  0008               	return
  8339  1023                     __end_of___awtoft:	
  8340                           
  8341                           	psect	text11
  8342  12B7                     __ptext11:	
  8343 ;; *************** function _read_top_tactile *****************
  8344 ;; Defined at:
  8345 ;;		line 38 in file "tactiles.c"
  8346 ;; Parameters:    Size  Location     Type
  8347 ;;		None
  8348 ;; Auto vars:     Size  Location     Type
  8349 ;;		None
  8350 ;; Return value:  Size  Location     Type
  8351 ;;                  1    wreg      void 
  8352 ;; Registers used:
  8353 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8354 ;; Tracked objects:
  8355 ;;		On entry : 0/0
  8356 ;;		On exit  : 0/0
  8357 ;;		Unchanged: 0/0
  8358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8361 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8362 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8363 ;;Total ram usage:        3 bytes
  8364 ;; Hardware stack levels used:    1
  8365 ;; Hardware stack levels required when called:    5
  8366 ;; This function calls:
  8367 ;;		_FLASH_WriteWord
  8368 ;;		_set_leds_top
  8369 ;;		_wait_ms
  8370 ;; This function is called by:
  8371 ;;		_main
  8372 ;; This function uses a non-reentrant model
  8373 ;;
  8374                           
  8375                           
  8376                           ;psect for function _read_top_tactile
  8377  12B7                     _read_top_tactile:	
  8378                           
  8379                           ;tactiles.c: 46: if (PORTDbits.RD5 == 0) {
  8380                           
  8381                           ;incstack = 0
  8382                           ; Regs used in _read_top_tactile: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8383  12B7  0020               	movlb	0	; select bank0
  8384  12B8  1A8F               	btfsc	15,5	;volatile
  8385  12B9  0008               	return
  8386                           
  8387                           ;tactiles.c: 47: top_push_state = top_push_state + 1;
  8388  12BA  087D               	movf	_top_push_state,w	;volatile
  8389  12BB  3E01               	addlw	1
  8390  12BC  00B7               	movwf	??_read_top_tactile
  8391  12BD  0837               	movf	??_read_top_tactile,w
  8392  12BE  00FD               	movwf	_top_push_state	;volatile
  8393                           
  8394                           ;tactiles.c: 48: if (top_push_state >= 7) {
  8395  12BF  3007               	movlw	7
  8396  12C0  027D               	subwf	_top_push_state,w	;volatile
  8397  12C1  1C03               	skipc
  8398  12C2  2AC7               	goto	l3460
  8399                           
  8400                           ;tactiles.c: 49: top_push_state = 1;
  8401  12C3  3001               	movlw	1
  8402  12C4  00B7               	movwf	??_read_top_tactile
  8403  12C5  0837               	movf	??_read_top_tactile,w
  8404  12C6  00FD               	movwf	_top_push_state	;volatile
  8405  12C7                     l3460:	
  8406                           
  8407                           ;tactiles.c: 50: }
  8408                           ;tactiles.c: 51: set_leds_top(top_push_state, 1);
  8409  12C7  087D               	movf	_top_push_state,w	;volatile
  8410  12C8  00B7               	movwf	??_read_top_tactile
  8411  12C9  01B8               	clrf	??_read_top_tactile+1
  8412  12CA  0837               	movf	??_read_top_tactile,w
  8413  12CB  00A0               	movwf	set_leds_top@x
  8414  12CC  0838               	movf	??_read_top_tactile+1,w
  8415  12CD  00A1               	movwf	set_leds_top@x+1
  8416  12CE  3001               	movlw	1
  8417  12CF  00A2               	movwf	set_leds_top@ledState
  8418  12D0  3000               	movlw	0
  8419  12D1  00A3               	movwf	set_leds_top@ledState+1
  8420  12D2  3187  27A2  3192   	fcall	_set_leds_top
  8421                           
  8422                           ;tactiles.c: 52: delay_time_changed = 1;
  8423  12D5  3001               	movlw	1
  8424  12D6  0022               	movlb	2	; select bank2
  8425  12D7  00DC               	movwf	_delay_time_changed^(0+256)
  8426  12D8  3000               	movlw	0
  8427  12D9  00DD               	movwf	(_delay_time_changed^(0+256)+1)
  8428                           
  8429                           ;tactiles.c: 53: FLASH_WriteWord(0x1F81, myBuf, top_push_state);
  8430  12DA  3081               	movlw	129
  8431  12DB  0020               	movlb	0	; select bank0
  8432  12DC  00AD               	movwf	FLASH_WriteWord@flashAddr
  8433  12DD  301F               	movlw	31
  8434  12DE  00AE               	movwf	FLASH_WriteWord@flashAddr+1
  8435  12DF  3020               	movlw	(low (_myBuf| (0+512)))& (0+255)
  8436  12E0  00B7               	movwf	??_read_top_tactile
  8437  12E1  0837               	movf	??_read_top_tactile,w
  8438  12E2  00AF               	movwf	FLASH_WriteWord@ramBuf
  8439  12E3  087D               	movf	_top_push_state,w	;volatile
  8440  12E4  00B8               	movwf	??_read_top_tactile+1
  8441  12E5  01B9               	clrf	??_read_top_tactile+2
  8442  12E6  0838               	movf	??_read_top_tactile+1,w
  8443  12E7  00B0               	movwf	FLASH_WriteWord@word
  8444  12E8  0839               	movf	??_read_top_tactile+2,w
  8445  12E9  00B1               	movwf	FLASH_WriteWord@word+1
  8446  12EA  3193  2378  3192   	fcall	_FLASH_WriteWord
  8447  12ED                     l736:	
  8448                           ;tactiles.c: 54: while (PORTDbits.RD5 == 0) {
  8449                           
  8450  12ED  0020               	movlb	0	; select bank0
  8451  12EE  1E8F               	btfss	15,5	;volatile
  8452  12EF  2AED               	goto	l736
  8453                           
  8454                           ;tactiles.c: 55: }
  8455                           ;tactiles.c: 56: wait_ms(20);
  8456  12F0  3014               	movlw	20
  8457  12F1  00AC               	movwf	wait_ms@time
  8458  12F2  3000               	movlw	0
  8459  12F3  00AD               	movwf	wait_ms@time+1
  8460  12F4  3190  20A9         	fcall	_wait_ms
  8461  12F6  0008               	return
  8462  12F7                     __end_of_read_top_tactile:	
  8463                           
  8464                           	psect	text12
  8465  1278                     __ptext12:	
  8466 ;; *************** function _read_bottom_tactile *****************
  8467 ;; Defined at:
  8468 ;;		line 18 in file "tactiles.c"
  8469 ;; Parameters:    Size  Location     Type
  8470 ;;		None
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;		None
  8473 ;; Return value:  Size  Location     Type
  8474 ;;                  1    wreg      void 
  8475 ;; Registers used:
  8476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8477 ;; Tracked objects:
  8478 ;;		On entry : 0/0
  8479 ;;		On exit  : 0/0
  8480 ;;		Unchanged: 0/0
  8481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8484 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8485 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8486 ;;Total ram usage:        3 bytes
  8487 ;; Hardware stack levels used:    1
  8488 ;; Hardware stack levels required when called:    5
  8489 ;; This function calls:
  8490 ;;		_FLASH_WriteWord
  8491 ;;		_set_leds_bottom
  8492 ;;		_wait_ms
  8493 ;; This function is called by:
  8494 ;;		_main
  8495 ;; This function uses a non-reentrant model
  8496 ;;
  8497                           
  8498                           
  8499                           ;psect for function _read_bottom_tactile
  8500  1278                     _read_bottom_tactile:	
  8501                           
  8502                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  8503                           
  8504                           ;incstack = 0
  8505                           ; Regs used in _read_bottom_tactile: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8506  1278  0020               	movlb	0	; select bank0
  8507  1279  1B0F               	btfsc	15,6	;volatile
  8508  127A  0008               	return
  8509                           
  8510                           ;tactiles.c: 26: bottom_push_state = bottom_push_state + 1;
  8511  127B  0021               	movlb	1	; select bank1
  8512  127C  086C               	movf	_bottom_push_state^(0+128),w	;volatile
  8513  127D  3E01               	addlw	1
  8514  127E  0020               	movlb	0	; select bank0
  8515  127F  00B7               	movwf	??_read_bottom_tactile
  8516  1280  0837               	movf	??_read_bottom_tactile,w
  8517  1281  0021               	movlb	1	; select bank1
  8518  1282  00EC               	movwf	_bottom_push_state^(0+128)	;volatile
  8519                           
  8520                           ;tactiles.c: 27: if (bottom_push_state > 6) {
  8521  1283  3007               	movlw	7
  8522  1284  026C               	subwf	_bottom_push_state^(0+128),w	;volatile
  8523  1285  1C03               	skipc
  8524  1286  2A8D               	goto	l3446
  8525                           
  8526                           ;tactiles.c: 28: bottom_push_state = 1;
  8527  1287  3001               	movlw	1
  8528  1288  0020               	movlb	0	; select bank0
  8529  1289  00B7               	movwf	??_read_bottom_tactile
  8530  128A  0837               	movf	??_read_bottom_tactile,w
  8531  128B  0021               	movlb	1	; select bank1
  8532  128C  00EC               	movwf	_bottom_push_state^(0+128)	;volatile
  8533  128D                     l3446:	
  8534                           
  8535                           ;tactiles.c: 29: }
  8536                           ;tactiles.c: 30: set_leds_bottom(bottom_push_state);
  8537  128D  086C               	movf	_bottom_push_state^(0+128),w	;volatile
  8538  128E  0020               	movlb	0	; select bank0
  8539  128F  00B7               	movwf	??_read_bottom_tactile
  8540  1290  01B8               	clrf	??_read_bottom_tactile+1
  8541  1291  0837               	movf	??_read_bottom_tactile,w
  8542  1292  00A0               	movwf	set_leds_bottom@x
  8543  1293  0838               	movf	??_read_bottom_tactile+1,w
  8544  1294  00A1               	movwf	set_leds_bottom@x+1
  8545  1295  3191  21C2  3192   	fcall	_set_leds_bottom
  8546                           
  8547                           ;tactiles.c: 31: FLASH_WriteWord(0x1F82, myBuf, bottom_push_state);
  8548  1298  3082               	movlw	130
  8549  1299  0020               	movlb	0	; select bank0
  8550  129A  00AD               	movwf	FLASH_WriteWord@flashAddr
  8551  129B  301F               	movlw	31
  8552  129C  00AE               	movwf	FLASH_WriteWord@flashAddr+1
  8553  129D  3020               	movlw	(low (_myBuf| (0+512)))& (0+255)
  8554  129E  00B7               	movwf	??_read_bottom_tactile
  8555  129F  0837               	movf	??_read_bottom_tactile,w
  8556  12A0  00AF               	movwf	FLASH_WriteWord@ramBuf
  8557  12A1  0021               	movlb	1	; select bank1
  8558  12A2  086C               	movf	_bottom_push_state^(0+128),w	;volatile
  8559  12A3  0020               	movlb	0	; select bank0
  8560  12A4  00B8               	movwf	??_read_bottom_tactile+1
  8561  12A5  01B9               	clrf	??_read_bottom_tactile+2
  8562  12A6  0838               	movf	??_read_bottom_tactile+1,w
  8563  12A7  00B0               	movwf	FLASH_WriteWord@word
  8564  12A8  0839               	movf	??_read_bottom_tactile+2,w
  8565  12A9  00B1               	movwf	FLASH_WriteWord@word+1
  8566  12AA  3193  2378  3192   	fcall	_FLASH_WriteWord
  8567  12AD                     l728:	
  8568                           ;tactiles.c: 32: while (PORTDbits.RD6 == 0) {
  8569                           
  8570  12AD  0020               	movlb	0	; select bank0
  8571  12AE  1F0F               	btfss	15,6	;volatile
  8572  12AF  2AAD               	goto	l728
  8573                           
  8574                           ;tactiles.c: 33: }
  8575                           ;tactiles.c: 34: wait_ms(20);
  8576  12B0  3014               	movlw	20
  8577  12B1  00AC               	movwf	wait_ms@time
  8578  12B2  3000               	movlw	0
  8579  12B3  00AD               	movwf	wait_ms@time+1
  8580  12B4  3190  20A9         	fcall	_wait_ms
  8581  12B6  0008               	return
  8582  12B7                     __end_of_read_bottom_tactile:	
  8583                           
  8584                           	psect	text13
  8585  1378                     __ptext13:	
  8586 ;; *************** function _FLASH_WriteWord *****************
  8587 ;; Defined at:
  8588 ;;		line 74 in file "memory.c"
  8589 ;; Parameters:    Size  Location     Type
  8590 ;;  flashAddr       2   13[BANK0 ] unsigned int 
  8591 ;;  ramBuf          1   15[BANK0 ] PTR unsigned int 
  8592 ;;		 -> myBuf(64), 
  8593 ;;  word            2   16[BANK0 ] unsigned int 
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;  blockStartAd    2   20[BANK0 ] unsigned int 
  8596 ;;  i               1   22[BANK0 ] unsigned char 
  8597 ;;  offset          1   19[BANK0 ] unsigned char 
  8598 ;; Return value:  Size  Location     Type
  8599 ;;                  1    wreg      void 
  8600 ;; Registers used:
  8601 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8602 ;; Tracked objects:
  8603 ;;		On entry : 0/0
  8604 ;;		On exit  : 0/0
  8605 ;;		Unchanged: 0/0
  8606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8607 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8608 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8610 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8611 ;;Total ram usage:       10 bytes
  8612 ;; Hardware stack levels used:    1
  8613 ;; Hardware stack levels required when called:    4
  8614 ;; This function calls:
  8615 ;;		_FLASH_ReadWord
  8616 ;;		_FLASH_WriteBlock
  8617 ;; This function is called by:
  8618 ;;		_read_bottom_tactile
  8619 ;;		_read_top_tactile
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _FLASH_WriteWord
  8625  1378                     _FLASH_WriteWord:	
  8626                           
  8627                           ;memory.c: 75: uint16_t blockStartAddr = (uint16_t) (flashAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  8628                           
  8629                           ;incstack = 0
  8630                           ; Regs used in _FLASH_WriteWord: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8631  1378  30E0               	movlw	224
  8632  1379  0020               	movlb	0	; select bank0
  8633  137A  052D               	andwf	FLASH_WriteWord@flashAddr,w
  8634  137B  00B4               	movwf	FLASH_WriteWord@blockStartAddr
  8635  137C  303F               	movlw	63
  8636  137D  052E               	andwf	FLASH_WriteWord@flashAddr+1,w
  8637  137E  00B5               	movwf	FLASH_WriteWord@blockStartAddr+1
  8638                           
  8639                           ;memory.c: 76: uint8_t offset = (uint8_t) (flashAddr & (32 - 1));
  8640  137F  082D               	movf	FLASH_WriteWord@flashAddr,w
  8641  1380  391F               	andlw	31
  8642  1381  00B2               	movwf	??_FLASH_WriteWord
  8643  1382  0832               	movf	??_FLASH_WriteWord,w
  8644  1383  00B3               	movwf	FLASH_WriteWord@offset
  8645                           
  8646                           ;memory.c: 77: uint8_t i;
  8647                           ;memory.c: 80: for (i = 0; i < 32; i++) {
  8648  1384  01B6               	clrf	FLASH_WriteWord@i
  8649  1385  3020               	movlw	32
  8650  1386  0236               	subwf	FLASH_WriteWord@i,w
  8651  1387  1803               	btfsc	3,0
  8652  1388  2BA7               	goto	l3034
  8653  1389                     l3028:	
  8654                           
  8655                           ;memory.c: 81: ramBuf[i] = FLASH_ReadWord((blockStartAddr + i));
  8656  1389  0836               	movf	FLASH_WriteWord@i,w
  8657  138A  0734               	addwf	FLASH_WriteWord@blockStartAddr,w
  8658  138B  00A0               	movwf	FLASH_ReadWord@flashAddr
  8659  138C  0835               	movf	FLASH_WriteWord@blockStartAddr+1,w
  8660  138D  1803               	skipnc
  8661  138E  0A35               	incf	FLASH_WriteWord@blockStartAddr+1,w
  8662  138F  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  8663  1390  319F  279B  3193   	fcall	_FLASH_ReadWord
  8664  1393  0020               	movlb	0	; select bank0
  8665  1394  3536               	lslf	FLASH_WriteWord@i,w
  8666  1395  072F               	addwf	FLASH_WriteWord@ramBuf,w
  8667  1396  00B2               	movwf	??_FLASH_WriteWord
  8668  1397  0832               	movf	??_FLASH_WriteWord,w
  8669  1398  0086               	movwf	6
  8670  1399  3002               	movlw	2	; select bank4/5
  8671  139A  0087               	movwf	7
  8672  139B  0820               	movf	?_FLASH_ReadWord,w
  8673  139C  3FC0               	movwi [0]fsr1
  8674  139D  0821               	movf	?_FLASH_ReadWord+1,w
  8675  139E  3FC1               	movwi [1]fsr1
  8676  139F  3001               	movlw	1
  8677  13A0  00B2               	movwf	??_FLASH_WriteWord
  8678  13A1  0832               	movf	??_FLASH_WriteWord,w
  8679  13A2  07B6               	addwf	FLASH_WriteWord@i,f
  8680  13A3  3020               	movlw	32
  8681  13A4  0236               	subwf	FLASH_WriteWord@i,w
  8682  13A5  1C03               	skipc
  8683  13A6  2B89               	goto	l3028
  8684  13A7                     l3034:	
  8685                           
  8686                           ;memory.c: 82: }
  8687                           ;memory.c: 85: ramBuf[offset] = word;
  8688  13A7  3533               	lslf	FLASH_WriteWord@offset,w
  8689  13A8  072F               	addwf	FLASH_WriteWord@ramBuf,w
  8690  13A9  00B2               	movwf	??_FLASH_WriteWord
  8691  13AA  0832               	movf	??_FLASH_WriteWord,w
  8692  13AB  0086               	movwf	6
  8693  13AC  3002               	movlw	2	; select bank4/5
  8694  13AD  0087               	movwf	7
  8695  13AE  0830               	movf	FLASH_WriteWord@word,w
  8696  13AF  3FC0               	movwi [0]fsr1
  8697  13B0  0831               	movf	FLASH_WriteWord@word+1,w
  8698  13B1  3FC1               	movwi [1]fsr1
  8699                           
  8700                           ;memory.c: 88: FLASH_WriteBlock(blockStartAddr, ramBuf);
  8701  13B2  0835               	movf	FLASH_WriteWord@blockStartAddr+1,w
  8702  13B3  00A4               	movwf	FLASH_WriteBlock@writeAddr+1
  8703  13B4  0834               	movf	FLASH_WriteWord@blockStartAddr,w
  8704  13B5  00A3               	movwf	FLASH_WriteBlock@writeAddr
  8705  13B6  082F               	movf	FLASH_WriteWord@ramBuf,w
  8706  13B7  00B2               	movwf	??_FLASH_WriteWord
  8707  13B8  0832               	movf	??_FLASH_WriteWord,w
  8708  13B9  00A5               	movwf	FLASH_WriteBlock@flashWordArray
  8709  13BA  3196  2635         	fcall	_FLASH_WriteBlock
  8710  13BC  0008               	return
  8711  13BD                     __end_of_FLASH_WriteWord:	
  8712                           
  8713                           	psect	text14
  8714  1635                     __ptext14:	
  8715 ;; *************** function _FLASH_WriteBlock *****************
  8716 ;; Defined at:
  8717 ;;		line 91 in file "memory.c"
  8718 ;; Parameters:    Size  Location     Type
  8719 ;;  writeAddr       2    3[BANK0 ] unsigned int 
  8720 ;;  flashWordArr    1    5[BANK0 ] PTR unsigned int 
  8721 ;;		 -> myBuf(64), 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;  blockStartAd    2    9[BANK0 ] unsigned int 
  8724 ;;  i               1   12[BANK0 ] unsigned char 
  8725 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
  8726 ;; Return value:  Size  Location     Type
  8727 ;;                  1    wreg      char 
  8728 ;; Registers used:
  8729 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8730 ;; Tracked objects:
  8731 ;;		On entry : 0/0
  8732 ;;		On exit  : 0/0
  8733 ;;		Unchanged: 0/0
  8734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8736 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8737 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8738 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8739 ;;Total ram usage:       10 bytes
  8740 ;; Hardware stack levels used:    1
  8741 ;; Hardware stack levels required when called:    3
  8742 ;; This function calls:
  8743 ;;		_FLASH_EraseBlock
  8744 ;; This function is called by:
  8745 ;;		_FLASH_WriteWord
  8746 ;; This function uses a non-reentrant model
  8747 ;;
  8748                           
  8749                           
  8750                           ;psect for function _FLASH_WriteBlock
  8751  1635                     _FLASH_WriteBlock:	
  8752                           
  8753                           ;memory.c: 92: uint16_t blockStartAddr = (uint16_t) (writeAddr & ((16384 - 1) ^ (32 - 1)
      +                          ));
  8754                           
  8755                           ;incstack = 0
  8756                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8757  1635  30E0               	movlw	224
  8758  1636  0020               	movlb	0	; select bank0
  8759  1637  0523               	andwf	FLASH_WriteBlock@writeAddr,w
  8760  1638  00A9               	movwf	FLASH_WriteBlock@blockStartAddr
  8761  1639  303F               	movlw	63
  8762  163A  0524               	andwf	FLASH_WriteBlock@writeAddr+1,w
  8763  163B  00AA               	movwf	FLASH_WriteBlock@blockStartAddr+1
  8764                           
  8765                           ;memory.c: 93: uint8_t GIEBitValue = INTCONbits.GIE;
  8766  163C  3000               	movlw	0
  8767  163D  1B8B               	btfsc	11,7	;volatile
  8768  163E  3001               	movlw	1
  8769  163F  00AB               	movwf	FLASH_WriteBlock@GIEBitValue
  8770                           
  8771                           ;memory.c: 94: uint8_t i;
  8772                           ;memory.c: 97: if (writeAddr != blockStartAddr) {
  8773  1640  082A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
  8774  1641  0624               	xorwf	FLASH_WriteBlock@writeAddr+1,w
  8775  1642  1D03               	skipz
  8776  1643  2E46               	goto	u2255
  8777  1644  0829               	movf	FLASH_WriteBlock@blockStartAddr,w
  8778  1645  0623               	xorwf	FLASH_WriteBlock@writeAddr,w
  8779  1646                     u2255:	
  8780  1646  1D03               	btfss	3,2
  8781  1647  0008               	return
  8782                           
  8783                           ;memory.c: 99: }
  8784                           ;memory.c: 101: INTCONbits.GIE = 0;
  8785                           
  8786                           ;memory.c: 98: return -1;
  8787                           ;	Return value of _FLASH_WriteBlock is never used
  8788  1648  138B               	bcf	11,7	;volatile
  8789                           
  8790                           ;memory.c: 104: FLASH_EraseBlock(writeAddr);
  8791  1649  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
  8792  164A  00A1               	movwf	FLASH_EraseBlock@startAddr+1
  8793  164B  0823               	movf	FLASH_WriteBlock@writeAddr,w
  8794  164C  00A0               	movwf	FLASH_EraseBlock@startAddr
  8795  164D  319F  27BB  3196   	fcall	_FLASH_EraseBlock
  8796                           
  8797                           ;memory.c: 107: PMCON1bits.CFGS = 0;
  8798  1650  0023               	movlb	3	; select bank3
  8799  1651  1315               	bcf	21,6	;volatile
  8800                           
  8801                           ;memory.c: 108: PMCON1bits.WREN = 1;
  8802  1652  1515               	bsf	21,2	;volatile
  8803                           
  8804                           ;memory.c: 109: PMCON1bits.LWLO = 1;
  8805  1653  1695               	bsf	21,5	;volatile
  8806                           
  8807                           ;memory.c: 111: for (i = 0; i < 32; i++) {
  8808  1654  0020               	movlb	0	; select bank0
  8809  1655  01AC               	clrf	FLASH_WriteBlock@i
  8810  1656  3020               	movlw	32
  8811  1657  022C               	subwf	FLASH_WriteBlock@i,w
  8812  1658  1803               	btfsc	3,0
  8813  1659  2E97               	goto	l533
  8814  165A                     l2932:	
  8815                           
  8816                           ;memory.c: 113: PMADRL = (writeAddr & 0xFF);
  8817  165A  0823               	movf	FLASH_WriteBlock@writeAddr,w
  8818  165B  0023               	movlb	3	; select bank3
  8819  165C  0091               	movwf	17	;volatile
  8820                           
  8821                           ;memory.c: 115: PMADRH = ((writeAddr & 0xFF00) >> 8);
  8822  165D  0020               	movlb	0	; select bank0
  8823  165E  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
  8824  165F  0023               	movlb	3	; select bank3
  8825  1660  0092               	movwf	18	;volatile
  8826                           
  8827                           ;memory.c: 118: PMDATL = flashWordArray[i];
  8828  1661  0020               	movlb	0	; select bank0
  8829  1662  352C               	lslf	FLASH_WriteBlock@i,w
  8830  1663  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
  8831  1664  00A6               	movwf	??_FLASH_WriteBlock
  8832  1665  0826               	movf	??_FLASH_WriteBlock,w
  8833  1666  0086               	movwf	6
  8834  1667  3002               	movlw	2	; select bank4/5
  8835  1668  0087               	movwf	7
  8836  1669  0801               	movf	1,w
  8837  166A  0023               	movlb	3	; select bank3
  8838  166B  0093               	movwf	19	;volatile
  8839                           
  8840                           ;memory.c: 119: PMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
  8841  166C  0020               	movlb	0	; select bank0
  8842  166D  352C               	lslf	FLASH_WriteBlock@i,w
  8843  166E  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
  8844  166F  00A6               	movwf	??_FLASH_WriteBlock
  8845  1670  0826               	movf	??_FLASH_WriteBlock,w
  8846  1671  0086               	movwf	6
  8847  1672  3002               	movlw	2	; select bank4/5
  8848  1673  0087               	movwf	7
  8849  1674  3F40               	moviw [0]fsr1
  8850  1675  00A7               	movwf	??_FLASH_WriteBlock+1
  8851  1676  3F41               	moviw [1]fsr1
  8852  1677  00A8               	movwf	??_FLASH_WriteBlock+2
  8853  1678  0828               	movf	??_FLASH_WriteBlock+2,w
  8854  1679  0023               	movlb	3	; select bank3
  8855  167A  0094               	movwf	20	;volatile
  8856                           
  8857                           ;memory.c: 121: if (i == (32 - 1)) {
  8858  167B  301F               	movlw	31
  8859  167C  0020               	movlb	0	; select bank0
  8860  167D  062C               	xorwf	FLASH_WriteBlock@i,w
  8861  167E  1D03               	btfss	3,2
  8862  167F  2E82               	goto	l2944
  8863                           
  8864                           ;memory.c: 123: PMCON1bits.LWLO = 0;
  8865  1680  0023               	movlb	3	; select bank3
  8866  1681  1295               	bcf	21,5	;volatile
  8867  1682                     l2944:	
  8868                           
  8869                           ;memory.c: 124: }
  8870                           ;memory.c: 126: PMCON2 = 0x55;
  8871  1682  3055               	movlw	85
  8872  1683  0023               	movlb	3	; select bank3
  8873  1684  0096               	movwf	22	;volsfr
  8874                           
  8875                           ;memory.c: 127: PMCON2 = 0xAA;
  8876  1685  30AA               	movlw	170
  8877  1686  0096               	movwf	22	;volsfr
  8878                           
  8879                           ;memory.c: 128: PMCON1bits.WR = 1;
  8880  1687  1495               	bsf	21,1	;volatile
  8881                           
  8882                           ;memory.c: 129: __nop();
  8883  1688  0000               	nop
  8884                           
  8885                           ;memory.c: 130: __nop();
  8886  1689  0000               	nop
  8887                           
  8888                           ;memory.c: 132: writeAddr++;
  8889  168A  3001               	movlw	1
  8890  168B  0020               	movlb	0	; select bank0
  8891  168C  07A3               	addwf	FLASH_WriteBlock@writeAddr,f
  8892  168D  3000               	movlw	0
  8893  168E  3DA4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
  8894  168F  3001               	movlw	1
  8895  1690  00A6               	movwf	??_FLASH_WriteBlock
  8896  1691  0826               	movf	??_FLASH_WriteBlock,w
  8897  1692  07AC               	addwf	FLASH_WriteBlock@i,f
  8898  1693  3020               	movlw	32
  8899  1694  022C               	subwf	FLASH_WriteBlock@i,w
  8900  1695  1C03               	skipc
  8901  1696  2E5A               	goto	l2932
  8902  1697                     l533:	
  8903                           
  8904                           ;memory.c: 133: }
  8905                           ;memory.c: 135: PMCON1bits.WREN = 0;
  8906  1697  0023               	movlb	3	; select bank3
  8907  1698  1115               	bcf	21,2	;volatile
  8908                           
  8909                           ;memory.c: 136: INTCONbits.GIE = GIEBitValue;
  8910  1699  0020               	movlb	0	; select bank0
  8911  169A  0C2B               	rrf	FLASH_WriteBlock@GIEBitValue,w
  8912  169B  1C03               	skipc
  8913  169C  138B               	bcf	11,7	;volatile
  8914  169D  1803               	skipnc
  8915  169E  178B               	bsf	11,7	;volatile
  8916  169F  0008               	return
  8917  16A0                     __end_of_FLASH_WriteBlock:	
  8918                           ;memory.c: 138: return 0;
  8919                           ;	Return value of _FLASH_WriteBlock is never used
  8920                           
  8921                           
  8922                           	psect	text15
  8923  1FBB                     __ptext15:	
  8924 ;; *************** function _FLASH_EraseBlock *****************
  8925 ;; Defined at:
  8926 ;;		line 141 in file "memory.c"
  8927 ;; Parameters:    Size  Location     Type
  8928 ;;  startAddr       2    0[BANK0 ] unsigned int 
  8929 ;; Auto vars:     Size  Location     Type
  8930 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8931 ;; Return value:  Size  Location     Type
  8932 ;;                  1    wreg      void 
  8933 ;; Registers used:
  8934 ;;		wreg, status,2, status,0
  8935 ;; Tracked objects:
  8936 ;;		On entry : 0/0
  8937 ;;		On exit  : 0/0
  8938 ;;		Unchanged: 0/0
  8939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8940 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8943 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8944 ;;Total ram usage:        3 bytes
  8945 ;; Hardware stack levels used:    1
  8946 ;; Hardware stack levels required when called:    2
  8947 ;; This function calls:
  8948 ;;		Nothing
  8949 ;; This function is called by:
  8950 ;;		_FLASH_WriteBlock
  8951 ;; This function uses a non-reentrant model
  8952 ;;
  8953                           
  8954                           
  8955                           ;psect for function _FLASH_EraseBlock
  8956  1FBB                     _FLASH_EraseBlock:	
  8957                           
  8958                           ;memory.c: 142: uint8_t GIEBitValue = INTCONbits.GIE;
  8959                           
  8960                           ;incstack = 0
  8961                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
  8962  1FBB  3000               	movlw	0
  8963  1FBC  1B8B               	btfsc	11,7	;volatile
  8964  1FBD  3001               	movlw	1
  8965  1FBE  0020               	movlb	0	; select bank0
  8966  1FBF  00A2               	movwf	FLASH_EraseBlock@GIEBitValue
  8967                           
  8968                           ;memory.c: 145: INTCONbits.GIE = 0;
  8969  1FC0  138B               	bcf	11,7	;volatile
  8970                           
  8971                           ;memory.c: 147: PMADRL = (startAddr & 0xFF);
  8972  1FC1  0820               	movf	FLASH_EraseBlock@startAddr,w
  8973  1FC2  0023               	movlb	3	; select bank3
  8974  1FC3  0091               	movwf	17	;volatile
  8975                           
  8976                           ;memory.c: 149: PMADRH = ((startAddr & 0xFF00) >> 8);
  8977  1FC4  0020               	movlb	0	; select bank0
  8978  1FC5  0821               	movf	FLASH_EraseBlock@startAddr+1,w
  8979  1FC6  0023               	movlb	3	; select bank3
  8980  1FC7  0092               	movwf	18	;volatile
  8981                           
  8982                           ;memory.c: 152: PMCON1bits.CFGS = 0;
  8983  1FC8  1315               	bcf	21,6	;volatile
  8984                           
  8985                           ;memory.c: 153: PMCON1bits.FREE = 1;
  8986  1FC9  1615               	bsf	21,4	;volatile
  8987                           
  8988                           ;memory.c: 154: PMCON1bits.WREN = 1;
  8989  1FCA  1515               	bsf	21,2	;volatile
  8990                           
  8991                           ;memory.c: 157: PMCON2 = 0x55;
  8992  1FCB  3055               	movlw	85
  8993  1FCC  0096               	movwf	22	;volsfr
  8994                           
  8995                           ;memory.c: 158: PMCON2 = 0xAA;
  8996  1FCD  30AA               	movlw	170
  8997  1FCE  0096               	movwf	22	;volsfr
  8998                           
  8999                           ;memory.c: 159: PMCON1bits.WR = 1;
  9000  1FCF  1495               	bsf	21,1	;volatile
  9001                           
  9002                           ;memory.c: 160: __nop();
  9003  1FD0  0000               	nop
  9004                           
  9005                           ;memory.c: 161: __nop();
  9006  1FD1  0000               	nop
  9007                           
  9008                           ;memory.c: 163: PMCON1bits.WREN = 0;
  9009  1FD2  0023               	movlb	3	; select bank3
  9010  1FD3  1115               	bcf	21,2	;volatile
  9011                           
  9012                           ;memory.c: 164: INTCONbits.GIE = GIEBitValue;
  9013  1FD4  0020               	movlb	0	; select bank0
  9014  1FD5  0C22               	rrf	FLASH_EraseBlock@GIEBitValue,w
  9015  1FD6  1C03               	skipc
  9016  1FD7  138B               	bcf	11,7	;volatile
  9017  1FD8  1803               	skipnc
  9018  1FD9  178B               	bsf	11,7	;volatile
  9019  1FDA  0008               	return
  9020  1FDB                     __end_of_FLASH_EraseBlock:	
  9021                           
  9022                           	psect	text16
  9023  123A                     __ptext16:	
  9024 ;; *************** function _modulation *****************
  9025 ;; Defined at:
  9026 ;;		line 169 in file "user.c"
  9027 ;; Parameters:    Size  Location     Type
  9028 ;;  x               2   21[BANK0 ] int 
  9029 ;;  y               2   23[BANK0 ] int 
  9030 ;; Auto vars:     Size  Location     Type
  9031 ;;		None
  9032 ;; Return value:  Size  Location     Type
  9033 ;;                  2   21[BANK0 ] int 
  9034 ;; Registers used:
  9035 ;;		wreg, status,2, status,0, pclath, cstack
  9036 ;; Tracked objects:
  9037 ;;		On entry : 0/0
  9038 ;;		On exit  : 0/0
  9039 ;;		Unchanged: 0/0
  9040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9041 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9043 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9044 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9045 ;;Total ram usage:       12 bytes
  9046 ;; Hardware stack levels used:    1
  9047 ;; Hardware stack levels required when called:    3
  9048 ;; This function calls:
  9049 ;;		___aldiv
  9050 ;;		___wmul
  9051 ;; This function is called by:
  9052 ;;		_main
  9053 ;; This function uses a non-reentrant model
  9054 ;;
  9055                           
  9056                           
  9057                           ;psect for function _modulation
  9058  123A                     _modulation:	
  9059                           
  9060                           ;user.c: 171: x = (127500 + (y * x)) / 1000;
  9061                           
  9062                           ;incstack = 0
  9063                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
  9064  123A  3000               	movlw	0
  9065  123B  0020               	movlb	0	; select bank0
  9066  123C  00A9               	movwf	___aldiv@divisor+3
  9067  123D  3000               	movlw	0
  9068  123E  00A8               	movwf	___aldiv@divisor+2
  9069  123F  3003               	movlw	3
  9070  1240  00A7               	movwf	___aldiv@divisor+1
  9071  1241  30E8               	movlw	232
  9072  1242  00A6               	movwf	___aldiv@divisor
  9073  1243  300C               	movlw	12
  9074  1244  00B9               	movwf	??_modulation
  9075  1245  30F2               	movlw	242
  9076  1246  00BA               	movwf	??_modulation+1
  9077  1247  3001               	movlw	1
  9078  1248  00BB               	movwf	??_modulation+2
  9079  1249  3000               	movlw	0
  9080  124A  00BC               	movwf	??_modulation+3
  9081  124B  0838               	movf	modulation@y+1,w
  9082  124C  00A1               	movwf	___wmul@multiplier+1
  9083  124D  0837               	movf	modulation@y,w
  9084  124E  00A0               	movwf	___wmul@multiplier
  9085  124F  0836               	movf	modulation@x+1,w
  9086  1250  00A3               	movwf	___wmul@multiplicand+1
  9087  1251  0835               	movf	modulation@x,w
  9088  1252  00A2               	movwf	___wmul@multiplicand
  9089  1253  319F  277F  3192   	fcall	___wmul
  9090  1256  0020               	movlb	0	; select bank0
  9091  1257  0820               	movf	?___wmul,w
  9092  1258  00BD               	movwf	??_modulation+4
  9093  1259  0821               	movf	?___wmul+1,w
  9094  125A  00BE               	movwf	??_modulation+5
  9095  125B  3000               	movlw	0
  9096  125C  1BBE               	btfsc	??_modulation+5,7
  9097  125D  30FF               	movlw	255
  9098  125E  00BF               	movwf	??_modulation+6
  9099  125F  00C0               	movwf	??_modulation+7
  9100  1260  083D               	movf	??_modulation+4,w
  9101  1261  07B9               	addwf	??_modulation,f
  9102  1262  083E               	movf	??_modulation+5,w
  9103  1263  3DBA               	addwfc	??_modulation+1,f
  9104  1264  083F               	movf	??_modulation+6,w
  9105  1265  3DBB               	addwfc	??_modulation+2,f
  9106  1266  0840               	movf	??_modulation+7,w
  9107  1267  3DBC               	addwfc	??_modulation+3,f
  9108  1268  083C               	movf	??_modulation+3,w
  9109  1269  00AD               	movwf	___aldiv@dividend+3
  9110  126A  083B               	movf	??_modulation+2,w
  9111  126B  00AC               	movwf	___aldiv@dividend+2
  9112  126C  083A               	movf	??_modulation+1,w
  9113  126D  00AB               	movwf	___aldiv@dividend+1
  9114  126E  0839               	movf	??_modulation,w
  9115  126F  00AA               	movwf	___aldiv@dividend
  9116  1270  3197  277E         	fcall	___aldiv
  9117  1272  0020               	movlb	0	; select bank0
  9118  1273  0827               	movf	?___aldiv+1,w
  9119  1274  00B6               	movwf	modulation@x+1
  9120  1275  0826               	movf	?___aldiv,w
  9121  1276  00B5               	movwf	modulation@x
  9122                           
  9123                           ;user.c: 172: return x;
  9124  1277  0008               	return
  9125  1278                     __end_of_modulation:	
  9126                           
  9127                           	psect	text17
  9128  1F7F                     __ptext17:	
  9129 ;; *************** function ___wmul *****************
  9130 ;; Defined at:
  9131 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul16.c"
  9132 ;; Parameters:    Size  Location     Type
  9133 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9134 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9135 ;; Auto vars:     Size  Location     Type
  9136 ;;  product         2    4[BANK0 ] unsigned int 
  9137 ;; Return value:  Size  Location     Type
  9138 ;;                  2    0[BANK0 ] unsigned int 
  9139 ;; Registers used:
  9140 ;;		wreg, status,2, status,0
  9141 ;; Tracked objects:
  9142 ;;		On entry : 0/0
  9143 ;;		On exit  : 0/0
  9144 ;;		Unchanged: 0/0
  9145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9146 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9147 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9149 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9150 ;;Total ram usage:        6 bytes
  9151 ;; Hardware stack levels used:    1
  9152 ;; Hardware stack levels required when called:    2
  9153 ;; This function calls:
  9154 ;;		Nothing
  9155 ;; This function is called by:
  9156 ;;		_modulation
  9157 ;; This function uses a non-reentrant model
  9158 ;;
  9159                           
  9160                           
  9161                           ;psect for function ___wmul
  9162  1F7F                     ___wmul:	
  9163                           
  9164                           ;incstack = 0
  9165                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9166  1F7F  0020               	movlb	0	; select bank0
  9167  1F80  01A4               	clrf	___wmul@product
  9168  1F81  01A5               	clrf	___wmul@product+1
  9169  1F82                     l3112:	
  9170  1F82  1C20               	btfss	___wmul@multiplier,0
  9171  1F83  2F88               	goto	l1010
  9172  1F84  0822               	movf	___wmul@multiplicand,w
  9173  1F85  07A4               	addwf	___wmul@product,f
  9174  1F86  0823               	movf	___wmul@multiplicand+1,w
  9175  1F87  3DA5               	addwfc	___wmul@product+1,f
  9176  1F88                     l1010:	
  9177  1F88  3001               	movlw	1
  9178  1F89                     u2525:	
  9179  1F89  35A2               	lslf	___wmul@multiplicand,f
  9180  1F8A  0DA3               	rlf	___wmul@multiplicand+1,f
  9181  1F8B  0B89               	decfsz	9,f
  9182  1F8C  2F89               	goto	u2525
  9183  1F8D  3001               	movlw	1
  9184  1F8E                     u2535:	
  9185  1F8E  36A1               	lsrf	___wmul@multiplier+1,f
  9186  1F8F  0CA0               	rrf	___wmul@multiplier,f
  9187  1F90  0B89               	decfsz	9,f
  9188  1F91  2F8E               	goto	u2535
  9189  1F92  0820               	movf	___wmul@multiplier,w
  9190  1F93  0421               	iorwf	___wmul@multiplier+1,w
  9191  1F94  1D03               	btfss	3,2
  9192  1F95  2F82               	goto	l3112
  9193  1F96  0825               	movf	___wmul@product+1,w
  9194  1F97  00A1               	movwf	?___wmul+1
  9195  1F98  0824               	movf	___wmul@product,w
  9196  1F99  00A0               	movwf	?___wmul
  9197  1F9A  0008               	return
  9198  1F9B                     __end_of___wmul:	
  9199                           
  9200                           	psect	text18
  9201  177E                     __ptext18:	
  9202 ;; *************** function ___aldiv *****************
  9203 ;; Defined at:
  9204 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  9205 ;; Parameters:    Size  Location     Type
  9206 ;;  divisor         4    6[BANK0 ] long 
  9207 ;;  dividend        4   10[BANK0 ] long 
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  quotient        4   17[BANK0 ] long 
  9210 ;;  sign            1   16[BANK0 ] unsigned char 
  9211 ;;  counter         1   15[BANK0 ] unsigned char 
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  4    6[BANK0 ] long 
  9214 ;; Registers used:
  9215 ;;		wreg, status,2, status,0
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9221 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9222 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9223 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9224 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9225 ;;Total ram usage:       15 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    2
  9228 ;; This function calls:
  9229 ;;		Nothing
  9230 ;; This function is called by:
  9231 ;;		_main
  9232 ;;		_modulation
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           
  9237                           ;psect for function ___aldiv
  9238  177E                     ___aldiv:	
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9242  177E  0020               	movlb	0	; select bank0
  9243  177F  01B0               	clrf	___aldiv@sign
  9244  1780  1FA9               	btfss	___aldiv@divisor+3,7
  9245  1781  2F8F               	goto	l1065
  9246  1782  09A6               	comf	___aldiv@divisor,f
  9247  1783  09A7               	comf	___aldiv@divisor+1,f
  9248  1784  09A8               	comf	___aldiv@divisor+2,f
  9249  1785  09A9               	comf	___aldiv@divisor+3,f
  9250  1786  0AA6               	incf	___aldiv@divisor,f
  9251  1787  1903               	skipnz
  9252  1788  0AA7               	incf	___aldiv@divisor+1,f
  9253  1789  1903               	skipnz
  9254  178A  0AA8               	incf	___aldiv@divisor+2,f
  9255  178B  1903               	skipnz
  9256  178C  0AA9               	incf	___aldiv@divisor+3,f
  9257  178D  01B0               	clrf	___aldiv@sign
  9258  178E  0AB0               	incf	___aldiv@sign,f
  9259  178F                     l1065:	
  9260  178F  1FAD               	btfss	___aldiv@dividend+3,7
  9261  1790  2FA0               	goto	l3134
  9262  1791  09AA               	comf	___aldiv@dividend,f
  9263  1792  09AB               	comf	___aldiv@dividend+1,f
  9264  1793  09AC               	comf	___aldiv@dividend+2,f
  9265  1794  09AD               	comf	___aldiv@dividend+3,f
  9266  1795  0AAA               	incf	___aldiv@dividend,f
  9267  1796  1903               	skipnz
  9268  1797  0AAB               	incf	___aldiv@dividend+1,f
  9269  1798  1903               	skipnz
  9270  1799  0AAC               	incf	___aldiv@dividend+2,f
  9271  179A  1903               	skipnz
  9272  179B  0AAD               	incf	___aldiv@dividend+3,f
  9273  179C  3001               	movlw	1
  9274  179D  00AE               	movwf	??___aldiv
  9275  179E  082E               	movf	??___aldiv,w
  9276  179F  06B0               	xorwf	___aldiv@sign,f
  9277  17A0                     l3134:	
  9278  17A0  3000               	movlw	0
  9279  17A1  00B4               	movwf	___aldiv@quotient+3
  9280  17A2  3000               	movlw	0
  9281  17A3  00B3               	movwf	___aldiv@quotient+2
  9282  17A4  3000               	movlw	0
  9283  17A5  00B2               	movwf	___aldiv@quotient+1
  9284  17A6  3000               	movlw	0
  9285  17A7  00B1               	movwf	___aldiv@quotient
  9286  17A8  0829               	movf	___aldiv@divisor+3,w
  9287  17A9  0428               	iorwf	___aldiv@divisor+2,w
  9288  17AA  0427               	iorwf	___aldiv@divisor+1,w
  9289  17AB  0426               	iorwf	___aldiv@divisor,w
  9290  17AC  1903               	skipnz
  9291  17AD  2FE9               	goto	l3156
  9292  17AE  01AF               	clrf	___aldiv@counter
  9293  17AF  0AAF               	incf	___aldiv@counter,f
  9294  17B0                     l3142:	
  9295  17B0  1BA9               	btfsc	___aldiv@divisor+3,7
  9296  17B1  2FBE               	goto	l3144
  9297  17B2  3001               	movlw	1
  9298  17B3                     u2585:	
  9299  17B3  35A6               	lslf	___aldiv@divisor,f
  9300  17B4  0DA7               	rlf	___aldiv@divisor+1,f
  9301  17B5  0DA8               	rlf	___aldiv@divisor+2,f
  9302  17B6  0DA9               	rlf	___aldiv@divisor+3,f
  9303  17B7  0B89               	decfsz	9,f
  9304  17B8  2FB3               	goto	u2585
  9305  17B9  3001               	movlw	1
  9306  17BA  00AE               	movwf	??___aldiv
  9307  17BB  082E               	movf	??___aldiv,w
  9308  17BC  07AF               	addwf	___aldiv@counter,f
  9309  17BD  2FB0               	goto	l3142
  9310  17BE                     l3144:	
  9311  17BE  3001               	movlw	1
  9312  17BF                     u2605:	
  9313  17BF  35B1               	lslf	___aldiv@quotient,f
  9314  17C0  0DB2               	rlf	___aldiv@quotient+1,f
  9315  17C1  0DB3               	rlf	___aldiv@quotient+2,f
  9316  17C2  0DB4               	rlf	___aldiv@quotient+3,f
  9317  17C3  0B89               	decfsz	9,f
  9318  17C4  2FBF               	goto	u2605
  9319  17C5  0829               	movf	___aldiv@divisor+3,w
  9320  17C6  022D               	subwf	___aldiv@dividend+3,w
  9321  17C7  1D03               	skipz
  9322  17C8  2FD3               	goto	u2615
  9323  17C9  0828               	movf	___aldiv@divisor+2,w
  9324  17CA  022C               	subwf	___aldiv@dividend+2,w
  9325  17CB  1D03               	skipz
  9326  17CC  2FD3               	goto	u2615
  9327  17CD  0827               	movf	___aldiv@divisor+1,w
  9328  17CE  022B               	subwf	___aldiv@dividend+1,w
  9329  17CF  1D03               	skipz
  9330  17D0  2FD3               	goto	u2615
  9331  17D1  0826               	movf	___aldiv@divisor,w
  9332  17D2  022A               	subwf	___aldiv@dividend,w
  9333  17D3                     u2615:	
  9334  17D3  1C03               	skipc
  9335  17D4  2FDE               	goto	l3152
  9336  17D5  0826               	movf	___aldiv@divisor,w
  9337  17D6  02AA               	subwf	___aldiv@dividend,f
  9338  17D7  0827               	movf	___aldiv@divisor+1,w
  9339  17D8  3BAB               	subwfb	___aldiv@dividend+1,f
  9340  17D9  0828               	movf	___aldiv@divisor+2,w
  9341  17DA  3BAC               	subwfb	___aldiv@dividend+2,f
  9342  17DB  0829               	movf	___aldiv@divisor+3,w
  9343  17DC  3BAD               	subwfb	___aldiv@dividend+3,f
  9344  17DD  1431               	bsf	___aldiv@quotient,0
  9345  17DE                     l3152:	
  9346  17DE  3001               	movlw	1
  9347  17DF                     u2625:	
  9348  17DF  36A9               	lsrf	___aldiv@divisor+3,f
  9349  17E0  0CA8               	rrf	___aldiv@divisor+2,f
  9350  17E1  0CA7               	rrf	___aldiv@divisor+1,f
  9351  17E2  0CA6               	rrf	___aldiv@divisor,f
  9352  17E3  0B89               	decfsz	9,f
  9353  17E4  2FDF               	goto	u2625
  9354  17E5  3001               	movlw	1
  9355  17E6  02AF               	subwf	___aldiv@counter,f
  9356  17E7  1D03               	btfss	3,2
  9357  17E8  2FBE               	goto	l3144
  9358  17E9                     l3156:	
  9359  17E9  0830               	movf	___aldiv@sign,w
  9360  17EA  1903               	btfsc	3,2
  9361  17EB  2FF7               	goto	l3160
  9362  17EC  09B1               	comf	___aldiv@quotient,f
  9363  17ED  09B2               	comf	___aldiv@quotient+1,f
  9364  17EE  09B3               	comf	___aldiv@quotient+2,f
  9365  17EF  09B4               	comf	___aldiv@quotient+3,f
  9366  17F0  0AB1               	incf	___aldiv@quotient,f
  9367  17F1  1903               	skipnz
  9368  17F2  0AB2               	incf	___aldiv@quotient+1,f
  9369  17F3  1903               	skipnz
  9370  17F4  0AB3               	incf	___aldiv@quotient+2,f
  9371  17F5  1903               	skipnz
  9372  17F6  0AB4               	incf	___aldiv@quotient+3,f
  9373  17F7                     l3160:	
  9374  17F7  0834               	movf	___aldiv@quotient+3,w
  9375  17F8  00A9               	movwf	?___aldiv+3
  9376  17F9  0833               	movf	___aldiv@quotient+2,w
  9377  17FA  00A8               	movwf	?___aldiv+2
  9378  17FB  0832               	movf	___aldiv@quotient+1,w
  9379  17FC  00A7               	movwf	?___aldiv+1
  9380  17FD  0831               	movf	___aldiv@quotient,w
  9381  17FE  00A6               	movwf	?___aldiv
  9382  17FF  0008               	return
  9383  1800                     __end_of___aldiv:	
  9384                           
  9385                           	psect	text19
  9386  081B                     __ptext19:	
  9387 ;; *************** function _map *****************
  9388 ;; Defined at:
  9389 ;;		line 165 in file "user.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  x               3   53[BANK0 ] float 
  9392 ;;  in_min          3   56[BANK0 ] float 
  9393 ;;  in_max          3   59[BANK0 ] float 
  9394 ;;  out_min         3   62[BANK0 ] float 
  9395 ;;  out_max         3   65[BANK0 ] float 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  3   53[BANK0 ] float 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, pclath, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9407 ;;      Params:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9408 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9410 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9411 ;;Total ram usage:       18 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    4
  9414 ;; This function calls:
  9415 ;;		___ftadd
  9416 ;;		___ftdiv
  9417 ;;		___ftmul
  9418 ;;		___ftneg
  9419 ;; This function is called by:
  9420 ;;		_main
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function _map
  9426  081B                     _map:	
  9427                           
  9428                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9432  081B  0020               	movlb	0	; select bank0
  9433  081C  085B               	movf	map@in_max,w
  9434  081D  00A8               	movwf	___ftadd@f1
  9435  081E  085C               	movf	map@in_max+1,w
  9436  081F  00A9               	movwf	___ftadd@f1+1
  9437  0820  085D               	movf	map@in_max+2,w
  9438  0821  00AA               	movwf	___ftadd@f1+2
  9439  0822  0858               	movf	map@in_min,w
  9440  0823  00A0               	movwf	___ftneg@f1
  9441  0824  0859               	movf	map@in_min+1,w
  9442  0825  00A1               	movwf	___ftneg@f1+1
  9443  0826  085A               	movf	map@in_min+2,w
  9444  0827  00A2               	movwf	___ftneg@f1+2
  9445  0828  319F  2702  3188   	fcall	___ftneg
  9446  082B  0020               	movlb	0	; select bank0
  9447  082C  0820               	movf	?___ftneg,w
  9448  082D  00AB               	movwf	___ftadd@f2
  9449  082E  0821               	movf	?___ftneg+1,w
  9450  082F  00AC               	movwf	___ftadd@f2+1
  9451  0830  0822               	movf	?___ftneg+2,w
  9452  0831  00AD               	movwf	___ftadd@f2+2
  9453  0832  3185  254F  3188   	fcall	___ftadd
  9454  0835  0020               	movlb	0	; select bank0
  9455  0836  0828               	movf	?___ftadd,w
  9456  0837  00C5               	movwf	___ftdiv@f2
  9457  0838  0829               	movf	?___ftadd+1,w
  9458  0839  00C6               	movwf	___ftdiv@f2+1
  9459  083A  082A               	movf	?___ftadd+2,w
  9460  083B  00C7               	movwf	___ftdiv@f2+2
  9461  083C  0861               	movf	map@out_max,w
  9462  083D  00A8               	movwf	___ftadd@f1
  9463  083E  0862               	movf	map@out_max+1,w
  9464  083F  00A9               	movwf	___ftadd@f1+1
  9465  0840  0863               	movf	map@out_max+2,w
  9466  0841  00AA               	movwf	___ftadd@f1+2
  9467  0842  085E               	movf	map@out_min,w
  9468  0843  00A0               	movwf	___ftneg@f1
  9469  0844  085F               	movf	map@out_min+1,w
  9470  0845  00A1               	movwf	___ftneg@f1+1
  9471  0846  0860               	movf	map@out_min+2,w
  9472  0847  00A2               	movwf	___ftneg@f1+2
  9473  0848  319F  2702  3188   	fcall	___ftneg
  9474  084B  0020               	movlb	0	; select bank0
  9475  084C  0820               	movf	?___ftneg,w
  9476  084D  00AB               	movwf	___ftadd@f2
  9477  084E  0821               	movf	?___ftneg+1,w
  9478  084F  00AC               	movwf	___ftadd@f2+1
  9479  0850  0822               	movf	?___ftneg+2,w
  9480  0851  00AD               	movwf	___ftadd@f2+2
  9481  0852  3185  254F  3188   	fcall	___ftadd
  9482  0855  0020               	movlb	0	; select bank0
  9483  0856  0828               	movf	?___ftadd,w
  9484  0857  00B5               	movwf	___ftmul@f1
  9485  0858  0829               	movf	?___ftadd+1,w
  9486  0859  00B6               	movwf	___ftmul@f1+1
  9487  085A  082A               	movf	?___ftadd+2,w
  9488  085B  00B7               	movwf	___ftmul@f1+2
  9489  085C  0855               	movf	map@x,w
  9490  085D  00A8               	movwf	___ftadd@f1
  9491  085E  0856               	movf	map@x+1,w
  9492  085F  00A9               	movwf	___ftadd@f1+1
  9493  0860  0857               	movf	map@x+2,w
  9494  0861  00AA               	movwf	___ftadd@f1+2
  9495  0862  0858               	movf	map@in_min,w
  9496  0863  00A0               	movwf	___ftneg@f1
  9497  0864  0859               	movf	map@in_min+1,w
  9498  0865  00A1               	movwf	___ftneg@f1+1
  9499  0866  085A               	movf	map@in_min+2,w
  9500  0867  00A2               	movwf	___ftneg@f1+2
  9501  0868  319F  2702  3188   	fcall	___ftneg
  9502  086B  0020               	movlb	0	; select bank0
  9503  086C  0820               	movf	?___ftneg,w
  9504  086D  00AB               	movwf	___ftadd@f2
  9505  086E  0821               	movf	?___ftneg+1,w
  9506  086F  00AC               	movwf	___ftadd@f2+1
  9507  0870  0822               	movf	?___ftneg+2,w
  9508  0871  00AD               	movwf	___ftadd@f2+2
  9509  0872  3185  254F  3188   	fcall	___ftadd
  9510  0875  0020               	movlb	0	; select bank0
  9511  0876  0828               	movf	?___ftadd,w
  9512  0877  00B8               	movwf	___ftmul@f2
  9513  0878  0829               	movf	?___ftadd+1,w
  9514  0879  00B9               	movwf	___ftmul@f2+1
  9515  087A  082A               	movf	?___ftadd+2,w
  9516  087B  00BA               	movwf	___ftmul@f2+2
  9517  087C  3186  2645  3188   	fcall	___ftmul
  9518  087F  0020               	movlb	0	; select bank0
  9519  0880  0835               	movf	?___ftmul,w
  9520  0881  00C8               	movwf	___ftdiv@f1
  9521  0882  0836               	movf	?___ftmul+1,w
  9522  0883  00C9               	movwf	___ftdiv@f1+1
  9523  0884  0837               	movf	?___ftmul+2,w
  9524  0885  00CA               	movwf	___ftdiv@f1+2
  9525  0886  3186  26F9  3188   	fcall	___ftdiv
  9526  0889  0020               	movlb	0	; select bank0
  9527  088A  0845               	movf	?___ftdiv,w
  9528  088B  00E4               	movwf	_map$1955
  9529  088C  0846               	movf	?___ftdiv+1,w
  9530  088D  00E5               	movwf	_map$1955+1
  9531  088E  0847               	movf	?___ftdiv+2,w
  9532  088F  00E6               	movwf	_map$1955+2
  9533                           
  9534                           ;user.c: 166: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9535  0890  085E               	movf	map@out_min,w
  9536  0891  00A8               	movwf	___ftadd@f1
  9537  0892  085F               	movf	map@out_min+1,w
  9538  0893  00A9               	movwf	___ftadd@f1+1
  9539  0894  0860               	movf	map@out_min+2,w
  9540  0895  00AA               	movwf	___ftadd@f1+2
  9541  0896  0864               	movf	_map$1955,w
  9542  0897  00AB               	movwf	___ftadd@f2
  9543  0898  0865               	movf	_map$1955+1,w
  9544  0899  00AC               	movwf	___ftadd@f2+1
  9545  089A  0866               	movf	_map$1955+2,w
  9546  089B  00AD               	movwf	___ftadd@f2+2
  9547  089C  3185  254F         	fcall	___ftadd
  9548  089E  0020               	movlb	0	; select bank0
  9549  089F  0828               	movf	?___ftadd,w
  9550  08A0  00D5               	movwf	?_map
  9551  08A1  0829               	movf	?___ftadd+1,w
  9552  08A2  00D6               	movwf	?_map+1
  9553  08A3  082A               	movf	?___ftadd+2,w
  9554  08A4  00D7               	movwf	?_map+2
  9555  08A5  0008               	return
  9556  08A6                     __end_of_map:	
  9557                           
  9558                           	psect	text20
  9559  1F02                     __ptext20:	
  9560 ;; *************** function ___ftneg *****************
  9561 ;; Defined at:
  9562 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  f1              3    0[BANK0 ] float 
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  3    0[BANK0 ] float 
  9569 ;; Registers used:
  9570 ;;		wreg
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9576 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9580 ;;Total ram usage:        3 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    2
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_map
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           
  9591                           ;psect for function ___ftneg
  9592  1F02                     ___ftneg:	
  9593                           
  9594                           ;incstack = 0
  9595                           ; Regs used in ___ftneg: [wreg]
  9596  1F02  0020               	movlb	0	; select bank0
  9597  1F03  0822               	movf	___ftneg@f1+2,w
  9598  1F04  0421               	iorwf	___ftneg@f1+1,w
  9599  1F05  0420               	iorwf	___ftneg@f1,w
  9600  1F06  1903               	skipnz
  9601  1F07  0008               	return
  9602  1F08  3080               	movlw	128
  9603  1F09  06A2               	xorwf	___ftneg@f1+2,f
  9604  1F0A  0008               	return
  9605  1F0B                     __end_of___ftneg:	
  9606                           
  9607                           	psect	text21
  9608  0645                     __ptext21:	
  9609 ;; *************** function ___ftmul *****************
  9610 ;; Defined at:
  9611 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;  f1              3   21[BANK0 ] float 
  9614 ;;  f2              3   24[BANK0 ] float 
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;  f3_as_produc    3   32[BANK0 ] unsigned um
  9617 ;;  sign            1   36[BANK0 ] unsigned char 
  9618 ;;  cntr            1   35[BANK0 ] unsigned char 
  9619 ;;  exp             1   31[BANK0 ] unsigned char 
  9620 ;; Return value:  Size  Location     Type
  9621 ;;                  3   21[BANK0 ] float 
  9622 ;; Registers used:
  9623 ;;		wreg, status,2, status,0, pclath, cstack
  9624 ;; Tracked objects:
  9625 ;;		On entry : 0/0
  9626 ;;		On exit  : 0/0
  9627 ;;		Unchanged: 0/0
  9628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9629 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9630 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9631 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9632 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9633 ;;Total ram usage:       16 bytes
  9634 ;; Hardware stack levels used:    1
  9635 ;; Hardware stack levels required when called:    3
  9636 ;; This function calls:
  9637 ;;		___ftpack
  9638 ;; This function is called by:
  9639 ;;		_set_subdivision
  9640 ;;		_map
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           
  9645                           ;psect for function ___ftmul
  9646  0645                     ___ftmul:	
  9647                           
  9648                           ;incstack = 0
  9649                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9650  0645  0020               	movlb	0	; select bank0
  9651  0646  0835               	movf	___ftmul@f1,w
  9652  0647  00BB               	movwf	??___ftmul
  9653  0648  0836               	movf	___ftmul@f1+1,w
  9654  0649  00BC               	movwf	??___ftmul+1
  9655  064A  0837               	movf	___ftmul@f1+2,w
  9656  064B  00BD               	movwf	??___ftmul+2
  9657  064C  1003               	clrc
  9658  064D  0D3C               	rlf	??___ftmul+1,w
  9659  064E  0D3D               	rlf	??___ftmul+2,w
  9660  064F  00BE               	movwf	??___ftmul+3
  9661  0650  083E               	movf	??___ftmul+3,w
  9662  0651  00BF               	movwf	___ftmul@exp
  9663  0652  083F               	movf	___ftmul@exp,w
  9664  0653  1D03               	btfss	3,2
  9665  0654  2E5C               	goto	l3294
  9666  0655  3000               	movlw	0
  9667  0656  00B5               	movwf	?___ftmul
  9668  0657  3000               	movlw	0
  9669  0658  00B6               	movwf	?___ftmul+1
  9670  0659  3000               	movlw	0
  9671  065A  00B7               	movwf	?___ftmul+2
  9672  065B  0008               	return
  9673  065C                     l3294:	
  9674  065C  0838               	movf	___ftmul@f2,w
  9675  065D  00BB               	movwf	??___ftmul
  9676  065E  0839               	movf	___ftmul@f2+1,w
  9677  065F  00BC               	movwf	??___ftmul+1
  9678  0660  083A               	movf	___ftmul@f2+2,w
  9679  0661  00BD               	movwf	??___ftmul+2
  9680  0662  1003               	clrc
  9681  0663  0D3C               	rlf	??___ftmul+1,w
  9682  0664  0D3D               	rlf	??___ftmul+2,w
  9683  0665  00BE               	movwf	??___ftmul+3
  9684  0666  083E               	movf	??___ftmul+3,w
  9685  0667  00C4               	movwf	___ftmul@sign
  9686  0668  0844               	movf	___ftmul@sign,w
  9687  0669  1D03               	btfss	3,2
  9688  066A  2E72               	goto	l3300
  9689  066B  3000               	movlw	0
  9690  066C  00B5               	movwf	?___ftmul
  9691  066D  3000               	movlw	0
  9692  066E  00B6               	movwf	?___ftmul+1
  9693  066F  3000               	movlw	0
  9694  0670  00B7               	movwf	?___ftmul+2
  9695  0671  0008               	return
  9696  0672                     l3300:	
  9697  0672  0844               	movf	___ftmul@sign,w
  9698  0673  3E7B               	addlw	123
  9699  0674  00BB               	movwf	??___ftmul
  9700  0675  083B               	movf	??___ftmul,w
  9701  0676  07BF               	addwf	___ftmul@exp,f
  9702  0677  0835               	movf	___ftmul@f1,w
  9703  0678  00BB               	movwf	??___ftmul
  9704  0679  0836               	movf	___ftmul@f1+1,w
  9705  067A  00BC               	movwf	??___ftmul+1
  9706  067B  0837               	movf	___ftmul@f1+2,w
  9707  067C  00BD               	movwf	??___ftmul+2
  9708  067D  3010               	movlw	16
  9709  067E                     u2995:	
  9710  067E  36BD               	lsrf	??___ftmul+2,f
  9711  067F  0CBC               	rrf	??___ftmul+1,f
  9712  0680  0CBB               	rrf	??___ftmul,f
  9713  0681  0B89               	decfsz	9,f
  9714  0682  2E7E               	goto	u2995
  9715  0683  083B               	movf	??___ftmul,w
  9716  0684  00BE               	movwf	??___ftmul+3
  9717  0685  083E               	movf	??___ftmul+3,w
  9718  0686  00C4               	movwf	___ftmul@sign
  9719  0687  0838               	movf	___ftmul@f2,w
  9720  0688  00BB               	movwf	??___ftmul
  9721  0689  0839               	movf	___ftmul@f2+1,w
  9722  068A  00BC               	movwf	??___ftmul+1
  9723  068B  083A               	movf	___ftmul@f2+2,w
  9724  068C  00BD               	movwf	??___ftmul+2
  9725  068D  3010               	movlw	16
  9726  068E                     u3005:	
  9727  068E  36BD               	lsrf	??___ftmul+2,f
  9728  068F  0CBC               	rrf	??___ftmul+1,f
  9729  0690  0CBB               	rrf	??___ftmul,f
  9730  0691  0B89               	decfsz	9,f
  9731  0692  2E8E               	goto	u3005
  9732  0693  083B               	movf	??___ftmul,w
  9733  0694  00BE               	movwf	??___ftmul+3
  9734  0695  083E               	movf	??___ftmul+3,w
  9735  0696  06C4               	xorwf	___ftmul@sign,f
  9736  0697  3080               	movlw	128
  9737  0698  00BB               	movwf	??___ftmul
  9738  0699  083B               	movf	??___ftmul,w
  9739  069A  05C4               	andwf	___ftmul@sign,f
  9740  069B  17B6               	bsf	___ftmul@f1+1,7
  9741  069C  17B9               	bsf	___ftmul@f2+1,7
  9742  069D  30FF               	movlw	255
  9743  069E  05B8               	andwf	___ftmul@f2,f
  9744  069F  30FF               	movlw	255
  9745  06A0  05B9               	andwf	___ftmul@f2+1,f
  9746  06A1  3000               	movlw	0
  9747  06A2  05BA               	andwf	___ftmul@f2+2,f
  9748  06A3  3000               	movlw	0
  9749  06A4  00C0               	movwf	___ftmul@f3_as_product
  9750  06A5  3000               	movlw	0
  9751  06A6  00C1               	movwf	___ftmul@f3_as_product+1
  9752  06A7  3000               	movlw	0
  9753  06A8  00C2               	movwf	___ftmul@f3_as_product+2
  9754  06A9  3007               	movlw	7
  9755  06AA  00BB               	movwf	??___ftmul
  9756  06AB  083B               	movf	??___ftmul,w
  9757  06AC  00C3               	movwf	___ftmul@cntr
  9758  06AD                     l3312:	
  9759  06AD  1C35               	btfss	___ftmul@f1,0
  9760  06AE  2EB5               	goto	l3316
  9761  06AF  0838               	movf	___ftmul@f2,w
  9762  06B0  07C0               	addwf	___ftmul@f3_as_product,f
  9763  06B1  0839               	movf	___ftmul@f2+1,w
  9764  06B2  3DC1               	addwfc	___ftmul@f3_as_product+1,f
  9765  06B3  083A               	movf	___ftmul@f2+2,w
  9766  06B4  3DC2               	addwfc	___ftmul@f3_as_product+2,f
  9767  06B5                     l3316:	
  9768  06B5  3001               	movlw	1
  9769  06B6                     u3025:	
  9770  06B6  36B7               	lsrf	___ftmul@f1+2,f
  9771  06B7  0CB6               	rrf	___ftmul@f1+1,f
  9772  06B8  0CB5               	rrf	___ftmul@f1,f
  9773  06B9  0B89               	decfsz	9,f
  9774  06BA  2EB6               	goto	u3025
  9775  06BB  3001               	movlw	1
  9776  06BC                     u3035:	
  9777  06BC  35B8               	lslf	___ftmul@f2,f
  9778  06BD  0DB9               	rlf	___ftmul@f2+1,f
  9779  06BE  0DBA               	rlf	___ftmul@f2+2,f
  9780  06BF  0B89               	decfsz	9,f
  9781  06C0  2EBC               	goto	u3035
  9782  06C1  3001               	movlw	1
  9783  06C2  02C3               	subwf	___ftmul@cntr,f
  9784  06C3  1D03               	btfss	3,2
  9785  06C4  2EAD               	goto	l3312
  9786  06C5  3009               	movlw	9
  9787  06C6  00BB               	movwf	??___ftmul
  9788  06C7  083B               	movf	??___ftmul,w
  9789  06C8  00C3               	movwf	___ftmul@cntr
  9790  06C9                     l3324:	
  9791  06C9  1C35               	btfss	___ftmul@f1,0
  9792  06CA  2ED1               	goto	l3328
  9793  06CB  0838               	movf	___ftmul@f2,w
  9794  06CC  07C0               	addwf	___ftmul@f3_as_product,f
  9795  06CD  0839               	movf	___ftmul@f2+1,w
  9796  06CE  3DC1               	addwfc	___ftmul@f3_as_product+1,f
  9797  06CF  083A               	movf	___ftmul@f2+2,w
  9798  06D0  3DC2               	addwfc	___ftmul@f3_as_product+2,f
  9799  06D1                     l3328:	
  9800  06D1  3001               	movlw	1
  9801  06D2                     u3065:	
  9802  06D2  36B7               	lsrf	___ftmul@f1+2,f
  9803  06D3  0CB6               	rrf	___ftmul@f1+1,f
  9804  06D4  0CB5               	rrf	___ftmul@f1,f
  9805  06D5  0B89               	decfsz	9,f
  9806  06D6  2ED2               	goto	u3065
  9807  06D7  3001               	movlw	1
  9808  06D8                     u3075:	
  9809  06D8  36C2               	lsrf	___ftmul@f3_as_product+2,f
  9810  06D9  0CC1               	rrf	___ftmul@f3_as_product+1,f
  9811  06DA  0CC0               	rrf	___ftmul@f3_as_product,f
  9812  06DB  0B89               	decfsz	9,f
  9813  06DC  2ED8               	goto	u3075
  9814  06DD  3001               	movlw	1
  9815  06DE  02C3               	subwf	___ftmul@cntr,f
  9816  06DF  1D03               	btfss	3,2
  9817  06E0  2EC9               	goto	l3324
  9818  06E1  0840               	movf	___ftmul@f3_as_product,w
  9819  06E2  00A0               	movwf	___ftpack@arg
  9820  06E3  0841               	movf	___ftmul@f3_as_product+1,w
  9821  06E4  00A1               	movwf	___ftpack@arg+1
  9822  06E5  0842               	movf	___ftmul@f3_as_product+2,w
  9823  06E6  00A2               	movwf	___ftpack@arg+2
  9824  06E7  083F               	movf	___ftmul@exp,w
  9825  06E8  00BB               	movwf	??___ftmul
  9826  06E9  083B               	movf	??___ftmul,w
  9827  06EA  00A3               	movwf	___ftpack@exp
  9828  06EB  0844               	movf	___ftmul@sign,w
  9829  06EC  00BC               	movwf	??___ftmul+1
  9830  06ED  083C               	movf	??___ftmul+1,w
  9831  06EE  00A4               	movwf	___ftpack@sign
  9832  06EF  3195  25D0         	fcall	___ftpack
  9833  06F1  0020               	movlb	0	; select bank0
  9834  06F2  0820               	movf	?___ftpack,w
  9835  06F3  00B5               	movwf	?___ftmul
  9836  06F4  0821               	movf	?___ftpack+1,w
  9837  06F5  00B6               	movwf	?___ftmul+1
  9838  06F6  0822               	movf	?___ftpack+2,w
  9839  06F7  00B7               	movwf	?___ftmul+2
  9840  06F8  0008               	return
  9841  06F9                     __end_of___ftmul:	
  9842                           
  9843                           	psect	text22
  9844  06F9                     __ptext22:	
  9845 ;; *************** function ___ftdiv *****************
  9846 ;; Defined at:
  9847 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;  f2              3   37[BANK0 ] float 
  9850 ;;  f1              3   40[BANK0 ] float 
  9851 ;; Auto vars:     Size  Location     Type
  9852 ;;  f3              3   48[BANK0 ] float 
  9853 ;;  sign            1   52[BANK0 ] unsigned char 
  9854 ;;  exp             1   51[BANK0 ] unsigned char 
  9855 ;;  cntr            1   47[BANK0 ] unsigned char 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  3   37[BANK0 ] float 
  9858 ;; Registers used:
  9859 ;;		wreg, status,2, status,0, pclath, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9865 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9866 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9867 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9868 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9869 ;;Total ram usage:       16 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    3
  9872 ;; This function calls:
  9873 ;;		___ftpack
  9874 ;; This function is called by:
  9875 ;;		_main
  9876 ;;		_map
  9877 ;; This function uses a non-reentrant model
  9878 ;;
  9879                           
  9880                           
  9881                           ;psect for function ___ftdiv
  9882  06F9                     ___ftdiv:	
  9883                           
  9884                           ;incstack = 0
  9885                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9886  06F9  0020               	movlb	0	; select bank0
  9887  06FA  0848               	movf	___ftdiv@f1,w
  9888  06FB  00CB               	movwf	??___ftdiv
  9889  06FC  0849               	movf	___ftdiv@f1+1,w
  9890  06FD  00CC               	movwf	??___ftdiv+1
  9891  06FE  084A               	movf	___ftdiv@f1+2,w
  9892  06FF  00CD               	movwf	??___ftdiv+2
  9893  0700  1003               	clrc
  9894  0701  0D4C               	rlf	??___ftdiv+1,w
  9895  0702  0D4D               	rlf	??___ftdiv+2,w
  9896  0703  00CE               	movwf	??___ftdiv+3
  9897  0704  084E               	movf	??___ftdiv+3,w
  9898  0705  00D3               	movwf	___ftdiv@exp
  9899  0706  0853               	movf	___ftdiv@exp,w
  9900  0707  1D03               	btfss	3,2
  9901  0708  2F10               	goto	l3252
  9902  0709  3000               	movlw	0
  9903  070A  00C5               	movwf	?___ftdiv
  9904  070B  3000               	movlw	0
  9905  070C  00C6               	movwf	?___ftdiv+1
  9906  070D  3000               	movlw	0
  9907  070E  00C7               	movwf	?___ftdiv+2
  9908  070F  0008               	return
  9909  0710                     l3252:	
  9910  0710  0845               	movf	___ftdiv@f2,w
  9911  0711  00CB               	movwf	??___ftdiv
  9912  0712  0846               	movf	___ftdiv@f2+1,w
  9913  0713  00CC               	movwf	??___ftdiv+1
  9914  0714  0847               	movf	___ftdiv@f2+2,w
  9915  0715  00CD               	movwf	??___ftdiv+2
  9916  0716  1003               	clrc
  9917  0717  0D4C               	rlf	??___ftdiv+1,w
  9918  0718  0D4D               	rlf	??___ftdiv+2,w
  9919  0719  00CE               	movwf	??___ftdiv+3
  9920  071A  084E               	movf	??___ftdiv+3,w
  9921  071B  00D4               	movwf	___ftdiv@sign
  9922  071C  0854               	movf	___ftdiv@sign,w
  9923  071D  1D03               	btfss	3,2
  9924  071E  2F26               	goto	l3258
  9925  071F  3000               	movlw	0
  9926  0720  00C5               	movwf	?___ftdiv
  9927  0721  3000               	movlw	0
  9928  0722  00C6               	movwf	?___ftdiv+1
  9929  0723  3000               	movlw	0
  9930  0724  00C7               	movwf	?___ftdiv+2
  9931  0725  0008               	return
  9932  0726                     l3258:	
  9933  0726  3000               	movlw	0
  9934  0727  00D0               	movwf	___ftdiv@f3
  9935  0728  3000               	movlw	0
  9936  0729  00D1               	movwf	___ftdiv@f3+1
  9937  072A  3000               	movlw	0
  9938  072B  00D2               	movwf	___ftdiv@f3+2
  9939  072C  3089               	movlw	137
  9940  072D  0754               	addwf	___ftdiv@sign,w
  9941  072E  00CB               	movwf	??___ftdiv
  9942  072F  084B               	movf	??___ftdiv,w
  9943  0730  02D3               	subwf	___ftdiv@exp,f
  9944  0731  0848               	movf	___ftdiv@f1,w
  9945  0732  00CB               	movwf	??___ftdiv
  9946  0733  0849               	movf	___ftdiv@f1+1,w
  9947  0734  00CC               	movwf	??___ftdiv+1
  9948  0735  084A               	movf	___ftdiv@f1+2,w
  9949  0736  00CD               	movwf	??___ftdiv+2
  9950  0737  3010               	movlw	16
  9951  0738                     u2915:	
  9952  0738  36CD               	lsrf	??___ftdiv+2,f
  9953  0739  0CCC               	rrf	??___ftdiv+1,f
  9954  073A  0CCB               	rrf	??___ftdiv,f
  9955  073B  0B89               	decfsz	9,f
  9956  073C  2F38               	goto	u2915
  9957  073D  084B               	movf	??___ftdiv,w
  9958  073E  00CE               	movwf	??___ftdiv+3
  9959  073F  084E               	movf	??___ftdiv+3,w
  9960  0740  00D4               	movwf	___ftdiv@sign
  9961  0741  0845               	movf	___ftdiv@f2,w
  9962  0742  00CB               	movwf	??___ftdiv
  9963  0743  0846               	movf	___ftdiv@f2+1,w
  9964  0744  00CC               	movwf	??___ftdiv+1
  9965  0745  0847               	movf	___ftdiv@f2+2,w
  9966  0746  00CD               	movwf	??___ftdiv+2
  9967  0747  3010               	movlw	16
  9968  0748                     u2925:	
  9969  0748  36CD               	lsrf	??___ftdiv+2,f
  9970  0749  0CCC               	rrf	??___ftdiv+1,f
  9971  074A  0CCB               	rrf	??___ftdiv,f
  9972  074B  0B89               	decfsz	9,f
  9973  074C  2F48               	goto	u2925
  9974  074D  084B               	movf	??___ftdiv,w
  9975  074E  00CE               	movwf	??___ftdiv+3
  9976  074F  084E               	movf	??___ftdiv+3,w
  9977  0750  06D4               	xorwf	___ftdiv@sign,f
  9978  0751  3080               	movlw	128
  9979  0752  00CB               	movwf	??___ftdiv
  9980  0753  084B               	movf	??___ftdiv,w
  9981  0754  05D4               	andwf	___ftdiv@sign,f
  9982  0755  17C9               	bsf	___ftdiv@f1+1,7
  9983  0756  30FF               	movlw	255
  9984  0757  05C8               	andwf	___ftdiv@f1,f
  9985  0758  30FF               	movlw	255
  9986  0759  05C9               	andwf	___ftdiv@f1+1,f
  9987  075A  3000               	movlw	0
  9988  075B  05CA               	andwf	___ftdiv@f1+2,f
  9989  075C  17C6               	bsf	___ftdiv@f2+1,7
  9990  075D  30FF               	movlw	255
  9991  075E  05C5               	andwf	___ftdiv@f2,f
  9992  075F  30FF               	movlw	255
  9993  0760  05C6               	andwf	___ftdiv@f2+1,f
  9994  0761  3000               	movlw	0
  9995  0762  05C7               	andwf	___ftdiv@f2+2,f
  9996  0763  3018               	movlw	24
  9997  0764  00CB               	movwf	??___ftdiv
  9998  0765  084B               	movf	??___ftdiv,w
  9999  0766  00CF               	movwf	___ftdiv@cntr
 10000  0767                     l3272:	
 10001  0767  3001               	movlw	1
 10002  0768                     u2935:	
 10003  0768  35D0               	lslf	___ftdiv@f3,f
 10004  0769  0DD1               	rlf	___ftdiv@f3+1,f
 10005  076A  0DD2               	rlf	___ftdiv@f3+2,f
 10006  076B  0B89               	decfsz	9,f
 10007  076C  2F68               	goto	u2935
 10008  076D  0847               	movf	___ftdiv@f2+2,w
 10009  076E  024A               	subwf	___ftdiv@f1+2,w
 10010  076F  1D03               	skipz
 10011  0770  2F77               	goto	u2945
 10012  0771  0846               	movf	___ftdiv@f2+1,w
 10013  0772  0249               	subwf	___ftdiv@f1+1,w
 10014  0773  1D03               	skipz
 10015  0774  2F77               	goto	u2945
 10016  0775  0845               	movf	___ftdiv@f2,w
 10017  0776  0248               	subwf	___ftdiv@f1,w
 10018  0777                     u2945:	
 10019  0777  1C03               	skipc
 10020  0778  2F80               	goto	l3280
 10021  0779  0845               	movf	___ftdiv@f2,w
 10022  077A  02C8               	subwf	___ftdiv@f1,f
 10023  077B  0846               	movf	___ftdiv@f2+1,w
 10024  077C  3BC9               	subwfb	___ftdiv@f1+1,f
 10025  077D  0847               	movf	___ftdiv@f2+2,w
 10026  077E  3BCA               	subwfb	___ftdiv@f1+2,f
 10027  077F  1450               	bsf	___ftdiv@f3,0
 10028  0780                     l3280:	
 10029  0780  3001               	movlw	1
 10030  0781                     u2955:	
 10031  0781  35C8               	lslf	___ftdiv@f1,f
 10032  0782  0DC9               	rlf	___ftdiv@f1+1,f
 10033  0783  0DCA               	rlf	___ftdiv@f1+2,f
 10034  0784  0B89               	decfsz	9,f
 10035  0785  2F81               	goto	u2955
 10036  0786  3001               	movlw	1
 10037  0787  02CF               	subwf	___ftdiv@cntr,f
 10038  0788  1D03               	btfss	3,2
 10039  0789  2F67               	goto	l3272
 10040  078A  0850               	movf	___ftdiv@f3,w
 10041  078B  00A0               	movwf	___ftpack@arg
 10042  078C  0851               	movf	___ftdiv@f3+1,w
 10043  078D  00A1               	movwf	___ftpack@arg+1
 10044  078E  0852               	movf	___ftdiv@f3+2,w
 10045  078F  00A2               	movwf	___ftpack@arg+2
 10046  0790  0853               	movf	___ftdiv@exp,w
 10047  0791  00CB               	movwf	??___ftdiv
 10048  0792  084B               	movf	??___ftdiv,w
 10049  0793  00A3               	movwf	___ftpack@exp
 10050  0794  0854               	movf	___ftdiv@sign,w
 10051  0795  00CC               	movwf	??___ftdiv+1
 10052  0796  084C               	movf	??___ftdiv+1,w
 10053  0797  00A4               	movwf	___ftpack@sign
 10054  0798  3195  25D0         	fcall	___ftpack
 10055  079A  0020               	movlb	0	; select bank0
 10056  079B  0820               	movf	?___ftpack,w
 10057  079C  00C5               	movwf	?___ftdiv
 10058  079D  0821               	movf	?___ftpack+1,w
 10059  079E  00C6               	movwf	?___ftdiv+1
 10060  079F  0822               	movf	?___ftpack+2,w
 10061  07A0  00C7               	movwf	?___ftdiv+2
 10062  07A1  0008               	return
 10063  07A2                     __end_of___ftdiv:	
 10064                           
 10065                           	psect	text23
 10066  054F                     __ptext23:	
 10067 ;; *************** function ___ftadd *****************
 10068 ;; Defined at:
 10069 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10070 ;; Parameters:    Size  Location     Type
 10071 ;;  f1              3    8[BANK0 ] float 
 10072 ;;  f2              3   11[BANK0 ] float 
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  exp1            1   20[BANK0 ] unsigned char 
 10075 ;;  exp2            1   19[BANK0 ] unsigned char 
 10076 ;;  sign            1   18[BANK0 ] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  3    8[BANK0 ] float 
 10079 ;; Registers used:
 10080 ;;		wreg, status,2, status,0, pclath, cstack
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10086 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10087 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10088 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10089 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10090 ;;Total ram usage:       13 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:    3
 10093 ;; This function calls:
 10094 ;;		___ftpack
 10095 ;; This function is called by:
 10096 ;;		_map
 10097 ;; This function uses a non-reentrant model
 10098 ;;
 10099                           
 10100                           
 10101                           ;psect for function ___ftadd
 10102  054F                     ___ftadd:	
 10103                           
 10104                           ;incstack = 0
 10105                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10106  054F  0020               	movlb	0	; select bank0
 10107  0550  0828               	movf	___ftadd@f1,w
 10108  0551  00AE               	movwf	??___ftadd
 10109  0552  0829               	movf	___ftadd@f1+1,w
 10110  0553  00AF               	movwf	??___ftadd+1
 10111  0554  082A               	movf	___ftadd@f1+2,w
 10112  0555  00B0               	movwf	??___ftadd+2
 10113  0556  1003               	clrc
 10114  0557  0D2F               	rlf	??___ftadd+1,w
 10115  0558  0D30               	rlf	??___ftadd+2,w
 10116  0559  00B1               	movwf	??___ftadd+3
 10117  055A  0831               	movf	??___ftadd+3,w
 10118  055B  00B4               	movwf	___ftadd@exp1
 10119  055C  082B               	movf	___ftadd@f2,w
 10120  055D  00AE               	movwf	??___ftadd
 10121  055E  082C               	movf	___ftadd@f2+1,w
 10122  055F  00AF               	movwf	??___ftadd+1
 10123  0560  082D               	movf	___ftadd@f2+2,w
 10124  0561  00B0               	movwf	??___ftadd+2
 10125  0562  1003               	clrc
 10126  0563  0D2F               	rlf	??___ftadd+1,w
 10127  0564  0D30               	rlf	??___ftadd+2,w
 10128  0565  00B1               	movwf	??___ftadd+3
 10129  0566  0831               	movf	??___ftadd+3,w
 10130  0567  00B3               	movwf	___ftadd@exp2
 10131  0568  0834               	movf	___ftadd@exp1,w
 10132  0569  1903               	btfsc	3,2
 10133  056A  2D77               	goto	l3182
 10134  056B  0833               	movf	___ftadd@exp2,w
 10135  056C  0234               	subwf	___ftadd@exp1,w
 10136  056D  1803               	skipnc
 10137  056E  2D7E               	goto	l3186
 10138  056F  0334               	decf	___ftadd@exp1,w
 10139  0570  3AFF               	xorlw	255
 10140  0571  0733               	addwf	___ftadd@exp2,w
 10141  0572  00AE               	movwf	??___ftadd
 10142  0573  3019               	movlw	25
 10143  0574  022E               	subwf	??___ftadd,w
 10144  0575  1C03               	skipc
 10145  0576  2D7E               	goto	l3186
 10146  0577                     l3182:	
 10147  0577  082B               	movf	___ftadd@f2,w
 10148  0578  00A8               	movwf	?___ftadd
 10149  0579  082C               	movf	___ftadd@f2+1,w
 10150  057A  00A9               	movwf	?___ftadd+1
 10151  057B  082D               	movf	___ftadd@f2+2,w
 10152  057C  00AA               	movwf	?___ftadd+2
 10153  057D  0008               	return
 10154  057E                     l3186:	
 10155  057E  0833               	movf	___ftadd@exp2,w
 10156  057F  1903               	btfsc	3,2
 10157  0580  0008               	return
 10158  0581  0834               	movf	___ftadd@exp1,w
 10159  0582  0233               	subwf	___ftadd@exp2,w
 10160  0583  1803               	skipnc
 10161  0584  2D8D               	goto	l3192
 10162  0585  0333               	decf	___ftadd@exp2,w
 10163  0586  3AFF               	xorlw	255
 10164  0587  0734               	addwf	___ftadd@exp1,w
 10165  0588  00AE               	movwf	??___ftadd
 10166  0589  3019               	movlw	25
 10167  058A  022E               	subwf	??___ftadd,w
 10168  058B  1803               	btfsc	3,0
 10169  058C  0008               	return
 10170  058D                     l3192:	
 10171  058D  3006               	movlw	6
 10172  058E  00AE               	movwf	??___ftadd
 10173  058F  082E               	movf	??___ftadd,w
 10174  0590  00B2               	movwf	___ftadd@sign
 10175  0591  1BAA               	btfsc	___ftadd@f1+2,7
 10176  0592  17B2               	bsf	___ftadd@sign,7
 10177  0593  1BAD               	btfsc	___ftadd@f2+2,7
 10178  0594  1732               	bsf	___ftadd@sign,6
 10179  0595  17A9               	bsf	___ftadd@f1+1,7
 10180  0596  30FF               	movlw	255
 10181  0597  05A8               	andwf	___ftadd@f1,f
 10182  0598  30FF               	movlw	255
 10183  0599  05A9               	andwf	___ftadd@f1+1,f
 10184  059A  3000               	movlw	0
 10185  059B  05AA               	andwf	___ftadd@f1+2,f
 10186  059C  17AC               	bsf	___ftadd@f2+1,7
 10187  059D  30FF               	movlw	255
 10188  059E  05AB               	andwf	___ftadd@f2,f
 10189  059F  30FF               	movlw	255
 10190  05A0  05AC               	andwf	___ftadd@f2+1,f
 10191  05A1  3000               	movlw	0
 10192  05A2  05AD               	andwf	___ftadd@f2+2,f
 10193  05A3  0833               	movf	___ftadd@exp2,w
 10194  05A4  0234               	subwf	___ftadd@exp1,w
 10195  05A5  1803               	skipnc
 10196  05A6  2DC9               	goto	l3214
 10197  05A7                     l3204:	
 10198  05A7  3001               	movlw	1
 10199  05A8                     u2755:	
 10200  05A8  35AB               	lslf	___ftadd@f2,f
 10201  05A9  0DAC               	rlf	___ftadd@f2+1,f
 10202  05AA  0DAD               	rlf	___ftadd@f2+2,f
 10203  05AB  0B89               	decfsz	9,f
 10204  05AC  2DA8               	goto	u2755
 10205  05AD  3001               	movlw	1
 10206  05AE  02B3               	subwf	___ftadd@exp2,f
 10207  05AF  0833               	movf	___ftadd@exp2,w
 10208  05B0  0634               	xorwf	___ftadd@exp1,w
 10209  05B1  1903               	skipnz
 10210  05B2  2DC4               	goto	l3212
 10211  05B3  3001               	movlw	1
 10212  05B4  02B2               	subwf	___ftadd@sign,f
 10213  05B5  0832               	movf	___ftadd@sign,w
 10214  05B6  3907               	andlw	7
 10215  05B7  1903               	btfsc	3,2
 10216  05B8  2DC4               	goto	l3212
 10217  05B9  2DA7               	goto	l3204
 10218  05BA                     l3210:	
 10219  05BA  3001               	movlw	1
 10220  05BB                     u2785:	
 10221  05BB  36AA               	lsrf	___ftadd@f1+2,f
 10222  05BC  0CA9               	rrf	___ftadd@f1+1,f
 10223  05BD  0CA8               	rrf	___ftadd@f1,f
 10224  05BE  0B89               	decfsz	9,f
 10225  05BF  2DBB               	goto	u2785
 10226  05C0  3001               	movlw	1
 10227  05C1  00AE               	movwf	??___ftadd
 10228  05C2  082E               	movf	??___ftadd,w
 10229  05C3  07B4               	addwf	___ftadd@exp1,f
 10230  05C4                     l3212:	
 10231  05C4  0834               	movf	___ftadd@exp1,w
 10232  05C5  0633               	xorwf	___ftadd@exp2,w
 10233  05C6  1903               	btfsc	3,2
 10234  05C7  2DEE               	goto	l1202
 10235  05C8  2DBA               	goto	l3210
 10236  05C9                     l3214:	
 10237  05C9  0834               	movf	___ftadd@exp1,w
 10238  05CA  0233               	subwf	___ftadd@exp2,w
 10239  05CB  1803               	skipnc
 10240  05CC  2DEE               	goto	l1202
 10241  05CD                     l3216:	
 10242  05CD  3001               	movlw	1
 10243  05CE                     u2815:	
 10244  05CE  35A8               	lslf	___ftadd@f1,f
 10245  05CF  0DA9               	rlf	___ftadd@f1+1,f
 10246  05D0  0DAA               	rlf	___ftadd@f1+2,f
 10247  05D1  0B89               	decfsz	9,f
 10248  05D2  2DCE               	goto	u2815
 10249  05D3  3001               	movlw	1
 10250  05D4  02B4               	subwf	___ftadd@exp1,f
 10251  05D5  0833               	movf	___ftadd@exp2,w
 10252  05D6  0634               	xorwf	___ftadd@exp1,w
 10253  05D7  1903               	skipnz
 10254  05D8  2DEA               	goto	l3224
 10255  05D9  3001               	movlw	1
 10256  05DA  02B2               	subwf	___ftadd@sign,f
 10257  05DB  0832               	movf	___ftadd@sign,w
 10258  05DC  3907               	andlw	7
 10259  05DD  1903               	btfsc	3,2
 10260  05DE  2DEA               	goto	l3224
 10261  05DF  2DCD               	goto	l3216
 10262  05E0                     l3222:	
 10263  05E0  3001               	movlw	1
 10264  05E1                     u2845:	
 10265  05E1  36AD               	lsrf	___ftadd@f2+2,f
 10266  05E2  0CAC               	rrf	___ftadd@f2+1,f
 10267  05E3  0CAB               	rrf	___ftadd@f2,f
 10268  05E4  0B89               	decfsz	9,f
 10269  05E5  2DE1               	goto	u2845
 10270  05E6  3001               	movlw	1
 10271  05E7  00AE               	movwf	??___ftadd
 10272  05E8  082E               	movf	??___ftadd,w
 10273  05E9  07B3               	addwf	___ftadd@exp2,f
 10274  05EA                     l3224:	
 10275  05EA  0834               	movf	___ftadd@exp1,w
 10276  05EB  0633               	xorwf	___ftadd@exp2,w
 10277  05EC  1D03               	skipz
 10278  05ED  2DE0               	goto	l3222
 10279  05EE                     l1202:	
 10280  05EE  1FB2               	btfss	___ftadd@sign,7
 10281  05EF  2E00               	goto	l3228
 10282  05F0  30FF               	movlw	255
 10283  05F1  06A8               	xorwf	___ftadd@f1,f
 10284  05F2  30FF               	movlw	255
 10285  05F3  06A9               	xorwf	___ftadd@f1+1,f
 10286  05F4  30FF               	movlw	255
 10287  05F5  06AA               	xorwf	___ftadd@f1+2,f
 10288  05F6  3001               	movlw	1
 10289  05F7  07A8               	addwf	___ftadd@f1,f
 10290  05F8  3000               	movlw	0
 10291  05F9  1803               	skipnc
 10292  05FA  3001               	movlw	1
 10293  05FB  07A9               	addwf	___ftadd@f1+1,f
 10294  05FC  3000               	movlw	0
 10295  05FD  1803               	skipnc
 10296  05FE  3001               	movlw	1
 10297  05FF  07AA               	addwf	___ftadd@f1+2,f
 10298  0600                     l3228:	
 10299  0600  1F32               	btfss	___ftadd@sign,6
 10300  0601  2E12               	goto	l3232
 10301  0602  30FF               	movlw	255
 10302  0603  06AB               	xorwf	___ftadd@f2,f
 10303  0604  30FF               	movlw	255
 10304  0605  06AC               	xorwf	___ftadd@f2+1,f
 10305  0606  30FF               	movlw	255
 10306  0607  06AD               	xorwf	___ftadd@f2+2,f
 10307  0608  3001               	movlw	1
 10308  0609  07AB               	addwf	___ftadd@f2,f
 10309  060A  3000               	movlw	0
 10310  060B  1803               	skipnc
 10311  060C  3001               	movlw	1
 10312  060D  07AC               	addwf	___ftadd@f2+1,f
 10313  060E  3000               	movlw	0
 10314  060F  1803               	skipnc
 10315  0610  3001               	movlw	1
 10316  0611  07AD               	addwf	___ftadd@f2+2,f
 10317  0612                     l3232:	
 10318  0612  01B2               	clrf	___ftadd@sign
 10319  0613  0828               	movf	___ftadd@f1,w
 10320  0614  07AB               	addwf	___ftadd@f2,f
 10321  0615  0829               	movf	___ftadd@f1+1,w
 10322  0616  3DAC               	addwfc	___ftadd@f2+1,f
 10323  0617  082A               	movf	___ftadd@f1+2,w
 10324  0618  3DAD               	addwfc	___ftadd@f2+2,f
 10325  0619  1FAD               	btfss	___ftadd@f2+2,7
 10326  061A  2E2D               	goto	l3242
 10327  061B  30FF               	movlw	255
 10328  061C  06AB               	xorwf	___ftadd@f2,f
 10329  061D  30FF               	movlw	255
 10330  061E  06AC               	xorwf	___ftadd@f2+1,f
 10331  061F  30FF               	movlw	255
 10332  0620  06AD               	xorwf	___ftadd@f2+2,f
 10333  0621  3001               	movlw	1
 10334  0622  07AB               	addwf	___ftadd@f2,f
 10335  0623  3000               	movlw	0
 10336  0624  1803               	skipnc
 10337  0625  3001               	movlw	1
 10338  0626  07AC               	addwf	___ftadd@f2+1,f
 10339  0627  3000               	movlw	0
 10340  0628  1803               	skipnc
 10341  0629  3001               	movlw	1
 10342  062A  07AD               	addwf	___ftadd@f2+2,f
 10343  062B  01B2               	clrf	___ftadd@sign
 10344  062C  0AB2               	incf	___ftadd@sign,f
 10345  062D                     l3242:	
 10346  062D  082B               	movf	___ftadd@f2,w
 10347  062E  00A0               	movwf	___ftpack@arg
 10348  062F  082C               	movf	___ftadd@f2+1,w
 10349  0630  00A1               	movwf	___ftpack@arg+1
 10350  0631  082D               	movf	___ftadd@f2+2,w
 10351  0632  00A2               	movwf	___ftpack@arg+2
 10352  0633  0834               	movf	___ftadd@exp1,w
 10353  0634  00AE               	movwf	??___ftadd
 10354  0635  082E               	movf	??___ftadd,w
 10355  0636  00A3               	movwf	___ftpack@exp
 10356  0637  0832               	movf	___ftadd@sign,w
 10357  0638  00AF               	movwf	??___ftadd+1
 10358  0639  082F               	movf	??___ftadd+1,w
 10359  063A  00A4               	movwf	___ftpack@sign
 10360  063B  3195  25D0         	fcall	___ftpack
 10361  063D  0020               	movlb	0	; select bank0
 10362  063E  0820               	movf	?___ftpack,w
 10363  063F  00A8               	movwf	?___ftadd
 10364  0640  0821               	movf	?___ftpack+1,w
 10365  0641  00A9               	movwf	?___ftadd+1
 10366  0642  0822               	movf	?___ftpack+2,w
 10367  0643  00AA               	movwf	?___ftadd+2
 10368  0644  0008               	return
 10369  0645                     __end_of___ftadd:	
 10370                           
 10371                           	psect	text24
 10372  1F23                     __ptext24:	
 10373 ;; *************** function _initSwitchBypass *****************
 10374 ;; Defined at:
 10375 ;;		line 22 in file "SwitchBypass.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;		None
 10378 ;; Auto vars:     Size  Location     Type
 10379 ;;  initState       2   18[BANK0 ] int 
 10380 ;; Return value:  Size  Location     Type
 10381 ;;                  1    wreg      void 
 10382 ;; Registers used:
 10383 ;;		wreg, status,2, status,0, pclath, cstack
 10384 ;; Tracked objects:
 10385 ;;		On entry : 0/0
 10386 ;;		On exit  : 0/0
 10387 ;;		Unchanged: 0/0
 10388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10390 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10392 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10393 ;;Total ram usage:        2 bytes
 10394 ;; Hardware stack levels used:    1
 10395 ;; Hardware stack levels required when called:    5
 10396 ;; This function calls:
 10397 ;;		_getSwitchBypassState
 10398 ;;		_setSwitchBypassState
 10399 ;; This function is called by:
 10400 ;;		_main
 10401 ;; This function uses a non-reentrant model
 10402 ;;
 10403                           
 10404                           
 10405                           ;psect for function _initSwitchBypass
 10406  1F23                     _initSwitchBypass:	
 10407                           
 10408                           ;SwitchBypass.c: 23: int initState = getSwitchBypassState();
 10409                           
 10410                           ;incstack = 0
 10411                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10412  1F23  319E  26EE  319F   	fcall	_getSwitchBypassState
 10413  1F26  0020               	movlb	0	; select bank0
 10414  1F27  0821               	movf	?_getSwitchBypassState+1,w
 10415  1F28  00B3               	movwf	initSwitchBypass@initState+1
 10416  1F29  0820               	movf	?_getSwitchBypassState,w
 10417  1F2A  00B2               	movwf	initSwitchBypass@initState
 10418                           
 10419                           ;SwitchBypass.c: 24: setSwitchBypassState(initState);
 10420  1F2B  0833               	movf	initSwitchBypass@initState+1,w
 10421  1F2C  00AF               	movwf	setSwitchBypassState@f_state+1
 10422  1F2D  0832               	movf	initSwitchBypass@initState,w
 10423  1F2E  00AE               	movwf	setSwitchBypassState@f_state
 10424  1F2F  3194  244A         	fcall	_setSwitchBypassState
 10425  1F31  0008               	return
 10426  1F32                     __end_of_initSwitchBypass:	
 10427                           
 10428                           	psect	text25
 10429  144A                     __ptext25:	
 10430 ;; *************** function _setSwitchBypassState *****************
 10431 ;; Defined at:
 10432 ;;		line 73 in file "SwitchBypass.c"
 10433 ;; Parameters:    Size  Location     Type
 10434 ;;  f_state         2   14[BANK0 ] int 
 10435 ;; Auto vars:     Size  Location     Type
 10436 ;;		None
 10437 ;; Return value:  Size  Location     Type
 10438 ;;                  1    wreg      void 
 10439 ;; Registers used:
 10440 ;;		wreg, status,2, status,0, pclath, cstack
 10441 ;; Tracked objects:
 10442 ;;		On entry : 0/0
 10443 ;;		On exit  : 0/0
 10444 ;;		Unchanged: 0/0
 10445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10446 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10448 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10449 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10450 ;;Total ram usage:        4 bytes
 10451 ;; Hardware stack levels used:    1
 10452 ;; Hardware stack levels required when called:    4
 10453 ;; This function calls:
 10454 ;;		_updateSwitchBypassState
 10455 ;;		_wait_ms
 10456 ;; This function is called by:
 10457 ;;		_initSwitchBypass
 10458 ;;		_updateSwitchBypass
 10459 ;; This function uses a non-reentrant model
 10460 ;;
 10461                           
 10462                           
 10463                           ;psect for function _setSwitchBypassState
 10464  144A                     _setSwitchBypassState:	
 10465                           
 10466                           ;SwitchBypass.c: 74: if (switchBypass_state == f_state) {return;}
 10467                           
 10468                           ;incstack = 0
 10469                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10470  144A  0021               	movlb	1	; select bank1
 10471  144B  086E               	movf	_switchBypass_state^(0+128),w
 10472  144C  0020               	movlb	0	; select bank0
 10473  144D  00B0               	movwf	??_setSwitchBypassState
 10474  144E  01B1               	clrf	??_setSwitchBypassState+1
 10475  144F  082F               	movf	setSwitchBypassState@f_state+1,w
 10476  1450  0631               	xorwf	??_setSwitchBypassState+1,w
 10477  1451  1D03               	skipz
 10478  1452  2C55               	goto	u2485
 10479  1453  082E               	movf	setSwitchBypassState@f_state,w
 10480  1454  0630               	xorwf	??_setSwitchBypassState,w
 10481  1455                     u2485:	
 10482  1455  1903               	btfsc	3,2
 10483  1456  0008               	return
 10484                           
 10485                           ;SwitchBypass.c: 75: switchBypass_state = f_state;
 10486  1457  082E               	movf	setSwitchBypassState@f_state,w
 10487  1458  00B0               	movwf	??_setSwitchBypassState
 10488  1459  0830               	movf	??_setSwitchBypassState,w
 10489  145A  0021               	movlb	1	; select bank1
 10490  145B  00EE               	movwf	_switchBypass_state^(0+128)
 10491                           
 10492                           ;SwitchBypass.c: 76: LATBbits.LATB2 = f_state;
 10493  145C  0020               	movlb	0	; select bank0
 10494  145D  0C2E               	rrf	setSwitchBypassState@f_state,w
 10495  145E  0022               	movlb	2	; select bank2
 10496  145F  1C03               	skipc
 10497  1460  110D               	bcf	13,2	;volatile
 10498  1461  1803               	skipnc
 10499  1462  150D               	bsf	13,2	;volatile
 10500                           
 10501                           ;SwitchBypass.c: 78: LATGbits.LATG2 = f_state;
 10502  1463  0020               	movlb	0	; select bank0
 10503  1464  0C2E               	rrf	setSwitchBypassState@f_state,w
 10504  1465  0027               	movlb	7	; select bank7
 10505  1466  1C03               	skipc
 10506  1467  110D               	bcf	13,2	;volatile
 10507  1468  1803               	skipnc
 10508  1469  150D               	bsf	13,2	;volatile
 10509                           
 10510                           ;SwitchBypass.c: 79: LATGbits.LATG1 = !f_state;
 10511  146A  0020               	movlb	0	; select bank0
 10512  146B  082E               	movf	setSwitchBypassState@f_state,w
 10513  146C  042F               	iorwf	setSwitchBypassState@f_state+1,w
 10514  146D  1D03               	btfss	3,2
 10515  146E  2C72               	goto	u2490
 10516  146F  0027               	movlb	7	; select bank7
 10517  1470  148D               	bsf	13,1	;volatile
 10518  1471  2C74               	goto	l3100
 10519  1472                     u2490:	
 10520  1472  0027               	movlb	7	; select bank7
 10521  1473  108D               	bcf	13,1	;volatile
 10522  1474                     l3100:	
 10523                           
 10524                           ;SwitchBypass.c: 81: wait_ms(20);
 10525  1474  3014               	movlw	20
 10526  1475  0020               	movlb	0	; select bank0
 10527  1476  00AC               	movwf	wait_ms@time
 10528  1477  3000               	movlw	0
 10529  1478  00AD               	movwf	wait_ms@time+1
 10530  1479  3190  20A9  3194   	fcall	_wait_ms
 10531                           
 10532                           ;SwitchBypass.c: 83: LATGbits.LATG2 = 0;
 10533  147C  0027               	movlb	7	; select bank7
 10534  147D  110D               	bcf	13,2	;volatile
 10535                           
 10536                           ;SwitchBypass.c: 84: LATGbits.LATG1 = 0;
 10537  147E  108D               	bcf	13,1	;volatile
 10538                           
 10539                           ;SwitchBypass.c: 86: updateSwitchBypassState(switchBypass_state);
 10540  147F  0021               	movlb	1	; select bank1
 10541  1480  086E               	movf	_switchBypass_state^(0+128),w
 10542  1481  0020               	movlb	0	; select bank0
 10543  1482  00B0               	movwf	??_setSwitchBypassState
 10544  1483  01B1               	clrf	??_setSwitchBypassState+1
 10545  1484  0830               	movf	??_setSwitchBypassState,w
 10546  1485  00A0               	movwf	updateSwitchBypassState@state
 10547  1486  0831               	movf	??_setSwitchBypassState+1,w
 10548  1487  00A1               	movwf	updateSwitchBypassState@state+1
 10549  1488  3188  2001  3194   	fcall	_updateSwitchBypassState
 10550                           
 10551                           ;SwitchBypass.c: 87: wait_ms(20);
 10552  148B  3014               	movlw	20
 10553  148C  0020               	movlb	0	; select bank0
 10554  148D  00AC               	movwf	wait_ms@time
 10555  148E  3000               	movlw	0
 10556  148F  00AD               	movwf	wait_ms@time+1
 10557  1490  3190  20A9         	fcall	_wait_ms
 10558  1492  0008               	return
 10559  1493                     __end_of_setSwitchBypassState:	
 10560                           
 10561                           	psect	text26
 10562  10A9                     __ptext26:	
 10563 ;; *************** function _wait_ms *****************
 10564 ;; Defined at:
 10565 ;;		line 23 in file "system.c"
 10566 ;; Parameters:    Size  Location     Type
 10567 ;;  time            2   12[BANK0 ] unsigned int 
 10568 ;; Auto vars:     Size  Location     Type
 10569 ;;		None
 10570 ;; Return value:  Size  Location     Type
 10571 ;;                  1    wreg      void 
 10572 ;; Registers used:
 10573 ;;		wreg, status,2, status,0, pclath, cstack
 10574 ;; Tracked objects:
 10575 ;;		On entry : 0/0
 10576 ;;		On exit  : 0/0
 10577 ;;		Unchanged: 0/0
 10578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10579 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10582 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10583 ;;Total ram usage:        2 bytes
 10584 ;; Hardware stack levels used:    1
 10585 ;; Hardware stack levels required when called:    3
 10586 ;; This function calls:
 10587 ;;		___lmul
 10588 ;; This function is called by:
 10589 ;;		_star_tactiles
 10590 ;;		_solidring_tactiles
 10591 ;;		_read_bottom_tactile
 10592 ;;		_read_top_tactile
 10593 ;;		_setSwitchBypassState
 10594 ;;		_showError_Alternating
 10595 ;;		_show_error
 10596 ;;		_show_cancel
 10597 ;;		_ring_tactiles
 10598 ;;		_setSwitchTapState
 10599 ;; This function uses a non-reentrant model
 10600 ;;
 10601                           
 10602                           
 10603                           ;psect for function _wait_ms
 10604  10A9                     _wait_ms:	
 10605                           
 10606                           ;system.c: 25: static long timel = 0;
 10607                           ;system.c: 26: timel = time * 1000l;
 10608                           
 10609                           ;incstack = 0
 10610                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10611  10A9  0020               	movlb	0	; select bank0
 10612  10AA  082C               	movf	wait_ms@time,w
 10613  10AB  00A0               	movwf	___lmul@multiplier
 10614  10AC  082D               	movf	wait_ms@time+1,w
 10615  10AD  00A1               	movwf	___lmul@multiplier+1
 10616  10AE  01A2               	clrf	___lmul@multiplier+2
 10617  10AF  01A3               	clrf	___lmul@multiplier+3
 10618  10B0  3000               	movlw	0
 10619  10B1  00A7               	movwf	___lmul@multiplicand+3
 10620  10B2  3000               	movlw	0
 10621  10B3  00A6               	movwf	___lmul@multiplicand+2
 10622  10B4  3003               	movlw	3
 10623  10B5  00A5               	movwf	___lmul@multiplicand+1
 10624  10B6  30E8               	movlw	232
 10625  10B7  00A4               	movwf	___lmul@multiplicand
 10626  10B8  3190  2079  3190   	fcall	___lmul
 10627  10BB  0020               	movlb	0	; select bank0
 10628  10BC  0823               	movf	?___lmul+3,w
 10629  10BD  0022               	movlb	2	; select bank2
 10630  10BE  00C3               	movwf	(wait_ms@timel+3)^(0+256)
 10631  10BF  0020               	movlb	0	; select bank0
 10632  10C0  0822               	movf	?___lmul+2,w
 10633  10C1  0022               	movlb	2	; select bank2
 10634  10C2  00C2               	movwf	(wait_ms@timel+2)^(0+256)
 10635  10C3  0020               	movlb	0	; select bank0
 10636  10C4  0821               	movf	?___lmul+1,w
 10637  10C5  0022               	movlb	2	; select bank2
 10638  10C6  00C1               	movwf	(wait_ms@timel+1)^(0+256)
 10639  10C7  0020               	movlb	0	; select bank0
 10640  10C8  0820               	movf	?___lmul,w
 10641  10C9  0022               	movlb	2	; select bank2
 10642  10CA  00C0               	movwf	wait_ms@timel^(0+256)
 10643  10CB                     l318:	
 10644                           ;system.c: 27: for( ; timel; timel--);
 10645                           
 10646  10CB  0843               	movf	(wait_ms@timel+3)^(0+256),w
 10647  10CC  0442               	iorwf	(wait_ms@timel+2)^(0+256),w
 10648  10CD  0441               	iorwf	(wait_ms@timel+1)^(0+256),w
 10649  10CE  0440               	iorwf	wait_ms@timel^(0+256),w
 10650  10CF  1903               	btfsc	3,2
 10651  10D0  0008               	return
 10652  10D1  30FF               	movlw	255
 10653  10D2  07C0               	addwf	wait_ms@timel^(0+256),f
 10654  10D3  30FF               	movlw	255
 10655  10D4  3DC1               	addwfc	(wait_ms@timel+1)^(0+256),f
 10656  10D5  30FF               	movlw	255
 10657  10D6  3DC2               	addwfc	(wait_ms@timel+2)^(0+256),f
 10658  10D7  30FF               	movlw	255
 10659  10D8  3DC3               	addwfc	(wait_ms@timel+3)^(0+256),f
 10660  10D9  28CB               	goto	l318
 10661  10DA                     __end_of_wait_ms:	
 10662                           
 10663                           	psect	text27
 10664  1079                     __ptext27:	
 10665 ;; *************** function ___lmul *****************
 10666 ;; Defined at:
 10667 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  multiplier      4    0[BANK0 ] unsigned long 
 10670 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 10671 ;; Auto vars:     Size  Location     Type
 10672 ;;  product         4    8[BANK0 ] unsigned long 
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  4    0[BANK0 ] unsigned long 
 10675 ;; Registers used:
 10676 ;;		wreg, status,2, status,0
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10682 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10683 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10685 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10686 ;;Total ram usage:       12 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; Hardware stack levels required when called:    2
 10689 ;; This function calls:
 10690 ;;		Nothing
 10691 ;; This function is called by:
 10692 ;;		_wait_ms
 10693 ;; This function uses a non-reentrant model
 10694 ;;
 10695                           
 10696                           
 10697                           ;psect for function ___lmul
 10698  1079                     ___lmul:	
 10699                           
 10700                           ;incstack = 0
 10701                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10702  1079  3000               	movlw	0
 10703  107A  0020               	movlb	0	; select bank0
 10704  107B  00AB               	movwf	___lmul@product+3
 10705  107C  3000               	movlw	0
 10706  107D  00AA               	movwf	___lmul@product+2
 10707  107E  3000               	movlw	0
 10708  107F  00A9               	movwf	___lmul@product+1
 10709  1080  3000               	movlw	0
 10710  1081  00A8               	movwf	___lmul@product
 10711  1082                     l2834:	
 10712  1082  1C20               	btfss	___lmul@multiplier,0
 10713  1083  288C               	goto	l2838
 10714  1084  0824               	movf	___lmul@multiplicand,w
 10715  1085  07A8               	addwf	___lmul@product,f
 10716  1086  0825               	movf	___lmul@multiplicand+1,w
 10717  1087  3DA9               	addwfc	___lmul@product+1,f
 10718  1088  0826               	movf	___lmul@multiplicand+2,w
 10719  1089  3DAA               	addwfc	___lmul@product+2,f
 10720  108A  0827               	movf	___lmul@multiplicand+3,w
 10721  108B  3DAB               	addwfc	___lmul@product+3,f
 10722  108C                     l2838:	
 10723  108C  3001               	movlw	1
 10724  108D                     u2215:	
 10725  108D  35A4               	lslf	___lmul@multiplicand,f
 10726  108E  0DA5               	rlf	___lmul@multiplicand+1,f
 10727  108F  0DA6               	rlf	___lmul@multiplicand+2,f
 10728  1090  0DA7               	rlf	___lmul@multiplicand+3,f
 10729  1091  0B89               	decfsz	9,f
 10730  1092  288D               	goto	u2215
 10731  1093  3001               	movlw	1
 10732  1094                     u2225:	
 10733  1094  36A3               	lsrf	___lmul@multiplier+3,f
 10734  1095  0CA2               	rrf	___lmul@multiplier+2,f
 10735  1096  0CA1               	rrf	___lmul@multiplier+1,f
 10736  1097  0CA0               	rrf	___lmul@multiplier,f
 10737  1098  0B89               	decfsz	9,f
 10738  1099  2894               	goto	u2225
 10739  109A  0823               	movf	___lmul@multiplier+3,w
 10740  109B  0422               	iorwf	___lmul@multiplier+2,w
 10741  109C  0421               	iorwf	___lmul@multiplier+1,w
 10742  109D  0420               	iorwf	___lmul@multiplier,w
 10743  109E  1D03               	skipz
 10744  109F  2882               	goto	l2834
 10745  10A0  082B               	movf	___lmul@product+3,w
 10746  10A1  00A3               	movwf	?___lmul+3
 10747  10A2  082A               	movf	___lmul@product+2,w
 10748  10A3  00A2               	movwf	?___lmul+2
 10749  10A4  0829               	movf	___lmul@product+1,w
 10750  10A5  00A1               	movwf	?___lmul+1
 10751  10A6  0828               	movf	___lmul@product,w
 10752  10A7  00A0               	movwf	?___lmul
 10753  10A8  0008               	return
 10754  10A9                     __end_of___lmul:	
 10755                           
 10756                           	psect	text28
 10757  0801                     __ptext28:	
 10758 ;; *************** function _updateSwitchBypassState *****************
 10759 ;; Defined at:
 10760 ;;		line 96 in file "state_manager.c"
 10761 ;; Parameters:    Size  Location     Type
 10762 ;;  state           2    0[BANK0 ] int 
 10763 ;; Auto vars:     Size  Location     Type
 10764 ;;		None
 10765 ;; Return value:  Size  Location     Type
 10766 ;;                  1    wreg      void 
 10767 ;; Registers used:
 10768 ;;		None
 10769 ;; Tracked objects:
 10770 ;;		On entry : 0/0
 10771 ;;		On exit  : 0/0
 10772 ;;		Unchanged: 0/0
 10773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10774 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10778 ;;Total ram usage:        2 bytes
 10779 ;; Hardware stack levels used:    1
 10780 ;; Hardware stack levels required when called:    2
 10781 ;; This function calls:
 10782 ;;		Nothing
 10783 ;; This function is called by:
 10784 ;;		_setSwitchBypassState
 10785 ;; This function uses a non-reentrant model
 10786 ;;
 10787                           
 10788                           
 10789                           ;psect for function _updateSwitchBypassState
 10790  0801                     _updateSwitchBypassState:	
 10791                           
 10792                           ;incstack = 0
 10793                           ; Regs used in _updateSwitchBypassState: []
 10794  0801  0008               	return
 10795  0802                     __end_of_updateSwitchBypassState:	
 10796                           
 10797                           	psect	text29
 10798  1EEE                     __ptext29:	
 10799 ;; *************** function _getSwitchBypassState *****************
 10800 ;; Defined at:
 10801 ;;		line 103 in file "state_manager.c"
 10802 ;; Parameters:    Size  Location     Type
 10803 ;;		None
 10804 ;; Auto vars:     Size  Location     Type
 10805 ;;		None
 10806 ;; Return value:  Size  Location     Type
 10807 ;;                  2    0[BANK0 ] int 
 10808 ;; Registers used:
 10809 ;;		status,2
 10810 ;; Tracked objects:
 10811 ;;		On entry : 0/0
 10812 ;;		On exit  : 0/0
 10813 ;;		Unchanged: 0/0
 10814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10815 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10818 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10819 ;;Total ram usage:        2 bytes
 10820 ;; Hardware stack levels used:    1
 10821 ;; Hardware stack levels required when called:    2
 10822 ;; This function calls:
 10823 ;;		Nothing
 10824 ;; This function is called by:
 10825 ;;		_initSwitchBypass
 10826 ;; This function uses a non-reentrant model
 10827 ;;
 10828                           
 10829                           
 10830                           ;psect for function _getSwitchBypassState
 10831  1EEE                     _getSwitchBypassState:	
 10832                           
 10833                           ;state_manager.c: 108: return 0;
 10834                           
 10835                           ;incstack = 0
 10836                           ; Regs used in _getSwitchBypassState: [status,2]
 10837  1EEE  0020               	movlb	0	; select bank0
 10838  1EEF  01A0               	clrf	?_getSwitchBypassState
 10839  1EF0  01A1               	clrf	?_getSwitchBypassState+1
 10840  1EF1  0008               	return
 10841  1EF2                     __end_of_getSwitchBypassState:	
 10842                           
 10843                           	psect	text30
 10844  0802                     __ptext30:	
 10845 ;; *************** function _adc_convert *****************
 10846 ;; Defined at:
 10847 ;;		line 110 in file "user.c"
 10848 ;; Parameters:    Size  Location     Type
 10849 ;;  channel         1    wreg     unsigned char 
 10850 ;; Auto vars:     Size  Location     Type
 10851 ;;  channel         1    3[BANK0 ] unsigned char 
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  2    0[BANK0 ] unsigned int 
 10854 ;; Registers used:
 10855 ;;		wreg, status,2, status,0
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10861 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10864 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10865 ;;Total ram usage:        4 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    2
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		_main
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           
 10876                           ;psect for function _adc_convert
 10877  0802                     _adc_convert:	
 10878                           
 10879                           ;incstack = 0
 10880                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 10881                           ;adc_convert@channel stored from wreg
 10882  0802  0020               	movlb	0	; select bank0
 10883  0803  00A3               	movwf	adc_convert@channel
 10884                           
 10885                           ;user.c: 111: ADCON0bits.CHS = channel;
 10886  0804  0823               	movf	adc_convert@channel,w
 10887  0805  00A2               	movwf	??_adc_convert
 10888  0806  0DA2               	rlf	??_adc_convert,f
 10889  0807  0DA2               	rlf	??_adc_convert,f
 10890  0808  0021               	movlb	1	; select bank1
 10891  0809  081D               	movf	29,w	;volatile
 10892  080A  0020               	movlb	0	; select bank0
 10893  080B  0622               	xorwf	??_adc_convert,w
 10894  080C  3983               	andlw	-125
 10895  080D  0622               	xorwf	??_adc_convert,w
 10896  080E  0021               	movlb	1	; select bank1
 10897  080F  009D               	movwf	29	;volatile
 10898                           
 10899                           ;user.c: 112: ADCON0bits.GO = 0b1;
 10900  0810  149D               	bsf	29,1	;volatile
 10901  0811                     l473:	
 10902                           ;user.c: 113: while (ADCON0bits.GO_nDONE);
 10903                           
 10904  0811  189D               	btfsc	29,1	;volatile
 10905  0812  2811               	goto	l473
 10906                           
 10907                           ;user.c: 114: return (ADRESH << 8) | ADRESL;
 10908  0813  081C               	movf	28,w	;volatile
 10909  0814  0020               	movlb	0	; select bank0
 10910  0815  00A1               	movwf	?_adc_convert+1
 10911  0816  0021               	movlb	1	; select bank1
 10912  0817  081B               	movf	27,w	;volatile
 10913  0818  0020               	movlb	0	; select bank0
 10914  0819  00A0               	movwf	?_adc_convert
 10915  081A  0008               	return
 10916  081B                     __end_of_adc_convert:	
 10917                           
 10918                           	psect	text31
 10919  157E                     __ptext31:	
 10920 ;; *************** function ___awdiv *****************
 10921 ;; Defined at:
 10922 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 10923 ;; Parameters:    Size  Location     Type
 10924 ;;  divisor         2    0[BANK0 ] int 
 10925 ;;  dividend        2    2[BANK0 ] int 
 10926 ;; Auto vars:     Size  Location     Type
 10927 ;;  quotient        2    7[BANK0 ] int 
 10928 ;;  sign            1    6[BANK0 ] unsigned char 
 10929 ;;  counter         1    5[BANK0 ] unsigned char 
 10930 ;; Return value:  Size  Location     Type
 10931 ;;                  2    0[BANK0 ] int 
 10932 ;; Registers used:
 10933 ;;		wreg, status,2, status,0
 10934 ;; Tracked objects:
 10935 ;;		On entry : 0/0
 10936 ;;		On exit  : 0/0
 10937 ;;		Unchanged: 0/0
 10938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10940 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10941 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10942 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10943 ;;Total ram usage:        9 bytes
 10944 ;; Hardware stack levels used:    1
 10945 ;; Hardware stack levels required when called:    2
 10946 ;; This function calls:
 10947 ;;		Nothing
 10948 ;; This function is called by:
 10949 ;;		_main
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           
 10954                           ;psect for function ___awdiv
 10955  157E                     ___awdiv:	
 10956                           
 10957                           ;incstack = 0
 10958                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10959  157E  0020               	movlb	0	; select bank0
 10960  157F  01A6               	clrf	___awdiv@sign
 10961  1580  1FA1               	btfss	___awdiv@divisor+1,7
 10962  1581  2D89               	goto	l3614
 10963  1582  09A0               	comf	___awdiv@divisor,f
 10964  1583  09A1               	comf	___awdiv@divisor+1,f
 10965  1584  0AA0               	incf	___awdiv@divisor,f
 10966  1585  1903               	skipnz
 10967  1586  0AA1               	incf	___awdiv@divisor+1,f
 10968  1587  01A6               	clrf	___awdiv@sign
 10969  1588  0AA6               	incf	___awdiv@sign,f
 10970  1589                     l3614:	
 10971  1589  1FA3               	btfss	___awdiv@dividend+1,7
 10972  158A  2D94               	goto	l3620
 10973  158B  09A2               	comf	___awdiv@dividend,f
 10974  158C  09A3               	comf	___awdiv@dividend+1,f
 10975  158D  0AA2               	incf	___awdiv@dividend,f
 10976  158E  1903               	skipnz
 10977  158F  0AA3               	incf	___awdiv@dividend+1,f
 10978  1590  3001               	movlw	1
 10979  1591  00A4               	movwf	??___awdiv
 10980  1592  0824               	movf	??___awdiv,w
 10981  1593  06A6               	xorwf	___awdiv@sign,f
 10982  1594                     l3620:	
 10983  1594  01A7               	clrf	___awdiv@quotient
 10984  1595  01A8               	clrf	___awdiv@quotient+1
 10985  1596  0820               	movf	___awdiv@divisor,w
 10986  1597  0421               	iorwf	___awdiv@divisor+1,w
 10987  1598  1903               	btfsc	3,2
 10988  1599  2DC3               	goto	l3642
 10989  159A  01A5               	clrf	___awdiv@counter
 10990  159B  0AA5               	incf	___awdiv@counter,f
 10991  159C                     l3630:	
 10992  159C  1BA1               	btfsc	___awdiv@divisor+1,7
 10993  159D  2DA8               	goto	l3632
 10994  159E  3001               	movlw	1
 10995  159F                     u3505:	
 10996  159F  35A0               	lslf	___awdiv@divisor,f
 10997  15A0  0DA1               	rlf	___awdiv@divisor+1,f
 10998  15A1  0B89               	decfsz	9,f
 10999  15A2  2D9F               	goto	u3505
 11000  15A3  3001               	movlw	1
 11001  15A4  00A4               	movwf	??___awdiv
 11002  15A5  0824               	movf	??___awdiv,w
 11003  15A6  07A5               	addwf	___awdiv@counter,f
 11004  15A7  2D9C               	goto	l3630
 11005  15A8                     l3632:	
 11006  15A8  3001               	movlw	1
 11007  15A9                     u3525:	
 11008  15A9  35A7               	lslf	___awdiv@quotient,f
 11009  15AA  0DA8               	rlf	___awdiv@quotient+1,f
 11010  15AB  0B89               	decfsz	9,f
 11011  15AC  2DA9               	goto	u3525
 11012  15AD  0821               	movf	___awdiv@divisor+1,w
 11013  15AE  0223               	subwf	___awdiv@dividend+1,w
 11014  15AF  1D03               	skipz
 11015  15B0  2DB3               	goto	u3535
 11016  15B1  0820               	movf	___awdiv@divisor,w
 11017  15B2  0222               	subwf	___awdiv@dividend,w
 11018  15B3                     u3535:	
 11019  15B3  1C03               	skipc
 11020  15B4  2DBA               	goto	l3638
 11021  15B5  0820               	movf	___awdiv@divisor,w
 11022  15B6  02A2               	subwf	___awdiv@dividend,f
 11023  15B7  0821               	movf	___awdiv@divisor+1,w
 11024  15B8  3BA3               	subwfb	___awdiv@dividend+1,f
 11025  15B9  1427               	bsf	___awdiv@quotient,0
 11026  15BA                     l3638:	
 11027  15BA  3001               	movlw	1
 11028  15BB                     u3545:	
 11029  15BB  36A1               	lsrf	___awdiv@divisor+1,f
 11030  15BC  0CA0               	rrf	___awdiv@divisor,f
 11031  15BD  0B89               	decfsz	9,f
 11032  15BE  2DBB               	goto	u3545
 11033  15BF  3001               	movlw	1
 11034  15C0  02A5               	subwf	___awdiv@counter,f
 11035  15C1  1D03               	btfss	3,2
 11036  15C2  2DA8               	goto	l3632
 11037  15C3                     l3642:	
 11038  15C3  0826               	movf	___awdiv@sign,w
 11039  15C4  1903               	btfsc	3,2
 11040  15C5  2DCB               	goto	l3646
 11041  15C6  09A7               	comf	___awdiv@quotient,f
 11042  15C7  09A8               	comf	___awdiv@quotient+1,f
 11043  15C8  0AA7               	incf	___awdiv@quotient,f
 11044  15C9  1903               	skipnz
 11045  15CA  0AA8               	incf	___awdiv@quotient+1,f
 11046  15CB                     l3646:	
 11047  15CB  0828               	movf	___awdiv@quotient+1,w
 11048  15CC  00A1               	movwf	?___awdiv+1
 11049  15CD  0827               	movf	___awdiv@quotient,w
 11050  15CE  00A0               	movwf	?___awdiv
 11051  15CF  0008               	return
 11052  15D0                     __end_of___awdiv:	
 11053                           
 11054                           	psect	text32
 11055  11FD                     __ptext32:	
 11056 ;; *************** function ___altoft *****************
 11057 ;; Defined at:
 11058 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  c               4    8[BANK0 ] long 
 11061 ;; Auto vars:     Size  Location     Type
 11062 ;;  sign            1   15[BANK0 ] unsigned char 
 11063 ;;  exp             1   14[BANK0 ] unsigned char 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  3    8[BANK0 ] float 
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0, pclath, cstack
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11073 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11074 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11076 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11077 ;;Total ram usage:        8 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; Hardware stack levels required when called:    3
 11080 ;; This function calls:
 11081 ;;		___ftpack
 11082 ;; This function is called by:
 11083 ;;		_main
 11084 ;; This function uses a non-reentrant model
 11085 ;;
 11086                           
 11087                           
 11088                           ;psect for function ___altoft
 11089  11FD                     ___altoft:	
 11090                           
 11091                           ;incstack = 0
 11092                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
 11093  11FD  0020               	movlb	0	; select bank0
 11094  11FE  01AF               	clrf	___altoft@sign
 11095  11FF  308E               	movlw	142
 11096  1200  00AC               	movwf	??___altoft
 11097  1201  082C               	movf	??___altoft,w
 11098  1202  00AE               	movwf	___altoft@exp
 11099  1203  1FAB               	btfss	___altoft@c+3,7
 11100  1204  2A12               	goto	l3600
 11101  1205  09A8               	comf	___altoft@c,f
 11102  1206  09A9               	comf	___altoft@c+1,f
 11103  1207  09AA               	comf	___altoft@c+2,f
 11104  1208  09AB               	comf	___altoft@c+3,f
 11105  1209  0AA8               	incf	___altoft@c,f
 11106  120A  1903               	skipnz
 11107  120B  0AA9               	incf	___altoft@c+1,f
 11108  120C  1903               	skipnz
 11109  120D  0AAA               	incf	___altoft@c+2,f
 11110  120E  1903               	skipnz
 11111  120F  0AAB               	incf	___altoft@c+3,f
 11112  1210  01AF               	clrf	___altoft@sign
 11113  1211  0AAF               	incf	___altoft@sign,f
 11114  1212                     l3600:	
 11115  1212  30FF               	movlw	255
 11116  1213  052B               	andwf	___altoft@c+3,w
 11117  1214  1903               	btfsc	3,2
 11118  1215  2A22               	goto	l3602
 11119  1216  3001               	movlw	1
 11120  1217                     u3455:	
 11121  1217  36AB               	lsrf	___altoft@c+3,f
 11122  1218  0CAA               	rrf	___altoft@c+2,f
 11123  1219  0CA9               	rrf	___altoft@c+1,f
 11124  121A  0CA8               	rrf	___altoft@c,f
 11125  121B  0B89               	decfsz	9,f
 11126  121C  2A17               	goto	u3455
 11127  121D  3001               	movlw	1
 11128  121E  00AC               	movwf	??___altoft
 11129  121F  082C               	movf	??___altoft,w
 11130  1220  07AE               	addwf	___altoft@exp,f
 11131  1221  2A12               	goto	l3600
 11132  1222                     l3602:	
 11133  1222  0828               	movf	___altoft@c,w
 11134  1223  00A0               	movwf	___ftpack@arg
 11135  1224  0829               	movf	___altoft@c+1,w
 11136  1225  00A1               	movwf	___ftpack@arg+1
 11137  1226  082A               	movf	___altoft@c+2,w
 11138  1227  00A2               	movwf	___ftpack@arg+2
 11139  1228  082E               	movf	___altoft@exp,w
 11140  1229  00AC               	movwf	??___altoft
 11141  122A  082C               	movf	??___altoft,w
 11142  122B  00A3               	movwf	___ftpack@exp
 11143  122C  082F               	movf	___altoft@sign,w
 11144  122D  00AD               	movwf	??___altoft+1
 11145  122E  082D               	movf	??___altoft+1,w
 11146  122F  00A4               	movwf	___ftpack@sign
 11147  1230  3195  25D0         	fcall	___ftpack
 11148  1232  0020               	movlb	0	; select bank0
 11149  1233  0820               	movf	?___ftpack,w
 11150  1234  00A8               	movwf	?___altoft
 11151  1235  0821               	movf	?___ftpack+1,w
 11152  1236  00A9               	movwf	?___altoft+1
 11153  1237  0822               	movf	?___ftpack+2,w
 11154  1238  00AA               	movwf	?___altoft+2
 11155  1239  0008               	return
 11156  123A                     __end_of___altoft:	
 11157                           
 11158                           	psect	text33
 11159  15D0                     __ptext33:	
 11160 ;; *************** function ___ftpack *****************
 11161 ;; Defined at:
 11162 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;  arg             3    0[BANK0 ] unsigned um
 11165 ;;  exp             1    3[BANK0 ] unsigned char 
 11166 ;;  sign            1    4[BANK0 ] unsigned char 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  3    0[BANK0 ] float 
 11171 ;; Registers used:
 11172 ;;		wreg, status,2, status,0
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11178 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11180 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11181 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11182 ;;Total ram usage:        8 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    2
 11185 ;; This function calls:
 11186 ;;		Nothing
 11187 ;; This function is called by:
 11188 ;;		___altoft
 11189 ;;		___awtoft
 11190 ;;		___ftadd
 11191 ;;		___ftdiv
 11192 ;;		___ftmul
 11193 ;; This function uses a non-reentrant model
 11194 ;;
 11195                           
 11196                           
 11197                           ;psect for function ___ftpack
 11198  15D0                     ___ftpack:	
 11199                           
 11200                           ;incstack = 0
 11201                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 11202  15D0  0020               	movlb	0	; select bank0
 11203  15D1  0823               	movf	___ftpack@exp,w
 11204  15D2  1903               	btfsc	3,2
 11205  15D3  2DD9               	goto	l2964
 11206  15D4  0822               	movf	___ftpack@arg+2,w
 11207  15D5  0421               	iorwf	___ftpack@arg+1,w
 11208  15D6  0420               	iorwf	___ftpack@arg,w
 11209  15D7  1D03               	skipz
 11210  15D8  2DEA               	goto	l2970
 11211  15D9                     l2964:	
 11212  15D9  3000               	movlw	0
 11213  15DA  00A0               	movwf	?___ftpack
 11214  15DB  3000               	movlw	0
 11215  15DC  00A1               	movwf	?___ftpack+1
 11216  15DD  3000               	movlw	0
 11217  15DE  00A2               	movwf	?___ftpack+2
 11218  15DF  0008               	return
 11219  15E0                     l2968:	
 11220  15E0  3001               	movlw	1
 11221  15E1  00A5               	movwf	??___ftpack
 11222  15E2  0825               	movf	??___ftpack,w
 11223  15E3  07A3               	addwf	___ftpack@exp,f
 11224  15E4  3001               	movlw	1
 11225  15E5                     u2315:	
 11226  15E5  36A2               	lsrf	___ftpack@arg+2,f
 11227  15E6  0CA1               	rrf	___ftpack@arg+1,f
 11228  15E7  0CA0               	rrf	___ftpack@arg,f
 11229  15E8  0B89               	decfsz	9,f
 11230  15E9  2DE5               	goto	u2315
 11231  15EA                     l2970:	
 11232  15EA  30FE               	movlw	254
 11233  15EB  0522               	andwf	___ftpack@arg+2,w
 11234  15EC  1903               	btfsc	3,2
 11235  15ED  2E03               	goto	l1171
 11236  15EE  2DE0               	goto	l2968
 11237  15EF                     l2972:	
 11238  15EF  3001               	movlw	1
 11239  15F0  00A5               	movwf	??___ftpack
 11240  15F1  0825               	movf	??___ftpack,w
 11241  15F2  07A3               	addwf	___ftpack@exp,f
 11242  15F3  3001               	movlw	1
 11243  15F4  07A0               	addwf	___ftpack@arg,f
 11244  15F5  3000               	movlw	0
 11245  15F6  1803               	skipnc
 11246  15F7  3001               	movlw	1
 11247  15F8  07A1               	addwf	___ftpack@arg+1,f
 11248  15F9  3000               	movlw	0
 11249  15FA  1803               	skipnc
 11250  15FB  3001               	movlw	1
 11251  15FC  07A2               	addwf	___ftpack@arg+2,f
 11252  15FD  3001               	movlw	1
 11253  15FE                     u2335:	
 11254  15FE  36A2               	lsrf	___ftpack@arg+2,f
 11255  15FF  0CA1               	rrf	___ftpack@arg+1,f
 11256  1600  0CA0               	rrf	___ftpack@arg,f
 11257  1601  0B89               	decfsz	9,f
 11258  1602  2DFE               	goto	u2335
 11259  1603                     l1171:	
 11260  1603  30FF               	movlw	255
 11261  1604  0522               	andwf	___ftpack@arg+2,w
 11262  1605  1903               	btfsc	3,2
 11263  1606  2E10               	goto	l2980
 11264  1607  2DEF               	goto	l2972
 11265  1608                     l2978:	
 11266  1608  3001               	movlw	1
 11267  1609  02A3               	subwf	___ftpack@exp,f
 11268  160A  3001               	movlw	1
 11269  160B                     u2355:	
 11270  160B  35A0               	lslf	___ftpack@arg,f
 11271  160C  0DA1               	rlf	___ftpack@arg+1,f
 11272  160D  0DA2               	rlf	___ftpack@arg+2,f
 11273  160E  0B89               	decfsz	9,f
 11274  160F  2E0B               	goto	u2355
 11275  1610                     l2980:	
 11276  1610  1BA1               	btfsc	___ftpack@arg+1,7
 11277  1611  2E16               	goto	l1178
 11278  1612  3002               	movlw	2
 11279  1613  0223               	subwf	___ftpack@exp,w
 11280  1614  1803               	skipnc
 11281  1615  2E08               	goto	l2978
 11282  1616                     l1178:	
 11283  1616  1823               	btfsc	___ftpack@exp,0
 11284  1617  2E1E               	goto	l1179
 11285  1618  30FF               	movlw	255
 11286  1619  05A0               	andwf	___ftpack@arg,f
 11287  161A  307F               	movlw	127
 11288  161B  05A1               	andwf	___ftpack@arg+1,f
 11289  161C  30FF               	movlw	255
 11290  161D  05A2               	andwf	___ftpack@arg+2,f
 11291  161E                     l1179:	
 11292  161E  1003               	clrc
 11293  161F  0CA3               	rrf	___ftpack@exp,f
 11294  1620  0823               	movf	___ftpack@exp,w
 11295  1621  00A5               	movwf	??___ftpack
 11296  1622  01A6               	clrf	??___ftpack+1
 11297  1623  01A7               	clrf	??___ftpack+2
 11298  1624  3010               	movlw	16
 11299  1625                     u2395:	
 11300  1625  35A5               	lslf	??___ftpack,f
 11301  1626  0DA6               	rlf	??___ftpack+1,f
 11302  1627  0DA7               	rlf	??___ftpack+2,f
 11303  1628  0B89               	decfsz	9,f
 11304  1629  2E25               	goto	u2395
 11305  162A  0825               	movf	??___ftpack,w
 11306  162B  04A0               	iorwf	___ftpack@arg,f
 11307  162C  0826               	movf	??___ftpack+1,w
 11308  162D  04A1               	iorwf	___ftpack@arg+1,f
 11309  162E  0827               	movf	??___ftpack+2,w
 11310  162F  04A2               	iorwf	___ftpack@arg+2,f
 11311  1630  0824               	movf	___ftpack@sign,w
 11312  1631  1903               	btfsc	3,2
 11313  1632  0008               	return
 11314  1633  17A2               	bsf	___ftpack@arg+2,7
 11315  1634  0008               	return
 11316  1635                     __end_of___ftpack:	
 11317                           
 11318                           	psect	text34
 11319  1493                     __ptext34:	
 11320 ;; *************** function _ReadSavedSettings *****************
 11321 ;; Defined at:
 11322 ;;		line 181 in file "user.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;		None
 11325 ;; Auto vars:     Size  Location     Type
 11326 ;;		None
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  1    wreg      void 
 11329 ;; Registers used:
 11330 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11340 ;;Total ram usage:        2 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:    3
 11343 ;; This function calls:
 11344 ;;		_FLASH_ReadWord
 11345 ;;		_set_leds_bottom
 11346 ;;		_set_leds_top
 11347 ;; This function is called by:
 11348 ;;		_main
 11349 ;; This function uses a non-reentrant model
 11350 ;;
 11351                           
 11352                           
 11353                           ;psect for function _ReadSavedSettings
 11354  1493                     _ReadSavedSettings:	
 11355                           
 11356                           ;user.c: 183: top_push_state = FLASH_ReadWord(0x1F81);
 11357                           
 11358                           ;incstack = 0
 11359                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11360  1493  3081               	movlw	129
 11361  1494  0020               	movlb	0	; select bank0
 11362  1495  00A0               	movwf	FLASH_ReadWord@flashAddr
 11363  1496  301F               	movlw	31
 11364  1497  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11365  1498  319F  279B  3194   	fcall	_FLASH_ReadWord
 11366  149B  0020               	movlb	0	; select bank0
 11367  149C  0820               	movf	?_FLASH_ReadWord,w
 11368  149D  00A4               	movwf	??_ReadSavedSettings
 11369  149E  0824               	movf	??_ReadSavedSettings,w
 11370  149F  00FD               	movwf	_top_push_state	;volatile
 11371                           
 11372                           ;user.c: 184: bottom_push_state = FLASH_ReadWord(0x1F82);
 11373  14A0  3082               	movlw	130
 11374  14A1  00A0               	movwf	FLASH_ReadWord@flashAddr
 11375  14A2  301F               	movlw	31
 11376  14A3  00A1               	movwf	FLASH_ReadWord@flashAddr+1
 11377  14A4  319F  279B  3194   	fcall	_FLASH_ReadWord
 11378  14A7  0020               	movlb	0	; select bank0
 11379  14A8  0820               	movf	?_FLASH_ReadWord,w
 11380  14A9  00A4               	movwf	??_ReadSavedSettings
 11381  14AA  0824               	movf	??_ReadSavedSettings,w
 11382  14AB  0021               	movlb	1	; select bank1
 11383  14AC  00EC               	movwf	_bottom_push_state^(0+128)	;volatile
 11384                           
 11385                           ;user.c: 187: LATGbits.LATG1 = !switchBypass_state;
 11386  14AD  086E               	movf	_switchBypass_state^(0+128),w
 11387  14AE  1D03               	btfss	3,2
 11388  14AF  2CB3               	goto	u3230
 11389  14B0  0027               	movlb	7	; select bank7
 11390  14B1  148D               	bsf	13,1	;volatile
 11391  14B2  2CB5               	goto	l3420
 11392  14B3                     u3230:	
 11393  14B3  0027               	movlb	7	; select bank7
 11394  14B4  108D               	bcf	13,1	;volatile
 11395  14B5                     l3420:	
 11396                           
 11397                           ;user.c: 188: LATGbits.LATG2 = switchBypass_state;
 11398  14B5  0021               	movlb	1	; select bank1
 11399  14B6  0C6E               	rrf	_switchBypass_state^(0+128),w
 11400  14B7  0027               	movlb	7	; select bank7
 11401  14B8  1C03               	skipc
 11402  14B9  110D               	bcf	13,2	;volatile
 11403  14BA  1803               	skipnc
 11404  14BB  150D               	bsf	13,2	;volatile
 11405                           
 11406                           ;user.c: 189: LATBbits.LATB2 = 0;
 11407  14BC  0022               	movlb	2	; select bank2
 11408  14BD  110D               	bcf	13,2	;volatile
 11409                           
 11410                           ;user.c: 190: LATBbits.LATB3 = 0;
 11411  14BE  118D               	bcf	13,3	;volatile
 11412                           
 11413                           ;user.c: 192: LATBbits.LATB4 = 0;
 11414  14BF  120D               	bcf	13,4	;volatile
 11415                           
 11416                           ;user.c: 193: LATBbits.LATB5 = 0;
 11417  14C0  128D               	bcf	13,5	;volatile
 11418                           
 11419                           ;user.c: 195: LATBbits.LATB1 = 0;
 11420  14C1  108D               	bcf	13,1	;volatile
 11421                           
 11422                           ;user.c: 196: LATBbits.LATB0 = 0;
 11423  14C2  100D               	bcf	13,0	;volatile
 11424                           
 11425                           ;user.c: 199: set_leds_top(top_push_state, 1);
 11426  14C3  087D               	movf	_top_push_state,w	;volatile
 11427  14C4  0020               	movlb	0	; select bank0
 11428  14C5  00A4               	movwf	??_ReadSavedSettings
 11429  14C6  01A5               	clrf	??_ReadSavedSettings+1
 11430  14C7  0824               	movf	??_ReadSavedSettings,w
 11431  14C8  00A0               	movwf	set_leds_top@x
 11432  14C9  0825               	movf	??_ReadSavedSettings+1,w
 11433  14CA  00A1               	movwf	set_leds_top@x+1
 11434  14CB  3001               	movlw	1
 11435  14CC  00A2               	movwf	set_leds_top@ledState
 11436  14CD  3000               	movlw	0
 11437  14CE  00A3               	movwf	set_leds_top@ledState+1
 11438  14CF  3187  27A2  3194   	fcall	_set_leds_top
 11439                           
 11440                           ;user.c: 200: set_leds_bottom(bottom_push_state);
 11441  14D2  0021               	movlb	1	; select bank1
 11442  14D3  086C               	movf	_bottom_push_state^(0+128),w	;volatile
 11443  14D4  0020               	movlb	0	; select bank0
 11444  14D5  00A4               	movwf	??_ReadSavedSettings
 11445  14D6  01A5               	clrf	??_ReadSavedSettings+1
 11446  14D7  0824               	movf	??_ReadSavedSettings,w
 11447  14D8  00A0               	movwf	set_leds_bottom@x
 11448  14D9  0825               	movf	??_ReadSavedSettings+1,w
 11449  14DA  00A1               	movwf	set_leds_bottom@x+1
 11450  14DB  3191  21C2         	fcall	_set_leds_bottom
 11451  14DD  0008               	return
 11452  14DE                     __end_of_ReadSavedSettings:	
 11453                           
 11454                           	psect	text35
 11455  07A2                     __ptext35:	
 11456 ;; *************** function _set_leds_top *****************
 11457 ;; Defined at:
 11458 ;;		line 16 in file "LEDs.c"
 11459 ;; Parameters:    Size  Location     Type
 11460 ;;  x               2    0[BANK0 ] int 
 11461 ;;  ledState        2    2[BANK0 ] int 
 11462 ;; Auto vars:     Size  Location     Type
 11463 ;;		None
 11464 ;; Return value:  Size  Location     Type
 11465 ;;                  1    wreg      void 
 11466 ;; Registers used:
 11467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11473 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11476 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11477 ;;Total ram usage:        4 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:    2
 11480 ;; This function calls:
 11481 ;;		Nothing
 11482 ;; This function is called by:
 11483 ;;		_ReadSavedSettings
 11484 ;;		_star_tactiles
 11485 ;;		_solidring_tactiles
 11486 ;;		_read_top_tactile
 11487 ;;		_ring_tactiles
 11488 ;; This function uses a non-reentrant model
 11489 ;;
 11490                           
 11491                           
 11492                           ;psect for function _set_leds_top
 11493  07A2                     _set_leds_top:	
 11494                           
 11495                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11496                           
 11497                           ;incstack = 0
 11498                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11499  07A2  0027               	movlb	7	; select bank7
 11500  07A3  100C               	bcf	12,0	;volatile
 11501                           
 11502                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11503  07A4  108C               	bcf	12,1	;volatile
 11504                           
 11505                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11506  07A5  110C               	bcf	12,2	;volatile
 11507                           
 11508                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11509  07A6  118C               	bcf	12,3	;volatile
 11510                           
 11511                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11512  07A7  120C               	bcf	12,4	;volatile
 11513                           
 11514                           ;LEDs.c: 22: switch (x) {
 11515  07A8  2FD8               	goto	l2860
 11516  07A9                     l2848:	
 11517                           ;LEDs.c: 23: case 1:
 11518                           
 11519                           
 11520                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11521  07A9  0020               	movlb	0	; select bank0
 11522  07AA  0C22               	rrf	set_leds_top@ledState,w
 11523  07AB  0027               	movlb	7	; select bank7
 11524  07AC  1C03               	skipc
 11525  07AD  100C               	bcf	12,0	;volatile
 11526  07AE  1803               	skipnc
 11527  07AF  140C               	bsf	12,0	;volatile
 11528                           
 11529                           ;LEDs.c: 25: break;
 11530  07B0  0008               	return
 11531  07B1                     l2850:	
 11532                           ;LEDs.c: 26: case 2:
 11533                           
 11534                           
 11535                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11536  07B1  0020               	movlb	0	; select bank0
 11537  07B2  0C22               	rrf	set_leds_top@ledState,w
 11538  07B3  0027               	movlb	7	; select bank7
 11539  07B4  1C03               	skipc
 11540  07B5  108C               	bcf	12,1	;volatile
 11541  07B6  1803               	skipnc
 11542  07B7  148C               	bsf	12,1	;volatile
 11543                           
 11544                           ;LEDs.c: 28: break;
 11545  07B8  0008               	return
 11546  07B9                     l2852:	
 11547                           ;LEDs.c: 29: case 3:
 11548                           
 11549                           
 11550                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11551  07B9  0020               	movlb	0	; select bank0
 11552  07BA  0C22               	rrf	set_leds_top@ledState,w
 11553  07BB  0027               	movlb	7	; select bank7
 11554  07BC  1C03               	skipc
 11555  07BD  110C               	bcf	12,2	;volatile
 11556  07BE  1803               	skipnc
 11557  07BF  150C               	bsf	12,2	;volatile
 11558                           
 11559                           ;LEDs.c: 31: break;
 11560  07C0  0008               	return
 11561  07C1                     l2854:	
 11562                           ;LEDs.c: 32: case 4:
 11563                           
 11564                           
 11565                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11566  07C1  0020               	movlb	0	; select bank0
 11567  07C2  0C22               	rrf	set_leds_top@ledState,w
 11568  07C3  0027               	movlb	7	; select bank7
 11569  07C4  1C03               	skipc
 11570  07C5  118C               	bcf	12,3	;volatile
 11571  07C6  1803               	skipnc
 11572  07C7  158C               	bsf	12,3	;volatile
 11573                           
 11574                           ;LEDs.c: 34: break;
 11575  07C8  0008               	return
 11576  07C9                     l2856:	
 11577                           ;LEDs.c: 35: case 5:
 11578                           
 11579                           
 11580                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11581  07C9  0020               	movlb	0	; select bank0
 11582  07CA  0C22               	rrf	set_leds_top@ledState,w
 11583  07CB  0027               	movlb	7	; select bank7
 11584  07CC  1C03               	skipc
 11585  07CD  120C               	bcf	12,4	;volatile
 11586  07CE  1803               	skipnc
 11587  07CF  160C               	bsf	12,4	;volatile
 11588                           
 11589                           ;LEDs.c: 39: break;
 11590                           
 11591                           ;LEDs.c: 38: case 6:
 11592                           
 11593                           ;LEDs.c: 37: break;
 11594  07D0  0008               	return
 11595  07D1                     l612:	
 11596                           ;LEDs.c: 40: case 100:
 11597                           
 11598                           
 11599                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11600  07D1  0027               	movlb	7	; select bank7
 11601  07D2  140C               	bsf	12,0	;volatile
 11602                           
 11603                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11604  07D3  148C               	bsf	12,1	;volatile
 11605                           
 11606                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11607  07D4  150C               	bsf	12,2	;volatile
 11608                           
 11609                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11610  07D5  158C               	bsf	12,3	;volatile
 11611                           
 11612                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11613  07D6  160C               	bsf	12,4	;volatile
 11614                           
 11615                           ;LEDs.c: 47: }
 11616                           
 11617                           ;LEDs.c: 46: break;
 11618  07D7  0008               	return
 11619  07D8                     l2860:	
 11620                           
 11621                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11622                           ; Switch size 1, requested type "space"
 11623                           ; Number of cases is 1, Range of values is 0 to 0
 11624                           ; switch strategies available:
 11625                           ; Name         Instructions Cycles
 11626                           ; simple_byte            4     3 (average)
 11627                           ; direct_byte            8     6 (fixed)
 11628                           ; jumptable            260     6 (fixed)
 11629                           ;	Chosen strategy is simple_byte
 11630  07D8  0020               	movlb	0	; select bank0
 11631  07D9  0821               	movf	set_leds_top@x+1,w
 11632  07DA  3A00               	xorlw	0	; case 0
 11633  07DB  1903               	skipnz
 11634  07DC  2FDE               	goto	l4220
 11635  07DD  2FF5               	goto	l613
 11636  07DE                     l4220:	
 11637                           
 11638                           ; Switch size 1, requested type "space"
 11639                           ; Number of cases is 7, Range of values is 1 to 100
 11640                           ; switch strategies available:
 11641                           ; Name         Instructions Cycles
 11642                           ; simple_byte           22    12 (average)
 11643                           ; direct_byte          209     9 (fixed)
 11644                           ; jumptable            263     9 (fixed)
 11645                           ;	Chosen strategy is simple_byte
 11646  07DE  0820               	movf	set_leds_top@x,w
 11647  07DF  3A01               	xorlw	1	; case 1
 11648  07E0  1903               	skipnz
 11649  07E1  2FA9               	goto	l2848
 11650  07E2  3A03               	xorlw	3	; case 2
 11651  07E3  1903               	skipnz
 11652  07E4  2FB1               	goto	l2850
 11653  07E5  3A01               	xorlw	1	; case 3
 11654  07E6  1903               	skipnz
 11655  07E7  2FB9               	goto	l2852
 11656  07E8  3A07               	xorlw	7	; case 4
 11657  07E9  1903               	skipnz
 11658  07EA  2FC1               	goto	l2854
 11659  07EB  3A01               	xorlw	1	; case 5
 11660  07EC  1903               	skipnz
 11661  07ED  2FC9               	goto	l2856
 11662  07EE  3A03               	xorlw	3	; case 6
 11663  07EF  1903               	skipnz
 11664  07F0  2FF5               	goto	l613
 11665  07F1  3A62               	xorlw	98	; case 100
 11666  07F2  1903               	skipnz
 11667  07F3  2FD1               	goto	l612
 11668  07F4  2FF5               	goto	l613
 11669  07F5                     l613:	
 11670  07F5  0008               	return
 11671  07F6                     __end_of_set_leds_top:	
 11672                           
 11673                           	psect	text36
 11674  11C2                     __ptext36:	
 11675 ;; *************** function _set_leds_bottom *****************
 11676 ;; Defined at:
 11677 ;;		line 51 in file "LEDs.c"
 11678 ;; Parameters:    Size  Location     Type
 11679 ;;  x               2    0[BANK0 ] int 
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11691 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11695 ;;Total ram usage:        2 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; Hardware stack levels required when called:    2
 11698 ;; This function calls:
 11699 ;;		Nothing
 11700 ;; This function is called by:
 11701 ;;		_ReadSavedSettings
 11702 ;;		_star_tactiles
 11703 ;;		_solidring_tactiles
 11704 ;;		_read_bottom_tactile
 11705 ;;		_ring_tactiles
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           
 11710                           ;psect for function _set_leds_bottom
 11711  11C2                     _set_leds_bottom:	
 11712                           
 11713                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11714                           
 11715                           ;incstack = 0
 11716                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11717  11C2  0022               	movlb	2	; select bank2
 11718  11C3  100F               	bcf	15,0	;volatile
 11719                           
 11720                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11721  11C4  108F               	bcf	15,1	;volatile
 11722                           
 11723                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11724  11C5  110F               	bcf	15,2	;volatile
 11725                           
 11726                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11727  11C6  118F               	bcf	15,3	;volatile
 11728                           
 11729                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11730  11C7  120F               	bcf	15,4	;volatile
 11731                           
 11732                           ;LEDs.c: 57: switch (x) {
 11733  11C8  29DF               	goto	l2904
 11734  11C9                     l617:	
 11735                           ;LEDs.c: 58: case 1:
 11736                           
 11737                           
 11738                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11739  11C9  0022               	movlb	2	; select bank2
 11740  11CA  140F               	bsf	15,0	;volatile
 11741                           
 11742                           ;LEDs.c: 60: break;
 11743  11CB  0008               	return
 11744  11CC                     l619:	
 11745                           ;LEDs.c: 61: case 2:
 11746                           
 11747                           
 11748                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11749  11CC  0022               	movlb	2	; select bank2
 11750  11CD  148F               	bsf	15,1	;volatile
 11751                           
 11752                           ;LEDs.c: 63: break;
 11753  11CE  0008               	return
 11754  11CF                     l620:	
 11755                           ;LEDs.c: 64: case 3:
 11756                           
 11757                           
 11758                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11759  11CF  0022               	movlb	2	; select bank2
 11760  11D0  150F               	bsf	15,2	;volatile
 11761                           
 11762                           ;LEDs.c: 66: break;
 11763  11D1  0008               	return
 11764  11D2                     l621:	
 11765                           ;LEDs.c: 67: case 4:
 11766                           
 11767                           
 11768                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11769  11D2  0022               	movlb	2	; select bank2
 11770  11D3  158F               	bsf	15,3	;volatile
 11771                           
 11772                           ;LEDs.c: 69: break;
 11773  11D4  0008               	return
 11774  11D5                     l622:	
 11775                           ;LEDs.c: 70: case 5:
 11776                           
 11777                           
 11778                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11779  11D5  0022               	movlb	2	; select bank2
 11780  11D6  160F               	bsf	15,4	;volatile
 11781                           
 11782                           ;LEDs.c: 74: break;
 11783                           
 11784                           ;LEDs.c: 73: case 6:
 11785                           
 11786                           ;LEDs.c: 72: break;
 11787  11D7  0008               	return
 11788  11D8                     l624:	
 11789                           ;LEDs.c: 75: case 100:
 11790                           
 11791                           
 11792                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11793  11D8  0022               	movlb	2	; select bank2
 11794  11D9  140F               	bsf	15,0	;volatile
 11795                           
 11796                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11797  11DA  148F               	bsf	15,1	;volatile
 11798                           
 11799                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11800  11DB  150F               	bsf	15,2	;volatile
 11801                           
 11802                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11803  11DC  158F               	bsf	15,3	;volatile
 11804                           
 11805                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11806  11DD  160F               	bsf	15,4	;volatile
 11807                           
 11808                           ;LEDs.c: 82: }
 11809                           
 11810                           ;LEDs.c: 81: break;
 11811  11DE  0008               	return
 11812  11DF                     l2904:	
 11813                           
 11814                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11815                           ; Switch size 1, requested type "space"
 11816                           ; Number of cases is 1, Range of values is 0 to 0
 11817                           ; switch strategies available:
 11818                           ; Name         Instructions Cycles
 11819                           ; simple_byte            4     3 (average)
 11820                           ; direct_byte            8     6 (fixed)
 11821                           ; jumptable            260     6 (fixed)
 11822                           ;	Chosen strategy is simple_byte
 11823  11DF  0020               	movlb	0	; select bank0
 11824  11E0  0821               	movf	set_leds_bottom@x+1,w
 11825  11E1  3A00               	xorlw	0	; case 0
 11826  11E2  1903               	skipnz
 11827  11E3  29E5               	goto	l4222
 11828  11E4  29FC               	goto	l625
 11829  11E5                     l4222:	
 11830                           
 11831                           ; Switch size 1, requested type "space"
 11832                           ; Number of cases is 7, Range of values is 1 to 100
 11833                           ; switch strategies available:
 11834                           ; Name         Instructions Cycles
 11835                           ; simple_byte           22    12 (average)
 11836                           ; direct_byte          209     9 (fixed)
 11837                           ; jumptable            263     9 (fixed)
 11838                           ;	Chosen strategy is simple_byte
 11839  11E5  0820               	movf	set_leds_bottom@x,w
 11840  11E6  3A01               	xorlw	1	; case 1
 11841  11E7  1903               	skipnz
 11842  11E8  29C9               	goto	l617
 11843  11E9  3A03               	xorlw	3	; case 2
 11844  11EA  1903               	skipnz
 11845  11EB  29CC               	goto	l619
 11846  11EC  3A01               	xorlw	1	; case 3
 11847  11ED  1903               	skipnz
 11848  11EE  29CF               	goto	l620
 11849  11EF  3A07               	xorlw	7	; case 4
 11850  11F0  1903               	skipnz
 11851  11F1  29D2               	goto	l621
 11852  11F2  3A01               	xorlw	1	; case 5
 11853  11F3  1903               	skipnz
 11854  11F4  29D5               	goto	l622
 11855  11F5  3A03               	xorlw	3	; case 6
 11856  11F6  1903               	skipnz
 11857  11F7  29FC               	goto	l625
 11858  11F8  3A62               	xorlw	98	; case 100
 11859  11F9  1903               	skipnz
 11860  11FA  29D8               	goto	l624
 11861  11FB  29FC               	goto	l625
 11862  11FC                     l625:	
 11863  11FC  0008               	return
 11864  11FD                     __end_of_set_leds_bottom:	
 11865                           
 11866                           	psect	text37
 11867  1F9B                     __ptext37:	
 11868 ;; *************** function _FLASH_ReadWord *****************
 11869 ;; Defined at:
 11870 ;;		line 58 in file "memory.c"
 11871 ;; Parameters:    Size  Location     Type
 11872 ;;  flashAddr       2    0[BANK0 ] unsigned int 
 11873 ;; Auto vars:     Size  Location     Type
 11874 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 11875 ;; Return value:  Size  Location     Type
 11876 ;;                  2    0[BANK0 ] unsigned int 
 11877 ;; Registers used:
 11878 ;;		wreg, status,2, status,0
 11879 ;; Tracked objects:
 11880 ;;		On entry : 0/0
 11881 ;;		On exit  : 0/0
 11882 ;;		Unchanged: 0/0
 11883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11884 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11885 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11887 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11888 ;;Total ram usage:        3 bytes
 11889 ;; Hardware stack levels used:    1
 11890 ;; Hardware stack levels required when called:    2
 11891 ;; This function calls:
 11892 ;;		Nothing
 11893 ;; This function is called by:
 11894 ;;		_ReadSavedSettings
 11895 ;;		_FLASH_WriteWord
 11896 ;; This function uses a non-reentrant model
 11897 ;;
 11898                           
 11899                           
 11900                           ;psect for function _FLASH_ReadWord
 11901  1F9B                     _FLASH_ReadWord:	
 11902                           
 11903                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11904                           
 11905                           ;incstack = 0
 11906                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11907  1F9B  3000               	movlw	0
 11908  1F9C  1B8B               	btfsc	11,7	;volatile
 11909  1F9D  3001               	movlw	1
 11910  1F9E  0020               	movlb	0	; select bank0
 11911  1F9F  00A2               	movwf	FLASH_ReadWord@GIEBitValue
 11912                           
 11913                           ;memory.c: 61: INTCONbits.GIE = 0;
 11914  1FA0  138B               	bcf	11,7	;volatile
 11915                           
 11916                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11917  1FA1  0820               	movf	FLASH_ReadWord@flashAddr,w
 11918  1FA2  0023               	movlb	3	; select bank3
 11919  1FA3  0091               	movwf	17	;volatile
 11920                           
 11921                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11922  1FA4  0020               	movlb	0	; select bank0
 11923  1FA5  0821               	movf	FLASH_ReadWord@flashAddr+1,w
 11924  1FA6  0023               	movlb	3	; select bank3
 11925  1FA7  0092               	movwf	18	;volatile
 11926                           
 11927                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11928  1FA8  1315               	bcf	21,6	;volatile
 11929                           
 11930                           ;memory.c: 66: PMCON1bits.RD = 1;
 11931  1FA9  1415               	bsf	21,0	;volatile
 11932                           
 11933                           ;memory.c: 67: __nop();
 11934  1FAA  0000               	nop
 11935                           
 11936                           ;memory.c: 68: __nop();
 11937  1FAB  0000               	nop
 11938                           
 11939                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11940  1FAC  0020               	movlb	0	; select bank0
 11941  1FAD  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
 11942  1FAE  1C03               	skipc
 11943  1FAF  138B               	bcf	11,7	;volatile
 11944  1FB0  1803               	skipnc
 11945  1FB1  178B               	bsf	11,7	;volatile
 11946                           
 11947                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11948  1FB2  0023               	movlb	3	; select bank3
 11949  1FB3  0814               	movf	20,w	;volatile
 11950  1FB4  0020               	movlb	0	; select bank0
 11951  1FB5  00A1               	movwf	?_FLASH_ReadWord+1
 11952  1FB6  0023               	movlb	3	; select bank3
 11953  1FB7  0813               	movf	19,w	;volatile
 11954  1FB8  0020               	movlb	0	; select bank0
 11955  1FB9  00A0               	movwf	?_FLASH_ReadWord
 11956  1FBA  0008               	return
 11957  1FBB                     __end_of_FLASH_ReadWord:	
 11958                           
 11959                           	psect	text38
 11960  1023                     __ptext38:	
 11961 ;; *************** function _InitializeTaps *****************
 11962 ;; Defined at:
 11963 ;;		line 175 in file "user.c"
 11964 ;; Parameters:    Size  Location     Type
 11965 ;;		None
 11966 ;; Auto vars:     Size  Location     Type
 11967 ;;  itap            2    1[BANK0 ] int 
 11968 ;; Return value:  Size  Location     Type
 11969 ;;                  1    wreg      void 
 11970 ;; Registers used:
 11971 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11972 ;; Tracked objects:
 11973 ;;		On entry : 0/0
 11974 ;;		On exit  : 0/0
 11975 ;;		Unchanged: 0/0
 11976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11978 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11980 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11981 ;;Total ram usage:        3 bytes
 11982 ;; Hardware stack levels used:    1
 11983 ;; Hardware stack levels required when called:    2
 11984 ;; This function calls:
 11985 ;;		Nothing
 11986 ;; This function is called by:
 11987 ;;		_main
 11988 ;; This function uses a non-reentrant model
 11989 ;;
 11990                           
 11991                           
 11992                           ;psect for function _InitializeTaps
 11993  1023                     _InitializeTaps:	
 11994                           
 11995                           ;user.c: 176: for (int itap = 0; itap < 12; itap++) {
 11996                           
 11997                           ;incstack = 0
 11998                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11999  1023  0020               	movlb	0	; select bank0
 12000  1024  01A1               	clrf	InitializeTaps@itap
 12001  1025  01A2               	clrf	InitializeTaps@itap+1
 12002  1026                     L9:	
 12003  1026  0822               	movf	InitializeTaps@itap+1,w
 12004  1027  3A80               	xorlw	128
 12005  1028  00A0               	movwf	??_InitializeTaps
 12006  1029  3080               	movlw	128
 12007  102A  0220               	subwf	??_InitializeTaps,w
 12008  102B  1D03               	skipz
 12009  102C  282F               	goto	u3205
 12010  102D  300C               	movlw	12
 12011  102E  0221               	subwf	InitializeTaps@itap,w
 12012  102F                     u3205:	
 12013  102F  1803               	btfsc	3,0
 12014  1030  0008               	return
 12015                           
 12016                           ;user.c: 177: tap[itap] = 0;
 12017  1031  0020               	movlb	0	; select bank0
 12018  1032  0821               	movf	InitializeTaps@itap,w
 12019  1033  00A0               	movwf	??_InitializeTaps
 12020  1034  3001               	movlw	1
 12021  1035                     u3215:	
 12022  1035  35A0               	lslf	??_InitializeTaps,f
 12023  1036  3EFF               	addlw	-1
 12024  1037  1D03               	skipz
 12025  1038  2835               	goto	u3215
 12026  1039  3520               	lslf	??_InitializeTaps,w
 12027  103A  3EA0               	addlw	(low (_tap| (0+256)))& (0+255)
 12028  103B  0086               	movwf	6
 12029  103C  3001               	movlw	1	; select bank3/4
 12030  103D  0087               	movwf	7
 12031  103E  3000               	movlw	0
 12032  103F  3FC0               	movwi [0]fsr1
 12033  1040  3000               	movlw	0
 12034  1041  3FC1               	movwi [1]fsr1
 12035  1042  3FC2               	movwi [2]fsr1
 12036  1043  3FC3               	movwi [3]fsr1
 12037  1044  3001               	movlw	1
 12038  1045  07A1               	addwf	InitializeTaps@itap,f
 12039  1046  3000               	movlw	0
 12040  1047  3DA2               	addwfc	InitializeTaps@itap+1,f
 12041  1048  2826               	goto	L9
 12042  1049                     __end_of_InitializeTaps:	
 12043                           
 12044                           	psect	text39
 12045  1049                     __ptext39:	
 12046 ;; *************** function _InitApp *****************
 12047 ;; Defined at:
 12048 ;;		line 23 in file "user.c"
 12049 ;; Parameters:    Size  Location     Type
 12050 ;;		None
 12051 ;; Auto vars:     Size  Location     Type
 12052 ;;		None
 12053 ;; Return value:  Size  Location     Type
 12054 ;;                  1    wreg      void 
 12055 ;; Registers used:
 12056 ;;		wreg, status,2, status,0, pclath, cstack
 12057 ;; Tracked objects:
 12058 ;;		On entry : 0/0
 12059 ;;		On exit  : 0/0
 12060 ;;		Unchanged: 0/0
 12061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12066 ;;Total ram usage:        0 bytes
 12067 ;; Hardware stack levels used:    1
 12068 ;; Hardware stack levels required when called:    4
 12069 ;; This function calls:
 12070 ;;		_init_adc
 12071 ;;		_init_pwm
 12072 ;; This function is called by:
 12073 ;;		_main
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           
 12078                           ;psect for function _InitApp
 12079  1049                     _InitApp:	
 12080                           
 12081                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 12085  1049  0021               	movlb	1	; select bank1
 12086  104A  100D               	bcf	13,0	;volatile
 12087                           
 12088                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 12089  104B  108D               	bcf	13,1	;volatile
 12090                           
 12091                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 12092  104C  110D               	bcf	13,2	;volatile
 12093                           
 12094                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 12095  104D  118D               	bcf	13,3	;volatile
 12096                           
 12097                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 12098  104E  120D               	bcf	13,4	;volatile
 12099                           
 12100                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 12101  104F  128D               	bcf	13,5	;volatile
 12102                           
 12103                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 12104  1050  140E               	bsf	14,0	;volatile
 12105                           
 12106                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 12107  1051  120E               	bcf	14,4	;volatile
 12108                           
 12109                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 12110  1052  128E               	bcf	14,5	;volatile
 12111                           
 12112                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 12113  1053  100F               	bcf	15,0	;volatile
 12114                           
 12115                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 12116  1054  108F               	bcf	15,1	;volatile
 12117                           
 12118                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 12119  1055  110F               	bcf	15,2	;volatile
 12120                           
 12121                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 12122  1056  118F               	bcf	15,3	;volatile
 12123                           
 12124                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 12125  1057  120F               	bcf	15,4	;volatile
 12126                           
 12127                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 12128  1058  168F               	bsf	15,5	;volatile
 12129                           
 12130                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 12131  1059  170F               	bsf	15,6	;volatile
 12132                           
 12133                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 12134  105A  178F               	bsf	15,7	;volatile
 12135                           
 12136                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 12137  105B  1410               	bsf	16,0	;volatile
 12138                           
 12139                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 12140  105C  1490               	bsf	16,1	;volatile
 12141                           
 12142                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 12143  105D  0023               	movlb	3	; select bank3
 12144  105E  1010               	bcf	16,0	;volatile
 12145                           
 12146                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 12147  105F  1090               	bcf	16,1	;volatile
 12148                           
 12149                           ;user.c: 53: PORTEbits.RE0 = 0;
 12150  1060  0020               	movlb	0	; select bank0
 12151  1061  1010               	bcf	16,0	;volatile
 12152                           
 12153                           ;user.c: 54: PORTEbits.RE1 = 0;
 12154  1062  1090               	bcf	16,1	;volatile
 12155                           
 12156                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 12157  1063  0026               	movlb	6	; select bank6
 12158  1064  100C               	bcf	12,0	;volatile
 12159                           
 12160                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 12161  1065  108C               	bcf	12,1	;volatile
 12162                           
 12163                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 12164  1066  110C               	bcf	12,2	;volatile
 12165                           
 12166                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 12167  1067  118C               	bcf	12,3	;volatile
 12168                           
 12169                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 12170  1068  120C               	bcf	12,4	;volatile
 12171                           
 12172                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 12173  1069  128C               	bcf	12,5	;volatile
 12174                           
 12175                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 12176  106A  170C               	bsf	12,6	;volatile
 12177                           
 12178                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 12179  106B  0028               	movlb	8	; select bank8
 12180  106C  130C               	bcf	12,6	;volatile
 12181                           
 12182                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12183  106D  0026               	movlb	6	; select bank6
 12184  106E  108D               	bcf	13,1	;volatile
 12185                           
 12186                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12187  106F  110D               	bcf	13,2	;volatile
 12188                           
 12189                           ;user.c: 68: init_adc();
 12190  1070  3187  27F6  3190   	fcall	_init_adc
 12191                           
 12192                           ;user.c: 69: init_pwm();
 12193  1073  3193  2337         	fcall	_init_pwm
 12194                           
 12195                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12196  1075  178B               	bsf	11,7	;volatile
 12197                           
 12198                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12199  1076  168B               	bsf	11,5	;volatile
 12200                           
 12201                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12202  1077  110B               	bcf	11,2	;volatile
 12203  1078  0008               	return
 12204  1079                     __end_of_InitApp:	
 12205                           
 12206                           	psect	text40
 12207  1337                     __ptext40:	
 12208 ;; *************** function _init_pwm *****************
 12209 ;; Defined at:
 12210 ;;		line 117 in file "user.c"
 12211 ;; Parameters:    Size  Location     Type
 12212 ;;		None
 12213 ;; Auto vars:     Size  Location     Type
 12214 ;;		None
 12215 ;; Return value:  Size  Location     Type
 12216 ;;                  1    wreg      void 
 12217 ;; Registers used:
 12218 ;;		wreg, status,2, status,0, pclath, cstack
 12219 ;; Tracked objects:
 12220 ;;		On entry : 0/0
 12221 ;;		On exit  : 0/0
 12222 ;;		Unchanged: 0/0
 12223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12228 ;;Total ram usage:        0 bytes
 12229 ;; Hardware stack levels used:    1
 12230 ;; Hardware stack levels required when called:    3
 12231 ;; This function calls:
 12232 ;;		_init_timer0
 12233 ;;		_init_timer2
 12234 ;; This function is called by:
 12235 ;;		_InitApp
 12236 ;; This function uses a non-reentrant model
 12237 ;;
 12238                           
 12239                           
 12240                           ;psect for function _init_pwm
 12241  1337                     _init_pwm:	
 12242                           
 12243                           ;user.c: 118: APFCONbits.CCP2SEL = 0;
 12244                           
 12245                           ;incstack = 0
 12246                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12247  1337  0022               	movlb	2	; select bank2
 12248  1338  101D               	bcf	29,0	;volatile
 12249                           
 12250                           ;user.c: 119: TRISCbits.TRISC2 = 0;
 12251  1339  0021               	movlb	1	; select bank1
 12252  133A  110E               	bcf	14,2	;volatile
 12253                           
 12254                           ;user.c: 120: TRISCbits.TRISC1 = 0;
 12255  133B  108E               	bcf	14,1	;volatile
 12256                           
 12257                           ;user.c: 121: TRISGbits.TRISG0 = 0;
 12258  133C  0026               	movlb	6	; select bank6
 12259  133D  100D               	bcf	13,0	;volatile
 12260                           
 12261                           ;user.c: 122: TRISGbits.TRISG3 = 0;
 12262  133E  118D               	bcf	13,3	;volatile
 12263                           
 12264                           ;user.c: 123: TRISGbits.TRISG4 = 0;
 12265  133F  120D               	bcf	13,4	;volatile
 12266                           
 12267                           ;user.c: 124: TRISEbits.TRISE6 = 0;
 12268  1340  0021               	movlb	1	; select bank1
 12269  1341  1310               	bcf	16,6	;volatile
 12270                           
 12271                           ;user.c: 125: TRISEbits.TRISE5 = 0;
 12272  1342  1290               	bcf	16,5	;volatile
 12273                           
 12274                           ;user.c: 126: TRISEbits.TRISE4 = 0;
 12275  1343  1210               	bcf	16,4	;volatile
 12276                           
 12277                           ;user.c: 127: TRISEbits.TRISE3 = 0;
 12278  1344  1190               	bcf	16,3	;volatile
 12279                           
 12280                           ;user.c: 128: TRISEbits.TRISE2 = 0;
 12281  1345  1110               	bcf	16,2	;volatile
 12282                           
 12283                           ;user.c: 129: CCP1CONbits.CCP1M = 0b1111;
 12284  1346  300F               	movlw	15
 12285  1347  0025               	movlb	5	; select bank5
 12286  1348  0493               	iorwf	19,f	;volatile
 12287                           
 12288                           ;user.c: 130: CCP2CONbits.CCP2M = 0b1111;
 12289  1349  300F               	movlw	15
 12290  134A  049A               	iorwf	26,f	;volatile
 12291                           
 12292                           ;user.c: 131: CCP3CONbits.CCP3M = 0b1111;
 12293  134B  300F               	movlw	15
 12294  134C  0026               	movlb	6	; select bank6
 12295  134D  0493               	iorwf	19,f	;volatile
 12296                           
 12297                           ;user.c: 132: CCP4CONbits.CCP4M = 0b1111;
 12298  134E  300F               	movlw	15
 12299  134F  049A               	iorwf	26,f	;volatile
 12300                           
 12301                           ;user.c: 133: CCP5CONbits.CCP5M = 0b1111;
 12302  1350  300F               	movlw	15
 12303  1351  049E               	iorwf	30,f	;volatile
 12304                           
 12305                           ;user.c: 134: CCP6CONbits.CCP6M = 0b1111;
 12306  1352  300F               	movlw	15
 12307  1353  002C               	movlb	12	; select bank12
 12308  1354  0493               	iorwf	19,f	;volatile
 12309                           
 12310                           ;user.c: 135: CCP7CONbits.CCP7M = 0b1111;
 12311  1355  300F               	movlw	15
 12312  1356  0496               	iorwf	22,f	;volatile
 12313                           
 12314                           ;user.c: 136: CCP8CONbits.CCP8M = 0b1111;
 12315  1357  300F               	movlw	15
 12316  1358  0499               	iorwf	25,f	;volatile
 12317                           
 12318                           ;user.c: 137: CCP9CONbits.CCP9M = 0b1111;
 12319  1359  300F               	movlw	15
 12320  135A  049C               	iorwf	28,f	;volatile
 12321                           
 12322                           ;user.c: 138: CCP10CONbits.CCP10M = 0b1111;
 12323  135B  300F               	movlw	15
 12324  135C  049F               	iorwf	31,f	;volatile
 12325                           
 12326                           ;user.c: 139: CCPTMRS0 = 0b00000000;
 12327  135D  0025               	movlb	5	; select bank5
 12328  135E  019D               	clrf	29	;volatile
 12329                           
 12330                           ;user.c: 140: CCPTMRS1 = 0b00000000;
 12331  135F  019E               	clrf	30	;volatile
 12332                           
 12333                           ;user.c: 141: CCPTMRS2 = 0b00000000;
 12334  1360  019F               	clrf	31	;volatile
 12335                           
 12336                           ;user.c: 142: CCPR1 = 50;
 12337  1361  3000               	movlw	0
 12338  1362  0092               	movwf	18	;volatile
 12339  1363  3032               	movlw	50
 12340  1364  0091               	movwf	17	;volatile
 12341                           
 12342                           ;user.c: 143: CCPR2 = 100;
 12343  1365  3000               	movlw	0
 12344  1366  0099               	movwf	25	;volatile
 12345  1367  3064               	movlw	100
 12346  1368  0098               	movwf	24	;volatile
 12347                           
 12348                           ;user.c: 144: CCPR3 = 150;
 12349  1369  3000               	movlw	0
 12350  136A  0026               	movlb	6	; select bank6
 12351  136B  0092               	movwf	18	;volatile
 12352  136C  3096               	movlw	150
 12353  136D  0091               	movwf	17	;volatile
 12354                           
 12355                           ;user.c: 145: CCPR4 = 200;
 12356  136E  3000               	movlw	0
 12357  136F  0099               	movwf	25	;volatile
 12358  1370  30C8               	movlw	200
 12359  1371  0098               	movwf	24	;volatile
 12360                           
 12361                           ;user.c: 146: init_timer2();
 12362  1372  319E  26F9  3193   	fcall	_init_timer2
 12363                           
 12364                           ;user.c: 147: init_timer0();
 12365  1375  319E  26F2         	fcall	_init_timer0
 12366  1377  0008               	return
 12367  1378                     __end_of_init_pwm:	
 12368                           
 12369                           	psect	text41
 12370  1EF9                     __ptext41:	
 12371 ;; *************** function _init_timer2 *****************
 12372 ;; Defined at:
 12373 ;;		line 150 in file "user.c"
 12374 ;; Parameters:    Size  Location     Type
 12375 ;;		None
 12376 ;; Auto vars:     Size  Location     Type
 12377 ;;		None
 12378 ;; Return value:  Size  Location     Type
 12379 ;;                  1    wreg      void 
 12380 ;; Registers used:
 12381 ;;		wreg, status,2, status,0
 12382 ;; Tracked objects:
 12383 ;;		On entry : 0/0
 12384 ;;		On exit  : 0/0
 12385 ;;		Unchanged: 0/0
 12386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12391 ;;Total ram usage:        0 bytes
 12392 ;; Hardware stack levels used:    1
 12393 ;; Hardware stack levels required when called:    2
 12394 ;; This function calls:
 12395 ;;		Nothing
 12396 ;; This function is called by:
 12397 ;;		_init_pwm
 12398 ;; This function uses a non-reentrant model
 12399 ;;
 12400                           
 12401                           
 12402                           ;psect for function _init_timer2
 12403  1EF9                     _init_timer2:	
 12404                           
 12405                           ;user.c: 151: T2CONbits.T2OUTPS = 0b0000;
 12406                           
 12407                           ;incstack = 0
 12408                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12409  1EF9  3087               	movlw	-121
 12410  1EFA  0020               	movlb	0	; select bank0
 12411  1EFB  059C               	andwf	28,f	;volatile
 12412                           
 12413                           ;user.c: 152: T2CONbits.T2CKPS = 0b00;
 12414  1EFC  30FC               	movlw	-4
 12415  1EFD  059C               	andwf	28,f	;volatile
 12416                           
 12417                           ;user.c: 153: PR2 = 0xFF;
 12418  1EFE  30FF               	movlw	255
 12419  1EFF  009B               	movwf	27	;volatile
 12420                           
 12421                           ;user.c: 154: T2CONbits.TMR2ON = 1;
 12422  1F00  151C               	bsf	28,2	;volatile
 12423  1F01  0008               	return
 12424  1F02                     __end_of_init_timer2:	
 12425                           
 12426                           	psect	text42
 12427  1EF2                     __ptext42:	
 12428 ;; *************** function _init_timer0 *****************
 12429 ;; Defined at:
 12430 ;;		line 157 in file "user.c"
 12431 ;; Parameters:    Size  Location     Type
 12432 ;;		None
 12433 ;; Auto vars:     Size  Location     Type
 12434 ;;		None
 12435 ;; Return value:  Size  Location     Type
 12436 ;;                  1    wreg      void 
 12437 ;; Registers used:
 12438 ;;		None
 12439 ;; Tracked objects:
 12440 ;;		On entry : 0/0
 12441 ;;		On exit  : 0/0
 12442 ;;		Unchanged: 0/0
 12443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12448 ;;Total ram usage:        0 bytes
 12449 ;; Hardware stack levels used:    1
 12450 ;; Hardware stack levels required when called:    2
 12451 ;; This function calls:
 12452 ;;		Nothing
 12453 ;; This function is called by:
 12454 ;;		_init_pwm
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _init_timer0
 12460  1EF2                     _init_timer0:	
 12461                           
 12462                           ;user.c: 158: OPTION_REGbits.TMR0CS = 0b0;
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _init_timer0: []
 12466  1EF2  0021               	movlb	1	; select bank1
 12467  1EF3  1295               	bcf	21,5	;volatile
 12468                           
 12469                           ;user.c: 159: OPTION_REGbits.PSA = 0b0;
 12470  1EF4  1195               	bcf	21,3	;volatile
 12471                           
 12472                           ;user.c: 160: OPTION_REGbits.PS0 = 0b0;
 12473  1EF5  1015               	bcf	21,0	;volatile
 12474                           
 12475                           ;user.c: 161: OPTION_REGbits.PS1 = 0b1;
 12476  1EF6  1495               	bsf	21,1	;volatile
 12477                           
 12478                           ;user.c: 162: OPTION_REGbits.PS2 = 0b0;
 12479  1EF7  1115               	bcf	21,2	;volatile
 12480  1EF8  0008               	return
 12481  1EF9                     __end_of_init_timer0:	
 12482                           
 12483                           	psect	text43
 12484  07F6                     __ptext43:	
 12485 ;; *************** function _init_adc *****************
 12486 ;; Defined at:
 12487 ;;		line 103 in file "user.c"
 12488 ;; Parameters:    Size  Location     Type
 12489 ;;		None
 12490 ;; Auto vars:     Size  Location     Type
 12491 ;;		None
 12492 ;; Return value:  Size  Location     Type
 12493 ;;                  1    wreg      void 
 12494 ;; Registers used:
 12495 ;;		wreg, status,2, status,0
 12496 ;; Tracked objects:
 12497 ;;		On entry : 0/0
 12498 ;;		On exit  : 0/0
 12499 ;;		Unchanged: 0/0
 12500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12505 ;;Total ram usage:        0 bytes
 12506 ;; Hardware stack levels used:    1
 12507 ;; Hardware stack levels required when called:    2
 12508 ;; This function calls:
 12509 ;;		Nothing
 12510 ;; This function is called by:
 12511 ;;		_InitApp
 12512 ;; This function uses a non-reentrant model
 12513 ;;
 12514                           
 12515                           
 12516                           ;psect for function _init_adc
 12517  07F6                     _init_adc:	
 12518                           
 12519                           ;user.c: 104: ADCON1bits.ADFM = 0b1;
 12520                           
 12521                           ;incstack = 0
 12522                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12523  07F6  0021               	movlb	1	; select bank1
 12524  07F7  179E               	bsf	30,7	;volatile
 12525                           
 12526                           ;user.c: 105: ADCON1bits.ADCS = 0b110;
 12527  07F8  081E               	movf	30,w	;volatile
 12528  07F9  398F               	andlw	-113
 12529  07FA  3860               	iorlw	96
 12530  07FB  009E               	movwf	30	;volatile
 12531                           
 12532                           ;user.c: 106: ADCON1bits.ADPREF = 0b00;
 12533  07FC  30FC               	movlw	-4
 12534  07FD  059E               	andwf	30,f	;volatile
 12535                           
 12536                           ;user.c: 107: ADCON0bits.ADON = 0b1;
 12537  07FE  141D               	bsf	29,0	;volatile
 12538  07FF  0008               	return
 12539  0800                     __end_of_init_adc:	
 12540                           
 12541                           	psect	text44
 12542  1EEA                     __ptext44:	
 12543 ;; *************** function _ConfigureOscillator *****************
 12544 ;; Defined at:
 12545 ;;		line 18 in file "system.c"
 12546 ;; Parameters:    Size  Location     Type
 12547 ;;		None
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;		None
 12550 ;; Return value:  Size  Location     Type
 12551 ;;                  1    wreg      void 
 12552 ;; Registers used:
 12553 ;;		wreg, status,2, status,0
 12554 ;; Tracked objects:
 12555 ;;		On entry : 0/0
 12556 ;;		On exit  : 0/0
 12557 ;;		Unchanged: 0/0
 12558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12563 ;;Total ram usage:        0 bytes
 12564 ;; Hardware stack levels used:    1
 12565 ;; Hardware stack levels required when called:    2
 12566 ;; This function calls:
 12567 ;;		Nothing
 12568 ;; This function is called by:
 12569 ;;		_main
 12570 ;; This function uses a non-reentrant model
 12571 ;;
 12572                           
 12573                           
 12574                           ;psect for function _ConfigureOscillator
 12575  1EEA                     _ConfigureOscillator:	
 12576                           
 12577                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12578                           
 12579                           ;incstack = 0
 12580                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12581  1EEA  30FC               	movlw	-4
 12582  1EEB  0021               	movlb	1	; select bank1
 12583  1EEC  0599               	andwf	25,f	;volatile
 12584  1EED  0008               	return
 12585  1EEE                     __end_of_ConfigureOscillator:	
 12586                           
 12587                           	psect	intentry
 12588  0004                     __pintentry:	
 12589 ;; *************** function _isr *****************
 12590 ;; Defined at:
 12591 ;;		line 23 in file "interrupts.c"
 12592 ;; Parameters:    Size  Location     Type
 12593 ;;		None
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;		None
 12596 ;; Return value:  Size  Location     Type
 12597 ;;                  1    wreg      void 
 12598 ;; Registers used:
 12599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12607 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12608 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12609 ;;Total ram usage:        5 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:    1
 12612 ;; This function calls:
 12613 ;;		i1_set_leds_top
 12614 ;; This function is called by:
 12615 ;;		Interrupt level 1
 12616 ;; This function uses a non-reentrant model
 12617 ;;
 12618                           
 12619  0004                     _isr:	
 12620                           
 12621                           ;incstack = 0
 12622                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12623  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12624  0005  3180               	pagesel	$
 12625  0006  0020               	movlb	0	; select bank0
 12626  0007  087F               	movf	127,w
 12627  0008  00F8               	movwf	??_isr+4
 12628                           
 12629                           ;interrupts.c: 24: extern volatile long timer;
 12630                           ;interrupts.c: 25: extern volatile long sub_timer;
 12631                           ;interrupts.c: 26: extern volatile long tap_timer;
 12632                           ;interrupts.c: 27: extern volatile long mod_timer;
 12633                           ;interrupts.c: 28: extern volatile long baseline_delay_time;
 12634                           ;interrupts.c: 29: extern volatile long delay_time;
 12635                           ;interrupts.c: 30: extern volatile uint8_t top_push_state;
 12636                           ;interrupts.c: 32: if (INTCONbits.TMR0IF == 1) {
 12637  0009  1D0B               	btfss	11,2	;volatile
 12638  000A  286E               	goto	i1l67
 12639                           
 12640                           ;interrupts.c: 33: timer = timer + 1;
 12641  000B  3001               	movlw	1
 12642  000C  00F4               	movwf	??_isr
 12643  000D  3000               	movlw	0
 12644  000E  00F5               	movwf	??_isr+1
 12645  000F  3000               	movlw	0
 12646  0010  00F6               	movwf	??_isr+2
 12647  0011  3000               	movlw	0
 12648  0012  00F7               	movwf	??_isr+3
 12649  0013  0021               	movlb	1	; select bank1
 12650  0014  0847               	movf	_timer^(0+128),w	;volatile
 12651  0015  07F4               	addwf	??_isr,f
 12652  0016  0848               	movf	(_timer+1)^(0+128),w	;volatile
 12653  0017  3DF5               	addwfc	??_isr+1,f
 12654  0018  0849               	movf	(_timer+2)^(0+128),w	;volatile
 12655  0019  3DF6               	addwfc	??_isr+2,f
 12656  001A  084A               	movf	(_timer+3)^(0+128),w	;volatile
 12657  001B  3DF7               	addwfc	??_isr+3,f
 12658  001C  0877               	movf	??_isr+3,w
 12659  001D  00CA               	movwf	(_timer+3)^(0+128)	;volatile
 12660  001E  0876               	movf	??_isr+2,w
 12661  001F  00C9               	movwf	(_timer+2)^(0+128)	;volatile
 12662  0020  0875               	movf	??_isr+1,w
 12663  0021  00C8               	movwf	(_timer+1)^(0+128)	;volatile
 12664  0022  0874               	movf	??_isr,w
 12665  0023  00C7               	movwf	_timer^(0+128)	;volatile
 12666                           
 12667                           ;interrupts.c: 34: sub_timer = sub_timer + 1;
 12668  0024  3001               	movlw	1
 12669  0025  00F4               	movwf	??_isr
 12670  0026  3000               	movlw	0
 12671  0027  00F5               	movwf	??_isr+1
 12672  0028  3000               	movlw	0
 12673  0029  00F6               	movwf	??_isr+2
 12674  002A  3000               	movlw	0
 12675  002B  00F7               	movwf	??_isr+3
 12676  002C  0843               	movf	_sub_timer^(0+128),w	;volatile
 12677  002D  07F4               	addwf	??_isr,f
 12678  002E  0844               	movf	(_sub_timer+1)^(0+128),w	;volatile
 12679  002F  3DF5               	addwfc	??_isr+1,f
 12680  0030  0845               	movf	(_sub_timer+2)^(0+128),w	;volatile
 12681  0031  3DF6               	addwfc	??_isr+2,f
 12682  0032  0846               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12683  0033  3DF7               	addwfc	??_isr+3,f
 12684  0034  0877               	movf	??_isr+3,w
 12685  0035  00C6               	movwf	(_sub_timer+3)^(0+128)	;volatile
 12686  0036  0876               	movf	??_isr+2,w
 12687  0037  00C5               	movwf	(_sub_timer+2)^(0+128)	;volatile
 12688  0038  0875               	movf	??_isr+1,w
 12689  0039  00C4               	movwf	(_sub_timer+1)^(0+128)	;volatile
 12690  003A  0874               	movf	??_isr,w
 12691  003B  00C3               	movwf	_sub_timer^(0+128)	;volatile
 12692                           
 12693                           ;interrupts.c: 35: tap_timer = tap_timer + 1;
 12694  003C  3001               	movlw	1
 12695  003D  00F4               	movwf	??_isr
 12696  003E  3000               	movlw	0
 12697  003F  00F5               	movwf	??_isr+1
 12698  0040  3000               	movlw	0
 12699  0041  00F6               	movwf	??_isr+2
 12700  0042  3000               	movlw	0
 12701  0043  00F7               	movwf	??_isr+3
 12702  0044  0879               	movf	_tap_timer,w	;volatile
 12703  0045  07F4               	addwf	??_isr,f
 12704  0046  087A               	movf	_tap_timer+1,w	;volatile
 12705  0047  3DF5               	addwfc	??_isr+1,f
 12706  0048  087B               	movf	_tap_timer+2,w	;volatile
 12707  0049  3DF6               	addwfc	??_isr+2,f
 12708  004A  087C               	movf	_tap_timer+3,w	;volatile
 12709  004B  3DF7               	addwfc	??_isr+3,f
 12710  004C  0877               	movf	??_isr+3,w
 12711  004D  00FC               	movwf	_tap_timer+3	;volatile
 12712  004E  0876               	movf	??_isr+2,w
 12713  004F  00FB               	movwf	_tap_timer+2	;volatile
 12714  0050  0875               	movf	??_isr+1,w
 12715  0051  00FA               	movwf	_tap_timer+1	;volatile
 12716  0052  0874               	movf	??_isr,w
 12717  0053  00F9               	movwf	_tap_timer	;volatile
 12718                           
 12719                           ;interrupts.c: 36: mod_timer = mod_timer + 1;
 12720  0054  3001               	movlw	1
 12721  0055  00F4               	movwf	??_isr
 12722  0056  3000               	movlw	0
 12723  0057  00F5               	movwf	??_isr+1
 12724  0058  3000               	movlw	0
 12725  0059  00F6               	movwf	??_isr+2
 12726  005A  3000               	movlw	0
 12727  005B  00F7               	movwf	??_isr+3
 12728  005C  0022               	movlb	2	; select bank2
 12729  005D  0838               	movf	_mod_timer^(0+256),w	;volatile
 12730  005E  07F4               	addwf	??_isr,f
 12731  005F  0839               	movf	(_mod_timer+1)^(0+256),w	;volatile
 12732  0060  3DF5               	addwfc	??_isr+1,f
 12733  0061  083A               	movf	(_mod_timer+2)^(0+256),w	;volatile
 12734  0062  3DF6               	addwfc	??_isr+2,f
 12735  0063  083B               	movf	(_mod_timer+3)^(0+256),w	;volatile
 12736  0064  3DF7               	addwfc	??_isr+3,f
 12737  0065  0877               	movf	??_isr+3,w
 12738  0066  00BB               	movwf	(_mod_timer+3)^(0+256)	;volatile
 12739  0067  0876               	movf	??_isr+2,w
 12740  0068  00BA               	movwf	(_mod_timer+2)^(0+256)	;volatile
 12741  0069  0875               	movf	??_isr+1,w
 12742  006A  00B9               	movwf	(_mod_timer+1)^(0+256)	;volatile
 12743  006B  0874               	movf	??_isr,w
 12744  006C  00B8               	movwf	_mod_timer^(0+256)	;volatile
 12745                           
 12746                           ;interrupts.c: 37: INTCONbits.TMR0IF = 0;
 12747  006D  110B               	bcf	11,2	;volatile
 12748  006E                     i1l67:	
 12749                           
 12750                           ;interrupts.c: 38: }
 12751                           ;interrupts.c: 40: if (timer >= baseline_delay_time) {
 12752  006E  0021               	movlb	1	; select bank1
 12753  006F  084A               	movf	(_timer+3)^(0+128),w	;volatile
 12754  0070  3A80               	xorlw	128
 12755  0071  00F4               	movwf	??_isr
 12756  0072  0861               	movf	(_baseline_delay_time+3)^(0+128),w	;volatile
 12757  0073  3A80               	xorlw	128
 12758  0074  0274               	subwf	??_isr,w
 12759  0075  1D03               	skipz
 12760  0076  2881               	goto	u358_23
 12761  0077  0860               	movf	(_baseline_delay_time+2)^(0+128),w	;volatile
 12762  0078  0249               	subwf	(_timer+2)^(0+128),w	;volatile
 12763  0079  1D03               	skipz
 12764  007A  2881               	goto	u358_23
 12765  007B  085F               	movf	(_baseline_delay_time+1)^(0+128),w	;volatile
 12766  007C  0248               	subwf	(_timer+1)^(0+128),w	;volatile
 12767  007D  1D03               	skipz
 12768  007E  2881               	goto	u358_23
 12769  007F  085E               	movf	_baseline_delay_time^(0+128),w	;volatile
 12770  0080  0247               	subwf	_timer^(0+128),w	;volatile
 12771  0081                     u358_23:	
 12772  0081  1C03               	skipc
 12773  0082  288E               	goto	i1l3680
 12774                           
 12775                           ;interrupts.c: 42: LATBbits.LATB4 = 1;
 12776  0083  0022               	movlb	2	; select bank2
 12777  0084  160D               	bsf	13,4	;volatile
 12778                           
 12779                           ;interrupts.c: 44: timer = 0;
 12780  0085  3000               	movlw	0
 12781  0086  0021               	movlb	1	; select bank1
 12782  0087  00CA               	movwf	(_timer+3)^(0+128)	;volatile
 12783  0088  3000               	movlw	0
 12784  0089  00C9               	movwf	(_timer+2)^(0+128)	;volatile
 12785  008A  3000               	movlw	0
 12786  008B  00C8               	movwf	(_timer+1)^(0+128)	;volatile
 12787  008C  3000               	movlw	0
 12788  008D  00C7               	movwf	_timer^(0+128)	;volatile
 12789  008E                     i1l3680:	
 12790                           
 12791                           ;interrupts.c: 45: }
 12792                           ;interrupts.c: 47: if (timer >= 20) {
 12793  008E  1BCA               	btfsc	(_timer+3)^(0+128),7	;volatile
 12794  008F  289F               	goto	i1l3684
 12795  0090  084A               	movf	(_timer+3)^(0+128),w	;volatile
 12796  0091  1D03               	btfss	3,2
 12797  0092  289D               	goto	i1l3682
 12798  0093  0849               	movf	(_timer+2)^(0+128),w	;volatile
 12799  0094  1D03               	btfss	3,2
 12800  0095  289D               	goto	i1l3682
 12801  0096  0848               	movf	(_timer+1)^(0+128),w	;volatile
 12802  0097  1D03               	btfss	3,2
 12803  0098  289D               	goto	i1l3682
 12804  0099  3014               	movlw	20
 12805  009A  0247               	subwf	_timer^(0+128),w	;volatile
 12806  009B  1C03               	btfss	3,0
 12807  009C  289F               	goto	i1l3684
 12808  009D                     i1l3682:	
 12809                           
 12810                           ;interrupts.c: 49: LATBbits.LATB4 = 0;
 12811  009D  0022               	movlb	2	; select bank2
 12812  009E  120D               	bcf	13,4	;volatile
 12813  009F                     i1l3684:	
 12814                           
 12815                           ;interrupts.c: 51: }
 12816                           ;interrupts.c: 53: if (sub_timer >= delay_time) {
 12817  009F  0021               	movlb	1	; select bank1
 12818  00A0  0846               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12819  00A1  3A80               	xorlw	128
 12820  00A2  00F4               	movwf	??_isr
 12821  00A3  0865               	movf	(_delay_time+3)^(0+128),w	;volatile
 12822  00A4  3A80               	xorlw	128
 12823  00A5  0274               	subwf	??_isr,w
 12824  00A6  1D03               	skipz
 12825  00A7  28B2               	goto	u360_23
 12826  00A8  0864               	movf	(_delay_time+2)^(0+128),w	;volatile
 12827  00A9  0245               	subwf	(_sub_timer+2)^(0+128),w	;volatile
 12828  00AA  1D03               	skipz
 12829  00AB  28B2               	goto	u360_23
 12830  00AC  0863               	movf	(_delay_time+1)^(0+128),w	;volatile
 12831  00AD  0244               	subwf	(_sub_timer+1)^(0+128),w	;volatile
 12832  00AE  1D03               	skipz
 12833  00AF  28B2               	goto	u360_23
 12834  00B0  0862               	movf	_delay_time^(0+128),w	;volatile
 12835  00B1  0243               	subwf	_sub_timer^(0+128),w	;volatile
 12836  00B2                     u360_23:	
 12837  00B2  1C03               	skipc
 12838  00B3  28CE               	goto	i1l3692
 12839                           
 12840                           ;interrupts.c: 54: if (suspend_blink == 0) {
 12841  00B4  086D               	movf	_suspend_blink^(0+128),w
 12842  00B5  1D03               	btfss	3,2
 12843  00B6  28C5               	goto	i1l3690
 12844                           
 12845                           ;interrupts.c: 55: set_leds_top(top_push_state, 1);
 12846  00B7  087D               	movf	_top_push_state,w	;volatile
 12847  00B8  00F4               	movwf	??_isr
 12848  00B9  01F5               	clrf	??_isr+1
 12849  00BA  0874               	movf	??_isr,w
 12850  00BB  00F0               	movwf	i1set_leds_top@x
 12851  00BC  0875               	movf	??_isr+1,w
 12852  00BD  00F1               	movwf	i1set_leds_top@x+1
 12853  00BE  3001               	movlw	1
 12854  00BF  00F2               	movwf	i1set_leds_top@ledState
 12855  00C0  3000               	movlw	0
 12856  00C1  00F3               	movwf	i1set_leds_top@ledState+1
 12857  00C2  3194  2402  3180   	fcall	i1_set_leds_top
 12858  00C5                     i1l3690:	
 12859                           
 12860                           ;interrupts.c: 56: }
 12861                           ;interrupts.c: 57: sub_timer = 0;
 12862  00C5  3000               	movlw	0
 12863  00C6  0021               	movlb	1	; select bank1
 12864  00C7  00C6               	movwf	(_sub_timer+3)^(0+128)	;volatile
 12865  00C8  3000               	movlw	0
 12866  00C9  00C5               	movwf	(_sub_timer+2)^(0+128)	;volatile
 12867  00CA  3000               	movlw	0
 12868  00CB  00C4               	movwf	(_sub_timer+1)^(0+128)	;volatile
 12869  00CC  3000               	movlw	0
 12870  00CD  00C3               	movwf	_sub_timer^(0+128)	;volatile
 12871  00CE                     i1l3692:	
 12872                           
 12873                           ;interrupts.c: 58: }
 12874                           ;interrupts.c: 60: if (sub_timer >= 20) {
 12875  00CE  1BC6               	btfsc	(_sub_timer+3)^(0+128),7	;volatile
 12876  00CF  28ED               	goto	i1l3698
 12877  00D0  0846               	movf	(_sub_timer+3)^(0+128),w	;volatile
 12878  00D1  1D03               	btfss	3,2
 12879  00D2  28DD               	goto	i1l3694
 12880  00D3  0845               	movf	(_sub_timer+2)^(0+128),w	;volatile
 12881  00D4  1D03               	btfss	3,2
 12882  00D5  28DD               	goto	i1l3694
 12883  00D6  0844               	movf	(_sub_timer+1)^(0+128),w	;volatile
 12884  00D7  1D03               	btfss	3,2
 12885  00D8  28DD               	goto	i1l3694
 12886  00D9  3014               	movlw	20
 12887  00DA  0243               	subwf	_sub_timer^(0+128),w	;volatile
 12888  00DB  1C03               	btfss	3,0
 12889  00DC  28ED               	goto	i1l3698
 12890  00DD                     i1l3694:	
 12891                           
 12892                           ;interrupts.c: 61: if (suspend_blink == 0) {
 12893  00DD  086D               	movf	_suspend_blink^(0+128),w
 12894  00DE  1D03               	btfss	3,2
 12895  00DF  28ED               	goto	i1l3698
 12896                           
 12897                           ;interrupts.c: 62: set_leds_top(top_push_state, 0);
 12898  00E0  087D               	movf	_top_push_state,w	;volatile
 12899  00E1  00F4               	movwf	??_isr
 12900  00E2  01F5               	clrf	??_isr+1
 12901  00E3  0874               	movf	??_isr,w
 12902  00E4  00F0               	movwf	i1set_leds_top@x
 12903  00E5  0875               	movf	??_isr+1,w
 12904  00E6  00F1               	movwf	i1set_leds_top@x+1
 12905  00E7  3000               	movlw	0
 12906  00E8  00F2               	movwf	i1set_leds_top@ledState
 12907  00E9  00F3               	movwf	i1set_leds_top@ledState+1
 12908  00EA  3194  2402  3180   	fcall	i1_set_leds_top
 12909  00ED                     i1l3698:	
 12910                           
 12911                           ;interrupts.c: 63: }
 12912                           ;interrupts.c: 64: }
 12913                           ;interrupts.c: 67: if (preset_programmning_on == 1) {
 12914  00ED  0021               	movlb	1	; select bank1
 12915  00EE  035D               	decf	_preset_programmning_on^(0+128),w
 12916  00EF  1D03               	btfss	3,2
 12917  00F0  2917               	goto	i1l3710
 12918                           
 12919                           ;interrupts.c: 68: preset_blink++;
 12920  00F1  3001               	movlw	1
 12921  00F2  00F4               	movwf	??_isr
 12922  00F3  0874               	movf	??_isr,w
 12923  00F4  07DC               	addwf	_preset_blink^(0+128),f
 12924                           
 12925                           ;interrupts.c: 70: if (preset_blink >= blink_delay) {
 12926  00F5  0022               	movlb	2	; select bank2
 12927  00F6  085B               	movf	(_blink_delay+1)^(0+256),w
 12928  00F7  3A80               	xorlw	128
 12929  00F8  3C80               	sublw	128
 12930  00F9  1D03               	skipz
 12931  00FA  28FE               	goto	u365_25
 12932  00FB  085A               	movf	_blink_delay^(0+256),w
 12933  00FC  0021               	movlb	1	; select bank1
 12934  00FD  025C               	subwf	_preset_blink^(0+128),w
 12935  00FE                     u365_25:	
 12936  00FE  1C03               	skipc
 12937  00FF  291C               	goto	i1l3714
 12938                           
 12939                           ;interrupts.c: 71: LATBbits.LATB1 = 1;
 12940  0100  0022               	movlb	2	; select bank2
 12941  0101  148D               	bsf	13,1	;volatile
 12942                           
 12943                           ;interrupts.c: 72: if (preset_blink > blink_delay*2) {
 12944  0102  085B               	movf	(_blink_delay+1)^(0+256),w
 12945  0103  00F5               	movwf	??_isr+1
 12946  0104  085A               	movf	_blink_delay^(0+256),w
 12947  0105  00F4               	movwf	??_isr
 12948  0106  35F4               	lslf	??_isr,f
 12949  0107  0DF5               	rlf	??_isr+1,f
 12950  0108  0875               	movf	??_isr+1,w
 12951  0109  3A80               	xorlw	128
 12952  010A  00F6               	movwf	??_isr+2
 12953  010B  3080               	movlw	128
 12954  010C  0276               	subwf	??_isr+2,w
 12955  010D  1D03               	skipz
 12956  010E  2912               	goto	u366_25
 12957  010F  0021               	movlb	1	; select bank1
 12958  0110  085C               	movf	_preset_blink^(0+128),w
 12959  0111  0274               	subwf	??_isr,w
 12960  0112                     u366_25:	
 12961  0112  1803               	skipnc
 12962  0113  291E               	goto	i1l80
 12963                           
 12964                           ;interrupts.c: 73: preset_blink = 0;
 12965  0114  0021               	movlb	1	; select bank1
 12966  0115  01DC               	clrf	_preset_blink^(0+128)
 12967                           
 12968                           ;interrupts.c: 74: }
 12969                           ;interrupts.c: 76: } else {
 12970  0116  291E               	goto	i1l80
 12971  0117                     i1l3710:	
 12972                           ;interrupts.c: 78: }
 12973                           ;interrupts.c: 80: } else {
 12974                           
 12975                           ;interrupts.c: 77: LATBbits.LATB1 = 0;
 12976                           
 12977                           
 12978                           ;interrupts.c: 81: if (preset_blink > 0) {
 12979  0117  0021               	movlb	1	; select bank1
 12980  0118  085C               	movf	_preset_blink^(0+128),w
 12981  0119  1903               	btfsc	3,2
 12982  011A  291E               	goto	i1l80
 12983                           
 12984                           ;interrupts.c: 82: preset_blink = 0;
 12985  011B  01DC               	clrf	_preset_blink^(0+128)
 12986  011C                     i1l3714:	
 12987                           
 12988                           ;interrupts.c: 83: LATBbits.LATB1 = 0;
 12989  011C  0022               	movlb	2	; select bank2
 12990  011D  108D               	bcf	13,1	;volatile
 12991  011E                     i1l80:	
 12992  011E  0878               	movf	??_isr+4,w
 12993  011F  0020               	movlb	0	; select bank0
 12994  0120  00FF               	movwf	127
 12995  0121  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 12996  0122  0009               	retfie
 12997  0123                     __end_of_isr:	
 12998                           
 12999                           	psect	text46
 13000  1402                     __ptext46:	
 13001 ;; *************** function i1_set_leds_top *****************
 13002 ;; Defined at:
 13003 ;;		line 16 in file "LEDs.c"
 13004 ;; Parameters:    Size  Location     Type
 13005 ;;  x               2    0[COMMON] int 
 13006 ;;  ledState        2    2[COMMON] int 
 13007 ;; Auto vars:     Size  Location     Type
 13008 ;;		None
 13009 ;; Return value:  Size  Location     Type
 13010 ;;                  1    wreg      void 
 13011 ;; Registers used:
 13012 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13013 ;; Tracked objects:
 13014 ;;		On entry : 0/0
 13015 ;;		On exit  : 0/0
 13016 ;;		Unchanged: 0/0
 13017 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13019 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13020 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13021 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13022 ;;Total ram usage:        4 bytes
 13023 ;; Hardware stack levels used:    1
 13024 ;; This function calls:
 13025 ;;		Nothing
 13026 ;; This function is called by:
 13027 ;;		_isr
 13028 ;; This function uses a non-reentrant model
 13029 ;;
 13030                           
 13031                           
 13032                           ;psect for function i1_set_leds_top
 13033  1402                     i1_set_leds_top:	
 13034                           
 13035                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13036                           
 13037                           ;incstack = 0
 13038                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13039  1402  0027               	movlb	7	; select bank7
 13040  1403  100C               	bcf	12,0	;volatile
 13041                           
 13042                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13043  1404  108C               	bcf	12,1	;volatile
 13044                           
 13045                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13046  1405  110C               	bcf	12,2	;volatile
 13047                           
 13048                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13049  1406  118C               	bcf	12,3	;volatile
 13050                           
 13051                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13052  1407  120C               	bcf	12,4	;volatile
 13053                           
 13054                           ;LEDs.c: 22: switch (x) {
 13055  1408  2C2D               	goto	i1l3664
 13056  1409                     i1l3652:	
 13057                           ;LEDs.c: 23: case 1:
 13058                           
 13059                           
 13060                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13061  1409  0C72               	rrf	i1set_leds_top@ledState,w
 13062  140A  1C03               	skipc
 13063  140B  100C               	bcf	12,0	;volatile
 13064  140C  1803               	skipnc
 13065  140D  140C               	bsf	12,0	;volatile
 13066                           
 13067                           ;LEDs.c: 25: break;
 13068  140E  0008               	return
 13069  140F                     i1l3654:	
 13070                           ;LEDs.c: 26: case 2:
 13071                           
 13072                           
 13073                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13074  140F  0C72               	rrf	i1set_leds_top@ledState,w
 13075  1410  1C03               	skipc
 13076  1411  108C               	bcf	12,1	;volatile
 13077  1412  1803               	skipnc
 13078  1413  148C               	bsf	12,1	;volatile
 13079                           
 13080                           ;LEDs.c: 28: break;
 13081  1414  0008               	return
 13082  1415                     i1l3656:	
 13083                           ;LEDs.c: 29: case 3:
 13084                           
 13085                           
 13086                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13087  1415  0C72               	rrf	i1set_leds_top@ledState,w
 13088  1416  1C03               	skipc
 13089  1417  110C               	bcf	12,2	;volatile
 13090  1418  1803               	skipnc
 13091  1419  150C               	bsf	12,2	;volatile
 13092                           
 13093                           ;LEDs.c: 31: break;
 13094  141A  0008               	return
 13095  141B                     i1l3658:	
 13096                           ;LEDs.c: 32: case 4:
 13097                           
 13098                           
 13099                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13100  141B  0C72               	rrf	i1set_leds_top@ledState,w
 13101  141C  1C03               	skipc
 13102  141D  118C               	bcf	12,3	;volatile
 13103  141E  1803               	skipnc
 13104  141F  158C               	bsf	12,3	;volatile
 13105                           
 13106                           ;LEDs.c: 34: break;
 13107  1420  0008               	return
 13108  1421                     i1l3660:	
 13109                           ;LEDs.c: 35: case 5:
 13110                           
 13111                           
 13112                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13113  1421  0C72               	rrf	i1set_leds_top@ledState,w
 13114  1422  1C03               	skipc
 13115  1423  120C               	bcf	12,4	;volatile
 13116  1424  1803               	skipnc
 13117  1425  160C               	bsf	12,4	;volatile
 13118                           
 13119                           ;LEDs.c: 39: break;
 13120                           
 13121                           ;LEDs.c: 38: case 6:
 13122                           
 13123                           ;LEDs.c: 37: break;
 13124  1426  0008               	return
 13125  1427                     i1l612:	
 13126                           ;LEDs.c: 40: case 100:
 13127                           
 13128                           
 13129                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13130  1427  140C               	bsf	12,0	;volatile
 13131                           
 13132                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13133  1428  148C               	bsf	12,1	;volatile
 13134                           
 13135                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13136  1429  150C               	bsf	12,2	;volatile
 13137                           
 13138                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13139  142A  158C               	bsf	12,3	;volatile
 13140                           
 13141                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13142  142B  160C               	bsf	12,4	;volatile
 13143                           
 13144                           ;LEDs.c: 47: }
 13145                           
 13146                           ;LEDs.c: 46: break;
 13147  142C  0008               	return
 13148  142D                     i1l3664:	
 13149                           
 13150                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13151                           ; Switch size 1, requested type "space"
 13152                           ; Number of cases is 1, Range of values is 0 to 0
 13153                           ; switch strategies available:
 13154                           ; Name         Instructions Cycles
 13155                           ; simple_byte            4     3 (average)
 13156                           ; direct_byte            8     6 (fixed)
 13157                           ; jumptable            260     6 (fixed)
 13158                           ;	Chosen strategy is simple_byte
 13159  142D  0871               	movf	i1set_leds_top@x+1,w
 13160  142E  3A00               	xorlw	0	; case 0
 13161  142F  1903               	skipnz
 13162  1430  2C32               	goto	i1l4224
 13163  1431  2C49               	goto	i1l613
 13164  1432                     i1l4224:	
 13165                           
 13166                           ; Switch size 1, requested type "space"
 13167                           ; Number of cases is 7, Range of values is 1 to 100
 13168                           ; switch strategies available:
 13169                           ; Name         Instructions Cycles
 13170                           ; simple_byte           22    12 (average)
 13171                           ; direct_byte          209     9 (fixed)
 13172                           ; jumptable            263     9 (fixed)
 13173                           ;	Chosen strategy is simple_byte
 13174  1432  0870               	movf	i1set_leds_top@x,w
 13175  1433  3A01               	xorlw	1	; case 1
 13176  1434  1903               	skipnz
 13177  1435  2C09               	goto	i1l3652
 13178  1436  3A03               	xorlw	3	; case 2
 13179  1437  1903               	skipnz
 13180  1438  2C0F               	goto	i1l3654
 13181  1439  3A01               	xorlw	1	; case 3
 13182  143A  1903               	skipnz
 13183  143B  2C15               	goto	i1l3656
 13184  143C  3A07               	xorlw	7	; case 4
 13185  143D  1903               	skipnz
 13186  143E  2C1B               	goto	i1l3658
 13187  143F  3A01               	xorlw	1	; case 5
 13188  1440  1903               	skipnz
 13189  1441  2C21               	goto	i1l3660
 13190  1442  3A03               	xorlw	3	; case 6
 13191  1443  1903               	skipnz
 13192  1444  2C49               	goto	i1l613
 13193  1445  3A62               	xorlw	98	; case 100
 13194  1446  1903               	skipnz
 13195  1447  2C27               	goto	i1l612
 13196  1448  2C49               	goto	i1l613
 13197  1449                     i1l613:	
 13198  1449  0008               	return
 13199  144A                     __end_ofi1_set_leds_top:	
 13200  007E                     btemp	set	126	;btemp
 13201  007E                     int$flags	set	126
 13202  007E                     wtemp	set	126
 13203  007E                     wtemp0	set	126
 13204  0080                     wtemp1	set	128
 13205  0082                     wtemp2	set	130
 13206  0084                     wtemp3	set	132
 13207  0086                     wtemp4	set	134
 13208  0088                     wtemp5	set	136
 13209  007F                     wtemp6	set	127
 13210  007E                     ttemp	set	126
 13211  007E                     ttemp0	set	126
 13212  0081                     ttemp1	set	129
 13213  0084                     ttemp2	set	132
 13214  0087                     ttemp3	set	135
 13215  007F                     ttemp4	set	127
 13216  007E                     ltemp	set	126
 13217  007E                     ltemp0	set	126
 13218  0082                     ltemp1	set	130
 13219  0086                     ltemp2	set	134
 13220  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        1063
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     79      80
    BANK1            80     35      80
    BANK2            80      0      77
    BANK3            80      0      44
    BANK4            80      0      64
    BANK5            80      0      58
    BANK6            80      0      58
    BANK7            80      0      58
    BANK8            80      0      80
    BANK9            80      0      80
    BANK10           80      0      58
    BANK11            8      0       0
    BANK12            0      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> myBuf(BANK4[64]), 

    FLASH_WriteWord@ramBuf	PTR unsigned int  size(1) Largest target is 64
		 -> myBuf(BANK4[64]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->i1_set_leds_top

Critical Paths under _main in BANK0

    _main->___fttol
    _updateSwitchBypass->_setSwitchBypassState
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_FLASH_WriteWord
    _read_bottom_tactile->_FLASH_WriteWord
    _FLASH_WriteWord->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _modulation->___aldiv
    ___aldiv->___wmul
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    ___altoft->___ftpack
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_set_subdivision
    _set_subdivision->___fttol

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0   49458
                                             10 BANK1     25    25      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                            ___aldiv
                           ___altoft
                            ___awdiv
                           ___awtoft
                            ___ftdiv
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                         _modulation
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                 _updateSwitchBypass
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   1     1      0    1760
                                             18 BANK0      1     1      0
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     0     0      0    6335
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    3246
                                             14 BANK0      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3089
                                             14 BANK0      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                      4     0      4    7414
                                              6 BANK1      4     0      4
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4    1020
                                             71 BANK0      8     4      4
                                              0 BANK1      6     6      0
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    2904
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     3     3      0    4079
                                             23 BANK0      3     3      0
                    _FLASH_WriteWord
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  3     3      0    3369
                                             23 BANK0      3     3      0
                    _FLASH_WriteWord
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _FLASH_WriteWord                                     10     5      5    1505
                                             13 BANK0     10     5      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3     572
                                              3 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_EraseBlock                                     3     1      2     131
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _modulation                                          12     8      4     971
                                             21 BANK0     12     8      4
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     556
                                              6 BANK0     15     7      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   11745
                                             53 BANK0     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     237
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3203
                                             21 BANK0     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    2645
                                             37 BANK0     16    10      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    3563
                                              8 BANK0     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    1783
                                             18 BANK0      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    1760
                                             14 BANK0      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              2     0      2    1394
                                             12 BANK0      2     0      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     220
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      64
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) ___altoft                                             8     4      4    2311
                                              8 BANK0      8     4      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2109
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    2     2      0    1909
                                              4 BANK0      2     2      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1180
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     470
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     259
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                  5     5      0     236
                                              4 COMMON     5     5      0
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___aldiv
     ___wmul (ARG)
   ___altoft
     ___ftpack
   ___awdiv
   ___awtoft
     ___ftpack
   ___ftdiv
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
   ___fttol
     ___altoft (ARG)
       ___ftpack
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _modulation
     ___aldiv
       ___wmul (ARG)
     ___wmul
   _read_bottom_tactile
     _FLASH_WriteWord
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _FLASH_WriteWord
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___altoft (ARG)
         ___ftpack
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _updateSwitchBypass
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _update_mode

 _isr (ROOT)
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     23      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2C      11       55.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      3A      15       72.5%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     2EF      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3A      18       72.5%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3A      20       72.5%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      50      22      100.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      50      24      100.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0      3A      26       72.5%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     2EF      28        0.0%
BANK11               8      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK12               0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sun Oct 16 22:40:26 2016

                     _update_mode 13BD                      ___altoft@exp 002E                       __CFG_CP$OFF 0000  
                   ___altoft@sign 002F                      ___awdiv@sign 0026               ___wmul@multiplicand 0022  
                    ___ftadd@exp1 0034                      ___ftadd@exp2 0033                      ___ftadd@sign 0032  
                             l260 0A19                               l244 097A                               l318 10CB  
                             l254 09E5                               l282 0DFD                               l266 0B07  
                             l620 11CF                               l612 07D1                               l621 11D2  
                             l613 07F5                               l533 1697                               l461 054E  
                             l622 11D5                               l624 11D8                               l625 11FC  
                             l617 11C9                               l473 0811                               l619 11CC  
            __size_of_adc_convert 0019                               l750 13FA                               l728 12AD  
                             l736 12ED                               l746 13E3                               l748 13E6  
                             l749 13EA                               _PR2 001B      solidring_tactiles@ring_delay 0030  
                             _map 081B                               _isr 0004                               _tap 01A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                ?_FLASH_WriteWord 002D                      __CFG_FOSC$HS 0000           __end_of_set_leds_bottom 11FD  
  FLASH_WriteBlock@flashWordArray 0025                      __CFG_LVP$OFF 0000                      ___ftdiv@cntr 004F  
                    ___ftdiv@sign 0054                              l1010 1F88                              _B25k 0420  
                            l1202 05EE                              l1065 178F                              l1171 1603  
                            l3100 1474                              l1262 0923                              l3112 1F82  
                            l1178 1616                              l3210 05BA                              l3034 13A7  
                            l1179 161E                              l3212 05C4                              l3204 05A7  
                            l3300 0672                              l3028 1389                              l3222 05E0  
                            l3214 05C9                              l3142 17B0                              l3134 17A0  
                            l3232 0612                              l3224 05EA                              l3216 05CD  
                            l3312 06AD                              l3160 17F7                              l3152 17DE  
                            l3144 17BE                              l3056 16D5                              l3242 062D  
                            l4220 07DE                              l3420 14B5                              l3228 0600  
                            l3252 0710                              l3324 06C9                              l3316 06B5  
                            l3156 17E9                              l3172 100C                              l4222 11E5  
                            l3182 0577                              l3600 1212                              l3192 058D  
                            l3280 0780                              l3272 0767                              l3328 06D1  
                            l3352 08C1                              l3602 1222                              l3186 057E  
                            l3258 0726                              l3370 08FA                              l4218 053A  
                            l3522 1725                              l3620 1594                              l3460 12C7  
                            l3380 0927                              l3372 090B                              l3540 1758  
                            l3630 159C                              l3614 1589                              l3294 065C  
                            l3446 128D                              l3534 174A                              l3526 1738  
                            l2904 11DF                              l3632 15A8                              l3384 0935  
                            l2850 07B1                              l3642 15C3                              l2834 1082  
                            l3378 0919                              l3546 1771                              l3538 1754  
                            l3482 13EE                              l2852 07B9                              l2860 07D8  
                            l2932 165A                              l3580 0508                              l3572 0457  
                            l3484 13FE                              l3812 0B7C                              l3740 0981  
                            l3724 0954                              l2854 07C1                              l3646 15CB  
                            l3638 15BA                              l2838 108C                              l3574 0484  
                            l3902 0EF2                              l3830 0CA3                              l3822 0C46  
                            ?_map 0055                              l2856 07C9                              l2848 07A9  
                            l2944 1682                              l3576 04B0                              l3584 0534  
                            l3904 0F07                              l3760 09E9                              l2970 15EA  
                            l3578 04DC                              l3922 0FC2                              l3850 0DB8  
                            l3842 0D38                              l3834 0CDB                              l3818 0C0E  
                            l3762 09F7                              l3738 097E                              l2980 1610  
                            l2972 15EF                              l2964 15D9                              l3924 0F6D  
                            l3908 0F43                              l3748 09A7                              l3926 0FC8  
                            l3854 0DF8                              l3846 0D70                              l3782 0A59  
                            l3774 0A4D                              l3766 0A11                              l3758 09C2  
                            l2968 15E0                              l3872 0E56                              l3864 0E3F  
                            l3784 0AA7                              l2978 1608                              l3890 0ECE  
                            l3882 0EB7                              l3874 0E97                              l3868 0E48  
                            l3788 0AC5                              l3796 0B0B                              l3886 0EC2  
                            l3878 0EAC                              l3798 0B0E                              l3896 0EEC  
                            l3898 0EEF                              ?_isr 0070                              u3005 068E  
                            u2215 108D                              u2225 1094                              u3025 06B6  
                            u2315 15E5                              u3035 06BC                              u3115 08C9  
                            u3205 102F                              u3230 14B3                              u3215 1035  
                            u2335 15FE                              u2255 1646                              u3065 06D2  
                            u3145 08FB                              u4025 0E51                              u2355 160B  
                            u3075 06D8                              u2605 17BF                              u2525 1F89  
                            u3325 13D0                              u4053 0FB3                              u4045 0F9B  
                            u2615 17D3                              u2535 1F8E                              u3175 091A  
                            u3415 1764                              u3505 159F                              u2625 17DF  
                            u2465 16E2                              u2490 1472                              u2395 1625  
                            u3525 15A9                              u2485 1455                              u3365 171E  
                            u3455 1217                              u3535 15B3                              u2815 05CE  
                            u3375 1731                              u3545 15BB                              u2585 17B3  
                            u2755 05A8                              u2915 0738                              u2845 05E1  
                            u2925 0748                              u3805 0A28                              u3725 0997  
                            u2935 0768                              u3815 0A37                              u2785 05BB  
                            u2945 0777                              u3905 0C28                              u3825 0A66  
                            u3745 09D1                              u2955 0781                              u3915 0C44  
                            u3835 0A7B                              u3755 09CB                              u3925 0CBD  
                            u3845 0A8F                              u3935 0CD9                              u3855 0A60  
                            u3695 0970                              i1l80 011E                              u3945 0D52  
                            u3865 0AAB                              u3785 0A01                              i1l67 006E  
                            u2995 067E                              u3955 0D6E                              u3965 0DD6  
                            u3885 0B61                              u3983 0E25                              u3975 0DF6  
                            u3895 0B7A                     _star_tactiles 16A0                      __CFG_WRT$OFF 0000  
                   __CFG_FCMEN$ON 0000                              _iCnt 00D9                              _mod1 0520  
                            _mod2 02A0                              _mod3 0320                              _mod4 03A0  
                            _mod5 2378                              _main 0945                      ___ftpack@arg 0020  
                    ___ftpack@exp 0023                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 0055                              btemp 007E  
               ?_FLASH_WriteBlock 0023                     __CFG_BOREN$ON 0000                              ltemp 007E  
                            start 0123                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 1EF2                ??_FLASH_WriteBlock 0026      __end_of_setSwitchBypassState 1493  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 0043  
                    ___ftmul@sign 0044                   __end_of_InitApp 1079                 ??_restoreLEDState 0020  
                    ___fttol@exp1 00A5                             ??_map 0064                      ___fttol@lval 00A1  
                           ??_isr 0074                   _switchBypass_up 0168         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 1800                             ?_main 0070                   __end_of___awdiv 15D0  
                 __end_of___ftadd 0645                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 07A2  
                 __end_of___ftneg 1F0B                   __end_of___ftmul 06F9                   ___awdiv@divisor 0020  
                 __end_of___fttol 0945                             i1l612 1427                             i1l613 1449  
                 ___awdiv@counter 0025                             _iB25k 04A0               _ConfigureOscillator 1EEA  
               main@tapCntDivisor 00BB                      ?_init_timer0 0070                      ?_init_timer2 0070  
             ___lmul@multiplicand 0024                   _switchTap_state 00EF                     ___awtoft@sign 002D  
                           _delay 23F2                             _myBuf 0220                     ___ftpack@sign 0024  
                           _timer 00C7                    ?_star_tactiles 0070                             main@i 00B9  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 10DA                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 12B7  
                           wtemp0 007E                             wtemp1 0080                             wtemp2 0082  
                           wtemp3 0084                             wtemp4 0086                             wtemp5 0088  
                           wtemp6 007F              ?_ConfigureOscillator 0070                _getCurrentLEDState 1F32  
              _updateSwitchBypass 170F                   __initialization 0125           _updateSwitchBypassState 0801  
                    _switchTap_up 016A                      __end_of_main 1000           __size_of_InitializeTaps 0026  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 0456                            ??_main 00AA                     ___fttol@sign1 00A0  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 1337                  ?_set_leds_bottom 0020  
       FLASH_WriteBlock@writeAddr 0023                  __end_of___altoft 123A                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022               _baseline_delay_time 00DE  
            ??_getCurrentLEDState 0020                  __end_of___awtoft 1023                  __end_of___ftpack 1635  
            ??_updateSwitchBypass 0032                            i1l4224 1432                            i1l3710 0117  
                          i1l3714 011C                            i1l3660 1421                            i1l3652 1409  
                          i1l3654 140F                            i1l3656 1415                            i1l3664 142D  
                          i1l3680 008E                            i1l3658 141B                            i1l3690 00C5  
                          i1l3682 009D                            i1l3692 00CE                            i1l3684 009F  
                          i1l3694 00DD                            i1l3698 00ED                            u360_23 00B2  
                          _PMADRH 0192                            _PMADRL 0191                            _PMDATH 0194  
                          _PMDATL 0193                            _PMCON2 0196                            u365_25 00FE  
                          u358_23 0081         __size_of_FLASH_EraseBlock 0020                            u366_25 0112  
                  _debounce_count 0148                    _debounce_mode1 014A                    _debounce_mode2 014C  
                       ??_InitApp 0020             ??_ConfigureOscillator 0020          __end_of_read_top_tactile 12F7  
                  __CFG_PWRTE$OFF 0000                            ___lmul 1079                         ??___aldiv 002E  
                _switchTap_toggle 0158                            ___wmul 1F7F     FLASH_WriteWord@blockStartAddr 0034  
                       ??___awdiv 0024                         ??___ftadd 002E                    __CFG_STVREN$ON 0000  
                       ??___ftdiv 004B                         ??___ftneg 0023                         ??___ftmul 003B  
                       ??___fttol 006B               FLASH_WriteWord@word 0030                  __end_of_init_adc 0800  
                __end_of_init_pwm 1378         __size_of_showBootSequence 0025                  ___awdiv@quotient 0027  
                    __pdataBANK10 0520             ___ftmul@f3_as_product 0040                      __pdataBIGRAM 2378  
         FLASH_ReadWord@flashAddr 0020                      __pdataCOMMON 007D              _getSwitchBypassState 1EEE  
                       ??_wait_ms 002E              _setSwitchBypassState 144A                   ??_star_tactiles 002E  
         __end_of__initialization 01DA                        ___altoft@c 0028                        ___ftadd@f1 0028  
                      ___ftadd@f2 002B                        ___ftdiv@f1 0048                        ___ftdiv@f2 0045  
                      ___ftdiv@f3 0050                    _top_push_state 007D         ??_updateSwitchBypassState 0022  
                      ___ftneg@f1 0020               _switchBypass_toggle 0156                        ___awtoft@c 0028  
         __end_of_set_subdivision 054F                        ___ftmul@f1 0035                        ___ftmul@f2 0038  
                      ___fttol@f1 0067                      ?_update_mode 0070                    __pcstackCOMMON 0070  
                    __pidataBANK0 0002                      __pidataBANK1 1F44                      __pidataBANK2 1F56  
                    __pidataBANK5 1188                      __pidataBANK6 114E                      __pidataBANK7 1114  
                    __pidataBANK8 152E                      __pidataBANK9 14DE                  FLASH_WriteWord@i 0036  
                _initSwitchBypass 1F23                    _OPTION_REGbits 0095             ?_getSwitchBypassState 0020  
           ?_setSwitchBypassState 002E       FLASH_WriteBlock@GIEBitValue 002B              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                        __pbssBANK1 00C3                        __pbssBANK2 0120  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                  ??i1_set_leds_top 0074  
                 _restoreLEDState 1F69                   __CFG_VCAPEN$OFF 0000                        _delay_time 00E2  
                      _delayfound 0150                        __pmaintext 0945                    _InitializeTaps 1023  
                         ?___lmul 0020                           ?___wmul 0020                        __pintentry 0004  
                      _blink_rate 006F                     ??_adc_convert 0022                         ?___altoft 0028  
                  ___lmul@product 0028                         ?___awtoft 0028                         ?___ftpack 0020  
       __size_of_FLASH_WriteBlock 006B                    _FLASH_ReadWord 1F9B   __end_of_updateSwitchBypassState 0802  
                     modulation@x 0035                       modulation@y 0037                   _debounce_bypass 0146  
                   _suspend_blink 00ED                  _FLASH_EraseBlock 1FBB          __size_of_FLASH_WriteWord 0045  
                       ?_init_adc 0070                         ?_init_pwm 0070                           _InitApp 1049  
          __end_of_InitializeTaps 1049                     ?_set_leds_top 0020                        _knob1_prev 00E6  
                      _knob2_prev 015E                        _knob3_prev 0160                        _knob4_prev 0162  
                      _knob5_prev 0164                  ?_set_subdivision 00A6                           ___aldiv 177E  
                         ___awdiv 157E                   __size_of___lmul 0030                           ___ftadd 054F  
                         ___ftdiv 06F9                           ___ftneg 1F02                        _knob_1_pos 00CB  
                      _knob_2_pos 00CD                   __size_of___wmul 001C                           ___ftmul 0645  
                      _knob_3_pos 00CF                           ___fttol 08A6                        _knob_4_pos 00D1  
                      _knob_5_pos 0152                 _switchTap_pressed 00D7                        ??___altoft 002C  
                _showBootSequence 1FDB            __end_of_FLASH_ReadWord 1FBB                        ??___awtoft 002B  
                      ??___ftpack 0025                InitializeTaps@itap 0021                           __ptext1 13BD  
                         __ptext2 170F                           __ptext3 1FDB                           __ptext4 16A0  
                         __ptext5 12F7                           __ptext6 1F69                           __ptext7 1F32  
                         __ptext8 0456                           __ptext9 08A6            ??_getSwitchBypassState 0022  
                       _T2CONbits 001C                      __size_of_map 008B                      __size_of_isr 011F  
          ??_setSwitchBypassState 0030               __end_of_adc_convert 081B                  ___aldiv@dividend 002A  
                         _wait_ms 10A9           __end_of_restoreLEDState 1F7F                           clrloop0 1F18  
            end_of_initialization 01DA                        _modulation 123A                           init_ram 1F0B  
                      ??_init_adc 0020                           initloop 1F0C                        ??_init_pwm 0020  
    updateSwitchBypassState@state 0020                _solidring_tactiles 12F7                    ??_set_leds_top 0024  
               ?_read_top_tactile 0070                   ?_InitializeTaps 0070            i1set_leds_top@ledState 0072  
              ??_read_top_tactile 0037                  ___aldiv@quotient 0031      __size_of_read_bottom_tactile 003F  
             ?_solidring_tactiles 0070                       wait_ms@time 002C         FLASH_ReadWord@GIEBitValue 0022  
            __size_of_update_mode 0045                   ?_FLASH_ReadWord 0020                         _PORTCbits 000E  
                       _PORTDbits 000F                         _PORTEbits 0010              star_tactiles@reverse 0030  
                       _TRISBbits 008D                         _TRISCbits 008E                         _TRISDbits 008F  
                       _TRISEbits 0090                         _TRISFbits 030C                         _TRISGbits 030D  
                       _SPI_Value 0144              ??_solidring_tactiles 002E       __end_of_ConfigureOscillator 1EEE  
     __size_of_getCurrentLEDState 0012                        map@out_max 0061                        map@out_min 005E  
     __size_of_updateSwitchBypass 006F          __end_of_initSwitchBypass 1F32                       _CCP1CONbits 0293  
                     ___ftdiv@exp 0053          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 00D5                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                 FLASH_WriteBlock@i 002C                       _CCP6CONbits 0613  
                     _CCP7CONbits 0616                       ___ftmul@exp 003F                adc_convert@channel 0023  
                     _CCP8CONbits 0619                 ??_FLASH_WriteWord 0032                       _CCP9CONbits 061C  
            set_leds_top@ledState 0022                     __pidataBANK10 10DA                    __end_of___lmul 10A9  
                   __pidataBIGRAM 01DE                    __end_of___wmul 1F9B                       _adc_convert 0802  
                   __pidataCOMMON 0003                  _FLASH_WriteBlock 1635               start_initialization 0125  
                     __end_of_map 08A6                       __end_of_isr 0123                  ?_restoreLEDState 0070  
           __end_of_star_tactiles 170F                       ?_modulation 0035                          ??___lmul 0028  
                        ??___wmul 0024                       __pdataBANK0 006F                       __pdataBANK1 00DE  
                     __pdataBANK2 015A                       __pdataBANK5 02A0                       __pdataBANK6 0320  
                     __pdataBANK7 03A0                       __pdataBANK8 0420                       __pdataBANK9 04A0  
     FLASH_EraseBlock@GIEBitValue 0022                     _tap_iteration 00EA          __end_of_FLASH_EraseBlock 1FDB  
               __size_of___altoft 003D                 __size_of___awtoft 0022                 __size_of___ftpack 0065  
                   ??_init_timer0 0020                     ??_init_timer2 0020                       __pbssCOMMON 0079  
            __end_of_set_leds_top 07F6                         ___latbits 0003                _switchBypass_state 00EE  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     _delay_counter 014E  
        __end_of_showBootSequence 2000          ?_updateSwitchBypassState 0020                          ?_InitApp 0070  
               __size_of_init_adc 000A                 __size_of_init_pwm 0041                          ?___aldiv 0026  
               ??_set_leds_bottom 0022                          ?___awdiv 0020                          ?___ftadd 0028  
                        ?___ftdiv 0045                          ?___ftneg 0020                          ?___ftmul 0035  
                        ?___fttol 0067                       _blink_delay 015A               __size_of_modulation 003E  
                     _blink_state 016C                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                          ?_wait_ms 002C               _read_bottom_tactile 1278  
        FLASH_WriteWord@flashAddr 002D    FLASH_WriteBlock@blockStartAddr 0029               __end_of_init_timer0 1EF9  
             __end_of_init_timer2 1F02                         _mod_value 0154                         _mod_timer 0138  
                ??_InitializeTaps 0020                   ___aldiv@divisor 0026                   ___aldiv@counter 002F  
                  ___wmul@product 0024                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 0166  
                       clear_ram0 1F17                         _tap_timer 0079                         _tap_total 013C  
                   set_leds_top@x 0020         FLASH_EraseBlock@startAddr 0020                  ??_FLASH_ReadWord 0022  
            ?_read_bottom_tactile 0070           __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 0032  
                       map@in_max 005B                         map@in_min 0058                         _sub_timer 00C3  
                      _ADCON0bits 009D                        _ADCON1bits 009E                         main@i_335 00BF  
                       main@i_336 00C1          __size_of_set_subdivision 00F9                 ___wmul@multiplier 0020  
                set_subdivision@x 00A6                  set_subdivision@y 00A8         __size_of_read_top_tactile 0040  
   __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 0049                 ___lmul@multiplier 0020  
                 _FLASH_WriteWord 1378                 _ReadSavedSettings 1493                 ?_initSwitchBypass 0070  
        __end_of_FLASH_WriteBlock 16A0                ?_ReadSavedSettings 0070       setSwitchBypassState@f_state 002E  
              ??_initSwitchBypass 0032                  __size_of_InitApp 0030                       _mode1_state 00DA  
                   ??_update_mode 0020                       _mode2_state 00DB             ??_read_bottom_tactile 0037  
             ??_ReadSavedSettings 0024                        _APFCONbits 011D                 star_tactiles@iLed 0031  
                __size_of___aldiv 0082                  __size_of___awdiv 0052                  __size_of___ftadd 00F6  
                __size_of___ftdiv 00A9                      ?_adc_convert 0020                  __size_of___ftneg 0009  
                        ___altoft 11FD                  __size_of___ftmul 00B4                  __size_of___fttol 009F  
                        ___awtoft 1001             __size_of_set_leds_top 0054                          ___ftpack 15D0  
                        _map$1955 0064            _preset_programmning_on 00DD            star_tactiles@iLed_1375 0033  
                      _ANSELEbits 0190                        _ANSELFbits 040C                  set_leds_bottom@x 0020  
                     _init_timer0 1EF2                       _init_timer2 1EF9                _delay_time_changed 015C  
      __end_of_getCurrentLEDState 1F44        __end_of_updateSwitchBypass 177E                          __ptext10 1001  
                        __ptext11 12B7                          __ptext20 1F02                          __ptext12 1278  
                        __ptext21 0645                          __ptext13 1378                          __ptext30 0802  
                        __ptext22 06F9                          __ptext14 1635                          __ptext31 157E  
                        __ptext23 054F                          __ptext15 1FBB                          __ptext40 1337  
                        __ptext32 11FD                          __ptext24 1F23                          __ptext16 123A  
                        __ptext41 1EF9                          __ptext33 15D0                          __ptext25 144A  
                        __ptext17 1F7F                          __ptext42 1EF2                          __ptext34 1493  
                        __ptext26 10A9                          __ptext18 177E                          __ptext43 07F6  
                        __ptext35 07A2                          __ptext27 1079                          __ptext19 081B  
                        __ptext44 1EEA                          __ptext36 11C2                          __ptext28 0801  
                        __ptext37 1F9B                          __ptext29 1EEE                          __ptext46 1402  
                        __ptext38 1023                          __ptext39 1049         __end_of_ReadSavedSettings 14DE  
                __size_of_wait_ms 0031       __size_of_solidring_tactiles 0040                          _ledState 0134  
           FLASH_WriteWord@ramBuf 002F             FLASH_WriteWord@offset 0033                      ??_modulation 0039  
                     _mod_counter 00D3                          _init_adc 07F6                     __size_of_main 06BB  
                        _init_pwm 1337      __size_of_ConfigureOscillator 0004                      _set_leds_top 07A2  
                        _num_taps 00E8                          int$flags 007E                   i1set_leds_top@x 0070  
             __end_of_update_mode 1402                 ?_FLASH_EraseBlock 0020                __end_of_modulation 1278  
              ??_FLASH_EraseBlock 0022                        _INTCONbits 000B           __end_of_FLASH_WriteWord 13BD  
                     _tap_history 0120                 ??_set_subdivision 006F                          intlevel1 0000  
                 _set_leds_bottom 11C2                        _PMCON1bits 0195                 ?_showBootSequence 0070  
               __CFG_CLKOUTEN$OFF 0000          __size_of_restoreLEDState 0016                ??_showBootSequence 0035  
                      _OSCCONbits 0099                      _preset_blink 00DC                    i1_set_leds_top 1402  
__size_of_updateSwitchBypassState 0001                      wait_ms@timel 0140            __size_of_star_tactiles 006F  
                _read_top_tactile 12B7                      ___aldiv@sign 0030        __size_of_ReadSavedSettings 004B  
          main@adjusted_pot_value 00BD                      _CCP10CONbits 061F                 _bottom_push_state 00EC  
          __end_ofi1_set_leds_top 144A  
