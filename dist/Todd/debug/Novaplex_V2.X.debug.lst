

Microchip Technology PIC LITE Macro Assembler V1.37 build -260352376 
                                                                                               Sat Dec 31 14:45:12 2016

Microchip Technology Omniscient Code Generator v1.37 (Free mode) build 201603110536
     1                           	processor	16F1527
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	idataBANK2,global,class=CODE,delta=2
     7                           	psect	idataBANK3,global,class=CODE,delta=2
     8                           	psect	idataBANK4,global,class=CODE,delta=2
     9                           	psect	idataBANK6,global,class=CODE,delta=2
    10                           	psect	idataBANK7,global,class=CODE,delta=2
    11                           	psect	idataBANK8,global,class=CODE,delta=2
    12                           	psect	idataBIGRAM,global,class=CODE,delta=2
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	cinit,global,class=CODE,merge=1,delta=2
    15                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    19                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    20                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    21                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    22                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    23                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    24                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    25                           	psect	dataBANK7,global,class=BANK7,space=1,delta=1
    26                           	psect	dataBANK8,global,class=BANK8,space=1,delta=1
    27                           	psect	bssBANK9,global,class=BANK9,space=1,delta=1
    28                           	psect	clrtext,global,class=CODE,delta=2
    29                           	psect	inittext,global,class=CODE,delta=2
    30                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    31                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    32                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    33                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    34                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    35                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    36                           	psect	text1,local,class=CODE,merge=1,delta=2
    37                           	psect	text2,local,class=CODE,merge=1,delta=2
    38                           	psect	text3,local,class=CODE,merge=1,delta=2
    39                           	psect	text4,local,class=CODE,merge=1,delta=2
    40                           	psect	text5,local,class=CODE,merge=1,delta=2
    41                           	psect	text6,local,class=CODE,merge=1,delta=2
    42                           	psect	text7,local,class=CODE,merge=1,delta=2
    43                           	psect	text8,local,class=CODE,merge=1,delta=2
    44                           	psect	text9,local,class=CODE,merge=1,delta=2
    45                           	psect	text10,local,class=CODE,merge=1,delta=2
    46                           	psect	text11,local,class=CODE,merge=1,delta=2
    47                           	psect	text12,local,class=CODE,merge=1,delta=2
    48                           	psect	text13,local,class=CODE,merge=1,delta=2
    49                           	psect	text14,local,class=CODE,merge=1,delta=2
    50                           	psect	text15,local,class=CODE,merge=1,delta=2
    51                           	psect	text16,local,class=CODE,merge=1,delta=2
    52                           	psect	text17,local,class=CODE,merge=1,delta=2
    53                           	psect	text18,local,class=CODE,merge=1,delta=2
    54                           	psect	text19,local,class=CODE,merge=1,delta=2
    55                           	psect	text20,local,class=CODE,merge=1,delta=2
    56                           	psect	text21,local,class=CODE,merge=1,delta=2
    57                           	psect	text22,local,class=CODE,merge=1,delta=2
    58                           	psect	text23,local,class=CODE,merge=1,delta=2
    59                           	psect	text24,local,class=CODE,merge=1,delta=2
    60                           	psect	text25,local,class=CODE,merge=1,delta=2
    61                           	psect	text26,local,class=CODE,merge=1,delta=2
    62                           	psect	text27,local,class=CODE,merge=1,delta=2
    63                           	psect	text28,local,class=CODE,merge=1,delta=2
    64                           	psect	text29,local,class=CODE,merge=1,delta=2
    65                           	psect	text30,local,class=CODE,merge=1,delta=2
    66                           	psect	text31,local,class=CODE,merge=1,delta=2
    67                           	psect	text32,local,class=CODE,merge=1,delta=2
    68                           	psect	text33,local,class=CODE,merge=1,delta=2
    69                           	psect	text34,local,class=CODE,merge=1,delta=2
    70                           	psect	text35,local,class=CODE,merge=1,delta=2
    71                           	psect	text36,local,class=CODE,merge=1,delta=2
    72                           	psect	text37,local,class=CODE,merge=1,delta=2
    73                           	psect	text38,local,class=CODE,merge=1,delta=2
    74                           	psect	text39,local,class=CODE,merge=1,delta=2
    75                           	psect	text40,local,class=CODE,merge=1,delta=2
    76                           	psect	text41,local,class=CODE,merge=1,delta=2
    77                           	psect	text42,local,class=CODE,merge=1,delta=2
    78                           	psect	text43,local,class=CODE,merge=1,delta=2
    79                           	psect	text44,local,class=CODE,merge=1,delta=2
    80                           	psect	intentry,global,class=CODE,delta=2
    81                           	psect	text46,local,class=CODE,merge=1,delta=2
    82                           	psect	text47,local,class=CODE,merge=1,delta=2
    83                           	psect	text48,local,class=CODE,merge=1,delta=2
    84                           	psect	text49,local,class=CODE,merge=1,delta=2
    85                           	psect	text50,local,class=CODE,merge=1,delta=2
    86                           	dabs	1,0x920,80
    87                           	dabs	1,0x8A0,80
    88                           	dabs	1,0x820,80
    89                           	dabs	1,0x7A0,80
    90                           	dabs	1,0x720,80
    91                           	dabs	1,0x6A0,80
    92                           	dabs	1,0x648,40
    93                           	dabs	1,0x23E8,0,_delayArray
    94                           	dabs	1,0x7E,2
    95  0000                     	;# 
    96  0001                     	;# 
    97  0002                     	;# 
    98  0003                     	;# 
    99  0004                     	;# 
   100  0005                     	;# 
   101  0006                     	;# 
   102  0007                     	;# 
   103  0008                     	;# 
   104  0009                     	;# 
   105  000A                     	;# 
   106  000B                     	;# 
   107  000C                     	;# 
   108  000D                     	;# 
   109  000E                     	;# 
   110  000F                     	;# 
   111  0010                     	;# 
   112  0011                     	;# 
   113  0012                     	;# 
   114  0013                     	;# 
   115  0014                     	;# 
   116  0015                     	;# 
   117  0016                     	;# 
   118  0016                     	;# 
   119  0017                     	;# 
   120  0018                     	;# 
   121  0019                     	;# 
   122  001A                     	;# 
   123  001B                     	;# 
   124  001C                     	;# 
   125  008C                     	;# 
   126  008D                     	;# 
   127  008E                     	;# 
   128  008F                     	;# 
   129  0090                     	;# 
   130  0091                     	;# 
   131  0092                     	;# 
   132  0093                     	;# 
   133  0094                     	;# 
   134  0095                     	;# 
   135  0096                     	;# 
   136  0097                     	;# 
   137  0099                     	;# 
   138  009A                     	;# 
   139  009B                     	;# 
   140  009B                     	;# 
   141  009C                     	;# 
   142  009D                     	;# 
   143  009E                     	;# 
   144  010C                     	;# 
   145  010D                     	;# 
   146  010E                     	;# 
   147  010F                     	;# 
   148  0110                     	;# 
   149  0116                     	;# 
   150  0117                     	;# 
   151  011D                     	;# 
   152  018C                     	;# 
   153  018D                     	;# 
   154  018F                     	;# 
   155  0190                     	;# 
   156  0191                     	;# 
   157  0191                     	;# 
   158  0192                     	;# 
   159  0193                     	;# 
   160  0193                     	;# 
   161  0194                     	;# 
   162  0195                     	;# 
   163  0196                     	;# 
   164  0197                     	;# 
   165  0199                     	;# 
   166  0199                     	;# 
   167  0199                     	;# 
   168  019A                     	;# 
   169  019A                     	;# 
   170  019A                     	;# 
   171  019B                     	;# 
   172  019B                     	;# 
   173  019B                     	;# 
   174  019B                     	;# 
   175  019B                     	;# 
   176  019C                     	;# 
   177  019C                     	;# 
   178  019C                     	;# 
   179  019D                     	;# 
   180  019D                     	;# 
   181  019D                     	;# 
   182  019E                     	;# 
   183  019E                     	;# 
   184  019E                     	;# 
   185  019F                     	;# 
   186  019F                     	;# 
   187  019F                     	;# 
   188  020D                     	;# 
   189  020F                     	;# 
   190  0210                     	;# 
   191  0211                     	;# 
   192  0211                     	;# 
   193  0212                     	;# 
   194  0212                     	;# 
   195  0213                     	;# 
   196  0213                     	;# 
   197  0214                     	;# 
   198  0214                     	;# 
   199  0215                     	;# 
   200  0215                     	;# 
   201  0215                     	;# 
   202  0216                     	;# 
   203  0216                     	;# 
   204  0217                     	;# 
   205  0217                     	;# 
   206  0219                     	;# 
   207  021A                     	;# 
   208  021B                     	;# 
   209  021C                     	;# 
   210  021D                     	;# 
   211  021E                     	;# 
   212  021F                     	;# 
   213  028C                     	;# 
   214  028D                     	;# 
   215  0291                     	;# 
   216  0291                     	;# 
   217  0292                     	;# 
   218  0293                     	;# 
   219  0298                     	;# 
   220  0298                     	;# 
   221  0299                     	;# 
   222  029A                     	;# 
   223  029D                     	;# 
   224  029E                     	;# 
   225  029F                     	;# 
   226  030C                     	;# 
   227  030D                     	;# 
   228  0311                     	;# 
   229  0311                     	;# 
   230  0312                     	;# 
   231  0313                     	;# 
   232  0318                     	;# 
   233  0318                     	;# 
   234  0319                     	;# 
   235  031A                     	;# 
   236  031C                     	;# 
   237  031C                     	;# 
   238  031D                     	;# 
   239  031E                     	;# 
   240  038C                     	;# 
   241  038D                     	;# 
   242  0394                     	;# 
   243  0395                     	;# 
   244  0396                     	;# 
   245  040C                     	;# 
   246  040D                     	;# 
   247  0411                     	;# 
   248  0411                     	;# 
   249  0412                     	;# 
   250  0413                     	;# 
   251  0414                     	;# 
   252  0415                     	;# 
   253  0416                     	;# 
   254  0417                     	;# 
   255  0418                     	;# 
   256  0418                     	;# 
   257  0419                     	;# 
   258  041A                     	;# 
   259  041B                     	;# 
   260  041C                     	;# 
   261  041D                     	;# 
   262  041E                     	;# 
   263  048D                     	;# 
   264  0491                     	;# 
   265  0491                     	;# 
   266  0492                     	;# 
   267  0492                     	;# 
   268  0493                     	;# 
   269  0493                     	;# 
   270  0493                     	;# 
   271  0494                     	;# 
   272  0494                     	;# 
   273  0495                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  0496                     	;# 
   277  0497                     	;# 
   278  0497                     	;# 
   279  0595                     	;# 
   280  0596                     	;# 
   281  0597                     	;# 
   282  059C                     	;# 
   283  059D                     	;# 
   284  059E                     	;# 
   285  0611                     	;# 
   286  0611                     	;# 
   287  0612                     	;# 
   288  0613                     	;# 
   289  0614                     	;# 
   290  0614                     	;# 
   291  0615                     	;# 
   292  0616                     	;# 
   293  0617                     	;# 
   294  0617                     	;# 
   295  0618                     	;# 
   296  0619                     	;# 
   297  061A                     	;# 
   298  061A                     	;# 
   299  061B                     	;# 
   300  061C                     	;# 
   301  061D                     	;# 
   302  061D                     	;# 
   303  061E                     	;# 
   304  061F                     	;# 
   305  0FE4                     	;# 
   306  0FE5                     	;# 
   307  0FE6                     	;# 
   308  0FE7                     	;# 
   309  0FE8                     	;# 
   310  0FE9                     	;# 
   311  0FEA                     	;# 
   312  0FEB                     	;# 
   313  0FED                     	;# 
   314  0FEE                     	;# 
   315  0FEF                     	;# 
   316  0000                     	;# 
   317  0001                     	;# 
   318  0002                     	;# 
   319  0003                     	;# 
   320  0004                     	;# 
   321  0005                     	;# 
   322  0006                     	;# 
   323  0007                     	;# 
   324  0008                     	;# 
   325  0009                     	;# 
   326  000A                     	;# 
   327  000B                     	;# 
   328  000C                     	;# 
   329  000D                     	;# 
   330  000E                     	;# 
   331  000F                     	;# 
   332  0010                     	;# 
   333  0011                     	;# 
   334  0012                     	;# 
   335  0013                     	;# 
   336  0014                     	;# 
   337  0015                     	;# 
   338  0016                     	;# 
   339  0016                     	;# 
   340  0017                     	;# 
   341  0018                     	;# 
   342  0019                     	;# 
   343  001A                     	;# 
   344  001B                     	;# 
   345  001C                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0094                     	;# 
   355  0095                     	;# 
   356  0096                     	;# 
   357  0097                     	;# 
   358  0099                     	;# 
   359  009A                     	;# 
   360  009B                     	;# 
   361  009B                     	;# 
   362  009C                     	;# 
   363  009D                     	;# 
   364  009E                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0110                     	;# 
   370  0116                     	;# 
   371  0117                     	;# 
   372  011D                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  018F                     	;# 
   376  0190                     	;# 
   377  0191                     	;# 
   378  0191                     	;# 
   379  0192                     	;# 
   380  0193                     	;# 
   381  0193                     	;# 
   382  0194                     	;# 
   383  0195                     	;# 
   384  0196                     	;# 
   385  0197                     	;# 
   386  0199                     	;# 
   387  0199                     	;# 
   388  0199                     	;# 
   389  019A                     	;# 
   390  019A                     	;# 
   391  019A                     	;# 
   392  019B                     	;# 
   393  019B                     	;# 
   394  019B                     	;# 
   395  019B                     	;# 
   396  019B                     	;# 
   397  019C                     	;# 
   398  019C                     	;# 
   399  019C                     	;# 
   400  019D                     	;# 
   401  019D                     	;# 
   402  019D                     	;# 
   403  019E                     	;# 
   404  019E                     	;# 
   405  019E                     	;# 
   406  019F                     	;# 
   407  019F                     	;# 
   408  019F                     	;# 
   409  020D                     	;# 
   410  020F                     	;# 
   411  0210                     	;# 
   412  0211                     	;# 
   413  0211                     	;# 
   414  0212                     	;# 
   415  0212                     	;# 
   416  0213                     	;# 
   417  0213                     	;# 
   418  0214                     	;# 
   419  0214                     	;# 
   420  0215                     	;# 
   421  0215                     	;# 
   422  0215                     	;# 
   423  0216                     	;# 
   424  0216                     	;# 
   425  0217                     	;# 
   426  0217                     	;# 
   427  0219                     	;# 
   428  021A                     	;# 
   429  021B                     	;# 
   430  021C                     	;# 
   431  021D                     	;# 
   432  021E                     	;# 
   433  021F                     	;# 
   434  028C                     	;# 
   435  028D                     	;# 
   436  0291                     	;# 
   437  0291                     	;# 
   438  0292                     	;# 
   439  0293                     	;# 
   440  0298                     	;# 
   441  0298                     	;# 
   442  0299                     	;# 
   443  029A                     	;# 
   444  029D                     	;# 
   445  029E                     	;# 
   446  029F                     	;# 
   447  030C                     	;# 
   448  030D                     	;# 
   449  0311                     	;# 
   450  0311                     	;# 
   451  0312                     	;# 
   452  0313                     	;# 
   453  0318                     	;# 
   454  0318                     	;# 
   455  0319                     	;# 
   456  031A                     	;# 
   457  031C                     	;# 
   458  031C                     	;# 
   459  031D                     	;# 
   460  031E                     	;# 
   461  038C                     	;# 
   462  038D                     	;# 
   463  0394                     	;# 
   464  0395                     	;# 
   465  0396                     	;# 
   466  040C                     	;# 
   467  040D                     	;# 
   468  0411                     	;# 
   469  0411                     	;# 
   470  0412                     	;# 
   471  0413                     	;# 
   472  0414                     	;# 
   473  0415                     	;# 
   474  0416                     	;# 
   475  0417                     	;# 
   476  0418                     	;# 
   477  0418                     	;# 
   478  0419                     	;# 
   479  041A                     	;# 
   480  041B                     	;# 
   481  041C                     	;# 
   482  041D                     	;# 
   483  041E                     	;# 
   484  048D                     	;# 
   485  0491                     	;# 
   486  0491                     	;# 
   487  0492                     	;# 
   488  0492                     	;# 
   489  0493                     	;# 
   490  0493                     	;# 
   491  0493                     	;# 
   492  0494                     	;# 
   493  0494                     	;# 
   494  0495                     	;# 
   495  0495                     	;# 
   496  0496                     	;# 
   497  0496                     	;# 
   498  0497                     	;# 
   499  0497                     	;# 
   500  0595                     	;# 
   501  0596                     	;# 
   502  0597                     	;# 
   503  059C                     	;# 
   504  059D                     	;# 
   505  059E                     	;# 
   506  0611                     	;# 
   507  0611                     	;# 
   508  0612                     	;# 
   509  0613                     	;# 
   510  0614                     	;# 
   511  0614                     	;# 
   512  0615                     	;# 
   513  0616                     	;# 
   514  0617                     	;# 
   515  0617                     	;# 
   516  0618                     	;# 
   517  0619                     	;# 
   518  061A                     	;# 
   519  061A                     	;# 
   520  061B                     	;# 
   521  061C                     	;# 
   522  061D                     	;# 
   523  061D                     	;# 
   524  061E                     	;# 
   525  061F                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  000F                     	;# 
   553  0010                     	;# 
   554  0011                     	;# 
   555  0012                     	;# 
   556  0013                     	;# 
   557  0014                     	;# 
   558  0015                     	;# 
   559  0016                     	;# 
   560  0016                     	;# 
   561  0017                     	;# 
   562  0018                     	;# 
   563  0019                     	;# 
   564  001A                     	;# 
   565  001B                     	;# 
   566  001C                     	;# 
   567  008C                     	;# 
   568  008D                     	;# 
   569  008E                     	;# 
   570  008F                     	;# 
   571  0090                     	;# 
   572  0091                     	;# 
   573  0092                     	;# 
   574  0093                     	;# 
   575  0094                     	;# 
   576  0095                     	;# 
   577  0096                     	;# 
   578  0097                     	;# 
   579  0099                     	;# 
   580  009A                     	;# 
   581  009B                     	;# 
   582  009B                     	;# 
   583  009C                     	;# 
   584  009D                     	;# 
   585  009E                     	;# 
   586  010C                     	;# 
   587  010D                     	;# 
   588  010E                     	;# 
   589  010F                     	;# 
   590  0110                     	;# 
   591  0116                     	;# 
   592  0117                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596  018F                     	;# 
   597  0190                     	;# 
   598  0191                     	;# 
   599  0191                     	;# 
   600  0192                     	;# 
   601  0193                     	;# 
   602  0193                     	;# 
   603  0194                     	;# 
   604  0195                     	;# 
   605  0196                     	;# 
   606  0197                     	;# 
   607  0199                     	;# 
   608  0199                     	;# 
   609  0199                     	;# 
   610  019A                     	;# 
   611  019A                     	;# 
   612  019A                     	;# 
   613  019B                     	;# 
   614  019B                     	;# 
   615  019B                     	;# 
   616  019B                     	;# 
   617  019B                     	;# 
   618  019C                     	;# 
   619  019C                     	;# 
   620  019C                     	;# 
   621  019D                     	;# 
   622  019D                     	;# 
   623  019D                     	;# 
   624  019E                     	;# 
   625  019E                     	;# 
   626  019E                     	;# 
   627  019F                     	;# 
   628  019F                     	;# 
   629  019F                     	;# 
   630  020D                     	;# 
   631  020F                     	;# 
   632  0210                     	;# 
   633  0211                     	;# 
   634  0211                     	;# 
   635  0212                     	;# 
   636  0212                     	;# 
   637  0213                     	;# 
   638  0213                     	;# 
   639  0214                     	;# 
   640  0214                     	;# 
   641  0215                     	;# 
   642  0215                     	;# 
   643  0215                     	;# 
   644  0216                     	;# 
   645  0216                     	;# 
   646  0217                     	;# 
   647  0217                     	;# 
   648  0219                     	;# 
   649  021A                     	;# 
   650  021B                     	;# 
   651  021C                     	;# 
   652  021D                     	;# 
   653  021E                     	;# 
   654  021F                     	;# 
   655  028C                     	;# 
   656  028D                     	;# 
   657  0291                     	;# 
   658  0291                     	;# 
   659  0292                     	;# 
   660  0293                     	;# 
   661  0298                     	;# 
   662  0298                     	;# 
   663  0299                     	;# 
   664  029A                     	;# 
   665  029D                     	;# 
   666  029E                     	;# 
   667  029F                     	;# 
   668  030C                     	;# 
   669  030D                     	;# 
   670  0311                     	;# 
   671  0311                     	;# 
   672  0312                     	;# 
   673  0313                     	;# 
   674  0318                     	;# 
   675  0318                     	;# 
   676  0319                     	;# 
   677  031A                     	;# 
   678  031C                     	;# 
   679  031C                     	;# 
   680  031D                     	;# 
   681  031E                     	;# 
   682  038C                     	;# 
   683  038D                     	;# 
   684  0394                     	;# 
   685  0395                     	;# 
   686  0396                     	;# 
   687  040C                     	;# 
   688  040D                     	;# 
   689  0411                     	;# 
   690  0411                     	;# 
   691  0412                     	;# 
   692  0413                     	;# 
   693  0414                     	;# 
   694  0415                     	;# 
   695  0416                     	;# 
   696  0417                     	;# 
   697  0418                     	;# 
   698  0418                     	;# 
   699  0419                     	;# 
   700  041A                     	;# 
   701  041B                     	;# 
   702  041C                     	;# 
   703  041D                     	;# 
   704  041E                     	;# 
   705  048D                     	;# 
   706  0491                     	;# 
   707  0491                     	;# 
   708  0492                     	;# 
   709  0492                     	;# 
   710  0493                     	;# 
   711  0493                     	;# 
   712  0493                     	;# 
   713  0494                     	;# 
   714  0494                     	;# 
   715  0495                     	;# 
   716  0495                     	;# 
   717  0496                     	;# 
   718  0496                     	;# 
   719  0497                     	;# 
   720  0497                     	;# 
   721  0595                     	;# 
   722  0596                     	;# 
   723  0597                     	;# 
   724  059C                     	;# 
   725  059D                     	;# 
   726  059E                     	;# 
   727  0611                     	;# 
   728  0611                     	;# 
   729  0612                     	;# 
   730  0613                     	;# 
   731  0614                     	;# 
   732  0614                     	;# 
   733  0615                     	;# 
   734  0616                     	;# 
   735  0617                     	;# 
   736  0617                     	;# 
   737  0618                     	;# 
   738  0619                     	;# 
   739  061A                     	;# 
   740  061A                     	;# 
   741  061B                     	;# 
   742  061C                     	;# 
   743  061D                     	;# 
   744  061D                     	;# 
   745  061E                     	;# 
   746  061F                     	;# 
   747  0FE4                     	;# 
   748  0FE5                     	;# 
   749  0FE6                     	;# 
   750  0FE7                     	;# 
   751  0FE8                     	;# 
   752  0FE9                     	;# 
   753  0FEA                     	;# 
   754  0FEB                     	;# 
   755  0FED                     	;# 
   756  0FEE                     	;# 
   757  0FEF                     	;# 
   758  0000                     	;# 
   759  0001                     	;# 
   760  0002                     	;# 
   761  0003                     	;# 
   762  0004                     	;# 
   763  0005                     	;# 
   764  0006                     	;# 
   765  0007                     	;# 
   766  0008                     	;# 
   767  0009                     	;# 
   768  000A                     	;# 
   769  000B                     	;# 
   770  000C                     	;# 
   771  000D                     	;# 
   772  000E                     	;# 
   773  000F                     	;# 
   774  0010                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0013                     	;# 
   778  0014                     	;# 
   779  0015                     	;# 
   780  0016                     	;# 
   781  0016                     	;# 
   782  0017                     	;# 
   783  0018                     	;# 
   784  0019                     	;# 
   785  001A                     	;# 
   786  001B                     	;# 
   787  001C                     	;# 
   788  008C                     	;# 
   789  008D                     	;# 
   790  008E                     	;# 
   791  008F                     	;# 
   792  0090                     	;# 
   793  0091                     	;# 
   794  0092                     	;# 
   795  0093                     	;# 
   796  0094                     	;# 
   797  0095                     	;# 
   798  0096                     	;# 
   799  0097                     	;# 
   800  0099                     	;# 
   801  009A                     	;# 
   802  009B                     	;# 
   803  009B                     	;# 
   804  009C                     	;# 
   805  009D                     	;# 
   806  009E                     	;# 
   807  010C                     	;# 
   808  010D                     	;# 
   809  010E                     	;# 
   810  010F                     	;# 
   811  0110                     	;# 
   812  0116                     	;# 
   813  0117                     	;# 
   814  011D                     	;# 
   815  018C                     	;# 
   816  018D                     	;# 
   817  018F                     	;# 
   818  0190                     	;# 
   819  0191                     	;# 
   820  0191                     	;# 
   821  0192                     	;# 
   822  0193                     	;# 
   823  0193                     	;# 
   824  0194                     	;# 
   825  0195                     	;# 
   826  0196                     	;# 
   827  0197                     	;# 
   828  0199                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  019A                     	;# 
   832  019A                     	;# 
   833  019A                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019B                     	;# 
   838  019B                     	;# 
   839  019C                     	;# 
   840  019C                     	;# 
   841  019C                     	;# 
   842  019D                     	;# 
   843  019D                     	;# 
   844  019D                     	;# 
   845  019E                     	;# 
   846  019E                     	;# 
   847  019E                     	;# 
   848  019F                     	;# 
   849  019F                     	;# 
   850  019F                     	;# 
   851  020D                     	;# 
   852  020F                     	;# 
   853  0210                     	;# 
   854  0211                     	;# 
   855  0211                     	;# 
   856  0212                     	;# 
   857  0212                     	;# 
   858  0213                     	;# 
   859  0213                     	;# 
   860  0214                     	;# 
   861  0214                     	;# 
   862  0215                     	;# 
   863  0215                     	;# 
   864  0215                     	;# 
   865  0216                     	;# 
   866  0216                     	;# 
   867  0217                     	;# 
   868  0217                     	;# 
   869  0219                     	;# 
   870  021A                     	;# 
   871  021B                     	;# 
   872  021C                     	;# 
   873  021D                     	;# 
   874  021E                     	;# 
   875  021F                     	;# 
   876  028C                     	;# 
   877  028D                     	;# 
   878  0291                     	;# 
   879  0291                     	;# 
   880  0292                     	;# 
   881  0293                     	;# 
   882  0298                     	;# 
   883  0298                     	;# 
   884  0299                     	;# 
   885  029A                     	;# 
   886  029D                     	;# 
   887  029E                     	;# 
   888  029F                     	;# 
   889  030C                     	;# 
   890  030D                     	;# 
   891  0311                     	;# 
   892  0311                     	;# 
   893  0312                     	;# 
   894  0313                     	;# 
   895  0318                     	;# 
   896  0318                     	;# 
   897  0319                     	;# 
   898  031A                     	;# 
   899  031C                     	;# 
   900  031C                     	;# 
   901  031D                     	;# 
   902  031E                     	;# 
   903  038C                     	;# 
   904  038D                     	;# 
   905  0394                     	;# 
   906  0395                     	;# 
   907  0396                     	;# 
   908  040C                     	;# 
   909  040D                     	;# 
   910  0411                     	;# 
   911  0411                     	;# 
   912  0412                     	;# 
   913  0413                     	;# 
   914  0414                     	;# 
   915  0415                     	;# 
   916  0416                     	;# 
   917  0417                     	;# 
   918  0418                     	;# 
   919  0418                     	;# 
   920  0419                     	;# 
   921  041A                     	;# 
   922  041B                     	;# 
   923  041C                     	;# 
   924  041D                     	;# 
   925  041E                     	;# 
   926  048D                     	;# 
   927  0491                     	;# 
   928  0491                     	;# 
   929  0492                     	;# 
   930  0492                     	;# 
   931  0493                     	;# 
   932  0493                     	;# 
   933  0493                     	;# 
   934  0494                     	;# 
   935  0494                     	;# 
   936  0495                     	;# 
   937  0495                     	;# 
   938  0496                     	;# 
   939  0496                     	;# 
   940  0497                     	;# 
   941  0497                     	;# 
   942  0595                     	;# 
   943  0596                     	;# 
   944  0597                     	;# 
   945  059C                     	;# 
   946  059D                     	;# 
   947  059E                     	;# 
   948  0611                     	;# 
   949  0611                     	;# 
   950  0612                     	;# 
   951  0613                     	;# 
   952  0614                     	;# 
   953  0614                     	;# 
   954  0615                     	;# 
   955  0616                     	;# 
   956  0617                     	;# 
   957  0617                     	;# 
   958  0618                     	;# 
   959  0619                     	;# 
   960  061A                     	;# 
   961  061A                     	;# 
   962  061B                     	;# 
   963  061C                     	;# 
   964  061D                     	;# 
   965  061D                     	;# 
   966  061E                     	;# 
   967  061F                     	;# 
   968  0FE4                     	;# 
   969  0FE5                     	;# 
   970  0FE6                     	;# 
   971  0FE7                     	;# 
   972  0FE8                     	;# 
   973  0FE9                     	;# 
   974  0FEA                     	;# 
   975  0FEB                     	;# 
   976  0FED                     	;# 
   977  0FEE                     	;# 
   978  0FEF                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0008                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  000F                     	;# 
   995  0010                     	;# 
   996  0011                     	;# 
   997  0012                     	;# 
   998  0013                     	;# 
   999  0014                     	;# 
  1000  0015                     	;# 
  1001  0016                     	;# 
  1002  0016                     	;# 
  1003  0017                     	;# 
  1004  0018                     	;# 
  1005  0019                     	;# 
  1006  001A                     	;# 
  1007  001B                     	;# 
  1008  001C                     	;# 
  1009  008C                     	;# 
  1010  008D                     	;# 
  1011  008E                     	;# 
  1012  008F                     	;# 
  1013  0090                     	;# 
  1014  0091                     	;# 
  1015  0092                     	;# 
  1016  0093                     	;# 
  1017  0094                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0099                     	;# 
  1022  009A                     	;# 
  1023  009B                     	;# 
  1024  009B                     	;# 
  1025  009C                     	;# 
  1026  009D                     	;# 
  1027  009E                     	;# 
  1028  010C                     	;# 
  1029  010D                     	;# 
  1030  010E                     	;# 
  1031  010F                     	;# 
  1032  0110                     	;# 
  1033  0116                     	;# 
  1034  0117                     	;# 
  1035  011D                     	;# 
  1036  018C                     	;# 
  1037  018D                     	;# 
  1038  018F                     	;# 
  1039  0190                     	;# 
  1040  0191                     	;# 
  1041  0191                     	;# 
  1042  0192                     	;# 
  1043  0193                     	;# 
  1044  0193                     	;# 
  1045  0194                     	;# 
  1046  0195                     	;# 
  1047  0196                     	;# 
  1048  0197                     	;# 
  1049  0199                     	;# 
  1050  0199                     	;# 
  1051  0199                     	;# 
  1052  019A                     	;# 
  1053  019A                     	;# 
  1054  019A                     	;# 
  1055  019B                     	;# 
  1056  019B                     	;# 
  1057  019B                     	;# 
  1058  019B                     	;# 
  1059  019B                     	;# 
  1060  019C                     	;# 
  1061  019C                     	;# 
  1062  019C                     	;# 
  1063  019D                     	;# 
  1064  019D                     	;# 
  1065  019D                     	;# 
  1066  019E                     	;# 
  1067  019E                     	;# 
  1068  019E                     	;# 
  1069  019F                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  020D                     	;# 
  1073  020F                     	;# 
  1074  0210                     	;# 
  1075  0211                     	;# 
  1076  0211                     	;# 
  1077  0212                     	;# 
  1078  0212                     	;# 
  1079  0213                     	;# 
  1080  0213                     	;# 
  1081  0214                     	;# 
  1082  0214                     	;# 
  1083  0215                     	;# 
  1084  0215                     	;# 
  1085  0215                     	;# 
  1086  0216                     	;# 
  1087  0216                     	;# 
  1088  0217                     	;# 
  1089  0217                     	;# 
  1090  0219                     	;# 
  1091  021A                     	;# 
  1092  021B                     	;# 
  1093  021C                     	;# 
  1094  021D                     	;# 
  1095  021E                     	;# 
  1096  021F                     	;# 
  1097  028C                     	;# 
  1098  028D                     	;# 
  1099  0291                     	;# 
  1100  0291                     	;# 
  1101  0292                     	;# 
  1102  0293                     	;# 
  1103  0298                     	;# 
  1104  0298                     	;# 
  1105  0299                     	;# 
  1106  029A                     	;# 
  1107  029D                     	;# 
  1108  029E                     	;# 
  1109  029F                     	;# 
  1110  030C                     	;# 
  1111  030D                     	;# 
  1112  0311                     	;# 
  1113  0311                     	;# 
  1114  0312                     	;# 
  1115  0313                     	;# 
  1116  0318                     	;# 
  1117  0318                     	;# 
  1118  0319                     	;# 
  1119  031A                     	;# 
  1120  031C                     	;# 
  1121  031C                     	;# 
  1122  031D                     	;# 
  1123  031E                     	;# 
  1124  038C                     	;# 
  1125  038D                     	;# 
  1126  0394                     	;# 
  1127  0395                     	;# 
  1128  0396                     	;# 
  1129  040C                     	;# 
  1130  040D                     	;# 
  1131  0411                     	;# 
  1132  0411                     	;# 
  1133  0412                     	;# 
  1134  0413                     	;# 
  1135  0414                     	;# 
  1136  0415                     	;# 
  1137  0416                     	;# 
  1138  0417                     	;# 
  1139  0418                     	;# 
  1140  0418                     	;# 
  1141  0419                     	;# 
  1142  041A                     	;# 
  1143  041B                     	;# 
  1144  041C                     	;# 
  1145  041D                     	;# 
  1146  041E                     	;# 
  1147  048D                     	;# 
  1148  0491                     	;# 
  1149  0491                     	;# 
  1150  0492                     	;# 
  1151  0492                     	;# 
  1152  0493                     	;# 
  1153  0493                     	;# 
  1154  0493                     	;# 
  1155  0494                     	;# 
  1156  0494                     	;# 
  1157  0495                     	;# 
  1158  0495                     	;# 
  1159  0496                     	;# 
  1160  0496                     	;# 
  1161  0497                     	;# 
  1162  0497                     	;# 
  1163  0595                     	;# 
  1164  0596                     	;# 
  1165  0597                     	;# 
  1166  059C                     	;# 
  1167  059D                     	;# 
  1168  059E                     	;# 
  1169  0611                     	;# 
  1170  0611                     	;# 
  1171  0612                     	;# 
  1172  0613                     	;# 
  1173  0614                     	;# 
  1174  0614                     	;# 
  1175  0615                     	;# 
  1176  0616                     	;# 
  1177  0617                     	;# 
  1178  0617                     	;# 
  1179  0618                     	;# 
  1180  0619                     	;# 
  1181  061A                     	;# 
  1182  061A                     	;# 
  1183  061B                     	;# 
  1184  061C                     	;# 
  1185  061D                     	;# 
  1186  061D                     	;# 
  1187  061E                     	;# 
  1188  061F                     	;# 
  1189  0FE4                     	;# 
  1190  0FE5                     	;# 
  1191  0FE6                     	;# 
  1192  0FE7                     	;# 
  1193  0FE8                     	;# 
  1194  0FE9                     	;# 
  1195  0FEA                     	;# 
  1196  0FEB                     	;# 
  1197  0FED                     	;# 
  1198  0FEE                     	;# 
  1199  0FEF                     	;# 
  1200  0000                     	;# 
  1201  0001                     	;# 
  1202  0002                     	;# 
  1203  0003                     	;# 
  1204  0004                     	;# 
  1205  0005                     	;# 
  1206  0006                     	;# 
  1207  0007                     	;# 
  1208  0008                     	;# 
  1209  0009                     	;# 
  1210  000A                     	;# 
  1211  000B                     	;# 
  1212  000C                     	;# 
  1213  000D                     	;# 
  1214  000E                     	;# 
  1215  000F                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0014                     	;# 
  1221  0015                     	;# 
  1222  0016                     	;# 
  1223  0016                     	;# 
  1224  0017                     	;# 
  1225  0018                     	;# 
  1226  0019                     	;# 
  1227  001A                     	;# 
  1228  001B                     	;# 
  1229  001C                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  008E                     	;# 
  1233  008F                     	;# 
  1234  0090                     	;# 
  1235  0091                     	;# 
  1236  0092                     	;# 
  1237  0093                     	;# 
  1238  0094                     	;# 
  1239  0095                     	;# 
  1240  0096                     	;# 
  1241  0097                     	;# 
  1242  0099                     	;# 
  1243  009A                     	;# 
  1244  009B                     	;# 
  1245  009B                     	;# 
  1246  009C                     	;# 
  1247  009D                     	;# 
  1248  009E                     	;# 
  1249  010C                     	;# 
  1250  010D                     	;# 
  1251  010E                     	;# 
  1252  010F                     	;# 
  1253  0110                     	;# 
  1254  0116                     	;# 
  1255  0117                     	;# 
  1256  011D                     	;# 
  1257  018C                     	;# 
  1258  018D                     	;# 
  1259  018F                     	;# 
  1260  0190                     	;# 
  1261  0191                     	;# 
  1262  0191                     	;# 
  1263  0192                     	;# 
  1264  0193                     	;# 
  1265  0193                     	;# 
  1266  0194                     	;# 
  1267  0195                     	;# 
  1268  0196                     	;# 
  1269  0197                     	;# 
  1270  0199                     	;# 
  1271  0199                     	;# 
  1272  0199                     	;# 
  1273  019A                     	;# 
  1274  019A                     	;# 
  1275  019A                     	;# 
  1276  019B                     	;# 
  1277  019B                     	;# 
  1278  019B                     	;# 
  1279  019B                     	;# 
  1280  019B                     	;# 
  1281  019C                     	;# 
  1282  019C                     	;# 
  1283  019C                     	;# 
  1284  019D                     	;# 
  1285  019D                     	;# 
  1286  019D                     	;# 
  1287  019E                     	;# 
  1288  019E                     	;# 
  1289  019E                     	;# 
  1290  019F                     	;# 
  1291  019F                     	;# 
  1292  019F                     	;# 
  1293  020D                     	;# 
  1294  020F                     	;# 
  1295  0210                     	;# 
  1296  0211                     	;# 
  1297  0211                     	;# 
  1298  0212                     	;# 
  1299  0212                     	;# 
  1300  0213                     	;# 
  1301  0213                     	;# 
  1302  0214                     	;# 
  1303  0214                     	;# 
  1304  0215                     	;# 
  1305  0215                     	;# 
  1306  0215                     	;# 
  1307  0216                     	;# 
  1308  0216                     	;# 
  1309  0217                     	;# 
  1310  0217                     	;# 
  1311  0219                     	;# 
  1312  021A                     	;# 
  1313  021B                     	;# 
  1314  021C                     	;# 
  1315  021D                     	;# 
  1316  021E                     	;# 
  1317  021F                     	;# 
  1318  028C                     	;# 
  1319  028D                     	;# 
  1320  0291                     	;# 
  1321  0291                     	;# 
  1322  0292                     	;# 
  1323  0293                     	;# 
  1324  0298                     	;# 
  1325  0298                     	;# 
  1326  0299                     	;# 
  1327  029A                     	;# 
  1328  029D                     	;# 
  1329  029E                     	;# 
  1330  029F                     	;# 
  1331  030C                     	;# 
  1332  030D                     	;# 
  1333  0311                     	;# 
  1334  0311                     	;# 
  1335  0312                     	;# 
  1336  0313                     	;# 
  1337  0318                     	;# 
  1338  0318                     	;# 
  1339  0319                     	;# 
  1340  031A                     	;# 
  1341  031C                     	;# 
  1342  031C                     	;# 
  1343  031D                     	;# 
  1344  031E                     	;# 
  1345  038C                     	;# 
  1346  038D                     	;# 
  1347  0394                     	;# 
  1348  0395                     	;# 
  1349  0396                     	;# 
  1350  040C                     	;# 
  1351  040D                     	;# 
  1352  0411                     	;# 
  1353  0411                     	;# 
  1354  0412                     	;# 
  1355  0413                     	;# 
  1356  0414                     	;# 
  1357  0415                     	;# 
  1358  0416                     	;# 
  1359  0417                     	;# 
  1360  0418                     	;# 
  1361  0418                     	;# 
  1362  0419                     	;# 
  1363  041A                     	;# 
  1364  041B                     	;# 
  1365  041C                     	;# 
  1366  041D                     	;# 
  1367  041E                     	;# 
  1368  048D                     	;# 
  1369  0491                     	;# 
  1370  0491                     	;# 
  1371  0492                     	;# 
  1372  0492                     	;# 
  1373  0493                     	;# 
  1374  0493                     	;# 
  1375  0493                     	;# 
  1376  0494                     	;# 
  1377  0494                     	;# 
  1378  0495                     	;# 
  1379  0495                     	;# 
  1380  0496                     	;# 
  1381  0496                     	;# 
  1382  0497                     	;# 
  1383  0497                     	;# 
  1384  0595                     	;# 
  1385  0596                     	;# 
  1386  0597                     	;# 
  1387  059C                     	;# 
  1388  059D                     	;# 
  1389  059E                     	;# 
  1390  0611                     	;# 
  1391  0611                     	;# 
  1392  0612                     	;# 
  1393  0613                     	;# 
  1394  0614                     	;# 
  1395  0614                     	;# 
  1396  0615                     	;# 
  1397  0616                     	;# 
  1398  0617                     	;# 
  1399  0617                     	;# 
  1400  0618                     	;# 
  1401  0619                     	;# 
  1402  061A                     	;# 
  1403  061A                     	;# 
  1404  061B                     	;# 
  1405  061C                     	;# 
  1406  061D                     	;# 
  1407  061D                     	;# 
  1408  061E                     	;# 
  1409  061F                     	;# 
  1410  0FE4                     	;# 
  1411  0FE5                     	;# 
  1412  0FE6                     	;# 
  1413  0FE7                     	;# 
  1414  0FE8                     	;# 
  1415  0FE9                     	;# 
  1416  0FEA                     	;# 
  1417  0FEB                     	;# 
  1418  0FED                     	;# 
  1419  0FEE                     	;# 
  1420  0FEF                     	;# 
  1421  0000                     	;# 
  1422  0001                     	;# 
  1423  0002                     	;# 
  1424  0003                     	;# 
  1425  0004                     	;# 
  1426  0005                     	;# 
  1427  0006                     	;# 
  1428  0007                     	;# 
  1429  0008                     	;# 
  1430  0009                     	;# 
  1431  000A                     	;# 
  1432  000B                     	;# 
  1433  000C                     	;# 
  1434  000D                     	;# 
  1435  000E                     	;# 
  1436  000F                     	;# 
  1437  0010                     	;# 
  1438  0011                     	;# 
  1439  0012                     	;# 
  1440  0013                     	;# 
  1441  0014                     	;# 
  1442  0015                     	;# 
  1443  0016                     	;# 
  1444  0016                     	;# 
  1445  0017                     	;# 
  1446  0018                     	;# 
  1447  0019                     	;# 
  1448  001A                     	;# 
  1449  001B                     	;# 
  1450  001C                     	;# 
  1451  008C                     	;# 
  1452  008D                     	;# 
  1453  008E                     	;# 
  1454  008F                     	;# 
  1455  0090                     	;# 
  1456  0091                     	;# 
  1457  0092                     	;# 
  1458  0093                     	;# 
  1459  0094                     	;# 
  1460  0095                     	;# 
  1461  0096                     	;# 
  1462  0097                     	;# 
  1463  0099                     	;# 
  1464  009A                     	;# 
  1465  009B                     	;# 
  1466  009B                     	;# 
  1467  009C                     	;# 
  1468  009D                     	;# 
  1469  009E                     	;# 
  1470  010C                     	;# 
  1471  010D                     	;# 
  1472  010E                     	;# 
  1473  010F                     	;# 
  1474  0110                     	;# 
  1475  0116                     	;# 
  1476  0117                     	;# 
  1477  011D                     	;# 
  1478  018C                     	;# 
  1479  018D                     	;# 
  1480  018F                     	;# 
  1481  0190                     	;# 
  1482  0191                     	;# 
  1483  0191                     	;# 
  1484  0192                     	;# 
  1485  0193                     	;# 
  1486  0193                     	;# 
  1487  0194                     	;# 
  1488  0195                     	;# 
  1489  0196                     	;# 
  1490  0197                     	;# 
  1491  0199                     	;# 
  1492  0199                     	;# 
  1493  0199                     	;# 
  1494  019A                     	;# 
  1495  019A                     	;# 
  1496  019A                     	;# 
  1497  019B                     	;# 
  1498  019B                     	;# 
  1499  019B                     	;# 
  1500  019B                     	;# 
  1501  019B                     	;# 
  1502  019C                     	;# 
  1503  019C                     	;# 
  1504  019C                     	;# 
  1505  019D                     	;# 
  1506  019D                     	;# 
  1507  019D                     	;# 
  1508  019E                     	;# 
  1509  019E                     	;# 
  1510  019E                     	;# 
  1511  019F                     	;# 
  1512  019F                     	;# 
  1513  019F                     	;# 
  1514  020D                     	;# 
  1515  020F                     	;# 
  1516  0210                     	;# 
  1517  0211                     	;# 
  1518  0211                     	;# 
  1519  0212                     	;# 
  1520  0212                     	;# 
  1521  0213                     	;# 
  1522  0213                     	;# 
  1523  0214                     	;# 
  1524  0214                     	;# 
  1525  0215                     	;# 
  1526  0215                     	;# 
  1527  0215                     	;# 
  1528  0216                     	;# 
  1529  0216                     	;# 
  1530  0217                     	;# 
  1531  0217                     	;# 
  1532  0219                     	;# 
  1533  021A                     	;# 
  1534  021B                     	;# 
  1535  021C                     	;# 
  1536  021D                     	;# 
  1537  021E                     	;# 
  1538  021F                     	;# 
  1539  028C                     	;# 
  1540  028D                     	;# 
  1541  0291                     	;# 
  1542  0291                     	;# 
  1543  0292                     	;# 
  1544  0293                     	;# 
  1545  0298                     	;# 
  1546  0298                     	;# 
  1547  0299                     	;# 
  1548  029A                     	;# 
  1549  029D                     	;# 
  1550  029E                     	;# 
  1551  029F                     	;# 
  1552  030C                     	;# 
  1553  030D                     	;# 
  1554  0311                     	;# 
  1555  0311                     	;# 
  1556  0312                     	;# 
  1557  0313                     	;# 
  1558  0318                     	;# 
  1559  0318                     	;# 
  1560  0319                     	;# 
  1561  031A                     	;# 
  1562  031C                     	;# 
  1563  031C                     	;# 
  1564  031D                     	;# 
  1565  031E                     	;# 
  1566  038C                     	;# 
  1567  038D                     	;# 
  1568  0394                     	;# 
  1569  0395                     	;# 
  1570  0396                     	;# 
  1571  040C                     	;# 
  1572  040D                     	;# 
  1573  0411                     	;# 
  1574  0411                     	;# 
  1575  0412                     	;# 
  1576  0413                     	;# 
  1577  0414                     	;# 
  1578  0415                     	;# 
  1579  0416                     	;# 
  1580  0417                     	;# 
  1581  0418                     	;# 
  1582  0418                     	;# 
  1583  0419                     	;# 
  1584  041A                     	;# 
  1585  041B                     	;# 
  1586  041C                     	;# 
  1587  041D                     	;# 
  1588  041E                     	;# 
  1589  048D                     	;# 
  1590  0491                     	;# 
  1591  0491                     	;# 
  1592  0492                     	;# 
  1593  0492                     	;# 
  1594  0493                     	;# 
  1595  0493                     	;# 
  1596  0493                     	;# 
  1597  0494                     	;# 
  1598  0494                     	;# 
  1599  0495                     	;# 
  1600  0495                     	;# 
  1601  0496                     	;# 
  1602  0496                     	;# 
  1603  0497                     	;# 
  1604  0497                     	;# 
  1605  0595                     	;# 
  1606  0596                     	;# 
  1607  0597                     	;# 
  1608  059C                     	;# 
  1609  059D                     	;# 
  1610  059E                     	;# 
  1611  0611                     	;# 
  1612  0611                     	;# 
  1613  0612                     	;# 
  1614  0613                     	;# 
  1615  0614                     	;# 
  1616  0614                     	;# 
  1617  0615                     	;# 
  1618  0616                     	;# 
  1619  0617                     	;# 
  1620  0617                     	;# 
  1621  0618                     	;# 
  1622  0619                     	;# 
  1623  061A                     	;# 
  1624  061A                     	;# 
  1625  061B                     	;# 
  1626  061C                     	;# 
  1627  061D                     	;# 
  1628  061D                     	;# 
  1629  061E                     	;# 
  1630  061F                     	;# 
  1631  0FE4                     	;# 
  1632  0FE5                     	;# 
  1633  0FE6                     	;# 
  1634  0FE7                     	;# 
  1635  0FE8                     	;# 
  1636  0FE9                     	;# 
  1637  0FEA                     	;# 
  1638  0FEB                     	;# 
  1639  0FED                     	;# 
  1640  0FEE                     	;# 
  1641  0FEF                     	;# 
  1642  0000                     	;# 
  1643  0001                     	;# 
  1644  0002                     	;# 
  1645  0003                     	;# 
  1646  0004                     	;# 
  1647  0005                     	;# 
  1648  0006                     	;# 
  1649  0007                     	;# 
  1650  0008                     	;# 
  1651  0009                     	;# 
  1652  000A                     	;# 
  1653  000B                     	;# 
  1654  000C                     	;# 
  1655  000D                     	;# 
  1656  000E                     	;# 
  1657  000F                     	;# 
  1658  0010                     	;# 
  1659  0011                     	;# 
  1660  0012                     	;# 
  1661  0013                     	;# 
  1662  0014                     	;# 
  1663  0015                     	;# 
  1664  0016                     	;# 
  1665  0016                     	;# 
  1666  0017                     	;# 
  1667  0018                     	;# 
  1668  0019                     	;# 
  1669  001A                     	;# 
  1670  001B                     	;# 
  1671  001C                     	;# 
  1672  008C                     	;# 
  1673  008D                     	;# 
  1674  008E                     	;# 
  1675  008F                     	;# 
  1676  0090                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0093                     	;# 
  1680  0094                     	;# 
  1681  0095                     	;# 
  1682  0096                     	;# 
  1683  0097                     	;# 
  1684  0099                     	;# 
  1685  009A                     	;# 
  1686  009B                     	;# 
  1687  009B                     	;# 
  1688  009C                     	;# 
  1689  009D                     	;# 
  1690  009E                     	;# 
  1691  010C                     	;# 
  1692  010D                     	;# 
  1693  010E                     	;# 
  1694  010F                     	;# 
  1695  0110                     	;# 
  1696  0116                     	;# 
  1697  0117                     	;# 
  1698  011D                     	;# 
  1699  018C                     	;# 
  1700  018D                     	;# 
  1701  018F                     	;# 
  1702  0190                     	;# 
  1703  0191                     	;# 
  1704  0191                     	;# 
  1705  0192                     	;# 
  1706  0193                     	;# 
  1707  0193                     	;# 
  1708  0194                     	;# 
  1709  0195                     	;# 
  1710  0196                     	;# 
  1711  0197                     	;# 
  1712  0199                     	;# 
  1713  0199                     	;# 
  1714  0199                     	;# 
  1715  019A                     	;# 
  1716  019A                     	;# 
  1717  019A                     	;# 
  1718  019B                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019C                     	;# 
  1724  019C                     	;# 
  1725  019C                     	;# 
  1726  019D                     	;# 
  1727  019D                     	;# 
  1728  019D                     	;# 
  1729  019E                     	;# 
  1730  019E                     	;# 
  1731  019E                     	;# 
  1732  019F                     	;# 
  1733  019F                     	;# 
  1734  019F                     	;# 
  1735  020D                     	;# 
  1736  020F                     	;# 
  1737  0210                     	;# 
  1738  0211                     	;# 
  1739  0211                     	;# 
  1740  0212                     	;# 
  1741  0212                     	;# 
  1742  0213                     	;# 
  1743  0213                     	;# 
  1744  0214                     	;# 
  1745  0214                     	;# 
  1746  0215                     	;# 
  1747  0215                     	;# 
  1748  0215                     	;# 
  1749  0216                     	;# 
  1750  0216                     	;# 
  1751  0217                     	;# 
  1752  0217                     	;# 
  1753  0219                     	;# 
  1754  021A                     	;# 
  1755  021B                     	;# 
  1756  021C                     	;# 
  1757  021D                     	;# 
  1758  021E                     	;# 
  1759  021F                     	;# 
  1760  028C                     	;# 
  1761  028D                     	;# 
  1762  0291                     	;# 
  1763  0291                     	;# 
  1764  0292                     	;# 
  1765  0293                     	;# 
  1766  0298                     	;# 
  1767  0298                     	;# 
  1768  0299                     	;# 
  1769  029A                     	;# 
  1770  029D                     	;# 
  1771  029E                     	;# 
  1772  029F                     	;# 
  1773  030C                     	;# 
  1774  030D                     	;# 
  1775  0311                     	;# 
  1776  0311                     	;# 
  1777  0312                     	;# 
  1778  0313                     	;# 
  1779  0318                     	;# 
  1780  0318                     	;# 
  1781  0319                     	;# 
  1782  031A                     	;# 
  1783  031C                     	;# 
  1784  031C                     	;# 
  1785  031D                     	;# 
  1786  031E                     	;# 
  1787  038C                     	;# 
  1788  038D                     	;# 
  1789  0394                     	;# 
  1790  0395                     	;# 
  1791  0396                     	;# 
  1792  040C                     	;# 
  1793  040D                     	;# 
  1794  0411                     	;# 
  1795  0411                     	;# 
  1796  0412                     	;# 
  1797  0413                     	;# 
  1798  0414                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  0418                     	;# 
  1803  0418                     	;# 
  1804  0419                     	;# 
  1805  041A                     	;# 
  1806  041B                     	;# 
  1807  041C                     	;# 
  1808  041D                     	;# 
  1809  041E                     	;# 
  1810  048D                     	;# 
  1811  0491                     	;# 
  1812  0491                     	;# 
  1813  0492                     	;# 
  1814  0492                     	;# 
  1815  0493                     	;# 
  1816  0493                     	;# 
  1817  0493                     	;# 
  1818  0494                     	;# 
  1819  0494                     	;# 
  1820  0495                     	;# 
  1821  0495                     	;# 
  1822  0496                     	;# 
  1823  0496                     	;# 
  1824  0497                     	;# 
  1825  0497                     	;# 
  1826  0595                     	;# 
  1827  0596                     	;# 
  1828  0597                     	;# 
  1829  059C                     	;# 
  1830  059D                     	;# 
  1831  059E                     	;# 
  1832  0611                     	;# 
  1833  0611                     	;# 
  1834  0612                     	;# 
  1835  0613                     	;# 
  1836  0614                     	;# 
  1837  0614                     	;# 
  1838  0615                     	;# 
  1839  0616                     	;# 
  1840  0617                     	;# 
  1841  0617                     	;# 
  1842  0618                     	;# 
  1843  0619                     	;# 
  1844  061A                     	;# 
  1845  061A                     	;# 
  1846  061B                     	;# 
  1847  061C                     	;# 
  1848  061D                     	;# 
  1849  061D                     	;# 
  1850  061E                     	;# 
  1851  061F                     	;# 
  1852  0FE4                     	;# 
  1853  0FE5                     	;# 
  1854  0FE6                     	;# 
  1855  0FE7                     	;# 
  1856  0FE8                     	;# 
  1857  0FE9                     	;# 
  1858  0FEA                     	;# 
  1859  0FEB                     	;# 
  1860  0FED                     	;# 
  1861  0FEE                     	;# 
  1862  0FEF                     	;# 
  1863  0000                     	;# 
  1864  0001                     	;# 
  1865  0002                     	;# 
  1866  0003                     	;# 
  1867  0004                     	;# 
  1868  0005                     	;# 
  1869  0006                     	;# 
  1870  0007                     	;# 
  1871  0008                     	;# 
  1872  0009                     	;# 
  1873  000A                     	;# 
  1874  000B                     	;# 
  1875  000C                     	;# 
  1876  000D                     	;# 
  1877  000E                     	;# 
  1878  000F                     	;# 
  1879  0010                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0013                     	;# 
  1883  0014                     	;# 
  1884  0015                     	;# 
  1885  0016                     	;# 
  1886  0016                     	;# 
  1887  0017                     	;# 
  1888  0018                     	;# 
  1889  0019                     	;# 
  1890  001A                     	;# 
  1891  001B                     	;# 
  1892  001C                     	;# 
  1893  008C                     	;# 
  1894  008D                     	;# 
  1895  008E                     	;# 
  1896  008F                     	;# 
  1897  0090                     	;# 
  1898  0091                     	;# 
  1899  0092                     	;# 
  1900  0093                     	;# 
  1901  0094                     	;# 
  1902  0095                     	;# 
  1903  0096                     	;# 
  1904  0097                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  010F                     	;# 
  1916  0110                     	;# 
  1917  0116                     	;# 
  1918  0117                     	;# 
  1919  011D                     	;# 
  1920  018C                     	;# 
  1921  018D                     	;# 
  1922  018F                     	;# 
  1923  0190                     	;# 
  1924  0191                     	;# 
  1925  0191                     	;# 
  1926  0192                     	;# 
  1927  0193                     	;# 
  1928  0193                     	;# 
  1929  0194                     	;# 
  1930  0195                     	;# 
  1931  0196                     	;# 
  1932  0197                     	;# 
  1933  0199                     	;# 
  1934  0199                     	;# 
  1935  0199                     	;# 
  1936  019A                     	;# 
  1937  019A                     	;# 
  1938  019A                     	;# 
  1939  019B                     	;# 
  1940  019B                     	;# 
  1941  019B                     	;# 
  1942  019B                     	;# 
  1943  019B                     	;# 
  1944  019C                     	;# 
  1945  019C                     	;# 
  1946  019C                     	;# 
  1947  019D                     	;# 
  1948  019D                     	;# 
  1949  019D                     	;# 
  1950  019E                     	;# 
  1951  019E                     	;# 
  1952  019E                     	;# 
  1953  019F                     	;# 
  1954  019F                     	;# 
  1955  019F                     	;# 
  1956  020D                     	;# 
  1957  020F                     	;# 
  1958  0210                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0219                     	;# 
  1975  021A                     	;# 
  1976  021B                     	;# 
  1977  021C                     	;# 
  1978  021D                     	;# 
  1979  021E                     	;# 
  1980  021F                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  0291                     	;# 
  1984  0291                     	;# 
  1985  0292                     	;# 
  1986  0293                     	;# 
  1987  0298                     	;# 
  1988  0298                     	;# 
  1989  0299                     	;# 
  1990  029A                     	;# 
  1991  029D                     	;# 
  1992  029E                     	;# 
  1993  029F                     	;# 
  1994  030C                     	;# 
  1995  030D                     	;# 
  1996  0311                     	;# 
  1997  0311                     	;# 
  1998  0312                     	;# 
  1999  0313                     	;# 
  2000  0318                     	;# 
  2001  0318                     	;# 
  2002  0319                     	;# 
  2003  031A                     	;# 
  2004  031C                     	;# 
  2005  031C                     	;# 
  2006  031D                     	;# 
  2007  031E                     	;# 
  2008  038C                     	;# 
  2009  038D                     	;# 
  2010  0394                     	;# 
  2011  0395                     	;# 
  2012  0396                     	;# 
  2013  040C                     	;# 
  2014  040D                     	;# 
  2015  0411                     	;# 
  2016  0411                     	;# 
  2017  0412                     	;# 
  2018  0413                     	;# 
  2019  0414                     	;# 
  2020  0415                     	;# 
  2021  0416                     	;# 
  2022  0417                     	;# 
  2023  0418                     	;# 
  2024  0418                     	;# 
  2025  0419                     	;# 
  2026  041A                     	;# 
  2027  041B                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  048D                     	;# 
  2032  0491                     	;# 
  2033  0491                     	;# 
  2034  0492                     	;# 
  2035  0492                     	;# 
  2036  0493                     	;# 
  2037  0493                     	;# 
  2038  0493                     	;# 
  2039  0494                     	;# 
  2040  0494                     	;# 
  2041  0495                     	;# 
  2042  0495                     	;# 
  2043  0496                     	;# 
  2044  0496                     	;# 
  2045  0497                     	;# 
  2046  0497                     	;# 
  2047  0595                     	;# 
  2048  0596                     	;# 
  2049  0597                     	;# 
  2050  059C                     	;# 
  2051  059D                     	;# 
  2052  059E                     	;# 
  2053  0611                     	;# 
  2054  0611                     	;# 
  2055  0612                     	;# 
  2056  0613                     	;# 
  2057  0614                     	;# 
  2058  0614                     	;# 
  2059  0615                     	;# 
  2060  0616                     	;# 
  2061  0617                     	;# 
  2062  0617                     	;# 
  2063  0618                     	;# 
  2064  0619                     	;# 
  2065  061A                     	;# 
  2066  061A                     	;# 
  2067  061B                     	;# 
  2068  061C                     	;# 
  2069  061D                     	;# 
  2070  061D                     	;# 
  2071  061E                     	;# 
  2072  061F                     	;# 
  2073  0FE4                     	;# 
  2074  0FE5                     	;# 
  2075  0FE6                     	;# 
  2076  0FE7                     	;# 
  2077  0FE8                     	;# 
  2078  0FE9                     	;# 
  2079  0FEA                     	;# 
  2080  0FEB                     	;# 
  2081  0FED                     	;# 
  2082  0FEE                     	;# 
  2083  0FEF                     	;# 
  2084  0000                     	;# 
  2085  0001                     	;# 
  2086  0002                     	;# 
  2087  0003                     	;# 
  2088  0004                     	;# 
  2089  0005                     	;# 
  2090  0006                     	;# 
  2091  0007                     	;# 
  2092  0008                     	;# 
  2093  0009                     	;# 
  2094  000A                     	;# 
  2095  000B                     	;# 
  2096  000C                     	;# 
  2097  000D                     	;# 
  2098  000E                     	;# 
  2099  000F                     	;# 
  2100  0010                     	;# 
  2101  0011                     	;# 
  2102  0012                     	;# 
  2103  0013                     	;# 
  2104  0014                     	;# 
  2105  0015                     	;# 
  2106  0016                     	;# 
  2107  0016                     	;# 
  2108  0017                     	;# 
  2109  0018                     	;# 
  2110  0019                     	;# 
  2111  001A                     	;# 
  2112  001B                     	;# 
  2113  001C                     	;# 
  2114  008C                     	;# 
  2115  008D                     	;# 
  2116  008E                     	;# 
  2117  008F                     	;# 
  2118  0090                     	;# 
  2119  0091                     	;# 
  2120  0092                     	;# 
  2121  0093                     	;# 
  2122  0094                     	;# 
  2123  0095                     	;# 
  2124  0096                     	;# 
  2125  0097                     	;# 
  2126  0099                     	;# 
  2127  009A                     	;# 
  2128  009B                     	;# 
  2129  009B                     	;# 
  2130  009C                     	;# 
  2131  009D                     	;# 
  2132  009E                     	;# 
  2133  010C                     	;# 
  2134  010D                     	;# 
  2135  010E                     	;# 
  2136  010F                     	;# 
  2137  0110                     	;# 
  2138  0116                     	;# 
  2139  0117                     	;# 
  2140  011D                     	;# 
  2141  018C                     	;# 
  2142  018D                     	;# 
  2143  018F                     	;# 
  2144  0190                     	;# 
  2145  0191                     	;# 
  2146  0191                     	;# 
  2147  0192                     	;# 
  2148  0193                     	;# 
  2149  0193                     	;# 
  2150  0194                     	;# 
  2151  0195                     	;# 
  2152  0196                     	;# 
  2153  0197                     	;# 
  2154  0199                     	;# 
  2155  0199                     	;# 
  2156  0199                     	;# 
  2157  019A                     	;# 
  2158  019A                     	;# 
  2159  019A                     	;# 
  2160  019B                     	;# 
  2161  019B                     	;# 
  2162  019B                     	;# 
  2163  019B                     	;# 
  2164  019B                     	;# 
  2165  019C                     	;# 
  2166  019C                     	;# 
  2167  019C                     	;# 
  2168  019D                     	;# 
  2169  019D                     	;# 
  2170  019D                     	;# 
  2171  019E                     	;# 
  2172  019E                     	;# 
  2173  019E                     	;# 
  2174  019F                     	;# 
  2175  019F                     	;# 
  2176  019F                     	;# 
  2177  020D                     	;# 
  2178  020F                     	;# 
  2179  0210                     	;# 
  2180  0211                     	;# 
  2181  0211                     	;# 
  2182  0212                     	;# 
  2183  0212                     	;# 
  2184  0213                     	;# 
  2185  0213                     	;# 
  2186  0214                     	;# 
  2187  0214                     	;# 
  2188  0215                     	;# 
  2189  0215                     	;# 
  2190  0215                     	;# 
  2191  0216                     	;# 
  2192  0216                     	;# 
  2193  0217                     	;# 
  2194  0217                     	;# 
  2195  0219                     	;# 
  2196  021A                     	;# 
  2197  021B                     	;# 
  2198  021C                     	;# 
  2199  021D                     	;# 
  2200  021E                     	;# 
  2201  021F                     	;# 
  2202  028C                     	;# 
  2203  028D                     	;# 
  2204  0291                     	;# 
  2205  0291                     	;# 
  2206  0292                     	;# 
  2207  0293                     	;# 
  2208  0298                     	;# 
  2209  0298                     	;# 
  2210  0299                     	;# 
  2211  029A                     	;# 
  2212  029D                     	;# 
  2213  029E                     	;# 
  2214  029F                     	;# 
  2215  030C                     	;# 
  2216  030D                     	;# 
  2217  0311                     	;# 
  2218  0311                     	;# 
  2219  0312                     	;# 
  2220  0313                     	;# 
  2221  0318                     	;# 
  2222  0318                     	;# 
  2223  0319                     	;# 
  2224  031A                     	;# 
  2225  031C                     	;# 
  2226  031C                     	;# 
  2227  031D                     	;# 
  2228  031E                     	;# 
  2229  038C                     	;# 
  2230  038D                     	;# 
  2231  0394                     	;# 
  2232  0395                     	;# 
  2233  0396                     	;# 
  2234  040C                     	;# 
  2235  040D                     	;# 
  2236  0411                     	;# 
  2237  0411                     	;# 
  2238  0412                     	;# 
  2239  0413                     	;# 
  2240  0414                     	;# 
  2241  0415                     	;# 
  2242  0416                     	;# 
  2243  0417                     	;# 
  2244  0418                     	;# 
  2245  0418                     	;# 
  2246  0419                     	;# 
  2247  041A                     	;# 
  2248  041B                     	;# 
  2249  041C                     	;# 
  2250  041D                     	;# 
  2251  041E                     	;# 
  2252  048D                     	;# 
  2253  0491                     	;# 
  2254  0491                     	;# 
  2255  0492                     	;# 
  2256  0492                     	;# 
  2257  0493                     	;# 
  2258  0493                     	;# 
  2259  0493                     	;# 
  2260  0494                     	;# 
  2261  0494                     	;# 
  2262  0495                     	;# 
  2263  0495                     	;# 
  2264  0496                     	;# 
  2265  0496                     	;# 
  2266  0497                     	;# 
  2267  0497                     	;# 
  2268  0595                     	;# 
  2269  0596                     	;# 
  2270  0597                     	;# 
  2271  059C                     	;# 
  2272  059D                     	;# 
  2273  059E                     	;# 
  2274  0611                     	;# 
  2275  0611                     	;# 
  2276  0612                     	;# 
  2277  0613                     	;# 
  2278  0614                     	;# 
  2279  0614                     	;# 
  2280  0615                     	;# 
  2281  0616                     	;# 
  2282  0617                     	;# 
  2283  0617                     	;# 
  2284  0618                     	;# 
  2285  0619                     	;# 
  2286  061A                     	;# 
  2287  061A                     	;# 
  2288  061B                     	;# 
  2289  061C                     	;# 
  2290  061D                     	;# 
  2291  061D                     	;# 
  2292  061E                     	;# 
  2293  061F                     	;# 
  2294  0FE4                     	;# 
  2295  0FE5                     	;# 
  2296  0FE6                     	;# 
  2297  0FE7                     	;# 
  2298  0FE8                     	;# 
  2299  0FE9                     	;# 
  2300  0FEA                     	;# 
  2301  0FEB                     	;# 
  2302  0FED                     	;# 
  2303  0FEE                     	;# 
  2304  0FEF                     	;# 
  2305  0000                     	;# 
  2306  0001                     	;# 
  2307  0002                     	;# 
  2308  0003                     	;# 
  2309  0004                     	;# 
  2310  0005                     	;# 
  2311  0006                     	;# 
  2312  0007                     	;# 
  2313  0008                     	;# 
  2314  0009                     	;# 
  2315  000A                     	;# 
  2316  000B                     	;# 
  2317  000C                     	;# 
  2318  000D                     	;# 
  2319  000E                     	;# 
  2320  000F                     	;# 
  2321  0010                     	;# 
  2322  0011                     	;# 
  2323  0012                     	;# 
  2324  0013                     	;# 
  2325  0014                     	;# 
  2326  0015                     	;# 
  2327  0016                     	;# 
  2328  0016                     	;# 
  2329  0017                     	;# 
  2330  0018                     	;# 
  2331  0019                     	;# 
  2332  001A                     	;# 
  2333  001B                     	;# 
  2334  001C                     	;# 
  2335  008C                     	;# 
  2336  008D                     	;# 
  2337  008E                     	;# 
  2338  008F                     	;# 
  2339  0090                     	;# 
  2340  0091                     	;# 
  2341  0092                     	;# 
  2342  0093                     	;# 
  2343  0094                     	;# 
  2344  0095                     	;# 
  2345  0096                     	;# 
  2346  0097                     	;# 
  2347  0099                     	;# 
  2348  009A                     	;# 
  2349  009B                     	;# 
  2350  009B                     	;# 
  2351  009C                     	;# 
  2352  009D                     	;# 
  2353  009E                     	;# 
  2354  010C                     	;# 
  2355  010D                     	;# 
  2356  010E                     	;# 
  2357  010F                     	;# 
  2358  0110                     	;# 
  2359  0116                     	;# 
  2360  0117                     	;# 
  2361  011D                     	;# 
  2362  018C                     	;# 
  2363  018D                     	;# 
  2364  018F                     	;# 
  2365  0190                     	;# 
  2366  0191                     	;# 
  2367  0191                     	;# 
  2368  0192                     	;# 
  2369  0193                     	;# 
  2370  0193                     	;# 
  2371  0194                     	;# 
  2372  0195                     	;# 
  2373  0196                     	;# 
  2374  0197                     	;# 
  2375  0199                     	;# 
  2376  0199                     	;# 
  2377  0199                     	;# 
  2378  019A                     	;# 
  2379  019A                     	;# 
  2380  019A                     	;# 
  2381  019B                     	;# 
  2382  019B                     	;# 
  2383  019B                     	;# 
  2384  019B                     	;# 
  2385  019B                     	;# 
  2386  019C                     	;# 
  2387  019C                     	;# 
  2388  019C                     	;# 
  2389  019D                     	;# 
  2390  019D                     	;# 
  2391  019D                     	;# 
  2392  019E                     	;# 
  2393  019E                     	;# 
  2394  019E                     	;# 
  2395  019F                     	;# 
  2396  019F                     	;# 
  2397  019F                     	;# 
  2398  020D                     	;# 
  2399  020F                     	;# 
  2400  0210                     	;# 
  2401  0211                     	;# 
  2402  0211                     	;# 
  2403  0212                     	;# 
  2404  0212                     	;# 
  2405  0213                     	;# 
  2406  0213                     	;# 
  2407  0214                     	;# 
  2408  0214                     	;# 
  2409  0215                     	;# 
  2410  0215                     	;# 
  2411  0215                     	;# 
  2412  0216                     	;# 
  2413  0216                     	;# 
  2414  0217                     	;# 
  2415  0217                     	;# 
  2416  0219                     	;# 
  2417  021A                     	;# 
  2418  021B                     	;# 
  2419  021C                     	;# 
  2420  021D                     	;# 
  2421  021E                     	;# 
  2422  021F                     	;# 
  2423  028C                     	;# 
  2424  028D                     	;# 
  2425  0291                     	;# 
  2426  0291                     	;# 
  2427  0292                     	;# 
  2428  0293                     	;# 
  2429  0298                     	;# 
  2430  0298                     	;# 
  2431  0299                     	;# 
  2432  029A                     	;# 
  2433  029D                     	;# 
  2434  029E                     	;# 
  2435  029F                     	;# 
  2436  030C                     	;# 
  2437  030D                     	;# 
  2438  0311                     	;# 
  2439  0311                     	;# 
  2440  0312                     	;# 
  2441  0313                     	;# 
  2442  0318                     	;# 
  2443  0318                     	;# 
  2444  0319                     	;# 
  2445  031A                     	;# 
  2446  031C                     	;# 
  2447  031C                     	;# 
  2448  031D                     	;# 
  2449  031E                     	;# 
  2450  038C                     	;# 
  2451  038D                     	;# 
  2452  0394                     	;# 
  2453  0395                     	;# 
  2454  0396                     	;# 
  2455  040C                     	;# 
  2456  040D                     	;# 
  2457  0411                     	;# 
  2458  0411                     	;# 
  2459  0412                     	;# 
  2460  0413                     	;# 
  2461  0414                     	;# 
  2462  0415                     	;# 
  2463  0416                     	;# 
  2464  0417                     	;# 
  2465  0418                     	;# 
  2466  0418                     	;# 
  2467  0419                     	;# 
  2468  041A                     	;# 
  2469  041B                     	;# 
  2470  041C                     	;# 
  2471  041D                     	;# 
  2472  041E                     	;# 
  2473  048D                     	;# 
  2474  0491                     	;# 
  2475  0491                     	;# 
  2476  0492                     	;# 
  2477  0492                     	;# 
  2478  0493                     	;# 
  2479  0493                     	;# 
  2480  0493                     	;# 
  2481  0494                     	;# 
  2482  0494                     	;# 
  2483  0495                     	;# 
  2484  0495                     	;# 
  2485  0496                     	;# 
  2486  0496                     	;# 
  2487  0497                     	;# 
  2488  0497                     	;# 
  2489  0595                     	;# 
  2490  0596                     	;# 
  2491  0597                     	;# 
  2492  059C                     	;# 
  2493  059D                     	;# 
  2494  059E                     	;# 
  2495  0611                     	;# 
  2496  0611                     	;# 
  2497  0612                     	;# 
  2498  0613                     	;# 
  2499  0614                     	;# 
  2500  0614                     	;# 
  2501  0615                     	;# 
  2502  0616                     	;# 
  2503  0617                     	;# 
  2504  0617                     	;# 
  2505  0618                     	;# 
  2506  0619                     	;# 
  2507  061A                     	;# 
  2508  061A                     	;# 
  2509  061B                     	;# 
  2510  061C                     	;# 
  2511  061D                     	;# 
  2512  061D                     	;# 
  2513  061E                     	;# 
  2514  061F                     	;# 
  2515  0FE4                     	;# 
  2516  0FE5                     	;# 
  2517  0FE6                     	;# 
  2518  0FE7                     	;# 
  2519  0FE8                     	;# 
  2520  0FE9                     	;# 
  2521  0FEA                     	;# 
  2522  0FEB                     	;# 
  2523  0FED                     	;# 
  2524  0FEE                     	;# 
  2525  0FEF                     	;# 
  2526  0000                     	;# 
  2527  0001                     	;# 
  2528  0002                     	;# 
  2529  0003                     	;# 
  2530  0004                     	;# 
  2531  0005                     	;# 
  2532  0006                     	;# 
  2533  0007                     	;# 
  2534  0008                     	;# 
  2535  0009                     	;# 
  2536  000A                     	;# 
  2537  000B                     	;# 
  2538  000C                     	;# 
  2539  000D                     	;# 
  2540  000E                     	;# 
  2541  000F                     	;# 
  2542  0010                     	;# 
  2543  0011                     	;# 
  2544  0012                     	;# 
  2545  0013                     	;# 
  2546  0014                     	;# 
  2547  0015                     	;# 
  2548  0016                     	;# 
  2549  0016                     	;# 
  2550  0017                     	;# 
  2551  0018                     	;# 
  2552  0019                     	;# 
  2553  001A                     	;# 
  2554  001B                     	;# 
  2555  001C                     	;# 
  2556  008C                     	;# 
  2557  008D                     	;# 
  2558  008E                     	;# 
  2559  008F                     	;# 
  2560  0090                     	;# 
  2561  0091                     	;# 
  2562  0092                     	;# 
  2563  0093                     	;# 
  2564  0094                     	;# 
  2565  0095                     	;# 
  2566  0096                     	;# 
  2567  0097                     	;# 
  2568  0099                     	;# 
  2569  009A                     	;# 
  2570  009B                     	;# 
  2571  009B                     	;# 
  2572  009C                     	;# 
  2573  009D                     	;# 
  2574  009E                     	;# 
  2575  010C                     	;# 
  2576  010D                     	;# 
  2577  010E                     	;# 
  2578  010F                     	;# 
  2579  0110                     	;# 
  2580  0116                     	;# 
  2581  0117                     	;# 
  2582  011D                     	;# 
  2583  018C                     	;# 
  2584  018D                     	;# 
  2585  018F                     	;# 
  2586  0190                     	;# 
  2587  0191                     	;# 
  2588  0191                     	;# 
  2589  0192                     	;# 
  2590  0193                     	;# 
  2591  0193                     	;# 
  2592  0194                     	;# 
  2593  0195                     	;# 
  2594  0196                     	;# 
  2595  0197                     	;# 
  2596  0199                     	;# 
  2597  0199                     	;# 
  2598  0199                     	;# 
  2599  019A                     	;# 
  2600  019A                     	;# 
  2601  019A                     	;# 
  2602  019B                     	;# 
  2603  019B                     	;# 
  2604  019B                     	;# 
  2605  019B                     	;# 
  2606  019B                     	;# 
  2607  019C                     	;# 
  2608  019C                     	;# 
  2609  019C                     	;# 
  2610  019D                     	;# 
  2611  019D                     	;# 
  2612  019D                     	;# 
  2613  019E                     	;# 
  2614  019E                     	;# 
  2615  019E                     	;# 
  2616  019F                     	;# 
  2617  019F                     	;# 
  2618  019F                     	;# 
  2619  020D                     	;# 
  2620  020F                     	;# 
  2621  0210                     	;# 
  2622  0211                     	;# 
  2623  0211                     	;# 
  2624  0212                     	;# 
  2625  0212                     	;# 
  2626  0213                     	;# 
  2627  0213                     	;# 
  2628  0214                     	;# 
  2629  0214                     	;# 
  2630  0215                     	;# 
  2631  0215                     	;# 
  2632  0215                     	;# 
  2633  0216                     	;# 
  2634  0216                     	;# 
  2635  0217                     	;# 
  2636  0217                     	;# 
  2637  0219                     	;# 
  2638  021A                     	;# 
  2639  021B                     	;# 
  2640  021C                     	;# 
  2641  021D                     	;# 
  2642  021E                     	;# 
  2643  021F                     	;# 
  2644  028C                     	;# 
  2645  028D                     	;# 
  2646  0291                     	;# 
  2647  0291                     	;# 
  2648  0292                     	;# 
  2649  0293                     	;# 
  2650  0298                     	;# 
  2651  0298                     	;# 
  2652  0299                     	;# 
  2653  029A                     	;# 
  2654  029D                     	;# 
  2655  029E                     	;# 
  2656  029F                     	;# 
  2657  030C                     	;# 
  2658  030D                     	;# 
  2659  0311                     	;# 
  2660  0311                     	;# 
  2661  0312                     	;# 
  2662  0313                     	;# 
  2663  0318                     	;# 
  2664  0318                     	;# 
  2665  0319                     	;# 
  2666  031A                     	;# 
  2667  031C                     	;# 
  2668  031C                     	;# 
  2669  031D                     	;# 
  2670  031E                     	;# 
  2671  038C                     	;# 
  2672  038D                     	;# 
  2673  0394                     	;# 
  2674  0395                     	;# 
  2675  0396                     	;# 
  2676  040C                     	;# 
  2677  040D                     	;# 
  2678  0411                     	;# 
  2679  0411                     	;# 
  2680  0412                     	;# 
  2681  0413                     	;# 
  2682  0414                     	;# 
  2683  0415                     	;# 
  2684  0416                     	;# 
  2685  0417                     	;# 
  2686  0418                     	;# 
  2687  0418                     	;# 
  2688  0419                     	;# 
  2689  041A                     	;# 
  2690  041B                     	;# 
  2691  041C                     	;# 
  2692  041D                     	;# 
  2693  041E                     	;# 
  2694  048D                     	;# 
  2695  0491                     	;# 
  2696  0491                     	;# 
  2697  0492                     	;# 
  2698  0492                     	;# 
  2699  0493                     	;# 
  2700  0493                     	;# 
  2701  0493                     	;# 
  2702  0494                     	;# 
  2703  0494                     	;# 
  2704  0495                     	;# 
  2705  0495                     	;# 
  2706  0496                     	;# 
  2707  0496                     	;# 
  2708  0497                     	;# 
  2709  0497                     	;# 
  2710  0595                     	;# 
  2711  0596                     	;# 
  2712  0597                     	;# 
  2713  059C                     	;# 
  2714  059D                     	;# 
  2715  059E                     	;# 
  2716  0611                     	;# 
  2717  0611                     	;# 
  2718  0612                     	;# 
  2719  0613                     	;# 
  2720  0614                     	;# 
  2721  0614                     	;# 
  2722  0615                     	;# 
  2723  0616                     	;# 
  2724  0617                     	;# 
  2725  0617                     	;# 
  2726  0618                     	;# 
  2727  0619                     	;# 
  2728  061A                     	;# 
  2729  061A                     	;# 
  2730  061B                     	;# 
  2731  061C                     	;# 
  2732  061D                     	;# 
  2733  061D                     	;# 
  2734  061E                     	;# 
  2735  061F                     	;# 
  2736  0FE4                     	;# 
  2737  0FE5                     	;# 
  2738  0FE6                     	;# 
  2739  0FE7                     	;# 
  2740  0FE8                     	;# 
  2741  0FE9                     	;# 
  2742  0FEA                     	;# 
  2743  0FEB                     	;# 
  2744  0FED                     	;# 
  2745  0FEE                     	;# 
  2746  0FEF                     	;_delayArray
  2747                           
  2748                           	psect	idataCOMMON
  2749  07FE                     __pidataCOMMON:	
  2750                           
  2751                           ;initializer for _blink_rate
  2752  07FE  3414               	retlw	20
  2753                           
  2754                           	psect	idataBANK0
  2755  1E17                     __pidataBANK0:	
  2756                           
  2757                           ;initializer for _baseline_delay_time
  2758  1E17  34D0               	retlw	208
  2759  1E18  3407               	retlw	7
  2760  1E19  3400               	retlw	0
  2761  1E1A  3400               	retlw	0
  2762                           
  2763                           ;initializer for _delay_time
  2764  1E1B  34D0               	retlw	208
  2765  1E1C  3407               	retlw	7
  2766  1E1D  3400               	retlw	0
  2767  1E1E  3400               	retlw	0
  2768                           
  2769                           ;initializer for _bottom_push_state
  2770  1E1F  3406               	retlw	6
  2771  1E20  3400               	retlw	0
  2772                           
  2773                           ;initializer for _long_press_limit
  2774  1E21  34E8               	retlw	232
  2775  1E22  3403               	retlw	3
  2776                           
  2777                           ;initializer for _top_push_state
  2778  1E23  3406               	retlw	6
  2779  1E24  3400               	retlw	0
  2780                           
  2781                           ;initializer for _feedback_state
  2782  1E25  34FF               	retlw	255
  2783                           
  2784                           ;initializer for _longTap_state
  2785  1E26  34FF               	retlw	255
  2786                           
  2787                           ;initializer for _num_taps
  2788  1E27  3404               	retlw	4
  2789                           
  2790                           ;initializer for _switchBypass_state
  2791  1E28  34FF               	retlw	255
  2792                           
  2793                           	psect	idataBANK2
  2794  1E09                     __pidataBANK2:	
  2795                           
  2796                           ;initializer for _knob1_prev
  2797  1E09  34D0               	retlw	208
  2798  1E0A  3407               	retlw	7
  2799                           
  2800                           ;initializer for _knob2_prev
  2801  1E0B  34D0               	retlw	208
  2802  1E0C  3407               	retlw	7
  2803                           
  2804                           ;initializer for _knob3_prev
  2805  1E0D  34D0               	retlw	208
  2806  1E0E  3407               	retlw	7
  2807                           
  2808                           ;initializer for _knob4_prev
  2809  1E0F  34D0               	retlw	208
  2810  1E10  3407               	retlw	7
  2811                           
  2812                           ;initializer for _knob5_prev
  2813  1E11  34D0               	retlw	208
  2814  1E12  3407               	retlw	7
  2815                           
  2816                           ;initializer for _tap_iteration
  2817  1E13  3401               	retlw	1
  2818  1E14  3400               	retlw	0
  2819                           
  2820                           ;initializer for _currentBypassState
  2821  1E15  34FF               	retlw	255
  2822                           
  2823                           ;initializer for _switchTap_state
  2824  1E16  34FF               	retlw	255
  2825                           
  2826                           	psect	idataBANK3
  2827  1DDE                     __pidataBANK3:	
  2828                           
  2829                           ;initializer for _blink_delay
  2830  1DDE  3464               	retlw	100
  2831  1DDF  3400               	retlw	0
  2832                           
  2833                           ;initializer for _delay_time_changed
  2834  1DE0  3401               	retlw	1
  2835  1DE1  3400               	retlw	0
  2836                           
  2837                           ;initializer for _mod_delay_time
  2838  1DE2  34D0               	retlw	208
  2839  1DE3  3407               	retlw	7
  2840                           
  2841                           ;initializer for _switchBypass_up
  2842  1DE4  3401               	retlw	1
  2843  1DE5  3400               	retlw	0
  2844                           
  2845                           ;initializer for _blink_state
  2846  1DE6  3401               	retlw	1
  2847                           
  2848                           	psect	idataBANK4
  2849  1EEE                     __pidataBANK4:	
  2850                           
  2851                           ;initializer for _B25k
  2852  1EEE  34FF               	retlw	255
  2853  1EEF  34FF               	retlw	255
  2854  1EF0  34FF               	retlw	255
  2855  1EF1  34DF               	retlw	223
  2856  1EF2  34AE               	retlw	174
  2857  1EF3  348E               	retlw	142
  2858  1EF4  3478               	retlw	120
  2859  1EF5  3467               	retlw	103
  2860  1EF6  345B               	retlw	91
  2861  1EF7  3450               	retlw	80
  2862  1EF8  3448               	retlw	72
  2863  1EF9  3442               	retlw	66
  2864  1EFA  343C               	retlw	60
  2865  1EFB  3437               	retlw	55
  2866  1EFC  3433               	retlw	51
  2867  1EFD  3430               	retlw	48
  2868  1EFE  342D               	retlw	45
  2869  1EFF  342A               	retlw	42
  2870  1F00  3427               	retlw	39
  2871  1F01  3425               	retlw	37
  2872  1F02  3423               	retlw	35
  2873  1F03  3421               	retlw	33
  2874  1F04  3420               	retlw	32
  2875  1F05  341E               	retlw	30
  2876  1F06  341D               	retlw	29
  2877  1F07  341C               	retlw	28
  2878  1F08  341B               	retlw	27
  2879  1F09  341A               	retlw	26
  2880  1F0A  3419               	retlw	25
  2881  1F0B  3418               	retlw	24
  2882  1F0C  3417               	retlw	23
  2883  1F0D  3416               	retlw	22
  2884  1F0E  3415               	retlw	21
  2885  1F0F  3415               	retlw	21
  2886  1F10  3414               	retlw	20
  2887  1F11  3413               	retlw	19
  2888  1F12  340F               	retlw	15
  2889  1F13  340B               	retlw	11
  2890  1F14  3407               	retlw	7
  2891  1F15  3407               	retlw	7
  2892                           
  2893                           	psect	idataBANK6
  2894  1142                     __pidataBANK6:	
  2895                           
  2896                           ;initializer for _mod1
  2897  1142  3400               	retlw	0
  2898  1143  340A               	retlw	10
  2899  1144  3414               	retlw	20
  2900  1145  341E               	retlw	30
  2901  1146  3428               	retlw	40
  2902  1147  3432               	retlw	50
  2903  1148  343A               	retlw	58
  2904  1149  3442               	retlw	66
  2905  114A  344A               	retlw	74
  2906  114B  3450               	retlw	80
  2907  114C  3456               	retlw	86
  2908  114D  345B               	retlw	91
  2909  114E  345F               	retlw	95
  2910  114F  3461               	retlw	97
  2911  1150  3463               	retlw	99
  2912  1151  3464               	retlw	100
  2913  1152  3463               	retlw	99
  2914  1153  3461               	retlw	97
  2915  1154  345F               	retlw	95
  2916  1155  345B               	retlw	91
  2917  1156  3456               	retlw	86
  2918  1157  3450               	retlw	80
  2919  1158  344A               	retlw	74
  2920  1159  3442               	retlw	66
  2921  115A  343A               	retlw	58
  2922  115B  3432               	retlw	50
  2923  115C  3428               	retlw	40
  2924  115D  341E               	retlw	30
  2925  115E  3414               	retlw	20
  2926  115F  340A               	retlw	10
  2927  1160  3400               	retlw	0
  2928  1161  34F6               	retlw	-10
  2929  1162  34EC               	retlw	-20
  2930  1163  34E2               	retlw	-30
  2931  1164  34D8               	retlw	-40
  2932  1165  34CE               	retlw	-50
  2933  1166  34C6               	retlw	-58
  2934  1167  34BE               	retlw	-66
  2935  1168  34B6               	retlw	-74
  2936  1169  34B0               	retlw	-80
  2937  116A  34AA               	retlw	-86
  2938  116B  34A5               	retlw	-91
  2939  116C  34A1               	retlw	-95
  2940  116D  349F               	retlw	-97
  2941  116E  349D               	retlw	-99
  2942  116F  349C               	retlw	-100
  2943  1170  349D               	retlw	-99
  2944  1171  349F               	retlw	-97
  2945  1172  34A1               	retlw	-95
  2946  1173  34A5               	retlw	-91
  2947  1174  34AA               	retlw	-86
  2948  1175  34B0               	retlw	-80
  2949  1176  34B6               	retlw	-74
  2950  1177  34BE               	retlw	-66
  2951  1178  34C6               	retlw	-58
  2952  1179  34CE               	retlw	-50
  2953  117A  34D8               	retlw	-40
  2954  117B  34E2               	retlw	-30
  2955  117C  34EC               	retlw	-20
  2956  117D  34F6               	retlw	-10
  2957  117E  3400               	retlw	0
  2958                           
  2959                           	psect	idataBANK7
  2960  1105                     __pidataBANK7:	
  2961                           
  2962                           ;initializer for _mod2
  2963  1105  3400               	retlw	0
  2964  1106  3407               	retlw	7
  2965  1107  340D               	retlw	13
  2966  1108  3414               	retlw	20
  2967  1109  341B               	retlw	27
  2968  110A  3421               	retlw	33
  2969  110B  3428               	retlw	40
  2970  110C  342F               	retlw	47
  2971  110D  3435               	retlw	53
  2972  110E  343C               	retlw	60
  2973  110F  3443               	retlw	67
  2974  1110  3449               	retlw	73
  2975  1111  3450               	retlw	80
  2976  1112  3457               	retlw	87
  2977  1113  345D               	retlw	93
  2978  1114  3464               	retlw	100
  2979  1115  345D               	retlw	93
  2980  1116  3457               	retlw	87
  2981  1117  3450               	retlw	80
  2982  1118  3449               	retlw	73
  2983  1119  3443               	retlw	67
  2984  111A  343C               	retlw	60
  2985  111B  3435               	retlw	53
  2986  111C  342F               	retlw	47
  2987  111D  3428               	retlw	40
  2988  111E  3421               	retlw	33
  2989  111F  341B               	retlw	27
  2990  1120  3414               	retlw	20
  2991  1121  340D               	retlw	13
  2992  1122  3407               	retlw	7
  2993  1123  3400               	retlw	0
  2994  1124  34F9               	retlw	-7
  2995  1125  34F3               	retlw	-13
  2996  1126  34EC               	retlw	-20
  2997  1127  34E5               	retlw	-27
  2998  1128  34DF               	retlw	-33
  2999  1129  34D8               	retlw	-40
  3000  112A  34D1               	retlw	-47
  3001  112B  34CB               	retlw	-53
  3002  112C  34C4               	retlw	-60
  3003  112D  34BD               	retlw	-67
  3004  112E  34B7               	retlw	-73
  3005  112F  34B0               	retlw	-80
  3006  1130  34A9               	retlw	-87
  3007  1131  34A3               	retlw	-93
  3008  1132  349C               	retlw	-100
  3009  1133  34A3               	retlw	-93
  3010  1134  34A9               	retlw	-87
  3011  1135  34B0               	retlw	-80
  3012  1136  34B7               	retlw	-73
  3013  1137  34BD               	retlw	-67
  3014  1138  34C4               	retlw	-60
  3015  1139  34CB               	retlw	-53
  3016  113A  34D1               	retlw	-47
  3017  113B  34D8               	retlw	-40
  3018  113C  34DF               	retlw	-33
  3019  113D  34E5               	retlw	-27
  3020  113E  34EC               	retlw	-20
  3021  113F  34F3               	retlw	-13
  3022  1140  34F9               	retlw	-7
  3023  1141  3400               	retlw	0
  3024                           
  3025                           	psect	idataBANK8
  3026  10C8                     __pidataBANK8:	
  3027                           
  3028                           ;initializer for _mod3
  3029  10C8  3400               	retlw	0
  3030  10C9  3403               	retlw	3
  3031  10CA  3407               	retlw	7
  3032  10CB  340A               	retlw	10
  3033  10CC  340D               	retlw	13
  3034  10CD  3411               	retlw	17
  3035  10CE  3414               	retlw	20
  3036  10CF  3417               	retlw	23
  3037  10D0  341B               	retlw	27
  3038  10D1  341E               	retlw	30
  3039  10D2  3421               	retlw	33
  3040  10D3  3425               	retlw	37
  3041  10D4  3428               	retlw	40
  3042  10D5  342B               	retlw	43
  3043  10D6  342F               	retlw	47
  3044  10D7  3432               	retlw	50
  3045  10D8  3435               	retlw	53
  3046  10D9  3439               	retlw	57
  3047  10DA  343C               	retlw	60
  3048  10DB  343F               	retlw	63
  3049  10DC  3443               	retlw	67
  3050  10DD  3446               	retlw	70
  3051  10DE  3449               	retlw	73
  3052  10DF  344D               	retlw	77
  3053  10E0  3450               	retlw	80
  3054  10E1  3453               	retlw	83
  3055  10E2  3457               	retlw	87
  3056  10E3  345A               	retlw	90
  3057  10E4  345D               	retlw	93
  3058  10E5  3461               	retlw	97
  3059  10E6  3464               	retlw	100
  3060  10E7  349F               	retlw	-97
  3061  10E8  34A3               	retlw	-93
  3062  10E9  34A6               	retlw	-90
  3063  10EA  34A9               	retlw	-87
  3064  10EB  34AD               	retlw	-83
  3065  10EC  34B0               	retlw	-80
  3066  10ED  34B3               	retlw	-77
  3067  10EE  34B7               	retlw	-73
  3068  10EF  34BA               	retlw	-70
  3069  10F0  34BD               	retlw	-67
  3070  10F1  34C1               	retlw	-63
  3071  10F2  34C4               	retlw	-60
  3072  10F3  34C7               	retlw	-57
  3073  10F4  34CB               	retlw	-53
  3074  10F5  34CE               	retlw	-50
  3075  10F6  34D1               	retlw	-47
  3076  10F7  34D5               	retlw	-43
  3077  10F8  34D8               	retlw	-40
  3078  10F9  34DB               	retlw	-37
  3079  10FA  34DF               	retlw	-33
  3080  10FB  34E2               	retlw	-30
  3081  10FC  34E5               	retlw	-27
  3082  10FD  34E9               	retlw	-23
  3083  10FE  34EC               	retlw	-20
  3084  10FF  34EF               	retlw	-17
  3085  1100  34F3               	retlw	-13
  3086  1101  34F6               	retlw	-10
  3087  1102  34F9               	retlw	-7
  3088  1103  34FD               	retlw	-3
  3089  1104  3400               	retlw	0
  3090                           
  3091                           	psect	idataBIGRAM
  3092  0DF8                     __pidataBIGRAM:	
  3093                           
  3094                           ;initializer for _delayArray
  3095  0DF8  3422               	retlw	34
  3096  0DF9  3408               	retlw	8
  3097  0DFA  34FC               	retlw	252
  3098  0DFB  3407               	retlw	7
  3099  0DFC  34D8               	retlw	216
  3100  0DFD  3407               	retlw	7
  3101  0DFE  34B5               	retlw	181
  3102  0DFF  3407               	retlw	7
  3103  0E00  3493               	retlw	147
  3104  0E01  3407               	retlw	7
  3105  0E02  3472               	retlw	114
  3106  0E03  3407               	retlw	7
  3107  0E04  3452               	retlw	82
  3108  0E05  3407               	retlw	7
  3109  0E06  3434               	retlw	52
  3110  0E07  3407               	retlw	7
  3111  0E08  3416               	retlw	22
  3112  0E09  3407               	retlw	7
  3113  0E0A  34F9               	retlw	249
  3114  0E0B  3406               	retlw	6
  3115  0E0C  34DD               	retlw	221
  3116  0E0D  3406               	retlw	6
  3117  0E0E  34C2               	retlw	194
  3118  0E0F  3406               	retlw	6
  3119  0E10  34A8               	retlw	168
  3120  0E11  3406               	retlw	6
  3121  0E12  348F               	retlw	143
  3122  0E13  3406               	retlw	6
  3123  0E14  3476               	retlw	118
  3124  0E15  3406               	retlw	6
  3125  0E16  345E               	retlw	94
  3126  0E17  3406               	retlw	6
  3127  0E18  3447               	retlw	71
  3128  0E19  3406               	retlw	6
  3129  0E1A  3430               	retlw	48
  3130  0E1B  3406               	retlw	6
  3131  0E1C  341A               	retlw	26
  3132  0E1D  3406               	retlw	6
  3133  0E1E  3405               	retlw	5
  3134  0E1F  3406               	retlw	6
  3135  0E20  34F0               	retlw	240
  3136  0E21  3405               	retlw	5
  3137  0E22  34DC               	retlw	220
  3138  0E23  3405               	retlw	5
  3139  0E24  34C8               	retlw	200
  3140  0E25  3405               	retlw	5
  3141  0E26  34B5               	retlw	181
  3142  0E27  3405               	retlw	5
  3143  0E28  34A3               	retlw	163
  3144  0E29  3405               	retlw	5
  3145  0E2A  3490               	retlw	144
  3146  0E2B  3405               	retlw	5
  3147  0E2C  347F               	retlw	127
  3148  0E2D  3405               	retlw	5
  3149  0E2E  346D               	retlw	109
  3150  0E2F  3405               	retlw	5
  3151  0E30  345C               	retlw	92
  3152  0E31  3405               	retlw	5
  3153  0E32  344C               	retlw	76
  3154  0E33  3405               	retlw	5
  3155  0E34  343C               	retlw	60
  3156  0E35  3405               	retlw	5
  3157  0E36  342C               	retlw	44
  3158  0E37  3405               	retlw	5
  3159  0E38  341D               	retlw	29
  3160  0E39  3405               	retlw	5
  3161  0E3A  340E               	retlw	14
  3162  0E3B  3405               	retlw	5
  3163  0E3C  34FF               	retlw	255
  3164  0E3D  3404               	retlw	4
  3165  0E3E  34F1               	retlw	241
  3166  0E3F  3404               	retlw	4
  3167  0E40  34E2               	retlw	226
  3168  0E41  3404               	retlw	4
  3169  0E42  34D5               	retlw	213
  3170  0E43  3404               	retlw	4
  3171  0E44  34C7               	retlw	199
  3172  0E45  3404               	retlw	4
  3173  0E46  34BA               	retlw	186
  3174  0E47  3404               	retlw	4
  3175  0E48  34AD               	retlw	173
  3176  0E49  3404               	retlw	4
  3177  0E4A  34A1               	retlw	161
  3178  0E4B  3404               	retlw	4
  3179  0E4C  3494               	retlw	148
  3180  0E4D  3404               	retlw	4
  3181  0E4E  3488               	retlw	136
  3182  0E4F  3404               	retlw	4
  3183  0E50  347D               	retlw	125
  3184  0E51  3404               	retlw	4
  3185  0E52  3471               	retlw	113
  3186  0E53  3404               	retlw	4
  3187  0E54  3466               	retlw	102
  3188  0E55  3404               	retlw	4
  3189  0E56  345A               	retlw	90
  3190  0E57  3404               	retlw	4
  3191  0E58  3450               	retlw	80
  3192  0E59  3404               	retlw	4
  3193  0E5A  3445               	retlw	69
  3194  0E5B  3404               	retlw	4
  3195  0E5C  343A               	retlw	58
  3196  0E5D  3404               	retlw	4
  3197  0E5E  3430               	retlw	48
  3198  0E5F  3404               	retlw	4
  3199  0E60  3426               	retlw	38
  3200  0E61  3404               	retlw	4
  3201  0E62  341C               	retlw	28
  3202  0E63  3404               	retlw	4
  3203  0E64  3412               	retlw	18
  3204  0E65  3404               	retlw	4
  3205  0E66  3409               	retlw	9
  3206  0E67  3404               	retlw	4
  3207  0E68  34FF               	retlw	255
  3208  0E69  3403               	retlw	3
  3209  0E6A  34F6               	retlw	246
  3210  0E6B  3403               	retlw	3
  3211  0E6C  34ED               	retlw	237
  3212  0E6D  3403               	retlw	3
  3213  0E6E  34E4               	retlw	228
  3214  0E6F  3403               	retlw	3
  3215  0E70  34DC               	retlw	220
  3216  0E71  3403               	retlw	3
  3217  0E72  34D3               	retlw	211
  3218  0E73  3403               	retlw	3
  3219  0E74  34CB               	retlw	203
  3220  0E75  3403               	retlw	3
  3221  0E76  34C2               	retlw	194
  3222  0E77  3403               	retlw	3
  3223  0E78  34BA               	retlw	186
  3224  0E79  3403               	retlw	3
  3225  0E7A  34B2               	retlw	178
  3226  0E7B  3403               	retlw	3
  3227  0E7C  34AA               	retlw	170
  3228  0E7D  3403               	retlw	3
  3229  0E7E  34A2               	retlw	162
  3230  0E7F  3403               	retlw	3
  3231  0E80  349B               	retlw	155
  3232  0E81  3403               	retlw	3
  3233  0E82  3493               	retlw	147
  3234  0E83  3403               	retlw	3
  3235  0E84  348C               	retlw	140
  3236  0E85  3403               	retlw	3
  3237  0E86  3485               	retlw	133
  3238  0E87  3403               	retlw	3
  3239  0E88  347E               	retlw	126
  3240  0E89  3403               	retlw	3
  3241  0E8A  3477               	retlw	119
  3242  0E8B  3403               	retlw	3
  3243  0E8C  3470               	retlw	112
  3244  0E8D  3403               	retlw	3
  3245  0E8E  3469               	retlw	105
  3246  0E8F  3403               	retlw	3
  3247  0E90  3462               	retlw	98
  3248  0E91  3403               	retlw	3
  3249  0E92  345C               	retlw	92
  3250  0E93  3403               	retlw	3
  3251  0E94  3455               	retlw	85
  3252  0E95  3403               	retlw	3
  3253  0E96  344F               	retlw	79
  3254  0E97  3403               	retlw	3
  3255  0E98  3448               	retlw	72
  3256  0E99  3403               	retlw	3
  3257  0E9A  3442               	retlw	66
  3258  0E9B  3403               	retlw	3
  3259  0E9C  343C               	retlw	60
  3260  0E9D  3403               	retlw	3
  3261  0E9E  3436               	retlw	54
  3262  0E9F  3403               	retlw	3
  3263  0EA0  3430               	retlw	48
  3264  0EA1  3403               	retlw	3
  3265  0EA2  342A               	retlw	42
  3266  0EA3  3403               	retlw	3
  3267  0EA4  3424               	retlw	36
  3268  0EA5  3403               	retlw	3
  3269  0EA6  341F               	retlw	31
  3270  0EA7  3403               	retlw	3
  3271  0EA8  3419               	retlw	25
  3272  0EA9  3403               	retlw	3
  3273  0EAA  3413               	retlw	19
  3274  0EAB  3403               	retlw	3
  3275  0EAC  340E               	retlw	14
  3276  0EAD  3403               	retlw	3
  3277  0EAE  3409               	retlw	9
  3278  0EAF  3403               	retlw	3
  3279  0EB0  3403               	retlw	3
  3280  0EB1  3403               	retlw	3
  3281  0EB2  34FE               	retlw	254
  3282  0EB3  3402               	retlw	2
  3283  0EB4  34F9               	retlw	249
  3284  0EB5  3402               	retlw	2
  3285  0EB6  34F4               	retlw	244
  3286  0EB7  3402               	retlw	2
  3287  0EB8  34EF               	retlw	239
  3288  0EB9  3402               	retlw	2
  3289  0EBA  34EA               	retlw	234
  3290  0EBB  3402               	retlw	2
  3291  0EBC  34E5               	retlw	229
  3292  0EBD  3402               	retlw	2
  3293  0EBE  34E0               	retlw	224
  3294  0EBF  3402               	retlw	2
  3295  0EC0  34DB               	retlw	219
  3296  0EC1  3402               	retlw	2
  3297  0EC2  34D7               	retlw	215
  3298  0EC3  3402               	retlw	2
  3299  0EC4  34D2               	retlw	210
  3300  0EC5  3402               	retlw	2
  3301  0EC6  34CD               	retlw	205
  3302  0EC7  3402               	retlw	2
  3303  0EC8  34C9               	retlw	201
  3304  0EC9  3402               	retlw	2
  3305  0ECA  34C4               	retlw	196
  3306  0ECB  3402               	retlw	2
  3307  0ECC  34C0               	retlw	192
  3308  0ECD  3402               	retlw	2
  3309  0ECE  34BC               	retlw	188
  3310  0ECF  3402               	retlw	2
  3311  0ED0  34B7               	retlw	183
  3312  0ED1  3402               	retlw	2
  3313  0ED2  34B3               	retlw	179
  3314  0ED3  3402               	retlw	2
  3315  0ED4  34AF               	retlw	175
  3316  0ED5  3402               	retlw	2
  3317  0ED6  34AB               	retlw	171
  3318  0ED7  3402               	retlw	2
  3319  0ED8  34A6               	retlw	166
  3320  0ED9  3402               	retlw	2
  3321  0EDA  34A2               	retlw	162
  3322  0EDB  3402               	retlw	2
  3323  0EDC  349E               	retlw	158
  3324  0EDD  3402               	retlw	2
  3325  0EDE  349A               	retlw	154
  3326  0EDF  3402               	retlw	2
  3327  0EE0  3497               	retlw	151
  3328  0EE1  3402               	retlw	2
  3329  0EE2  3493               	retlw	147
  3330  0EE3  3402               	retlw	2
  3331  0EE4  348F               	retlw	143
  3332  0EE5  3402               	retlw	2
  3333  0EE6  348B               	retlw	139
  3334  0EE7  3402               	retlw	2
  3335  0EE8  3487               	retlw	135
  3336  0EE9  3402               	retlw	2
  3337  0EEA  3484               	retlw	132
  3338  0EEB  3402               	retlw	2
  3339  0EEC  3480               	retlw	128
  3340  0EED  3402               	retlw	2
  3341  0EEE  347C               	retlw	124
  3342  0EEF  3402               	retlw	2
  3343  0EF0  3479               	retlw	121
  3344  0EF1  3402               	retlw	2
  3345  0EF2  3475               	retlw	117
  3346  0EF3  3402               	retlw	2
  3347  0EF4  3472               	retlw	114
  3348  0EF5  3402               	retlw	2
  3349  0EF6  346E               	retlw	110
  3350  0EF7  3402               	retlw	2
  3351  0EF8  346B               	retlw	107
  3352  0EF9  3402               	retlw	2
  3353  0EFA  3467               	retlw	103
  3354  0EFB  3402               	retlw	2
  3355  0EFC  3464               	retlw	100
  3356  0EFD  3402               	retlw	2
  3357  0EFE  3461               	retlw	97
  3358  0EFF  3402               	retlw	2
  3359  0F00  345E               	retlw	94
  3360  0F01  3402               	retlw	2
  3361  0F02  345A               	retlw	90
  3362  0F03  3402               	retlw	2
  3363  0F04  3457               	retlw	87
  3364  0F05  3402               	retlw	2
  3365  0F06  3454               	retlw	84
  3366  0F07  3402               	retlw	2
  3367  0F08  3451               	retlw	81
  3368  0F09  3402               	retlw	2
  3369  0F0A  344E               	retlw	78
  3370  0F0B  3402               	retlw	2
  3371  0F0C  344B               	retlw	75
  3372  0F0D  3402               	retlw	2
  3373  0F0E  3448               	retlw	72
  3374  0F0F  3402               	retlw	2
  3375  0F10  3445               	retlw	69
  3376  0F11  3402               	retlw	2
  3377  0F12  3442               	retlw	66
  3378  0F13  3402               	retlw	2
  3379  0F14  343F               	retlw	63
  3380  0F15  3402               	retlw	2
  3381  0F16  343C               	retlw	60
  3382  0F17  3402               	retlw	2
  3383  0F18  3439               	retlw	57
  3384  0F19  3402               	retlw	2
  3385  0F1A  3436               	retlw	54
  3386  0F1B  3402               	retlw	2
  3387  0F1C  3433               	retlw	51
  3388  0F1D  3402               	retlw	2
  3389  0F1E  3430               	retlw	48
  3390  0F1F  3402               	retlw	2
  3391  0F20  342E               	retlw	46
  3392  0F21  3402               	retlw	2
  3393  0F22  342B               	retlw	43
  3394  0F23  3402               	retlw	2
  3395  0F24  3428               	retlw	40
  3396  0F25  3402               	retlw	2
  3397  0F26  3425               	retlw	37
  3398  0F27  3402               	retlw	2
  3399  0F28  3423               	retlw	35
  3400  0F29  3402               	retlw	2
  3401  0F2A  3420               	retlw	32
  3402  0F2B  3402               	retlw	2
  3403  0F2C  341E               	retlw	30
  3404  0F2D  3402               	retlw	2
  3405  0F2E  341B               	retlw	27
  3406  0F2F  3402               	retlw	2
  3407  0F30  3418               	retlw	24
  3408  0F31  3402               	retlw	2
  3409  0F32  3416               	retlw	22
  3410  0F33  3402               	retlw	2
  3411  0F34  3413               	retlw	19
  3412  0F35  3402               	retlw	2
  3413  0F36  3411               	retlw	17
  3414  0F37  3402               	retlw	2
  3415  0F38  340E               	retlw	14
  3416  0F39  3402               	retlw	2
  3417  0F3A  340C               	retlw	12
  3418  0F3B  3402               	retlw	2
  3419  0F3C  340A               	retlw	10
  3420  0F3D  3402               	retlw	2
  3421  0F3E  3407               	retlw	7
  3422  0F3F  3402               	retlw	2
  3423  0F40  3405               	retlw	5
  3424  0F41  3402               	retlw	2
  3425  0F42  3402               	retlw	2
  3426  0F43  3402               	retlw	2
  3427  0F44  3400               	retlw	0
  3428  0F45  3402               	retlw	2
  3429  0F46  34FE               	retlw	254
  3430  0F47  3401               	retlw	1
  3431  0F48  34FB               	retlw	251
  3432  0F49  3401               	retlw	1
  3433  0F4A  34F9               	retlw	249
  3434  0F4B  3401               	retlw	1
  3435  0F4C  34F7               	retlw	247
  3436  0F4D  3401               	retlw	1
  3437  0F4E  34F5               	retlw	245
  3438  0F4F  3401               	retlw	1
  3439  0F50  34F2               	retlw	242
  3440  0F51  3401               	retlw	1
  3441  0F52  34F0               	retlw	240
  3442  0F53  3401               	retlw	1
  3443  0F54  34EE               	retlw	238
  3444  0F55  3401               	retlw	1
  3445  0F56  34EC               	retlw	236
  3446  0F57  3401               	retlw	1
  3447  0F58  34EA               	retlw	234
  3448  0F59  3401               	retlw	1
  3449  0F5A  34E8               	retlw	232
  3450  0F5B  3401               	retlw	1
  3451  0F5C  34E6               	retlw	230
  3452  0F5D  3401               	retlw	1
  3453  0F5E  34E3               	retlw	227
  3454  0F5F  3401               	retlw	1
  3455  0F60  34E1               	retlw	225
  3456  0F61  3401               	retlw	1
  3457  0F62  34DF               	retlw	223
  3458  0F63  3401               	retlw	1
  3459  0F64  34DD               	retlw	221
  3460  0F65  3401               	retlw	1
  3461  0F66  34DB               	retlw	219
  3462  0F67  3401               	retlw	1
  3463  0F68  34D9               	retlw	217
  3464  0F69  3401               	retlw	1
  3465  0F6A  34D7               	retlw	215
  3466  0F6B  3401               	retlw	1
  3467  0F6C  34D5               	retlw	213
  3468  0F6D  3401               	retlw	1
  3469  0F6E  34D3               	retlw	211
  3470  0F6F  3401               	retlw	1
  3471  0F70  34D2               	retlw	210
  3472  0F71  3401               	retlw	1
  3473  0F72  34D0               	retlw	208
  3474  0F73  3401               	retlw	1
  3475  0F74  34CE               	retlw	206
  3476  0F75  3401               	retlw	1
  3477  0F76  34CC               	retlw	204
  3478  0F77  3401               	retlw	1
  3479  0F78  34CA               	retlw	202
  3480  0F79  3401               	retlw	1
  3481  0F7A  34C8               	retlw	200
  3482  0F7B  3401               	retlw	1
  3483  0F7C  34C6               	retlw	198
  3484  0F7D  3401               	retlw	1
  3485  0F7E  34C4               	retlw	196
  3486  0F7F  3401               	retlw	1
  3487  0F80  34C3               	retlw	195
  3488  0F81  3401               	retlw	1
  3489  0F82  34C1               	retlw	193
  3490  0F83  3401               	retlw	1
  3491  0F84  34BF               	retlw	191
  3492  0F85  3401               	retlw	1
  3493  0F86  34BD               	retlw	189
  3494  0F87  3401               	retlw	1
  3495  0F88  34BC               	retlw	188
  3496  0F89  3401               	retlw	1
  3497  0F8A  34BA               	retlw	186
  3498  0F8B  3401               	retlw	1
  3499  0F8C  34B8               	retlw	184
  3500  0F8D  3401               	retlw	1
  3501  0F8E  34B6               	retlw	182
  3502  0F8F  3401               	retlw	1
  3503  0F90  34B5               	retlw	181
  3504  0F91  3401               	retlw	1
  3505  0F92  34B3               	retlw	179
  3506  0F93  3401               	retlw	1
  3507  0F94  34B1               	retlw	177
  3508  0F95  3401               	retlw	1
  3509  0F96  34B0               	retlw	176
  3510  0F97  3401               	retlw	1
  3511  0F98  34AE               	retlw	174
  3512  0F99  3401               	retlw	1
  3513  0F9A  34AC               	retlw	172
  3514  0F9B  3401               	retlw	1
  3515  0F9C  34AB               	retlw	171
  3516  0F9D  3401               	retlw	1
  3517  0F9E  34A9               	retlw	169
  3518  0F9F  3401               	retlw	1
  3519  0FA0  34A8               	retlw	168
  3520  0FA1  3401               	retlw	1
  3521  0FA2  34A6               	retlw	166
  3522  0FA3  3401               	retlw	1
  3523  0FA4  34A4               	retlw	164
  3524  0FA5  3401               	retlw	1
  3525  0FA6  34A3               	retlw	163
  3526  0FA7  3401               	retlw	1
  3527  0FA8  34A1               	retlw	161
  3528  0FA9  3401               	retlw	1
  3529  0FAA  34A0               	retlw	160
  3530  0FAB  3401               	retlw	1
  3531  0FAC  349E               	retlw	158
  3532  0FAD  3401               	retlw	1
  3533  0FAE  349D               	retlw	157
  3534  0FAF  3401               	retlw	1
  3535  0FB0  349B               	retlw	155
  3536  0FB1  3401               	retlw	1
  3537  0FB2  349A               	retlw	154
  3538  0FB3  3401               	retlw	1
  3539  0FB4  3498               	retlw	152
  3540  0FB5  3401               	retlw	1
  3541  0FB6  3497               	retlw	151
  3542  0FB7  3401               	retlw	1
  3543  0FB8  3495               	retlw	149
  3544  0FB9  3401               	retlw	1
  3545  0FBA  3494               	retlw	148
  3546  0FBB  3401               	retlw	1
  3547  0FBC  3492               	retlw	146
  3548  0FBD  3401               	retlw	1
  3549  0FBE  3491               	retlw	145
  3550  0FBF  3401               	retlw	1
  3551  0FC0  3490               	retlw	144
  3552  0FC1  3401               	retlw	1
  3553  0FC2  348E               	retlw	142
  3554  0FC3  3401               	retlw	1
  3555  0FC4  348D               	retlw	141
  3556  0FC5  3401               	retlw	1
  3557  0FC6  348B               	retlw	139
  3558  0FC7  3401               	retlw	1
  3559  0FC8  348A               	retlw	138
  3560  0FC9  3401               	retlw	1
  3561  0FCA  3489               	retlw	137
  3562  0FCB  3401               	retlw	1
  3563  0FCC  3487               	retlw	135
  3564  0FCD  3401               	retlw	1
  3565  0FCE  3486               	retlw	134
  3566  0FCF  3401               	retlw	1
  3567  0FD0  3485               	retlw	133
  3568  0FD1  3401               	retlw	1
  3569  0FD2  3483               	retlw	131
  3570  0FD3  3401               	retlw	1
  3571  0FD4  3482               	retlw	130
  3572  0FD5  3401               	retlw	1
  3573  0FD6  3481               	retlw	129
  3574  0FD7  3401               	retlw	1
  3575  0FD8  347F               	retlw	127
  3576  0FD9  3401               	retlw	1
  3577  0FDA  347E               	retlw	126
  3578  0FDB  3401               	retlw	1
  3579  0FDC  347D               	retlw	125
  3580  0FDD  3401               	retlw	1
  3581  0FDE  347B               	retlw	123
  3582  0FDF  3401               	retlw	1
  3583  0FE0  347A               	retlw	122
  3584  0FE1  3401               	retlw	1
  3585  0FE2  3479               	retlw	121
  3586  0FE3  3401               	retlw	1
  3587  0FE4  3478               	retlw	120
  3588  0FE5  3401               	retlw	1
  3589  0FE6  3476               	retlw	118
  3590  0FE7  3401               	retlw	1
  3591  0FE8  3475               	retlw	117
  3592  0FE9  3401               	retlw	1
  3593  0FEA  3474               	retlw	116
  3594  0FEB  3401               	retlw	1
  3595  0FEC  3473               	retlw	115
  3596  0FED  3401               	retlw	1
  3597  0FEE  3471               	retlw	113
  3598  0FEF  3401               	retlw	1
  3599  0FF0  3470               	retlw	112
  3600  0FF1  3401               	retlw	1
  3601  0FF2  346F               	retlw	111
  3602  0FF3  3401               	retlw	1
  3603  0FF4  346E               	retlw	110
  3604  0FF5  3401               	retlw	1
  3605  0FF6  3400               	retlw	0
  3606  0FF7  3400               	retlw	0
  3607  0FF8  3400               	retlw	0
  3608  0FF9  3400               	retlw	0
  3609  0FFA  3400               	retlw	0
  3610  0FFB  3400               	retlw	0
  3611  0FFC  3400               	retlw	0
  3612  0FFD  3400               	retlw	0
  3613  0FFE  3400               	retlw	0
  3614  0FFF  3400               	retlw	0
  3615                           
  3616                           	psect	nvBANK3
  3617  01EE                     __pnvBANK3:	
  3618  01EE                     _B25kLength:	
  3619  01EE                     	ds	2
  3620  000B                     _INTCONbits	set	11
  3621  000E                     _PORTCbits	set	14
  3622  000F                     _PORTDbits	set	15
  3623  0010                     _PORTEbits	set	16
  3624  001B                     _PR2	set	27
  3625  001C                     _T2CONbits	set	28
  3626  009D                     _ADCON0bits	set	157
  3627  009E                     _ADCON1bits	set	158
  3628  009C                     _ADRESH	set	156
  3629  009B                     _ADRESL	set	155
  3630  0095                     _OPTION_REGbits	set	149
  3631  0099                     _OSCCONbits	set	153
  3632  008D                     _TRISBbits	set	141
  3633  008E                     _TRISCbits	set	142
  3634  008F                     _TRISDbits	set	143
  3635  0090                     _TRISEbits	set	144
  3636  011D                     _APFCONbits	set	285
  3637  010D                     _LATBbits	set	269
  3638  010F                     _LATDbits	set	271
  3639  0190                     _ANSELEbits	set	400
  3640  0192                     _PMADRH	set	402
  3641  0191                     _PMADRL	set	401
  3642  0195                     _PMCON1bits	set	405
  3643  0196                     _PMCON2	set	406
  3644  0194                     _PMDATH	set	404
  3645  0193                     _PMDATL	set	403
  3646  0291                     _CCPR1	set	657
  3647  0298                     _CCPR2	set	664
  3648  0293                     _CCP1CONbits	set	659
  3649  029A                     _CCP2CONbits	set	666
  3650  029D                     _CCPTMRS0	set	669
  3651  029E                     _CCPTMRS1	set	670
  3652  029F                     _CCPTMRS2	set	671
  3653  0311                     _CCPR3	set	785
  3654  0318                     _CCPR4	set	792
  3655  031C                     _CCPR5	set	796
  3656  0313                     _CCP3CONbits	set	787
  3657  031A                     _CCP4CONbits	set	794
  3658  031E                     _CCP5CONbits	set	798
  3659  030C                     _TRISFbits	set	780
  3660  030D                     _TRISGbits	set	781
  3661  038C                     _LATFbits	set	908
  3662  038D                     _LATGbits	set	909
  3663  040C                     _ANSELFbits	set	1036
  3664  061A                     _CCPR9	set	1562
  3665  061F                     _CCP10CONbits	set	1567
  3666  0613                     _CCP6CONbits	set	1555
  3667  0616                     _CCP7CONbits	set	1558
  3668  0619                     _CCP8CONbits	set	1561
  3669  061C                     _CCP9CONbits	set	1564
  3670                           
  3671                           ; #config settings
  3672  0000                     
  3673                           	psect	cinit
  3674  02F3                     start_initialization:	
  3675  02F3                     __initialization:		;BIGRAM
  3676                           
  3677                           ; Clear objects allocated to BANK0
  3678  02F3  3045               	movlw	low __pbssBANK0
  3679  02F4  0084               	movwf	4
  3680  02F5  3000               	movlw	high __pbssBANK0
  3681  02F6  0085               	movwf	5
  3682  02F7  3013               	movlw	19
  3683  02F8  00FE               	movwf	btemp
  3684  02F9  3000               	movlw	0
  3685  02FA  00FF               	movwf	btemp+1
  3686  02FB  319D  25FD  3182   	fcall	clear_ram0
  3687                           
  3688                           ; Clear objects allocated to BANK2
  3689  02FE  3045               	movlw	low __pbssBANK2
  3690  02FF  0084               	movwf	4
  3691  0300  3001               	movlw	high __pbssBANK2
  3692  0301  0085               	movwf	5
  3693  0302  3019               	movlw	25
  3694  0303  00FE               	movwf	btemp
  3695  0304  3000               	movlw	0
  3696  0305  00FF               	movwf	btemp+1
  3697  0306  319D  25FD  3182   	fcall	clear_ram0
  3698                           
  3699                           ; Clear objects allocated to BANK3
  3700  0309  30A0               	movlw	low __pbssBANK3
  3701  030A  0084               	movwf	4
  3702  030B  3001               	movlw	high __pbssBANK3
  3703  030C  0085               	movwf	5
  3704  030D  303C               	movlw	60
  3705  030E  00FE               	movwf	btemp
  3706  030F  3000               	movlw	0
  3707  0310  00FF               	movwf	btemp+1
  3708  0311  319D  25FD  3182   	fcall	clear_ram0
  3709                           
  3710                           ; Clear objects allocated to BANK5
  3711  0314  30A0               	movlw	low __pbssBANK5
  3712  0315  0084               	movwf	4
  3713  0316  3002               	movlw	high __pbssBANK5
  3714  0317  0085               	movwf	5
  3715  0318  302C               	movlw	44
  3716  0319  00FE               	movwf	btemp
  3717  031A  3000               	movlw	0
  3718  031B  00FF               	movwf	btemp+1
  3719  031C  319D  25FD  3182   	fcall	clear_ram0
  3720                           
  3721                           ; Clear objects allocated to BANK9
  3722  031F  30A0               	movlw	low __pbssBANK9
  3723  0320  0084               	movwf	4
  3724  0321  3004               	movlw	high __pbssBANK9
  3725  0322  0085               	movwf	5
  3726  0323  3040               	movlw	64
  3727  0324  00FE               	movwf	btemp
  3728  0325  3000               	movlw	0
  3729  0326  00FF               	movwf	btemp+1
  3730  0327  319D  25FD  3182   	fcall	clear_ram0
  3731                           
  3732                           ; Initialize objects allocated to BIGRAM
  3733  032A  30F8               	movlw	low __pidataBIGRAM
  3734  032B  0084               	movwf	4
  3735  032C  308D               	movlw	(high __pidataBIGRAM)| (0+128)
  3736  032D  0085               	movwf	5
  3737  032E  30E8               	movlw	low (0+9192)
  3738  032F  0086               	movwf	6
  3739  0330  3023               	movlw	high (0+9192)
  3740  0331  0087               	movwf	7
  3741  0332  3002               	movlw	2
  3742  0333  00FF               	movwf	btemp+1
  3743  0334  3008               	movlw	8
  3744  0335  319D  25F1  3182   	fcall	init_ram
  3745                           
  3746                           ; Initialize objects allocated to COMMON
  3747  0338  3187  27FE  3182   	fcall	__pidataCOMMON	;fetch initializer
  3748  033B  00FD               	movwf	__pdataCOMMON& (0+127)
  3749                           
  3750                           ; Initialize objects allocated to BANK0
  3751  033C  3017               	movlw	low __pidataBANK0
  3752  033D  0084               	movwf	4
  3753  033E  309E               	movlw	(high __pidataBANK0)| (0+128)
  3754  033F  0085               	movwf	5
  3755  0340  3058               	movlw	low __pdataBANK0
  3756  0341  0086               	movwf	6
  3757  0342  3000               	movlw	high __pdataBANK0
  3758  0343  0087               	movwf	7
  3759  0344  3000               	movlw	0
  3760  0345  00FF               	movwf	btemp+1
  3761  0346  3012               	movlw	18
  3762  0347  319D  25F1  3182   	fcall	init_ram
  3763                           
  3764                           ; Initialize objects allocated to BANK2
  3765  034A  3009               	movlw	low __pidataBANK2
  3766  034B  0084               	movwf	4
  3767  034C  309E               	movlw	(high __pidataBANK2)| (0+128)
  3768  034D  0085               	movwf	5
  3769  034E  305E               	movlw	low __pdataBANK2
  3770  034F  0086               	movwf	6
  3771  0350  3001               	movlw	high __pdataBANK2
  3772  0351  0087               	movwf	7
  3773  0352  3000               	movlw	0
  3774  0353  00FF               	movwf	btemp+1
  3775  0354  300E               	movlw	14
  3776  0355  319D  25F1  3182   	fcall	init_ram
  3777                           
  3778                           ; Initialize objects allocated to BANK3
  3779  0358  30DE               	movlw	low __pidataBANK3
  3780  0359  0084               	movwf	4
  3781  035A  309D               	movlw	(high __pidataBANK3)| (0+128)
  3782  035B  0085               	movwf	5
  3783  035C  30DC               	movlw	low __pdataBANK3
  3784  035D  0086               	movwf	6
  3785  035E  3001               	movlw	high __pdataBANK3
  3786  035F  0087               	movwf	7
  3787  0360  3000               	movlw	0
  3788  0361  00FF               	movwf	btemp+1
  3789  0362  3009               	movlw	9
  3790  0363  319D  25F1  3182   	fcall	init_ram
  3791                           
  3792                           ; Initialize objects allocated to BANK4
  3793  0366  30EE               	movlw	low __pidataBANK4
  3794  0367  0084               	movwf	4
  3795  0368  309E               	movlw	(high __pidataBANK4)| (0+128)
  3796  0369  0085               	movwf	5
  3797  036A  3020               	movlw	low __pdataBANK4
  3798  036B  0086               	movwf	6
  3799  036C  3002               	movlw	high __pdataBANK4
  3800  036D  0087               	movwf	7
  3801  036E  3000               	movlw	0
  3802  036F  00FF               	movwf	btemp+1
  3803  0370  3028               	movlw	40
  3804  0371  319D  25F1  3182   	fcall	init_ram
  3805                           
  3806                           ; Initialize objects allocated to BANK6
  3807  0374  3042               	movlw	low __pidataBANK6
  3808  0375  0084               	movwf	4
  3809  0376  3091               	movlw	(high __pidataBANK6)| (0+128)
  3810  0377  0085               	movwf	5
  3811  0378  3020               	movlw	low __pdataBANK6
  3812  0379  0086               	movwf	6
  3813  037A  3003               	movlw	high __pdataBANK6
  3814  037B  0087               	movwf	7
  3815  037C  3000               	movlw	0
  3816  037D  00FF               	movwf	btemp+1
  3817  037E  303D               	movlw	61
  3818  037F  319D  25F1  3182   	fcall	init_ram
  3819                           
  3820                           ; Initialize objects allocated to BANK7
  3821  0382  3005               	movlw	low __pidataBANK7
  3822  0383  0084               	movwf	4
  3823  0384  3091               	movlw	(high __pidataBANK7)| (0+128)
  3824  0385  0085               	movwf	5
  3825  0386  30A0               	movlw	low __pdataBANK7
  3826  0387  0086               	movwf	6
  3827  0388  3003               	movlw	high __pdataBANK7
  3828  0389  0087               	movwf	7
  3829  038A  3000               	movlw	0
  3830  038B  00FF               	movwf	btemp+1
  3831  038C  303D               	movlw	61
  3832  038D  319D  25F1  3182   	fcall	init_ram
  3833                           
  3834                           ; Initialize objects allocated to BANK8
  3835  0390  30C8               	movlw	low __pidataBANK8
  3836  0391  0084               	movwf	4
  3837  0392  3090               	movlw	(high __pidataBANK8)| (0+128)
  3838  0393  0085               	movwf	5
  3839  0394  3020               	movlw	low __pdataBANK8
  3840  0395  0086               	movwf	6
  3841  0396  3004               	movlw	high __pdataBANK8
  3842  0397  0087               	movwf	7
  3843  0398  3000               	movlw	0
  3844  0399  00FF               	movwf	btemp+1
  3845  039A  303D               	movlw	61
  3846  039B  319D  25F1         	fcall	init_ram
  3847  039D                     end_of_initialization:	
  3848                           ;End of C runtime variable initialization code
  3849                           
  3850  039D                     __end_of__initialization:	
  3851  039D  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3852  039E  0020               	movlb	0
  3853  039F  3183  2BA1         	ljmp	_main	;jump to C main() function
  3854                           
  3855                           	psect	dataCOMMON
  3856  007D                     __pdataCOMMON:	
  3857  007D                     _blink_rate:	
  3858  007D                     	ds	1
  3859                           
  3860                           	psect	bssBANK0
  3861  0045                     __pbssBANK0:	
  3862  0045                     _sub_timer:	
  3863  0045                     	ds	4
  3864  0049                     _tap_timer:	
  3865  0049                     	ds	4
  3866  004D                     _timer:	
  3867  004D                     	ds	4
  3868  0051                     _mod_counter:	
  3869  0051                     	ds	2
  3870  0053                     _doubleTap_state:	
  3871  0053                     	ds	1
  3872  0054                     _feedback_start:	
  3873  0054                     	ds	1
  3874  0055                     _longTap_start:	
  3875  0055                     	ds	1
  3876  0056                     _suspend_blink:	
  3877  0056                     	ds	1
  3878  0057                     _switchTap_pressed:	
  3879  0057                     	ds	1
  3880                           
  3881                           	psect	dataBANK0
  3882  0058                     __pdataBANK0:	
  3883  0058                     _baseline_delay_time:	
  3884  0058                     	ds	4
  3885  005C                     _delay_time:	
  3886  005C                     	ds	4
  3887  0060                     _bottom_push_state:	
  3888  0060                     	ds	2
  3889  0062                     _long_press_limit:	
  3890  0062                     	ds	2
  3891  0064                     _top_push_state:	
  3892  0064                     	ds	2
  3893  0066                     _feedback_state:	
  3894  0066                     	ds	1
  3895  0067                     _longTap_state:	
  3896  0067                     	ds	1
  3897  0068                     _num_taps:	
  3898  0068                     	ds	1
  3899  0069                     _switchBypass_state:	
  3900  0069                     	ds	1
  3901                           
  3902                           	psect	bssBANK2
  3903  0145                     __pbssBANK2:	
  3904  0145                     _delay_counter:	
  3905  0145                     	ds	2
  3906  0147                     _feedback_timer:	
  3907  0147                     	ds	2
  3908  0149                     _knob_1_pos:	
  3909  0149                     	ds	2
  3910  014B                     _knob_2_pos:	
  3911  014B                     	ds	2
  3912  014D                     _knob_3_pos:	
  3913  014D                     	ds	2
  3914  014F                     _knob_4_pos:	
  3915  014F                     	ds	2
  3916  0151                     _knob_5_pos:	
  3917  0151                     	ds	2
  3918  0153                     _longTap_timer:	
  3919  0153                     	ds	2
  3920  0155                     _switchBypass_pressed:	
  3921  0155                     	ds	2
  3922  0157                     _bottomTactile_pressed:	
  3923  0157                     	ds	1
  3924  0158                     _bypass_turning_on:	
  3925  0158                     	ds	1
  3926  0159                     _mode2_state:	
  3927  0159                     	ds	1
  3928  015A                     _preset_blink:	
  3929  015A                     	ds	1
  3930  015B                     _preset_programmning_on:	
  3931  015B                     	ds	1
  3932  015C                     _switchTap_down:	
  3933  015C                     	ds	1
  3934  015D                     _topTactile_pressed:	
  3935  015D                     	ds	1
  3936                           
  3937                           	psect	dataBANK2
  3938  015E                     __pdataBANK2:	
  3939  015E                     _knob1_prev:	
  3940  015E                     	ds	2
  3941  0160                     _knob2_prev:	
  3942  0160                     	ds	2
  3943  0162                     _knob3_prev:	
  3944  0162                     	ds	2
  3945  0164                     _knob4_prev:	
  3946  0164                     	ds	2
  3947  0166                     _knob5_prev:	
  3948  0166                     	ds	2
  3949  0168                     _tap_iteration:	
  3950  0168                     	ds	2
  3951  016A                     _currentBypassState:	
  3952  016A                     	ds	1
  3953  016B                     _switchTap_state:	
  3954  016B                     	ds	1
  3955                           
  3956                           	psect	bssBANK3
  3957  01A0                     __pbssBANK3:	
  3958  01A0                     _tap_history:	
  3959  01A0                     	ds	20
  3960  01B4                     _ledState:	
  3961  01B4                     	ds	4
  3962  01B8                     _mod_timer:	
  3963  01B8                     	ds	4
  3964  01BC                     _tap_total:	
  3965  01BC                     	ds	4
  3966  01C0                     _test_timer:	
  3967  01C0                     	ds	4
  3968  01C4                     _adjust_sub_delay:	
  3969  01C4                     	ds	2
  3970  01C6                     _adjusted_pot_value:	
  3971  01C6                     	ds	2
  3972  01C8                     _debounce_bypass:	
  3973  01C8                     	ds	2
  3974  01CA                     _debounce_count:	
  3975  01CA                     	ds	2
  3976  01CC                     _debounce_mode1:	
  3977  01CC                     	ds	2
  3978  01CE                     _debounce_mode2:	
  3979  01CE                     	ds	2
  3980  01D0                     _delayfound:	
  3981  01D0                     	ds	2
  3982  01D2                     _errno:	
  3983  01D2                     	ds	2
  3984  01D4                     _mod_value:	
  3985  01D4                     	ds	2
  3986  01D6                     _reset_sub_delay:	
  3987  01D6                     	ds	2
  3988  01D8                     _switchBypass_toggle:	
  3989  01D8                     	ds	2
  3990  01DA                     _iCnt:	
  3991  01DA                     	ds	1
  3992  01DB                     _mode1_state:	
  3993  01DB                     	ds	1
  3994                           
  3995                           	psect	dataBANK3
  3996  01DC                     __pdataBANK3:	
  3997  01DC                     _blink_delay:	
  3998  01DC                     	ds	2
  3999  01DE                     _delay_time_changed:	
  4000  01DE                     	ds	2
  4001  01E0                     _mod_delay_time:	
  4002  01E0                     	ds	2
  4003  01E2                     _switchBypass_up:	
  4004  01E2                     	ds	2
  4005  01E4                     _blink_state:	
  4006  01E4                     	ds	1
  4007                           
  4008                           	psect	dataBANK4
  4009  0220                     __pdataBANK4:	
  4010  0220                     _B25k:	
  4011  0220                     	ds	40
  4012                           
  4013                           	psect	bssBANK5
  4014  02A0                     __pbssBANK5:	
  4015  02A0                     _tap:	
  4016  02A0                     	ds	44
  4017                           
  4018                           	psect	dataBANK6
  4019  0320                     __pdataBANK6:	
  4020  0320                     _mod1:	
  4021  0320                     	ds	61
  4022                           
  4023                           	psect	dataBANK7
  4024  03A0                     __pdataBANK7:	
  4025  03A0                     _mod2:	
  4026  03A0                     	ds	61
  4027                           
  4028                           	psect	dataBANK8
  4029  0420                     __pdataBANK8:	
  4030  0420                     _mod3:	
  4031  0420                     	ds	61
  4032                           
  4033                           	psect	bssBANK9
  4034  04A0                     __pbssBANK9:	
  4035  04A0                     _myBuf:	
  4036  04A0                     	ds	64
  4037                           
  4038                           	psect	clrtext
  4039  1DFD                     clear_ram0:	
  4040                           ;	Called with FSR0 containing the base address, and
  4041                           ;	btemp/btemp+1 has the size to clear
  4042                           
  4043  1DFD  0064               	clrwdt	;clear the watchdog before getting into this loop
  4044  1DFE                     clrloop0:	
  4045  1DFE  0180               	clrf	0	;clear RAM location pointed to by FSR
  4046  1DFF  3101               	addfsr 0,1
  4047  1E00  3001               	movlw	1
  4048  1E01  02FE               	subwf	126,f
  4049  1E02  3000               	movlw	0
  4050  1E03  3BFF               	subwfb	127,f
  4051  1E04  087F               	movf	127,w
  4052  1E05  047E               	iorwf	126,w
  4053  1E06  1903               	btfsc	3,2
  4054  1E07  3400               	retlw	0	;all done for this memory range, return
  4055  1E08  2DFE               	goto	clrloop0	;have we reached the end yet?
  4056                           
  4057                           	psect	inittext
  4058  1DF1                     init_ram:	
  4059  1DF1  00FE               	movwf	126
  4060  1DF2                     initloop:	
  4061  1DF2  0012               	moviw fsr0++
  4062  1DF3  001E               	movwi fsr1++
  4063  1DF4  3001               	movlw	1
  4064  1DF5  02FE               	subwf	126,f
  4065  1DF6  3000               	movlw	0
  4066  1DF7  3BFF               	subwfb	127,f
  4067  1DF8  087F               	movf	127,w
  4068  1DF9  047E               	iorwf	126,w
  4069  1DFA  1903               	btfsc	3,2
  4070  1DFB  3400               	retlw	0
  4071  1DFC  2DF2               	goto	initloop
  4072                           
  4073                           	psect	cstackBANK3
  4074  01E5                     __pcstackBANK3:	
  4075  01E5                     main@zz:	
  4076                           
  4077                           ; 2 bytes @ 0x0
  4078  01E5                     	ds	2
  4079  01E7                     main@xx:	
  4080                           
  4081                           ; 3 bytes @ 0x2
  4082  01E7                     	ds	3
  4083  01EA                     main@i:	
  4084                           
  4085                           ; 2 bytes @ 0x5
  4086  01EA                     	ds	2
  4087  01EC                     main@i_396:	
  4088                           
  4089                           ; 2 bytes @ 0x7
  4090  01EC                     	ds	2
  4091                           
  4092                           	psect	cstackBANK2
  4093  0120                     __pcstackBANK2:	
  4094  0120                     ___fttol@sign1:	
  4095                           
  4096                           ; 1 bytes @ 0x0
  4097  0120                     	ds	1
  4098  0121                     ___fttol@lval:	
  4099                           
  4100                           ; 4 bytes @ 0x1
  4101  0121                     	ds	4
  4102  0125                     ___fttol@exp1:	
  4103                           
  4104                           ; 1 bytes @ 0x5
  4105  0125                     	ds	1
  4106  0126                     ?_set_subdivision:	
  4107  0126                     ?___altoft:	
  4108                           ; 2 bytes @ 0x6
  4109                           
  4110  0126                     set_subdivision@x:	
  4111                           ; 3 bytes @ 0x6
  4112                           
  4113  0126                     ___altoft@c:	
  4114                           ; 2 bytes @ 0x6
  4115                           
  4116                           
  4117                           ; 4 bytes @ 0x6
  4118  0126                     	ds	2
  4119  0128                     set_subdivision@y:	
  4120                           
  4121                           ; 2 bytes @ 0x8
  4122  0128                     	ds	2
  4123  012A                     ??_set_subdivision:	
  4124  012A                     ??___altoft:	
  4125                           ; 1 bytes @ 0xA
  4126                           
  4127                           
  4128                           ; 1 bytes @ 0xA
  4129  012A                     	ds	2
  4130  012C                     ___altoft@exp:	
  4131                           
  4132                           ; 1 bytes @ 0xC
  4133  012C                     	ds	1
  4134  012D                     ___altoft@sign:	
  4135  012D                     set_subdivision@tmpX:	
  4136                           ; 1 bytes @ 0xD
  4137                           
  4138                           
  4139                           ; 2 bytes @ 0xD
  4140  012D                     	ds	1
  4141  012E                     ?_trunc:	
  4142  012E                     trunc@x:	
  4143                           ; 3 bytes @ 0xE
  4144                           
  4145                           
  4146                           ; 3 bytes @ 0xE
  4147  012E                     	ds	1
  4148  012F                     set_subdivision@scalar:	
  4149                           
  4150                           ; 3 bytes @ 0xF
  4151  012F                     	ds	2
  4152  0131                     trunc@i:	
  4153                           
  4154                           ; 3 bytes @ 0x11
  4155  0131                     	ds	3
  4156  0134                     trunc@expon:	
  4157                           
  4158                           ; 2 bytes @ 0x14
  4159  0134                     	ds	2
  4160  0136                     ??_main:	
  4161                           
  4162                           ; 1 bytes @ 0x16
  4163  0136                     	ds	15
  4164                           
  4165                           	psect	cstackBANK1
  4166  00A0                     __pcstackBANK1:	
  4167  00A0                     ?_set_leds_top:	
  4168  00A0                     ??_ConfigureOscillator:	
  4169                           ; 1 bytes @ 0x0
  4170                           
  4171  00A0                     ??_InitApp:	
  4172                           ; 1 bytes @ 0x0
  4173                           
  4174  00A0                     ??_InitializeTaps:	
  4175                           ; 1 bytes @ 0x0
  4176                           
  4177  00A0                     ??_update_mode:	
  4178                           ; 1 bytes @ 0x0
  4179                           
  4180  00A0                     ??_init_adc:	
  4181                           ; 1 bytes @ 0x0
  4182                           
  4183  00A0                     ??_init_pwm:	
  4184                           ; 1 bytes @ 0x0
  4185                           
  4186  00A0                     ??_init_timer2:	
  4187                           ; 1 bytes @ 0x0
  4188                           
  4189  00A0                     ??_init_timer0:	
  4190                           ; 1 bytes @ 0x0
  4191                           
  4192  00A0                     ?_set_leds_bottom:	
  4193                           ; 1 bytes @ 0x0
  4194                           
  4195  00A0                     ??_getCurrentLEDState:	
  4196                           ; 1 bytes @ 0x0
  4197                           
  4198  00A0                     ??_restoreLEDState:	
  4199                           ; 1 bytes @ 0x0
  4200                           
  4201  00A0                     ?_setFeedbackState:	
  4202                           ; 1 bytes @ 0x0
  4203                           
  4204  00A0                     ?_setLongTapState:	
  4205                           ; 1 bytes @ 0x0
  4206                           
  4207  00A0                     ?_updateSwitchBypassState:	
  4208                           ; 1 bytes @ 0x0
  4209                           
  4210  00A0                     ?_adc_convert:	
  4211                           ; 1 bytes @ 0x0
  4212                           
  4213  00A0                     ?_FLASH_ReadWord:	
  4214                           ; 2 bytes @ 0x0
  4215                           
  4216  00A0                     ?_getSwitchBypassState:	
  4217                           ; 2 bytes @ 0x0
  4218                           
  4219  00A0                     ?___ftpack:	
  4220                           ; 2 bytes @ 0x0
  4221                           
  4222  00A0                     ?_frexp:	
  4223                           ; 3 bytes @ 0x0
  4224                           
  4225  00A0                     ?___ftneg:	
  4226                           ; 3 bytes @ 0x0
  4227                           
  4228  00A0                     ?___lmul:	
  4229                           ; 3 bytes @ 0x0
  4230                           
  4231  00A0                     ?___aldiv:	
  4232                           ; 4 bytes @ 0x0
  4233                           
  4234  00A0                     FLASH_ReadWord@flashAddr:	
  4235                           ; 4 bytes @ 0x0
  4236                           
  4237  00A0                     set_leds_top@x:	
  4238                           ; 2 bytes @ 0x0
  4239                           
  4240  00A0                     set_leds_bottom@x:	
  4241                           ; 2 bytes @ 0x0
  4242                           
  4243  00A0                     updateSwitchBypassState@state:	
  4244                           ; 2 bytes @ 0x0
  4245                           
  4246  00A0                     setFeedbackState@f_state:	
  4247                           ; 2 bytes @ 0x0
  4248                           
  4249  00A0                     setLongTapState@f_state:	
  4250                           ; 2 bytes @ 0x0
  4251                           
  4252  00A0                     ___ftpack@arg:	
  4253                           ; 2 bytes @ 0x0
  4254                           
  4255  00A0                     ___ftneg@f1:	
  4256                           ; 3 bytes @ 0x0
  4257                           
  4258  00A0                     frexp@value:	
  4259                           ; 3 bytes @ 0x0
  4260                           
  4261  00A0                     ___lmul@multiplier:	
  4262                           ; 3 bytes @ 0x0
  4263                           
  4264  00A0                     ___aldiv@divisor:	
  4265                           ; 4 bytes @ 0x0
  4266                           
  4267                           
  4268                           ; 4 bytes @ 0x0
  4269  00A0                     	ds	1
  4270  00A1                     InitializeTaps@itap:	
  4271                           
  4272                           ; 2 bytes @ 0x1
  4273  00A1                     	ds	1
  4274  00A2                     ??_adc_convert:	
  4275  00A2                     ??_FLASH_ReadWord:	
  4276                           ; 1 bytes @ 0x2
  4277                           
  4278  00A2                     ??_set_leds_bottom:	
  4279                           ; 1 bytes @ 0x2
  4280                           
  4281  00A2                     ??_setFeedbackState:	
  4282                           ; 1 bytes @ 0x2
  4283                           
  4284  00A2                     ??_setLongTapState:	
  4285                           ; 1 bytes @ 0x2
  4286                           
  4287  00A2                     ??_updateSwitchBypassState:	
  4288                           ; 1 bytes @ 0x2
  4289                           
  4290  00A2                     ??_getSwitchBypassState:	
  4291                           ; 1 bytes @ 0x2
  4292                           
  4293  00A2                     FLASH_ReadWord@GIEBitValue:	
  4294                           ; 1 bytes @ 0x2
  4295                           
  4296  00A2                     set_leds_top@ledState:	
  4297                           ; 1 bytes @ 0x2
  4298                           
  4299                           
  4300                           ; 2 bytes @ 0x2
  4301  00A2                     	ds	1
  4302  00A3                     ??___ftneg:	
  4303  00A3                     adc_convert@channel:	
  4304                           ; 1 bytes @ 0x3
  4305                           
  4306  00A3                     ___ftpack@exp:	
  4307                           ; 1 bytes @ 0x3
  4308                           
  4309  00A3                     frexp@eptr:	
  4310                           ; 1 bytes @ 0x3
  4311                           
  4312                           
  4313                           ; 1 bytes @ 0x3
  4314  00A3                     	ds	1
  4315  00A4                     ??_set_leds_top:	
  4316  00A4                     ??_ReadSavedSettings:	
  4317                           ; 1 bytes @ 0x4
  4318                           
  4319  00A4                     ??_frexp:	
  4320                           ; 1 bytes @ 0x4
  4321                           
  4322  00A4                     ___ftpack@sign:	
  4323                           ; 1 bytes @ 0x4
  4324                           
  4325  00A4                     ___lmul@multiplicand:	
  4326                           ; 1 bytes @ 0x4
  4327                           
  4328  00A4                     ___aldiv@dividend:	
  4329                           ; 4 bytes @ 0x4
  4330                           
  4331                           
  4332                           ; 4 bytes @ 0x4
  4333  00A4                     	ds	1
  4334  00A5                     ??___ftpack:	
  4335                           
  4336                           ; 1 bytes @ 0x5
  4337  00A5                     	ds	3
  4338  00A8                     ??___lmul:	
  4339  00A8                     ??___aldiv:	
  4340                           ; 1 bytes @ 0x8
  4341                           
  4342  00A8                     ?___awtoft:	
  4343                           ; 1 bytes @ 0x8
  4344                           
  4345  00A8                     ?___ftadd:	
  4346                           ; 3 bytes @ 0x8
  4347                           
  4348  00A8                     ___awtoft@c:	
  4349                           ; 3 bytes @ 0x8
  4350                           
  4351  00A8                     ___ftadd@f1:	
  4352                           ; 2 bytes @ 0x8
  4353                           
  4354  00A8                     ___lmul@product:	
  4355                           ; 3 bytes @ 0x8
  4356                           
  4357                           
  4358                           ; 4 bytes @ 0x8
  4359  00A8                     	ds	1
  4360  00A9                     ___aldiv@counter:	
  4361                           
  4362                           ; 1 bytes @ 0x9
  4363  00A9                     	ds	1
  4364  00AA                     ___aldiv@sign:	
  4365                           
  4366                           ; 1 bytes @ 0xA
  4367  00AA                     	ds	1
  4368  00AB                     ??___awtoft:	
  4369  00AB                     ___ftadd@f2:	
  4370                           ; 1 bytes @ 0xB
  4371                           
  4372  00AB                     ___aldiv@quotient:	
  4373                           ; 3 bytes @ 0xB
  4374                           
  4375                           
  4376                           ; 4 bytes @ 0xB
  4377  00AB                     	ds	1
  4378  00AC                     ?_wait_ms:	
  4379  00AC                     wait_ms@timeSec:	
  4380                           ; 1 bytes @ 0xC
  4381                           
  4382                           
  4383                           ; 2 bytes @ 0xC
  4384  00AC                     	ds	1
  4385  00AD                     ___awtoft@sign:	
  4386                           
  4387                           ; 1 bytes @ 0xD
  4388  00AD                     	ds	1
  4389  00AE                     ??_wait_ms:	
  4390  00AE                     ??___ftadd:	
  4391                           ; 1 bytes @ 0xE
  4392                           
  4393  00AE                     wait_ms@timemsl:	
  4394                           ; 1 bytes @ 0xE
  4395                           
  4396                           
  4397                           ; 4 bytes @ 0xE
  4398  00AE                     	ds	4
  4399  00B2                     ??_read_bottom_tactile:	
  4400  00B2                     ??_read_top_tactile:	
  4401                           ; 1 bytes @ 0x12
  4402                           
  4403  00B2                     ??_star_tactiles:	
  4404                           ; 1 bytes @ 0x12
  4405                           
  4406  00B2                     ??_solidring_tactiles:	
  4407                           ; 1 bytes @ 0x12
  4408                           
  4409  00B2                     ?_setSwitchBypassState:	
  4410                           ; 1 bytes @ 0x12
  4411                           
  4412  00B2                     ?_setDoublePressState:	
  4413                           ; 1 bytes @ 0x12
  4414                           
  4415  00B2                     ___ftadd@sign:	
  4416                           ; 1 bytes @ 0x12
  4417                           
  4418  00B2                     setSwitchBypassState@f_state:	
  4419                           ; 1 bytes @ 0x12
  4420                           
  4421  00B2                     setDoublePressState@f_state:	
  4422                           ; 2 bytes @ 0x12
  4423                           
  4424                           
  4425                           ; 2 bytes @ 0x12
  4426  00B2                     	ds	1
  4427  00B3                     ___ftadd@exp2:	
  4428                           
  4429                           ; 1 bytes @ 0x13
  4430  00B3                     	ds	1
  4431  00B4                     ??_setSwitchBypassState:	
  4432  00B4                     ??_setDoublePressState:	
  4433                           ; 1 bytes @ 0x14
  4434                           
  4435  00B4                     star_tactiles@reverse:	
  4436                           ; 1 bytes @ 0x14
  4437                           
  4438  00B4                     solidring_tactiles@ring_delay:	
  4439                           ; 1 bytes @ 0x14
  4440                           
  4441  00B4                     ___ftadd@exp1:	
  4442                           ; 1 bytes @ 0x14
  4443                           
  4444                           
  4445                           ; 1 bytes @ 0x14
  4446  00B4                     	ds	1
  4447  00B5                     ?___ftmul:	
  4448  00B5                     star_tactiles@iLed:	
  4449                           ; 3 bytes @ 0x15
  4450                           
  4451  00B5                     ___ftmul@f1:	
  4452                           ; 2 bytes @ 0x15
  4453                           
  4454                           
  4455                           ; 3 bytes @ 0x15
  4456  00B5                     	ds	1
  4457  00B6                     ??_initSwitchBypass:	
  4458  00B6                     ??_updateSwitchBypass:	
  4459                           ; 1 bytes @ 0x16
  4460                           
  4461  00B6                     ??_updateSwitchTap:	
  4462                           ; 1 bytes @ 0x16
  4463                           
  4464  00B6                     initSwitchBypass@initState:	
  4465                           ; 1 bytes @ 0x16
  4466                           
  4467                           
  4468                           ; 2 bytes @ 0x16
  4469  00B6                     	ds	1
  4470  00B7                     star_tactiles@iLed_1458:	
  4471                           
  4472                           ; 2 bytes @ 0x17
  4473  00B7                     	ds	1
  4474  00B8                     ___ftmul@f2:	
  4475                           
  4476                           ; 3 bytes @ 0x18
  4477  00B8                     	ds	1
  4478  00B9                     ??_showBootSequence:	
  4479                           
  4480                           ; 1 bytes @ 0x19
  4481  00B9                     	ds	2
  4482  00BB                     ??___ftmul:	
  4483                           
  4484                           ; 1 bytes @ 0x1B
  4485  00BB                     	ds	1
  4486  00BC                     updateSwitchTap@tapCntDivisor:	
  4487                           
  4488                           ; 2 bytes @ 0x1C
  4489  00BC                     	ds	2
  4490  00BE                     updateSwitchTap@iCnt:	
  4491                           
  4492                           ; 1 bytes @ 0x1E
  4493  00BE                     	ds	1
  4494  00BF                     ___ftmul@exp:	
  4495                           
  4496                           ; 1 bytes @ 0x1F
  4497  00BF                     	ds	1
  4498  00C0                     ___ftmul@f3_as_product:	
  4499                           
  4500                           ; 3 bytes @ 0x20
  4501  00C0                     	ds	3
  4502  00C3                     ___ftmul@cntr:	
  4503                           
  4504                           ; 1 bytes @ 0x23
  4505  00C3                     	ds	1
  4506  00C4                     ___ftmul@sign:	
  4507                           
  4508                           ; 1 bytes @ 0x24
  4509  00C4                     	ds	1
  4510  00C5                     ?___ftdiv:	
  4511  00C5                     ___ftdiv@f2:	
  4512                           ; 3 bytes @ 0x25
  4513                           
  4514                           
  4515                           ; 3 bytes @ 0x25
  4516  00C5                     	ds	3
  4517  00C8                     ___ftdiv@f1:	
  4518                           
  4519                           ; 3 bytes @ 0x28
  4520  00C8                     	ds	3
  4521  00CB                     ??___ftdiv:	
  4522                           
  4523                           ; 1 bytes @ 0x2B
  4524  00CB                     	ds	4
  4525  00CF                     ___ftdiv@cntr:	
  4526                           
  4527                           ; 1 bytes @ 0x2F
  4528  00CF                     	ds	1
  4529  00D0                     ___ftdiv@f3:	
  4530                           
  4531                           ; 3 bytes @ 0x30
  4532  00D0                     	ds	3
  4533  00D3                     ___ftdiv@exp:	
  4534                           
  4535                           ; 1 bytes @ 0x33
  4536  00D3                     	ds	1
  4537  00D4                     ___ftdiv@sign:	
  4538                           
  4539                           ; 1 bytes @ 0x34
  4540  00D4                     	ds	1
  4541  00D5                     ?_map:	
  4542  00D5                     map@x:	
  4543                           ; 3 bytes @ 0x35
  4544                           
  4545                           
  4546                           ; 3 bytes @ 0x35
  4547  00D5                     	ds	3
  4548  00D8                     map@in_min:	
  4549                           
  4550                           ; 3 bytes @ 0x38
  4551  00D8                     	ds	3
  4552  00DB                     map@in_max:	
  4553                           
  4554                           ; 3 bytes @ 0x3B
  4555  00DB                     	ds	3
  4556  00DE                     map@out_min:	
  4557                           
  4558                           ; 3 bytes @ 0x3E
  4559  00DE                     	ds	3
  4560  00E1                     map@out_max:	
  4561                           
  4562                           ; 3 bytes @ 0x41
  4563  00E1                     	ds	3
  4564  00E4                     ??_map:	
  4565  00E4                     _map$2203:	
  4566                           ; 1 bytes @ 0x44
  4567                           
  4568                           
  4569                           ; 3 bytes @ 0x44
  4570  00E4                     	ds	3
  4571  00E7                     ?___fttol:	
  4572  00E7                     ___fttol@f1:	
  4573                           ; 4 bytes @ 0x47
  4574                           
  4575                           
  4576                           ; 3 bytes @ 0x47
  4577  00E7                     	ds	4
  4578  00EB                     ??___fttol:	
  4579                           
  4580                           ; 1 bytes @ 0x4B
  4581  00EB                     	ds	4
  4582  00EF                     ??_trunc:	
  4583                           
  4584                           ; 1 bytes @ 0x4F
  4585  00EF                     	ds	1
  4586                           
  4587                           	psect	cstackCOMMON
  4588  0070                     __pcstackCOMMON:	
  4589  0070                     ?_ConfigureOscillator:	
  4590  0070                     ?_InitApp:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_InitializeTaps:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ?_initSwitchBypass:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_ReadSavedSettings:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ?_read_bottom_tactile:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ?_read_top_tactile:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ?_update_mode:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0070                     ?_showBootSequence:	
  4612                           ; 1 bytes @ 0x0
  4613                           
  4614  0070                     ?_updateSwitchBypass:	
  4615                           ; 1 bytes @ 0x0
  4616                           
  4617  0070                     ?_updateSwitchTap:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_init_adc:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     ?_init_pwm:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     ?_init_timer2:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629  0070                     ?_init_timer0:	
  4630                           ; 1 bytes @ 0x0
  4631                           
  4632  0070                     ?_getCurrentLEDState:	
  4633                           ; 1 bytes @ 0x0
  4634                           
  4635  0070                     ?_star_tactiles:	
  4636                           ; 1 bytes @ 0x0
  4637                           
  4638  0070                     ?_solidring_tactiles:	
  4639                           ; 1 bytes @ 0x0
  4640                           
  4641  0070                     ?_restoreLEDState:	
  4642                           ; 1 bytes @ 0x0
  4643                           
  4644  0070                     ?_isr:	
  4645                           ; 1 bytes @ 0x0
  4646                           
  4647  0070                     ?_main:	
  4648                           ; 1 bytes @ 0x0
  4649                           
  4650  0070                     ?i1_set_leds_top:	
  4651                           ; 1 bytes @ 0x0
  4652                           
  4653  0070                     ?___awdiv:	
  4654                           ; 1 bytes @ 0x0
  4655                           
  4656  0070                     ?i1___lmul:	
  4657                           ; 2 bytes @ 0x0
  4658                           
  4659  0070                     ___awdiv@divisor:	
  4660                           ; 4 bytes @ 0x0
  4661                           
  4662  0070                     i1set_leds_top@x:	
  4663                           ; 2 bytes @ 0x0
  4664                           
  4665  0070                     i1___lmul@multiplier:	
  4666                           ; 2 bytes @ 0x0
  4667                           
  4668                           
  4669                           ; 4 bytes @ 0x0
  4670  0070                     	ds	2
  4671  0072                     ___awdiv@dividend:	
  4672  0072                     i1set_leds_top@ledState:	
  4673                           ; 2 bytes @ 0x2
  4674                           
  4675                           
  4676                           ; 2 bytes @ 0x2
  4677  0072                     	ds	2
  4678  0074                     ??___awdiv:	
  4679  0074                     ??i1_set_leds_top:	
  4680                           ; 1 bytes @ 0x4
  4681                           
  4682  0074                     i1___lmul@multiplicand:	
  4683                           ; 1 bytes @ 0x4
  4684                           
  4685                           
  4686                           ; 4 bytes @ 0x4
  4687  0074                     	ds	1
  4688  0075                     ___awdiv@counter:	
  4689                           
  4690                           ; 1 bytes @ 0x5
  4691  0075                     	ds	1
  4692  0076                     ___awdiv@sign:	
  4693                           
  4694                           ; 1 bytes @ 0x6
  4695  0076                     	ds	1
  4696  0077                     ___awdiv@quotient:	
  4697                           
  4698                           ; 2 bytes @ 0x7
  4699  0077                     	ds	1
  4700  0078                     ??i1___lmul:	
  4701  0078                     i1___lmul@product:	
  4702                           ; 1 bytes @ 0x8
  4703                           
  4704                           
  4705                           ; 4 bytes @ 0x8
  4706  0078                     	ds	4
  4707  007C                     ??i1___aldiv:	
  4708                           
  4709                           ; 1 bytes @ 0xC
  4710  007C                     	ds	1
  4711                           
  4712                           	psect	cstackBANK0
  4713  0020                     __pcstackBANK0:	
  4714  0020                     ?i1___aldiv:	
  4715  0020                     i1___aldiv@divisor:	
  4716                           ; 4 bytes @ 0x0
  4717                           
  4718                           
  4719                           ; 4 bytes @ 0x0
  4720  0020                     	ds	4
  4721  0024                     i1___aldiv@dividend:	
  4722                           
  4723                           ; 4 bytes @ 0x4
  4724  0024                     	ds	4
  4725  0028                     i1___aldiv@counter:	
  4726                           
  4727                           ; 1 bytes @ 0x8
  4728  0028                     	ds	1
  4729  0029                     i1___aldiv@sign:	
  4730                           
  4731                           ; 1 bytes @ 0x9
  4732  0029                     	ds	1
  4733  002A                     i1___aldiv@quotient:	
  4734                           
  4735                           ; 4 bytes @ 0xA
  4736  002A                     	ds	4
  4737  002E                     ?_modulation:	
  4738  002E                     modulation@x:	
  4739                           ; 4 bytes @ 0xE
  4740                           
  4741                           
  4742                           ; 4 bytes @ 0xE
  4743  002E                     	ds	4
  4744  0032                     modulation@y:	
  4745                           
  4746                           ; 4 bytes @ 0x12
  4747  0032                     	ds	4
  4748  0036                     ??_modulation:	
  4749                           
  4750                           ; 1 bytes @ 0x16
  4751  0036                     	ds	4
  4752  003A                     ??_isr:	
  4753                           
  4754                           ; 1 bytes @ 0x1A
  4755  003A                     	ds	9
  4756  0043                     isr@tmpSubDelay:	
  4757                           
  4758                           ; 2 bytes @ 0x23
  4759  0043                     	ds	2
  4760                           
  4761                           	psect	maintext
  4762  03A1                     __pmaintext:	
  4763 ;;
  4764 ;;Main: autosize = 0, tempsize = 15, incstack = 0, save=0
  4765 ;;
  4766 ;; *************** function _main *****************
  4767 ;; Defined at:
  4768 ;;		line 83 in file "main.c"
  4769 ;; Parameters:    Size  Location     Type
  4770 ;;		None
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  i               2    7[BANK3 ] int 
  4773 ;;  i               2    5[BANK3 ] int 
  4774 ;;  xx              3    2[BANK3 ] float 
  4775 ;;  zz              2    0[BANK3 ] int 
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      void 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : B1F/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  4785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4786 ;;      Locals:         0       0       0       0       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4787 ;;      Temps:          0       0       0      15       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4788 ;;      Totals:         0       0       0      15       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  4789 ;;Total ram usage:       24 bytes
  4790 ;; Hardware stack levels required when called:    7
  4791 ;; This function calls:
  4792 ;;		_ConfigureOscillator
  4793 ;;		_InitApp
  4794 ;;		_InitializeTaps
  4795 ;;		_ReadSavedSettings
  4796 ;;		___awtoft
  4797 ;;		___fttol
  4798 ;;		_adc_convert
  4799 ;;		_initSwitchBypass
  4800 ;;		_map
  4801 ;;		_read_bottom_tactile
  4802 ;;		_read_top_tactile
  4803 ;;		_set_subdivision
  4804 ;;		_showBootSequence
  4805 ;;		_trunc
  4806 ;;		_updateSwitchBypass
  4807 ;;		_updateSwitchTap
  4808 ;;		_update_mode
  4809 ;; This function is called by:
  4810 ;;		Startup code after reset
  4811 ;; This function uses a non-reentrant model
  4812 ;;
  4813                           
  4814                           
  4815                           ;psect for function _main
  4816  03A1                     _main:	
  4817                           
  4818                           ;main.c: 84: B25kLength = sizeof(B25k)/sizeof(B25k[0]);
  4819                           
  4820                           ;incstack = 0
  4821                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4822  03A1  3028               	movlw	40
  4823  03A2  0023               	movlb	3	; select bank3
  4824  03A3  00EE               	movwf	_B25kLength^(0+384)
  4825  03A4  3000               	movlw	0
  4826  03A5  00EF               	movwf	(_B25kLength^(0+384)+1)
  4827                           
  4828                           ;main.c: 85: float xx = 100 * 0.5;
  4829  03A6  3000               	movlw	0
  4830  03A7  00E7               	movwf	main@xx^(0+384)
  4831  03A8  3048               	movlw	72
  4832  03A9  00E8               	movwf	(main@xx+1)^(0+384)
  4833  03AA  3042               	movlw	66
  4834  03AB  00E9               	movwf	(main@xx+2)^(0+384)
  4835                           
  4836                           ;main.c: 86: int zz = 9;
  4837  03AC  3009               	movlw	9
  4838  03AD  00E5               	movwf	main@zz^(0+384)
  4839  03AE  3000               	movlw	0
  4840  03AF  00E6               	movwf	(main@zz^(0+384)+1)
  4841                           
  4842                           ;main.c: 87: if (trunc(xx) == xx) {
  4843  03B0  0867               	movf	main@xx^(0+384),w
  4844  03B1  0022               	movlb	2	; select bank2
  4845  03B2  00AE               	movwf	trunc@x^(0+256)
  4846  03B3  0023               	movlb	3	; select bank3
  4847  03B4  0868               	movf	(main@xx+1)^(0+384),w
  4848  03B5  0022               	movlb	2	; select bank2
  4849  03B6  00AF               	movwf	(trunc@x+1)^(0+256)
  4850  03B7  0023               	movlb	3	; select bank3
  4851  03B8  0869               	movf	(main@xx+2)^(0+384),w
  4852  03B9  0022               	movlb	2	; select bank2
  4853  03BA  00B0               	movwf	(trunc@x+2)^(0+256)
  4854  03BB  3194  2447  3183   	fcall	_trunc
  4855  03BE  0023               	movlb	3	; select bank3
  4856  03BF  0869               	movf	(main@xx+2)^(0+384),w
  4857  03C0  0022               	movlb	2	; select bank2
  4858  03C1  0630               	xorwf	(?_trunc+2)^(0+256),w
  4859  03C2  1D03               	skipz
  4860  03C3  2BCE               	goto	u6755
  4861  03C4  0023               	movlb	3	; select bank3
  4862  03C5  0868               	movf	(main@xx+1)^(0+384),w
  4863  03C6  0022               	movlb	2	; select bank2
  4864  03C7  062F               	xorwf	(?_trunc+1)^(0+256),w
  4865  03C8  1D03               	skipz
  4866  03C9  2BCE               	goto	u6755
  4867  03CA  0023               	movlb	3	; select bank3
  4868  03CB  0867               	movf	main@xx^(0+384),w
  4869  03CC  0022               	movlb	2	; select bank2
  4870  03CD  062E               	xorwf	?_trunc^(0+256),w
  4871  03CE                     u6755:	
  4872  03CE  1D03               	skipz
  4873  03CF  2BD3               	goto	l5929
  4874                           
  4875                           ;main.c: 88: zz = 0;
  4876  03D0  0023               	movlb	3	; select bank3
  4877  03D1  01E5               	clrf	main@zz^(0+384)
  4878  03D2  01E6               	clrf	(main@zz+1)^(0+384)
  4879  03D3                     l5929:	
  4880                           
  4881                           ;main.c: 89: }
  4882                           ;main.c: 90: ConfigureOscillator();
  4883  03D3  319D  25C1  3183   	fcall	_ConfigureOscillator
  4884                           
  4885                           ;main.c: 91: InitApp();
  4886  03D6  319F  2770  3183   	fcall	_InitApp
  4887                           
  4888                           ;main.c: 93: PORTEbits.RE0 = 1;
  4889  03D9  0020               	movlb	0	; select bank0
  4890  03DA  1410               	bsf	16,0	;volatile
  4891                           
  4892                           ;main.c: 94: PORTEbits.RE1 = 1;
  4893  03DB  1490               	bsf	16,1	;volatile
  4894                           
  4895                           ;main.c: 95: PORTDbits.RD6 = 1;
  4896  03DC  170F               	bsf	15,6	;volatile
  4897                           
  4898                           ;main.c: 96: PORTDbits.RD5 = 1;
  4899  03DD  168F               	bsf	15,5	;volatile
  4900                           
  4901                           ;main.c: 97: PORTCbits.RC0 = 1;
  4902  03DE  140E               	bsf	14,0	;volatile
  4903                           
  4904                           ;main.c: 98: PORTDbits.RD7 = 1;
  4905  03DF  178F               	bsf	15,7	;volatile
  4906                           
  4907                           ;main.c: 100: InitializeTaps();
  4908  03E0  319E  26C8  3183   	fcall	_InitializeTaps
  4909                           
  4910                           ;main.c: 101: initSwitchBypass();
  4911  03E3  3188  2002  3183   	fcall	_initSwitchBypass
  4912                           
  4913                           ;main.c: 104: ReadSavedSettings();
  4914  03E6  3195  255C  3183   	fcall	_ReadSavedSettings
  4915  03E9                     l5951:	
  4916                           ;main.c: 106: while (1) {
  4917                           
  4918                           
  4919                           ;main.c: 107: read_bottom_tactile();
  4920  03E9  3192  2282  3183   	fcall	_read_bottom_tactile
  4921                           
  4922                           ;main.c: 108: read_top_tactile();
  4923  03EC  3193  23A6  3183   	fcall	_read_top_tactile
  4924                           
  4925                           ;main.c: 111: update_mode();
  4926  03EF  3192  2241  3183   	fcall	_update_mode
  4927                           
  4928                           ;main.c: 113: if (PORTDbits.RD7 == 0) {
  4929  03F2  0020               	movlb	0	; select bank0
  4930  03F3  1B8F               	btfsc	15,7	;volatile
  4931  03F4  2C13               	goto	l5965
  4932                           
  4933                           ;main.c: 114: debounce_mode1++;
  4934  03F5  3001               	movlw	1
  4935  03F6  0023               	movlb	3	; select bank3
  4936  03F7  07CC               	addwf	_debounce_mode1^(0+384),f
  4937  03F8  3000               	movlw	0
  4938  03F9  3DCD               	addwfc	(_debounce_mode1+1)^(0+384),f
  4939                           
  4940                           ;main.c: 115: if (debounce_mode1 > 25) {
  4941  03FA  084D               	movf	(_debounce_mode1+1)^(0+384),w
  4942  03FB  3A80               	xorlw	128
  4943  03FC  0022               	movlb	2	; select bank2
  4944  03FD  00B6               	movwf	??_main^(0+256)
  4945  03FE  3080               	movlw	128
  4946  03FF  0236               	subwf	??_main^(0+256),w
  4947  0400  1D03               	skipz
  4948  0401  2C05               	goto	u6775
  4949  0402  301A               	movlw	26
  4950  0403  0023               	movlb	3	; select bank3
  4951  0404  024C               	subwf	_debounce_mode1^(0+384),w
  4952  0405                     u6775:	
  4953  0405  1C03               	skipc
  4954  0406  2C16               	goto	l5967
  4955                           
  4956                           ;main.c: 116: debounce_mode1 = 25;
  4957  0407  3019               	movlw	25
  4958  0408  0023               	movlb	3	; select bank3
  4959  0409  00CC               	movwf	_debounce_mode1^(0+384)
  4960  040A  3000               	movlw	0
  4961  040B  00CD               	movwf	(_debounce_mode1^(0+384)+1)
  4962                           
  4963                           ;main.c: 120: showBootSequence();
  4964  040C  319F  2716  3183   	fcall	_showBootSequence
  4965  040F                     l311:	
  4966                           ;main.c: 123: while (PORTDbits.RD7 == 0) {
  4967                           
  4968  040F  0020               	movlb	0	; select bank0
  4969  0410  1B8F               	btfsc	15,7	;volatile
  4970  0411  2C16               	goto	l5967
  4971  0412  2C0F               	goto	l311
  4972  0413                     l5965:	
  4973                           ;main.c: 124: }
  4974                           ;main.c: 125: }
  4975                           ;main.c: 126: } else {
  4976                           
  4977                           
  4978                           ;main.c: 127: debounce_mode1 = 0;
  4979  0413  0023               	movlb	3	; select bank3
  4980  0414  01CC               	clrf	_debounce_mode1^(0+384)
  4981  0415  01CD               	clrf	(_debounce_mode1+1)^(0+384)
  4982  0416                     l5967:	
  4983                           
  4984                           ;main.c: 128: }
  4985                           ;main.c: 130: updateSwitchBypass();
  4986  0416  318A  2234  3183   	fcall	_updateSwitchBypass
  4987                           
  4988                           ;main.c: 131: updateSwitchTap();
  4989  0419  318C  2415  3183   	fcall	_updateSwitchTap
  4990                           
  4991                           ;main.c: 225: knob_1_pos = adc_convert(0);
  4992  041C  3000               	movlw	0
  4993  041D  319E  2629  3183   	fcall	_adc_convert
  4994  0420  0021               	movlb	1	; select bank1
  4995  0421  0821               	movf	(?_adc_convert+1)^(0+128),w
  4996  0422  0022               	movlb	2	; select bank2
  4997  0423  00CA               	movwf	(_knob_1_pos+1)^(0+256)
  4998  0424  0021               	movlb	1	; select bank1
  4999  0425  0820               	movf	?_adc_convert^(0+128),w
  5000  0426  0022               	movlb	2	; select bank2
  5001  0427  00C9               	movwf	_knob_1_pos^(0+256)
  5002                           
  5003                           ;main.c: 226: knob_2_pos = adc_convert(1);
  5004  0428  3001               	movlw	1
  5005  0429  319E  2629  3183   	fcall	_adc_convert
  5006  042C  0021               	movlb	1	; select bank1
  5007  042D  0821               	movf	(?_adc_convert+1)^(0+128),w
  5008  042E  0022               	movlb	2	; select bank2
  5009  042F  00CC               	movwf	(_knob_2_pos+1)^(0+256)
  5010  0430  0021               	movlb	1	; select bank1
  5011  0431  0820               	movf	?_adc_convert^(0+128),w
  5012  0432  0022               	movlb	2	; select bank2
  5013  0433  00CB               	movwf	_knob_2_pos^(0+256)
  5014                           
  5015                           ;main.c: 227: knob_3_pos = adc_convert(2);
  5016  0434  3002               	movlw	2
  5017  0435  319E  2629  3183   	fcall	_adc_convert
  5018  0438  0021               	movlb	1	; select bank1
  5019  0439  0821               	movf	(?_adc_convert+1)^(0+128),w
  5020  043A  0022               	movlb	2	; select bank2
  5021  043B  00CE               	movwf	(_knob_3_pos+1)^(0+256)
  5022  043C  0021               	movlb	1	; select bank1
  5023  043D  0820               	movf	?_adc_convert^(0+128),w
  5024  043E  0022               	movlb	2	; select bank2
  5025  043F  00CD               	movwf	_knob_3_pos^(0+256)
  5026                           
  5027                           ;main.c: 228: knob_4_pos = adc_convert(3);
  5028  0440  3003               	movlw	3
  5029  0441  319E  2629  3183   	fcall	_adc_convert
  5030  0444  0021               	movlb	1	; select bank1
  5031  0445  0821               	movf	(?_adc_convert+1)^(0+128),w
  5032  0446  0022               	movlb	2	; select bank2
  5033  0447  00D0               	movwf	(_knob_4_pos+1)^(0+256)
  5034  0448  0021               	movlb	1	; select bank1
  5035  0449  0820               	movf	?_adc_convert^(0+128),w
  5036  044A  0022               	movlb	2	; select bank2
  5037  044B  00CF               	movwf	_knob_4_pos^(0+256)
  5038                           
  5039                           ;main.c: 229: knob_5_pos = adc_convert(4);
  5040  044C  3004               	movlw	4
  5041  044D  319E  2629  3183   	fcall	_adc_convert
  5042  0450  0021               	movlb	1	; select bank1
  5043  0451  0821               	movf	(?_adc_convert+1)^(0+128),w
  5044  0452  0022               	movlb	2	; select bank2
  5045  0453  00D2               	movwf	(_knob_5_pos+1)^(0+256)
  5046  0454  0021               	movlb	1	; select bank1
  5047  0455  0820               	movf	?_adc_convert^(0+128),w
  5048  0456  0022               	movlb	2	; select bank2
  5049  0457  00D1               	movwf	_knob_5_pos^(0+256)
  5050                           
  5051                           ;main.c: 256: LATBbits.LATB1 = 0;
  5052  0458  108D               	bcf	13,1	;volatile
  5053                           
  5054                           ;main.c: 257: if ((knob_1_pos - knob1_prev) >= 4 || (knob_1_pos - knob1_prev) <= -4) {
  5055  0459  095E               	comf	_knob1_prev^(0+256),w	;volatile
  5056  045A  00B6               	movwf	??_main^(0+256)
  5057  045B  095F               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5058  045C  00B7               	movwf	(??_main^(0+256)+1)
  5059  045D  0AB6               	incf	??_main^(0+256),f
  5060  045E  1903               	skipnz
  5061  045F  0AB7               	incf	(??_main^(0+256)+1),f
  5062  0460  0849               	movf	_knob_1_pos^(0+256),w
  5063  0461  0736               	addwf	??_main^(0+256),w
  5064  0462  00B8               	movwf	(??_main+2)^(0+256)
  5065  0463  084A               	movf	(_knob_1_pos+1)^(0+256),w
  5066  0464  3D37               	addwfc	(??_main+1)^(0+256),w
  5067  0465  00B9               	movwf	(??_main+3)^(0+256)
  5068  0466  0839               	movf	(??_main+3)^(0+256),w
  5069  0467  3A80               	xorlw	128
  5070  0468  00BA               	movwf	(??_main+4)^(0+256)
  5071  0469  3080               	movlw	128
  5072  046A  023A               	subwf	(??_main+4)^(0+256),w
  5073  046B  1D03               	skipz
  5074  046C  2C6F               	goto	u6795
  5075  046D  3004               	movlw	4
  5076  046E  0238               	subwf	(??_main+2)^(0+256),w
  5077  046F                     u6795:	
  5078  046F  1803               	skipnc
  5079  0470  2C8A               	goto	l5987
  5080  0471  0022               	movlb	2	; select bank2
  5081  0472  095E               	comf	_knob1_prev^(0+256),w	;volatile
  5082  0473  00B6               	movwf	??_main^(0+256)
  5083  0474  095F               	comf	(_knob1_prev+1)^(0+256),w	;volatile
  5084  0475  00B7               	movwf	(??_main^(0+256)+1)
  5085  0476  0AB6               	incf	??_main^(0+256),f
  5086  0477  1903               	skipnz
  5087  0478  0AB7               	incf	(??_main^(0+256)+1),f
  5088  0479  0849               	movf	_knob_1_pos^(0+256),w
  5089  047A  0736               	addwf	??_main^(0+256),w
  5090  047B  00B8               	movwf	(??_main+2)^(0+256)
  5091  047C  084A               	movf	(_knob_1_pos+1)^(0+256),w
  5092  047D  3D37               	addwfc	(??_main+1)^(0+256),w
  5093  047E  00B9               	movwf	(??_main+3)^(0+256)
  5094  047F  0839               	movf	(??_main+3)^(0+256),w
  5095  0480  3A80               	xorlw	128
  5096  0481  00BA               	movwf	(??_main+4)^(0+256)
  5097  0482  307F               	movlw	127
  5098  0483  023A               	subwf	(??_main+4)^(0+256),w
  5099  0484  1D03               	skipz
  5100  0485  2C88               	goto	u6805
  5101  0486  30FD               	movlw	253
  5102  0487  0238               	subwf	(??_main+2)^(0+256),w
  5103  0488                     u6805:	
  5104  0488  1803               	skipnc
  5105  0489  2CDB               	goto	l5995
  5106  048A                     l5987:	
  5107                           
  5108                           ;main.c: 258: knob1_prev = knob_1_pos;
  5109  048A  0022               	movlb	2	; select bank2
  5110  048B  084A               	movf	(_knob_1_pos+1)^(0+256),w
  5111  048C  00DF               	movwf	(_knob1_prev+1)^(0+256)	;volatile
  5112  048D  0849               	movf	_knob_1_pos^(0+256),w
  5113  048E  00DE               	movwf	_knob1_prev^(0+256)	;volatile
  5114                           
  5115                           ;main.c: 259: baseline_delay_time = (int)map(knob1_prev, 0, 1023, 1172, 200);
  5116  048F  3000               	movlw	0
  5117  0490  0021               	movlb	1	; select bank1
  5118  0491  00E1               	movwf	map@out_max^(0+128)
  5119  0492  3048               	movlw	72
  5120  0493  00E2               	movwf	(map@out_max+1)^(0+128)
  5121  0494  3043               	movlw	67
  5122  0495  00E3               	movwf	(map@out_max+2)^(0+128)
  5123  0496  3080               	movlw	128
  5124  0497  00DE               	movwf	map@out_min^(0+128)
  5125  0498  3092               	movlw	146
  5126  0499  00DF               	movwf	(map@out_min+1)^(0+128)
  5127  049A  3044               	movlw	68
  5128  049B  00E0               	movwf	(map@out_min+2)^(0+128)
  5129  049C  30C0               	movlw	192
  5130  049D  00DB               	movwf	map@in_max^(0+128)
  5131  049E  307F               	movlw	127
  5132  049F  00DC               	movwf	(map@in_max+1)^(0+128)
  5133  04A0  3044               	movlw	68
  5134  04A1  00DD               	movwf	(map@in_max+2)^(0+128)
  5135  04A2  3000               	movlw	0
  5136  04A3  00D8               	movwf	map@in_min^(0+128)
  5137  04A4  3000               	movlw	0
  5138  04A5  00D9               	movwf	(map@in_min+1)^(0+128)
  5139  04A6  3000               	movlw	0
  5140  04A7  00DA               	movwf	(map@in_min+2)^(0+128)
  5141  04A8  0022               	movlb	2	; select bank2
  5142  04A9  085F               	movf	(_knob1_prev+1)^(0+256),w	;volatile
  5143  04AA  0021               	movlb	1	; select bank1
  5144  04AB  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5145  04AC  0022               	movlb	2	; select bank2
  5146  04AD  085E               	movf	_knob1_prev^(0+256),w	;volatile
  5147  04AE  0021               	movlb	1	; select bank1
  5148  04AF  00A8               	movwf	___awtoft@c^(0+128)
  5149  04B0  319E  26A6  3183   	fcall	___awtoft
  5150  04B3  0021               	movlb	1	; select bank1
  5151  04B4  0828               	movf	?___awtoft^(0+128),w
  5152  04B5  00D5               	movwf	map@x^(0+128)
  5153  04B6  0829               	movf	(?___awtoft+1)^(0+128),w
  5154  04B7  00D6               	movwf	(map@x+1)^(0+128)
  5155  04B8  082A               	movf	(?___awtoft+2)^(0+128),w
  5156  04B9  00D7               	movwf	(map@x+2)^(0+128)
  5157  04BA  3196  26D6  3183   	fcall	_map
  5158  04BD  0021               	movlb	1	; select bank1
  5159  04BE  0855               	movf	?_map^(0+128),w
  5160  04BF  00E7               	movwf	___fttol@f1^(0+128)
  5161  04C0  0856               	movf	(?_map+1)^(0+128),w
  5162  04C1  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5163  04C2  0857               	movf	(?_map+2)^(0+128),w
  5164  04C3  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5165  04C4  3197  2761  3183   	fcall	___fttol
  5166  04C7  0021               	movlb	1	; select bank1
  5167  04C8  0867               	movf	?___fttol^(0+128),w
  5168  04C9  0020               	movlb	0	; select bank0
  5169  04CA  00D8               	movwf	_baseline_delay_time	;volatile
  5170  04CB  0021               	movlb	1	; select bank1
  5171  04CC  0868               	movf	(?___fttol^(0+128)+1),w
  5172  04CD  0020               	movlb	0	; select bank0
  5173  04CE  00D9               	movwf	_baseline_delay_time+1	;volatile
  5174  04CF  0D89               	rlf	9,f
  5175  04D0  3B89               	subwfb	9,f
  5176  04D1  0989               	comf	9,f
  5177  04D2  00DA               	movwf	_baseline_delay_time+2	;volatile
  5178  04D3  00DB               	movwf	_baseline_delay_time+3	;volatile
  5179                           
  5180                           ;main.c: 260: delay_time_changed = 1;
  5181  04D4  3001               	movlw	1
  5182  04D5  0023               	movlb	3	; select bank3
  5183  04D6  00DE               	movwf	_delay_time_changed^(0+384)
  5184  04D7  3000               	movlw	0
  5185  04D8  00DF               	movwf	(_delay_time_changed^(0+384)+1)
  5186                           
  5187                           ;main.c: 261: LATBbits.LATB1 = 1;
  5188  04D9  0022               	movlb	2	; select bank2
  5189  04DA  148D               	bsf	13,1	;volatile
  5190  04DB                     l5995:	
  5191                           
  5192                           ;main.c: 262: }
  5193                           ;main.c: 272: if (knob_2_pos - knob2_prev >= 4 || knob_2_pos - knob2_prev <= -4) {
  5194  04DB  0022               	movlb	2	; select bank2
  5195  04DC  0960               	comf	_knob2_prev^(0+256),w	;volatile
  5196  04DD  00B6               	movwf	??_main^(0+256)
  5197  04DE  0961               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5198  04DF  00B7               	movwf	(??_main^(0+256)+1)
  5199  04E0  0AB6               	incf	??_main^(0+256),f
  5200  04E1  1903               	skipnz
  5201  04E2  0AB7               	incf	(??_main^(0+256)+1),f
  5202  04E3  084B               	movf	_knob_2_pos^(0+256),w
  5203  04E4  0736               	addwf	??_main^(0+256),w
  5204  04E5  00B8               	movwf	(??_main+2)^(0+256)
  5205  04E6  084C               	movf	(_knob_2_pos+1)^(0+256),w
  5206  04E7  3D37               	addwfc	(??_main+1)^(0+256),w
  5207  04E8  00B9               	movwf	(??_main+3)^(0+256)
  5208  04E9  0839               	movf	(??_main+3)^(0+256),w
  5209  04EA  3A80               	xorlw	128
  5210  04EB  00BA               	movwf	(??_main+4)^(0+256)
  5211  04EC  3080               	movlw	128
  5212  04ED  023A               	subwf	(??_main+4)^(0+256),w
  5213  04EE  1D03               	skipz
  5214  04EF  2CF2               	goto	u6815
  5215  04F0  3004               	movlw	4
  5216  04F1  0238               	subwf	(??_main+2)^(0+256),w
  5217  04F2                     u6815:	
  5218  04F2  1803               	skipnc
  5219  04F3  2D0D               	goto	l5999
  5220  04F4  0022               	movlb	2	; select bank2
  5221  04F5  0960               	comf	_knob2_prev^(0+256),w	;volatile
  5222  04F6  00B6               	movwf	??_main^(0+256)
  5223  04F7  0961               	comf	(_knob2_prev+1)^(0+256),w	;volatile
  5224  04F8  00B7               	movwf	(??_main^(0+256)+1)
  5225  04F9  0AB6               	incf	??_main^(0+256),f
  5226  04FA  1903               	skipnz
  5227  04FB  0AB7               	incf	(??_main^(0+256)+1),f
  5228  04FC  084B               	movf	_knob_2_pos^(0+256),w
  5229  04FD  0736               	addwf	??_main^(0+256),w
  5230  04FE  00B8               	movwf	(??_main+2)^(0+256)
  5231  04FF  084C               	movf	(_knob_2_pos+1)^(0+256),w
  5232  0500  3D37               	addwfc	(??_main+1)^(0+256),w
  5233  0501  00B9               	movwf	(??_main+3)^(0+256)
  5234  0502  0839               	movf	(??_main+3)^(0+256),w
  5235  0503  3A80               	xorlw	128
  5236  0504  00BA               	movwf	(??_main+4)^(0+256)
  5237  0505  307F               	movlw	127
  5238  0506  023A               	subwf	(??_main+4)^(0+256),w
  5239  0507  1D03               	skipz
  5240  0508  2D0B               	goto	u6825
  5241  0509  30FD               	movlw	253
  5242  050A  0238               	subwf	(??_main+2)^(0+256),w
  5243  050B                     u6825:	
  5244  050B  1803               	skipnc
  5245  050C  2D77               	goto	l6007
  5246  050D                     l5999:	
  5247                           
  5248                           ;main.c: 273: knob2_prev = knob_2_pos;
  5249  050D  0022               	movlb	2	; select bank2
  5250  050E  084C               	movf	(_knob_2_pos+1)^(0+256),w
  5251  050F  00E1               	movwf	(_knob2_prev+1)^(0+256)	;volatile
  5252  0510  084B               	movf	_knob_2_pos^(0+256),w
  5253  0511  00E0               	movwf	_knob2_prev^(0+256)	;volatile
  5254                           
  5255                           ;main.c: 274: int i = (int)map(knob2_prev, 0, 1023, 0, 39);
  5256  0512  3000               	movlw	0
  5257  0513  0021               	movlb	1	; select bank1
  5258  0514  00E1               	movwf	map@out_max^(0+128)
  5259  0515  301C               	movlw	28
  5260  0516  00E2               	movwf	(map@out_max+1)^(0+128)
  5261  0517  3042               	movlw	66
  5262  0518  00E3               	movwf	(map@out_max+2)^(0+128)
  5263  0519  3000               	movlw	0
  5264  051A  00DE               	movwf	map@out_min^(0+128)
  5265  051B  3000               	movlw	0
  5266  051C  00DF               	movwf	(map@out_min+1)^(0+128)
  5267  051D  3000               	movlw	0
  5268  051E  00E0               	movwf	(map@out_min+2)^(0+128)
  5269  051F  30C0               	movlw	192
  5270  0520  00DB               	movwf	map@in_max^(0+128)
  5271  0521  307F               	movlw	127
  5272  0522  00DC               	movwf	(map@in_max+1)^(0+128)
  5273  0523  3044               	movlw	68
  5274  0524  00DD               	movwf	(map@in_max+2)^(0+128)
  5275  0525  3000               	movlw	0
  5276  0526  00D8               	movwf	map@in_min^(0+128)
  5277  0527  3000               	movlw	0
  5278  0528  00D9               	movwf	(map@in_min+1)^(0+128)
  5279  0529  3000               	movlw	0
  5280  052A  00DA               	movwf	(map@in_min+2)^(0+128)
  5281  052B  0022               	movlb	2	; select bank2
  5282  052C  0861               	movf	(_knob2_prev+1)^(0+256),w	;volatile
  5283  052D  0021               	movlb	1	; select bank1
  5284  052E  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5285  052F  0022               	movlb	2	; select bank2
  5286  0530  0860               	movf	_knob2_prev^(0+256),w	;volatile
  5287  0531  0021               	movlb	1	; select bank1
  5288  0532  00A8               	movwf	___awtoft@c^(0+128)
  5289  0533  319E  26A6  3183   	fcall	___awtoft
  5290  0536  0021               	movlb	1	; select bank1
  5291  0537  0828               	movf	?___awtoft^(0+128),w
  5292  0538  00D5               	movwf	map@x^(0+128)
  5293  0539  0829               	movf	(?___awtoft+1)^(0+128),w
  5294  053A  00D6               	movwf	(map@x+1)^(0+128)
  5295  053B  082A               	movf	(?___awtoft+2)^(0+128),w
  5296  053C  00D7               	movwf	(map@x+2)^(0+128)
  5297  053D  3196  26D6  3183   	fcall	_map
  5298  0540  0021               	movlb	1	; select bank1
  5299  0541  0855               	movf	?_map^(0+128),w
  5300  0542  00E7               	movwf	___fttol@f1^(0+128)
  5301  0543  0856               	movf	(?_map+1)^(0+128),w
  5302  0544  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5303  0545  0857               	movf	(?_map+2)^(0+128),w
  5304  0546  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5305  0547  3197  2761  3183   	fcall	___fttol
  5306  054A  0021               	movlb	1	; select bank1
  5307  054B  0868               	movf	(?___fttol^(0+128)+1),w
  5308  054C  0023               	movlb	3	; select bank3
  5309  054D  00EB               	movwf	(main@i+1)^(0+384)
  5310  054E  0021               	movlb	1	; select bank1
  5311  054F  0867               	movf	?___fttol^(0+128),w
  5312  0550  0023               	movlb	3	; select bank3
  5313  0551  00EA               	movwf	main@i^(0+384)
  5314                           
  5315                           ;main.c: 275: CCPR2 = (int)B25k[B25kLength - 1 - i];
  5316  0552  086A               	movf	main@i^(0+384),w
  5317  0553  3E01               	addlw	1
  5318  0554  3AFF               	xorlw	255
  5319  0555  3E01               	addlw	1
  5320  0556  076E               	addwf	_B25kLength^(0+384),w
  5321  0557  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5322  0558  0086               	movwf	6
  5323  0559  3002               	movlw	2	; select bank4/5
  5324  055A  0087               	movwf	7
  5325  055B  0801               	movf	1,w
  5326  055C  0022               	movlb	2	; select bank2
  5327  055D  00B6               	movwf	??_main^(0+256)
  5328  055E  01B7               	clrf	(??_main^(0+256)+1)
  5329  055F  0836               	movf	??_main^(0+256),w
  5330  0560  0025               	movlb	5	; select bank5
  5331  0561  0098               	movwf	24	;volatile
  5332  0562  0022               	movlb	2	; select bank2
  5333  0563  0837               	movf	(??_main+1)^(0+256),w
  5334  0564  0025               	movlb	5	; select bank5
  5335  0565  0099               	movwf	25	;volatile
  5336                           
  5337                           ;main.c: 276: CCPR3 = (int)B25k[i];
  5338  0566  0023               	movlb	3	; select bank3
  5339  0567  086A               	movf	main@i^(0+384),w
  5340  0568  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5341  0569  0086               	movwf	6
  5342  056A  3002               	movlw	2	; select bank4/5
  5343  056B  0087               	movwf	7
  5344  056C  0801               	movf	1,w
  5345  056D  0022               	movlb	2	; select bank2
  5346  056E  00B6               	movwf	??_main^(0+256)
  5347  056F  01B7               	clrf	(??_main^(0+256)+1)
  5348  0570  0836               	movf	??_main^(0+256),w
  5349  0571  0026               	movlb	6	; select bank6
  5350  0572  0091               	movwf	17	;volatile
  5351  0573  0022               	movlb	2	; select bank2
  5352  0574  0837               	movf	(??_main+1)^(0+256),w
  5353  0575  0026               	movlb	6	; select bank6
  5354  0576  0092               	movwf	18	;volatile
  5355  0577                     l6007:	
  5356                           
  5357                           ;main.c: 277: }
  5358                           ;main.c: 287: if (knob_3_pos - knob3_prev >= 4 || knob_3_pos - knob3_prev <= -4) {
  5359  0577  0022               	movlb	2	; select bank2
  5360  0578  0962               	comf	_knob3_prev^(0+256),w	;volatile
  5361  0579  00B6               	movwf	??_main^(0+256)
  5362  057A  0963               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5363  057B  00B7               	movwf	(??_main^(0+256)+1)
  5364  057C  0AB6               	incf	??_main^(0+256),f
  5365  057D  1903               	skipnz
  5366  057E  0AB7               	incf	(??_main^(0+256)+1),f
  5367  057F  084D               	movf	_knob_3_pos^(0+256),w
  5368  0580  0736               	addwf	??_main^(0+256),w
  5369  0581  00B8               	movwf	(??_main+2)^(0+256)
  5370  0582  084E               	movf	(_knob_3_pos+1)^(0+256),w
  5371  0583  3D37               	addwfc	(??_main+1)^(0+256),w
  5372  0584  00B9               	movwf	(??_main+3)^(0+256)
  5373  0585  0839               	movf	(??_main+3)^(0+256),w
  5374  0586  3A80               	xorlw	128
  5375  0587  00BA               	movwf	(??_main+4)^(0+256)
  5376  0588  3080               	movlw	128
  5377  0589  023A               	subwf	(??_main+4)^(0+256),w
  5378  058A  1D03               	skipz
  5379  058B  2D8E               	goto	u6835
  5380  058C  3004               	movlw	4
  5381  058D  0238               	subwf	(??_main+2)^(0+256),w
  5382  058E                     u6835:	
  5383  058E  1803               	skipnc
  5384  058F  2DA9               	goto	l6011
  5385  0590  0022               	movlb	2	; select bank2
  5386  0591  0962               	comf	_knob3_prev^(0+256),w	;volatile
  5387  0592  00B6               	movwf	??_main^(0+256)
  5388  0593  0963               	comf	(_knob3_prev+1)^(0+256),w	;volatile
  5389  0594  00B7               	movwf	(??_main^(0+256)+1)
  5390  0595  0AB6               	incf	??_main^(0+256),f
  5391  0596  1903               	skipnz
  5392  0597  0AB7               	incf	(??_main^(0+256)+1),f
  5393  0598  084D               	movf	_knob_3_pos^(0+256),w
  5394  0599  0736               	addwf	??_main^(0+256),w
  5395  059A  00B8               	movwf	(??_main+2)^(0+256)
  5396  059B  084E               	movf	(_knob_3_pos+1)^(0+256),w
  5397  059C  3D37               	addwfc	(??_main+1)^(0+256),w
  5398  059D  00B9               	movwf	(??_main+3)^(0+256)
  5399  059E  0839               	movf	(??_main+3)^(0+256),w
  5400  059F  3A80               	xorlw	128
  5401  05A0  00BA               	movwf	(??_main+4)^(0+256)
  5402  05A1  307F               	movlw	127
  5403  05A2  023A               	subwf	(??_main+4)^(0+256),w
  5404  05A3  1D03               	skipz
  5405  05A4  2DA7               	goto	u6845
  5406  05A5  30FD               	movlw	253
  5407  05A6  0238               	subwf	(??_main+2)^(0+256),w
  5408  05A7                     u6845:	
  5409  05A7  1803               	skipnc
  5410  05A8  2E13               	goto	l6019
  5411  05A9                     l6011:	
  5412                           
  5413                           ;main.c: 288: knob3_prev = knob_3_pos;
  5414  05A9  0022               	movlb	2	; select bank2
  5415  05AA  084E               	movf	(_knob_3_pos+1)^(0+256),w
  5416  05AB  00E3               	movwf	(_knob3_prev+1)^(0+256)	;volatile
  5417  05AC  084D               	movf	_knob_3_pos^(0+256),w
  5418  05AD  00E2               	movwf	_knob3_prev^(0+256)	;volatile
  5419                           
  5420                           ;main.c: 289: int i = (int)map(knob3_prev, 0, 1023, 16, 0);
  5421  05AE  3000               	movlw	0
  5422  05AF  0021               	movlb	1	; select bank1
  5423  05B0  00E1               	movwf	map@out_max^(0+128)
  5424  05B1  3000               	movlw	0
  5425  05B2  00E2               	movwf	(map@out_max+1)^(0+128)
  5426  05B3  3000               	movlw	0
  5427  05B4  00E3               	movwf	(map@out_max+2)^(0+128)
  5428  05B5  3000               	movlw	0
  5429  05B6  00DE               	movwf	map@out_min^(0+128)
  5430  05B7  3080               	movlw	128
  5431  05B8  00DF               	movwf	(map@out_min+1)^(0+128)
  5432  05B9  3041               	movlw	65
  5433  05BA  00E0               	movwf	(map@out_min+2)^(0+128)
  5434  05BB  30C0               	movlw	192
  5435  05BC  00DB               	movwf	map@in_max^(0+128)
  5436  05BD  307F               	movlw	127
  5437  05BE  00DC               	movwf	(map@in_max+1)^(0+128)
  5438  05BF  3044               	movlw	68
  5439  05C0  00DD               	movwf	(map@in_max+2)^(0+128)
  5440  05C1  3000               	movlw	0
  5441  05C2  00D8               	movwf	map@in_min^(0+128)
  5442  05C3  3000               	movlw	0
  5443  05C4  00D9               	movwf	(map@in_min+1)^(0+128)
  5444  05C5  3000               	movlw	0
  5445  05C6  00DA               	movwf	(map@in_min+2)^(0+128)
  5446  05C7  0022               	movlb	2	; select bank2
  5447  05C8  0863               	movf	(_knob3_prev+1)^(0+256),w	;volatile
  5448  05C9  0021               	movlb	1	; select bank1
  5449  05CA  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5450  05CB  0022               	movlb	2	; select bank2
  5451  05CC  0862               	movf	_knob3_prev^(0+256),w	;volatile
  5452  05CD  0021               	movlb	1	; select bank1
  5453  05CE  00A8               	movwf	___awtoft@c^(0+128)
  5454  05CF  319E  26A6  3183   	fcall	___awtoft
  5455  05D2  0021               	movlb	1	; select bank1
  5456  05D3  0828               	movf	?___awtoft^(0+128),w
  5457  05D4  00D5               	movwf	map@x^(0+128)
  5458  05D5  0829               	movf	(?___awtoft+1)^(0+128),w
  5459  05D6  00D6               	movwf	(map@x+1)^(0+128)
  5460  05D7  082A               	movf	(?___awtoft+2)^(0+128),w
  5461  05D8  00D7               	movwf	(map@x+2)^(0+128)
  5462  05D9  3196  26D6  3183   	fcall	_map
  5463  05DC  0021               	movlb	1	; select bank1
  5464  05DD  0855               	movf	?_map^(0+128),w
  5465  05DE  00E7               	movwf	___fttol@f1^(0+128)
  5466  05DF  0856               	movf	(?_map+1)^(0+128),w
  5467  05E0  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5468  05E1  0857               	movf	(?_map+2)^(0+128),w
  5469  05E2  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5470  05E3  3197  2761  3183   	fcall	___fttol
  5471  05E6  0021               	movlb	1	; select bank1
  5472  05E7  0868               	movf	(?___fttol^(0+128)+1),w
  5473  05E8  0023               	movlb	3	; select bank3
  5474  05E9  00ED               	movwf	(main@i_396+1)^(0+384)
  5475  05EA  0021               	movlb	1	; select bank1
  5476  05EB  0867               	movf	?___fttol^(0+128),w
  5477  05EC  0023               	movlb	3	; select bank3
  5478  05ED  00EC               	movwf	main@i_396^(0+384)
  5479                           
  5480                           ;main.c: 290: CCPR4 = (int)B25k[B25kLength - 1 - i];
  5481  05EE  086C               	movf	main@i_396^(0+384),w
  5482  05EF  3E01               	addlw	1
  5483  05F0  3AFF               	xorlw	255
  5484  05F1  3E01               	addlw	1
  5485  05F2  076E               	addwf	_B25kLength^(0+384),w
  5486  05F3  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5487  05F4  0086               	movwf	6
  5488  05F5  3002               	movlw	2	; select bank4/5
  5489  05F6  0087               	movwf	7
  5490  05F7  0801               	movf	1,w
  5491  05F8  0022               	movlb	2	; select bank2
  5492  05F9  00B6               	movwf	??_main^(0+256)
  5493  05FA  01B7               	clrf	(??_main^(0+256)+1)
  5494  05FB  0836               	movf	??_main^(0+256),w
  5495  05FC  0026               	movlb	6	; select bank6
  5496  05FD  0098               	movwf	24	;volatile
  5497  05FE  0022               	movlb	2	; select bank2
  5498  05FF  0837               	movf	(??_main+1)^(0+256),w
  5499  0600  0026               	movlb	6	; select bank6
  5500  0601  0099               	movwf	25	;volatile
  5501                           
  5502                           ;main.c: 291: CCPR5 = (int)B25k[i];
  5503  0602  0023               	movlb	3	; select bank3
  5504  0603  086C               	movf	main@i_396^(0+384),w
  5505  0604  3E20               	addlw	(low (_B25k| (0+512)))& (0+255)
  5506  0605  0086               	movwf	6
  5507  0606  3002               	movlw	2	; select bank4/5
  5508  0607  0087               	movwf	7
  5509  0608  0801               	movf	1,w
  5510  0609  0022               	movlb	2	; select bank2
  5511  060A  00B6               	movwf	??_main^(0+256)
  5512  060B  01B7               	clrf	(??_main^(0+256)+1)
  5513  060C  0836               	movf	??_main^(0+256),w
  5514  060D  0026               	movlb	6	; select bank6
  5515  060E  009C               	movwf	28	;volatile
  5516  060F  0022               	movlb	2	; select bank2
  5517  0610  0837               	movf	(??_main+1)^(0+256),w
  5518  0611  0026               	movlb	6	; select bank6
  5519  0612  009D               	movwf	29	;volatile
  5520  0613                     l6019:	
  5521                           
  5522                           ;main.c: 292: }
  5523                           ;main.c: 302: if (knob_4_pos - knob4_prev >= 4 || knob_4_pos - knob4_prev <= -4) {
  5524  0613  0022               	movlb	2	; select bank2
  5525  0614  0964               	comf	_knob4_prev^(0+256),w	;volatile
  5526  0615  00B6               	movwf	??_main^(0+256)
  5527  0616  0965               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5528  0617  00B7               	movwf	(??_main^(0+256)+1)
  5529  0618  0AB6               	incf	??_main^(0+256),f
  5530  0619  1903               	skipnz
  5531  061A  0AB7               	incf	(??_main^(0+256)+1),f
  5532  061B  084F               	movf	_knob_4_pos^(0+256),w
  5533  061C  0736               	addwf	??_main^(0+256),w
  5534  061D  00B8               	movwf	(??_main+2)^(0+256)
  5535  061E  0850               	movf	(_knob_4_pos+1)^(0+256),w
  5536  061F  3D37               	addwfc	(??_main+1)^(0+256),w
  5537  0620  00B9               	movwf	(??_main+3)^(0+256)
  5538  0621  0839               	movf	(??_main+3)^(0+256),w
  5539  0622  3A80               	xorlw	128
  5540  0623  00BA               	movwf	(??_main+4)^(0+256)
  5541  0624  3080               	movlw	128
  5542  0625  023A               	subwf	(??_main+4)^(0+256),w
  5543  0626  1D03               	skipz
  5544  0627  2E2A               	goto	u6855
  5545  0628  3004               	movlw	4
  5546  0629  0238               	subwf	(??_main+2)^(0+256),w
  5547  062A                     u6855:	
  5548  062A  1803               	skipnc
  5549  062B  2E45               	goto	l6023
  5550  062C  0022               	movlb	2	; select bank2
  5551  062D  0964               	comf	_knob4_prev^(0+256),w	;volatile
  5552  062E  00B6               	movwf	??_main^(0+256)
  5553  062F  0965               	comf	(_knob4_prev+1)^(0+256),w	;volatile
  5554  0630  00B7               	movwf	(??_main^(0+256)+1)
  5555  0631  0AB6               	incf	??_main^(0+256),f
  5556  0632  1903               	skipnz
  5557  0633  0AB7               	incf	(??_main^(0+256)+1),f
  5558  0634  084F               	movf	_knob_4_pos^(0+256),w
  5559  0635  0736               	addwf	??_main^(0+256),w
  5560  0636  00B8               	movwf	(??_main+2)^(0+256)
  5561  0637  0850               	movf	(_knob_4_pos+1)^(0+256),w
  5562  0638  3D37               	addwfc	(??_main+1)^(0+256),w
  5563  0639  00B9               	movwf	(??_main+3)^(0+256)
  5564  063A  0839               	movf	(??_main+3)^(0+256),w
  5565  063B  3A80               	xorlw	128
  5566  063C  00BA               	movwf	(??_main+4)^(0+256)
  5567  063D  307F               	movlw	127
  5568  063E  023A               	subwf	(??_main+4)^(0+256),w
  5569  063F  1D03               	skipz
  5570  0640  2E43               	goto	u6865
  5571  0641  30FD               	movlw	253
  5572  0642  0238               	subwf	(??_main+2)^(0+256),w
  5573  0643                     u6865:	
  5574  0643  1803               	skipnc
  5575  0644  2E8A               	goto	l6027
  5576  0645                     l6023:	
  5577                           
  5578                           ;main.c: 303: knob4_prev = knob_4_pos;
  5579  0645  0022               	movlb	2	; select bank2
  5580  0646  0850               	movf	(_knob_4_pos+1)^(0+256),w
  5581  0647  00E5               	movwf	(_knob4_prev+1)^(0+256)	;volatile
  5582  0648  084F               	movf	_knob_4_pos^(0+256),w
  5583  0649  00E4               	movwf	_knob4_prev^(0+256)	;volatile
  5584                           
  5585                           ;main.c: 305: mod_delay_time = (int)map(knob4_prev, 0, 1023, 3, 47);
  5586  064A  3000               	movlw	0
  5587  064B  0021               	movlb	1	; select bank1
  5588  064C  00E1               	movwf	map@out_max^(0+128)
  5589  064D  303C               	movlw	60
  5590  064E  00E2               	movwf	(map@out_max+1)^(0+128)
  5591  064F  3042               	movlw	66
  5592  0650  00E3               	movwf	(map@out_max+2)^(0+128)
  5593  0651  3000               	movlw	0
  5594  0652  00DE               	movwf	map@out_min^(0+128)
  5595  0653  3040               	movlw	64
  5596  0654  00DF               	movwf	(map@out_min+1)^(0+128)
  5597  0655  3040               	movlw	64
  5598  0656  00E0               	movwf	(map@out_min+2)^(0+128)
  5599  0657  30C0               	movlw	192
  5600  0658  00DB               	movwf	map@in_max^(0+128)
  5601  0659  307F               	movlw	127
  5602  065A  00DC               	movwf	(map@in_max+1)^(0+128)
  5603  065B  3044               	movlw	68
  5604  065C  00DD               	movwf	(map@in_max+2)^(0+128)
  5605  065D  3000               	movlw	0
  5606  065E  00D8               	movwf	map@in_min^(0+128)
  5607  065F  3000               	movlw	0
  5608  0660  00D9               	movwf	(map@in_min+1)^(0+128)
  5609  0661  3000               	movlw	0
  5610  0662  00DA               	movwf	(map@in_min+2)^(0+128)
  5611  0663  0022               	movlb	2	; select bank2
  5612  0664  0865               	movf	(_knob4_prev+1)^(0+256),w	;volatile
  5613  0665  0021               	movlb	1	; select bank1
  5614  0666  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5615  0667  0022               	movlb	2	; select bank2
  5616  0668  0864               	movf	_knob4_prev^(0+256),w	;volatile
  5617  0669  0021               	movlb	1	; select bank1
  5618  066A  00A8               	movwf	___awtoft@c^(0+128)
  5619  066B  319E  26A6  3183   	fcall	___awtoft
  5620  066E  0021               	movlb	1	; select bank1
  5621  066F  0828               	movf	?___awtoft^(0+128),w
  5622  0670  00D5               	movwf	map@x^(0+128)
  5623  0671  0829               	movf	(?___awtoft+1)^(0+128),w
  5624  0672  00D6               	movwf	(map@x+1)^(0+128)
  5625  0673  082A               	movf	(?___awtoft+2)^(0+128),w
  5626  0674  00D7               	movwf	(map@x+2)^(0+128)
  5627  0675  3196  26D6  3183   	fcall	_map
  5628  0678  0021               	movlb	1	; select bank1
  5629  0679  0855               	movf	?_map^(0+128),w
  5630  067A  00E7               	movwf	___fttol@f1^(0+128)
  5631  067B  0856               	movf	(?_map+1)^(0+128),w
  5632  067C  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5633  067D  0857               	movf	(?_map+2)^(0+128),w
  5634  067E  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5635  067F  3197  2761  3183   	fcall	___fttol
  5636  0682  0021               	movlb	1	; select bank1
  5637  0683  0868               	movf	(?___fttol^(0+128)+1),w
  5638  0684  0023               	movlb	3	; select bank3
  5639  0685  00E1               	movwf	(_mod_delay_time+1)^(0+384)
  5640  0686  0021               	movlb	1	; select bank1
  5641  0687  0867               	movf	?___fttol^(0+128),w
  5642  0688  0023               	movlb	3	; select bank3
  5643  0689  00E0               	movwf	_mod_delay_time^(0+384)
  5644  068A                     l6027:	
  5645                           
  5646                           ;main.c: 306: }
  5647                           ;main.c: 314: if (knob_5_pos - knob5_prev >= 4 || knob_5_pos - knob5_prev <= -4) {
  5648  068A  0022               	movlb	2	; select bank2
  5649  068B  0966               	comf	_knob5_prev^(0+256),w	;volatile
  5650  068C  00B6               	movwf	??_main^(0+256)
  5651  068D  0967               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5652  068E  00B7               	movwf	(??_main^(0+256)+1)
  5653  068F  0AB6               	incf	??_main^(0+256),f
  5654  0690  1903               	skipnz
  5655  0691  0AB7               	incf	(??_main^(0+256)+1),f
  5656  0692  0851               	movf	_knob_5_pos^(0+256),w
  5657  0693  0736               	addwf	??_main^(0+256),w
  5658  0694  00B8               	movwf	(??_main+2)^(0+256)
  5659  0695  0852               	movf	(_knob_5_pos+1)^(0+256),w
  5660  0696  3D37               	addwfc	(??_main+1)^(0+256),w
  5661  0697  00B9               	movwf	(??_main+3)^(0+256)
  5662  0698  0839               	movf	(??_main+3)^(0+256),w
  5663  0699  3A80               	xorlw	128
  5664  069A  00BA               	movwf	(??_main+4)^(0+256)
  5665  069B  3080               	movlw	128
  5666  069C  023A               	subwf	(??_main+4)^(0+256),w
  5667  069D  1D03               	skipz
  5668  069E  2EA1               	goto	u6875
  5669  069F  3004               	movlw	4
  5670  06A0  0238               	subwf	(??_main+2)^(0+256),w
  5671  06A1                     u6875:	
  5672  06A1  1803               	skipnc
  5673  06A2  2EBC               	goto	l6031
  5674  06A3  0022               	movlb	2	; select bank2
  5675  06A4  0966               	comf	_knob5_prev^(0+256),w	;volatile
  5676  06A5  00B6               	movwf	??_main^(0+256)
  5677  06A6  0967               	comf	(_knob5_prev+1)^(0+256),w	;volatile
  5678  06A7  00B7               	movwf	(??_main^(0+256)+1)
  5679  06A8  0AB6               	incf	??_main^(0+256),f
  5680  06A9  1903               	skipnz
  5681  06AA  0AB7               	incf	(??_main^(0+256)+1),f
  5682  06AB  0851               	movf	_knob_5_pos^(0+256),w
  5683  06AC  0736               	addwf	??_main^(0+256),w
  5684  06AD  00B8               	movwf	(??_main+2)^(0+256)
  5685  06AE  0852               	movf	(_knob_5_pos+1)^(0+256),w
  5686  06AF  3D37               	addwfc	(??_main+1)^(0+256),w
  5687  06B0  00B9               	movwf	(??_main+3)^(0+256)
  5688  06B1  0839               	movf	(??_main+3)^(0+256),w
  5689  06B2  3A80               	xorlw	128
  5690  06B3  00BA               	movwf	(??_main+4)^(0+256)
  5691  06B4  307F               	movlw	127
  5692  06B5  023A               	subwf	(??_main+4)^(0+256),w
  5693  06B6  1D03               	skipz
  5694  06B7  2EBA               	goto	u6885
  5695  06B8  30FD               	movlw	253
  5696  06B9  0238               	subwf	(??_main+2)^(0+256),w
  5697  06BA                     u6885:	
  5698  06BA  1803               	skipnc
  5699  06BB  2F01               	goto	l6035
  5700  06BC                     l6031:	
  5701                           
  5702                           ;main.c: 315: knob5_prev = knob_5_pos;
  5703  06BC  0022               	movlb	2	; select bank2
  5704  06BD  0852               	movf	(_knob_5_pos+1)^(0+256),w
  5705  06BE  00E7               	movwf	(_knob5_prev+1)^(0+256)	;volatile
  5706  06BF  0851               	movf	_knob_5_pos^(0+256),w
  5707  06C0  00E6               	movwf	_knob5_prev^(0+256)	;volatile
  5708                           
  5709                           ;main.c: 316: adjusted_pot_value = (int)map(knob5_prev, 0, 1023, 1275, 0);
  5710  06C1  3000               	movlw	0
  5711  06C2  0021               	movlb	1	; select bank1
  5712  06C3  00E1               	movwf	map@out_max^(0+128)
  5713  06C4  3000               	movlw	0
  5714  06C5  00E2               	movwf	(map@out_max+1)^(0+128)
  5715  06C6  3000               	movlw	0
  5716  06C7  00E3               	movwf	(map@out_max+2)^(0+128)
  5717  06C8  3060               	movlw	96
  5718  06C9  00DE               	movwf	map@out_min^(0+128)
  5719  06CA  309F               	movlw	159
  5720  06CB  00DF               	movwf	(map@out_min+1)^(0+128)
  5721  06CC  3044               	movlw	68
  5722  06CD  00E0               	movwf	(map@out_min+2)^(0+128)
  5723  06CE  30C0               	movlw	192
  5724  06CF  00DB               	movwf	map@in_max^(0+128)
  5725  06D0  307F               	movlw	127
  5726  06D1  00DC               	movwf	(map@in_max+1)^(0+128)
  5727  06D2  3044               	movlw	68
  5728  06D3  00DD               	movwf	(map@in_max+2)^(0+128)
  5729  06D4  3000               	movlw	0
  5730  06D5  00D8               	movwf	map@in_min^(0+128)
  5731  06D6  3000               	movlw	0
  5732  06D7  00D9               	movwf	(map@in_min+1)^(0+128)
  5733  06D8  3000               	movlw	0
  5734  06D9  00DA               	movwf	(map@in_min+2)^(0+128)
  5735  06DA  0022               	movlb	2	; select bank2
  5736  06DB  0867               	movf	(_knob5_prev+1)^(0+256),w	;volatile
  5737  06DC  0021               	movlb	1	; select bank1
  5738  06DD  00A9               	movwf	(___awtoft@c+1)^(0+128)
  5739  06DE  0022               	movlb	2	; select bank2
  5740  06DF  0866               	movf	_knob5_prev^(0+256),w	;volatile
  5741  06E0  0021               	movlb	1	; select bank1
  5742  06E1  00A8               	movwf	___awtoft@c^(0+128)
  5743  06E2  319E  26A6  3183   	fcall	___awtoft
  5744  06E5  0021               	movlb	1	; select bank1
  5745  06E6  0828               	movf	?___awtoft^(0+128),w
  5746  06E7  00D5               	movwf	map@x^(0+128)
  5747  06E8  0829               	movf	(?___awtoft+1)^(0+128),w
  5748  06E9  00D6               	movwf	(map@x+1)^(0+128)
  5749  06EA  082A               	movf	(?___awtoft+2)^(0+128),w
  5750  06EB  00D7               	movwf	(map@x+2)^(0+128)
  5751  06EC  3196  26D6  3183   	fcall	_map
  5752  06EF  0021               	movlb	1	; select bank1
  5753  06F0  0855               	movf	?_map^(0+128),w
  5754  06F1  00E7               	movwf	___fttol@f1^(0+128)
  5755  06F2  0856               	movf	(?_map+1)^(0+128),w
  5756  06F3  00E8               	movwf	(___fttol@f1+1)^(0+128)
  5757  06F4  0857               	movf	(?_map+2)^(0+128),w
  5758  06F5  00E9               	movwf	(___fttol@f1+2)^(0+128)
  5759  06F6  3197  2761  3183   	fcall	___fttol
  5760  06F9  0021               	movlb	1	; select bank1
  5761  06FA  0868               	movf	(?___fttol^(0+128)+1),w
  5762  06FB  0023               	movlb	3	; select bank3
  5763  06FC  00C7               	movwf	(_adjusted_pot_value+1)^(0+384)
  5764  06FD  0021               	movlb	1	; select bank1
  5765  06FE  0867               	movf	?___fttol^(0+128),w
  5766  06FF  0023               	movlb	3	; select bank3
  5767  0700  00C6               	movwf	_adjusted_pot_value^(0+384)
  5768  0701                     l6035:	
  5769                           
  5770                           ;main.c: 318: }
  5771                           ;main.c: 397: if (delay_time_changed == 1) {
  5772  0701  0023               	movlb	3	; select bank3
  5773  0702  035E               	decf	_delay_time_changed^(0+384),w
  5774  0703  045F               	iorwf	(_delay_time_changed+1)^(0+384),w
  5775  0704  1D03               	btfss	3,2
  5776  0705  2BE9               	goto	l5951
  5777                           
  5778                           ;main.c: 398: delay_time = baseline_delay_time;
  5779  0706  0020               	movlb	0	; select bank0
  5780  0707  085B               	movf	_baseline_delay_time+3,w	;volatile
  5781  0708  00DF               	movwf	_delay_time+3	;volatile
  5782  0709  085A               	movf	_baseline_delay_time+2,w	;volatile
  5783  070A  00DE               	movwf	_delay_time+2	;volatile
  5784  070B  0859               	movf	_baseline_delay_time+1,w	;volatile
  5785  070C  00DD               	movwf	_delay_time+1	;volatile
  5786  070D  0858               	movf	_baseline_delay_time,w	;volatile
  5787  070E  00DC               	movwf	_delay_time	;volatile
  5788                           
  5789                           ;main.c: 399: delay_time = set_subdivision(baseline_delay_time, top_push_state);
  5790  070F  0859               	movf	_baseline_delay_time+1,w	;volatile
  5791  0710  0022               	movlb	2	; select bank2
  5792  0711  00A7               	movwf	(set_subdivision@x+1)^(0+256)
  5793  0712  0020               	movlb	0	; select bank0
  5794  0713  0858               	movf	_baseline_delay_time,w	;volatile
  5795  0714  0022               	movlb	2	; select bank2
  5796  0715  00A6               	movwf	set_subdivision@x^(0+256)
  5797  0716  0020               	movlb	0	; select bank0
  5798  0717  0865               	movf	_top_push_state+1,w
  5799  0718  0022               	movlb	2	; select bank2
  5800  0719  00A9               	movwf	(set_subdivision@y+1)^(0+256)
  5801  071A  0020               	movlb	0	; select bank0
  5802  071B  0864               	movf	_top_push_state,w
  5803  071C  0022               	movlb	2	; select bank2
  5804  071D  00A8               	movwf	set_subdivision@y^(0+256)
  5805  071E  3189  216E  3183   	fcall	_set_subdivision
  5806  0721  0022               	movlb	2	; select bank2
  5807  0722  0826               	movf	?_set_subdivision^(0+256),w
  5808  0723  0020               	movlb	0	; select bank0
  5809  0724  00DC               	movwf	_delay_time	;volatile
  5810  0725  0022               	movlb	2	; select bank2
  5811  0726  0827               	movf	(?_set_subdivision+1)^(0+256),w
  5812  0727  0020               	movlb	0	; select bank0
  5813  0728  00DD               	movwf	_delay_time+1	;volatile
  5814  0729  0D89               	rlf	9,f
  5815  072A  3B89               	subwfb	9,f
  5816  072B  0989               	comf	9,f
  5817  072C  00DE               	movwf	_delay_time+2	;volatile
  5818  072D  00DF               	movwf	_delay_time+3	;volatile
  5819                           
  5820                           ;main.c: 400: reset_sub_delay = 1;
  5821  072E  3001               	movlw	1
  5822  072F  0023               	movlb	3	; select bank3
  5823  0730  00D6               	movwf	_reset_sub_delay^(0+384)
  5824  0731  3000               	movlw	0
  5825  0732  00D7               	movwf	(_reset_sub_delay^(0+384)+1)
  5826                           
  5827                           ;main.c: 401: delayfound = 0;
  5828  0733  01D0               	clrf	_delayfound^(0+384)
  5829  0734  01D1               	clrf	(_delayfound+1)^(0+384)
  5830                           
  5831                           ;main.c: 402: delay_counter = 0;
  5832  0735  0022               	movlb	2	; select bank2
  5833  0736  01C5               	clrf	_delay_counter^(0+256)	;volatile
  5834  0737  01C6               	clrf	(_delay_counter+1)^(0+256)	;volatile
  5835  0738                     l6053:	
  5836                           ;main.c: 404: while (delayfound == 0) {
  5837                           
  5838  0738  0023               	movlb	3	; select bank3
  5839  0739  0850               	movf	_delayfound^(0+384),w
  5840  073A  0451               	iorwf	(_delayfound+1)^(0+384),w
  5841  073B  1D03               	btfss	3,2
  5842  073C  2F92               	goto	l6055
  5843                           
  5844                           ;main.c: 405: if (delayArray[delay_counter] <= delay_time * 2) {
  5845  073D  0022               	movlb	2	; select bank2
  5846  073E  0846               	movf	(_delay_counter+1)^(0+256),w	;volatile
  5847  073F  00B7               	movwf	(??_main^(0+256)+1)
  5848  0740  0845               	movf	_delay_counter^(0+256),w	;volatile
  5849  0741  00B6               	movwf	??_main^(0+256)
  5850  0742  35B6               	lslf	??_main^(0+256),f
  5851  0743  0DB7               	rlf	(??_main^(0+256)+1),f
  5852  0744  30E8               	movlw	232
  5853  0745  00B8               	movwf	(??_main+2)^(0+256)
  5854  0746  3023               	movlw	35
  5855  0747  00B9               	movwf	((??_main+2)^(0+256)+1)
  5856  0748  0836               	movf	??_main^(0+256),w
  5857  0749  0738               	addwf	(??_main+2)^(0+256),w
  5858  074A  0086               	movwf	6
  5859  074B  0837               	movf	(??_main+1)^(0+256),w
  5860  074C  3D39               	addwfc	(??_main+3)^(0+256),w
  5861  074D  0087               	movwf	7
  5862  074E  3F40               	moviw [0]fsr1
  5863  074F  00BA               	movwf	(??_main+4)^(0+256)
  5864  0750  3F41               	moviw [1]fsr1
  5865  0751  00BB               	movwf	((??_main+4)^(0+256)+1)
  5866  0752  083A               	movf	(??_main+4)^(0+256),w
  5867  0753  00BC               	movwf	(??_main+6)^(0+256)
  5868  0754  083B               	movf	(??_main+5)^(0+256),w
  5869  0755  00BD               	movwf	((??_main+6)^(0+256)+1)
  5870  0756  3000               	movlw	0
  5871  0757  1BBD               	btfsc	((??_main+6)^(0+256)+1),7
  5872  0758  30FF               	movlw	255
  5873  0759  00BE               	movwf	((??_main+6)^(0+256)+2)
  5874  075A  00BF               	movwf	((??_main+6)^(0+256)+3)
  5875  075B  0020               	movlb	0	; select bank0
  5876  075C  085C               	movf	_delay_time,w	;volatile
  5877  075D  0022               	movlb	2	; select bank2
  5878  075E  00C0               	movwf	(??_main+10)^(0+256)
  5879  075F  0020               	movlb	0	; select bank0
  5880  0760  085D               	movf	_delay_time+1,w	;volatile
  5881  0761  0022               	movlb	2	; select bank2
  5882  0762  00C1               	movwf	((??_main+10)^(0+256)+1)
  5883  0763  0020               	movlb	0	; select bank0
  5884  0764  085E               	movf	_delay_time+2,w	;volatile
  5885  0765  0022               	movlb	2	; select bank2
  5886  0766  00C2               	movwf	((??_main+10)^(0+256)+2)
  5887  0767  0020               	movlb	0	; select bank0
  5888  0768  085F               	movf	_delay_time+3,w	;volatile
  5889  0769  0022               	movlb	2	; select bank2
  5890  076A  00C3               	movwf	((??_main+10)^(0+256)+3)
  5891  076B  3001               	movlw	1
  5892  076C                     u6905:	
  5893  076C  35C0               	lslf	(??_main+10)^(0+256),f
  5894  076D  0DC1               	rlf	((??_main+10)^(0+256)+1),f
  5895  076E  0DC2               	rlf	((??_main+10)^(0+256)+2),f
  5896  076F  0DC3               	rlf	((??_main+10)^(0+256)+3),f
  5897  0770  0B89               	decfsz	9,f
  5898  0771  2F6C               	goto	u6905
  5899  0772  0843               	movf	(??_main+13)^(0+256),w
  5900  0773  3A80               	xorlw	128
  5901  0774  00C4               	movwf	(??_main+14)^(0+256)
  5902  0775  083F               	movf	(??_main+9)^(0+256),w
  5903  0776  3A80               	xorlw	128
  5904  0777  0244               	subwf	(??_main+14)^(0+256),w
  5905  0778  1D03               	skipz
  5906  0779  2F84               	goto	u6913
  5907  077A  083E               	movf	(??_main+8)^(0+256),w
  5908  077B  0242               	subwf	(??_main+12)^(0+256),w
  5909  077C  1D03               	skipz
  5910  077D  2F84               	goto	u6913
  5911  077E  083D               	movf	(??_main+7)^(0+256),w
  5912  077F  0241               	subwf	(??_main+11)^(0+256),w
  5913  0780  1D03               	skipz
  5914  0781  2F84               	goto	u6913
  5915  0782  083C               	movf	(??_main+6)^(0+256),w
  5916  0783  0240               	subwf	(??_main+10)^(0+256),w
  5917  0784                     u6913:	
  5918  0784  1C03               	skipc
  5919  0785  2F8C               	goto	l6051
  5920                           
  5921                           ;main.c: 406: delayfound = 1;
  5922  0786  3001               	movlw	1
  5923  0787  0023               	movlb	3	; select bank3
  5924  0788  00D0               	movwf	_delayfound^(0+384)
  5925  0789  3000               	movlw	0
  5926  078A  00D1               	movwf	(_delayfound^(0+384)+1)
  5927                           
  5928                           ;main.c: 410: } else {
  5929  078B  2F38               	goto	l6053
  5930  078C                     l6051:	
  5931                           
  5932                           ;main.c: 411: delay_counter++;
  5933  078C  3001               	movlw	1
  5934  078D  0022               	movlb	2	; select bank2
  5935  078E  07C5               	addwf	_delay_counter^(0+256),f	;volatile
  5936  078F  3000               	movlw	0
  5937  0790  3DC6               	addwfc	(_delay_counter+1)^(0+256),f	;volatile
  5938  0791  2F38               	goto	l6053
  5939  0792                     l6055:	
  5940                           
  5941                           ;main.c: 413: }
  5942                           ;main.c: 414: }
  5943                           ;main.c: 433: delay_time_changed = 0;
  5944  0792  01DE               	clrf	_delay_time_changed^(0+384)
  5945  0793  01DF               	clrf	(_delay_time_changed+1)^(0+384)
  5946  0794  2BE9               	goto	l5951
  5947  0795                     __end_of_main:	
  5948                           
  5949                           	psect	text1
  5950  1241                     __ptext1:	
  5951 ;; *************** function _update_mode *****************
  5952 ;; Defined at:
  5953 ;;		line 82 in file "tactiles.c"
  5954 ;; Parameters:    Size  Location     Type
  5955 ;;		None
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;		None
  5958 ;; Return value:  Size  Location     Type
  5959 ;;                  1    wreg      void 
  5960 ;; Registers used:
  5961 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5962 ;; Tracked objects:
  5963 ;;		On entry : 0/0
  5964 ;;		On exit  : 0/0
  5965 ;;		Unchanged: 0/0
  5966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  5967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5968 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5969 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5970 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  5971 ;;Total ram usage:        1 bytes
  5972 ;; Hardware stack levels used:    1
  5973 ;; Hardware stack levels required when called:    3
  5974 ;; This function calls:
  5975 ;;		Nothing
  5976 ;; This function is called by:
  5977 ;;		_main
  5978 ;; This function uses a non-reentrant model
  5979 ;;
  5980                           
  5981                           
  5982                           ;psect for function _update_mode
  5983  1241                     _update_mode:	
  5984                           
  5985                           ;tactiles.c: 87: if (PORTCbits.RC0 == 0) {
  5986                           
  5987                           ;incstack = 0
  5988                           ; Regs used in _update_mode: [wreg-fsr0h+status,2+status,0]
  5989  1241  0020               	movlb	0	; select bank0
  5990  1242  180E               	btfsc	14,0	;volatile
  5991  1243  2A7E               	goto	l5659
  5992                           
  5993                           ;tactiles.c: 88: debounce_mode2++;
  5994  1244  3001               	movlw	1
  5995  1245  0023               	movlb	3	; select bank3
  5996  1246  07CE               	addwf	_debounce_mode2^(0+384),f
  5997  1247  3000               	movlw	0
  5998  1248  3DCF               	addwfc	(_debounce_mode2+1)^(0+384),f
  5999                           
  6000                           ;tactiles.c: 89: if (debounce_mode2 > 25) {
  6001  1249  084F               	movf	(_debounce_mode2+1)^(0+384),w
  6002  124A  3A80               	xorlw	128
  6003  124B  0021               	movlb	1	; select bank1
  6004  124C  00A0               	movwf	??_update_mode^(0+128)
  6005  124D  3080               	movlw	128
  6006  124E  0220               	subwf	??_update_mode^(0+128),w
  6007  124F  1D03               	skipz
  6008  1250  2A54               	goto	u6255
  6009  1251  301A               	movlw	26
  6010  1252  0023               	movlb	3	; select bank3
  6011  1253  024E               	subwf	_debounce_mode2^(0+384),w
  6012  1254                     u6255:	
  6013  1254  1C03               	skipc
  6014  1255  0008               	return
  6015                           
  6016                           ;tactiles.c: 90: debounce_mode2 = 25;
  6017  1256  3019               	movlw	25
  6018  1257  0023               	movlb	3	; select bank3
  6019  1258  00CE               	movwf	_debounce_mode2^(0+384)
  6020  1259  3000               	movlw	0
  6021  125A  00CF               	movwf	(_debounce_mode2^(0+384)+1)
  6022                           
  6023                           ;tactiles.c: 91: mode2_state++;
  6024  125B  3001               	movlw	1
  6025  125C  0021               	movlb	1	; select bank1
  6026  125D  00A0               	movwf	??_update_mode^(0+128)
  6027  125E  0820               	movf	??_update_mode^(0+128),w
  6028  125F  0022               	movlb	2	; select bank2
  6029  1260  07D9               	addwf	_mode2_state^(0+256),f
  6030                           
  6031                           ;tactiles.c: 92: if (mode2_state > 2) {
  6032  1261  3003               	movlw	3
  6033  1262  0259               	subwf	_mode2_state^(0+256),w
  6034  1263  1C03               	skipc
  6035  1264  2A6F               	goto	l5657
  6036                           
  6037                           ;tactiles.c: 93: mode2_state = 0;
  6038  1265  01D9               	clrf	_mode2_state^(0+256)
  6039                           
  6040                           ;tactiles.c: 94: }
  6041                           ;tactiles.c: 95: switch(mode2_state) {
  6042  1266  2A6F               	goto	l5657
  6043  1267                     l868:	
  6044                           ;tactiles.c: 96: case 0:
  6045                           
  6046                           
  6047                           ;tactiles.c: 97: LATBbits.LATB1 = 0;
  6048  1267  108D               	bcf	13,1	;volatile
  6049  1268  2A6D               	goto	L1
  6050  1269                     l870:	
  6051                           ;tactiles.c: 100: case 1:
  6052                           
  6053                           ;tactiles.c: 99: break;
  6054                           
  6055                           ;tactiles.c: 98: LATBbits.LATB0 = 0;
  6056                           
  6057                           
  6058                           ;tactiles.c: 101: LATBbits.LATB1 = 0;
  6059  1269  108D               	bcf	13,1	;volatile
  6060                           
  6061                           ;tactiles.c: 102: LATBbits.LATB0 = 1;
  6062  126A  140D               	bsf	13,0	;volatile
  6063                           
  6064                           ;tactiles.c: 103: break;
  6065  126B  2A7A               	goto	l872
  6066  126C                     l871:	
  6067                           ;tactiles.c: 104: case 2:
  6068                           
  6069                           
  6070                           ;tactiles.c: 105: LATBbits.LATB1 = 1;
  6071  126C  148D               	bsf	13,1	;volatile
  6072  126D                     L1:	
  6073                           
  6074                           ;tactiles.c: 106: LATBbits.LATB0 = 0;
  6075  126D  100D               	bcf	13,0	;volatile
  6076                           
  6077                           ;tactiles.c: 108: }
  6078                           
  6079                           ;tactiles.c: 107: break;
  6080  126E  2A7A               	goto	l872
  6081  126F                     l5657:	
  6082  126F  0859               	movf	_mode2_state^(0+256),w
  6083                           
  6084                           ; Switch size 1, requested type "space"
  6085                           ; Number of cases is 3, Range of values is 0 to 2
  6086                           ; switch strategies available:
  6087                           ; Name         Instructions Cycles
  6088                           ; simple_byte           10     6 (average)
  6089                           ; direct_byte           12     6 (fixed)
  6090                           ; jumptable            260     6 (fixed)
  6091                           ;	Chosen strategy is simple_byte
  6092  1270  3A00               	xorlw	0	; case 0
  6093  1271  1903               	skipnz
  6094  1272  2A67               	goto	l868
  6095  1273  3A01               	xorlw	1	; case 1
  6096  1274  1903               	skipnz
  6097  1275  2A69               	goto	l870
  6098  1276  3A03               	xorlw	3	; case 2
  6099  1277  1903               	skipnz
  6100  1278  2A6C               	goto	l871
  6101  1279  2A7A               	goto	l872
  6102  127A                     l872:	
  6103                           ;tactiles.c: 109: while (PORTCbits.RC0 == 0) {
  6104                           
  6105  127A  0020               	movlb	0	; select bank0
  6106  127B  180E               	btfsc	14,0	;volatile
  6107  127C  0008               	return
  6108  127D  2A7A               	goto	l872
  6109  127E                     l5659:	
  6110                           ;tactiles.c: 110: }
  6111                           ;tactiles.c: 111: }
  6112                           ;tactiles.c: 112: } else {
  6113                           
  6114                           
  6115                           ;tactiles.c: 113: debounce_mode2 = 0;
  6116  127E  0023               	movlb	3	; select bank3
  6117  127F  01CE               	clrf	_debounce_mode2^(0+384)
  6118  1280  01CF               	clrf	(_debounce_mode2+1)^(0+384)
  6119  1281  0008               	return
  6120  1282                     __end_of_update_mode:	
  6121                           
  6122                           	psect	text2
  6123  0C15                     __ptext2:	
  6124 ;; *************** function _updateSwitchTap *****************
  6125 ;; Defined at:
  6126 ;;		line 48 in file "SwitchTap.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;  tapCntDiviso    2   28[BANK1 ] int 
  6131 ;;  iCnt            1   30[BANK1 ] unsigned char 
  6132 ;; Return value:  Size  Location     Type
  6133 ;;                  1    wreg      void 
  6134 ;; Registers used:
  6135 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6136 ;; Tracked objects:
  6137 ;;		On entry : 0/0
  6138 ;;		On exit  : 0/0
  6139 ;;		Unchanged: 0/0
  6140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6142 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6143 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6144 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6145 ;;Total ram usage:        9 bytes
  6146 ;; Hardware stack levels used:    1
  6147 ;; Hardware stack levels required when called:    6
  6148 ;; This function calls:
  6149 ;;		___aldiv
  6150 ;;		_setDoublePressState
  6151 ;;		_setLongTapState
  6152 ;; This function is called by:
  6153 ;;		_main
  6154 ;; This function uses a non-reentrant model
  6155 ;;
  6156                           
  6157                           
  6158                           ;psect for function _updateSwitchTap
  6159  0C15                     _updateSwitchTap:	
  6160                           
  6161                           ;SwitchTap.c: 49: uint8_t iCnt = 0;
  6162                           
  6163                           ;incstack = 0
  6164                           ; Regs used in _updateSwitchTap: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6165  0C15  0021               	movlb	1	; select bank1
  6166  0C16  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6167                           
  6168                           ;SwitchTap.c: 57: if (PORTEbits.RE0 == 0) {
  6169  0C17  0020               	movlb	0	; select bank0
  6170  0C18  1810               	btfsc	16,0	;volatile
  6171  0C19  2C20               	goto	l5787
  6172                           
  6173                           ;SwitchTap.c: 58: if (switchTap_pressed > 0) {
  6174  0C1A  0857               	movf	_switchTap_pressed,w
  6175  0C1B  1903               	btfsc	3,2
  6176  0C1C  2C2A               	goto	l1205
  6177                           
  6178                           ;SwitchTap.c: 59: switchTap_pressed--;
  6179  0C1D  3001               	movlw	1
  6180  0C1E  02D7               	subwf	_switchTap_pressed,f
  6181                           
  6182                           ;SwitchTap.c: 60: }
  6183                           ;SwitchTap.c: 61: } else if (switchTap_pressed < 25) {
  6184  0C1F  2C2A               	goto	l1205
  6185  0C20                     l5787:	
  6186  0C20  3019               	movlw	25
  6187  0C21  0257               	subwf	_switchTap_pressed,w
  6188  0C22  1803               	skipnc
  6189  0C23  2C2A               	goto	l1205
  6190                           
  6191                           ;SwitchTap.c: 62: switchTap_pressed++;
  6192  0C24  3001               	movlw	1
  6193  0C25  0021               	movlb	1	; select bank1
  6194  0C26  00B6               	movwf	??_updateSwitchTap^(0+128)
  6195  0C27  0836               	movf	??_updateSwitchTap^(0+128),w
  6196  0C28  0020               	movlb	0	; select bank0
  6197  0C29  07D7               	addwf	_switchTap_pressed,f
  6198  0C2A                     l1205:	
  6199                           
  6200                           ;SwitchTap.c: 63: }
  6201                           ;SwitchTap.c: 69: if (switchTap_pressed == 0) {
  6202  0C2A  0857               	movf	_switchTap_pressed,w
  6203  0C2B  1D03               	btfss	3,2
  6204  0C2C  2DDE               	goto	l5869
  6205                           
  6206                           ;SwitchTap.c: 73: if (tap_timer >= 1563) {
  6207  0C2D  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6208  0C2E  2CB0               	goto	l5829
  6209  0C2F  084C               	movf	_tap_timer+3,w	;volatile
  6210  0C30  1D03               	btfss	3,2
  6211  0C31  2C3B               	goto	l5793
  6212  0C32  084B               	movf	_tap_timer+2,w	;volatile
  6213  0C33  1D03               	btfss	3,2
  6214  0C34  2C3B               	goto	l5793
  6215  0C35  301B               	movlw	27
  6216  0C36  0249               	subwf	_tap_timer,w	;volatile
  6217  0C37  3006               	movlw	6
  6218  0C38  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6219  0C39  1C03               	btfss	3,0
  6220  0C3A  2CB0               	goto	l5829
  6221  0C3B                     l5793:	
  6222                           
  6223                           ;SwitchTap.c: 76: if (switchTap_down != 1) {
  6224  0C3B  0022               	movlb	2	; select bank2
  6225  0C3C  035C               	decf	_switchTap_down^(0+256),w
  6226  0C3D  1903               	btfsc	3,2
  6227  0C3E  2C7A               	goto	l5809
  6228                           
  6229                           ;SwitchTap.c: 78: switchTap_down = 1;
  6230  0C3F  01DC               	clrf	_switchTap_down^(0+256)
  6231  0C40  0ADC               	incf	_switchTap_down^(0+256),f
  6232                           
  6233                           ;SwitchTap.c: 79: tap_timer = 0;
  6234  0C41  3000               	movlw	0
  6235  0C42  0020               	movlb	0	; select bank0
  6236  0C43  00CC               	movwf	_tap_timer+3	;volatile
  6237  0C44  3000               	movlw	0
  6238  0C45  00CB               	movwf	_tap_timer+2	;volatile
  6239  0C46  3000               	movlw	0
  6240  0C47  00CA               	movwf	_tap_timer+1	;volatile
  6241  0C48  3000               	movlw	0
  6242  0C49  00C9               	movwf	_tap_timer	;volatile
  6243                           
  6244                           ;SwitchTap.c: 80: tap_iteration = 1;
  6245  0C4A  3001               	movlw	1
  6246  0C4B  0022               	movlb	2	; select bank2
  6247  0C4C  00E8               	movwf	_tap_iteration^(0+256)
  6248  0C4D  3000               	movlw	0
  6249  0C4E  00E9               	movwf	(_tap_iteration^(0+256)+1)
  6250                           
  6251                           ;SwitchTap.c: 81: tap_total = 0;
  6252  0C4F  3000               	movlw	0
  6253  0C50  0023               	movlb	3	; select bank3
  6254  0C51  00BF               	movwf	(_tap_total+3)^(0+384)
  6255  0C52  3000               	movlw	0
  6256  0C53  00BE               	movwf	(_tap_total+2)^(0+384)
  6257  0C54  3000               	movlw	0
  6258  0C55  00BD               	movwf	(_tap_total+1)^(0+384)
  6259  0C56  3000               	movlw	0
  6260  0C57  00BC               	movwf	_tap_total^(0+384)
  6261                           
  6262                           ;SwitchTap.c: 82: delay_time_changed = 0;
  6263  0C58  01DE               	clrf	_delay_time_changed^(0+384)
  6264  0C59  01DF               	clrf	(_delay_time_changed+1)^(0+384)
  6265                           
  6266                           ;SwitchTap.c: 84: for (iCnt = 1; iCnt <= num_taps; iCnt++) {
  6267  0C5A  0021               	movlb	1	; select bank1
  6268  0C5B  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6269  0C5C  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6270  0C5D                     l5807:	
  6271  0C5D  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6272  0C5E  0020               	movlb	0	; select bank0
  6273  0C5F  0268               	subwf	_num_taps,w
  6274  0C60  1C03               	btfss	3,0
  6275  0C61  2C7A               	goto	l5809
  6276                           
  6277                           ;SwitchTap.c: 85: tap_history[iCnt] = 0;
  6278  0C62  0021               	movlb	1	; select bank1
  6279  0C63  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6280  0C64  00B6               	movwf	??_updateSwitchTap^(0+128)
  6281  0C65  3001               	movlw	1
  6282  0C66                     u6555:	
  6283  0C66  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6284  0C67  3EFF               	addlw	-1
  6285  0C68  1D03               	skipz
  6286  0C69  2C66               	goto	u6555
  6287  0C6A  3536               	lslf	??_updateSwitchTap^(0+128),w
  6288  0C6B  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6289  0C6C  0086               	movwf	6
  6290  0C6D  3001               	movlw	1	; select bank3/4
  6291  0C6E  0087               	movwf	7
  6292  0C6F  3000               	movlw	0
  6293  0C70  3FC0               	movwi [0]fsr1
  6294  0C71  3000               	movlw	0
  6295  0C72  3FC1               	movwi [1]fsr1
  6296  0C73  3FC2               	movwi [2]fsr1
  6297  0C74  3FC3               	movwi [3]fsr1
  6298  0C75  3001               	movlw	1
  6299  0C76  00B6               	movwf	??_updateSwitchTap^(0+128)
  6300  0C77  0836               	movf	??_updateSwitchTap^(0+128),w
  6301  0C78  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6302  0C79  2C5D               	goto	l5807
  6303  0C7A                     l5809:	
  6304                           
  6305                           ;SwitchTap.c: 86: }
  6306                           ;SwitchTap.c: 87: }
  6307                           ;SwitchTap.c: 90: if (longTap_start == 0) {
  6308  0C7A  0020               	movlb	0	; select bank0
  6309  0C7B  0855               	movf	_longTap_start,w
  6310  0C7C  1D03               	btfss	3,2
  6311  0C7D  2C84               	goto	l5815
  6312                           
  6313                           ;SwitchTap.c: 91: longTap_start = 1;
  6314  0C7E  01D5               	clrf	_longTap_start
  6315  0C7F  0AD5               	incf	_longTap_start,f
  6316                           
  6317                           ;SwitchTap.c: 92: longTap_state = 0;
  6318  0C80  01E7               	clrf	_longTap_state	;volatile
  6319                           
  6320                           ;SwitchTap.c: 93: longTap_timer = 0;
  6321  0C81  0022               	movlb	2	; select bank2
  6322  0C82  01D3               	clrf	_longTap_timer^(0+256)	;volatile
  6323  0C83  01D4               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6324  0C84                     l5815:	
  6325                           
  6326                           ;SwitchTap.c: 94: }
  6327                           ;SwitchTap.c: 98: if (longTap_timer >= long_press_limit && longTap_state == 0) {
  6328  0C84  0020               	movlb	0	; select bank0
  6329  0C85  0863               	movf	_long_press_limit+1,w
  6330  0C86  0022               	movlb	2	; select bank2
  6331  0C87  0254               	subwf	(_longTap_timer+1)^(0+256),w	;volatile
  6332  0C88  1D03               	skipz
  6333  0C89  2C8E               	goto	u6585
  6334  0C8A  0020               	movlb	0	; select bank0
  6335  0C8B  0862               	movf	_long_press_limit,w
  6336  0C8C  0022               	movlb	2	; select bank2
  6337  0C8D  0253               	subwf	_longTap_timer^(0+256),w	;volatile
  6338  0C8E                     u6585:	
  6339  0C8E  1C03               	skipc
  6340  0C8F  0008               	return
  6341  0C90  0020               	movlb	0	; select bank0
  6342  0C91  0867               	movf	_longTap_state,w	;volatile
  6343  0C92  1D03               	btfss	3,2
  6344  0C93  0008               	return
  6345                           
  6346                           ;SwitchTap.c: 100: longTap_timer = long_press_limit;
  6347  0C94  0863               	movf	_long_press_limit+1,w
  6348  0C95  0022               	movlb	2	; select bank2
  6349  0C96  00D4               	movwf	(_longTap_timer+1)^(0+256)	;volatile
  6350  0C97  0020               	movlb	0	; select bank0
  6351  0C98  0862               	movf	_long_press_limit,w
  6352  0C99  0022               	movlb	2	; select bank2
  6353  0C9A  00D3               	movwf	_longTap_timer^(0+256)	;volatile
  6354                           
  6355                           ;SwitchTap.c: 101: LATBbits.LATB4 = 0;
  6356  0C9B  120D               	bcf	13,4	;volatile
  6357                           
  6358                           ;SwitchTap.c: 103: if (feedback_start != 1) {
  6359  0C9C  0020               	movlb	0	; select bank0
  6360  0C9D  0354               	decf	_feedback_start,w
  6361  0C9E  1903               	btfsc	3,2
  6362  0C9F  2CA8               	goto	l5827
  6363                           
  6364                           ;SwitchTap.c: 104: setLongTapState(1);
  6365  0CA0  3001               	movlw	1
  6366  0CA1  0021               	movlb	1	; select bank1
  6367  0CA2  00A0               	movwf	setLongTapState@f_state^(0+128)
  6368  0CA3  3000               	movlw	0
  6369  0CA4  00A1               	movwf	(setLongTapState@f_state^(0+128)+1)
  6370  0CA5  319E  266F         	fcall	_setLongTapState
  6371                           
  6372                           ;SwitchTap.c: 105: } else {
  6373  0CA7  0008               	return
  6374  0CA8                     l5827:	
  6375                           
  6376                           ;SwitchTap.c: 106: setDoublePressState(1);
  6377  0CA8  3001               	movlw	1
  6378  0CA9  0021               	movlb	1	; select bank1
  6379  0CAA  00B2               	movwf	setDoublePressState@f_state^(0+128)
  6380  0CAB  3000               	movlw	0
  6381  0CAC  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  6382  0CAD  319F  27D0         	fcall	_setDoublePressState
  6383                           
  6384                           ;SwitchTap.c: 107: }
  6385                           ;SwitchTap.c: 108: }
  6386                           ;SwitchTap.c: 110: } else if (tap_timer < 1563 && longTap_state == 0 && switchTap_down !
      +                          = 1) {
  6387  0CAF  0008               	return
  6388  0CB0                     l5829:	
  6389  0CB0  0020               	movlb	0	; select bank0
  6390  0CB1  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6391  0CB2  2CBF               	goto	l5831
  6392  0CB3  084C               	movf	_tap_timer+3,w	;volatile
  6393  0CB4  1D03               	btfss	3,2
  6394  0CB5  0008               	return
  6395  0CB6  084B               	movf	_tap_timer+2,w	;volatile
  6396  0CB7  1D03               	btfss	3,2
  6397  0CB8  0008               	return
  6398  0CB9  301B               	movlw	27
  6399  0CBA  0249               	subwf	_tap_timer,w	;volatile
  6400  0CBB  3006               	movlw	6
  6401  0CBC  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6402  0CBD  1803               	btfsc	3,0
  6403  0CBE  0008               	return
  6404  0CBF                     l5831:	
  6405  0CBF  0867               	movf	_longTap_state,w	;volatile
  6406  0CC0  1D03               	btfss	3,2
  6407  0CC1  0008               	return
  6408  0CC2  0022               	movlb	2	; select bank2
  6409  0CC3  035C               	decf	_switchTap_down^(0+256),w
  6410  0CC4  1903               	btfsc	3,2
  6411  0CC5  0008               	return
  6412                           
  6413                           ;SwitchTap.c: 112: switchTap_down = 1;
  6414  0CC6  01DC               	clrf	_switchTap_down^(0+256)
  6415  0CC7  0ADC               	incf	_switchTap_down^(0+256),f
  6416                           
  6417                           ;SwitchTap.c: 113: if (tap_timer >= 1172) {
  6418  0CC8  0020               	movlb	0	; select bank0
  6419  0CC9  1BCC               	btfsc	_tap_timer+3,7	;volatile
  6420  0CCA  2CDF               	goto	l1219
  6421  0CCB  084C               	movf	_tap_timer+3,w	;volatile
  6422  0CCC  1D03               	btfss	3,2
  6423  0CCD  2CD7               	goto	l5839
  6424  0CCE  084B               	movf	_tap_timer+2,w	;volatile
  6425  0CCF  1D03               	btfss	3,2
  6426  0CD0  2CD7               	goto	l5839
  6427  0CD1  3094               	movlw	148
  6428  0CD2  0249               	subwf	_tap_timer,w	;volatile
  6429  0CD3  3004               	movlw	4
  6430  0CD4  3B4A               	subwfb	_tap_timer+1,w	;volatile
  6431  0CD5  1C03               	btfss	3,0
  6432  0CD6  2CDF               	goto	l1219
  6433  0CD7                     l5839:	
  6434                           
  6435                           ;SwitchTap.c: 114: tap_timer = 1172;
  6436  0CD7  3000               	movlw	0
  6437  0CD8  00CC               	movwf	_tap_timer+3	;volatile
  6438  0CD9  3000               	movlw	0
  6439  0CDA  00CB               	movwf	_tap_timer+2	;volatile
  6440  0CDB  3004               	movlw	4
  6441  0CDC  00CA               	movwf	_tap_timer+1	;volatile
  6442  0CDD  3094               	movlw	148
  6443  0CDE  00C9               	movwf	_tap_timer	;volatile
  6444  0CDF                     l1219:	
  6445                           
  6446                           ;SwitchTap.c: 115: }
  6447                           ;SwitchTap.c: 117: int tapCntDivisor = num_taps;
  6448  0CDF  0868               	movf	_num_taps,w
  6449  0CE0  0021               	movlb	1	; select bank1
  6450  0CE1  00B6               	movwf	??_updateSwitchTap^(0+128)
  6451  0CE2  01B7               	clrf	(??_updateSwitchTap^(0+128)+1)
  6452  0CE3  0836               	movf	??_updateSwitchTap^(0+128),w
  6453  0CE4  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6454  0CE5  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6455  0CE6  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6456                           
  6457                           ;SwitchTap.c: 118: if (tap_iteration <= num_taps) {
  6458  0CE7  0022               	movlb	2	; select bank2
  6459  0CE8  0869               	movf	(_tap_iteration+1)^(0+256),w
  6460  0CE9  3A80               	xorlw	128
  6461  0CEA  3C80               	sublw	128
  6462  0CEB  1D03               	skipz
  6463  0CEC  2CF0               	goto	u6655
  6464  0CED  0868               	movf	_tap_iteration^(0+256),w
  6465  0CEE  0020               	movlb	0	; select bank0
  6466  0CEF  0268               	subwf	_num_taps,w
  6467  0CF0                     u6655:	
  6468  0CF0  1C03               	skipc
  6469  0CF1  2D22               	goto	l5847
  6470                           
  6471                           ;SwitchTap.c: 119: tap_total += tap_timer;
  6472  0CF2  0020               	movlb	0	; select bank0
  6473  0CF3  0849               	movf	_tap_timer,w	;volatile
  6474  0CF4  0023               	movlb	3	; select bank3
  6475  0CF5  07BC               	addwf	_tap_total^(0+384),f
  6476  0CF6  0020               	movlb	0	; select bank0
  6477  0CF7  084A               	movf	_tap_timer+1,w	;volatile
  6478  0CF8  0023               	movlb	3	; select bank3
  6479  0CF9  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6480  0CFA  0020               	movlb	0	; select bank0
  6481  0CFB  084B               	movf	_tap_timer+2,w	;volatile
  6482  0CFC  0023               	movlb	3	; select bank3
  6483  0CFD  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6484  0CFE  0020               	movlb	0	; select bank0
  6485  0CFF  084C               	movf	_tap_timer+3,w	;volatile
  6486  0D00  0023               	movlb	3	; select bank3
  6487  0D01  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6488                           
  6489                           ;SwitchTap.c: 120: tap_history[tap_iteration] = tap_timer;
  6490  0D02  0022               	movlb	2	; select bank2
  6491  0D03  0868               	movf	_tap_iteration^(0+256),w
  6492  0D04  0021               	movlb	1	; select bank1
  6493  0D05  00B6               	movwf	??_updateSwitchTap^(0+128)
  6494  0D06  3001               	movlw	1
  6495  0D07                     u6665:	
  6496  0D07  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6497  0D08  3EFF               	addlw	-1
  6498  0D09  1D03               	skipz
  6499  0D0A  2D07               	goto	u6665
  6500  0D0B  3536               	lslf	??_updateSwitchTap^(0+128),w
  6501  0D0C  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6502  0D0D  0086               	movwf	6
  6503  0D0E  3001               	movlw	1	; select bank3/4
  6504  0D0F  0087               	movwf	7
  6505  0D10  0020               	movlb	0	; select bank0
  6506  0D11  0849               	movf	_tap_timer,w	;volatile
  6507  0D12  3FC0               	movwi [0]fsr1
  6508  0D13  084A               	movf	_tap_timer+1,w	;volatile
  6509  0D14  3FC1               	movwi [1]fsr1
  6510  0D15  084B               	movf	_tap_timer+2,w	;volatile
  6511  0D16  3FC2               	movwi [2]fsr1
  6512  0D17  084C               	movf	_tap_timer+3,w	;volatile
  6513  0D18  3FC3               	movwi [3]fsr1
  6514                           
  6515                           ;SwitchTap.c: 121: tapCntDivisor = tap_iteration;
  6516  0D19  0022               	movlb	2	; select bank2
  6517  0D1A  0869               	movf	(_tap_iteration+1)^(0+256),w
  6518  0D1B  0021               	movlb	1	; select bank1
  6519  0D1C  00BD               	movwf	(updateSwitchTap@tapCntDivisor+1)^(0+128)
  6520  0D1D  0022               	movlb	2	; select bank2
  6521  0D1E  0868               	movf	_tap_iteration^(0+256),w
  6522  0D1F  0021               	movlb	1	; select bank1
  6523  0D20  00BC               	movwf	updateSwitchTap@tapCntDivisor^(0+128)
  6524                           
  6525                           ;SwitchTap.c: 122: } else {
  6526  0D21  2D9E               	goto	l5861
  6527  0D22                     l5847:	
  6528                           
  6529                           ;SwitchTap.c: 123: tap_total = 0;
  6530  0D22  3000               	movlw	0
  6531  0D23  0023               	movlb	3	; select bank3
  6532  0D24  00BF               	movwf	(_tap_total+3)^(0+384)
  6533  0D25  3000               	movlw	0
  6534  0D26  00BE               	movwf	(_tap_total+2)^(0+384)
  6535  0D27  3000               	movlw	0
  6536  0D28  00BD               	movwf	(_tap_total+1)^(0+384)
  6537  0D29  3000               	movlw	0
  6538  0D2A  00BC               	movwf	_tap_total^(0+384)
  6539                           
  6540                           ;SwitchTap.c: 124: for (iCnt = 1; iCnt < num_taps; iCnt++) {
  6541  0D2B  0021               	movlb	1	; select bank1
  6542  0D2C  01BE               	clrf	updateSwitchTap@iCnt^(0+128)
  6543  0D2D  0ABE               	incf	updateSwitchTap@iCnt^(0+128),f
  6544  0D2E                     l5855:	
  6545  0D2E  0020               	movlb	0	; select bank0
  6546  0D2F  0868               	movf	_num_taps,w
  6547  0D30  0021               	movlb	1	; select bank1
  6548  0D31  023E               	subwf	updateSwitchTap@iCnt^(0+128),w
  6549  0D32  1803               	btfsc	3,0
  6550  0D33  2D78               	goto	l5857
  6551                           
  6552                           ;SwitchTap.c: 125: tap_history[iCnt] = tap_history[iCnt + 1];
  6553  0D34  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6554  0D35  00B6               	movwf	??_updateSwitchTap^(0+128)
  6555  0D36  3001               	movlw	1
  6556  0D37                     u6675:	
  6557  0D37  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6558  0D38  3EFF               	addlw	-1
  6559  0D39  1D03               	skipz
  6560  0D3A  2D37               	goto	u6675
  6561  0D3B  3536               	lslf	??_updateSwitchTap^(0+128),w
  6562  0D3C  3E04               	addlw	4
  6563  0D3D  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6564  0D3E  0086               	movwf	6
  6565  0D3F  3001               	movlw	1	; select bank3/4
  6566  0D40  0087               	movwf	7
  6567  0D41  3F40               	moviw [0]fsr1
  6568  0D42  00B7               	movwf	(??_updateSwitchTap+1)^(0+128)
  6569  0D43  3F41               	moviw [1]fsr1
  6570  0D44  00B8               	movwf	((??_updateSwitchTap+1)^(0+128)+1)
  6571  0D45  3F42               	moviw [2]fsr1
  6572  0D46  00B9               	movwf	((??_updateSwitchTap+1)^(0+128)+2)
  6573  0D47  3F43               	moviw [3]fsr1
  6574  0D48  00BA               	movwf	((??_updateSwitchTap+1)^(0+128)+3)
  6575  0D49  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6576  0D4A  00BB               	movwf	(??_updateSwitchTap+5)^(0+128)
  6577  0D4B  3001               	movlw	1
  6578  0D4C                     u6685:	
  6579  0D4C  35BB               	lslf	(??_updateSwitchTap+5)^(0+128),f
  6580  0D4D  3EFF               	addlw	-1
  6581  0D4E  1D03               	skipz
  6582  0D4F  2D4C               	goto	u6685
  6583  0D50  353B               	lslf	(??_updateSwitchTap+5)^(0+128),w
  6584  0D51  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6585  0D52  0086               	movwf	6
  6586  0D53  3001               	movlw	1	; select bank3/4
  6587  0D54  0087               	movwf	7
  6588  0D55  0837               	movf	(??_updateSwitchTap+1)^(0+128),w
  6589  0D56  3FC0               	movwi [0]fsr1
  6590  0D57  0838               	movf	(??_updateSwitchTap+2)^(0+128),w
  6591  0D58  3FC1               	movwi [1]fsr1
  6592  0D59  0839               	movf	(??_updateSwitchTap+3)^(0+128),w
  6593  0D5A  3FC2               	movwi [2]fsr1
  6594  0D5B  083A               	movf	(??_updateSwitchTap+4)^(0+128),w
  6595  0D5C  3FC3               	movwi [3]fsr1
  6596                           
  6597                           ;SwitchTap.c: 126: tap_total += tap_history[iCnt];
  6598  0D5D  083E               	movf	updateSwitchTap@iCnt^(0+128),w
  6599  0D5E  00B6               	movwf	??_updateSwitchTap^(0+128)
  6600  0D5F  3001               	movlw	1
  6601  0D60                     u6695:	
  6602  0D60  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6603  0D61  3EFF               	addlw	-1
  6604  0D62  1D03               	skipz
  6605  0D63  2D60               	goto	u6695
  6606  0D64  3536               	lslf	??_updateSwitchTap^(0+128),w
  6607  0D65  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6608  0D66  0086               	movwf	6
  6609  0D67  3001               	movlw	1	; select bank3/4
  6610  0D68  0087               	movwf	7
  6611  0D69  3F40               	moviw [0]fsr1
  6612  0D6A  0023               	movlb	3	; select bank3
  6613  0D6B  07BC               	addwf	_tap_total^(0+384),f
  6614  0D6C  3F41               	moviw [1]fsr1
  6615  0D6D  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6616  0D6E  3F42               	moviw [2]fsr1
  6617  0D6F  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6618  0D70  3F43               	moviw [3]fsr1
  6619  0D71  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6620  0D72  3001               	movlw	1
  6621  0D73  0021               	movlb	1	; select bank1
  6622  0D74  00B6               	movwf	??_updateSwitchTap^(0+128)
  6623  0D75  0836               	movf	??_updateSwitchTap^(0+128),w
  6624  0D76  07BE               	addwf	updateSwitchTap@iCnt^(0+128),f
  6625  0D77  2D2E               	goto	l5855
  6626  0D78                     l5857:	
  6627                           
  6628                           ;SwitchTap.c: 127: }
  6629                           ;SwitchTap.c: 128: tap_history[num_taps] = tap_timer;
  6630  0D78  0020               	movlb	0	; select bank0
  6631  0D79  0868               	movf	_num_taps,w
  6632  0D7A  0021               	movlb	1	; select bank1
  6633  0D7B  00B6               	movwf	??_updateSwitchTap^(0+128)
  6634  0D7C  3001               	movlw	1
  6635  0D7D                     u6715:	
  6636  0D7D  35B6               	lslf	??_updateSwitchTap^(0+128),f
  6637  0D7E  3EFF               	addlw	-1
  6638  0D7F  1D03               	skipz
  6639  0D80  2D7D               	goto	u6715
  6640  0D81  3536               	lslf	??_updateSwitchTap^(0+128),w
  6641  0D82  3EA0               	addlw	(low (_tap_history| (0+256)))& (0+255)
  6642  0D83  0086               	movwf	6
  6643  0D84  3001               	movlw	1	; select bank3/4
  6644  0D85  0087               	movwf	7
  6645  0D86  0020               	movlb	0	; select bank0
  6646  0D87  0849               	movf	_tap_timer,w	;volatile
  6647  0D88  3FC0               	movwi [0]fsr1
  6648  0D89  084A               	movf	_tap_timer+1,w	;volatile
  6649  0D8A  3FC1               	movwi [1]fsr1
  6650  0D8B  084B               	movf	_tap_timer+2,w	;volatile
  6651  0D8C  3FC2               	movwi [2]fsr1
  6652  0D8D  084C               	movf	_tap_timer+3,w	;volatile
  6653  0D8E  3FC3               	movwi [3]fsr1
  6654                           
  6655                           ;SwitchTap.c: 129: tap_total += tap_timer;
  6656  0D8F  0849               	movf	_tap_timer,w	;volatile
  6657  0D90  0023               	movlb	3	; select bank3
  6658  0D91  07BC               	addwf	_tap_total^(0+384),f
  6659  0D92  0020               	movlb	0	; select bank0
  6660  0D93  084A               	movf	_tap_timer+1,w	;volatile
  6661  0D94  0023               	movlb	3	; select bank3
  6662  0D95  3DBD               	addwfc	(_tap_total+1)^(0+384),f
  6663  0D96  0020               	movlb	0	; select bank0
  6664  0D97  084B               	movf	_tap_timer+2,w	;volatile
  6665  0D98  0023               	movlb	3	; select bank3
  6666  0D99  3DBE               	addwfc	(_tap_total+2)^(0+384),f
  6667  0D9A  0020               	movlb	0	; select bank0
  6668  0D9B  084C               	movf	_tap_timer+3,w	;volatile
  6669  0D9C  0023               	movlb	3	; select bank3
  6670  0D9D  3DBF               	addwfc	(_tap_total+3)^(0+384),f
  6671  0D9E                     l5861:	
  6672                           
  6673                           ;SwitchTap.c: 130: }
  6674                           ;SwitchTap.c: 132: baseline_delay_time = tap_total / tapCntDivisor;
  6675  0D9E  0021               	movlb	1	; select bank1
  6676  0D9F  083C               	movf	updateSwitchTap@tapCntDivisor^(0+128),w
  6677  0DA0  00A0               	movwf	___aldiv@divisor^(0+128)
  6678  0DA1  083D               	movf	(updateSwitchTap@tapCntDivisor+1)^(0+128),w
  6679  0DA2  00A1               	movwf	(___aldiv@divisor+1)^(0+128)
  6680  0DA3  0D89               	rlf	9,f
  6681  0DA4  3B89               	subwfb	9,f
  6682  0DA5  0989               	comf	9,f
  6683  0DA6  00A2               	movwf	(___aldiv@divisor+2)^(0+128)
  6684  0DA7  00A3               	movwf	(___aldiv@divisor+3)^(0+128)
  6685  0DA8  0023               	movlb	3	; select bank3
  6686  0DA9  083F               	movf	(_tap_total+3)^(0+384),w
  6687  0DAA  0021               	movlb	1	; select bank1
  6688  0DAB  00A7               	movwf	(___aldiv@dividend+3)^(0+128)
  6689  0DAC  0023               	movlb	3	; select bank3
  6690  0DAD  083E               	movf	(_tap_total+2)^(0+384),w
  6691  0DAE  0021               	movlb	1	; select bank1
  6692  0DAF  00A6               	movwf	(___aldiv@dividend+2)^(0+128)
  6693  0DB0  0023               	movlb	3	; select bank3
  6694  0DB1  083D               	movf	(_tap_total+1)^(0+384),w
  6695  0DB2  0021               	movlb	1	; select bank1
  6696  0DB3  00A5               	movwf	(___aldiv@dividend+1)^(0+128)
  6697  0DB4  0023               	movlb	3	; select bank3
  6698  0DB5  083C               	movf	_tap_total^(0+384),w
  6699  0DB6  0021               	movlb	1	; select bank1
  6700  0DB7  00A4               	movwf	___aldiv@dividend^(0+128)
  6701  0DB8  3196  2654         	fcall	___aldiv
  6702  0DBA  0021               	movlb	1	; select bank1
  6703  0DBB  0823               	movf	(?___aldiv+3)^(0+128),w
  6704  0DBC  0020               	movlb	0	; select bank0
  6705  0DBD  00DB               	movwf	_baseline_delay_time+3	;volatile
  6706  0DBE  0021               	movlb	1	; select bank1
  6707  0DBF  0822               	movf	(?___aldiv+2)^(0+128),w
  6708  0DC0  0020               	movlb	0	; select bank0
  6709  0DC1  00DA               	movwf	_baseline_delay_time+2	;volatile
  6710  0DC2  0021               	movlb	1	; select bank1
  6711  0DC3  0821               	movf	(?___aldiv+1)^(0+128),w
  6712  0DC4  0020               	movlb	0	; select bank0
  6713  0DC5  00D9               	movwf	_baseline_delay_time+1	;volatile
  6714  0DC6  0021               	movlb	1	; select bank1
  6715  0DC7  0820               	movf	?___aldiv^(0+128),w
  6716  0DC8  0020               	movlb	0	; select bank0
  6717  0DC9  00D8               	movwf	_baseline_delay_time	;volatile
  6718                           
  6719                           ;SwitchTap.c: 133: delay_time_changed = 1;
  6720  0DCA  3001               	movlw	1
  6721  0DCB  0023               	movlb	3	; select bank3
  6722  0DCC  00DE               	movwf	_delay_time_changed^(0+384)
  6723  0DCD  3000               	movlw	0
  6724  0DCE  00DF               	movwf	(_delay_time_changed^(0+384)+1)
  6725                           
  6726                           ;SwitchTap.c: 134: tap_timer = 0;
  6727  0DCF  3000               	movlw	0
  6728  0DD0  0020               	movlb	0	; select bank0
  6729  0DD1  00CC               	movwf	_tap_timer+3	;volatile
  6730  0DD2  3000               	movlw	0
  6731  0DD3  00CB               	movwf	_tap_timer+2	;volatile
  6732  0DD4  3000               	movlw	0
  6733  0DD5  00CA               	movwf	_tap_timer+1	;volatile
  6734  0DD6  3000               	movlw	0
  6735  0DD7  00C9               	movwf	_tap_timer	;volatile
  6736                           
  6737                           ;SwitchTap.c: 136: tap_iteration++;
  6738  0DD8  3001               	movlw	1
  6739  0DD9  0022               	movlb	2	; select bank2
  6740  0DDA  07E8               	addwf	_tap_iteration^(0+256),f
  6741  0DDB  3000               	movlw	0
  6742  0DDC  3DE9               	addwfc	(_tap_iteration+1)^(0+256),f
  6743                           
  6744                           ;SwitchTap.c: 137: }
  6745                           ;SwitchTap.c: 139: } else if (switchTap_pressed >= 25) {
  6746  0DDD  0008               	return
  6747  0DDE                     l5869:	
  6748  0DDE  3019               	movlw	25
  6749  0DDF  0020               	movlb	0	; select bank0
  6750  0DE0  0257               	subwf	_switchTap_pressed,w
  6751  0DE1  1C03               	skipc
  6752  0DE2  0008               	return
  6753                           
  6754                           ;SwitchTap.c: 140: switchTap_down = 0;
  6755  0DE3  0022               	movlb	2	; select bank2
  6756  0DE4  01DC               	clrf	_switchTap_down^(0+256)
  6757                           
  6758                           ;SwitchTap.c: 141: switchTap_state = 0;
  6759  0DE5  01EB               	clrf	_switchTap_state^(0+256)
  6760                           
  6761                           ;SwitchTap.c: 147: setLongTapState(0);
  6762  0DE6  3000               	movlw	0
  6763  0DE7  0021               	movlb	1	; select bank1
  6764  0DE8  00A0               	movwf	setLongTapState@f_state^(0+128)
  6765  0DE9  00A1               	movwf	(setLongTapState@f_state+1)^(0+128)
  6766  0DEA  319E  266F         	fcall	_setLongTapState
  6767                           
  6768                           ;SwitchTap.c: 149: longTap_timer = 0;
  6769  0DEC  0022               	movlb	2	; select bank2
  6770  0DED  01D3               	clrf	_longTap_timer^(0+256)	;volatile
  6771  0DEE  01D4               	clrf	(_longTap_timer+1)^(0+256)	;volatile
  6772                           
  6773                           ;SwitchTap.c: 150: longTap_start = 0;
  6774  0DEF  0020               	movlb	0	; select bank0
  6775  0DF0  01D5               	clrf	_longTap_start
  6776                           
  6777                           ;SwitchTap.c: 152: switchTap_pressed = 25;
  6778  0DF1  3019               	movlw	25
  6779  0DF2  0021               	movlb	1	; select bank1
  6780  0DF3  00B6               	movwf	??_updateSwitchTap^(0+128)
  6781  0DF4  0836               	movf	??_updateSwitchTap^(0+128),w
  6782  0DF5  0020               	movlb	0	; select bank0
  6783  0DF6  00D7               	movwf	_switchTap_pressed
  6784  0DF7  0008               	return
  6785  0DF8                     __end_of_updateSwitchTap:	
  6786                           
  6787                           	psect	text3
  6788  1E6F                     __ptext3:	
  6789 ;; *************** function _setLongTapState *****************
  6790 ;; Defined at:
  6791 ;;		line 167 in file "SwitchTap.c"
  6792 ;; Parameters:    Size  Location     Type
  6793 ;;  f_state         2    0[BANK1 ] int 
  6794 ;; Auto vars:     Size  Location     Type
  6795 ;;		None
  6796 ;; Return value:  Size  Location     Type
  6797 ;;                  1    wreg      void 
  6798 ;; Registers used:
  6799 ;;		wreg, status,0
  6800 ;; Tracked objects:
  6801 ;;		On entry : 0/0
  6802 ;;		On exit  : 0/0
  6803 ;;		Unchanged: 0/0
  6804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6805 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6807 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6808 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6809 ;;Total ram usage:        4 bytes
  6810 ;; Hardware stack levels used:    1
  6811 ;; Hardware stack levels required when called:    3
  6812 ;; This function calls:
  6813 ;;		Nothing
  6814 ;; This function is called by:
  6815 ;;		_updateSwitchTap
  6816 ;; This function uses a non-reentrant model
  6817 ;;
  6818                           
  6819                           
  6820                           ;psect for function _setLongTapState
  6821  1E6F                     _setLongTapState:	
  6822                           
  6823                           ;SwitchTap.c: 168: if (longTap_state == f_state) {return;}
  6824                           
  6825                           ;incstack = 0
  6826                           ; Regs used in _setLongTapState: [wreg+status,0]
  6827  1E6F  0020               	movlb	0	; select bank0
  6828  1E70  0867               	movf	_longTap_state,w	;volatile
  6829  1E71  0021               	movlb	1	; select bank1
  6830  1E72  00A2               	movwf	??_setLongTapState^(0+128)
  6831  1E73  01A3               	clrf	(??_setLongTapState^(0+128)+1)
  6832  1E74  0821               	movf	(setLongTapState@f_state+1)^(0+128),w
  6833  1E75  0623               	xorwf	(??_setLongTapState+1)^(0+128),w
  6834  1E76  1D03               	skipz
  6835  1E77  2E7A               	goto	u5335
  6836  1E78  0820               	movf	setLongTapState@f_state^(0+128),w
  6837  1E79  0622               	xorwf	??_setLongTapState^(0+128),w
  6838  1E7A                     u5335:	
  6839  1E7A  1903               	btfsc	3,2
  6840  1E7B  0008               	return
  6841                           
  6842                           ;SwitchTap.c: 169: longTap_state = f_state;
  6843  1E7C  0820               	movf	setLongTapState@f_state^(0+128),w
  6844  1E7D  00A2               	movwf	??_setLongTapState^(0+128)
  6845  1E7E  0822               	movf	??_setLongTapState^(0+128),w
  6846  1E7F  0020               	movlb	0	; select bank0
  6847  1E80  00E7               	movwf	_longTap_state	;volatile
  6848                           
  6849                           ;SwitchTap.c: 170: LATBbits.LATB5 = f_state;
  6850  1E81  0021               	movlb	1	; select bank1
  6851  1E82  0C20               	rrf	setLongTapState@f_state^(0+128),w
  6852  1E83  0022               	movlb	2	; select bank2
  6853  1E84  1C03               	skipc
  6854  1E85  128D               	bcf	13,5	;volatile
  6855  1E86  1803               	skipnc
  6856  1E87  168D               	bsf	13,5	;volatile
  6857  1E88  0008               	return
  6858  1E89                     __end_of_setLongTapState:	
  6859                           
  6860                           	psect	text4
  6861  1654                     __ptext4:	
  6862 ;; *************** function ___aldiv *****************
  6863 ;; Defined at:
  6864 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  divisor         4    0[BANK1 ] long 
  6867 ;;  dividend        4    4[BANK1 ] long 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  quotient        4   11[BANK1 ] long 
  6870 ;;  sign            1   10[BANK1 ] unsigned char 
  6871 ;;  counter         1    9[BANK1 ] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  4    0[BANK1 ] long 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  6881 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6882 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6883 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6884 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  6885 ;;Total ram usage:       15 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    3
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_updateSwitchTap
  6892 ;; This function uses a non-reentrant model
  6893 ;;
  6894                           
  6895                           
  6896                           ;psect for function ___aldiv
  6897  1654                     ___aldiv:	
  6898                           
  6899                           ;incstack = 0
  6900                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  6901  1654  0021               	movlb	1	; select bank1
  6902  1655  01AA               	clrf	___aldiv@sign^(0+128)
  6903  1656  1FA3               	btfss	(___aldiv@divisor+3)^(0+128),7
  6904  1657  2E65               	goto	l1373
  6905  1658  09A0               	comf	___aldiv@divisor^(0+128),f
  6906  1659  09A1               	comf	(___aldiv@divisor+1)^(0+128),f
  6907  165A  09A2               	comf	(___aldiv@divisor+2)^(0+128),f
  6908  165B  09A3               	comf	(___aldiv@divisor+3)^(0+128),f
  6909  165C  0AA0               	incf	___aldiv@divisor^(0+128),f
  6910  165D  1903               	skipnz
  6911  165E  0AA1               	incf	(___aldiv@divisor+1)^(0+128),f
  6912  165F  1903               	skipnz
  6913  1660  0AA2               	incf	(___aldiv@divisor+2)^(0+128),f
  6914  1661  1903               	skipnz
  6915  1662  0AA3               	incf	(___aldiv@divisor+3)^(0+128),f
  6916  1663  01AA               	clrf	___aldiv@sign^(0+128)
  6917  1664  0AAA               	incf	___aldiv@sign^(0+128),f
  6918  1665                     l1373:	
  6919  1665  1FA7               	btfss	(___aldiv@dividend+3)^(0+128),7
  6920  1666  2E76               	goto	l5241
  6921  1667  09A4               	comf	___aldiv@dividend^(0+128),f
  6922  1668  09A5               	comf	(___aldiv@dividend+1)^(0+128),f
  6923  1669  09A6               	comf	(___aldiv@dividend+2)^(0+128),f
  6924  166A  09A7               	comf	(___aldiv@dividend+3)^(0+128),f
  6925  166B  0AA4               	incf	___aldiv@dividend^(0+128),f
  6926  166C  1903               	skipnz
  6927  166D  0AA5               	incf	(___aldiv@dividend+1)^(0+128),f
  6928  166E  1903               	skipnz
  6929  166F  0AA6               	incf	(___aldiv@dividend+2)^(0+128),f
  6930  1670  1903               	skipnz
  6931  1671  0AA7               	incf	(___aldiv@dividend+3)^(0+128),f
  6932  1672  3001               	movlw	1
  6933  1673  00A8               	movwf	??___aldiv^(0+128)
  6934  1674  0828               	movf	??___aldiv^(0+128),w
  6935  1675  06AA               	xorwf	___aldiv@sign^(0+128),f
  6936  1676                     l5241:	
  6937  1676  3000               	movlw	0
  6938  1677  00AE               	movwf	(___aldiv@quotient+3)^(0+128)
  6939  1678  3000               	movlw	0
  6940  1679  00AD               	movwf	(___aldiv@quotient+2)^(0+128)
  6941  167A  3000               	movlw	0
  6942  167B  00AC               	movwf	(___aldiv@quotient+1)^(0+128)
  6943  167C  3000               	movlw	0
  6944  167D  00AB               	movwf	___aldiv@quotient^(0+128)
  6945  167E  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  6946  167F  0422               	iorwf	(___aldiv@divisor+2)^(0+128),w
  6947  1680  0421               	iorwf	(___aldiv@divisor+1)^(0+128),w
  6948  1681  0420               	iorwf	___aldiv@divisor^(0+128),w
  6949  1682  1903               	skipnz
  6950  1683  2EBF               	goto	l5263
  6951  1684  01A9               	clrf	___aldiv@counter^(0+128)
  6952  1685  0AA9               	incf	___aldiv@counter^(0+128),f
  6953  1686                     l5249:	
  6954  1686  1BA3               	btfsc	(___aldiv@divisor+3)^(0+128),7
  6955  1687  2E94               	goto	l5251
  6956  1688  3001               	movlw	1
  6957  1689                     u5375:	
  6958  1689  35A0               	lslf	___aldiv@divisor^(0+128),f
  6959  168A  0DA1               	rlf	(___aldiv@divisor+1)^(0+128),f
  6960  168B  0DA2               	rlf	(___aldiv@divisor+2)^(0+128),f
  6961  168C  0DA3               	rlf	(___aldiv@divisor+3)^(0+128),f
  6962  168D  0B89               	decfsz	9,f
  6963  168E  2E89               	goto	u5375
  6964  168F  3001               	movlw	1
  6965  1690  00A8               	movwf	??___aldiv^(0+128)
  6966  1691  0828               	movf	??___aldiv^(0+128),w
  6967  1692  07A9               	addwf	___aldiv@counter^(0+128),f
  6968  1693  2E86               	goto	l5249
  6969  1694                     l5251:	
  6970  1694  3001               	movlw	1
  6971  1695                     u5395:	
  6972  1695  35AB               	lslf	___aldiv@quotient^(0+128),f
  6973  1696  0DAC               	rlf	(___aldiv@quotient+1)^(0+128),f
  6974  1697  0DAD               	rlf	(___aldiv@quotient+2)^(0+128),f
  6975  1698  0DAE               	rlf	(___aldiv@quotient+3)^(0+128),f
  6976  1699  0B89               	decfsz	9,f
  6977  169A  2E95               	goto	u5395
  6978  169B  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  6979  169C  0227               	subwf	(___aldiv@dividend+3)^(0+128),w
  6980  169D  1D03               	skipz
  6981  169E  2EA9               	goto	u5405
  6982  169F  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  6983  16A0  0226               	subwf	(___aldiv@dividend+2)^(0+128),w
  6984  16A1  1D03               	skipz
  6985  16A2  2EA9               	goto	u5405
  6986  16A3  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  6987  16A4  0225               	subwf	(___aldiv@dividend+1)^(0+128),w
  6988  16A5  1D03               	skipz
  6989  16A6  2EA9               	goto	u5405
  6990  16A7  0820               	movf	___aldiv@divisor^(0+128),w
  6991  16A8  0224               	subwf	___aldiv@dividend^(0+128),w
  6992  16A9                     u5405:	
  6993  16A9  1C03               	skipc
  6994  16AA  2EB4               	goto	l5259
  6995  16AB  0820               	movf	___aldiv@divisor^(0+128),w
  6996  16AC  02A4               	subwf	___aldiv@dividend^(0+128),f
  6997  16AD  0821               	movf	(___aldiv@divisor+1)^(0+128),w
  6998  16AE  3BA5               	subwfb	(___aldiv@dividend+1)^(0+128),f
  6999  16AF  0822               	movf	(___aldiv@divisor+2)^(0+128),w
  7000  16B0  3BA6               	subwfb	(___aldiv@dividend+2)^(0+128),f
  7001  16B1  0823               	movf	(___aldiv@divisor+3)^(0+128),w
  7002  16B2  3BA7               	subwfb	(___aldiv@dividend+3)^(0+128),f
  7003  16B3  142B               	bsf	___aldiv@quotient^(0+128),0
  7004  16B4                     l5259:	
  7005  16B4  3001               	movlw	1
  7006  16B5                     u5415:	
  7007  16B5  36A3               	lsrf	(___aldiv@divisor+3)^(0+128),f
  7008  16B6  0CA2               	rrf	(___aldiv@divisor+2)^(0+128),f
  7009  16B7  0CA1               	rrf	(___aldiv@divisor+1)^(0+128),f
  7010  16B8  0CA0               	rrf	___aldiv@divisor^(0+128),f
  7011  16B9  0B89               	decfsz	9,f
  7012  16BA  2EB5               	goto	u5415
  7013  16BB  3001               	movlw	1
  7014  16BC  02A9               	subwf	___aldiv@counter^(0+128),f
  7015  16BD  1D03               	btfss	3,2
  7016  16BE  2E94               	goto	l5251
  7017  16BF                     l5263:	
  7018  16BF  082A               	movf	___aldiv@sign^(0+128),w
  7019  16C0  1903               	btfsc	3,2
  7020  16C1  2ECD               	goto	l5267
  7021  16C2  09AB               	comf	___aldiv@quotient^(0+128),f
  7022  16C3  09AC               	comf	(___aldiv@quotient+1)^(0+128),f
  7023  16C4  09AD               	comf	(___aldiv@quotient+2)^(0+128),f
  7024  16C5  09AE               	comf	(___aldiv@quotient+3)^(0+128),f
  7025  16C6  0AAB               	incf	___aldiv@quotient^(0+128),f
  7026  16C7  1903               	skipnz
  7027  16C8  0AAC               	incf	(___aldiv@quotient+1)^(0+128),f
  7028  16C9  1903               	skipnz
  7029  16CA  0AAD               	incf	(___aldiv@quotient+2)^(0+128),f
  7030  16CB  1903               	skipnz
  7031  16CC  0AAE               	incf	(___aldiv@quotient+3)^(0+128),f
  7032  16CD                     l5267:	
  7033  16CD  082E               	movf	(___aldiv@quotient+3)^(0+128),w
  7034  16CE  00A3               	movwf	(?___aldiv+3)^(0+128)
  7035  16CF  082D               	movf	(___aldiv@quotient+2)^(0+128),w
  7036  16D0  00A2               	movwf	(?___aldiv+2)^(0+128)
  7037  16D1  082C               	movf	(___aldiv@quotient+1)^(0+128),w
  7038  16D2  00A1               	movwf	(?___aldiv+1)^(0+128)
  7039  16D3  082B               	movf	___aldiv@quotient^(0+128),w
  7040  16D4  00A0               	movwf	?___aldiv^(0+128)
  7041  16D5  0008               	return
  7042  16D6                     __end_of___aldiv:	
  7043                           
  7044                           	psect	text5
  7045  0A34                     __ptext5:	
  7046 ;; *************** function _updateSwitchBypass *****************
  7047 ;; Defined at:
  7048 ;;		line 34 in file "SwitchBypass.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;                  1    wreg      void 
  7055 ;; Registers used:
  7056 ;;		wreg, status,2, status,0, pclath, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7064 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7065 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7066 ;;Total ram usage:        2 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    6
  7069 ;; This function calls:
  7070 ;;		_setDoublePressState
  7071 ;;		_setFeedbackState
  7072 ;;		_setSwitchBypassState
  7073 ;; This function is called by:
  7074 ;;		_main
  7075 ;; This function uses a non-reentrant model
  7076 ;;
  7077                           
  7078                           
  7079                           ;psect for function _updateSwitchBypass
  7080  0A34                     _updateSwitchBypass:	
  7081                           
  7082                           ;SwitchBypass.c: 41: if (PORTEbits.RE1 == 0) {
  7083                           
  7084                           ;incstack = 0
  7085                           ; Regs used in _updateSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
  7086  0A34  0020               	movlb	0	; select bank0
  7087  0A35  1890               	btfsc	16,1	;volatile
  7088  0A36  2A4A               	goto	l5699
  7089                           
  7090                           ;SwitchBypass.c: 42: if (switchBypass_pressed > 0) {
  7091  0A37  0022               	movlb	2	; select bank2
  7092  0A38  0856               	movf	(_switchBypass_pressed+1)^(0+256),w
  7093  0A39  3A80               	xorlw	128
  7094  0A3A  0021               	movlb	1	; select bank1
  7095  0A3B  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7096  0A3C  3080               	movlw	128
  7097  0A3D  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7098  0A3E  1D03               	skipz
  7099  0A3F  2A43               	goto	u6295
  7100  0A40  3001               	movlw	1
  7101  0A41  0022               	movlb	2	; select bank2
  7102  0A42  0255               	subwf	_switchBypass_pressed^(0+256),w
  7103  0A43                     u6295:	
  7104  0A43  1C03               	skipc
  7105  0A44  2A5D               	goto	l5703
  7106                           
  7107                           ;SwitchBypass.c: 43: switchBypass_pressed--;
  7108  0A45  30FF               	movlw	255
  7109  0A46  0022               	movlb	2	; select bank2
  7110  0A47  07D5               	addwf	_switchBypass_pressed^(0+256),f
  7111  0A48  30FF               	movlw	255
  7112  0A49  2A5C               	goto	L2
  7113  0A4A                     l5699:	
  7114                           ;SwitchBypass.c: 44: }
  7115                           ;SwitchBypass.c: 45: } else if (switchBypass_pressed < 25) {
  7116                           
  7117  0A4A  0022               	movlb	2	; select bank2
  7118  0A4B  0856               	movf	(_switchBypass_pressed+1)^(0+256),w
  7119  0A4C  3A80               	xorlw	128
  7120  0A4D  0021               	movlb	1	; select bank1
  7121  0A4E  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7122  0A4F  3080               	movlw	128
  7123  0A50  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7124  0A51  1D03               	skipz
  7125  0A52  2A56               	goto	u6305
  7126  0A53  3019               	movlw	25
  7127  0A54  0022               	movlb	2	; select bank2
  7128  0A55  0255               	subwf	_switchBypass_pressed^(0+256),w
  7129  0A56                     u6305:	
  7130  0A56  1803               	skipnc
  7131  0A57  2A5D               	goto	l5703
  7132                           
  7133                           ;SwitchBypass.c: 46: switchBypass_pressed++;
  7134  0A58  3001               	movlw	1
  7135  0A59  0022               	movlb	2	; select bank2
  7136  0A5A  07D5               	addwf	_switchBypass_pressed^(0+256),f
  7137  0A5B  3000               	movlw	0
  7138  0A5C                     L2:	
  7139  0A5C  3DD6               	addwfc	(_switchBypass_pressed+1)^(0+256),f
  7140  0A5D                     l5703:	
  7141                           
  7142                           ;SwitchBypass.c: 47: }
  7143                           ;SwitchBypass.c: 53: if (switchBypass_pressed == 0) {
  7144  0A5D  0022               	movlb	2	; select bank2
  7145  0A5E  0855               	movf	_switchBypass_pressed^(0+256),w
  7146  0A5F  0456               	iorwf	(_switchBypass_pressed+1)^(0+256),w
  7147  0A60  1D03               	btfss	3,2
  7148  0A61  2ABE               	goto	l5743
  7149                           
  7150                           ;SwitchBypass.c: 56: if (feedback_start == 0) {
  7151  0A62  0020               	movlb	0	; select bank0
  7152  0A63  0854               	movf	_feedback_start,w
  7153  0A64  1D03               	btfss	3,2
  7154  0A65  2A6B               	goto	l5711
  7155                           
  7156                           ;SwitchBypass.c: 57: feedback_start = 1;
  7157  0A66  01D4               	clrf	_feedback_start
  7158  0A67  0AD4               	incf	_feedback_start,f
  7159                           
  7160                           ;SwitchBypass.c: 58: feedback_timer = 0;
  7161  0A68  0022               	movlb	2	; select bank2
  7162  0A69  01C7               	clrf	_feedback_timer^(0+256)	;volatile
  7163  0A6A  01C8               	clrf	(_feedback_timer+1)^(0+256)	;volatile
  7164  0A6B                     l5711:	
  7165                           
  7166                           ;SwitchBypass.c: 59: }
  7167                           ;SwitchBypass.c: 61: if (feedback_timer >= long_press_limit && feedback_state == 0 && do
      +                          ubleTap_state == 0) {
  7168  0A6B  0020               	movlb	0	; select bank0
  7169  0A6C  0863               	movf	_long_press_limit+1,w
  7170  0A6D  0022               	movlb	2	; select bank2
  7171  0A6E  0248               	subwf	(_feedback_timer+1)^(0+256),w	;volatile
  7172  0A6F  1D03               	skipz
  7173  0A70  2A75               	goto	u6335
  7174  0A71  0020               	movlb	0	; select bank0
  7175  0A72  0862               	movf	_long_press_limit,w
  7176  0A73  0022               	movlb	2	; select bank2
  7177  0A74  0247               	subwf	_feedback_timer^(0+256),w	;volatile
  7178  0A75                     u6335:	
  7179  0A75  1C03               	skipc
  7180  0A76  2A95               	goto	l5725
  7181  0A77  0020               	movlb	0	; select bank0
  7182  0A78  0866               	movf	_feedback_state,w	;volatile
  7183  0A79  1D03               	btfss	3,2
  7184  0A7A  2A95               	goto	l5725
  7185  0A7B  0853               	movf	_doubleTap_state,w	;volatile
  7186  0A7C  1D03               	btfss	3,2
  7187  0A7D  2A95               	goto	l5725
  7188                           
  7189                           ;SwitchBypass.c: 64: LATBbits.LATB2 = 0;
  7190  0A7E  0022               	movlb	2	; select bank2
  7191  0A7F  110D               	bcf	13,2	;volatile
  7192                           
  7193                           ;SwitchBypass.c: 65: if (longTap_start != 1) {
  7194  0A80  0020               	movlb	0	; select bank0
  7195  0A81  0355               	decf	_longTap_start,w
  7196  0A82  1903               	btfsc	3,2
  7197  0A83  2A8D               	goto	l5723
  7198                           
  7199                           ;SwitchBypass.c: 66: setFeedbackState(1);
  7200  0A84  3001               	movlw	1
  7201  0A85  0021               	movlb	1	; select bank1
  7202  0A86  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7203  0A87  3000               	movlw	0
  7204  0A88  00A1               	movwf	(setFeedbackState@f_state^(0+128)+1)
  7205  0A89  319E  2655  318A   	fcall	_setFeedbackState
  7206                           
  7207                           ;SwitchBypass.c: 67: } else {
  7208  0A8C  2A95               	goto	l5725
  7209  0A8D                     l5723:	
  7210                           
  7211                           ;SwitchBypass.c: 68: setDoublePressState(1);
  7212  0A8D  3001               	movlw	1
  7213  0A8E  0021               	movlb	1	; select bank1
  7214  0A8F  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7215  0A90  3000               	movlw	0
  7216  0A91  00B3               	movwf	(setDoublePressState@f_state^(0+128)+1)
  7217  0A92  319F  27D0  318A   	fcall	_setDoublePressState
  7218  0A95                     l5725:	
  7219                           
  7220                           ;SwitchBypass.c: 69: }
  7221                           ;SwitchBypass.c: 70: }
  7222                           ;SwitchBypass.c: 72: if (doubleTap_state == 0 && feedback_state == 0) {
  7223  0A95  0020               	movlb	0	; select bank0
  7224  0A96  0853               	movf	_doubleTap_state,w	;volatile
  7225  0A97  1D03               	btfss	3,2
  7226  0A98  2ABA               	goto	l1081
  7227  0A99  0866               	movf	_feedback_state,w	;volatile
  7228  0A9A  1D03               	btfss	3,2
  7229  0A9B  2ABA               	goto	l1081
  7230                           
  7231                           ;SwitchBypass.c: 73: if (switchBypass_state == 1) {
  7232  0A9C  0369               	decf	_switchBypass_state,w
  7233  0A9D  1D03               	btfss	3,2
  7234  0A9E  2AAD               	goto	l5737
  7235                           
  7236                           ;SwitchBypass.c: 75: if (switchBypass_up == 1) {
  7237  0A9F  0023               	movlb	3	; select bank3
  7238  0AA0  0362               	decf	_switchBypass_up^(0+384),w
  7239  0AA1  0463               	iorwf	(_switchBypass_up+1)^(0+384),w
  7240  0AA2  1D03               	btfss	3,2
  7241  0AA3  2ABA               	goto	l1081
  7242                           
  7243                           ;SwitchBypass.c: 76: currentBypassState = 1;
  7244  0AA4  0022               	movlb	2	; select bank2
  7245  0AA5  01EA               	clrf	_currentBypassState^(0+256)
  7246  0AA6  0AEA               	incf	_currentBypassState^(0+256),f
  7247                           
  7248                           ;SwitchBypass.c: 77: switchBypass_toggle = 1;
  7249  0AA7  3001               	movlw	1
  7250  0AA8  0023               	movlb	3	; select bank3
  7251  0AA9  00D8               	movwf	_switchBypass_toggle^(0+384)
  7252  0AAA  3000               	movlw	0
  7253  0AAB  00D9               	movwf	(_switchBypass_toggle^(0+384)+1)
  7254                           
  7255                           ;SwitchBypass.c: 78: }
  7256                           ;SwitchBypass.c: 93: } else {
  7257  0AAC  2ABA               	goto	l1081
  7258  0AAD                     l5737:	
  7259                           
  7260                           ;SwitchBypass.c: 94: if (bypass_turning_on != 1) {
  7261  0AAD  0022               	movlb	2	; select bank2
  7262  0AAE  0358               	decf	_bypass_turning_on^(0+256),w
  7263  0AAF  1903               	btfsc	3,2
  7264  0AB0  2ABA               	goto	l1081
  7265                           
  7266                           ;SwitchBypass.c: 96: currentBypassState = 0;
  7267  0AB1  01EA               	clrf	_currentBypassState^(0+256)
  7268                           
  7269                           ;SwitchBypass.c: 98: bypass_turning_on = 1;
  7270  0AB2  01D8               	clrf	_bypass_turning_on^(0+256)
  7271  0AB3  0AD8               	incf	_bypass_turning_on^(0+256),f
  7272                           
  7273                           ;SwitchBypass.c: 99: switchBypass_toggle = 0;
  7274  0AB4  0023               	movlb	3	; select bank3
  7275  0AB5  01D8               	clrf	_switchBypass_toggle^(0+384)
  7276  0AB6  01D9               	clrf	(_switchBypass_toggle+1)^(0+384)
  7277                           
  7278                           ;SwitchBypass.c: 101: feedback_state = 0;
  7279  0AB7  0020               	movlb	0	; select bank0
  7280  0AB8  01E6               	clrf	_feedback_state	;volatile
  7281                           
  7282                           ;SwitchBypass.c: 102: feedback_start = 0;
  7283  0AB9  01D4               	clrf	_feedback_start
  7284  0ABA                     l1081:	
  7285                           
  7286                           ;SwitchBypass.c: 103: }
  7287                           ;SwitchBypass.c: 104: }
  7288                           ;SwitchBypass.c: 106: }
  7289                           ;SwitchBypass.c: 107: switchBypass_up = 0;
  7290  0ABA  0023               	movlb	3	; select bank3
  7291  0ABB  01E2               	clrf	_switchBypass_up^(0+384)
  7292  0ABC  01E3               	clrf	(_switchBypass_up+1)^(0+384)
  7293                           
  7294                           ;SwitchBypass.c: 108: } else if (switchBypass_pressed >= 25) {
  7295  0ABD  0008               	return
  7296  0ABE                     l5743:	
  7297  0ABE  0022               	movlb	2	; select bank2
  7298  0ABF  0856               	movf	(_switchBypass_pressed+1)^(0+256),w
  7299  0AC0  3A80               	xorlw	128
  7300  0AC1  0021               	movlb	1	; select bank1
  7301  0AC2  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7302  0AC3  3080               	movlw	128
  7303  0AC4  0236               	subwf	??_updateSwitchBypass^(0+128),w
  7304  0AC5  1D03               	skipz
  7305  0AC6  2ACA               	goto	u6425
  7306  0AC7  3019               	movlw	25
  7307  0AC8  0022               	movlb	2	; select bank2
  7308  0AC9  0255               	subwf	_switchBypass_pressed^(0+256),w
  7309  0ACA                     u6425:	
  7310  0ACA  1C03               	skipc
  7311  0ACB  0008               	return
  7312                           
  7313                           ;SwitchBypass.c: 109: if (doubleTap_state == 1) {
  7314  0ACC  0020               	movlb	0	; select bank0
  7315  0ACD  0353               	decf	_doubleTap_state,w	;volatile
  7316  0ACE  1D03               	btfss	3,2
  7317  0ACF  2AD9               	goto	l5749
  7318                           
  7319                           ;SwitchBypass.c: 110: setSwitchBypassState(currentBypassState);
  7320  0AD0  0022               	movlb	2	; select bank2
  7321  0AD1  086A               	movf	_currentBypassState^(0+256),w
  7322  0AD2  0021               	movlb	1	; select bank1
  7323  0AD3  00B6               	movwf	??_updateSwitchBypass^(0+128)
  7324  0AD4  01B7               	clrf	(??_updateSwitchBypass^(0+128)+1)
  7325  0AD5  0836               	movf	??_updateSwitchBypass^(0+128),w
  7326  0AD6  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7327  0AD7  0837               	movf	(??_updateSwitchBypass+1)^(0+128),w
  7328  0AD8  2AF6               	goto	L3
  7329  0AD9                     l5749:	
  7330                           ;SwitchBypass.c: 111: } else if (bypass_turning_on == 1 || feedback_state == 1) {
  7331                           
  7332  0AD9  0022               	movlb	2	; select bank2
  7333  0ADA  0358               	decf	_bypass_turning_on^(0+256),w
  7334  0ADB  1903               	btfsc	3,2
  7335  0ADC  2AE1               	goto	l5753
  7336  0ADD  0020               	movlb	0	; select bank0
  7337  0ADE  0366               	decf	_feedback_state,w	;volatile
  7338  0ADF  1D03               	btfss	3,2
  7339  0AE0  2AE7               	goto	l5755
  7340  0AE1                     l5753:	
  7341                           
  7342                           ;SwitchBypass.c: 112: setSwitchBypassState(1);
  7343  0AE1  3001               	movlw	1
  7344  0AE2  0021               	movlb	1	; select bank1
  7345  0AE3  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7346  0AE4  3000               	movlw	0
  7347  0AE5  00B3               	movwf	(setSwitchBypassState@f_state^(0+128)+1)
  7348  0AE6  2AF7               	goto	L4
  7349  0AE7                     l5755:	
  7350                           ;SwitchBypass.c: 113: } else if (switchBypass_toggle == 1 && feedback_state == 0 && doub
      +                          leTap_state == 0) {
  7351                           
  7352  0AE7  0023               	movlb	3	; select bank3
  7353  0AE8  0358               	decf	_switchBypass_toggle^(0+384),w
  7354  0AE9  0459               	iorwf	(_switchBypass_toggle+1)^(0+384),w
  7355  0AEA  1D03               	btfss	3,2
  7356  0AEB  2AFA               	goto	l5763
  7357  0AEC  0020               	movlb	0	; select bank0
  7358  0AED  0866               	movf	_feedback_state,w	;volatile
  7359  0AEE  1D03               	btfss	3,2
  7360  0AEF  2AFA               	goto	l5763
  7361  0AF0  0853               	movf	_doubleTap_state,w	;volatile
  7362  0AF1  1D03               	btfss	3,2
  7363  0AF2  2AFA               	goto	l5763
  7364                           
  7365                           ;SwitchBypass.c: 114: setSwitchBypassState(0);
  7366  0AF3  3000               	movlw	0
  7367  0AF4  0021               	movlb	1	; select bank1
  7368  0AF5  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
  7369  0AF6                     L3:	
  7370  0AF6  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
  7371  0AF7                     L4:	
  7372  0AF7  3193  2311  318A   	fcall	_setSwitchBypassState
  7373  0AFA                     l5763:	
  7374                           
  7375                           ;SwitchBypass.c: 115: }
  7376                           ;SwitchBypass.c: 118: LATBbits.LATB2 = switchBypass_state;
  7377  0AFA  0020               	movlb	0	; select bank0
  7378  0AFB  0C69               	rrf	_switchBypass_state,w
  7379  0AFC  0022               	movlb	2	; select bank2
  7380  0AFD  1C03               	skipc
  7381  0AFE  110D               	bcf	13,2	;volatile
  7382  0AFF  1803               	skipnc
  7383  0B00  150D               	bsf	13,2	;volatile
  7384                           
  7385                           ;SwitchBypass.c: 120: setFeedbackState(0);
  7386  0B01  3000               	movlw	0
  7387  0B02  0021               	movlb	1	; select bank1
  7388  0B03  00A0               	movwf	setFeedbackState@f_state^(0+128)
  7389  0B04  00A1               	movwf	(setFeedbackState@f_state+1)^(0+128)
  7390  0B05  319E  2655  318A   	fcall	_setFeedbackState
  7391                           
  7392                           ;SwitchBypass.c: 121: setDoublePressState(0);
  7393  0B08  3000               	movlw	0
  7394  0B09  0021               	movlb	1	; select bank1
  7395  0B0A  00B2               	movwf	setDoublePressState@f_state^(0+128)
  7396  0B0B  00B3               	movwf	(setDoublePressState@f_state+1)^(0+128)
  7397  0B0C  319F  27D0         	fcall	_setDoublePressState
  7398                           
  7399                           ;SwitchBypass.c: 122: feedback_start = 0;
  7400  0B0E  0020               	movlb	0	; select bank0
  7401  0B0F  01D4               	clrf	_feedback_start
  7402                           
  7403                           ;SwitchBypass.c: 123: bypass_turning_on = 0;
  7404  0B10  0022               	movlb	2	; select bank2
  7405  0B11  01D8               	clrf	_bypass_turning_on^(0+256)
  7406                           
  7407                           ;SwitchBypass.c: 124: switchBypass_toggle = 0;
  7408  0B12  0023               	movlb	3	; select bank3
  7409  0B13  01D8               	clrf	_switchBypass_toggle^(0+384)
  7410  0B14  01D9               	clrf	(_switchBypass_toggle+1)^(0+384)
  7411                           
  7412                           ;SwitchBypass.c: 125: switchBypass_up = 1;
  7413  0B15  3001               	movlw	1
  7414  0B16  00E2               	movwf	_switchBypass_up^(0+384)
  7415  0B17  3000               	movlw	0
  7416  0B18  00E3               	movwf	(_switchBypass_up^(0+384)+1)
  7417                           
  7418                           ;SwitchBypass.c: 127: switchBypass_pressed = 25;
  7419  0B19  3019               	movlw	25
  7420  0B1A  0022               	movlb	2	; select bank2
  7421  0B1B  00D5               	movwf	_switchBypass_pressed^(0+256)
  7422  0B1C  3000               	movlw	0
  7423  0B1D  00D6               	movwf	(_switchBypass_pressed^(0+256)+1)
  7424  0B1E  0008               	return
  7425  0B1F                     __end_of_updateSwitchBypass:	
  7426                           
  7427                           	psect	text6
  7428  1E55                     __ptext6:	
  7429 ;; *************** function _setFeedbackState *****************
  7430 ;; Defined at:
  7431 ;;		line 151 in file "SwitchBypass.c"
  7432 ;; Parameters:    Size  Location     Type
  7433 ;;  f_state         2    0[BANK1 ] int 
  7434 ;; Auto vars:     Size  Location     Type
  7435 ;;		None
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  1    wreg      void 
  7438 ;; Registers used:
  7439 ;;		wreg, status,0
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7445 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7447 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7448 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7449 ;;Total ram usage:        4 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    3
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_updateSwitchBypass
  7456 ;; This function uses a non-reentrant model
  7457 ;;
  7458                           
  7459                           
  7460                           ;psect for function _setFeedbackState
  7461  1E55                     _setFeedbackState:	
  7462                           
  7463                           ;SwitchBypass.c: 152: if (feedback_state == f_state) {return;}
  7464                           
  7465                           ;incstack = 0
  7466                           ; Regs used in _setFeedbackState: [wreg+status,0]
  7467  1E55  0020               	movlb	0	; select bank0
  7468  1E56  0866               	movf	_feedback_state,w	;volatile
  7469  1E57  0021               	movlb	1	; select bank1
  7470  1E58  00A2               	movwf	??_setFeedbackState^(0+128)
  7471  1E59  01A3               	clrf	(??_setFeedbackState^(0+128)+1)
  7472  1E5A  0821               	movf	(setFeedbackState@f_state+1)^(0+128),w
  7473  1E5B  0623               	xorwf	(??_setFeedbackState+1)^(0+128),w
  7474  1E5C  1D03               	skipz
  7475  1E5D  2E60               	goto	u5305
  7476  1E5E  0820               	movf	setFeedbackState@f_state^(0+128),w
  7477  1E5F  0622               	xorwf	??_setFeedbackState^(0+128),w
  7478  1E60                     u5305:	
  7479  1E60  1903               	btfsc	3,2
  7480  1E61  0008               	return
  7481                           
  7482                           ;SwitchBypass.c: 153: feedback_state = f_state;
  7483  1E62  0820               	movf	setFeedbackState@f_state^(0+128),w
  7484  1E63  00A2               	movwf	??_setFeedbackState^(0+128)
  7485  1E64  0822               	movf	??_setFeedbackState^(0+128),w
  7486  1E65  0020               	movlb	0	; select bank0
  7487  1E66  00E6               	movwf	_feedback_state	;volatile
  7488                           
  7489                           ;SwitchBypass.c: 154: LATBbits.LATB3 = f_state;
  7490  1E67  0021               	movlb	1	; select bank1
  7491  1E68  0C20               	rrf	setFeedbackState@f_state^(0+128),w
  7492  1E69  0022               	movlb	2	; select bank2
  7493  1E6A  1C03               	skipc
  7494  1E6B  118D               	bcf	13,3	;volatile
  7495  1E6C  1803               	skipnc
  7496  1E6D  158D               	bsf	13,3	;volatile
  7497  1E6E  0008               	return
  7498  1E6F                     __end_of_setFeedbackState:	
  7499                           
  7500                           	psect	text7
  7501  1FD0                     __ptext7:	
  7502 ;; *************** function _setDoublePressState *****************
  7503 ;; Defined at:
  7504 ;;		line 20 in file "preset_programming.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  f_state         2   18[BANK1 ] int 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;		None
  7509 ;; Return value:  Size  Location     Type
  7510 ;;                  1    wreg      void 
  7511 ;; Registers used:
  7512 ;;		wreg, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7518 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7520 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7521 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7522 ;;Total ram usage:        4 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    5
  7525 ;; This function calls:
  7526 ;;		_wait_ms
  7527 ;; This function is called by:
  7528 ;;		_updateSwitchBypass
  7529 ;;		_updateSwitchTap
  7530 ;; This function uses a non-reentrant model
  7531 ;;
  7532                           
  7533                           
  7534                           ;psect for function _setDoublePressState
  7535  1FD0                     _setDoublePressState:	
  7536                           
  7537                           ;preset_programming.c: 21: if (doubleTap_state == f_state) {return;}
  7538                           
  7539                           ;incstack = 0
  7540                           ; Regs used in _setDoublePressState: [wreg+status,2+status,0+pclath+cstack]
  7541  1FD0  0020               	movlb	0	; select bank0
  7542  1FD1  0853               	movf	_doubleTap_state,w	;volatile
  7543  1FD2  0021               	movlb	1	; select bank1
  7544  1FD3  00B4               	movwf	??_setDoublePressState^(0+128)
  7545  1FD4  01B5               	clrf	(??_setDoublePressState^(0+128)+1)
  7546  1FD5  0833               	movf	(setDoublePressState@f_state+1)^(0+128),w
  7547  1FD6  0635               	xorwf	(??_setDoublePressState+1)^(0+128),w
  7548  1FD7  1D03               	skipz
  7549  1FD8  2FDB               	goto	u5315
  7550  1FD9  0832               	movf	setDoublePressState@f_state^(0+128),w
  7551  1FDA  0634               	xorwf	??_setDoublePressState^(0+128),w
  7552  1FDB                     u5315:	
  7553  1FDB  1903               	btfsc	3,2
  7554  1FDC  0008               	return
  7555                           
  7556                           ;preset_programming.c: 22: doubleTap_state = f_state;
  7557  1FDD  0832               	movf	setDoublePressState@f_state^(0+128),w
  7558  1FDE  00B4               	movwf	??_setDoublePressState^(0+128)
  7559  1FDF  0834               	movf	??_setDoublePressState^(0+128),w
  7560  1FE0  0020               	movlb	0	; select bank0
  7561  1FE1  00D3               	movwf	_doubleTap_state	;volatile
  7562                           
  7563                           ;preset_programming.c: 23: if (f_state == 1) {
  7564  1FE2  0021               	movlb	1	; select bank1
  7565  1FE3  0332               	decf	setDoublePressState@f_state^(0+128),w
  7566  1FE4  0433               	iorwf	(setDoublePressState@f_state+1)^(0+128),w
  7567  1FE5  1D03               	btfss	3,2
  7568  1FE6  2FEA               	goto	l5219
  7569                           
  7570                           ;preset_programming.c: 24: LATBbits.LATB4 = 0;
  7571  1FE7  0022               	movlb	2	; select bank2
  7572  1FE8  120D               	bcf	13,4	;volatile
  7573                           
  7574                           ;preset_programming.c: 25: LATBbits.LATB2 = 0;
  7575  1FE9  110D               	bcf	13,2	;volatile
  7576  1FEA                     l5219:	
  7577                           
  7578                           ;preset_programming.c: 26: }
  7579                           ;preset_programming.c: 28: LATBbits.LATB1 = f_state;
  7580  1FEA  0021               	movlb	1	; select bank1
  7581  1FEB  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7582  1FEC  0022               	movlb	2	; select bank2
  7583  1FED  1C03               	skipc
  7584  1FEE  108D               	bcf	13,1	;volatile
  7585  1FEF  1803               	skipnc
  7586  1FF0  148D               	bsf	13,1	;volatile
  7587                           
  7588                           ;preset_programming.c: 29: LATBbits.LATB0 = f_state;
  7589  1FF1  0021               	movlb	1	; select bank1
  7590  1FF2  0C32               	rrf	setDoublePressState@f_state^(0+128),w
  7591  1FF3  0022               	movlb	2	; select bank2
  7592  1FF4  1C03               	skipc
  7593  1FF5  100D               	bcf	13,0	;volatile
  7594  1FF6  1803               	skipnc
  7595  1FF7  140D               	bsf	13,0	;volatile
  7596                           
  7597                           ;preset_programming.c: 31: wait_ms(20);
  7598  1FF8  3014               	movlw	20
  7599  1FF9  0021               	movlb	1	; select bank1
  7600  1FFA  00AC               	movwf	wait_ms@timeSec^(0+128)
  7601  1FFB  3000               	movlw	0
  7602  1FFC  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  7603  1FFD  3190  2021         	fcall	_wait_ms
  7604  1FFF  0008               	return
  7605  2000                     __end_of_setDoublePressState:	
  7606                           
  7607                           	psect	text8
  7608  1447                     __ptext8:	
  7609 ;; *************** function _trunc *****************
  7610 ;; Defined at:
  7611 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\trunc.c"
  7612 ;; Parameters:    Size  Location     Type
  7613 ;;  x               3   14[BANK2 ] void 
  7614 ;; Auto vars:     Size  Location     Type
  7615 ;;  i               3   17[BANK2 ] void 
  7616 ;;  expon           2   20[BANK2 ] int 
  7617 ;; Return value:  Size  Location     Type
  7618 ;;                  3   14[BANK2 ] int 
  7619 ;; Registers used:
  7620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7621 ;; Tracked objects:
  7622 ;;		On entry : 0/0
  7623 ;;		On exit  : 0/0
  7624 ;;		Unchanged: 0/0
  7625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7626 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7627 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7628 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7629 ;;      Totals:         0       0       1       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7630 ;;Total ram usage:        9 bytes
  7631 ;; Hardware stack levels used:    1
  7632 ;; Hardware stack levels required when called:    5
  7633 ;; This function calls:
  7634 ;;		___altoft
  7635 ;;		___fttol
  7636 ;;		_frexp
  7637 ;; This function is called by:
  7638 ;;		_main
  7639 ;; This function uses a non-reentrant model
  7640 ;;
  7641                           
  7642                           
  7643                           ;psect for function _trunc
  7644  1447                     _trunc:	
  7645                           
  7646                           ;incstack = 0
  7647                           ; Regs used in _trunc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7648  1447  0022               	movlb	2	; select bank2
  7649  1448  082E               	movf	trunc@x^(0+256),w
  7650  1449  0021               	movlb	1	; select bank1
  7651  144A  00A0               	movwf	frexp@value^(0+128)
  7652  144B  0022               	movlb	2	; select bank2
  7653  144C  082F               	movf	(trunc@x+1)^(0+256),w
  7654  144D  0021               	movlb	1	; select bank1
  7655  144E  00A1               	movwf	(frexp@value+1)^(0+128)
  7656  144F  0022               	movlb	2	; select bank2
  7657  1450  0830               	movf	(trunc@x+2)^(0+256),w
  7658  1451  0021               	movlb	1	; select bank1
  7659  1452  00A2               	movwf	(frexp@value+2)^(0+128)
  7660  1453  3034               	movlw	(low (trunc@expon| (0+256)))& (0+255)
  7661  1454  00EF               	movwf	??_trunc^(0+128)
  7662  1455  086F               	movf	??_trunc^(0+128),w
  7663  1456  00A3               	movwf	frexp@eptr^(0+128)
  7664  1457  3190  2053  3194   	fcall	_frexp
  7665  145A  0022               	movlb	2	; select bank2
  7666  145B  1FB5               	btfss	(trunc@expon+1)^(0+256),7
  7667  145C  2C64               	goto	l5535
  7668  145D  3000               	movlw	0
  7669  145E  00AE               	movwf	?_trunc^(0+256)
  7670  145F  3000               	movlw	0
  7671  1460  00AF               	movwf	(?_trunc+1)^(0+256)
  7672  1461  3000               	movlw	0
  7673  1462  00B0               	movwf	(?_trunc+2)^(0+256)
  7674  1463  0008               	return
  7675  1464                     l5535:	
  7676  1464  3000               	movlw	0
  7677  1465  0235               	subwf	(trunc@expon+1)^(0+256),w
  7678  1466  3015               	movlw	21
  7679  1467  1903               	skipnz
  7680  1468  0234               	subwf	trunc@expon^(0+256),w
  7681  1469  1803               	btfsc	3,0
  7682  146A  0008               	return
  7683  146B  082E               	movf	trunc@x^(0+256),w
  7684  146C  0021               	movlb	1	; select bank1
  7685  146D  00E7               	movwf	___fttol@f1^(0+128)
  7686  146E  0022               	movlb	2	; select bank2
  7687  146F  082F               	movf	(trunc@x+1)^(0+256),w
  7688  1470  0021               	movlb	1	; select bank1
  7689  1471  00E8               	movwf	(___fttol@f1+1)^(0+128)
  7690  1472  0022               	movlb	2	; select bank2
  7691  1473  0830               	movf	(trunc@x+2)^(0+256),w
  7692  1474  0021               	movlb	1	; select bank1
  7693  1475  00E9               	movwf	(___fttol@f1+2)^(0+128)
  7694  1476  3197  2761  3194   	fcall	___fttol
  7695  1479  0021               	movlb	1	; select bank1
  7696  147A  086A               	movf	(?___fttol+3)^(0+128),w
  7697  147B  0022               	movlb	2	; select bank2
  7698  147C  00A9               	movwf	(___altoft@c+3)^(0+256)
  7699  147D  0021               	movlb	1	; select bank1
  7700  147E  0869               	movf	(?___fttol+2)^(0+128),w
  7701  147F  0022               	movlb	2	; select bank2
  7702  1480  00A8               	movwf	(___altoft@c+2)^(0+256)
  7703  1481  0021               	movlb	1	; select bank1
  7704  1482  0868               	movf	(?___fttol+1)^(0+128),w
  7705  1483  0022               	movlb	2	; select bank2
  7706  1484  00A7               	movwf	(___altoft@c+1)^(0+256)
  7707  1485  0021               	movlb	1	; select bank1
  7708  1486  0867               	movf	?___fttol^(0+128),w
  7709  1487  0022               	movlb	2	; select bank2
  7710  1488  00A6               	movwf	___altoft@c^(0+256)
  7711  1489  3193  235B         	fcall	___altoft
  7712  148B  0022               	movlb	2	; select bank2
  7713  148C  0826               	movf	?___altoft^(0+256),w
  7714  148D  00B1               	movwf	trunc@i^(0+256)
  7715  148E  0827               	movf	(?___altoft+1)^(0+256),w
  7716  148F  00B2               	movwf	(trunc@i+1)^(0+256)
  7717  1490  0828               	movf	(?___altoft+2)^(0+256),w
  7718  1491  00B3               	movwf	(trunc@i+2)^(0+256)
  7719  1492  0831               	movf	trunc@i^(0+256),w
  7720  1493  00AE               	movwf	?_trunc^(0+256)
  7721  1494  0832               	movf	(trunc@i+1)^(0+256),w
  7722  1495  00AF               	movwf	(?_trunc+1)^(0+256)
  7723  1496  0833               	movf	(trunc@i+2)^(0+256),w
  7724  1497  00B0               	movwf	(?_trunc+2)^(0+256)
  7725  1498  0008               	return
  7726  1499                     __end_of_trunc:	
  7727                           
  7728                           	psect	text9
  7729  1053                     __ptext9:	
  7730 ;; *************** function _frexp *****************
  7731 ;; Defined at:
  7732 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\frexp.c"
  7733 ;; Parameters:    Size  Location     Type
  7734 ;;  value           3    0[BANK1 ] int 
  7735 ;;  eptr            1    3[BANK1 ] PTR int 
  7736 ;;		 -> trunc@expon(2), 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;		None
  7739 ;; Return value:  Size  Location     Type
  7740 ;;                  3    0[BANK1 ] PTR int 
  7741 ;; Registers used:
  7742 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7743 ;; Tracked objects:
  7744 ;;		On entry : 0/0
  7745 ;;		On exit  : 0/0
  7746 ;;		Unchanged: 0/0
  7747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7748 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7750 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7751 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7752 ;;Total ram usage:        6 bytes
  7753 ;; Hardware stack levels used:    1
  7754 ;; Hardware stack levels required when called:    3
  7755 ;; This function calls:
  7756 ;;		Nothing
  7757 ;; This function is called by:
  7758 ;;		_trunc
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           
  7763                           ;psect for function _frexp
  7764  1053                     _frexp:	
  7765                           
  7766                           ;incstack = 0
  7767                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  7768  1053  0021               	movlb	1	; select bank1
  7769  1054  0822               	movf	(frexp@value+2)^(0+128),w
  7770  1055  0421               	iorwf	(frexp@value+1)^(0+128),w
  7771  1056  0420               	iorwf	frexp@value^(0+128),w
  7772  1057  1D03               	skipz
  7773  1058  2861               	goto	l5517
  7774  1059  0823               	movf	frexp@eptr^(0+128),w
  7775  105A  0086               	movwf	6
  7776  105B  3001               	movlw	1	; select bank2/3
  7777  105C  0087               	movwf	7
  7778  105D  3000               	movlw	0
  7779  105E  3FC0               	movwi [0]fsr1
  7780  105F  3FC1               	movwi [1]fsr1
  7781                           
  7782                           ;	Return value of _frexp is never used
  7783  1060  0008               	return
  7784  1061                     l5517:	
  7785  1061  0822               	movf	(frexp@value^(0+128)+2),w
  7786  1062  397F               	andlw	127
  7787  1063  00A4               	movwf	??_frexp^(0+128)
  7788  1064  01A5               	clrf	(??_frexp^(0+128)+1)
  7789  1065  35A4               	lslf	??_frexp^(0+128),f
  7790  1066  0DA5               	rlf	(??_frexp^(0+128)+1),f
  7791  1067  0823               	movf	frexp@eptr^(0+128),w
  7792  1068  0086               	movwf	6
  7793  1069  3001               	movlw	1	; select bank2/3
  7794  106A  0087               	movwf	7
  7795  106B  0824               	movf	??_frexp^(0+128),w
  7796  106C  3FC0               	movwi [0]fsr1
  7797  106D  0825               	movf	(??_frexp+1)^(0+128),w
  7798  106E  3FC1               	movwi [1]fsr1
  7799  106F  0D21               	rlf	(frexp@value^(0+128)+1),w
  7800  1070  0D21               	rlf	(frexp@value^(0+128)+1),w
  7801  1071  3901               	andlw	1
  7802  1072  00A4               	movwf	??_frexp^(0+128)
  7803  1073  01A5               	clrf	(??_frexp^(0+128)+1)
  7804  1074  0823               	movf	frexp@eptr^(0+128),w
  7805  1075  0086               	movwf	6
  7806  1076  3001               	movlw	1	; select bank2/3
  7807  1077  0087               	movwf	7
  7808  1078  0824               	movf	??_frexp^(0+128),w
  7809  1079  0481               	iorwf	1,f
  7810  107A  3141               	addfsr 1,1
  7811  107B  0825               	movf	(??_frexp+1)^(0+128),w
  7812  107C  0481               	iorwf	1,f
  7813  107D  0823               	movf	frexp@eptr^(0+128),w
  7814  107E  0086               	movwf	6
  7815  107F  3001               	movlw	1	; select bank2/3
  7816  1080  0087               	movwf	7
  7817  1081  3082               	movlw	130
  7818  1082  0781               	addwf	1,f
  7819  1083  3141               	addfsr 1,1
  7820  1084  30FF               	movlw	255
  7821  1085  3D81               	addwfc	1,f
  7822  1086  317F               	addfsr 1,-1
  7823  1087  0822               	movf	(frexp@value^(0+128)+2),w
  7824  1088  3980               	andlw	-128
  7825  1089  383F               	iorlw	63
  7826  108A  00A2               	movwf	(frexp@value^(0+128)+2)
  7827  108B  13A1               	bcf	(frexp@value^(0+128)+1),7
  7828  108C  0008               	return
  7829  108D                     __end_of_frexp:	
  7830                           ;	Return value of _frexp is never used
  7831                           
  7832                           
  7833                           	psect	text10
  7834  135B                     __ptext10:	
  7835 ;; *************** function ___altoft *****************
  7836 ;; Defined at:
  7837 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\altoft.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  c               4    6[BANK2 ] long 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  sign            1   13[BANK2 ] unsigned char 
  7842 ;;  exp             1   12[BANK2 ] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  3    6[BANK2 ] float 
  7845 ;; Registers used:
  7846 ;;		wreg, status,2, status,0, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7852 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7853 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7854 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7855 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7856 ;;Total ram usage:        8 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    4
  7859 ;; This function calls:
  7860 ;;		___ftpack
  7861 ;; This function is called by:
  7862 ;;		_trunc
  7863 ;; This function uses a non-reentrant model
  7864 ;;
  7865                           
  7866                           
  7867                           ;psect for function ___altoft
  7868  135B                     ___altoft:	
  7869                           
  7870                           ;incstack = 0
  7871                           ; Regs used in ___altoft: [wreg+status,2+status,0+pclath+cstack]
  7872  135B  0022               	movlb	2	; select bank2
  7873  135C  01AD               	clrf	___altoft@sign^(0+256)
  7874  135D  308E               	movlw	142
  7875  135E  00AA               	movwf	??___altoft^(0+256)
  7876  135F  082A               	movf	??___altoft^(0+256),w
  7877  1360  00AC               	movwf	___altoft@exp^(0+256)
  7878  1361  1FA9               	btfss	(___altoft@c+3)^(0+256),7
  7879  1362  2B70               	goto	l5281
  7880  1363  09A6               	comf	___altoft@c^(0+256),f
  7881  1364  09A7               	comf	(___altoft@c+1)^(0+256),f
  7882  1365  09A8               	comf	(___altoft@c+2)^(0+256),f
  7883  1366  09A9               	comf	(___altoft@c+3)^(0+256),f
  7884  1367  0AA6               	incf	___altoft@c^(0+256),f
  7885  1368  1903               	skipnz
  7886  1369  0AA7               	incf	(___altoft@c+1)^(0+256),f
  7887  136A  1903               	skipnz
  7888  136B  0AA8               	incf	(___altoft@c+2)^(0+256),f
  7889  136C  1903               	skipnz
  7890  136D  0AA9               	incf	(___altoft@c+3)^(0+256),f
  7891  136E  01AD               	clrf	___altoft@sign^(0+256)
  7892  136F  0AAD               	incf	___altoft@sign^(0+256),f
  7893  1370                     l5281:	
  7894  1370  30FF               	movlw	255
  7895  1371  0529               	andwf	(___altoft@c+3)^(0+256),w
  7896  1372  1903               	btfsc	3,2
  7897  1373  2B80               	goto	l5283
  7898  1374  3001               	movlw	1
  7899  1375                     u5455:	
  7900  1375  36A9               	lsrf	(___altoft@c+3)^(0+256),f
  7901  1376  0CA8               	rrf	(___altoft@c+2)^(0+256),f
  7902  1377  0CA7               	rrf	(___altoft@c+1)^(0+256),f
  7903  1378  0CA6               	rrf	___altoft@c^(0+256),f
  7904  1379  0B89               	decfsz	9,f
  7905  137A  2B75               	goto	u5455
  7906  137B  3001               	movlw	1
  7907  137C  00AA               	movwf	??___altoft^(0+256)
  7908  137D  082A               	movf	??___altoft^(0+256),w
  7909  137E  07AC               	addwf	___altoft@exp^(0+256),f
  7910  137F  2B70               	goto	l5281
  7911  1380                     l5283:	
  7912  1380  0826               	movf	___altoft@c^(0+256),w
  7913  1381  0021               	movlb	1	; select bank1
  7914  1382  00A0               	movwf	___ftpack@arg^(0+128)
  7915  1383  0022               	movlb	2	; select bank2
  7916  1384  0827               	movf	(___altoft@c+1)^(0+256),w
  7917  1385  0021               	movlb	1	; select bank1
  7918  1386  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  7919  1387  0022               	movlb	2	; select bank2
  7920  1388  0828               	movf	(___altoft@c+2)^(0+256),w
  7921  1389  0021               	movlb	1	; select bank1
  7922  138A  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  7923  138B  0022               	movlb	2	; select bank2
  7924  138C  082C               	movf	___altoft@exp^(0+256),w
  7925  138D  00AA               	movwf	??___altoft^(0+256)
  7926  138E  082A               	movf	??___altoft^(0+256),w
  7927  138F  0021               	movlb	1	; select bank1
  7928  1390  00A3               	movwf	___ftpack@exp^(0+128)
  7929  1391  0022               	movlb	2	; select bank2
  7930  1392  082D               	movf	___altoft@sign^(0+256),w
  7931  1393  00AB               	movwf	(??___altoft+1)^(0+256)
  7932  1394  082B               	movf	(??___altoft+1)^(0+256),w
  7933  1395  0021               	movlb	1	; select bank1
  7934  1396  00A4               	movwf	___ftpack@sign^(0+128)
  7935  1397  3187  2795         	fcall	___ftpack
  7936  1399  0021               	movlb	1	; select bank1
  7937  139A  0820               	movf	?___ftpack^(0+128),w
  7938  139B  0022               	movlb	2	; select bank2
  7939  139C  00A6               	movwf	?___altoft^(0+256)
  7940  139D  0021               	movlb	1	; select bank1
  7941  139E  0821               	movf	(?___ftpack+1)^(0+128),w
  7942  139F  0022               	movlb	2	; select bank2
  7943  13A0  00A7               	movwf	(?___altoft+1)^(0+256)
  7944  13A1  0021               	movlb	1	; select bank1
  7945  13A2  0822               	movf	(?___ftpack+2)^(0+128),w
  7946  13A3  0022               	movlb	2	; select bank2
  7947  13A4  00A8               	movwf	(?___altoft+2)^(0+256)
  7948  13A5  0008               	return
  7949  13A6                     __end_of___altoft:	
  7950                           
  7951                           	psect	text11
  7952  1F16                     __ptext11:	
  7953 ;; *************** function _showBootSequence *****************
  7954 ;; Defined at:
  7955 ;;		line 86 in file "LEDs.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;		None
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;		None
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7964 ;; Tracked objects:
  7965 ;;		On entry : 0/0
  7966 ;;		On exit  : 0/0
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  7969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7971 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7972 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  7973 ;;Total ram usage:        1 bytes
  7974 ;; Hardware stack levels used:    1
  7975 ;; Hardware stack levels required when called:    6
  7976 ;; This function calls:
  7977 ;;		_getCurrentLEDState
  7978 ;;		_restoreLEDState
  7979 ;;		_solidring_tactiles
  7980 ;;		_star_tactiles
  7981 ;; This function is called by:
  7982 ;;		_main
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           
  7987                           ;psect for function _showBootSequence
  7988  1F16                     _showBootSequence:	
  7989                           
  7990                           ;LEDs.c: 87: getCurrentLEDState();
  7991                           
  7992                           ;incstack = 0
  7993                           ; Regs used in _showBootSequence: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7994  1F16  319E  263C  319F   	fcall	_getCurrentLEDState
  7995                           
  7996                           ;LEDs.c: 88: suspend_blink = 1;
  7997  1F19  3001               	movlw	1
  7998  1F1A  0021               	movlb	1	; select bank1
  7999  1F1B  00B9               	movwf	??_showBootSequence^(0+128)
  8000  1F1C  0839               	movf	??_showBootSequence^(0+128),w
  8001  1F1D  0020               	movlb	0	; select bank0
  8002  1F1E  00D6               	movwf	_suspend_blink	;volatile
  8003                           
  8004                           ;LEDs.c: 90: LATBbits.LATB4 = 0;
  8005  1F1F  0022               	movlb	2	; select bank2
  8006  1F20  120D               	bcf	13,4	;volatile
  8007                           
  8008                           ;LEDs.c: 91: LATBbits.LATB2 = 0;
  8009  1F21  110D               	bcf	13,2	;volatile
  8010                           
  8011                           ;LEDs.c: 92: LATBbits.LATB5 = 0;
  8012  1F22  128D               	bcf	13,5	;volatile
  8013                           
  8014                           ;LEDs.c: 93: LATBbits.LATB3 = 0;
  8015  1F23  118D               	bcf	13,3	;volatile
  8016                           
  8017                           ;LEDs.c: 94: LATBbits.LATB0 = 0;
  8018  1F24  100D               	bcf	13,0	;volatile
  8019                           
  8020                           ;LEDs.c: 95: LATBbits.LATB1 = 0;
  8021  1F25  108D               	bcf	13,1	;volatile
  8022                           
  8023                           ;LEDs.c: 113: star_tactiles(0);
  8024  1F26  3000               	movlw	0
  8025  1F27  3194  24ED  319F   	fcall	_star_tactiles
  8026                           
  8027                           ;LEDs.c: 114: star_tactiles(0);
  8028  1F2A  3000               	movlw	0
  8029  1F2B  3194  24ED  319F   	fcall	_star_tactiles
  8030                           
  8031                           ;LEDs.c: 115: star_tactiles(1);
  8032  1F2E  3001               	movlw	1
  8033  1F2F  3194  24ED  319F   	fcall	_star_tactiles
  8034                           
  8035                           ;LEDs.c: 116: star_tactiles(1);
  8036  1F32  3001               	movlw	1
  8037  1F33  3194  24ED  319F   	fcall	_star_tactiles
  8038                           
  8039                           ;LEDs.c: 118: solidring_tactiles();
  8040  1F36  3191  217F  319F   	fcall	_solidring_tactiles
  8041                           
  8042                           ;LEDs.c: 119: solidring_tactiles();
  8043  1F39  3191  217F  319F   	fcall	_solidring_tactiles
  8044                           
  8045                           ;LEDs.c: 122: suspend_blink = 0;
  8046  1F3C  0020               	movlb	0	; select bank0
  8047  1F3D  01D6               	clrf	_suspend_blink	;volatile
  8048                           
  8049                           ;LEDs.c: 123: restoreLEDState();
  8050  1F3E  319E  2689         	fcall	_restoreLEDState
  8051  1F40  0008               	return
  8052  1F41                     __end_of_showBootSequence:	
  8053                           
  8054                           	psect	text12
  8055  14ED                     __ptext12:	
  8056 ;; *************** function _star_tactiles *****************
  8057 ;; Defined at:
  8058 ;;		line 194 in file "LEDs.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  reverse         1    wreg     unsigned char 
  8061 ;; Auto vars:     Size  Location     Type
  8062 ;;  reverse         1   20[BANK1 ] unsigned char 
  8063 ;;  iLed            2   23[BANK1 ] int 
  8064 ;;  iLed            2   21[BANK1 ] int 
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  1    wreg      void 
  8067 ;; Registers used:
  8068 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8069 ;; Tracked objects:
  8070 ;;		On entry : 0/0
  8071 ;;		On exit  : 0/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8075 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8076 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8077 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8078 ;;Total ram usage:        7 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:    5
  8081 ;; This function calls:
  8082 ;;		_set_leds_bottom
  8083 ;;		_set_leds_top
  8084 ;;		_wait_ms
  8085 ;; This function is called by:
  8086 ;;		_showBootSequence
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _star_tactiles
  8092  14ED                     _star_tactiles:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _star_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8096                           ;star_tactiles@reverse stored from wreg
  8097  14ED  0021               	movlb	1	; select bank1
  8098  14EE  00B4               	movwf	star_tactiles@reverse^(0+128)
  8099                           
  8100                           ;LEDs.c: 195: if (reverse == 1) {
  8101  14EF  0334               	decf	star_tactiles@reverse^(0+128),w
  8102  14F0  1D03               	btfss	3,2
  8103  14F1  2D22               	goto	l5145
  8104                           
  8105                           ;LEDs.c: 196: for (int iLed = 5; iLed > -1; iLed--) {
  8106  14F2  3005               	movlw	5
  8107  14F3  00B5               	movwf	star_tactiles@iLed^(0+128)
  8108  14F4  3000               	movlw	0
  8109  14F5  00B6               	movwf	(star_tactiles@iLed^(0+128)+1)
  8110  14F6                     L5:	
  8111  14F6  1BB6               	btfsc	(star_tactiles@iLed+1)^(0+128),7
  8112  14F7  0008               	return
  8113                           
  8114                           ;LEDs.c: 197: set_leds_top(iLed, 1);
  8115  14F8  0836               	movf	(star_tactiles@iLed+1)^(0+128),w
  8116  14F9  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8117  14FA  0835               	movf	star_tactiles@iLed^(0+128),w
  8118  14FB  00A0               	movwf	set_leds_top@x^(0+128)
  8119  14FC  3001               	movlw	1
  8120  14FD  00A2               	movwf	set_leds_top@ledState^(0+128)
  8121  14FE  3000               	movlw	0
  8122  14FF  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8123  1500  3194  2499  3194   	fcall	_set_leds_top
  8124                           
  8125                           ;LEDs.c: 198: set_leds_bottom(6 - iLed);
  8126  1503  0021               	movlb	1	; select bank1
  8127  1504  0935               	comf	star_tactiles@iLed^(0+128),w
  8128  1505  00B2               	movwf	??_star_tactiles^(0+128)
  8129  1506  0936               	comf	(star_tactiles@iLed+1)^(0+128),w
  8130  1507  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8131  1508  0AB2               	incf	??_star_tactiles^(0+128),f
  8132  1509  1903               	skipnz
  8133  150A  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8134  150B  0832               	movf	??_star_tactiles^(0+128),w
  8135  150C  3E06               	addlw	6
  8136  150D  00A0               	movwf	set_leds_bottom@x^(0+128)
  8137  150E  3000               	movlw	0
  8138  150F  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8139  1510  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8140  1511  3190  208D  3194   	fcall	_set_leds_bottom
  8141                           
  8142                           ;LEDs.c: 199: wait_ms(5);
  8143  1514  3005               	movlw	5
  8144  1515  0021               	movlb	1	; select bank1
  8145  1516  00AC               	movwf	wait_ms@timeSec^(0+128)
  8146  1517  3000               	movlw	0
  8147  1518  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8148  1519  3190  2021  3194   	fcall	_wait_ms
  8149  151C  30FF               	movlw	255
  8150  151D  0021               	movlb	1	; select bank1
  8151  151E  07B5               	addwf	star_tactiles@iLed^(0+128),f
  8152  151F  30FF               	movlw	255
  8153  1520  3DB6               	addwfc	(star_tactiles@iLed+1)^(0+128),f
  8154  1521  2CF6               	goto	L5
  8155  1522                     l5145:	
  8156                           ;LEDs.c: 200: }
  8157                           ;LEDs.c: 201: } else {
  8158                           
  8159                           
  8160                           ;LEDs.c: 202: for (int iLed = 1; iLed < 7; iLed++) {
  8161  1522  3001               	movlw	1
  8162  1523  00B7               	movwf	star_tactiles@iLed_1458^(0+128)
  8163  1524  3000               	movlw	0
  8164  1525  00B8               	movwf	(star_tactiles@iLed_1458^(0+128)+1)
  8165  1526                     L6:	
  8166  1526  0838               	movf	(star_tactiles@iLed_1458+1)^(0+128),w
  8167  1527  3A80               	xorlw	128
  8168  1528  00B2               	movwf	??_star_tactiles^(0+128)
  8169  1529  3080               	movlw	128
  8170  152A  0232               	subwf	??_star_tactiles^(0+128),w
  8171  152B  1D03               	skipz
  8172  152C  2D2F               	goto	u5255
  8173  152D  3007               	movlw	7
  8174  152E  0237               	subwf	star_tactiles@iLed_1458^(0+128),w
  8175  152F                     u5255:	
  8176  152F  1803               	btfsc	3,0
  8177  1530  0008               	return
  8178                           
  8179                           ;LEDs.c: 203: set_leds_top(iLed, 1);
  8180  1531  0021               	movlb	1	; select bank1
  8181  1532  0838               	movf	(star_tactiles@iLed_1458+1)^(0+128),w
  8182  1533  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8183  1534  0837               	movf	star_tactiles@iLed_1458^(0+128),w
  8184  1535  00A0               	movwf	set_leds_top@x^(0+128)
  8185  1536  3001               	movlw	1
  8186  1537  00A2               	movwf	set_leds_top@ledState^(0+128)
  8187  1538  3000               	movlw	0
  8188  1539  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8189  153A  3194  2499  3194   	fcall	_set_leds_top
  8190                           
  8191                           ;LEDs.c: 204: set_leds_bottom(6 - iLed);
  8192  153D  0021               	movlb	1	; select bank1
  8193  153E  0937               	comf	star_tactiles@iLed_1458^(0+128),w
  8194  153F  00B2               	movwf	??_star_tactiles^(0+128)
  8195  1540  0938               	comf	(star_tactiles@iLed_1458+1)^(0+128),w
  8196  1541  00B3               	movwf	(??_star_tactiles^(0+128)+1)
  8197  1542  0AB2               	incf	??_star_tactiles^(0+128),f
  8198  1543  1903               	skipnz
  8199  1544  0AB3               	incf	(??_star_tactiles^(0+128)+1),f
  8200  1545  0832               	movf	??_star_tactiles^(0+128),w
  8201  1546  3E06               	addlw	6
  8202  1547  00A0               	movwf	set_leds_bottom@x^(0+128)
  8203  1548  3000               	movlw	0
  8204  1549  3D33               	addwfc	(??_star_tactiles+1)^(0+128),w
  8205  154A  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8206  154B  3190  208D  3194   	fcall	_set_leds_bottom
  8207                           
  8208                           ;LEDs.c: 205: wait_ms(5);
  8209  154E  3005               	movlw	5
  8210  154F  0021               	movlb	1	; select bank1
  8211  1550  00AC               	movwf	wait_ms@timeSec^(0+128)
  8212  1551  3000               	movlw	0
  8213  1552  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  8214  1553  3190  2021  3194   	fcall	_wait_ms
  8215  1556  3001               	movlw	1
  8216  1557  0021               	movlb	1	; select bank1
  8217  1558  07B7               	addwf	star_tactiles@iLed_1458^(0+128),f
  8218  1559  3000               	movlw	0
  8219  155A  3DB8               	addwfc	(star_tactiles@iLed_1458+1)^(0+128),f
  8220  155B  2D26               	goto	L6
  8221  155C                     __end_of_star_tactiles:	
  8222                           
  8223                           	psect	text13
  8224  117F                     __ptext13:	
  8225 ;; *************** function _solidring_tactiles *****************
  8226 ;; Defined at:
  8227 ;;		line 223 in file "LEDs.c"
  8228 ;; Parameters:    Size  Location     Type
  8229 ;;		None
  8230 ;; Auto vars:     Size  Location     Type
  8231 ;;  ring_delay      1   20[BANK1 ] unsigned char 
  8232 ;; Return value:  Size  Location     Type
  8233 ;;                  1    wreg      void 
  8234 ;; Registers used:
  8235 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8236 ;; Tracked objects:
  8237 ;;		On entry : 0/0
  8238 ;;		On exit  : 0/0
  8239 ;;		Unchanged: 0/0
  8240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8242 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8243 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8244 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8245 ;;Total ram usage:        3 bytes
  8246 ;; Hardware stack levels used:    1
  8247 ;; Hardware stack levels required when called:    5
  8248 ;; This function calls:
  8249 ;;		_set_leds_bottom
  8250 ;;		_set_leds_top
  8251 ;;		_wait_ms
  8252 ;; This function is called by:
  8253 ;;		_showBootSequence
  8254 ;;		_showSave
  8255 ;; This function uses a non-reentrant model
  8256 ;;
  8257                           
  8258                           
  8259                           ;psect for function _solidring_tactiles
  8260  117F                     _solidring_tactiles:	
  8261                           
  8262                           ;LEDs.c: 224: uint8_t ring_delay = 30;
  8263                           
  8264                           ;incstack = 0
  8265                           ; Regs used in _solidring_tactiles: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8266  117F  301E               	movlw	30
  8267  1180  0021               	movlb	1	; select bank1
  8268  1181  00B2               	movwf	??_solidring_tactiles^(0+128)
  8269  1182  0832               	movf	??_solidring_tactiles^(0+128),w
  8270  1183  00B4               	movwf	solidring_tactiles@ring_delay^(0+128)
  8271                           
  8272                           ;LEDs.c: 225: set_leds_top(100, 1);
  8273  1184  3064               	movlw	100
  8274  1185  00A0               	movwf	set_leds_top@x^(0+128)
  8275  1186  3000               	movlw	0
  8276  1187  00A1               	movwf	(set_leds_top@x^(0+128)+1)
  8277  1188  3001               	movlw	1
  8278  1189  00A2               	movwf	set_leds_top@ledState^(0+128)
  8279  118A  3000               	movlw	0
  8280  118B  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8281  118C  3194  2499  3191   	fcall	_set_leds_top
  8282                           
  8283                           ;LEDs.c: 226: set_leds_bottom(100);
  8284  118F  3064               	movlw	100
  8285  1190  0021               	movlb	1	; select bank1
  8286  1191  00A0               	movwf	set_leds_bottom@x^(0+128)
  8287  1192  3000               	movlw	0
  8288  1193  00A1               	movwf	(set_leds_bottom@x^(0+128)+1)
  8289  1194  3190  208D  3191   	fcall	_set_leds_bottom
  8290                           
  8291                           ;LEDs.c: 227: wait_ms(ring_delay);
  8292  1197  0021               	movlb	1	; select bank1
  8293  1198  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8294  1199  00B2               	movwf	??_solidring_tactiles^(0+128)
  8295  119A  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8296  119B  0832               	movf	??_solidring_tactiles^(0+128),w
  8297  119C  00AC               	movwf	wait_ms@timeSec^(0+128)
  8298  119D  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8299  119E  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8300  119F  3190  2021  3191   	fcall	_wait_ms
  8301                           
  8302                           ;LEDs.c: 229: set_leds_top(0, 1);
  8303  11A2  3000               	movlw	0
  8304  11A3  0021               	movlb	1	; select bank1
  8305  11A4  00A0               	movwf	set_leds_top@x^(0+128)
  8306  11A5  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  8307  11A6  3001               	movlw	1
  8308  11A7  00A2               	movwf	set_leds_top@ledState^(0+128)
  8309  11A8  3000               	movlw	0
  8310  11A9  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  8311  11AA  3194  2499  3191   	fcall	_set_leds_top
  8312                           
  8313                           ;LEDs.c: 230: set_leds_bottom(0);
  8314  11AD  3000               	movlw	0
  8315  11AE  0021               	movlb	1	; select bank1
  8316  11AF  00A0               	movwf	set_leds_bottom@x^(0+128)
  8317  11B0  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  8318  11B1  3190  208D  3191   	fcall	_set_leds_bottom
  8319                           
  8320                           ;LEDs.c: 231: wait_ms(ring_delay);
  8321  11B4  0021               	movlb	1	; select bank1
  8322  11B5  0834               	movf	solidring_tactiles@ring_delay^(0+128),w
  8323  11B6  00B2               	movwf	??_solidring_tactiles^(0+128)
  8324  11B7  01B3               	clrf	(??_solidring_tactiles^(0+128)+1)
  8325  11B8  0832               	movf	??_solidring_tactiles^(0+128),w
  8326  11B9  00AC               	movwf	wait_ms@timeSec^(0+128)
  8327  11BA  0833               	movf	(??_solidring_tactiles+1)^(0+128),w
  8328  11BB  00AD               	movwf	(wait_ms@timeSec+1)^(0+128)
  8329  11BC  3190  2021         	fcall	_wait_ms
  8330  11BE  0008               	return
  8331  11BF                     __end_of_solidring_tactiles:	
  8332                           
  8333                           	psect	text14
  8334  1E89                     __ptext14:	
  8335 ;; *************** function _restoreLEDState *****************
  8336 ;; Defined at:
  8337 ;;		line 89 in file "state_manager.c"
  8338 ;; Parameters:    Size  Location     Type
  8339 ;;		None
  8340 ;; Auto vars:     Size  Location     Type
  8341 ;;		None
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, status,0
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8355 ;;Total ram usage:        0 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    3
  8358 ;; This function calls:
  8359 ;;		Nothing
  8360 ;; This function is called by:
  8361 ;;		_showBootSequence
  8362 ;;		_showError_Alternating
  8363 ;;		_show_error
  8364 ;;		_show_cancel
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _restoreLEDState
  8370  1E89                     _restoreLEDState:	
  8371                           
  8372                           ;state_manager.c: 90: LATBbits.LATB4 = ledState.tap_A;
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _restoreLEDState: [wreg+status,0]
  8376  1E89  0023               	movlb	3	; select bank3
  8377  1E8A  0C34               	rrf	_ledState^(0+384),w
  8378  1E8B  0022               	movlb	2	; select bank2
  8379  1E8C  1C03               	skipc
  8380  1E8D  120D               	bcf	13,4	;volatile
  8381  1E8E  1803               	skipnc
  8382  1E8F  160D               	bsf	13,4	;volatile
  8383                           
  8384                           ;state_manager.c: 91: LATBbits.LATB2 = ledState.bypass_A;
  8385  1E90  0023               	movlb	3	; select bank3
  8386  1E91  0C36               	rrf	(_ledState^(0+384)+2),w
  8387  1E92  0022               	movlb	2	; select bank2
  8388  1E93  1C03               	skipc
  8389  1E94  110D               	bcf	13,2	;volatile
  8390  1E95  1803               	skipnc
  8391  1E96  150D               	bsf	13,2	;volatile
  8392                           
  8393                           ;state_manager.c: 92: LATBbits.LATB5 = ledState.tap_B;
  8394  1E97  0023               	movlb	3	; select bank3
  8395  1E98  0C35               	rrf	(_ledState^(0+384)+1),w
  8396  1E99  0022               	movlb	2	; select bank2
  8397  1E9A  1C03               	skipc
  8398  1E9B  128D               	bcf	13,5	;volatile
  8399  1E9C  1803               	skipnc
  8400  1E9D  168D               	bsf	13,5	;volatile
  8401                           
  8402                           ;state_manager.c: 93: LATBbits.LATB3 = ledState.bypass_B;
  8403  1E9E  0023               	movlb	3	; select bank3
  8404  1E9F  0C37               	rrf	(_ledState^(0+384)+3),w
  8405  1EA0  0022               	movlb	2	; select bank2
  8406  1EA1  1C03               	skipc
  8407  1EA2  118D               	bcf	13,3	;volatile
  8408  1EA3  1803               	skipnc
  8409  1EA4  158D               	bsf	13,3	;volatile
  8410  1EA5  0008               	return
  8411  1EA6                     __end_of_restoreLEDState:	
  8412                           
  8413                           	psect	text15
  8414  1E3C                     __ptext15:	
  8415 ;; *************** function _getCurrentLEDState *****************
  8416 ;; Defined at:
  8417 ;;		line 83 in file "state_manager.c"
  8418 ;; Parameters:    Size  Location     Type
  8419 ;;		None
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      void 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8435 ;;Total ram usage:        0 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    3
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_showBootSequence
  8442 ;;		_showError_Alternating
  8443 ;;		_show_error
  8444 ;;		_show_cancel
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           
  8449                           ;psect for function _getCurrentLEDState
  8450  1E3C                     _getCurrentLEDState:	
  8451                           
  8452                           ;state_manager.c: 84: ledState.tap_A = LATBbits.LATB4;
  8453                           
  8454                           ;incstack = 0
  8455                           ; Regs used in _getCurrentLEDState: [wreg+status,2]
  8456  1E3C  3000               	movlw	0
  8457  1E3D  0022               	movlb	2	; select bank2
  8458  1E3E  1A0D               	btfsc	13,4	;volatile
  8459  1E3F  3001               	movlw	1
  8460  1E40  0023               	movlb	3	; select bank3
  8461  1E41  00B4               	movwf	_ledState^(0+384)
  8462                           
  8463                           ;state_manager.c: 85: ledState.bypass_A = LATBbits.LATB2 ;
  8464  1E42  3000               	movlw	0
  8465  1E43  0022               	movlb	2	; select bank2
  8466  1E44  190D               	btfsc	13,2	;volatile
  8467  1E45  3001               	movlw	1
  8468  1E46  0023               	movlb	3	; select bank3
  8469  1E47  00B6               	movwf	(_ledState^(0+384)+2)
  8470                           
  8471                           ;state_manager.c: 86: ledState.tap_B = LATBbits.LATB5 ;
  8472  1E48  3000               	movlw	0
  8473  1E49  0022               	movlb	2	; select bank2
  8474  1E4A  1A8D               	btfsc	13,5	;volatile
  8475  1E4B  3001               	movlw	1
  8476  1E4C  0023               	movlb	3	; select bank3
  8477  1E4D  00B5               	movwf	(_ledState^(0+384)+1)
  8478                           
  8479                           ;state_manager.c: 87: ledState.bypass_B = LATBbits.LATB3 ;
  8480  1E4E  3000               	movlw	0
  8481  1E4F  0022               	movlb	2	; select bank2
  8482  1E50  198D               	btfsc	13,3	;volatile
  8483  1E51  3001               	movlw	1
  8484  1E52  0023               	movlb	3	; select bank3
  8485  1E53  00B7               	movwf	(_ledState^(0+384)+3)
  8486  1E54  0008               	return
  8487  1E55                     __end_of_getCurrentLEDState:	
  8488                           
  8489                           	psect	text16
  8490  096E                     __ptext16:	
  8491 ;; *************** function _set_subdivision *****************
  8492 ;; Defined at:
  8493 ;;		line 77 in file "user.c"
  8494 ;; Parameters:    Size  Location     Type
  8495 ;;  x               2    6[BANK2 ] int 
  8496 ;;  y               2    8[BANK2 ] int 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  scalar          3   15[BANK2 ] float 
  8499 ;;  tmpX            2   13[BANK2 ] int 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;                  2    6[BANK2 ] int 
  8502 ;; Registers used:
  8503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8509 ;;      Params:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8510 ;;      Locals:         0       0       0       5       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8511 ;;      Temps:          0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8512 ;;      Totals:         0       0       0      12       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8513 ;;Total ram usage:       12 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    5
  8516 ;; This function calls:
  8517 ;;		___awtoft
  8518 ;;		___ftdiv
  8519 ;;		___ftmul
  8520 ;;		___fttol
  8521 ;; This function is called by:
  8522 ;;		_main
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           
  8527                           ;psect for function _set_subdivision
  8528  096E                     _set_subdivision:	
  8529                           
  8530                           ;user.c: 78: adjust_sub_delay = 0;
  8531                           
  8532                           ;incstack = 0
  8533                           ; Regs used in _set_subdivision: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8534  096E  0023               	movlb	3	; select bank3
  8535  096F  01C4               	clrf	_adjust_sub_delay^(0+384)
  8536  0970  01C5               	clrf	(_adjust_sub_delay+1)^(0+384)
  8537                           
  8538                           ;user.c: 79: int tmpX = x;
  8539  0971  0022               	movlb	2	; select bank2
  8540  0972  0827               	movf	(set_subdivision@x+1)^(0+256),w
  8541  0973  00AE               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8542  0974  0826               	movf	set_subdivision@x^(0+256),w
  8543  0975  00AD               	movwf	set_subdivision@tmpX^(0+256)
  8544                           
  8545                           ;user.c: 80: float scalar = 1.0;
  8546  0976  3000               	movlw	0
  8547  0977  00AF               	movwf	set_subdivision@scalar^(0+256)
  8548  0978  3080               	movlw	128
  8549  0979  00B0               	movwf	(set_subdivision@scalar+1)^(0+256)
  8550  097A  303F               	movlw	63
  8551  097B  00B1               	movwf	(set_subdivision@scalar+2)^(0+256)
  8552                           
  8553                           ;user.c: 83: switch (y) {
  8554  097C  2996               	goto	l5911
  8555  097D                     l5899:	
  8556                           ;user.c: 84: case 1:
  8557                           
  8558                           
  8559                           ;user.c: 85: scalar = 0.75;
  8560  097D  3000               	movlw	0
  8561  097E  00AF               	movwf	set_subdivision@scalar^(0+256)
  8562  097F  3040               	movlw	64
  8563  0980  2988               	goto	L8
  8564  0981                     l5901:	
  8565                           ;user.c: 87: case 2:
  8566                           
  8567                           ;user.c: 86: break;
  8568                           
  8569                           
  8570                           ;user.c: 88: scalar = 0.6666;
  8571  0981  30A6               	movlw	166
  8572  0982  00AF               	movwf	set_subdivision@scalar^(0+256)
  8573  0983  302A               	movlw	42
  8574  0984  2988               	goto	L8
  8575  0985                     l5903:	
  8576                           ;user.c: 90: case 3:
  8577                           
  8578                           ;user.c: 89: break;
  8579                           
  8580                           
  8581                           ;user.c: 91: scalar = .5;
  8582  0985  3000               	movlw	0
  8583  0986  00AF               	movwf	set_subdivision@scalar^(0+256)
  8584  0987  3000               	movlw	0
  8585  0988                     L8:	
  8586  0988  00B0               	movwf	(set_subdivision@scalar+1)^(0+256)
  8587  0989  303F               	movlw	63
  8588  098A  2994               	goto	L10
  8589  098B                     l5905:	
  8590                           ;user.c: 93: case 4:
  8591                           
  8592                           ;user.c: 92: break;
  8593                           
  8594                           
  8595                           ;user.c: 94: scalar = 0.3333;
  8596  098B  30A6               	movlw	166
  8597  098C  00AF               	movwf	set_subdivision@scalar^(0+256)
  8598  098D  30AA               	movlw	170
  8599  098E  2992               	goto	L11
  8600  098F                     l5907:	
  8601                           ;user.c: 96: case 5:
  8602                           
  8603                           ;user.c: 95: break;
  8604                           
  8605                           
  8606                           ;user.c: 97: scalar = 0.25;
  8607  098F  3000               	movlw	0
  8608  0990  00AF               	movwf	set_subdivision@scalar^(0+256)
  8609  0991  3080               	movlw	128
  8610  0992                     L11:	
  8611  0992  00B0               	movwf	(set_subdivision@scalar+1)^(0+256)
  8612  0993  303E               	movlw	62
  8613  0994                     L10:	
  8614  0994  00B1               	movwf	(set_subdivision@scalar+2)^(0+256)
  8615                           
  8616                           ;user.c: 102: }
  8617                           
  8618                           ;user.c: 101: break;
  8619                           
  8620                           ;user.c: 99: case 6:
  8621                           
  8622                           ;user.c: 98: break;
  8623  0995  29AF               	goto	l5913
  8624  0996                     l5911:	
  8625                           
  8626                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8627                           ; Switch size 1, requested type "space"
  8628                           ; Number of cases is 1, Range of values is 0 to 0
  8629                           ; switch strategies available:
  8630                           ; Name         Instructions Cycles
  8631                           ; simple_byte            4     3 (average)
  8632                           ; direct_byte            8     6 (fixed)
  8633                           ; jumptable            260     6 (fixed)
  8634                           ;	Chosen strategy is simple_byte
  8635  0996  0829               	movf	(set_subdivision@y+1)^(0+256),w
  8636  0997  3A00               	xorlw	0	; case 0
  8637  0998  1903               	skipnz
  8638  0999  299B               	goto	l6309
  8639  099A  29AF               	goto	l5913
  8640  099B                     l6309:	
  8641                           
  8642                           ; Switch size 1, requested type "space"
  8643                           ; Number of cases is 6, Range of values is 1 to 6
  8644                           ; switch strategies available:
  8645                           ; Name         Instructions Cycles
  8646                           ; simple_byte           19    10 (average)
  8647                           ; direct_byte           21     9 (fixed)
  8648                           ; jumptable            263     9 (fixed)
  8649                           ;	Chosen strategy is simple_byte
  8650  099B  0828               	movf	set_subdivision@y^(0+256),w
  8651  099C  3A01               	xorlw	1	; case 1
  8652  099D  1903               	skipnz
  8653  099E  297D               	goto	l5899
  8654  099F  3A03               	xorlw	3	; case 2
  8655  09A0  1903               	skipnz
  8656  09A1  2981               	goto	l5901
  8657  09A2  3A01               	xorlw	1	; case 3
  8658  09A3  1903               	skipnz
  8659  09A4  2985               	goto	l5903
  8660  09A5  3A07               	xorlw	7	; case 4
  8661  09A6  1903               	skipnz
  8662  09A7  298B               	goto	l5905
  8663  09A8  3A01               	xorlw	1	; case 5
  8664  09A9  1903               	skipnz
  8665  09AA  298F               	goto	l5907
  8666  09AB  3A03               	xorlw	3	; case 6
  8667  09AC  1903               	skipnz
  8668  09AD  29AF               	goto	l5913
  8669  09AE  29AF               	goto	l5913
  8670  09AF                     l5913:	
  8671                           
  8672                           ;user.c: 104: tmpX = tmpX * scalar;
  8673  09AF  082E               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8674  09B0  0021               	movlb	1	; select bank1
  8675  09B1  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8676  09B2  0022               	movlb	2	; select bank2
  8677  09B3  082D               	movf	set_subdivision@tmpX^(0+256),w
  8678  09B4  0021               	movlb	1	; select bank1
  8679  09B5  00A8               	movwf	___awtoft@c^(0+128)
  8680  09B6  319E  26A6  3189   	fcall	___awtoft
  8681  09B9  0021               	movlb	1	; select bank1
  8682  09BA  0828               	movf	?___awtoft^(0+128),w
  8683  09BB  00B8               	movwf	___ftmul@f2^(0+128)
  8684  09BC  0829               	movf	(?___awtoft+1)^(0+128),w
  8685  09BD  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  8686  09BE  082A               	movf	(?___awtoft+2)^(0+128),w
  8687  09BF  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  8688  09C0  0022               	movlb	2	; select bank2
  8689  09C1  082F               	movf	set_subdivision@scalar^(0+256),w
  8690  09C2  0021               	movlb	1	; select bank1
  8691  09C3  00B5               	movwf	___ftmul@f1^(0+128)
  8692  09C4  0022               	movlb	2	; select bank2
  8693  09C5  0830               	movf	(set_subdivision@scalar+1)^(0+256),w
  8694  09C6  0021               	movlb	1	; select bank1
  8695  09C7  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  8696  09C8  0022               	movlb	2	; select bank2
  8697  09C9  0831               	movf	(set_subdivision@scalar+2)^(0+256),w
  8698  09CA  0021               	movlb	1	; select bank1
  8699  09CB  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  8700  09CC  3188  20BA  3189   	fcall	___ftmul
  8701  09CF  0021               	movlb	1	; select bank1
  8702  09D0  0835               	movf	?___ftmul^(0+128),w
  8703  09D1  00E7               	movwf	___fttol@f1^(0+128)
  8704  09D2  0836               	movf	(?___ftmul+1)^(0+128),w
  8705  09D3  00E8               	movwf	(___fttol@f1+1)^(0+128)
  8706  09D4  0837               	movf	(?___ftmul+2)^(0+128),w
  8707  09D5  00E9               	movwf	(___fttol@f1+2)^(0+128)
  8708  09D6  3197  2761  3189   	fcall	___fttol
  8709  09D9  0021               	movlb	1	; select bank1
  8710  09DA  0868               	movf	(?___fttol^(0+128)+1),w
  8711  09DB  0022               	movlb	2	; select bank2
  8712  09DC  00AE               	movwf	(set_subdivision@tmpX+1)^(0+256)
  8713  09DD  0021               	movlb	1	; select bank1
  8714  09DE  0867               	movf	?___fttol^(0+128),w
  8715  09DF  0022               	movlb	2	; select bank2
  8716  09E0  00AD               	movwf	set_subdivision@tmpX^(0+256)
  8717                           
  8718                           ;user.c: 105: if ((tmpX /scalar) != x) {adjust_sub_delay = 1;}
  8719  09E1  082F               	movf	set_subdivision@scalar^(0+256),w
  8720  09E2  0021               	movlb	1	; select bank1
  8721  09E3  00C5               	movwf	___ftdiv@f2^(0+128)
  8722  09E4  0022               	movlb	2	; select bank2
  8723  09E5  0830               	movf	(set_subdivision@scalar+1)^(0+256),w
  8724  09E6  0021               	movlb	1	; select bank1
  8725  09E7  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  8726  09E8  0022               	movlb	2	; select bank2
  8727  09E9  0831               	movf	(set_subdivision@scalar+2)^(0+256),w
  8728  09EA  0021               	movlb	1	; select bank1
  8729  09EB  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  8730  09EC  0022               	movlb	2	; select bank2
  8731  09ED  082E               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8732  09EE  0021               	movlb	1	; select bank1
  8733  09EF  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8734  09F0  0022               	movlb	2	; select bank2
  8735  09F1  082D               	movf	set_subdivision@tmpX^(0+256),w
  8736  09F2  0021               	movlb	1	; select bank1
  8737  09F3  00A8               	movwf	___awtoft@c^(0+128)
  8738  09F4  319E  26A6  3189   	fcall	___awtoft
  8739  09F7  0021               	movlb	1	; select bank1
  8740  09F8  0828               	movf	?___awtoft^(0+128),w
  8741  09F9  00C8               	movwf	___ftdiv@f1^(0+128)
  8742  09FA  0829               	movf	(?___awtoft+1)^(0+128),w
  8743  09FB  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  8744  09FC  082A               	movf	(?___awtoft+2)^(0+128),w
  8745  09FD  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  8746  09FE  3188  2011  3189   	fcall	___ftdiv
  8747  0A01  0021               	movlb	1	; select bank1
  8748  0A02  0845               	movf	?___ftdiv^(0+128),w
  8749  0A03  0022               	movlb	2	; select bank2
  8750  0A04  00AA               	movwf	??_set_subdivision^(0+256)
  8751  0A05  0021               	movlb	1	; select bank1
  8752  0A06  0846               	movf	(?___ftdiv+1)^(0+128),w
  8753  0A07  0022               	movlb	2	; select bank2
  8754  0A08  00AB               	movwf	(??_set_subdivision^(0+256)+1)
  8755  0A09  0021               	movlb	1	; select bank1
  8756  0A0A  0847               	movf	(?___ftdiv+2)^(0+128),w
  8757  0A0B  0022               	movlb	2	; select bank2
  8758  0A0C  00AC               	movwf	(??_set_subdivision^(0+256)+2)
  8759  0A0D  0827               	movf	(set_subdivision@x+1)^(0+256),w
  8760  0A0E  0021               	movlb	1	; select bank1
  8761  0A0F  00A9               	movwf	(___awtoft@c+1)^(0+128)
  8762  0A10  0022               	movlb	2	; select bank2
  8763  0A11  0826               	movf	set_subdivision@x^(0+256),w
  8764  0A12  0021               	movlb	1	; select bank1
  8765  0A13  00A8               	movwf	___awtoft@c^(0+128)
  8766  0A14  319E  26A6  3189   	fcall	___awtoft
  8767  0A17  0021               	movlb	1	; select bank1
  8768  0A18  082A               	movf	(?___awtoft+2)^(0+128),w
  8769  0A19  0022               	movlb	2	; select bank2
  8770  0A1A  062C               	xorwf	(??_set_subdivision+2)^(0+256),w
  8771  0A1B  1D03               	skipz
  8772  0A1C  2A27               	goto	u6745
  8773  0A1D  0021               	movlb	1	; select bank1
  8774  0A1E  0829               	movf	(?___awtoft+1)^(0+128),w
  8775  0A1F  0022               	movlb	2	; select bank2
  8776  0A20  062B               	xorwf	(??_set_subdivision+1)^(0+256),w
  8777  0A21  1D03               	skipz
  8778  0A22  2A27               	goto	u6745
  8779  0A23  0021               	movlb	1	; select bank1
  8780  0A24  0828               	movf	?___awtoft^(0+128),w
  8781  0A25  0022               	movlb	2	; select bank2
  8782  0A26  062A               	xorwf	??_set_subdivision^(0+256),w
  8783  0A27                     u6745:	
  8784  0A27  1903               	skipnz
  8785  0A28  2A2E               	goto	l521
  8786  0A29  3001               	movlw	1
  8787  0A2A  0023               	movlb	3	; select bank3
  8788  0A2B  00C4               	movwf	_adjust_sub_delay^(0+384)
  8789  0A2C  3000               	movlw	0
  8790  0A2D  00C5               	movwf	(_adjust_sub_delay^(0+384)+1)
  8791  0A2E                     l521:	
  8792                           
  8793                           ;user.c: 106: return tmpX;
  8794  0A2E  0022               	movlb	2	; select bank2
  8795  0A2F  082E               	movf	(set_subdivision@tmpX+1)^(0+256),w
  8796  0A30  00A7               	movwf	(?_set_subdivision+1)^(0+256)
  8797  0A31  082D               	movf	set_subdivision@tmpX^(0+256),w
  8798  0A32  00A6               	movwf	?_set_subdivision^(0+256)
  8799  0A33  0008               	return
  8800  0A34                     __end_of_set_subdivision:	
  8801                           
  8802                           	psect	text17
  8803  1761                     __ptext17:	
  8804 ;; *************** function ___fttol *****************
  8805 ;; Defined at:
  8806 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\fttol.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  f1              3   71[BANK1 ] float 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  lval            4    1[BANK2 ] unsigned long 
  8811 ;;  exp1            1    5[BANK2 ] unsigned char 
  8812 ;;  sign1           1    0[BANK2 ] unsigned char 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  4   71[BANK1 ] long 
  8815 ;; Registers used:
  8816 ;;		wreg, status,2, status,0
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  8822 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8823 ;;      Locals:         0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8824 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8825 ;;      Totals:         0       0       8       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  8826 ;;Total ram usage:       14 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    3
  8829 ;; This function calls:
  8830 ;;		Nothing
  8831 ;; This function is called by:
  8832 ;;		_main
  8833 ;;		_set_subdivision
  8834 ;;		_trunc
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           
  8839                           ;psect for function ___fttol
  8840  1761                     ___fttol:	
  8841                           
  8842                           ;incstack = 0
  8843                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  8844  1761  0021               	movlb	1	; select bank1
  8845  1762  0867               	movf	___fttol@f1^(0+128),w
  8846  1763  00EB               	movwf	??___fttol^(0+128)
  8847  1764  0868               	movf	(___fttol@f1+1)^(0+128),w
  8848  1765  00EC               	movwf	(??___fttol^(0+128)+1)
  8849  1766  0869               	movf	(___fttol@f1+2)^(0+128),w
  8850  1767  00ED               	movwf	(??___fttol^(0+128)+2)
  8851  1768  1003               	clrc
  8852  1769  0D6C               	rlf	(??___fttol^(0+128)+1),w
  8853  176A  0D6D               	rlf	(??___fttol^(0+128)+2),w
  8854  176B  00EE               	movwf	(??___fttol+3)^(0+128)
  8855  176C  086E               	movf	(??___fttol+3)^(0+128),w
  8856  176D  0022               	movlb	2	; select bank2
  8857  176E  00A5               	movwf	___fttol@exp1^(0+256)
  8858  176F  0825               	movf	___fttol@exp1^(0+256),w
  8859  1770  1D03               	btfss	3,2
  8860  1771  2F7C               	goto	l5475
  8861  1772  3000               	movlw	0
  8862  1773  0021               	movlb	1	; select bank1
  8863  1774  00EA               	movwf	(?___fttol+3)^(0+128)
  8864  1775  3000               	movlw	0
  8865  1776  00E9               	movwf	(?___fttol+2)^(0+128)
  8866  1777  3000               	movlw	0
  8867  1778  00E8               	movwf	(?___fttol+1)^(0+128)
  8868  1779  3000               	movlw	0
  8869  177A  00E7               	movwf	?___fttol^(0+128)
  8870  177B  0008               	return
  8871  177C                     l5475:	
  8872  177C  0021               	movlb	1	; select bank1
  8873  177D  0867               	movf	___fttol@f1^(0+128),w
  8874  177E  00EB               	movwf	??___fttol^(0+128)
  8875  177F  0868               	movf	(___fttol@f1+1)^(0+128),w
  8876  1780  00EC               	movwf	(??___fttol^(0+128)+1)
  8877  1781  0869               	movf	(___fttol@f1+2)^(0+128),w
  8878  1782  00ED               	movwf	(??___fttol^(0+128)+2)
  8879  1783  3017               	movlw	23
  8880  1784                     u5935:	
  8881  1784  36ED               	lsrf	(??___fttol^(0+128)+2),f
  8882  1785  0CEC               	rrf	(??___fttol^(0+128)+1),f
  8883  1786  0CEB               	rrf	??___fttol^(0+128),f
  8884  1787  0B89               	decfsz	9,f
  8885  1788  2F84               	goto	u5935
  8886  1789  086B               	movf	??___fttol^(0+128),w
  8887  178A  00EE               	movwf	(??___fttol+3)^(0+128)
  8888  178B  086E               	movf	(??___fttol+3)^(0+128),w
  8889  178C  0022               	movlb	2	; select bank2
  8890  178D  00A0               	movwf	___fttol@sign1^(0+256)
  8891  178E  0021               	movlb	1	; select bank1
  8892  178F  17E8               	bsf	(___fttol@f1^(0+128)+1),7
  8893  1790  30FF               	movlw	255
  8894  1791  05E7               	andwf	___fttol@f1^(0+128),f
  8895  1792  30FF               	movlw	255
  8896  1793  05E8               	andwf	(___fttol@f1+1)^(0+128),f
  8897  1794  3000               	movlw	0
  8898  1795  05E9               	andwf	(___fttol@f1+2)^(0+128),f
  8899  1796  0867               	movf	___fttol@f1^(0+128),w
  8900  1797  0022               	movlb	2	; select bank2
  8901  1798  00A1               	movwf	___fttol@lval^(0+256)
  8902  1799  0021               	movlb	1	; select bank1
  8903  179A  0868               	movf	(___fttol@f1+1)^(0+128),w
  8904  179B  0022               	movlb	2	; select bank2
  8905  179C  00A2               	movwf	(___fttol@lval^(0+256)+1)
  8906  179D  0021               	movlb	1	; select bank1
  8907  179E  0869               	movf	(___fttol@f1+2)^(0+128),w
  8908  179F  0022               	movlb	2	; select bank2
  8909  17A0  00A3               	movwf	(___fttol@lval^(0+256)+2)
  8910  17A1  01A4               	clrf	(___fttol@lval^(0+256)+3)
  8911  17A2  308E               	movlw	142
  8912  17A3  02A5               	subwf	___fttol@exp1^(0+256),f
  8913  17A4  1FA5               	btfss	___fttol@exp1^(0+256),7
  8914  17A5  2FC6               	goto	l5495
  8915  17A6  0825               	movf	___fttol@exp1^(0+256),w
  8916  17A7  3A80               	xorlw	128
  8917  17A8  3E8F               	addlw	143
  8918  17A9  1803               	skipnc
  8919  17AA  2FB5               	goto	l5493
  8920  17AB  3000               	movlw	0
  8921  17AC  0021               	movlb	1	; select bank1
  8922  17AD  00EA               	movwf	(?___fttol+3)^(0+128)
  8923  17AE  3000               	movlw	0
  8924  17AF  00E9               	movwf	(?___fttol+2)^(0+128)
  8925  17B0  3000               	movlw	0
  8926  17B1  00E8               	movwf	(?___fttol+1)^(0+128)
  8927  17B2  3000               	movlw	0
  8928  17B3  00E7               	movwf	?___fttol^(0+128)
  8929  17B4  0008               	return
  8930  17B5                     l5493:	
  8931  17B5  3001               	movlw	1
  8932  17B6                     u5965:	
  8933  17B6  0022               	movlb	2	; select bank2
  8934  17B7  36A4               	lsrf	(___fttol@lval+3)^(0+256),f
  8935  17B8  0CA3               	rrf	(___fttol@lval+2)^(0+256),f
  8936  17B9  0CA2               	rrf	(___fttol@lval+1)^(0+256),f
  8937  17BA  0CA1               	rrf	___fttol@lval^(0+256),f
  8938  17BB  0B89               	decfsz	9,f
  8939  17BC  2FB6               	goto	u5965
  8940  17BD  3001               	movlw	1
  8941  17BE  0021               	movlb	1	; select bank1
  8942  17BF  00EB               	movwf	??___fttol^(0+128)
  8943  17C0  086B               	movf	??___fttol^(0+128),w
  8944  17C1  0022               	movlb	2	; select bank2
  8945  17C2  07A5               	addwf	___fttol@exp1^(0+256),f
  8946  17C3  1903               	btfsc	3,2
  8947  17C4  2FE2               	goto	l5503
  8948  17C5  2FB5               	goto	l5493
  8949  17C6                     l5495:	
  8950  17C6  3018               	movlw	24
  8951  17C7  0225               	subwf	___fttol@exp1^(0+256),w
  8952  17C8  1C03               	skipc
  8953  17C9  2FDE               	goto	l1570
  8954  17CA  3000               	movlw	0
  8955  17CB  0021               	movlb	1	; select bank1
  8956  17CC  00EA               	movwf	(?___fttol+3)^(0+128)
  8957  17CD  3000               	movlw	0
  8958  17CE  00E9               	movwf	(?___fttol+2)^(0+128)
  8959  17CF  3000               	movlw	0
  8960  17D0  00E8               	movwf	(?___fttol+1)^(0+128)
  8961  17D1  3000               	movlw	0
  8962  17D2  00E7               	movwf	?___fttol^(0+128)
  8963  17D3  0008               	return
  8964  17D4                     l5501:	
  8965  17D4  3001               	movlw	1
  8966  17D5                     u5995:	
  8967  17D5  0022               	movlb	2	; select bank2
  8968  17D6  35A1               	lslf	___fttol@lval^(0+256),f
  8969  17D7  0DA2               	rlf	(___fttol@lval+1)^(0+256),f
  8970  17D8  0DA3               	rlf	(___fttol@lval+2)^(0+256),f
  8971  17D9  0DA4               	rlf	(___fttol@lval+3)^(0+256),f
  8972  17DA  0B89               	decfsz	9,f
  8973  17DB  2FD5               	goto	u5995
  8974  17DC  3001               	movlw	1
  8975  17DD  02A5               	subwf	___fttol@exp1^(0+256),f
  8976  17DE                     l1570:	
  8977  17DE  0022               	movlb	2	; select bank2
  8978  17DF  0825               	movf	___fttol@exp1^(0+256),w
  8979  17E0  1D03               	btfss	3,2
  8980  17E1  2FD4               	goto	l5501
  8981  17E2                     l5503:	
  8982  17E2  0820               	movf	___fttol@sign1^(0+256),w
  8983  17E3  1903               	btfsc	3,2
  8984  17E4  2FF0               	goto	l5507
  8985  17E5  09A1               	comf	___fttol@lval^(0+256),f
  8986  17E6  09A2               	comf	(___fttol@lval+1)^(0+256),f
  8987  17E7  09A3               	comf	(___fttol@lval+2)^(0+256),f
  8988  17E8  09A4               	comf	(___fttol@lval+3)^(0+256),f
  8989  17E9  0AA1               	incf	___fttol@lval^(0+256),f
  8990  17EA  1903               	skipnz
  8991  17EB  0AA2               	incf	(___fttol@lval+1)^(0+256),f
  8992  17EC  1903               	skipnz
  8993  17ED  0AA3               	incf	(___fttol@lval+2)^(0+256),f
  8994  17EE  1903               	skipnz
  8995  17EF  0AA4               	incf	(___fttol@lval+3)^(0+256),f
  8996  17F0                     l5507:	
  8997  17F0  0824               	movf	(___fttol@lval+3)^(0+256),w
  8998  17F1  0021               	movlb	1	; select bank1
  8999  17F2  00EA               	movwf	(?___fttol+3)^(0+128)
  9000  17F3  0022               	movlb	2	; select bank2
  9001  17F4  0823               	movf	(___fttol@lval+2)^(0+256),w
  9002  17F5  0021               	movlb	1	; select bank1
  9003  17F6  00E9               	movwf	(?___fttol+2)^(0+128)
  9004  17F7  0022               	movlb	2	; select bank2
  9005  17F8  0822               	movf	(___fttol@lval+1)^(0+256),w
  9006  17F9  0021               	movlb	1	; select bank1
  9007  17FA  00E8               	movwf	(?___fttol+1)^(0+128)
  9008  17FB  0022               	movlb	2	; select bank2
  9009  17FC  0821               	movf	___fttol@lval^(0+256),w
  9010  17FD  0021               	movlb	1	; select bank1
  9011  17FE  00E7               	movwf	?___fttol^(0+128)
  9012  17FF  0008               	return
  9013  1800                     __end_of___fttol:	
  9014                           
  9015                           	psect	text18
  9016  1EA6                     __ptext18:	
  9017 ;; *************** function ___awtoft *****************
  9018 ;; Defined at:
  9019 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awtoft.c"
  9020 ;; Parameters:    Size  Location     Type
  9021 ;;  c               2    8[BANK1 ] int 
  9022 ;; Auto vars:     Size  Location     Type
  9023 ;;  sign            1   13[BANK1 ] unsigned char 
  9024 ;; Return value:  Size  Location     Type
  9025 ;;                  3    8[BANK1 ] float 
  9026 ;; Registers used:
  9027 ;;		wreg, status,2, status,0, pclath, cstack
  9028 ;; Tracked objects:
  9029 ;;		On entry : 0/0
  9030 ;;		On exit  : 0/0
  9031 ;;		Unchanged: 0/0
  9032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9033 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9034 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9035 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9036 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9037 ;;Total ram usage:        6 bytes
  9038 ;; Hardware stack levels used:    1
  9039 ;; Hardware stack levels required when called:    4
  9040 ;; This function calls:
  9041 ;;		___ftpack
  9042 ;; This function is called by:
  9043 ;;		_main
  9044 ;;		_set_subdivision
  9045 ;; This function uses a non-reentrant model
  9046 ;;
  9047                           
  9048                           
  9049                           ;psect for function ___awtoft
  9050  1EA6                     ___awtoft:	
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  9054  1EA6  0021               	movlb	1	; select bank1
  9055  1EA7  01AD               	clrf	___awtoft@sign^(0+128)
  9056  1EA8  1FA9               	btfss	(___awtoft@c+1)^(0+128),7
  9057  1EA9  2EB1               	goto	l5295
  9058  1EAA  09A8               	comf	___awtoft@c^(0+128),f
  9059  1EAB  09A9               	comf	(___awtoft@c+1)^(0+128),f
  9060  1EAC  0AA8               	incf	___awtoft@c^(0+128),f
  9061  1EAD  1903               	skipnz
  9062  1EAE  0AA9               	incf	(___awtoft@c+1)^(0+128),f
  9063  1EAF  01AD               	clrf	___awtoft@sign^(0+128)
  9064  1EB0  0AAD               	incf	___awtoft@sign^(0+128),f
  9065  1EB1                     l5295:	
  9066  1EB1  0828               	movf	___awtoft@c^(0+128),w
  9067  1EB2  00A0               	movwf	___ftpack@arg^(0+128)
  9068  1EB3  0829               	movf	(___awtoft@c+1)^(0+128),w
  9069  1EB4  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9070  1EB5  01A2               	clrf	(___ftpack@arg+2)^(0+128)
  9071  1EB6  308E               	movlw	142
  9072  1EB7  00AB               	movwf	??___awtoft^(0+128)
  9073  1EB8  082B               	movf	??___awtoft^(0+128),w
  9074  1EB9  00A3               	movwf	___ftpack@exp^(0+128)
  9075  1EBA  082D               	movf	___awtoft@sign^(0+128),w
  9076  1EBB  00AC               	movwf	(??___awtoft+1)^(0+128)
  9077  1EBC  082C               	movf	(??___awtoft+1)^(0+128),w
  9078  1EBD  00A4               	movwf	___ftpack@sign^(0+128)
  9079  1EBE  3187  2795         	fcall	___ftpack
  9080  1EC0  0021               	movlb	1	; select bank1
  9081  1EC1  0820               	movf	?___ftpack^(0+128),w
  9082  1EC2  00A8               	movwf	?___awtoft^(0+128)
  9083  1EC3  0821               	movf	(?___ftpack+1)^(0+128),w
  9084  1EC4  00A9               	movwf	(?___awtoft+1)^(0+128)
  9085  1EC5  0822               	movf	(?___ftpack+2)^(0+128),w
  9086  1EC6  00AA               	movwf	(?___awtoft+2)^(0+128)
  9087  1EC7  0008               	return
  9088  1EC8                     __end_of___awtoft:	
  9089                           
  9090                           	psect	text19
  9091  13A6                     __ptext19:	
  9092 ;; *************** function _read_top_tactile *****************
  9093 ;; Defined at:
  9094 ;;		line 47 in file "tactiles.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;		None
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      void 
  9101 ;; Registers used:
  9102 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : 0/0
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9110 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9111 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9112 ;;Total ram usage:        1 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    5
  9115 ;; This function calls:
  9116 ;;		_set_leds_top
  9117 ;;		_wait_ms
  9118 ;; This function is called by:
  9119 ;;		_main
  9120 ;; This function uses a non-reentrant model
  9121 ;;
  9122                           
  9123                           
  9124                           ;psect for function _read_top_tactile
  9125  13A6                     _read_top_tactile:	
  9126                           
  9127                           ;tactiles.c: 56: if (PORTDbits.RD5 == 0) {
  9128                           
  9129                           ;incstack = 0
  9130                           ; Regs used in _read_top_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9131  13A6  0020               	movlb	0	; select bank0
  9132  13A7  1A8F               	btfsc	15,5	;volatile
  9133  13A8  2BB0               	goto	l5627
  9134                           
  9135                           ;tactiles.c: 57: if (topTactile_pressed > 0) {
  9136  13A9  0022               	movlb	2	; select bank2
  9137  13AA  085D               	movf	_topTactile_pressed^(0+256),w
  9138  13AB  1903               	btfsc	3,2
  9139  13AC  2BBB               	goto	l854
  9140                           
  9141                           ;tactiles.c: 58: topTactile_pressed--;
  9142  13AD  3001               	movlw	1
  9143  13AE  02DD               	subwf	_topTactile_pressed^(0+256),f
  9144                           
  9145                           ;tactiles.c: 59: }
  9146                           ;tactiles.c: 60: } else if (topTactile_pressed < 25) {
  9147  13AF  2BBB               	goto	l854
  9148  13B0                     l5627:	
  9149  13B0  3019               	movlw	25
  9150  13B1  0022               	movlb	2	; select bank2
  9151  13B2  025D               	subwf	_topTactile_pressed^(0+256),w
  9152  13B3  1803               	skipnc
  9153  13B4  2BBB               	goto	l854
  9154                           
  9155                           ;tactiles.c: 61: topTactile_pressed++;
  9156  13B5  3001               	movlw	1
  9157  13B6  0021               	movlb	1	; select bank1
  9158  13B7  00B2               	movwf	??_read_top_tactile^(0+128)
  9159  13B8  0832               	movf	??_read_top_tactile^(0+128),w
  9160  13B9  0022               	movlb	2	; select bank2
  9161  13BA  07DD               	addwf	_topTactile_pressed^(0+256),f
  9162  13BB                     l854:	
  9163                           
  9164                           ;tactiles.c: 62: }
  9165                           ;tactiles.c: 67: if (topTactile_pressed == 0) {
  9166  13BB  085D               	movf	_topTactile_pressed^(0+256),w
  9167  13BC  1D03               	btfss	3,2
  9168  13BD  0008               	return
  9169                           
  9170                           ;tactiles.c: 68: top_push_state = top_push_state + 1;
  9171  13BE  0020               	movlb	0	; select bank0
  9172  13BF  0864               	movf	_top_push_state,w
  9173  13C0  3E01               	addlw	1
  9174  13C1  00E4               	movwf	_top_push_state
  9175  13C2  3000               	movlw	0
  9176  13C3  3D65               	addwfc	_top_push_state+1,w
  9177  13C4  00E5               	movwf	_top_push_state+1
  9178                           
  9179                           ;tactiles.c: 69: if (top_push_state >= 7) {
  9180  13C5  0865               	movf	_top_push_state+1,w
  9181  13C6  3A80               	xorlw	128
  9182  13C7  0021               	movlb	1	; select bank1
  9183  13C8  00B2               	movwf	??_read_top_tactile^(0+128)
  9184  13C9  3080               	movlw	128
  9185  13CA  0232               	subwf	??_read_top_tactile^(0+128),w
  9186  13CB  1D03               	skipz
  9187  13CC  2BD0               	goto	u6225
  9188  13CD  3007               	movlw	7
  9189  13CE  0020               	movlb	0	; select bank0
  9190  13CF  0264               	subwf	_top_push_state,w
  9191  13D0                     u6225:	
  9192  13D0  1C03               	skipc
  9193  13D1  2BD7               	goto	l5637
  9194                           
  9195                           ;tactiles.c: 70: top_push_state = 1;
  9196  13D2  3001               	movlw	1
  9197  13D3  0020               	movlb	0	; select bank0
  9198  13D4  00E4               	movwf	_top_push_state
  9199  13D5  3000               	movlw	0
  9200  13D6  00E5               	movwf	_top_push_state+1
  9201  13D7                     l5637:	
  9202                           
  9203                           ;tactiles.c: 71: }
  9204                           ;tactiles.c: 72: set_leds_top(top_push_state, 1);
  9205  13D7  0020               	movlb	0	; select bank0
  9206  13D8  0865               	movf	_top_push_state+1,w
  9207  13D9  0021               	movlb	1	; select bank1
  9208  13DA  00A1               	movwf	(set_leds_top@x+1)^(0+128)
  9209  13DB  0020               	movlb	0	; select bank0
  9210  13DC  0864               	movf	_top_push_state,w
  9211  13DD  0021               	movlb	1	; select bank1
  9212  13DE  00A0               	movwf	set_leds_top@x^(0+128)
  9213  13DF  3001               	movlw	1
  9214  13E0  00A2               	movwf	set_leds_top@ledState^(0+128)
  9215  13E1  3000               	movlw	0
  9216  13E2  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
  9217  13E3  3194  2499  3193   	fcall	_set_leds_top
  9218                           
  9219                           ;tactiles.c: 73: delay_time_changed = 1;
  9220  13E6  3001               	movlw	1
  9221  13E7  0023               	movlb	3	; select bank3
  9222  13E8  00DE               	movwf	_delay_time_changed^(0+384)
  9223  13E9  3000               	movlw	0
  9224  13EA  00DF               	movwf	(_delay_time_changed^(0+384)+1)
  9225  13EB                     l858:	
  9226                           ;tactiles.c: 76: while (PORTDbits.RD5 == 0) {
  9227                           
  9228  13EB  0020               	movlb	0	; select bank0
  9229  13EC  1E8F               	btfss	15,5	;volatile
  9230  13ED  2BEB               	goto	l858
  9231                           
  9232                           ;tactiles.c: 77: }
  9233                           ;tactiles.c: 78: wait_ms(20);
  9234  13EE  3014               	movlw	20
  9235  13EF  0021               	movlb	1	; select bank1
  9236  13F0  00AC               	movwf	wait_ms@timeSec^(0+128)
  9237  13F1  3000               	movlw	0
  9238  13F2  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9239  13F3  3190  2021         	fcall	_wait_ms
  9240  13F5  0008               	return
  9241  13F6                     __end_of_read_top_tactile:	
  9242                           
  9243                           	psect	text20
  9244  1282                     __ptext20:	
  9245 ;; *************** function _read_bottom_tactile *****************
  9246 ;; Defined at:
  9247 ;;		line 17 in file "tactiles.c"
  9248 ;; Parameters:    Size  Location     Type
  9249 ;;		None
  9250 ;; Auto vars:     Size  Location     Type
  9251 ;;		None
  9252 ;; Return value:  Size  Location     Type
  9253 ;;                  1    wreg      void 
  9254 ;; Registers used:
  9255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9256 ;; Tracked objects:
  9257 ;;		On entry : 0/0
  9258 ;;		On exit  : 0/0
  9259 ;;		Unchanged: 0/0
  9260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9263 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9264 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9265 ;;Total ram usage:        1 bytes
  9266 ;; Hardware stack levels used:    1
  9267 ;; Hardware stack levels required when called:    5
  9268 ;; This function calls:
  9269 ;;		_set_leds_bottom
  9270 ;;		_wait_ms
  9271 ;; This function is called by:
  9272 ;;		_main
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           
  9277                           ;psect for function _read_bottom_tactile
  9278  1282                     _read_bottom_tactile:	
  9279                           
  9280                           ;tactiles.c: 25: if (PORTDbits.RD6 == 0) {
  9281                           
  9282                           ;incstack = 0
  9283                           ; Regs used in _read_bottom_tactile: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9284  1282  0020               	movlb	0	; select bank0
  9285  1283  1B0F               	btfsc	15,6	;volatile
  9286  1284  2A8C               	goto	l5607
  9287                           
  9288                           ;tactiles.c: 26: if (bottomTactile_pressed > 0) {
  9289  1285  0022               	movlb	2	; select bank2
  9290  1286  0857               	movf	_bottomTactile_pressed^(0+256),w
  9291  1287  1903               	btfsc	3,2
  9292  1288  2A97               	goto	l842
  9293                           
  9294                           ;tactiles.c: 27: bottomTactile_pressed--;
  9295  1289  3001               	movlw	1
  9296  128A  02D7               	subwf	_bottomTactile_pressed^(0+256),f
  9297                           
  9298                           ;tactiles.c: 28: }
  9299                           ;tactiles.c: 29: } else if (bottomTactile_pressed < 25) {
  9300  128B  2A97               	goto	l842
  9301  128C                     l5607:	
  9302  128C  3019               	movlw	25
  9303  128D  0022               	movlb	2	; select bank2
  9304  128E  0257               	subwf	_bottomTactile_pressed^(0+256),w
  9305  128F  1803               	skipnc
  9306  1290  2A97               	goto	l842
  9307                           
  9308                           ;tactiles.c: 30: bottomTactile_pressed++;
  9309  1291  3001               	movlw	1
  9310  1292  0021               	movlb	1	; select bank1
  9311  1293  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9312  1294  0832               	movf	??_read_bottom_tactile^(0+128),w
  9313  1295  0022               	movlb	2	; select bank2
  9314  1296  07D7               	addwf	_bottomTactile_pressed^(0+256),f
  9315  1297                     l842:	
  9316                           
  9317                           ;tactiles.c: 31: }
  9318                           ;tactiles.c: 34: if (bottomTactile_pressed == 0) {
  9319  1297  0857               	movf	_bottomTactile_pressed^(0+256),w
  9320  1298  1D03               	btfss	3,2
  9321  1299  0008               	return
  9322                           
  9323                           ;tactiles.c: 35: bottom_push_state = bottom_push_state + 1;
  9324  129A  0020               	movlb	0	; select bank0
  9325  129B  0860               	movf	_bottom_push_state,w
  9326  129C  3E01               	addlw	1
  9327  129D  00E0               	movwf	_bottom_push_state
  9328  129E  3000               	movlw	0
  9329  129F  3D61               	addwfc	_bottom_push_state+1,w
  9330  12A0  00E1               	movwf	_bottom_push_state+1
  9331                           
  9332                           ;tactiles.c: 36: if (bottom_push_state > 6) {
  9333  12A1  0861               	movf	_bottom_push_state+1,w
  9334  12A2  3A80               	xorlw	128
  9335  12A3  0021               	movlb	1	; select bank1
  9336  12A4  00B2               	movwf	??_read_bottom_tactile^(0+128)
  9337  12A5  3080               	movlw	128
  9338  12A6  0232               	subwf	??_read_bottom_tactile^(0+128),w
  9339  12A7  1D03               	skipz
  9340  12A8  2AAC               	goto	u6165
  9341  12A9  3007               	movlw	7
  9342  12AA  0020               	movlb	0	; select bank0
  9343  12AB  0260               	subwf	_bottom_push_state,w
  9344  12AC                     u6165:	
  9345  12AC  1C03               	skipc
  9346  12AD  2AB3               	goto	l5617
  9347                           
  9348                           ;tactiles.c: 37: bottom_push_state = 1;
  9349  12AE  3001               	movlw	1
  9350  12AF  0020               	movlb	0	; select bank0
  9351  12B0  00E0               	movwf	_bottom_push_state
  9352  12B1  3000               	movlw	0
  9353  12B2  00E1               	movwf	_bottom_push_state+1
  9354  12B3                     l5617:	
  9355                           
  9356                           ;tactiles.c: 38: }
  9357                           ;tactiles.c: 39: set_leds_bottom(bottom_push_state);
  9358  12B3  0020               	movlb	0	; select bank0
  9359  12B4  0861               	movf	_bottom_push_state+1,w
  9360  12B5  0021               	movlb	1	; select bank1
  9361  12B6  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
  9362  12B7  0020               	movlb	0	; select bank0
  9363  12B8  0860               	movf	_bottom_push_state,w
  9364  12B9  0021               	movlb	1	; select bank1
  9365  12BA  00A0               	movwf	set_leds_bottom@x^(0+128)
  9366  12BB  3190  208D  3192   	fcall	_set_leds_bottom
  9367  12BE                     l846:	
  9368                           ;tactiles.c: 41: while (PORTDbits.RD6 == 0) {
  9369                           
  9370  12BE  0020               	movlb	0	; select bank0
  9371  12BF  1F0F               	btfss	15,6	;volatile
  9372  12C0  2ABE               	goto	l846
  9373                           
  9374                           ;tactiles.c: 42: }
  9375                           ;tactiles.c: 43: wait_ms(20);
  9376  12C1  3014               	movlw	20
  9377  12C2  0021               	movlb	1	; select bank1
  9378  12C3  00AC               	movwf	wait_ms@timeSec^(0+128)
  9379  12C4  3000               	movlw	0
  9380  12C5  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
  9381  12C6  3190  2021         	fcall	_wait_ms
  9382  12C8  0008               	return
  9383  12C9                     __end_of_read_bottom_tactile:	
  9384                           
  9385                           	psect	text21
  9386  16D6                     __ptext21:	
  9387 ;; *************** function _map *****************
  9388 ;; Defined at:
  9389 ;;		line 171 in file "user.c"
  9390 ;; Parameters:    Size  Location     Type
  9391 ;;  x               3   53[BANK1 ] float 
  9392 ;;  in_min          3   56[BANK1 ] float 
  9393 ;;  in_max          3   59[BANK1 ] float 
  9394 ;;  out_min         3   62[BANK1 ] float 
  9395 ;;  out_max         3   65[BANK1 ] float 
  9396 ;; Auto vars:     Size  Location     Type
  9397 ;;		None
  9398 ;; Return value:  Size  Location     Type
  9399 ;;                  3   53[BANK1 ] float 
  9400 ;; Registers used:
  9401 ;;		wreg, status,2, status,0, pclath, cstack
  9402 ;; Tracked objects:
  9403 ;;		On entry : 0/0
  9404 ;;		On exit  : 0/0
  9405 ;;		Unchanged: 0/0
  9406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9407 ;;      Params:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9408 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9410 ;;      Totals:         0       0      18       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9411 ;;Total ram usage:       18 bytes
  9412 ;; Hardware stack levels used:    1
  9413 ;; Hardware stack levels required when called:    5
  9414 ;; This function calls:
  9415 ;;		___ftadd
  9416 ;;		___ftdiv
  9417 ;;		___ftmul
  9418 ;;		___ftneg
  9419 ;; This function is called by:
  9420 ;;		_main
  9421 ;; This function uses a non-reentrant model
  9422 ;;
  9423                           
  9424                           
  9425                           ;psect for function _map
  9426  16D6                     _map:	
  9427                           
  9428                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  9432  16D6  0021               	movlb	1	; select bank1
  9433  16D7  085B               	movf	map@in_max^(0+128),w
  9434  16D8  00A8               	movwf	___ftadd@f1^(0+128)
  9435  16D9  085C               	movf	(map@in_max+1)^(0+128),w
  9436  16DA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9437  16DB  085D               	movf	(map@in_max+2)^(0+128),w
  9438  16DC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9439  16DD  0858               	movf	map@in_min^(0+128),w
  9440  16DE  00A0               	movwf	___ftneg@f1^(0+128)
  9441  16DF  0859               	movf	(map@in_min+1)^(0+128),w
  9442  16E0  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9443  16E1  085A               	movf	(map@in_min+2)^(0+128),w
  9444  16E2  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9445  16E3  319D  25D5  3196   	fcall	___ftneg
  9446  16E6  0021               	movlb	1	; select bank1
  9447  16E7  0820               	movf	?___ftneg^(0+128),w
  9448  16E8  00AB               	movwf	___ftadd@f2^(0+128)
  9449  16E9  0821               	movf	(?___ftneg+1)^(0+128),w
  9450  16EA  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9451  16EB  0822               	movf	(?___ftneg+2)^(0+128),w
  9452  16EC  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9453  16ED  318B  231F  3196   	fcall	___ftadd
  9454  16F0  0021               	movlb	1	; select bank1
  9455  16F1  0828               	movf	?___ftadd^(0+128),w
  9456  16F2  00C5               	movwf	___ftdiv@f2^(0+128)
  9457  16F3  0829               	movf	(?___ftadd+1)^(0+128),w
  9458  16F4  00C6               	movwf	(___ftdiv@f2+1)^(0+128)
  9459  16F5  082A               	movf	(?___ftadd+2)^(0+128),w
  9460  16F6  00C7               	movwf	(___ftdiv@f2+2)^(0+128)
  9461  16F7  0861               	movf	map@out_max^(0+128),w
  9462  16F8  00A8               	movwf	___ftadd@f1^(0+128)
  9463  16F9  0862               	movf	(map@out_max+1)^(0+128),w
  9464  16FA  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9465  16FB  0863               	movf	(map@out_max+2)^(0+128),w
  9466  16FC  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9467  16FD  085E               	movf	map@out_min^(0+128),w
  9468  16FE  00A0               	movwf	___ftneg@f1^(0+128)
  9469  16FF  085F               	movf	(map@out_min+1)^(0+128),w
  9470  1700  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9471  1701  0860               	movf	(map@out_min+2)^(0+128),w
  9472  1702  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9473  1703  319D  25D5  3196   	fcall	___ftneg
  9474  1706  0021               	movlb	1	; select bank1
  9475  1707  0820               	movf	?___ftneg^(0+128),w
  9476  1708  00AB               	movwf	___ftadd@f2^(0+128)
  9477  1709  0821               	movf	(?___ftneg+1)^(0+128),w
  9478  170A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9479  170B  0822               	movf	(?___ftneg+2)^(0+128),w
  9480  170C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9481  170D  318B  231F  3196   	fcall	___ftadd
  9482  1710  0021               	movlb	1	; select bank1
  9483  1711  0828               	movf	?___ftadd^(0+128),w
  9484  1712  00B5               	movwf	___ftmul@f1^(0+128)
  9485  1713  0829               	movf	(?___ftadd+1)^(0+128),w
  9486  1714  00B6               	movwf	(___ftmul@f1+1)^(0+128)
  9487  1715  082A               	movf	(?___ftadd+2)^(0+128),w
  9488  1716  00B7               	movwf	(___ftmul@f1+2)^(0+128)
  9489  1717  0855               	movf	map@x^(0+128),w
  9490  1718  00A8               	movwf	___ftadd@f1^(0+128)
  9491  1719  0856               	movf	(map@x+1)^(0+128),w
  9492  171A  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9493  171B  0857               	movf	(map@x+2)^(0+128),w
  9494  171C  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9495  171D  0858               	movf	map@in_min^(0+128),w
  9496  171E  00A0               	movwf	___ftneg@f1^(0+128)
  9497  171F  0859               	movf	(map@in_min+1)^(0+128),w
  9498  1720  00A1               	movwf	(___ftneg@f1+1)^(0+128)
  9499  1721  085A               	movf	(map@in_min+2)^(0+128),w
  9500  1722  00A2               	movwf	(___ftneg@f1+2)^(0+128)
  9501  1723  319D  25D5  3196   	fcall	___ftneg
  9502  1726  0021               	movlb	1	; select bank1
  9503  1727  0820               	movf	?___ftneg^(0+128),w
  9504  1728  00AB               	movwf	___ftadd@f2^(0+128)
  9505  1729  0821               	movf	(?___ftneg+1)^(0+128),w
  9506  172A  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9507  172B  0822               	movf	(?___ftneg+2)^(0+128),w
  9508  172C  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9509  172D  318B  231F  3196   	fcall	___ftadd
  9510  1730  0021               	movlb	1	; select bank1
  9511  1731  0828               	movf	?___ftadd^(0+128),w
  9512  1732  00B8               	movwf	___ftmul@f2^(0+128)
  9513  1733  0829               	movf	(?___ftadd+1)^(0+128),w
  9514  1734  00B9               	movwf	(___ftmul@f2+1)^(0+128)
  9515  1735  082A               	movf	(?___ftadd+2)^(0+128),w
  9516  1736  00BA               	movwf	(___ftmul@f2+2)^(0+128)
  9517  1737  3188  20BA  3196   	fcall	___ftmul
  9518  173A  0021               	movlb	1	; select bank1
  9519  173B  0835               	movf	?___ftmul^(0+128),w
  9520  173C  00C8               	movwf	___ftdiv@f1^(0+128)
  9521  173D  0836               	movf	(?___ftmul+1)^(0+128),w
  9522  173E  00C9               	movwf	(___ftdiv@f1+1)^(0+128)
  9523  173F  0837               	movf	(?___ftmul+2)^(0+128),w
  9524  1740  00CA               	movwf	(___ftdiv@f1+2)^(0+128)
  9525  1741  3188  2011  3196   	fcall	___ftdiv
  9526  1744  0021               	movlb	1	; select bank1
  9527  1745  0845               	movf	?___ftdiv^(0+128),w
  9528  1746  00E4               	movwf	_map$2203^(0+128)
  9529  1747  0846               	movf	(?___ftdiv+1)^(0+128),w
  9530  1748  00E5               	movwf	(_map$2203+1)^(0+128)
  9531  1749  0847               	movf	(?___ftdiv+2)^(0+128),w
  9532  174A  00E6               	movwf	(_map$2203+2)^(0+128)
  9533                           
  9534                           ;user.c: 172: return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  9535  174B  085E               	movf	map@out_min^(0+128),w
  9536  174C  00A8               	movwf	___ftadd@f1^(0+128)
  9537  174D  085F               	movf	(map@out_min+1)^(0+128),w
  9538  174E  00A9               	movwf	(___ftadd@f1+1)^(0+128)
  9539  174F  0860               	movf	(map@out_min+2)^(0+128),w
  9540  1750  00AA               	movwf	(___ftadd@f1+2)^(0+128)
  9541  1751  0864               	movf	_map$2203^(0+128),w
  9542  1752  00AB               	movwf	___ftadd@f2^(0+128)
  9543  1753  0865               	movf	(_map$2203+1)^(0+128),w
  9544  1754  00AC               	movwf	(___ftadd@f2+1)^(0+128)
  9545  1755  0866               	movf	(_map$2203+2)^(0+128),w
  9546  1756  00AD               	movwf	(___ftadd@f2+2)^(0+128)
  9547  1757  318B  231F         	fcall	___ftadd
  9548  1759  0021               	movlb	1	; select bank1
  9549  175A  0828               	movf	?___ftadd^(0+128),w
  9550  175B  00D5               	movwf	?_map^(0+128)
  9551  175C  0829               	movf	(?___ftadd+1)^(0+128),w
  9552  175D  00D6               	movwf	(?_map+1)^(0+128)
  9553  175E  082A               	movf	(?___ftadd+2)^(0+128),w
  9554  175F  00D7               	movwf	(?_map+2)^(0+128)
  9555  1760  0008               	return
  9556  1761                     __end_of_map:	
  9557                           
  9558                           	psect	text22
  9559  1DD5                     __ptext22:	
  9560 ;; *************** function ___ftneg *****************
  9561 ;; Defined at:
  9562 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftneg.c"
  9563 ;; Parameters:    Size  Location     Type
  9564 ;;  f1              3    0[BANK1 ] float 
  9565 ;; Auto vars:     Size  Location     Type
  9566 ;;		None
  9567 ;; Return value:  Size  Location     Type
  9568 ;;                  3    0[BANK1 ] float 
  9569 ;; Registers used:
  9570 ;;		wreg
  9571 ;; Tracked objects:
  9572 ;;		On entry : 0/0
  9573 ;;		On exit  : 0/0
  9574 ;;		Unchanged: 0/0
  9575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9576 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9579 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9580 ;;Total ram usage:        3 bytes
  9581 ;; Hardware stack levels used:    1
  9582 ;; Hardware stack levels required when called:    3
  9583 ;; This function calls:
  9584 ;;		Nothing
  9585 ;; This function is called by:
  9586 ;;		_map
  9587 ;;		_scalePotValue
  9588 ;; This function uses a non-reentrant model
  9589 ;;
  9590                           
  9591                           
  9592                           ;psect for function ___ftneg
  9593  1DD5                     ___ftneg:	
  9594                           
  9595                           ;incstack = 0
  9596                           ; Regs used in ___ftneg: [wreg]
  9597  1DD5  0021               	movlb	1	; select bank1
  9598  1DD6  0822               	movf	(___ftneg@f1+2)^(0+128),w
  9599  1DD7  0421               	iorwf	(___ftneg@f1+1)^(0+128),w
  9600  1DD8  0420               	iorwf	___ftneg@f1^(0+128),w
  9601  1DD9  1903               	skipnz
  9602  1DDA  0008               	return
  9603  1DDB  3080               	movlw	128
  9604  1DDC  06A2               	xorwf	(___ftneg@f1+2)^(0+128),f
  9605  1DDD  0008               	return
  9606  1DDE                     __end_of___ftneg:	
  9607                           
  9608                           	psect	text23
  9609  08BA                     __ptext23:	
  9610 ;; *************** function ___ftmul *****************
  9611 ;; Defined at:
  9612 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftmul.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;  f1              3   21[BANK1 ] float 
  9615 ;;  f2              3   24[BANK1 ] float 
  9616 ;; Auto vars:     Size  Location     Type
  9617 ;;  f3_as_produc    3   32[BANK1 ] unsigned um
  9618 ;;  sign            1   36[BANK1 ] unsigned char 
  9619 ;;  cntr            1   35[BANK1 ] unsigned char 
  9620 ;;  exp             1   31[BANK1 ] unsigned char 
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  3   21[BANK1 ] float 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, pclath, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9630 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9631 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9632 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9633 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9634 ;;Total ram usage:       16 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    4
  9637 ;; This function calls:
  9638 ;;		___ftpack
  9639 ;; This function is called by:
  9640 ;;		_set_subdivision
  9641 ;;		_map
  9642 ;;		_scalePotValue
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function ___ftmul
  9648  08BA                     ___ftmul:	
  9649                           
  9650                           ;incstack = 0
  9651                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  9652  08BA  0021               	movlb	1	; select bank1
  9653  08BB  0835               	movf	___ftmul@f1^(0+128),w
  9654  08BC  00BB               	movwf	??___ftmul^(0+128)
  9655  08BD  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9656  08BE  00BC               	movwf	(??___ftmul^(0+128)+1)
  9657  08BF  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9658  08C0  00BD               	movwf	(??___ftmul^(0+128)+2)
  9659  08C1  1003               	clrc
  9660  08C2  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9661  08C3  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9662  08C4  00BE               	movwf	(??___ftmul+3)^(0+128)
  9663  08C5  083E               	movf	(??___ftmul+3)^(0+128),w
  9664  08C6  00BF               	movwf	___ftmul@exp^(0+128)
  9665  08C7  083F               	movf	___ftmul@exp^(0+128),w
  9666  08C8  1D03               	btfss	3,2
  9667  08C9  28D1               	goto	l5417
  9668  08CA  3000               	movlw	0
  9669  08CB  00B5               	movwf	?___ftmul^(0+128)
  9670  08CC  3000               	movlw	0
  9671  08CD  00B6               	movwf	(?___ftmul+1)^(0+128)
  9672  08CE  3000               	movlw	0
  9673  08CF  00B7               	movwf	(?___ftmul+2)^(0+128)
  9674  08D0  0008               	return
  9675  08D1                     l5417:	
  9676  08D1  0838               	movf	___ftmul@f2^(0+128),w
  9677  08D2  00BB               	movwf	??___ftmul^(0+128)
  9678  08D3  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9679  08D4  00BC               	movwf	(??___ftmul^(0+128)+1)
  9680  08D5  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9681  08D6  00BD               	movwf	(??___ftmul^(0+128)+2)
  9682  08D7  1003               	clrc
  9683  08D8  0D3C               	rlf	(??___ftmul^(0+128)+1),w
  9684  08D9  0D3D               	rlf	(??___ftmul^(0+128)+2),w
  9685  08DA  00BE               	movwf	(??___ftmul+3)^(0+128)
  9686  08DB  083E               	movf	(??___ftmul+3)^(0+128),w
  9687  08DC  00C4               	movwf	___ftmul@sign^(0+128)
  9688  08DD  0844               	movf	___ftmul@sign^(0+128),w
  9689  08DE  1D03               	btfss	3,2
  9690  08DF  28E7               	goto	l5423
  9691  08E0  3000               	movlw	0
  9692  08E1  00B5               	movwf	?___ftmul^(0+128)
  9693  08E2  3000               	movlw	0
  9694  08E3  00B6               	movwf	(?___ftmul+1)^(0+128)
  9695  08E4  3000               	movlw	0
  9696  08E5  00B7               	movwf	(?___ftmul+2)^(0+128)
  9697  08E6  0008               	return
  9698  08E7                     l5423:	
  9699  08E7  0844               	movf	___ftmul@sign^(0+128),w
  9700  08E8  3E7B               	addlw	123
  9701  08E9  00BB               	movwf	??___ftmul^(0+128)
  9702  08EA  083B               	movf	??___ftmul^(0+128),w
  9703  08EB  07BF               	addwf	___ftmul@exp^(0+128),f
  9704  08EC  0835               	movf	___ftmul@f1^(0+128),w
  9705  08ED  00BB               	movwf	??___ftmul^(0+128)
  9706  08EE  0836               	movf	(___ftmul@f1+1)^(0+128),w
  9707  08EF  00BC               	movwf	(??___ftmul^(0+128)+1)
  9708  08F0  0837               	movf	(___ftmul@f1+2)^(0+128),w
  9709  08F1  00BD               	movwf	(??___ftmul^(0+128)+2)
  9710  08F2  3010               	movlw	16
  9711  08F3                     u5815:	
  9712  08F3  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9713  08F4  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9714  08F5  0CBB               	rrf	??___ftmul^(0+128),f
  9715  08F6  0B89               	decfsz	9,f
  9716  08F7  28F3               	goto	u5815
  9717  08F8  083B               	movf	??___ftmul^(0+128),w
  9718  08F9  00BE               	movwf	(??___ftmul+3)^(0+128)
  9719  08FA  083E               	movf	(??___ftmul+3)^(0+128),w
  9720  08FB  00C4               	movwf	___ftmul@sign^(0+128)
  9721  08FC  0838               	movf	___ftmul@f2^(0+128),w
  9722  08FD  00BB               	movwf	??___ftmul^(0+128)
  9723  08FE  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9724  08FF  00BC               	movwf	(??___ftmul^(0+128)+1)
  9725  0900  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9726  0901  00BD               	movwf	(??___ftmul^(0+128)+2)
  9727  0902  3010               	movlw	16
  9728  0903                     u5825:	
  9729  0903  36BD               	lsrf	(??___ftmul^(0+128)+2),f
  9730  0904  0CBC               	rrf	(??___ftmul^(0+128)+1),f
  9731  0905  0CBB               	rrf	??___ftmul^(0+128),f
  9732  0906  0B89               	decfsz	9,f
  9733  0907  2903               	goto	u5825
  9734  0908  083B               	movf	??___ftmul^(0+128),w
  9735  0909  00BE               	movwf	(??___ftmul+3)^(0+128)
  9736  090A  083E               	movf	(??___ftmul+3)^(0+128),w
  9737  090B  06C4               	xorwf	___ftmul@sign^(0+128),f
  9738  090C  3080               	movlw	128
  9739  090D  00BB               	movwf	??___ftmul^(0+128)
  9740  090E  083B               	movf	??___ftmul^(0+128),w
  9741  090F  05C4               	andwf	___ftmul@sign^(0+128),f
  9742  0910  17B6               	bsf	(___ftmul@f1^(0+128)+1),7
  9743  0911  17B9               	bsf	(___ftmul@f2^(0+128)+1),7
  9744  0912  30FF               	movlw	255
  9745  0913  05B8               	andwf	___ftmul@f2^(0+128),f
  9746  0914  30FF               	movlw	255
  9747  0915  05B9               	andwf	(___ftmul@f2+1)^(0+128),f
  9748  0916  3000               	movlw	0
  9749  0917  05BA               	andwf	(___ftmul@f2+2)^(0+128),f
  9750  0918  3000               	movlw	0
  9751  0919  00C0               	movwf	___ftmul@f3_as_product^(0+128)
  9752  091A  3000               	movlw	0
  9753  091B  00C1               	movwf	(___ftmul@f3_as_product+1)^(0+128)
  9754  091C  3000               	movlw	0
  9755  091D  00C2               	movwf	(___ftmul@f3_as_product+2)^(0+128)
  9756  091E  3007               	movlw	7
  9757  091F  00BB               	movwf	??___ftmul^(0+128)
  9758  0920  083B               	movf	??___ftmul^(0+128),w
  9759  0921  00C3               	movwf	___ftmul@cntr^(0+128)
  9760  0922                     l5435:	
  9761  0922  1C35               	btfss	___ftmul@f1^(0+128),0
  9762  0923  292A               	goto	l5439
  9763  0924  0838               	movf	___ftmul@f2^(0+128),w
  9764  0925  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9765  0926  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9766  0927  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9767  0928  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9768  0929  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9769  092A                     l5439:	
  9770  092A  3001               	movlw	1
  9771  092B                     u5845:	
  9772  092B  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9773  092C  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9774  092D  0CB5               	rrf	___ftmul@f1^(0+128),f
  9775  092E  0B89               	decfsz	9,f
  9776  092F  292B               	goto	u5845
  9777  0930  3001               	movlw	1
  9778  0931                     u5855:	
  9779  0931  35B8               	lslf	___ftmul@f2^(0+128),f
  9780  0932  0DB9               	rlf	(___ftmul@f2+1)^(0+128),f
  9781  0933  0DBA               	rlf	(___ftmul@f2+2)^(0+128),f
  9782  0934  0B89               	decfsz	9,f
  9783  0935  2931               	goto	u5855
  9784  0936  3001               	movlw	1
  9785  0937  02C3               	subwf	___ftmul@cntr^(0+128),f
  9786  0938  1D03               	btfss	3,2
  9787  0939  2922               	goto	l5435
  9788  093A  3009               	movlw	9
  9789  093B  00BB               	movwf	??___ftmul^(0+128)
  9790  093C  083B               	movf	??___ftmul^(0+128),w
  9791  093D  00C3               	movwf	___ftmul@cntr^(0+128)
  9792  093E                     l5447:	
  9793  093E  1C35               	btfss	___ftmul@f1^(0+128),0
  9794  093F  2946               	goto	l5451
  9795  0940  0838               	movf	___ftmul@f2^(0+128),w
  9796  0941  07C0               	addwf	___ftmul@f3_as_product^(0+128),f
  9797  0942  0839               	movf	(___ftmul@f2+1)^(0+128),w
  9798  0943  3DC1               	addwfc	(___ftmul@f3_as_product+1)^(0+128),f
  9799  0944  083A               	movf	(___ftmul@f2+2)^(0+128),w
  9800  0945  3DC2               	addwfc	(___ftmul@f3_as_product+2)^(0+128),f
  9801  0946                     l5451:	
  9802  0946  3001               	movlw	1
  9803  0947                     u5885:	
  9804  0947  36B7               	lsrf	(___ftmul@f1+2)^(0+128),f
  9805  0948  0CB6               	rrf	(___ftmul@f1+1)^(0+128),f
  9806  0949  0CB5               	rrf	___ftmul@f1^(0+128),f
  9807  094A  0B89               	decfsz	9,f
  9808  094B  2947               	goto	u5885
  9809  094C  3001               	movlw	1
  9810  094D                     u5895:	
  9811  094D  36C2               	lsrf	(___ftmul@f3_as_product+2)^(0+128),f
  9812  094E  0CC1               	rrf	(___ftmul@f3_as_product+1)^(0+128),f
  9813  094F  0CC0               	rrf	___ftmul@f3_as_product^(0+128),f
  9814  0950  0B89               	decfsz	9,f
  9815  0951  294D               	goto	u5895
  9816  0952  3001               	movlw	1
  9817  0953  02C3               	subwf	___ftmul@cntr^(0+128),f
  9818  0954  1D03               	btfss	3,2
  9819  0955  293E               	goto	l5447
  9820  0956  0840               	movf	___ftmul@f3_as_product^(0+128),w
  9821  0957  00A0               	movwf	___ftpack@arg^(0+128)
  9822  0958  0841               	movf	(___ftmul@f3_as_product+1)^(0+128),w
  9823  0959  00A1               	movwf	(___ftpack@arg+1)^(0+128)
  9824  095A  0842               	movf	(___ftmul@f3_as_product+2)^(0+128),w
  9825  095B  00A2               	movwf	(___ftpack@arg+2)^(0+128)
  9826  095C  083F               	movf	___ftmul@exp^(0+128),w
  9827  095D  00BB               	movwf	??___ftmul^(0+128)
  9828  095E  083B               	movf	??___ftmul^(0+128),w
  9829  095F  00A3               	movwf	___ftpack@exp^(0+128)
  9830  0960  0844               	movf	___ftmul@sign^(0+128),w
  9831  0961  00BC               	movwf	(??___ftmul+1)^(0+128)
  9832  0962  083C               	movf	(??___ftmul+1)^(0+128),w
  9833  0963  00A4               	movwf	___ftpack@sign^(0+128)
  9834  0964  3187  2795         	fcall	___ftpack
  9835  0966  0021               	movlb	1	; select bank1
  9836  0967  0820               	movf	?___ftpack^(0+128),w
  9837  0968  00B5               	movwf	?___ftmul^(0+128)
  9838  0969  0821               	movf	(?___ftpack+1)^(0+128),w
  9839  096A  00B6               	movwf	(?___ftmul+1)^(0+128)
  9840  096B  0822               	movf	(?___ftpack+2)^(0+128),w
  9841  096C  00B7               	movwf	(?___ftmul+2)^(0+128)
  9842  096D  0008               	return
  9843  096E                     __end_of___ftmul:	
  9844                           
  9845                           	psect	text24
  9846  0811                     __ptext24:	
  9847 ;; *************** function ___ftdiv *****************
  9848 ;; Defined at:
  9849 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftdiv.c"
  9850 ;; Parameters:    Size  Location     Type
  9851 ;;  f2              3   37[BANK1 ] float 
  9852 ;;  f1              3   40[BANK1 ] float 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  f3              3   48[BANK1 ] float 
  9855 ;;  sign            1   52[BANK1 ] unsigned char 
  9856 ;;  exp             1   51[BANK1 ] unsigned char 
  9857 ;;  cntr            1   47[BANK1 ] unsigned char 
  9858 ;; Return value:  Size  Location     Type
  9859 ;;                  3   37[BANK1 ] float 
  9860 ;; Registers used:
  9861 ;;		wreg, status,2, status,0, pclath, cstack
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
  9867 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9868 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9869 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9870 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
  9871 ;;Total ram usage:       16 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    4
  9874 ;; This function calls:
  9875 ;;		___ftpack
  9876 ;; This function is called by:
  9877 ;;		_set_subdivision
  9878 ;;		_map
  9879 ;;		_scalePotValue
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           
  9884                           ;psect for function ___ftdiv
  9885  0811                     ___ftdiv:	
  9886                           
  9887                           ;incstack = 0
  9888                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  9889  0811  0021               	movlb	1	; select bank1
  9890  0812  0848               	movf	___ftdiv@f1^(0+128),w
  9891  0813  00CB               	movwf	??___ftdiv^(0+128)
  9892  0814  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9893  0815  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9894  0816  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9895  0817  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9896  0818  1003               	clrc
  9897  0819  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9898  081A  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9899  081B  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9900  081C  084E               	movf	(??___ftdiv+3)^(0+128),w
  9901  081D  00D3               	movwf	___ftdiv@exp^(0+128)
  9902  081E  0853               	movf	___ftdiv@exp^(0+128),w
  9903  081F  1D03               	btfss	3,2
  9904  0820  2828               	goto	l5375
  9905  0821  3000               	movlw	0
  9906  0822  00C5               	movwf	?___ftdiv^(0+128)
  9907  0823  3000               	movlw	0
  9908  0824  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9909  0825  3000               	movlw	0
  9910  0826  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9911  0827  0008               	return
  9912  0828                     l5375:	
  9913  0828  0845               	movf	___ftdiv@f2^(0+128),w
  9914  0829  00CB               	movwf	??___ftdiv^(0+128)
  9915  082A  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9916  082B  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9917  082C  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9918  082D  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9919  082E  1003               	clrc
  9920  082F  0D4C               	rlf	(??___ftdiv^(0+128)+1),w
  9921  0830  0D4D               	rlf	(??___ftdiv^(0+128)+2),w
  9922  0831  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9923  0832  084E               	movf	(??___ftdiv+3)^(0+128),w
  9924  0833  00D4               	movwf	___ftdiv@sign^(0+128)
  9925  0834  0854               	movf	___ftdiv@sign^(0+128),w
  9926  0835  1D03               	btfss	3,2
  9927  0836  283E               	goto	l5381
  9928  0837  3000               	movlw	0
  9929  0838  00C5               	movwf	?___ftdiv^(0+128)
  9930  0839  3000               	movlw	0
  9931  083A  00C6               	movwf	(?___ftdiv+1)^(0+128)
  9932  083B  3000               	movlw	0
  9933  083C  00C7               	movwf	(?___ftdiv+2)^(0+128)
  9934  083D  0008               	return
  9935  083E                     l5381:	
  9936  083E  3000               	movlw	0
  9937  083F  00D0               	movwf	___ftdiv@f3^(0+128)
  9938  0840  3000               	movlw	0
  9939  0841  00D1               	movwf	(___ftdiv@f3+1)^(0+128)
  9940  0842  3000               	movlw	0
  9941  0843  00D2               	movwf	(___ftdiv@f3+2)^(0+128)
  9942  0844  3089               	movlw	137
  9943  0845  0754               	addwf	___ftdiv@sign^(0+128),w
  9944  0846  00CB               	movwf	??___ftdiv^(0+128)
  9945  0847  084B               	movf	??___ftdiv^(0+128),w
  9946  0848  02D3               	subwf	___ftdiv@exp^(0+128),f
  9947  0849  0848               	movf	___ftdiv@f1^(0+128),w
  9948  084A  00CB               	movwf	??___ftdiv^(0+128)
  9949  084B  0849               	movf	(___ftdiv@f1+1)^(0+128),w
  9950  084C  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9951  084D  084A               	movf	(___ftdiv@f1+2)^(0+128),w
  9952  084E  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9953  084F  3010               	movlw	16
  9954  0850                     u5735:	
  9955  0850  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9956  0851  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9957  0852  0CCB               	rrf	??___ftdiv^(0+128),f
  9958  0853  0B89               	decfsz	9,f
  9959  0854  2850               	goto	u5735
  9960  0855  084B               	movf	??___ftdiv^(0+128),w
  9961  0856  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9962  0857  084E               	movf	(??___ftdiv+3)^(0+128),w
  9963  0858  00D4               	movwf	___ftdiv@sign^(0+128)
  9964  0859  0845               	movf	___ftdiv@f2^(0+128),w
  9965  085A  00CB               	movwf	??___ftdiv^(0+128)
  9966  085B  0846               	movf	(___ftdiv@f2+1)^(0+128),w
  9967  085C  00CC               	movwf	(??___ftdiv^(0+128)+1)
  9968  085D  0847               	movf	(___ftdiv@f2+2)^(0+128),w
  9969  085E  00CD               	movwf	(??___ftdiv^(0+128)+2)
  9970  085F  3010               	movlw	16
  9971  0860                     u5745:	
  9972  0860  36CD               	lsrf	(??___ftdiv^(0+128)+2),f
  9973  0861  0CCC               	rrf	(??___ftdiv^(0+128)+1),f
  9974  0862  0CCB               	rrf	??___ftdiv^(0+128),f
  9975  0863  0B89               	decfsz	9,f
  9976  0864  2860               	goto	u5745
  9977  0865  084B               	movf	??___ftdiv^(0+128),w
  9978  0866  00CE               	movwf	(??___ftdiv+3)^(0+128)
  9979  0867  084E               	movf	(??___ftdiv+3)^(0+128),w
  9980  0868  06D4               	xorwf	___ftdiv@sign^(0+128),f
  9981  0869  3080               	movlw	128
  9982  086A  00CB               	movwf	??___ftdiv^(0+128)
  9983  086B  084B               	movf	??___ftdiv^(0+128),w
  9984  086C  05D4               	andwf	___ftdiv@sign^(0+128),f
  9985  086D  17C9               	bsf	(___ftdiv@f1^(0+128)+1),7
  9986  086E  30FF               	movlw	255
  9987  086F  05C8               	andwf	___ftdiv@f1^(0+128),f
  9988  0870  30FF               	movlw	255
  9989  0871  05C9               	andwf	(___ftdiv@f1+1)^(0+128),f
  9990  0872  3000               	movlw	0
  9991  0873  05CA               	andwf	(___ftdiv@f1+2)^(0+128),f
  9992  0874  17C6               	bsf	(___ftdiv@f2^(0+128)+1),7
  9993  0875  30FF               	movlw	255
  9994  0876  05C5               	andwf	___ftdiv@f2^(0+128),f
  9995  0877  30FF               	movlw	255
  9996  0878  05C6               	andwf	(___ftdiv@f2+1)^(0+128),f
  9997  0879  3000               	movlw	0
  9998  087A  05C7               	andwf	(___ftdiv@f2+2)^(0+128),f
  9999  087B  3018               	movlw	24
 10000  087C  00CB               	movwf	??___ftdiv^(0+128)
 10001  087D  084B               	movf	??___ftdiv^(0+128),w
 10002  087E  00CF               	movwf	___ftdiv@cntr^(0+128)
 10003  087F                     l5395:	
 10004  087F  3001               	movlw	1
 10005  0880                     u5755:	
 10006  0880  35D0               	lslf	___ftdiv@f3^(0+128),f
 10007  0881  0DD1               	rlf	(___ftdiv@f3+1)^(0+128),f
 10008  0882  0DD2               	rlf	(___ftdiv@f3+2)^(0+128),f
 10009  0883  0B89               	decfsz	9,f
 10010  0884  2880               	goto	u5755
 10011  0885  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10012  0886  024A               	subwf	(___ftdiv@f1+2)^(0+128),w
 10013  0887  1D03               	skipz
 10014  0888  288F               	goto	u5765
 10015  0889  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10016  088A  0249               	subwf	(___ftdiv@f1+1)^(0+128),w
 10017  088B  1D03               	skipz
 10018  088C  288F               	goto	u5765
 10019  088D  0845               	movf	___ftdiv@f2^(0+128),w
 10020  088E  0248               	subwf	___ftdiv@f1^(0+128),w
 10021  088F                     u5765:	
 10022  088F  1C03               	skipc
 10023  0890  2898               	goto	l5403
 10024  0891  0845               	movf	___ftdiv@f2^(0+128),w
 10025  0892  02C8               	subwf	___ftdiv@f1^(0+128),f
 10026  0893  0846               	movf	(___ftdiv@f2+1)^(0+128),w
 10027  0894  3BC9               	subwfb	(___ftdiv@f1+1)^(0+128),f
 10028  0895  0847               	movf	(___ftdiv@f2+2)^(0+128),w
 10029  0896  3BCA               	subwfb	(___ftdiv@f1+2)^(0+128),f
 10030  0897  1450               	bsf	___ftdiv@f3^(0+128),0
 10031  0898                     l5403:	
 10032  0898  3001               	movlw	1
 10033  0899                     u5775:	
 10034  0899  35C8               	lslf	___ftdiv@f1^(0+128),f
 10035  089A  0DC9               	rlf	(___ftdiv@f1+1)^(0+128),f
 10036  089B  0DCA               	rlf	(___ftdiv@f1+2)^(0+128),f
 10037  089C  0B89               	decfsz	9,f
 10038  089D  2899               	goto	u5775
 10039  089E  3001               	movlw	1
 10040  089F  02CF               	subwf	___ftdiv@cntr^(0+128),f
 10041  08A0  1D03               	btfss	3,2
 10042  08A1  287F               	goto	l5395
 10043  08A2  0850               	movf	___ftdiv@f3^(0+128),w
 10044  08A3  00A0               	movwf	___ftpack@arg^(0+128)
 10045  08A4  0851               	movf	(___ftdiv@f3+1)^(0+128),w
 10046  08A5  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10047  08A6  0852               	movf	(___ftdiv@f3+2)^(0+128),w
 10048  08A7  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10049  08A8  0853               	movf	___ftdiv@exp^(0+128),w
 10050  08A9  00CB               	movwf	??___ftdiv^(0+128)
 10051  08AA  084B               	movf	??___ftdiv^(0+128),w
 10052  08AB  00A3               	movwf	___ftpack@exp^(0+128)
 10053  08AC  0854               	movf	___ftdiv@sign^(0+128),w
 10054  08AD  00CC               	movwf	(??___ftdiv+1)^(0+128)
 10055  08AE  084C               	movf	(??___ftdiv+1)^(0+128),w
 10056  08AF  00A4               	movwf	___ftpack@sign^(0+128)
 10057  08B0  3187  2795         	fcall	___ftpack
 10058  08B2  0021               	movlb	1	; select bank1
 10059  08B3  0820               	movf	?___ftpack^(0+128),w
 10060  08B4  00C5               	movwf	?___ftdiv^(0+128)
 10061  08B5  0821               	movf	(?___ftpack+1)^(0+128),w
 10062  08B6  00C6               	movwf	(?___ftdiv+1)^(0+128)
 10063  08B7  0822               	movf	(?___ftpack+2)^(0+128),w
 10064  08B8  00C7               	movwf	(?___ftdiv+2)^(0+128)
 10065  08B9  0008               	return
 10066  08BA                     __end_of___ftdiv:	
 10067                           
 10068                           	psect	text25
 10069  0B1F                     __ptext25:	
 10070 ;; *************** function ___ftadd *****************
 10071 ;; Defined at:
 10072 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\ftadd.c"
 10073 ;; Parameters:    Size  Location     Type
 10074 ;;  f1              3    8[BANK1 ] float 
 10075 ;;  f2              3   11[BANK1 ] float 
 10076 ;; Auto vars:     Size  Location     Type
 10077 ;;  exp1            1   20[BANK1 ] unsigned char 
 10078 ;;  exp2            1   19[BANK1 ] unsigned char 
 10079 ;;  sign            1   18[BANK1 ] unsigned char 
 10080 ;; Return value:  Size  Location     Type
 10081 ;;                  3    8[BANK1 ] float 
 10082 ;; Registers used:
 10083 ;;		wreg, status,2, status,0, pclath, cstack
 10084 ;; Tracked objects:
 10085 ;;		On entry : 0/0
 10086 ;;		On exit  : 0/0
 10087 ;;		Unchanged: 0/0
 10088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10089 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10090 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10091 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10092 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10093 ;;Total ram usage:       13 bytes
 10094 ;; Hardware stack levels used:    1
 10095 ;; Hardware stack levels required when called:    4
 10096 ;; This function calls:
 10097 ;;		___ftpack
 10098 ;; This function is called by:
 10099 ;;		_map
 10100 ;;		_scalePotValue
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           
 10105                           ;psect for function ___ftadd
 10106  0B1F                     ___ftadd:	
 10107                           
 10108                           ;incstack = 0
 10109                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 10110  0B1F  0021               	movlb	1	; select bank1
 10111  0B20  0828               	movf	___ftadd@f1^(0+128),w
 10112  0B21  00AE               	movwf	??___ftadd^(0+128)
 10113  0B22  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10114  0B23  00AF               	movwf	(??___ftadd^(0+128)+1)
 10115  0B24  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10116  0B25  00B0               	movwf	(??___ftadd^(0+128)+2)
 10117  0B26  1003               	clrc
 10118  0B27  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10119  0B28  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10120  0B29  00B1               	movwf	(??___ftadd+3)^(0+128)
 10121  0B2A  0831               	movf	(??___ftadd+3)^(0+128),w
 10122  0B2B  00B4               	movwf	___ftadd@exp1^(0+128)
 10123  0B2C  082B               	movf	___ftadd@f2^(0+128),w
 10124  0B2D  00AE               	movwf	??___ftadd^(0+128)
 10125  0B2E  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10126  0B2F  00AF               	movwf	(??___ftadd^(0+128)+1)
 10127  0B30  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10128  0B31  00B0               	movwf	(??___ftadd^(0+128)+2)
 10129  0B32  1003               	clrc
 10130  0B33  0D2F               	rlf	(??___ftadd^(0+128)+1),w
 10131  0B34  0D30               	rlf	(??___ftadd^(0+128)+2),w
 10132  0B35  00B1               	movwf	(??___ftadd+3)^(0+128)
 10133  0B36  0831               	movf	(??___ftadd+3)^(0+128),w
 10134  0B37  00B3               	movwf	___ftadd@exp2^(0+128)
 10135  0B38  0834               	movf	___ftadd@exp1^(0+128),w
 10136  0B39  1903               	btfsc	3,2
 10137  0B3A  2B47               	goto	l5305
 10138  0B3B  0833               	movf	___ftadd@exp2^(0+128),w
 10139  0B3C  0234               	subwf	___ftadd@exp1^(0+128),w
 10140  0B3D  1803               	skipnc
 10141  0B3E  2B4E               	goto	l5309
 10142  0B3F  0334               	decf	___ftadd@exp1^(0+128),w
 10143  0B40  3AFF               	xorlw	255
 10144  0B41  0733               	addwf	___ftadd@exp2^(0+128),w
 10145  0B42  00AE               	movwf	??___ftadd^(0+128)
 10146  0B43  3019               	movlw	25
 10147  0B44  022E               	subwf	??___ftadd^(0+128),w
 10148  0B45  1C03               	skipc
 10149  0B46  2B4E               	goto	l5309
 10150  0B47                     l5305:	
 10151  0B47  082B               	movf	___ftadd@f2^(0+128),w
 10152  0B48  00A8               	movwf	?___ftadd^(0+128)
 10153  0B49  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10154  0B4A  00A9               	movwf	(?___ftadd+1)^(0+128)
 10155  0B4B  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10156  0B4C  00AA               	movwf	(?___ftadd+2)^(0+128)
 10157  0B4D  0008               	return
 10158  0B4E                     l5309:	
 10159  0B4E  0833               	movf	___ftadd@exp2^(0+128),w
 10160  0B4F  1903               	btfsc	3,2
 10161  0B50  0008               	return
 10162  0B51  0834               	movf	___ftadd@exp1^(0+128),w
 10163  0B52  0233               	subwf	___ftadd@exp2^(0+128),w
 10164  0B53  1803               	skipnc
 10165  0B54  2B5D               	goto	l5315
 10166  0B55  0333               	decf	___ftadd@exp2^(0+128),w
 10167  0B56  3AFF               	xorlw	255
 10168  0B57  0734               	addwf	___ftadd@exp1^(0+128),w
 10169  0B58  00AE               	movwf	??___ftadd^(0+128)
 10170  0B59  3019               	movlw	25
 10171  0B5A  022E               	subwf	??___ftadd^(0+128),w
 10172  0B5B  1803               	btfsc	3,0
 10173  0B5C  0008               	return
 10174  0B5D                     l5315:	
 10175  0B5D  3006               	movlw	6
 10176  0B5E  00AE               	movwf	??___ftadd^(0+128)
 10177  0B5F  082E               	movf	??___ftadd^(0+128),w
 10178  0B60  00B2               	movwf	___ftadd@sign^(0+128)
 10179  0B61  1BAA               	btfsc	(___ftadd@f1+2)^(0+128),7
 10180  0B62  17B2               	bsf	___ftadd@sign^(0+128),7
 10181  0B63  1BAD               	btfsc	(___ftadd@f2+2)^(0+128),7
 10182  0B64  1732               	bsf	___ftadd@sign^(0+128),6
 10183  0B65  17A9               	bsf	(___ftadd@f1^(0+128)+1),7
 10184  0B66  30FF               	movlw	255
 10185  0B67  05A8               	andwf	___ftadd@f1^(0+128),f
 10186  0B68  30FF               	movlw	255
 10187  0B69  05A9               	andwf	(___ftadd@f1+1)^(0+128),f
 10188  0B6A  3000               	movlw	0
 10189  0B6B  05AA               	andwf	(___ftadd@f1+2)^(0+128),f
 10190  0B6C  17AC               	bsf	(___ftadd@f2^(0+128)+1),7
 10191  0B6D  30FF               	movlw	255
 10192  0B6E  05AB               	andwf	___ftadd@f2^(0+128),f
 10193  0B6F  30FF               	movlw	255
 10194  0B70  05AC               	andwf	(___ftadd@f2+1)^(0+128),f
 10195  0B71  3000               	movlw	0
 10196  0B72  05AD               	andwf	(___ftadd@f2+2)^(0+128),f
 10197  0B73  0833               	movf	___ftadd@exp2^(0+128),w
 10198  0B74  0234               	subwf	___ftadd@exp1^(0+128),w
 10199  0B75  1803               	skipnc
 10200  0B76  2B99               	goto	l5337
 10201  0B77                     l5327:	
 10202  0B77  3001               	movlw	1
 10203  0B78                     u5575:	
 10204  0B78  35AB               	lslf	___ftadd@f2^(0+128),f
 10205  0B79  0DAC               	rlf	(___ftadd@f2+1)^(0+128),f
 10206  0B7A  0DAD               	rlf	(___ftadd@f2+2)^(0+128),f
 10207  0B7B  0B89               	decfsz	9,f
 10208  0B7C  2B78               	goto	u5575
 10209  0B7D  3001               	movlw	1
 10210  0B7E  02B3               	subwf	___ftadd@exp2^(0+128),f
 10211  0B7F  0833               	movf	___ftadd@exp2^(0+128),w
 10212  0B80  0634               	xorwf	___ftadd@exp1^(0+128),w
 10213  0B81  1903               	skipnz
 10214  0B82  2B94               	goto	l5335
 10215  0B83  3001               	movlw	1
 10216  0B84  02B2               	subwf	___ftadd@sign^(0+128),f
 10217  0B85  0832               	movf	___ftadd@sign^(0+128),w
 10218  0B86  3907               	andlw	7
 10219  0B87  1903               	btfsc	3,2
 10220  0B88  2B94               	goto	l5335
 10221  0B89  2B77               	goto	l5327
 10222  0B8A                     l5333:	
 10223  0B8A  3001               	movlw	1
 10224  0B8B                     u5605:	
 10225  0B8B  36AA               	lsrf	(___ftadd@f1+2)^(0+128),f
 10226  0B8C  0CA9               	rrf	(___ftadd@f1+1)^(0+128),f
 10227  0B8D  0CA8               	rrf	___ftadd@f1^(0+128),f
 10228  0B8E  0B89               	decfsz	9,f
 10229  0B8F  2B8B               	goto	u5605
 10230  0B90  3001               	movlw	1
 10231  0B91  00AE               	movwf	??___ftadd^(0+128)
 10232  0B92  082E               	movf	??___ftadd^(0+128),w
 10233  0B93  07B4               	addwf	___ftadd@exp1^(0+128),f
 10234  0B94                     l5335:	
 10235  0B94  0834               	movf	___ftadd@exp1^(0+128),w
 10236  0B95  0633               	xorwf	___ftadd@exp2^(0+128),w
 10237  0B96  1903               	btfsc	3,2
 10238  0B97  2BBE               	goto	l1510
 10239  0B98  2B8A               	goto	l5333
 10240  0B99                     l5337:	
 10241  0B99  0834               	movf	___ftadd@exp1^(0+128),w
 10242  0B9A  0233               	subwf	___ftadd@exp2^(0+128),w
 10243  0B9B  1803               	skipnc
 10244  0B9C  2BBE               	goto	l1510
 10245  0B9D                     l5339:	
 10246  0B9D  3001               	movlw	1
 10247  0B9E                     u5635:	
 10248  0B9E  35A8               	lslf	___ftadd@f1^(0+128),f
 10249  0B9F  0DA9               	rlf	(___ftadd@f1+1)^(0+128),f
 10250  0BA0  0DAA               	rlf	(___ftadd@f1+2)^(0+128),f
 10251  0BA1  0B89               	decfsz	9,f
 10252  0BA2  2B9E               	goto	u5635
 10253  0BA3  3001               	movlw	1
 10254  0BA4  02B4               	subwf	___ftadd@exp1^(0+128),f
 10255  0BA5  0833               	movf	___ftadd@exp2^(0+128),w
 10256  0BA6  0634               	xorwf	___ftadd@exp1^(0+128),w
 10257  0BA7  1903               	skipnz
 10258  0BA8  2BBA               	goto	l5347
 10259  0BA9  3001               	movlw	1
 10260  0BAA  02B2               	subwf	___ftadd@sign^(0+128),f
 10261  0BAB  0832               	movf	___ftadd@sign^(0+128),w
 10262  0BAC  3907               	andlw	7
 10263  0BAD  1903               	btfsc	3,2
 10264  0BAE  2BBA               	goto	l5347
 10265  0BAF  2B9D               	goto	l5339
 10266  0BB0                     l5345:	
 10267  0BB0  3001               	movlw	1
 10268  0BB1                     u5665:	
 10269  0BB1  36AD               	lsrf	(___ftadd@f2+2)^(0+128),f
 10270  0BB2  0CAC               	rrf	(___ftadd@f2+1)^(0+128),f
 10271  0BB3  0CAB               	rrf	___ftadd@f2^(0+128),f
 10272  0BB4  0B89               	decfsz	9,f
 10273  0BB5  2BB1               	goto	u5665
 10274  0BB6  3001               	movlw	1
 10275  0BB7  00AE               	movwf	??___ftadd^(0+128)
 10276  0BB8  082E               	movf	??___ftadd^(0+128),w
 10277  0BB9  07B3               	addwf	___ftadd@exp2^(0+128),f
 10278  0BBA                     l5347:	
 10279  0BBA  0834               	movf	___ftadd@exp1^(0+128),w
 10280  0BBB  0633               	xorwf	___ftadd@exp2^(0+128),w
 10281  0BBC  1D03               	skipz
 10282  0BBD  2BB0               	goto	l5345
 10283  0BBE                     l1510:	
 10284  0BBE  1FB2               	btfss	___ftadd@sign^(0+128),7
 10285  0BBF  2BD0               	goto	l5351
 10286  0BC0  30FF               	movlw	255
 10287  0BC1  06A8               	xorwf	___ftadd@f1^(0+128),f
 10288  0BC2  30FF               	movlw	255
 10289  0BC3  06A9               	xorwf	(___ftadd@f1+1)^(0+128),f
 10290  0BC4  30FF               	movlw	255
 10291  0BC5  06AA               	xorwf	(___ftadd@f1+2)^(0+128),f
 10292  0BC6  3001               	movlw	1
 10293  0BC7  07A8               	addwf	___ftadd@f1^(0+128),f
 10294  0BC8  3000               	movlw	0
 10295  0BC9  1803               	skipnc
 10296  0BCA  3001               	movlw	1
 10297  0BCB  07A9               	addwf	(___ftadd@f1+1)^(0+128),f
 10298  0BCC  3000               	movlw	0
 10299  0BCD  1803               	skipnc
 10300  0BCE  3001               	movlw	1
 10301  0BCF  07AA               	addwf	(___ftadd@f1+2)^(0+128),f
 10302  0BD0                     l5351:	
 10303  0BD0  1F32               	btfss	___ftadd@sign^(0+128),6
 10304  0BD1  2BE2               	goto	l5355
 10305  0BD2  30FF               	movlw	255
 10306  0BD3  06AB               	xorwf	___ftadd@f2^(0+128),f
 10307  0BD4  30FF               	movlw	255
 10308  0BD5  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10309  0BD6  30FF               	movlw	255
 10310  0BD7  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10311  0BD8  3001               	movlw	1
 10312  0BD9  07AB               	addwf	___ftadd@f2^(0+128),f
 10313  0BDA  3000               	movlw	0
 10314  0BDB  1803               	skipnc
 10315  0BDC  3001               	movlw	1
 10316  0BDD  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10317  0BDE  3000               	movlw	0
 10318  0BDF  1803               	skipnc
 10319  0BE0  3001               	movlw	1
 10320  0BE1  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10321  0BE2                     l5355:	
 10322  0BE2  01B2               	clrf	___ftadd@sign^(0+128)
 10323  0BE3  0828               	movf	___ftadd@f1^(0+128),w
 10324  0BE4  07AB               	addwf	___ftadd@f2^(0+128),f
 10325  0BE5  0829               	movf	(___ftadd@f1+1)^(0+128),w
 10326  0BE6  3DAC               	addwfc	(___ftadd@f2+1)^(0+128),f
 10327  0BE7  082A               	movf	(___ftadd@f1+2)^(0+128),w
 10328  0BE8  3DAD               	addwfc	(___ftadd@f2+2)^(0+128),f
 10329  0BE9  1FAD               	btfss	(___ftadd@f2+2)^(0+128),7
 10330  0BEA  2BFD               	goto	l5365
 10331  0BEB  30FF               	movlw	255
 10332  0BEC  06AB               	xorwf	___ftadd@f2^(0+128),f
 10333  0BED  30FF               	movlw	255
 10334  0BEE  06AC               	xorwf	(___ftadd@f2+1)^(0+128),f
 10335  0BEF  30FF               	movlw	255
 10336  0BF0  06AD               	xorwf	(___ftadd@f2+2)^(0+128),f
 10337  0BF1  3001               	movlw	1
 10338  0BF2  07AB               	addwf	___ftadd@f2^(0+128),f
 10339  0BF3  3000               	movlw	0
 10340  0BF4  1803               	skipnc
 10341  0BF5  3001               	movlw	1
 10342  0BF6  07AC               	addwf	(___ftadd@f2+1)^(0+128),f
 10343  0BF7  3000               	movlw	0
 10344  0BF8  1803               	skipnc
 10345  0BF9  3001               	movlw	1
 10346  0BFA  07AD               	addwf	(___ftadd@f2+2)^(0+128),f
 10347  0BFB  01B2               	clrf	___ftadd@sign^(0+128)
 10348  0BFC  0AB2               	incf	___ftadd@sign^(0+128),f
 10349  0BFD                     l5365:	
 10350  0BFD  082B               	movf	___ftadd@f2^(0+128),w
 10351  0BFE  00A0               	movwf	___ftpack@arg^(0+128)
 10352  0BFF  082C               	movf	(___ftadd@f2+1)^(0+128),w
 10353  0C00  00A1               	movwf	(___ftpack@arg+1)^(0+128)
 10354  0C01  082D               	movf	(___ftadd@f2+2)^(0+128),w
 10355  0C02  00A2               	movwf	(___ftpack@arg+2)^(0+128)
 10356  0C03  0834               	movf	___ftadd@exp1^(0+128),w
 10357  0C04  00AE               	movwf	??___ftadd^(0+128)
 10358  0C05  082E               	movf	??___ftadd^(0+128),w
 10359  0C06  00A3               	movwf	___ftpack@exp^(0+128)
 10360  0C07  0832               	movf	___ftadd@sign^(0+128),w
 10361  0C08  00AF               	movwf	(??___ftadd+1)^(0+128)
 10362  0C09  082F               	movf	(??___ftadd+1)^(0+128),w
 10363  0C0A  00A4               	movwf	___ftpack@sign^(0+128)
 10364  0C0B  3187  2795         	fcall	___ftpack
 10365  0C0D  0021               	movlb	1	; select bank1
 10366  0C0E  0820               	movf	?___ftpack^(0+128),w
 10367  0C0F  00A8               	movwf	?___ftadd^(0+128)
 10368  0C10  0821               	movf	(?___ftpack+1)^(0+128),w
 10369  0C11  00A9               	movwf	(?___ftadd+1)^(0+128)
 10370  0C12  0822               	movf	(?___ftpack+2)^(0+128),w
 10371  0C13  00AA               	movwf	(?___ftadd+2)^(0+128)
 10372  0C14  0008               	return
 10373  0C15                     __end_of___ftadd:	
 10374                           
 10375                           	psect	text26
 10376  0795                     __ptext26:	
 10377 ;; *************** function ___ftpack *****************
 10378 ;; Defined at:
 10379 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\float.c"
 10380 ;; Parameters:    Size  Location     Type
 10381 ;;  arg             3    0[BANK1 ] unsigned um
 10382 ;;  exp             1    3[BANK1 ] unsigned char 
 10383 ;;  sign            1    4[BANK1 ] unsigned char 
 10384 ;; Auto vars:     Size  Location     Type
 10385 ;;		None
 10386 ;; Return value:  Size  Location     Type
 10387 ;;                  3    0[BANK1 ] float 
 10388 ;; Registers used:
 10389 ;;		wreg, status,2, status,0
 10390 ;; Tracked objects:
 10391 ;;		On entry : 0/0
 10392 ;;		On exit  : 0/0
 10393 ;;		Unchanged: 0/0
 10394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10395 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10397 ;;      Temps:          0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10398 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10399 ;;Total ram usage:        8 bytes
 10400 ;; Hardware stack levels used:    1
 10401 ;; Hardware stack levels required when called:    3
 10402 ;; This function calls:
 10403 ;;		Nothing
 10404 ;; This function is called by:
 10405 ;;		___altoft
 10406 ;;		___awtoft
 10407 ;;		___ftadd
 10408 ;;		___ftdiv
 10409 ;;		___ftmul
 10410 ;; This function uses a non-reentrant model
 10411 ;;
 10412                           
 10413                           
 10414                           ;psect for function ___ftpack
 10415  0795                     ___ftpack:	
 10416                           
 10417                           ;incstack = 0
 10418                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10419  0795  0021               	movlb	1	; select bank1
 10420  0796  0823               	movf	___ftpack@exp^(0+128),w
 10421  0797  1903               	btfsc	3,2
 10422  0798  2F9E               	goto	l5049
 10423  0799  0822               	movf	(___ftpack@arg+2)^(0+128),w
 10424  079A  0421               	iorwf	(___ftpack@arg+1)^(0+128),w
 10425  079B  0420               	iorwf	___ftpack@arg^(0+128),w
 10426  079C  1D03               	skipz
 10427  079D  2FAF               	goto	l5055
 10428  079E                     l5049:	
 10429  079E  3000               	movlw	0
 10430  079F  00A0               	movwf	?___ftpack^(0+128)
 10431  07A0  3000               	movlw	0
 10432  07A1  00A1               	movwf	(?___ftpack+1)^(0+128)
 10433  07A2  3000               	movlw	0
 10434  07A3  00A2               	movwf	(?___ftpack+2)^(0+128)
 10435  07A4  0008               	return
 10436  07A5                     l5053:	
 10437  07A5  3001               	movlw	1
 10438  07A6  00A5               	movwf	??___ftpack^(0+128)
 10439  07A7  0825               	movf	??___ftpack^(0+128),w
 10440  07A8  07A3               	addwf	___ftpack@exp^(0+128),f
 10441  07A9  3001               	movlw	1
 10442  07AA                     u5125:	
 10443  07AA  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10444  07AB  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10445  07AC  0CA0               	rrf	___ftpack@arg^(0+128),f
 10446  07AD  0B89               	decfsz	9,f
 10447  07AE  2FAA               	goto	u5125
 10448  07AF                     l5055:	
 10449  07AF  30FE               	movlw	254
 10450  07B0  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10451  07B1  1903               	btfsc	3,2
 10452  07B2  2FC8               	goto	l1479
 10453  07B3  2FA5               	goto	l5053
 10454  07B4                     l5057:	
 10455  07B4  3001               	movlw	1
 10456  07B5  00A5               	movwf	??___ftpack^(0+128)
 10457  07B6  0825               	movf	??___ftpack^(0+128),w
 10458  07B7  07A3               	addwf	___ftpack@exp^(0+128),f
 10459  07B8  3001               	movlw	1
 10460  07B9  07A0               	addwf	___ftpack@arg^(0+128),f
 10461  07BA  3000               	movlw	0
 10462  07BB  1803               	skipnc
 10463  07BC  3001               	movlw	1
 10464  07BD  07A1               	addwf	(___ftpack@arg+1)^(0+128),f
 10465  07BE  3000               	movlw	0
 10466  07BF  1803               	skipnc
 10467  07C0  3001               	movlw	1
 10468  07C1  07A2               	addwf	(___ftpack@arg+2)^(0+128),f
 10469  07C2  3001               	movlw	1
 10470  07C3                     u5145:	
 10471  07C3  36A2               	lsrf	(___ftpack@arg+2)^(0+128),f
 10472  07C4  0CA1               	rrf	(___ftpack@arg+1)^(0+128),f
 10473  07C5  0CA0               	rrf	___ftpack@arg^(0+128),f
 10474  07C6  0B89               	decfsz	9,f
 10475  07C7  2FC3               	goto	u5145
 10476  07C8                     l1479:	
 10477  07C8  30FF               	movlw	255
 10478  07C9  0522               	andwf	(___ftpack@arg+2)^(0+128),w
 10479  07CA  1903               	btfsc	3,2
 10480  07CB  2FD5               	goto	l5065
 10481  07CC  2FB4               	goto	l5057
 10482  07CD                     l5063:	
 10483  07CD  3001               	movlw	1
 10484  07CE  02A3               	subwf	___ftpack@exp^(0+128),f
 10485  07CF  3001               	movlw	1
 10486  07D0                     u5165:	
 10487  07D0  35A0               	lslf	___ftpack@arg^(0+128),f
 10488  07D1  0DA1               	rlf	(___ftpack@arg+1)^(0+128),f
 10489  07D2  0DA2               	rlf	(___ftpack@arg+2)^(0+128),f
 10490  07D3  0B89               	decfsz	9,f
 10491  07D4  2FD0               	goto	u5165
 10492  07D5                     l5065:	
 10493  07D5  1BA1               	btfsc	(___ftpack@arg+1)^(0+128),7
 10494  07D6  2FDB               	goto	l1486
 10495  07D7  3002               	movlw	2
 10496  07D8  0223               	subwf	___ftpack@exp^(0+128),w
 10497  07D9  1803               	skipnc
 10498  07DA  2FCD               	goto	l5063
 10499  07DB                     l1486:	
 10500  07DB  1823               	btfsc	___ftpack@exp^(0+128),0
 10501  07DC  2FE3               	goto	l1487
 10502  07DD  30FF               	movlw	255
 10503  07DE  05A0               	andwf	___ftpack@arg^(0+128),f
 10504  07DF  307F               	movlw	127
 10505  07E0  05A1               	andwf	(___ftpack@arg+1)^(0+128),f
 10506  07E1  30FF               	movlw	255
 10507  07E2  05A2               	andwf	(___ftpack@arg+2)^(0+128),f
 10508  07E3                     l1487:	
 10509  07E3  1003               	clrc
 10510  07E4  0CA3               	rrf	___ftpack@exp^(0+128),f
 10511  07E5  0823               	movf	___ftpack@exp^(0+128),w
 10512  07E6  00A5               	movwf	??___ftpack^(0+128)
 10513  07E7  01A6               	clrf	(??___ftpack^(0+128)+1)
 10514  07E8  01A7               	clrf	(??___ftpack^(0+128)+2)
 10515  07E9  3010               	movlw	16
 10516  07EA                     u5205:	
 10517  07EA  35A5               	lslf	??___ftpack^(0+128),f
 10518  07EB  0DA6               	rlf	(??___ftpack^(0+128)+1),f
 10519  07EC  0DA7               	rlf	(??___ftpack^(0+128)+2),f
 10520  07ED  0B89               	decfsz	9,f
 10521  07EE  2FEA               	goto	u5205
 10522  07EF  0825               	movf	??___ftpack^(0+128),w
 10523  07F0  04A0               	iorwf	___ftpack@arg^(0+128),f
 10524  07F1  0826               	movf	(??___ftpack+1)^(0+128),w
 10525  07F2  04A1               	iorwf	(___ftpack@arg+1)^(0+128),f
 10526  07F3  0827               	movf	(??___ftpack+2)^(0+128),w
 10527  07F4  04A2               	iorwf	(___ftpack@arg+2)^(0+128),f
 10528  07F5  0824               	movf	___ftpack@sign^(0+128),w
 10529  07F6  1903               	btfsc	3,2
 10530  07F7  0008               	return
 10531  07F8  17A2               	bsf	(___ftpack@arg^(0+128)+2),7
 10532  07F9  0008               	return
 10533  07FA                     __end_of___ftpack:	
 10534                           
 10535                           	psect	text27
 10536  0802                     __ptext27:	
 10537 ;; *************** function _initSwitchBypass *****************
 10538 ;; Defined at:
 10539 ;;		line 29 in file "SwitchBypass.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;		None
 10542 ;; Auto vars:     Size  Location     Type
 10543 ;;  initState       2   22[BANK1 ] int 
 10544 ;; Return value:  Size  Location     Type
 10545 ;;                  1    wreg      void 
 10546 ;; Registers used:
 10547 ;;		wreg, status,2, status,0, pclath, cstack
 10548 ;; Tracked objects:
 10549 ;;		On entry : 0/0
 10550 ;;		On exit  : 0/0
 10551 ;;		Unchanged: 0/0
 10552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10554 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10556 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10557 ;;Total ram usage:        2 bytes
 10558 ;; Hardware stack levels used:    1
 10559 ;; Hardware stack levels required when called:    6
 10560 ;; This function calls:
 10561 ;;		_getSwitchBypassState
 10562 ;;		_setSwitchBypassState
 10563 ;; This function is called by:
 10564 ;;		_main
 10565 ;; This function uses a non-reentrant model
 10566 ;;
 10567                           
 10568                           
 10569                           ;psect for function _initSwitchBypass
 10570  0802                     _initSwitchBypass:	
 10571                           
 10572                           ;SwitchBypass.c: 30: int initState = getSwitchBypassState();
 10573                           
 10574                           ;incstack = 0
 10575                           ; Regs used in _initSwitchBypass: [wreg+status,2+status,0+pclath+cstack]
 10576  0802  3187  27FA  3188   	fcall	_getSwitchBypassState
 10577  0805  0021               	movlb	1	; select bank1
 10578  0806  0821               	movf	(?_getSwitchBypassState+1)^(0+128),w
 10579  0807  00B7               	movwf	(initSwitchBypass@initState+1)^(0+128)
 10580  0808  0820               	movf	?_getSwitchBypassState^(0+128),w
 10581  0809  00B6               	movwf	initSwitchBypass@initState^(0+128)
 10582                           
 10583                           ;SwitchBypass.c: 31: setSwitchBypassState(initState);
 10584  080A  0837               	movf	(initSwitchBypass@initState+1)^(0+128),w
 10585  080B  00B3               	movwf	(setSwitchBypassState@f_state+1)^(0+128)
 10586  080C  0836               	movf	initSwitchBypass@initState^(0+128),w
 10587  080D  00B2               	movwf	setSwitchBypassState@f_state^(0+128)
 10588  080E  3193  2311         	fcall	_setSwitchBypassState
 10589  0810  0008               	return
 10590  0811                     __end_of_initSwitchBypass:	
 10591                           
 10592                           	psect	text28
 10593  1311                     __ptext28:	
 10594 ;; *************** function _setSwitchBypassState *****************
 10595 ;; Defined at:
 10596 ;;		line 134 in file "SwitchBypass.c"
 10597 ;; Parameters:    Size  Location     Type
 10598 ;;  f_state         2   18[BANK1 ] int 
 10599 ;; Auto vars:     Size  Location     Type
 10600 ;;		None
 10601 ;; Return value:  Size  Location     Type
 10602 ;;                  1    wreg      void 
 10603 ;; Registers used:
 10604 ;;		wreg, status,2, status,0, pclath, cstack
 10605 ;; Tracked objects:
 10606 ;;		On entry : 0/0
 10607 ;;		On exit  : 0/0
 10608 ;;		Unchanged: 0/0
 10609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10610 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10612 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10613 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10614 ;;Total ram usage:        4 bytes
 10615 ;; Hardware stack levels used:    1
 10616 ;; Hardware stack levels required when called:    5
 10617 ;; This function calls:
 10618 ;;		_updateSwitchBypassState
 10619 ;;		_wait_ms
 10620 ;; This function is called by:
 10621 ;;		_initSwitchBypass
 10622 ;;		_updateSwitchBypass
 10623 ;; This function uses a non-reentrant model
 10624 ;;
 10625                           
 10626                           
 10627                           ;psect for function _setSwitchBypassState
 10628  1311                     _setSwitchBypassState:	
 10629                           
 10630                           ;SwitchBypass.c: 135: if (switchBypass_state == f_state) {return;}
 10631                           
 10632                           ;incstack = 0
 10633                           ; Regs used in _setSwitchBypassState: [wreg+status,2+status,0+pclath+cstack]
 10634  1311  0020               	movlb	0	; select bank0
 10635  1312  0869               	movf	_switchBypass_state,w
 10636  1313  0021               	movlb	1	; select bank1
 10637  1314  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10638  1315  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10639  1316  0833               	movf	(setSwitchBypassState@f_state+1)^(0+128),w
 10640  1317  0635               	xorwf	(??_setSwitchBypassState+1)^(0+128),w
 10641  1318  1D03               	skipz
 10642  1319  2B1C               	goto	u5275
 10643  131A  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10644  131B  0634               	xorwf	??_setSwitchBypassState^(0+128),w
 10645  131C                     u5275:	
 10646  131C  1903               	btfsc	3,2
 10647  131D  0008               	return
 10648                           
 10649                           ;SwitchBypass.c: 136: switchBypass_state = f_state;
 10650  131E  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10651  131F  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10652  1320  0834               	movf	??_setSwitchBypassState^(0+128),w
 10653  1321  0020               	movlb	0	; select bank0
 10654  1322  00E9               	movwf	_switchBypass_state
 10655                           
 10656                           ;SwitchBypass.c: 137: LATBbits.LATB2 = f_state;
 10657  1323  0021               	movlb	1	; select bank1
 10658  1324  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10659  1325  0022               	movlb	2	; select bank2
 10660  1326  1C03               	skipc
 10661  1327  110D               	bcf	13,2	;volatile
 10662  1328  1803               	skipnc
 10663  1329  150D               	bsf	13,2	;volatile
 10664                           
 10665                           ;SwitchBypass.c: 138: LATBbits.LATB3 = 0;
 10666  132A  118D               	bcf	13,3	;volatile
 10667                           
 10668                           ;SwitchBypass.c: 139: LATGbits.LATG2 = f_state;
 10669  132B  0021               	movlb	1	; select bank1
 10670  132C  0C32               	rrf	setSwitchBypassState@f_state^(0+128),w
 10671  132D  0027               	movlb	7	; select bank7
 10672  132E  1C03               	skipc
 10673  132F  110D               	bcf	13,2	;volatile
 10674  1330  1803               	skipnc
 10675  1331  150D               	bsf	13,2	;volatile
 10676                           
 10677                           ;SwitchBypass.c: 140: LATGbits.LATG1 = !f_state;
 10678  1332  0021               	movlb	1	; select bank1
 10679  1333  0832               	movf	setSwitchBypassState@f_state^(0+128),w
 10680  1334  0433               	iorwf	(setSwitchBypassState@f_state+1)^(0+128),w
 10681  1335  1D03               	btfss	3,2
 10682  1336  2B3A               	goto	u5280
 10683  1337  0027               	movlb	7	; select bank7
 10684  1338  148D               	bsf	13,1	;volatile
 10685  1339  2B3C               	goto	l5191
 10686  133A                     u5280:	
 10687  133A  0027               	movlb	7	; select bank7
 10688  133B  108D               	bcf	13,1	;volatile
 10689  133C                     l5191:	
 10690                           
 10691                           ;SwitchBypass.c: 142: wait_ms(20);
 10692  133C  3014               	movlw	20
 10693  133D  0021               	movlb	1	; select bank1
 10694  133E  00AC               	movwf	wait_ms@timeSec^(0+128)
 10695  133F  3000               	movlw	0
 10696  1340  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10697  1341  3190  2021  3193   	fcall	_wait_ms
 10698                           
 10699                           ;SwitchBypass.c: 144: LATGbits.LATG2 = 0;
 10700  1344  0027               	movlb	7	; select bank7
 10701  1345  110D               	bcf	13,2	;volatile
 10702                           
 10703                           ;SwitchBypass.c: 145: LATGbits.LATG1 = 0;
 10704  1346  108D               	bcf	13,1	;volatile
 10705                           
 10706                           ;SwitchBypass.c: 147: updateSwitchBypassState(switchBypass_state);
 10707  1347  0020               	movlb	0	; select bank0
 10708  1348  0869               	movf	_switchBypass_state,w
 10709  1349  0021               	movlb	1	; select bank1
 10710  134A  00B4               	movwf	??_setSwitchBypassState^(0+128)
 10711  134B  01B5               	clrf	(??_setSwitchBypassState^(0+128)+1)
 10712  134C  0834               	movf	??_setSwitchBypassState^(0+128),w
 10713  134D  00A0               	movwf	updateSwitchBypassState@state^(0+128)
 10714  134E  0835               	movf	(??_setSwitchBypassState+1)^(0+128),w
 10715  134F  00A1               	movwf	(updateSwitchBypassState@state+1)^(0+128)
 10716  1350  3187  27FF  3193   	fcall	_updateSwitchBypassState
 10717                           
 10718                           ;SwitchBypass.c: 148: wait_ms(20);
 10719  1353  3014               	movlw	20
 10720  1354  0021               	movlb	1	; select bank1
 10721  1355  00AC               	movwf	wait_ms@timeSec^(0+128)
 10722  1356  3000               	movlw	0
 10723  1357  00AD               	movwf	(wait_ms@timeSec^(0+128)+1)
 10724  1358  3190  2021         	fcall	_wait_ms
 10725  135A  0008               	return
 10726  135B                     __end_of_setSwitchBypassState:	
 10727                           
 10728                           	psect	text29
 10729  1021                     __ptext29:	
 10730 ;; *************** function _wait_ms *****************
 10731 ;; Defined at:
 10732 ;;		line 23 in file "system.c"
 10733 ;; Parameters:    Size  Location     Type
 10734 ;;  timeSec         2   12[BANK1 ] unsigned int 
 10735 ;; Auto vars:     Size  Location     Type
 10736 ;;  timemsl         4   14[BANK1 ] long 
 10737 ;; Return value:  Size  Location     Type
 10738 ;;                  1    wreg      void 
 10739 ;; Registers used:
 10740 ;;		wreg, status,2, status,0, pclath, cstack
 10741 ;; Tracked objects:
 10742 ;;		On entry : 0/0
 10743 ;;		On exit  : 0/0
 10744 ;;		Unchanged: 0/0
 10745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10746 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10747 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10749 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10750 ;;Total ram usage:        6 bytes
 10751 ;; Hardware stack levels used:    1
 10752 ;; Hardware stack levels required when called:    4
 10753 ;; This function calls:
 10754 ;;		___lmul
 10755 ;; This function is called by:
 10756 ;;		_star_tactiles
 10757 ;;		_solidring_tactiles
 10758 ;;		_read_bottom_tactile
 10759 ;;		_read_top_tactile
 10760 ;;		_setSwitchBypassState
 10761 ;;		_setDoublePressState
 10762 ;;		_showError_Alternating
 10763 ;;		_show_error
 10764 ;;		_show_cancel
 10765 ;;		_ring_tactiles
 10766 ;; This function uses a non-reentrant model
 10767 ;;
 10768                           
 10769                           
 10770                           ;psect for function _wait_ms
 10771  1021                     _wait_ms:	
 10772                           
 10773                           ;system.c: 25: long timemsl = 0;
 10774                           
 10775                           ;incstack = 0
 10776                           ; Regs used in _wait_ms: [wreg+status,2+status,0+pclath+cstack]
 10777  1021  3000               	movlw	0
 10778  1022  0021               	movlb	1	; select bank1
 10779  1023  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10780  1024  3000               	movlw	0
 10781  1025  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10782  1026  3000               	movlw	0
 10783  1027  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10784  1028  3000               	movlw	0
 10785  1029  00AE               	movwf	wait_ms@timemsl^(0+128)
 10786                           
 10787                           ;system.c: 26: timemsl = timeSec * 1000l;
 10788  102A  082C               	movf	wait_ms@timeSec^(0+128),w
 10789  102B  00A0               	movwf	___lmul@multiplier^(0+128)
 10790  102C  082D               	movf	(wait_ms@timeSec+1)^(0+128),w
 10791  102D  00A1               	movwf	(___lmul@multiplier^(0+128)+1)
 10792  102E  01A2               	clrf	(___lmul@multiplier^(0+128)+2)
 10793  102F  01A3               	clrf	(___lmul@multiplier^(0+128)+3)
 10794  1030  3000               	movlw	0
 10795  1031  00A7               	movwf	(___lmul@multiplicand+3)^(0+128)
 10796  1032  3000               	movlw	0
 10797  1033  00A6               	movwf	(___lmul@multiplicand+2)^(0+128)
 10798  1034  3003               	movlw	3
 10799  1035  00A5               	movwf	(___lmul@multiplicand+1)^(0+128)
 10800  1036  30E8               	movlw	232
 10801  1037  00A4               	movwf	___lmul@multiplicand^(0+128)
 10802  1038  319F  27A0  3190   	fcall	___lmul
 10803  103B  0021               	movlb	1	; select bank1
 10804  103C  0823               	movf	(?___lmul+3)^(0+128),w
 10805  103D  00B1               	movwf	(wait_ms@timemsl+3)^(0+128)
 10806  103E  0822               	movf	(?___lmul+2)^(0+128),w
 10807  103F  00B0               	movwf	(wait_ms@timemsl+2)^(0+128)
 10808  1040  0821               	movf	(?___lmul+1)^(0+128),w
 10809  1041  00AF               	movwf	(wait_ms@timemsl+1)^(0+128)
 10810  1042  0820               	movf	?___lmul^(0+128),w
 10811  1043  00AE               	movwf	wait_ms@timemsl^(0+128)
 10812  1044                     l346:	
 10813                           ;system.c: 27: for( ; timemsl; timemsl--);
 10814                           
 10815  1044  0831               	movf	(wait_ms@timemsl+3)^(0+128),w
 10816  1045  0430               	iorwf	(wait_ms@timemsl+2)^(0+128),w
 10817  1046  042F               	iorwf	(wait_ms@timemsl+1)^(0+128),w
 10818  1047  042E               	iorwf	wait_ms@timemsl^(0+128),w
 10819  1048  1903               	btfsc	3,2
 10820  1049  0008               	return
 10821  104A  30FF               	movlw	255
 10822  104B  07AE               	addwf	wait_ms@timemsl^(0+128),f
 10823  104C  30FF               	movlw	255
 10824  104D  3DAF               	addwfc	(wait_ms@timemsl+1)^(0+128),f
 10825  104E  30FF               	movlw	255
 10826  104F  3DB0               	addwfc	(wait_ms@timemsl+2)^(0+128),f
 10827  1050  30FF               	movlw	255
 10828  1051  3DB1               	addwfc	(wait_ms@timemsl+3)^(0+128),f
 10829  1052  2844               	goto	l346
 10830  1053                     __end_of_wait_ms:	
 10831                           
 10832                           	psect	text30
 10833  1FA0                     __ptext30:	
 10834 ;; *************** function ___lmul *****************
 10835 ;; Defined at:
 10836 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  multiplier      4    0[BANK1 ] unsigned long 
 10839 ;;  multiplicand    4    4[BANK1 ] unsigned long 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  product         4    8[BANK1 ] unsigned long 
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  4    0[BANK1 ] unsigned long 
 10844 ;; Registers used:
 10845 ;;		wreg, status,2, status,0
 10846 ;; Tracked objects:
 10847 ;;		On entry : 0/0
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10851 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10852 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10854 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10855 ;;Total ram usage:       12 bytes
 10856 ;; Hardware stack levels used:    1
 10857 ;; Hardware stack levels required when called:    3
 10858 ;; This function calls:
 10859 ;;		Nothing
 10860 ;; This function is called by:
 10861 ;;		_wait_ms
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           
 10866                           ;psect for function ___lmul
 10867  1FA0                     ___lmul:	
 10868                           
 10869                           ;incstack = 0
 10870                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 10871  1FA0  3000               	movlw	0
 10872  1FA1  0021               	movlb	1	; select bank1
 10873  1FA2  00AB               	movwf	(___lmul@product+3)^(0+128)
 10874  1FA3  3000               	movlw	0
 10875  1FA4  00AA               	movwf	(___lmul@product+2)^(0+128)
 10876  1FA5  3000               	movlw	0
 10877  1FA6  00A9               	movwf	(___lmul@product+1)^(0+128)
 10878  1FA7  3000               	movlw	0
 10879  1FA8  00A8               	movwf	___lmul@product^(0+128)
 10880  1FA9                     l4989:	
 10881  1FA9  1C20               	btfss	___lmul@multiplier^(0+128),0
 10882  1FAA  2FB3               	goto	l4993
 10883  1FAB  0824               	movf	___lmul@multiplicand^(0+128),w
 10884  1FAC  07A8               	addwf	___lmul@product^(0+128),f
 10885  1FAD  0825               	movf	(___lmul@multiplicand+1)^(0+128),w
 10886  1FAE  3DA9               	addwfc	(___lmul@product+1)^(0+128),f
 10887  1FAF  0826               	movf	(___lmul@multiplicand+2)^(0+128),w
 10888  1FB0  3DAA               	addwfc	(___lmul@product+2)^(0+128),f
 10889  1FB1  0827               	movf	(___lmul@multiplicand+3)^(0+128),w
 10890  1FB2  3DAB               	addwfc	(___lmul@product+3)^(0+128),f
 10891  1FB3                     l4993:	
 10892  1FB3  3001               	movlw	1
 10893  1FB4                     u5065:	
 10894  1FB4  35A4               	lslf	___lmul@multiplicand^(0+128),f
 10895  1FB5  0DA5               	rlf	(___lmul@multiplicand+1)^(0+128),f
 10896  1FB6  0DA6               	rlf	(___lmul@multiplicand+2)^(0+128),f
 10897  1FB7  0DA7               	rlf	(___lmul@multiplicand+3)^(0+128),f
 10898  1FB8  0B89               	decfsz	9,f
 10899  1FB9  2FB4               	goto	u5065
 10900  1FBA  3001               	movlw	1
 10901  1FBB                     u5075:	
 10902  1FBB  36A3               	lsrf	(___lmul@multiplier+3)^(0+128),f
 10903  1FBC  0CA2               	rrf	(___lmul@multiplier+2)^(0+128),f
 10904  1FBD  0CA1               	rrf	(___lmul@multiplier+1)^(0+128),f
 10905  1FBE  0CA0               	rrf	___lmul@multiplier^(0+128),f
 10906  1FBF  0B89               	decfsz	9,f
 10907  1FC0  2FBB               	goto	u5075
 10908  1FC1  0823               	movf	(___lmul@multiplier+3)^(0+128),w
 10909  1FC2  0422               	iorwf	(___lmul@multiplier+2)^(0+128),w
 10910  1FC3  0421               	iorwf	(___lmul@multiplier+1)^(0+128),w
 10911  1FC4  0420               	iorwf	___lmul@multiplier^(0+128),w
 10912  1FC5  1D03               	skipz
 10913  1FC6  2FA9               	goto	l4989
 10914  1FC7  082B               	movf	(___lmul@product+3)^(0+128),w
 10915  1FC8  00A3               	movwf	(?___lmul+3)^(0+128)
 10916  1FC9  082A               	movf	(___lmul@product+2)^(0+128),w
 10917  1FCA  00A2               	movwf	(?___lmul+2)^(0+128)
 10918  1FCB  0829               	movf	(___lmul@product+1)^(0+128),w
 10919  1FCC  00A1               	movwf	(?___lmul+1)^(0+128)
 10920  1FCD  0828               	movf	___lmul@product^(0+128),w
 10921  1FCE  00A0               	movwf	?___lmul^(0+128)
 10922  1FCF  0008               	return
 10923  1FD0                     __end_of___lmul:	
 10924                           
 10925                           	psect	text31
 10926  07FF                     __ptext31:	
 10927 ;; *************** function _updateSwitchBypassState *****************
 10928 ;; Defined at:
 10929 ;;		line 96 in file "state_manager.c"
 10930 ;; Parameters:    Size  Location     Type
 10931 ;;  state           2    0[BANK1 ] int 
 10932 ;; Auto vars:     Size  Location     Type
 10933 ;;		None
 10934 ;; Return value:  Size  Location     Type
 10935 ;;                  1    wreg      void 
 10936 ;; Registers used:
 10937 ;;		None
 10938 ;; Tracked objects:
 10939 ;;		On entry : 0/0
 10940 ;;		On exit  : 0/0
 10941 ;;		Unchanged: 0/0
 10942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10943 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10946 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10947 ;;Total ram usage:        2 bytes
 10948 ;; Hardware stack levels used:    1
 10949 ;; Hardware stack levels required when called:    3
 10950 ;; This function calls:
 10951 ;;		Nothing
 10952 ;; This function is called by:
 10953 ;;		_setSwitchBypassState
 10954 ;; This function uses a non-reentrant model
 10955 ;;
 10956                           
 10957                           
 10958                           ;psect for function _updateSwitchBypassState
 10959  07FF                     _updateSwitchBypassState:	
 10960                           
 10961                           ;incstack = 0
 10962                           ; Regs used in _updateSwitchBypassState: []
 10963  07FF  0008               	return
 10964  0800                     __end_of_updateSwitchBypassState:	
 10965                           
 10966                           	psect	text32
 10967  07FA                     __ptext32:	
 10968 ;; *************** function _getSwitchBypassState *****************
 10969 ;; Defined at:
 10970 ;;		line 103 in file "state_manager.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;		None
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;		None
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  2    0[BANK1 ] int 
 10977 ;; Registers used:
 10978 ;;		status,2
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 10984 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10987 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 10988 ;;Total ram usage:        2 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    3
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_initSwitchBypass
 10995 ;; This function uses a non-reentrant model
 10996 ;;
 10997                           
 10998                           
 10999                           ;psect for function _getSwitchBypassState
 11000  07FA                     _getSwitchBypassState:	
 11001                           
 11002                           ;state_manager.c: 108: return 0;
 11003                           
 11004                           ;incstack = 0
 11005                           ; Regs used in _getSwitchBypassState: [status,2]
 11006  07FA  0021               	movlb	1	; select bank1
 11007  07FB  01A0               	clrf	?_getSwitchBypassState^(0+128)
 11008  07FC  01A1               	clrf	(?_getSwitchBypassState+1)^(0+128)
 11009  07FD  0008               	return
 11010  07FE                     __end_of_getSwitchBypassState:	
 11011                           
 11012                           	psect	text33
 11013  1E29                     __ptext33:	
 11014 ;; *************** function _adc_convert *****************
 11015 ;; Defined at:
 11016 ;;		line 116 in file "user.c"
 11017 ;; Parameters:    Size  Location     Type
 11018 ;;  channel         1    wreg     unsigned char 
 11019 ;; Auto vars:     Size  Location     Type
 11020 ;;  channel         1    3[BANK1 ] unsigned char 
 11021 ;; Return value:  Size  Location     Type
 11022 ;;                  2    0[BANK1 ] unsigned int 
 11023 ;; Registers used:
 11024 ;;		wreg, status,2, status,0
 11025 ;; Tracked objects:
 11026 ;;		On entry : 0/0
 11027 ;;		On exit  : 0/0
 11028 ;;		Unchanged: 0/0
 11029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11030 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11031 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11032 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11033 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11034 ;;Total ram usage:        4 bytes
 11035 ;; Hardware stack levels used:    1
 11036 ;; Hardware stack levels required when called:    3
 11037 ;; This function calls:
 11038 ;;		Nothing
 11039 ;; This function is called by:
 11040 ;;		_main
 11041 ;; This function uses a non-reentrant model
 11042 ;;
 11043                           
 11044                           
 11045                           ;psect for function _adc_convert
 11046  1E29                     _adc_convert:	
 11047                           
 11048                           ;incstack = 0
 11049                           ; Regs used in _adc_convert: [wreg+status,2+status,0]
 11050                           ;adc_convert@channel stored from wreg
 11051  1E29  0021               	movlb	1	; select bank1
 11052  1E2A  00A3               	movwf	adc_convert@channel^(0+128)
 11053                           
 11054                           ;user.c: 117: ADCON0bits.CHS = channel;
 11055  1E2B  0823               	movf	adc_convert@channel^(0+128),w
 11056  1E2C  00A2               	movwf	??_adc_convert^(0+128)
 11057  1E2D  0DA2               	rlf	??_adc_convert^(0+128),f
 11058  1E2E  0DA2               	rlf	??_adc_convert^(0+128),f
 11059  1E2F  081D               	movf	29,w	;volatile
 11060  1E30  0622               	xorwf	??_adc_convert^(0+128),w
 11061  1E31  3983               	andlw	-125
 11062  1E32  0622               	xorwf	??_adc_convert^(0+128),w
 11063  1E33  009D               	movwf	29	;volatile
 11064                           
 11065                           ;user.c: 118: ADCON0bits.GO = 0b1;
 11066  1E34  149D               	bsf	29,1	;volatile
 11067  1E35                     l528:	
 11068                           ;user.c: 119: while (ADCON0bits.GO_nDONE);
 11069                           
 11070  1E35  189D               	btfsc	29,1	;volatile
 11071  1E36  2E35               	goto	l528
 11072                           
 11073                           ;user.c: 120: return (ADRESH << 8) | ADRESL;
 11074  1E37  081C               	movf	28,w	;volatile
 11075  1E38  00A1               	movwf	(?_adc_convert+1)^(0+128)
 11076  1E39  081B               	movf	27,w	;volatile
 11077  1E3A  00A0               	movwf	?_adc_convert^(0+128)
 11078  1E3B  0008               	return
 11079  1E3C                     __end_of_adc_convert:	
 11080                           
 11081                           	psect	text34
 11082  155C                     __ptext34:	
 11083 ;; *************** function _ReadSavedSettings *****************
 11084 ;; Defined at:
 11085 ;;		line 193 in file "user.c"
 11086 ;; Parameters:    Size  Location     Type
 11087 ;;		None
 11088 ;; Auto vars:     Size  Location     Type
 11089 ;;		None
 11090 ;; Return value:  Size  Location     Type
 11091 ;;                  1    wreg      void 
 11092 ;; Registers used:
 11093 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11094 ;; Tracked objects:
 11095 ;;		On entry : 0/0
 11096 ;;		On exit  : 0/0
 11097 ;;		Unchanged: 0/0
 11098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11101 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11102 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11103 ;;Total ram usage:        1 bytes
 11104 ;; Hardware stack levels used:    1
 11105 ;; Hardware stack levels required when called:    4
 11106 ;; This function calls:
 11107 ;;		_FLASH_ReadWord
 11108 ;;		_set_leds_bottom
 11109 ;;		_set_leds_top
 11110 ;; This function is called by:
 11111 ;;		_main
 11112 ;; This function uses a non-reentrant model
 11113 ;;
 11114                           
 11115                           
 11116                           ;psect for function _ReadSavedSettings
 11117  155C                     _ReadSavedSettings:	
 11118                           
 11119                           ;user.c: 195: top_push_state = FLASH_ReadWord(0x1F81);
 11120                           
 11121                           ;incstack = 0
 11122                           ; Regs used in _ReadSavedSettings: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11123  155C  3081               	movlw	129
 11124  155D  0021               	movlb	1	; select bank1
 11125  155E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11126  155F  301F               	movlw	31
 11127  1560  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11128  1561  3190  2001  3195   	fcall	_FLASH_ReadWord
 11129  1564  0021               	movlb	1	; select bank1
 11130  1565  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11131  1566  0020               	movlb	0	; select bank0
 11132  1567  00E5               	movwf	_top_push_state+1
 11133  1568  0021               	movlb	1	; select bank1
 11134  1569  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11135  156A  0020               	movlb	0	; select bank0
 11136  156B  00E4               	movwf	_top_push_state
 11137                           
 11138                           ;user.c: 196: bottom_push_state = FLASH_ReadWord(0x1F82);
 11139  156C  3082               	movlw	130
 11140  156D  0021               	movlb	1	; select bank1
 11141  156E  00A0               	movwf	FLASH_ReadWord@flashAddr^(0+128)
 11142  156F  301F               	movlw	31
 11143  1570  00A1               	movwf	(FLASH_ReadWord@flashAddr^(0+128)+1)
 11144  1571  3190  2001  3195   	fcall	_FLASH_ReadWord
 11145  1574  0021               	movlb	1	; select bank1
 11146  1575  0821               	movf	(?_FLASH_ReadWord+1)^(0+128),w
 11147  1576  0020               	movlb	0	; select bank0
 11148  1577  00E1               	movwf	_bottom_push_state+1
 11149  1578  0021               	movlb	1	; select bank1
 11150  1579  0820               	movf	?_FLASH_ReadWord^(0+128),w
 11151  157A  0020               	movlb	0	; select bank0
 11152  157B  00E0               	movwf	_bottom_push_state
 11153                           
 11154                           ;user.c: 198: if (top_push_state > 6) {
 11155  157C  0865               	movf	_top_push_state+1,w
 11156  157D  3A80               	xorlw	128
 11157  157E  0021               	movlb	1	; select bank1
 11158  157F  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11159  1580  3080               	movlw	128
 11160  1581  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11161  1582  1D03               	skipz
 11162  1583  2D87               	goto	u6085
 11163  1584  3007               	movlw	7
 11164  1585  0020               	movlb	0	; select bank0
 11165  1586  0264               	subwf	_top_push_state,w
 11166  1587                     u6085:	
 11167  1587  1C03               	skipc
 11168  1588  2D8E               	goto	l557
 11169                           
 11170                           ;user.c: 200: top_push_state = 6;
 11171  1589  3006               	movlw	6
 11172  158A  0020               	movlb	0	; select bank0
 11173  158B  00E4               	movwf	_top_push_state
 11174  158C  3000               	movlw	0
 11175  158D  00E5               	movwf	_top_push_state+1
 11176  158E                     l557:	
 11177                           
 11178                           ;user.c: 201: }
 11179                           ;user.c: 202: if (bottom_push_state > 6) {
 11180  158E  0020               	movlb	0	; select bank0
 11181  158F  0861               	movf	_bottom_push_state+1,w
 11182  1590  3A80               	xorlw	128
 11183  1591  0021               	movlb	1	; select bank1
 11184  1592  00A4               	movwf	??_ReadSavedSettings^(0+128)
 11185  1593  3080               	movlw	128
 11186  1594  0224               	subwf	??_ReadSavedSettings^(0+128),w
 11187  1595  1D03               	skipz
 11188  1596  2D9A               	goto	u6095
 11189  1597  3007               	movlw	7
 11190  1598  0020               	movlb	0	; select bank0
 11191  1599  0260               	subwf	_bottom_push_state,w
 11192  159A                     u6095:	
 11193  159A  1C03               	skipc
 11194  159B  2DA1               	goto	l5581
 11195                           
 11196                           ;user.c: 204: bottom_push_state = 6;
 11197  159C  3006               	movlw	6
 11198  159D  0020               	movlb	0	; select bank0
 11199  159E  00E0               	movwf	_bottom_push_state
 11200  159F  3000               	movlw	0
 11201  15A0  00E1               	movwf	_bottom_push_state+1
 11202  15A1                     l5581:	
 11203                           
 11204                           ;user.c: 205: }
 11205                           ;user.c: 208: LATGbits.LATG1 = !switchBypass_state;
 11206  15A1  0020               	movlb	0	; select bank0
 11207  15A2  0869               	movf	_switchBypass_state,w
 11208  15A3  1D03               	btfss	3,2
 11209  15A4  2DA8               	goto	u6100
 11210  15A5  0027               	movlb	7	; select bank7
 11211  15A6  148D               	bsf	13,1	;volatile
 11212  15A7  2DAA               	goto	l5583
 11213  15A8                     u6100:	
 11214  15A8  0027               	movlb	7	; select bank7
 11215  15A9  108D               	bcf	13,1	;volatile
 11216  15AA                     l5583:	
 11217                           
 11218                           ;user.c: 209: LATGbits.LATG2 = switchBypass_state;
 11219  15AA  0020               	movlb	0	; select bank0
 11220  15AB  0C69               	rrf	_switchBypass_state,w
 11221  15AC  0027               	movlb	7	; select bank7
 11222  15AD  1C03               	skipc
 11223  15AE  110D               	bcf	13,2	;volatile
 11224  15AF  1803               	skipnc
 11225  15B0  150D               	bsf	13,2	;volatile
 11226                           
 11227                           ;user.c: 210: LATBbits.LATB2 = 0;
 11228  15B1  0022               	movlb	2	; select bank2
 11229  15B2  110D               	bcf	13,2	;volatile
 11230                           
 11231                           ;user.c: 211: LATBbits.LATB3 = 0;
 11232  15B3  118D               	bcf	13,3	;volatile
 11233                           
 11234                           ;user.c: 213: LATBbits.LATB4 = 0;
 11235  15B4  120D               	bcf	13,4	;volatile
 11236                           
 11237                           ;user.c: 214: LATBbits.LATB5 = 0;
 11238  15B5  128D               	bcf	13,5	;volatile
 11239                           
 11240                           ;user.c: 216: LATBbits.LATB1 = 0;
 11241  15B6  108D               	bcf	13,1	;volatile
 11242                           
 11243                           ;user.c: 217: LATBbits.LATB0 = 0;
 11244  15B7  100D               	bcf	13,0	;volatile
 11245                           
 11246                           ;user.c: 220: set_leds_top(top_push_state, 1);
 11247  15B8  0020               	movlb	0	; select bank0
 11248  15B9  0865               	movf	_top_push_state+1,w
 11249  15BA  0021               	movlb	1	; select bank1
 11250  15BB  00A1               	movwf	(set_leds_top@x+1)^(0+128)
 11251  15BC  0020               	movlb	0	; select bank0
 11252  15BD  0864               	movf	_top_push_state,w
 11253  15BE  0021               	movlb	1	; select bank1
 11254  15BF  00A0               	movwf	set_leds_top@x^(0+128)
 11255  15C0  3001               	movlw	1
 11256  15C1  00A2               	movwf	set_leds_top@ledState^(0+128)
 11257  15C2  3000               	movlw	0
 11258  15C3  00A3               	movwf	(set_leds_top@ledState^(0+128)+1)
 11259  15C4  3194  2499  3195   	fcall	_set_leds_top
 11260                           
 11261                           ;user.c: 221: set_leds_bottom(bottom_push_state);
 11262  15C7  0020               	movlb	0	; select bank0
 11263  15C8  0861               	movf	_bottom_push_state+1,w
 11264  15C9  0021               	movlb	1	; select bank1
 11265  15CA  00A1               	movwf	(set_leds_bottom@x+1)^(0+128)
 11266  15CB  0020               	movlb	0	; select bank0
 11267  15CC  0860               	movf	_bottom_push_state,w
 11268  15CD  0021               	movlb	1	; select bank1
 11269  15CE  00A0               	movwf	set_leds_bottom@x^(0+128)
 11270  15CF  3190  208D         	fcall	_set_leds_bottom
 11271  15D1  0008               	return
 11272  15D2                     __end_of_ReadSavedSettings:	
 11273                           
 11274                           	psect	text35
 11275  1499                     __ptext35:	
 11276 ;; *************** function _set_leds_top *****************
 11277 ;; Defined at:
 11278 ;;		line 16 in file "LEDs.c"
 11279 ;; Parameters:    Size  Location     Type
 11280 ;;  x               2    0[BANK1 ] int 
 11281 ;;  ledState        2    2[BANK1 ] int 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;		None
 11284 ;; Return value:  Size  Location     Type
 11285 ;;                  1    wreg      void 
 11286 ;; Registers used:
 11287 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11288 ;; Tracked objects:
 11289 ;;		On entry : 0/0
 11290 ;;		On exit  : 0/0
 11291 ;;		Unchanged: 0/0
 11292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11293 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11296 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11297 ;;Total ram usage:        4 bytes
 11298 ;; Hardware stack levels used:    1
 11299 ;; Hardware stack levels required when called:    3
 11300 ;; This function calls:
 11301 ;;		Nothing
 11302 ;; This function is called by:
 11303 ;;		_ReadSavedSettings
 11304 ;;		_star_tactiles
 11305 ;;		_solidring_tactiles
 11306 ;;		_read_top_tactile
 11307 ;;		_ring_tactiles
 11308 ;; This function uses a non-reentrant model
 11309 ;;
 11310                           
 11311                           
 11312                           ;psect for function _set_leds_top
 11313  1499                     _set_leds_top:	
 11314                           
 11315                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 11316                           
 11317                           ;incstack = 0
 11318                           ; Regs used in _set_leds_top: [wreg-fsr0h+status,2+status,0]
 11319  1499  0027               	movlb	7	; select bank7
 11320  149A  100C               	bcf	12,0	;volatile
 11321                           
 11322                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 11323  149B  108C               	bcf	12,1	;volatile
 11324                           
 11325                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 11326  149C  110C               	bcf	12,2	;volatile
 11327                           
 11328                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 11329  149D  118C               	bcf	12,3	;volatile
 11330                           
 11331                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 11332  149E  120C               	bcf	12,4	;volatile
 11333                           
 11334                           ;LEDs.c: 22: switch (x) {
 11335  149F  2CCF               	goto	l5015
 11336  14A0                     l5003:	
 11337                           ;LEDs.c: 23: case 1:
 11338                           
 11339                           
 11340                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 11341  14A0  0021               	movlb	1	; select bank1
 11342  14A1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11343  14A2  0027               	movlb	7	; select bank7
 11344  14A3  1C03               	skipc
 11345  14A4  100C               	bcf	12,0	;volatile
 11346  14A5  1803               	skipnc
 11347  14A6  140C               	bsf	12,0	;volatile
 11348                           
 11349                           ;LEDs.c: 25: break;
 11350  14A7  0008               	return
 11351  14A8                     l5005:	
 11352                           ;LEDs.c: 26: case 2:
 11353                           
 11354                           
 11355                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 11356  14A8  0021               	movlb	1	; select bank1
 11357  14A9  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11358  14AA  0027               	movlb	7	; select bank7
 11359  14AB  1C03               	skipc
 11360  14AC  108C               	bcf	12,1	;volatile
 11361  14AD  1803               	skipnc
 11362  14AE  148C               	bsf	12,1	;volatile
 11363                           
 11364                           ;LEDs.c: 28: break;
 11365  14AF  0008               	return
 11366  14B0                     l5007:	
 11367                           ;LEDs.c: 29: case 3:
 11368                           
 11369                           
 11370                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 11371  14B0  0021               	movlb	1	; select bank1
 11372  14B1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11373  14B2  0027               	movlb	7	; select bank7
 11374  14B3  1C03               	skipc
 11375  14B4  110C               	bcf	12,2	;volatile
 11376  14B5  1803               	skipnc
 11377  14B6  150C               	bsf	12,2	;volatile
 11378                           
 11379                           ;LEDs.c: 31: break;
 11380  14B7  0008               	return
 11381  14B8                     l5009:	
 11382                           ;LEDs.c: 32: case 4:
 11383                           
 11384                           
 11385                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 11386  14B8  0021               	movlb	1	; select bank1
 11387  14B9  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11388  14BA  0027               	movlb	7	; select bank7
 11389  14BB  1C03               	skipc
 11390  14BC  118C               	bcf	12,3	;volatile
 11391  14BD  1803               	skipnc
 11392  14BE  158C               	bsf	12,3	;volatile
 11393                           
 11394                           ;LEDs.c: 34: break;
 11395  14BF  0008               	return
 11396  14C0                     l5011:	
 11397                           ;LEDs.c: 35: case 5:
 11398                           
 11399                           
 11400                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 11401  14C0  0021               	movlb	1	; select bank1
 11402  14C1  0C22               	rrf	set_leds_top@ledState^(0+128),w
 11403  14C2  0027               	movlb	7	; select bank7
 11404  14C3  1C03               	skipc
 11405  14C4  120C               	bcf	12,4	;volatile
 11406  14C5  1803               	skipnc
 11407  14C6  160C               	bsf	12,4	;volatile
 11408                           
 11409                           ;LEDs.c: 39: break;
 11410                           
 11411                           ;LEDs.c: 38: case 6:
 11412                           
 11413                           ;LEDs.c: 37: break;
 11414  14C7  0008               	return
 11415  14C8                     l698:	
 11416                           ;LEDs.c: 40: case 100:
 11417                           
 11418                           
 11419                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 11420  14C8  0027               	movlb	7	; select bank7
 11421  14C9  140C               	bsf	12,0	;volatile
 11422                           
 11423                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 11424  14CA  148C               	bsf	12,1	;volatile
 11425                           
 11426                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 11427  14CB  150C               	bsf	12,2	;volatile
 11428                           
 11429                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 11430  14CC  158C               	bsf	12,3	;volatile
 11431                           
 11432                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 11433  14CD  160C               	bsf	12,4	;volatile
 11434                           
 11435                           ;LEDs.c: 47: }
 11436                           
 11437                           ;LEDs.c: 46: break;
 11438  14CE  0008               	return
 11439  14CF                     l5015:	
 11440                           
 11441                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11442                           ; Switch size 1, requested type "space"
 11443                           ; Number of cases is 1, Range of values is 0 to 0
 11444                           ; switch strategies available:
 11445                           ; Name         Instructions Cycles
 11446                           ; simple_byte            4     3 (average)
 11447                           ; direct_byte            8     6 (fixed)
 11448                           ; jumptable            260     6 (fixed)
 11449                           ;	Chosen strategy is simple_byte
 11450  14CF  0021               	movlb	1	; select bank1
 11451  14D0  0821               	movf	(set_leds_top@x+1)^(0+128),w
 11452  14D1  3A00               	xorlw	0	; case 0
 11453  14D2  1903               	skipnz
 11454  14D3  2CD5               	goto	l6311
 11455  14D4  2CEC               	goto	l699
 11456  14D5                     l6311:	
 11457                           
 11458                           ; Switch size 1, requested type "space"
 11459                           ; Number of cases is 7, Range of values is 1 to 100
 11460                           ; switch strategies available:
 11461                           ; Name         Instructions Cycles
 11462                           ; simple_byte           22    12 (average)
 11463                           ; direct_byte          209     9 (fixed)
 11464                           ; jumptable            263     9 (fixed)
 11465                           ;	Chosen strategy is simple_byte
 11466  14D5  0820               	movf	set_leds_top@x^(0+128),w
 11467  14D6  3A01               	xorlw	1	; case 1
 11468  14D7  1903               	skipnz
 11469  14D8  2CA0               	goto	l5003
 11470  14D9  3A03               	xorlw	3	; case 2
 11471  14DA  1903               	skipnz
 11472  14DB  2CA8               	goto	l5005
 11473  14DC  3A01               	xorlw	1	; case 3
 11474  14DD  1903               	skipnz
 11475  14DE  2CB0               	goto	l5007
 11476  14DF  3A07               	xorlw	7	; case 4
 11477  14E0  1903               	skipnz
 11478  14E1  2CB8               	goto	l5009
 11479  14E2  3A01               	xorlw	1	; case 5
 11480  14E3  1903               	skipnz
 11481  14E4  2CC0               	goto	l5011
 11482  14E5  3A03               	xorlw	3	; case 6
 11483  14E6  1903               	skipnz
 11484  14E7  2CEC               	goto	l699
 11485  14E8  3A62               	xorlw	98	; case 100
 11486  14E9  1903               	skipnz
 11487  14EA  2CC8               	goto	l698
 11488  14EB  2CEC               	goto	l699
 11489  14EC                     l699:	
 11490  14EC  0008               	return
 11491  14ED                     __end_of_set_leds_top:	
 11492                           
 11493                           	psect	text36
 11494  108D                     __ptext36:	
 11495 ;; *************** function _set_leds_bottom *****************
 11496 ;; Defined at:
 11497 ;;		line 51 in file "LEDs.c"
 11498 ;; Parameters:    Size  Location     Type
 11499 ;;  x               2    0[BANK1 ] int 
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;		None
 11502 ;; Return value:  Size  Location     Type
 11503 ;;                  1    wreg      void 
 11504 ;; Registers used:
 11505 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11506 ;; Tracked objects:
 11507 ;;		On entry : 0/0
 11508 ;;		On exit  : 0/0
 11509 ;;		Unchanged: 0/0
 11510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11511 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11514 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11515 ;;Total ram usage:        2 bytes
 11516 ;; Hardware stack levels used:    1
 11517 ;; Hardware stack levels required when called:    3
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_ReadSavedSettings
 11522 ;;		_star_tactiles
 11523 ;;		_solidring_tactiles
 11524 ;;		_read_bottom_tactile
 11525 ;;		_ring_tactiles
 11526 ;; This function uses a non-reentrant model
 11527 ;;
 11528                           
 11529                           
 11530                           ;psect for function _set_leds_bottom
 11531  108D                     _set_leds_bottom:	
 11532                           
 11533                           ;LEDs.c: 52: LATDbits.LATD0 = 0;
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in _set_leds_bottom: [wreg-fsr0h+status,2+status,0]
 11537  108D  0022               	movlb	2	; select bank2
 11538  108E  100F               	bcf	15,0	;volatile
 11539                           
 11540                           ;LEDs.c: 53: LATDbits.LATD1 = 0;
 11541  108F  108F               	bcf	15,1	;volatile
 11542                           
 11543                           ;LEDs.c: 54: LATDbits.LATD2 = 0;
 11544  1090  110F               	bcf	15,2	;volatile
 11545                           
 11546                           ;LEDs.c: 55: LATDbits.LATD3 = 0;
 11547  1091  118F               	bcf	15,3	;volatile
 11548                           
 11549                           ;LEDs.c: 56: LATDbits.LATD4 = 0;
 11550  1092  120F               	bcf	15,4	;volatile
 11551                           
 11552                           ;LEDs.c: 57: switch (x) {
 11553  1093  28AA               	goto	l5039
 11554  1094                     l703:	
 11555                           ;LEDs.c: 58: case 1:
 11556                           
 11557                           
 11558                           ;LEDs.c: 59: LATDbits.LATD0 = 1;
 11559  1094  0022               	movlb	2	; select bank2
 11560  1095  140F               	bsf	15,0	;volatile
 11561                           
 11562                           ;LEDs.c: 60: break;
 11563  1096  0008               	return
 11564  1097                     l705:	
 11565                           ;LEDs.c: 61: case 2:
 11566                           
 11567                           
 11568                           ;LEDs.c: 62: LATDbits.LATD1 = 1;
 11569  1097  0022               	movlb	2	; select bank2
 11570  1098  148F               	bsf	15,1	;volatile
 11571                           
 11572                           ;LEDs.c: 63: break;
 11573  1099  0008               	return
 11574  109A                     l706:	
 11575                           ;LEDs.c: 64: case 3:
 11576                           
 11577                           
 11578                           ;LEDs.c: 65: LATDbits.LATD2 = 1;
 11579  109A  0022               	movlb	2	; select bank2
 11580  109B  150F               	bsf	15,2	;volatile
 11581                           
 11582                           ;LEDs.c: 66: break;
 11583  109C  0008               	return
 11584  109D                     l707:	
 11585                           ;LEDs.c: 67: case 4:
 11586                           
 11587                           
 11588                           ;LEDs.c: 68: LATDbits.LATD3 = 1;
 11589  109D  0022               	movlb	2	; select bank2
 11590  109E  158F               	bsf	15,3	;volatile
 11591                           
 11592                           ;LEDs.c: 69: break;
 11593  109F  0008               	return
 11594  10A0                     l708:	
 11595                           ;LEDs.c: 70: case 5:
 11596                           
 11597                           
 11598                           ;LEDs.c: 71: LATDbits.LATD4 = 1;
 11599  10A0  0022               	movlb	2	; select bank2
 11600  10A1  160F               	bsf	15,4	;volatile
 11601                           
 11602                           ;LEDs.c: 74: break;
 11603                           
 11604                           ;LEDs.c: 73: case 6:
 11605                           
 11606                           ;LEDs.c: 72: break;
 11607  10A2  0008               	return
 11608  10A3                     l710:	
 11609                           ;LEDs.c: 75: case 100:
 11610                           
 11611                           
 11612                           ;LEDs.c: 76: LATDbits.LATD0 = 1;
 11613  10A3  0022               	movlb	2	; select bank2
 11614  10A4  140F               	bsf	15,0	;volatile
 11615                           
 11616                           ;LEDs.c: 77: LATDbits.LATD1 = 1;
 11617  10A5  148F               	bsf	15,1	;volatile
 11618                           
 11619                           ;LEDs.c: 78: LATDbits.LATD2 = 1;
 11620  10A6  150F               	bsf	15,2	;volatile
 11621                           
 11622                           ;LEDs.c: 79: LATDbits.LATD3 = 1;
 11623  10A7  158F               	bsf	15,3	;volatile
 11624                           
 11625                           ;LEDs.c: 80: LATDbits.LATD4 = 1;
 11626  10A8  160F               	bsf	15,4	;volatile
 11627                           
 11628                           ;LEDs.c: 82: }
 11629                           
 11630                           ;LEDs.c: 81: break;
 11631  10A9  0008               	return
 11632  10AA                     l5039:	
 11633                           
 11634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11635                           ; Switch size 1, requested type "space"
 11636                           ; Number of cases is 1, Range of values is 0 to 0
 11637                           ; switch strategies available:
 11638                           ; Name         Instructions Cycles
 11639                           ; simple_byte            4     3 (average)
 11640                           ; direct_byte            8     6 (fixed)
 11641                           ; jumptable            260     6 (fixed)
 11642                           ;	Chosen strategy is simple_byte
 11643  10AA  0021               	movlb	1	; select bank1
 11644  10AB  0821               	movf	(set_leds_bottom@x+1)^(0+128),w
 11645  10AC  3A00               	xorlw	0	; case 0
 11646  10AD  1903               	skipnz
 11647  10AE  28B0               	goto	l6313
 11648  10AF  28C7               	goto	l711
 11649  10B0                     l6313:	
 11650                           
 11651                           ; Switch size 1, requested type "space"
 11652                           ; Number of cases is 7, Range of values is 1 to 100
 11653                           ; switch strategies available:
 11654                           ; Name         Instructions Cycles
 11655                           ; simple_byte           22    12 (average)
 11656                           ; direct_byte          209     9 (fixed)
 11657                           ; jumptable            263     9 (fixed)
 11658                           ;	Chosen strategy is simple_byte
 11659  10B0  0820               	movf	set_leds_bottom@x^(0+128),w
 11660  10B1  3A01               	xorlw	1	; case 1
 11661  10B2  1903               	skipnz
 11662  10B3  2894               	goto	l703
 11663  10B4  3A03               	xorlw	3	; case 2
 11664  10B5  1903               	skipnz
 11665  10B6  2897               	goto	l705
 11666  10B7  3A01               	xorlw	1	; case 3
 11667  10B8  1903               	skipnz
 11668  10B9  289A               	goto	l706
 11669  10BA  3A07               	xorlw	7	; case 4
 11670  10BB  1903               	skipnz
 11671  10BC  289D               	goto	l707
 11672  10BD  3A01               	xorlw	1	; case 5
 11673  10BE  1903               	skipnz
 11674  10BF  28A0               	goto	l708
 11675  10C0  3A03               	xorlw	3	; case 6
 11676  10C1  1903               	skipnz
 11677  10C2  28C7               	goto	l711
 11678  10C3  3A62               	xorlw	98	; case 100
 11679  10C4  1903               	skipnz
 11680  10C5  28A3               	goto	l710
 11681  10C6  28C7               	goto	l711
 11682  10C7                     l711:	
 11683  10C7  0008               	return
 11684  10C8                     __end_of_set_leds_bottom:	
 11685                           
 11686                           	psect	text37
 11687  1001                     __ptext37:	
 11688 ;; *************** function _FLASH_ReadWord *****************
 11689 ;; Defined at:
 11690 ;;		line 58 in file "memory.c"
 11691 ;; Parameters:    Size  Location     Type
 11692 ;;  flashAddr       2    0[BANK1 ] unsigned int 
 11693 ;; Auto vars:     Size  Location     Type
 11694 ;;  GIEBitValue     1    2[BANK1 ] unsigned char 
 11695 ;; Return value:  Size  Location     Type
 11696 ;;                  2    0[BANK1 ] unsigned int 
 11697 ;; Registers used:
 11698 ;;		wreg, status,2, status,0
 11699 ;; Tracked objects:
 11700 ;;		On entry : 0/0
 11701 ;;		On exit  : 0/0
 11702 ;;		Unchanged: 0/0
 11703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11704 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11705 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11707 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11708 ;;Total ram usage:        3 bytes
 11709 ;; Hardware stack levels used:    1
 11710 ;; Hardware stack levels required when called:    3
 11711 ;; This function calls:
 11712 ;;		Nothing
 11713 ;; This function is called by:
 11714 ;;		_ReadSavedSettings
 11715 ;;		_FLASH_WriteWord
 11716 ;; This function uses a non-reentrant model
 11717 ;;
 11718                           
 11719                           
 11720                           ;psect for function _FLASH_ReadWord
 11721  1001                     _FLASH_ReadWord:	
 11722                           
 11723                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 11724                           
 11725                           ;incstack = 0
 11726                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 11727  1001  3000               	movlw	0
 11728  1002  1B8B               	btfsc	11,7	;volatile
 11729  1003  3001               	movlw	1
 11730  1004  0021               	movlb	1	; select bank1
 11731  1005  00A2               	movwf	FLASH_ReadWord@GIEBitValue^(0+128)
 11732                           
 11733                           ;memory.c: 61: INTCONbits.GIE = 0;
 11734  1006  138B               	bcf	11,7	;volatile
 11735                           
 11736                           ;memory.c: 62: PMADRL = (flashAddr & 0x00FF);
 11737  1007  0820               	movf	FLASH_ReadWord@flashAddr^(0+128),w
 11738  1008  0023               	movlb	3	; select bank3
 11739  1009  0091               	movwf	17	;volatile
 11740                           
 11741                           ;memory.c: 63: PMADRH = ((flashAddr & 0xFF00) >> 8);
 11742  100A  0021               	movlb	1	; select bank1
 11743  100B  0821               	movf	(FLASH_ReadWord@flashAddr+1)^(0+128),w
 11744  100C  0023               	movlb	3	; select bank3
 11745  100D  0092               	movwf	18	;volatile
 11746                           
 11747                           ;memory.c: 65: PMCON1bits.CFGS = 0;
 11748  100E  1315               	bcf	21,6	;volatile
 11749                           
 11750                           ;memory.c: 66: PMCON1bits.RD = 1;
 11751  100F  1415               	bsf	21,0	;volatile
 11752                           
 11753                           ;memory.c: 67: __nop();
 11754  1010  0000               	nop
 11755                           
 11756                           ;memory.c: 68: __nop();
 11757  1011  0000               	nop
 11758                           
 11759                           ;memory.c: 69: INTCONbits.GIE = GIEBitValue;
 11760  1012  0021               	movlb	1	; select bank1
 11761  1013  0C22               	rrf	FLASH_ReadWord@GIEBitValue^(0+128),w
 11762  1014  1C03               	skipc
 11763  1015  138B               	bcf	11,7	;volatile
 11764  1016  1803               	skipnc
 11765  1017  178B               	bsf	11,7	;volatile
 11766                           
 11767                           ;memory.c: 71: return ((PMDATH << 8) | PMDATL);
 11768  1018  0023               	movlb	3	; select bank3
 11769  1019  0814               	movf	20,w	;volatile
 11770  101A  0021               	movlb	1	; select bank1
 11771  101B  00A1               	movwf	(?_FLASH_ReadWord+1)^(0+128)
 11772  101C  0023               	movlb	3	; select bank3
 11773  101D  0813               	movf	19,w	;volatile
 11774  101E  0021               	movlb	1	; select bank1
 11775  101F  00A0               	movwf	?_FLASH_ReadWord^(0+128)
 11776  1020  0008               	return
 11777  1021                     __end_of_FLASH_ReadWord:	
 11778                           
 11779                           	psect	text38
 11780  1EC8                     __ptext38:	
 11781 ;; *************** function _InitializeTaps *****************
 11782 ;; Defined at:
 11783 ;;		line 187 in file "user.c"
 11784 ;; Parameters:    Size  Location     Type
 11785 ;;		None
 11786 ;; Auto vars:     Size  Location     Type
 11787 ;;  itap            2    1[BANK1 ] int 
 11788 ;; Return value:  Size  Location     Type
 11789 ;;                  1    wreg      void 
 11790 ;; Registers used:
 11791 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11792 ;; Tracked objects:
 11793 ;;		On entry : 0/0
 11794 ;;		On exit  : 0/0
 11795 ;;		Unchanged: 0/0
 11796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11798 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11799 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11800 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11801 ;;Total ram usage:        3 bytes
 11802 ;; Hardware stack levels used:    1
 11803 ;; Hardware stack levels required when called:    3
 11804 ;; This function calls:
 11805 ;;		Nothing
 11806 ;; This function is called by:
 11807 ;;		_main
 11808 ;; This function uses a non-reentrant model
 11809 ;;
 11810                           
 11811                           
 11812                           ;psect for function _InitializeTaps
 11813  1EC8                     _InitializeTaps:	
 11814                           
 11815                           ;user.c: 188: for (int itap = 0; itap < 12; itap++) {
 11816                           
 11817                           ;incstack = 0
 11818                           ; Regs used in _InitializeTaps: [wreg+fsr1l+fsr1h+status,2+status,0]
 11819  1EC8  0021               	movlb	1	; select bank1
 11820  1EC9  01A1               	clrf	InitializeTaps@itap^(0+128)
 11821  1ECA  01A2               	clrf	(InitializeTaps@itap+1)^(0+128)
 11822  1ECB                     L12:	
 11823  1ECB  0822               	movf	(InitializeTaps@itap+1)^(0+128),w
 11824  1ECC  3A80               	xorlw	128
 11825  1ECD  00A0               	movwf	??_InitializeTaps^(0+128)
 11826  1ECE  3080               	movlw	128
 11827  1ECF  0220               	subwf	??_InitializeTaps^(0+128),w
 11828  1ED0  1D03               	skipz
 11829  1ED1  2ED4               	goto	u6055
 11830  1ED2  300C               	movlw	12
 11831  1ED3  0221               	subwf	InitializeTaps@itap^(0+128),w
 11832  1ED4                     u6055:	
 11833  1ED4  1803               	btfsc	3,0
 11834  1ED5  0008               	return
 11835                           
 11836                           ;user.c: 189: tap[itap] = 0;
 11837  1ED6  0021               	movlb	1	; select bank1
 11838  1ED7  0821               	movf	InitializeTaps@itap^(0+128),w
 11839  1ED8  00A0               	movwf	??_InitializeTaps^(0+128)
 11840  1ED9  3001               	movlw	1
 11841  1EDA                     u6065:	
 11842  1EDA  35A0               	lslf	??_InitializeTaps^(0+128),f
 11843  1EDB  3EFF               	addlw	-1
 11844  1EDC  1D03               	skipz
 11845  1EDD  2EDA               	goto	u6065
 11846  1EDE  3520               	lslf	??_InitializeTaps^(0+128),w
 11847  1EDF  3EA0               	addlw	(low (_tap| (0+512)))& (0+255)
 11848  1EE0  0086               	movwf	6
 11849  1EE1  3002               	movlw	2	; select bank5/6
 11850  1EE2  0087               	movwf	7
 11851  1EE3  3000               	movlw	0
 11852  1EE4  3FC0               	movwi [0]fsr1
 11853  1EE5  3000               	movlw	0
 11854  1EE6  3FC1               	movwi [1]fsr1
 11855  1EE7  3FC2               	movwi [2]fsr1
 11856  1EE8  3FC3               	movwi [3]fsr1
 11857  1EE9  3001               	movlw	1
 11858  1EEA  07A1               	addwf	InitializeTaps@itap^(0+128),f
 11859  1EEB  3000               	movlw	0
 11860  1EEC  3DA2               	addwfc	(InitializeTaps@itap+1)^(0+128),f
 11861  1EED  2ECB               	goto	L12
 11862  1EEE                     __end_of_InitializeTaps:	
 11863                           
 11864                           	psect	text39
 11865  1F70                     __ptext39:	
 11866 ;; *************** function _InitApp *****************
 11867 ;; Defined at:
 11868 ;;		line 23 in file "user.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  1    wreg      void 
 11875 ;; Registers used:
 11876 ;;		wreg, status,2, status,0, pclath, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11885 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 11886 ;;Total ram usage:        0 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    5
 11889 ;; This function calls:
 11890 ;;		_init_adc
 11891 ;;		_init_pwm
 11892 ;; This function is called by:
 11893 ;;		_main
 11894 ;; This function uses a non-reentrant model
 11895 ;;
 11896                           
 11897                           
 11898                           ;psect for function _InitApp
 11899  1F70                     _InitApp:	
 11900                           
 11901                           ;user.c: 24: TRISBbits.TRISB0 = 0;
 11902                           
 11903                           ;incstack = 0
 11904                           ; Regs used in _InitApp: [wreg+status,2+status,0+pclath+cstack]
 11905  1F70  0021               	movlb	1	; select bank1
 11906  1F71  100D               	bcf	13,0	;volatile
 11907                           
 11908                           ;user.c: 25: TRISBbits.TRISB1 = 0;
 11909  1F72  108D               	bcf	13,1	;volatile
 11910                           
 11911                           ;user.c: 26: TRISBbits.TRISB2 = 0;
 11912  1F73  110D               	bcf	13,2	;volatile
 11913                           
 11914                           ;user.c: 27: TRISBbits.TRISB3 = 0;
 11915  1F74  118D               	bcf	13,3	;volatile
 11916                           
 11917                           ;user.c: 28: TRISBbits.TRISB4 = 0;
 11918  1F75  120D               	bcf	13,4	;volatile
 11919                           
 11920                           ;user.c: 29: TRISBbits.TRISB5 = 0;
 11921  1F76  128D               	bcf	13,5	;volatile
 11922                           
 11923                           ;user.c: 31: TRISCbits.TRISC0 = 1;
 11924  1F77  140E               	bsf	14,0	;volatile
 11925                           
 11926                           ;user.c: 32: TRISCbits.TRISC4 = 0;
 11927  1F78  120E               	bcf	14,4	;volatile
 11928                           
 11929                           ;user.c: 33: TRISCbits.TRISC5 = 0;
 11930  1F79  128E               	bcf	14,5	;volatile
 11931                           
 11932                           ;user.c: 36: TRISDbits.TRISD0 = 0;
 11933  1F7A  100F               	bcf	15,0	;volatile
 11934                           
 11935                           ;user.c: 37: TRISDbits.TRISD1 = 0;
 11936  1F7B  108F               	bcf	15,1	;volatile
 11937                           
 11938                           ;user.c: 38: TRISDbits.TRISD2 = 0;
 11939  1F7C  110F               	bcf	15,2	;volatile
 11940                           
 11941                           ;user.c: 39: TRISDbits.TRISD3 = 0;
 11942  1F7D  118F               	bcf	15,3	;volatile
 11943                           
 11944                           ;user.c: 40: TRISDbits.TRISD4 = 0;
 11945  1F7E  120F               	bcf	15,4	;volatile
 11946                           
 11947                           ;user.c: 41: TRISDbits.TRISD5 = 1;
 11948  1F7F  168F               	bsf	15,5	;volatile
 11949                           
 11950                           ;user.c: 42: TRISDbits.TRISD6 = 1;
 11951  1F80  170F               	bsf	15,6	;volatile
 11952                           
 11953                           ;user.c: 43: TRISDbits.TRISD7 = 1;
 11954  1F81  178F               	bsf	15,7	;volatile
 11955                           
 11956                           ;user.c: 49: TRISEbits.TRISE0 = 1;
 11957  1F82  1410               	bsf	16,0	;volatile
 11958                           
 11959                           ;user.c: 50: TRISEbits.TRISE1 = 1;
 11960  1F83  1490               	bsf	16,1	;volatile
 11961                           
 11962                           ;user.c: 51: ANSELEbits.ANSE0 = 0;
 11963  1F84  0023               	movlb	3	; select bank3
 11964  1F85  1010               	bcf	16,0	;volatile
 11965                           
 11966                           ;user.c: 52: ANSELEbits.ANSE1 = 0;
 11967  1F86  1090               	bcf	16,1	;volatile
 11968                           
 11969                           ;user.c: 53: PORTEbits.RE0 = 0;
 11970  1F87  0020               	movlb	0	; select bank0
 11971  1F88  1010               	bcf	16,0	;volatile
 11972                           
 11973                           ;user.c: 54: PORTEbits.RE1 = 0;
 11974  1F89  1090               	bcf	16,1	;volatile
 11975                           
 11976                           ;user.c: 56: TRISFbits.TRISF0 = 0;
 11977  1F8A  0026               	movlb	6	; select bank6
 11978  1F8B  100C               	bcf	12,0	;volatile
 11979                           
 11980                           ;user.c: 57: TRISFbits.TRISF1 = 0;
 11981  1F8C  108C               	bcf	12,1	;volatile
 11982                           
 11983                           ;user.c: 58: TRISFbits.TRISF2 = 0;
 11984  1F8D  110C               	bcf	12,2	;volatile
 11985                           
 11986                           ;user.c: 59: TRISFbits.TRISF3 = 0;
 11987  1F8E  118C               	bcf	12,3	;volatile
 11988                           
 11989                           ;user.c: 60: TRISFbits.TRISF4 = 0;
 11990  1F8F  120C               	bcf	12,4	;volatile
 11991                           
 11992                           ;user.c: 61: TRISFbits.TRISF5 = 0;
 11993  1F90  128C               	bcf	12,5	;volatile
 11994                           
 11995                           ;user.c: 62: TRISFbits.TRISF6 = 1;
 11996  1F91  170C               	bsf	12,6	;volatile
 11997                           
 11998                           ;user.c: 63: ANSELFbits.ANSF6 = 0;
 11999  1F92  0028               	movlb	8	; select bank8
 12000  1F93  130C               	bcf	12,6	;volatile
 12001                           
 12002                           ;user.c: 65: TRISGbits.TRISG1 = 0;
 12003  1F94  0026               	movlb	6	; select bank6
 12004  1F95  108D               	bcf	13,1	;volatile
 12005                           
 12006                           ;user.c: 66: TRISGbits.TRISG2 = 0;
 12007  1F96  110D               	bcf	13,2	;volatile
 12008                           
 12009                           ;user.c: 68: init_adc();
 12010  1F97  319D  25E7  319F   	fcall	_init_adc
 12011                           
 12012                           ;user.c: 69: init_pwm();
 12013  1F9A  3192  2200         	fcall	_init_pwm
 12014                           
 12015                           ;user.c: 71: INTCONbits.GIE = 0b1;
 12016  1F9C  178B               	bsf	11,7	;volatile
 12017                           
 12018                           ;user.c: 72: INTCONbits.TMR0IE = 0b1;
 12019  1F9D  168B               	bsf	11,5	;volatile
 12020                           
 12021                           ;user.c: 73: INTCONbits.TMR0IF = 0b0;
 12022  1F9E  110B               	bcf	11,2	;volatile
 12023  1F9F  0008               	return
 12024  1FA0                     __end_of_InitApp:	
 12025                           
 12026                           	psect	text40
 12027  1200                     __ptext40:	
 12028 ;; *************** function _init_pwm *****************
 12029 ;; Defined at:
 12030 ;;		line 123 in file "user.c"
 12031 ;; Parameters:    Size  Location     Type
 12032 ;;		None
 12033 ;; Auto vars:     Size  Location     Type
 12034 ;;		None
 12035 ;; Return value:  Size  Location     Type
 12036 ;;                  1    wreg      void 
 12037 ;; Registers used:
 12038 ;;		wreg, status,2, status,0, pclath, cstack
 12039 ;; Tracked objects:
 12040 ;;		On entry : 0/0
 12041 ;;		On exit  : 0/0
 12042 ;;		Unchanged: 0/0
 12043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12048 ;;Total ram usage:        0 bytes
 12049 ;; Hardware stack levels used:    1
 12050 ;; Hardware stack levels required when called:    4
 12051 ;; This function calls:
 12052 ;;		_init_timer0
 12053 ;;		_init_timer2
 12054 ;; This function is called by:
 12055 ;;		_InitApp
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           
 12060                           ;psect for function _init_pwm
 12061  1200                     _init_pwm:	
 12062                           
 12063                           ;user.c: 124: APFCONbits.CCP2SEL = 0;
 12064                           
 12065                           ;incstack = 0
 12066                           ; Regs used in _init_pwm: [wreg+status,2+status,0+pclath+cstack]
 12067  1200  0022               	movlb	2	; select bank2
 12068  1201  101D               	bcf	29,0	;volatile
 12069                           
 12070                           ;user.c: 125: TRISCbits.TRISC2 = 0;
 12071  1202  0021               	movlb	1	; select bank1
 12072  1203  110E               	bcf	14,2	;volatile
 12073                           
 12074                           ;user.c: 126: TRISCbits.TRISC1 = 0;
 12075  1204  108E               	bcf	14,1	;volatile
 12076                           
 12077                           ;user.c: 127: TRISGbits.TRISG0 = 0;
 12078  1205  0026               	movlb	6	; select bank6
 12079  1206  100D               	bcf	13,0	;volatile
 12080                           
 12081                           ;user.c: 128: TRISGbits.TRISG3 = 0;
 12082  1207  118D               	bcf	13,3	;volatile
 12083                           
 12084                           ;user.c: 129: TRISGbits.TRISG4 = 0;
 12085  1208  120D               	bcf	13,4	;volatile
 12086                           
 12087                           ;user.c: 130: TRISEbits.TRISE6 = 0;
 12088  1209  0021               	movlb	1	; select bank1
 12089  120A  1310               	bcf	16,6	;volatile
 12090                           
 12091                           ;user.c: 131: TRISEbits.TRISE5 = 0;
 12092  120B  1290               	bcf	16,5	;volatile
 12093                           
 12094                           ;user.c: 132: TRISEbits.TRISE4 = 0;
 12095  120C  1210               	bcf	16,4	;volatile
 12096                           
 12097                           ;user.c: 133: TRISEbits.TRISE3 = 0;
 12098  120D  1190               	bcf	16,3	;volatile
 12099                           
 12100                           ;user.c: 134: TRISEbits.TRISE2 = 0;
 12101  120E  1110               	bcf	16,2	;volatile
 12102                           
 12103                           ;user.c: 135: CCP1CONbits.CCP1M = 0b1111;
 12104  120F  300F               	movlw	15
 12105  1210  0025               	movlb	5	; select bank5
 12106  1211  0493               	iorwf	19,f	;volatile
 12107                           
 12108                           ;user.c: 136: CCP2CONbits.CCP2M = 0b1111;
 12109  1212  300F               	movlw	15
 12110  1213  049A               	iorwf	26,f	;volatile
 12111                           
 12112                           ;user.c: 137: CCP3CONbits.CCP3M = 0b1111;
 12113  1214  300F               	movlw	15
 12114  1215  0026               	movlb	6	; select bank6
 12115  1216  0493               	iorwf	19,f	;volatile
 12116                           
 12117                           ;user.c: 138: CCP4CONbits.CCP4M = 0b1111;
 12118  1217  300F               	movlw	15
 12119  1218  049A               	iorwf	26,f	;volatile
 12120                           
 12121                           ;user.c: 139: CCP5CONbits.CCP5M = 0b1111;
 12122  1219  300F               	movlw	15
 12123  121A  049E               	iorwf	30,f	;volatile
 12124                           
 12125                           ;user.c: 140: CCP6CONbits.CCP6M = 0b1111;
 12126  121B  300F               	movlw	15
 12127  121C  002C               	movlb	12	; select bank12
 12128  121D  0493               	iorwf	19,f	;volatile
 12129                           
 12130                           ;user.c: 141: CCP7CONbits.CCP7M = 0b1111;
 12131  121E  300F               	movlw	15
 12132  121F  0496               	iorwf	22,f	;volatile
 12133                           
 12134                           ;user.c: 142: CCP8CONbits.CCP8M = 0b1111;
 12135  1220  300F               	movlw	15
 12136  1221  0499               	iorwf	25,f	;volatile
 12137                           
 12138                           ;user.c: 143: CCP9CONbits.CCP9M = 0b1111;
 12139  1222  300F               	movlw	15
 12140  1223  049C               	iorwf	28,f	;volatile
 12141                           
 12142                           ;user.c: 144: CCP10CONbits.CCP10M = 0b1111;
 12143  1224  300F               	movlw	15
 12144  1225  049F               	iorwf	31,f	;volatile
 12145                           
 12146                           ;user.c: 145: CCPTMRS0 = 0b00000000;
 12147  1226  0025               	movlb	5	; select bank5
 12148  1227  019D               	clrf	29	;volatile
 12149                           
 12150                           ;user.c: 146: CCPTMRS1 = 0b00000000;
 12151  1228  019E               	clrf	30	;volatile
 12152                           
 12153                           ;user.c: 147: CCPTMRS2 = 0b00000000;
 12154  1229  019F               	clrf	31	;volatile
 12155                           
 12156                           ;user.c: 148: CCPR1 = 50;
 12157  122A  3000               	movlw	0
 12158  122B  0092               	movwf	18	;volatile
 12159  122C  3032               	movlw	50
 12160  122D  0091               	movwf	17	;volatile
 12161                           
 12162                           ;user.c: 149: CCPR2 = 100;
 12163  122E  3000               	movlw	0
 12164  122F  0099               	movwf	25	;volatile
 12165  1230  3064               	movlw	100
 12166  1231  0098               	movwf	24	;volatile
 12167                           
 12168                           ;user.c: 150: CCPR3 = 150;
 12169  1232  3000               	movlw	0
 12170  1233  0026               	movlb	6	; select bank6
 12171  1234  0092               	movwf	18	;volatile
 12172  1235  3096               	movlw	150
 12173  1236  0091               	movwf	17	;volatile
 12174                           
 12175                           ;user.c: 151: CCPR4 = 200;
 12176  1237  3000               	movlw	0
 12177  1238  0099               	movwf	25	;volatile
 12178  1239  30C8               	movlw	200
 12179  123A  0098               	movwf	24	;volatile
 12180                           
 12181                           ;user.c: 152: init_timer2();
 12182  123B  319D  25CC  3192   	fcall	_init_timer2
 12183                           
 12184                           ;user.c: 153: init_timer0();
 12185  123E  319D  25C5         	fcall	_init_timer0
 12186  1240  0008               	return
 12187  1241                     __end_of_init_pwm:	
 12188                           
 12189                           	psect	text41
 12190  1DCC                     __ptext41:	
 12191 ;; *************** function _init_timer2 *****************
 12192 ;; Defined at:
 12193 ;;		line 156 in file "user.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;		None
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      void 
 12200 ;; Registers used:
 12201 ;;		wreg, status,2, status,0
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12208 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12210 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12211 ;;Total ram usage:        0 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    3
 12214 ;; This function calls:
 12215 ;;		Nothing
 12216 ;; This function is called by:
 12217 ;;		_init_pwm
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _init_timer2
 12223  1DCC                     _init_timer2:	
 12224                           
 12225                           ;user.c: 157: T2CONbits.T2OUTPS = 0b0000;
 12226                           
 12227                           ;incstack = 0
 12228                           ; Regs used in _init_timer2: [wreg+status,2+status,0]
 12229  1DCC  3087               	movlw	-121
 12230  1DCD  0020               	movlb	0	; select bank0
 12231  1DCE  059C               	andwf	28,f	;volatile
 12232                           
 12233                           ;user.c: 158: T2CONbits.T2CKPS = 0b00;
 12234  1DCF  30FC               	movlw	-4
 12235  1DD0  059C               	andwf	28,f	;volatile
 12236                           
 12237                           ;user.c: 159: PR2 = 0xFF;
 12238  1DD1  30FF               	movlw	255
 12239  1DD2  009B               	movwf	27	;volatile
 12240                           
 12241                           ;user.c: 160: T2CONbits.TMR2ON = 1;
 12242  1DD3  151C               	bsf	28,2	;volatile
 12243  1DD4  0008               	return
 12244  1DD5                     __end_of_init_timer2:	
 12245                           
 12246                           	psect	text42
 12247  1DC5                     __ptext42:	
 12248 ;; *************** function _init_timer0 *****************
 12249 ;; Defined at:
 12250 ;;		line 163 in file "user.c"
 12251 ;; Parameters:    Size  Location     Type
 12252 ;;		None
 12253 ;; Auto vars:     Size  Location     Type
 12254 ;;		None
 12255 ;; Return value:  Size  Location     Type
 12256 ;;                  1    wreg      void 
 12257 ;; Registers used:
 12258 ;;		None
 12259 ;; Tracked objects:
 12260 ;;		On entry : 0/0
 12261 ;;		On exit  : 0/0
 12262 ;;		Unchanged: 0/0
 12263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12268 ;;Total ram usage:        0 bytes
 12269 ;; Hardware stack levels used:    1
 12270 ;; Hardware stack levels required when called:    3
 12271 ;; This function calls:
 12272 ;;		Nothing
 12273 ;; This function is called by:
 12274 ;;		_init_pwm
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _init_timer0
 12280  1DC5                     _init_timer0:	
 12281                           
 12282                           ;user.c: 164: OPTION_REGbits.TMR0CS = 0b0;
 12283                           
 12284                           ;incstack = 0
 12285                           ; Regs used in _init_timer0: []
 12286  1DC5  0021               	movlb	1	; select bank1
 12287  1DC6  1295               	bcf	21,5	;volatile
 12288                           
 12289                           ;user.c: 165: OPTION_REGbits.PSA = 0b0;
 12290  1DC7  1195               	bcf	21,3	;volatile
 12291                           
 12292                           ;user.c: 166: OPTION_REGbits.PS0 = 0b0;
 12293  1DC8  1015               	bcf	21,0	;volatile
 12294                           
 12295                           ;user.c: 167: OPTION_REGbits.PS1 = 0b1;
 12296  1DC9  1495               	bsf	21,1	;volatile
 12297                           
 12298                           ;user.c: 168: OPTION_REGbits.PS2 = 0b0;
 12299  1DCA  1115               	bcf	21,2	;volatile
 12300  1DCB  0008               	return
 12301  1DCC                     __end_of_init_timer0:	
 12302                           
 12303                           	psect	text43
 12304  1DE7                     __ptext43:	
 12305 ;; *************** function _init_adc *****************
 12306 ;; Defined at:
 12307 ;;		line 109 in file "user.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;		None
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2, status,0
 12316 ;; Tracked objects:
 12317 ;;		On entry : 0/0
 12318 ;;		On exit  : 0/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12324 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12325 ;;Total ram usage:        0 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    3
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_InitApp
 12332 ;; This function uses a non-reentrant model
 12333 ;;
 12334                           
 12335                           
 12336                           ;psect for function _init_adc
 12337  1DE7                     _init_adc:	
 12338                           
 12339                           ;user.c: 110: ADCON1bits.ADFM = 0b1;
 12340                           
 12341                           ;incstack = 0
 12342                           ; Regs used in _init_adc: [wreg+status,2+status,0]
 12343  1DE7  0021               	movlb	1	; select bank1
 12344  1DE8  179E               	bsf	30,7	;volatile
 12345                           
 12346                           ;user.c: 111: ADCON1bits.ADCS = 0b110;
 12347  1DE9  081E               	movf	30,w	;volatile
 12348  1DEA  398F               	andlw	-113
 12349  1DEB  3860               	iorlw	96
 12350  1DEC  009E               	movwf	30	;volatile
 12351                           
 12352                           ;user.c: 112: ADCON1bits.ADPREF = 0b00;
 12353  1DED  30FC               	movlw	-4
 12354  1DEE  059E               	andwf	30,f	;volatile
 12355                           
 12356                           ;user.c: 113: ADCON0bits.ADON = 0b1;
 12357  1DEF  141D               	bsf	29,0	;volatile
 12358  1DF0  0008               	return
 12359  1DF1                     __end_of_init_adc:	
 12360                           
 12361                           	psect	text44
 12362  1DC1                     __ptext44:	
 12363 ;; *************** function _ConfigureOscillator *****************
 12364 ;; Defined at:
 12365 ;;		line 18 in file "system.c"
 12366 ;; Parameters:    Size  Location     Type
 12367 ;;		None
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;		None
 12370 ;; Return value:  Size  Location     Type
 12371 ;;                  1    wreg      void 
 12372 ;; Registers used:
 12373 ;;		wreg, status,2, status,0
 12374 ;; Tracked objects:
 12375 ;;		On entry : 0/0
 12376 ;;		On exit  : 0/0
 12377 ;;		Unchanged: 0/0
 12378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12382 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12383 ;;Total ram usage:        0 bytes
 12384 ;; Hardware stack levels used:    1
 12385 ;; Hardware stack levels required when called:    3
 12386 ;; This function calls:
 12387 ;;		Nothing
 12388 ;; This function is called by:
 12389 ;;		_main
 12390 ;; This function uses a non-reentrant model
 12391 ;;
 12392                           
 12393                           
 12394                           ;psect for function _ConfigureOscillator
 12395  1DC1                     _ConfigureOscillator:	
 12396                           
 12397                           ;system.c: 20: OSCCONbits.SCS = 0b00;
 12398                           
 12399                           ;incstack = 0
 12400                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
 12401  1DC1  30FC               	movlw	-4
 12402  1DC2  0021               	movlb	1	; select bank1
 12403  1DC3  0599               	andwf	25,f	;volatile
 12404  1DC4  0008               	return
 12405  1DC5                     __end_of_ConfigureOscillator:	
 12406                           
 12407                           	psect	intentry
 12408  0004                     __pintentry:	
 12409 ;; *************** function _isr *****************
 12410 ;; Defined at:
 12411 ;;		line 25 in file "interrupts.c"
 12412 ;; Parameters:    Size  Location     Type
 12413 ;;		None
 12414 ;; Auto vars:     Size  Location     Type
 12415 ;;  tmpSubDelay     2   35[BANK0 ] int 
 12416 ;; Return value:  Size  Location     Type
 12417 ;;                  1    wreg      void 
 12418 ;; Registers used:
 12419 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12420 ;; Tracked objects:
 12421 ;;		On entry : 0/0
 12422 ;;		On exit  : 0/0
 12423 ;;		Unchanged: 0/0
 12424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 12425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12426 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12427 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12428 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 12429 ;;Total ram usage:       11 bytes
 12430 ;; Hardware stack levels used:    1
 12431 ;; Hardware stack levels required when called:    2
 12432 ;; This function calls:
 12433 ;;		___awdiv
 12434 ;;		_modulation
 12435 ;;		i1_set_leds_top
 12436 ;; This function is called by:
 12437 ;;		Interrupt level 1
 12438 ;; This function uses a non-reentrant model
 12439 ;;
 12440                           
 12441  0004                     _isr:	
 12442                           
 12443                           ;incstack = 0
 12444                           ; Regs used in _isr: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12445  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 12446  0005  3180               	pagesel	$
 12447  0006  0020               	movlb	0	; select bank0
 12448  0007  087F               	movf	127,w
 12449  0008  00C2               	movwf	??_isr+8
 12450                           
 12451                           ;interrupts.c: 26: int tmpSubDelay;
 12452                           ;interrupts.c: 28: extern volatile long timer;
 12453                           ;interrupts.c: 29: extern volatile long sub_timer;
 12454                           ;interrupts.c: 30: extern volatile long tap_timer;
 12455                           ;interrupts.c: 31: extern signed int adjusted_pot_value;
 12456                           ;interrupts.c: 32: extern int mod_delay_time;
 12457                           ;interrupts.c: 34: extern volatile long baseline_delay_time;
 12458                           ;interrupts.c: 36: extern int top_push_state;
 12459                           ;interrupts.c: 37: extern uint8_t feedback_start;
 12460                           ;interrupts.c: 38: extern volatile long mod_timer;
 12461                           ;interrupts.c: 39: extern volatile long delay_time;
 12462  0009  1D0B               	btfss	11,2	;volatile
 12463  000A  2918               	goto	i1l117
 12464                           
 12465                           ;interrupts.c: 41: tmpSubDelay = delay_time;
 12466  000B  085D               	movf	_delay_time+1,w	;volatile
 12467  000C  00C4               	movwf	isr@tmpSubDelay+1
 12468  000D  085C               	movf	_delay_time,w	;volatile
 12469  000E  00C3               	movwf	isr@tmpSubDelay
 12470                           
 12471                           ;interrupts.c: 42: timer = timer + 1;
 12472  000F  3001               	movlw	1
 12473  0010  00BA               	movwf	??_isr
 12474  0011  3000               	movlw	0
 12475  0012  00BB               	movwf	??_isr+1
 12476  0013  3000               	movlw	0
 12477  0014  00BC               	movwf	??_isr+2
 12478  0015  3000               	movlw	0
 12479  0016  00BD               	movwf	??_isr+3
 12480  0017  084D               	movf	_timer,w	;volatile
 12481  0018  07BA               	addwf	??_isr,f
 12482  0019  084E               	movf	_timer+1,w	;volatile
 12483  001A  3DBB               	addwfc	??_isr+1,f
 12484  001B  084F               	movf	_timer+2,w	;volatile
 12485  001C  3DBC               	addwfc	??_isr+2,f
 12486  001D  0850               	movf	_timer+3,w	;volatile
 12487  001E  3DBD               	addwfc	??_isr+3,f
 12488  001F  083D               	movf	??_isr+3,w
 12489  0020  00D0               	movwf	_timer+3	;volatile
 12490  0021  083C               	movf	??_isr+2,w
 12491  0022  00CF               	movwf	_timer+2	;volatile
 12492  0023  083B               	movf	??_isr+1,w
 12493  0024  00CE               	movwf	_timer+1	;volatile
 12494  0025  083A               	movf	??_isr,w
 12495  0026  00CD               	movwf	_timer	;volatile
 12496                           
 12497                           ;interrupts.c: 43: sub_timer = sub_timer + 1;
 12498  0027  3001               	movlw	1
 12499  0028  00BA               	movwf	??_isr
 12500  0029  3000               	movlw	0
 12501  002A  00BB               	movwf	??_isr+1
 12502  002B  3000               	movlw	0
 12503  002C  00BC               	movwf	??_isr+2
 12504  002D  3000               	movlw	0
 12505  002E  00BD               	movwf	??_isr+3
 12506  002F  0845               	movf	_sub_timer,w	;volatile
 12507  0030  07BA               	addwf	??_isr,f
 12508  0031  0846               	movf	_sub_timer+1,w	;volatile
 12509  0032  3DBB               	addwfc	??_isr+1,f
 12510  0033  0847               	movf	_sub_timer+2,w	;volatile
 12511  0034  3DBC               	addwfc	??_isr+2,f
 12512  0035  0848               	movf	_sub_timer+3,w	;volatile
 12513  0036  3DBD               	addwfc	??_isr+3,f
 12514  0037  083D               	movf	??_isr+3,w
 12515  0038  00C8               	movwf	_sub_timer+3	;volatile
 12516  0039  083C               	movf	??_isr+2,w
 12517  003A  00C7               	movwf	_sub_timer+2	;volatile
 12518  003B  083B               	movf	??_isr+1,w
 12519  003C  00C6               	movwf	_sub_timer+1	;volatile
 12520  003D  083A               	movf	??_isr,w
 12521  003E  00C5               	movwf	_sub_timer	;volatile
 12522                           
 12523                           ;interrupts.c: 44: tap_timer = tap_timer + 1;
 12524  003F  3001               	movlw	1
 12525  0040  00BA               	movwf	??_isr
 12526  0041  3000               	movlw	0
 12527  0042  00BB               	movwf	??_isr+1
 12528  0043  3000               	movlw	0
 12529  0044  00BC               	movwf	??_isr+2
 12530  0045  3000               	movlw	0
 12531  0046  00BD               	movwf	??_isr+3
 12532  0047  0849               	movf	_tap_timer,w	;volatile
 12533  0048  07BA               	addwf	??_isr,f
 12534  0049  084A               	movf	_tap_timer+1,w	;volatile
 12535  004A  3DBB               	addwfc	??_isr+1,f
 12536  004B  084B               	movf	_tap_timer+2,w	;volatile
 12537  004C  3DBC               	addwfc	??_isr+2,f
 12538  004D  084C               	movf	_tap_timer+3,w	;volatile
 12539  004E  3DBD               	addwfc	??_isr+3,f
 12540  004F  083D               	movf	??_isr+3,w
 12541  0050  00CC               	movwf	_tap_timer+3	;volatile
 12542  0051  083C               	movf	??_isr+2,w
 12543  0052  00CB               	movwf	_tap_timer+2	;volatile
 12544  0053  083B               	movf	??_isr+1,w
 12545  0054  00CA               	movwf	_tap_timer+1	;volatile
 12546  0055  083A               	movf	??_isr,w
 12547  0056  00C9               	movwf	_tap_timer	;volatile
 12548                           
 12549                           ;interrupts.c: 45: mod_timer = mod_timer + 1;
 12550  0057  3001               	movlw	1
 12551  0058  00BA               	movwf	??_isr
 12552  0059  3000               	movlw	0
 12553  005A  00BB               	movwf	??_isr+1
 12554  005B  3000               	movlw	0
 12555  005C  00BC               	movwf	??_isr+2
 12556  005D  3000               	movlw	0
 12557  005E  00BD               	movwf	??_isr+3
 12558  005F  0023               	movlb	3	; select bank3
 12559  0060  0838               	movf	_mod_timer^(0+384),w	;volatile
 12560  0061  0020               	movlb	0	; select bank0
 12561  0062  07BA               	addwf	??_isr,f
 12562  0063  0023               	movlb	3	; select bank3
 12563  0064  0839               	movf	(_mod_timer+1)^(0+384),w	;volatile
 12564  0065  0020               	movlb	0	; select bank0
 12565  0066  3DBB               	addwfc	??_isr+1,f
 12566  0067  0023               	movlb	3	; select bank3
 12567  0068  083A               	movf	(_mod_timer+2)^(0+384),w	;volatile
 12568  0069  0020               	movlb	0	; select bank0
 12569  006A  3DBC               	addwfc	??_isr+2,f
 12570  006B  0023               	movlb	3	; select bank3
 12571  006C  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 12572  006D  0020               	movlb	0	; select bank0
 12573  006E  3DBD               	addwfc	??_isr+3,f
 12574  006F  083D               	movf	??_isr+3,w
 12575  0070  0023               	movlb	3	; select bank3
 12576  0071  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 12577  0072  0020               	movlb	0	; select bank0
 12578  0073  083C               	movf	??_isr+2,w
 12579  0074  0023               	movlb	3	; select bank3
 12580  0075  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 12581  0076  0020               	movlb	0	; select bank0
 12582  0077  083B               	movf	??_isr+1,w
 12583  0078  0023               	movlb	3	; select bank3
 12584  0079  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 12585  007A  0020               	movlb	0	; select bank0
 12586  007B  083A               	movf	??_isr,w
 12587  007C  0023               	movlb	3	; select bank3
 12588  007D  00B8               	movwf	_mod_timer^(0+384)	;volatile
 12589                           
 12590                           ;interrupts.c: 46: test_timer++;
 12591  007E  3001               	movlw	1
 12592  007F  07C0               	addwf	_test_timer^(0+384),f	;volatile
 12593  0080  3000               	movlw	0
 12594  0081  3DC1               	addwfc	(_test_timer+1)^(0+384),f	;volatile
 12595  0082  3000               	movlw	0
 12596  0083  3DC2               	addwfc	(_test_timer+2)^(0+384),f	;volatile
 12597  0084  3000               	movlw	0
 12598  0085  3DC3               	addwfc	(_test_timer+3)^(0+384),f	;volatile
 12599                           
 12600                           ;interrupts.c: 47: if (feedback_start == 1) {
 12601  0086  0020               	movlb	0	; select bank0
 12602  0087  0354               	decf	_feedback_start,w
 12603  0088  1D03               	btfss	3,2
 12604  0089  28A1               	goto	i1l4467
 12605                           
 12606                           ;interrupts.c: 48: feedback_timer++;
 12607  008A  3001               	movlw	1
 12608  008B  0022               	movlb	2	; select bank2
 12609  008C  07C7               	addwf	_feedback_timer^(0+256),f	;volatile
 12610  008D  3000               	movlw	0
 12611  008E  3DC8               	addwfc	(_feedback_timer+1)^(0+256),f	;volatile
 12612                           
 12613                           ;interrupts.c: 49: if (feedback_timer > long_press_limit) {feedback_timer = long_press_l
      +                          imit;}
 12614  008F  0848               	movf	(_feedback_timer+1)^(0+256),w	;volatile
 12615  0090  0020               	movlb	0	; select bank0
 12616  0091  0263               	subwf	_long_press_limit+1,w
 12617  0092  1D03               	skipz
 12618  0093  2898               	goto	u451_25
 12619  0094  0022               	movlb	2	; select bank2
 12620  0095  0847               	movf	_feedback_timer^(0+256),w	;volatile
 12621  0096  0020               	movlb	0	; select bank0
 12622  0097  0262               	subwf	_long_press_limit,w
 12623  0098                     u451_25:	
 12624  0098  1803               	skipnc
 12625  0099  28A1               	goto	i1l4467
 12626  009A  0863               	movf	_long_press_limit+1,w
 12627  009B  0022               	movlb	2	; select bank2
 12628  009C  00C8               	movwf	(_feedback_timer+1)^(0+256)	;volatile
 12629  009D  0020               	movlb	0	; select bank0
 12630  009E  0862               	movf	_long_press_limit,w
 12631  009F  0022               	movlb	2	; select bank2
 12632  00A0  00C7               	movwf	_feedback_timer^(0+256)	;volatile
 12633  00A1                     i1l4467:	
 12634                           
 12635                           ;interrupts.c: 50: }
 12636                           ;interrupts.c: 51: if (longTap_start == 1) {
 12637  00A1  0020               	movlb	0	; select bank0
 12638  00A2  0355               	decf	_longTap_start,w
 12639  00A3  1D03               	btfss	3,2
 12640  00A4  28BC               	goto	i1l4473
 12641                           
 12642                           ;interrupts.c: 52: longTap_timer++;
 12643  00A5  3001               	movlw	1
 12644  00A6  0022               	movlb	2	; select bank2
 12645  00A7  07D3               	addwf	_longTap_timer^(0+256),f	;volatile
 12646  00A8  3000               	movlw	0
 12647  00A9  3DD4               	addwfc	(_longTap_timer+1)^(0+256),f	;volatile
 12648                           
 12649                           ;interrupts.c: 53: if (longTap_timer > long_press_limit) {
 12650  00AA  0854               	movf	(_longTap_timer+1)^(0+256),w	;volatile
 12651  00AB  0020               	movlb	0	; select bank0
 12652  00AC  0263               	subwf	_long_press_limit+1,w
 12653  00AD  1D03               	skipz
 12654  00AE  28B3               	goto	u453_25
 12655  00AF  0022               	movlb	2	; select bank2
 12656  00B0  0853               	movf	_longTap_timer^(0+256),w	;volatile
 12657  00B1  0020               	movlb	0	; select bank0
 12658  00B2  0262               	subwf	_long_press_limit,w
 12659  00B3                     u453_25:	
 12660  00B3  1803               	skipnc
 12661  00B4  28BC               	goto	i1l4473
 12662                           
 12663                           ;interrupts.c: 54: longTap_timer = long_press_limit;
 12664  00B5  0863               	movf	_long_press_limit+1,w
 12665  00B6  0022               	movlb	2	; select bank2
 12666  00B7  00D4               	movwf	(_longTap_timer+1)^(0+256)	;volatile
 12667  00B8  0020               	movlb	0	; select bank0
 12668  00B9  0862               	movf	_long_press_limit,w
 12669  00BA  0022               	movlb	2	; select bank2
 12670  00BB  00D3               	movwf	_longTap_timer^(0+256)	;volatile
 12671  00BC                     i1l4473:	
 12672                           
 12673                           ;interrupts.c: 55: }
 12674                           ;interrupts.c: 56: }
 12675                           ;interrupts.c: 57: INTCONbits.TMR0IF = 0;
 12676  00BC  110B               	bcf	11,2	;volatile
 12677                           
 12678                           ;interrupts.c: 59: if (adjust_sub_delay == 1) {
 12679  00BD  0023               	movlb	3	; select bank3
 12680  00BE  0344               	decf	_adjust_sub_delay^(0+384),w
 12681  00BF  0445               	iorwf	(_adjust_sub_delay+1)^(0+384),w
 12682  00C0  1D03               	btfss	3,2
 12683  00C1  2918               	goto	i1l117
 12684                           
 12685                           ;interrupts.c: 60: if ((sub_timer >= delay_time) && ((baseline_delay_time - timer) < 4))
      +                           {
 12686  00C2  0020               	movlb	0	; select bank0
 12687  00C3  0848               	movf	_sub_timer+3,w	;volatile
 12688  00C4  3A80               	xorlw	128
 12689  00C5  00BA               	movwf	??_isr
 12690  00C6  085F               	movf	_delay_time+3,w	;volatile
 12691  00C7  3A80               	xorlw	128
 12692  00C8  023A               	subwf	??_isr,w
 12693  00C9  1D03               	skipz
 12694  00CA  28D5               	goto	u455_23
 12695  00CB  085E               	movf	_delay_time+2,w	;volatile
 12696  00CC  0247               	subwf	_sub_timer+2,w	;volatile
 12697  00CD  1D03               	skipz
 12698  00CE  28D5               	goto	u455_23
 12699  00CF  085D               	movf	_delay_time+1,w	;volatile
 12700  00D0  0246               	subwf	_sub_timer+1,w	;volatile
 12701  00D1  1D03               	skipz
 12702  00D2  28D5               	goto	u455_23
 12703  00D3  085C               	movf	_delay_time,w	;volatile
 12704  00D4  0245               	subwf	_sub_timer,w	;volatile
 12705  00D5                     u455_23:	
 12706  00D5  1C03               	skipc
 12707  00D6  2918               	goto	i1l117
 12708  00D7  0858               	movf	_baseline_delay_time,w	;volatile
 12709  00D8  00BA               	movwf	??_isr
 12710  00D9  0859               	movf	_baseline_delay_time+1,w	;volatile
 12711  00DA  00BB               	movwf	??_isr+1
 12712  00DB  085A               	movf	_baseline_delay_time+2,w	;volatile
 12713  00DC  00BC               	movwf	??_isr+2
 12714  00DD  085B               	movf	_baseline_delay_time+3,w	;volatile
 12715  00DE  00BD               	movwf	??_isr+3
 12716  00DF  094D               	comf	_timer,w	;volatile
 12717  00E0  00BE               	movwf	??_isr+4
 12718  00E1  094E               	comf	_timer+1,w	;volatile
 12719  00E2  00BF               	movwf	??_isr+5
 12720  00E3  094F               	comf	_timer+2,w	;volatile
 12721  00E4  00C0               	movwf	??_isr+6
 12722  00E5  0950               	comf	_timer+3,w	;volatile
 12723  00E6  00C1               	movwf	??_isr+7
 12724  00E7  0ABE               	incf	??_isr+4,f
 12725  00E8  1903               	skipnz
 12726  00E9  0ABF               	incf	??_isr+5,f
 12727  00EA  1903               	skipnz
 12728  00EB  0AC0               	incf	??_isr+6,f
 12729  00EC  1903               	skipnz
 12730  00ED  0AC1               	incf	??_isr+7,f
 12731  00EE  083E               	movf	??_isr+4,w
 12732  00EF  07BA               	addwf	??_isr,f
 12733  00F0  083F               	movf	??_isr+5,w
 12734  00F1  3DBB               	addwfc	??_isr+1,f
 12735  00F2  0840               	movf	??_isr+6,w
 12736  00F3  3DBC               	addwfc	??_isr+2,f
 12737  00F4  0841               	movf	??_isr+7,w
 12738  00F5  3DBD               	addwfc	??_isr+3,f
 12739  00F6  1BBD               	btfsc	??_isr+3,7
 12740  00F7  2905               	goto	i1l4481
 12741  00F8  083D               	movf	??_isr+3,w
 12742  00F9  1D03               	btfss	3,2
 12743  00FA  2918               	goto	i1l117
 12744  00FB  083C               	movf	??_isr+2,w
 12745  00FC  1D03               	btfss	3,2
 12746  00FD  2918               	goto	i1l117
 12747  00FE  083B               	movf	??_isr+1,w
 12748  00FF  1D03               	btfss	3,2
 12749  0100  2918               	goto	i1l117
 12750  0101  3004               	movlw	4
 12751  0102  023A               	subwf	??_isr,w
 12752  0103  1803               	btfsc	3,0
 12753  0104  2918               	goto	i1l117
 12754  0105                     i1l4481:	
 12755                           
 12756                           ;interrupts.c: 61: tmpSubDelay = sub_timer + (baseline_delay_time- timer);
 12757  0105  094D               	comf	_timer,w	;volatile
 12758  0106  00BA               	movwf	??_isr
 12759  0107  094E               	comf	_timer+1,w	;volatile
 12760  0108  00BB               	movwf	??_isr+1
 12761  0109  0ABA               	incf	??_isr,f
 12762  010A  1903               	skipnz
 12763  010B  0ABB               	incf	??_isr+1,f
 12764  010C  0858               	movf	_baseline_delay_time,w	;volatile
 12765  010D  073A               	addwf	??_isr,w
 12766  010E  00BC               	movwf	??_isr+2
 12767  010F  0859               	movf	_baseline_delay_time+1,w	;volatile
 12768  0110  3D3B               	addwfc	??_isr+1,w
 12769  0111  00BD               	movwf	??_isr+3
 12770  0112  0845               	movf	_sub_timer,w	;volatile
 12771  0113  073C               	addwf	??_isr+2,w
 12772  0114  00C3               	movwf	isr@tmpSubDelay
 12773  0115  0846               	movf	_sub_timer+1,w	;volatile
 12774  0116  3D3D               	addwfc	??_isr+3,w
 12775  0117  00C4               	movwf	isr@tmpSubDelay+1
 12776  0118                     i1l117:	
 12777                           
 12778                           ;interrupts.c: 62: }
 12779                           ;interrupts.c: 63: }
 12780                           ;interrupts.c: 64: }
 12781                           ;interrupts.c: 77: if (longTap_state < 1 && doubleTap_state < 1) {
 12782  0118  0020               	movlb	0	; select bank0
 12783  0119  0867               	movf	_longTap_state,w	;volatile
 12784  011A  1D03               	btfss	3,2
 12785  011B  2975               	goto	i1l4505
 12786  011C  0853               	movf	_doubleTap_state,w	;volatile
 12787  011D  1D03               	btfss	3,2
 12788  011E  2975               	goto	i1l4505
 12789                           
 12790                           ;interrupts.c: 80: if (timer >= baseline_delay_time) {
 12791  011F  0850               	movf	_timer+3,w	;volatile
 12792  0120  3A80               	xorlw	128
 12793  0121  00BA               	movwf	??_isr
 12794  0122  085B               	movf	_baseline_delay_time+3,w	;volatile
 12795  0123  3A80               	xorlw	128
 12796  0124  023A               	subwf	??_isr,w
 12797  0125  1D03               	skipz
 12798  0126  2931               	goto	u459_23
 12799  0127  085A               	movf	_baseline_delay_time+2,w	;volatile
 12800  0128  024F               	subwf	_timer+2,w	;volatile
 12801  0129  1D03               	skipz
 12802  012A  2931               	goto	u459_23
 12803  012B  0859               	movf	_baseline_delay_time+1,w	;volatile
 12804  012C  024E               	subwf	_timer+1,w	;volatile
 12805  012D  1D03               	skipz
 12806  012E  2931               	goto	u459_23
 12807  012F  0858               	movf	_baseline_delay_time,w	;volatile
 12808  0130  024D               	subwf	_timer,w	;volatile
 12809  0131                     u459_23:	
 12810  0131  1C03               	skipc
 12811  0132  2963               	goto	i1l4501
 12812                           
 12813                           ;interrupts.c: 83: LATBbits.LATB4 = 1;
 12814  0133  0022               	movlb	2	; select bank2
 12815  0134  160D               	bsf	13,4	;volatile
 12816                           
 12817                           ;interrupts.c: 85: timer = 0;
 12818  0135  3000               	movlw	0
 12819  0136  0020               	movlb	0	; select bank0
 12820  0137  00D0               	movwf	_timer+3	;volatile
 12821  0138  3000               	movlw	0
 12822  0139  00CF               	movwf	_timer+2	;volatile
 12823  013A  3000               	movlw	0
 12824  013B  00CE               	movwf	_timer+1	;volatile
 12825  013C  3000               	movlw	0
 12826  013D  00CD               	movwf	_timer	;volatile
 12827                           
 12828                           ;interrupts.c: 86: if (reset_sub_delay == 1) {
 12829  013E  0023               	movlb	3	; select bank3
 12830  013F  0356               	decf	_reset_sub_delay^(0+384),w
 12831  0140  0457               	iorwf	(_reset_sub_delay+1)^(0+384),w
 12832  0141  1D03               	btfss	3,2
 12833  0142  2963               	goto	i1l4501
 12834                           
 12835                           ;interrupts.c: 88: CCPR1 = delay_counter;
 12836  0143  0022               	movlb	2	; select bank2
 12837  0144  0846               	movf	(_delay_counter+1)^(0+256),w	;volatile
 12838  0145  0025               	movlb	5	; select bank5
 12839  0146  0092               	movwf	18	;volatile
 12840  0147  0022               	movlb	2	; select bank2
 12841  0148  0845               	movf	_delay_counter^(0+256),w	;volatile
 12842  0149  0025               	movlb	5	; select bank5
 12843  014A  0091               	movwf	17	;volatile
 12844                           
 12845                           ;interrupts.c: 91: mod_counter = 0;
 12846  014B  0020               	movlb	0	; select bank0
 12847  014C  01D1               	clrf	_mod_counter
 12848  014D  01D2               	clrf	_mod_counter+1
 12849                           
 12850                           ;interrupts.c: 92: mod_timer = mod_delay_time;
 12851  014E  0023               	movlb	3	; select bank3
 12852  014F  0860               	movf	_mod_delay_time^(0+384),w
 12853  0150  00B8               	movwf	_mod_timer^(0+384)	;volatile
 12854  0151  0861               	movf	(_mod_delay_time+1)^(0+384),w
 12855  0152  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 12856  0153  0D89               	rlf	9,f
 12857  0154  3B89               	subwfb	9,f
 12858  0155  0989               	comf	9,f
 12859  0156  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 12860  0157  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 12861                           
 12862                           ;interrupts.c: 94: reset_sub_delay = 0;
 12863  0158  01D6               	clrf	_reset_sub_delay^(0+384)
 12864  0159  01D7               	clrf	(_reset_sub_delay+1)^(0+384)
 12865                           
 12866                           ;interrupts.c: 95: sub_timer = delay_time;
 12867  015A  0020               	movlb	0	; select bank0
 12868  015B  085F               	movf	_delay_time+3,w	;volatile
 12869  015C  00C8               	movwf	_sub_timer+3	;volatile
 12870  015D  085E               	movf	_delay_time+2,w	;volatile
 12871  015E  00C7               	movwf	_sub_timer+2	;volatile
 12872  015F  085D               	movf	_delay_time+1,w	;volatile
 12873  0160  00C6               	movwf	_sub_timer+1	;volatile
 12874  0161  085C               	movf	_delay_time,w	;volatile
 12875  0162  00C5               	movwf	_sub_timer	;volatile
 12876  0163                     i1l4501:	
 12877                           
 12878                           ;interrupts.c: 96: }
 12879                           ;interrupts.c: 97: }
 12880                           ;interrupts.c: 99: if (timer >= 30) {
 12881  0163  0020               	movlb	0	; select bank0
 12882  0164  1BD0               	btfsc	_timer+3,7	;volatile
 12883  0165  2975               	goto	i1l4505
 12884  0166  0850               	movf	_timer+3,w	;volatile
 12885  0167  1D03               	btfss	3,2
 12886  0168  2973               	goto	i1l4503
 12887  0169  084F               	movf	_timer+2,w	;volatile
 12888  016A  1D03               	btfss	3,2
 12889  016B  2973               	goto	i1l4503
 12890  016C  084E               	movf	_timer+1,w	;volatile
 12891  016D  1D03               	btfss	3,2
 12892  016E  2973               	goto	i1l4503
 12893  016F  301E               	movlw	30
 12894  0170  024D               	subwf	_timer,w	;volatile
 12895  0171  1C03               	btfss	3,0
 12896  0172  2975               	goto	i1l4505
 12897  0173                     i1l4503:	
 12898                           
 12899                           ;interrupts.c: 101: LATBbits.LATB4 = 0;
 12900  0173  0022               	movlb	2	; select bank2
 12901  0174  120D               	bcf	13,4	;volatile
 12902  0175                     i1l4505:	
 12903                           
 12904                           ;interrupts.c: 103: }
 12905                           ;interrupts.c: 104: }
 12906                           ;interrupts.c: 107: if (sub_timer >= tmpSubDelay) {
 12907  0175  0020               	movlb	0	; select bank0
 12908  0176  0843               	movf	isr@tmpSubDelay,w
 12909  0177  00BA               	movwf	??_isr
 12910  0178  0844               	movf	isr@tmpSubDelay+1,w
 12911  0179  00BB               	movwf	??_isr+1
 12912  017A  3000               	movlw	0
 12913  017B  1BBB               	btfsc	??_isr+1,7
 12914  017C  30FF               	movlw	255
 12915  017D  00BC               	movwf	??_isr+2
 12916  017E  00BD               	movwf	??_isr+3
 12917  017F  0848               	movf	_sub_timer+3,w	;volatile
 12918  0180  3A80               	xorlw	128
 12919  0181  00BE               	movwf	??_isr+4
 12920  0182  083D               	movf	??_isr+3,w
 12921  0183  3A80               	xorlw	128
 12922  0184  023E               	subwf	??_isr+4,w
 12923  0185  1D03               	skipz
 12924  0186  2991               	goto	u462_23
 12925  0187  083C               	movf	??_isr+2,w
 12926  0188  0247               	subwf	_sub_timer+2,w	;volatile
 12927  0189  1D03               	skipz
 12928  018A  2991               	goto	u462_23
 12929  018B  083B               	movf	??_isr+1,w
 12930  018C  0246               	subwf	_sub_timer+1,w	;volatile
 12931  018D  1D03               	skipz
 12932  018E  2991               	goto	u462_23
 12933  018F  083A               	movf	??_isr,w
 12934  0190  0245               	subwf	_sub_timer,w	;volatile
 12935  0191                     u462_23:	
 12936  0191  1C03               	skipc
 12937  0192  29AE               	goto	i1l4515
 12938                           
 12939                           ;interrupts.c: 108: if (suspend_blink == 0) {
 12940  0193  0856               	movf	_suspend_blink,w	;volatile
 12941  0194  1D03               	btfss	3,2
 12942  0195  29A1               	goto	i1l4511
 12943                           
 12944                           ;interrupts.c: 109: set_leds_top(top_push_state, 1);
 12945  0196  0865               	movf	_top_push_state+1,w
 12946  0197  00F1               	movwf	i1set_leds_top@x+1
 12947  0198  0864               	movf	_top_push_state,w
 12948  0199  00F0               	movwf	i1set_leds_top@x
 12949  019A  3001               	movlw	1
 12950  019B  00F2               	movwf	i1set_leds_top@ledState
 12951  019C  3000               	movlw	0
 12952  019D  00F3               	movwf	i1set_leds_top@ledState+1
 12953  019E  3192  22C9  3180   	fcall	i1_set_leds_top
 12954  01A1                     i1l4511:	
 12955                           
 12956                           ;interrupts.c: 110: }
 12957                           ;interrupts.c: 111: tmpSubDelay = delay_time;
 12958  01A1  0020               	movlb	0	; select bank0
 12959  01A2  085D               	movf	_delay_time+1,w	;volatile
 12960  01A3  00C4               	movwf	isr@tmpSubDelay+1
 12961  01A4  085C               	movf	_delay_time,w	;volatile
 12962  01A5  00C3               	movwf	isr@tmpSubDelay
 12963                           
 12964                           ;interrupts.c: 112: sub_timer = 0;
 12965  01A6  3000               	movlw	0
 12966  01A7  00C8               	movwf	_sub_timer+3	;volatile
 12967  01A8  3000               	movlw	0
 12968  01A9  00C7               	movwf	_sub_timer+2	;volatile
 12969  01AA  3000               	movlw	0
 12970  01AB  00C6               	movwf	_sub_timer+1	;volatile
 12971  01AC  3000               	movlw	0
 12972  01AD  00C5               	movwf	_sub_timer	;volatile
 12973  01AE                     i1l4515:	
 12974                           
 12975                           ;interrupts.c: 113: }
 12976                           ;interrupts.c: 115: if (sub_timer >= 20) {
 12977  01AE  1BC8               	btfsc	_sub_timer+3,7	;volatile
 12978  01AF  29CA               	goto	i1l4521
 12979  01B0  0848               	movf	_sub_timer+3,w	;volatile
 12980  01B1  1D03               	btfss	3,2
 12981  01B2  29BD               	goto	i1l4517
 12982  01B3  0847               	movf	_sub_timer+2,w	;volatile
 12983  01B4  1D03               	btfss	3,2
 12984  01B5  29BD               	goto	i1l4517
 12985  01B6  0846               	movf	_sub_timer+1,w	;volatile
 12986  01B7  1D03               	btfss	3,2
 12987  01B8  29BD               	goto	i1l4517
 12988  01B9  3014               	movlw	20
 12989  01BA  0245               	subwf	_sub_timer,w	;volatile
 12990  01BB  1C03               	btfss	3,0
 12991  01BC  29CA               	goto	i1l4521
 12992  01BD                     i1l4517:	
 12993                           
 12994                           ;interrupts.c: 116: if (suspend_blink == 0) {
 12995  01BD  0856               	movf	_suspend_blink,w	;volatile
 12996  01BE  1D03               	btfss	3,2
 12997  01BF  29CA               	goto	i1l4521
 12998                           
 12999                           ;interrupts.c: 117: set_leds_top(top_push_state, 0);
 13000  01C0  0865               	movf	_top_push_state+1,w
 13001  01C1  00F1               	movwf	i1set_leds_top@x+1
 13002  01C2  0864               	movf	_top_push_state,w
 13003  01C3  00F0               	movwf	i1set_leds_top@x
 13004  01C4  3000               	movlw	0
 13005  01C5  00F2               	movwf	i1set_leds_top@ledState
 13006  01C6  00F3               	movwf	i1set_leds_top@ledState+1
 13007  01C7  3192  22C9  3180   	fcall	i1_set_leds_top
 13008  01CA                     i1l4521:	
 13009                           
 13010                           ;interrupts.c: 118: }
 13011                           ;interrupts.c: 119: }
 13012                           ;interrupts.c: 131: if (mod_timer >= mod_delay_time) {
 13013  01CA  0023               	movlb	3	; select bank3
 13014  01CB  0860               	movf	_mod_delay_time^(0+384),w
 13015  01CC  0020               	movlb	0	; select bank0
 13016  01CD  00BA               	movwf	??_isr
 13017  01CE  0023               	movlb	3	; select bank3
 13018  01CF  0861               	movf	(_mod_delay_time+1)^(0+384),w
 13019  01D0  0020               	movlb	0	; select bank0
 13020  01D1  00BB               	movwf	??_isr+1
 13021  01D2  3000               	movlw	0
 13022  01D3  1BBB               	btfsc	??_isr+1,7
 13023  01D4  30FF               	movlw	255
 13024  01D5  00BC               	movwf	??_isr+2
 13025  01D6  00BD               	movwf	??_isr+3
 13026  01D7  0023               	movlb	3	; select bank3
 13027  01D8  083B               	movf	(_mod_timer+3)^(0+384),w	;volatile
 13028  01D9  3A80               	xorlw	128
 13029  01DA  0020               	movlb	0	; select bank0
 13030  01DB  00BE               	movwf	??_isr+4
 13031  01DC  083D               	movf	??_isr+3,w
 13032  01DD  3A80               	xorlw	128
 13033  01DE  023E               	subwf	??_isr+4,w
 13034  01DF  0023               	movlb	3	; select bank3
 13035  01E0  1D03               	skipz
 13036  01E1  29F2               	goto	u466_23
 13037  01E2  0020               	movlb	0	; select bank0
 13038  01E3  083C               	movf	??_isr+2,w
 13039  01E4  0023               	movlb	3	; select bank3
 13040  01E5  023A               	subwf	(_mod_timer+2)^(0+384),w	;volatile
 13041  01E6  1D03               	skipz
 13042  01E7  29F2               	goto	u466_23
 13043  01E8  0020               	movlb	0	; select bank0
 13044  01E9  083B               	movf	??_isr+1,w
 13045  01EA  0023               	movlb	3	; select bank3
 13046  01EB  0239               	subwf	(_mod_timer+1)^(0+384),w	;volatile
 13047  01EC  1D03               	skipz
 13048  01ED  29F2               	goto	u466_23
 13049  01EE  0020               	movlb	0	; select bank0
 13050  01EF  083A               	movf	??_isr,w
 13051  01F0  0023               	movlb	3	; select bank3
 13052  01F1  0238               	subwf	_mod_timer^(0+384),w	;volatile
 13053  01F2                     u466_23:	
 13054  01F2  1C03               	skipc
 13055  01F3  2AB4               	goto	i1l4569
 13056                           
 13057                           ;interrupts.c: 132: mod_timer = 0;
 13058  01F4  3000               	movlw	0
 13059  01F5  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13060  01F6  3000               	movlw	0
 13061  01F7  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13062  01F8  3000               	movlw	0
 13063  01F9  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13064  01FA  3000               	movlw	0
 13065  01FB  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13066                           
 13067                           ;interrupts.c: 135: if (mod_counter >= 60) {
 13068  01FC  0020               	movlb	0	; select bank0
 13069  01FD  0852               	movf	_mod_counter+1,w
 13070  01FE  3A80               	xorlw	128
 13071  01FF  00BA               	movwf	??_isr
 13072  0200  3080               	movlw	128
 13073  0201  023A               	subwf	??_isr,w
 13074  0202  1D03               	skipz
 13075  0203  2A06               	goto	u467_25
 13076  0204  303C               	movlw	60
 13077  0205  0251               	subwf	_mod_counter,w
 13078  0206                     u467_25:	
 13079  0206  1C03               	skipc
 13080  0207  2A4A               	goto	i1l4557
 13081                           
 13082                           ;interrupts.c: 136: mod_counter = 0;
 13083  0208  0020               	movlb	0	; select bank0
 13084  0209  01D1               	clrf	_mod_counter
 13085  020A  01D2               	clrf	_mod_counter+1
 13086                           
 13087                           ;interrupts.c: 137: }
 13088                           ;interrupts.c: 149: switch (bottom_push_state) {
 13089  020B  2A4A               	goto	i1l4557
 13090  020C                     i1l4527:	
 13091                           ;interrupts.c: 150: case 1:
 13092                           
 13093                           
 13094                           ;interrupts.c: 151: mod_value = (int)mod1[mod_counter];
 13095  020C  0851               	movf	_mod_counter,w
 13096  020D  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13097  020E  2A11               	goto	L14
 13098  020F                     i1l4531:	
 13099                           ;interrupts.c: 154: case 2:
 13100                           
 13101                           ;interrupts.c: 153: break;
 13102                           
 13103                           ;interrupts.c: 152: PORTCbits.RC4 = 0;
 13104                           
 13105                           
 13106                           ;interrupts.c: 155: mod_value = (int)mod2[mod_counter];
 13107  020F  0851               	movf	_mod_counter,w
 13108  0210  3EA0               	addlw	(low (_mod2| (0+768)))& (0+255)
 13109  0211                     L14:	
 13110  0211  0086               	movwf	6
 13111  0212  3003               	movlw	3	; select bank7/8
 13112  0213  2A18               	goto	L15
 13113  0214                     i1l4535:	
 13114                           ;interrupts.c: 158: case 3:
 13115                           
 13116                           ;interrupts.c: 157: break;
 13117                           
 13118                           ;interrupts.c: 156: PORTCbits.RC4 = 0;
 13119                           
 13120                           
 13121                           ;interrupts.c: 159: mod_value = (int)mod3[mod_counter];
 13122  0214  0851               	movf	_mod_counter,w
 13123  0215  3E20               	addlw	(low (_mod3| (0+1024)))& (0+255)
 13124  0216  0086               	movwf	6
 13125  0217  3004               	movlw	4	; select bank8/9
 13126  0218                     L15:	
 13127  0218  0087               	movwf	7
 13128  0219  0801               	movf	1,w
 13129  021A  0023               	movlb	3	; select bank3
 13130  021B  00D4               	movwf	_mod_value^(0+384)
 13131  021C  01D5               	clrf	(_mod_value+1)^(0+384)
 13132  021D  1BD4               	btfsc	_mod_value^(0+384),7
 13133  021E  03D5               	decf	(_mod_value+1)^(0+384),f
 13134  021F  2A47               	goto	i1l4553
 13135  0220                     i1l4539:	
 13136                           ;interrupts.c: 162: case 4:
 13137                           
 13138                           ;interrupts.c: 161: break;
 13139                           
 13140                           ;interrupts.c: 160: PORTCbits.RC4 = 0;
 13141                           
 13142                           
 13143                           ;interrupts.c: 163: if (mod_counter <31) {
 13144  0220  0852               	movf	_mod_counter+1,w
 13145  0221  3A80               	xorlw	128
 13146  0222  00BA               	movwf	??_isr
 13147  0223  3080               	movlw	128
 13148  0224  023A               	subwf	??_isr,w
 13149  0225  1D03               	skipz
 13150  0226  2A29               	goto	u468_25
 13151  0227  301F               	movlw	31
 13152  0228  0251               	subwf	_mod_counter,w
 13153  0229                     u468_25:	
 13154  0229  1803               	skipnc
 13155  022A  2A30               	goto	i1l4543
 13156                           
 13157                           ;interrupts.c: 164: mod_value = 100;
 13158  022B  3064               	movlw	100
 13159  022C  0023               	movlb	3	; select bank3
 13160  022D  00D4               	movwf	_mod_value^(0+384)
 13161  022E  3000               	movlw	0
 13162  022F  2A34               	goto	L13
 13163  0230                     i1l4543:	
 13164                           ;interrupts.c: 165: } else {
 13165                           
 13166                           
 13167                           ;interrupts.c: 166: mod_value = -100;
 13168  0230  309C               	movlw	156
 13169  0231  0023               	movlb	3	; select bank3
 13170  0232  00D4               	movwf	_mod_value^(0+384)
 13171  0233  30FF               	movlw	255
 13172  0234                     L13:	
 13173  0234  00D5               	movwf	(_mod_value^(0+384)+1)
 13174  0235  2A47               	goto	i1l4553
 13175  0236                     i1l4547:	
 13176                           ;interrupts.c: 170: case 5:
 13177                           
 13178                           ;interrupts.c: 169: break;
 13179                           
 13180                           ;interrupts.c: 167: }
 13181                           ;interrupts.c: 168: PORTCbits.RC4 = 0;
 13182                           
 13183                           
 13184                           ;interrupts.c: 171: mod_value = (int)mod1[mod_counter];
 13185  0236  0851               	movf	_mod_counter,w
 13186  0237  3E20               	addlw	(low (_mod1| (0+768)))& (0+255)
 13187  0238  0086               	movwf	6
 13188  0239  3003               	movlw	3	; select bank6/7
 13189  023A  0087               	movwf	7
 13190  023B  0801               	movf	1,w
 13191  023C  0023               	movlb	3	; select bank3
 13192  023D  00D4               	movwf	_mod_value^(0+384)
 13193  023E  01D5               	clrf	(_mod_value+1)^(0+384)
 13194  023F  1BD4               	btfsc	_mod_value^(0+384),7
 13195  0240  03D5               	decf	(_mod_value+1)^(0+384),f
 13196                           
 13197                           ;interrupts.c: 173: PORTCbits.RC4 = 1;
 13198  0241  0020               	movlb	0	; select bank0
 13199  0242  160E               	bsf	14,4	;volatile
 13200                           
 13201                           ;interrupts.c: 175: break;
 13202  0243  2A61               	goto	i1l4559
 13203  0244                     i1l4551:	
 13204                           ;interrupts.c: 176: default:
 13205                           
 13206                           
 13207                           ;interrupts.c: 177: mod_value = 0;
 13208  0244  0023               	movlb	3	; select bank3
 13209  0245  01D4               	clrf	_mod_value^(0+384)
 13210  0246  01D5               	clrf	(_mod_value+1)^(0+384)
 13211  0247                     i1l4553:	
 13212                           
 13213                           ;interrupts.c: 178: PORTCbits.RC4 = 0;
 13214  0247  0020               	movlb	0	; select bank0
 13215  0248  120E               	bcf	14,4	;volatile
 13216                           
 13217                           ;interrupts.c: 180: }
 13218                           
 13219                           ;interrupts.c: 179: break;
 13220  0249  2A61               	goto	i1l4559
 13221  024A                     i1l4557:	
 13222                           
 13223                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13224                           ; Switch size 1, requested type "space"
 13225                           ; Number of cases is 1, Range of values is 0 to 0
 13226                           ; switch strategies available:
 13227                           ; Name         Instructions Cycles
 13228                           ; simple_byte            4     3 (average)
 13229                           ; direct_byte            8     6 (fixed)
 13230                           ; jumptable            260     6 (fixed)
 13231                           ;	Chosen strategy is simple_byte
 13232  024A  0020               	movlb	0	; select bank0
 13233  024B  0861               	movf	_bottom_push_state+1,w
 13234  024C  3A00               	xorlw	0	; case 0
 13235  024D  1903               	skipnz
 13236  024E  2A50               	goto	i1l6315
 13237  024F  2A44               	goto	i1l4551
 13238  0250                     i1l6315:	
 13239                           
 13240                           ; Switch size 1, requested type "space"
 13241                           ; Number of cases is 5, Range of values is 1 to 5
 13242                           ; switch strategies available:
 13243                           ; Name         Instructions Cycles
 13244                           ; simple_byte           16     9 (average)
 13245                           ; direct_byte           19     9 (fixed)
 13246                           ; jumptable            263     9 (fixed)
 13247                           ;	Chosen strategy is simple_byte
 13248  0250  0860               	movf	_bottom_push_state,w
 13249  0251  3A01               	xorlw	1	; case 1
 13250  0252  1903               	skipnz
 13251  0253  2A0C               	goto	i1l4527
 13252  0254  3A03               	xorlw	3	; case 2
 13253  0255  1903               	skipnz
 13254  0256  2A0F               	goto	i1l4531
 13255  0257  3A01               	xorlw	1	; case 3
 13256  0258  1903               	skipnz
 13257  0259  2A14               	goto	i1l4535
 13258  025A  3A07               	xorlw	7	; case 4
 13259  025B  1903               	skipnz
 13260  025C  2A20               	goto	i1l4539
 13261  025D  3A01               	xorlw	1	; case 5
 13262  025E  1903               	skipnz
 13263  025F  2A36               	goto	i1l4547
 13264  0260  2A44               	goto	i1l4551
 13265  0261                     i1l4559:	
 13266                           
 13267                           ;interrupts.c: 183: if (mod_counter < 5) {
 13268  0261  0852               	movf	_mod_counter+1,w
 13269  0262  3A80               	xorlw	128
 13270  0263  00BA               	movwf	??_isr
 13271  0264  3080               	movlw	128
 13272  0265  023A               	subwf	??_isr,w
 13273  0266  1D03               	skipz
 13274  0267  2A6A               	goto	u469_25
 13275  0268  3005               	movlw	5
 13276  0269  0251               	subwf	_mod_counter,w
 13277  026A                     u469_25:	
 13278  026A  1803               	skipnc
 13279  026B  2A6F               	goto	i1l144
 13280                           
 13281                           ;interrupts.c: 184: LATBbits.LATB0 = 1;
 13282  026C  0022               	movlb	2	; select bank2
 13283  026D  140D               	bsf	13,0	;volatile
 13284                           
 13285                           ;interrupts.c: 185: } else {
 13286  026E  2A71               	goto	i1l4563
 13287  026F                     i1l144:	
 13288                           
 13289                           ;interrupts.c: 186: LATBbits.LATB0 = 0;
 13290  026F  0022               	movlb	2	; select bank2
 13291  0270  100D               	bcf	13,0	;volatile
 13292  0271                     i1l4563:	
 13293                           
 13294                           ;interrupts.c: 187: }
 13295                           ;interrupts.c: 196: mod_value = modulation(mod_value, adjusted_pot_value);
 13296  0271  0023               	movlb	3	; select bank3
 13297  0272  0854               	movf	_mod_value^(0+384),w
 13298  0273  0020               	movlb	0	; select bank0
 13299  0274  00AE               	movwf	modulation@x
 13300  0275  0023               	movlb	3	; select bank3
 13301  0276  0855               	movf	(_mod_value+1)^(0+384),w
 13302  0277  0020               	movlb	0	; select bank0
 13303  0278  00AF               	movwf	modulation@x+1
 13304  0279  0D89               	rlf	9,f
 13305  027A  3B89               	subwfb	9,f
 13306  027B  0989               	comf	9,f
 13307  027C  00B0               	movwf	modulation@x+2
 13308  027D  00B1               	movwf	modulation@x+3
 13309  027E  0023               	movlb	3	; select bank3
 13310  027F  0846               	movf	_adjusted_pot_value^(0+384),w
 13311  0280  0020               	movlb	0	; select bank0
 13312  0281  00B2               	movwf	modulation@y
 13313  0282  0023               	movlb	3	; select bank3
 13314  0283  0847               	movf	(_adjusted_pot_value+1)^(0+384),w
 13315  0284  0020               	movlb	0	; select bank0
 13316  0285  00B3               	movwf	modulation@y+1
 13317  0286  0D89               	rlf	9,f
 13318  0287  3B89               	subwfb	9,f
 13319  0288  0989               	comf	9,f
 13320  0289  00B4               	movwf	modulation@y+2
 13321  028A  00B5               	movwf	modulation@y+3
 13322  028B  3191  21BF  3180   	fcall	_modulation
 13323  028E  0020               	movlb	0	; select bank0
 13324  028F  082F               	movf	?_modulation+1,w
 13325  0290  0023               	movlb	3	; select bank3
 13326  0291  00D5               	movwf	(_mod_value+1)^(0+384)
 13327  0292  0020               	movlb	0	; select bank0
 13328  0293  082E               	movf	?_modulation,w
 13329  0294  0023               	movlb	3	; select bank3
 13330  0295  00D4               	movwf	_mod_value^(0+384)
 13331                           
 13332                           ;interrupts.c: 197: CCPR9 = mod_value / 2;
 13333  0296  3002               	movlw	2
 13334  0297  00F0               	movwf	___awdiv@divisor
 13335  0298  3000               	movlw	0
 13336  0299  00F1               	movwf	___awdiv@divisor+1
 13337  029A  0855               	movf	(_mod_value+1)^(0+384),w
 13338  029B  00F3               	movwf	___awdiv@dividend+1
 13339  029C  0854               	movf	_mod_value^(0+384),w
 13340  029D  00F2               	movwf	___awdiv@dividend
 13341  029E  3193  23F6  3180   	fcall	___awdiv
 13342  02A1  0871               	movf	?___awdiv+1,w
 13343  02A2  002C               	movlb	12	; select bank12
 13344  02A3  009B               	movwf	27	;volatile
 13345  02A4  0870               	movf	?___awdiv,w
 13346  02A5  009A               	movwf	26	;volatile
 13347                           
 13348                           ;interrupts.c: 198: mod_timer = 0;
 13349  02A6  3000               	movlw	0
 13350  02A7  0023               	movlb	3	; select bank3
 13351  02A8  00BB               	movwf	(_mod_timer+3)^(0+384)	;volatile
 13352  02A9  3000               	movlw	0
 13353  02AA  00BA               	movwf	(_mod_timer+2)^(0+384)	;volatile
 13354  02AB  3000               	movlw	0
 13355  02AC  00B9               	movwf	(_mod_timer+1)^(0+384)	;volatile
 13356  02AD  3000               	movlw	0
 13357  02AE  00B8               	movwf	_mod_timer^(0+384)	;volatile
 13358                           
 13359                           ;interrupts.c: 199: mod_counter++;
 13360  02AF  3001               	movlw	1
 13361  02B0  0020               	movlb	0	; select bank0
 13362  02B1  07D1               	addwf	_mod_counter,f
 13363  02B2  3000               	movlw	0
 13364  02B3  3DD2               	addwfc	_mod_counter+1,f
 13365  02B4                     i1l4569:	
 13366                           
 13367                           ;interrupts.c: 213: }
 13368                           ;interrupts.c: 238: if (preset_programmning_on == 1) {
 13369  02B4  0022               	movlb	2	; select bank2
 13370  02B5  035B               	decf	_preset_programmning_on^(0+256),w
 13371  02B6  1D03               	btfss	3,2
 13372  02B7  2AE7               	goto	i1l4581
 13373                           
 13374                           ;interrupts.c: 239: preset_blink++;
 13375  02B8  3001               	movlw	1
 13376  02B9  0020               	movlb	0	; select bank0
 13377  02BA  00BA               	movwf	??_isr
 13378  02BB  083A               	movf	??_isr,w
 13379  02BC  0022               	movlb	2	; select bank2
 13380  02BD  07DA               	addwf	_preset_blink^(0+256),f
 13381                           
 13382                           ;interrupts.c: 241: if (preset_blink >= blink_delay) {
 13383  02BE  0023               	movlb	3	; select bank3
 13384  02BF  085D               	movf	(_blink_delay+1)^(0+384),w
 13385  02C0  3A80               	xorlw	128
 13386  02C1  3C80               	sublw	128
 13387  02C2  1D03               	skipz
 13388  02C3  2AC7               	goto	u471_25
 13389  02C4  085C               	movf	_blink_delay^(0+384),w
 13390  02C5  0022               	movlb	2	; select bank2
 13391  02C6  025A               	subwf	_preset_blink^(0+256),w
 13392  02C7                     u471_25:	
 13393  02C7  1C03               	skipc
 13394  02C8  2AE5               	goto	i1l147
 13395                           
 13396                           ;interrupts.c: 242: LATBbits.LATB1 = 1;
 13397  02C9  0022               	movlb	2	; select bank2
 13398  02CA  148D               	bsf	13,1	;volatile
 13399                           
 13400                           ;interrupts.c: 243: if (preset_blink > blink_delay*2) {
 13401  02CB  0023               	movlb	3	; select bank3
 13402  02CC  085D               	movf	(_blink_delay+1)^(0+384),w
 13403  02CD  0020               	movlb	0	; select bank0
 13404  02CE  00BB               	movwf	??_isr+1
 13405  02CF  0023               	movlb	3	; select bank3
 13406  02D0  085C               	movf	_blink_delay^(0+384),w
 13407  02D1  0020               	movlb	0	; select bank0
 13408  02D2  00BA               	movwf	??_isr
 13409  02D3  35BA               	lslf	??_isr,f
 13410  02D4  0DBB               	rlf	??_isr+1,f
 13411  02D5  083B               	movf	??_isr+1,w
 13412  02D6  3A80               	xorlw	128
 13413  02D7  00BC               	movwf	??_isr+2
 13414  02D8  3080               	movlw	128
 13415  02D9  023C               	subwf	??_isr+2,w
 13416  02DA  1D03               	skipz
 13417  02DB  2AE0               	goto	u472_25
 13418  02DC  0022               	movlb	2	; select bank2
 13419  02DD  085A               	movf	_preset_blink^(0+256),w
 13420  02DE  0020               	movlb	0	; select bank0
 13421  02DF  023A               	subwf	??_isr,w
 13422  02E0                     u472_25:	
 13423  02E0  1803               	skipnc
 13424  02E1  2AEC               	goto	i1l152
 13425                           
 13426                           ;interrupts.c: 244: preset_blink = 0;
 13427  02E2  0022               	movlb	2	; select bank2
 13428  02E3  01DA               	clrf	_preset_blink^(0+256)
 13429                           
 13430                           ;interrupts.c: 245: }
 13431                           ;interrupts.c: 247: } else {
 13432  02E4  2AEC               	goto	i1l152
 13433  02E5                     i1l147:	
 13434                           
 13435                           ;interrupts.c: 248: LATBbits.LATB1 = 0;
 13436  02E5  0022               	movlb	2	; select bank2
 13437  02E6  2AEB               	goto	i1l4585
 13438  02E7                     i1l4581:	
 13439                           ;interrupts.c: 249: }
 13440                           ;interrupts.c: 251: } else {
 13441                           
 13442                           
 13443                           ;interrupts.c: 252: if (preset_blink > 0) {
 13444  02E7  085A               	movf	_preset_blink^(0+256),w
 13445  02E8  1903               	btfsc	3,2
 13446  02E9  2AEC               	goto	i1l152
 13447                           
 13448                           ;interrupts.c: 253: preset_blink = 0;
 13449  02EA  01DA               	clrf	_preset_blink^(0+256)
 13450  02EB                     i1l4585:	
 13451                           
 13452                           ;interrupts.c: 254: LATBbits.LATB1 = 0;
 13453  02EB  108D               	bcf	13,1	;volatile
 13454  02EC                     i1l152:	
 13455  02EC  0020               	movlb	0	; select bank0
 13456  02ED  0842               	movf	??_isr+8,w
 13457  02EE  00FF               	movwf	127
 13458  02EF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 13459  02F0  0009               	retfie
 13460  02F1                     __end_of_isr:	
 13461                           
 13462                           	psect	text46
 13463  12C9                     __ptext46:	
 13464 ;; *************** function i1_set_leds_top *****************
 13465 ;; Defined at:
 13466 ;;		line 16 in file "LEDs.c"
 13467 ;; Parameters:    Size  Location     Type
 13468 ;;  x               2    0[COMMON] int 
 13469 ;;  ledState        2    2[COMMON] int 
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;		None
 13472 ;; Return value:  Size  Location     Type
 13473 ;;                  1    wreg      void 
 13474 ;; Registers used:
 13475 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13481 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13484 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13485 ;;Total ram usage:        4 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; This function calls:
 13488 ;;		Nothing
 13489 ;; This function is called by:
 13490 ;;		_isr
 13491 ;; This function uses a non-reentrant model
 13492 ;;
 13493                           
 13494                           
 13495                           ;psect for function i1_set_leds_top
 13496  12C9                     i1_set_leds_top:	
 13497                           
 13498                           ;LEDs.c: 17: LATFbits.LATF0 = 0;
 13499                           
 13500                           ;incstack = 0
 13501                           ; Regs used in i1_set_leds_top: [wreg-fsr0h+status,2+status,0]
 13502  12C9  0027               	movlb	7	; select bank7
 13503  12CA  100C               	bcf	12,0	;volatile
 13504                           
 13505                           ;LEDs.c: 18: LATFbits.LATF1 = 0;
 13506  12CB  108C               	bcf	12,1	;volatile
 13507                           
 13508                           ;LEDs.c: 19: LATFbits.LATF2 = 0;
 13509  12CC  110C               	bcf	12,2	;volatile
 13510                           
 13511                           ;LEDs.c: 20: LATFbits.LATF3 = 0;
 13512  12CD  118C               	bcf	12,3	;volatile
 13513                           
 13514                           ;LEDs.c: 21: LATFbits.LATF4 = 0;
 13515  12CE  120C               	bcf	12,4	;volatile
 13516                           
 13517                           ;LEDs.c: 22: switch (x) {
 13518  12CF  2AF4               	goto	i1l4451
 13519  12D0                     i1l4439:	
 13520                           ;LEDs.c: 23: case 1:
 13521                           
 13522                           
 13523                           ;LEDs.c: 24: LATFbits.LATF0 = ledState;
 13524  12D0  0C72               	rrf	i1set_leds_top@ledState,w
 13525  12D1  1C03               	skipc
 13526  12D2  100C               	bcf	12,0	;volatile
 13527  12D3  1803               	skipnc
 13528  12D4  140C               	bsf	12,0	;volatile
 13529                           
 13530                           ;LEDs.c: 25: break;
 13531  12D5  0008               	return
 13532  12D6                     i1l4441:	
 13533                           ;LEDs.c: 26: case 2:
 13534                           
 13535                           
 13536                           ;LEDs.c: 27: LATFbits.LATF1 = ledState;
 13537  12D6  0C72               	rrf	i1set_leds_top@ledState,w
 13538  12D7  1C03               	skipc
 13539  12D8  108C               	bcf	12,1	;volatile
 13540  12D9  1803               	skipnc
 13541  12DA  148C               	bsf	12,1	;volatile
 13542                           
 13543                           ;LEDs.c: 28: break;
 13544  12DB  0008               	return
 13545  12DC                     i1l4443:	
 13546                           ;LEDs.c: 29: case 3:
 13547                           
 13548                           
 13549                           ;LEDs.c: 30: LATFbits.LATF2 = ledState;
 13550  12DC  0C72               	rrf	i1set_leds_top@ledState,w
 13551  12DD  1C03               	skipc
 13552  12DE  110C               	bcf	12,2	;volatile
 13553  12DF  1803               	skipnc
 13554  12E0  150C               	bsf	12,2	;volatile
 13555                           
 13556                           ;LEDs.c: 31: break;
 13557  12E1  0008               	return
 13558  12E2                     i1l4445:	
 13559                           ;LEDs.c: 32: case 4:
 13560                           
 13561                           
 13562                           ;LEDs.c: 33: LATFbits.LATF3 = ledState;
 13563  12E2  0C72               	rrf	i1set_leds_top@ledState,w
 13564  12E3  1C03               	skipc
 13565  12E4  118C               	bcf	12,3	;volatile
 13566  12E5  1803               	skipnc
 13567  12E6  158C               	bsf	12,3	;volatile
 13568                           
 13569                           ;LEDs.c: 34: break;
 13570  12E7  0008               	return
 13571  12E8                     i1l4447:	
 13572                           ;LEDs.c: 35: case 5:
 13573                           
 13574                           
 13575                           ;LEDs.c: 36: LATFbits.LATF4 = ledState;
 13576  12E8  0C72               	rrf	i1set_leds_top@ledState,w
 13577  12E9  1C03               	skipc
 13578  12EA  120C               	bcf	12,4	;volatile
 13579  12EB  1803               	skipnc
 13580  12EC  160C               	bsf	12,4	;volatile
 13581                           
 13582                           ;LEDs.c: 39: break;
 13583                           
 13584                           ;LEDs.c: 38: case 6:
 13585                           
 13586                           ;LEDs.c: 37: break;
 13587  12ED  0008               	return
 13588  12EE                     i1l698:	
 13589                           ;LEDs.c: 40: case 100:
 13590                           
 13591                           
 13592                           ;LEDs.c: 41: LATFbits.LATF0 = 1;
 13593  12EE  140C               	bsf	12,0	;volatile
 13594                           
 13595                           ;LEDs.c: 42: LATFbits.LATF1 = 1;
 13596  12EF  148C               	bsf	12,1	;volatile
 13597                           
 13598                           ;LEDs.c: 43: LATFbits.LATF2 = 1;
 13599  12F0  150C               	bsf	12,2	;volatile
 13600                           
 13601                           ;LEDs.c: 44: LATFbits.LATF3 = 1;
 13602  12F1  158C               	bsf	12,3	;volatile
 13603                           
 13604                           ;LEDs.c: 45: LATFbits.LATF4 = 1;
 13605  12F2  160C               	bsf	12,4	;volatile
 13606                           
 13607                           ;LEDs.c: 47: }
 13608                           
 13609                           ;LEDs.c: 46: break;
 13610  12F3  0008               	return
 13611  12F4                     i1l4451:	
 13612                           
 13613                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13614                           ; Switch size 1, requested type "space"
 13615                           ; Number of cases is 1, Range of values is 0 to 0
 13616                           ; switch strategies available:
 13617                           ; Name         Instructions Cycles
 13618                           ; simple_byte            4     3 (average)
 13619                           ; direct_byte            8     6 (fixed)
 13620                           ; jumptable            260     6 (fixed)
 13621                           ;	Chosen strategy is simple_byte
 13622  12F4  0871               	movf	i1set_leds_top@x+1,w
 13623  12F5  3A00               	xorlw	0	; case 0
 13624  12F6  1903               	skipnz
 13625  12F7  2AF9               	goto	i1l6317
 13626  12F8  2B10               	goto	i1l699
 13627  12F9                     i1l6317:	
 13628                           
 13629                           ; Switch size 1, requested type "space"
 13630                           ; Number of cases is 7, Range of values is 1 to 100
 13631                           ; switch strategies available:
 13632                           ; Name         Instructions Cycles
 13633                           ; simple_byte           22    12 (average)
 13634                           ; direct_byte          209     9 (fixed)
 13635                           ; jumptable            263     9 (fixed)
 13636                           ;	Chosen strategy is simple_byte
 13637  12F9  0870               	movf	i1set_leds_top@x,w
 13638  12FA  3A01               	xorlw	1	; case 1
 13639  12FB  1903               	skipnz
 13640  12FC  2AD0               	goto	i1l4439
 13641  12FD  3A03               	xorlw	3	; case 2
 13642  12FE  1903               	skipnz
 13643  12FF  2AD6               	goto	i1l4441
 13644  1300  3A01               	xorlw	1	; case 3
 13645  1301  1903               	skipnz
 13646  1302  2ADC               	goto	i1l4443
 13647  1303  3A07               	xorlw	7	; case 4
 13648  1304  1903               	skipnz
 13649  1305  2AE2               	goto	i1l4445
 13650  1306  3A01               	xorlw	1	; case 5
 13651  1307  1903               	skipnz
 13652  1308  2AE8               	goto	i1l4447
 13653  1309  3A03               	xorlw	3	; case 6
 13654  130A  1903               	skipnz
 13655  130B  2B10               	goto	i1l699
 13656  130C  3A62               	xorlw	98	; case 100
 13657  130D  1903               	skipnz
 13658  130E  2AEE               	goto	i1l698
 13659  130F  2B10               	goto	i1l699
 13660  1310                     i1l699:	
 13661  1310  0008               	return
 13662  1311                     __end_ofi1_set_leds_top:	
 13663                           
 13664                           	psect	text47
 13665  11BF                     __ptext47:	
 13666 ;; *************** function _modulation *****************
 13667 ;; Defined at:
 13668 ;;		line 181 in file "user.c"
 13669 ;; Parameters:    Size  Location     Type
 13670 ;;  x               4   14[BANK0 ] long 
 13671 ;;  y               4   18[BANK0 ] long 
 13672 ;; Auto vars:     Size  Location     Type
 13673 ;;		None
 13674 ;; Return value:  Size  Location     Type
 13675 ;;                  4   14[BANK0 ] long 
 13676 ;; Registers used:
 13677 ;;		wreg, status,2, status,0, pclath, cstack
 13678 ;; Tracked objects:
 13679 ;;		On entry : 0/0
 13680 ;;		On exit  : 0/0
 13681 ;;		Unchanged: 0/0
 13682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13683 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13685 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13686 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13687 ;;Total ram usage:       12 bytes
 13688 ;; Hardware stack levels used:    1
 13689 ;; Hardware stack levels required when called:    1
 13690 ;; This function calls:
 13691 ;;		i1___aldiv
 13692 ;;		i1___lmul
 13693 ;; This function is called by:
 13694 ;;		_isr
 13695 ;; This function uses a non-reentrant model
 13696 ;;
 13697                           
 13698                           
 13699                           ;psect for function _modulation
 13700  11BF                     _modulation:	
 13701                           
 13702                           ;user.c: 184: return (127500 + (y * x)) / 1000;
 13703                           
 13704                           ;incstack = 0
 13705                           ; Regs used in _modulation: [wreg+status,2+status,0+pclath+cstack]
 13706  11BF  3000               	movlw	0
 13707  11C0  0020               	movlb	0	; select bank0
 13708  11C1  00A3               	movwf	i1___aldiv@divisor+3
 13709  11C2  3000               	movlw	0
 13710  11C3  00A2               	movwf	i1___aldiv@divisor+2
 13711  11C4  3003               	movlw	3
 13712  11C5  00A1               	movwf	i1___aldiv@divisor+1
 13713  11C6  30E8               	movlw	232
 13714  11C7  00A0               	movwf	i1___aldiv@divisor
 13715  11C8  300C               	movlw	12
 13716  11C9  00B6               	movwf	??_modulation
 13717  11CA  30F2               	movlw	242
 13718  11CB  00B7               	movwf	??_modulation+1
 13719  11CC  3001               	movlw	1
 13720  11CD  00B8               	movwf	??_modulation+2
 13721  11CE  3000               	movlw	0
 13722  11CF  00B9               	movwf	??_modulation+3
 13723  11D0  0835               	movf	modulation@y+3,w
 13724  11D1  00F3               	movwf	i1___lmul@multiplier+3
 13725  11D2  0834               	movf	modulation@y+2,w
 13726  11D3  00F2               	movwf	i1___lmul@multiplier+2
 13727  11D4  0833               	movf	modulation@y+1,w
 13728  11D5  00F1               	movwf	i1___lmul@multiplier+1
 13729  11D6  0832               	movf	modulation@y,w
 13730  11D7  00F0               	movwf	i1___lmul@multiplier
 13731  11D8  0831               	movf	modulation@x+3,w
 13732  11D9  00F7               	movwf	i1___lmul@multiplicand+3
 13733  11DA  0830               	movf	modulation@x+2,w
 13734  11DB  00F6               	movwf	i1___lmul@multiplicand+2
 13735  11DC  082F               	movf	modulation@x+1,w
 13736  11DD  00F5               	movwf	i1___lmul@multiplicand+1
 13737  11DE  082E               	movf	modulation@x,w
 13738  11DF  00F4               	movwf	i1___lmul@multiplicand
 13739  11E0  319F  2741  3191   	fcall	i1___lmul
 13740  11E3  0870               	movf	?i1___lmul,w
 13741  11E4  0020               	movlb	0	; select bank0
 13742  11E5  07B6               	addwf	??_modulation,f
 13743  11E6  0871               	movf	?i1___lmul+1,w
 13744  11E7  3DB7               	addwfc	??_modulation+1,f
 13745  11E8  0872               	movf	?i1___lmul+2,w
 13746  11E9  3DB8               	addwfc	??_modulation+2,f
 13747  11EA  0873               	movf	?i1___lmul+3,w
 13748  11EB  3DB9               	addwfc	??_modulation+3,f
 13749  11EC  0839               	movf	??_modulation+3,w
 13750  11ED  00A7               	movwf	i1___aldiv@dividend+3
 13751  11EE  0838               	movf	??_modulation+2,w
 13752  11EF  00A6               	movwf	i1___aldiv@dividend+2
 13753  11F0  0837               	movf	??_modulation+1,w
 13754  11F1  00A5               	movwf	i1___aldiv@dividend+1
 13755  11F2  0836               	movf	??_modulation,w
 13756  11F3  00A4               	movwf	i1___aldiv@dividend
 13757  11F4  3195  25D2         	fcall	i1___aldiv
 13758  11F6  0020               	movlb	0	; select bank0
 13759  11F7  0823               	movf	?i1___aldiv+3,w
 13760  11F8  00B1               	movwf	?_modulation+3
 13761  11F9  0822               	movf	?i1___aldiv+2,w
 13762  11FA  00B0               	movwf	?_modulation+2
 13763  11FB  0821               	movf	?i1___aldiv+1,w
 13764  11FC  00AF               	movwf	?_modulation+1
 13765  11FD  0820               	movf	?i1___aldiv,w
 13766  11FE  00AE               	movwf	?_modulation
 13767  11FF  0008               	return
 13768  1200                     __end_of_modulation:	
 13769                           
 13770                           	psect	text48
 13771  1F41                     __ptext48:	
 13772 ;; *************** function i1___lmul *****************
 13773 ;; Defined at:
 13774 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\Umul32.c"
 13775 ;; Parameters:    Size  Location     Type
 13776 ;;  multiplier      4    0[COMMON] unsigned long 
 13777 ;;  multiplicand    4    4[COMMON] unsigned long 
 13778 ;; Auto vars:     Size  Location     Type
 13779 ;;  __lmul          4    8[COMMON] unsigned long 
 13780 ;; Return value:  Size  Location     Type
 13781 ;;                  4    0[COMMON] unsigned long 
 13782 ;; Registers used:
 13783 ;;		wreg, status,2, status,0
 13784 ;; Tracked objects:
 13785 ;;		On entry : 0/0
 13786 ;;		On exit  : 0/0
 13787 ;;		Unchanged: 0/0
 13788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13789 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13790 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13792 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13793 ;;Total ram usage:       12 bytes
 13794 ;; Hardware stack levels used:    1
 13795 ;; This function calls:
 13796 ;;		Nothing
 13797 ;; This function is called by:
 13798 ;;		_modulation
 13799 ;; This function uses a non-reentrant model
 13800 ;;
 13801                           
 13802                           
 13803                           ;psect for function i1___lmul
 13804  1F41                     i1___lmul:	
 13805                           
 13806                           ;incstack = 0
 13807                           ; Regs used in i1___lmul: [wreg+status,2+status,0]
 13808  1F41  3000               	movlw	0
 13809  1F42  00FB               	movwf	i1___lmul@product+3
 13810  1F43  3000               	movlw	0
 13811  1F44  00FA               	movwf	i1___lmul@product+2
 13812  1F45  3000               	movlw	0
 13813  1F46  00F9               	movwf	i1___lmul@product+1
 13814  1F47  3000               	movlw	0
 13815  1F48  00F8               	movwf	i1___lmul@product
 13816  1F49                     i1l3941:	
 13817  1F49  1C70               	btfss	i1___lmul@multiplier,0
 13818  1F4A  2F53               	goto	i1l3945
 13819  1F4B  0874               	movf	i1___lmul@multiplicand,w
 13820  1F4C  07F8               	addwf	i1___lmul@product,f
 13821  1F4D  0875               	movf	i1___lmul@multiplicand+1,w
 13822  1F4E  3DF9               	addwfc	i1___lmul@product+1,f
 13823  1F4F  0876               	movf	i1___lmul@multiplicand+2,w
 13824  1F50  3DFA               	addwfc	i1___lmul@product+2,f
 13825  1F51  0877               	movf	i1___lmul@multiplicand+3,w
 13826  1F52  3DFB               	addwfc	i1___lmul@product+3,f
 13827  1F53                     i1l3945:	
 13828  1F53  3001               	movlw	1
 13829  1F54                     u354_25:	
 13830  1F54  35F4               	lslf	i1___lmul@multiplicand,f
 13831  1F55  0DF5               	rlf	i1___lmul@multiplicand+1,f
 13832  1F56  0DF6               	rlf	i1___lmul@multiplicand+2,f
 13833  1F57  0DF7               	rlf	i1___lmul@multiplicand+3,f
 13834  1F58  0B89               	decfsz	9,f
 13835  1F59  2F54               	goto	u354_25
 13836  1F5A  3001               	movlw	1
 13837  1F5B                     u355_25:	
 13838  1F5B  36F3               	lsrf	i1___lmul@multiplier+3,f
 13839  1F5C  0CF2               	rrf	i1___lmul@multiplier+2,f
 13840  1F5D  0CF1               	rrf	i1___lmul@multiplier+1,f
 13841  1F5E  0CF0               	rrf	i1___lmul@multiplier,f
 13842  1F5F  0B89               	decfsz	9,f
 13843  1F60  2F5B               	goto	u355_25
 13844  1F61  0873               	movf	i1___lmul@multiplier+3,w
 13845  1F62  0472               	iorwf	i1___lmul@multiplier+2,w
 13846  1F63  0471               	iorwf	i1___lmul@multiplier+1,w
 13847  1F64  0470               	iorwf	i1___lmul@multiplier,w
 13848  1F65  1D03               	skipz
 13849  1F66  2F49               	goto	i1l3941
 13850  1F67  087B               	movf	i1___lmul@product+3,w
 13851  1F68  00F3               	movwf	?i1___lmul+3
 13852  1F69  087A               	movf	i1___lmul@product+2,w
 13853  1F6A  00F2               	movwf	?i1___lmul+2
 13854  1F6B  0879               	movf	i1___lmul@product+1,w
 13855  1F6C  00F1               	movwf	?i1___lmul+1
 13856  1F6D  0878               	movf	i1___lmul@product,w
 13857  1F6E  00F0               	movwf	?i1___lmul
 13858  1F6F  0008               	return
 13859  1F70                     __end_ofi1___lmul:	
 13860                           
 13861                           	psect	text49
 13862  15D2                     __ptext49:	
 13863 ;; *************** function i1___aldiv *****************
 13864 ;; Defined at:
 13865 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\aldiv.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  divisor         4    0[BANK0 ] long 
 13868 ;;  dividend        4    4[BANK0 ] long 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;  __aldiv         4   10[BANK0 ] long 
 13871 ;;  __aldiv         1    9[BANK0 ] unsigned char 
 13872 ;;  __aldiv         1    8[BANK0 ] unsigned char 
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  4    0[BANK0 ] long 
 13875 ;; Registers used:
 13876 ;;		wreg, status,2, status,0
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 13882 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13883 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13884 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13885 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 13886 ;;Total ram usage:       15 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; This function calls:
 13889 ;;		Nothing
 13890 ;; This function is called by:
 13891 ;;		_modulation
 13892 ;; This function uses a non-reentrant model
 13893 ;;
 13894                           
 13895                           
 13896                           ;psect for function i1___aldiv
 13897  15D2                     i1___aldiv:	
 13898                           
 13899                           ;incstack = 0
 13900                           ; Regs used in i1___aldiv: [wreg+status,2+status,0]
 13901  15D2  0020               	movlb	0	; select bank0
 13902  15D3  01A9               	clrf	i1___aldiv@sign
 13903  15D4  1FA3               	btfss	i1___aldiv@divisor+3,7
 13904  15D5  2DE3               	goto	i1l1373
 13905  15D6  09A0               	comf	i1___aldiv@divisor,f
 13906  15D7  09A1               	comf	i1___aldiv@divisor+1,f
 13907  15D8  09A2               	comf	i1___aldiv@divisor+2,f
 13908  15D9  09A3               	comf	i1___aldiv@divisor+3,f
 13909  15DA  0AA0               	incf	i1___aldiv@divisor,f
 13910  15DB  1903               	skipnz
 13911  15DC  0AA1               	incf	i1___aldiv@divisor+1,f
 13912  15DD  1903               	skipnz
 13913  15DE  0AA2               	incf	i1___aldiv@divisor+2,f
 13914  15DF  1903               	skipnz
 13915  15E0  0AA3               	incf	i1___aldiv@divisor+3,f
 13916  15E1  01A9               	clrf	i1___aldiv@sign
 13917  15E2  0AA9               	incf	i1___aldiv@sign,f
 13918  15E3                     i1l1373:	
 13919  15E3  1FA7               	btfss	i1___aldiv@dividend+3,7
 13920  15E4  2DF4               	goto	i1l3963
 13921  15E5  09A4               	comf	i1___aldiv@dividend,f
 13922  15E6  09A5               	comf	i1___aldiv@dividend+1,f
 13923  15E7  09A6               	comf	i1___aldiv@dividend+2,f
 13924  15E8  09A7               	comf	i1___aldiv@dividend+3,f
 13925  15E9  0AA4               	incf	i1___aldiv@dividend,f
 13926  15EA  1903               	skipnz
 13927  15EB  0AA5               	incf	i1___aldiv@dividend+1,f
 13928  15EC  1903               	skipnz
 13929  15ED  0AA6               	incf	i1___aldiv@dividend+2,f
 13930  15EE  1903               	skipnz
 13931  15EF  0AA7               	incf	i1___aldiv@dividend+3,f
 13932  15F0  3001               	movlw	1
 13933  15F1  00FC               	movwf	??i1___aldiv
 13934  15F2  087C               	movf	??i1___aldiv,w
 13935  15F3  06A9               	xorwf	i1___aldiv@sign,f
 13936  15F4                     i1l3963:	
 13937  15F4  3000               	movlw	0
 13938  15F5  00AD               	movwf	i1___aldiv@quotient+3
 13939  15F6  3000               	movlw	0
 13940  15F7  00AC               	movwf	i1___aldiv@quotient+2
 13941  15F8  3000               	movlw	0
 13942  15F9  00AB               	movwf	i1___aldiv@quotient+1
 13943  15FA  3000               	movlw	0
 13944  15FB  00AA               	movwf	i1___aldiv@quotient
 13945  15FC  0823               	movf	i1___aldiv@divisor+3,w
 13946  15FD  0422               	iorwf	i1___aldiv@divisor+2,w
 13947  15FE  0421               	iorwf	i1___aldiv@divisor+1,w
 13948  15FF  0420               	iorwf	i1___aldiv@divisor,w
 13949  1600  1903               	skipnz
 13950  1601  2E3D               	goto	i1l3985
 13951  1602  01A8               	clrf	i1___aldiv@counter
 13952  1603  0AA8               	incf	i1___aldiv@counter,f
 13953  1604                     i1l3971:	
 13954  1604  1BA3               	btfsc	i1___aldiv@divisor+3,7
 13955  1605  2E12               	goto	i1l3973
 13956  1606  3001               	movlw	1
 13957  1607                     u360_25:	
 13958  1607  35A0               	lslf	i1___aldiv@divisor,f
 13959  1608  0DA1               	rlf	i1___aldiv@divisor+1,f
 13960  1609  0DA2               	rlf	i1___aldiv@divisor+2,f
 13961  160A  0DA3               	rlf	i1___aldiv@divisor+3,f
 13962  160B  0B89               	decfsz	9,f
 13963  160C  2E07               	goto	u360_25
 13964  160D  3001               	movlw	1
 13965  160E  00FC               	movwf	??i1___aldiv
 13966  160F  087C               	movf	??i1___aldiv,w
 13967  1610  07A8               	addwf	i1___aldiv@counter,f
 13968  1611  2E04               	goto	i1l3971
 13969  1612                     i1l3973:	
 13970  1612  3001               	movlw	1
 13971  1613                     u362_25:	
 13972  1613  35AA               	lslf	i1___aldiv@quotient,f
 13973  1614  0DAB               	rlf	i1___aldiv@quotient+1,f
 13974  1615  0DAC               	rlf	i1___aldiv@quotient+2,f
 13975  1616  0DAD               	rlf	i1___aldiv@quotient+3,f
 13976  1617  0B89               	decfsz	9,f
 13977  1618  2E13               	goto	u362_25
 13978  1619  0823               	movf	i1___aldiv@divisor+3,w
 13979  161A  0227               	subwf	i1___aldiv@dividend+3,w
 13980  161B  1D03               	skipz
 13981  161C  2E27               	goto	u363_25
 13982  161D  0822               	movf	i1___aldiv@divisor+2,w
 13983  161E  0226               	subwf	i1___aldiv@dividend+2,w
 13984  161F  1D03               	skipz
 13985  1620  2E27               	goto	u363_25
 13986  1621  0821               	movf	i1___aldiv@divisor+1,w
 13987  1622  0225               	subwf	i1___aldiv@dividend+1,w
 13988  1623  1D03               	skipz
 13989  1624  2E27               	goto	u363_25
 13990  1625  0820               	movf	i1___aldiv@divisor,w
 13991  1626  0224               	subwf	i1___aldiv@dividend,w
 13992  1627                     u363_25:	
 13993  1627  1C03               	skipc
 13994  1628  2E32               	goto	i1l3981
 13995  1629  0820               	movf	i1___aldiv@divisor,w
 13996  162A  02A4               	subwf	i1___aldiv@dividend,f
 13997  162B  0821               	movf	i1___aldiv@divisor+1,w
 13998  162C  3BA5               	subwfb	i1___aldiv@dividend+1,f
 13999  162D  0822               	movf	i1___aldiv@divisor+2,w
 14000  162E  3BA6               	subwfb	i1___aldiv@dividend+2,f
 14001  162F  0823               	movf	i1___aldiv@divisor+3,w
 14002  1630  3BA7               	subwfb	i1___aldiv@dividend+3,f
 14003  1631  142A               	bsf	i1___aldiv@quotient,0
 14004  1632                     i1l3981:	
 14005  1632  3001               	movlw	1
 14006  1633                     u364_25:	
 14007  1633  36A3               	lsrf	i1___aldiv@divisor+3,f
 14008  1634  0CA2               	rrf	i1___aldiv@divisor+2,f
 14009  1635  0CA1               	rrf	i1___aldiv@divisor+1,f
 14010  1636  0CA0               	rrf	i1___aldiv@divisor,f
 14011  1637  0B89               	decfsz	9,f
 14012  1638  2E33               	goto	u364_25
 14013  1639  3001               	movlw	1
 14014  163A  02A8               	subwf	i1___aldiv@counter,f
 14015  163B  1D03               	btfss	3,2
 14016  163C  2E12               	goto	i1l3973
 14017  163D                     i1l3985:	
 14018  163D  0829               	movf	i1___aldiv@sign,w
 14019  163E  1903               	btfsc	3,2
 14020  163F  2E4B               	goto	i1l3989
 14021  1640  09AA               	comf	i1___aldiv@quotient,f
 14022  1641  09AB               	comf	i1___aldiv@quotient+1,f
 14023  1642  09AC               	comf	i1___aldiv@quotient+2,f
 14024  1643  09AD               	comf	i1___aldiv@quotient+3,f
 14025  1644  0AAA               	incf	i1___aldiv@quotient,f
 14026  1645  1903               	skipnz
 14027  1646  0AAB               	incf	i1___aldiv@quotient+1,f
 14028  1647  1903               	skipnz
 14029  1648  0AAC               	incf	i1___aldiv@quotient+2,f
 14030  1649  1903               	skipnz
 14031  164A  0AAD               	incf	i1___aldiv@quotient+3,f
 14032  164B                     i1l3989:	
 14033  164B  082D               	movf	i1___aldiv@quotient+3,w
 14034  164C  00A3               	movwf	?i1___aldiv+3
 14035  164D  082C               	movf	i1___aldiv@quotient+2,w
 14036  164E  00A2               	movwf	?i1___aldiv+2
 14037  164F  082B               	movf	i1___aldiv@quotient+1,w
 14038  1650  00A1               	movwf	?i1___aldiv+1
 14039  1651  082A               	movf	i1___aldiv@quotient,w
 14040  1652  00A0               	movwf	?i1___aldiv
 14041  1653  0008               	return
 14042  1654                     __end_ofi1___aldiv:	
 14043                           
 14044                           	psect	text50
 14045  13F6                     __ptext50:	
 14046 ;; *************** function ___awdiv *****************
 14047 ;; Defined at:
 14048 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.37\sources\common\awdiv.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  divisor         2    0[COMMON] int 
 14051 ;;  dividend        2    2[COMMON] int 
 14052 ;; Auto vars:     Size  Location     Type
 14053 ;;  quotient        2    7[COMMON] int 
 14054 ;;  sign            1    6[COMMON] unsigned char 
 14055 ;;  counter         1    5[COMMON] unsigned char 
 14056 ;; Return value:  Size  Location     Type
 14057 ;;                  2    0[COMMON] int 
 14058 ;; Registers used:
 14059 ;;		wreg, status,2, status,0
 14060 ;; Tracked objects:
 14061 ;;		On entry : 0/0
 14062 ;;		On exit  : 0/0
 14063 ;;		Unchanged: 0/0
 14064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18
 14065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14066 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14067 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14068 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0
 14069 ;;Total ram usage:        9 bytes
 14070 ;; Hardware stack levels used:    1
 14071 ;; This function calls:
 14072 ;;		Nothing
 14073 ;; This function is called by:
 14074 ;;		_isr
 14075 ;; This function uses a non-reentrant model
 14076 ;;
 14077                           
 14078                           
 14079                           ;psect for function ___awdiv
 14080  13F6                     ___awdiv:	
 14081                           
 14082                           ;incstack = 0
 14083                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14084  13F6  01F6               	clrf	___awdiv@sign
 14085  13F7  1FF1               	btfss	___awdiv@divisor+1,7
 14086  13F8  2C00               	goto	i1l4401
 14087  13F9  09F0               	comf	___awdiv@divisor,f
 14088  13FA  09F1               	comf	___awdiv@divisor+1,f
 14089  13FB  0AF0               	incf	___awdiv@divisor,f
 14090  13FC  1903               	skipnz
 14091  13FD  0AF1               	incf	___awdiv@divisor+1,f
 14092  13FE  01F6               	clrf	___awdiv@sign
 14093  13FF  0AF6               	incf	___awdiv@sign,f
 14094  1400                     i1l4401:	
 14095  1400  1FF3               	btfss	___awdiv@dividend+1,7
 14096  1401  2C0B               	goto	i1l4407
 14097  1402  09F2               	comf	___awdiv@dividend,f
 14098  1403  09F3               	comf	___awdiv@dividend+1,f
 14099  1404  0AF2               	incf	___awdiv@dividend,f
 14100  1405  1903               	skipnz
 14101  1406  0AF3               	incf	___awdiv@dividend+1,f
 14102  1407  3001               	movlw	1
 14103  1408  00F4               	movwf	??___awdiv
 14104  1409  0874               	movf	??___awdiv,w
 14105  140A  06F6               	xorwf	___awdiv@sign,f
 14106  140B                     i1l4407:	
 14107  140B  01F7               	clrf	___awdiv@quotient
 14108  140C  01F8               	clrf	___awdiv@quotient+1
 14109  140D  0870               	movf	___awdiv@divisor,w
 14110  140E  0471               	iorwf	___awdiv@divisor+1,w
 14111  140F  1903               	btfsc	3,2
 14112  1410  2C3A               	goto	i1l4429
 14113  1411  01F5               	clrf	___awdiv@counter
 14114  1412  0AF5               	incf	___awdiv@counter,f
 14115  1413                     i1l4417:	
 14116  1413  1BF1               	btfsc	___awdiv@divisor+1,7
 14117  1414  2C1F               	goto	i1l4419
 14118  1415  3001               	movlw	1
 14119  1416                     u442_25:	
 14120  1416  35F0               	lslf	___awdiv@divisor,f
 14121  1417  0DF1               	rlf	___awdiv@divisor+1,f
 14122  1418  0B89               	decfsz	9,f
 14123  1419  2C16               	goto	u442_25
 14124  141A  3001               	movlw	1
 14125  141B  00F4               	movwf	??___awdiv
 14126  141C  0874               	movf	??___awdiv,w
 14127  141D  07F5               	addwf	___awdiv@counter,f
 14128  141E  2C13               	goto	i1l4417
 14129  141F                     i1l4419:	
 14130  141F  3001               	movlw	1
 14131  1420                     u444_25:	
 14132  1420  35F7               	lslf	___awdiv@quotient,f
 14133  1421  0DF8               	rlf	___awdiv@quotient+1,f
 14134  1422  0B89               	decfsz	9,f
 14135  1423  2C20               	goto	u444_25
 14136  1424  0871               	movf	___awdiv@divisor+1,w
 14137  1425  0273               	subwf	___awdiv@dividend+1,w
 14138  1426  1D03               	skipz
 14139  1427  2C2A               	goto	u445_25
 14140  1428  0870               	movf	___awdiv@divisor,w
 14141  1429  0272               	subwf	___awdiv@dividend,w
 14142  142A                     u445_25:	
 14143  142A  1C03               	skipc
 14144  142B  2C31               	goto	i1l4425
 14145  142C  0870               	movf	___awdiv@divisor,w
 14146  142D  02F2               	subwf	___awdiv@dividend,f
 14147  142E  0871               	movf	___awdiv@divisor+1,w
 14148  142F  3BF3               	subwfb	___awdiv@dividend+1,f
 14149  1430  1477               	bsf	___awdiv@quotient,0
 14150  1431                     i1l4425:	
 14151  1431  3001               	movlw	1
 14152  1432                     u446_25:	
 14153  1432  36F1               	lsrf	___awdiv@divisor+1,f
 14154  1433  0CF0               	rrf	___awdiv@divisor,f
 14155  1434  0B89               	decfsz	9,f
 14156  1435  2C32               	goto	u446_25
 14157  1436  3001               	movlw	1
 14158  1437  02F5               	subwf	___awdiv@counter,f
 14159  1438  1D03               	btfss	3,2
 14160  1439  2C1F               	goto	i1l4419
 14161  143A                     i1l4429:	
 14162  143A  0876               	movf	___awdiv@sign,w
 14163  143B  1903               	btfsc	3,2
 14164  143C  2C42               	goto	i1l4433
 14165  143D  09F7               	comf	___awdiv@quotient,f
 14166  143E  09F8               	comf	___awdiv@quotient+1,f
 14167  143F  0AF7               	incf	___awdiv@quotient,f
 14168  1440  1903               	skipnz
 14169  1441  0AF8               	incf	___awdiv@quotient+1,f
 14170  1442                     i1l4433:	
 14171  1442  0878               	movf	___awdiv@quotient+1,w
 14172  1443  00F1               	movwf	?___awdiv+1
 14173  1444  0877               	movf	___awdiv@quotient,w
 14174  1445  00F0               	movwf	?___awdiv
 14175  1446  0008               	return
 14176  1447                     __end_of___awdiv:	
 14177  007E                     btemp	set	126	;btemp
 14178  007E                     int$flags	set	126
 14179  007E                     wtemp	set	126
 14180  007E                     wtemp0	set	126
 14181  0080                     wtemp1	set	128
 14182  0082                     wtemp2	set	130
 14183  0084                     wtemp3	set	132
 14184  0086                     wtemp4	set	134
 14185  0088                     wtemp5	set	136
 14186  007F                     wtemp6	set	127
 14187  007E                     ttemp	set	126
 14188  007E                     ttemp0	set	126
 14189  0081                     ttemp1	set	129
 14190  0084                     ttemp2	set	132
 14191  0087                     ttemp3	set	135
 14192  007F                     ttemp4	set	127
 14193  007E                     ltemp	set	126
 14194  007E                     ltemp0	set	126
 14195  0082                     ltemp1	set	130
 14196  0086                     ltemp2	set	134
 14197  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        785
    BSS         212
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     37      74
    BANK1            80     80      80
    BANK2            80     37      76
    BANK3            80      9      80
    BANK4            80      0      40
    BANK5            80      0      44
    BANK6            80      0      61
    BANK7            80      0      61
    BANK8            80      0      61
    BANK9            80      0      64
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           40      0       0
    BANK13            0      0       0
    BANK14            0      0       0
    BANK15            0      0       0
    BANK16            0      0       0
    BANK17            0      0       0
    BANK18            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> trunc@expon(BANK2[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _modulation->i1___aldiv
    i1___aldiv->i1___lmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->_modulation
    _modulation->i1___aldiv

Critical Paths under _main in BANK1

    _main->_trunc
    _updateSwitchTap->_setDoublePressState
    _updateSwitchBypass->_setDoublePressState
    _updateSwitchBypass->_setSwitchBypassState
    _setDoublePressState->_wait_ms
    _trunc->___fttol
    ___altoft->___fttol
    _showBootSequence->_star_tactiles
    _star_tactiles->_wait_ms
    _solidring_tactiles->_wait_ms
    _set_subdivision->___fttol
    ___fttol->_map
    ___awtoft->___ftpack
    _read_top_tactile->_wait_ms
    _read_bottom_tactile->_wait_ms
    _map->___ftdiv
    ___ftmul->___ftadd
    ___ftdiv->___ftmul
    ___ftadd->___ftpack
    ___ftadd->___ftpack
    _initSwitchBypass->_setSwitchBypassState
    _setSwitchBypassState->_wait_ms
    _wait_ms->___lmul
    _ReadSavedSettings->_set_leds_top

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_trunc
    _trunc->___altoft
    ___altoft->___fttol
    _set_subdivision->___fttol

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _isr in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _isr in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _isr in BANK18

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                24    24      0   60788
                                             22 BANK2     15    15      0
                                              0 BANK3      9     9      0
                _ConfigureOscillator
                            _InitApp
                     _InitializeTaps
                  _ReadSavedSettings
                           ___awtoft
                            ___fttol
                        _adc_convert
                   _initSwitchBypass
                                _map
                _read_bottom_tactile
                   _read_top_tactile
                    _set_subdivision
                   _showBootSequence
                              _trunc
                 _updateSwitchBypass
                    _updateSwitchTap
                        _update_mode
 ---------------------------------------------------------------------------------
 (1) _update_mode                                          1     1      0       0
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _updateSwitchTap                                      9     9      0    3308
                                             22 BANK1      9     9      0
                            ___aldiv
                _setDoublePressState
                    _setLongTapState
 ---------------------------------------------------------------------------------
 (2) _setLongTapState                                      4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     683
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 (1) _updateSwitchBypass                                   2     2      0    4681
                                             22 BANK1      2     2      0
                _setDoublePressState
                   _setFeedbackState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setFeedbackState                                     4     2      2     247
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (2) _setDoublePressState                                  4     2      2    2140
                                             18 BANK1      4     2      2
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _trunc                                                9     6      3    4488
                                             79 BANK1      1     1      0
                                             14 BANK2      8     5      3
                           ___altoft
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _frexp                                                6     2      4     452
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___altoft                                             8     4      4    2805
                                              6 BANK2      8     4      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _showBootSequence                                     1     1      0    7868
                                             25 BANK1      1     1      0
                 _getCurrentLEDState
                    _restoreLEDState
                 _solidring_tactiles
                      _star_tactiles
 ---------------------------------------------------------------------------------
 (2) _star_tactiles                                        7     7      0    4047
                                             18 BANK1      7     7      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _solidring_tactiles                                   3     3      0    3821
                                             18 BANK1      3     3      0
                    _set_leds_bottom
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (2) _restoreLEDState                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getCurrentLEDState                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _set_subdivision                                     12     8      4   11489
                                              6 BANK2     12     8      4
                           ___awtoft
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     910
                                             71 BANK1      8     4      4
                                              0 BANK2      6     6      0
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                                _map (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             6     3      3    3273
                                              8 BANK1      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _read_top_tactile                                     1     1      0    3186
                                             18 BANK1      1     1      0
                       _set_leds_top
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _read_bottom_tactile                                  1     1      0    2324
                                             18 BANK1      1     1      0
                    _set_leds_bottom
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _map                                                 18     3     15   14273
                                             53 BANK1     18     3     15
                           ___awtoft (ARG)
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     430
                                              0 BANK1      3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             16    10      6    3474
                                             21 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3406
                                             37 BANK1     16    10      6
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             13     7      6    4787
                                              8 BANK1     13     7      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (1) _initSwitchBypass                                     2     2      0    2328
                                             22 BANK1      2     2      0
               _getSwitchBypassState
               _setSwitchBypassState
 ---------------------------------------------------------------------------------
 (2) _setSwitchBypassState                                 4     2      2    2294
                                             18 BANK1      4     2      2
            _updateSwitchBypassState
                            _wait_ms
 ---------------------------------------------------------------------------------
 (3) _wait_ms                                              6     4      2    1754
                                             12 BANK1      6     4      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     374
                                              0 BANK1     12     4      8
 ---------------------------------------------------------------------------------
 (3) _updateSwitchBypassState                              2     0      2      77
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _getSwitchBypassState                                 2     0      2       0
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _adc_convert                                          4     2      2      31
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _ReadSavedSettings                                    1     1      0    2329
                                              4 BANK1      1     1      0
                     _FLASH_ReadWord
                    _set_leds_bottom
                       _set_leds_top
 ---------------------------------------------------------------------------------
 (3) _set_leds_top                                         4     0      4    1432
                                              0 BANK1      4     0      4
 ---------------------------------------------------------------------------------
 (3) _set_leds_bottom                                      2     0      2     570
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     327
                                              0 BANK1      3     1      2
 ---------------------------------------------------------------------------------
 (1) _InitializeTaps                                       3     3      0      99
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
                           _init_adc
                           _init_pwm
 ---------------------------------------------------------------------------------
 (2) _init_pwm                                             0     0      0       0
                        _init_timer0
                        _init_timer2
 ---------------------------------------------------------------------------------
 (3) _init_timer2                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _init_timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_adc                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 11    11      0    1357
                                             26 BANK0     11    11      0
                            ___awdiv
                         _modulation
                     i1_set_leds_top
 ---------------------------------------------------------------------------------
 (6) i1_set_leds_top                                       4     0      4     236
                                              0 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (6) _modulation                                          12     4      8     668
                                             14 BANK0     12     4      8
                          i1___aldiv
                           i1___lmul
 ---------------------------------------------------------------------------------
 (7) i1___lmul                                            12     4      8     144
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (7) i1___aldiv                                           15     7      8     352
                                             12 COMMON     1     1      0
                                              0 BANK0     14     6      8
                           i1___lmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              9     5      4     428
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
     _init_adc
     _init_pwm
       _init_timer0
       _init_timer2
   _InitializeTaps
   _ReadSavedSettings
     _FLASH_ReadWord
     _set_leds_bottom
     _set_leds_top
   ___awtoft
     ___ftpack
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     _map (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
   _adc_convert
   _initSwitchBypass
     _getSwitchBypassState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _map
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
   _read_bottom_tactile
     _set_leds_bottom
     _wait_ms
       ___lmul
   _read_top_tactile
     _set_leds_top
     _wait_ms
       ___lmul
   _set_subdivision
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
   _showBootSequence
     _getCurrentLEDState
     _restoreLEDState
     _solidring_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
     _star_tactiles
       _set_leds_bottom
       _set_leds_top
       _wait_ms
         ___lmul
   _trunc
     ___altoft
       ___ftpack
       ___fttol (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         _map (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___ftneg (ARG)
                 ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       _map (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___ftneg (ARG)
               ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___ftneg (ARG)
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
     _frexp
   _updateSwitchBypass
     _setDoublePressState
       _wait_ms
         ___lmul
     _setFeedbackState
     _setSwitchBypassState
       _updateSwitchBypassState
       _wait_ms
         ___lmul
   _updateSwitchTap
     ___aldiv
     _setDoublePressState
       _wait_ms
         ___lmul
     _setLongTapState
   _update_mode

 _isr (ROOT)
   ___awdiv
   _modulation
     i1___aldiv
       i1___lmul (ARG)
     i1___lmul
   i1_set_leds_top

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     25      4A       5       92.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     25      4C       9       95.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      9      50      11      100.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      28      13       50.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      2C      15       55.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
ABS                  0      0     28F      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3D      18       76.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0      3D      20       76.3%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0      3D      22       76.3%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0      40      24       80.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
DATA                 0      0     28F      28        0.0%
BANK11              50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITBANK12           50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12              28      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITBANK13           50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BANK13               0      0       0      33        0.0%
BITBANK14           50      0       0      34        0.0%
BANK14               0      0       0      35        0.0%
BITBANK15           50      0       0      36        0.0%
BANK15               0      0       0      37        0.0%
BITBANK16           50      0       0      38        0.0%
BANK16               0      0       0      39        0.0%
BITBANK17           50      0       0      40        0.0%
BANK17               0      0       0      41        0.0%
BITBANK18           50      0       0      42        0.0%
BANK18               0      0       0      43        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Sat Dec 31 14:45:12 2016

                     _update_mode 1241                      ___altoft@exp 012C                       __CFG_CP$OFF 0000  
                   ___altoft@sign 012D                      ___awdiv@sign 0076                _topTactile_pressed 015D  
      setDoublePressState@f_state 00B2                   _updateSwitchTap 0C15                      ___ftadd@exp1 00B4  
                    ___ftadd@exp2 00B3                      ___ftadd@sign 00B2                               l311 040F  
                             l521 0A2E                               l346 1044                               l710 10A3  
                             l711 10C7                               l703 1094                               l528 1E35  
                             l705 1097                               l706 109A                               l707 109D  
            __size_of_adc_convert 0013                               l708 10A0                               l557 158E  
                             l842 1297                               l846 12BE                               l854 13BB  
                             l870 1269                               l871 126C                               l872 127A  
                             l698 14C8                               l858 13EB                               l699 14EC  
                             l868 1267                               _PR2 001B      solidring_tactiles@ring_delay 00B4  
                             _map 16D6                               _isr 0004                               _tap 02A0  
                    __CFG_BORV$LO 0000                               wreg 0009                      __CFG_IESO$ON 0000  
                    __CFG_FOSC$HS 0000               set_subdivision@tmpX 012D           __end_of_set_leds_bottom 10C8  
                    __CFG_LVP$OFF 0000                    i1___aldiv@sign 0029                      ___ftdiv@cntr 00CF  
                    ___ftdiv@sign 00D4                              _B25k 0220                              l1205 0C2A  
                            l1081 0ABA                              l1219 0CDF                              l1510 0BBE  
                            l1373 1665                              l1570 17DE                              l5011 14C0  
                            l5003 14A0                              l5005 14A8                              l1486 07DB  
                            l5007 14B0                              l5015 14CF                              l1487 07E3  
                            l1479 07C8                              l5009 14B8                              l6011 05A9  
                            l5053 07A5                              l5039 10AA                              l5063 07CD  
                            l5055 07AF                              l6031 06BC                              l6023 0645  
                            l6007 0577                              l5065 07D5                              l5057 07B4  
                            l5049 079E                              l5305 0B47                              l5145 1522  
                            l5241 1676                              l5315 0B5D                              l5403 0898  
                            l5219 1FEA                              l5251 1694                              l6051 078C  
                            l6035 0701                              l6027 068A                              l6019 0613  
                            l5333 0B8A                              l5309 0B4E                              l5501 17D4  
                            l6053 0738                              ?_map 00D5                              l6311 14D5  
                            l5191 133C                              l5351 0BD0                              l5335 0B94  
                            l5327 0B77                              l5423 08E7                              l5503 17E2  
                            l5263 16BF                              l6055 0792                              l6313 10B0  
                            l5345 0BB0                              l5337 0B99                              l5417 08D1  
                            l5281 1370                              l5249 1686                              l5355 0BE2  
                            l5347 0BBA                              l5339 0B9D                              l5451 0946  
                            l5435 0922                              l5507 17F0                              l5283 1380  
                            l5267 16CD                              l5259 16B4                              l5365 0BFD  
                            l5381 083E                              l6309 099B                              l5517 1061  
                            l5375 0828                              l5447 093E                              l5439 092A  
                            l5607 128C                              l5295 1EB1                              l5535 1464  
                            l5711 0A6B                              l5703 0A5D                              l5617 12B3  
                            l5395 087F                              l5627 13B0                              l5475 177C  
                            l5723 0A8D                              l5581 15A1                              l5637 13D7  
                            l5493 17B5                              l5901 0981                              l5725 0A95  
                            l5583 15AA                              l5495 17C6                              l5903 0985  
                            l5911 0996                              l5743 0ABE                              l5831 0CBF  
                            l5815 0C84                              l5807 0C5D                              l5905 098B  
                            l5913 09AF                              l5753 0AE1                              l5737 0AAD  
                            l5809 0C7A                              l5657 126F                              l5907 098F  
                            l5755 0AE7                              l5763 0AFA                              l5827 0CA8  
                            l5659 127E                              ?_isr 0070                              l5749 0AD9  
                            l5861 0D9E                              l5829 0CB0                              l5855 0D2E  
                            l5847 0D22                              l5839 0CD7                              l5951 03E9  
                            l4993 1FB3                              l5857 0D78                              l5793 0C3B  
                            l5929 03D3                              l5699 0A4A                              l5787 0C20  
                            l4989 1FA9                              l5869 0DDE                              l5965 0413  
                            l5967 0416                              l5899 097D                              l5995 04DB  
                            l5987 048A                              l5999 050D                              u6100 15A8  
                            u5205 07EA                              u5125 07AA                              u5065 1FB4  
                            u5145 07C3                              u5305 1E60                              u5075 1FBB  
                            u5315 1FDB                              u5165 07D0                              u5405 16A9  
                            u6055 1ED4                              u5255 152F                              u5415 16B5  
                            u5335 1E7A                              u5280 133A                              u6065 1EDA  
                            u6225 13D0                              u6305 0A56                              u5275 131C  
                            u6085 1587                              u5605 0B8B                              u6165 12AC  
                            u6095 159A                              u5455 1375                              u6335 0A75  
                            u5375 1689                              u6255 1254                              u6425 0ACA  
                            u5635 0B9E                              u5395 1695                              u5575 0B78  
                            u5735 0850                              u5815 08F3                              u6295 0A43  
                            u5665 0BB1                              u5745 0860                              u5825 0903  
                            u5755 0880                              u6715 0D7D                              u6555 0C66  
                            u5765 088F                              u5845 092B                              u6805 0488  
                            u5775 0899                              u5855 0931                              u5935 1784  
                            u6655 0CF0                              u6815 04F2                              u6745 0A27  
                            u6665 0D07                              u6585 0C8E                              u6913 0784  
                            u6905 076C                              u6825 050B                              u6675 0D37  
                            u6835 058E                              u6755 03CE                              u5885 0947  
                            u5965 17B6                              u6685 0D4C                              u6845 05A7  
                            u5895 094D                              u6695 0D60                              u6855 062A  
                            u6775 0405                              u6865 0643                              u5995 17D5  
                            u6875 06A1                              u6795 046F                              u6885 06BA  
                   _star_tactiles 14ED                      __CFG_WRT$OFF 0000                     __CFG_FCMEN$ON 0000  
                            _iCnt 01DA                              _mod1 0320                              _mod2 03A0  
                            _mod3 0420                              _main 03A1                      ___ftpack@arg 00A0  
                    ___ftpack@exp 00A3                              fsr0h 0005                              fsr1h 0007  
                            fsr0l 0004                              indf0 0000                              indf1 0001  
                            fsr1l 0006                              map@x 00D5                              btemp 007E  
                   __CFG_BOREN$ON 0000                              ltemp 007E          __end_of_setFeedbackState 1E6F  
                            start 02F1                              ttemp 007E                              wtemp 007E  
    __end_of_getSwitchBypassState 07FE      updateSwitchTap@tapCntDivisor 00BC      __end_of_setSwitchBypassState 135B  
                 ?i1_set_leds_top 0070                     __CFG_MCLRE$ON 0000                      ___ftmul@cntr 00C3  
                    ___ftmul@sign 00C4                   __end_of_InitApp 1FA0                 ??_restoreLEDState 00A0  
                    ___fttol@exp1 0125                             ??_map 00E4                      ___fttol@lval 0121  
                           ??_isr 003A                   _switchBypass_up 01E2         __size_of_initSwitchBypass 000F  
                 __end_of___aldiv 16D6                             ?_main 0070                   __end_of___awdiv 1447  
                 __end_of___ftadd 0C15                             _CCPR1 0291                             _CCPR2 0298  
                           _CCPR3 0311                             _CCPR4 0318                             _CCPR5 031C  
                           _CCPR9 061A                     __CFG_WDTE$OFF 0000                   __end_of___ftdiv 08BA  
                 __end_of___ftneg 1DDE                   __end_of___ftmul 096E                   ___awdiv@divisor 0070  
                 __end_of___fttol 1800                             i1l117 0118                             i1l152 02EC  
                           i1l144 026F                             i1l147 02E5                             i1l698 12EE  
                           i1l699 1310                   ___awdiv@counter 0075               _ConfigureOscillator 1DC1  
                    ?_init_timer0 0070                      ?_init_timer2 0070               ___lmul@multiplicand 00A4  
                 _switchTap_state 016B                 ??_setLongTapState 00A2                     ___awtoft@sign 00AD  
                           _frexp 1053                             _myBuf 04A0                             _errno 01D2  
                   ___ftpack@sign 00A4                             _timer 004D                    ?_star_tactiles 0070  
                           main@i 01EA                             _trunc 1447                  __end_ofi1___lmul 1F70  
                           ltemp0 007E                             ltemp1 0082                             ltemp2 0086  
                           ltemp3 0080                   __end_of_wait_ms 1053                             ttemp0 007E  
                           ttemp1 0081                             ttemp2 0084                             ttemp3 0087  
                           ttemp4 007F                             status 0003       __end_of_read_bottom_tactile 12C9  
              __size_ofi1___aldiv 0082                             wtemp0 007E                             wtemp1 0080  
                           wtemp2 0082                             wtemp3 0084                             wtemp4 0086  
                           wtemp5 0088                             wtemp6 007F             set_subdivision@scalar 012F  
            ?_ConfigureOscillator 0070                _getCurrentLEDState 1E3C                _updateSwitchBypass 0A34  
         __end_of_updateSwitchTap 0DF8                   __initialization 02F3           _updateSwitchBypassState 07FF  
                    __end_of_main 0795           __size_of_InitializeTaps 0026               i1___lmul@multiplier 0070  
             ?_getCurrentLEDState 0070               ?_updateSwitchBypass 0070                    __CFG_LPBOR$OFF 0000  
                 _set_subdivision 096E                            ??_main 0136                     ___fttol@sign1 0120  
         __size_of_FLASH_ReadWord 0020        __end_of_solidring_tactiles 11BF                    _feedback_timer 0147  
                  _feedback_state 0066                    _feedback_start 0054                  ?_set_leds_bottom 00A0  
                          ?_frexp 00A0                  __end_of___altoft 13A6                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0072               _baseline_delay_time 0058  
            ??_getCurrentLEDState 00A0                  __end_of___awtoft 1EC8                  __end_of___ftpack 07FA  
            ??_updateSwitchBypass 00B6                            ?_trunc 012E                            i1l1373 15E3  
                          i1l4401 1400                            i1l4501 0163                            i1l4407 140B  
                          i1l4511 01A1                            i1l4503 0173                            i1l4433 1442  
                          i1l4425 1431                            i1l4417 1413                            i1l4441 12D6  
                          i1l4521 01CA                            i1l4505 0175                            i1l4419 141F  
                          i1l4443 12DC                            i1l4451 12F4                            i1l4531 020F  
                          i1l4515 01AE                            i1l4429 143A                            i1l4445 12E2  
                          i1l4517 01BD                            i1l4447 12E8                            i1l4439 12D0  
                          i1l4551 0244                            i1l4543 0230                            i1l4535 0214  
                          i1l4527 020C                            i1l4553 0247                            i1l4481 0105  
                          i1l4473 00BC                            i1l4563 0271                            i1l6315 0250  
                          i1l4547 0236                            i1l4539 0220                            i1l4467 00A1  
                          i1l3941 1F49                            i1l6317 12F9                            i1l4581 02E7  
                          i1l4557 024A                            i1l4559 0261                            i1l3945 1F53  
                          i1l4585 02EB                            i1l4569 02B4                            i1l3971 1604  
                          i1l3963 15F4                            i1l3981 1632                            i1l3973 1612  
                          i1l3985 163D                            i1l3989 164B                            _PMADRH 0192  
                          u360_25 1607                            _PMADRL 0191                            _PMDATH 0194  
                          u442_25 1416                            u362_25 1613                            u354_25 1F54  
                          _PMDATL 0193                            u363_25 1627                            u355_25 1F5B  
                          u451_25 0098                            _PMCON2 0196                            u444_25 1420  
                          u364_25 1633                            u445_25 142A                            u453_25 00B3  
                          u462_23 0191                            u446_25 1432                            u455_23 00D5  
                          u471_25 02C7                            u472_25 02E0                            u466_23 01F2  
                          u459_23 0131                            u467_25 0206                            u468_25 0229  
                          u469_25 026A                    _debounce_count 01CA                    _debounce_mode1 01CC  
                  _debounce_mode2 01CE                         ??_InitApp 00A0             ??_ConfigureOscillator 00A0  
        __end_of_read_top_tactile 13F6                    __CFG_PWRTE$OFF 0000                            ___lmul 1FA0  
                       ??___aldiv 00A8                         ??___awdiv 0074                         ??___ftadd 00AE  
                  __CFG_STVREN$ON 0000                         ??___ftdiv 00CB                         ??___ftneg 00A3  
                       ??___ftmul 00BB                         ??___fttol 00EB                  __end_of_init_adc 1DF1  
                __end_of_init_pwm 1241         __size_of_showBootSequence 002B                  ___awdiv@quotient 0077  
                          main@xx 01E7                            main@zz 01E5                 __end_ofi1___aldiv 1654  
           ___ftmul@f3_as_product 00C0                      __pdataBIGRAM 23E8           FLASH_ReadWord@flashAddr 00A0  
                    __pdataCOMMON 007D              _getSwitchBypassState 07FA                         ??_wait_ms 00AE  
            _setSwitchBypassState 1311                   ??_star_tactiles 00B2                            trunc@i 0131  
                          trunc@x 012E            setLongTapState@f_state 00A0           __end_of__initialization 039D  
                      ___altoft@c 0126                        ___ftadd@f1 00A8                        ___ftadd@f2 00AB  
               _bypass_turning_on 0158                        ___ftdiv@f1 00C8                        ___ftdiv@f2 00C5  
                      ___ftdiv@f3 00D0                    _top_push_state 0064         ??_updateSwitchBypassState 00A2  
                      ___ftneg@f1 00A0               _switchBypass_toggle 01D8                        ___awtoft@c 00A8  
         __end_of_set_subdivision 0A34                        ___ftmul@f1 00B5                        ___ftmul@f2 00B8  
                      ___fttol@f1 00E7                  ?_updateSwitchTap 0070                      ?_update_mode 0070  
                  __pcstackCOMMON 0070                      __pidataBANK0 1E17                      __pidataBANK2 1E09  
                    __pidataBANK3 1DDE                      __pidataBANK4 1EEE                      __pidataBANK6 1142  
                    __pidataBANK7 1105                      __pidataBANK8 10C8                     __end_of_frexp 108D  
                   __end_of_trunc 1499                  _initSwitchBypass 0802                         ?i1___lmul 0070  
                 _doubleTap_state 0053                    _OPTION_REGbits 0095             ?_getSwitchBypassState 00A0  
           ?_setSwitchBypassState 00B2                           ??_frexp 00A4              __size_of_init_timer0 0007  
            __size_of_init_timer2 0009                 i1___aldiv@divisor 0020                 i1___aldiv@counter 0028  
                         ??_trunc 00EF                        __pbssBANK0 0045                        __pbssBANK2 0145  
                      __pbssBANK3 01A0                        __pbssBANK5 02A0                        __pbssBANK9 04A0  
                ??i1_set_leds_top 0074                   _restoreLEDState 1E89                   __CFG_VCAPEN$OFF 0000  
                      _delayArray 23E8                 ?_setFeedbackState 00A0                        _delay_time 005C  
                _long_press_limit 0062      __size_of_setDoublePressState 0030                        _delayfound 01D0  
                      __pmaintext 03A1                ??_setFeedbackState 00A2                    _InitializeTaps 1EC8  
                         ?___lmul 00A0                        __pintentry 0004                        _blink_rate 007D  
                   ??_adc_convert 00A2                         ?___altoft 0126                    ___lmul@product 00A8  
                 _setLongTapState 1E6F                         ?___awtoft 00A8                         ?___ftpack 00A0  
                      ??i1___lmul 0078                    _FLASH_ReadWord 1001   __end_of_updateSwitchBypassState 0800  
                     modulation@x 002E                       modulation@y 0032                   _debounce_bypass 01C8  
                   _suspend_blink 0056                         ?_init_adc 0070                         ?_init_pwm 0070  
                         _InitApp 1F70            __end_of_InitializeTaps 1EEE                     ?_set_leds_top 00A0  
                      _knob1_prev 015E                        _knob2_prev 0160                        _knob3_prev 0162  
                      _knob4_prev 0164                        _knob5_prev 0166                  ?_set_subdivision 0126  
                         ___aldiv 1654                           ___awdiv 13F6                   __size_of___lmul 0030  
                         ___ftadd 0B1F                           ___ftdiv 0811                           ___ftneg 1DD5  
                      _knob_1_pos 0149                        _knob_2_pos 014B                           ___ftmul 08BA  
                      _knob_3_pos 014D                           ___fttol 1761                        _knob_4_pos 014F  
                      _knob_5_pos 0151                 _switchTap_pressed 0057                        ??___altoft 012A  
                _showBootSequence 1F16            __end_of_FLASH_ReadWord 1021                        ??___awtoft 00AB  
                      ??___ftpack 00A5                InitializeTaps@itap 00A1                           __ptext1 1241  
                         __ptext2 0C15                           __ptext3 1E6F                           __ptext4 1654  
                         __ptext5 0A34                           __ptext6 1E55                           __ptext7 1FD0  
                         __ptext8 1447                           __ptext9 1053            ??_getSwitchBypassState 00A2  
                       _T2CONbits 001C                  _adjust_sub_delay 01C4                      __size_of_map 008B  
                    __size_of_isr 02ED            ??_setSwitchBypassState 00B4               __end_of_adc_convert 1E3C  
                ___aldiv@dividend 00A4                           _wait_ms 1021           __end_of_restoreLEDState 1EA6  
                         clrloop0 1DFE              end_of_initialization 039D                        _modulation 11BF  
                         init_ram 1DF1                        ??_init_adc 00A0                           initloop 1DF2  
                      ??_init_pwm 00A0      updateSwitchBypassState@state 00A0                _solidring_tactiles 117F  
                   _longTap_timer 0153                     _longTap_state 0067                     _longTap_start 0055  
                  ??_set_leds_top 00A4                 ?_read_top_tactile 0070                   ?_InitializeTaps 0070  
         __end_of_setLongTapState 1E89            i1set_leds_top@ledState 0072                ??_read_top_tactile 00B2  
                ___aldiv@quotient 00AB      __size_of_read_bottom_tactile 0047               ?_solidring_tactiles 0070  
       FLASH_ReadWord@GIEBitValue 00A2              __size_of_update_mode 0041                   ?_FLASH_ReadWord 00A0  
                       _PORTCbits 000E                         _PORTDbits 000F                         _PORTEbits 0010  
            star_tactiles@reverse 00B4                        _test_timer 01C0                         _TRISBbits 008D  
                       _TRISCbits 008E                         _TRISDbits 008F                         _TRISEbits 0090  
                       _TRISFbits 030C                         _TRISGbits 030D                         i1___aldiv 15D2  
         setFeedbackState@f_state 00A0              ??_solidring_tactiles 00B2       __end_of_ConfigureOscillator 1DC5  
     __size_of_getCurrentLEDState 0019                        map@out_max 00E1                        map@out_min 00DE  
     __size_of_updateSwitchBypass 00EB          __end_of_initSwitchBypass 0811                       _CCP1CONbits 0293  
                     ___ftdiv@exp 00D3          __size_of_set_leds_bottom 003B                       _CCP2CONbits 029A  
            _switchBypass_pressed 0155                       _CCP3CONbits 0313                       _CCP4CONbits 031A  
                     _CCP5CONbits 031E                       _CCP6CONbits 0613                       _CCP7CONbits 0616  
                     ___ftmul@exp 00BF                adc_convert@channel 00A3                       _CCP8CONbits 0619  
                     _CCP9CONbits 061C              set_leds_top@ledState 00A2                    __end_of___lmul 1FD0  
                   __pidataBIGRAM 0DF8                       _adc_convert 1E29                     __pidataCOMMON 07FE  
                  _switchTap_down 015C             i1___lmul@multiplicand 0074                 __size_ofi1___lmul 002F  
             start_initialization 02F3             _bottomTactile_pressed 0157               _setDoublePressState 1FD0  
                      ?i1___aldiv 0020                       __end_of_map 1761                       __end_of_isr 02F1  
                ?_restoreLEDState 0070             __end_of_star_tactiles 155C                _adjusted_pot_value 01C6  
                     ?_modulation 002E                        frexp@value 00A0              ?_setDoublePressState 00B2  
                ?_setLongTapState 00A0                          ??___lmul 00A8                       __pdataBANK0 0058  
                     __pdataBANK2 015E                       __pdataBANK3 01DC                       __pdataBANK4 0220  
                     __pdataBANK6 0320                       __pdataBANK7 03A0                       __pdataBANK8 0420  
              i1___aldiv@dividend 0024                     _tap_iteration 0168          __size_of_updateSwitchTap 01E3  
               __size_of___altoft 004B         __size_of_setFeedbackState 001A                 __size_of___awtoft 0022  
               __size_of___ftpack 0065                     ??_init_timer0 00A0                     ??_init_timer2 00A0  
            __end_of_set_leds_top 14ED                         ___latbits 0003                _switchBypass_state 0069  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                     __pcstackBANK2 0120  
                   __pcstackBANK3 01E5                     _delay_counter 0145                  i1___lmul@product 0078  
        __end_of_showBootSequence 1F41          ?_updateSwitchBypassState 00A0                i1___aldiv@quotient 002A  
                  isr@tmpSubDelay 0043                          ?_InitApp 0070                         __pnvBANK3 01EE  
           ??_setDoublePressState 00B4                 __size_of_init_adc 000A                 __size_of_init_pwm 0041  
                        ?___aldiv 00A0                 ??_set_leds_bottom 00A2                _currentBypassState 016A  
                        ?___awdiv 0070                          ?___ftadd 00A8                          ?___ftdiv 00C5  
                        ?___ftneg 00A0                          ?___ftmul 00B5                          ?___fttol 00E7  
                     _blink_delay 01DC               __size_of_modulation 0041                       _blink_state 01E4  
                      _B25kLength 01EE                          _CCPTMRS0 029D                          _CCPTMRS1 029E  
                        _CCPTMRS2 029F                       ??i1___aldiv 007C                          ?_wait_ms 00AC  
             _read_bottom_tactile 1282                    __size_of_frexp 003A                    __size_of_trunc 0052  
             __end_of_init_timer0 1DCC               __end_of_init_timer2 1DD5                         _mod_value 01D4  
                       _mod_timer 01B8                  ??_InitializeTaps 00A0                   ___aldiv@divisor 00A0  
                 ___aldiv@counter 00A9                          _LATBbits 010D                          _LATDbits 010F  
                        _LATFbits 038C                          _LATGbits 038D                    _mod_delay_time 01E0  
                       clear_ram0 1DFD                         _tap_timer 0049                         _tap_total 01BC  
                   set_leds_top@x 00A0                  ??_FLASH_ReadWord 00A2              ?_read_bottom_tactile 0070  
         __size_ofi1_set_leds_top 0048         initSwitchBypass@initState 00B6                         map@in_max 00DB  
                       map@in_min 00D8                         _sub_timer 0045                        _ADCON0bits 009D  
                        i1___lmul 1F41                        _ADCON1bits 009E                         main@i_396 01EC  
        __size_of_set_subdivision 00C6                  set_subdivision@x 0126                  set_subdivision@y 0128  
       __size_of_read_top_tactile 0050     __size_of_getSwitchBypassState 0004     __size_of_setSwitchBypassState 004A  
               ??_updateSwitchTap 00B6                 ___lmul@multiplier 00A0                 _ReadSavedSettings 155C  
               ?_initSwitchBypass 0070                    wait_ms@timeSec 00AC                ?_ReadSavedSettings 0070  
                  wait_ms@timemsl 00AE                         frexp@eptr 00A3       setSwitchBypassState@f_state 00B2  
              ??_initSwitchBypass 00B6                  __size_of_InitApp 0030                       _mode1_state 01DB  
                   ??_update_mode 00A0                       _mode2_state 0159             ??_read_bottom_tactile 00B2  
             updateSwitchTap@iCnt 00BE               ??_ReadSavedSettings 00A4                        _APFCONbits 011D  
               star_tactiles@iLed 00B5                  __size_of___aldiv 0082                  __size_of___awdiv 0051  
                __size_of___ftadd 00F6                  __size_of___ftdiv 00A9                      ?_adc_convert 00A0  
                __size_of___ftneg 0009                          ___altoft 135B                  __size_of___ftmul 00B4  
                __size_of___fttol 009F                          ___awtoft 1EA6             __size_of_set_leds_top 0054  
                        ___ftpack 0795                          _map$2203 00E4            _preset_programmning_on 015B  
          star_tactiles@iLed_1458 00B7                        _ANSELEbits 0190                        _ANSELFbits 040C  
                set_leds_bottom@x 00A0                  _setFeedbackState 1E55                       _init_timer0 1DC5  
                     _init_timer2 1DCC                _delay_time_changed 01DE        __end_of_getCurrentLEDState 1E55  
      __end_of_updateSwitchBypass 0B1F                          __ptext10 135B                          __ptext11 1F16  
                        __ptext20 1282                          __ptext12 14ED                          __ptext21 16D6  
                        __ptext13 117F                          __ptext30 1FA0                          __ptext22 1DD5  
                        __ptext14 1E89                          __ptext31 07FF                          __ptext23 08BA  
                        __ptext15 1E3C                          __ptext40 1200                          __ptext32 07FA  
                        __ptext24 0811                          __ptext16 096E                          __ptext41 1DCC  
                        __ptext33 1E29                          __ptext25 0B1F                          __ptext17 1761  
                        __ptext50 13F6                          __ptext42 1DC5                          __ptext34 155C  
                        __ptext26 0795                          __ptext18 1EA6                          __ptext43 1DE7  
                        __ptext35 1499                          __ptext27 0802                          __ptext19 13A6  
                        __ptext44 1DC1                          __ptext36 108D                          __ptext28 1311  
                        __ptext37 1001                          __ptext29 1021                          __ptext46 12C9  
                        __ptext38 1EC8                          __ptext47 11BF                          __ptext39 1F70  
                        __ptext48 1F41                          __ptext49 15D2         __end_of_ReadSavedSettings 15D2  
                __size_of_wait_ms 0032       __size_of_solidring_tactiles 0040                          _ledState 01B4  
                    ??_modulation 0036                       _mod_counter 0051                        trunc@expon 0134  
                        _init_adc 1DE7                     __size_of_main 03F4                          _init_pwm 1200  
    __size_of_ConfigureOscillator 0004                      _set_leds_top 1499                          _num_taps 0068  
                        int$flags 007E                   i1set_leds_top@x 0070               __end_of_update_mode 1282  
              __end_of_modulation 1200                        _INTCONbits 000B                       _tap_history 01A0  
               ??_set_subdivision 012A                          intlevel1 0000                   _set_leds_bottom 108D  
                      _PMCON1bits 0195                 ?_showBootSequence 0070                 __CFG_CLKOUTEN$OFF 0000  
        __size_of_restoreLEDState 001D                ??_showBootSequence 00B9                   _reset_sub_delay 01D6  
                      _OSCCONbits 0099                      _preset_blink 015A                    i1_set_leds_top 12C9  
__size_of_updateSwitchBypassState 0001            __size_of_star_tactiles 006F          __size_of_setLongTapState 001A  
                _read_top_tactile 13A6                      ___aldiv@sign 00AA        __size_of_ReadSavedSettings 0076  
     __end_of_setDoublePressState 2000                      _CCP10CONbits 061F                 _bottom_push_state 0060  
          __end_ofi1_set_leds_top 1311  
